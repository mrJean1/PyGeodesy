test/run.py typical test results (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W default)

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testAlbers.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersError from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea2 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea4 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaCylindrical from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaNorth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaSouth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.Datums from .datums by testAlbers.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAlbers.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testAlbers.py line 11

    testing testAlbers.py 23.09.28 (module pygeodesy.albers 24.10.15) isLazy=3
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 24.10.15)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 24.10.15)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 24.10.15)
    test 53 AlbersEqualArea.toRepr: AlbersEqualArea(45.0, k0=1.0)
    test 54 AlbersEqualArea.lat0: 45.0
    test 55 AlbersEqualArea.lat1: 45.0
    test 56 AlbersEqualArea.lat2: 45.0

    test 57 AlbersEqualArea2.toRepr: AlbersEqualArea2(40.0, 40.0, k1=1.0)
    test 58 AlbersEqualArea2.lat0: 40.0
    test 59 AlbersEqualArea2.lat1: 40.0
    test 60 AlbersEqualArea2.lat2: 40.0

    test 61 AlbersEqualArea4.toRepr: AlbersEqualArea4(30.0, 30.0, k1=1.0)
    test 62 AlbersEqualArea4.lat0: 30.0
    test 63 AlbersEqualArea4.lat1: 30.0
    test 64 AlbersEqualArea4.lat2: 30.0

    test 65 AlbersEqualArea4.toRepr: AlbersEqualArea4(-30.0, -30.0, k1=1.0)
    test 66 AlbersEqualArea4.lat0: -30.0
    test 67 AlbersEqualArea4.lat1: -30.0
    test 68 AlbersEqualArea4.lat2: -30.0

    test 69 AlbersEqualAreaCylindrical.toRepr: AlbersEqualAreaCylindrical(0.0)
    test 70 AlbersEqualAreaCylindrical.lat0: 0.0
    test 71 AlbersEqualAreaCylindrical.lat1: 0.0
    test 72 AlbersEqualAreaCylindrical.lat2: 0.0

    test 73 AlbersEqualAreaNorth.toRepr: AlbersEqualAreaNorth(90.0)
    test 74 AlbersEqualAreaNorth.lat0: 90.0
    test 75 AlbersEqualAreaNorth.lat1: 90.0
    test 76 AlbersEqualAreaNorth.lat2: 90.0

    test 77 AlbersEqualAreaSouth.toRepr: AlbersEqualAreaSouth(-90.0)
    test 78 AlbersEqualAreaSouth.lat0: -90.0
    test 79 AlbersEqualAreaSouth.lat1: -90.0
    test 80 AlbersEqualAreaSouth.lat2: -90.0

    test 81 error: clat1 (-0.8660254037844387) or clat2 (1.0): negative
    test 82 error: slat1 (-0.5) or slat2 (0.5): negative

    9 of 82 testAlbers.py tests (11.0%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 303.134 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testAuxilats.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.PI_2 from .constants by testAuxilats.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testAuxilats.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testAuxilats.py line 11
# lazily imported pygeodesy.fsum from .fsums by testAuxilats.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testAuxilats.py line 11

    testing testAuxilats.py 23.08.31 (module pygeodesy.auxilats 24.09.04) isLazy=3

    test 1 Aux: 6

    test 2 aout: 0
    test 3 before: None
    test 4 before: _Rtuple
    test 5 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 6 before: _Rtuple
    test 7 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 8 before: _Rtuple
    test 9 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 10 before: _Rtuple
    test 11 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 12 before: _Rtuple
    test 13 after: tuple  FAILED, KNOWN, expected _Rtuple

    test 14 aout: 1
    test 15 before: _Rtuple
    test 16 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 17 before: None
    test 18 before: _Rtuple
    test 19 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 20 before: _Rtuple
    test 21 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 22 before: _Rtuple
    test 23 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 24 before: _Rtuple
    test 25 after: tuple  FAILED, KNOWN, expected _Rtuple

    test 26 aout: 2
    test 27 before: _Rtuple
    test 28 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 29 before: _Rtuple
    test 30 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 31 before: None
    test 32 before: _Rtuple
    test 33 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 34 before: _Rtuple
    test 35 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 36 before: _Rtuple
    test 37 after: tuple  FAILED, KNOWN, expected _Rtuple

    test 38 aout: 3
    test 39 before: _Rtuple
    test 40 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 41 before: _Rtuple
    test 42 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 43 before: _Rtuple
    test 44 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 45 before: None
    test 46 before: _Rtuple
    test 47 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 48 before: _Rtuple
    test 49 after: tuple  FAILED, KNOWN, expected _Rtuple

    test 50 aout: 4
    test 51 before: _Rtuple
    test 52 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 53 before: _Rtuple
    test 54 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 55 before: _Rtuple
    test 56 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 57 before: _Rtuple
    test 58 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 59 before: None
    test 60 before: _Rtuple
    test 61 after: tuple  FAILED, KNOWN, expected _Rtuple

    test 62 aout: 5
    test 63 before: _Rtuple
    test 64 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 65 before: _Rtuple
    test 66 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 67 before: _Rtuple
    test 68 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 69 before: _Rtuple
    test 70 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 71 before: _Rtuple
    test 72 after: tuple  FAILED, KNOWN, expected _Rtuple
    test 73 before: None

    test 74 Aux: 4

    test 75 aout: 0
    test 76 Aux: 4
    test 77 Aux: 4
    test 78 Aux: 4
    test 79 Aux: 4
    test 80 Aux: 4
    test 81 Aux: 4

    test 82 aout: 1
    test 83 Aux: 4
    test 84 Aux: 4
    test 85 Aux: 4
    test 86 Aux: 4
    test 87 Aux: 4
    test 88 Aux: 4

    test 89 aout: 2
    test 90 Aux: 4
    test 91 Aux: 4
    test 92 Aux: 4
    test 93 Aux: 4
    test 94 Aux: 4
    test 95 Aux: 4

    test 96 aout: 3
    test 97 Aux: 4
    test 98 Aux: 4
    test 99 Aux: 4
    test 100 Aux: 4
    test 101 Aux: 4
    test 102 Aux: 4

    test 103 aout: 4
    test 104 Aux: 4
    test 105 Aux: 4
    test 106 Aux: 4
    test 107 Aux: 4
    test 108 Aux: 4
    test 109 Aux: 4

    test 110 aout: 5
    test 111 Aux: 4
    test 112 Aux: 4
    test 113 Aux: 4
    test 114 Aux: 4
    test 115 Aux: 4
    test 116 Aux: 4

    test 117 Aux: 6

    test 118 aout: 0
    test 119 Aux: 6
    test 120 Aux: 6
    test 121 Aux: 6
    test 122 Aux: 6
    test 123 Aux: 6
    test 124 Aux: 6

    test 125 aout: 1
    test 126 Aux: 6
    test 127 Aux: 6
    test 128 Aux: 6
    test 129 Aux: 6
    test 130 Aux: 6
    test 131 Aux: 6

    test 132 aout: 2
    test 133 Aux: 6
    test 134 Aux: 6
    test 135 Aux: 6
    test 136 Aux: 6
    test 137 Aux: 6
    test 138 Aux: 6

    test 139 aout: 3
    test 140 Aux: 6
    test 141 Aux: 6
    test 142 Aux: 6
    test 143 Aux: 6
    test 144 Aux: 6
    test 145 Aux: 6

    test 146 aout: 4
    test 147 Aux: 6
    test 148 Aux: 6
    test 149 Aux: 6
    test 150 Aux: 6
    test 151 Aux: 6
    test 152 Aux: 6

    test 153 aout: 5
    test 154 Aux: 6
    test 155 Aux: 6
    test 156 Aux: 6
    test 157 Aux: 6
    test 158 Aux: 6
    test 159 Aux: 6

    test 160 Aux: 8

    test 161 aout: 0
    test 162 Aux: 8
    test 163 Aux: 8
    test 164 Aux: 8
    test 165 Aux: 8
    test 166 Aux: 8
    test 167 Aux: 8

    test 168 aout: 1
    test 169 Aux: 8
    test 170 Aux: 8
    test 171 Aux: 8
    test 172 Aux: 8
    test 173 Aux: 8
    test 174 Aux: 8

    test 175 aout: 2
    test 176 Aux: 8
    test 177 Aux: 8
    test 178 Aux: 8
    test 179 Aux: 8
    test 180 Aux: 8
    test 181 Aux: 8

    test 182 aout: 3
    test 183 Aux: 8
    test 184 Aux: 8
    test 185 Aux: 8
    test 186 Aux: 8
    test 187 Aux: 8
    test 188 Aux: 8

    test 189 aout: 4
    test 190 Aux: 8
    test 191 Aux: 8
    test 192 Aux: 8
    test 193 Aux: 8
    test 194 Aux: 8
    test 195 Aux: 8

    test 196 aout: 5
    test 197 Aux: 8
    test 198 Aux: 8
    test 199 Aux: 8
    test 200 Aux: 8
    test 201 Aux: 8
    test 202 Aux: 8

    test 203  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 204  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 205  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 206  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 207  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 208  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 209  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 210  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 211  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 212  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 213  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 214  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 215  7 7.023313832609 Phi(tan=0.123198, x=0.992546, y=0.122279): 0.122784560903
    test 216  7 7.000000000000 Beta(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 217  7 6.976762016136 Theta(tan=0.122373, x=0.992546, y=0.121461): 0.122784560903
    test 218  7 6.988357344130 Mu(tan=0.122578, x=0.992571, y=0.121668), iteration=2: 0.122784560903
    test 219  7 6.976762787606 Chi(tan=0.122373, x=1.0, y=0.122373), iteration=3: 0.122784560903
    test 220  7 6.992232010256 Xi(tan=0.122647, x=1.99404, y=0.244563), iteration=2: 0.122784560903

    test 221  7 7.023313832609 Phi(tan=0.123198, x=0.992496, y=0.122273): 0.122784560903
    test 222  7 7.000000000000 Beta(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 223  7 6.976762016136 Theta(tan=0.122373, x=0.992595, y=0.121467): 0.122784560903
    test 224  7 6.988357344130 Mu(tan=0.122578, x=0.992571, y=0.121668): 0.122784560903
    test 225  7 6.976762787606 Chi(tan=0.122373, x=0.992595, y=0.121467): 0.122784560903
    test 226  7 6.992232010256 Xi(tan=0.122647, x=0.992563, y=0.121735): 0.122784560903

    test 227 14 14.045235971490 Phi(tan=0.250167, x=0.970296, y=0.242736): 0.249328002843
    test 228 14 14.000000000000 Beta(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 229 14 13.954897969322 Theta(tan=0.248492, x=0.970296, y=0.241111): 0.249328002843
    test 230 14 13.977407191407 Mu(tan=0.248909, x=0.970391, y=0.241539), iteration=3: 0.249328002843
    test 231 14 13.954903870195 Chi(tan=0.248492, x=1.0, y=0.248492), iteration=3: 0.249328002843
    test 232 14 13.984926538790 Xi(tan=0.249049, x=1.94943, y=0.485503), iteration=3: 0.249328002843

    test 233 14 14.045235971490 Phi(tan=0.250167, x=0.970104, y=0.242688): 0.249328002843
    test 234 14 14.000000000000 Beta(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 235 14 13.954897969322 Theta(tan=0.248492, x=0.970486, y=0.241158): 0.249328002843
    test 236 14 13.977407191407 Mu(tan=0.248909, x=0.970391, y=0.241539): 0.249328002843
    test 237 14 13.954903870195 Chi(tan=0.248492, x=0.970486, y=0.241158): 0.249328002843
    test 238 14 13.984926538790 Xi(tan=0.249049, x=0.970359, y=0.241667): 0.249328002843

    test 239 21 21.064458966605 Phi(tan=0.385155, x=0.93358, y=0.359574): 0.383864035035
    test 240 21 21.000000000000 Beta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 241 21 20.935701709947 Theta(tan=0.382577, x=0.93358, y=0.357166): 0.383864035035
    test 242 21 20.967800709613 Mu(tan=0.383219, x=0.933782, y=0.357843), iteration=3: 0.383864035035
    test 243 21 20.935720172355 Chi(tan=0.382577, x=1.0, y=0.382577), iteration=3: 0.383864035035
    test 244 21 20.978518383767 Xi(tan=0.383434, x=1.87581, y=0.719251), iteration=2: 0.383864035035

    test 245 21 21.064458966605 Phi(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 246 21 21.000000000000 Beta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 247 21 20.935701709947 Theta(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 248 21 20.967800709613 Mu(tan=0.383219, x=0.933782, y=0.357843): 0.383864035035
    test 249 21 20.935720172355 Chi(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 250 21 20.978518383767 Xi(tan=0.383434, x=0.933715, y=0.358018): 0.383864035035

    test 251 28 28.079838480095 Phi(tan=0.533498, x=0.882948, y=0.471051): 0.531709431661
    test 252 28 28.000000000000 Beta(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 253 28 27.920311317014 Theta(tan=0.529927, x=0.882948, y=0.467898): 0.531709431661
    test 254 28 27.960108897314 Mu(tan=0.530817, x=0.883274, y=0.468857), iteration=3: 0.531709431661
    test 255 28 27.920350592883 Chi(tan=0.529928, x=1.0, y=0.529928), iteration=3: 0.531709431661
    test 256 28 27.973388607066 Xi(tan=0.531114, x=1.77426, y=0.942335), iteration=2: 0.531709431661

    test 257 28 28.079838480095 Phi(tan=0.533498, x=0.882293, y=0.470701): 0.531709431661
    test 258 28 28.000000000000 Beta(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 259 28 27.920311317014 Theta(tan=0.529927, x=0.8836, y=0.468243): 0.531709431661
    test 260 28 27.960108897314 Mu(tan=0.530817, x=0.883274, y=0.468857): 0.531709431661
    test 261 28 27.920350592883 Chi(tan=0.529928, x=0.883599, y=0.468244): 0.531709431661
    test 262 28 27.973388607066 Xi(tan=0.531114, x=0.883166, y=0.469061): 0.531709431661

    test 263 35 35.090461812463 Phi(tan=0.702563, x=0.819152, y=0.575506): 0.700207538210
    test 264 35 35.000000000000 Beta(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 265 35 34.909642037079 Theta(tan=0.69786, x=0.819152, y=0.571653): 0.700207538210
    test 266 35 34.954788593575 Mu(tan=0.699032, x=0.819604, y=0.57293), iteration=3: 0.700207538210
    test 267 35 34.909708526741 Chi(tan=0.697862, x=1.0, y=0.697862), iteration=3: 0.700207538210
    test 268 35 34.969841811236 Xi(tan=0.699423, x=1.64627, y=1.15144), iteration=3: 0.700207538210

    test 269 35 35.090461812463 Phi(tan=0.702563, x=0.818245, y=0.574869): 0.700207538210
    test 270 35 35.000000000000 Beta(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 271 35 34.909642037079 Theta(tan=0.69786, x=0.820056, y=0.572284): 0.700207538210
    test 272 35 34.954788593575 Mu(tan=0.699032, x=0.819604, y=0.57293): 0.700207538210
    test 273 35 34.909708526741 Chi(tan=0.697862, x=0.820055, y=0.572285): 0.700207538210
    test 274 35 34.969841811236 Xi(tan=0.699423, x=0.819454, y=0.573145): 0.700207538210

    test 275 42 42.095701889505 Phi(tan=0.903433, x=0.743145, y=0.671382): 0.900404044298
    test 276 42 42.000000000000 Beta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 277 42 41.904331700939 Theta(tan=0.897385, x=0.743145, y=0.666887): 0.900404044298
    test 278 42 41.952155366417 Mu(tan=0.898893, x=0.743703, y=0.66851), iteration=3: 0.900404044298
    test 279 42 41.904427530254 Chi(tan=0.897388, x=1.0, y=0.897388), iteration=3: 0.900404044298
    test 280 42 41.968088079226 Xi(tan=0.899396, x=1.49371, y=1.34344), iteration=2: 0.900404044298

    test 281 42 42.095701889505 Phi(tan=0.903433, x=0.742026, y=0.670371): 0.900404044298
    test 282 42 42.000000000000 Beta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 283 42 41.904331700939 Theta(tan=0.897385, x=0.744261, y=0.667889): 0.900404044298
    test 284 42 41.952155366417 Mu(tan=0.898893, x=0.743703, y=0.66851): 0.900404044298
    test 285 42 41.904427530254 Chi(tan=0.897388, x=0.74426, y=0.66789): 0.900404044298
    test 286 42 41.968088079226 Xi(tan=0.899396, x=0.743517, y=0.668717): 0.900404044298

    test 287 49 49.095253561343 Phi(tan=1.15424, x=0.656059, y=0.757248): 1.150368407221
    test 288 49 49.000000000000 Beta(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 289 49 48.904701906378 Theta(tan=1.14651, x=0.656059, y=0.752179): 1.150368407221
    test 290 49 48.952364883757 Mu(tan=1.14844, x=0.656686, y=0.754164), iteration=3: 1.150368407221
    test 291 49 48.904823373499 Chi(tan=1.14652, x=1.0, y=1.14652), iteration=3: 1.150368407221
    test 292 49 48.968230641178 Xi(tan=1.14908, x=1.31885, y=1.51547), iteration=3: 1.150368407221

    test 293 49 49.095253561343 Phi(tan=1.15424, x=0.654803, y=0.755799): 1.150368407221
    test 294 49 49.000000000000 Beta(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 295 49 48.904701906378 Theta(tan=1.14651, x=0.657313, y=0.753617): 1.150368407221
    test 296 49 48.952364883757 Mu(tan=1.14844, x=0.656686, y=0.754164): 1.150368407221
    test 297 49 48.904823373499 Chi(tan=1.14652, x=0.657312, y=0.753619): 1.150368407221
    test 298 49 48.968230641178 Xi(tan=1.14908, x=0.656477, y=0.754346): 1.150368407221

    test 299 56 56.089150284766 Phi(tan=1.48755, x=0.559193, y=0.831827): 1.482560968513
    test 300 56 56.000000000000 Beta(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 301 56 55.910737485374 Theta(tan=1.47759, x=0.559193, y=0.826258): 1.482560968513
    test 302 56 55.955403845590 Mu(tan=1.48007, x=0.559838, y=0.828602), iteration=3: 1.482560968513
    test 303 56 55.910874805786 Chi(tan=1.4776, x=1.0, y=1.4776), iteration=3: 1.482560968513
    test 304 56 55.970259966049 Xi(tan=1.4809, x=1.12427, y=1.66494), iteration=3: 1.482560968513

    test 305 56 56.089150284766 Phi(tan=1.48755, x=0.557902, y=0.829907): 1.482560968513
    test 306 56 56.000000000000 Beta(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 307 56 55.910737485374 Theta(tan=1.47759, x=0.560484, y=0.828165): 1.482560968513
    test 308 56 55.955403845590 Mu(tan=1.48007, x=0.559838, y=0.828602): 1.482560968513
    test 309 56 55.910874805786 Chi(tan=1.4776, x=0.560482, y=0.828167): 1.482560968513
    test 310 56 55.970259966049 Xi(tan=1.4809, x=0.559623, y=0.828747): 1.482560968513

    test 311 63 63.077760538972 Phi(tan=1.96921, x=0.45399, y=0.894004): 1.962610505505
    test 312 63 63.000000000000 Beta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 313 63 62.922085806991 Theta(tan=1.95603, x=0.45399, y=0.888019): 1.962610505505
    test 314 63 62.961090973753 Mu(tan=1.95932, x=0.454595, y=0.890698), iteration=3: 1.962610505505
    test 315 63 62.922224287619 Chi(tan=1.95604, x=1.0, y=1.95604), iteration=3: 1.962610505505
    test 316 63 62.974054576334 Xi(tan=1.96042, x=0.912868, y=1.7896), iteration=3: 1.962610505505

    test 317 63 63.077760538972 Phi(tan=1.96921, x=0.452781, y=0.891622): 1.962610505505
    test 318 63 63.000000000000 Beta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 319 63 62.922085806991 Theta(tan=1.95603, x=0.455202, y=0.890388): 1.962610505505
    test 320 63 62.961090973753 Mu(tan=1.95932, x=0.454595, y=0.890698): 1.962610505505
    test 321 63 62.922224287619 Chi(tan=1.95604, x=0.4552, y=0.890389): 1.962610505505
    test 322 63 62.974054576334 Xi(tan=1.96042, x=0.454394, y=0.890801): 1.962610505505

    test 323 70 70.061764561164 Phi(tan=2.75672, x=0.34202, y=0.942854): 2.747477419455
    test 324 70 70.000000000000 Beta(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 325 70 69.938076331685 Theta(tan=2.73827, x=0.34202, y=0.936542): 2.747477419455
    test 326 70 69.969087953771 Mu(tan=2.74287, x=0.342527, y=0.939508), iteration=3: 2.747477419455
    test 327 70 69.938198769881 Chi(tan=2.73828, x=1.0, y=2.73828), iteration=3: 2.747477419455
    test 328 70 69.979388479327 Xi(tan=2.74441, x=0.687791, y=1.88758), iteration=3: 2.747477419455

    test 329 70 70.061764561164 Phi(tan=2.75672, x=0.341007, y=0.940061): 2.747477419455
    test 330 70 70.000000000000 Beta(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 331 70 69.938076331685 Theta(tan=2.73827, x=0.343036, y=0.939322): 2.747477419455
    test 332 70 69.969087953771 Mu(tan=2.74287, x=0.342527, y=0.939508): 2.747477419455
    test 333 70 69.938198769881 Chi(tan=2.73828, x=0.343034, y=0.939323): 2.747477419455
    test 334 70 69.979388479327 Xi(tan=2.74441, x=0.342358, y=0.93957): 2.747477419455

    test 335 77 77.042113102652 Phi(tan=4.34605, x=0.224951, y=0.977648): 4.331475874284
    test 336 77 77.000000000000 Beta(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 337 77 76.957759584883 Theta(tan=4.31695, x=0.224951, y=0.971103): 4.331475874284
    test 338 77 76.978919638565 Mu(tan=4.32422, x=0.22531, y=0.974287), iteration=3: 4.331475874284
    test 339 77 76.957849394477 Chi(tan=4.31698, x=1.0, y=4.31698), iteration=3: 4.331475874284
    test 340 77 76.985944723491 Xi(tan=4.32663, x=0.452402, y=1.95738), iteration=3: 4.331475874284

    test 341 77 77.042113102652 Phi(tan=4.34605, x=0.224235, y=0.974535): 4.331475874284
    test 342 77 77.000000000000 Beta(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 343 77 76.957759584883 Theta(tan=4.31695, x=0.225669, y=0.974204): 4.331475874284
    test 344 77 76.978919638565 Mu(tan=4.32422, x=0.22531, y=0.974287): 4.331475874284
    test 345 77 76.957849394477 Chi(tan=4.31698, x=0.225668, y=0.974204): 4.331475874284
    test 346 77 76.985944723491 Xi(tan=4.32663, x=0.22519, y=0.974315): 4.331475874284

    test 347 84 84.019970846274 Phi(tan=9.54637, x=0.104528, y=0.997868): 9.514364454223
    test 348 84 84.000000000000 Beta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 349 84 83.979963440552 Theta(tan=9.48246, x=0.104528, y=0.991187): 9.514364454223
    test 350 84 83.990002289461 Mu(tan=9.49842, x=0.104702, y=0.994504), iteration=3: 9.514364454223
    test 351 84 83.980007825249 Chi(tan=9.48254, x=1.0, y=9.48254), iteration=3: 9.514364454223
    test 352 84 83.993334244416 Xi(tan=9.50373, x=0.210228, y=1.99795), iteration=3: 9.514364454223

    test 353 84 84.019970846274 Phi(tan=9.54637, x=0.104182, y=0.994558): 9.514364454223
    test 354 84 84.000000000000 Beta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 355 84 83.979963440552 Theta(tan=9.48246, x=0.104876, y=0.994485): 9.514364454223
    test 356 84 83.990002289461 Mu(tan=9.49842, x=0.104702, y=0.994504): 9.514364454223
    test 357 84 83.980007825249 Chi(tan=9.48254, x=0.104875, y=0.994485): 9.514364454223
    test 358 84 83.993334244416 Xi(tan=9.50373, x=0.104644, y=0.99451): 9.514364454223

    test 359 91 90.996647866757 Phi(tan=-57.4827, x=-0.0174524, y=1.00321): -57.289961630759
    test 360 91 91.000000000000 Beta(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 361 91 91.003363403239 Theta(tan=-57.0979, x=-0.0174524, y=0.996495): -57.289961630759
    test 362 91 91.001678173837 Mu(tan=-57.194, x=-0.0174817, y=0.999847), iteration=3: -57.289961630759
    test 363 91 91.003355872504 Chi(tan=-57.0983, x=-1, y=57.0983), iteration=3: -57.289961630759
    test 364 91 91.001118877197 Xi(tan=-57.2259, x=-0.0351008, y=2.00867), iteration=3: -57.289961630759

    test 365 91 90.996647866757 Phi(tan=-57.4827, x=-0.0173939, y=0.999849): -57.289961630759
    test 366 91 91.000000000000 Beta(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 367 91 91.003363403239 Theta(tan=-57.0979, x=-0.0175111, y=0.999847): -57.289961630759
    test 368 91 91.001678173837 Mu(tan=-57.194, x=-0.0174817, y=0.999847): -57.289961630759
    test 369 91 91.003355872504 Chi(tan=-57.0983, x=-0.017511, y=0.999847): -57.289961630759
    test 370 91 91.001118877197 Xi(tan=-57.2259, x=-0.0174719, y=0.999847): -57.289961630759

    test 371 98 97.973523052479 Phi(tan=-7.13931, x=-0.139173, y=0.993599): -7.115369722384
    test 372 98 98.000000000000 Beta(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 373 98 98.026562562307 Theta(tan=-7.09151, x=-0.139173, y=0.986948): -7.115369722384
    test 374 98 98.013254483126 Mu(tan=-7.10345, x=-0.139402, y=0.990236), iteration=2: -7.115369722384
    test 375 98 98.026504224575 Chi(tan=-7.09157, x=-1, y=7.09157), iteration=3: -7.115369722384
    test 376 98 98.008837191904 Xi(tan=-7.10742, x=-0.279903, y=1.98939), iteration=3: -7.115369722384

    test 377 98 97.973523052479 Phi(tan=-7.13931, x=-0.138715, y=0.990332): -7.115369722384
    test 378 98 98.000000000000 Beta(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 379 98 98.026562562307 Theta(tan=-7.09151, x=-0.139632, y=0.990203): -7.115369722384
    test 380 98 98.013254483126 Mu(tan=-7.10345, x=-0.139402, y=0.990236): -7.115369722384
    test 381 98 98.026504224575 Chi(tan=-7.09157, x=-0.139631, y=0.990204): -7.115369722384
    test 382 98 98.008837191904 Xi(tan=-7.10742, x=-0.139326, y=0.990247): -7.115369722384

    test 383 105 104.951963747366 Phi(tan=-3.74461, x=-0.258819, y=0.969175): -3.732050807569
    test 384 105 105.000000000000 Beta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 385 105 105.048176169243 Theta(tan=-3.71954, x=-0.258819, y=0.962687): -3.732050807569
    test 386 105 105.024044295704 Mu(tan=-3.7258, x=-0.259224, y=0.965817), iteration=3: -3.732050807569
    test 387 105 105.048075510346 Chi(tan=-3.71956, x=-1, y=3.71956), iteration=3: -3.732050807569
    test 388 105 105.016031662804 Xi(tan=-3.72788, x=-0.520505, y=1.94038), iteration=3: -3.732050807569

    test 389 105 104.951963747366 Phi(tan=-3.74461, x=-0.258009, y=0.966142): -3.732050807569
    test 390 105 105.000000000000 Beta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 391 105 105.048176169243 Theta(tan=-3.71954, x=-0.259631, y=0.965708): -3.732050807569
    test 392 105 105.024044295704 Mu(tan=-3.7258, x=-0.259224, y=0.965817): -3.732050807569
    test 393 105 105.048075510346 Chi(tan=-3.71956, x=-0.259629, y=0.965708): -3.732050807569
    test 394 105 105.016031662804 Xi(tan=-3.72788, x=-0.259089, y=0.965853): -3.732050807569

    test 395 112 111.933246025813 Phi(tan=-2.48341, x=-0.374607, y=0.930303): -2.475086853416
    test 396 112 112.000000000000 Beta(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 397 112 112.066915437341 Theta(tan=-2.46679, x=-0.374607, y=0.924075): -2.475086853416
    test 398 112 112.033407196712 Mu(tan=-2.47094, x=-0.375147, y=0.926965), iteration=3: -2.475086853416
    test 399 112 112.066786634266 Chi(tan=-2.4668, x=-1, y=2.4668), iteration=3: -2.475086853416
    test 400 112 112.022275613932 Xi(tan=-2.47232, x=-0.753301, y=1.8624), iteration=3: -2.475086853416

    test 401 112 111.933246025813 Phi(tan=-2.48341, x=-0.373526, y=0.92762): -2.475086853416
    test 402 112 112.000000000000 Beta(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 403 112 112.066915437341 Theta(tan=-2.46679, x=-0.375689, y=0.926746): -2.475086853416
    test 404 112 112.033407196712 Mu(tan=-2.47094, x=-0.375147, y=0.926965): -2.475086853416
    test 405 112 112.066786634266 Chi(tan=-2.4668, x=-0.375687, y=0.926747): -2.475086853416
    test 406 112 112.022275613932 Xi(tan=-2.47232, x=-0.374967, y=0.927038): -2.475086853416

    test 407 119 118.918479987923 Phi(tan=-1.81012, x=-0.48481, y=0.877562): -1.804047755271
    test 408 119 119.000000000000 Beta(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 409 119 119.081665222463 Theta(tan=-1.798, x=-0.48481, y=0.871687): -1.804047755271
    test 410 119 119.040787185717 Mu(tan=-1.80102, x=-0.485432, y=0.874274), iteration=2: -1.804047755271
    test 411 119 119.081525372917 Chi(tan=-1.79801, x=-1, y=1.79801), iteration=3: -1.804047755271
    test 412 119 119.027198394988 Xi(tan=-1.80203, x=-0.974807, y=1.75663), iteration=3: -1.804047755271

    test 413 119 118.918479987923 Phi(tan=-1.81012, x=-0.483565, y=0.875309): -1.804047755271
    test 414 119 119.000000000000 Beta(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 415 119 119.081665222463 Theta(tan=-1.798, x=-0.486056, y=0.873928): -1.804047755271
    test 416 119 119.040787185717 Mu(tan=-1.80102, x=-0.485432, y=0.874274): -1.804047755271
    test 417 119 119.081525372917 Chi(tan=-1.79801, x=-0.486054, y=0.873929): -1.804047755271
    test 418 119 119.027198394988 Xi(tan=-1.80203, x=-0.485225, y=0.874389): -1.804047755271

    test 419 126 125.908544256035 Phi(tan=-1.38101, x=-0.587785, y=0.811739): -1.376381920471
    test 420 126 126.000000000000 Beta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 421 126 126.091550707249 Theta(tan=-1.37177, x=-0.587785, y=0.806305): -1.376381920471
    test 422 126 126.045745652474 Mu(tan=-1.37407, x=-0.588431, y=0.808547), iteration=3: -1.376381920471
    test 423 126 126.091416595783 Chi(tan=-1.37177, x=-1, y=1.37177), iteration=3: -1.376381920471
    test 424 126 126.030507332108 Xi(tan=-1.37484, x=-1.18171, y=1.62467), iteration=2: -1.376381920471

    test 425 126 125.908544256035 Phi(tan=-1.38101, x=-0.586493, y=0.809954): -1.376381920471
    test 426 126 126.000000000000 Beta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 427 126 126.091550707249 Theta(tan=-1.37177, x=-0.589077, y=0.808077): -1.376381920471
    test 428 126 126.045745652474 Mu(tan=-1.37407, x=-0.588431, y=0.808547): -1.376381920471
    test 429 126 126.091416595783 Chi(tan=-1.37177, x=-0.589075, y=0.808078): -1.376381920471
    test 430 126 126.030507332108 Xi(tan=-1.37484, x=-0.588216, y=0.808704): -1.376381920471

    test 431 133 132.904033458108 Phi(tan=-1.07598, x=-0.681998, y=0.733814): -1.072368710025
    test 432 133 133.000000000000 Beta(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 433 133 133.095989026852 Theta(tan=-1.06877, x=-0.681998, y=0.728902): -1.072368710025
    test 434 133 133.047987474831 Mu(tan=-1.07057, x=-0.682611, y=0.730782), iteration=3: -1.072368710025
    test 435 133 133.095874142459 Chi(tan=-1.06878, x=-1, y=1.06878), iteration=2: -1.072368710025
    test 436 133 133.032005165725 Xi(tan=-1.07117, x=-1.37094, y=1.46851), iteration=3: -1.072368710025

    test 437 133 132.904033458108 Phi(tan=-1.07598, x=-0.680772, y=0.732495): -1.072368710025
    test 438 133 133.000000000000 Beta(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 439 133 133.095989026852 Theta(tan=-1.06877, x=-0.683223, y=0.73021): -1.072368710025
    test 440 133 133.047987474831 Mu(tan=-1.07057, x=-0.682611, y=0.730782): -1.072368710025
    test 441 133 133.095874142459 Chi(tan=-1.06878, x=-0.683221, y=0.730211): -1.072368710025
    test 442 133 133.032005165725 Xi(tan=-1.07117, x=-0.682407, y=0.730973): -1.072368710025

    test 443 140 139.905221888853 Phi(tan=-0.841922, x=-0.766044, y=0.64495): -0.839099631177
    test 444 140 140.000000000000 Beta(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 445 140 140.094722853987 Theta(tan=-0.836286, x=-0.766044, y=0.640632): -0.839099631177
    test 446 140 140.047378679025 Mu(tan=-0.837691, x=-0.766576, y=0.642154), iteration=3: -0.839099631177
    test 447 140 140.094635301560 Chi(tan=-0.836289, x=-1, y=0.836289), iteration=3: -0.839099631177
    test 448 140 140.031601928062 Xi(tan=-0.83816, x=-1.53968, y=1.2905), iteration=3: -0.839099631177

    test 449 140 139.905221888853 Phi(tan=-0.841922, x=-0.76498, y=0.644054): -0.839099631177
    test 450 140 140.000000000000 Beta(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 451 140 140.094722853987 Theta(tan=-0.836286, x=-0.767106, y=0.64152): -0.839099631177
    test 452 140 140.047378679025 Mu(tan=-0.837691, x=-0.766576, y=0.642154): -0.839099631177
    test 453 140 140.094635301560 Chi(tan=-0.836289, x=-0.767105, y=0.641521): -0.839099631177
    test 454 140 140.031601928062 Xi(tan=-0.83816, x=-0.766399, y=0.642365): -0.839099631177

    test 455 147 146.912045740495 Phi(tan=-0.651592, x=-0.838671, y=0.546471): -0.649407593198
    test 456 147 147.000000000000 Beta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 457 147 147.087834196097 Theta(tan=-0.64723, x=-0.838671, y=0.542813): -0.649407593198
    test 458 147 147.043954583618 Mu(tan=-0.648317, x=-0.839088, y=0.543995), iteration=3: -0.649407593198
    test 459 147 147.087775924345 Chi(tan=-0.647232, x=-1, y=0.647232), iteration=3: -0.649407593198
    test 460 147 147.029320517871 Xi(tan=-0.64868, x=-1.68543, y=1.09331), iteration=3: -0.649407593198

    test 461 147 146.912045740495 Phi(tan=-0.651592, x=-0.837834, y=0.545926): -0.649407593198
    test 462 147 147.000000000000 Beta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 463 147 147.087834196097 Theta(tan=-0.64723, x=-0.839505, y=0.543353): -0.649407593198
    test 464 147 147.043954583618 Mu(tan=-0.648317, x=-0.839088, y=0.543995): -0.649407593198
    test 465 147 147.087775924345 Chi(tan=-0.647232, x=-0.839504, y=0.543354): -0.649407593198
    test 466 147 147.029320517871 Xi(tan=-0.64868, x=-0.838949, y=0.54421): -0.649407593198

    test 467 154 153.924105301481 Phi(tan=-0.489373, x=-0.898794, y=0.439846): -0.487732588566
    test 468 154 154.000000000000 Beta(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 469 154 154.075737936138 Theta(tan=-0.486097, x=-0.898794, y=0.436901): -0.487732588566
    test 470 154 154.037917900127 Mu(tan=-0.486914, x=-0.899084, y=0.437776), iteration=3: -0.487732588566
    test 471 154 154.075705391203 Chi(tan=-0.486098, x=-1, y=0.486098), iteration=3: -0.487732588566
    test 472 154 154.025295587615 Xi(tan=-0.487186, x=-1.80605, y=0.879882), iteration=3: -0.487732588566

    test 473 154 153.924105301481 Phi(tan=-0.489373, x=-0.898213, y=0.439561): -0.487732588566
    test 474 154 154.000000000000 Beta(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 475 154 154.075737936138 Theta(tan=-0.486097, x=-0.899373, y=0.437183): -0.487732588566
    test 476 154 154.037917900127 Mu(tan=-0.486914, x=-0.899084, y=0.437776): -0.487732588566
    test 477 154 154.075705391203 Chi(tan=-0.486098, x=-0.899372, y=0.437183): -0.487732588566
    test 478 154 154.025295587615 Xi(tan=-0.487186, x=-0.898987, y=0.437974): -0.487732588566

    test 479 161 160.940687365843 Phi(tan=-0.345486, x=-0.945519, y=0.326663): -0.344327613290
    test 480 161 161.000000000000 Beta(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 481 161 161.059155871563 Theta(tan=-0.343173, x=-0.945519, y=0.324477): -0.344327613290
    test 482 161 161.029626856612 Mu(tan=-0.343749, x=-0.945687, y=0.325079), iteration=3: -0.344327613290
    test 483 161 161.059141853346 Chi(tan=-0.343173, x=-1, y=0.343173), iteration=3: -0.344327613290
    test 484 161 161.019765751188 Xi(tan=-0.343942, x=-1.89975, y=0.653405), iteration=3: -0.344327613290

    test 485 161 160.940687365843 Phi(tan=-0.345486, x=-0.945181, y=0.326547): -0.344327613290
    test 486 161 161.000000000000 Beta(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 487 161 161.059155871563 Theta(tan=-0.343173, x=-0.945854, y=0.324592): -0.344327613290
    test 488 161 161.029626856612 Mu(tan=-0.343749, x=-0.945687, y=0.325079): -0.344327613290
    test 489 161 161.059141853346 Chi(tan=-0.343173, x=-0.945854, y=0.324592): -0.344327613290
    test 490 161 161.019765751188 Xi(tan=-0.343942, x=-0.945631, y=0.325242): -0.344327613290

    test 491 168 167.960806838131 Phi(tan=-0.213272, x=-0.978148, y=0.208611): -0.212556561670
    test 492 168 168.000000000000 Beta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 493 168 168.039073098008 Theta(tan=-0.211844, x=-0.978148, y=0.207215): -0.212556561670
    test 494 168 168.019574010622 Mu(tan=-0.2122, x=-0.978219, y=0.207578), iteration=2: -0.212556561670
    test 495 168 168.039069322354 Chi(tan=-0.211844, x=-1, y=0.211844), iteration=2: -0.212556561670
    test 496 168 168.013059526305 Xi(tan=-0.212318, x=-1.96517, y=0.417243), iteration=3: -0.212556561670

    test 497 168 167.960806838131 Phi(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 498 168 168.000000000000 Beta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 499 168 168.039073098008 Theta(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 500 168 168.019574010622 Mu(tan=-0.2122, x=-0.978219, y=0.207578): -0.212556561670
    test 501 168 168.039069322354 Chi(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 502 168 168.013059526305 Xi(tan=-0.212318, x=-0.978195, y=0.207689): -0.212556561670

    test 503 175 174.983265245736 Phi(tan=-0.087783, x=-0.996195, y=0.0874489): -0.087488663526
    test 504 175 175.000000000000 Beta(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 505 175 175.016679496811 Theta(tan=-0.0871953, x=-0.996195, y=0.0868635): -0.087488663526
    test 506 175 175.008356987733 Mu(tan=-0.0873417, x=-0.996207, y=0.0870104), iteration=3: -0.087488663526
    test 507 175 175.016679213606 Chi(tan=-0.0871953, x=-1, y=0.0871953), iteration=2: -0.087488663526
    test 508 175 175.005575818689 Xi(tan=-0.0873906, x=-2.00135, y=0.174899), iteration=2: -0.087488663526

    test 509 175 174.983265245736 Phi(tan=-0.087783, x=-0.996169, y=0.0874467): -0.087488663526
    test 510 175 175.000000000000 Beta(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 511 175 175.016679496811 Theta(tan=-0.0871953, x=-0.99622, y=0.0868657): -0.087488663526
    test 512 175 175.008356987733 Mu(tan=-0.0873417, x=-0.996207, y=0.0870104): -0.087488663526
    test 513 175 175.016679213606 Chi(tan=-0.0871953, x=-0.99622, y=0.0868657): -0.087488663526
    test 514 175 175.005575818689 Xi(tan=-0.0873906, x=-0.996203, y=0.0870588): -0.087488663526

    test 515 182 182.006722688009 Phi(tan=0.0350382, x=-0.999391, y=-0.0350169): 0.034920769492
    test 516 182 182.000000000000 Beta(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 517 182 181.993299797077 Theta(tan=0.0348037, x=-0.999391, y=-0.0347825): 0.034920769492
    test 518 182 181.996642883728 Mu(tan=0.0348621, x=-0.999393, y=-0.0348409), iteration=3: 0.034920769492
    test 519 182 181.993299815318 Chi(tan=0.0348037, x=-1, y=-0.0348037), iteration=2: 0.034920769492
    test 520 182 181.997760106963 Xi(tan=0.0348816, x=-2.00776, y=-0.0700339), iteration=3: 0.034920769492

    test 521 182 182.006722688009 Phi(tan=0.0350382, x=-0.999387, y=-0.0350168): 0.034920769492
    test 522 182 182.000000000000 Beta(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 523 182 181.993299797077 Theta(tan=0.0348037, x=-0.999395, y=-0.0347826): 0.034920769492
    test 524 182 181.996642883728 Mu(tan=0.0348621, x=-0.999393, y=-0.0348409): 0.034920769492
    test 525 182 181.993299815318 Chi(tan=0.0348037, x=-0.999395, y=-0.0347826): 0.034920769492
    test 526 182 181.997760106963 Xi(tan=0.0348816, x=-0.999392, y=-0.0348604): 0.034920769492

    test 527 189 189.029778772560 Phi(tan=0.158917, x=-0.987688, y=-0.156961): 0.158384440325
    test 528 189 189.000000000000 Beta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 529 189 188.970316191157 Theta(tan=0.157853, x=-0.987688, y=-0.15591): 0.158384440325
    test 530 189 188.985128467162 Mu(tan=0.158118, x=-0.987729, y=-0.156178), iteration=3: 0.158384440325
    test 531 189 188.970317814928 Chi(tan=0.157853, x=-1, y=-0.157853), iteration=2: 0.158384440325
    test 532 189 188.990077770379 Xi(tan=0.158207, x=-1.9843, y=-0.31393), iteration=3: 0.158384440325

    test 533 189 189.029778772560 Phi(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 534 189 189.000000000000 Beta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 535 189 188.970316191157 Theta(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 536 189 188.985128467162 Mu(tan=0.158118, x=-0.987729, y=-0.156178): 0.158384440325
    test 537 189 188.970317814928 Chi(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 538 189 188.990077770379 Xi(tan=0.158207, x=-0.987715, y=-0.156263): 0.158384440325

    test 539 196 196.051057415277 Phi(tan=0.28771, x=-0.961262, y=-0.276565): 0.286745385759
    test 540 196 196.000000000000 Beta(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 541 196 195.949087795468 Theta(tan=0.285784, x=-0.961262, y=-0.274713): 0.286745385759
    test 542 196 195.974498585700 Mu(tan=0.286264, x=-0.961384, y=-0.275209), iteration=2: 0.286745385759
    test 543 196 195.949096442818 Chi(tan=0.285784, x=-1, y=-0.285784), iteration=3: 0.286745385759
    test 544 196 195.982986192635 Xi(tan=0.286424, x=-1.93132, y=-0.553176), iteration=3: 0.286745385759

    test 545 196 196.051057415277 Phi(tan=0.28771, x=-0.961016, y=-0.276494): 0.286745385759
    test 546 196 196.000000000000 Beta(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 547 196 195.949087795468 Theta(tan=0.285784, x=-0.961506, y=-0.274783): 0.286745385759
    test 548 196 195.974498585700 Mu(tan=0.286264, x=-0.961384, y=-0.275209): 0.286745385759
    test 549 196 195.949096442818 Chi(tan=0.285784, x=-0.961506, y=-0.274783): 0.286745385759
    test 550 196 195.982986192635 Xi(tan=0.286424, x=-0.961344, y=-0.275352): 0.286745385759

    test 551 203 203.069290086312 Phi(tan=0.425903, x=-0.920505, y=-0.392046): 0.424474816210
    test 552 203 203.000000000000 Beta(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 553 203 202.930871376810 Theta(tan=0.423052, x=-0.920505, y=-0.389421): 0.424474816210
    test 554 203 202.965385294258 Mu(tan=0.423762, x=-0.920741, y=-0.390175), iteration=3: 0.424474816210
    test 555 203 202.930894974288 Chi(tan=0.423052, x=-1, y=-0.423052), iteration=3: 0.424474816210
    test 556 203 202.976907357652 Xi(tan=0.423999, x=-1.84959, y=-0.784226), iteration=3: 0.424474816210

    test 557 203 203.069290086312 Phi(tan=0.425903, x=-0.920032, y=-0.391844): 0.424474816210
    test 558 203 203.000000000000 Beta(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 559 203 202.930871376810 Theta(tan=0.423052, x=-0.920976, y=-0.38962): 0.424474816210
    test 560 203 202.965385294258 Mu(tan=0.423762, x=-0.920741, y=-0.390175): 0.424474816210
    test 561 203 202.930894974288 Chi(tan=0.423052, x=-0.920975, y=-0.389621): 0.424474816210
    test 562 203 202.976907357652 Xi(tan=0.423999, x=-0.920662, y=-0.39036): 0.424474816210

    test 563 210 210.083392202979 Phi(tan=0.579293, x=-0.866025, y=-0.501682): 0.577350269190
    test 564 210 210.000000000000 Beta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 565 210 209.916747713236 Theta(tan=0.575415, x=-0.866025, y=-0.498324): 0.577350269190
    test 566 210 209.958330176858 Mu(tan=0.576381, x=-0.866389, y=-0.49937), iteration=3: 0.577350269190
    test 567 210 209.916794258180 Chi(tan=0.575416, x=-1, y=-0.575416), iteration=2: 0.577350269190
    test 568 210 209.972202619898 Xi(tan=0.576704, x=-1.74031, y=-1.00365), iteration=3: 0.577350269190

    test 569 210 210.083392202979 Phi(tan=0.579293, x=-0.865297, y=-0.50126): 0.577350269190
    test 570 210 210.000000000000 Beta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 571 210 209.916747713236 Theta(tan=0.575415, x=-0.866751, y=-0.498741): 0.577350269190
    test 572 210 209.958330176858 Mu(tan=0.576381, x=-0.866389, y=-0.49937): 0.577350269190
    test 573 210 209.916794258180 Chi(tan=0.575416, x=-0.866751, y=-0.498742): 0.577350269190
    test 574 210 209.972202619898 Xi(tan=0.576704, x=-0.866268, y=-0.49958): 0.577350269190

    test 575 217 217.092527888642 Phi(tan=0.756089, x=-0.798636, y=-0.60384): 0.753554050103
    test 576 217 217.000000000000 Beta(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 577 217 216.907557725734 Theta(tan=0.751028, x=-0.798636, y=-0.599797): 0.753554050103
    test 578 217 216.953752130797 Mu(tan=0.752289, x=-0.799121, y=-0.60117), iteration=2: 0.753554050103
    test 579 217 216.907632616913 Chi(tan=0.75103, x=-1, y=-0.75103), iteration=3: 0.753554050103
    test 580 217 216.969151185746 Xi(tan=0.75271, x=-1.60509, y=-1.20817), iteration=2: 0.753554050103

    test 581 217 217.092527888642 Phi(tan=0.756089, x=-0.797663, y=-0.603104): 0.753554050103
    test 582 217 217.000000000000 Beta(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 583 217 216.907557725734 Theta(tan=0.751028, x=-0.799605, y=-0.600526): 0.753554050103
    test 584 217 216.953752130797 Mu(tan=0.752289, x=-0.799121, y=-0.60117): 0.753554050103
    test 585 217 216.907632616913 Chi(tan=0.75103, x=-0.799605, y=-0.600527): 0.753554050103
    test 586 217 216.969151185746 Xi(tan=0.75271, x=-0.798959, y=-0.601385): 0.753554050103

    test 587 224 224.096159176144 Phi(tan=0.968937, x=-0.71934, y=-0.696995): 0.965688774807
    test 588 224 224.000000000000 Beta(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 589 224 223.903852093789 Theta(tan=0.962451, x=-0.71934, y=-0.692329): 0.965688774807
    test 590 224 223.951922536530 Mu(tan=0.964068, x=-0.719922, y=-0.694055), iteration=2: 0.965688774807
    test 591 224 223.903955899504 Chi(tan=0.962454, x=-1, y=-0.962454), iteration=3: 0.965688774807
    test 592 224 223.967933596024 Xi(tan=0.964608, x=-1.44592, y=-1.39475), iteration=3: 0.965688774807

    test 593 224 224.096159176144 Phi(tan=0.968937, x=-0.718173, y=-0.695865): 0.965688774807
    test 594 224 224.000000000000 Beta(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 595 224 223.903852093789 Theta(tan=0.962451, x=-0.720504, y=-0.69345): 0.965688774807
    test 596 224 223.951922536530 Mu(tan=0.964068, x=-0.719922, y=-0.694055): 0.965688774807
    test 597 224 223.903955899504 Chi(tan=0.962454, x=-0.720503, y=-0.693452): 0.965688774807
    test 598 224 223.967933596024 Xi(tan=0.964608, x=-0.719728, y=-0.694256): 0.965688774807

    test 599 231 231.094076843128 Phi(tan=1.23905, x=-0.62932, y=-0.77976): 1.234897156535
    test 600 231 231.000000000000 Beta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 601 231 230.905857444036 Theta(tan=1.23076, x=-0.62932, y=-0.77454): 1.234897156535
    test 602 231 230.952949275029 Mu(tan=1.23283, x=-0.629958, y=-0.776629), iteration=2: 1.234897156535
    test 603 231 230.905984687641 Chi(tan=1.23076, x=-1, y=-1.23076), iteration=3: 1.234897156535
    test 604 231 230.968621174367 Xi(tan=1.23352, x=-1.26515, y=-1.56058), iteration=3: 1.234897156535

    test 605 231 231.094076843128 Phi(tan=1.23905, x=-0.628044, y=-0.778178): 1.234897156535
    test 606 231 231.000000000000 Beta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 607 231 230.905857444036 Theta(tan=1.23076, x=-0.630596, y=-0.776111): 1.234897156535
    test 608 231 230.952949275029 Mu(tan=1.23283, x=-0.629958, y=-0.776629): 1.234897156535
    test 609 231 230.905984687641 Chi(tan=1.23076, x=-0.630595, y=-0.776112): 1.234897156535
    test 610 231 230.968621174367 Xi(tan=1.23352, x=-0.629746, y=-0.776801): 1.234897156535

    test 611 238 238.086411314589 Phi(tan=1.60572, x=-0.529919, y=-0.850901): 1.600334529041
    test 612 238 238.000000000000 Beta(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 613 238 237.913461373388 Theta(tan=1.59497, x=-0.529919, y=-0.845205): 1.600334529041
    test 614 238 237.956770509194 Mu(tan=1.59765, x=-0.530559, y=-0.847648), iteration=3: 1.600334529041
    test 615 238 237.913600687903 Chi(tan=1.59498, x=-1, y=-1.59498), iteration=2: 1.600334529041
    test 616 238 237.971172027129 Xi(tan=1.59854, x=-1.06545, y=-1.70318), iteration=3: 1.600334529041

    test 617 238 238.086411314589 Phi(tan=1.60572, x=-0.52864, y=-0.848846): 1.600334529041
    test 618 238 238.000000000000 Beta(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 619 238 237.913461373388 Theta(tan=1.59497, x=-0.5312, y=-0.847247): 1.600334529041
    test 620 238 237.956770509194 Mu(tan=1.59765, x=-0.530559, y=-0.847648): 1.600334529041
    test 621 238 237.913600687903 Chi(tan=1.59498, x=-0.531197, y=-0.847248): 1.600334529041
    test 622 238 237.971172027129 Xi(tan=1.59854, x=-0.530346, y=-0.847781): 1.600334529041

    test 623 245 245.073623344306 Phi(tan=2.15172, x=-0.422618, y=-0.909357): 2.144506920510
    test 624 245 245.000000000000 Beta(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 625 245 244.926217548699 Theta(tan=2.13732, x=-0.422618, y=-0.903269): 2.144506920510
    test 626 245 244.963158554024 Mu(tan=2.14091, x=-0.423201, y=-0.906036), iteration=2: 2.144506920510
    test 627 245 244.926353236006 Chi(tan=2.13733, x=-1, y=-2.13733), iteration=3: 2.144506920510
    test 628 245 244.975433776813 Xi(tan=2.14211, x=-0.849812, y=-1.82039), iteration=3: 2.144506920510

    test 629 245 245.073623344306 Phi(tan=2.15172, x=-0.421453, y=-0.90685): 2.144506920510
    test 630 245 245.000000000000 Beta(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 631 245 244.926217548699 Theta(tan=2.13732, x=-0.423785, y=-0.905763): 2.144506920510
    test 632 245 244.963158554024 Mu(tan=2.14091, x=-0.423201, y=-0.906036): 2.144506920510
    test 633 245 244.926353236006 Chi(tan=2.13733, x=-0.423783, y=-0.905764): 2.144506920510
    test 634 245 244.975433776813 Xi(tan=2.14211, x=-0.423007, y=-0.906127): 2.144506920510

    test 635 252 252.056475395211 Phi(tan=3.08804, x=-0.309017, y=-0.954256): 3.077683537175
    test 636 252 252.000000000000 Beta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 637 252 251.943370950484 Theta(tan=3.06736, x=-0.309017, y=-0.947868): 3.077683537175
    test 638 252 251.971733559721 Mu(tan=3.07253, x=-0.309486, y=-0.950904), iteration=3: 3.077683537175
    test 639 252 251.943485649406 Chi(tan=3.06739, x=-1, y=-3.06739), iteration=2: 3.077683537175
    test 640 252 251.981152809484 Xi(tan=3.07424, x=-0.621437, y=-1.91045), iteration=3: 3.077683537175

    test 641 252 252.056475395211 Phi(tan=3.08804, x=-0.308079, y=-0.951361): 3.077683537175
    test 642 252 252.000000000000 Beta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 643 252 251.943370950484 Theta(tan=3.06736, x=-0.309957, y=-0.950751): 3.077683537175
    test 644 252 251.971733559721 Mu(tan=3.07253, x=-0.309486, y=-0.950904): 3.077683537175
    test 645 252 251.943485649406 Chi(tan=3.06739, x=-0.309955, y=-0.950751): 3.077683537175
    test 646 252 251.981152809484 Xi(tan=3.07424, x=-0.30933, y=-0.950955): 3.077683537175

    test 647 259 259.035985707307 Phi(tan=5.16186, x=-0.190809, y=-0.984929): 5.144554015970
    test 648 259 259.000000000000 Beta(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 649 259 258.963902062378 Theta(tan=5.12731, x=-0.190809, y=-0.978336): 5.144554015970
    test 650 259 258.981986158342 Mu(tan=5.13593, x=-0.191118, y=-0.981567), iteration=2: 5.144554015970
    test 651 259 258.963979961875 Chi(tan=5.12734, x=-1, y=-5.12734), iteration=3: 5.144554015970
    test 652 259 258.987989441453 Xi(tan=5.1388, x=-0.383745, y=-1.97199), iteration=3: 5.144554015970

    test 653 259 259.035985707307 Phi(tan=5.16186, x=-0.190192, y=-0.981747): 5.144554015970
    test 654 259 259.000000000000 Beta(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 655 259 258.963902062378 Theta(tan=5.12731, x=-0.191427, y=-0.981507): 5.144554015970
    test 656 259 258.981986158342 Mu(tan=5.13593, x=-0.191118, y=-0.981567): 5.144554015970
    test 657 259 258.963979961875 Chi(tan=5.12734, x=-0.191426, y=-0.981507): 5.144554015970
    test 658 259 258.987989441453 Xi(tan=5.1388, x=-0.191015, y=-0.981587): 5.144554015970

    test 659 266 266.013367926454 Phi(tan=14.3488, x=-0.0697565, y=-1.00092): 14.300666256712
    test 660 266 266.000000000000 Beta(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 661 266 265.986587541025 Theta(tan=14.2527, x=-0.0697565, y=-0.994219): 14.300666256712
    test 662 266 265.993307710088 Mu(tan=14.2767, x=-0.069873, y=-0.997556), iteration=3: 14.300666256712
    test 663 266 265.986617434521 Chi(tan=14.2528, x=-1, y=-14.2528), iteration=3: 14.300666256712
    test 664 266 265.995538081208 Xi(tan=14.2847, x=-0.140295, y=-2.00408), iteration=3: 14.300666256712

    test 665 266 266.013367926454 Phi(tan=14.3488, x=-0.0695237, y=-0.99758): 14.300666256712
    test 666 266 266.000000000000 Beta(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 667 266 265.986587541025 Theta(tan=14.2527, x=-0.06999, y=-0.997548): 14.300666256712
    test 668 266 265.993307710088 Mu(tan=14.2767, x=-0.069873, y=-0.997556): 14.300666256712
    test 669 266 265.986617434521 Chi(tan=14.2528, x=-0.0699895, y=-0.997548): 14.300666256712
    test 670 266 265.995538081208 Xi(tan=14.2847, x=-0.0698342, y=-0.997559): 14.300666256712

    test 671 273 272.989959849669 Phi(tan=-19.1453, x=0.052336, y=-1.00199): -19.081136687728
    test 672 273 273.000000000000 Beta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 673 273 273.010073740960 Theta(tan=-19.0172, x=0.052336, y=-0.995281): -19.081136687728
    test 674 273 273.005026355872 Mu(tan=-19.0492, x=0.0524236, y=-0.998625), iteration=3: -19.081136687728
    test 675 273 273.010051240667 Chi(tan=-19.0173, x=1.0, y=-19.0173), iteration=3: -19.081136687728
    test 676 273 273.003351193295 Xi(tan=-19.0598, x=0.105259, y=-2.00622), iteration=3: -19.081136687728

    test 677 273 272.989959849669 Phi(tan=-19.1453, x=0.052161, y=-0.998639): -19.081136687728
    test 678 273 273.000000000000 Beta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 679 273 273.010073740960 Theta(tan=-19.0172, x=0.0525115, y=-0.99862): -19.081136687728
    test 680 273 273.005026355872 Mu(tan=-19.0492, x=0.0524236, y=-0.998625): -19.081136687728
    test 681 273 273.010051240667 Chi(tan=-19.0173, x=0.0525111, y=-0.99862): -19.081136687728
    test 682 273 273.003351193295 Xi(tan=-19.0598, x=0.0523944, y=-0.998626): -19.081136687728

    test 683 280 279.967145322218 Phi(tan=-5.69036, x=0.173648, y=-0.988121): -5.671281819618
    test 684 280 280.000000000000 Beta(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 685 280 280.032958527773 Theta(tan=-5.65227, x=0.173648, y=-0.981506): -5.671281819618
    test 686 280 280.016446759121 Mu(tan=-5.66178, x=0.173931, y=-0.984758), iteration=3: -5.671281819618
    test 687 280 280.032886940584 Chi(tan=-5.65231, x=1.0, y=-5.65231), iteration=3: -5.671281819618
    test 688 280 280.010965671278 Xi(tan=-5.66494, x=0.349234, y=-1.97839), iteration=3: -5.671281819618

    test 689 280 279.967145322218 Phi(tan=-5.69036, x=0.173083, y=-0.984907): -5.671281819618
    test 690 280 280.000000000000 Beta(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 691 280 280.032958527773 Theta(tan=-5.65227, x=0.174215, y=-0.984708): -5.671281819618
    test 692 280 280.016446759121 Mu(tan=-5.66178, x=0.173931, y=-0.984758): -5.671281819618
    test 693 280 280.032886940584 Chi(tan=-5.65231, x=0.174213, y=-0.984708): -5.671281819618
    test 694 280 280.010965671278 Xi(tan=-5.66494, x=0.173837, y=-0.984775): -5.671281819618

    test 695 287 286.946273607855 Phi(tan=-3.28186, x=0.292372, y=-0.959522): -3.270852618484
    test 696 287 287.000000000000 Beta(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 697 287 287.053876189570 Theta(tan=-3.25989, x=0.292372, y=-0.953098): -3.270852618484
    test 698 287 287.026891215965 Mu(tan=-3.26537, x=0.292821, y=-0.956167), iteration=2: -3.270852618484
    test 699 287 287.053765856507 Chi(tan=-3.25991, x=1.0, y=-3.25991), iteration=3: -3.270852618484
    test 700 287 287.017930102981 Xi(tan=-3.2672, x=0.58797, y=-1.92101), iteration=2: -3.270852618484

    test 701 287 286.946273607855 Phi(tan=-3.28186, x=0.291475, y=-0.956578): -3.270852618484
    test 702 287 287.000000000000 Beta(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 703 287 287.053876189570 Theta(tan=-3.25989, x=0.293271, y=-0.956029): -3.270852618484
    test 704 287 287.026891215965 Mu(tan=-3.26537, x=0.292821, y=-0.956167): -3.270852618484
    test 705 287 287.053765856507 Chi(tan=-3.25991, x=0.293269, y=-0.95603): -3.270852618484
    test 706 287 287.017930102981 Xi(tan=-3.2672, x=0.292671, y=-0.956213): -3.270852618484

    test 707 294 293.928580656019 Phi(tan=-2.25359, x=0.406737, y=-0.916619): -2.246036773904
    test 708 294 294.000000000000 Beta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 709 294 294.071580020440 Theta(tan=-2.23851, x=0.406737, y=-0.910483): -2.246036773904
    test 710 294 294.035739737781 Mu(tan=-2.24227, x=0.407306, y=-0.913292), iteration=2: -2.246036773904
    test 711 294 294.071446269026 Chi(tan=-2.23852, x=1.0, y=-2.23852), iteration=3: -2.246036773904
    test 712 294 294.023831365709 Xi(tan=-2.24352, x=0.817889, y=-1.83495), iteration=3: -2.246036773904

    test 713 294 293.928580656019 Phi(tan=-2.25359, x=0.405598, y=-0.914052): -2.246036773904
    test 714 294 294.000000000000 Beta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 715 294 294.071580020440 Theta(tan=-2.23851, x=0.407878, y=-0.913037): -2.246036773904
    test 716 294 294.035739737781 Mu(tan=-2.24227, x=0.407306, y=-0.913292): -2.246036773904
    test 717 294 294.071446269026 Chi(tan=-2.23852, x=0.407875, y=-0.913038): -2.246036773904
    test 718 294 294.023831365709 Xi(tan=-2.24352, x=0.407117, y=-0.913376): -2.246036773904

    test 719 301 300.915116613042 Phi(tan=-1.66988, x=0.515038, y=-0.860051): -1.664279482351
    test 720 301 301.000000000000 Beta(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 721 301 301.085017327347 Theta(tan=-1.6587, x=0.515038, y=-0.854293): -1.664279482351
    test 722 301 301.042466766526 Mu(tan=-1.66149, x=0.515673, y=-0.856785), iteration=2: -1.664279482351
    test 723 301 301.084877498227 Chi(tan=-1.65871, x=1.0, y=-1.65871), iteration=3: -1.664279482351
    test 724 301 301.028319023279 Xi(tan=-1.66242, x=1.03555, y=-1.72152), iteration=2: -1.664279482351

    test 725 301 300.915116613042 Phi(tan=-1.66988, x=0.513768, y=-0.857929): -1.664279482351
    test 726 301 301.000000000000 Beta(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 727 301 301.085017327347 Theta(tan=-1.6587, x=0.516309, y=-0.856402): -1.664279482351
    test 728 301 301.042466766526 Mu(tan=-1.66149, x=0.515673, y=-0.856785): -1.664279482351
    test 729 301 301.084877498227 Chi(tan=-1.65871, x=0.516307, y=-0.856403): -1.664279482351
    test 730 301 301.028319023279 Xi(tan=-1.66242, x=0.515462, y=-0.856913): -1.664279482351

    test 731 308 307.906683665119 Phi(tan=-1.28425, x=0.615661, y=-0.790662): -1.279941632193
    test 732 308 308.000000000000 Beta(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 733 308 308.093392183249 Theta(tan=-1.27565, x=0.615661, y=-0.785369): -1.279941632193
    test 734 308 308.046672369053 Mu(tan=-1.27779, x=0.616303, y=-0.787509), iteration=2: -1.279941632193
    test 735 308 308.093262395276 Chi(tan=-1.27566, x=1.0, y=-1.27566), iteration=3: -1.279941632193
    test 736 308 308.031126109597 Xi(tan=-1.27851, x=1.23771, y=-1.58243), iteration=2: -1.279941632193

    test 737 308 307.906683665119 Phi(tan=-1.28425, x=0.614377, y=-0.789012): -1.279941632193
    test 738 308 308.000000000000 Beta(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 739 308 308.093392183249 Theta(tan=-1.27565, x=0.616945, y=-0.787006): -1.279941632193
    test 740 308 308.046672369053 Mu(tan=-1.27779, x=0.616303, y=-0.787509): -1.279941632193
    test 741 308 308.093262395276 Chi(tan=-1.27566, x=0.616943, y=-0.787008): -1.279941632193
    test 742 308 308.031126109597 Xi(tan=-1.27851, x=0.616089, y=-0.787676): -1.279941632193

    test 743 315 314.903787849420 Phi(tan=-1.00336, x=0.707107, y=-0.709486): -1.000000000000
    test 744 315 315.000000000000 Beta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 745 315 315.096212150580 Theta(tan=-0.996647, x=0.707107, y=-0.704736): -1.000000000000
    test 746 315 315.048106063986 Mu(tan=-0.998322, x=0.7077, y=-0.706513), iteration=2: -1.000000000000
    test 747 315 315.096104515452 Chi(tan=-0.996651, x=1.0, y=-0.996651), iteration=2: -1.000000000000
    test 748 315 315.032085072505 Xi(tan=-0.998881, x=1.42136, y=-1.41977), iteration=3: -1.000000000000

    test 749 315 314.903787849420 Phi(tan=-1.00336, x=0.705918, y=-0.708293): -1.000000000000
    test 750 315 315.000000000000 Beta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 751 315 315.096212150580 Theta(tan=-0.996647, x=0.708293, y=-0.705918): -1.000000000000
    test 752 315 315.048106063986 Mu(tan=-0.998322, x=0.7077, y=-0.706513): -1.000000000000
    test 753 315 315.096104515452 Chi(tan=-0.996651, x=0.708292, y=-0.70592): -1.000000000000
    test 754 315 315.032085072505 Xi(tan=-0.998881, x=0.707503, y=-0.706711): -1.000000000000

    test 755 322 321.906607816751 Phi(tan=-0.783914, x=0.788011, y=-0.617733): -0.781285626507
    test 756 322 322.000000000000 Beta(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 757 322 322.093316334881 Theta(tan=-0.778666, x=0.788011, y=-0.613597): -0.781285626507
    test 758 322 322.046681850102 Mu(tan=-0.779974, x=0.788512, y=-0.615019), iteration=3: -0.781285626507
    test 759 322 322.093237214147 Chi(tan=-0.778668, x=1.0, y=-0.778668), iteration=3: -0.781285626507
    test 760 322 322.031137911470 Xi(tan=-0.780411, x=1.58377, y=-1.23599), iteration=2: -0.781285626507

    test 761 322 321.906607816751 Phi(tan=-0.783914, x=0.787006, y=-0.616945): -0.781285626507
    test 762 322 322.000000000000 Beta(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 763 322 322.093316334881 Theta(tan=-0.778666, x=0.789012, y=-0.614377): -0.781285626507
    test 764 322 322.046681850102 Mu(tan=-0.779974, x=0.788512, y=-0.615019): -0.781285626507
    test 765 322 322.093237214147 Chi(tan=-0.778668, x=0.789012, y=-0.614378): -0.781285626507
    test 766 322 322.031137911470 Xi(tan=-0.780411, x=0.788345, y=-0.615233): -0.781285626507

    test 767 329 328.914982672653 Phi(tan=-0.602882, x=0.857167, y=-0.516771): -0.600860619028
    test 768 329 329.000000000000 Beta(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 769 329 329.084883386958 Theta(tan=-0.598846, x=0.857167, y=-0.513311): -0.600860619028
    test 770 329 329.042483509069 Mu(tan=-0.599852, x=0.857549, y=-0.514402), iteration=3: -0.600860619028
    test 771 329 329.084833030986 Chi(tan=-0.598847, x=1.0, y=-0.598847), iteration=3: -0.600860619028
    test 772 329 329.028339864157 Xi(tan=-0.600188, x=1.72254, y=-1.03385), iteration=2: -0.600860619028

    test 773 329 328.914982672653 Phi(tan=-0.602882, x=0.856402, y=-0.516309): -0.600860619028
    test 774 329 329.000000000000 Beta(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 775 329 329.084883386958 Theta(tan=-0.598846, x=0.857929, y=-0.513768): -0.600860619028
    test 776 329 329.042483509069 Mu(tan=-0.599852, x=0.857549, y=-0.514402): -0.600860619028
    test 777 329 329.084833030986 Chi(tan=-0.598847, x=0.857929, y=-0.513768): -0.600860619028
    test 778 329 329.028339864157 Xi(tan=-0.600188, x=0.857422, y=-0.514614): -0.600860619028

    test 779 336 335.928419979560 Phi(tan=-0.446726, x=0.913545, y=-0.408105): -0.445228685309
    test 780 336 336.000000000000 Beta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 781 336 336.071419343981 Theta(tan=-0.443736, x=0.913545, y=-0.405373): -0.445228685309
    test 782 336 336.035759822314 Mu(tan=-0.444481, x=0.913799, y=-0.406166), iteration=3: -0.445228685309
    test 783 336 336.071392925660 Chi(tan=-0.443736, x=1.0, y=-0.443736), iteration=2: -0.445228685309
    test 784 336 336.023856366648 Xi(tan=-0.44473, x=1.83563, y=-0.816362), iteration=3: -0.445228685309

    test 785 336 335.928419979560 Phi(tan=-0.446726, x=0.913037, y=-0.407878): -0.445228685309
    test 786 336 336.000000000000 Beta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 787 336 336.071419343981 Theta(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 788 336 336.035759822314 Mu(tan=-0.444481, x=0.913799, y=-0.406166): -0.445228685309
    test 789 336 336.071392925660 Chi(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 790 336 336.023856366648 Xi(tan=-0.44473, x=0.913715, y=-0.406356): -0.445228685309

    test 791 343 342.946123810430 Phi(tan=-0.306759, x=0.956305, y=-0.293355): -0.305730681459
    test 792 343 343.000000000000 Beta(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 793 343 343.053726392145 Theta(tan=-0.304706, x=0.956305, y=-0.291391): -0.305730681459
    test 794 343 343.026909940603 Mu(tan=-0.305217, x=0.956442, y=-0.291923), iteration=3: -0.305730681459
    test 795 343 343.053716124954 Chi(tan=-0.304706, x=1.0, y=-0.304706), iteration=3: -0.305730681459
    test 796 343 343.017953411145 Xi(tan=-0.305388, x=1.92138, y=-0.586767), iteration=2: -0.305730681459

    test 797 343 342.946123810430 Phi(tan=-0.306759, x=0.956029, y=-0.293271): -0.305730681459
    test 798 343 343.000000000000 Beta(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 799 343 343.053726392145 Theta(tan=-0.304706, x=0.956578, y=-0.291475): -0.305730681459
    test 800 343 343.026909940603 Mu(tan=-0.305217, x=0.956442, y=-0.291923): -0.305730681459
    test 801 343 343.053716124955 Chi(tan=-0.304706, x=0.956578, y=-0.291475): -0.305730681459
    test 802 343 343.017953411145 Xi(tan=-0.305388, x=0.956396, y=-0.292072): -0.305730681459

    test 803 350 349.967041472227 Phi(tan=-0.17692, x=0.984808, y=-0.174232): -0.176326980708
    test 804 350 350.000000000000 Beta(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 805 350 350.032854677782 Theta(tan=-0.175736, x=0.984808, y=-0.173066): -0.176326980708
    test 806 350 350.016459740333 Mu(tan=-0.176031, x=0.984858, y=-0.173365), iteration=3: -0.176326980708
    test 807 350 350.032852463246 Chi(tan=-0.175736, x=1.0, y=-0.175736), iteration=3: -0.176326980708
    test 808 350 350.010981830106 Xi(tan=-0.176129, x=1.97853, y=-0.348476), iteration=3: -0.176326980708

    test 809 350 349.967041472227 Phi(tan=-0.17692, x=0.984708, y=-0.174215): -0.176326980708
    test 810 350 350.000000000000 Beta(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 811 350 350.032854677782 Theta(tan=-0.175736, x=0.984907, y=-0.173083): -0.176326980708
    test 812 350 350.016459740333 Mu(tan=-0.176031, x=0.984858, y=-0.173365): -0.176326980708
    test 813 350 350.032852463246 Chi(tan=-0.175736, x=0.984907, y=-0.173083): -0.176326980708
    test 814 350 350.010981830106 Xi(tan=-0.176129, x=0.984841, y=-0.173459): -0.176326980708

    test 815 357 356.989926259040 Phi(tan=-0.0525841, x=0.99863, y=-0.052512): -0.052407779283
    test 816 357 357.000000000000 Beta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 817 357 357.010040150331 Theta(tan=-0.0522321, x=0.99863, y=-0.0521605): -0.052407779283
    test 818 357 357.005030554687 Mu(tan=-0.0523197, x=0.998634, y=-0.0522483), iteration=3: -0.052407779283
    test 819 357 357.010040088861 Chi(tan=-0.0522321, x=1.0, y=-0.0522321), iteration=2: -0.052407779283
    test 820 357 357.003356419920 Xi(tan=-0.052349, x=2.00623, y=-0.105024), iteration=3: -0.052407779283

    test 821 357 356.989926259040 Phi(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 822 357 357.000000000000 Beta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 823 357 357.010040150331 Theta(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 824 357 357.005030554687 Mu(tan=-0.0523197, x=0.998634, y=-0.0522483): -0.052407779283
    test 825 357 357.010040088861 Chi(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 826 357 357.003356419920 Xi(tan=-0.052349, x=0.998633, y=-0.0522775): -0.052407779283

    test 827  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 828  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 829  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 830  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 831  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 832  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 833  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 834  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 835  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 836  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 837  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 838  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 839  7 7.046702961824 Phi(tan=0.123612, x=1.0, y=0.123612): 0.122784560903
    test 840  7 7.023313050940 Beta(tan=0.123198, x=1.0, y=0.123198): 0.122784560903
    test 841  7 6.999999220873 Theta(tan=0.122785, x=1.0, y=0.122785): 0.122784560903
    test 842  7 7.011632399558 Mu(tan=0.122991, x=0.992521, y=0.122071), iteration=2: 0.122784560903
    test 843  7 7.000000000000 Chi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 844  7 7.015519711118 Xi(tan=0.12306, x=1.99394, y=0.245373), iteration=3: 0.122784560903

    test 845  7 7.046702961824 Phi(tan=0.123612, x=0.992446, y=0.122678): 0.122784560903
    test 846  7 7.023313050940 Beta(tan=0.123198, x=0.992496, y=0.122273): 0.122784560903
    test 847  7 6.999999220873 Theta(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 848  7 7.011632399558 Mu(tan=0.122991, x=0.992521, y=0.122071): 0.122784560903
    test 849  7 7.000000000000 Chi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 850  7 7.015519711118 Xi(tan=0.12306, x=0.992513, y=0.122138): 0.122784560903

    test 851 14 14.090600177106 Phi(tan=0.251008, x=1.0, y=0.251008): 0.249328002843
    test 852 14 14.045229997878 Beta(tan=0.250167, x=1.0, y=0.250167): 0.249328002843
    test 853 14 13.999994044068 Theta(tan=0.249328, x=1.0, y=0.249328): 0.249328002843
    test 854 14 14.022570138869 Mu(tan=0.249746, x=0.9702, y=0.242304), iteration=2: 0.249328002843
    test 855 14 14.000000000000 Chi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 856 14 14.030111806086 Xi(tan=0.249886, x=1.94905, y=0.487041), iteration=3: 0.249328002843

    test 857 14 14.090600177106 Phi(tan=0.251008, x=0.969912, y=0.243456): 0.249328002843
    test 858 14 14.045229997878 Beta(tan=0.250167, x=0.970104, y=0.242688): 0.249328002843
    test 859 14 13.999994044068 Theta(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 860 14 14.022570138869 Mu(tan=0.249746, x=0.9702, y=0.242304): 0.249328002843
    test 861 14 14.000000000000 Chi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 862 14 14.030111806086 Xi(tan=0.249886, x=0.970168, y=0.242432): 0.249328002843

    test 863 21 21.129059974007 Phi(tan=0.386451, x=1.0, y=0.386451): 0.383864035035
    test 864 21 21.064440302978 Beta(tan=0.385155, x=1.0, y=0.385155): 0.383864035035
    test 865 21 20.999981382849 Theta(tan=0.383864, x=1.0, y=0.383864): 0.383864035035
    test 866 21 21.032160674247 Mu(tan=0.384508, x=0.933379, y=0.358892), iteration=3: 0.383864035035
    test 867 21 21.000000000000 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 868 21 21.042905101186 Xi(tan=0.384723, x=1.875, y=0.721358), iteration=2: 0.383864035035

    test 869 21 21.129059974007 Phi(tan=0.386451, x=0.932771, y=0.36047): 0.383864035035
    test 870 21 21.064440302978 Beta(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 871 21 20.999981382849 Theta(tan=0.383864, x=0.933581, y=0.358368): 0.383864035035
    test 872 21 21.032160674247 Mu(tan=0.384508, x=0.933379, y=0.358892): 0.383864035035
    test 873 21 21.000000000000 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 874 21 21.042905101186 Xi(tan=0.384723, x=0.933312, y=0.359067): 0.383864035035

    test 875 28 28.159786713307 Phi(tan=0.535292, x=1.0, y=0.535292): 0.531709431661
    test 876 28 28.079798849800 Beta(tan=0.533497, x=1.0, y=0.533497): 0.531709431661
    test 877 28 27.999960443908 Theta(tan=0.531709, x=1.0, y=0.531709): 0.531709431661
    test 878 28 28.039832991509 Mu(tan=0.532602, x=0.882621, y=0.470085), iteration=3: 0.531709431661
    test 879 28 28.000000000000 Chi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 880 28 28.053137609764 Xi(tan=0.5329, x=1.77295, y=0.944804), iteration=2: 0.531709431661

    test 881 28 28.159786713307 Phi(tan=0.535292, x=0.881635, y=0.471932): 0.531709431661
    test 882 28 28.079798849800 Beta(tan=0.533497, x=0.882293, y=0.470701): 0.531709431661
    test 883 28 27.999960443908 Theta(tan=0.531709, x=0.882948, y=0.469471): 0.531709431661
    test 884 28 28.039832991509 Mu(tan=0.532602, x=0.882621, y=0.470085): 0.531709431661
    test 885 28 28.000000000000 Chi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 886 28 28.053137609764 Xi(tan=0.5329, x=0.882512, y=0.47029): 0.531709431661

    test 887 35 35.180959671970 Phi(tan=0.704925, x=1.0, y=0.704925): 0.700207538210
    test 888 35 35.090394869583 Beta(tan=0.702561, x=1.0, y=0.702561): 0.700207538210
    test 889 35 34.999933133637 Theta(tan=0.700206, x=1.0, y=0.700206): 0.700207538210
    test 890 35 35.045131821097 Mu(tan=0.701382, x=0.8187, y=0.574222), iteration=3: 0.700207538210
    test 891 35 35.000000000000 Chi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 892 35 35.060202265669 Xi(tan=0.701775, x=1.64445, y=1.15403), iteration=2: 0.700207538210

    test 893 35 35.180959671970 Phi(tan=0.704925, x=0.817336, y=0.576161): 0.700207538210
    test 894 35 35.090394869583 Beta(tan=0.702561, x=0.818246, y=0.574868): 0.700207538210
    test 895 35 34.999933133637 Theta(tan=0.700206, x=0.819153, y=0.573575): 0.700207538210
    test 896 35 35.045131821097 Mu(tan=0.701382, x=0.8187, y=0.574222): 0.700207538210
    test 897 35 35.000000000000 Chi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 898 35 35.060202265669 Xi(tan=0.701775, x=0.818549, y=0.574437): 0.700207538210

    test 899 42 42.191340028820 Phi(tan=0.906469, x=1.0, y=0.906469): 0.900404044298
    test 900 42 42.095605637640 Beta(tan=0.90343, x=1.0, y=0.90343): 0.900404044298
    test 901 42 41.999903781382 Theta(tan=0.900401, x=1.0, y=0.900401): 0.900404044298
    test 902 42 42.047744555205 Mu(tan=0.901914, x=0.742587, y=0.66975), iteration=3: 0.900404044298
    test 903 42 42.000000000000 Chi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 904 42 42.063682784184 Xi(tan=0.902419, x=1.49147, y=1.34593), iteration=2: 0.900404044298

    test 905 42 42.191340028820 Phi(tan=0.906469, x=0.740906, y=0.671609): 0.900404044298
    test 906 42 42.095605637640 Beta(tan=0.90343, x=0.742027, y=0.67037): 0.900404044298
    test 907 42 41.999903781382 Theta(tan=0.900401, x=0.743146, y=0.669129): 0.900404044298
    test 908 42 42.047744555205 Mu(tan=0.901914, x=0.742587, y=0.66975): 0.900404044298
    test 909 42 42.000000000000 Chi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 910 42 42.063682784184 Xi(tan=0.902419, x=0.742401, y=0.669956): 0.900404044298

    test 911 49 49.190339913877 Phi(tan=1.15812, x=1.0, y=1.15812): 1.150368407221
    test 912 49 49.095131857689 Beta(tan=1.15423, x=1.0, y=1.15423): 1.150368407221
    test 913 49 48.999878238776 Theta(tan=1.15036, x=1.0, y=1.15036): 1.150368407221
    test 914 49 49.047519300953 Mu(tan=1.1523, x=0.655433, y=0.755253), iteration=2: 1.150368407221
    test 915 49 49.000000000000 Chi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 916 49 49.063377582472 Xi(tan=1.15294, x=1.31633, y=1.51765), iteration=3: 1.150368407221

    test 917 49 49.190339913877 Phi(tan=1.15812, x=0.653548, y=0.756885): 1.150368407221
    test 918 49 49.095131857689 Beta(tan=1.15423, x=0.654805, y=0.755798): 1.150368407221
    test 919 49 48.999878238776 Theta(tan=1.15036, x=0.656061, y=0.754708): 1.150368407221
    test 920 49 49.047519300953 Mu(tan=1.1523, x=0.655433, y=0.755253): 1.150368407221
    test 921 49 49.000000000000 Chi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 922 49 49.063377582472 Xi(tan=1.15294, x=0.655224, y=0.755435): 1.150368407221

    test 923 56 56.178050530882 Phi(tan=1.49254, x=1.0, y=1.49254): 1.482560968513
    test 924 56 56.089013022552 Beta(tan=1.48754, x=1.0, y=1.48754): 1.482560968513
    test 925 56 55.999862564323 Theta(tan=1.48255, x=1.0, y=1.48255): 1.482560968513
    test 926 56 56.044473121630 Mu(tan=1.48505, x=0.558549, y=0.829471), iteration=2: 1.482560968513
    test 927 56 56.000000000000 Chi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 928 56 56.059310533694 Xi(tan=1.48588, x=1.12168, y=1.66668), iteration=2: 1.482560968513

    test 929 56 56.178050530882 Phi(tan=1.49254, x=0.556614, y=0.830771): 1.482560968513
    test 930 56 56.089013022552 Beta(tan=1.48754, x=0.557904, y=0.829905): 1.482560968513
    test 931 56 55.999862564323 Theta(tan=1.48255, x=0.559195, y=0.829036): 1.482560968513
    test 932 56 56.044473121630 Mu(tan=1.48505, x=0.558549, y=0.829471): 1.482560968513
    test 933 56 56.000000000000 Chi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 934 56 56.059310533694 Xi(tan=1.48588, x=0.558334, y=0.829616): 1.482560968513

    test 935 63 63.155229303561 Phi(tan=1.97583, x=1.0, y=1.97583): 1.962610505505
    test 936 63 63.077622413475 Beta(tan=1.9692, x=1.0, y=1.9692): 1.962610505505
    test 937 63 62.999861601059 Theta(tan=1.9626, x=1.0, y=1.9626): 1.962610505505
    test 938 63 63.038790161591 Mu(tan=1.9659, x=0.453387, y=0.891314), iteration=2: 1.962610505505
    test 939 63 63.000000000000 Chi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 940 63 63.051728205304 Xi(tan=1.967, x=0.910441, y=1.79084), iteration=3: 1.962610505505

    test 941 63 63.155229303561 Phi(tan=1.97583, x=0.451575, y=0.892233): 1.962610505505
    test 942 63 63.077622413475 Beta(tan=1.9692, x=0.452783, y=0.891621): 1.962610505505
    test 943 63 62.999861601059 Theta(tan=1.9626, x=0.453993, y=0.891005): 1.962610505505
    test 944 63 63.038790161591 Mu(tan=1.9659, x=0.453387, y=0.891314): 1.962610505505
    test 945 63 63.000000000000 Chi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 946 63 63.051728205303 Xi(tan=1.967, x=0.453186, y=0.891416): 1.962610505505

    test 947 70 70.123248546098 Phi(tan=2.76598, x=1.0, y=2.76598): 2.747477419455
    test 948 70 70.061642655565 Beta(tan=2.7567, x=1.0, y=2.7567): 2.747477419455
    test 949 70 69.999877780085 Theta(tan=2.74746, x=1.0, y=2.74746): 2.747477419455
    test 950 70 70.030809967607 Mu(tan=2.75208, x=0.341515, y=0.939876), iteration=3: 2.747477419455
    test 951 70 70.000000000000 Chi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 952 70 70.041084059681 Xi(tan=2.75362, x=0.685758, y=1.88832), iteration=3: 2.747477419455

    test 953 70 70.123248546098 Phi(tan=2.76598, x=0.339998, y=0.940426): 2.747477419455
    test 954 70 70.061642655565 Beta(tan=2.7567, x=0.341009, y=0.94006): 2.747477419455
    test 955 70 69.999877780085 Theta(tan=2.74746, x=0.342022, y=0.939692): 2.747477419455
    test 956 70 70.030809967607 Mu(tan=2.75208, x=0.341515, y=0.939876): 2.747477419455
    test 957 70 70.000000000000 Chi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 958 70 70.041084059681 Xi(tan=2.75362, x=0.341346, y=0.939938): 2.747477419455

    test 959 77 77.084010155505 Phi(tan=4.36064, x=1.0, y=4.36064): 4.331475874284
    test 960 77 77.042023802893 Beta(tan=4.34602, x=1.0, y=4.34602): 4.331475874284
    test 961 77 76.999910430182 Theta(tan=4.33144, x=1.0, y=4.33144): 4.331475874284
    test 962 77 77.021006871193 Mu(tan=4.33873, x=0.224594, y=0.974452), iteration=3: 4.331475874284
    test 963 77 77.000000000000 Chi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 964 77 77.028010821264 Xi(tan=4.34116, x=0.450965, y=1.95771), iteration=2: 4.331475874284

    test 965 77 77.084010155505 Phi(tan=4.36064, x=0.223522, y=0.974699): 4.331475874284
    test 966 77 77.042023802893 Beta(tan=4.34602, x=0.224236, y=0.974535): 4.331475874284
    test 967 77 76.999910430182 Theta(tan=4.33144, x=0.224953, y=0.97437): 4.331475874284
    test 968 77 77.021006871193 Mu(tan=4.33873, x=0.224594, y=0.974452): 4.331475874284
    test 969 77 77.000000000000 Chi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 970 77 77.028010821264 Xi(tan=4.34116, x=0.224475, y=0.97448): 4.331475874284

    test 971 84 84.039832232299 Phi(tan=9.57842, x=1.0, y=9.57842): 9.514364454223
    test 972 84 84.019926748698 Beta(tan=9.5463, x=1.0, y=9.5463): 9.514364454223
    test 973 84 83.999955757312 Theta(tan=9.51429, x=1.0, y=9.51429): 9.514364454223
    test 974 84 84.009961757905 Mu(tan=9.5303, x=0.104356, y=0.99454), iteration=3: 9.514364454223
    test 975 84 84.000000000000 Chi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 976 84 84.013282808640 Xi(tan=9.53563, x=0.209532, y=1.99802), iteration=2: 9.514364454223

    test 977 84 84.039832232299 Phi(tan=9.57842, x=0.103837, y=0.994594): 9.514364454223
    test 978 84 84.019926748698 Beta(tan=9.5463, x=0.104183, y=0.994558): 9.514364454223
    test 979 84 83.999955757312 Theta(tan=9.51429, x=0.104529, y=0.994522): 9.514364454223
    test 980 84 84.009961757905 Mu(tan=9.5303, x=0.104356, y=0.99454): 9.514364454223
    test 981 84 84.000000000000 Chi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 982 84 84.013282808640 Xi(tan=9.53563, x=0.104298, y=0.994546): 9.514364454223

    test 983 91 90.993314421151 Phi(tan=-57.6756, x=-1, y=57.6756): -57.289961630759
    test 984 91 90.996655347181 Beta(tan=-57.4823, x=-1, y=57.4823): -57.289961630759
    test 985 91 91.000007505573 Theta(tan=-57.2895, x=-1, y=57.2895): -57.289961630759
    test 986 91 90.998327910374 Mu(tan=-57.3859, x=-0.0174232, y=0.999848), iteration=3: -57.289961630759
    test 987 91 91.000000000000 Chi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 988 91 90.997770483630 Xi(tan=-57.418, x=-0.0349834, y=2.00868), iteration=2: -57.289961630759

    test 989 91 90.993314421151 Phi(tan=-57.6756, x=-0.0173357, y=0.99985): -57.289961630759
    test 990 91 90.996655347181 Beta(tan=-57.4823, x=-0.017394, y=0.999849): -57.289961630759
    test 991 91 91.000007505573 Theta(tan=-57.2895, x=-0.0174525, y=0.999848): -57.289961630759
    test 992 91 90.998327910374 Mu(tan=-57.3859, x=-0.0174232, y=0.999848): -57.289961630759
    test 993 91 91.000000000000 Chi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 994 91 90.997770483630 Xi(tan=-57.418, x=-0.0174135, y=0.999848): -57.289961630759

    test 995 98 97.947189249597 Phi(tan=-7.16327, x=-1, y=7.16327): -7.115369722384
    test 996 98 97.973581022657 Beta(tan=-7.13925, x=-1, y=7.13925): -7.115369722384
    test 997 98 98.000058157653 Theta(tan=-7.11532, x=-1, y=7.11532): -7.115369722384
    test 998 98 97.986792871261 Mu(tan=-7.12729, x=-0.138945, y=0.9903), iteration=2: -7.115369722384
    test 999 98 98.000000000000 Chi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 1000 98 97.982389787937 Xi(tan=-7.13127, x=-0.278984, y=1.98951), iteration=3: -7.115369722384

    test 1001 98 97.947189249597 Phi(tan=-7.16327, x=-0.13826, y=0.990396): -7.115369722384
    test 1002 98 97.973581022657 Beta(tan=-7.13925, x=-0.138716, y=0.990332): -7.115369722384
    test 1003 98 98.000058157653 Theta(tan=-7.11532, x=-0.139174, y=0.990268): -7.115369722384
    test 1004 98 97.986792871261 Mu(tan=-7.12729, x=-0.138945, y=0.9903): -7.115369722384
    test 1005 98 98.000000000000 Chi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 1006 98 97.982389787937 Xi(tan=-7.13127, x=-0.138869, y=0.990311): -7.115369722384

    test 1007 105 104.904166968877 Phi(tan=-3.75718, x=-1, y=3.75718): -3.732050807569
    test 1008 105 104.952063867788 Beta(tan=-3.74458, x=-1, y=3.74458): -3.732050807569
    test 1009 105 105.000100412186 Theta(tan=-3.73202, x=-1, y=3.73202): -3.732050807569
    test 1010 105 104.976038435868 Mu(tan=-3.7383, x=-0.258415, y=0.966034), iteration=2: -3.732050807569
    test 1011 105 105.000000000000 Chi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1012 105 104.968049034476 Xi(tan=-3.74039, x=-0.51888, y=1.94082), iteration=2: -3.732050807569

    test 1013 105 104.904166968877 Phi(tan=-3.75718, x=-0.257203, y=0.966357): -3.732050807569
    test 1014 105 104.952063867788 Beta(tan=-3.74458, x=-0.258011, y=0.966142): -3.732050807569
    test 1015 105 105.000100412186 Theta(tan=-3.73202, x=-0.258821, y=0.965925): -3.732050807569
    test 1016 105 104.976038435868 Mu(tan=-3.7383, x=-0.258415, y=0.966034): -3.732050807569
    test 1017 105 105.000000000000 Chi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1018 105 104.968049034476 Xi(tan=-3.74039, x=-0.25828, y=0.96607): -3.732050807569

    test 1019 112 111.866781479115 Phi(tan=-2.49175, x=-1, y=2.49175): -2.475086853416
    test 1020 112 111.933374328805 Beta(tan=-2.4834, x=-1, y=2.4834): -2.475086853416
    test 1021 112 112.000128613678 Theta(tan=-2.47507, x=-1, y=2.47507): -2.475086853416
    test 1022 112 111.966700957925 Mu(tan=-2.47923, x=-0.374068, y=0.927401), iteration=3: -2.475086853416
    test 1023 112 112.000000000000 Chi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 1024 112 111.955596207977 Xi(tan=-2.48062, x=-0.751133, y=1.86328), iteration=3: -2.475086853416

    test 1025 112 111.866781479115 Phi(tan=-2.49175, x=-0.37245, y=0.928052): -2.475086853416
    test 1026 112 111.933374328805 Beta(tan=-2.4834, x=-0.373528, y=0.927619): -2.475086853416
    test 1027 112 112.000128613678 Theta(tan=-2.47507, x=-0.374609, y=0.927183): -2.475086853416
    test 1028 112 111.966700957925 Mu(tan=-2.47923, x=-0.374068, y=0.927401): -2.475086853416
    test 1029 112 112.000000000000 Chi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 1030 112 111.955596207977 Xi(tan=-2.48062, x=-0.373888, y=0.927474): -2.475086853416

    test 1031 119 118.837244909169 Phi(tan=-1.8162, x=-1, y=1.8162): -1.804047755271
    test 1032 119 118.918619560007 Beta(tan=-1.81011, x=-1, y=1.81011): -1.804047755271
    test 1033 119 119.000139821268 Theta(tan=-1.80404, x=-1, y=1.80404): -1.804047755271
    test 1034 119 118.959334139853 Mu(tan=-1.80707, x=-0.484189, y=0.874964), iteration=3: -1.804047755271
    test 1035 119 119.000000000000 Chi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 1036 119 118.945769514985 Xi(tan=-1.80808, x=-0.972309, y=1.75801), iteration=3: -1.804047755271

    test 1037 119 118.837244909169 Phi(tan=-1.8162, x=-0.482323, y=0.875993): -1.804047755271
    test 1038 119 118.918619560007 Beta(tan=-1.81011, x=-0.483567, y=0.875307): -1.804047755271
    test 1039 119 119.000139821268 Theta(tan=-1.80404, x=-0.484812, y=0.874619): -1.804047755271
    test 1040 119 118.959334139853 Mu(tan=-1.80707, x=-0.484189, y=0.874964): -1.804047755271
    test 1041 119 119.000000000000 Chi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 1042 119 118.945769514985 Xi(tan=-1.80808, x=-0.483982, y=0.875078): -1.804047755271

    test 1043 126 125.817318309875 Phi(tan=-1.38565, x=-1, y=1.38565): -1.376381920471
    test 1044 126 125.908678399154 Beta(tan=-1.38101, x=-1, y=1.38101): -1.376381920471
    test 1045 126 126.000134283091 Theta(tan=-1.37638, x=-1, y=1.37638): -1.376381920471
    test 1046 126 125.954376379912 Mu(tan=-1.37869, x=-0.587141, y=0.809485), iteration=2: -1.376381920471
    test 1047 126 126.000000000000 Chi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 1048 126 125.939153905889 Xi(tan=-1.37946, x=-1.17912, y=1.62655), iteration=2: -1.376381920471

    test 1049 126 125.817318309875 Phi(tan=-1.38565, x=-0.585203, y=0.810887): -1.376381920471
    test 1050 126 125.908678399154 Beta(tan=-1.38101, x=-0.586495, y=0.809953): -1.376381920471
    test 1051 126 126.000134283091 Theta(tan=-1.37638, x=-0.587787, y=0.809016): -1.376381920471
    test 1052 126 125.954376379912 Mu(tan=-1.37869, x=-0.587141, y=0.809485): -1.376381920471
    test 1053 126 126.000000000000 Chi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 1054 126 125.939153905889 Xi(tan=-1.37946, x=-0.586926, y=0.809641): -1.376381920471

    test 1055 133 132.808205632210 Phi(tan=-1.07959, x=-1, y=1.07959): -1.072368710025
    test 1056 133 132.904148646694 Beta(tan=-1.07597, x=-1, y=1.07597): -1.072368710025
    test 1057 133 133.000115216221 Theta(tan=-1.07236, x=-1, y=1.07236): -1.072368710025
    test 1058 133 132.952124558388 Mu(tan=-1.07417, x=-0.681387, y=0.731923), iteration=2: -1.072368710025
    test 1059 133 133.000000000000 Chi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 1060 133 132.936146061572 Xi(tan=-1.07477, x=-1.36848, y=1.4708), iteration=3: -1.072368710025

    test 1061 133 132.808205632210 Phi(tan=-1.07959, x=-0.679546, y=0.733633): -1.072368710025
    test 1062 133 132.904148646694 Beta(tan=-1.07597, x=-0.680774, y=0.732494): -1.072368710025
    test 1063 133 133.000115216221 Theta(tan=-1.07236, x=-0.682, y=0.731352): -1.072368710025
    test 1064 133 132.952124558388 Mu(tan=-1.07417, x=-0.681387, y=0.731923): -1.072368710025
    test 1065 133 133.000000000000 Chi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 1066 133 132.936146061572 Xi(tan=-1.07477, x=-0.681183, y=0.732113): -1.072368710025

    test 1067 140 139.810477575926 Phi(tan=-0.844752, x=-1, y=0.844752): -0.839099631177
    test 1068 140 139.905309888599 Beta(tan=-0.84192, x=-1, y=0.84192): -0.839099631177
    test 1069 140 140.000087948921 Theta(tan=-0.839097, x=-1, y=0.839097): -0.839099631177
    test 1070 140 139.952715856955 Mu(tan=-0.840507, x=-0.765514, y=0.64342), iteration=2: -0.839099631177
    test 1071 140 140.000000000000 Chi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 1072 140 139.936929981390 Xi(tan=-0.840977, x=-1.53755, y=1.29304), iteration=2: -0.839099631177

    test 1073 140 139.810477575926 Phi(tan=-0.844752, x=-0.763914, y=0.645318): -0.839099631177
    test 1074 140 139.905309888599 Beta(tan=-0.84192, x=-0.764981, y=0.644053): -0.839099631177
    test 1075 140 140.000087948921 Theta(tan=-0.839097, x=-0.766045, y=0.642786): -0.839099631177
    test 1076 140 139.952715856955 Mu(tan=-0.840507, x=-0.765514, y=0.64342): -0.839099631177
    test 1077 140 140.000000000000 Chi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 1078 140 139.936929981390 Xi(tan=-0.840977, x=-0.765336, y=0.64363): -0.839099631177

    test 1079 147 146.824030870318 Phi(tan=-0.653783, x=-1, y=0.653783): -0.649407593198
    test 1080 147 146.912104447745 Beta(tan=-0.651591, x=-1, y=0.651591): -0.649407593198
    test 1081 147 147.000058627387 Theta(tan=-0.649406, x=-1, y=0.649406): -0.649407593198
    test 1082 147 146.956118815411 Mu(tan=-0.650497, x=-0.838253, y=0.545281), iteration=2: -0.649407593198
    test 1083 147 147.000000000000 Chi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 1084 147 146.941464815429 Xi(tan=-0.650861, x=-1.68375, y=1.09589), iteration=2: -0.649407593198

    test 1085 147 146.824030870318 Phi(tan=-0.653783, x=-0.836994, y=0.547212): -0.649407593198
    test 1086 147 146.912104447745 Beta(tan=-0.651591, x=-0.837834, y=0.545925): -0.649407593198
    test 1087 147 147.000058627387 Theta(tan=-0.649406, x=-0.838671, y=0.544638): -0.649407593198
    test 1088 147 146.956118815411 Mu(tan=-0.650497, x=-0.838253, y=0.545281): -0.649407593198
    test 1089 147 147.000000000000 Chi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 1090 147 146.941464815429 Xi(tan=-0.650861, x=-0.838114, y=0.545496): -0.649407593198

    test 1091 154 153.848086974871 Phi(tan=-0.491019, x=-1, y=0.491019): -0.487732588566
    test 1092 154 153.924138158817 Beta(tan=-0.489373, x=-1, y=0.489373): -0.487732588566
    test 1093 154 154.000032789582 Theta(tan=-0.487732, x=-1, y=0.487732): -0.487732588566
    test 1094 154 153.962134341087 Mu(tan=-0.488551, x=-0.898504, y=0.438965), iteration=3: -0.487732588566
    test 1095 154 154.000000000000 Chi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 1096 154 153.949485950322 Xi(tan=-0.488824, x=-1.80488, y=0.88227), iteration=2: -0.487732588566

    test 1097 154 153.848086974871 Phi(tan=-0.491019, x=-0.897629, y=0.440753): -0.487732588566
    test 1098 154 153.924138158817 Beta(tan=-0.489373, x=-0.898213, y=0.439561): -0.487732588566
    test 1099 154 154.000032789582 Theta(tan=-0.487732, x=-0.898794, y=0.438371): -0.487732588566
    test 1100 154 153.962134341087 Mu(tan=-0.488551, x=-0.898504, y=0.438965): -0.487732588566
    test 1101 154 154.000000000000 Chi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 1102 154 153.949485950322 Xi(tan=-0.488824, x=-0.898407, y=0.439163): -0.487732588566

    test 1103 161 160.881232023490 Phi(tan=-0.346648, x=-1, y=0.346648): -0.344327613290
    test 1104 161 160.940701543262 Beta(tan=-0.345486, x=-1, y=0.345486): -0.344327613290
    test 1105 161 161.000014139979 Theta(tan=-0.344327, x=-1, y=0.344327): -0.344327613290
    test 1106 161 160.970406812614 Mu(tan=-0.344905, x=-0.94535, y=0.326056), iteration=3: -0.344327613290
    test 1107 161 161.000000000000 Chi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 1108 161 160.960519598812 Xi(tan=-0.345099, x=-1.89908, y=0.655369), iteration=3: -0.344327613290

    test 1109 161 160.881232023490 Phi(tan=-0.346648, x=-0.944842, y=0.327527): -0.344327613290
    test 1110 161 160.940701543262 Beta(tan=-0.345486, x=-0.945181, y=0.326547): -0.344327613290
    test 1111 161 161.000014139979 Theta(tan=-0.344327, x=-0.945519, y=0.325568): -0.344327613290
    test 1112 161 160.970406812614 Mu(tan=-0.344905, x=-0.94535, y=0.326056): -0.344327613290
    test 1113 161 161.000000000000 Chi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 1114 161 160.960519598812 Xi(tan=-0.345099, x=-0.945294, y=0.32622): -0.344327613290

    test 1115 168 167.921497152166 Phi(tan=-0.213989, x=-1, y=0.213989): -0.212556561670
    test 1116 168 167.960810661508 Beta(tan=-0.213272, x=-1, y=0.213272): -0.212556561670
    test 1117 168 168.000003811668 Theta(tan=-0.212556, x=-1, y=0.212556): -0.212556561670
    test 1118 168 167.980444790381 Mu(tan=-0.212913, x=-0.978077, y=0.208246), iteration=3: -0.212556561670
    test 1119 168 168.000000000000 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 1120 168 167.973910295272 Xi(tan=-0.213033, x=-1.96489, y=0.418585), iteration=3: -0.212556561670

    test 1121 168 167.921497152166 Phi(tan=-0.213989, x=-0.977862, y=0.209252): -0.212556561670
    test 1122 168 167.960810661508 Beta(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 1123 168 168.000003811668 Theta(tan=-0.212556, x=-0.978148, y=0.207912): -0.212556561670
    test 1124 168 167.980444790381 Mu(tan=-0.212913, x=-0.978077, y=0.208246): -0.212556561670
    test 1125 168 168.000000000000 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 1126 168 167.973910295272 Xi(tan=-0.213033, x=-0.978053, y=0.208357): -0.212556561670

    test 1127 175 174.966475344628 Phi(tan=-0.0880783, x=-1, y=0.0880783): -0.087488663526
    test 1128 175 174.983265532727 Beta(tan=-0.087783, x=-1, y=0.087783): -0.087488663526
    test 1129 175 175.000000286043 Theta(tan=-0.0874887, x=-1, y=0.0874887): -0.087488663526
    test 1130 175 174.991650204039 Mu(tan=-0.0876355, x=-0.996182, y=0.0873009), iteration=2: -0.087488663526
    test 1131 175 175.000000000000 Chi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 1132 175 174.988859821813 Xi(tan=-0.0876846, x=-2.0013, y=0.175483), iteration=3: -0.087488663526

    test 1133 175 174.966475344628 Phi(tan=-0.0880783, x=-0.996144, y=0.0877386): -0.087488663526
    test 1134 175 174.983265532727 Beta(tan=-0.087783, x=-0.996169, y=0.0874467): -0.087488663526
    test 1135 175 175.000000286043 Theta(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 1136 175 174.991650204039 Mu(tan=-0.0876355, x=-0.996182, y=0.0873009): -0.087488663526
    test 1137 175 175.000000000000 Chi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 1138 175 174.988859821813 Xi(tan=-0.0876846, x=-0.996178, y=0.0873494): -0.087488663526

    test 1139 182 182.013467917640 Phi(tan=0.0351561, x=-1, y=-0.0351561): 0.034920769492
    test 1140 182 182.006722669522 Beta(tan=0.0350382, x=-1, y=-0.0350382): 0.034920769492
    test 1141 182 181.999999981575 Theta(tan=0.0349208, x=-1, y=-0.0349208): 0.034920769492
    test 1142 182 182.003354287313 Mu(tan=0.0349794, x=-0.999389, y=-0.034958), iteration=3: 0.034920769492
    test 1143 182 182.000000000000 Chi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 1144 182 182.004475259781 Xi(tan=0.034999, x=-2.00775, y=-0.0702692), iteration=2: 0.034920769492

    test 1145 182 182.013467917640 Phi(tan=0.0351561, x=-0.999383, y=-0.0351344): 0.034920769492
    test 1146 182 182.006722669522 Beta(tan=0.0350382, x=-0.999387, y=-0.0350168): 0.034920769492
    test 1147 182 181.999999981575 Theta(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 1148 182 182.003354287313 Mu(tan=0.0349794, x=-0.999389, y=-0.034958): 0.034920769492
    test 1149 182 182.000000000000 Chi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 1150 182 182.004475259781 Xi(tan=0.034999, x=-0.999388, y=-0.0349776): 0.034920769492

    test 1151 189 189.059651130185 Phi(tan=0.159452, x=-1, y=-0.159452): 0.158384440325
    test 1152 189 189.029777127642 Beta(tan=0.158917, x=-1, y=-0.158917): 0.158384440325
    test 1153 189 188.999998360327 Theta(tan=0.158384, x=-1, y=-0.158384): 0.158384440325
    test 1154 189 189.014858030843 Mu(tan=0.15865, x=-0.987648, y=-0.156691), iteration=3: 0.158384440325
    test 1155 189 189.000000000000 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 1156 189 189.019823164695 Xi(tan=0.158739, x=-1.98414, y=-0.31496), iteration=3: 0.158384440325

    test 1157 189 189.059651130185 Phi(tan=0.159452, x=-0.987525, y=-0.157463): 0.158384440325
    test 1158 189 189.029777127642 Beta(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 1159 189 188.999998360327 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 1160 189 189.014858030843 Mu(tan=0.15865, x=-0.987648, y=-0.156691): 0.158384440325
    test 1161 189 189.000000000000 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 1162 189 189.019823164695 Xi(tan=0.158739, x=-0.987634, y=-0.156776): 0.158384440325

    test 1163 196 196.102251517048 Phi(tan=0.288678, x=-1, y=-0.288678): 0.286745385759
    test 1164 196 196.051048664417 Beta(tan=0.28771, x=-1, y=-0.28771): 0.286745385759
    test 1165 196 195.999991274014 Theta(tan=0.286745, x=-1, y=-0.286745): 0.286745385759
    test 1166 196 196.025474578648 Mu(tan=0.287227, x=-0.961139, y=-0.276065), iteration=2: 0.286745385759
    test 1167 196 196.000000000000 Chi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 1168 196 196.033986378622 Xi(tan=0.287387, x=-1.93083, y=-0.554895), iteration=3: 0.286745385759

    test 1169 196 196.102251517048 Phi(tan=0.288678, x=-0.960768, y=-0.277352): 0.286745385759
    test 1170 196 196.051048664417 Beta(tan=0.28771, x=-0.961016, y=-0.276494): 0.286745385759
    test 1171 196 195.999991274014 Theta(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 1172 196 196.025474578648 Mu(tan=0.287227, x=-0.961139, y=-0.276065): 0.286745385759
    test 1173 196 196.000000000000 Chi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 1174 196 196.033986378622 Xi(tan=0.287387, x=-0.961098, y=-0.276208): 0.286745385759

    test 1175 203 203.138717708106 Phi(tan=0.427335, x=-1, y=-0.427335): 0.424474816210
    test 1176 203 203.069266243319 Beta(tan=0.425902, x=-1, y=-0.425902): 0.424474816210
    test 1177 203 202.999976212498 Theta(tan=0.424474, x=-1, y=-0.424474): 0.424474816210
    test 1178 203 203.034570842744 Mu(tan=0.425187, x=-0.920269, y=-0.391286), iteration=3: 0.424474816210
    test 1179 203 203.000000000000 Chi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 1180 203 203.046119781391 Xi(tan=0.425425, x=-1.84864, y=-0.786459), iteration=3: 0.424474816210

    test 1181 203 203.138717708106 Phi(tan=0.427335, x=-0.919556, y=-0.392959): 0.424474816210
    test 1182 203 203.069266243319 Beta(tan=0.425902, x=-0.920032, y=-0.391844): 0.424474816210
    test 1183 203 202.999976212498 Theta(tan=0.424474, x=-0.920505, y=-0.390731): 0.424474816210
    test 1184 203 203.034570842744 Mu(tan=0.425187, x=-0.920269, y=-0.391286): 0.424474816210
    test 1185 203 203.000000000000 Chi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 1186 203 203.046119781391 Xi(tan=0.425425, x=-0.92019, y=-0.391472): 0.424474816210

    test 1187 210 210.166876834292 Phi(tan=0.58124, x=-1, y=-0.58124): 0.577350269190
    test 1188 210 210.083345266050 Beta(tan=0.579291, x=-1, y=-0.579291): 0.577350269190
    test 1189 210 209.999953141624 Theta(tan=0.577349, x=-1, y=-0.577349): 0.577350269190
    test 1190 210 210.041605671429 Mu(tan=0.578319, x=-0.865662, y=-0.500629), iteration=3: 0.577350269190
    test 1191 210 210.000000000000 Chi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 1192 210 210.055501367888 Xi(tan=0.578643, x=-1.73885, y=-1.00617), iteration=2: 0.577350269190

    test 1193 210 210.166876834292 Phi(tan=0.58124, x=-0.864565, y=-0.50252): 0.577350269190
    test 1194 210 210.083345266050 Beta(tan=0.579291, x=-0.865297, y=-0.501259): 0.577350269190
    test 1195 210 209.999953141624 Theta(tan=0.577349, x=-0.866026, y=-0.499999): 0.577350269190
    test 1196 210 210.041605671429 Mu(tan=0.578319, x=-0.865662, y=-0.500629): 0.577350269190
    test 1197 210 210.000000000000 Chi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 1198 210 210.055501367888 Xi(tan=0.578643, x=-0.865541, y=-0.500839): 0.577350269190

    test 1199 217 217.185065085003 Phi(tan=0.758631, x=-1, y=-0.758631): 0.753554050103
    test 1200 217 217.092452537420 Beta(tan=0.756087, x=-1, y=-0.756087): 0.753554050103
    test 1201 217 216.999924718107 Theta(tan=0.753552, x=-1, y=-0.753552): 0.753554050103
    test 1202 217 217.046162172363 Mu(tan=0.754818, x=-0.79815, y=-0.602458), iteration=2: 0.753554050103
    test 1203 217 217.000000000000 Chi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 1204 217 217.061575411936 Xi(tan=0.75524, x=-1.60314, y=-1.21076), iteration=3: 0.753554050103

    test 1205 217 217.185065085003 Phi(tan=0.758631, x=-0.796687, y=-0.604391): 0.753554050103
    test 1206 217 217.092452537420 Beta(tan=0.756087, x=-0.797663, y=-0.603103): 0.753554050103
    test 1207 217 216.999924718107 Theta(tan=0.753552, x=-0.798636, y=-0.601814): 0.753554050103
    test 1208 217 217.046162172363 Mu(tan=0.754818, x=-0.79815, y=-0.602458): 0.753554050103
    test 1209 217 217.000000000000 Chi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 1210 217 217.061575411936 Xi(tan=0.75524, x=-0.797988, y=-0.602673): 0.753554050103

    test 1211 224 224.192224339246 Phi(tan=0.972193, x=-1, y=-0.972193): 0.965688774807
    test 1212 224 224.096054985813 Beta(tan=0.968934, x=-1, y=-0.968934): 0.965688774807
    test 1213 224 223.999895821294 Theta(tan=0.965685, x=-1, y=-0.965685): 0.965688774807
    test 1214 224 224.047972230974 Mu(tan=0.967308, x=-0.718758, y=-0.69526), iteration=2: 0.965688774807
    test 1215 224 224.000000000000 Chi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 1216 224 224.063985091722 Xi(tan=0.967849, x=-1.44358, y=-1.39717), iteration=3: 0.965688774807

    test 1217 224 224.192224339246 Phi(tan=0.972193, x=-0.717005, y=-0.697068): 0.965688774807
    test 1218 224 224.096054985813 Beta(tan=0.968934, x=-0.718174, y=-0.695863): 0.965688774807
    test 1219 224 223.999895821294 Theta(tan=0.965685, x=-0.719341, y=-0.694657): 0.965688774807
    test 1220 224 224.047972230974 Mu(tan=0.967308, x=-0.718758, y=-0.69526): 0.965688774807
    test 1221 224 224.000000000000 Chi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 1222 224 224.063985091722 Xi(tan=0.967849, x=-0.718564, y=-0.695461): 0.965688774807

    test 1223 231 231.187959693265 Phi(tan=1.24321, x=-1, y=-1.24321): 1.234897156535
    test 1224 231 231.093949439927 Beta(tan=1.23905, x=-1, y=-1.23905): 1.234897156535
    test 1225 231 230.999872507121 Theta(tan=1.23489, x=-1, y=-1.23489): 1.234897156535
    test 1226 231 231.046931828803 Mu(tan=1.23697, x=-0.628684, y=-0.777661), iteration=3: 1.234897156535
    test 1227 231 231.000000000000 Chi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1228 231 231.062592734966 Xi(tan=1.23766, x=-1.26259, y=-1.56265), iteration=2: 1.234897156535

    test 1229 231 231.187959693265 Phi(tan=1.24321, x=-0.626768, y=-0.779206): 1.234897156535
    test 1230 231 231.093949439927 Beta(tan=1.23905, x=-0.628045, y=-0.778177): 1.234897156535
    test 1231 231 230.999872507121 Theta(tan=1.23489, x=-0.629322, y=-0.777145): 1.234897156535
    test 1232 231 231.046931828803 Mu(tan=1.23697, x=-0.628684, y=-0.777661): 1.234897156535
    test 1233 231 231.000000000000 Chi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1234 231 231.062592734966 Xi(tan=1.23766, x=-0.628471, y=-0.777833): 1.234897156535

    test 1235 238 238.172555759873 Phi(tan=1.61111, x=-1, y=-1.61111): 1.600334529041
    test 1236 238 238.086272148408 Beta(tan=1.60571, x=-1, y=-1.60571): 1.600334529041
    test 1237 238 237.999860628148 Theta(tan=1.60033, x=-1, y=-1.60033): 1.600334529041
    test 1238 238 238.043106397552 Mu(tan=1.60302, x=-0.529281, y=-0.848447), iteration=2: 1.600334529041
    test 1239 238 238.000000000000 Chi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 1240 238 238.057486709388 Xi(tan=1.60391, x=-1.06289, y=-1.70478), iteration=3: 1.600334529041

    test 1241 238 238.172555759873 Phi(tan=1.61111, x=-0.527363, y=-0.84964): 1.600334529041
    test 1242 238 238.086272148408 Beta(tan=1.60571, x=-0.528642, y=-0.848845): 1.600334529041
    test 1243 238 237.999860628148 Theta(tan=1.60033, x=-0.529921, y=-0.848047): 1.600334529041
    test 1244 238 238.043106397552 Mu(tan=1.60302, x=-0.529281, y=-0.848447): 1.600334529041
    test 1245 238 238.000000000000 Chi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 1246 238 238.057486709388 Xi(tan=1.60391, x=-0.529068, y=-0.848579): 1.600334529041

    test 1247 245 245.146952468013 Phi(tan=2.15895, x=-1, y=-2.15895): 2.144506920510
    test 1248 245 245.073488079777 Beta(tan=2.15171, x=-1, y=-2.15171): 2.144506920510
    test 1249 245 244.999864442704 Theta(tan=2.14449, x=-1, y=-2.14449): 2.144506920510
    test 1250 245 245.036726085420 Mu(tan=2.1481, x=-0.422037, y=-0.906578), iteration=3: 2.144506920510
    test 1251 245 245.000000000000 Chi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 1252 245 245.048974853160 Xi(tan=2.1493, x=-0.847475, y=-1.82148), iteration=3: 2.144506920510

    test 1253 245 245.146952468013 Phi(tan=2.15895, x=-0.420292, y=-0.907389): 2.144506920510
    test 1254 245 245.073488079777 Beta(tan=2.15171, x=-0.421455, y=-0.906849): 2.144506920510
    test 1255 245 244.999864442704 Theta(tan=2.14449, x=-0.42262, y=-0.906307): 2.144506920510
    test 1256 245 245.036726085420 Mu(tan=2.1481, x=-0.422037, y=-0.906578): 2.144506920510
    test 1257 245 245.000000000000 Chi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 1258 245 245.048974853160 Xi(tan=2.1493, x=-0.421843, y=-0.906669): 2.144506920510

    test 1259 252 252.112683493851 Phi(tan=3.0984, x=-1, y=-3.0984): 3.077683537175
    test 1260 252 252.056361244518 Beta(tan=3.08802, x=-1, y=-3.08802): 3.077683537175
    test 1261 252 251.999885538511 Theta(tan=3.07766, x=-1, y=-3.07766): 3.077683537175
    test 1262 252 252.028171414224 Mu(tan=3.08284, x=-0.308549, y=-0.951208), iteration=2: 3.077683537175
    test 1263 252 252.000000000000 Chi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1264 252 252.037565143062 Xi(tan=3.08456, x=-0.619556, y=-1.91106), iteration=3: 3.077683537175

    test 1265 252 252.112683493851 Phi(tan=3.0984, x=-0.307146, y=-0.951662): 3.077683537175
    test 1266 252 252.056361244518 Beta(tan=3.08802, x=-0.308081, y=-0.95136): 3.077683537175
    test 1267 252 251.999885538511 Theta(tan=3.07766, x=-0.309019, y=-0.951056): 3.077683537175
    test 1268 252 252.028171414224 Mu(tan=3.08284, x=-0.308549, y=-0.951208): 3.077683537175
    test 1269 252 252.000000000000 Chi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1270 252 252.037565143062 Xi(tan=3.08456, x=-0.308393, y=-0.951259): 3.077683537175

    test 1271 259 259.071782282365 Phi(tan=5.17919, x=-1, y=-5.17919): 5.144554015970
    test 1272 259 259.035908272116 Beta(tan=5.16182, x=-1, y=-5.16182): 5.144554015970
    test 1273 259 258.999922323247 Theta(tan=5.14452, x=-1, y=-5.14452): 5.144554015970
    test 1274 259 259.017950333560 Mu(tan=5.15317, x=-0.190501, y=-0.981687), iteration=3: 5.144554015970
    test 1275 259 259.000000000000 Chi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 1276 259 259.023934988471 Xi(tan=5.15605, x=-0.382508, y=-1.97223), iteration=2: 5.144554015970

    test 1277 259 259.071782282365 Phi(tan=5.17919, x=-0.189579, y=-0.981865): 5.144554015970
    test 1278 259 259.035908272116 Beta(tan=5.16182, x=-0.190194, y=-0.981747): 5.144554015970
    test 1279 259 258.999922323247 Theta(tan=5.14452, x=-0.19081, y=-0.981627): 5.144554015970
    test 1280 259 259.017950333560 Mu(tan=5.15317, x=-0.190501, y=-0.981687): 5.144554015970
    test 1281 259 259.000000000000 Chi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 1282 259 259.023934988471 Xi(tan=5.15605, x=-0.190399, y=-0.981707): 5.144554015970

    test 1283 266 266.026661867451 Phi(tan=14.3969, x=-1, y=-14.3969): 14.300666256712
    test 1284 266 266.013338229951 Beta(tan=14.3487, x=-1, y=-14.3487): 14.300666256712
    test 1285 266 265.999970204566 Theta(tan=14.3006, x=-1, y=-14.3006): 14.300666256712
    test 1286 266 266.006668111562 Mu(tan=14.3246, x=-0.0696404, y=-0.997572), iteration=2: 14.300666256712
    test 1287 266 266.000000000000 Chi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 1288 266 266.008891093578 Xi(tan=14.3326, x=-0.139828, y=-2.00411), iteration=3: 14.300666256712

    test 1289 266 266.026661867451 Phi(tan=14.3969, x=-0.0692923, y=-0.997596): 14.300666256712
    test 1290 266 266.013338229951 Beta(tan=14.3487, x=-0.0695242, y=-0.99758): 14.300666256712
    test 1291 266 265.999970204566 Theta(tan=14.3006, x=-0.069757, y=-0.997564): 14.300666256712
    test 1292 266 266.006668111562 Mu(tan=14.3246, x=-0.0696404, y=-0.997572): 14.300666256712
    test 1293 266 266.000000000000 Chi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 1294 266 266.008891093578 Xi(tan=14.3326, x=-0.0696017, y=-0.997575): 14.300666256712

    test 1295 273 272.979975455720 Phi(tan=-19.2096, x=1.0, y=-19.2096): -19.081136687728
    test 1296 273 272.989982200734 Beta(tan=-19.1452, x=1.0, y=-19.1452): -19.081136687728
    test 1297 273 273.000022425845 Theta(tan=-19.081, x=1.0, y=-19.081): -19.081136687728
    test 1298 273 272.994991833280 Mu(tan=-19.1131, x=0.0522487, y=-0.998634), iteration=3: -19.081136687728
    test 1299 273 273.000000000000 Chi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1300 273 272.993322244137 Xi(tan=-19.1238, x=0.104908, y=-2.00624), iteration=2: -19.081136687728

    test 1301 273 272.979975455720 Phi(tan=-19.2096, x=0.0519869, y=-0.998648): -19.081136687728
    test 1302 273 272.989982200734 Beta(tan=-19.1452, x=0.0521614, y=-0.998639): -19.081136687728
    test 1303 273 273.000022425845 Theta(tan=-19.081, x=0.0523363, y=-0.99863): -19.081136687728
    test 1304 273 272.994991833280 Mu(tan=-19.1131, x=0.0522487, y=-0.998634): -19.081136687728
    test 1305 273 273.000000000000 Chi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1306 273 272.993322244137 Xi(tan=-19.1238, x=0.0522196, y=-0.998636): -19.081136687728

    test 1307 280 279.934465137513 Phi(tan=-5.70946, x=1.0, y=-5.70946): -5.671281819618
    test 1308 280 279.967216473785 Beta(tan=-5.69032, x=1.0, y=-5.69032): -5.671281819618
    test 1309 280 280.000071376516 Theta(tan=-5.67124, x=1.0, y=-5.67124): -5.671281819618
    test 1310 280 279.983611509112 Mu(tan=-5.68078, x=0.173366, y=-0.984857), iteration=3: -5.671281819618
    test 1311 280 280.000000000000 Chi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 1312 280 279.978147657318 Xi(tan=-5.68396, x=0.348101, y=-1.97859), iteration=3: -5.671281819618

    test 1313 280 279.934465137513 Phi(tan=-5.70946, x=0.172522, y=-0.985006): -5.671281819618
    test 1314 280 279.967216473785 Beta(tan=-5.69032, x=0.173085, y=-0.984907): -5.671281819618
    test 1315 280 280.000071376516 Theta(tan=-5.67124, x=0.173649, y=-0.984808): -5.671281819618
    test 1316 280 279.983611509112 Mu(tan=-5.68078, x=0.173366, y=-0.984857): -5.671281819618
    test 1317 280 280.000000000000 Chi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 1318 280 279.978147657318 Xi(tan=-5.68396, x=0.173273, y=-0.984874): -5.671281819618

    test 1319 287 286.892806262875 Phi(tan=-3.29287, x=1.0, y=-3.29287): -3.270852618484
    test 1320 287 286.946383391473 Beta(tan=-3.28183, x=1.0, y=-3.28183): -3.270852618484
    test 1321 287 287.000110089905 Theta(tan=-3.27083, x=1.0, y=-3.27083): -3.270852618484
    test 1322 287 286.973199933024 Mu(tan=-3.27633, x=0.291924, y=-0.956441), iteration=2: -3.270852618484
    test 1323 287 287.000000000000 Chi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 1324 287 286.964263697434 Xi(tan=-3.27816, x=0.586171, y=-1.92156), iteration=2: -3.270852618484

    test 1325 287 286.892806262875 Phi(tan=-3.29287, x=0.290582, y=-0.95685): -3.270852618484
    test 1326 287 286.946383391473 Beta(tan=-3.28183, x=0.291477, y=-0.956578): -3.270852618484
    test 1327 287 287.000110089905 Theta(tan=-3.27083, x=0.292374, y=-0.956304): -3.270852618484
    test 1328 287 286.973199933024 Mu(tan=-3.27633, x=0.291924, y=-0.956441): -3.270852618484
    test 1329 287 287.000000000000 Chi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 1330 287 286.964263697434 Xi(tan=-3.27816, x=0.291775, y=-0.956487): -3.270852618484

    test 1331 294 293.857455069612 Phi(tan=-2.26116, x=1.0, y=-2.26116): -2.246036773904
    test 1332 294 293.928713955385 Beta(tan=-2.25358, x=1.0, y=-2.25358): -2.246036773904
    test 1333 294 294.000133599673 Theta(tan=-2.24602, x=1.0, y=-2.24602): -2.246036773904
    test 1334 294 293.964373479294 Mu(tan=-2.2498, x=0.406169, y=-0.913798), iteration=3: -2.246036773904
    test 1335 294 294.000000000000 Chi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1336 294 293.952491818284 Xi(tan=-2.25106, x=0.815604, y=-1.83597), iteration=3: -2.246036773904

    test 1337 294 293.857455069612 Phi(tan=-2.26116, x=0.404463, y=-0.914555): -2.246036773904
    test 1338 294 293.928713955385 Beta(tan=-2.25358, x=0.4056, y=-0.914051): -2.246036773904
    test 1339 294 294.000133599673 Theta(tan=-2.24602, x=0.406739, y=-0.913545): -2.246036773904
    test 1340 294 293.964373479294 Mu(tan=-2.2498, x=0.406169, y=-0.913798): -2.246036773904
    test 1341 294 294.000000000000 Chi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1342 294 293.952491818284 Xi(tan=-2.25106, x=0.405979, y=-0.913882): -2.246036773904

    test 1343 301 300.830507114227 Phi(tan=-1.67549, x=1.0, y=-1.67549): -1.664279482351
    test 1344 301 300.915256249596 Beta(tan=-1.66987, x=1.0, y=-1.66987): -1.664279482351
    test 1345 301 301.000139857505 Theta(tan=-1.66427, x=1.0, y=-1.66427): -1.664279482351
    test 1346 301 300.957655989828 Mu(tan=-1.66707, x=0.514404, y=-0.857548), iteration=3: -1.664279482351
    test 1347 301 301.000000000000 Chi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 1348 301 300.943530549480 Xi(tan=-1.668, x=1.033, y=-1.72305), iteration=3: -1.664279482351

    test 1349 301 300.830507114227 Phi(tan=-1.67549, x=0.5125, y=-0.858687): -1.664279482351
    test 1350 301 300.915256249596 Beta(tan=-1.66987, x=0.51377, y=-0.857928): -1.664279482351
    test 1351 301 301.000139857505 Theta(tan=-1.66427, x=0.51504, y=-0.857166): -1.664279482351
    test 1352 301 300.957655989828 Mu(tan=-1.66707, x=0.514404, y=-0.857548): -1.664279482351
    test 1353 301 301.000000000000 Chi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 1354 301 300.943530549480 Xi(tan=-1.668, x=0.514193, y=-0.857674): -1.664279482351

    test 1355 308 307.813573905031 Phi(tan=-1.28856, x=1.0, y=-1.28856): -1.279941632193
    test 1356 308 307.906813571405 Beta(tan=-1.28424, x=1.0, y=-1.28424): -1.279941632193
    test 1357 308 308.000130012564 Theta(tan=-1.27994, x=1.0, y=-1.27994): -1.279941632193
    test 1358 308 307.953447779688 Mu(tan=-1.28209, x=0.615021, y=-0.788511), iteration=2: -1.279941632193
    test 1359 308 308.000000000000 Chi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 1360 308 307.937914195662 Xi(tan=-1.2828, x=1.23514, y=-1.58444), iteration=3: -1.279941632193

    test 1361 308 307.813573905031 Phi(tan=-1.28856, x=0.613094, y=-0.79001): -1.279941632193
    test 1362 308 307.906813571405 Beta(tan=-1.28424, x=0.614379, y=-0.789011): -1.279941632193
    test 1363 308 308.000130012564 Theta(tan=-1.27994, x=0.615663, y=-0.788009): -1.279941632193
    test 1364 308 307.953447779688 Mu(tan=-1.28209, x=0.615021, y=-0.788511): -1.279941632193
    test 1365 308 308.000000000000 Chi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 1366 308 307.937914195662 Xi(tan=-1.2828, x=0.614807, y=-0.788677): -1.279941632193

    test 1367 315 314.807684778155 Phi(tan=-1.00674, x=1.0, y=-1.00674): -1.000000000000
    test 1368 315 314.903895845383 Beta(tan=-1.00336, x=1.0, y=-1.00336): -1.000000000000
    test 1369 315 315.000107996571 Theta(tan=-0.999996, x=1.0, y=-0.999996): -1.000000000000
    test 1370 315 314.952001570934 Mu(tan=-1.00168, x=0.706514, y=-0.707699), iteration=2: -1.000000000000
    test 1371 315 315.000000000000 Chi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 1372 315 314.935980653019 Xi(tan=-1.00224, x=1.41898, y=-1.42215), iteration=3: -1.000000000000

    test 1373 315 314.807684778155 Phi(tan=-1.00674, x=0.704729, y=-0.709476): -1.000000000000
    test 1374 315 314.903895845383 Beta(tan=-1.00336, x=0.70592, y=-0.708292): -1.000000000000
    test 1375 315 315.000107996571 Theta(tan=-0.999996, x=0.707108, y=-0.707105): -1.000000000000
    test 1376 315 314.952001570934 Mu(tan=-1.00168, x=0.706514, y=-0.707699): -1.000000000000
    test 1377 315 315.000000000000 Chi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 1378 315 314.935980653019 Xi(tan=-1.00224, x=0.706316, y=-0.707896): -1.000000000000

    test 1379 322 321.813220359944 Phi(tan=-0.786549, x=1.0, y=-0.786549): -0.781285626507
    test 1380 322 321.906687396462 Beta(tan=-0.783912, x=1.0, y=-0.783912): -0.781285626507
    test 1381 322 322.000079515502 Theta(tan=-0.781283, x=1.0, y=-0.781283): -0.781285626507
    test 1382 322 321.953406847958 Mu(tan=-0.782596, x=0.78751, y=-0.616302), iteration=3: -0.781285626507
    test 1383 322 322.000000000000 Chi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 1384 322 321.937850353113 Xi(tan=-0.783034, x=1.58176, y=-1.23857), iteration=3: -0.781285626507

    test 1385 322 321.813220359944 Phi(tan=-0.786549, x=0.786, y=-0.618227): -0.781285626507
    test 1386 322 321.906687396462 Beta(tan=-0.783912, x=0.787007, y=-0.616944): -0.781285626507
    test 1387 322 322.000079515502 Theta(tan=-0.781283, x=0.788012, y=-0.61566): -0.781285626507
    test 1388 322 321.953406847958 Mu(tan=-0.782596, x=0.78751, y=-0.616302): -0.781285626507
    test 1389 322 322.000000000000 Chi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 1390 322 321.937850353113 Xi(tan=-0.783034, x=0.787342, y=-0.616516): -0.781285626507

    test 1391 329 328.829882787345 Phi(tan=-0.604909, x=1.0, y=-0.604909): -0.600860619028
    test 1392 329 328.915033437072 Beta(tan=-0.602881, x=1.0, y=-0.602881): -0.600860619028
    test 1393 329 329.000050684665 Theta(tan=-0.600859, x=1.0, y=-0.600859): -0.600860619028
    test 1394 329 328.957583708533 Mu(tan=-0.601869, x=0.856786, y=-0.515672), iteration=3: -0.600860619028
    test 1395 329 329.000000000000 Chi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 1396 329 328.943417809954 Xi(tan=-0.602205, x=1.72101, y=-1.0364), iteration=3: -0.600860619028

    test 1397 329 328.829882787345 Phi(tan=-0.604909, x=0.855634, y=-0.517581): -0.600860619028
    test 1398 329 328.915033437072 Beta(tan=-0.602881, x=0.856403, y=-0.516309): -0.600860619028
    test 1399 329 329.000050684665 Theta(tan=-0.600859, x=0.857168, y=-0.515037): -0.600860619028
    test 1400 329 328.957583708533 Mu(tan=-0.601869, x=0.856786, y=-0.515672): -0.600860619028
    test 1401 329 329.000000000000 Chi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 1402 329 328.943417809954 Xi(tan=-0.602205, x=0.856658, y=-0.515884): -0.600860619028

    test 1403 336 335.856706115158 Phi(tan=-0.448229, x=1.0, y=-0.448229): -0.445228685309
    test 1404 336 335.928446665868 Beta(tan=-0.446726, x=1.0, y=-0.446726): -0.445228685309
    test 1405 336 336.000026626488 Theta(tan=-0.445228, x=1.0, y=-0.445228): -0.445228685309
    test 1406 336 335.964286769667 Mu(tan=-0.445976, x=0.913292, y=-0.407306), iteration=3: -0.445228685309
    test 1407 336 336.000000000000 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 1408 336 335.952356574339 Xi(tan=-0.446225, x=1.83461, y=-0.818652), iteration=2: -0.445228685309

    test 1409 336 335.856706115158 Phi(tan=-0.448229, x=0.912525, y=-0.40902): -0.445228685309
    test 1410 336 335.928446665868 Beta(tan=-0.446726, x=0.913037, y=-0.407877): -0.445228685309
    test 1411 336 336.000026626488 Theta(tan=-0.445228, x=0.913546, y=-0.406736): -0.445228685309
    test 1412 336 335.964286769667 Mu(tan=-0.445976, x=0.913292, y=-0.407306): -0.445228685309
    test 1413 336 336.000000000000 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 1414 336 335.952356574339 Xi(tan=-0.446225, x=0.913207, y=-0.407496): -0.445228685309

    test 1415 343 342.892108013861 Phi(tan=-0.307791, x=1.0, y=-0.307791): -0.305730681459
    test 1416 343 342.946134198526 Beta(tan=-0.306759, x=1.0, y=-0.306759): -0.305730681459
    test 1417 343 343.000010359231 Theta(tan=-0.30573, x=1.0, y=-0.30573): -0.305730681459
    test 1418 343 342.973119094169 Mu(tan=-0.306244, x=0.956167, y=-0.29282), iteration=3: -0.305730681459
    test 1419 343 343.000000000000 Chi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 1420 343 342.964137610259 Xi(tan=-0.306415, x=1.92083, y=-0.588571), iteration=2: -0.305730681459

    test 1421 343 342.892108013861 Phi(tan=-0.307791, x=0.955753, y=-0.294172): -0.305730681459
    test 1422 343 342.946134198526 Beta(tan=-0.306759, x=0.956029, y=-0.293271): -0.305730681459
    test 1423 343 343.000010359231 Theta(tan=-0.30573, x=0.956305, y=-0.292372): -0.305730681459
    test 1424 343 342.973119094169 Mu(tan=-0.306244, x=0.956167, y=-0.29282): -0.305730681459
    test 1425 343 343.000000000000 Chi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 1426 343 342.964137610259 Xi(tan=-0.306415, x=0.956122, y=-0.29297): -0.305730681459

    test 1427 350 349.933981060171 Phi(tan=-0.177515, x=1.0, y=-0.177515): -0.176326980708
    test 1428 350 349.967043715347 Beta(tan=-0.17692, x=1.0, y=-0.17692): -0.176326980708
    test 1429 350 350.000002236053 Theta(tan=-0.176327, x=1.0, y=-0.176327): -0.176326980708
    test 1430 350 349.983555465918 Mu(tan=-0.176623, x=0.984758, y=-0.173931), iteration=3: -0.176326980708
    test 1431 350 350.000000000000 Chi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 1432 350 349.978060244759 Xi(tan=-0.176722, x=1.97833, y=-0.349613), iteration=3: -0.176326980708

    test 1433 350 349.933981060171 Phi(tan=-0.177515, x=0.984607, y=-0.174783): -0.176326980708
    test 1434 350 349.967043715347 Beta(tan=-0.17692, x=0.984708, y=-0.174215): -0.176326980708
    test 1435 350 350.000002236053 Theta(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 1436 350 349.983555465918 Mu(tan=-0.176623, x=0.984758, y=-0.173931): -0.176326980708
    test 1437 350 350.000000000000 Chi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 1438 350 349.978060244759 Xi(tan=-0.176722, x=0.984741, y=-0.174025): -0.176326980708

    test 1439 357 356.979818878824 Phi(tan=-0.052761, x=1.0, y=-0.052761): -0.052407779283
    test 1440 357 356.989926321337 Beta(tan=-0.0525841, x=1.0, y=-0.0525841): -0.052407779283
    test 1441 357 357.000000062090 Theta(tan=-0.0524078, x=1.0, y=-0.0524078): -0.052407779283
    test 1442 357 356.994973705906 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236), iteration=3: -0.052407779283
    test 1443 357 357.000000000000 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 1444 357 356.993293970223 Xi(tan=-0.0525251, x=2.00621, y=-0.105377), iteration=2: -0.052407779283

    test 1445 357 356.979818878824 Phi(tan=-0.052761, x=0.998611, y=-0.0526877): -0.052407779283
    test 1446 357 356.989926321337 Beta(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 1447 357 357.000000062090 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 1448 357 356.994973705906 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236): -0.052407779283
    test 1449 357 357.000000000000 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 1450 357 356.993293970223 Xi(tan=-0.0525251, x=0.998623, y=-0.0524528): -0.052407779283

    test 1451  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1452  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1453  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1454  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1455  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1456  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 1457  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1458  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1459  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1460  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1461  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 1462  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 1463  7 7.035013553420 Phi(tan=0.123405, x=1.0, y=0.123405): 0.122784560903
    test 1464  7 7.011661662966 Beta(tan=0.122991, x=1.0, y=0.122991): 0.122784560903
    test 1465  7 6.988385737369 Theta(tan=0.122579, x=1.0, y=0.122579): 0.122784560903
    test 1466  7 7.000000000000 Mu(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 1467  7 6.988386512663 Chi(tan=0.122579, x=1.0, y=0.122579), iteration=2: 0.122784560903
    test 1468  7 7.003880991951 Xi(tan=0.122853, x=1.99399, y=0.244968), iteration=2: 0.122784560903

    test 1469  7 7.035013553420 Phi(tan=0.123405, x=0.992471, y=0.122476): 0.122784560903
    test 1470  7 7.011661662966 Beta(tan=0.122991, x=0.992521, y=0.122071): 0.122784560903
    test 1471  7 6.988385737369 Theta(tan=0.122579, x=0.992571, y=0.121668): 0.122784560903
    test 1472  7 7.000000000000 Mu(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 1473  7 6.988386512663 Chi(tan=0.122579, x=0.992571, y=0.121668): 0.122784560903
    test 1474  7 7.003880991951 Xi(tan=0.122853, x=0.992538, y=0.121937): 0.122784560903

    test 1475 14 14.067929480939 Phi(tan=0.250588, x=1.0, y=0.250588): 0.249328002843
    test 1476 14 14.022626357697 Beta(tan=0.249747, x=1.0, y=0.249747): 0.249328002843
    test 1477 14 13.977457317809 Theta(tan=0.24891, x=1.0, y=0.24891): 0.249328002843
    test 1478 14 14.000000000000 Mu(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 1479 14 13.977463246186 Chi(tan=0.24891, x=1.0, y=0.24891), iteration=3: 0.249328002843
    test 1480 14 14.007530515250 Xi(tan=0.249468, x=1.94924, y=0.486272), iteration=2: 0.249328002843

    test 1481 14 14.067929480939 Phi(tan=0.250588, x=0.970008, y=0.243072): 0.249328002843
    test 1482 14 14.022626357697 Beta(tan=0.249747, x=0.9702, y=0.242305): 0.249328002843
    test 1483 14 13.977457317809 Theta(tan=0.24891, x=0.970391, y=0.24154): 0.249328002843
    test 1484 14 14.000000000000 Mu(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 1485 14 13.977463246186 Chi(tan=0.24891, x=0.970391, y=0.24154): 0.249328002843
    test 1486 14 14.007530515250 Xi(tan=0.249468, x=0.970264, y=0.242049): 0.249328002843

    test 1487 21 21.096778912148 Phi(tan=0.385803, x=1.0, y=0.385803): 0.383864035035
    test 1488 21 21.032239504096 Beta(tan=0.38451, x=1.0, y=0.38451): 0.383864035035
    test 1489 21 20.967860810199 Theta(tan=0.383221, x=1.0, y=0.383221): 0.383864035035
    test 1490 21 21.000000000000 Mu(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 1491 21 20.967879349935 Chi(tan=0.383221, x=1.0, y=0.383221), iteration=2: 0.383864035035
    test 1492 21 21.010731065364 Xi(tan=0.384079, x=1.87541, y=0.720305), iteration=3: 0.383864035035

    test 1493 21 21.096778912148 Phi(tan=0.385803, x=0.932974, y=0.359944): 0.383864035035
    test 1494 21 21.032239504096 Beta(tan=0.38451, x=0.933379, y=0.358893): 0.383864035035
    test 1495 21 20.967860810199 Theta(tan=0.383221, x=0.933781, y=0.357844): 0.383864035035
    test 1496 21 21.000000000000 Mu(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 1497 21 20.967879349935 Chi(tan=0.383221, x=0.933781, y=0.357845): 0.383864035035
    test 1498 21 21.010731065364 Xi(tan=0.384079, x=0.933513, y=0.358543): 0.383864035035

    test 1499 28 28.119841850563 Phi(tan=0.534395, x=1.0, y=0.534395): 0.531709431661
    test 1500 28 28.039928546523 Beta(tan=0.532604, x=1.0, y=0.532604): 0.531709431661
    test 1501 28 27.960164870301 Theta(tan=0.530818, x=1.0, y=0.530818): 0.531709431661
    test 1502 28 28.000000000000 Mu(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 1503 28 27.960204286276 Chi(tan=0.530819, x=1.0, y=0.530819), iteration=3: 0.531709431661
    test 1504 28 28.013292185978 Xi(tan=0.532007, x=1.77361, y=0.94357), iteration=2: 0.531709431661

    test 1505 28 28.119841850563 Phi(tan=0.534395, x=0.881964, y=0.471317): 0.531709431661
    test 1506 28 28.039928546523 Beta(tan=0.532604, x=0.88262, y=0.470087): 0.531709431661
    test 1507 28 27.960164870301 Theta(tan=0.530818, x=0.883274, y=0.468858): 0.531709431661
    test 1508 28 28.000000000000 Mu(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 1509 28 27.960204286276 Chi(tan=0.530819, x=0.883273, y=0.468858): 0.531709431661
    test 1510 28 28.013292185978 Xi(tan=0.532007, x=0.882839, y=0.469676): 0.531709431661

    test 1511 35 35.135750772251 Phi(tan=0.703744, x=1.0, y=0.703744): 0.700207538210
    test 1512 35 35.045237306558 Beta(tan=0.701385, x=1.0, y=0.701385): 0.700207538210
    test 1513 35 34.954827299026 Theta(tan=0.699033, x=1.0, y=0.699033): 0.700207538210
    test 1514 35 35.000000000000 Mu(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 1515 35 34.954893977158 Chi(tan=0.699035, x=1.0, y=0.699035), iteration=2: 0.700207538210
    test 1516 35 35.015061857454 Xi(tan=0.700599, x=1.64536, y=1.15274), iteration=3: 0.700207538210

    test 1517 35 35.135750772251 Phi(tan=0.703744, x=0.817791, y=0.575516): 0.700207538210
    test 1518 35 35.045237306558 Beta(tan=0.701385, x=0.818699, y=0.574223): 0.700207538210
    test 1519 35 34.954827299026 Theta(tan=0.699033, x=0.819604, y=0.57293): 0.700207538210
    test 1520 35 35.000000000000 Mu(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 1521 35 34.954893977158 Chi(tan=0.699035, x=0.819603, y=0.572931): 0.700207538210
    test 1522 35 35.015061857454 Xi(tan=0.700599, x=0.819001, y=0.573792): 0.700207538210

    test 1523 42 42.143571223962 Phi(tan=0.904952, x=1.0, y=0.904952): 0.900404044298
    test 1524 42 42.047852933259 Beta(tan=0.901917, x=1.0, y=0.901917): 0.900404044298
    test 1525 42 41.952167704870 Theta(tan=0.898894, x=1.0, y=0.898894): 0.900404044298
    test 1526 42 42.000000000000 Mu(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 1527 42 41.952263729127 Chi(tan=0.898897, x=1.0, y=0.898897), iteration=3: 0.900404044298
    test 1528 42 42.015935495968 Xi(tan=0.900908, x=1.49259, y=1.34469), iteration=3: 0.900404044298

    test 1529 42 42.143571223962 Phi(tan=0.904952, x=0.741466, y=0.670991): 0.900404044298
    test 1530 42 42.047852933259 Beta(tan=0.901917, x=0.742586, y=0.669751): 0.900404044298
    test 1531 42 41.952167704870 Theta(tan=0.898894, x=0.743703, y=0.66851): 0.900404044298
    test 1532 42 42.000000000000 Mu(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 1533 42 41.952263729127 Chi(tan=0.898897, x=0.743702, y=0.668511): 0.900404044298
    test 1534 42 42.015935495968 Xi(tan=0.900908, x=0.742959, y=0.669337): 0.900404044298

    test 1535 49 49.142854800592 Phi(tan=1.15618, x=1.0, y=1.15618): 1.150368407221
    test 1536 49 49.047623888378 Beta(tan=1.1523, x=1.0, y=1.1523): 1.150368407221
    test 1537 49 48.952347927786 Theta(tan=1.14844, x=1.0, y=1.14844): 1.150368407221
    test 1538 49 49.000000000000 Mu(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 1539 49 48.952469542367 Chi(tan=1.14844, x=1.0, y=1.14844), iteration=3: 1.150368407221
    test 1540 49 49.015862036782 Xi(tan=1.15101, x=1.31759, y=1.51656), iteration=2: 1.150368407221

    test 1541 49 49.142854800592 Phi(tan=1.15618, x=0.654175, y=0.756343): 1.150368407221
    test 1542 49 49.047623888378 Beta(tan=1.1523, x=0.655431, y=0.755255): 1.150368407221
    test 1543 49 48.952347927786 Theta(tan=1.14844, x=0.656686, y=0.754164): 1.150368407221
    test 1544 49 49.000000000000 Mu(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 1545 49 48.952469542367 Chi(tan=1.14844, x=0.656685, y=0.754165): 1.150368407221
    test 1546 49 49.015862036782 Xi(tan=1.15101, x=0.65585, y=0.754891): 1.150368407221

    test 1547 56 56.133661968442 Phi(tan=1.49005, x=1.0, y=1.49005): 1.482560968513
    test 1548 56 56.044568042538 Beta(tan=1.48505, x=1.0, y=1.48505): 1.482560968513
    test 1549 56 55.955361525715 Theta(tan=1.48007, x=1.0, y=1.48007): 1.482560968513
    test 1550 56 56.000000000000 Mu(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 1551 56 55.955498904140 Chi(tan=1.48008, x=1.0, y=1.48008), iteration=3: 1.482560968513
    test 1552 56 56.014846771252 Xi(tan=1.48339, x=1.12298, y=1.66581), iteration=2: 1.482560968513

    test 1553 56 56.133661968442 Phi(tan=1.49005, x=0.557257, y=0.83034): 1.482560968513
    test 1554 56 56.044568042538 Beta(tan=1.48505, x=0.558548, y=0.829472): 1.482560968513
    test 1555 56 55.955361525715 Theta(tan=1.48007, x=0.559839, y=0.828602): 1.482560968513
    test 1556 56 56.000000000000 Mu(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 1557 56 55.955498904140 Chi(tan=1.48008, x=0.559837, y=0.828603): 1.482560968513
    test 1558 56 56.014846771252 Xi(tan=1.48339, x=0.558978, y=0.829182): 1.482560968513

    test 1559 63 63.116554283961 Phi(tan=1.97252, x=1.0, y=1.97252): 1.962610505505
    test 1560 63 63.038870615950 Beta(tan=1.96591, x=1.0, y=1.96591): 1.962610505505
    test 1561 63 62.961033158986 Theta(tan=1.95932, x=1.0, y=1.95932): 1.962610505505
    test 1562 63 63.000000000000 Mu(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 1563 63 62.961171598977 Chi(tan=1.95933, x=1.0, y=1.95933), iteration=3: 1.962610505505
    test 1564 63 63.012950815476 Xi(tan=1.96371, x=0.911653, y=1.79022), iteration=3: 1.962610505505

    test 1565 63 63.116554283961 Phi(tan=1.97252, x=0.452177, y=0.891928): 1.962610505505
    test 1566 63 63.038870615950 Beta(tan=1.96591, x=0.453386, y=0.891314): 1.962610505505
    test 1567 63 62.961033158986 Theta(tan=1.95932, x=0.454596, y=0.890698): 1.962610505505
    test 1568 63 63.000000000000 Mu(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 1569 63 62.961171598977 Chi(tan=1.95933, x=0.454594, y=0.890699): 1.962610505505
    test 1570 63 63.012950815476 Xi(tan=1.96371, x=0.453789, y=0.891109): 1.962610505505

    test 1571 70 70.092557449454 Phi(tan=2.76135, x=1.0, y=2.76135): 2.747477419455
    test 1572 70 70.030872319297 Beta(tan=2.75209, x=1.0, y=2.75209): 2.747477419455
    test 1573 70 69.969028142824 Theta(tan=2.74286, x=1.0, y=2.74286): 2.747477419455
    test 1574 70 70.000000000000 Mu(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 1575 70 69.969150471863 Chi(tan=2.74288, x=1.0, y=2.74288), iteration=2: 2.747477419455
    test 1576 70 70.010287292906 Xi(tan=2.74901, x=0.686773, y=1.88795), iteration=3: 2.747477419455

    test 1577 70 70.092557449454 Phi(tan=2.76135, x=0.340502, y=0.940244): 2.747477419455
    test 1578 70 70.030872319297 Beta(tan=2.75209, x=0.341514, y=0.939877): 2.747477419455
    test 1579 70 69.969028142824 Theta(tan=2.74286, x=0.342528, y=0.939508): 2.747477419455
    test 1580 70 70.000000000000 Mu(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 1581 70 69.969150471863 Chi(tan=2.74288, x=0.342526, y=0.939508): 2.747477419455
    test 1582 70 70.010287292906 Xi(tan=2.74901, x=0.341851, y=0.939754): 2.747477419455

    test 1583 77 77.063098225048 Phi(tan=4.35334, x=1.0, y=4.35334): 4.331475874284
    test 1584 77 77.021048596835 Beta(tan=4.33875, x=1.0, y=4.33875): 4.331475874284
    test 1585 77 76.978871802460 Theta(tan=4.3242, x=1.0, y=4.3242): 4.331475874284
    test 1586 77 77.000000000000 Mu(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 1587 77 76.978961492015 Chi(tan=4.32423, x=1.0, y=4.32423), iteration=3: 4.331475874284
    test 1588 77 77.007014500932 Xi(tan=4.3339, x=0.451683, y=1.95755), iteration=3: 4.331475874284

    test 1589 77 77.063098225048 Phi(tan=4.35334, x=0.223878, y=0.974617): 4.331475874284
    test 1590 77 77.021048596835 Beta(tan=4.33875, x=0.224593, y=0.974453): 4.331475874284
    test 1591 77 76.978871802460 Theta(tan=4.3242, x=0.22531, y=0.974287): 4.331475874284
    test 1592 77 77.000000000000 Mu(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 1593 77 76.978961492015 Chi(tan=4.32423, x=0.225309, y=0.974287): 4.331475874284
    test 1594 77 77.007014500932 Xi(tan=4.3339, x=0.224832, y=0.974398): 4.331475874284

    test 1595 84 84.029919429066 Phi(tan=9.5624, x=1.0, y=9.5624): 9.514364454223
    test 1596 84 84.009981321799 Beta(tan=9.53033, x=1.0, y=9.53033): 9.514364454223
    test 1597 84 83.989977604221 Theta(tan=9.49838, x=1.0, y=9.49838): 9.514364454223
    test 1598 84 84.000000000000 Mu(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 1599 84 83.990021917793 Chi(tan=9.49845, x=1.0, y=9.49845), iteration=3: 9.514364454223
    test 1600 84 84.003326493225 Xi(tan=9.51968, x=0.20988, y=1.99799), iteration=2: 9.514364454223

    test 1601 84 84.029919429066 Phi(tan=9.5624, x=0.104009, y=0.994576): 9.514364454223
    test 1602 84 84.009981321799 Beta(tan=9.53033, x=0.104355, y=0.99454): 9.514364454223
    test 1603 84 83.989977604221 Theta(tan=9.49838, x=0.104702, y=0.994504): 9.514364454223
    test 1604 84 84.000000000000 Mu(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 1605 84 83.990021917793 Chi(tan=9.49845, x=0.104702, y=0.994504): 9.514364454223
    test 1606 84 84.003326493225 Xi(tan=9.51968, x=0.104471, y=0.994528): 9.514364454223

    test 1607 91 90.994978117111 Phi(tan=-57.5792, x=-1, y=57.5792): -57.289961630759
    test 1608 91 90.998324636576 Beta(tan=-57.3861, x=-1, y=57.3861): -57.289961630759
    test 1609 91 91.001682407187 Theta(tan=-57.1937, x=-1, y=57.1937): -57.289961630759
    test 1610 91 91.000000000000 Mu(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 1611 91 91.001674889056 Chi(tan=-57.1941, x=-1, y=57.1941), iteration=3: -57.289961630759
    test 1612 91 90.999441640005 Xi(tan=-57.322, x=-0.035042, y=2.00867), iteration=3: -57.289961630759

    test 1613 91 90.994978117111 Phi(tan=-57.5792, x=-0.0173648, y=0.999849): -57.289961630759
    test 1614 91 90.998324636576 Beta(tan=-57.3861, x=-0.0174232, y=0.999848): -57.289961630759
    test 1615 91 91.001682407187 Theta(tan=-57.1937, x=-0.0174818, y=0.999847): -57.289961630759
    test 1616 91 91.000000000000 Mu(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 1617 91 91.001674889056 Chi(tan=-57.1941, x=-0.0174816, y=0.999847): -57.289961630759
    test 1618 91 90.999441640005 Xi(tan=-57.322, x=-0.0174427, y=0.999848): -57.289961630759

    test 1619 98 97.960332584009 Phi(tan=-7.15129, x=-1, y=7.15129): -7.115369722384
    test 1620 98 97.986766870880 Beta(tan=-7.12731, x=-1, y=7.12731): -7.115369722384
    test 1621 98 98.013286645922 Theta(tan=-7.10342, x=-1, y=7.10342): -7.115369722384
    test 1622 98 98.000000000000 Mu(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 1623 98 98.013228398375 Chi(tan=-7.10347, x=-1, y=7.10347), iteration=2: -7.115369722384
    test 1624 98 97.995589824971 Xi(tan=-7.11935, x=-0.279443, y=1.98945), iteration=2: -7.115369722384

    test 1625 98 97.960332584009 Phi(tan=-7.15129, x=-0.138487, y=0.990364): -7.115369722384
    test 1626 98 97.986766870880 Beta(tan=-7.12731, x=-0.138944, y=0.9903): -7.115369722384
    test 1627 98 98.013286645922 Theta(tan=-7.10342, x=-0.139403, y=0.990236): -7.115369722384
    test 1628 98 98.000000000000 Mu(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 1629 98 98.013228398375 Chi(tan=-7.10347, x=-0.139402, y=0.990236): -7.115369722384
    test 1630 98 97.995589824971 Xi(tan=-7.11935, x=-0.139097, y=0.990279): -7.115369722384

    test 1631 105 104.928024147426 Phi(tan=-3.75089, x=-1, y=3.75089): -3.732050807569
    test 1632 105 104.975990619809 Beta(tan=-3.73832, x=-1, y=3.73832): -3.732050807569
    test 1633 105 105.024096873204 Theta(tan=-3.72578, x=-1, y=3.72578): -3.732050807569
    test 1634 105 105.000000000000 Mu(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1635 105 105.023996337790 Chi(tan=-3.72581, x=-1, y=3.72581), iteration=3: -3.732050807569
    test 1636 105 104.991999000074 Xi(tan=-3.73414, x=-0.519691, y=1.9406), iteration=3: -3.732050807569

    test 1637 105 104.928024147426 Phi(tan=-3.75089, x=-0.257605, y=0.96625): -3.732050807569
    test 1638 105 104.975990619809 Beta(tan=-3.73832, x=-0.258414, y=0.966034): -3.732050807569
    test 1639 105 105.024096873204 Theta(tan=-3.72578, x=-0.259225, y=0.965817): -3.732050807569
    test 1640 105 105.000000000000 Mu(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 1641 105 105.023996337790 Chi(tan=-3.72581, x=-0.259224, y=0.965817): -3.732050807569
    test 1642 105 104.991999000074 Xi(tan=-3.73414, x=-0.258684, y=0.965962): -3.732050807569

    test 1643 112 111.899959803709 Phi(tan=-2.48758, x=-1, y=2.48758): -2.475086853416
    test 1644 112 111.966633129887 Beta(tan=-2.47924, x=-1, y=2.47924): -2.475086853416
    test 1645 112 112.033467905647 Theta(tan=-2.47093, x=-1, y=2.47093): -2.475086853416
    test 1646 112 112.000000000000 Mu(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 1647 112 112.033339197227 Chi(tan=-2.47095, x=-1, y=2.47095), iteration=3: -2.475086853416
    test 1648 112 111.988881847875 Xi(tan=-2.47647, x=-0.752216, y=1.86284), iteration=2: -2.475086853416

    test 1649 112 111.899959803709 Phi(tan=-2.48758, x=-0.372987, y=0.927837): -2.475086853416
    test 1650 112 111.966633129887 Beta(tan=-2.47924, x=-0.374067, y=0.927402): -2.475086853416
    test 1651 112 112.033467905647 Theta(tan=-2.47093, x=-0.375148, y=0.926965): -2.475086853416
    test 1652 112 112.000000000000 Mu(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 1653 112 112.033339197227 Chi(tan=-2.47095, x=-0.375146, y=0.926966): -2.475086853416
    test 1654 112 111.988881847875 Xi(tan=-2.47647, x=-0.374427, y=0.927257): -2.475086853416

    test 1655 119 118.877801825189 Phi(tan=-1.81316, x=-1, y=1.81316): -1.804047755271
    test 1656 119 118.959249130251 Beta(tan=-1.80708, x=-1, y=1.80708): -1.804047755271
    test 1657 119 119.040841846602 Theta(tan=-1.80102, x=-1, y=1.80102): -1.804047755271
    test 1658 119 119.000000000000 Mu(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 1659 119 119.040702010928 Chi(tan=-1.80103, x=-1, y=1.80103), iteration=3: -1.804047755271
    test 1660 119 118.986423296510 Xi(tan=-1.80506, x=-0.973556, y=1.75732), iteration=2: -1.804047755271

    test 1661 119 118.877801825189 Phi(tan=-1.81316, x=-0.482943, y=0.875652): -1.804047755271
    test 1662 119 118.959249130251 Beta(tan=-1.80708, x=-0.484187, y=0.874964): -1.804047755271
    test 1663 119 119.040841846602 Theta(tan=-1.80102, x=-0.485433, y=0.874274): -1.804047755271
    test 1664 119 119.000000000000 Mu(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 1665 119 119.040702010928 Chi(tan=-1.80103, x=-0.485431, y=0.874275): -1.804047755271
    test 1666 119 118.986423296510 Xi(tan=-1.80506, x=-0.484602, y=0.874735): -1.804047755271

    test 1667 126 125.862870188589 Phi(tan=-1.38333, x=-1, y=1.38333): -1.376381920471
    test 1668 126 125.954278157197 Beta(tan=-1.37869, x=-1, y=1.37869): -1.376381920471
    test 1669 126 126.045781505815 Theta(tan=-1.37407, x=-1, y=1.37407): -1.376381920471
    test 1670 126 126.000000000000 Mu(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 1671 126 126.045647308130 Chi(tan=-1.37408, x=-1, y=1.37408), iteration=3: -1.376381920471
    test 1672 126 125.984769594047 Xi(tan=-1.37715, x=-1.18042, y=1.62561), iteration=2: -1.376381920471

    test 1673 126 125.862870188589 Phi(tan=-1.38333, x=-0.585847, y=0.810421): -1.376381920471
    test 1674 126 125.954278157197 Beta(tan=-1.37869, x=-0.587139, y=0.809486): -1.376381920471
    test 1675 126 126.045781505815 Theta(tan=-1.37407, x=-0.588431, y=0.808547): -1.376381920471
    test 1676 126 126.000000000000 Mu(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 1677 126 126.045647308130 Chi(tan=-1.37408, x=-0.58843, y=0.808548): -1.376381920471
    test 1678 126 125.984769594047 Xi(tan=-1.37715, x=-0.58757, y=0.809173): -1.376381920471

    test 1679 133 132.856063347719 Phi(tan=-1.07778, x=-1, y=1.07778): -1.072368710025
    test 1680 133 132.952018246366 Beta(tan=-1.07417, x=-1, y=1.07417): -1.072368710025
    test 1681 133 133.047996165770 Theta(tan=-1.07057, x=-1, y=1.07057): -1.072368710025
    test 1682 133 133.000000000000 Mu(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 1683 133 133.047881115076 Chi(tan=-1.07057, x=-1, y=1.07057), iteration=3: -1.072368710025
    test 1684 133 132.984019576906 Xi(tan=-1.07297, x=-1.36971, y=1.46966), iteration=3: -1.072368710025

    test 1685 133 132.856063347719 Phi(tan=-1.07778, x=-0.680159, y=0.733065): -1.072368710025
    test 1686 133 132.952018246366 Beta(tan=-1.07417, x=-0.681386, y=0.731925): -1.072368710025
    test 1687 133 133.047996165770 Theta(tan=-1.07057, x=-0.682611, y=0.730782): -1.072368710025
    test 1688 133 133.000000000000 Mu(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 1689 133 133.047881115076 Chi(tan=-1.07057, x=-0.682609, y=0.730784): -1.072368710025
    test 1690 133 132.984019576906 Xi(tan=-1.07297, x=-0.681794, y=0.731544): -1.072368710025

    test 1691 140 139.857802229338 Phi(tan=-0.843338, x=-1, y=0.843338): -0.839099631177
    test 1692 140 139.952607597930 Beta(tan=-0.84051, x=-1, y=0.84051): -0.839099631177
    test 1693 140 140.047358211970 Theta(tan=-0.837692, x=-1, y=0.837692): -0.839099631177
    test 1694 140 140.000000000000 Mu(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 1695 140 140.047270461053 Chi(tan=-0.837695, x=-1, y=0.837695), iteration=3: -0.839099631177
    test 1696 140 139.984218660625 Xi(tan=-0.839569, x=-1.53861, y=1.29177), iteration=2: -0.839099631177

    test 1697 140 139.857802229338 Phi(tan=-0.843338, x=-0.764447, y=0.644687): -0.839099631177
    test 1698 140 139.952607597930 Beta(tan=-0.84051, x=-0.765512, y=0.643421): -0.839099631177
    test 1699 140 140.047358211970 Theta(tan=-0.837692, x=-0.766575, y=0.642154): -0.839099631177
    test 1700 140 140.000000000000 Mu(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 1701 140 140.047270461053 Chi(tan=-0.837695, x=-0.766574, y=0.642155): -0.839099631177
    test 1702 140 139.984218660625 Xi(tan=-0.839569, x=-0.765867, y=0.642999): -0.839099631177

    test 1703 147 146.868001375396 Phi(tan=-0.652688, x=-1, y=0.652688): -0.649407593198
    test 1704 147 146.956015447561 Beta(tan=-0.6505, x=-1, y=0.6505): -0.649407593198
    test 1705 147 147.043909788845 Theta(tan=-0.648319, x=-1, y=0.648319): -0.649407593198
    test 1706 147 147.000000000000 Mu(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 1707 147 147.043851339199 Chi(tan=-0.64832, x=-1, y=0.64832), iteration=3: -0.649407593198
    test 1708 147 146.985355941569 Xi(tan=-0.649771, x=-1.68459, y=1.0946), iteration=3: -0.649407593198

    test 1709 147 146.868001375396 Phi(tan=-0.652688, x=-0.837414, y=0.54657): -0.649407593198
    test 1710 147 146.956015447561 Beta(tan=-0.6505, x=-0.838252, y=0.545283): -0.649407593198
    test 1711 147 147.043909788845 Theta(tan=-0.648319, x=-0.839088, y=0.543996): -0.649407593198
    test 1712 147 147.000000000000 Mu(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 1713 147 147.043851339199 Chi(tan=-0.64832, x=-0.839087, y=0.543997): -0.649407593198
    test 1714 147 146.985355941569 Xi(tan=-0.649771, x=-0.838531, y=0.544853): -0.649407593198

    test 1715 154 153.886069836452 Phi(tan=-0.490196, x=-1, y=0.490196): -0.487732588566
    test 1716 154 153.962042898489 Beta(tan=-0.488553, x=-1, y=0.488553): -0.487732588566
    test 1717 154 154.037859302268 Theta(tan=-0.486915, x=-1, y=0.486915): -0.487732588566
    test 1718 154 154.000000000000 Mu(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 1719 154 154.037826635034 Chi(tan=-0.486916, x=-1, y=0.486916), iteration=3: -0.487732588566
    test 1720 154 153.987364628293 Xi(tan=-0.488006, x=-1.80546, y=0.881077), iteration=3: -0.487732588566

    test 1721 154 153.886069836452 Phi(tan=-0.490196, x=-0.897921, y=0.440157): -0.487732588566
    test 1722 154 153.962042898489 Beta(tan=-0.488553, x=-0.898503, y=0.438966): -0.487732588566
    test 1723 154 154.037859302268 Theta(tan=-0.486915, x=-0.899084, y=0.437777): -0.487732588566
    test 1724 154 154.000000000000 Mu(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 1725 154 154.037826635034 Chi(tan=-0.486916, x=-0.899083, y=0.437778): -0.487732588566
    test 1726 154 153.987364628293 Xi(tan=-0.488006, x=-0.898697, y=0.438569): -0.487732588566

    test 1727 161 160.910942745263 Phi(tan=-0.346067, x=-1, y=0.346067): -0.344327613290
    test 1728 161 160.970333898803 Beta(tan=-0.344907, x=-1, y=0.344907): -0.344327613290
    test 1729 161 161.029568209135 Theta(tan=-0.34375, x=-1, y=0.34375): -0.344327613290
    test 1730 161 161.000000000000 Mu(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 1731 161 161.029554130079 Chi(tan=-0.343751, x=-1, y=0.343751), iteration=2: -0.344327613290
    test 1732 161 160.990125827674 Xi(tan=-0.34452, x=-1.89942, y=0.654387), iteration=3: -0.344327613290

    test 1733 161 160.910942745263 Phi(tan=-0.346067, x=-0.945011, y=0.327037): -0.344327613290
    test 1734 161 160.970333898803 Beta(tan=-0.344907, x=-0.94535, y=0.326058): -0.344327613290
    test 1735 161 161.029568209135 Theta(tan=-0.34375, x=-0.945686, y=0.32508): -0.344327613290
    test 1736 161 161.000000000000 Mu(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 1737 161 161.029554130079 Chi(tan=-0.343751, x=-0.945686, y=0.32508): -0.344327613290
    test 1738 161 160.990125827674 Xi(tan=-0.34452, x=-0.945462, y=0.325731): -0.344327613290

    test 1739 168 167.941142537455 Phi(tan=-0.21363, x=-1, y=0.21363): -0.212556561670
    test 1740 168 167.980395911211 Beta(tan=-0.212914, x=-1, y=0.212914): -0.212556561670
    test 1741 168 168.019529073263 Theta(tan=-0.2122, x=-1, y=0.2122): -0.212556561670
    test 1742 168 168.000000000000 Mu(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 1743 168 168.019525279620 Chi(tan=-0.2122, x=-1, y=0.2122), iteration=3: -0.212556561670
    test 1744 168 167.993475503952 Xi(tan=-0.212676, x=-1.96503, y=0.417914), iteration=2: -0.212556561670

    test 1745 168 167.941142537455 Phi(tan=-0.21363, x=-0.977934, y=0.208916): -0.212556561670
    test 1746 168 167.980395911211 Beta(tan=-0.212914, x=-0.978076, y=0.208246): -0.212556561670
    test 1747 168 168.019529073263 Theta(tan=-0.2122, x=-0.978218, y=0.207578): -0.212556561670
    test 1748 168 168.000000000000 Mu(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 1749 168 168.019525279620 Chi(tan=-0.2122, x=-0.978218, y=0.207578): -0.212556561670
    test 1750 168 167.993475503952 Xi(tan=-0.212676, x=-0.978124, y=0.208023): -0.212556561670

    test 1751 175 174.974866680328 Phi(tan=-0.0879307, x=-1, y=0.0879307): -0.087488663526
    test 1752 175 174.991629164161 Beta(tan=-0.0876359, x=-1, y=0.0876359): -0.087488663526
    test 1753 175 175.008336301828 Theta(tan=-0.0873421, x=-1, y=0.0873421): -0.087488663526
    test 1754 175 175.000000000000 Mu(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 1755 175 175.008336017206 Chi(tan=-0.0873421, x=-1, y=0.0873421), iteration=2: -0.087488663526
    test 1756 175 174.997214222263 Xi(tan=-0.0875377, x=-2.00133, y=0.175191), iteration=2: -0.087488663526

    test 1757 175 174.974866680328 Phi(tan=-0.0879307, x=-0.996156, y=0.0875927): -0.087488663526
    test 1758 175 174.991629164161 Beta(tan=-0.0876359, x=-0.996182, y=0.0873013): -0.087488663526
    test 1759 175 175.008336301828 Theta(tan=-0.0873421, x=-0.996207, y=0.0870108): -0.087488663526
    test 1760 175 175.000000000000 Mu(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 1761 175 175.008336017206 Chi(tan=-0.0873421, x=-0.996207, y=0.0870108): -0.087488663526
    test 1762 175 174.997214222263 Xi(tan=-0.0875377, x=-0.99619, y=0.0872042): -0.087488663526

    test 1763 182 182.010096724503 Phi(tan=0.0350972, x=-1, y=-0.0350972): 0.034920769492
    test 1764 182 182.003362751638 Beta(tan=0.0349795, x=-1, y=-0.0349795): 0.034920769492
    test 1765 182 181.996651301418 Theta(tan=0.0348623, x=-1, y=-0.0348623): 0.034920769492
    test 1766 182 182.000000000000 Mu(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 1767 182 181.996651319751 Chi(tan=0.0348623, x=-1, y=-0.0348623), iteration=2: 0.034920769492
    test 1768 182 182.001119098649 Xi(tan=0.0349403, x=-2.00775, y=-0.0701516), iteration=2: 0.034920769492

    test 1769 182 182.010096724503 Phi(tan=0.0350972, x=-0.999385, y=-0.0350756): 0.034920769492
    test 1770 182 182.003362751638 Beta(tan=0.0349795, x=-0.999389, y=-0.0349582): 0.034920769492
    test 1771 182 181.996651301418 Theta(tan=0.0348623, x=-0.999393, y=-0.0348411): 0.034920769492
    test 1772 182 182.000000000000 Mu(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 1773 182 181.996651319751 Chi(tan=0.0348623, x=-0.999393, y=-0.0348411): 0.034920769492
    test 1774 182 182.001119098649 Xi(tan=0.0349403, x=-0.99939, y=-0.034919): 0.034920769492

    test 1775 189 189.044721740866 Phi(tan=0.159185, x=-1, y=-0.159185): 0.158384440325
    test 1776 189 189.014895327636 Beta(tan=0.158651, x=-1, y=-0.158651): 0.158384440325
    test 1777 189 188.985164013992 Theta(tan=0.158119, x=-1, y=-0.158119): 0.158384440325
    test 1778 189 189.000000000000 Mu(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 1779 189 188.985165645705 Chi(tan=0.158119, x=-1, y=-0.158119), iteration=3: 0.158384440325
    test 1780 189 189.004957222799 Xi(tan=0.158473, x=-1.98422, y=-0.314445), iteration=2: 0.158384440325

    test 1781 189 189.044721740866 Phi(tan=0.159185, x=-0.987566, y=-0.157205): 0.158384440325
    test 1782 189 189.014895327636 Beta(tan=0.158651, x=-0.987648, y=-0.156691): 0.158384440325
    test 1783 189 188.985164013992 Theta(tan=0.158119, x=-0.987729, y=-0.156179): 0.158384440325
    test 1784 189 189.000000000000 Mu(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 1785 189 188.985165645705 Chi(tan=0.158119, x=-0.987729, y=-0.156179): 0.158384440325
    test 1786 189 189.004957222799 Xi(tan=0.158473, x=-0.987675, y=-0.15652): 0.158384440325

    test 1787 196 196.076667971970 Phi(tan=0.288194, x=-1, y=-0.288194): 0.286745385759
    test 1788 196 196.025537779325 Beta(tan=0.287228, x=-1, y=-0.287228): 0.286745385759
    test 1789 196 195.974552923462 Theta(tan=0.286265, x=-1, y=-0.286265): 0.286745385759
    test 1790 196 196.000000000000 Mu(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 1791 196 195.974561610097 Chi(tan=0.286265, x=-1, y=-0.286265), iteration=2: 0.286745385759
    test 1792 196 196.008499713199 Xi(tan=0.286906, x=-1.93107, y=-0.554036), iteration=3: 0.286745385759

    test 1793 196 196.076667971970 Phi(tan=0.288194, x=-0.960892, y=-0.276923): 0.286745385759
    test 1794 196 196.025537779325 Beta(tan=0.287228, x=-0.961139, y=-0.276066): 0.286745385759
    test 1795 196 195.974552923462 Theta(tan=0.286265, x=-0.961384, y=-0.27521): 0.286745385759
    test 1796 196 196.000000000000 Mu(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 1797 196 195.974561610097 Chi(tan=0.286265, x=-0.961384, y=-0.275211): 0.286745385759
    test 1798 196 196.008499713199 Xi(tan=0.286906, x=-0.961221, y=-0.27578): 0.286745385759

    test 1799 203 203.104025981749 Phi(tan=0.426619, x=-1, y=-0.426619): 0.424474816210
    test 1800 203 203.034655104114 Beta(tan=0.425189, x=-1, y=-0.425189): 0.424474816210
    test 1801 203 202.965445675486 Theta(tan=0.423763, x=-1, y=-0.423763): 0.424474816210
    test 1802 203 203.000000000000 Mu(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 1803 203 202.965469367936 Chi(tan=0.423764, x=-1, y=-0.423764), iteration=3: 0.424474816210
    test 1804 203 203.011535517974 Xi(tan=0.424712, x=-1.84912, y=-0.785343), iteration=2: 0.424474816210

    test 1805 203 203.104025981749 Phi(tan=0.426619, x=-0.919794, y=-0.392402): 0.424474816210
    test 1806 203 203.034655104114 Beta(tan=0.425189, x=-0.920268, y=-0.391288): 0.424474816210
    test 1807 203 202.965445675486 Theta(tan=0.423763, x=-0.92074, y=-0.390176): 0.424474816210
    test 1808 203 203.000000000000 Mu(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 1809 203 202.965469367936 Chi(tan=0.423764, x=-0.92074, y=-0.390176): 0.424474816210
    test 1810 203 203.011535517974 Xi(tan=0.424712, x=-0.920426, y=-0.390916): 0.424474816210

    test 1811 210 210.125166807834 Phi(tan=0.580267, x=-1, y=-0.580267): 0.577350269190
    test 1812 210 210.041704779944 Beta(tan=0.578321, x=-1, y=-0.578321): 0.577350269190
    test 1813 210 209.958382432479 Theta(tan=0.576382, x=-1, y=-0.576382): 0.577350269190
    test 1814 210 210.000000000000 Mu(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 1815 210 209.958429134161 Chi(tan=0.576383, x=-1, y=-0.576383), iteration=2: 0.577350269190
    test 1816 210 210.013884093401 Xi(tan=0.577673, x=-1.73958, y=-1.00491), iteration=3: 0.577350269190

    test 1817 210 210.125166807834 Phi(tan=0.580267, x=-0.864931, y=-0.501891): 0.577350269190
    test 1818 210 210.041704779944 Beta(tan=0.578321, x=-0.865661, y=-0.50063): 0.577350269190
    test 1819 210 209.958382432479 Theta(tan=0.576382, x=-0.866388, y=-0.499371): 0.577350269190
    test 1820 210 210.000000000000 Mu(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 1821 210 209.958429134161 Chi(tan=0.576383, x=-0.866388, y=-0.499372): 0.577350269190
    test 1822 210 210.013884093401 Xi(tan=0.577673, x=-0.865904, y=-0.50021): 0.577350269190

    test 1823 217 217.138839575219 Phi(tan=0.75736, x=-1, y=-0.75736): 0.753554050103
    test 1824 217 217.046269197118 Beta(tan=0.754821, x=-1, y=-0.754821): 0.753554050103
    test 1825 217 216.953783990372 Theta(tan=0.75229, x=-1, y=-0.75229): 0.753554050103
    test 1826 217 217.000000000000 Mu(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 1827 217 216.953859077076 Chi(tan=0.752292, x=-1, y=-0.752292), iteration=3: 0.753554050103
    test 1828 217 217.015406173898 Xi(tan=0.753976, x=-1.60412, y=-1.20947), iteration=3: 0.753554050103

    test 1829 217 217.138839575219 Phi(tan=0.75736, x=-0.797175, y=-0.603749): 0.753554050103
    test 1830 217 217.046269197118 Beta(tan=0.754821, x=-0.798149, y=-0.60246): 0.753554050103
    test 1831 217 216.953783990372 Theta(tan=0.75229, x=-0.799121, y=-0.601171): 0.753554050103
    test 1832 217 217.000000000000 Mu(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 1833 217 216.953859077076 Chi(tan=0.752292, x=-0.79912, y=-0.601172): 0.753554050103
    test 1834 217 217.015406173898 Xi(tan=0.753976, x=-0.798474, y=-0.60203): 0.753554050103

    test 1835 224 224.144244585156 Phi(tan=0.970566, x=-1, y=-0.970566): 0.965688774807
    test 1836 224 224.048080179626 Beta(tan=0.967312, x=-1, y=-0.967312): 0.965688774807
    test 1837 224 223.951926502986 Theta(tan=0.964069, x=-1, y=-0.964069): 0.965688774807
    test 1838 224 224.000000000000 Mu(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 1839 224 223.952030495532 Chi(tan=0.964072, x=-1, y=-0.964072), iteration=2: 0.965688774807
    test 1840 224 224.016011983610 Xi(tan=0.966229, x=-1.44475, y=-1.39596), iteration=2: 0.965688774807

    test 1841 224 224.144244585156 Phi(tan=0.970566, x=-0.717589, y=-0.696467): 0.965688774807
    test 1842 224 224.048080179626 Beta(tan=0.967312, x=-0.718757, y=-0.695262): 0.965688774807
    test 1843 224 223.951926502986 Theta(tan=0.964069, x=-0.719922, y=-0.694055): 0.965688774807
    test 1844 224 224.000000000000 Mu(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 1845 224 223.952030495532 Chi(tan=0.964072, x=-0.719921, y=-0.694056): 0.965688774807
    test 1846 224 224.016011983610 Xi(tan=0.966229, x=-0.719146, y=-0.694859): 0.965688774807

    test 1847 231 231.141077842654 Phi(tan=1.24113, x=-1, y=-1.24113): 1.234897156535
    test 1848 231 231.047034210293 Beta(tan=1.23697, x=-1, y=-1.23697): 1.234897156535
    test 1849 231 230.952924380812 Theta(tan=1.23282, x=-1, y=-1.23282): 1.234897156535
    test 1850 231 231.000000000000 Mu(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1851 231 230.953051749472 Chi(tan=1.23283, x=-1, y=-1.23283), iteration=3: 1.234897156535
    test 1852 231 231.015666416855 Xi(tan=1.23559, x=-1.26387, y=-1.56162), iteration=3: 1.234897156535

    test 1853 231 231.141077842654 Phi(tan=1.24113, x=-0.627405, y=-0.778693): 1.234897156535
    test 1854 231 231.047034210293 Beta(tan=1.23697, x=-0.628682, y=-0.777662): 1.234897156535
    test 1855 231 230.952924380812 Theta(tan=1.23282, x=-0.629959, y=-0.776629): 1.234897156535
    test 1856 231 231.000000000000 Mu(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 1857 231 230.953051749472 Chi(tan=1.23283, x=-0.629957, y=-0.77663): 1.234897156535
    test 1858 231 231.015666416855 Xi(tan=1.23559, x=-0.629108, y=-0.777318): 1.234897156535

    test 1859 238 238.129545093885 Phi(tan=1.60842, x=-1, y=-1.60842): 1.600334529041
    test 1860 238 238.043197624299 Beta(tan=1.60302, x=-1, y=-1.60302): 1.600334529041
    test 1861 238 237.956722543300 Theta(tan=1.59765, x=-1, y=-1.59765): 1.600334529041
    test 1862 238 238.000000000000 Mu(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 1863 238 237.956861886827 Chi(tan=1.59766, x=-1, y=-1.59766), iteration=3: 1.600334529041
    test 1864 238 238.014390916077 Xi(tan=1.60123, x=-1.06417, y=-1.70398), iteration=3: 1.600334529041

    test 1865 238 238.129545093885 Phi(tan=1.60842, x=-0.528, y=-0.849244): 1.600334529041
    test 1866 238 238.043197624299 Beta(tan=1.60302, x=-0.52928, y=-0.848447): 1.600334529041
    test 1867 238 237.956722543300 Theta(tan=1.59765, x=-0.53056, y=-0.847648): 1.600334529041
    test 1868 238 238.000000000000 Mu(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 1869 238 237.956861886827 Chi(tan=1.59766, x=-0.530558, y=-0.847649): 1.600334529041
    test 1870 238 238.014390916077 Xi(tan=1.60123, x=-0.529706, y=-0.848181): 1.600334529041

    test 1871 245 245.110345489960 Phi(tan=2.15533, x=-1, y=-2.15533): 2.144506920510
    test 1872 245 245.036801688087 Beta(tan=2.14811, x=-1, y=-2.14811): 2.144506920510
    test 1873 245 244.963098707662 Theta(tan=2.14091, x=-1, y=-2.14091): 2.144506920510
    test 1874 245 245.000000000000 Mu(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 1875 245 244.963234330104 Chi(tan=2.14092, x=-1, y=-2.14092), iteration=2: 2.144506920510
    test 1876 245 245.012261984604 Xi(tan=2.14571, x=-0.848642, y=-1.82094), iteration=3: 2.144506920510

    test 1877 245 245.110345489960 Phi(tan=2.15533, x=-0.420872, y=-0.90712): 2.144506920510
    test 1878 245 245.036801688087 Beta(tan=2.14811, x=-0.422036, y=-0.906579): 2.144506920510
    test 1879 245 244.963098707662 Theta(tan=2.14091, x=-0.423202, y=-0.906035): 2.144506920510
    test 1880 245 245.000000000000 Mu(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 1881 245 244.963234330104 Chi(tan=2.14092, x=-0.4232, y=-0.906036): 2.144506920510
    test 1882 245 245.012261984604 Xi(tan=2.14571, x=-0.422424, y=-0.906398): 2.144506920510

    test 1883 252 252.084626804899 Phi(tan=3.09322, x=-1, y=-3.09322): 3.077683537175
    test 1884 252 252.028228084417 Beta(tan=3.08285, x=-1, y=-3.08285): 3.077683537175
    test 1885 252 251.971675808314 Theta(tan=3.07251, x=-1, y=-3.07251): 3.077683537175
    test 1886 252 252.000000000000 Mu(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1887 252 251.971790388449 Chi(tan=3.07254, x=-1, y=-3.07254), iteration=3: 3.077683537175
    test 1888 252 252.009406472364 Xi(tan=3.0794, x=-0.620495, y=-1.91076), iteration=3: 3.077683537175

    test 1889 252 252.084626804899 Phi(tan=3.09322, x=-0.307612, y=-0.951512): 3.077683537175
    test 1890 252 252.028228084417 Beta(tan=3.08285, x=-0.308548, y=-0.951209): 3.077683537175
    test 1891 252 251.971675808314 Theta(tan=3.07251, x=-0.309487, y=-0.950904): 3.077683537175
    test 1892 252 252.000000000000 Mu(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 1893 252 251.971790388449 Chi(tan=3.07254, x=-0.309485, y=-0.950904): 3.077683537175
    test 1894 252 252.009406472364 Xi(tan=3.0794, x=-0.308861, y=-0.951107): 3.077683537175

    test 1895 259 259.053915611440 Phi(tan=5.17053, x=-1, y=-5.17053): 5.144554015970
    test 1896 259 259.017985844271 Beta(tan=5.15319, x=-1, y=-5.15319): 5.144554015970
    test 1897 259 258.981943992803 Theta(tan=5.13591, x=-1, y=-5.13591): 5.144554015970
    test 1898 259 259.000000000000 Mu(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 1899 259 258.982021780770 Chi(tan=5.13595, x=-1, y=-5.13595), iteration=2: 5.144554015970
    test 1900 259 259.005993953740 Xi(tan=5.14743, x=-0.383125, y=-1.97211), iteration=3: 5.144554015970

    test 1901 259 259.053915611440 Phi(tan=5.17053, x=-0.189885, y=-0.981806): 5.144554015970
    test 1902 259 259.017985844271 Beta(tan=5.15319, x=-0.190501, y=-0.981687): 5.144554015970
    test 1903 259 258.981943992803 Theta(tan=5.13591, x=-0.191118, y=-0.981567): 5.144554015970
    test 1904 259 259.000000000000 Mu(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 1905 259 258.982021780770 Chi(tan=5.13595, x=-0.191117, y=-0.981567): 5.144554015970
    test 1906 259 259.005993953740 Xi(tan=5.14743, x=-0.190706, y=-0.981647): 5.144554015970

    test 1907 266 266.020026926530 Phi(tan=14.3729, x=-1, y=-14.3729): 14.300666256712
    test 1908 266 266.006681184269 Beta(tan=14.3247, x=-1, y=-14.3247): 14.300666256712
    test 1909 266 265.993290981931 Theta(tan=14.2766, x=-1, y=-14.2766): 14.300666256712
    test 1910 266 266.000000000000 Mu(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 1911 266 265.993320826309 Chi(tan=14.2767, x=-1, y=-14.2767), iteration=3: 14.300666256712
    test 1912 266 266.002226669943 Xi(tan=14.3087, x=-0.140061, y=-2.00409), iteration=3: 14.300666256712

    test 1913 266 266.020026926530 Phi(tan=14.3729, x=-0.0694078, y=-0.997588): 14.300666256712
    test 1914 266 266.006681184269 Beta(tan=14.3247, x=-0.0696401, y=-0.997572): 14.300666256712
    test 1915 266 265.993290981931 Theta(tan=14.2766, x=-0.0698733, y=-0.997556): 14.300666256712
    test 1916 266 266.000000000000 Mu(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 1917 266 265.993320826309 Chi(tan=14.2767, x=-0.0698728, y=-0.997556): 14.300666256712
    test 1918 266 266.002226669943 Xi(tan=14.3087, x=-0.0697177, y=-0.997567): 14.300666256712

    test 1919 273 272.984958603323 Phi(tan=-19.1775, x=1.0, y=-19.1775): -19.081136687728
    test 1920 273 272.994982020871 Beta(tan=-19.1132, x=1.0, y=-19.1132): -19.081136687728
    test 1921 273 273.005038973685 Theta(tan=-19.0491, x=1.0, y=-19.0491): -19.081136687728
    test 1922 273 273.000000000000 Mu(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1923 273 273.005016510682 Chi(tan=-19.0492, x=1.0, y=-19.0492), iteration=3: -19.081136687728
    test 1924 273 272.998327629166 Xi(tan=-19.0918, x=0.105083, y=-2.00623), iteration=3: -19.081136687728

    test 1925 273 272.984958603323 Phi(tan=-19.1775, x=0.0520738, y=-0.998643): -19.081136687728
    test 1926 273 272.994982020871 Beta(tan=-19.1132, x=0.0522485, y=-0.998634): -19.081136687728
    test 1927 273 273.005038973685 Theta(tan=-19.0491, x=0.0524238, y=-0.998625): -19.081136687728
    test 1928 273 273.000000000000 Mu(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 1929 273 273.005016510682 Chi(tan=-19.0492, x=0.0524234, y=-0.998625): -19.081136687728
    test 1930 273 272.998327629166 Xi(tan=-19.0918, x=0.0523068, y=-0.998631): -19.081136687728

    test 1931 280 279.950776225319 Phi(tan=-5.69991, x=1.0, y=-5.69991): -5.671281819618
    test 1932 280 279.983579145989 Beta(tan=-5.6808, x=1.0, y=-5.6808): -5.671281819618
    test 1933 280 280.016485774700 Theta(tan=-5.66176, x=1.0, y=-5.66176): -5.671281819618
    test 1934 280 280.000000000000 Mu(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 1935 280 280.016414293005 Chi(tan=-5.6618, x=1.0, y=-5.6618), iteration=3: -5.671281819618
    test 1936 280 279.994527544579 Xi(tan=-5.67445, x=0.348667, y=-1.97849), iteration=3: -5.671281819618

    test 1937 280 279.950776225319 Phi(tan=-5.69991, x=0.172802, y=-0.984957): -5.671281819618
    test 1938 280 279.983579145989 Beta(tan=-5.6808, x=0.173366, y=-0.984857): -5.671281819618
    test 1939 280 280.016485774700 Theta(tan=-5.66176, x=0.173932, y=-0.984758): -5.671281819618
    test 1940 280 280.000000000000 Mu(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 1941 280 280.016414293005 Chi(tan=-5.6618, x=0.17393, y=-0.984758): -5.671281819618
    test 1942 280 279.994527544579 Xi(tan=-5.67445, x=0.173554, y=-0.984824): -5.671281819618

    test 1943 287 286.919494515865 Phi(tan=-3.28737, x=1.0, y=-3.28737): -3.270852618484
    test 1944 287 286.973146172898 Beta(tan=-3.27634, x=1.0, y=-3.27634): -3.270852618484
    test 1945 287 287.026947513630 Theta(tan=-3.26536, x=1.0, y=-3.26536): -3.270852618484
    test 1946 287 287.000000000000 Mu(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 1947 287 287.026837302239 Chi(tan=-3.26538, x=1.0, y=-3.26538), iteration=3: -3.270852618484
    test 1948 287 286.991051342914 Xi(tan=-3.27268, x=0.587069, y=-1.92129), iteration=3: -3.270852618484

    test 1949 287 286.919494515865 Phi(tan=-3.28737, x=0.291028, y=-0.956715): -3.270852618484
    test 1950 287 286.973146172898 Beta(tan=-3.27634, x=0.291923, y=-0.956442): -3.270852618484
    test 1951 287 287.026947513630 Theta(tan=-3.26536, x=0.292821, y=-0.956167): -3.270852618484
    test 1952 287 287.000000000000 Mu(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 1953 287 287.026837302239 Chi(tan=-3.26538, x=0.29282, y=-0.956168): -3.270852618484
    test 1954 287 286.991051342914 Xi(tan=-3.27268, x=0.292222, y=-0.95635): -3.270852618484

    test 1955 294 293.892961362638 Phi(tan=-2.25738, x=1.0, y=-2.25738): -2.246036773904
    test 1956 294 293.964300405205 Beta(tan=-2.24981, x=1.0, y=-2.24981): -2.246036773904
    test 1957 294 294.035800165821 Theta(tan=-2.24227, x=1.0, y=-2.24227): -2.246036773904
    test 1958 294 294.000000000000 Mu(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1959 294 294.035666490170 Chi(tan=-2.24228, x=1.0, y=-2.24228), iteration=3: -2.246036773904
    test 1960 294 293.988104995444 Xi(tan=-2.24729, x=0.816745, y=-1.83546), iteration=3: -2.246036773904

    test 1961 294 293.892961362638 Phi(tan=-2.25738, x=0.405029, y=-0.914304): -2.246036773904
    test 1962 294 293.964300405205 Beta(tan=-2.24981, x=0.406167, y=-0.913799): -2.246036773904
    test 1963 294 294.035800165821 Theta(tan=-2.24227, x=0.407307, y=-0.913291): -2.246036773904
    test 1964 294 294.000000000000 Mu(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 1965 294 294.035666490170 Chi(tan=-2.24228, x=0.407305, y=-0.913292): -2.246036773904
    test 1966 294 293.988104995444 Xi(tan=-2.24729, x=0.406547, y=-0.91363): -2.246036773904

    test 1967 301 300.872750492296 Phi(tan=-1.67268, x=1.0, y=-1.67268): -1.664279482351
    test 1968 301 300.957566748779 Beta(tan=-1.66707, x=1.0, y=-1.66707): -1.664279482351
    test 1969 301 301.042517212699 Theta(tan=-1.66149, x=1.0, y=-1.66149): -1.664279482351
    test 1970 301 301.000000000000 Mu(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 1971 301 301.042377369066 Chi(tan=-1.66149, x=1.0, y=-1.66149), iteration=3: -1.664279482351
    test 1972 301 300.985863408886 Xi(tan=-1.66521, x=1.03428, y=-1.72229), iteration=3: -1.664279482351

    test 1973 301 300.872750492296 Phi(tan=-1.67268, x=0.513133, y=-0.858309): -1.664279482351
    test 1974 301 300.957566748779 Beta(tan=-1.66707, x=0.514403, y=-0.857549): -1.664279482351
    test 1975 301 301.042517212699 Theta(tan=-1.66149, x=0.515674, y=-0.856785): -1.664279482351
    test 1976 301 301.000000000000 Mu(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 1977 301 301.042377369066 Chi(tan=-1.66149, x=0.515672, y=-0.856786): -1.664279482351
    test 1978 301 300.985863408886 Xi(tan=-1.66521, x=0.514827, y=-0.857294): -1.664279482351

    test 1979 308 307.860068599875 Phi(tan=-1.28641, x=1.0, y=-1.28641): -1.279941632193
    test 1980 308 307.953346674264 Beta(tan=-1.28209, x=1.0, y=-1.28209): -1.279941632193
    test 1981 308 308.046701061231 Theta(tan=-1.27779, x=1.0, y=-1.27779): -1.279941632193
    test 1982 308 308.000000000000 Mu(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 1983 308 308.046571160545 Chi(tan=-1.2778, x=1.0, y=-1.2778), iteration=3: -1.279941632193
    test 1984 308 307.984460065878 Xi(tan=-1.28066, x=1.23642, y=-1.58343), iteration=2: -1.279941632193

    test 1985 308 307.860068599875 Phi(tan=-1.28641, x=0.613735, y=-0.789512): -1.279941632193
    test 1986 308 307.953346674264 Beta(tan=-1.28209, x=0.61502, y=-0.788512): -1.279941632193
    test 1987 308 308.046701061231 Theta(tan=-1.27779, x=0.616304, y=-0.787509): -1.279941632193
    test 1988 308 308.000000000000 Mu(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 1989 308 308.046571160545 Chi(tan=-1.2778, x=0.616302, y=-0.78751): -1.279941632193
    test 1990 308 307.984460065878 Xi(tan=-1.28066, x=0.615448, y=-0.788178): -1.279941632193

    test 1991 315 314.855682294112 Phi(tan=-1.00505, x=1.0, y=-1.00505): -1.000000000000
    test 1992 315 314.951894037750 Beta(tan=-1.00168, x=1.0, y=-1.00168): -1.000000000000
    test 1993 315 315.048106323978 Theta(tan=-0.998322, x=1.0, y=-0.998322): -1.000000000000
    test 1994 315 315.000000000000 Mu(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 1995 315 315.047998507775 Chi(tan=-0.998326, x=1.0, y=-0.998326), iteration=3: -1.000000000000
    test 1996 315 314.983979022806 Xi(tan=-1.00056, x=1.42017, y=-1.42096), iteration=2: -1.000000000000

    test 1997 315 314.855682294112 Phi(tan=-1.00505, x=0.705323, y=-0.708886): -1.000000000000
    test 1998 315 314.951894037750 Beta(tan=-1.00168, x=0.706513, y=-0.7077): -1.000000000000
    test 1999 315 315.048106323978 Theta(tan=-0.998322, x=0.7077, y=-0.706513): -1.000000000000
    test 2000 315 315.000000000000 Mu(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 2001 315 315.047998507775 Chi(tan=-0.998326, x=0.707699, y=-0.706514): -1.000000000000
    test 2002 315 314.983979022806 Xi(tan=-1.00056, x=0.706909, y=-0.707304): -1.000000000000

    test 2003 322 321.859869499768 Phi(tan=-0.785232, x=1.0, y=-0.785232): -0.781285626507
    test 2004 322 321.953299269346 Beta(tan=-0.782599, x=1.0, y=-0.782599): -0.781285626507
    test 2005 322 322.046653656044 Theta(tan=-0.779975, x=1.0, y=-0.779975): -0.781285626507
    test 2006 322 322.000000000000 Mu(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 2007 322 322.046574337734 Chi(tan=-0.779977, x=1.0, y=-0.779977), iteration=2: -0.781285626507
    test 2008 322 321.984449756665 Xi(tan=-0.781723, x=1.58276, y=-1.23728), iteration=3: -0.781285626507

    test 2009 322 321.859869499768 Phi(tan=-0.785232, x=0.786503, y=-0.617587): -0.781285626507
    test 2010 322 321.953299269346 Beta(tan=-0.782599, x=0.787509, y=-0.616304): -0.781285626507
    test 2011 322 322.046653656044 Theta(tan=-0.779975, x=0.788512, y=-0.61502): -0.781285626507
    test 2012 322 322.000000000000 Mu(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 2013 322 322.046574337734 Chi(tan=-0.779977, x=0.788511, y=-0.615021): -0.781285626507
    test 2014 322 321.984449756665 Xi(tan=-0.781723, x=0.787844, y=-0.615875): -0.781285626507

    test 2015 329 328.872398901328 Phi(tan=-0.603896, x=1.0, y=-0.603896): -0.600860619028
    test 2016 329 328.957483036491 Beta(tan=-0.601871, x=1.0, y=-0.601871): -0.600860619028
    test 2017 329 329.042433500019 Theta(tan=-0.599853, x=1.0, y=-0.599853): -0.600860619028
    test 2018 329 329.000000000000 Mu(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 2019 329 329.042382979662 Chi(tan=-0.599854, x=1.0, y=-0.599854), iteration=3: -0.600860619028
    test 2020 329 328.985845203875 Xi(tan=-0.601197, x=1.72178, y=-1.03513), iteration=2: -0.600860619028

    test 2021 329 328.872398901328 Phi(tan=-0.603896, x=0.856018, y=-0.516946): -0.600860619028
    test 2022 329 328.957483036491 Beta(tan=-0.601871, x=0.856785, y=-0.515674): -0.600860619028
    test 2023 329 329.042433500019 Theta(tan=-0.599853, x=0.857549, y=-0.514403): -0.600860619028
    test 2024 329 329.000000000000 Mu(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 2025 329 329.042382979662 Chi(tan=-0.599854, x=0.857548, y=-0.514404): -0.600860619028
    test 2026 329 328.985845203875 Xi(tan=-0.601197, x=0.85704, y=-0.51525): -0.600860619028

    test 2027 336 335.892539588775 Phi(tan=-0.447478, x=1.0, y=-0.447478): -0.445228685309
    test 2028 336 335.964199982805 Beta(tan=-0.445978, x=1.0, y=-0.445978): -0.445228685309
    test 2029 336 336.035699743087 Theta(tan=-0.444482, x=1.0, y=-0.444482): -0.445228685309
    test 2030 336 336.000000000000 Mu(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2031 336 336.035673220720 Chi(tan=-0.444483, x=1.0, y=-0.444483), iteration=2: -0.445228685309
    test 2032 336 335.988083156490 Xi(tan=-0.445478, x=1.83512, y=-0.817507), iteration=3: -0.445228685309

    test 2033 336 335.892539588775 Phi(tan=-0.447478, x=0.912781, y=-0.408449): -0.445228685309
    test 2034 336 335.964199982805 Beta(tan=-0.445978, x=0.913291, y=-0.407307): -0.445228685309
    test 2035 336 336.035699743087 Theta(tan=-0.444482, x=0.913799, y=-0.406167): -0.445228685309
    test 2036 336 336.000000000000 Mu(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2037 336 336.035673220720 Chi(tan=-0.444483, x=0.913799, y=-0.406168): -0.445228685309
    test 2038 336 335.988083156490 Xi(tan=-0.445478, x=0.913461, y=-0.406927): -0.445228685309

    test 2039 343 342.919101298136 Phi(tan=-0.307275, x=1.0, y=-0.307275): -0.305730681459
    test 2040 343 342.973052549710 Beta(tan=-0.306245, x=1.0, y=-0.306245): -0.305730681459
    test 2041 343 343.026853890266 Theta(tan=-0.305218, x=1.0, y=-0.305218): -0.305730681459
    test 2042 343 343.000000000000 Mu(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 2043 343 343.026843577092 Chi(tan=-0.305218, x=1.0, y=-0.305218), iteration=3: -0.305730681459
    test 2044 343 342.991030982615 Xi(tan=-0.305902, x=1.92111, y=-0.58767), iteration=3: -0.305730681459

    test 2045 343 342.919101298136 Phi(tan=-0.307275, x=0.955891, y=-0.293722): -0.305730681459
    test 2046 343 342.973052549710 Beta(tan=-0.306245, x=0.956167, y=-0.292821): -0.305730681459
    test 2047 343 343.026853890266 Theta(tan=-0.305218, x=0.956442, y=-0.291923): -0.305730681459
    test 2048 343 343.000000000000 Mu(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 2049 343 343.026843577092 Chi(tan=-0.305218, x=0.956442, y=-0.291924): -0.305730681459
    test 2050 343 342.991030982615 Xi(tan=-0.305902, x=0.956259, y=-0.292521): -0.305730681459

    test 2051 350 349.950503618765 Phi(tan=-0.177218, x=1.0, y=-0.177218): -0.176326980708
    test 2052 350 349.983514239795 Beta(tan=-0.176624, x=1.0, y=-0.176624): -0.176326980708
    test 2053 350 350.016420868461 Theta(tan=-0.176031, x=1.0, y=-0.176031): -0.176326980708
    test 2054 350 350.000000000000 Mu(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 2055 350 350.016418643178 Chi(tan=-0.176032, x=1.0, y=-0.176032), iteration=3: -0.176326980708
    test 2056 350 349.994513429399 Xi(tan=-0.176426, x=1.97843, y=-0.349045), iteration=3: -0.176326980708

    test 2057 350 349.950503618765 Phi(tan=-0.177218, x=0.984657, y=-0.174499): -0.176326980708
    test 2058 350 349.983514239795 Beta(tan=-0.176624, x=0.984758, y=-0.173932): -0.176326980708
    test 2059 350 350.016420868461 Theta(tan=-0.176031, x=0.984857, y=-0.173366): -0.176326980708
    test 2060 350 350.000000000000 Mu(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 2061 350 350.016418643178 Chi(tan=-0.176032, x=0.984857, y=-0.173366): -0.176326980708
    test 2062 350 349.994513429399 Xi(tan=-0.176426, x=0.984791, y=-0.173742): -0.176326980708

    test 2063 357 356.984870427697 Phi(tan=-0.0526726, x=1.0, y=-0.0526726): -0.052407779283
    test 2064 357 356.994961026729 Beta(tan=-0.052496, x=1.0, y=-0.052496): -0.052407779283
    test 2065 357 357.005017979541 Theta(tan=-0.05232, x=1.0, y=-0.05232): -0.052407779283
    test 2066 357 357.000000000000 Mu(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2067 357 357.005017917762 Chi(tan=-0.05232, x=1.0, y=-0.05232), iteration=3: -0.052407779283
    test 2068 357 356.998323063562 Xi(tan=-0.0524371, x=2.00622, y=-0.105201), iteration=2: -0.052407779283

    test 2069 357 356.984870427697 Phi(tan=-0.0526726, x=0.998616, y=-0.0525997): -0.052407779283
    test 2070 357 356.994961026729 Beta(tan=-0.052496, x=0.998625, y=-0.0524238): -0.052407779283
    test 2071 357 357.005017979541 Theta(tan=-0.05232, x=0.998634, y=-0.0522485): -0.052407779283
    test 2072 357 357.000000000000 Mu(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2073 357 357.005017917762 Chi(tan=-0.05232, x=0.998634, y=-0.0522485): -0.052407779283
    test 2074 357 356.998323063562 Xi(tan=-0.0524371, x=0.998628, y=-0.0523652): -0.052407779283

    test 2075  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2076  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2077  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2078  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2079  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2080  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 2081  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2082  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2083  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2084  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2085  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2086  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 2087  7 7.000000000000 Phi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 2088  7 6.976762016136 Beta(tan=0.122373, x=0.992546, y=0.121461): 0.122784560903
    test 2089  7 6.953599649493 Theta(tan=0.121963, x=0.992546, y=0.121054): 0.122784560903
    test 2090  7 6.965157241116 Mu(tan=0.122167, x=0.99262, y=0.121266), iteration=2: 0.122784560903
    test 2091  7 6.953600413381 Chi(tan=0.121963, x=1.0, y=0.121963), iteration=2: 0.122784560903
    test 2092  7 6.969019299974 Xi(tan=0.122236, x=1.99414, y=0.243755), iteration=3: 0.122784560903

    test 2093  7 7.000000000000 Phi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 2094  7 6.976762016136 Beta(tan=0.122373, x=0.992595, y=0.121467): 0.122784560903
    test 2095  7 6.953599649493 Theta(tan=0.121963, x=0.992645, y=0.121066): 0.122784560903
    test 2096  7 6.965157241116 Mu(tan=0.122167, x=0.99262, y=0.121266): 0.122784560903
    test 2097  7 6.953600413381 Chi(tan=0.121963, x=0.992645, y=0.121066): 0.122784560903
    test 2098  7 6.969019299974 Xi(tan=0.122236, x=0.992612, y=0.121333): 0.122784560903

    test 2099 14 14.000000000000 Phi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 2100 14 13.954897969322 Beta(tan=0.248492, x=0.970296, y=0.241111): 0.249328002843
    test 2101 14 13.909929594324 Theta(tan=0.247659, x=0.970296, y=0.240302): 0.249328002843
    test 2102 14 13.932372077582 Mu(tan=0.248075, x=0.970581, y=0.240776), iteration=3: 0.249328002843
    test 2103 14 13.909935440611 Chi(tan=0.247659, x=1.0, y=0.247659), iteration=3: 0.249328002843
    test 2104 14 13.939869149632 Xi(tan=0.248214, x=1.94981, y=0.48397), iteration=3: 0.249328002843

    test 2105 14 14.000000000000 Phi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 2106 14 13.954897969322 Beta(tan=0.248492, x=0.970486, y=0.241158): 0.249328002843
    test 2107 14 13.909929594324 Theta(tan=0.247659, x=0.970675, y=0.240396): 0.249328002843
    test 2108 14 13.932372077582 Mu(tan=0.248075, x=0.970581, y=0.240776): 0.249328002843
    test 2109 14 13.909935440611 Chi(tan=0.247659, x=0.970675, y=0.240396): 0.249328002843
    test 2110 14 13.939869149632 Xi(tan=0.248214, x=0.970549, y=0.240903): 0.249328002843

    test 2111 21 21.000000000000 Phi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 2112 21 20.935701709947 Beta(tan=0.382577, x=0.93358, y=0.357166): 0.383864035035
    test 2113 21 20.871564019024 Theta(tan=0.381294, x=0.93358, y=0.355969): 0.383864035035
    test 2114 21 20.903582743391 Mu(tan=0.381935, x=0.934182, y=0.356796), iteration=3: 0.383864035035
    test 2115 21 20.871582327745 Chi(tan=0.381295, x=1.0, y=0.381295), iteration=2: 0.383864035035
    test 2116 21 20.914273669704 Xi(tan=0.382148, x=1.87662, y=0.717147), iteration=3: 0.383864035035

    test 2117 21 21.000000000000 Phi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 2118 21 20.935701709947 Beta(tan=0.382577, x=0.933982, y=0.35732): 0.383864035035
    test 2119 21 20.871564019024 Theta(tan=0.381294, x=0.934381, y=0.356274): 0.383864035035
    test 2120 21 20.903582743391 Mu(tan=0.381935, x=0.934182, y=0.356796): 0.383864035035
    test 2121 21 20.871582327745 Chi(tan=0.381295, x=0.934381, y=0.356275): 0.383864035035
    test 2122 21 20.914273669704 Xi(tan=0.382148, x=0.934116, y=0.356971): 0.383864035035

    test 2123 28 28.000000000000 Phi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 2124 28 27.920311317014 Beta(tan=0.529927, x=0.882948, y=0.467898): 0.531709431661
    test 2125 28 27.840772765521 Theta(tan=0.52815, x=0.882948, y=0.466329): 0.531709431661
    test 2126 28 27.880495175823 Mu(tan=0.529037, x=0.883925, y=0.467629), iteration=3: 0.531709431661
    test 2127 28 27.840811762412 Chi(tan=0.528151, x=1.0, y=0.528151), iteration=2: 0.531709431661
    test 2128 28 27.893749908688 Xi(tan=0.529333, x=1.77557, y=0.939868), iteration=2: 0.531709431661

    test 2129 28 28.000000000000 Phi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 2130 28 27.920311317014 Beta(tan=0.529927, x=0.8836, y=0.468243): 0.531709431661
    test 2131 28 27.840772765521 Theta(tan=0.52815, x=0.884249, y=0.467016): 0.531709431661
    test 2132 28 27.880495175823 Mu(tan=0.529037, x=0.883925, y=0.467629): 0.531709431661
    test 2133 28 27.840811762412 Chi(tan=0.528151, x=0.884249, y=0.467017): 0.531709431661
    test 2134 28 27.893749908688 Xi(tan=0.529333, x=0.883817, y=0.467833): 0.531709431661

    test 2135 35 35.000000000000 Phi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 2136 35 34.909642037079 Beta(tan=0.69786, x=0.819152, y=0.571653): 0.700207538210
    test 2137 35 34.819388702350 Theta(tan=0.69552, x=0.819152, y=0.569737): 0.700207538210
    test 2138 35 34.864482701692 Mu(tan=0.696688, x=0.820506, y=0.571637), iteration=3: 0.700207538210
    test 2139 35 34.819454815840 Chi(tan=0.695522, x=1.0, y=0.695522), iteration=3: 0.700207538210
    test 2140 35 34.879518549737 Xi(tan=0.697078, x=1.64808, y=1.14884), iteration=3: 0.700207538210

    test 2141 35 35.000000000000 Phi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 2142 35 34.909642037079 Beta(tan=0.69786, x=0.820056, y=0.572284): 0.700207538210
    test 2143 35 34.819388702350 Theta(tan=0.69552, x=0.820956, y=0.570991): 0.700207538210
    test 2144 35 34.864482701692 Mu(tan=0.696688, x=0.820506, y=0.571637): 0.700207538210
    test 2145 35 34.819454815840 Chi(tan=0.695522, x=0.820955, y=0.570992): 0.700207538210
    test 2146 35 34.879518549737 Xi(tan=0.697078, x=0.820356, y=0.571853): 0.700207538210

    test 2147 42 42.000000000000 Phi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 2148 42 41.904331700939 Beta(tan=0.897385, x=0.743145, y=0.666887): 0.900404044298
    test 2149 42 41.808698047037 Theta(tan=0.894376, x=0.743145, y=0.664651): 0.900404044298
    test 2150 42 41.856504060443 Mu(tan=0.895879, x=0.744818, y=0.667267), iteration=3: 0.900404044298
    test 2151 42 41.808793486106 Chi(tan=0.894379, x=1.0, y=0.894379), iteration=3: 0.900404044298
    test 2152 42 41.872431075863 Xi(tan=0.896381, x=1.49595, y=1.34094), iteration=3: 0.900404044298

    test 2153 42 42.000000000000 Phi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 2154 42 41.904331700939 Beta(tan=0.897385, x=0.744261, y=0.667889): 0.900404044298
    test 2155 42 41.808698047037 Theta(tan=0.894376, x=0.745375, y=0.666646): 0.900404044298
    test 2156 42 41.856504060443 Mu(tan=0.895879, x=0.744818, y=0.667267): 0.900404044298
    test 2157 42 41.808793486106 Chi(tan=0.894379, x=0.745374, y=0.666647): 0.900404044298
    test 2158 42 41.872431075863 Xi(tan=0.896381, x=0.744633, y=0.667474): 0.900404044298

    test 2159 49 49.000000000000 Phi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 2160 49 48.904701906378 Beta(tan=1.14651, x=0.656059, y=0.752179): 1.150368407221
    test 2161 49 48.809360314692 Theta(tan=1.14267, x=0.656059, y=0.749657): 1.150368407221
    test 2162 49 48.857044717775 Mu(tan=1.14459, x=0.65794, y=0.75307), iteration=2: 1.150368407221
    test 2163 49 48.809481485365 Chi(tan=1.14267, x=1.0, y=1.14267), iteration=2: 1.150368407221
    test 2164 49 48.872917788725 Xi(tan=1.14523, x=1.32137, y=1.51327), iteration=2: 1.150368407221

    test 2165 49 49.000000000000 Phi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 2166 49 48.904701906378 Beta(tan=1.14651, x=0.657313, y=0.753617): 1.150368407221
    test 2167 49 48.809360314692 Theta(tan=1.14267, x=0.658567, y=0.752523): 1.150368407221
    test 2168 49 48.857044717775 Mu(tan=1.14459, x=0.65794, y=0.75307): 1.150368407221
    test 2169 49 48.809481485365 Chi(tan=1.14267, x=0.658565, y=0.752524): 1.150368407221
    test 2170 49 48.872917788725 Xi(tan=1.14523, x=0.657731, y=0.753253): 1.150368407221

    test 2171 56 56.000000000000 Phi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 2172 56 55.910737485374 Beta(tan=1.47759, x=0.559193, y=0.826258): 1.482560968513
    test 2173 56 55.821363467296 Theta(tan=1.47264, x=0.559193, y=0.823488): 1.482560968513
    test 2174 56 55.866085351958 Mu(tan=1.47511, x=0.561129, y=0.827728), iteration=3: 1.482560968513
    test 2175 56 55.821500669702 Chi(tan=1.47264, x=1.0, y=1.47264), iteration=3: 1.482560968513
    test 2176 56 55.880960089169 Xi(tan=1.47594, x=1.12687, y=1.66318), iteration=3: 1.482560968513

    test 2177 56 56.000000000000 Phi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 2178 56 55.910737485374 Beta(tan=1.47759, x=0.560484, y=0.828165): 1.482560968513
    test 2179 56 55.821363467296 Theta(tan=1.47264, x=0.561775, y=0.82729): 1.482560968513
    test 2180 56 55.866085351958 Mu(tan=1.47511, x=0.561129, y=0.827728): 1.482560968513
    test 2181 56 55.821500669702 Chi(tan=1.47264, x=0.561773, y=0.827291): 1.482560968513
    test 2182 56 55.880960089169 Xi(tan=1.47594, x=0.560914, y=0.827874): 1.482560968513

    test 2183 63 63.000000000000 Phi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 2184 63 62.922085806991 Beta(tan=1.95603, x=0.45399, y=0.888019): 1.962610505505
    test 2185 63 62.844018233783 Theta(tan=1.94947, x=0.45399, y=0.885042): 1.962610505505
    test 2186 63 62.883100004844 Mu(tan=1.95275, x=0.455807, y=0.890078), iteration=2: 1.962610505505
    test 2187 63 62.844156794245 Chi(tan=1.94948, x=1.0, y=1.94948), iteration=3: 1.962610505505
    test 2188 63 62.896089166605 Xi(tan=1.95384, x=0.915303, y=1.78836), iteration=3: 1.962610505505

    test 2189 63 63.000000000000 Phi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 2190 63 62.922085806991 Beta(tan=1.95603, x=0.455202, y=0.890388): 1.962610505505
    test 2191 63 62.844018233783 Theta(tan=1.94947, x=0.456414, y=0.889767): 1.962610505505
    test 2192 63 62.883100004844 Mu(tan=1.95275, x=0.455807, y=0.890078): 1.962610505505
    test 2193 63 62.844156794245 Chi(tan=1.94948, x=0.456412, y=0.889768): 1.962610505505
    test 2194 63 62.896089166605 Xi(tan=1.95384, x=0.455606, y=0.890182): 1.962610505505

    test 2195 70 70.000000000000 Phi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 2196 70 69.938076331685 Beta(tan=2.73827, x=0.34202, y=0.936542): 2.747477419455
    test 2197 70 69.875993436424 Theta(tan=2.72908, x=0.34202, y=0.933402): 2.747477419455
    test 2198 70 69.907084709374 Mu(tan=2.73368, x=0.343544, y=0.939137), iteration=3: 2.747477419455
    test 2199 70 69.876116092580 Chi(tan=2.7291, x=1.0, y=2.7291), iteration=3: 2.747477419455
    test 2200 70 69.917411740864 Xi(tan=2.7352, x=0.689832, y=1.88683), iteration=3: 2.747477419455

    test 2201 70 70.000000000000 Phi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 2202 70 69.938076331685 Beta(tan=2.73827, x=0.343036, y=0.939322): 2.747477419455
    test 2203 70 69.875993436424 Theta(tan=2.72908, x=0.344053, y=0.93895): 2.747477419455
    test 2204 70 69.907084709374 Mu(tan=2.73368, x=0.343544, y=0.939137): 2.747477419455
    test 2205 70 69.876116092580 Chi(tan=2.7291, x=0.344051, y=0.938951): 2.747477419455
    test 2206 70 69.917411740864 Xi(tan=2.7352, x=0.343374, y=0.939199): 2.747477419455

    test 2207 77 77.000000000000 Phi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 2208 77 76.957759584883 Beta(tan=4.31695, x=0.224951, y=0.971103): 4.331475874284
    test 2209 77 76.915391564534 Theta(tan=4.30248, x=0.224951, y=0.967847): 4.331475874284
    test 2210 77 76.936615512426 Mu(tan=4.30972, x=0.226029, y=0.974121), iteration=3: 4.331475874284
    test 2211 77 76.915481614667 Chi(tan=4.30251, x=1.0, y=4.30251), iteration=3: 4.331475874284
    test 2212 77 76.943661825901 Xi(tan=4.31213, x=0.453847, y=1.95704), iteration=3: 4.331475874284

    test 2213 77 77.000000000000 Phi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 2214 77 76.957759584883 Beta(tan=4.31695, x=0.225669, y=0.974204): 4.331475874284
    test 2215 77 76.915391564534 Theta(tan=4.30248, x=0.22639, y=0.974037): 4.331475874284
    test 2216 77 76.936615512426 Mu(tan=4.30972, x=0.226029, y=0.974121): 4.331475874284
    test 2217 77 76.915481614667 Chi(tan=4.30251, x=0.226388, y=0.974037): 4.331475874284
    test 2218 77 76.943661825901 Xi(tan=4.31213, x=0.225909, y=0.974148): 4.331475874284

    test 2219 84 84.000000000000 Phi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 2220 84 83.979963440552 Beta(tan=9.48246, x=0.104528, y=0.991187): 9.514364454223
    test 2221 84 83.959860961536 Theta(tan=9.45067, x=0.104528, y=0.987864): 9.514364454223
    test 2222 84 83.969932834829 Mu(tan=9.46657, x=0.10505, y=0.994467), iteration=2: 9.514364454223
    test 2223 84 83.959905488972 Chi(tan=9.45074, x=1.0, y=9.45074), iteration=3: 9.514364454223
    test 2224 84 83.973275752467 Xi(tan=9.47186, x=0.210927, y=1.99788), iteration=3: 9.514364454223

    test 2225 84 84.000000000000 Phi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 2226 84 83.979963440552 Beta(tan=9.48246, x=0.104876, y=0.994485): 9.514364454223
    test 2227 84 83.959860961536 Theta(tan=9.45067, x=0.105225, y=0.994448): 9.514364454223
    test 2228 84 83.969932834829 Mu(tan=9.46657, x=0.10505, y=0.994467): 9.514364454223
    test 2229 84 83.959905488972 Chi(tan=9.45074, x=0.105224, y=0.994449): 9.514364454223
    test 2230 84 83.973275752467 Xi(tan=9.47186, x=0.104992, y=0.994473): 9.514364454223

    test 2231 91 91.000000000000 Phi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 2232 91 91.003363403239 Beta(tan=-57.0979, x=-0.0174524, y=0.996495): -57.289961630759
    test 2233 91 91.006738114317 Theta(tan=-56.9064, x=-0.0174524, y=0.993154): -57.289961630759
    test 2234 91 91.005047219150 Mu(tan=-57.0022, x=-0.0175405, y=0.999846), iteration=2: -57.289961630759
    test 2235 91 91.006730558280 Chi(tan=-56.9069, x=-1, y=56.9069), iteration=3: -57.289961630759
    test 2236 91 91.004486042138 Xi(tan=-57.0341, x=-0.0352188, y=2.00867), iteration=3: -57.289961630759

    test 2237 91 91.000000000000 Phi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 2238 91 91.003363403239 Beta(tan=-57.0979, x=-0.0175111, y=0.999847): -57.289961630759
    test 2239 91 91.006738114317 Theta(tan=-56.9064, x=-0.01757, y=0.999846): -57.289961630759
    test 2240 91 91.005047219150 Mu(tan=-57.0022, x=-0.0175405, y=0.999846): -57.289961630759
    test 2241 91 91.006730558280 Chi(tan=-56.9069, x=-0.0175699, y=0.999846): -57.289961630759
    test 2242 91 91.004486042138 Xi(tan=-57.0341, x=-0.0175307, y=0.999846): -57.289961630759

    test 2243 98 98.000000000000 Phi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 2244 98 98.026562562307 Beta(tan=-7.09151, x=-0.139173, y=0.986948): -7.115369722384
    test 2245 98 98.053210993331 Theta(tan=-7.06774, x=-0.139173, y=0.983639): -7.115369722384
    test 2246 98 98.039859900320 Mu(tan=-7.07963, x=-0.139862, y=0.990171), iteration=3: -7.115369722384
    test 2247 98 98.053152474664 Chi(tan=-7.06779, x=-1, y=7.06779), iteration=3: -7.115369722384
    test 2248 98 98.035428327772 Xi(tan=-7.08359, x=-0.280826, y=1.98926), iteration=2: -7.115369722384

    test 2249 98 98.000000000000 Phi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 2250 98 98.026562562307 Beta(tan=-7.09151, x=-0.139632, y=0.990203): -7.115369722384
    test 2251 98 98.053210993331 Theta(tan=-7.06774, x=-0.140093, y=0.990138): -7.115369722384
    test 2252 98 98.039859900320 Mu(tan=-7.07963, x=-0.139862, y=0.990171): -7.115369722384
    test 2253 98 98.053152474664 Chi(tan=-7.06779, x=-0.140092, y=0.990139): -7.115369722384
    test 2254 98 98.035428327772 Xi(tan=-7.08359, x=-0.139785, y=0.990182): -7.115369722384

    test 2255 105 105.000000000000 Phi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 2256 105 105.048176169243 Beta(tan=-3.71954, x=-0.258819, y=0.962687): -3.732050807569
    test 2257 105 105.096492525996 Theta(tan=-3.70707, x=-0.258819, y=0.95946): -3.732050807569
    test 2258 105 105.072290473972 Mu(tan=-3.7133, x=-0.260038, y=0.965599), iteration=3: -3.732050807569
    test 2259 105 105.096391619832 Chi(tan=-3.70709, x=-1, y=3.70709), iteration=2: -3.732050807569
    test 2260 105 105.064254515857 Xi(tan=-3.71538, x=-0.522138, y=1.93994), iteration=2: -3.732050807569

    test 2261 105 105.000000000000 Phi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 2262 105 105.048176169243 Beta(tan=-3.71954, x=-0.259631, y=0.965708): -3.732050807569
    test 2263 105 105.096492525996 Theta(tan=-3.70707, x=-0.260445, y=0.965489): -3.732050807569
    test 2264 105 105.072290473972 Mu(tan=-3.7133, x=-0.260038, y=0.965599): -3.732050807569
    test 2265 105 105.096391619832 Chi(tan=-3.70709, x=-0.260444, y=0.965489): -3.732050807569
    test 2266 105 105.064254515857 Xi(tan=-3.71538, x=-0.259902, y=0.965635): -3.732050807569

    test 2267 112 112.000000000000 Phi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 2268 112 112.066915437341 Beta(tan=-2.46679, x=-0.374607, y=0.924075): -2.475086853416
    test 2269 112 112.133992362411 Theta(tan=-2.45852, x=-0.374607, y=0.920977): -2.475086853416
    test 2270 112 112.100403370338 Mu(tan=-2.46265, x=-0.376231, y=0.926526), iteration=3: -2.475086853416
    test 2271 112 112.133863370700 Chi(tan=-2.45853, x=-1, y=2.45853), iteration=3: -2.475086853416
    test 2272 112 112.089244898668 Xi(tan=-2.46403, x=-0.755478, y=1.86152), iteration=3: -2.475086853416

    test 2273 112 112.000000000000 Phi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 2274 112 112.066915437341 Beta(tan=-2.46679, x=-0.375689, y=0.926746): -2.475086853416
    test 2275 112 112.133992362411 Theta(tan=-2.45852, x=-0.376774, y=0.926305): -2.475086853416
    test 2276 112 112.100403370338 Mu(tan=-2.46265, x=-0.376231, y=0.926526): -2.475086853416
    test 2277 112 112.133863370700 Chi(tan=-2.45853, x=-0.376772, y=0.926306): -2.475086853416
    test 2278 112 112.089244898668 Xi(tan=-2.46403, x=-0.37605, y=0.926599): -2.475086853416

    test 2279 119 119.000000000000 Phi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 2280 119 119.081665222463 Beta(tan=-1.798, x=-0.48481, y=0.871687): -1.804047755271
    test 2281 119 119.163475249163 Theta(tan=-1.79197, x=-0.48481, y=0.868765): -1.804047755271
    test 2282 119 119.122524937479 Mu(tan=-1.79498, x=-0.486679, y=0.873581), iteration=3: -1.804047755271
    test 2283 119 119.163335373555 Chi(tan=-1.79198, x=-1, y=1.79198), iteration=3: -1.804047755271
    test 2284 119 119.108912006611 Xi(tan=-1.79599, x=-0.977311, y=1.75524), iteration=3: -1.804047755271

    test 2285 119 119.000000000000 Phi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 2286 119 119.081665222463 Beta(tan=-1.798, x=-0.486056, y=0.873928): -1.804047755271
    test 2287 119 119.163475249163 Theta(tan=-1.79197, x=-0.487303, y=0.873233): -1.804047755271
    test 2288 119 119.122524937479 Mu(tan=-1.79498, x=-0.486679, y=0.873581): -1.804047755271
    test 2289 119 119.163335373555 Chi(tan=-1.79198, x=-0.487301, y=0.873234): -1.804047755271
    test 2290 119 119.108912006611 Xi(tan=-1.79599, x=-0.486471, y=0.873697): -1.804047755271

    test 2291 126 126.000000000000 Phi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2292 126 126.091550707249 Beta(tan=-1.37177, x=-0.587785, y=0.806305): -1.376381920471
    test 2293 126 126.183195540448 Theta(tan=-1.36717, x=-0.587785, y=0.803601): -1.376381920471
    test 2294 126 126.137343684620 Mu(tan=-1.36947, x=-0.589723, y=0.807606), iteration=3: -1.376381920471
    test 2295 126 126.183061603372 Chi(tan=-1.36717, x=-1, y=1.36717), iteration=3: -1.376381920471
    test 2296 126 126.122089633630 Xi(tan=-1.37023, x=-1.18431, y=1.62278), iteration=2: -1.376381920471

    test 2297 126 126.000000000000 Phi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2298 126 126.091550707249 Beta(tan=-1.37177, x=-0.589077, y=0.808077): -1.376381920471
    test 2299 126 126.183195540448 Theta(tan=-1.36717, x=-0.590369, y=0.807133): -1.376381920471
    test 2300 126 126.137343684620 Mu(tan=-1.36947, x=-0.589723, y=0.807606): -1.376381920471
    test 2301 126 126.183061603372 Chi(tan=-1.36717, x=-0.590367, y=0.807135): -1.376381920471
    test 2302 126 126.122089633630 Xi(tan=-1.37023, x=-0.589508, y=0.807763): -1.376381920471

    test 2303 133 133.000000000000 Phi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 2304 133 133.095989026852 Beta(tan=-1.06877, x=-0.681998, y=0.728902): -1.072368710025
    test 2305 133 133.191999466035 Theta(tan=-1.06519, x=-0.681998, y=0.726458): -1.072368710025
    test 2306 133 133.143987543114 Mu(tan=-1.06698, x=-0.683834, y=0.729637), iteration=2: -1.072368710025
    test 2307 133 133.191884915480 Chi(tan=-1.06519, x=-1, y=1.06519), iteration=3: -1.072368710025
    test 2308 133 133.128001595557 Xi(tan=-1.06758, x=-1.3734, y=1.46621), iteration=3: -1.072368710025

    test 2309 133 133.000000000000 Phi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 2310 133 133.095989026852 Beta(tan=-1.06877, x=-0.683223, y=0.73021): -1.072368710025
    test 2311 133 133.191999466035 Theta(tan=-1.06519, x=-0.684445, y=0.729064): -1.072368710025
    test 2312 133 133.143987543114 Mu(tan=-1.06698, x=-0.683834, y=0.729637): -1.072368710025
    test 2313 133 133.191884915480 Chi(tan=-1.06519, x=-0.684444, y=0.729066): -1.072368710025
    test 2314 133 133.128001595557 Xi(tan=-1.06758, x=-0.683631, y=0.729828): -1.072368710025

    test 2315 140 140.000000000000 Phi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 2316 140 140.094722853987 Beta(tan=-0.836286, x=-0.766044, y=0.640632): -0.839099631177
    test 2317 140 140.189389448072 Theta(tan=-0.833482, x=-0.766044, y=0.638485): -0.839099631177
    test 2318 140 140.142073716249 Mu(tan=-0.834883, x=-0.767636, y=0.640886), iteration=3: -0.839099631177
    test 2319 140 140.189302292623 Chi(tan=-0.833485, x=-1, y=0.833485), iteration=2: -0.839099631177
    test 2320 140 140.126306265466 Xi(tan=-0.83535, x=-1.54181, y=1.28795), iteration=2: -0.839099631177

    test 2321 140 140.000000000000 Phi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 2322 140 140.094722853987 Beta(tan=-0.836286, x=-0.767106, y=0.64152): -0.839099631177
    test 2323 140 140.189389448072 Theta(tan=-0.833482, x=-0.768165, y=0.640252): -0.839099631177
    test 2324 140 140.142073716249 Mu(tan=-0.834883, x=-0.767636, y=0.640886): -0.839099631177
    test 2325 140 140.189302292623 Chi(tan=-0.833485, x=-0.768164, y=0.640253): -0.839099631177
    test 2326 140 140.126306265466 Xi(tan=-0.83535, x=-0.76746, y=0.641097): -0.839099631177

    test 2327 147 147.000000000000 Phi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2328 147 147.087834196097 Beta(tan=-0.64723, x=-0.838671, y=0.542813): -0.649407593198
    test 2329 147 147.175547668144 Theta(tan=-0.64506, x=-0.838671, y=0.540993): -0.649407593198
    test 2330 147 147.131728623858 Mu(tan=-0.646144, x=-0.839921, y=0.542709), iteration=2: -0.649407593198
    test 2331 147 147.175489751194 Chi(tan=-0.645062, x=-1, y=0.645062), iteration=3: -0.649407593198
    test 2332 147 147.117114615992 Xi(tan=-0.646505, x=-1.68711, y=1.09072), iteration=3: -0.649407593198

    test 2333 147 147.000000000000 Phi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2334 147 147.087834196097 Beta(tan=-0.64723, x=-0.839505, y=0.543353): -0.649407593198
    test 2335 147 147.175547668144 Theta(tan=-0.64506, x=-0.840335, y=0.542067): -0.649407593198
    test 2336 147 147.131728623858 Mu(tan=-0.646144, x=-0.839921, y=0.542709): -0.649407593198
    test 2337 147 147.175489751194 Chi(tan=-0.645062, x=-0.840335, y=0.542068): -0.649407593198
    test 2338 147 147.117114615992 Xi(tan=-0.646505, x=-0.839782, y=0.542924): -0.649407593198

    test 2339 154 154.000000000000 Phi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 2340 154 154.075737936138 Beta(tan=-0.486097, x=-0.898794, y=0.436901): -0.487732588566
    test 2341 154 154.151318905421 Theta(tan=-0.484468, x=-0.898794, y=0.435437): -0.487732588566
    test 2342 154 154.113577416532 Mu(tan=-0.485281, x=-0.899661, y=0.436589), iteration=3: -0.487732588566
    test 2343 154 154.151286603865 Chi(tan=-0.484468, x=-1, y=0.484468), iteration=2: -0.487732588566
    test 2344 154 154.100981227925 Xi(tan=-0.485553, x=-1.80721, y=0.877495), iteration=3: -0.487732588566

    test 2345 154 154.000000000000 Phi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 2346 154 154.075737936138 Beta(tan=-0.486097, x=-0.899373, y=0.437183): -0.487732588566
    test 2347 154 154.151318905421 Theta(tan=-0.484468, x=-0.899949, y=0.435996): -0.487732588566
    test 2348 154 154.113577416532 Mu(tan=-0.485281, x=-0.899661, y=0.436589): -0.487732588566
    test 2349 154 154.151286603865 Chi(tan=-0.484468, x=-0.899948, y=0.435996): -0.487732588566
    test 2350 154 154.100981227925 Xi(tan=-0.485553, x=-0.899565, y=0.436786): -0.487732588566

    test 2351 161 161.000000000000 Phi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 2352 161 161.059155871563 Beta(tan=-0.343173, x=-0.945519, y=0.324477): -0.344327613290
    test 2353 161 161.118155143282 Theta(tan=-0.342023, x=-0.945519, y=0.323389): -0.344327613290
    test 2354 161 161.088704377377 Mu(tan=-0.342597, x=-0.946021, y=0.324104), iteration=3: -0.344327613290
    test 2355 161 161.118141245926 Chi(tan=-0.342023, x=-1, y=0.342023), iteration=3: -0.344327613290
    test 2356 161 161.078869359618 Xi(tan=-0.342789, x=-1.90043, y=0.651445), iteration=3: -0.344327613290

    test 2357 161 161.000000000000 Phi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 2358 161 161.059155871563 Beta(tan=-0.343173, x=-0.945854, y=0.324592): -0.344327613290
    test 2359 161 161.118155143282 Theta(tan=-0.342023, x=-0.946188, y=0.323618): -0.344327613290
    test 2360 161 161.088704377377 Mu(tan=-0.342597, x=-0.946021, y=0.324104): -0.344327613290
    test 2361 161 161.118141245926 Chi(tan=-0.342023, x=-0.946188, y=0.323618): -0.344327613290
    test 2362 161 161.078869359618 Xi(tan=-0.342789, x=-0.945966, y=0.324266): -0.344327613290

    test 2363 168 168.000000000000 Phi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2364 168 168.039073098008 Beta(tan=-0.211844, x=-0.978148, y=0.207215): -0.212556561670
    test 2365 168 168.078026427494 Theta(tan=-0.211134, x=-0.978148, y=0.20652): -0.212556561670
    test 2366 168 168.058587132190 Mu(tan=-0.211488, x=-0.97836, y=0.206911), iteration=3: -0.212556561670
    test 2367 168 168.078022687531 Chi(tan=-0.211134, x=-1, y=0.211134), iteration=3: -0.212556561670
    test 2368 168 168.052092611435 Xi(tan=-0.211606, x=-1.96546, y=0.415904), iteration=3: -0.212556561670

    test 2369 168 168.000000000000 Phi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2370 168 168.039073098008 Beta(tan=-0.211844, x=-0.978289, y=0.207245): -0.212556561670
    test 2371 168 168.078026427494 Theta(tan=-0.211134, x=-0.97843, y=0.206579): -0.212556561670
    test 2372 168 168.058587132190 Mu(tan=-0.211488, x=-0.97836, y=0.206911): -0.212556561670
    test 2373 168 168.078022687531 Chi(tan=-0.211134, x=-0.97843, y=0.20658): -0.212556561670
    test 2374 168 168.052092611435 Xi(tan=-0.211606, x=-0.978336, y=0.207022): -0.212556561670

    test 2375 175 175.000000000000 Phi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 2376 175 175.016679496811 Beta(tan=-0.0871953, x=-0.996195, y=0.0868635): -0.087488663526
    test 2377 175 175.033303912991 Theta(tan=-0.086903, x=-0.996195, y=0.0865723): -0.087488663526
    test 2378 175 175.025008889061 Mu(tan=-0.0870489, x=-0.996233, y=0.0867209), iteration=3: -0.087488663526
    test 2379 175 175.033303632597 Chi(tan=-0.086903, x=-1, y=0.086903), iteration=2: -0.087488663526
    test 2380 175 175.022236903877 Xi(tan=-0.0870976, x=-2.0014, y=0.174317), iteration=2: -0.087488663526

    test 2381 175 175.000000000000 Phi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 2382 175 175.016679496811 Beta(tan=-0.0871953, x=-0.99622, y=0.0868657): -0.087488663526
    test 2383 175 175.033303912991 Theta(tan=-0.086903, x=-0.996245, y=0.0865767): -0.087488663526
    test 2384 175 175.025008889061 Mu(tan=-0.0870489, x=-0.996233, y=0.0867209): -0.087488663526
    test 2385 175 175.033303632597 Chi(tan=-0.086903, x=-0.996245, y=0.0865767): -0.087488663526
    test 2386 175 175.022236903877 Xi(tan=-0.0870976, x=-0.996228, y=0.0867691): -0.087488663526

    test 2387 182 182.000000000000 Phi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 2388 182 181.993299797077 Beta(tan=0.0348037, x=-0.999391, y=-0.0347825): 0.034920769492
    test 2389 182 181.986622004399 Theta(tan=0.034687, x=-0.999391, y=-0.0346659): 0.034920769492
    test 2390 182 181.989953909276 Mu(tan=0.0347452, x=-0.999397, y=-0.0347243), iteration=3: 0.034920769492
    test 2391 182 181.986622022458 Chi(tan=0.034687, x=-1, y=-0.034687), iteration=2: 0.034920769492
    test 2392 182 181.991067395746 Xi(tan=0.0347647, x=-2.00777, y=-0.0697994), iteration=3: 0.034920769492

    test 2393 182 182.000000000000 Phi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 2394 182 181.993299797077 Beta(tan=0.0348037, x=-0.999395, y=-0.0347826): 0.034920769492
    test 2395 182 181.986622004399 Theta(tan=0.034687, x=-0.999399, y=-0.0346661): 0.034920769492
    test 2396 182 181.989953909276 Mu(tan=0.0347452, x=-0.999397, y=-0.0347243): 0.034920769492
    test 2397 182 181.986622022458 Chi(tan=0.034687, x=-0.999399, y=-0.0346661): 0.034920769492
    test 2398 182 181.991067395746 Xi(tan=0.0347647, x=-0.999396, y=-0.0347437): 0.034920769492

    test 2399 189 189.000000000000 Phi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 2400 189 188.970316191157 Beta(tan=0.157853, x=-0.987688, y=-0.15591): 0.158384440325
    test 2401 189 188.940727074963 Theta(tan=0.157324, x=-0.987688, y=-0.155387): 0.158384440325
    test 2402 189 188.955492089230 Mu(tan=0.157588, x=-0.98781, y=-0.155667), iteration=3: 0.158384440325
    test 2403 189 188.940728682981 Chi(tan=0.157324, x=-1, y=-0.157324), iteration=3: 0.158384440325
    test 2404 189 188.960425606106 Xi(tan=0.157676, x=-1.98446, y=-0.312903), iteration=2: 0.158384440325

    test 2405 189 189.000000000000 Phi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 2406 189 188.970316191157 Beta(tan=0.157853, x=-0.987769, y=-0.155923): 0.158384440325
    test 2407 189 188.940727074962 Theta(tan=0.157324, x=-0.98785, y=-0.155413): 0.158384440325
    test 2408 189 188.955492089230 Mu(tan=0.157588, x=-0.98781, y=-0.155667): 0.158384440325
    test 2409 189 188.940728682981 Chi(tan=0.157324, x=-0.98785, y=-0.155413): 0.158384440325
    test 2410 189 188.960425606106 Xi(tan=0.157676, x=-0.987796, y=-0.155752): 0.158384440325

    test 2411 196 196.000000000000 Phi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 2412 196 195.949087795468 Beta(tan=0.285784, x=-0.961262, y=-0.274713): 0.286745385759
    test 2413 196 195.898320549032 Theta(tan=0.284826, x=-0.961262, y=-0.273792): 0.286745385759
    test 2414 196 195.923658939114 Mu(tan=0.285304, x=-0.961628, y=-0.274356), iteration=3: 0.286745385759
    test 2415 196 195.898329118388 Chi(tan=0.284826, x=-1, y=-0.284826), iteration=3: 0.286745385759
    test 2416 196 195.932122390859 Xi(tan=0.285464, x=-1.93181, y=-0.551462), iteration=2: 0.286745385759

    test 2417 196 196.000000000000 Phi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 2418 196 195.949087795468 Beta(tan=0.285784, x=-0.961506, y=-0.274783): 0.286745385759
    test 2419 196 195.898320549032 Theta(tan=0.284826, x=-0.961749, y=-0.273931): 0.286745385759
    test 2420 196 195.923658939114 Mu(tan=0.285304, x=-0.961628, y=-0.274356): 0.286745385759
    test 2421 196 195.898329118388 Chi(tan=0.284826, x=-0.961749, y=-0.273931): 0.286745385759
    test 2422 196 195.932122390859 Xi(tan=0.285464, x=-0.961588, y=-0.274498): 0.286745385759

    test 2423 203 203.000000000000 Phi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 2424 203 202.930871376810 Beta(tan=0.423052, x=-0.920505, y=-0.389421): 0.424474816210
    test 2425 203 202.861904242075 Theta(tan=0.421633, x=-0.920505, y=-0.388115): 0.424474816210
    test 2426 203 202.896337407506 Mu(tan=0.422341, x=-0.92121, y=-0.389065), iteration=2: 0.424474816210
    test 2427 203 202.861927650711 Chi(tan=0.421634, x=-1, y=-0.421634), iteration=3: 0.424474816210
    test 2428 203 202.907832581930 Xi(tan=0.422578, x=-1.85054, y=-0.781995), iteration=3: 0.424474816210

    test 2429 203 203.000000000000 Phi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 2430 203 202.930871376810 Beta(tan=0.423052, x=-0.920976, y=-0.38962): 0.424474816210
    test 2431 203 202.861904242075 Theta(tan=0.421633, x=-0.921444, y=-0.388511): 0.424474816210
    test 2432 203 202.896337407506 Mu(tan=0.422341, x=-0.92121, y=-0.389065): 0.424474816210
    test 2433 203 202.861927650711 Chi(tan=0.421634, x=-0.921444, y=-0.388512): 0.424474816210
    test 2434 203 202.907832581930 Xi(tan=0.422578, x=-0.921132, y=-0.38925): 0.424474816210

    test 2435 210 210.000000000000 Phi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 2436 210 209.916747713236 Beta(tan=0.575415, x=-0.866025, y=-0.498324): 0.577350269190
    test 2437 210 209.833635809829 Theta(tan=0.573485, x=-0.866025, y=-0.496653): 0.577350269190
    test 2438 210 209.875147936061 Mu(tan=0.574448, x=-0.867113, y=-0.498112), iteration=2: 0.577350269190
    test 2439 210 209.833682042481 Chi(tan=0.573486, x=-1, y=-0.573486), iteration=2: 0.577350269190
    test 2440 210 209.888997034460 Xi(tan=0.57477, x=-1.74177, y=-1.00112), iteration=3: 0.577350269190

    test 2441 210 210.000000000000 Phi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 2442 210 209.916747713236 Beta(tan=0.575415, x=-0.866751, y=-0.498741): 0.577350269190
    test 2443 210 209.833635809829 Theta(tan=0.573485, x=-0.867474, y=-0.497483): 0.577350269190
    test 2444 210 209.875147936061 Mu(tan=0.574448, x=-0.867113, y=-0.498112): 0.577350269190
    test 2445 210 209.833682042481 Chi(tan=0.573486, x=-0.867473, y=-0.497484): 0.577350269190
    test 2446 210 209.888997034460 Xi(tan=0.57477, x=-0.866992, y=-0.498321): 0.577350269190

    test 2447 217 217.000000000000 Phi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 2448 217 216.907557725734 Beta(tan=0.751028, x=-0.798636, y=-0.599797): 0.753554050103
    test 2449 217 216.815201948287 Theta(tan=0.748509, x=-0.798636, y=-0.597786): 0.753554050103
    test 2450 217 216.861352829418 Mu(tan=0.749767, x=-0.800089, y=-0.599881), iteration=2: 0.753554050103
    test 2451 217 216.815276448911 Chi(tan=0.748512, x=-1, y=-0.748512), iteration=2: 0.753554050103
    test 2452 217 216.876737541007 Xi(tan=0.750187, x=-1.60704, y=-1.20558), iteration=3: 0.753554050103

    test 2453 217 217.000000000000 Phi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 2454 217 216.907557725734 Beta(tan=0.751028, x=-0.799605, y=-0.600526): 0.753554050103
    test 2455 217 216.815201948287 Theta(tan=0.748509, x=-0.800572, y=-0.599236): 0.753554050103
    test 2456 217 216.861352829418 Mu(tan=0.749767, x=-0.800089, y=-0.599881): 0.753554050103
    test 2457 217 216.815276448911 Chi(tan=0.748512, x=-0.800572, y=-0.599237): 0.753554050103
    test 2458 217 216.876737541007 Xi(tan=0.750187, x=-0.799928, y=-0.600095): 0.753554050103

    test 2459 224 224.000000000000 Phi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 2460 224 223.903852093789 Beta(tan=0.962451, x=-0.71934, y=-0.692329): 0.965688774807
    test 2461 224 223.807716539068 Theta(tan=0.959224, x=-0.71934, y=-0.690008): 0.965688774807
    test 2462 224 223.855780468115 Mu(tan=0.960836, x=-0.721086, y=-0.692846), iteration=3: 0.965688774807
    test 2463 224 223.807819970397 Chi(tan=0.959228, x=-1, y=-0.959228), iteration=3: 0.965688774807
    test 2464 224 223.871789544357 Xi(tan=0.961374, x=-1.44826, y=-1.39232), iteration=3: 0.965688774807

    test 2465 224 224.000000000000 Phi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 2466 224 223.903852093789 Beta(tan=0.962451, x=-0.720504, y=-0.69345): 0.965688774807
    test 2467 224 223.807716539068 Theta(tan=0.959224, x=-0.721667, y=-0.69224): 0.965688774807
    test 2468 224 223.855780468115 Mu(tan=0.960836, x=-0.721086, y=-0.692846): 0.965688774807
    test 2469 224 223.807819970397 Chi(tan=0.959228, x=-0.721666, y=-0.692242): 0.965688774807
    test 2470 224 223.871789544357 Xi(tan=0.961374, x=-0.720892, y=-0.693047): 0.965688774807

    test 2471 231 231.000000000000 Phi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 2472 231 230.905857444036 Beta(tan=1.23076, x=-0.62932, y=-0.77454): 1.234897156535
    test 2473 231 230.811650146691 Theta(tan=1.22663, x=-0.62932, y=-0.771943): 1.234897156535
    test 2474 231 230.858774044602 Mu(tan=1.22869, x=-0.631234, y=-0.775592), iteration=3: 1.234897156535
    test 2475 231 230.811777138431 Chi(tan=1.22664, x=-1, y=-1.22664), iteration=3: 1.234897156535
    test 2476 231 230.874456790611 Xi(tan=1.22938, x=-1.26771, y=-1.5585), iteration=2: 1.234897156535

    test 2477 231 231.000000000000 Phi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 2478 231 230.905857444036 Beta(tan=1.23076, x=-0.630596, y=-0.776111): 1.234897156535
    test 2479 231 230.811650146691 Theta(tan=1.22663, x=-0.631872, y=-0.775073): 1.234897156535
    test 2480 231 230.858774044602 Mu(tan=1.22869, x=-0.631234, y=-0.775592): 1.234897156535
    test 2481 231 230.811777138431 Chi(tan=1.22664, x=-0.63187, y=-0.775074): 1.234897156535
    test 2482 231 230.874456790611 Xi(tan=1.22938, x=-0.631022, y=-0.775765): 1.234897156535

    test 2483 238 238.000000000000 Phi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 2484 238 237.913461373388 Beta(tan=1.59497, x=-0.529919, y=-0.845205): 1.600334529041
    test 2485 238 237.826796038008 Theta(tan=1.58962, x=-0.529919, y=-0.842371): 1.600334529041
    test 2486 238 237.870168339397 Mu(tan=1.59229, x=-0.53184, y=-0.846845), iteration=2: 1.600334529041
    test 2487 238 237.826935292578 Chi(tan=1.58963, x=-1, y=-1.58963), iteration=2: 1.600334529041
    test 2488 238 237.884590997667 Xi(tan=1.59318, x=-1.06803, y=-1.70156), iteration=3: 1.600334529041

    test 2489 238 238.000000000000 Phi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 2490 238 237.913461373388 Beta(tan=1.59497, x=-0.5312, y=-0.847247): 1.600334529041
    test 2491 238 237.826796038008 Theta(tan=1.58962, x=-0.53248, y=-0.846442): 1.600334529041
    test 2492 238 237.870168339397 Mu(tan=1.59229, x=-0.53184, y=-0.846845): 1.600334529041
    test 2493 238 237.826935292578 Chi(tan=1.58963, x=-0.532478, y=-0.846444): 1.600334529041
    test 2494 238 237.884590997667 Xi(tan=1.59318, x=-0.531626, y=-0.846979): 1.600334529041

    test 2495 245 245.000000000000 Phi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 2496 245 244.926217548699 Beta(tan=2.13732, x=-0.422618, y=-0.903269): 2.144506920510
    test 2497 245 244.852276137025 Theta(tan=2.13015, x=-0.422618, y=-0.900241): 2.144506920510
    test 2498 245 244.889296576536 Mu(tan=2.13373, x=-0.424369, y=-0.90549), iteration=2: 2.144506920510
    test 2499 245 244.852411952909 Chi(tan=2.13016, x=-1, y=-2.13016), iteration=3: 2.144506920510
    test 2500 245 244.901598279036 Xi(tan=2.13493, x=-0.852157, y=-1.81929), iteration=2: 2.144506920510

    test 2501 245 245.000000000000 Phi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 2502 245 244.926217548699 Beta(tan=2.13732, x=-0.423785, y=-0.905763): 2.144506920510
    test 2503 245 244.852276137025 Theta(tan=2.13015, x=-0.424954, y=-0.905215): 2.144506920510
    test 2504 245 244.889296576536 Mu(tan=2.13373, x=-0.424369, y=-0.90549): 2.144506920510
    test 2505 245 244.852411952909 Chi(tan=2.13016, x=-0.424951, y=-0.905216): 2.144506920510
    test 2506 245 244.901598279036 Xi(tan=2.13493, x=-0.424174, y=-0.905581): 2.144506920510

    test 2507 252 252.000000000000 Phi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 2508 252 251.943370950484 Beta(tan=3.06736, x=-0.309017, y=-0.947868): 3.077683537175
    test 2509 252 251.886588050489 Theta(tan=3.05708, x=-0.309017, y=-0.94469): 3.077683537175
    test 2510 252 251.915027646278 Mu(tan=3.06222, x=-0.310427, y=-0.950597), iteration=2: 3.077683537175
    test 2511 252 251.886702986922 Chi(tan=3.0571, x=-1, y=-3.0571), iteration=3: 3.077683537175
    test 2512 252 251.924472501487 Xi(tan=3.06393, x=-0.623327, y=-1.90983), iteration=3: 3.077683537175

    test 2513 252 252.000000000000 Phi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 2514 252 251.943370950484 Beta(tan=3.06736, x=-0.309957, y=-0.950751): 3.077683537175
    test 2515 252 251.886588050489 Theta(tan=3.05708, x=-0.310899, y=-0.950443): 3.077683537175
    test 2516 252 251.915027646278 Mu(tan=3.06222, x=-0.310427, y=-0.950597): 3.077683537175
    test 2517 252 251.886702986922 Chi(tan=3.0571, x=-0.310897, y=-0.950444): 3.077683537175
    test 2518 252 251.924472501487 Xi(tan=3.06393, x=-0.31027, y=-0.950648): 3.077683537175

    test 2519 259 259.000000000000 Phi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 2520 259 258.963902062378 Beta(tan=5.12731, x=-0.190809, y=-0.978336): 5.144554015970
    test 2521 259 258.927691601915 Theta(tan=5.11011, x=-0.190809, y=-0.975056): 5.144554015970
    test 2522 259 258.945832050834 Mu(tan=5.11871, x=-0.191737, y=-0.981446), iteration=3: 5.144554015970
    test 2523 259 258.927769725031 Chi(tan=5.11015, x=-1, y=-5.11015), iteration=3: 5.144554015970
    test 2524 259 258.951854051022 Xi(tan=5.12157, x=-0.384988, y=-1.97175), iteration=3: 5.144554015970

    test 2525 259 259.000000000000 Phi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 2526 259 258.963902062378 Beta(tan=5.12731, x=-0.191427, y=-0.981507): 5.144554015970
    test 2527 259 258.927691601915 Theta(tan=5.11011, x=-0.192048, y=-0.981386): 5.144554015970
    test 2528 259 258.945832050834 Mu(tan=5.11871, x=-0.191737, y=-0.981446): 5.144554015970
    test 2529 259 258.927769725031 Chi(tan=5.11015, x=-0.192046, y=-0.981386): 5.144554015970
    test 2530 259 258.951854051022 Xi(tan=5.12157, x=-0.191634, y=-0.981466): 5.144554015970

    test 2531 266 266.000000000000 Phi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 2532 266 265.986587541025 Beta(tan=14.2527, x=-0.0697565, y=-0.994219): 14.300666256712
    test 2533 266 265.973130404128 Theta(tan=14.2049, x=-0.0697565, y=-0.990886): 14.300666256712
    test 2534 266 265.979872957664 Mu(tan=14.2288, x=-0.0701069, y=-0.997539), iteration=2: 14.300666256712
    test 2535 266 265.973160396216 Chi(tan=14.205, x=-1, y=-14.205), iteration=3: 14.300666256712
    test 2536 266 265.982110758522 Xi(tan=14.2368, x=-0.140765, y=-2.00404), iteration=2: 14.300666256712

    test 2537 266 266.000000000000 Phi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 2538 266 265.986587541025 Beta(tan=14.2527, x=-0.06999, y=-0.997548): 14.300666256712
    test 2539 266 265.973130404128 Theta(tan=14.2049, x=-0.0702243, y=-0.997531): 14.300666256712
    test 2540 266 265.979872957664 Mu(tan=14.2288, x=-0.0701069, y=-0.997539): 14.300666256712
    test 2541 266 265.973160396216 Chi(tan=14.205, x=-0.0702238, y=-0.997531): 14.300666256712
    test 2542 266 265.982110758522 Xi(tan=14.2368, x=-0.0700679, y=-0.997542): 14.300666256712

    test 2543 273 273.000000000000 Phi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 2544 273 273.010073740960 Beta(tan=-19.0172, x=0.052336, y=-0.995281): -19.081136687728
    test 2545 273 273.020181183682 Theta(tan=-18.9534, x=0.052336, y=-0.991944): -19.081136687728
    test 2546 273 273.015116912927 Mu(tan=-18.9853, x=0.0525994, y=-0.998616), iteration=3: -19.081136687728
    test 2547 273 273.020158608531 Chi(tan=-18.9535, x=1.0, y=-18.9535), iteration=2: -19.081136687728
    test 2548 273 273.013436145998 Xi(tan=-18.9959, x=0.105612, y=-2.0062), iteration=2: -19.081136687728

    test 2549 273 273.000000000000 Phi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 2550 273 273.010073740960 Beta(tan=-19.0172, x=0.0525115, y=-0.99862): -19.081136687728
    test 2551 273 273.020181183682 Theta(tan=-18.9534, x=0.0526877, y=-0.998611): -19.081136687728
    test 2552 273 273.015116912927 Mu(tan=-18.9853, x=0.0525994, y=-0.998616): -19.081136687728
    test 2553 273 273.020158608531 Chi(tan=-18.9535, x=0.0526873, y=-0.998611): -19.081136687728
    test 2554 273 273.013436145998 Xi(tan=-18.9959, x=0.0525701, y=-0.998617): -19.081136687728

    test 2555 280 280.000000000000 Phi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 2556 280 280.032958527773 Beta(tan=-5.65227, x=0.173648, y=-0.981506): -5.671281819618
    test 2557 280 280.066021190034 Theta(tan=-5.63332, x=0.173648, y=-0.978215): -5.671281819618
    test 2558 280 280.049457265110 Mu(tan=-5.64279, x=0.174498, y=-0.984657), iteration=3: -5.671281819618
    test 2559 280 280.065949391281 Chi(tan=-5.63336, x=1.0, y=-5.63336), iteration=2: -5.671281819618
    test 2560 280 280.043958856452 Xi(tan=-5.64595, x=0.350374, y=-1.97819), iteration=3: -5.671281819618

    test 2561 280 280.000000000000 Phi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 2562 280 280.032958527773 Beta(tan=-5.65227, x=0.174215, y=-0.984708): -5.671281819618
    test 2563 280 280.066021190034 Theta(tan=-5.63332, x=0.174783, y=-0.984607): -5.671281819618
    test 2564 280 280.049457265110 Mu(tan=-5.64279, x=0.174498, y=-0.984657): -5.671281819618
    test 2565 280 280.065949391281 Chi(tan=-5.63336, x=0.174782, y=-0.984607): -5.671281819618
    test 2566 280 280.043958856452 Xi(tan=-5.64595, x=0.174404, y=-0.984674): -5.671281819618

    test 2567 287 287.000000000000 Phi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 2568 287 287.053876189570 Beta(tan=-3.25989, x=0.292372, y=-0.953098): -3.270852618484
    test 2569 287 287.107902403143 Theta(tan=-3.24896, x=0.292372, y=-0.949903): -3.270852618484
    test 2570 287 287.080842346698 Mu(tan=-3.25442, x=0.293721, y=-0.955891), iteration=3: -3.270852618484
    test 2571 287 287.107791826667 Chi(tan=-3.24898, x=1.0, y=-3.24898), iteration=2: -3.270852618484
    test 2572 287 287.071856267521 Xi(tan=-3.25624, x=0.589778, y=-1.92046), iteration=3: -3.270852618484

    test 2573 287 287.000000000000 Phi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 2574 287 287.053876189570 Beta(tan=-3.25989, x=0.293271, y=-0.956029): -3.270852618484
    test 2575 287 287.107902403143 Theta(tan=-3.24896, x=0.294172, y=-0.955752): -3.270852618484
    test 2576 287 287.080842346698 Mu(tan=-3.25442, x=0.293721, y=-0.955891): -3.270852618484
    test 2577 287 287.107791826667 Chi(tan=-3.24898, x=0.29417, y=-0.955753): -3.270852618484
    test 2578 287 287.071856267521 Xi(tan=-3.25624, x=0.293571, y=-0.955937): -3.270852618484

    test 2579 294 294.000000000000 Phi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 2580 294 294.071580020440 Beta(tan=-2.23851, x=0.406737, y=-0.910483): -2.246036773904
    test 2581 294 294.143320630937 Theta(tan=-2.231, x=0.406737, y=-0.90743): -2.246036773904
    test 2582 294 294.107400080405 Mu(tan=-2.23475, x=0.408448, y=-0.912781), iteration=3: -2.246036773904
    test 2583 294 294.143186728996 Chi(tan=-2.23101, x=1.0, y=-2.23101), iteration=3: -2.246036773904
    test 2584 294 294.095464961355 Xi(tan=-2.236, x=0.820183, y=-1.83393), iteration=3: -2.246036773904

    test 2585 294 294.000000000000 Phi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 2586 294 294.071580020440 Beta(tan=-2.23851, x=0.407878, y=-0.913037): -2.246036773904
    test 2587 294 294.143320630937 Theta(tan=-2.231, x=0.409021, y=-0.912525): -2.246036773904
    test 2588 294 294.107400080405 Mu(tan=-2.23475, x=0.408448, y=-0.912781): -2.246036773904
    test 2589 294 294.143186728996 Chi(tan=-2.23101, x=0.409018, y=-0.912526): -2.246036773904
    test 2590 294 294.095464961355 Xi(tan=-2.236, x=0.408258, y=-0.912866): -2.246036773904

    test 2591 301 301.000000000000 Phi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 2592 301 301.085017327347 Beta(tan=-1.6587, x=0.515038, y=-0.854293): -1.664279482351
    test 2593 301 301.170168056505 Theta(tan=-1.65314, x=0.515038, y=-0.851429): -1.664279482351
    test 2594 301 301.127550963364 Mu(tan=-1.65592, x=0.516945, y=-0.856019), iteration=3: -1.664279482351
    test 2595 301 301.170028258270 Chi(tan=-1.65315, x=1.0, y=-1.65315), iteration=3: -1.664279482351
    test 2596 301 301.113380969671 Xi(tan=-1.65684, x=1.03811, y=-1.71998), iteration=3: -1.664279482351

    test 2597 301 301.000000000000 Phi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 2598 301 301.085017327347 Beta(tan=-1.6587, x=0.516309, y=-0.856402): -1.664279482351
    test 2599 301 301.170168056505 Theta(tan=-1.65314, x=0.517582, y=-0.855634): -1.664279482351
    test 2600 301 301.127550963364 Mu(tan=-1.65592, x=0.516945, y=-0.856019): -1.664279482351
    test 2601 301 301.170028258270 Chi(tan=-1.65315, x=0.517579, y=-0.855635): -1.664279482351
    test 2602 301 301.113380969671 Xi(tan=-1.65684, x=0.516733, y=-0.856146): -1.664279482351

    test 2603 308 308.000000000000 Phi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 2604 308 308.093392183249 Beta(tan=-1.27565, x=0.615661, y=-0.785369): -1.279941632193
    test 2605 308 308.186859283180 Theta(tan=-1.27137, x=0.615661, y=-0.782736): -1.279941632193
    test 2606 308 308.140102302012 Mu(tan=-1.27351, x=0.617587, y=-0.786503), iteration=2: -1.279941632193
    test 2607 308 308.186729722475 Chi(tan=-1.27138, x=1.0, y=-1.27138), iteration=3: -1.279941632193
    test 2608 308 308.124543504213 Xi(tan=-1.27422, x=1.24029, y=-1.58041), iteration=2: -1.279941632193

    test 2609 308 308.000000000000 Phi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 2610 308 308.093392183249 Beta(tan=-1.27565, x=0.616945, y=-0.787006): -1.279941632193
    test 2611 308 308.186859283180 Theta(tan=-1.27137, x=0.618228, y=-0.785999): -1.279941632193
    test 2612 308 308.140102302012 Mu(tan=-1.27351, x=0.617587, y=-0.786503): -1.279941632193
    test 2613 308 308.186729722475 Chi(tan=-1.27138, x=0.618226, y=-0.786): -1.279941632193
    test 2614 308 308.124543504213 Xi(tan=-1.27422, x=0.617373, y=-0.786671): -1.279941632193

    test 2615 315 315.000000000000 Phi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 2616 315 315.096212150580 Beta(tan=-0.996647, x=0.707107, y=-0.704736): -1.000000000000
    test 2617 315 315.192423215982 Theta(tan=-0.993306, x=0.707107, y=-0.702373): -1.000000000000
    test 2618 315 315.144318011093 Mu(tan=-0.994975, x=0.708886, y=-0.705323), iteration=2: -1.000000000000
    test 2619 315 315.192315943911 Chi(tan=-0.993309, x=1.0, y=-0.993309), iteration=3: -1.000000000000
    test 2620 315 315.128297126566 Xi(tan=-0.995532, x=1.42374, y=-1.41738), iteration=3: -1.000000000000

    test 2621 315 315.000000000000 Phi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 2622 315 315.096212150580 Beta(tan=-0.996647, x=0.708293, y=-0.705918): -1.000000000000
    test 2623 315 315.192423215982 Theta(tan=-0.993306, x=0.709478, y=-0.704728): -1.000000000000
    test 2624 315 315.144318011093 Mu(tan=-0.994975, x=0.708886, y=-0.705323): -1.000000000000
    test 2625 315 315.192315943911 Chi(tan=-0.993309, x=0.709476, y=-0.704729): -1.000000000000
    test 2626 315 315.128297126566 Xi(tan=-0.995532, x=0.708688, y=-0.705522): -1.000000000000

    test 2627 322 322.000000000000 Phi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 2628 322 322.093316334881 Beta(tan=-0.778666, x=0.788011, y=-0.613597): -0.781285626507
    test 2629 322 322.186555893687 Theta(tan=-0.776055, x=0.788011, y=-0.61154): -0.781285626507
    test 2630 322 322.139960086634 Mu(tan=-0.777359, x=0.789512, y=-0.613735), iteration=3: -0.781285626507
    test 2631 322 322.186477167765 Chi(tan=-0.776058, x=1.0, y=-0.776058), iteration=3: -0.781285626507
    test 2632 322 322.124428869604 Xi(tan=-0.777794, x=1.58578, y=-1.23341), iteration=2: -0.781285626507

    test 2633 322 322.000000000000 Phi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 2634 322 322.093316334881 Beta(tan=-0.778666, x=0.789012, y=-0.614377): -0.781285626507
    test 2635 322 322.186555893687 Theta(tan=-0.776055, x=0.790011, y=-0.613092): -0.781285626507
    test 2636 322 322.139960086634 Mu(tan=-0.777359, x=0.789512, y=-0.613735): -0.781285626507
    test 2637 322 322.186477167765 Chi(tan=-0.776058, x=0.79001, y=-0.613094): -0.781285626507
    test 2638 322 322.124428869604 Xi(tan=-0.777794, x=0.789346, y=-0.613949): -0.781285626507

    test 2639 329 329.000000000000 Phi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 2640 329 329.084883386958 Beta(tan=-0.598846, x=0.857167, y=-0.513311): -0.600860619028
    test 2641 329 329.169632300503 Theta(tan=-0.596838, x=0.857167, y=-0.51159): -0.600860619028
    test 2642 329 329.127299825611 Mu(tan=-0.597841, x=0.858309, y=-0.513132), iteration=2: -0.600860619028
    test 2643 329 329.169582272165 Chi(tan=-0.596839, x=1.0, y=-0.596839), iteration=3: -0.600860619028
    test 2644 329 329.113178536759 Xi(tan=-0.598175, x=1.72407, y=-1.0313), iteration=3: -0.600860619028

    test 2645 329 329.000000000000 Phi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 2646 329 329.084883386958 Beta(tan=-0.598846, x=0.857929, y=-0.513768): -0.600860619028
    test 2647 329 329.169632300503 Theta(tan=-0.596838, x=0.858688, y=-0.512498): -0.600860619028
    test 2648 329 329.127299825611 Mu(tan=-0.597841, x=0.858309, y=-0.513132): -0.600860619028
    test 2649 329 329.169582272165 Chi(tan=-0.596839, x=0.858688, y=-0.512499): -0.600860619028
    test 2650 329 329.113178536759 Xi(tan=-0.598175, x=0.858183, y=-0.513344): -0.600860619028

    test 2651 336 336.000000000000 Phi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2652 336 336.071419343981 Beta(tan=-0.443736, x=0.913545, y=-0.405373): -0.445228685309
    test 2653 336 336.142677929298 Theta(tan=-0.442248, x=0.913545, y=-0.404014): -0.445228685309
    test 2654 336 336.107098812499 Mu(tan=-0.442991, x=0.914304, y=-0.405028), iteration=3: -0.445228685309
    test 2655 336 336.142651717918 Chi(tan=-0.442249, x=1.0, y=-0.442249), iteration=3: -0.445228685309
    test 2656 336 336.095222120427 Xi(tan=-0.443239, x=1.83665, y=-0.814074), iteration=3: -0.445228685309

    test 2657 336 336.000000000000 Phi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 2658 336 336.071419343981 Beta(tan=-0.443736, x=0.914052, y=-0.405598): -0.445228685309
    test 2659 336 336.142677929298 Theta(tan=-0.442248, x=0.914555, y=-0.40446): -0.445228685309
    test 2660 336 336.107098812499 Mu(tan=-0.442991, x=0.914304, y=-0.405028): -0.445228685309
    test 2661 336 336.142651717918 Chi(tan=-0.442249, x=0.914555, y=-0.404461): -0.445228685309
    test 2662 336 336.095222120427 Xi(tan=-0.443239, x=0.91422, y=-0.405218): -0.445228685309

    test 2663 343 343.000000000000 Phi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 2664 343 343.053726392145 Beta(tan=-0.304706, x=0.956305, y=-0.291391): -0.305730681459
    test 2665 343 343.107303214923 Theta(tan=-0.303684, x=0.956305, y=-0.290414): -0.305730681459
    test 2666 343 343.080561476830 Mu(tan=-0.304194, x=0.956715, y=-0.291027), iteration=2: -0.305730681459
    test 2667 343 343.107293039045 Chi(tan=-0.303684, x=1.0, y=-0.303684), iteration=2: -0.305730681459
    test 2668 343 343.071629868756 Xi(tan=-0.304364, x=1.92193, y=-0.584967), iteration=2: -0.305730681459

    test 2669 343 343.000000000000 Phi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 2670 343 343.053726392145 Beta(tan=-0.304706, x=0.956578, y=-0.291475): -0.305730681459
    test 2671 343 343.107303214923 Theta(tan=-0.303684, x=0.956851, y=-0.29058): -0.305730681459
    test 2672 343 343.080561476830 Mu(tan=-0.304194, x=0.956715, y=-0.291027): -0.305730681459
    test 2673 343 343.107293039045 Chi(tan=-0.303684, x=0.956851, y=-0.29058): -0.305730681459
    test 2674 343 343.071629868756 Xi(tan=-0.304364, x=0.95667, y=-0.291176): -0.305730681459

    test 2675 350 350.000000000000 Phi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 2676 350 350.032854677782 Beta(tan=-0.175736, x=0.984808, y=-0.173066): -0.176326980708
    test 2677 350 350.065605789721 Theta(tan=-0.175147, x=0.984808, y=-0.172486): -0.176326980708
    test 2678 350 350.049262546520 Mu(tan=-0.175441, x=0.984957, y=-0.172801), iteration=3: -0.176326980708
    test 2679 350 350.065603596501 Chi(tan=-0.175147, x=1.0, y=-0.175147), iteration=2: -0.176326980708
    test 2680 350 350.043801901064 Xi(tan=-0.175539, x=1.97873, y=-0.347343), iteration=3: -0.176326980708

    test 2681 350 350.000000000000 Phi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 2682 350 350.032854677782 Beta(tan=-0.175736, x=0.984907, y=-0.173083): -0.176326980708
    test 2683 350 350.065605789721 Theta(tan=-0.175147, x=0.985006, y=-0.17252): -0.176326980708
    test 2684 350 350.049262546520 Mu(tan=-0.175441, x=0.984957, y=-0.172801): -0.176326980708
    test 2685 350 350.065603596501 Chi(tan=-0.175147, x=0.985006, y=-0.17252): -0.176326980708
    test 2686 350 350.043801901064 Xi(tan=-0.175539, x=0.98494, y=-0.172895): -0.176326980708

    test 2687 357 357.000000000000 Phi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2688 357 357.010040150331 Beta(tan=-0.0522321, x=0.99863, y=-0.0521605): -0.052407779283
    test 2689 357 357.020046820811 Theta(tan=-0.0520569, x=0.99863, y=-0.0519856): -0.052407779283
    test 2690 357 357.015053930532 Mu(tan=-0.0521443, x=0.998643, y=-0.0520736), iteration=3: -0.052407779283
    test 2691 357 357.020046759956 Chi(tan=-0.0520569, x=1.0, y=-0.0520569), iteration=3: -0.052407779283
    test 2692 357 357.013385378246 Xi(tan=-0.0521735, x=2.00625, y=-0.104673), iteration=3: -0.052407779283

    test 2693 357 357.000000000000 Phi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 2694 357 357.010040150331 Beta(tan=-0.0522321, x=0.998639, y=-0.052161): -0.052407779283
    test 2695 357 357.020046820811 Theta(tan=-0.0520569, x=0.998648, y=-0.0519865): -0.052407779283
    test 2696 357 357.015053930532 Mu(tan=-0.0521443, x=0.998643, y=-0.0520736): -0.052407779283
    test 2697 357 357.020046759956 Chi(tan=-0.0520569, x=0.998648, y=-0.0519866): -0.052407779283
    test 2698 357 357.013385378246 Xi(tan=-0.0521735, x=0.998642, y=-0.0521027): -0.052407779283

    test 2699  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2700  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2701  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2702  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2703  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2704  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 2705  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2706  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2707  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2708  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2709  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 2710  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 2711  7 7.046703746044 Phi(tan=0.123612, x=0.992546, y=0.122691): 0.122784560903
    test 2712  7 7.023313832609 Beta(tan=0.123198, x=0.992546, y=0.122279): 0.122784560903
    test 2713  7 7.000000000000 Theta(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 2714  7 7.011633179954 Mu(tan=0.122991, x=0.992521, y=0.122071), iteration=3: 0.122784560903
    test 2715  7 7.000000779127 Chi(tan=0.122785, x=1.0, y=0.122785), iteration=2: 0.122784560903
    test 2716  7 7.015520491938 Xi(tan=0.12306, x=1.99394, y=0.245373), iteration=2: 0.122784560903

    test 2717  7 7.046703746044 Phi(tan=0.123612, x=0.992446, y=0.122678): 0.122784560903
    test 2718  7 7.023313832609 Beta(tan=0.123198, x=0.992496, y=0.122273): 0.122784560903
    test 2719  7 7.000000000000 Theta(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 2720  7 7.011633179954 Mu(tan=0.122991, x=0.992521, y=0.122071): 0.122784560903
    test 2721  7 7.000000779127 Chi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903
    test 2722  7 7.015520491938 Xi(tan=0.12306, x=0.992513, y=0.122138): 0.122784560903

    test 2723 14 14.090606168436 Phi(tan=0.251008, x=0.970296, y=0.243552): 0.249328002843
    test 2724 14 14.045235971490 Beta(tan=0.250167, x=0.970296, y=0.242736): 0.249328002843
    test 2725 14 14.000000000000 Theta(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 2726 14 14.022576103630 Mu(tan=0.249747, x=0.9702, y=0.242304), iteration=3: 0.249328002843
    test 2727 14 14.000005955939 Chi(tan=0.249328, x=1.0, y=0.249328), iteration=2: 0.249328002843
    test 2728 14 14.030117773793 Xi(tan=0.249886, x=1.94905, y=0.487041), iteration=3: 0.249328002843

    test 2729 14 14.090606168436 Phi(tan=0.251008, x=0.969912, y=0.243456): 0.249328002843
    test 2730 14 14.045235971490 Beta(tan=0.250167, x=0.970104, y=0.242688): 0.249328002843
    test 2731 14 14.000000000000 Theta(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 2732 14 14.022576103630 Mu(tan=0.249747, x=0.9702, y=0.242304): 0.249328002843
    test 2733 14 14.000005955939 Chi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843
    test 2734 14 14.030117773793 Xi(tan=0.249886, x=0.970168, y=0.242432): 0.249328002843

    test 2735 21 21.129078684131 Phi(tan=0.386451, x=0.93358, y=0.360783): 0.383864035035
    test 2736 21 21.064458966605 Beta(tan=0.385155, x=0.93358, y=0.359574): 0.383864035035
    test 2737 21 21.000000000000 Theta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 2738 21 21.032179314629 Mu(tan=0.384509, x=0.933379, y=0.358892), iteration=2: 0.383864035035
    test 2739 21 21.000018617196 Chi(tan=0.383864, x=1.0, y=0.383864), iteration=3: 0.383864035035
    test 2740 21 21.042923749309 Xi(tan=0.384724, x=1.875, y=0.721359), iteration=3: 0.383864035035

    test 2741 21 21.129078684131 Phi(tan=0.386451, x=0.932771, y=0.36047): 0.383864035035
    test 2742 21 21.064458966605 Beta(tan=0.385155, x=0.933177, y=0.359418): 0.383864035035
    test 2743 21 21.000000000000 Theta(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 2744 21 21.032179314629 Mu(tan=0.384509, x=0.933379, y=0.358892): 0.383864035035
    test 2745 21 21.000018617196 Chi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035
    test 2746 21 21.042923749309 Xi(tan=0.384724, x=0.933312, y=0.359067): 0.383864035035

    test 2747 28 28.159826417635 Phi(tan=0.535293, x=0.882948, y=0.472636): 0.531709431661
    test 2748 28 28.079838480095 Beta(tan=0.533498, x=0.882948, y=0.471051): 0.531709431661
    test 2749 28 28.000000000000 Theta(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 2750 28 28.039872584755 Mu(tan=0.532602, x=0.882621, y=0.470086), iteration=2: 0.531709431661
    test 2751 28 28.000039556231 Chi(tan=0.53171, x=1.0, y=0.53171), iteration=3: 0.531709431661
    test 2752 28 28.053177215354 Xi(tan=0.532901, x=1.77295, y=0.944805), iteration=3: 0.531709431661

    test 2753 28 28.159826417635 Phi(tan=0.535293, x=0.881635, y=0.471933): 0.531709431661
    test 2754 28 28.079838480095 Beta(tan=0.533498, x=0.882293, y=0.470701): 0.531709431661
    test 2755 28 28.000000000000 Theta(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661
    test 2756 28 28.039872584755 Mu(tan=0.532602, x=0.882621, y=0.470086): 0.531709431661
    test 2757 28 28.000039556231 Chi(tan=0.53171, x=0.882947, y=0.469472): 0.531709431661
    test 2758 28 28.053177215354 Xi(tan=0.532901, x=0.882511, y=0.470291): 0.531709431661

    test 2759 35 35.181026690786 Phi(tan=0.704927, x=0.819152, y=0.577442): 0.700207538210
    test 2760 35 35.090461812463 Beta(tan=0.702563, x=0.819152, y=0.575506): 0.700207538210
    test 2761 35 35.000000000000 Theta(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 2762 35 35.045198725900 Mu(tan=0.701384, x=0.818699, y=0.574222), iteration=3: 0.700207538210
    test 2763 35 35.000066866642 Chi(tan=0.700209, x=1.0, y=0.700209), iteration=2: 0.700207538210
    test 2764 35 35.060269183174 Xi(tan=0.701776, x=1.64445, y=1.15403), iteration=3: 0.700207538210

    test 2765 35 35.181026690786 Phi(tan=0.704927, x=0.817336, y=0.576162): 0.700207538210
    test 2766 35 35.090461812463 Beta(tan=0.702563, x=0.818245, y=0.574869): 0.700207538210
    test 2767 35 35.000000000000 Theta(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210
    test 2768 35 35.045198725900 Mu(tan=0.701384, x=0.818699, y=0.574222): 0.700207538210
    test 2769 35 35.000066866642 Chi(tan=0.700209, x=0.819151, y=0.573577): 0.700207538210
    test 2770 35 35.060269183174 Xi(tan=0.701776, x=0.818548, y=0.574438): 0.700207538210

    test 2771 42 42.191436312869 Phi(tan=0.906472, x=0.743145, y=0.67364): 0.900404044298
    test 2772 42 42.095701889505 Beta(tan=0.903433, x=0.743145, y=0.671382): 0.900404044298
    test 2773 42 42.000000000000 Theta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 2774 42 42.047840790779 Mu(tan=0.901917, x=0.742586, y=0.669751), iteration=3: 0.900404044298
    test 2775 42 42.000096219009 Chi(tan=0.900407, x=1.0, y=0.900407), iteration=2: 0.900404044298
    test 2776 42 42.063779025222 Xi(tan=0.902422, x=1.49147, y=1.34593), iteration=2: 0.900404044298

    test 2777 42 42.191436312869 Phi(tan=0.906472, x=0.740905, y=0.67161): 0.900404044298
    test 2778 42 42.095701889505 Beta(tan=0.903433, x=0.742026, y=0.670371): 0.900404044298
    test 2779 42 42.000000000000 Theta(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298
    test 2780 42 42.047840790779 Mu(tan=0.901917, x=0.742586, y=0.669751): 0.900404044298
    test 2781 42 42.000096219009 Chi(tan=0.900407, x=0.743144, y=0.669132): 0.900404044298
    test 2782 42 42.063779025222 Xi(tan=0.902422, x=0.7424, y=0.669957): 0.900404044298

    test 2783 49 49.190461558643 Phi(tan=1.15812, x=0.656059, y=0.759796): 1.150368407221
    test 2784 49 49.095253561343 Beta(tan=1.15424, x=0.656059, y=0.757248): 1.150368407221
    test 2785 49 49.000000000000 Theta(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 2786 49 49.047641033804 Mu(tan=1.1523, x=0.655431, y=0.755255), iteration=2: 1.150368407221
    test 2787 49 49.000121761599 Chi(tan=1.15037, x=1.0, y=1.15037), iteration=3: 1.150368407221
    test 2788 49 49.063499305647 Xi(tan=1.15295, x=1.31633, y=1.51766), iteration=3: 1.150368407221

    test 2789 49 49.190461558643 Phi(tan=1.15812, x=0.653547, y=0.756886): 1.150368407221
    test 2790 49 49.095253561343 Beta(tan=1.15424, x=0.654803, y=0.755799): 1.150368407221
    test 2791 49 49.000000000000 Theta(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221
    test 2792 49 49.047641033804 Mu(tan=1.1523, x=0.655431, y=0.755255): 1.150368407221
    test 2793 49 49.000121761599 Chi(tan=1.15037, x=0.656057, y=0.754711): 1.150368407221
    test 2794 49 49.063499305647 Xi(tan=1.15295, x=0.655222, y=0.755436): 1.150368407221

    test 2795 56 56.178187618527 Phi(tan=1.49255, x=0.559193, y=0.834625): 1.482560968513
    test 2796 56 56.089150284766 Beta(tan=1.48755, x=0.559193, y=0.831827): 1.482560968513
    test 2797 56 56.000000000000 Theta(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 2798 56 56.044610470922 Mu(tan=1.48505, x=0.558547, y=0.829473), iteration=2: 1.482560968513
    test 2799 56 56.000137435853 Chi(tan=1.48257, x=1.0, y=1.48257), iteration=3: 1.482560968513
    test 2800 56 56.059447854026 Xi(tan=1.48588, x=1.12168, y=1.66668), iteration=2: 1.482560968513

    test 2801 56 56.178187618527 Phi(tan=1.49255, x=0.556612, y=0.830773): 1.482560968513
    test 2802 56 56.089150284766 Beta(tan=1.48755, x=0.557902, y=0.829907): 1.482560968513
    test 2803 56 56.000000000000 Theta(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513
    test 2804 56 56.044610470922 Mu(tan=1.48505, x=0.558547, y=0.829473): 1.482560968513
    test 2805 56 56.000137435853 Chi(tan=1.48257, x=0.559191, y=0.829039): 1.482560968513
    test 2806 56 56.059447854026 Xi(tan=1.48588, x=0.558332, y=0.829617): 1.482560968513

    test 2807 63 63.155367155141 Phi(tan=1.97584, x=0.45399, y=0.897011): 1.962610505505
    test 2808 63 63.077760538972 Beta(tan=1.96921, x=0.45399, y=0.894004): 1.962610505505
    test 2809 63 63.000000000000 Theta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 2810 63 63.038928423958 Mu(tan=1.96591, x=0.453385, y=0.891315), iteration=2: 1.962610505505
    test 2811 63 63.000138398794 Chi(tan=1.96262, x=1.0, y=1.96262), iteration=3: 1.962610505505
    test 2812 63 63.051866422105 Xi(tan=1.96701, x=0.910437, y=1.79084), iteration=3: 1.962610505505

    test 2813 63 63.155367155141 Phi(tan=1.97584, x=0.451573, y=0.892234): 1.962610505505
    test 2814 63 63.077760538972 Beta(tan=1.96921, x=0.452781, y=0.891622): 1.962610505505
    test 2815 63 63.000000000000 Theta(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505
    test 2816 63 63.038928423958 Mu(tan=1.96591, x=0.453385, y=0.891315): 1.962610505505
    test 2817 63 63.000138398794 Chi(tan=1.96262, x=0.453988, y=0.891008): 1.962610505505
    test 2818 63 63.051866422105 Xi(tan=1.96701, x=0.453184, y=0.891417): 1.962610505505

    test 2819 70 70.123370137625 Phi(tan=2.76599, x=0.34202, y=0.946026): 2.747477419455
    test 2820 70 70.061764561164 Beta(tan=2.75672, x=0.34202, y=0.942854): 2.747477419455
    test 2821 70 70.000000000000 Theta(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 2822 70 70.030932030288 Mu(tan=2.7521, x=0.341513, y=0.939877), iteration=3: 2.747477419455
    test 2823 70 70.000122219482 Chi(tan=2.7475, x=1.0, y=2.7475), iteration=3: 2.747477419455
    test 2824 70 70.041206070039 Xi(tan=2.75364, x=0.685754, y=1.88832), iteration=2: 2.747477419455

    test 2825 70 70.123370137625 Phi(tan=2.76599, x=0.339996, y=0.940427): 2.747477419455
    test 2826 70 70.061764561164 Beta(tan=2.75672, x=0.341007, y=0.940061): 2.747477419455
    test 2827 70 70.000000000000 Theta(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455
    test 2828 70 70.030932030288 Mu(tan=2.7521, x=0.341513, y=0.939877): 2.747477419455
    test 2829 70 70.000122219482 Chi(tan=2.7475, x=0.342018, y=0.939693): 2.747477419455
    test 2830 70 70.041206070039 Xi(tan=2.75364, x=0.341344, y=0.939938): 2.747477419455

    test 2831 77 77.084099185826 Phi(tan=4.36067, x=0.224951, y=0.980937): 4.331475874284
    test 2832 77 77.042113102652 Beta(tan=4.34605, x=0.224951, y=0.977648): 4.331475874284
    test 2833 77 77.000000000000 Theta(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 2834 77 77.021096305787 Mu(tan=4.33876, x=0.224592, y=0.974453), iteration=3: 4.331475874284
    test 2835 77 77.000089569308 Chi(tan=4.33151, x=1.0, y=4.33151), iteration=2: 4.331475874284
    test 2836 77 77.028100210930 Xi(tan=4.34119, x=0.450962, y=1.95771), iteration=3: 4.331475874284

    test 2837 77 77.084099185826 Phi(tan=4.36067, x=0.223521, y=0.974699): 4.331475874284
    test 2838 77 77.042113102652 Beta(tan=4.34605, x=0.224235, y=0.974535): 4.331475874284
    test 2839 77 77.000000000000 Theta(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284
    test 2840 77 77.021096305787 Mu(tan=4.33876, x=0.224592, y=0.974453): 4.331475874284
    test 2841 77 77.000089569308 Chi(tan=4.33151, x=0.22495, y=0.97437): 4.331475874284
    test 2842 77 77.028100210930 Xi(tan=4.34119, x=0.224473, y=0.97448): 4.331475874284

    test 2843 84 84.039876185217 Phi(tan=9.57849, x=0.104528, y=1.00122): 9.514364454223
    test 2844 84 84.019970846274 Beta(tan=9.54637, x=0.104528, y=0.997868): 9.514364454223
    test 2845 84 84.000000000000 Theta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 2846 84 84.010005927895 Mu(tan=9.53037, x=0.104355, y=0.99454), iteration=3: 9.514364454223
    test 2847 84 84.000044242373 Chi(tan=9.51444, x=1.0, y=9.51444), iteration=2: 9.514364454223
    test 2848 84 84.013326954497 Xi(tan=9.5357, x=0.209531, y=1.99802), iteration=3: 9.514364454223

    test 2849 84 84.039876185217 Phi(tan=9.57849, x=0.103836, y=0.994594): 9.514364454223
    test 2850 84 84.019970846274 Beta(tan=9.54637, x=0.104182, y=0.994558): 9.514364454223
    test 2851 84 84.000000000000 Theta(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223
    test 2852 84 84.010005927895 Mu(tan=9.53037, x=0.104355, y=0.99454): 9.514364454223
    test 2853 84 84.000044242373 Chi(tan=9.51444, x=0.104528, y=0.994522): 9.514364454223
    test 2854 84 84.013326954497 Xi(tan=9.5357, x=0.104297, y=0.994546): 9.514364454223

    test 2855 91 90.993306965793 Phi(tan=-57.6761, x=-0.0174524, y=1.00659): -57.289961630759
    test 2856 91 90.996647866757 Beta(tan=-57.4827, x=-0.0174524, y=1.00321): -57.289961630759
    test 2857 91 91.000000000000 Theta(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 2858 91 90.998320417403 Mu(tan=-57.3864, x=-0.0174231, y=0.999848), iteration=3: -57.289961630759
    test 2859 91 90.999992494484 Chi(tan=-57.2904, x=-1, y=57.2904), iteration=3: -57.289961630759
    test 2860 91 90.997762994841 Xi(tan=-57.4184, x=-0.0349831, y=2.00868), iteration=3: -57.289961630759

    test 2861 91 90.993306965793 Phi(tan=-57.6761, x=-0.0173356, y=0.99985): -57.289961630759
    test 2862 91 90.996647866757 Beta(tan=-57.4827, x=-0.0173939, y=0.999849): -57.289961630759
    test 2863 91 91.000000000000 Theta(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759
    test 2864 91 90.998320417403 Mu(tan=-57.3864, x=-0.0174231, y=0.999848): -57.289961630759
    test 2865 91 90.999992494484 Chi(tan=-57.2904, x=-0.0174523, y=0.999848): -57.289961630759
    test 2866 91 90.997762994841 Xi(tan=-57.4184, x=-0.0174134, y=0.999848): -57.289961630759

    test 2867 98 97.947131466338 Phi(tan=-7.16332, x=-0.139173, y=0.996942): -7.115369722384
    test 2868 98 97.973523052479 Beta(tan=-7.13931, x=-0.139173, y=0.993599): -7.115369722384
    test 2869 98 98.000000000000 Theta(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 2870 98 97.986734807520 Mu(tan=-7.12734, x=-0.138944, y=0.9903), iteration=3: -7.115369722384
    test 2871 98 97.999941842742 Chi(tan=-7.11542, x=-1, y=7.11542), iteration=3: -7.115369722384
    test 2872 98 97.982331755375 Xi(tan=-7.13133, x=-0.278982, y=1.98951), iteration=3: -7.115369722384

    test 2873 98 97.947131466338 Phi(tan=-7.16332, x=-0.138259, y=0.990396): -7.115369722384
    test 2874 98 97.973523052479 Beta(tan=-7.13931, x=-0.138715, y=0.990332): -7.115369722384
    test 2875 98 98.000000000000 Theta(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384
    test 2876 98 97.986734807520 Mu(tan=-7.12734, x=-0.138944, y=0.9903): -7.115369722384
    test 2877 98 97.999941842742 Chi(tan=-7.11542, x=-0.139172, y=0.990268): -7.115369722384
    test 2878 98 97.982331755375 Xi(tan=-7.13133, x=-0.138868, y=0.990311): -7.115369722384

    test 2879 105 104.904067139653 Phi(tan=-3.7572, x=-0.258819, y=0.972436): -3.732050807569
    test 2880 105 104.951963747366 Beta(tan=-3.74461, x=-0.258819, y=0.969175): -3.732050807569
    test 2881 105 105.000000000000 Theta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 2882 105 104.975938169742 Mu(tan=-3.73833, x=-0.258413, y=0.966034), iteration=3: -3.732050807569
    test 2883 105 104.999899588330 Chi(tan=-3.73208, x=-1, y=3.73208), iteration=3: -3.732050807569
    test 2884 105 104.967948816895 Xi(tan=-3.74042, x=-0.518877, y=1.94082), iteration=2: -3.732050807569

    test 2885 105 104.904067139653 Phi(tan=-3.7572, x=-0.257201, y=0.966358): -3.732050807569
    test 2886 105 104.951963747366 Beta(tan=-3.74461, x=-0.258009, y=0.966142): -3.732050807569
    test 2887 105 105.000000000000 Theta(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569
    test 2888 105 104.975938169742 Mu(tan=-3.73833, x=-0.258413, y=0.966034): -3.732050807569
    test 2889 105 104.999899588330 Chi(tan=-3.73208, x=-0.258817, y=0.965926): -3.732050807569
    test 2890 105 104.967948816895 Xi(tan=-3.74042, x=-0.258279, y=0.96607): -3.732050807569

    test 2891 112 111.866653486751 Phi(tan=-2.49177, x=-0.374607, y=0.933433): -2.475086853416
    test 2892 112 111.933246025813 Beta(tan=-2.48341, x=-0.374607, y=0.930303): -2.475086853416
    test 2893 112 112.000000000000 Theta(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 2894 112 111.966572499608 Mu(tan=-2.47925, x=-0.374066, y=0.927402), iteration=3: -2.475086853416
    test 2895 112 111.999871386688 Chi(tan=-2.4751, x=-1, y=2.4751), iteration=3: -2.475086853416
    test 2896 112 111.955467801390 Xi(tan=-2.48064, x=-0.751129, y=1.86328), iteration=2: -2.475086853416

    test 2897 112 111.866653486751 Phi(tan=-2.49177, x=-0.372448, y=0.928053): -2.475086853416
    test 2898 112 111.933246025813 Beta(tan=-2.48341, x=-0.373526, y=0.92762): -2.475086853416
    test 2899 112 112.000000000000 Theta(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416
    test 2900 112 111.966572499608 Mu(tan=-2.47925, x=-0.374066, y=0.927402): -2.475086853416
    test 2901 112 111.999871386688 Chi(tan=-2.4751, x=-0.374605, y=0.927185): -2.475086853416
    test 2902 112 111.955467801390 Xi(tan=-2.48064, x=-0.373886, y=0.927475): -2.475086853416

    test 2903 119 118.837105586950 Phi(tan=-1.81621, x=-0.48481, y=0.880514): -1.804047755271
    test 2904 119 118.918479987923 Beta(tan=-1.81012, x=-0.48481, y=0.877562): -1.804047755271
    test 2905 119 119.000000000000 Theta(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 2906 119 118.959194442963 Mu(tan=-1.80708, x=-0.484187, y=0.874965), iteration=3: -1.804047755271
    test 2907 119 118.999860178783 Chi(tan=-1.80406, x=-1, y=1.80406), iteration=3: -1.804047755271
    test 2908 119 118.945629859635 Xi(tan=-1.80809, x=-0.972305, y=1.75802), iteration=3: -1.804047755271

    test 2909 119 118.837105586950 Phi(tan=-1.81621, x=-0.482321, y=0.875995): -1.804047755271
    test 2910 119 118.918479987923 Beta(tan=-1.81012, x=-0.483565, y=0.875309): -1.804047755271
    test 2911 119 119.000000000000 Theta(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271
    test 2912 119 118.959194442963 Mu(tan=-1.80708, x=-0.484187, y=0.874965): -1.804047755271
    test 2913 119 118.999860178783 Chi(tan=-1.80406, x=-0.484807, y=0.874621): -1.804047755271
    test 2914 119 118.945629859635 Xi(tan=-1.80809, x=-0.483979, y=0.875079): -1.804047755271

    test 2915 126 125.817184307945 Phi(tan=-1.38566, x=-0.587785, y=0.814469): -1.376381920471
    test 2916 126 125.908544256035 Beta(tan=-1.38101, x=-0.587785, y=0.811739): -1.376381920471
    test 2917 126 126.000000000000 Theta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2918 126 125.954242166425 Mu(tan=-1.3787, x=-0.587139, y=0.809486), iteration=2: -1.376381920471
    test 2919 126 125.999865716658 Chi(tan=-1.37639, x=-1, y=1.37639), iteration=3: -1.376381920471
    test 2920 126 125.939019715793 Xi(tan=-1.37947, x=-1.17912, y=1.62655), iteration=2: -1.376381920471

    test 2921 126 125.817184307945 Phi(tan=-1.38566, x=-0.585201, y=0.810888): -1.376381920471
    test 2922 126 125.908544256035 Beta(tan=-1.38101, x=-0.586493, y=0.809954): -1.376381920471
    test 2923 126 126.000000000000 Theta(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471
    test 2924 126 125.954242166425 Mu(tan=-1.3787, x=-0.587139, y=0.809486): -1.376381920471
    test 2925 126 125.999865716658 Chi(tan=-1.37639, x=-0.587783, y=0.809018): -1.376381920471
    test 2926 126 125.939019715793 Xi(tan=-1.37947, x=-0.586924, y=0.809642): -1.376381920471

    test 2927 133 132.808090472544 Phi(tan=-1.0796, x=-0.681998, y=0.736283): -1.072368710025
    test 2928 133 132.904033458108 Beta(tan=-1.07598, x=-0.681998, y=0.733814): -1.072368710025
    test 2929 133 133.000000000000 Theta(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 2930 133 132.952009355583 Mu(tan=-1.07417, x=-0.681386, y=0.731925), iteration=3: -1.072368710025
    test 2931 133 132.999884783382 Chi(tan=-1.07237, x=-1, y=1.07237), iteration=2: -1.072368710025
    test 2932 133 132.936030863456 Xi(tan=-1.07477, x=-1.36848, y=1.4708), iteration=3: -1.072368710025

    test 2933 133 132.808090472544 Phi(tan=-1.0796, x=-0.679545, y=0.733634): -1.072368710025
    test 2934 133 132.904033458108 Beta(tan=-1.07598, x=-0.680772, y=0.732495): -1.072368710025
    test 2935 133 133.000000000000 Theta(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025
    test 2936 133 132.952009355583 Mu(tan=-1.07417, x=-0.681386, y=0.731925): -1.072368710025
    test 2937 133 132.999884783382 Chi(tan=-1.07237, x=-0.681997, y=0.731355): -1.072368710025
    test 2938 133 132.936030863456 Xi(tan=-1.07477, x=-0.681181, y=0.732115): -1.072368710025

    test 2939 140 139.810389526291 Phi(tan=-0.844755, x=-0.766044, y=0.64712): -0.839099631177
    test 2940 140 139.905221888853 Beta(tan=-0.841922, x=-0.766044, y=0.64495): -0.839099631177
    test 2941 140 140.000000000000 Theta(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 2942 140 139.952627882329 Mu(tan=-0.84051, x=-0.765513, y=0.643421), iteration=3: -0.839099631177
    test 2943 140 139.999912050710 Chi(tan=-0.839102, x=-1, y=0.839102), iteration=3: -0.839099631177
    test 2944 140 139.936841998365 Xi(tan=-0.84098, x=-1.53754, y=1.29304), iteration=2: -0.839099631177

    test 2945 140 139.810389526291 Phi(tan=-0.844755, x=-0.763913, y=0.645319): -0.839099631177
    test 2946 140 139.905221888853 Beta(tan=-0.841922, x=-0.76498, y=0.644054): -0.839099631177
    test 2947 140 140.000000000000 Theta(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177
    test 2948 140 139.952627882329 Mu(tan=-0.84051, x=-0.765513, y=0.643421): -0.839099631177
    test 2949 140 139.999912050710 Chi(tan=-0.839102, x=-0.766043, y=0.642789): -0.839099631177
    test 2950 140 139.936841998365 Xi(tan=-0.84098, x=-0.765335, y=0.643632): -0.839099631177

    test 2951 147 146.823972083650 Phi(tan=-0.653784, x=-0.838671, y=0.54831): -0.649407593198
    test 2952 147 146.912045740495 Beta(tan=-0.651592, x=-0.838671, y=0.546471): -0.649407593198
    test 2953 147 147.000000000000 Theta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2954 147 146.956060147954 Mu(tan=-0.650498, x=-0.838253, y=0.545282), iteration=3: -0.649407593198
    test 2955 147 146.999941372376 Chi(tan=-0.649409, x=-1, y=0.649409), iteration=2: -0.649407593198
    test 2956 147 146.941406134703 Xi(tan=-0.650863, x=-1.68375, y=1.09589), iteration=3: -0.649407593198

    test 2957 147 146.823972083650 Phi(tan=-0.653784, x=-0.836993, y=0.547213): -0.649407593198
    test 2958 147 146.912045740495 Beta(tan=-0.651592, x=-0.837834, y=0.545926): -0.649407593198
    test 2959 147 147.000000000000 Theta(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198
    test 2960 147 146.956060147954 Mu(tan=-0.650498, x=-0.838253, y=0.545282): -0.649407593198
    test 2961 147 146.999941372376 Chi(tan=-0.649409, x=-0.83867, y=0.54464): -0.649407593198
    test 2962 147 146.941406134703 Xi(tan=-0.650863, x=-0.838113, y=0.545496): -0.649407593198

    test 2963 154 153.848054049875 Phi(tan=-0.49102, x=-0.898794, y=0.441326): -0.487732588566
    test 2964 154 153.924105301481 Beta(tan=-0.489373, x=-0.898794, y=0.439846): -0.487732588566
    test 2965 154 154.000000000000 Theta(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 2966 154 153.962101517600 Mu(tan=-0.488552, x=-0.898504, y=0.438966), iteration=3: -0.487732588566
    test 2967 154 153.999967210311 Chi(tan=-0.487733, x=-1, y=0.487733), iteration=3: -0.487732588566
    test 2968 154 153.949453115559 Xi(tan=-0.488825, x=-1.80488, y=0.882271), iteration=3: -0.487732588566

    test 2969 154 153.848054049875 Phi(tan=-0.49102, x=-0.897628, y=0.440753): -0.487732588566
    test 2970 154 153.924105301481 Beta(tan=-0.489373, x=-0.898213, y=0.439561): -0.487732588566
    test 2971 154 154.000000000000 Theta(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566
    test 2972 154 153.962101517600 Mu(tan=-0.488552, x=-0.898504, y=0.438966): -0.487732588566
    test 2973 154 153.999967210311 Chi(tan=-0.487733, x=-0.898794, y=0.438372): -0.487732588566
    test 2974 154 153.949453115559 Xi(tan=-0.488825, x=-0.898407, y=0.439164): -0.487732588566

    test 2975 161 160.881217808592 Phi(tan=-0.346648, x=-0.945519, y=0.327762): -0.344327613290
    test 2976 161 160.940687365843 Beta(tan=-0.345486, x=-0.945519, y=0.326663): -0.344327613290
    test 2977 161 161.000000000000 Theta(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 2978 161 160.970392653926 Mu(tan=-0.344906, x=-0.94535, y=0.326057), iteration=3: -0.344327613290
    test 2979 161 160.999985859992 Chi(tan=-0.344328, x=-1, y=0.344328), iteration=3: -0.344327613290
    test 2980 161 160.960505433888 Xi(tan=-0.345099, x=-1.89908, y=0.655369), iteration=3: -0.344327613290

    test 2981 161 160.881217808592 Phi(tan=-0.346648, x=-0.944842, y=0.327528): -0.344327613290
    test 2982 161 160.940687365843 Beta(tan=-0.345486, x=-0.945181, y=0.326547): -0.344327613290
    test 2983 161 161.000000000000 Theta(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290
    test 2984 161 160.970392653926 Mu(tan=-0.344906, x=-0.94535, y=0.326057): -0.344327613290
    test 2985 161 160.999985859992 Chi(tan=-0.344328, x=-0.945518, y=0.325568): -0.344327613290
    test 2986 161 160.960505433888 Xi(tan=-0.345099, x=-0.945294, y=0.32622): -0.344327613290

    test 2987 168 167.921493317051 Phi(tan=-0.213989, x=-0.978148, y=0.209313): -0.212556561670
    test 2988 168 167.960806838131 Beta(tan=-0.213272, x=-0.978148, y=0.208611): -0.212556561670
    test 2989 168 168.000000000000 Theta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2990 168 167.980440972867 Mu(tan=-0.212913, x=-0.978077, y=0.208246), iteration=3: -0.212556561670
    test 2991 168 167.999996188328 Chi(tan=-0.212557, x=-1, y=0.212557), iteration=3: -0.212556561670
    test 2992 168 167.973906475806 Xi(tan=-0.213033, x=-1.96489, y=0.418585), iteration=3: -0.212556561670

    test 2993 168 167.921493317051 Phi(tan=-0.213989, x=-0.977862, y=0.209252): -0.212556561670
    test 2994 168 167.960806838131 Beta(tan=-0.213272, x=-0.978005, y=0.208581): -0.212556561670
    test 2995 168 168.000000000000 Theta(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2996 168 167.980440972867 Mu(tan=-0.212913, x=-0.978077, y=0.208246): -0.212556561670
    test 2997 168 167.999996188328 Chi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670
    test 2998 168 167.973906475806 Xi(tan=-0.213033, x=-0.978053, y=0.208357): -0.212556561670

    test 2999 175 174.966475056686 Phi(tan=-0.0880783, x=-0.996195, y=0.0877431): -0.087488663526
    test 3000 175 174.983265245736 Beta(tan=-0.087783, x=-0.996195, y=0.0874489): -0.087488663526
    test 3001 175 175.000000000000 Theta(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 3002 175 174.991649917523 Mu(tan=-0.0876355, x=-0.996182, y=0.0873009), iteration=3: -0.087488663526
    test 3003 175 174.999999713957 Chi(tan=-0.0874887, x=-1, y=0.0874887), iteration=3: -0.087488663526
    test 3004 175 174.988859535139 Xi(tan=-0.0876846, x=-2.0013, y=0.175483), iteration=2: -0.087488663526

    test 3005 175 174.966475056686 Phi(tan=-0.0880783, x=-0.996144, y=0.0877386): -0.087488663526
    test 3006 175 174.983265245736 Beta(tan=-0.087783, x=-0.996169, y=0.0874467): -0.087488663526
    test 3007 175 175.000000000000 Theta(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 3008 175 174.991649917523 Mu(tan=-0.0876355, x=-0.996182, y=0.0873009): -0.087488663526
    test 3009 175 174.999999713957 Chi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526
    test 3010 175 174.988859535139 Xi(tan=-0.0876846, x=-0.996178, y=0.0873494): -0.087488663526

    test 3011 182 182.013467936189 Phi(tan=0.0351561, x=-0.999391, y=-0.0351347): 0.034920769492
    test 3012 182 182.006722688009 Beta(tan=0.0350382, x=-0.999391, y=-0.0350169): 0.034920769492
    test 3013 182 182.000000000000 Theta(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 3014 182 182.003354305769 Mu(tan=0.0349794, x=-0.999389, y=-0.034958), iteration=2: 0.034920769492
    test 3015 182 182.000000018425 Chi(tan=0.0349208, x=-1, y=-0.0349208), iteration=2: 0.034920769492
    test 3016 182 182.004475278247 Xi(tan=0.034999, x=-2.00775, y=-0.0702692), iteration=3: 0.034920769492

    test 3017 182 182.013467936189 Phi(tan=0.0351561, x=-0.999383, y=-0.0351344): 0.034920769492
    test 3018 182 182.006722688009 Beta(tan=0.0350382, x=-0.999387, y=-0.0350168): 0.034920769492
    test 3019 182 182.000000000000 Theta(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 3020 182 182.003354305769 Mu(tan=0.0349794, x=-0.999389, y=-0.034958): 0.034920769492
    test 3021 182 182.000000018425 Chi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492
    test 3022 182 182.004475278247 Xi(tan=0.034999, x=-0.999388, y=-0.0349776): 0.034920769492

    test 3023 189 189.059652780363 Phi(tan=0.159452, x=-0.987688, y=-0.157489): 0.158384440325
    test 3024 189 189.029778772560 Beta(tan=0.158917, x=-0.987688, y=-0.156961): 0.158384440325
    test 3025 189 189.000000000000 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 3026 189 189.014859673134 Mu(tan=0.15865, x=-0.987648, y=-0.156691), iteration=3: 0.158384440325
    test 3027 189 189.000001639674 Chi(tan=0.158384, x=-1, y=-0.158384), iteration=3: 0.158384440325
    test 3028 189 189.019824807860 Xi(tan=0.158739, x=-1.98414, y=-0.31496), iteration=3: 0.158384440325

    test 3029 189 189.059652780363 Phi(tan=0.159452, x=-0.987525, y=-0.157463): 0.158384440325
    test 3030 189 189.029778772560 Beta(tan=0.158917, x=-0.987607, y=-0.156948): 0.158384440325
    test 3031 189 189.000000000000 Theta(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 3032 189 189.014859673134 Mu(tan=0.15865, x=-0.987648, y=-0.156691): 0.158384440325
    test 3033 189 189.000001639674 Chi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325
    test 3034 189 189.019824807860 Xi(tan=0.158739, x=-0.987634, y=-0.156776): 0.158384440325

    test 3035 196 196.102260292825 Phi(tan=0.288678, x=-0.961262, y=-0.277495): 0.286745385759
    test 3036 196 196.051057415277 Beta(tan=0.28771, x=-0.961262, y=-0.276565): 0.286745385759
    test 3037 196 196.000000000000 Theta(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 3038 196 196.025483317057 Mu(tan=0.287227, x=-0.961139, y=-0.276065), iteration=3: 0.286745385759
    test 3039 196 196.000008725999 Chi(tan=0.286746, x=-1, y=-0.286746), iteration=2: 0.286745385759
    test 3040 196 196.033995121177 Xi(tan=0.287388, x=-1.93083, y=-0.554896), iteration=2: 0.286745385759

    test 3041 196 196.102260292825 Phi(tan=0.288678, x=-0.960768, y=-0.277353): 0.286745385759
    test 3042 196 196.051057415277 Beta(tan=0.28771, x=-0.961016, y=-0.276494): 0.286745385759
    test 3043 196 196.000000000000 Theta(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759
    test 3044 196 196.025483317057 Mu(tan=0.287227, x=-0.961139, y=-0.276065): 0.286745385759
    test 3045 196 196.000008725999 Chi(tan=0.286746, x=-0.961262, y=-0.275638): 0.286745385759
    test 3046 196 196.033995121177 Xi(tan=0.287388, x=-0.961098, y=-0.276208): 0.286745385759

    test 3047 203 203.138741606579 Phi(tan=0.427336, x=-0.920505, y=-0.393364): 0.424474816210
    test 3048 203 203.069290086312 Beta(tan=0.425903, x=-0.920505, y=-0.392046): 0.424474816210
    test 3049 203 203.000000000000 Theta(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 3050 203 203.034594657995 Mu(tan=0.425188, x=-0.920269, y=-0.391287), iteration=2: 0.424474816210
    test 3051 203 203.000023787567 Chi(tan=0.424475, x=-1, y=-0.424475), iteration=2: 0.424474816210
    test 3052 203 203.046143605881 Xi(tan=0.425426, x=-1.84864, y=-0.78646), iteration=2: 0.424474816210

    test 3053 203 203.138741606579 Phi(tan=0.427336, x=-0.919556, y=-0.392959): 0.424474816210
    test 3054 203 203.069290086312 Beta(tan=0.425903, x=-0.920032, y=-0.391844): 0.424474816210
    test 3055 203 203.000000000000 Theta(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210
    test 3056 203 203.034594657995 Mu(tan=0.425188, x=-0.920269, y=-0.391287): 0.424474816210
    test 3057 203 203.000023787567 Chi(tan=0.424475, x=-0.920505, y=-0.390732): 0.424474816210
    test 3058 203 203.046143605881 Xi(tan=0.425426, x=-0.92019, y=-0.391472): 0.424474816210

    test 3059 210 210.166923849507 Phi(tan=0.581241, x=-0.866025, y=-0.50337): 0.577350269190
    test 3060 210 210.083392202979 Beta(tan=0.579293, x=-0.866025, y=-0.501682): 0.577350269190
    test 3061 210 210.000000000000 Theta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 3062 210 210.041652569165 Mu(tan=0.57832, x=-0.865662, y=-0.500629), iteration=3: 0.577350269190
    test 3063 210 210.000046858553 Chi(tan=0.577351, x=-1, y=-0.577351), iteration=2: 0.577350269190
    test 3064 210 210.055548278686 Xi(tan=0.578644, x=-1.73885, y=-1.00618), iteration=3: 0.577350269190

    test 3065 210 210.166923849507 Phi(tan=0.581241, x=-0.864565, y=-0.502521): 0.577350269190
    test 3066 210 210.083392202979 Beta(tan=0.579293, x=-0.865297, y=-0.50126): 0.577350269190
    test 3067 210 210.000000000000 Theta(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190
    test 3068 210 210.041652569165 Mu(tan=0.57832, x=-0.865662, y=-0.500629): 0.577350269190
    test 3069 210 210.000046858553 Chi(tan=0.577351, x=-0.866025, y=-0.500001): 0.577350269190
    test 3070 210 210.055548278686 Xi(tan=0.578644, x=-0.86554, y=-0.500839): 0.577350269190

    test 3071 217 217.185140504831 Phi(tan=0.758633, x=-0.798636, y=-0.605871): 0.753554050103
    test 3072 217 217.092527888642 Beta(tan=0.756089, x=-0.798636, y=-0.60384): 0.753554050103
    test 3073 217 217.000000000000 Theta(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 3074 217 217.046237489147 Mu(tan=0.75482, x=-0.79815, y=-0.602459), iteration=2: 0.753554050103
    test 3075 217 217.000075282212 Chi(tan=0.753556, x=-1, y=-0.753556), iteration=3: 0.753554050103
    test 3076 217 217.061650740215 Xi(tan=0.755242, x=-1.60314, y=-1.21076), iteration=2: 0.753554050103

    test 3077 217 217.185140504831 Phi(tan=0.758633, x=-0.796687, y=-0.604393): 0.753554050103
    test 3078 217 217.092527888642 Beta(tan=0.756089, x=-0.797663, y=-0.603104): 0.753554050103
    test 3079 217 217.000000000000 Theta(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103
    test 3080 217 217.046237489147 Mu(tan=0.75482, x=-0.79815, y=-0.602459): 0.753554050103
    test 3081 217 217.000075282212 Chi(tan=0.753556, x=-0.798635, y=-0.601816): 0.753554050103
    test 3082 217 217.061650740215 Xi(tan=0.755242, x=-0.797987, y=-0.602674): 0.753554050103

    test 3083 224 224.192328540028 Phi(tan=0.972197, x=-0.71934, y=-0.69934): 0.965688774807
    test 3084 224 224.096159176144 Beta(tan=0.968937, x=-0.71934, y=-0.696995): 0.965688774807
    test 3085 224 224.000000000000 Theta(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 3086 224 224.048076415859 Mu(tan=0.967312, x=-0.718757, y=-0.695262), iteration=2: 0.965688774807
    test 3087 224 224.000104179110 Chi(tan=0.965692, x=-1, y=-0.965692), iteration=3: 0.965688774807
    test 3088 224 224.064089278462 Xi(tan=0.967853, x=-1.44358, y=-1.39717), iteration=3: 0.965688774807

    test 3089 224 224.192328540028 Phi(tan=0.972197, x=-0.717004, y=-0.697069): 0.965688774807
    test 3090 224 224.096159176144 Beta(tan=0.968937, x=-0.718173, y=-0.695865): 0.965688774807
    test 3091 224 224.000000000000 Theta(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807
    test 3092 224 224.048076415859 Mu(tan=0.967312, x=-0.718757, y=-0.695262): 0.965688774807
    test 3093 224 224.000104179110 Chi(tan=0.965692, x=-0.719339, y=-0.69466): 0.965688774807
    test 3094 224 224.064089278462 Xi(tan=0.967853, x=-0.718562, y=-0.695463): 0.965688774807

    test 3095 231 231.188087005479 Phi(tan=1.24322, x=-0.62932, y=-0.782384): 1.234897156535
    test 3096 231 231.094076843128 Beta(tan=1.23905, x=-0.62932, y=-0.77976): 1.234897156535
    test 3097 231 231.000000000000 Theta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 3098 231 231.047059277252 Mu(tan=1.23697, x=-0.628682, y=-0.777663), iteration=3: 1.234897156535
    test 3099 231 231.000127493216 Chi(tan=1.2349, x=-1, y=-1.2349), iteration=3: 1.234897156535
    test 3100 231 231.062720168394 Xi(tan=1.23766, x=-1.26258, y=-1.56265), iteration=3: 1.234897156535

    test 3101 231 231.188087005479 Phi(tan=1.24322, x=-0.626766, y=-0.779208): 1.234897156535
    test 3102 231 231.094076843128 Beta(tan=1.23905, x=-0.628044, y=-0.778178): 1.234897156535
    test 3103 231 231.000000000000 Theta(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535
    test 3104 231 231.047059277252 Mu(tan=1.23697, x=-0.628682, y=-0.777663): 1.234897156535
    test 3105 231 231.000127493216 Chi(tan=1.2349, x=-0.629319, y=-0.777147): 1.234897156535
    test 3106 231 231.062720168394 Xi(tan=1.23766, x=-0.628469, y=-0.777834): 1.234897156535

    test 3107 238 238.172694719424 Phi(tan=1.61112, x=-0.529919, y=-0.853764): 1.600334529041
    test 3108 238 238.086411314589 Beta(tan=1.60572, x=-0.529919, y=-0.850901): 1.600334529041
    test 3109 238 238.000000000000 Theta(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 3110 238 238.043245666868 Mu(tan=1.60303, x=-0.529279, y=-0.848448), iteration=3: 1.600334529041
    test 3111 238 238.000139371942 Chi(tan=1.60034, x=-1, y=-1.60034), iteration=3: 1.600334529041
    test 3112 238 238.057625944391 Xi(tan=1.60392, x=-1.06288, y=-1.70478), iteration=3: 1.600334529041

    test 3113 238 238.172694719424 Phi(tan=1.61112, x=-0.527361, y=-0.849641): 1.600334529041
    test 3114 238 238.086411314589 Beta(tan=1.60572, x=-0.52864, y=-0.848846): 1.600334529041
    test 3115 238 238.000000000000 Theta(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041
    test 3116 238 238.043245666868 Mu(tan=1.60303, x=-0.529279, y=-0.848448): 1.600334529041
    test 3117 238 238.000139371942 Chi(tan=1.60034, x=-0.529917, y=-0.848049): 1.600334529041
    test 3118 238 238.057625944391 Xi(tan=1.60392, x=-0.529066, y=-0.848581): 1.600334529041

    test 3119 245 245.147087439517 Phi(tan=2.15896, x=-0.422618, y=-0.912416): 2.144506920510
    test 3120 245 245.073623344306 Beta(tan=2.15172, x=-0.422618, y=-0.909357): 2.144506920510
    test 3121 245 245.000000000000 Theta(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 3122 245 245.036861496413 Mu(tan=2.14811, x=-0.422035, y=-0.906579), iteration=2: 2.144506920510
    test 3123 245 245.000135557054 Chi(tan=2.14452, x=-1, y=-2.14452), iteration=3: 2.144506920510
    test 3124 245 245.049110215384 Xi(tan=2.14931, x=-0.847471, y=-1.82148), iteration=3: 2.144506920510

    test 3125 245 245.147087439517 Phi(tan=2.15896, x=-0.42029, y=-0.90739): 2.144506920510
    test 3126 245 245.073623344306 Beta(tan=2.15172, x=-0.421453, y=-0.90685): 2.144506920510
    test 3127 245 245.000000000000 Theta(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510
    test 3128 245 245.036861496413 Mu(tan=2.14811, x=-0.422035, y=-0.906579): 2.144506920510
    test 3129 245 245.000135557054 Chi(tan=2.14452, x=-0.422616, y=-0.906309): 2.144506920510
    test 3130 245 245.049110215384 Xi(tan=2.14931, x=-0.421841, y=-0.90667): 2.144506920510

    test 3131 252 252.112797334151 Phi(tan=3.09843, x=-0.309017, y=-0.957466): 3.077683537175
    test 3132 252 252.056475395211 Beta(tan=3.08804, x=-0.309017, y=-0.954256): 3.077683537175
    test 3133 252 252.000000000000 Theta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 3134 252 252.028285720189 Mu(tan=3.08286, x=-0.308547, y=-0.951209), iteration=2: 3.077683537175
    test 3135 252 252.000114461007 Chi(tan=3.0777, x=-1, y=-3.0777), iteration=3: 3.077683537175
    test 3136 252 252.037679397301 Xi(tan=3.08458, x=-0.619552, y=-1.91106), iteration=3: 3.077683537175

    test 3137 252 252.112797334151 Phi(tan=3.09843, x=-0.307144, y=-0.951663): 3.077683537175
    test 3138 252 252.056475395211 Beta(tan=3.08804, x=-0.308079, y=-0.951361): 3.077683537175
    test 3139 252 252.000000000000 Theta(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175
    test 3140 252 252.028285720189 Mu(tan=3.08286, x=-0.308547, y=-0.951209): 3.077683537175
    test 3141 252 252.000114461007 Chi(tan=3.0777, x=-0.309015, y=-0.951057): 3.077683537175
    test 3142 252 252.037679397301 Xi(tan=3.08458, x=-0.308391, y=-0.95126): 3.077683537175

    test 3143 259 259.071859476624 Phi(tan=5.17923, x=-0.190809, y=-0.988243): 5.144554015970
    test 3144 259 259.035985707307 Beta(tan=5.16186, x=-0.190809, y=-0.984929): 5.144554015970
    test 3145 259 259.000000000000 Theta(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 3146 259 259.018027889335 Mu(tan=5.15321, x=-0.1905, y=-0.981687), iteration=3: 5.144554015970
    test 3147 259 259.000077676273 Chi(tan=5.14459, x=-1, y=-5.14459), iteration=3: 5.144554015970
    test 3148 259 259.024012504065 Xi(tan=5.15609, x=-0.382505, y=-1.97223), iteration=2: 5.144554015970

    test 3149 259 259.071859476624 Phi(tan=5.17923, x=-0.189578, y=-0.981866): 5.144554015970
    test 3150 259 259.035985707307 Beta(tan=5.16186, x=-0.190192, y=-0.981747): 5.144554015970
    test 3151 259 259.000000000000 Theta(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970
    test 3152 259 259.018027889335 Mu(tan=5.15321, x=-0.1905, y=-0.981687): 5.144554015970
    test 3153 259 259.000077676273 Chi(tan=5.14459, x=-0.190808, y=-0.981627): 5.144554015970
    test 3154 259 259.024012504065 Xi(tan=5.15609, x=-0.190398, y=-0.981707): 5.144554015970

    test 3155 266 266.026691465344 Phi(tan=14.397, x=-0.0697565, y=-1.00429): 14.300666256712
    test 3156 266 266.013367926454 Beta(tan=14.3488, x=-0.0697565, y=-1.00092): 14.300666256712
    test 3157 266 266.000000000000 Theta(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 3158 266 266.006697857429 Mu(tan=14.3247, x=-0.0696399, y=-0.997572), iteration=3: 14.300666256712
    test 3159 266 266.000029795215 Chi(tan=14.3008, x=-1, y=-14.3008), iteration=3: 14.300666256712
    test 3160 266 266.008920822994 Xi(tan=14.3327, x=-0.139827, y=-2.00411), iteration=3: 14.300666256712

    test 3161 266 266.026691465344 Phi(tan=14.397, x=-0.0692917, y=-0.997596): 14.300666256712
    test 3162 266 266.013367926454 Beta(tan=14.3488, x=-0.0695237, y=-0.99758): 14.300666256712
    test 3163 266 266.000000000000 Theta(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712
    test 3164 266 266.006697857429 Mu(tan=14.3247, x=-0.0696399, y=-0.997572): 14.300666256712
    test 3165 266 266.000029795215 Chi(tan=14.3008, x=-0.069756, y=-0.997564): 14.300666256712
    test 3166 266 266.008920822994 Xi(tan=14.3327, x=-0.0696012, y=-0.997575): 14.300666256712

    test 3167 273 272.979953179189 Phi(tan=-19.2097, x=0.052336, y=-1.00536): -19.081136687728
    test 3168 273 272.989959849669 Beta(tan=-19.1453, x=0.052336, y=-1.00199): -19.081136687728
    test 3169 273 273.000000000000 Theta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 3170 273 272.994969444902 Mu(tan=-19.1132, x=0.0522483, y=-0.998634), iteration=2: -19.081136687728
    test 3171 273 272.999977574321 Chi(tan=-19.0813, x=1.0, y=-19.0813), iteration=3: -19.081136687728
    test 3172 273 272.993299868195 Xi(tan=-19.1239, x=0.104907, y=-2.00624), iteration=3: -19.081136687728

    test 3173 273 272.979953179189 Phi(tan=-19.2097, x=0.0519865, y=-0.998648): -19.081136687728
    test 3174 273 272.989959849669 Beta(tan=-19.1453, x=0.052161, y=-0.998639): -19.081136687728
    test 3175 273 273.000000000000 Theta(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728
    test 3176 273 272.994969444902 Mu(tan=-19.1132, x=0.0522483, y=-0.998634): -19.081136687728
    test 3177 273 272.999977574321 Chi(tan=-19.0813, x=0.0523356, y=-0.99863): -19.081136687728
    test 3178 273 272.993299868195 Xi(tan=-19.1239, x=0.0522192, y=-0.998636): -19.081136687728

    test 3179 280 279.934394210279 Phi(tan=-5.7095, x=0.173648, y=-0.991445): -5.671281819618
    test 3180 280 279.967145322218 Beta(tan=-5.69036, x=0.173648, y=-0.988121): -5.671281819618
    test 3181 280 280.000000000000 Theta(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 3182 280 279.983540245263 Mu(tan=-5.68082, x=0.173365, y=-0.984858), iteration=3: -5.671281819618
    test 3183 280 279.999928623941 Chi(tan=-5.67132, x=1.0, y=-5.67132), iteration=3: -5.671281819618
    test 3184 280 279.978076430885 Xi(tan=-5.684, x=0.348099, y=-1.97859), iteration=2: -5.671281819618

    test 3185 280 279.934394210279 Phi(tan=-5.7095, x=0.17252, y=-0.985006): -5.671281819618
    test 3186 280 279.967145322218 Beta(tan=-5.69036, x=0.173083, y=-0.984907): -5.671281819618
    test 3187 280 280.000000000000 Theta(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618
    test 3188 280 279.983540245263 Mu(tan=-5.68082, x=0.173365, y=-0.984858): -5.671281819618
    test 3189 280 279.999928623941 Chi(tan=-5.67132, x=0.173647, y=-0.984808): -5.671281819618
    test 3190 280 279.978076430885 Xi(tan=-5.684, x=0.173271, y=-0.984874): -5.671281819618

    test 3191 287 286.892696785077 Phi(tan=-3.2929, x=0.292372, y=-0.96275): -3.270852618484
    test 3192 287 286.946273607855 Beta(tan=-3.28186, x=0.292372, y=-0.959522): -3.270852618484
    test 3193 287 287.000000000000 Theta(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 3194 287 286.973089996409 Mu(tan=-3.27636, x=0.291923, y=-0.956442), iteration=3: -3.270852618484
    test 3195 287 286.999889910594 Chi(tan=-3.27088, x=1.0, y=-3.27088), iteration=3: -3.270852618484
    test 3196 287 286.964153811789 Xi(tan=-3.27819, x=0.586167, y=-1.92156), iteration=3: -3.270852618484

    test 3197 287 286.892696785077 Phi(tan=-3.2929, x=0.29058, y=-0.956851): -3.270852618484
    test 3198 287 286.946273607855 Beta(tan=-3.28186, x=0.291475, y=-0.956578): -3.270852618484
    test 3199 287 287.000000000000 Theta(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484
    test 3200 287 286.973089996409 Mu(tan=-3.27636, x=0.291923, y=-0.956442): -3.270852618484
    test 3201 287 286.999889910594 Chi(tan=-3.27088, x=0.29237, y=-0.956305): -3.270852618484
    test 3202 287 286.964153811789 Xi(tan=-3.27819, x=0.291773, y=-0.956487): -3.270852618484

    test 3203 294 293.857322070702 Phi(tan=-2.26117, x=0.406737, y=-0.919702): -2.246036773904
    test 3204 294 293.928580656019 Beta(tan=-2.25359, x=0.406737, y=-0.916619): -2.246036773904
    test 3205 294 294.000000000000 Theta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 3206 294 293.964240029727 Mu(tan=-2.24981, x=0.406166, y=-0.913799), iteration=2: -2.246036773904
    test 3207 294 293.999866400612 Chi(tan=-2.24605, x=1.0, y=-2.24605), iteration=3: -2.246036773904
    test 3208 294 293.952358418734 Xi(tan=-2.25107, x=0.815599, y=-1.83597), iteration=2: -2.246036773904

    test 3209 294 293.857322070702 Phi(tan=-2.26117, x=0.40446, y=-0.914555): -2.246036773904
    test 3210 294 293.928580656019 Beta(tan=-2.25359, x=0.405598, y=-0.914052): -2.246036773904
    test 3211 294 294.000000000000 Theta(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904
    test 3212 294 293.964240029727 Mu(tan=-2.24981, x=0.406166, y=-0.913799): -2.246036773904
    test 3213 294 293.999866400612 Chi(tan=-2.24605, x=0.406735, y=-0.913546): -2.246036773904
    test 3214 294 293.952358418734 Xi(tan=-2.25107, x=0.405977, y=-0.913883): -2.246036773904

    test 3215 301 300.830367699497 Phi(tan=-1.6755, x=0.515038, y=-0.862944): -1.664279482351
    test 3216 301 300.915116613042 Beta(tan=-1.66988, x=0.515038, y=-0.860051): -1.664279482351
    test 3217 301 301.000000000000 Theta(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 3218 301 300.957516242525 Mu(tan=-1.66708, x=0.514402, y=-0.857549), iteration=3: -1.664279482351
    test 3219 301 300.999860142450 Chi(tan=-1.66429, x=1.0, y=-1.66429), iteration=3: -1.664279482351
    test 3220 301 300.943390839029 Xi(tan=-1.66801, x=1.033, y=-1.72305), iteration=2: -1.664279482351

    test 3221 301 300.830367699497 Phi(tan=-1.6755, x=0.512498, y=-0.858688): -1.664279482351
    test 3222 301 300.915116613042 Beta(tan=-1.66988, x=0.513768, y=-0.857929): -1.664279482351
    test 3223 301 301.000000000000 Theta(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351
    test 3224 301 300.957516242525 Mu(tan=-1.66708, x=0.514402, y=-0.857549): -1.664279482351
    test 3225 301 300.999860142450 Chi(tan=-1.66429, x=0.515036, y=-0.857169): -1.664279482351
    test 3226 301 300.943390839029 Xi(tan=-1.66801, x=0.514191, y=-0.857676): -1.664279482351

    test 3227 308 307.813444106313 Phi(tan=-1.28857, x=0.615661, y=-0.793322): -1.279941632193
    test 3228 308 307.906683665119 Beta(tan=-1.28425, x=0.615661, y=-0.790662): -1.279941632193
    test 3229 308 308.000000000000 Theta(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 3230 308 307.953317819859 Mu(tan=-1.28209, x=0.615019, y=-0.788512), iteration=3: -1.279941632193
    test 3231 308 307.999869987124 Chi(tan=-1.27995, x=1.0, y=-1.27995), iteration=2: -1.279941632193
    test 3232 308 307.937784253619 Xi(tan=-1.28281, x=1.23513, y=-1.58444), iteration=3: -1.279941632193

    test 3233 308 307.813444106313 Phi(tan=-1.28857, x=0.613092, y=-0.790011): -1.279941632193
    test 3234 308 307.906683665119 Beta(tan=-1.28425, x=0.614377, y=-0.789012): -1.279941632193
    test 3235 308 308.000000000000 Theta(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193
    test 3236 308 307.953317819859 Mu(tan=-1.28209, x=0.615019, y=-0.788512): -1.279941632193
    test 3237 308 307.999869987124 Chi(tan=-1.27995, x=0.61566, y=-0.788012): -1.279941632193
    test 3238 308 307.937784253619 Xi(tan=-1.28281, x=0.614805, y=-0.788679): -1.279941632193

    test 3239 315 314.807576784018 Phi(tan=-1.00674, x=0.707107, y=-0.711872): -1.000000000000
    test 3240 315 314.903787849420 Beta(tan=-1.00336, x=0.707107, y=-0.709486): -1.000000000000
    test 3241 315 315.000000000000 Theta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 3242 315 314.951893574286 Mu(tan=-1.00168, x=0.706513, y=-0.7077), iteration=2: -1.000000000000
    test 3243 315 314.999892003023 Chi(tan=-1, x=1.0, y=-1), iteration=3: -1.000000000000
    test 3244 315 314.935872656555 Xi(tan=-1.00224, x=1.41897, y=-1.42215), iteration=2: -1.000000000000

    test 3245 315 314.807576784018 Phi(tan=-1.00674, x=0.704728, y=-0.709478): -1.000000000000
    test 3246 315 314.903787849420 Beta(tan=-1.00336, x=0.705918, y=-0.708293): -1.000000000000
    test 3247 315 315.000000000000 Theta(tan=-1, x=0.707107, y=-0.707107): -1.000000000000
    test 3248 315 314.951893574286 Mu(tan=-1.00168, x=0.706513, y=-0.7077): -1.000000000000
    test 3249 315 314.999892003023 Chi(tan=-1, x=0.707105, y=-0.707108): -1.000000000000
    test 3250 315 314.935872656555 Xi(tan=-1.00224, x=0.706315, y=-0.707898): -1.000000000000

    test 3251 322 321.813140716820 Phi(tan=-0.786551, x=0.788011, y=-0.619811): -0.781285626507
    test 3252 322 321.906607816751 Beta(tan=-0.783914, x=0.788011, y=-0.617733): -0.781285626507
    test 3253 322 322.000000000000 Theta(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 3254 322 321.953327300103 Mu(tan=-0.782598, x=0.787509, y=-0.616303), iteration=3: -0.781285626507
    test 3255 322 321.999920484161 Chi(tan=-0.781288, x=1.0, y=-0.781288), iteration=2: -0.781285626507
    test 3256 322 321.937770794620 Xi(tan=-0.783036, x=1.58175, y=-1.23857), iteration=3: -0.781285626507

    test 3257 322 321.813140716820 Phi(tan=-0.786551, x=0.785999, y=-0.618228): -0.781285626507
    test 3258 322 321.906607816751 Beta(tan=-0.783914, x=0.787006, y=-0.616945): -0.781285626507
    test 3259 322 322.000000000000 Theta(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507
    test 3260 322 321.953327300103 Mu(tan=-0.782598, x=0.787509, y=-0.616303): -0.781285626507
    test 3261 322 321.999920484161 Chi(tan=-0.781288, x=0.78801, y=-0.615663): -0.781285626507
    test 3262 322 321.937770794620 Xi(tan=-0.783036, x=0.787342, y=-0.616517): -0.781285626507

    test 3263 329 328.829831943495 Phi(tan=-0.60491, x=0.857167, y=-0.518509): -0.600860619028
    test 3264 329 328.914982672653 Beta(tan=-0.602882, x=0.857167, y=-0.516771): -0.600860619028
    test 3265 329 329.000000000000 Theta(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 3266 329 328.957532983891 Mu(tan=-0.60187, x=0.856785, y=-0.515673), iteration=3: -0.600860619028
    test 3267 329 328.999949315138 Chi(tan=-0.600862, x=1.0, y=-0.600862), iteration=3: -0.600860619028
    test 3268 329 328.943367072053 Xi(tan=-0.602207, x=1.72101, y=-1.0364), iteration=2: -0.600860619028

    test 3269 329 328.829831943495 Phi(tan=-0.60491, x=0.855634, y=-0.517582): -0.600860619028
    test 3270 329 328.914982672653 Beta(tan=-0.602882, x=0.856402, y=-0.516309): -0.600860619028
    test 3271 329 329.000000000000 Theta(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028
    test 3272 329 328.957532983891 Mu(tan=-0.60187, x=0.856785, y=-0.515673): -0.600860619028
    test 3273 329 328.999949315138 Chi(tan=-0.600862, x=0.857167, y=-0.515039): -0.600860619028
    test 3274 329 328.943367072053 Xi(tan=-0.602207, x=0.856658, y=-0.515885): -0.600860619028

    test 3275 336 335.856679369063 Phi(tan=-0.448229, x=0.913545, y=-0.409478): -0.445228685309
    test 3276 336 335.928419979560 Beta(tan=-0.446726, x=0.913545, y=-0.408105): -0.445228685309
    test 3277 336 336.000000000000 Theta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 3278 336 335.964260113259 Mu(tan=-0.445976, x=0.913292, y=-0.407306), iteration=3: -0.445228685309
    test 3279 336 335.999973373434 Chi(tan=-0.445229, x=1.0, y=-0.445229), iteration=3: -0.445228685309
    test 3280 336 335.952329907972 Xi(tan=-0.446226, x=1.83461, y=-0.818652), iteration=3: -0.445228685309

    test 3281 336 335.856679369063 Phi(tan=-0.448229, x=0.912525, y=-0.409021): -0.445228685309
    test 3282 336 335.928419979560 Beta(tan=-0.446726, x=0.913037, y=-0.407878): -0.445228685309
    test 3283 336 336.000000000000 Theta(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 3284 336 335.964260113259 Mu(tan=-0.445976, x=0.913292, y=-0.407306): -0.445228685309
    test 3285 336 335.999973373434 Chi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309
    test 3286 336 335.952329907972 Xi(tan=-0.446226, x=0.913207, y=-0.407497): -0.445228685309

    test 3287 343 342.892097596857 Phi(tan=-0.307791, x=0.956305, y=-0.294342): -0.305730681459
    test 3288 343 342.946123810430 Beta(tan=-0.306759, x=0.956305, y=-0.293355): -0.305730681459
    test 3289 343 343.000000000000 Theta(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 3290 343 342.973108720519 Mu(tan=-0.306244, x=0.956167, y=-0.292821), iteration=2: -0.305730681459
    test 3291 343 342.999989640752 Chi(tan=-0.305731, x=1.0, y=-0.305731), iteration=3: -0.305730681459
    test 3292 343 342.964127231800 Xi(tan=-0.306415, x=1.92083, y=-0.588572), iteration=2: -0.305730681459

    test 3293 343 342.892097596857 Phi(tan=-0.307791, x=0.955752, y=-0.294172): -0.305730681459
    test 3294 343 342.946123810430 Beta(tan=-0.306759, x=0.956029, y=-0.293271): -0.305730681459
    test 3295 343 343.000000000000 Theta(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 3296 343 342.973108720519 Mu(tan=-0.306244, x=0.956167, y=-0.292821): -0.305730681459
    test 3297 343 342.999989640752 Chi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459
    test 3298 343 342.964127231800 Xi(tan=-0.306415, x=0.956122, y=-0.29297): -0.305730681459

    test 3299 350 349.933978809966 Phi(tan=-0.177515, x=0.984808, y=-0.174818): -0.176326980708
    test 3300 350 349.967041472227 Beta(tan=-0.17692, x=0.984808, y=-0.174232): -0.176326980708
    test 3301 350 350.000000000000 Theta(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 3302 350 349.983553226337 Mu(tan=-0.176623, x=0.984758, y=-0.173931), iteration=3: -0.176326980708
    test 3303 350 349.999997763945 Chi(tan=-0.176327, x=1.0, y=-0.176327), iteration=2: -0.176326980708
    test 3304 350 349.978058004001 Xi(tan=-0.176722, x=1.97833, y=-0.349613), iteration=3: -0.176326980708

    test 3305 350 349.933978809966 Phi(tan=-0.177515, x=0.984607, y=-0.174783): -0.176326980708
    test 3306 350 349.967041472227 Beta(tan=-0.17692, x=0.984708, y=-0.174215): -0.176326980708
    test 3307 350 350.000000000000 Theta(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 3308 350 349.983553226337 Mu(tan=-0.176623, x=0.984758, y=-0.173931): -0.176326980708
    test 3309 350 349.999997763945 Chi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708
    test 3310 350 349.978058004001 Xi(tan=-0.176722, x=0.984741, y=-0.174025): -0.176326980708

    test 3311 357 356.979818816318 Phi(tan=-0.052761, x=0.99863, y=-0.0526887): -0.052407779283
    test 3312 357 356.989926259040 Beta(tan=-0.0525841, x=0.99863, y=-0.052512): -0.052407779283
    test 3313 357 357.000000000000 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 3314 357 356.994973643713 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236), iteration=3: -0.052407779283
    test 3315 357 356.999999937910 Chi(tan=-0.0524078, x=1.0, y=-0.0524078), iteration=3: -0.052407779283
    test 3316 357 356.993293907994 Xi(tan=-0.0525251, x=2.00621, y=-0.105377), iteration=3: -0.052407779283

    test 3317 357 356.979818816318 Phi(tan=-0.052761, x=0.998611, y=-0.0526877): -0.052407779283
    test 3318 357 356.989926259040 Beta(tan=-0.0525841, x=0.99862, y=-0.0525115): -0.052407779283
    test 3319 357 357.000000000000 Theta(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 3320 357 356.994973643713 Mu(tan=-0.0524957, x=0.998625, y=-0.0524236): -0.052407779283
    test 3321 357 356.999999937910 Chi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283
    test 3322 357 356.993293907994 Xi(tan=-0.0525251, x=0.998623, y=-0.0524528): -0.052407779283

    test 3323  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3324  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3325  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3326  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3327  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3328  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 3329  0 0.000000000000 Phi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3330  0 0.000000000000 Beta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3331  0 0.000000000000 Theta(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3332  0 0.000000000000 Mu(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3333  0 0.000000000000 Chi(tan=0.0, x=1.0, y=0.0): 0.000000000000
    test 3334  0 0.000000000000 Xi(tan=0.0, x=1.0, y=0.0): 0.000000000000

    test 3335  7 7.031115657726 Phi(tan=0.123336, x=1.0, y=0.123336): 0.122784560903
    test 3336  7 7.007776446248 Beta(tan=0.122922, x=1.0, y=0.122922): 0.122784560903
    test 3337  7 6.984513160948 Theta(tan=0.12251, x=1.0, y=0.12251): 0.122784560903
    test 3338  7 6.996121115499 Mu(tan=0.122716, x=0.992554, y=0.121802), iteration=3: 0.122784560903
    test 3339  7 6.984513934967 Chi(tan=0.12251, x=1.0, y=0.12251), iteration=3: 0.122784560903
    test 3340  7 7.000000000000 Xi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903

    test 3341  7 7.031115657726 Phi(tan=0.123336, x=0.99248, y=0.122408): 0.122784560903
    test 3342  7 7.007776446248 Beta(tan=0.122922, x=0.99253, y=0.122004): 0.122784560903
    test 3343  7 6.984513160948 Theta(tan=0.12251, x=0.992579, y=0.121601): 0.122784560903
    test 3344  7 6.996121115499 Mu(tan=0.122716, x=0.992554, y=0.121802): 0.122784560903
    test 3345  7 6.984513934967 Chi(tan=0.12251, x=0.992579, y=0.121601): 0.122784560903
    test 3346  7 7.000000000000 Xi(tan=0.122785, x=0.992546, y=0.121869): 0.122784560903

    test 3347 14 14.060369141975 Phi(tan=0.250447, x=1.0, y=0.250447): 0.249328002843
    test 3348 14 14.015088387186 Beta(tan=0.249608, x=1.0, y=0.249608): 0.249328002843
    test 3349 14 13.969941668301 Theta(tan=0.248771, x=1.0, y=0.248771): 0.249328002843
    test 3350 14 13.992473204804 Mu(tan=0.249188, x=0.970327, y=0.241794), iteration=3: 0.249328002843
    test 3351 14 13.969947587506 Chi(tan=0.248771, x=1.0, y=0.248771), iteration=3: 0.249328002843
    test 3352 14 14.000000000000 Xi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843

    test 3353 14 14.060369141975 Phi(tan=0.250447, x=0.97004, y=0.242944): 0.249328002843
    test 3354 14 14.015088387186 Beta(tan=0.249608, x=0.970232, y=0.242177): 0.249328002843
    test 3355 14 13.969941668301 Theta(tan=0.248771, x=0.970423, y=0.241413): 0.249328002843
    test 3356 14 13.992473204804 Mu(tan=0.249188, x=0.970327, y=0.241794): 0.249328002843
    test 3357 14 13.969947587506 Chi(tan=0.248771, x=0.970422, y=0.241413): 0.249328002843
    test 3358 14 14.000000000000 Xi(tan=0.249328, x=0.970296, y=0.241922): 0.249328002843

    test 3359 21 21.086012125911 Phi(tan=0.385587, x=1.0, y=0.385587): 0.383864035035
    test 3360 21 21.021499506340 Beta(tan=0.384295, x=1.0, y=0.384295): 0.383864035035
    test 3361 21 20.957147588487 Theta(tan=0.383006, x=1.0, y=0.383006): 0.383864035035
    test 3362 21 20.989273394164 Mu(tan=0.383649, x=0.933648, y=0.358193), iteration=2: 0.383864035035
    test 3363 21 20.957166102443 Chi(tan=0.383007, x=1.0, y=0.383007), iteration=2: 0.383864035035
    test 3364 21 21.000000000000 Xi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035

    test 3365 21 21.086012125911 Phi(tan=0.385587, x=0.933041, y=0.359769): 0.383864035035
    test 3366 21 21.021499506340 Beta(tan=0.384295, x=0.933446, y=0.358718): 0.383864035035
    test 3367 21 20.957147588487 Theta(tan=0.383006, x=0.933848, y=0.35767): 0.383864035035
    test 3368 21 20.989273394164 Mu(tan=0.383649, x=0.933648, y=0.358193): 0.383864035035
    test 3369 21 20.957166102443 Chi(tan=0.383007, x=0.933848, y=0.35767): 0.383864035035
    test 3370 21 21.000000000000 Xi(tan=0.383864, x=0.93358, y=0.358368): 0.383864035035

    test 3371 28 28.106516446309 Phi(tan=0.534096, x=1.0, y=0.534096): 0.531709431661
    test 3372 28 28.026628049399 Beta(tan=0.532306, x=1.0, y=0.532306): 0.531709431661
    test 3373 28 27.946889336829 Theta(tan=0.530521, x=1.0, y=0.530521): 0.531709431661
    test 3374 28 27.986711967080 Mu(tan=0.531412, x=0.883056, y=0.469267), iteration=3: 0.531709431661
    test 3375 28 27.946928706111 Chi(tan=0.530522, x=1.0, y=0.530522), iteration=2: 0.531709431661
    test 3376 28 28.000000000000 Xi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661

    test 3377 28 28.106516446309 Phi(tan=0.534096, x=0.882073, y=0.471112): 0.531709431661
    test 3378 28 28.026628049399 Beta(tan=0.532306, x=0.882729, y=0.469882): 0.531709431661
    test 3379 28 27.946889336829 Theta(tan=0.530521, x=0.883382, y=0.468653): 0.531709431661
    test 3380 28 27.986711967080 Mu(tan=0.531412, x=0.883056, y=0.469267): 0.531709431661
    test 3381 28 27.946928706111 Chi(tan=0.530522, x=0.883382, y=0.468654): 0.531709431661
    test 3382 28 28.000000000000 Xi(tan=0.531709, x=0.882948, y=0.469472): 0.531709431661

    test 3383 35 35.120665994598 Phi(tan=0.703351, x=1.0, y=0.703351): 0.700207538210
    test 3384 35 35.030169708409 Beta(tan=0.700993, x=1.0, y=0.700993): 0.700207538210
    test 3385 35 34.939777010856 Theta(tan=0.698642, x=1.0, y=0.698642): 0.700207538210
    test 3386 35 34.984941016111 Mu(tan=0.699816, x=0.819303, y=0.573361), iteration=3: 0.700207538210
    test 3387 35 34.939843626202 Chi(tan=0.698644, x=1.0, y=0.698644), iteration=3: 0.700207538210
    test 3388 35 35.000000000000 Xi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210

    test 3389 35 35.120665994598 Phi(tan=0.703351, x=0.817942, y=0.5753): 0.700207538210
    test 3390 35 35.030169708409 Beta(tan=0.700993, x=0.81885, y=0.574008): 0.700207538210
    test 3391 35 34.939777010856 Theta(tan=0.698642, x=0.819754, y=0.572715): 0.700207538210
    test 3392 35 34.984941016111 Mu(tan=0.699816, x=0.819303, y=0.573361): 0.700207538210
    test 3393 35 34.939843626202 Chi(tan=0.698644, x=0.819754, y=0.572716): 0.700207538210
    test 3394 35 35.000000000000 Xi(tan=0.700208, x=0.819152, y=0.573576): 0.700207538210

    test 3395 42 42.127628467909 Phi(tan=0.904446, x=1.0, y=0.904446): 0.900404044298
    test 3396 42 42.031915609918 Beta(tan=0.901413, x=1.0, y=0.901413): 0.900404044298
    test 3397 42 41.936235990174 Theta(tan=0.898391, x=1.0, y=0.898391): 0.900404044298
    test 3398 42 41.984065426020 Mu(tan=0.899901, x=0.743331, y=0.668924), iteration=2: 0.900404044298
    test 3399 42 41.936331949525 Chi(tan=0.898394, x=1.0, y=0.898394), iteration=3: 0.900404044298
    test 3400 42 42.000000000000 Xi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298

    test 3401 42 42.127628467909 Phi(tan=0.904446, x=0.741652, y=0.670784): 0.900404044298
    test 3402 42 42.031915609918 Beta(tan=0.901413, x=0.742772, y=0.669544): 0.900404044298
    test 3403 42 41.936235990174 Theta(tan=0.898391, x=0.743889, y=0.668303): 0.900404044298
    test 3404 42 41.984065426020 Mu(tan=0.899901, x=0.743331, y=0.668924): 0.900404044298
    test 3405 42 41.936331949525 Chi(tan=0.898394, x=0.743888, y=0.668304): 0.900404044298
    test 3406 42 42.000000000000 Xi(tan=0.900404, x=0.743145, y=0.669131): 0.900404044298

    test 3407 49 49.127002845320 Phi(tan=1.15553, x=1.0, y=1.15553): 1.150368407221
    test 3408 49 49.031764361370 Beta(tan=1.15166, x=1.0, y=1.15166): 1.150368407221
    test 3409 49 48.936481000855 Theta(tan=1.1478, x=1.0, y=1.1478): 1.150368407221
    test 3410 49 48.984136719315 Mu(tan=1.14973, x=0.656268, y=0.754528), iteration=2: 1.150368407221
    test 3411 49 48.936602566380 Chi(tan=1.1478, x=1.0, y=1.1478), iteration=2: 1.150368407221
    test 3412 49 49.000000000000 Xi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221

    test 3413 49 49.127002845320 Phi(tan=1.15553, x=0.654385, y=0.756162): 1.150368407221
    test 3414 49 49.031764361370 Beta(tan=1.15166, x=0.655641, y=0.755073): 1.150368407221
    test 3415 49 48.936481000855 Theta(tan=1.1478, x=0.656895, y=0.753982): 1.150368407221
    test 3416 49 48.984136719315 Mu(tan=1.14973, x=0.656268, y=0.754528): 1.150368407221
    test 3417 49 48.936602566380 Chi(tan=1.1478, x=0.656894, y=0.753983): 1.150368407221
    test 3418 49 49.000000000000 Xi(tan=1.15037, x=0.656059, y=0.75471): 1.150368407221

    test 3419 56 56.118840243467 Phi(tan=1.48921, x=1.0, y=1.48921): 1.482560968513
    test 3420 56 56.029727526967 Beta(tan=1.48422, x=1.0, y=1.48422): 1.482560968513
    test 3421 56 55.940502339654 Theta(tan=1.47925, x=1.0, y=1.47925): 1.482560968513
    test 3422 56 55.985150111604 Mu(tan=1.48173, x=0.559408, y=0.828893), iteration=3: 1.482560968513
    test 3423 56 55.940639698829 Chi(tan=1.47925, x=1.0, y=1.47925), iteration=3: 1.482560968513
    test 3424 56 56.000000000000 Xi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513

    test 3425 56 56.118840243467 Phi(tan=1.48921, x=0.557472, y=0.830196): 1.482560968513
    test 3426 56 56.029727526967 Beta(tan=1.48422, x=0.558763, y=0.829328): 1.482560968513
    test 3427 56 55.940502339654 Theta(tan=1.47925, x=0.560053, y=0.828456): 1.482560968513
    test 3428 56 55.985150111604 Mu(tan=1.48173, x=0.559408, y=0.828893): 1.482560968513
    test 3429 56 55.940639698829 Chi(tan=1.47925, x=0.560052, y=0.828458): 1.482560968513
    test 3430 56 56.000000000000 Xi(tan=1.48256, x=0.559193, y=0.829038): 1.482560968513

    test 3431 63 63.103637615859 Phi(tan=1.97142, x=1.0, y=1.97142): 1.962610505505
    test 3432 63 63.025928337212 Beta(tan=1.96481, x=1.0, y=1.96481): 1.962610505505
    test 3433 63 62.948065314408 Theta(tan=1.95822, x=1.0, y=1.95822): 1.962610505505
    test 3434 63 62.987044924306 Mu(tan=1.96151, x=0.454192, y=0.890904), iteration=3: 1.962610505505
    test 3435 63 62.948203767989 Chi(tan=1.95823, x=1.0, y=1.95823), iteration=3: 1.962610505505
    test 3436 63 63.000000000000 Xi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505

    test 3437 63 63.103637615859 Phi(tan=1.97142, x=0.452378, y=0.891826): 1.962610505505
    test 3438 63 63.025928337212 Beta(tan=1.96481, x=0.453587, y=0.891212): 1.962610505505
    test 3439 63 62.948065314408 Theta(tan=1.95822, x=0.454798, y=0.890595): 1.962610505505
    test 3440 63 62.987044924306 Mu(tan=1.96151, x=0.454192, y=0.890904): 1.962610505505
    test 3441 63 62.948203767989 Chi(tan=1.95823, x=0.454796, y=0.890596): 1.962610505505
    test 3442 63 63.000000000000 Xi(tan=1.96261, x=0.45399, y=0.891007): 1.962610505505

    test 3443 70 70.082305433342 Phi(tan=2.75981, x=1.0, y=2.75981): 2.747477419455
    test 3444 70 70.020593849911 Beta(tan=2.75055, x=1.0, y=2.75055): 2.747477419455
    test 3445 70 69.958723199827 Theta(tan=2.74133, x=1.0, y=2.74133): 2.747477419455
    test 3446 70 69.989708300156 Mu(tan=2.74594, x=0.342189, y=0.939631), iteration=2: 2.747477419455
    test 3447 70 69.958845565244 Chi(tan=2.74135, x=1.0, y=2.74135), iteration=3: 2.747477419455
    test 3448 70 70.000000000000 Xi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455

    test 3449 70 70.082305433342 Phi(tan=2.75981, x=0.34067, y=0.940183): 2.747477419455
    test 3450 70 70.020593849911 Beta(tan=2.75055, x=0.341682, y=0.939815): 2.747477419455
    test 3451 70 69.958723199827 Theta(tan=2.74133, x=0.342697, y=0.939446): 2.747477419455
    test 3452 70 69.989708300156 Mu(tan=2.74594, x=0.342189, y=0.939631): 2.747477419455
    test 3453 70 69.958845565244 Chi(tan=2.74135, x=0.342695, y=0.939447): 2.747477419455
    test 3454 70 70.000000000000 Xi(tan=2.74748, x=0.34202, y=0.939693): 2.747477419455

    test 3455 77 77.056111910623 Phi(tan=4.35091, x=1.0, y=4.35091): 4.331475874284
    test 3456 77 77.014041148140 Beta(tan=4.33632, x=1.0, y=4.33632): 4.331475874284
    test 3457 77 76.971843170758 Theta(tan=4.32179, x=1.0, y=4.32179): 4.331475874284
    test 3458 77 76.992981975049 Mu(tan=4.32906, x=0.22507, y=0.974343), iteration=3: 4.331475874284
    test 3459 77 76.971932900289 Chi(tan=4.32182, x=1.0, y=4.32182), iteration=3: 4.331475874284
    test 3460 77 77.000000000000 Xi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284

    test 3461 77 77.056111910623 Phi(tan=4.35091, x=0.223997, y=0.97459): 4.331475874284
    test 3462 77 77.014041148140 Beta(tan=4.33632, x=0.224712, y=0.974425): 4.331475874284
    test 3463 77 76.971843170758 Theta(tan=4.32179, x=0.22543, y=0.974259): 4.331475874284
    test 3464 77 76.992981975049 Mu(tan=4.32906, x=0.22507, y=0.974343): 4.331475874284
    test 3465 77 76.971932900289 Chi(tan=4.32182, x=0.225428, y=0.97426): 4.331475874284
    test 3466 77 77.000000000000 Xi(tan=4.33148, x=0.224951, y=0.97437): 4.331475874284

    test 3467 84 84.026607472936 Phi(tan=9.55706, x=1.0, y=9.55706): 9.514364454223
    test 3468 84 84.006658466345 Beta(tan=9.52501, x=1.0, y=9.52501): 9.514364454223
    test 3469 84 83.986643815196 Theta(tan=9.49308, x=1.0, y=9.49308): 9.514364454223
    test 3470 84 83.996671688480 Mu(tan=9.50905, x=0.104586, y=0.994516), iteration=2: 9.514364454223
    test 3471 84 83.986688152448 Chi(tan=9.49315, x=1.0, y=9.49315), iteration=3: 9.514364454223
    test 3472 84 84.000000000000 Xi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223

    test 3473 84 84.026607472936 Phi(tan=9.55706, x=0.104067, y=0.99457): 9.514364454223
    test 3474 84 84.006658466345 Beta(tan=9.52501, x=0.104413, y=0.994534): 9.514364454223
    test 3475 84 83.986643815196 Theta(tan=9.49308, x=0.10476, y=0.994498): 9.514364454223
    test 3476 84 83.996671688480 Mu(tan=9.50905, x=0.104586, y=0.994516): 9.514364454223
    test 3477 84 83.986688152448 Chi(tan=9.49315, x=0.10476, y=0.994498): 9.514364454223
    test 3478 84 84.000000000000 Xi(tan=9.51436, x=0.104528, y=0.994522): 9.514364454223

    test 3479 91 90.995533984466 Phi(tan=-57.547, x=-1, y=57.547): -57.289961630759
    test 3480 91 90.998882372785 Beta(tan=-57.3541, x=-1, y=57.3541): -57.289961630759
    test 3481 91 91.002242018525 Theta(tan=-57.1618, x=-1, y=57.1618): -57.289961630759
    test 3482 91 91.000558671809 Mu(tan=-57.258, x=-0.0174622, y=0.999848), iteration=3: -57.289961630759
    test 3483 91 91.002234496198 Chi(tan=-57.1622, x=-1, y=57.1622), iteration=3: -57.289961630759
    test 3484 91 91.000000000000 Xi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759

    test 3485 91 90.995533984466 Phi(tan=-57.547, x=-0.0173745, y=0.999849): -57.289961630759
    test 3486 91 90.998882372785 Beta(tan=-57.3541, x=-0.0174329, y=0.999848): -57.289961630759
    test 3487 91 91.002242018525 Theta(tan=-57.1618, x=-0.0174915, y=0.999847): -57.289961630759
    test 3488 91 91.000558671809 Mu(tan=-57.258, x=-0.0174622, y=0.999848): -57.289961630759
    test 3489 91 91.002234496198 Chi(tan=-57.1622, x=-0.0174914, y=0.999847): -57.289961630759
    test 3490 91 91.000000000000 Xi(tan=-57.29, x=-0.0174524, y=0.999848): -57.289961630759

    test 3491 98 97.964723816165 Phi(tan=-7.1473, x=-1, y=7.1473): -7.115369722384
    test 3492 98 97.991172305797 Beta(tan=-7.12333, x=-1, y=7.12333): -7.115369722384
    test 3493 98 98.017706325759 Theta(tan=-7.09945, x=-1, y=7.09945): -7.115369722384
    test 3494 98 98.004412544182 Mu(tan=-7.1114, x=-0.139249, y=0.990257), iteration=3: -7.115369722384
    test 3495 98 98.017648048185 Chi(tan=-7.0995, x=-1, y=7.0995), iteration=3: -7.115369722384
    test 3496 98 98.000000000000 Xi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384

    test 3497 98 97.964723816165 Phi(tan=-7.1473, x=-0.138563, y=0.990354): -7.115369722384
    test 3498 98 97.991172305797 Beta(tan=-7.12333, x=-0.139021, y=0.990289): -7.115369722384
    test 3499 98 98.017706325759 Theta(tan=-7.09945, x=-0.139479, y=0.990225): -7.115369722384
    test 3500 98 98.004412544182 Mu(tan=-7.1114, x=-0.139249, y=0.990257): -7.115369722384
    test 3501 98 98.017648048185 Chi(tan=-7.0995, x=-0.139478, y=0.990225): -7.115369722384
    test 3502 98 98.000000000000 Xi(tan=-7.11537, x=-0.139173, y=0.990268): -7.115369722384

    test 3503 105 104.935994159741 Phi(tan=-3.7488, x=-1, y=3.7488): -3.732050807569
    test 3504 105 104.983983867222 Beta(tan=-3.73623, x=-1, y=3.73623): -3.732050807569
    test 3505 105 105.032113400902 Theta(tan=-3.7237, x=-1, y=3.7237): -3.732050807569
    test 3506 105 105.008004873422 Mu(tan=-3.72997, x=-0.258954, y=0.96589), iteration=3: -3.732050807569
    test 3507 105 105.032012824358 Chi(tan=-3.72373, x=-1, y=3.72373), iteration=3: -3.732050807569
    test 3508 105 105.000000000000 Xi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569

    test 3509 105 104.935994159741 Phi(tan=-3.7488, x=-0.25774, y=0.966214): -3.732050807569
    test 3510 105 104.983983867222 Beta(tan=-3.73623, x=-0.258549, y=0.965998): -3.732050807569
    test 3511 105 105.032113400902 Theta(tan=-3.7237, x=-0.25936, y=0.965781): -3.732050807569
    test 3512 105 105.008004873422 Mu(tan=-3.72997, x=-0.258954, y=0.96589): -3.732050807569
    test 3513 105 105.032012824358 Chi(tan=-3.72373, x=-0.259359, y=0.965781): -3.732050807569
    test 3514 105 105.000000000000 Xi(tan=-3.73205, x=-0.258819, y=0.965926): -3.732050807569

    test 3515 112 111.911042136698 Phi(tan=-2.48619, x=-1, y=2.48619): -2.475086853416
    test 3516 112 111.977742323906 Beta(tan=-2.47786, x=-1, y=2.47786): -2.475086853416
    test 3517 112 112.044603965311 Theta(tan=-2.46955, x=-1, y=2.46955): -2.475086853416
    test 3518 112 112.011122625415 Mu(tan=-2.4737, x=-0.374787, y=0.927111), iteration=3: -2.475086853416
    test 3519 112 112.044475225333 Chi(tan=-2.46957, x=-1, y=2.46957), iteration=3: -2.475086853416
    test 3520 112 112.000000000000 Xi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416

    test 3521 112 111.911042136698 Phi(tan=-2.48619, x=-0.373167, y=0.927764): -2.475086853416
    test 3522 112 111.977742323906 Beta(tan=-2.47786, x=-0.374246, y=0.927329): -2.475086853416
    test 3523 112 112.044603965311 Theta(tan=-2.46955, x=-0.375328, y=0.926892): -2.475086853416
    test 3524 112 112.011122625415 Mu(tan=-2.4737, x=-0.374787, y=0.927111): -2.475086853416
    test 3525 112 112.044475225333 Chi(tan=-2.46957, x=-0.375326, y=0.926893): -2.475086853416
    test 3526 112 112.000000000000 Xi(tan=-2.47509, x=-0.374607, y=0.927184): -2.475086853416

    test 3527 119 118.891346228069 Phi(tan=-1.81214, x=-1, y=1.81214): -1.804047755271
    test 3528 119 118.972817760312 Beta(tan=-1.80607, x=-1, y=1.80607): -1.804047755271
    test 3529 119 119.054434637080 Theta(tan=-1.80001, x=-1, y=1.80001): -1.804047755271
    test 3530 119 119.013580731176 Mu(tan=-1.80304, x=-0.485017, y=0.874505), iteration=3: -1.804047755271
    test 3531 119 119.054294796723 Chi(tan=-1.80002, x=-1, y=1.80002), iteration=3: -1.804047755271
    test 3532 119 119.000000000000 Xi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271

    test 3533 119 118.891346228069 Phi(tan=-1.81214, x=-0.48315, y=0.875538): -1.804047755271
    test 3534 119 118.972817760312 Beta(tan=-1.80607, x=-0.484395, y=0.87485): -1.804047755271
    test 3535 119 119.054434637080 Theta(tan=-1.80001, x=-0.48564, y=0.874159): -1.804047755271
    test 3536 119 119.013580731176 Mu(tan=-1.80304, x=-0.485017, y=0.874505): -1.804047755271
    test 3537 119 119.054294796723 Chi(tan=-1.80002, x=-0.485638, y=0.87416): -1.804047755271
    test 3538 119 119.000000000000 Xi(tan=-1.80405, x=-0.48481, y=0.87462): -1.804047755271

    test 3539 126 125.878079358159 Phi(tan=-1.38256, x=-1, y=1.38256): -1.376381920471
    test 3540 126 125.969503261502 Beta(tan=-1.37792, x=-1, y=1.37792): -1.376381920471
    test 3541 126 126.061022406195 Theta(tan=-1.3733, x=-1, y=1.3733): -1.376381920471
    test 3542 126 126.015233045717 Mu(tan=-1.37561, x=-0.588, y=0.808861), iteration=3: -1.376381920471
    test 3543 126 126.060888237156 Chi(tan=-1.37331, x=-1, y=1.37331), iteration=2: -1.376381920471
    test 3544 126 126.000000000000 Xi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471

    test 3545 126 125.878079358159 Phi(tan=-1.38256, x=-0.586062, y=0.810266): -1.376381920471
    test 3546 126 125.969503261502 Beta(tan=-1.37792, x=-0.587355, y=0.80933): -1.376381920471
    test 3547 126 126.061022406195 Theta(tan=-1.3733, x=-0.588647, y=0.808391): -1.376381920471
    test 3548 126 126.015233045717 Mu(tan=-1.37561, x=-0.588, y=0.808861): -1.376381920471
    test 3549 126 126.060888237156 Chi(tan=-1.37331, x=-0.588645, y=0.808392): -1.376381920471
    test 3550 126 126.000000000000 Xi(tan=-1.37638, x=-0.587785, y=0.809017): -1.376381920471

    test 3551 133 132.872038576251 Phi(tan=-1.07718, x=-1, y=1.07718): -1.072368710025
    test 3552 133 132.967997382278 Beta(tan=-1.07357, x=-1, y=1.07357): -1.072368710025
    test 3553 133 133.063979030656 Theta(tan=-1.06997, x=-1, y=1.06997): -1.072368710025
    test 3554 133 133.015981056163 Mu(tan=-1.07177, x=-0.682202, y=0.731163), iteration=2: -1.072368710025
    test 3555 133 133.063864035301 Chi(tan=-1.06998, x=-1, y=1.06998), iteration=3: -1.072368710025
    test 3556 133 133.000000000000 Xi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025

    test 3557 133 132.872038576251 Phi(tan=-1.07718, x=-0.680363, y=0.732875): -1.072368710025
    test 3558 133 132.967997382278 Beta(tan=-1.07357, x=-0.68159, y=0.731735): -1.072368710025
    test 3559 133 133.063979030656 Theta(tan=-1.06997, x=-0.682815, y=0.730592): -1.072368710025
    test 3560 133 133.015981056163 Mu(tan=-1.07177, x=-0.682202, y=0.731163): -1.072368710025
    test 3561 133 133.063864035301 Chi(tan=-1.06998, x=-0.682813, y=0.730593): -1.072368710025
    test 3562 133 133.000000000000 Xi(tan=-1.07237, x=-0.681998, y=0.731354): -1.072368710025

    test 3563 140 139.873595650901 Phi(tan=-0.842866, x=-1, y=0.842866): -0.839099631177
    test 3564 140 139.968391970048 Beta(tan=-0.84004, x=-1, y=0.84004): -0.839099631177
    test 3565 140 140.063133367178 Theta(tan=-0.837224, x=-1, y=0.837224): -0.839099631177
    test 3566 140 140.015779815968 Mu(tan=-0.83863, x=-0.766221, y=0.642577), iteration=3: -0.839099631177
    test 3567 140 140.063045682360 Chi(tan=-0.837226, x=-1, y=0.837226), iteration=2: -0.839099631177
    test 3568 140 140.000000000000 Xi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177

    test 3569 140 139.873595650901 Phi(tan=-0.842866, x=-0.764624, y=0.644476): -0.839099631177
    test 3570 140 139.968391970048 Beta(tan=-0.84004, x=-0.76569, y=0.64321): -0.839099631177
    test 3571 140 140.063133367178 Theta(tan=-0.837224, x=-0.766752, y=0.641943): -0.839099631177
    test 3572 140 140.015779815968 Mu(tan=-0.83863, x=-0.766221, y=0.642577): -0.839099631177
    test 3573 140 140.063045682360 Chi(tan=-0.837226, x=-0.766751, y=0.641944): -0.839099631177
    test 3574 140 140.000000000000 Xi(tan=-0.8391, x=-0.766044, y=0.642788): -0.839099631177

    test 3575 147 146.882671979706 Phi(tan=-0.652323, x=-1, y=0.652323): -0.649407593198
    test 3576 147 146.970666152106 Beta(tan=-0.650136, x=-1, y=0.650136): -0.649407593198
    test 3577 147 147.058540482739 Theta(tan=-0.647956, x=-1, y=0.647956): -0.649407593198
    test 3578 147 147.014640733824 Mu(tan=-0.649044, x=-0.83881, y=0.544425), iteration=2: -0.649407593198
    test 3579 147 147.058482092364 Chi(tan=-0.647957, x=-1, y=0.647957), iteration=3: -0.649407593198
    test 3580 147 147.000000000000 Xi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198

    test 3581 147 146.882671979706 Phi(tan=-0.652323, x=-0.837554, y=0.546355): -0.649407593198
    test 3582 147 146.970666152106 Beta(tan=-0.650136, x=-0.838392, y=0.545068): -0.649407593198
    test 3583 147 147.058540482739 Theta(tan=-0.647956, x=-0.839227, y=0.543782): -0.649407593198
    test 3584 147 147.014640733824 Mu(tan=-0.649044, x=-0.83881, y=0.544425): -0.649407593198
    test 3585 147 147.058482092364 Chi(tan=-0.647957, x=-0.839226, y=0.543783): -0.649407593198
    test 3586 147 147.000000000000 Xi(tan=-0.649408, x=-0.838671, y=0.544639): -0.649407593198

    test 3587 154 153.898740000769 Phi(tan=-0.489922, x=-1, y=0.489922): -0.487732588566
    test 3588 154 153.974686973605 Beta(tan=-0.48828, x=-1, y=0.48828): -0.487732588566
    test 3589 154 154.050477253377 Theta(tan=-0.486642, x=-1, y=0.486642): -0.487732588566
    test 3590 154 154.012631023956 Mu(tan=-0.48746, x=-0.898891, y=0.438173), iteration=3: -0.487732588566
    test 3591 154 154.050444626907 Chi(tan=-0.486643, x=-1, y=0.486643), iteration=2: -0.487732588566
    test 3592 154 154.000000000000 Xi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566

    test 3593 154 153.898740000769 Phi(tan=-0.489922, x=-0.898018, y=0.439959): -0.487732588566
    test 3594 154 153.974686973605 Beta(tan=-0.48828, x=-0.8986, y=0.438768): -0.487732588566
    test 3595 154 154.050477253377 Theta(tan=-0.486642, x=-0.89918, y=0.437579): -0.487732588566
    test 3596 154 154.012631023956 Mu(tan=-0.48746, x=-0.898891, y=0.438173): -0.487732588566
    test 3597 154 154.050444626907 Chi(tan=-0.486643, x=-0.89918, y=0.43758): -0.487732588566
    test 3598 154 154.000000000000 Xi(tan=-0.487733, x=-0.898794, y=0.438371): -0.487732588566

    test 3599 161 160.920851786649 Phi(tan=-0.345874, x=-1, y=0.345874): -0.344327613290
    test 3600 161 160.980216789536 Beta(tan=-0.344714, x=-1, y=0.344714): -0.344327613290
    test 3601 161 161.039424975997 Theta(tan=-0.343558, x=-1, y=0.343558): -0.344327613290
    test 3602 161 161.009869820426 Mu(tan=-0.344135, x=-0.945575, y=0.325405), iteration=3: -0.344327613290
    test 3603 161 161.039410917225 Chi(tan=-0.343558, x=-1, y=0.343558), iteration=3: -0.344327613290
    test 3604 161 161.000000000000 Xi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290

    test 3605 161 160.920851786649 Phi(tan=-0.345874, x=-0.945068, y=0.326874): -0.344327613290
    test 3606 161 160.980216789536 Beta(tan=-0.344714, x=-0.945406, y=0.325895): -0.344327613290
    test 3607 161 161.039424975997 Theta(tan=-0.343558, x=-0.945742, y=0.324917): -0.344327613290
    test 3608 161 161.009869820426 Mu(tan=-0.344135, x=-0.945575, y=0.325405): -0.344327613290
    test 3609 161 161.039410917225 Chi(tan=-0.343558, x=-0.945742, y=0.324918): -0.344327613290
    test 3610 161 161.000000000000 Xi(tan=-0.344328, x=-0.945519, y=0.325568): -0.344327613290

    test 3611 168 167.947693775816 Phi(tan=-0.213511, x=-1, y=0.213511): -0.212556561670
    test 3612 168 167.986927091791 Beta(tan=-0.212795, x=-1, y=0.212795): -0.212556561670
    test 3613 168 168.026040245291 Theta(tan=-0.212082, x=-1, y=0.212082): -0.212556561670
    test 3614 168 168.006521160939 Mu(tan=-0.212438, x=-0.978171, y=0.2078), iteration=3: -0.212556561670
    test 3615 168 168.026036457648 Chi(tan=-0.212082, x=-1, y=0.212082), iteration=3: -0.212556561670
    test 3616 168 168.000000000000 Xi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670

    test 3617 168 167.947693775816 Phi(tan=-0.213511, x=-0.977957, y=0.208805): -0.212556561670
    test 3618 168 167.986927091791 Beta(tan=-0.212795, x=-0.9781, y=0.208135): -0.212556561670
    test 3619 168 168.026040245291 Theta(tan=-0.212082, x=-0.978242, y=0.207467): -0.212556561670
    test 3620 168 168.006521160939 Mu(tan=-0.212438, x=-0.978171, y=0.2078): -0.212556561670
    test 3621 168 168.026036457648 Chi(tan=-0.212082, x=-0.978242, y=0.207467): -0.212556561670
    test 3622 168 168.000000000000 Xi(tan=-0.212557, x=-0.978148, y=0.207912): -0.212556561670

    test 3623 175 174.977664774563 Phi(tan=-0.0878815, x=-1, y=0.0878815): -0.087488663526
    test 3624 175 174.994418020079 Beta(tan=-0.0875868, x=-1, y=0.0875868): -0.087488663526
    test 3625 175 175.011115948983 Theta(tan=-0.0872932, x=-1, y=0.0872932): -0.087488663526
    test 3626 175 175.002784242316 Mu(tan=-0.0874397, x=-0.996199, y=0.0871073), iteration=3: -0.087488663526
    test 3627 175 175.011115664833 Chi(tan=-0.0872932, x=-1, y=0.0872932), iteration=2: -0.087488663526
    test 3628 175 175.000000000000 Xi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526

    test 3629 175 174.977664774563 Phi(tan=-0.0878815, x=-0.996161, y=0.0875441): -0.087488663526
    test 3630 175 174.994418020079 Beta(tan=-0.0875868, x=-0.996186, y=0.0872528): -0.087488663526
    test 3631 175 175.011115948983 Theta(tan=-0.0872932, x=-0.996212, y=0.0869625): -0.087488663526
    test 3632 175 175.002784242316 Mu(tan=-0.0874397, x=-0.996199, y=0.0871073): -0.087488663526
    test 3633 175 175.011115664833 Chi(tan=-0.0872932, x=-0.996212, y=0.0869625): -0.087488663526
    test 3634 175 175.000000000000 Xi(tan=-0.0874887, x=-0.996195, y=0.0871557): -0.087488663526

    test 3635 182 182.008972613463 Phi(tan=0.0350776, x=-1, y=-0.0350776): 0.034920769492
    test 3636 182 182.002242400308 Beta(tan=0.03496, x=-1, y=-0.03496): 0.034920769492
    test 3637 182 181.995534697284 Theta(tan=0.0348427, x=-1, y=-0.0348427): 0.034920769492
    test 3638 182 181.998881526172 Mu(tan=0.0349012, x=-0.999392, y=-0.03488), iteration=3: 0.034920769492
    test 3639 182 181.995534715586 Chi(tan=0.0348427, x=-1, y=-0.0348427), iteration=2: 0.034920769492
    test 3640 182 182.000000000000 Xi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492

    test 3641 182 182.008972613463 Phi(tan=0.0350776, x=-0.999385, y=-0.035056): 0.034920769492
    test 3642 182 182.002242400308 Beta(tan=0.03496, x=-0.999389, y=-0.0349386): 0.034920769492
    test 3643 182 181.995534697284 Theta(tan=0.0348427, x=-0.999394, y=-0.0348216): 0.034920769492
    test 3644 182 181.998881526172 Mu(tan=0.0349012, x=-0.999392, y=-0.03488): 0.034920769492
    test 3645 182 181.995534715586 Chi(tan=0.0348427, x=-0.999394, y=-0.0348216): 0.034920769492
    test 3646 182 182.000000000000 Xi(tan=0.0349208, x=-0.999391, y=-0.0348995): 0.034920769492

    test 3647 189 189.039743358381 Phi(tan=0.159096, x=-1, y=-0.159096): 0.158384440325
    test 3648 189 189.009932816166 Beta(tan=0.158562, x=-1, y=-0.158562): 0.158384440325
    test 3649 189 188.980217328283 Theta(tan=0.158031, x=-1, y=-0.158031): 0.158384440325
    test 3650 189 188.995045415532 Mu(tan=0.158296, x=-0.987702, y=-0.156349), iteration=3: 0.158384440325
    test 3651 189 188.980218957347 Chi(tan=0.158031, x=-1, y=-0.158031), iteration=3: 0.158384440325
    test 3652 189 189.000000000000 Xi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325

    test 3653 189 189.039743358381 Phi(tan=0.159096, x=-0.98758, y=-0.15712): 0.158384440325
    test 3654 189 189.009932816166 Beta(tan=0.158562, x=-0.987661, y=-0.156606): 0.158384440325
    test 3655 189 188.980217328283 Theta(tan=0.158031, x=-0.987742, y=-0.156093): 0.158384440325
    test 3656 189 188.995045415532 Mu(tan=0.158296, x=-0.987702, y=-0.156349): 0.158384440325
    test 3657 189 188.980218957347 Chi(tan=0.158031, x=-0.987742, y=-0.156093): 0.158384440325
    test 3658 189 189.000000000000 Xi(tan=0.158384, x=-0.987688, y=-0.156434): 0.158384440325

    test 3659 196 196.068135937668 Phi(tan=0.288033, x=-1, y=-0.288033): 0.286745385759
    test 3660 196 196.017029985937 Beta(tan=0.287067, x=-1, y=-0.287067): 0.286745385759
    test 3661 196 195.966069329052 Theta(tan=0.286105, x=-1, y=-0.286105): 0.286745385759
    test 3662 196 195.991504319198 Mu(tan=0.286585, x=-0.961303, y=-0.275495), iteration=3: 0.286745385759
    test 3663 196 195.966078002587 Chi(tan=0.286105, x=-1, y=-0.286105), iteration=3: 0.286745385759
    test 3664 196 196.000000000000 Xi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759

    test 3665 196 196.068135937668 Phi(tan=0.288033, x=-0.960933, y=-0.27678): 0.286745385759
    test 3666 196 196.017029985937 Beta(tan=0.287067, x=-0.96118, y=-0.275923): 0.286745385759
    test 3667 196 195.966069329052 Theta(tan=0.286105, x=-0.961425, y=-0.275068): 0.286745385759
    test 3668 196 195.991504319198 Mu(tan=0.286585, x=-0.961303, y=-0.275495): 0.286745385759
    test 3669 196 195.966078002587 Chi(tan=0.286105, x=-0.961425, y=-0.275068): 0.286745385759
    test 3670 196 196.000000000000 Xi(tan=0.286745, x=-0.961262, y=-0.275637): 0.286745385759

    test 3671 203 203.092454589560 Phi(tan=0.426381, x=-1, y=-0.426381): 0.424474816210
    test 3672 203 203.023110614245 Beta(tan=0.424951, x=-1, y=-0.424951): 0.424474816210
    test 3673 203 202.953928092744 Theta(tan=0.423526, x=-1, y=-0.423526): 0.424474816210
    test 3674 203 202.988468962214 Mu(tan=0.424237, x=-0.920583, y=-0.390546), iteration=2: 0.424474816210
    test 3675 203 202.953951753533 Chi(tan=0.423527, x=-1, y=-0.423527), iteration=2: 0.424474816210
    test 3676 203 203.000000000000 Xi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210

    test 3677 203 203.092454589560 Phi(tan=0.426381, x=-0.919873, y=-0.392216): 0.424474816210
    test 3678 203 203.023110614245 Beta(tan=0.424951, x=-0.920347, y=-0.391102): 0.424474816210
    test 3679 203 202.953928092744 Theta(tan=0.423526, x=-0.920819, y=-0.389991): 0.424474816210
    test 3680 203 202.988468962214 Mu(tan=0.424237, x=-0.920583, y=-0.390546): 0.424474816210
    test 3681 203 202.953951753533 Chi(tan=0.423527, x=-0.920819, y=-0.389991): 0.424474816210
    test 3682 203 203.000000000000 Xi(tan=0.424475, x=-0.920505, y=-0.390731): 0.424474816210

    test 3683 210 210.111251718648 Phi(tan=0.579942, x=-1, y=-0.579942): 0.577350269190
    test 3684 210 210.027812929728 Beta(tan=0.577998, x=-1, y=-0.577998): 0.577350269190
    test 3685 210 209.944513899906 Theta(tan=0.57606, x=-1, y=-0.57606): 0.577350269190
    test 3686 210 209.986119784065 Mu(tan=0.577027, x=-0.866147, y=-0.49979), iteration=3: 0.577350269190
    test 3687 210 209.944560549356 Chi(tan=0.576061, x=-1, y=-0.576061), iteration=3: 0.577350269190
    test 3688 210 210.000000000000 Xi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190

    test 3689 210 210.111251718648 Phi(tan=0.579942, x=-0.865053, y=-0.501681): 0.577350269190
    test 3690 210 210.027812929728 Beta(tan=0.577998, x=-0.865783, y=-0.50042): 0.577350269190
    test 3691 210 209.944513899906 Theta(tan=0.57606, x=-0.866509, y=-0.499161): 0.577350269190
    test 3692 210 209.986119784065 Mu(tan=0.577027, x=-0.866147, y=-0.49979): 0.577350269190
    test 3693 210 209.944560549356 Chi(tan=0.576061, x=-0.866509, y=-0.499162): 0.577350269190
    test 3694 210 210.000000000000 Xi(tan=0.57735, x=-0.866025, y=-0.5): 0.577350269190

    test 3695 217 217.123414552554 Phi(tan=0.756937, x=-1, y=-0.756937): 0.753554050103
    test 3696 217 217.030858299580 Beta(tan=0.754399, x=-1, y=-0.754399): 0.753554050103
    test 3697 217 216.938387365618 Theta(tan=0.751869, x=-1, y=-0.751869): 0.753554050103
    test 3698 217 216.984596192751 Mu(tan=0.753133, x=-0.798797, y=-0.6016), iteration=3: 0.753554050103
    test 3699 217 216.938462387195 Chi(tan=0.751871, x=-1, y=-0.751871), iteration=3: 0.753554050103
    test 3700 217 217.000000000000 Xi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103

    test 3701 217 217.123414552554 Phi(tan=0.756937, x=-0.797337, y=-0.603534): 0.753554050103
    test 3702 217 217.030858299580 Beta(tan=0.754399, x=-0.798311, y=-0.602245): 0.753554050103
    test 3703 217 216.938387365618 Theta(tan=0.751869, x=-0.799282, y=-0.600956): 0.753554050103
    test 3704 217 216.984596192751 Mu(tan=0.753133, x=-0.798797, y=-0.6016): 0.753554050103
    test 3705 217 216.938462387195 Chi(tan=0.751871, x=-0.799281, y=-0.600957): 0.753554050103
    test 3706 217 217.000000000000 Xi(tan=0.753554, x=-0.798636, y=-0.601815): 0.753554050103

    test 3707 224 224.128230303258 Phi(tan=0.970023, x=-1, y=-0.970023): 0.965688774807
    test 3708 224 224.032067609230 Beta(tan=0.966771, x=-1, y=-0.966771): 0.965688774807
    test 3709 224 223.935915824293 Theta(tan=0.96353, x=-1, y=-0.96353): 0.965688774807
    test 3710 224 223.983988319148 Mu(tan=0.965149, x=-0.719534, y=-0.694457), iteration=3: 0.965688774807
    test 3711 224 223.936019754646 Chi(tan=0.963533, x=-1, y=-0.963533), iteration=3: 0.965688774807
    test 3712 224 224.000000000000 Xi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807

    test 3713 224 224.128230303258 Phi(tan=0.970023, x=-0.717783, y=-0.696267): 0.965688774807
    test 3714 224 224.032067609230 Beta(tan=0.966771, x=-0.718951, y=-0.695061): 0.965688774807
    test 3715 224 223.935915824293 Theta(tan=0.96353, x=-0.720116, y=-0.693853): 0.965688774807
    test 3716 224 223.983988319148 Mu(tan=0.965149, x=-0.719534, y=-0.694457): 0.965688774807
    test 3717 224 223.936019754646 Chi(tan=0.963533, x=-0.720115, y=-0.693855): 0.965688774807
    test 3718 224 224.000000000000 Xi(tan=0.965689, x=-0.71934, y=-0.694658): 0.965688774807

    test 3719 231 231.125426196540 Phi(tan=1.24044, x=-1, y=-1.24044): 1.234897156535
    test 3720 231 231.031371476626 Beta(tan=1.23628, x=-1, y=-1.23628): 1.234897156535
    test 3721 231 230.937250720782 Theta(tan=1.23214, x=-1, y=-1.23214): 1.234897156535
    test 3722 231 230.984331752747 Mu(tan=1.23421, x=-0.629533, y=-0.776974), iteration=3: 1.234897156535
    test 3723 231 230.937378047856 Chi(tan=1.23214, x=-1, y=-1.23214), iteration=2: 1.234897156535
    test 3724 231 231.000000000000 Xi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535

    test 3725 231 231.125426196540 Phi(tan=1.24044, x=-0.627618, y=-0.778522): 1.234897156535
    test 3726 231 231.031371476626 Beta(tan=1.23628, x=-0.628895, y=-0.77749): 1.234897156535
    test 3727 231 230.937250720782 Theta(tan=1.23214, x=-0.630171, y=-0.776456): 1.234897156535
    test 3728 231 230.984331752747 Mu(tan=1.23421, x=-0.629533, y=-0.776974): 1.234897156535
    test 3729 231 230.937378047856 Chi(tan=1.23214, x=-0.630169, y=-0.776458): 1.234897156535
    test 3730 231 231.000000000000 Xi(tan=1.2349, x=-0.62932, y=-0.777146): 1.234897156535

    test 3731 238 238.115182546420 Phi(tan=1.60752, x=-1, y=-1.60752): 1.600334529041
    test 3732 238 238.028813796136 Beta(tan=1.60213, x=-1, y=-1.60213): 1.600334529041
    test 3733 238 237.942317534000 Theta(tan=1.59676, x=-1, y=-1.59676): 1.600334529041
    test 3734 238 237.985605550109 Mu(tan=1.59944, x=-0.530132, y=-0.847915), iteration=3: 1.600334529041
    test 3735 238 237.942456867934 Chi(tan=1.59676, x=-1, y=-1.59676), iteration=3: 1.600334529041
    test 3736 238 238.000000000000 Xi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041

    test 3737 238 238.115182546420 Phi(tan=1.60752, x=-0.528213, y=-0.849112): 1.600334529041
    test 3738 238 238.028813796136 Beta(tan=1.60213, x=-0.529493, y=-0.848314): 1.600334529041
    test 3739 238 237.942317534000 Theta(tan=1.59676, x=-0.530773, y=-0.847514): 1.600334529041
    test 3740 238 237.985605550109 Mu(tan=1.59944, x=-0.530132, y=-0.847915): 1.600334529041
    test 3741 238 237.942456867934 Chi(tan=1.59676, x=-0.530771, y=-0.847515): 1.600334529041
    test 3742 238 238.000000000000 Xi(tan=1.60033, x=-0.529919, y=-0.848048): 1.600334529041

    test 3743 245 245.098118836759 Phi(tan=2.15413, x=-1, y=-2.15413): 2.144506920510
    test 3744 245 245.024548537731 Beta(tan=2.14691, x=-1, y=-2.14691): 2.144506920510
    test 3745 245 244.950819083860 Theta(tan=2.13971, x=-1, y=-2.13971): 2.144506920510
    test 3746 245 244.987733605483 Mu(tan=2.14331, x=-0.422812, y=-0.906217), iteration=3: 2.144506920510
    test 3747 245 244.950954727954 Chi(tan=2.13972, x=-1, y=-2.13972), iteration=2: 2.144506920510
    test 3748 245 245.000000000000 Xi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510

    test 3749 245 245.098118836759 Phi(tan=2.15413, x=-0.421066, y=-0.90703): 2.144506920510
    test 3750 245 245.024548537731 Beta(tan=2.14691, x=-0.42223, y=-0.906489): 2.144506920510
    test 3751 245 244.950819083860 Theta(tan=2.13971, x=-0.423396, y=-0.905945): 2.144506920510
    test 3752 245 244.987733605483 Mu(tan=2.14331, x=-0.422812, y=-0.906217): 2.144506920510
    test 3753 245 244.950954727954 Chi(tan=2.13972, x=-0.423394, y=-0.905946): 2.144506920510
    test 3754 245 245.000000000000 Xi(tan=2.14451, x=-0.422618, y=-0.906308): 2.144506920510

    test 3755 252 252.075254383698 Phi(tan=3.09149, x=-1, y=-3.09149): 3.077683537175
    test 3756 252 252.018830129897 Beta(tan=3.08113, x=-1, y=-3.08113): 3.077683537175
    test 3757 252 251.962252287555 Theta(tan=3.0708, x=-1, y=-3.0708): 3.077683537175
    test 3758 252 251.990589272651 Mu(tan=3.07596, x=-0.309173, y=-0.951006), iteration=2: 3.077683537175
    test 3759 252 251.962366907267 Chi(tan=3.07082, x=-1, y=-3.07082), iteration=3: 3.077683537175
    test 3760 252 252.000000000000 Xi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175

    test 3761 252 252.075254383698 Phi(tan=3.09149, x=-0.307768, y=-0.951462): 3.077683537175
    test 3762 252 252.018830129897 Beta(tan=3.08113, x=-0.308704, y=-0.951158): 3.077683537175
    test 3763 252 251.962252287555 Theta(tan=3.0708, x=-0.309644, y=-0.950853): 3.077683537175
    test 3764 252 251.990589272651 Mu(tan=3.07596, x=-0.309173, y=-0.951006): 3.077683537175
    test 3765 252 251.962366907267 Chi(tan=3.07082, x=-0.309642, y=-0.950853): 3.077683537175
    test 3766 252 252.000000000000 Xi(tan=3.07768, x=-0.309017, y=-0.951057): 3.077683537175

    test 3767 259 259.047946497885 Phi(tan=5.16764, x=-1, y=-5.16764): 5.144554015970
    test 3768 259 259.011998105898 Beta(tan=5.15031, x=-1, y=-5.15031): 5.144554015970
    test 3769 259 258.975937580981 Theta(tan=5.13304, x=-1, y=-5.13304): 5.144554015970
    test 3770 259 258.994002940120 Mu(tan=5.14168, x=-0.190912, y=-0.981607), iteration=3: 5.144554015970
    test 3771 259 258.976015406086 Chi(tan=5.13308, x=-1, y=-5.13308), iteration=3: 5.144554015970
    test 3772 259 259.000000000000 Xi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970

    test 3773 259 259.047946497885 Phi(tan=5.16764, x=-0.189987, y=-0.981787): 5.144554015970
    test 3774 259 259.011998105898 Beta(tan=5.15031, x=-0.190603, y=-0.981667): 5.144554015970
    test 3775 259 258.975937580981 Theta(tan=5.13304, x=-0.191221, y=-0.981547): 5.144554015970
    test 3776 259 258.994002940120 Mu(tan=5.14168, x=-0.190912, y=-0.981607): 5.144554015970
    test 3777 259 258.976015406086 Chi(tan=5.13308, x=-0.19122, y=-0.981547): 5.144554015970
    test 3778 259 259.000000000000 Xi(tan=5.14455, x=-0.190809, y=-0.981627): 5.144554015970

    test 3779 266 266.017810106930 Phi(tan=14.3648, x=-1, y=-14.3648): 14.300666256712
    test 3780 266 266.004456979343 Beta(tan=14.3167, x=-1, y=-14.3167): 14.300666256712
    test 3781 266 265.991059367560 Theta(tan=14.2687, x=-1, y=-14.2687): 14.300666256712
    test 3782 266 265.997772097900 Mu(tan=14.2927, x=-0.0697953, y=-0.997561), iteration=2: 14.300666256712
    test 3783 266 265.991089228290 Chi(tan=14.2688, x=-1, y=-14.2688), iteration=3: 14.300666256712
    test 3784 266 266.000000000000 Xi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712

    test 3785 266 266.017810106930 Phi(tan=14.3648, x=-0.0694464, y=-0.997586): 14.300666256712
    test 3786 266 266.004456979343 Beta(tan=14.3167, x=-0.0696789, y=-0.997569): 14.300666256712
    test 3787 266 265.991059367560 Theta(tan=14.2687, x=-0.0699121, y=-0.997553): 14.300666256712
    test 3788 266 265.997772097900 Mu(tan=14.2927, x=-0.0697953, y=-0.997561): 14.300666256712
    test 3789 266 265.991089228290 Chi(tan=14.2688, x=-0.0699116, y=-0.997553): 14.300666256712
    test 3790 266 266.000000000000 Xi(tan=14.3007, x=-0.0697565, y=-0.997564): 14.300666256712

    test 3791 273 272.986623544405 Phi(tan=-19.1668, x=1.0, y=-19.1668): -19.081136687728
    test 3792 273 272.996652532418 Beta(tan=-19.1025, x=1.0, y=-19.1025): -19.081136687728
    test 3793 273 273.006715074128 Theta(tan=-19.0384, x=1.0, y=-19.0384): -19.081136687728
    test 3794 273 273.001673300226 Mu(tan=-19.0705, x=0.0523651, y=-0.998628), iteration=2: -19.081136687728
    test 3795 273 273.006692598711 Chi(tan=-19.0386, x=1.0, y=-19.0386), iteration=3: -19.081136687728
    test 3796 273 273.000000000000 Xi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728

    test 3797 273 272.986623544405 Phi(tan=-19.1668, x=0.0521028, y=-0.998642): -19.081136687728
    test 3798 273 272.996652532418 Beta(tan=-19.1025, x=0.0522776, y=-0.998633): -19.081136687728
    test 3799 273 273.006715074128 Theta(tan=-19.0384, x=0.052453, y=-0.998623): -19.081136687728
    test 3800 273 273.001673300226 Mu(tan=-19.0705, x=0.0523651, y=-0.998628): -19.081136687728
    test 3801 273 273.006692598711 Chi(tan=-19.0386, x=0.0524526, y=-0.998623): -19.081136687728
    test 3802 273 273.000000000000 Xi(tan=-19.0811, x=0.052336, y=-0.99863): -19.081136687728

    test 3803 280 279.956225698278 Phi(tan=-5.69673, x=1.0, y=-5.69673): -5.671281819618
    test 3804 280 279.989045850720 Beta(tan=-5.67763, x=1.0, y=-5.67763): -5.671281819618
    test 3805 280 280.021969758476 Theta(tan=-5.65859, x=1.0, y=-5.65859): -5.671281819618
    test 3806 280 280.005475329461 Mu(tan=-5.66811, x=0.173742, y=-0.984791), iteration=3: -5.671281819618
    test 3807 280 280.021898241655 Chi(tan=-5.65863, x=1.0, y=-5.65863), iteration=3: -5.671281819618
    test 3808 280 280.000000000000 Xi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618

    test 3809 280 279.956225698278 Phi(tan=-5.69673, x=0.172896, y=-0.98494): -5.671281819618
    test 3810 280 279.989045850720 Beta(tan=-5.67763, x=0.17346, y=-0.984841): -5.671281819618
    test 3811 280 280.021969758476 Theta(tan=-5.65859, x=0.174026, y=-0.984741): -5.671281819618
    test 3812 280 280.005475329461 Mu(tan=-5.66811, x=0.173742, y=-0.984791): -5.671281819618
    test 3813 280 280.021898241655 Chi(tan=-5.65863, x=0.174025, y=-0.984741): -5.671281819618
    test 3814 280 280.000000000000 Xi(tan=-5.67128, x=0.173648, y=-0.984808): -5.671281819618

    test 3815 287 286.928409983832 Phi(tan=-3.28553, x=1.0, y=-3.28553): -3.270852618484
    test 3816 287 286.982086527391 Beta(tan=-3.27451, x=1.0, y=-3.27451): -3.270852618484
    test 3817 287 287.035912792570 Theta(tan=-3.26354, x=1.0, y=-3.26354): -3.270852618484
    test 3818 287 287.008952804861 Mu(tan=-3.26903, x=0.292521, y=-0.956259), iteration=3: -3.270852618484
    test 3819 287 287.035802540646 Chi(tan=-3.26356, x=1.0, y=-3.26356), iteration=3: -3.270852618484
    test 3820 287 287.000000000000 Xi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484

    test 3821 287 286.928409983832 Phi(tan=-3.28553, x=0.291177, y=-0.956669): -3.270852618484
    test 3822 287 286.982086527391 Beta(tan=-3.27451, x=0.292073, y=-0.956396): -3.270852618484
    test 3823 287 287.035912792570 Theta(tan=-3.26354, x=0.292971, y=-0.956121): -3.270852618484
    test 3824 287 287.008952804861 Mu(tan=-3.26903, x=0.292521, y=-0.956259): -3.270852618484
    test 3825 287 287.035802540646 Chi(tan=-3.26356, x=0.292969, y=-0.956122): -3.270852618484
    test 3826 287 287.000000000000 Xi(tan=-3.27085, x=0.292372, y=-0.956305): -3.270852618484

    test 3827 294 293.904820699861 Phi(tan=-2.25612, x=1.0, y=-2.25612): -2.246036773904
    test 3828 294 293.976186490838 Beta(tan=-2.24855, x=1.0, y=-2.24855): -2.246036773904
    test 3829 294 294.047712986128 Theta(tan=-2.24101, x=1.0, y=-2.24101): -2.246036773904
    test 3830 294 294.011899457288 Mu(tan=-2.24478, x=0.406926, y=-0.913461), iteration=3: -2.246036773904
    test 3831 294 294.047579285201 Chi(tan=-2.24103, x=1.0, y=-2.24103), iteration=3: -2.246036773904
    test 3832 294 294.000000000000 Xi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904

    test 3833 294 293.904820699861 Phi(tan=-2.25612, x=0.405219, y=-0.91422): -2.246036773904
    test 3834 294 293.976186490838 Beta(tan=-2.24855, x=0.406357, y=-0.913714): -2.246036773904
    test 3835 294 294.047712986128 Theta(tan=-2.24101, x=0.407497, y=-0.913206): -2.246036773904
    test 3836 294 294.011899457288 Mu(tan=-2.24478, x=0.406926, y=-0.913461): -2.246036773904
    test 3837 294 294.047579285201 Chi(tan=-2.24103, x=0.407495, y=-0.913207): -2.246036773904
    test 3838 294 294.000000000000 Xi(tan=-2.24604, x=0.406737, y=-0.913545): -2.246036773904

    test 3839 301 300.886857256907 Phi(tan=-1.67175, x=1.0, y=-1.67175): -1.664279482351
    test 3840 301 300.971695886665 Beta(tan=-1.66614, x=1.0, y=-1.66614): -1.664279482351
    test 3841 301 301.056668635072 Theta(tan=-1.66056, x=1.0, y=-1.66056): -1.664279482351
    test 3842 301 301.014140307923 Mu(tan=-1.66335, x=0.51525, y=-0.85704), iteration=3: -1.664279482351
    test 3843 301 301.056528796205 Chi(tan=-1.66057, x=1.0, y=-1.66057), iteration=3: -1.664279482351
    test 3844 301 301.000000000000 Xi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351

    test 3845 301 300.886857256907 Phi(tan=-1.67175, x=0.513344, y=-0.858183): -1.664279482351
    test 3846 301 300.971695886665 Beta(tan=-1.66614, x=0.514615, y=-0.857422): -1.664279482351
    test 3847 301 301.056668635072 Theta(tan=-1.66056, x=0.515886, y=-0.856657): -1.664279482351
    test 3848 301 301.014140307923 Mu(tan=-1.66335, x=0.51525, y=-0.85704): -1.664279482351
    test 3849 301 301.056528796205 Chi(tan=-1.66057, x=0.515884, y=-0.856659): -1.664279482351
    test 3850 301 301.000000000000 Xi(tan=-1.66428, x=0.515038, y=-0.857167): -1.664279482351

    test 3851 308 307.875591521416 Phi(tan=-1.28569, x=1.0, y=-1.28569): -1.279941632193
    test 3852 308 307.968882364101 Beta(tan=-1.28138, x=1.0, y=-1.28138): -1.279941632193
    test 3853 308 308.062249364871 Theta(tan=-1.27708, x=1.0, y=-1.27708): -1.279941632193
    test 3854 308 308.015542045055 Mu(tan=-1.27923, x=0.615875, y=-0.787844), iteration=3: -1.279941632193
    test 3855 308 308.062119501659 Chi(tan=-1.27709, x=1.0, y=-1.27709), iteration=3: -1.279941632193
    test 3856 308 308.000000000000 Xi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193

    test 3857 308 307.875591521416 Phi(tan=-1.28569, x=0.613949, y=-0.789346): -1.279941632193
    test 3858 308 307.968882364101 Beta(tan=-1.28138, x=0.615233, y=-0.788345): -1.279941632193
    test 3859 308 308.062249364871 Theta(tan=-1.27708, x=0.616517, y=-0.787341): -1.279941632193
    test 3860 308 308.015542045055 Mu(tan=-1.27923, x=0.615875, y=-0.787844): -1.279941632193
    test 3861 308 308.062119501659 Chi(tan=-1.27709, x=0.616515, y=-0.787343): -1.279941632193
    test 3862 308 308.000000000000 Xi(tan=-1.27994, x=0.615661, y=-0.788011): -1.279941632193

    test 3863 315 314.871703066479 Phi(tan=-1.00449, x=1.0, y=-1.00449): -1.000000000000
    test 3864 315 314.967914975772 Beta(tan=-1.00112, x=1.0, y=-1.00112): -1.000000000000
    test 3865 315 315.064127246955 Theta(tan=-0.997764, x=1.0, y=-0.997764): -1.000000000000
    test 3866 315 315.016020986969 Mu(tan=-0.999441, x=0.707304, y=-0.706909), iteration=2: -1.000000000000
    test 3867 315 315.064019491023 Chi(tan=-0.997768, x=1.0, y=-0.997768), iteration=3: -1.000000000000
    test 3868 315 315.000000000000 Xi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000

    test 3869 315 314.871703066479 Phi(tan=-1.00449, x=0.705522, y=-0.708688): -1.000000000000
    test 3870 315 314.967914975772 Beta(tan=-1.00112, x=0.706711, y=-0.707503): -1.000000000000
    test 3871 315 315.064127246955 Theta(tan=-0.997764, x=0.707898, y=-0.706315): -1.000000000000
    test 3872 315 315.016020986969 Mu(tan=-0.999441, x=0.707304, y=-0.706909): -1.000000000000
    test 3873 315 315.064019491023 Chi(tan=-0.997768, x=0.707896, y=-0.706316): -1.000000000000
    test 3874 315 315.000000000000 Xi(tan=-1, x=0.707107, y=-0.707107): -1.000000000000

    test 3875 322 321.875436413614 Phi(tan=-0.784793, x=1.0, y=-0.784793): -0.781285626507
    test 3876 322 321.968853692070 Beta(tan=-0.782161, x=1.0, y=-0.782161): -0.781285626507
    test 3877 322 322.062195432519 Theta(tan=-0.779539, x=1.0, y=-0.779539): -0.781285626507
    test 3878 322 322.015548148041 Mu(tan=-0.780849, x=0.788178, y=-0.615448), iteration=2: -0.781285626507
    test 3879 322 322.062116180014 Chi(tan=-0.779541, x=1.0, y=-0.779541), iteration=3: -0.781285626507
    test 3880 322 322.000000000000 Xi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507

    test 3881 322 321.875436413614 Phi(tan=-0.784793, x=0.78667, y=-0.617373): -0.781285626507
    test 3882 322 321.968853692070 Beta(tan=-0.782161, x=0.787676, y=-0.61609): -0.781285626507
    test 3883 322 322.062195432519 Theta(tan=-0.779539, x=0.788679, y=-0.614806): -0.781285626507
    test 3884 322 322.015548148041 Mu(tan=-0.780849, x=0.788178, y=-0.615448): -0.781285626507
    test 3885 322 322.062116180014 Chi(tan=-0.779541, x=0.788678, y=-0.614807): -0.781285626507
    test 3886 322 322.000000000000 Xi(tan=-0.781286, x=0.788011, y=-0.615661): -0.781285626507

    test 3887 329 328.886583352158 Phi(tan=-0.603558, x=1.0, y=-0.603558): -0.600860619028
    test 3888 329 328.971645254782 Beta(tan=-0.601534, x=1.0, y=-0.601534): -0.600860619028
    test 3889 329 329.056573396118 Theta(tan=-0.599518, x=1.0, y=-0.599518): -0.600860619028
    test 3890 329 329.014151085164 Mu(tan=-0.600525, x=0.857294, y=-0.514826), iteration=3: -0.600860619028
    test 3891 329 329.056522930537 Chi(tan=-0.599519, x=1.0, y=-0.599519), iteration=3: -0.600860619028
    test 3892 329 329.000000000000 Xi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028

    test 3893 329 328.886583352158 Phi(tan=-0.603558, x=0.856146, y=-0.516734): -0.600860619028
    test 3894 329 328.971645254782 Beta(tan=-0.601534, x=0.856912, y=-0.515462): -0.600860619028
    test 3895 329 329.056573396118 Theta(tan=-0.599518, x=0.857675, y=-0.514191): -0.600860619028
    test 3896 329 329.014151085164 Mu(tan=-0.600525, x=0.857294, y=-0.514826): -0.600860619028
    test 3897 329 329.056522930537 Chi(tan=-0.599519, x=0.857675, y=-0.514192): -0.600860619028
    test 3898 329 329.000000000000 Xi(tan=-0.600861, x=0.857167, y=-0.515038): -0.600860619028

    test 3899 336 335.904492119885 Phi(tan=-0.447228, x=1.0, y=-0.447228): -0.445228685309
    test 3900 336 335.976125752178 Beta(tan=-0.445728, x=1.0, y=-0.445728): -0.445228685309
    test 3901 336 336.047598736385 Theta(tan=-0.444234, x=1.0, y=-0.444234): -0.445228685309
    test 3902 336 336.011912385791 Mu(tan=-0.44498, x=0.91363, y=-0.406547), iteration=2: -0.445228685309
    test 3903 336 336.047572248701 Chi(tan=-0.444234, x=1.0, y=-0.444234), iteration=3: -0.445228685309
    test 3904 336 336.000000000000 Xi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309

    test 3905 336 335.904492119885 Phi(tan=-0.447228, x=0.912866, y=-0.408259): -0.445228685309
    test 3906 336 335.976125752178 Beta(tan=-0.445728, x=0.913376, y=-0.407117): -0.445228685309
    test 3907 336 336.047598736385 Theta(tan=-0.444234, x=0.913883, y=-0.405978): -0.445228685309
    test 3908 336 336.011912385791 Mu(tan=-0.44498, x=0.91363, y=-0.406547): -0.445228685309
    test 3909 336 336.047572248701 Chi(tan=-0.444234, x=0.913883, y=-0.405978): -0.445228685309
    test 3910 336 336.000000000000 Xi(tan=-0.445229, x=0.913545, y=-0.406737): -0.445228685309

    test 3911 343 342.928103650624 Phi(tan=-0.307103, x=1.0, y=-0.307103): -0.305730681459
    test 3912 343 342.982029901147 Beta(tan=-0.306074, x=1.0, y=-0.306074): -0.305730681459
    test 3913 343 343.035806278435 Theta(tan=-0.305047, x=1.0, y=-0.305047): -0.305730681459
    test 3914 343 343.008964858001 Mu(tan=-0.30556, x=0.95635, y=-0.292222), iteration=2: -0.305730681459
    test 3915 343 343.035795980594 Chi(tan=-0.305048, x=1.0, y=-0.305048), iteration=3: -0.305730681459
    test 3916 343 343.000000000000 Xi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459

    test 3917 343 342.928103650624 Phi(tan=-0.307103, x=0.955937, y=-0.293571): -0.305730681459
    test 3918 343 342.982029901147 Beta(tan=-0.306074, x=0.956213, y=-0.292672): -0.305730681459
    test 3919 343 343.035806278435 Theta(tan=-0.305047, x=0.956487, y=-0.291774): -0.305730681459
    test 3920 343 343.008964858001 Mu(tan=-0.30556, x=0.95635, y=-0.292222): -0.305730681459
    test 3921 343 343.035795980594 Chi(tan=-0.305048, x=0.956487, y=-0.291774): -0.305730681459
    test 3922 343 343.000000000000 Xi(tan=-0.305731, x=0.956305, y=-0.292372): -0.305730681459

    test 3923 350 349.956013326444 Phi(tan=-0.177119, x=1.0, y=-0.177119): -0.176326980708
    test 3924 350 349.989006593437 Beta(tan=-0.176525, x=1.0, y=-0.176525): -0.176326980708
    test 3925 350 350.021895915483 Theta(tan=-0.175933, x=1.0, y=-0.175933): -0.176326980708
    test 3926 350 350.005483685534 Mu(tan=-0.176228, x=0.984824, y=-0.173554), iteration=3: -0.176326980708
    test 3927 350 350.021893693784 Chi(tan=-0.175933, x=1.0, y=-0.175933), iteration=3: -0.176326980708
    test 3928 350 350.000000000000 Xi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708

    test 3929 350 349.956013326444 Phi(tan=-0.177119, x=0.984674, y=-0.174404): -0.176326980708
    test 3930 350 349.989006593437 Beta(tan=-0.176525, x=0.984774, y=-0.173837): -0.176326980708
    test 3931 350 350.021895915483 Theta(tan=-0.175933, x=0.984874, y=-0.173272): -0.176326980708
    test 3932 350 350.005483685534 Mu(tan=-0.176228, x=0.984824, y=-0.173554): -0.176326980708
    test 3933 350 350.021893693784 Chi(tan=-0.175933, x=0.984874, y=-0.173272): -0.176326980708
    test 3934 350 350.000000000000 Xi(tan=-0.176327, x=0.984808, y=-0.173648): -0.176326980708

    test 3935 357 356.986554851958 Phi(tan=-0.0526431, x=1.0, y=-0.0526431): -0.052407779283
    test 3936 357 356.996639834512 Beta(tan=-0.0524666, x=1.0, y=-0.0524666): -0.052407779283
    test 3937 357 357.006691189366 Theta(tan=-0.0522907, x=1.0, y=-0.0522907): -0.052407779283
    test 3938 357 357.001676003026 Mu(tan=-0.0523784, x=0.998631, y=-0.0523067), iteration=3: -0.052407779283
    test 3939 357 357.006691127690 Chi(tan=-0.0522907, x=1.0, y=-0.0522907), iteration=3: -0.052407779283
    test 3940 357 357.000000000000 Xi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283

    test 3941 357 356.986554851958 Phi(tan=-0.0526431, x=0.998617, y=-0.0525703): -0.052407779283
    test 3942 357 356.996639834512 Beta(tan=-0.0524666, x=0.998626, y=-0.0523945): -0.052407779283
    test 3943 357 357.006691189366 Theta(tan=-0.0522907, x=0.998636, y=-0.0522193): -0.052407779283
    test 3944 357 357.001676003026 Mu(tan=-0.0523784, x=0.998631, y=-0.0523067): -0.052407779283
    test 3945 357 357.006691127690 Chi(tan=-0.0522907, x=0.998636, y=-0.0522193): -0.052407779283
    test 3946 357 357.000000000000 Xi(tan=-0.0524078, x=0.99863, y=-0.052336): -0.052407779283

    test 3947 abs: AuxAngle(tan=2.0, x=1.0, y=2.0)
    test 3948 add: AuxAngle(tan=-1.33333, x=-3, y=4.0)
    test 3949 eq : True
    test 3950 float: 2.0
    test 3951 sub: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 3952 neg: AuxAngle(tan=-2, x=1.0, y=-2)
    test 3953 ne : False
    test 3954 pos: AuxAngle(tan=2.0, x=1.0, y=2.0)
    test 3955 iadd: AuxAngle(tan=-1.33333, x=-3, y=4.0)
    test 3956 isub: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 3957 radd: AuxAngle(tan=0.0, x=1.0, y=0.0)
    test 3958 rsub: AuxAngle(tan=0.0, x=1.0, y=0.0)

    6 tests skipped (6): no numpy

    30 of 3958 testAuxilats.py tests (0.8%) FAILED, ALL KNOWN, 6 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 12.635 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testAzimuthal.py
./pygeodesy/azimuthal.py:634: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./pygeodesy/azimuthal.py:937: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Equidistant from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Gnomonic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.LambertEqualArea from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Orthographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Stereographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalKarney by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testAzimuthal.py line 11
# lazily imported pygeodesy.F_D from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAzimuthal.py line 11
# lazily imported pygeodesy.hypot from .fmath by testAzimuthal.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS_ from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.vincentys from .formy by testAzimuthal.py line 11
# lazily imported pygeodesy.Azimuthal7Tuple from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.equidistant from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.gnomonic from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.NAN from .constants by testAzimuthal.py line 138

    testing testAzimuthal.py 24.05.16 (module pygeodesy.azimuthal 24.11.07) isLazy=3
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 13 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 14 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 16 iteration: None
    test 17 hypot: 339535.102  FAILED, KNOWN, expected 338901.865
    test 18 antipodal: (170420.92566, -293667.828613, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 19 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 20 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 21 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 22 iteration: None
    test 23 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 24 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 25 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 26 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 29 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 30 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 31 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 32 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 33 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 34 iteration: None
    test 35 hypot: 339855.719  FAILED, KNOWN, expected 338901.865
    test 36 antipodal: (170581.851218, -293945.134107, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
    test 37 EquidistantExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 38 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 39 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 40 iteration: None
    test 41 copy(EquidistantExact): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 42 EquidistantExact.copy(): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 43 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 44 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 45 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 46 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 47 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 48 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 49 EquidistantExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 50 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 51 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 52 iteration: None
    test 53 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 54 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 55 GnomonicExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 56 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 57 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 58 iteration: 3
    test 59 copy(GnomonicExact): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 60 GnomonicExact.copy(): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 61 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 62 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 63 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 64 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 65 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 66 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 67 GnomonicExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 68 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 69 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 70 iteration: 3
    test 71 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 72 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 73 EquidistantKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 74 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 75 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 76 iteration: None
    test 77 copy(EquidistantKarney): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 78 EquidistantKarney.copy(): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 79 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 80 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 81 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 82 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 83 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 84 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 85 EquidistantKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 86 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 87 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 88 iteration: None
    test 89 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 90 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 91 GnomonicKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 92 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 93 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 94 iteration: 3
    test 95 copy(GnomonicKarney): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 96 GnomonicKarney.copy(): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 97 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 98 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 99 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 100 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 101 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 102 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 103 GnomonicKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 104 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 105 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 106 iteration: 3
    test 107 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 108 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 109 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W Random +/- 45
    test 110 pygeodesy.ellipsoidalExact: 27.263123°S, 035.002705°W, 16.001922°S, 022.946485°W  d 7289.8 meter  Spherical
    test 111 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 15.972027°S, 022.938186°W  d 1.9933e-09 meter  EquidistantExact
    test 112 pygeodesy.ellipsoidalExact: 27.232330°S, 035.024673°W, 15.961599°S, 023.012860°W  d 11328.5 meter  Equidistant
    test 113 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 8, 8, 8, 5, 5, °, S, ,,  , 0, 0, 0, ., 0, 5, 6, 5, 9, 1, °, E  00.325%, 000.162% of Random
    test 114 pygeodesy.ellipsoidalExact: 27.111764°S, 035.048534°W, 47.167468°N, 007.068741°W  d 24535.8 meter  Spherical
    test 115 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 47.309469°N, 007.172779°W  d 3.93456e-09 meter  EquidistantExact
    test 116 pygeodesy.ellipsoidalExact: 27.142262°S, 035.072946°W, 47.108358°N, 007.082159°W  d 22382.1 meter  Equidistant
    test 117 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 7, 8, 9, 2, 3, °, S, ,,  , 0, 0, 0, ., 1, 0, 4, 8, 6, 4, °, E  00.655%, 000.300% of Random
    test 118 pygeodesy.ellipsoidalExact: 27.364647°S, 035.013598°W, 28.434641°S, 010.166833°W  d 6593.87 meter  Spherical
    test 119 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 28.398073°S, 010.208512°W  d 4.44955e-09 meter  EquidistantExact
    test 120 pygeodesy.ellipsoidalExact: 27.347484°S, 035.012831°W, 28.419638°S, 010.165872°W  d 5301.22 meter  Equidistant
    test 121 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 2, 6, 2, 9, 9, °, N, ,,  , 0, 0, 0, ., 0, 4, 4, 7, 5, 0, °, E  00.096%, 000.128% of Random
    test 122 pygeodesy.ellipsoidalExact: 27.200655°S, 035.050077°W, 16.338113°S, 034.296725°W  d 15630.2 meter  Spherical
    test 123 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 16.205433°S, 034.196492°W  d 1.30109e-08 meter  EquidistantExact
    test 124 pygeodesy.ellipsoidalExact: 27.130377°S, 035.106916°W, 16.466367°S, 034.420758°W  d 25222 meter  Equidistant
    test 125 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 9, 0, 8, 0, 8, °, S, ,,  , 0, 0, 0, ., 1, 3, 8, 8, 3, 4, °, E  00.698%, 000.397% of Random
    test 126 pygeodesy.ellipsoidalExact: 27.179561°S, 035.005324°W, 43.954864°S, 013.728511°W  d 16120.6 meter  Spherical
    test 127 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 44.004991°S, 014.064816°W  d 1.76079e-09 meter  EquidistantExact
    test 128 pygeodesy.ellipsoidalExact: 27.236465°S, 035.022281°W, 43.933883°S, 013.637583°W  d 10813.2 meter  Equidistant
    test 129 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 8, 4, 7, 2, 0, °, S, ,,  , 0, 0, 0, ., 0, 5, 4, 1, 9, 9, °, E  00.310%, 000.155% of Random
    test 130 pygeodesy.ellipsoidalExact: 27.117842°S, 035.050190°W, 46.979787°N, 011.623396°W  d 23955 meter  Spherical
    test 131 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 47.112791°N, 011.708793°W  d 2.83501e-09 meter  EquidistantExact
    test 132 pygeodesy.ellipsoidalExact: 27.145218°S, 035.121374°W, 46.885193°N, 011.546416°W  d 24712.9 meter  Equidistant
    test 133 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 7, 5, 9, 6, 7, °, S, ,,  , 0, 0, 0, ., 1, 5, 3, 2, 9, 3, °, E  00.644%, 000.438% of Random
    test 134 pygeodesy.ellipsoidalExact: 27.210184°S, 034.922065°W, 35.640264°S, 029.540608°E  d 13116.7 meter  Spherical
    test 135 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 35.841948°S, 029.548474°E  d 3.15571e-09 meter  EquidistantExact
    test 136 pygeodesy.ellipsoidalExact: 27.228953°S, 034.969559°W, 35.639121°S, 029.538901°E  d 10221.1 meter  Equidistant
    test 137 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 9, 2, 2, 3, 3, °, S, ,,  , 0, 0, 0, ., 0, 0, 1, 4, 7, 7, °, E  00.338%, 000.004% of Random
    test 138 pygeodesy.ellipsoidalExact: 27.474585°S, 034.070498°W, 30.922693°S, 025.581702°W  d 90386.4 meter  Spherical
    test 139 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 31.471278°S, 024.855267°W  d 7.33756e-09 meter  EquidistantExact
    test 140 pygeodesy.ellipsoidalExact: 27.423598°S, 034.332124°W, 31.005097°S, 025.455497°W  d 63927.8 meter  Equidistant
    test 141 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 0, 2, 4, 1, 3, °, N, ,,  , 0, 0, 0, ., 6, 3, 5, 9, 5, 7, °, W  00.375%, 001.819% of Random
    test 142 pygeodesy.ellipsoidalExact: 27.196882°S, 035.019917°W, 24.067429°N, 033.117169°W  d 14699.1 meter  Spherical
    test 143 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 24.194242°N, 033.075338°W  d 2.25732e-09 meter  EquidistantExact
    test 144 pygeodesy.ellipsoidalExact: 27.218327°S, 035.066510°W, 24.100285°N, 033.175342°W  d 14996.3 meter  Equidistant
    test 145 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 0, 2, 8, 5, 9, °, S, ,,  , 0, 0, 0, ., 0, 9, 8, 4, 2, 8, °, E  00.376%, 000.281% of Random
    test 146 pygeodesy.ellipsoidalExact: 27.200094°S, 034.878526°W, 32.729814°S, 004.675360°E  d 16083.7 meter  Spherical
    test 147 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 32.926596°S, 004.716336°E  d 1.45012e-09 meter  EquidistantExact
    test 148 pygeodesy.ellipsoidalExact: 27.221404°S, 034.919207°W, 32.740315°S, 004.686569°E  d 12069.3 meter  Equidistant
    test 149 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 9, 9, 7, 8, 2, °, S, ,,  , 0, 0, 0, ., 0, 4, 8, 8, 7, 5, °, W  00.365%, 000.140% of Random
    test 150 pygeodesy.ellipsoidalExact: 27.026606°S, 035.067504°W, 12.240678°N, 040.932722°E  d 34095.9 meter  Spherical
    test 151 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 12.352663°N, 040.921851°E  d 4.72147e-09 meter  EquidistantExact
    test 152 pygeodesy.ellipsoidalExact: 27.070625°S, 035.100756°W, 12.221362°N, 041.054495°E  d 30718.6 meter  Equidistant
    test 153 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 5, 0, 5, 6, 0, °, S, ,,  , 0, 0, 0, ., 1, 3, 2, 6, 7, 5, °, E  00.917%, 000.379% of Random
    test 154 pygeodesy.ellipsoidalExact: 27.331360°S, 034.951641°W, 35.089579°S, 043.201464°W  d 1979.47 meter  Spherical
    test 155 pygeodesy.ellipsoidalExact: 27.321185°S, 034.968082°W, 35.110721°S, 043.173254°W  d 1.57786e-09 meter  EquidistantExact
    test 156 pygeodesy.ellipsoidalExact: 27.312028°S, 034.944387°W, 35.089856°S, 043.202231°W  d 2555.29 meter  Equidistant
    test 157 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 0, 9, 1, 5, 7, °, S, ,,  , 0, 0, 0, ., 0, 2, 3, 6, 9, 5, °, W  00.034%, 000.068% of Random
    test 158 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 5, 0, 5, 6, 0, °, N, ,,  , 0, 0, 0, ., 6, 3, 5, 9, 5, 7, °, E  00.917%, 001.819% of Random, max

    test 159 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W Random +/- 45
    test 160 pygeodesy.ellipsoidalVincenty: 05.458160°S, 017.792640°W, 42.787988°S, 045.146842°W  d 1873.77 meter  Spherical
    test 161 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 42.878353°S, 044.984710°W  d 1.82114e-05 meter  EquidistantExact
    test 162 pygeodesy.ellipsoidalVincenty: 05.280967°S, 017.798785°W, 42.765914°S, 045.057888°W  d 19123.7 meter  Equidistant
    test 163 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 7, 2, 6, 3, 4, °, S, ,,  , 0, 0, 0, ., 0, 1, 0, 1, 4, 0, °, W  03.166%, 000.057% of Random
    test 164 pygeodesy.ellipsoidalVincenty: 05.312269°S, 017.596687°W, 02.122784°S, 009.920779°W  d 28241.7 meter  Spherical
    test 165 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 02.034326°S, 009.687728°W  d 4.50569e-06 meter  EquidistantExact
    test 166 pygeodesy.ellipsoidalVincenty: 05.377083°S, 017.717657°W, 02.082229°S, 009.786836°W  d 13187.6 meter  Equidistant
    test 167 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 6, 5, 1, 8, °, S, ,,  , 0, 0, 0, ., 0, 9, 1, 2, 6, 9, °, W  01.403%, 000.512% of Random
    test 168 pygeodesy.ellipsoidalVincenty: 05.651829°S, 017.929864°W, 10.330094°S, 020.065245°W  d 25692.2 meter  Spherical
    test 169 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 10.543899°S, 020.106244°W  d 7.65015e-05 meter  EquidistantExact
    test 170 pygeodesy.ellipsoidalVincenty: 06.134263°S, 018.279967°W, 09.785455°S, 019.940039°W  d 91583 meter  Equidistant
    test 171 pygeodesy.ellipsoidalVincenty: 0, 0, ., 6, 8, 0, 6, 6, 1, °, N, ,,  , 0, 0, 0, ., 4, 7, 1, 0, 4, 1, °, E  12.481%, 002.645% of Random
    test 172 pygeodesy.ellipsoidalVincenty: 05.548029°S, 017.756593°W, 22.362265°S, 013.807134°W  d 11944.3 meter  Spherical
    test 173 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 22.461155°S, 013.856015°W  d 1.27493e-05 meter  EquidistantExact
    test 174 pygeodesy.ellipsoidalVincenty: 05.600830°S, 017.655762°W, 22.309012°S, 013.764419°W  d 23518.1 meter  Equidistant
    test 175 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 4, 7, 2, 2, 8, °, N, ,,  , 0, 0, 0, ., 1, 5, 3, 1, 6, 3, °, W  02.700%, 000.860% of Random
    test 176 pygeodesy.ellipsoidalVincenty: 05.447535°S, 017.775133°W, 15.570872°S, 008.906035°W  d 3804.52 meter  Spherical
    test 177 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 15.656060°S, 008.982232°W  d 1.26904e-05 meter  EquidistantExact
    test 178 pygeodesy.ellipsoidalVincenty: 05.532769°S, 017.896244°W, 15.657076°S, 008.990929°W  d 13048.6 meter  Equidistant
    test 179 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 9, 1, 6, 7, °, N, ,,  , 0, 0, 0, ., 0, 8, 7, 3, 1, 8, °, E  01.452%, 000.490% of Random
    test 180 pygeodesy.ellipsoidalVincenty: 05.480196°S, 018.559681°W, 05.505660°S, 028.404709°W  d 83248 meter  Spherical
    test 181 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 05.483321°S, 029.155663°W  d 5.89181e-06 meter  EquidistantExact
    test 182 pygeodesy.ellipsoidalVincenty: 05.459368°S, 018.173702°W, 05.486829°S, 028.790704°W  d 40429 meter  Equidistant
    test 183 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 0, 5, 7, 6, 6, °, N, ,,  , 0, 0, 0, ., 3, 6, 4, 7, 7, 7, °, E  00.106%, 002.048% of Random
    test 184 pygeodesy.ellipsoidalVincenty: too distant (6.21e+06): invalid  FAILED, KNOWN, expected Spherical
    test 185 pygeodesy.ellipsoidalVincenty: too distant (6.19e+06): invalid  FAILED, KNOWN, expected EquidistantExact
    test 186 pygeodesy.ellipsoidalVincenty: too distant (6.19e+06): invalid  FAILED, KNOWN, expected Equidistant
    test 187 pygeodesy.ellipsoidalVincenty: 05.391170°S, 017.764959°W, 02.961856°N, 009.991565°E  d 8450.26 meter  Spherical
    test 188 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 03.035771°N, 010.031693°E  d 1.93703e-06 meter  EquidistantExact
    test 189 pygeodesy.ellipsoidalVincenty: 05.405831°S, 017.826492°W, 02.983165°N, 010.052188°E  d 5630.03 meter  Equidistant
    test 190 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 4, 7, 7, 7, 1, °, S, ,,  , 0, 0, 0, ., 0, 1, 7, 5, 6, 7, °, E  00.876%, 000.099% of Random
    test 191 pygeodesy.ellipsoidalVincenty: 05.113542°S, 017.513314°W, 04.649482°N, 006.672802°W  d 49878.9 meter  Spherical
    test 192 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 04.980364°N, 006.365626°W  d 2.66454e-05 meter  EquidistantExact
    test 193 pygeodesy.ellipsoidalVincenty: 05.487265°S, 017.913464°W, 05.006393°N, 006.254482°W  d 12168 meter  Equidistant
    test 194 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 3, 3, 6, 6, 3, °, N, ,,  , 0, 0, 0, ., 1, 0, 4, 5, 3, 9, °, E  00.617%, 000.587% of Random
    test 195 pygeodesy.ellipsoidalVincenty: 05.262564°S, 017.667209°W, 14.621625°N, 003.871982°E  d 26325.2 meter  Spherical
    test 196 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 14.869804°N, 003.945327°E  d 3.81629e-05 meter  EquidistantExact
    test 197 pygeodesy.ellipsoidalVincenty: 05.427791°S, 017.975942°W, 14.861791°N, 004.037436°E  d 18727.8 meter  Equidistant
    test 198 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 2, 5, 8, 1, 0, °, S, ,,  , 0, 0, 0, ., 1, 6, 7, 0, 1, 7, °, E  00.473%, 000.938% of Random
    test 199 pygeodesy.ellipsoidalVincenty: 05.402013°S, 017.804968°W, 14.771720°N, 018.801263°W  d 5721.77 meter  Spherical
    test 200 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 14.820827°N, 018.797073°W  d 2.13136e-07 meter  EquidistantExact
    test 201 pygeodesy.ellipsoidalVincenty: 05.433484°S, 017.803477°W, 14.797749°N, 018.802658°W  d 2305.21 meter  Equidistant
    test 202 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 2, 0, 1, 1, 8, °, S, ,,  , 0, 0, 0, ., 0, 0, 5, 4, 4, 8, °, W  00.369%, 000.031% of Random
    test 203 pygeodesy.ellipsoidalVincenty: 05.292429°S, 017.865860°W, 68.627417°N, 057.124691°W  d 18907.2 meter  Spherical
    test 204 pygeodesy.ellipsoidalVincenty: 05.453602°S, 017.808926°W, 68.674683°N, 056.828152°W  d 7.46036e-06 meter  EquidistantExact
    test 205 pygeodesy.ellipsoidalVincenty: 05.399512°S, 017.939070°W, 68.617880°N, 056.544596°W  d 15614.3 meter  Equidistant
    test 206 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 5, 4, 0, 9, 0, °, S, ,,  , 0, 0, 0, ., 1, 3, 0, 1, 4, 5, °, E  00.992%, 000.731% of Random
    test 207 pygeodesy.ellipsoidalVincenty: 0, 0, ., 6, 8, 0, 6, 6, 1, °, N, ,,  , 0, 0, 0, ., 4, 7, 1, 0, 4, 1, °, E  12.481%, 002.645% of Random, max

    test 208 Equidistant(10, 80): 1.37704, 0.24656
    test 209 Equidistant(10, 80): 10.0, 80.0
    test 210 Gnomonic(10, 80): 5.67128, 1.01543
    test 211 Gnomonic(10, 80): 10.0, 80.0
    test 212 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 213 LambertEqualArea(10, 80): 10.0, 80.0
    test 214 Orthographic(10, 80): 0.96985, 0.17365
    test 215 Orthographic(10, 80): 10.0, 80.0
    test 216 Stereographic(10, 80): 1.65643, 0.29658
    test 217 Stereographic(10, 80): 10.0, 80.0
    test 218 Equidistant(20, 20): 0.33454, 0.35601
    test 219 Equidistant(20, 20): 20.0, 20.0
    test 220 Gnomonic(20, 20): 0.36397, 0.38733
    test 221 Gnomonic(20, 20): 20.0, 20.0
    test 222 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 223 LambertEqualArea(20, 20): 20.0, 20.0
    test 224 Orthographic(20, 20): 0.32139, 0.34202
    test 225 Orthographic(20, 20): 20.0, 20.0
    test 226 Stereographic(20, 20): 0.34136, 0.36327
    test 227 Stereographic(20, 20): 20.0, 20.0
    test 228 Equidistant(40, 40): 0.57386, 0.74912
    test 229 Equidistant(40, 40): 40.0, 40.0
    test 230 Gnomonic(40, 40): 0.8391, 1.09537
    test 231 Gnomonic(40, 40): 40.0, 40.0
    test 232 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 233 LambertEqualArea(40, 40): 40.0, 40.0
    test 234 Orthographic(40, 40): 0.4924, 0.64279
    test 235 Orthographic(40, 40): 40.0, 40.0
    test 236 Stereographic(40, 40): 0.62062, 0.81016
    test 237 Stereographic(40, 40): 40.0, 40.0
    test 238 Equidistant(60, 60): 0.58948, 1.17896
    test 239 Equidistant(60, 60): 60.0, 60.0
    test 240 Gnomonic(60, 60): 1.73205, 3.4641
    test 241 Gnomonic(60, 60): 60.0, 60.0
    test 242 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 243 LambertEqualArea(60, 60): 60.0, 60.0
    test 244 Orthographic(60, 60): 0.43301, 0.86603
    test 245 Orthographic(60, 60): 60.0, 60.0
    test 246 Stereographic(60, 60): 0.69282, 1.38564
    test 247 Stereographic(60, 60): 60.0, 60.0
    test 248 Equidistant(70, 80): 0.50997, 1.42273
    test 249 Equidistant(70, 80): 70.0, 80.0
    test 250 Gnomonic(70, 80): 5.67128, 15.82209
    test 251 Gnomonic(70, 80): 70.0, 80.0
    test 252 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 253 LambertEqualArea(70, 80): 70.0, 80.0
    test 254 Orthographic(70, 80): 0.33682, 0.93969
    test 255 Orthographic(70, 80): 70.0, 80.0
    test 256 Stereographic(70, 80): 0.63588, 1.77402
    test 257 Stereographic(70, 80): 70.0, 80.0
    test 258 Equidistant(80, 80): 0.26358, 1.51792
    test 259 Equidistant(80, 80): 80.0, 80.0
    test 260 Gnomonic(80, 80): 5.67128, 32.65961
    test 261 Gnomonic(80, 80): 80.0, 80.0
    test 262 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 263 LambertEqualArea(80, 80): 80.0, 80.0
    test 264 Orthographic(80, 80): 0.17101, 0.98481
    test 265 Orthographic(80, 80): 80.0, 80.0
    test 266 Stereographic(80, 80): 0.33201, 1.91196
    test 267 Stereographic(80, 80): 80.0, 80.0
    test 268 Equidistant(80, 10): 0.04281, 1.39829
    test 269 Equidistant(80, 10): 80.0, 10.0
    test 270 Gnomonic(80, 10): 0.17633, 5.75877
    test 271 Gnomonic(80, 10): 80.0, 10.0
    test 272 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 273 LambertEqualArea(80, 10): 80.0, 10.0
    test 274 Orthographic(80, 10): 0.03015, 0.98481
    test 275 Orthographic(80, 10): 80.0, 10.0
    test 276 Stereographic(80, 10): 0.0515, 1.68198
    test 277 Stereographic(80, 10): 80.0, 10.0

    test 278 function: equidistant
    test 279 equatoradius: 1.0
    test 280 flattening: 0.0
    test 281 iteration: None
    test 282 latlon0: (0.0, 0.0)
    test 283 latlon0: (1.0, 2.0)
    test 284 name: coverage
    test 285 radius: 1.0

    test 286 function: gnomonic
    test 287 equatoradius: 1.0
    test 288 flattening: 0.0
    test 289 iteration: None
    test 290 latlon0: (0.0, 0.0)
    test 291 latlon0: (1.0, 2.0)
    test 292 name: coverage
    test 293 radius: 1.0
    test 294 NANing: (NAN, NAN, 0.0, 0.0, 0.0, 1.0, None)

    15 of 294 testAzimuthal.py tests (5.1%) FAILED, incl. 9 KNOWN plus 6 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 38.973 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testBasics.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testBasics.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.INF from .constants by testBasics.py line 11
# lazily imported pygeodesy.INT0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NAN from .constants by testBasics.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NINF from .constants by testBasics.py line 11
# lazily imported pygeodesy.halfs2 from .basics by testBasics.py line 11
# lazily imported pygeodesy.isclose from .constants by testBasics.py line 11
# lazily imported pygeodesy.isfinite from .constants by testBasics.py line 11
# lazily imported pygeodesy.isint0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isiterable from .basics by testBasics.py line 11
# lazily imported pygeodesy.isiterablen from .basics by testBasics.py line 11
# lazily imported pygeodesy.isneg0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isninf from .constants by testBasics.py line 11
# lazily imported pygeodesy.isscalar from .basics by testBasics.py line 11
# lazily imported pygeodesy.map1 from .basics by testBasics.py line 11
# lazily imported pygeodesy.remainder from .constants by testBasics.py line 11
# lazily imported pygeodesy.splice from .basics by testBasics.py line 11

    testing testBasics.py 24.05.15 (module pygeodesy.basics 24.11.02) isLazy=3
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')

    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isninf(0): False
    test 7 isscalar(0): True

    test 8 isfinite(0.0): True
    test 9 isint(0.0): True
    test 10 isint(0.0+0.5): False
    test 11 isninf(0.0): False
    test 12 isscalar(0.0): True

    test 13 isfinite(1): True
    test 14 isint(1): True
    test 15 isint(1+0.5): False
    test 16 isninf(1): False
    test 17 isscalar(1): True

    test 18 isfinite(1.0): True
    test 19 isint(1.0): True
    test 20 isint(1.0+0.5): False
    test 21 isninf(1.0): False
    test 22 isscalar(1.0): True

    test 23 isfinite(1e+300): True
    test 24 isint(1e+300): True
    test 25 isint(1e+300+0.5): True
    test 26 isninf(1e+300): False
    test 27 isscalar(1e+300): True

    test 28 isfinite(-1e+300): True
    test 29 isint(-1e+300): True
    test 30 isint(-1e+300+0.5): True
    test 31 isninf(-1e+300): False
    test 32 isscalar(-1e+300): True

    test 33 isfinite(inf): False
    test 34 isint(inf): False
    test 35 isint(inf+0.5): False
    test 36 isninf(inf): False
    test 37 isscalar(inf): True

    test 38 isfinite(inf): False
    test 39 isint(inf): False
    test 40 isint(inf+0.5): False
    test 41 isninf(inf): False
    test 42 isscalar(inf): True

    test 43 isfinite(nan): False
    test 44 isint(nan): False
    test 45 isint(nan+0.5): False
    test 46 isninf(nan): False
    test 47 isscalar(nan): True

    test 48 isfinite(-0.0): True
    test 49 isint(-0.0): True
    test 50 isint(-0.0+0.5): False
    test 51 isninf(-0.0): False
    test 52 isscalar(-0.0): True

    test 53 isfinite(-inf): False
    test 54 isint(-inf): False
    test 55 isint(-inf+0.5): False
    test 56 isninf(-inf): True
    test 57 isscalar(-inf): True

    test 58 isfinite(complex): True
    test 59 isfinite(complex): False

    test 60 isint0(INT0): True
    test 61 isint0(False): False
    test 62 isint0(None): False
    test 63 isint0(0): True
    test 64 isint0(0.): False
    test 65 isint0(0.0): True

    test 66 isneg0(NEG0): True
    test 67 isneg0(0.0): False
    test 68 isneg0(INF): False
    test 69 isneg0(NAN): False

    test 70 type(C.r_o): property_RO
    test 71 type(c.r_o): <class 'bool'>
    test 72 c.r_o: True
    test 73 c.r_o = False: immutable property_RO: C.r_o = False
    test 74 c.a, c.b: (None, None)
    test 75 d.a, d.b: (True, False)
    test 76 c.a, c.b: (None, None)
    test 77 splice: ((0, 2, 4, 6, 8), (1, 3, 5, 7, 9))
    test 78 splice: ((0, 3, 6, 9), (1, 4, 7), (2, 5, 8))
    test 79 splice: ((0, 3, 6, 9), (1, 4, 7, -1), (2, 5, 8, -1))
    test 80 splice: ((0, 5, 10), (1, 6, 11), (2, 7), (3, 8), (4, 9))

    test 81 remainder(181, 360): -179.0
    test 82 remainder(181, -360): -179.0
    test 83 remainder(181, inf): 181.0
    test 84 remainder(181, nan): nan
    test 85 remainder(181, -inf): 181.0
    test 86 remainder(-181, 360): 179.0
    test 87 remainder(-181, -360): 179.0
    test 88 remainder(-181, inf): -181.0
    test 89 remainder(-181, nan): nan
    test 90 remainder(-181, -inf): -181.0
    test 91 remainder(179, 360): 179.0
    test 92 remainder(179, -360): 179.0
    test 93 remainder(179, inf): 179.0
    test 94 remainder(179, nan): nan
    test 95 remainder(179, -inf): 179.0
    test 96 remainder(-179, 360): -179.0
    test 97 remainder(-179, -360): -179.0
    test 98 remainder(-179, inf): -179.0
    test 99 remainder(-179, nan): nan
    test 100 remainder(-179, -inf): -179.0
    test 101 remainder(inf, 360): math domain error
    test 102 remainder(inf, -360): math domain error
    test 103 remainder(inf, inf): math domain error
    test 104 remainder(inf, nan): nan
    test 105 remainder(inf, -inf): math domain error
    test 106 remainder(nan, 360): nan
    test 107 remainder(nan, -360): nan
    test 108 remainder(nan, inf): nan
    test 109 remainder(nan, nan): nan
    test 110 remainder(nan, -inf): nan
    test 111 remainder(-inf, 360): math domain error
    test 112 remainder(-inf, -360): math domain error
    test 113 remainder(-inf, inf): math domain error
    test 114 remainder(-inf, nan): nan
    test 115 remainder(-inf, -inf): math domain error
    test 116 isclose: True
    test 117 isclose: False

    test 118 isiterable(dict): True
    test 119 isiterablen(dict): True
    test 120 isiterable(map): True
    test 121 isiterablen(map): False
    test 122 isiterable(list): True
    test 123 isiterablen(list): True
    test 124 isiterable(range): True
    test 125 isiterablen(range): True
    test 126 isiterable(tuple): True
    test 127 isiterablen(tuple): True
    test 128 isiterable(set): True
    test 129 isiterablen(set): False

    all 129 testBasics.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.401 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testBooleans.py
./test/testBooleans.py:50: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testBooleans.py:53: DeprecationWarning: function L{perimeterOf<pygeodesy.ellipsoidalVincenty.perimeterOf>} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
./test/testBooleans.py:82: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./test/testBooleans.py:85: DeprecationWarning: function L{perimeterOf<pygeodesy.ellipsoidalVincenty.perimeterOf>} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.BooleanFHP from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.BooleanGH from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testBooleans.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testBooleans.py line 95
# lazily imported pygeodesy.ellipsoidalVincenty by testBooleans.py line 95
# lazily imported pygeodesy.sphericalNvector by testBooleans.py line 95
# lazily imported pygeodesy.sphericalTrigonometry by testBooleans.py line 95

    testing testBooleans.py 23.03.31 isLazy=3

    testing(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 2 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 3 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 4 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 5 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 6 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 7 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 8 GH ==: True
    test 9 equalTo: True
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 10 areaOf: True
    test 11 enclosed: True
    test 12 enclosed: False
    test 13 perimeterOf: True

    test 14 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 15 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 16 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 17 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 18 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 19 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 20 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 21 FHP ==: True
    test 22 equalTo: True
    test 23 areaOf: True
    test 24 enclosed: True
    test 25 enclosed: False
    test 26 perimeterOf: True

    test 27 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 28 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 29 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 30 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 31 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 32 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 33 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 34 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 35 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 36 GH ==: True
    test 37 equalTo: True
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 38 areaOf: True
    test 39 enclosed: True
    test 40 enclosed: False
    test 41 perimeterOf: True

    test 42 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 43 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 44 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 45 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 46 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 47 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 48 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 49 FHP ==: True
    test 50 equalTo: True
    test 51 areaOf: True
    test 52 enclosed: True
    test 53 enclosed: False
    test 54 perimeterOf: True

    test 55 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 56 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalNvector, 24.11.07)
    test 57 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 58 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 59 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 60 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 61 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 62 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 63 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 64 GH ==: True
    test 65 equalTo: True
    test 66 areaOf: True
    test 67 enclosed: True
    test 68 enclosed: False
    test 69 perimeterOf: True

    test 70 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 71 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 72 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 73 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 74 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 75 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 76 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 77 FHP ==: True
    test 78 equalTo: True
    test 79 areaOf: True
    test 80 enclosed: True
    test 81 enclosed: False
    test 82 perimeterOf: True

    test 83 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 84 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 85 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 86 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 87 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 88 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 89 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 90 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 91 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 92 GH ==: True
    test 93 equalTo: True
    test 94 areaOf: True
    test 95 enclosed: True
    test 96 enclosed: False
    test 97 perimeterOf: True

    test 98 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 99 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 100 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 101 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 102 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 103 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 104 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 105 FHP ==: True
    test 106 equalTo: True
    test 107 areaOf: True
    test 108 enclosed: True
    test 109 enclosed: False
    test 110 perimeterOf: True

    test 111 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 112 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    16 of 112 testBooleans.py tests (14.3%) FAILED, incl. 16 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 2.845 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testCartesian.py
./test/testCartesian.py:43: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalNvector.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalNvector.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
<string>:1: DeprecationWarning: method L{__matmul__<pygeodesy.trf.RefFrame.__matmul__>} has been DEPRECATED on 2024.02.16, use method C{B{point}.toRefFrame}.
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.R_M from .constants by testCartesian.py line 11
# lazily imported pygeodesy.classname from .named by testCartesian.py line 11
# lazily imported pygeodesy.Datums from .datums by testCartesian.py line 11
# lazily imported pygeodesy.degrees from .utily by testCartesian.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCartesian.py line 11
# lazily imported pygeodesy.Height from .units by testCartesian.py line 11
# lazily imported pygeodesy.modulename from .named by testCartesian.py line 11
# lazily imported pygeodesy.rtp2xyz from .cartesianBase by testCartesian.py line 11
# lazily imported pygeodesy.xyz2rtp from .cartesianBase by testCartesian.py line 11
# lazily imported pygeodesy.RefFrames from .trf by testCartesian.py line 11
# lazily imported pygeodesy.Transforms from .datums by testCartesian.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testCartesian.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCartesian.py line 194
# lazily imported pygeodesy.ellipsoidalNvector by testCartesian.py line 194
# lazily imported pygeodesy.ellipsoidalVincenty by testCartesian.py line 194
# lazily imported pygeodesy.sphericalNvector by testCartesian.py line 194
# lazily imported pygeodesy.sphericalTrigonometry by testCartesian.py line 194

    testing testCartesian.py 24.08.18 isLazy=3

    testCartesian(pygeodesy.sphericalNvector, 24.11.07)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: False
    test 4 isSpherical: True
    test 5 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 7 height: -5918.380258
    test 8 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 9 height4: [3984282.2, 97.1, 4971443.2]
    test 10 height3: (3980581.0, 97.0, 4966825.0)
    test 11 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 12 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 13 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 14 LatLon: 50.0379°N, 008.5622°E
    test 15 LatLon: 51.47°N, 000.4543°E
    test 16 LatLon: 40.633365°N, 073.783328°W
    test 17 LatLon: 33.95°N, 118.4°W
    test 18 LatLon: 41.32°S, 174.81°E
    test 19 LatLon: 40.96°N, 005.5°E
    test 20 LatLon: 40.1°N, 116.6°E
    test 21 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 22 copy: True
    test 23 __eq__: True
    test 24 __ne__: False
    test 25 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 26 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 27 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 28 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 29 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 30 isequalTo: <class 'bool'>
    test 31 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 32 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 33 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 34 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 35 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 36 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 37 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 38 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 39 xyz3: <class 'tuple'>
    test 40 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 41 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 42 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 43 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 44 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 45 isequalTo: <class 'bool'>
    test 46 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 47 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 48 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 49 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 50 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 51 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 52 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 53 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 54 xyz3: <class 'tuple'>
    test 55 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 56 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 57 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 58 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 59 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 60 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testCartesian.py line 142

    2 tests skipped (2): No module named 'numpy': required by vector2d._numpy
    test 61 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 62 vector3d.intersections2: 0.0312613
    test 63 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 64 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 65 xyz2rtp: 37.417, 36.699, 63.435
    test 66 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 67 rtp2xyz: 10.0, 20.0, 30.0
    test 68 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 69 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 70 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)
# lazily imported pygeodesy.ltp by cartesianBase.py line 418

    test 71 destinationXyz: Tuple(x=10.175954, y=20.351908, z=32.201182, lat=54.754059, lon=63.434949, height=-6370969.342158, C=4, M=None, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 72 destinationXyz: Cartesian(10.176, 20.352, 32.201)

    testCartesian(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 73 Cartesian0: [3980581, 97, 4966825]
    test 74 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 75 isEllipsoidal: False
    test 76 isSpherical: True
    test 77 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 78 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 79 height: -5918.380258
    test 80 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 81 height4: [3984282.2, 97.1, 4971443.2]
    test 82 height3: (3980581.0, 97.0, 4966825.0)
    test 83 Vector4Tuple: 0.625376979, 1.52393751e-05, 0.780322775, -5918.38026
    test 84 LatLon: 50.0379°N, 008.5622°E
    test 85 LatLon: 51.47°N, 000.4543°E
    test 86 LatLon: 40.633365°N, 073.783328°W
    test 87 LatLon: 33.95°N, 118.4°W
    test 88 LatLon: 41.32°S, 174.81°E
    test 89 LatLon: 40.96°N, 005.5°E
    test 90 LatLon: 40.1°N, 116.6°E
    test 91 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 92 copy: True
./test/testCartesian.py:43: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalVincenty.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalVincenty.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
./test/testCartesian.py:43: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalKarney.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalKarney.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
    test 93 __eq__: True
    test 94 __ne__: False
    test 95 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 96 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 97 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 98 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 99 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 100 isequalTo: <class 'bool'>
    test 101 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 102 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 103 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 104 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 105 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 106 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 107 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 108 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 109 xyz3: <class 'tuple'>
    test 110 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 111 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 112 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 113 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 114 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 115 isequalTo: <class 'bool'>
    test 116 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 117 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 118 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 119 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 120 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 121 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 122 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 123 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 124 xyz3: <class 'tuple'>
    test 125 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 126 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 127 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 128 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 129 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 130 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W

    2 tests skipped (4): No module named 'numpy': required by vector2d._numpy
    test 131 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 132 vector3d.intersections2: 0.0312613
    test 133 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 134 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 135 xyz2rtp: 37.417, 36.699, 63.435
    test 136 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 137 rtp2xyz: 10.0, 20.0, 30.0
    test 138 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 139 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 140 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 141 destinationXyz: Tuple(x=10.175954, y=20.351908, z=32.201182, lat=54.754059, lon=63.434949, height=-6370969.342158, C=4, M=None, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 142 destinationXyz: Cartesian(10.176, 20.352, 32.201)

    testCartesian(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 143 Cartesian0: [3980581, 97, 4966825]
    test 144 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 145 isEllipsoidal: True
    test 146 isSpherical: False
    test 147 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 148 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 149 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 150 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 151 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 152 __matmul__: [3980580.998, 97.0, 4966824.998]
# lazily imported pygeodesy.triaxials by ellipsoids.py line 1163
    test 153 height: 0.242887
    test 154 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 155 height4: [3980580.8, 97.0, 4966824.8]
    test 156 height3: (3980581.0, 97.0, 4966825.0)
    test 157 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 158 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 159 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 160 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 161 LatLon: 51.47°N, 000.4543°E, -0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 162 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 163 LatLon: 33.95°N, 118.4°W
    test 164 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 165 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 166 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 167 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 168 copy: True
    test 169 __eq__: True
    test 170 __ne__: False
    test 171 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 172 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 173 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 174 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 175 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 176 isequalTo: <class 'bool'>
    test 177 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 178 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 179 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 180 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 181 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 182 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 183 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 184 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 185 xyz3: <class 'tuple'>
    test 186 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 187 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 188 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 189 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 190 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 191 isequalTo: <class 'bool'>
    test 192 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 193 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 194 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 195 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 196 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 197 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 198 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 199 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 200 xyz3: <class 'tuple'>
    test 201 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 202 ellipsoidalNvector.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 203 ellipsoidalNvector.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 204 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 205 ellipsoidalNvector.Cartesian.intersections2: 0.0312613
    test 206 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 207 vector3d.intersections2: 0.0312613
    test 208 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 209 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 210 xyz2rtp: 37.417, 36.699, 63.435
    test 211 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 212 rtp2xyz: 10.0, 20.0, 30.0
    test 213 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 214 toCartesian: Cartesian(10.0, 20.0, 30.0)
./test/testCartesian.py:43: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalExact.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  d = c.convertDatum(datum2)
./test/testCartesian.py:44: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalExact.Cartesian.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  t = d.convertDatum(datum)
    test 215 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 216 destinationXyz: Tuple(x=9.553253, y=19.106505, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 217 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    testCartesian(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 218 Cartesian0: [3980581, 97, 4966825]
    test 219 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 220 isEllipsoidal: True
    test 221 isSpherical: False
    test 222 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 223 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 224 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 225 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 226 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 227 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 228 height: 0.242887
    test 229 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 230 height4: [3980580.8, 97.0, 4966824.8]
    test 231 height3: (3980581.0, 97.0, 4966825.0)
    test 232 Vector4Tuple: 0.622817765, 1.51770114e-05, 0.782366942, 0.242886808
    test 233 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 234 LatLon: 51.47°N, 000.4543°E, -0.00m  FAILED, KNOWN, expected 51.47°N, 000.4543°E
    test 235 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 236 LatLon: 33.95°N, 118.4°W
    test 237 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 238 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 239 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 240 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 241 copy: True
    test 242 __eq__: True
    test 243 __ne__: False
    test 244 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 245 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 246 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 247 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 248 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 249 isequalTo: <class 'bool'>
    test 250 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 251 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 252 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 253 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 254 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 255 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 256 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 257 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 258 xyz3: <class 'tuple'>
    test 259 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 260 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 261 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 262 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 263 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 264 isequalTo: <class 'bool'>
    test 265 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 266 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 267 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 268 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 269 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 270 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 271 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 272 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 273 xyz3: <class 'tuple'>
    test 274 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 275 ellipsoidalVincenty.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 276 ellipsoidalVincenty.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 277 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 278 ellipsoidalVincenty.Cartesian.intersections2: 0.0312613
    test 279 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 280 vector3d.intersections2: 0.0312613
    test 281 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 282 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 283 xyz2rtp: 37.417, 36.699, 63.435
    test 284 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 285 rtp2xyz: 10.0, 20.0, 30.0
    test 286 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 287 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 288 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 289 destinationXyz: Tuple(x=9.553253, y=19.106505, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 290 destinationXyz: Cartesian(9.553, 19.107, 32.001)
# lazily imported pygeodesy.ellipsoidalKarney by testCartesian.py line 206

    testCartesian(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 291 Cartesian0: [3980581, 97, 4966825]
    test 292 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 293 isEllipsoidal: True
    test 294 isSpherical: False
    test 295 copy(Cartesian): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 296 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 297 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 298 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 299 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 300 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 301 height: 0.242887
    test 302 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 303 height4: [3980580.8, 97.0, 4966824.8]
    test 304 height3: (3980581.0, 97.0, 4966825.0)
    test 305 Vector4Tuple: 0.622817765, 1.51770114e-05, 0.782366942, 0.242886808
    test 306 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 307 LatLon: 51.47°N, 000.4543°E
    test 308 LatLon: 40.633365°N, 073.783328°W
    test 309 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 310 LatLon: 41.32°S, 174.81°E
    test 311 LatLon: 40.96°N, 005.5°E
    test 312 LatLon: 40.1°N, 116.6°E
    test 313 LatLon: 37.6°N, 122.4°W
    test 314 copy: True
    test 315 __eq__: True
    test 316 __ne__: False
    test 317 Cartesian: <class 'pygeodesy.ellipsoidalKarney.Cartesian'>
    test 318 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 319 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 320 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 321 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 322 isequalTo: <class 'bool'>
    test 323 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 324 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 325 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 326 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 327 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 328 toLatLon: <class 'pygeodesy.ellipsoidalKarney.LatLon'>
    test 329 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 330 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 331 xyz3: <class 'tuple'>
    test 332 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 333 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 334 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 335 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 336 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 337 isequalTo: <class 'bool'>
    test 338 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 339 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 340 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 341 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 342 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 343 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 344 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 345 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 346 xyz3: <class 'tuple'>
    test 347 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 348 ellipsoidalKarney.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 349 ellipsoidalKarney.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 350 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 351 ellipsoidalKarney.Cartesian.intersections2: 0.0312613
    test 352 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 353 vector3d.intersections2: 0.0312613
    test 354 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 355 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 356 xyz2rtp: 37.417, 36.699, 63.435
    test 357 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 358 rtp2xyz: 10.0, 20.0, 30.0
    test 359 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 360 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 361 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 362 destinationXyz: Tuple(x=9.553253, y=19.106506, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 363 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    testCartesian(pygeodesy.ellipsoidalExact, 24.11.06)
    test 364 Cartesian0: [3980581, 97, 4966825]
    test 365 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 366 isEllipsoidal: True
    test 367 isSpherical: False
    test 368 copy(Cartesian): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 369 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 370 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 371 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 372 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 373 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 374 height: 0.242887
    test 375 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 376 height4: [3980580.8, 97.0, 4966824.8]
    test 377 height3: (3980581.0, 97.0, 4966825.0)
    test 378 Vector4Tuple: 0.622817765, 1.51770114e-05, 0.782366942, 0.242886808
    test 379 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 380 LatLon: 51.47°N, 000.4543°E
    test 381 LatLon: 40.633365°N, 073.783328°W
    test 382 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 383 LatLon: 41.32°S, 174.81°E
    test 384 LatLon: 40.96°N, 005.5°E
    test 385 LatLon: 40.1°N, 116.6°E
    test 386 LatLon: 37.6°N, 122.4°W
    test 387 copy: True
    test 388 __eq__: True
    test 389 __ne__: False
    test 390 Cartesian: <class 'pygeodesy.ellipsoidalExact.Cartesian'>
    test 391 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 392 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 393 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 394 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 395 isequalTo: <class 'bool'>
    test 396 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 397 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 398 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 399 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 400 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 401 toLatLon: <class 'pygeodesy.ellipsoidalExact.LatLon'>
    test 402 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 403 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 404 xyz3: <class 'tuple'>
    test 405 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 406 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 407 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 408 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 409 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 410 isequalTo: <class 'bool'>
    test 411 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 412 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 413 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 414 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 415 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 416 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 417 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 418 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 419 xyz3: <class 'tuple'>
    test 420 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 421 ellipsoidalExact.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 422 ellipsoidalExact.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 423 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 424 ellipsoidalExact.Cartesian.intersections2: 0.0312613
    test 425 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 426 vector3d.intersections2: 0.0312613
    test 427 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 428 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    test 429 xyz2rtp: 37.417, 36.699, 63.435
    test 430 xyz2rtp: <class 'pygeodesy.cartesianBase.RadiusThetaPhi3Tuple'>
    test 431 rtp2xyz: 10.0, 20.0, 30.0
    test 432 rtp2xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 433 toCartesian: Cartesian(10.0, 20.0, 30.0)
    test 434 toRtp: Test(r=37.416574, theta=36.699225, phi=63.434949)

    test 435 destinationXyz: Tuple(x=9.553253, y=19.106506, z=32.000521, lat=89.971452, lon=63.434949, height=-6356720.308402, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 436 destinationXyz: Cartesian(9.553, 19.107, 32.001)

    32 of 436 testCartesian.py tests (7.3%) FAILED, incl. 20 KNOWN plus 12 DeprecationWarnings, 4 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 80.912 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testClasses.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.itemsorted from .basics by testClasses.py line 13
# lazily imported pygeodesy.Geodesic from .geodesicw by testClasses.py line 13
# lazily imported pygeodesy.GeodesicLine from .geodesicw by testClasses.py line 13
# lazily imported pygeodesy.Geohashed from .geohash by testClasses.py line 13
# lazily imported pygeodesy.Property from .props by testClasses.py line 13
# lazily imported pygeodesy.Property_RO from .props by testClasses.py line 13
# lazily imported pygeodesy.property_ROnce from .props by testClasses.py line 13
# lazily imported pygeodesy.property_ROver from .props by testClasses.py line 13
# lazily imported pygeodesy.SciPyWarning from .errors by testClasses.py line 13
# lazily imported pygeodesy.Str_ from .interns by testClasses.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testClasses.py line 83
# lazily imported pygeodesy.ellipsoidalKarney by testClasses.py line 83
# lazily imported pygeodesy.ellipsoidalNvector by testClasses.py line 83
# lazily imported pygeodesy.ellipsoidalVincenty by testClasses.py line 83
# lazily imported pygeodesy.sphericalNvector by testClasses.py line 83
# lazily imported pygeodesy.sphericalTrigonometry by testClasses.py line 83

    testing testClasses.py 24.07.29 isLazy=3

    testCartesianAttrs(24.07.29)
    test 1 angleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 apply() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 bearing() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 bools() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 cassini() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 10 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 11 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 cmp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 collins() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 collins5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 17 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 18 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 cross() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 crosserrors _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 dividedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 dot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 Ecef property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 27 Ecef property_ROnce: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 28 ellipsoidalCartesian property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 30 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 equirectangular() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 euclid Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 fabs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 floats() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 height3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 homogeneous property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 ints() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 iscolinearWith() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 isconjugateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 latlon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 latlonheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 length Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 length2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 meeus2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 minus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 minus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 63 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 64 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 65 negate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 66 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 67 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 68 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 69 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 philamheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 pierlot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 72 pierlotx() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 plus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 74 plus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 75 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 76 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 77 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 78 renamed() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 79 Roc2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 80 rotate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 81 rotateAround() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 sizeof property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 83 soddy4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 84 sphericalCartesian property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 85 sum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 tienstra() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 87 tienstra7() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 times() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 89 times_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 91 to2ll() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 92 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 93 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 95 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 96 toLatLon() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 98 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 99 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 100 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 101 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 102 toRtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 103 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 104 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 105 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 106 toTransforms_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 107 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 108 trilaterate2d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 109 trilaterate3d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 unit() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 111 x Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 112 x2y2z2 property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 113 xyz Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 114 xyz3 property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 115 y Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 116 z Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(24.07.29)
    test 117 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 118 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 119 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 120 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 121 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 122 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(24.07.29)
    test 123 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 124 antipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 125 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 126 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 127 bearingTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 128 bounds() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 129 boundsOf() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 chordTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 131 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 132 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 133 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 134 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 135 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 136 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 137 clipid property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 138 compassAngle() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 139 compassAngleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 140 convergence _Deprecated_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 141 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 142 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 143 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 144 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 145 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 146 cosineLawTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 147 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 148 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 149 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 150 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 151 destination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 152 destination2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 153 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 154 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 155 distanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 156 distanceTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 157 distanceTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 158 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 159 Ecef property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 160 Ecef property_ROnce: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 161 elevation2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 162 ellipsoid() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 163 ellipsoidalLatLon property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 ellipsoids() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 165 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 166 epsilon _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 167 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 168 equals3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 Equidistant Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 170 equirectangularTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 171 euclideanTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 172 finalBearingOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 173 finalBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 174 flatLocalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 flatPolarTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 176 gamma property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 177 geodesic property_RO: pygeodesy.ellipsoidalVincenty
    test 178 geodesic Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney
    test 179 geodesicx Property_RO: pygeodesy.ellipsoidalExact
    test 180 geoidHeight2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 181 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 greatCircleTo() method: pygeodesy.sphericalNvector
    test 183 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 184 haversineTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 185 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 186 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 heightStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 188 hubenyTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 189 initialBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 190 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 191 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 192 intersecant2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 intersection2() method: pygeodesy.sphericalNvector
    test 195 intersection3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 196 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 197 isantipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 198 isantipodeTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 199 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 200 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 201 isenclosedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 202 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 203 isequalTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 204 isnormal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 205 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 206 isWithin() method: pygeodesy.sphericalNvector
    test 207 iswithin() method: pygeodesy.sphericalNvector
    test 208 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 209 iterations _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 210 lam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 211 lat Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 212 latlon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 213 latlon2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 214 latlon2round() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 215 latlon_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 216 latlonheight Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 217 lon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 218 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 219 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 220 midpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 221 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 222 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 223 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 224 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 225 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 226 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 227 napieradius _NamedProperty: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 228 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 229 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 230 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 231 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 232 nearestOn8() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 233 nearestTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 234 normal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 235 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 236 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 237 phi Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 238 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 239 philam2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 240 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 241 plumbTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 242 points() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 243 points2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 244 PointsIter() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 245 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 246 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 247 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 248 renamed() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 249 rhumbAzimuthTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 250 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 251 rhumbDestination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 252 rhumbDistanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 253 rhumbIntersecant2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 254 rhumbLine() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 255 rhumbMidpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 256 scale Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 257 sizeof property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 258 sphericalLatLon property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 259 thomasTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 260 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 261 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 262 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 263 toCartesian() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 264 toCss() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 265 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 266 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 267 toEtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 268 toLcc() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 269 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 270 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 271 toMgrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 272 toNormal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 273 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 274 toOsgr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 275 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 276 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 277 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 278 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 279 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 280 toUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 281 toUtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 282 toUtmUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 283 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 284 toVector3d() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 285 toWm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 286 triangle7() method: pygeodesy.sphericalTrigonometry
    test 287 triangulate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 288 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 289 trilaterate5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 290 vincentysTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 291 xyz property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 292 xyz3 property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 293 xyzh Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(24.07.29)
    test 294 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 295 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 296 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 297 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 298 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 299 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(24.07.29)
    test 300 angleTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 301 apply() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 302 attrs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 303 bearing() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 304 bools() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 305 circin6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 306 circum3() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 307 circum4_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 308 classname Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 309 classnaming _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 310 classof() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 311 cmp() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 312 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 313 cross() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 314 crosserrors _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 315 datum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 316 dividedBy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 317 dot() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 318 dup() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 319 Ecef property_ROnce: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 320 ellipsoidalNvector property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 321 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 322 equirectangular() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 323 euclid Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 324 fabs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 325 floats() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 326 greatCircle() method: pygeodesy.sphericalNvector
    test 327 H _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 328 h _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 329 homogeneous property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 330 hStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 331 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 332 ints() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 333 iscolinearWith() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 334 isconjugateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 335 isEllipsoidal Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 336 isequalTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 337 isSpherical Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 338 iteration property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 339 lam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 340 lat Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 341 latlon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 342 latlonheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 343 latlonheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 344 length Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 345 length2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 346 lon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 347 meeus2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 348 methodname() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 349 minus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 350 minus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 351 name _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 352 named Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 353 named2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 354 named3 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 355 named4 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 356 nearestOn() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 357 nearestOn6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 358 negate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 359 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 360 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 361 phi Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 362 philam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 363 philamheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 364 philamheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 365 plus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 366 plus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 367 radii11() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 368 rename() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 369 renamed() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 370 rotate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 371 rotateAround() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 372 sizeof property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 373 soddy4() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 374 sphericalNvector property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 375 sum() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 376 times() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 377 times_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 378 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 379 to2ll() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 380 to3abh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 381 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 382 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 383 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 384 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 385 toLatLon() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 386 toRepr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 387 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 388 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 389 toVector3d() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 390 trilaterate2d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 391 trilaterate3d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 392 unit() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 393 x Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 394 x2y2z2 property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 395 xyz Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 396 xyz3 property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 397 xyzh Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 398 y Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 399 z Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(24.07.29)
    test 400 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 401 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(24.07.29)
    test 402 angleTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 403 apply() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 404 attrs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 405 bearing() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 406 bools() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 407 circin6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 408 circum3() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 409 circum4_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 410 classname Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 411 classnaming _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 412 classof() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 413 cmp() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 414 copy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 415 cross() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 416 crosserrors _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 417 dividedBy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 418 dot() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 419 dup() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 420 equals() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 421 equirectangular() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 422 euclid Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 423 fabs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 424 floats() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 425 homogeneous property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 426 intermediateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 427 ints() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 428 iscolinearWith() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 429 isconjugateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 430 isequalTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 431 iteration property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 432 length Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 433 length2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 434 meeus2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 435 methodname() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 436 minus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 437 minus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 438 name _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 439 named Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 440 named2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 441 named3 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 442 named4 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 443 nearestOn() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 444 nearestOn6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 445 negate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 446 others() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 447 parse() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 448 plus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 449 plus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 450 radii11() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 451 rename() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 452 renamed() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 453 rotate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 454 rotateAround() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 455 sizeof property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 456 soddy4() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 457 sum() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 458 times() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 459 times_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 460 to3xyz() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 461 toRepr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 462 toStr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 463 toStr2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 464 trilaterate2d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 465 trilaterate3d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 466 unit() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 467 x Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 468 x2y2z2 property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 469 xyz Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 470 xyz3 property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 471 y Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 472 z Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(24.07.29)
    test 473 pygeodesy.nvectorBase: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 474 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 475 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(24.07.29)

    all 475 testClasses.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 7.819 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testClipy.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testClipy.py line 11
# lazily imported pygeodesy.F__F_ from .dms by testClipy.py line 11
# lazily imported pygeodesy.boundsOf from .points by testClipy.py line 11
# lazily imported pygeodesy.clipCS4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipError from .errors by testClipy.py line 11
# lazily imported pygeodesy.clipFHP4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipFHP4Tuple from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipGH4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipLB6 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH3 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testClipy.py line 288
# lazily imported pygeodesy.ellipsoidalVincenty by testClipy.py line 288
# lazily imported pygeodesy.sphericalNvector by testClipy.py line 288
# lazily imported pygeodesy.sphericalTrigonometry by testClipy.py line 288

    testing testClipy.py 23.03.27 isLazy=3

    testing(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 1 clipCS4.p1: 07.5°N, 010.0°E
    test 2 clipCS4.p2: 04.5°N, 000.0°E
    test 3 clipCS4.i: 3
    test 4 clipCS4.j: 0
    test 5 clipCS4.p1: 05.0°N, 005.0°E
    test 6 clipCS4.p2: 05.0°N, 005.0°E
    test 7 clipCS4.i: 1
    test 8 clipCS4.j: 2
    test 9 clipLB6.p1: 07.5°N, 010.0°E
    test 10 clipLB6.p2: 04.5°N, 000.0°E
    test 11 clipLB6.i: 3
    test 12 clipLB6.fi: 3.25
    test 13 clipLB6.fi: 07.5°N, 010.0°E
    test 14 clipLB6.fj: 3.75
    test 15 clipLB6.fj: 04.5°N, 000.0°E
    test 16 clipLB6.j: 0
    test 17 clipLB6.fin: 4
    test 18 clipLB6.p1: 05.0°N, 005.0°E
    test 19 clipLB6.p2: 05.0°N, 005.0°E
    test 20 clipLB6.i: 1
    test 21 clipLB6.fi: 1.00
    test 22 clipLB6.fi: 05.0°N, 005.0°E
    test 23 clipLB6.fj: 2.00
    test 24 clipLB6.fj: 05.0°N, 005.0°E
    test 25 clipLB6.j: 2
    test 26 clipLB6.fin: 4
# lazily imported pygeodesy.booleans by iters.py line 503
    test 27 clipCS4.p1: 60.0°N, 123.333333°E
    test 28 clipCS4.p2: 62.857143°N, 130.0°E
    test 29 clipCS4.i: 0
    test 30 clipCS4.j: 1
    test 31 clipLB6.p1: 60.0°N, 123.333333°E
    test 32 clipLB6.p2: 62.857143°N, 130.0°E
    test 33 clipLB6.i: 0
    test 34 clipLB6.fi: 0.666667
    test 35 clipLB6.fi: 60.0°N, 123.333333°E
    test 36 clipLB6.fj: 0.714286
    test 37 clipLB6.fj: 62.857143°N, 130.0°E
    test 38 clipLB6.j: 1
    test 39 clipLB6.fin: 0
    test 40 clipCS4.p1: 17.5°N, 020.0°E
    test 41 clipCS4.p2: 16.25°N, 015.0°E
    test 42 clipCS4.i: 2
    test 43 clipCS4.j: 0
    test 44 clipLB6.p1: 17.5°N, 020.0°E
    test 45 clipLB6.p2: 16.25°N, 015.0°E
    test 46 clipLB6.i: 2
    test 47 clipLB6.fi: 2.500
    test 48 clipLB6.fi: 17.5°N, 020.0°E
    test 49 clipLB6.fj: 2.750
    test 50 clipLB6.fj: 16.25°N, 015.0°E
    test 51 clipLB6.j: 0
    test 52 clipLB6.fin: 3
    test 53 clipSH1.len: 4
    test 54 clipSH1.0: 20.0°N, 020.0°E
    test 55 clipSH1.LL: True
    test 56 clipSH1.1: 17.5°N, 020.0°E
    test 57 clipSH1.LL: True
    test 58 clipSH1.2: 16.25°N, 015.0°E
    test 59 clipSH1.LL: True
    test 60 clipSH1.3: 20.0°N, 015.0°E
    test 61 clipSH1.LL: True
    test 62 clipSH2.len: 5
    test 63 clipSH2.0: 18.571°N, 024.286°E
    test 64 clipSH2.LL: True
    test 65 clipSH2.1: 16.667°N, 016.667°E
    test 66 clipSH2.LL: True
    test 67 clipSH2.2: 20.0°N, 015.0°E
    test 68 clipSH2.LL: True
    test 69 clipSH2.3: 25.0°N, 020.0°E
    test 70 clipSH2.LL: True
    test 71 clipSH2.4: 22.0°N, 026.0°E
    test 72 clipSH2.LL: True
    test 73 clipSH3.len: 2
    test 74 clipSH3.0: 18.571°N, 024.286°E
    test 75 clipSH3.LL: True
    test 76 clipSH3.1: 16.667°N, 016.667°E
    test 77 clipSH3.LL: True
    test 78 clipSH3.edge.: True
    test 79 clipSH3.len: 2
    test 80 clipSH3.0: 16.667°N, 016.667°E
    test 81 clipSH3.LL: True
    test 82 clipSH3.1: 20.0°N, 015.0°E
    test 83 clipSH3.LL: True
    test 84 clipSH3.edge.: False
    test 85 clipSH3.len: 2
    test 86 clipSH3.0: 20.0°N, 015.0°E
    test 87 clipSH3.LL: True
    test 88 clipSH3.1: 25.0°N, 020.0°E
    test 89 clipSH3.LL: True
    test 90 clipSH3.edge.: True
    test 91 clipSH3.len: 2
    test 92 clipSH3.0: 25.0°N, 020.0°E
    test 93 clipSH3.LL: True
    test 94 clipSH3.1: 22.0°N, 026.0°E
    test 95 clipSH3.LL: True
    test 96 clipSH3.edge.: True
    test 97 clipSH3.len: 2
    test 98 clipSH3.0: 22.0°N, 026.0°E
    test 99 clipSH3.LL: True
    test 100 clipSH3.1: 18.571°N, 024.286°E
    test 101 clipSH3.LL: True
    test 102 clipSH3.edge.: False
    test 103 clipSH2.reversed.len: 5
    test 104 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 105 clipSH2.reversed.LL: True
    test 106 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 107 clipSH2.reversed.LL: True
    test 108 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 109 clipSH2.reversed.LL: True
    test 110 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 111 clipSH2.reversed.LL: True
    test 112 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 113 clipSH2.reversed.LL: True
    test 114 clipSH3.reversed.len: 2
    test 115 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 116 clipSH3.reversed.LL: True
    test 117 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 118 clipSH3.reversed.LL: True
    test 119 clipSH3.edge.reversed.: True
    test 120 clipSH3.reversed.len: 2
    test 121 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 122 clipSH3.reversed.LL: True
    test 123 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 124 clipSH3.reversed.LL: True
    test 125 clipSH3.edge.reversed.: False
    test 126 clipSH3.reversed.len: 2
    test 127 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 128 clipSH3.reversed.LL: True
    test 129 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 130 clipSH3.reversed.LL: True
    test 131 clipSH3.edge.reversed.: True
    test 132 clipSH3.reversed.len: 2
    test 133 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 134 clipSH3.reversed.LL: True
    test 135 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 136 clipSH3.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.reversed.len: 2
    test 139 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 140 clipSH3.reversed.LL: True
    test 141 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 142 clipSH3.reversed.LL: True
    test 143 clipSH3.edge.reversed.: False
    test 144 clipSH.allout: ()
    test 145 clipSH3.allout: ()
    test 146 clipSH.allout.reversed: ()
    test 147 clipSH3.allout.reversed: ()
    test 148 clipSH.allin.len: 4
    test 149 clipSH.allin.0: 20.0°N, 030.0°E
    test 150 clipSH.allin.LL: True
    test 151 clipSH.allin.1: 15.0°N, 010.0°E
    test 152 clipSH.allin.LL: True
    test 153 clipSH.allin.2: 25.0°N, 020.0°E
    test 154 clipSH.allin.LL: True
    test 155 clipSH.allin.3: 20.0°N, 030.0°E
    test 156 clipSH.allin.LL: True
    test 157 clipSH3.allin.len: 2
    test 158 clipSH3.allin.0: 20.0°N, 030.0°E
    test 159 clipSH3.allin.LL: True
    test 160 clipSH3.allin.1: 15.0°N, 010.0°E
    test 161 clipSH3.allin.LL: True
    test 162 clipSH3.edge.: True
    test 163 clipSH3.allin.len: 2
    test 164 clipSH3.allin.0: 15.0°N, 010.0°E
    test 165 clipSH3.allin.LL: True
    test 166 clipSH3.allin.1: 25.0°N, 020.0°E
    test 167 clipSH3.allin.LL: True
    test 168 clipSH3.edge.: True
    test 169 clipSH.allin.reversed.len: 4
    test 170 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 171 clipSH.allin.reversed.LL: True
    test 172 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 173 clipSH.allin.reversed.LL: True
    test 174 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 175 clipSH.allin.reversed.LL: True
    test 176 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 177 clipSH.allin.reversed.LL: True
    test 178 clipSH3.allin.reversed.len: 2
    test 179 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 180 clipSH3.allin.reversed.LL: True
    test 181 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 182 clipSH3.allin.reversed.LL: True
    test 183 clipSH3.edge.reversed.: True
    test 184 clipSH3.allin.reversed.len: 2
    test 185 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 186 clipSH3.allin.reversed.LL: True
    test 187 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 188 clipSH3.allin.reversed.LL: True
    test 189 clipSH3.edge.reversed.: True
    test 190 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 191 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 192 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 193 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 194 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 195 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 196 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 197 overlap: (15.0, 10.0, 20.0, 20.0)
    test 198 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 199 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 200 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 201 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 202 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 203 clipSH9: None
    test 204 clipSH10: None
    test 205 clipSH11: None
    test 206 clipSH12: None

    test 207 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 208 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 209 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 210 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 211 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 212 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 213 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 214 clipCS4.p1: 07.5°N, 010.0°E
    test 215 clipCS4.p2: 04.5°N, 000.0°E
    test 216 clipCS4.i: 3
    test 217 clipCS4.j: 0
    test 218 clipCS4.p1: 05.0°N, 005.0°E
    test 219 clipCS4.p2: 05.0°N, 005.0°E
    test 220 clipCS4.i: 1
    test 221 clipCS4.j: 2
    test 222 clipLB6.p1: 07.5°N, 010.0°E
    test 223 clipLB6.p2: 04.5°N, 000.0°E
    test 224 clipLB6.i: 3
    test 225 clipLB6.fi: 3.25
    test 226 clipLB6.fi: 07.5°N, 010.0°E
    test 227 clipLB6.fj: 3.75
    test 228 clipLB6.fj: 04.5°N, 000.0°E
    test 229 clipLB6.j: 0
    test 230 clipLB6.fin: 4
    test 231 clipLB6.p1: 05.0°N, 005.0°E
    test 232 clipLB6.p2: 05.0°N, 005.0°E
    test 233 clipLB6.i: 1
    test 234 clipLB6.fi: 1.00
    test 235 clipLB6.fi: 05.0°N, 005.0°E
    test 236 clipLB6.fj: 2.00
    test 237 clipLB6.fj: 05.0°N, 005.0°E
    test 238 clipLB6.j: 2
    test 239 clipLB6.fin: 4
    test 240 clipCS4.p1: 60.0°N, 123.333333°E
    test 241 clipCS4.p2: 62.857143°N, 130.0°E
    test 242 clipCS4.i: 0
    test 243 clipCS4.j: 1
    test 244 clipLB6.p1: 60.0°N, 123.333333°E
    test 245 clipLB6.p2: 62.857143°N, 130.0°E
    test 246 clipLB6.i: 0
    test 247 clipLB6.fi: 0.666667
    test 248 clipLB6.fi: 60.0°N, 123.333333°E
    test 249 clipLB6.fj: 0.714286
    test 250 clipLB6.fj: 62.857143°N, 130.0°E
    test 251 clipLB6.j: 1
    test 252 clipLB6.fin: 0
    test 253 clipCS4.p1: 17.5°N, 020.0°E
    test 254 clipCS4.p2: 16.25°N, 015.0°E
    test 255 clipCS4.i: 2
    test 256 clipCS4.j: 0
    test 257 clipLB6.p1: 17.5°N, 020.0°E
    test 258 clipLB6.p2: 16.25°N, 015.0°E
    test 259 clipLB6.i: 2
    test 260 clipLB6.fi: 2.500
    test 261 clipLB6.fi: 17.5°N, 020.0°E
    test 262 clipLB6.fj: 2.750
    test 263 clipLB6.fj: 16.25°N, 015.0°E
    test 264 clipLB6.j: 0
    test 265 clipLB6.fin: 3
    test 266 clipSH1.len: 4
    test 267 clipSH1.0: 20.0°N, 020.0°E
    test 268 clipSH1.LL: True
    test 269 clipSH1.1: 17.5°N, 020.0°E
    test 270 clipSH1.LL: True
    test 271 clipSH1.2: 16.25°N, 015.0°E
    test 272 clipSH1.LL: True
    test 273 clipSH1.3: 20.0°N, 015.0°E
    test 274 clipSH1.LL: True
    test 275 clipSH2.len: 5
    test 276 clipSH2.0: 18.571°N, 024.286°E
    test 277 clipSH2.LL: True
    test 278 clipSH2.1: 16.667°N, 016.667°E
    test 279 clipSH2.LL: True
    test 280 clipSH2.2: 20.0°N, 015.0°E
    test 281 clipSH2.LL: True
    test 282 clipSH2.3: 25.0°N, 020.0°E
    test 283 clipSH2.LL: True
    test 284 clipSH2.4: 22.0°N, 026.0°E
    test 285 clipSH2.LL: True
    test 286 clipSH3.len: 2
    test 287 clipSH3.0: 18.571°N, 024.286°E
    test 288 clipSH3.LL: True
    test 289 clipSH3.1: 16.667°N, 016.667°E
    test 290 clipSH3.LL: True
    test 291 clipSH3.edge.: True
    test 292 clipSH3.len: 2
    test 293 clipSH3.0: 16.667°N, 016.667°E
    test 294 clipSH3.LL: True
    test 295 clipSH3.1: 20.0°N, 015.0°E
    test 296 clipSH3.LL: True
    test 297 clipSH3.edge.: False
    test 298 clipSH3.len: 2
    test 299 clipSH3.0: 20.0°N, 015.0°E
    test 300 clipSH3.LL: True
    test 301 clipSH3.1: 25.0°N, 020.0°E
    test 302 clipSH3.LL: True
    test 303 clipSH3.edge.: True
    test 304 clipSH3.len: 2
    test 305 clipSH3.0: 25.0°N, 020.0°E
    test 306 clipSH3.LL: True
    test 307 clipSH3.1: 22.0°N, 026.0°E
    test 308 clipSH3.LL: True
    test 309 clipSH3.edge.: True
    test 310 clipSH3.len: 2
    test 311 clipSH3.0: 22.0°N, 026.0°E
    test 312 clipSH3.LL: True
    test 313 clipSH3.1: 18.571°N, 024.286°E
    test 314 clipSH3.LL: True
    test 315 clipSH3.edge.: False
    test 316 clipSH2.reversed.len: 5
    test 317 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 318 clipSH2.reversed.LL: True
    test 319 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 320 clipSH2.reversed.LL: True
    test 321 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 322 clipSH2.reversed.LL: True
    test 323 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 324 clipSH2.reversed.LL: True
    test 325 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 326 clipSH2.reversed.LL: True
    test 327 clipSH3.reversed.len: 2
    test 328 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 329 clipSH3.reversed.LL: True
    test 330 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 331 clipSH3.reversed.LL: True
    test 332 clipSH3.edge.reversed.: True
    test 333 clipSH3.reversed.len: 2
    test 334 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 335 clipSH3.reversed.LL: True
    test 336 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 337 clipSH3.reversed.LL: True
    test 338 clipSH3.edge.reversed.: False
    test 339 clipSH3.reversed.len: 2
    test 340 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 341 clipSH3.reversed.LL: True
    test 342 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 343 clipSH3.reversed.LL: True
    test 344 clipSH3.edge.reversed.: True
    test 345 clipSH3.reversed.len: 2
    test 346 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 347 clipSH3.reversed.LL: True
    test 348 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 349 clipSH3.reversed.LL: True
    test 350 clipSH3.edge.reversed.: True
    test 351 clipSH3.reversed.len: 2
    test 352 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 353 clipSH3.reversed.LL: True
    test 354 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 355 clipSH3.reversed.LL: True
    test 356 clipSH3.edge.reversed.: False
    test 357 clipSH.allout: ()
    test 358 clipSH3.allout: ()
    test 359 clipSH.allout.reversed: ()
    test 360 clipSH3.allout.reversed: ()
    test 361 clipSH.allin.len: 4
    test 362 clipSH.allin.0: 20.0°N, 030.0°E
    test 363 clipSH.allin.LL: True
    test 364 clipSH.allin.1: 15.0°N, 010.0°E
    test 365 clipSH.allin.LL: True
    test 366 clipSH.allin.2: 25.0°N, 020.0°E
    test 367 clipSH.allin.LL: True
    test 368 clipSH.allin.3: 20.0°N, 030.0°E
    test 369 clipSH.allin.LL: True
    test 370 clipSH3.allin.len: 2
    test 371 clipSH3.allin.0: 20.0°N, 030.0°E
    test 372 clipSH3.allin.LL: True
    test 373 clipSH3.allin.1: 15.0°N, 010.0°E
    test 374 clipSH3.allin.LL: True
    test 375 clipSH3.edge.: True
    test 376 clipSH3.allin.len: 2
    test 377 clipSH3.allin.0: 15.0°N, 010.0°E
    test 378 clipSH3.allin.LL: True
    test 379 clipSH3.allin.1: 25.0°N, 020.0°E
    test 380 clipSH3.allin.LL: True
    test 381 clipSH3.edge.: True
    test 382 clipSH.allin.reversed.len: 4
    test 383 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 384 clipSH.allin.reversed.LL: True
    test 385 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 386 clipSH.allin.reversed.LL: True
    test 387 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 388 clipSH.allin.reversed.LL: True
    test 389 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 390 clipSH.allin.reversed.LL: True
    test 391 clipSH3.allin.reversed.len: 2
    test 392 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 393 clipSH3.allin.reversed.LL: True
    test 394 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 395 clipSH3.allin.reversed.LL: True
    test 396 clipSH3.edge.reversed.: True
    test 397 clipSH3.allin.reversed.len: 2
    test 398 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 399 clipSH3.allin.reversed.LL: True
    test 400 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 401 clipSH3.allin.reversed.LL: True
    test 402 clipSH3.edge.reversed.: True
    test 403 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 404 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 405 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 406 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 407 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 408 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 409 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 410 overlap: (15.0, 10.0, 20.0, 20.0)
    test 411 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 412 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 413 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 414 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 415 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 416 clipSH9: None
    test 417 clipSH10: None
    test 418 clipSH11: None
    test 419 clipSH12: None

    test 420 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 421 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 422 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 423 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 424 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 425 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 426 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalNvector, 24.11.07)
    test 427 clipCS4.p1: 07.5°N, 010.0°E
    test 428 clipCS4.p2: 04.5°N, 000.0°E
    test 429 clipCS4.i: 3
    test 430 clipCS4.j: 0
    test 431 clipCS4.p1: 05.0°N, 005.0°E
    test 432 clipCS4.p2: 05.0°N, 005.0°E
    test 433 clipCS4.i: 1
    test 434 clipCS4.j: 2
    test 435 clipLB6.p1: 07.5°N, 010.0°E
    test 436 clipLB6.p2: 04.5°N, 000.0°E
    test 437 clipLB6.i: 3
    test 438 clipLB6.fi: 3.25
    test 439 clipLB6.fi: 07.5°N, 010.0°E
    test 440 clipLB6.fj: 3.75
    test 441 clipLB6.fj: 04.5°N, 000.0°E
    test 442 clipLB6.j: 0
    test 443 clipLB6.fin: 4
    test 444 clipLB6.p1: 05.0°N, 005.0°E
    test 445 clipLB6.p2: 05.0°N, 005.0°E
    test 446 clipLB6.i: 1
    test 447 clipLB6.fi: 1.00
    test 448 clipLB6.fi: 05.0°N, 005.0°E
    test 449 clipLB6.fj: 2.00
    test 450 clipLB6.fj: 05.0°N, 005.0°E
    test 451 clipLB6.j: 2
    test 452 clipLB6.fin: 4
    test 453 clipCS4.p1: 60.0°N, 123.333333°E
    test 454 clipCS4.p2: 62.857143°N, 130.0°E
    test 455 clipCS4.i: 0
    test 456 clipCS4.j: 1
    test 457 clipLB6.p1: 60.0°N, 123.333333°E
    test 458 clipLB6.p2: 62.857143°N, 130.0°E
    test 459 clipLB6.i: 0
    test 460 clipLB6.fi: 0.666667
    test 461 clipLB6.fi: 60.0°N, 123.333333°E
    test 462 clipLB6.fj: 0.714286
    test 463 clipLB6.fj: 62.857143°N, 130.0°E
    test 464 clipLB6.j: 1
    test 465 clipLB6.fin: 0
    test 466 clipCS4.p1: 17.5°N, 020.0°E
    test 467 clipCS4.p2: 16.25°N, 015.0°E
    test 468 clipCS4.i: 2
    test 469 clipCS4.j: 0
    test 470 clipLB6.p1: 17.5°N, 020.0°E
    test 471 clipLB6.p2: 16.25°N, 015.0°E
    test 472 clipLB6.i: 2
    test 473 clipLB6.fi: 2.500
    test 474 clipLB6.fi: 17.5°N, 020.0°E
    test 475 clipLB6.fj: 2.750
    test 476 clipLB6.fj: 16.25°N, 015.0°E
    test 477 clipLB6.j: 0
    test 478 clipLB6.fin: 3
    test 479 clipSH1.len: 4
    test 480 clipSH1.0: 20.0°N, 020.0°E
    test 481 clipSH1.LL: True
    test 482 clipSH1.1: 17.5°N, 020.0°E
    test 483 clipSH1.LL: True
    test 484 clipSH1.2: 16.25°N, 015.0°E
    test 485 clipSH1.LL: True
    test 486 clipSH1.3: 20.0°N, 015.0°E
    test 487 clipSH1.LL: True
    test 488 clipSH2.len: 5
    test 489 clipSH2.0: 18.571°N, 024.286°E
    test 490 clipSH2.LL: True
    test 491 clipSH2.1: 16.667°N, 016.667°E
    test 492 clipSH2.LL: True
    test 493 clipSH2.2: 20.0°N, 015.0°E
    test 494 clipSH2.LL: True
    test 495 clipSH2.3: 25.0°N, 020.0°E
    test 496 clipSH2.LL: True
    test 497 clipSH2.4: 22.0°N, 026.0°E
    test 498 clipSH2.LL: True
    test 499 clipSH3.len: 2
    test 500 clipSH3.0: 18.571°N, 024.286°E
    test 501 clipSH3.LL: True
    test 502 clipSH3.1: 16.667°N, 016.667°E
    test 503 clipSH3.LL: True
    test 504 clipSH3.edge.: True
    test 505 clipSH3.len: 2
    test 506 clipSH3.0: 16.667°N, 016.667°E
    test 507 clipSH3.LL: True
    test 508 clipSH3.1: 20.0°N, 015.0°E
    test 509 clipSH3.LL: True
    test 510 clipSH3.edge.: False
    test 511 clipSH3.len: 2
    test 512 clipSH3.0: 20.0°N, 015.0°E
    test 513 clipSH3.LL: True
    test 514 clipSH3.1: 25.0°N, 020.0°E
    test 515 clipSH3.LL: True
    test 516 clipSH3.edge.: True
    test 517 clipSH3.len: 2
    test 518 clipSH3.0: 25.0°N, 020.0°E
    test 519 clipSH3.LL: True
    test 520 clipSH3.1: 22.0°N, 026.0°E
    test 521 clipSH3.LL: True
    test 522 clipSH3.edge.: True
    test 523 clipSH3.len: 2
    test 524 clipSH3.0: 22.0°N, 026.0°E
    test 525 clipSH3.LL: True
    test 526 clipSH3.1: 18.571°N, 024.286°E
    test 527 clipSH3.LL: True
    test 528 clipSH3.edge.: False
    test 529 clipSH2.reversed.len: 5
    test 530 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 531 clipSH2.reversed.LL: True
    test 532 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 533 clipSH2.reversed.LL: True
    test 534 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 535 clipSH2.reversed.LL: True
    test 536 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 537 clipSH2.reversed.LL: True
    test 538 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 539 clipSH2.reversed.LL: True
    test 540 clipSH3.reversed.len: 2
    test 541 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 542 clipSH3.reversed.LL: True
    test 543 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 544 clipSH3.reversed.LL: True
    test 545 clipSH3.edge.reversed.: True
    test 546 clipSH3.reversed.len: 2
    test 547 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 548 clipSH3.reversed.LL: True
    test 549 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 550 clipSH3.reversed.LL: True
    test 551 clipSH3.edge.reversed.: False
    test 552 clipSH3.reversed.len: 2
    test 553 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 554 clipSH3.reversed.LL: True
    test 555 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 556 clipSH3.reversed.LL: True
    test 557 clipSH3.edge.reversed.: True
    test 558 clipSH3.reversed.len: 2
    test 559 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 560 clipSH3.reversed.LL: True
    test 561 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 562 clipSH3.reversed.LL: True
    test 563 clipSH3.edge.reversed.: True
    test 564 clipSH3.reversed.len: 2
    test 565 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 566 clipSH3.reversed.LL: True
    test 567 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 568 clipSH3.reversed.LL: True
    test 569 clipSH3.edge.reversed.: False
    test 570 clipSH.allout: ()
    test 571 clipSH3.allout: ()
    test 572 clipSH.allout.reversed: ()
    test 573 clipSH3.allout.reversed: ()
    test 574 clipSH.allin.len: 4
    test 575 clipSH.allin.0: 20.0°N, 030.0°E
    test 576 clipSH.allin.LL: True
    test 577 clipSH.allin.1: 15.0°N, 010.0°E
    test 578 clipSH.allin.LL: True
    test 579 clipSH.allin.2: 25.0°N, 020.0°E
    test 580 clipSH.allin.LL: True
    test 581 clipSH.allin.3: 20.0°N, 030.0°E
    test 582 clipSH.allin.LL: True
    test 583 clipSH3.allin.len: 2
    test 584 clipSH3.allin.0: 20.0°N, 030.0°E
    test 585 clipSH3.allin.LL: True
    test 586 clipSH3.allin.1: 15.0°N, 010.0°E
    test 587 clipSH3.allin.LL: True
    test 588 clipSH3.edge.: True
    test 589 clipSH3.allin.len: 2
    test 590 clipSH3.allin.0: 15.0°N, 010.0°E
    test 591 clipSH3.allin.LL: True
    test 592 clipSH3.allin.1: 25.0°N, 020.0°E
    test 593 clipSH3.allin.LL: True
    test 594 clipSH3.edge.: True
    test 595 clipSH.allin.reversed.len: 4
    test 596 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 597 clipSH.allin.reversed.LL: True
    test 598 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 599 clipSH.allin.reversed.LL: True
    test 600 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 601 clipSH.allin.reversed.LL: True
    test 602 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 603 clipSH.allin.reversed.LL: True
    test 604 clipSH3.allin.reversed.len: 2
    test 605 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 606 clipSH3.allin.reversed.LL: True
    test 607 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 608 clipSH3.allin.reversed.LL: True
    test 609 clipSH3.edge.reversed.: True
    test 610 clipSH3.allin.reversed.len: 2
    test 611 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 612 clipSH3.allin.reversed.LL: True
    test 613 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 614 clipSH3.allin.reversed.LL: True
    test 615 clipSH3.edge.reversed.: True
    test 616 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 617 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 618 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 619 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 620 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 621 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 622 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 623 overlap: (15.0, 10.0, 20.0, 20.0)
    test 624 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 625 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 626 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 627 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 628 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 629 clipSH9: None
    test 630 clipSH10: None
    test 631 clipSH11: None
    test 632 clipSH12: None

    test 633 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 634 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 635 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 636 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 637 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 638 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 639 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 640 clipCS4.p1: 07.5°N, 010.0°E
    test 641 clipCS4.p2: 04.5°N, 000.0°E
    test 642 clipCS4.i: 3
    test 643 clipCS4.j: 0
    test 644 clipCS4.p1: 05.0°N, 005.0°E
    test 645 clipCS4.p2: 05.0°N, 005.0°E
    test 646 clipCS4.i: 1
    test 647 clipCS4.j: 2
    test 648 clipLB6.p1: 07.5°N, 010.0°E
    test 649 clipLB6.p2: 04.5°N, 000.0°E
    test 650 clipLB6.i: 3
    test 651 clipLB6.fi: 3.25
    test 652 clipLB6.fi: 07.5°N, 010.0°E
    test 653 clipLB6.fj: 3.75
    test 654 clipLB6.fj: 04.5°N, 000.0°E
    test 655 clipLB6.j: 0
    test 656 clipLB6.fin: 4
    test 657 clipLB6.p1: 05.0°N, 005.0°E
    test 658 clipLB6.p2: 05.0°N, 005.0°E
    test 659 clipLB6.i: 1
    test 660 clipLB6.fi: 1.00
    test 661 clipLB6.fi: 05.0°N, 005.0°E
    test 662 clipLB6.fj: 2.00
    test 663 clipLB6.fj: 05.0°N, 005.0°E
    test 664 clipLB6.j: 2
    test 665 clipLB6.fin: 4
    test 666 clipCS4.p1: 60.0°N, 123.333333°E
    test 667 clipCS4.p2: 62.857143°N, 130.0°E
    test 668 clipCS4.i: 0
    test 669 clipCS4.j: 1
    test 670 clipLB6.p1: 60.0°N, 123.333333°E
    test 671 clipLB6.p2: 62.857143°N, 130.0°E
    test 672 clipLB6.i: 0
    test 673 clipLB6.fi: 0.666667
    test 674 clipLB6.fi: 60.0°N, 123.333333°E
    test 675 clipLB6.fj: 0.714286
    test 676 clipLB6.fj: 62.857143°N, 130.0°E
    test 677 clipLB6.j: 1
    test 678 clipLB6.fin: 0
    test 679 clipCS4.p1: 17.5°N, 020.0°E
    test 680 clipCS4.p2: 16.25°N, 015.0°E
    test 681 clipCS4.i: 2
    test 682 clipCS4.j: 0
    test 683 clipLB6.p1: 17.5°N, 020.0°E
    test 684 clipLB6.p2: 16.25°N, 015.0°E
    test 685 clipLB6.i: 2
    test 686 clipLB6.fi: 2.500
    test 687 clipLB6.fi: 17.5°N, 020.0°E
    test 688 clipLB6.fj: 2.750
    test 689 clipLB6.fj: 16.25°N, 015.0°E
    test 690 clipLB6.j: 0
    test 691 clipLB6.fin: 3
    test 692 clipSH1.len: 4
    test 693 clipSH1.0: 20.0°N, 020.0°E
    test 694 clipSH1.LL: True
    test 695 clipSH1.1: 17.5°N, 020.0°E
    test 696 clipSH1.LL: True
    test 697 clipSH1.2: 16.25°N, 015.0°E
    test 698 clipSH1.LL: True
    test 699 clipSH1.3: 20.0°N, 015.0°E
    test 700 clipSH1.LL: True
    test 701 clipSH2.len: 5
    test 702 clipSH2.0: 18.571°N, 024.286°E
    test 703 clipSH2.LL: True
    test 704 clipSH2.1: 16.667°N, 016.667°E
    test 705 clipSH2.LL: True
    test 706 clipSH2.2: 20.0°N, 015.0°E
    test 707 clipSH2.LL: True
    test 708 clipSH2.3: 25.0°N, 020.0°E
    test 709 clipSH2.LL: True
    test 710 clipSH2.4: 22.0°N, 026.0°E
    test 711 clipSH2.LL: True
    test 712 clipSH3.len: 2
    test 713 clipSH3.0: 18.571°N, 024.286°E
    test 714 clipSH3.LL: True
    test 715 clipSH3.1: 16.667°N, 016.667°E
    test 716 clipSH3.LL: True
    test 717 clipSH3.edge.: True
    test 718 clipSH3.len: 2
    test 719 clipSH3.0: 16.667°N, 016.667°E
    test 720 clipSH3.LL: True
    test 721 clipSH3.1: 20.0°N, 015.0°E
    test 722 clipSH3.LL: True
    test 723 clipSH3.edge.: False
    test 724 clipSH3.len: 2
    test 725 clipSH3.0: 20.0°N, 015.0°E
    test 726 clipSH3.LL: True
    test 727 clipSH3.1: 25.0°N, 020.0°E
    test 728 clipSH3.LL: True
    test 729 clipSH3.edge.: True
    test 730 clipSH3.len: 2
    test 731 clipSH3.0: 25.0°N, 020.0°E
    test 732 clipSH3.LL: True
    test 733 clipSH3.1: 22.0°N, 026.0°E
    test 734 clipSH3.LL: True
    test 735 clipSH3.edge.: True
    test 736 clipSH3.len: 2
    test 737 clipSH3.0: 22.0°N, 026.0°E
    test 738 clipSH3.LL: True
    test 739 clipSH3.1: 18.571°N, 024.286°E
    test 740 clipSH3.LL: True
    test 741 clipSH3.edge.: False
    test 742 clipSH2.reversed.len: 5
    test 743 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 744 clipSH2.reversed.LL: True
    test 745 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 746 clipSH2.reversed.LL: True
    test 747 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 748 clipSH2.reversed.LL: True
    test 749 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 750 clipSH2.reversed.LL: True
    test 751 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 752 clipSH2.reversed.LL: True
    test 753 clipSH3.reversed.len: 2
    test 754 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 755 clipSH3.reversed.LL: True
    test 756 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 757 clipSH3.reversed.LL: True
    test 758 clipSH3.edge.reversed.: True
    test 759 clipSH3.reversed.len: 2
    test 760 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 761 clipSH3.reversed.LL: True
    test 762 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 763 clipSH3.reversed.LL: True
    test 764 clipSH3.edge.reversed.: False
    test 765 clipSH3.reversed.len: 2
    test 766 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 767 clipSH3.reversed.LL: True
    test 768 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 769 clipSH3.reversed.LL: True
    test 770 clipSH3.edge.reversed.: True
    test 771 clipSH3.reversed.len: 2
    test 772 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 773 clipSH3.reversed.LL: True
    test 774 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 775 clipSH3.reversed.LL: True
    test 776 clipSH3.edge.reversed.: True
    test 777 clipSH3.reversed.len: 2
    test 778 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 779 clipSH3.reversed.LL: True
    test 780 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 781 clipSH3.reversed.LL: True
    test 782 clipSH3.edge.reversed.: False
    test 783 clipSH.allout: ()
    test 784 clipSH3.allout: ()
    test 785 clipSH.allout.reversed: ()
    test 786 clipSH3.allout.reversed: ()
    test 787 clipSH.allin.len: 4
    test 788 clipSH.allin.0: 20.0°N, 030.0°E
    test 789 clipSH.allin.LL: True
    test 790 clipSH.allin.1: 15.0°N, 010.0°E
    test 791 clipSH.allin.LL: True
    test 792 clipSH.allin.2: 25.0°N, 020.0°E
    test 793 clipSH.allin.LL: True
    test 794 clipSH.allin.3: 20.0°N, 030.0°E
    test 795 clipSH.allin.LL: True
    test 796 clipSH3.allin.len: 2
    test 797 clipSH3.allin.0: 20.0°N, 030.0°E
    test 798 clipSH3.allin.LL: True
    test 799 clipSH3.allin.1: 15.0°N, 010.0°E
    test 800 clipSH3.allin.LL: True
    test 801 clipSH3.edge.: True
    test 802 clipSH3.allin.len: 2
    test 803 clipSH3.allin.0: 15.0°N, 010.0°E
    test 804 clipSH3.allin.LL: True
    test 805 clipSH3.allin.1: 25.0°N, 020.0°E
    test 806 clipSH3.allin.LL: True
    test 807 clipSH3.edge.: True
    test 808 clipSH.allin.reversed.len: 4
    test 809 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 810 clipSH.allin.reversed.LL: True
    test 811 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 812 clipSH.allin.reversed.LL: True
    test 813 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 814 clipSH.allin.reversed.LL: True
    test 815 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 816 clipSH.allin.reversed.LL: True
    test 817 clipSH3.allin.reversed.len: 2
    test 818 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 819 clipSH3.allin.reversed.LL: True
    test 820 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 821 clipSH3.allin.reversed.LL: True
    test 822 clipSH3.edge.reversed.: True
    test 823 clipSH3.allin.reversed.len: 2
    test 824 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 825 clipSH3.allin.reversed.LL: True
    test 826 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 827 clipSH3.allin.reversed.LL: True
    test 828 clipSH3.edge.reversed.: True
    test 829 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 830 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 831 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 832 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 833 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 834 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 835 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 836 overlap: (15.0, 10.0, 20.0, 20.0)
    test 837 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 838 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 839 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 840 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 841 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 842 clipSH9: None
    test 843 clipSH10: None
    test 844 clipSH11: None
    test 845 clipSH12: None

    test 846 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 847 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 848 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 849 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 850 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 851 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 852 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    all 852 testClipy.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 373.004 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testConstants.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Float from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Radius from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.float_ from .constants by testConstants.py line 11
# lazily imported pygeodesy.isinf from .constants by testConstants.py line 11
# lazily imported pygeodesy.isint0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.isnan from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS02 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS1 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS_2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testConstants.py line 11
# lazily imported pygeodesy.INF from .constants by testConstants.py line 11
# lazily imported pygeodesy.INT0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NAN from .constants by testConstants.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NINF from .constants by testConstants.py line 11

    testing testConstants.py 23.08.23 (module pygeodesy.constants 24.11.06) isLazy=3
    test 1 _0_0: 0.0
    test 2 _0_0001: 0.0001
    test 3 _0_001: 0.001
    test 4 _0_01: 0.01
    test 5 _0_1: 0.1
    test 6 _0_125: 0.125
    test 7 _0_25: 0.25
    test 8 _0_5: 0.5
    test 9 _1000_0: 1000.0
    test 10 _100_0: 100.0
    test 11 _10_0: 10.0
    test 12 _16_0: 16.0
    test 13 _180_0: 180.0
    test 14 _1_0: 1.0

    test 15 _1_16th: _1_16th (0.0625)
    test 16 _1_16th: _1_16th
    test 17 _1_16th: True

    test 18 _1_3rd: _1_3rd (0.333333333333)
    test 19 _1_3rd: _1_3rd
    test 20 _1_3rd: True
    test 21 _1_5: 1.5

    test 22 _1_6th: _1_6th (0.166666666667)
    test 23 _1_6th: _1_6th
    test 24 _1_6th: True
    test 25 _1_75: 1.75

    test 26 _1__90: _1__90 (0.0111111111111)
    test 27 _1__90: _1__90
    test 28 _1__90: True

    test 29 _1_EPS: _1_EPS (4.50359962737e+15)
    test 30 _1_EPS: _1_EPS
    test 31 _1_EPS: True
    test 32 _270_0: 270.0
    test 33 _2_0: 2.0

    test 34 _2__PI: _2__PI (0.636619772368)
    test 35 _2__PI: _2__PI
    test 36 _2__PI: True
    test 37 _32_0: 32.0
    test 38 _3600_0: 3600.0
    test 39 _360_0: 360.0
    test 40 _3_0: 3.0
    test 41 _400_0: 400.0
    test 42 _4_0: 4.0
    test 43 _5_0: 5.0
    test 44 _60_0: 60.0
    test 45 _64_0: 64.0
    test 46 _6_0: 6.0
    test 47 _720_0: 720.0

    test 48 _89_999: _89_999 (90.0)
    test 49 _89_999: _89_999
    test 50 _89_999: True
    test 51 _8_0: 8.0
    test 52 _90_0: 90.0
    test 53 _9_0: 9.0

    test 54 _EPS2e4: _EPS2e4 (4.4408920985e-12)
    test 55 _EPS2e4: _EPS2e4
    test 56 _EPS2e4: True

    test 57 _EPS4e8: _EPS4e8 (8.881784197e-08)
    test 58 _EPS4e8: _EPS4e8
    test 59 _EPS4e8: True

    test 60 _EPSjam: _EPSjam (1.81898940355e-12)
    test 61 _EPSjam: _EPSjam
    test 62 _EPSjam: True

    test 63 _EPSmin: _EPSmin (1.49166814624e-154)
    test 64 _EPSmin: _EPSmin
    test 65 _EPSmin: True

    test 66 _EPSqrt: _EPSqrt (1.49011611938e-08)
    test 67 _EPSqrt: _EPSqrt
    test 68 _EPSqrt: True

    test 69 _EPStol: _EPStol (1.49011611938e-09)
    test 70 _EPStol: _EPStol
    test 71 _EPStol: True
    test 72 _inf: inf

    test 73 _K0_UTM: _K0_UTM (0.9996)
    test 74 _K0_UTM: _K0_UTM
    test 75 _K0_UTM: True
    test 76 _M_KM: 1000.0  FAILED, KNOWN, expected M.KM
    test 77 _M_NM: 1852.0  FAILED, KNOWN, expected M.NM
    test 78 _M_SM: 1609.344  FAILED, KNOWN, expected M.SM
    test 79 _N_0_0: -0.0  FAILED, KNOWN, expected N.0.0
    test 80 _N_0_5: -0.5  FAILED, KNOWN, expected N.0.5
    test 81 _N_180_0: -180.0  FAILED, KNOWN, expected N.180.0
    test 82 _N_1_0: -1.0  FAILED, KNOWN, expected N.1.0
    test 83 _N_2_0: -2.0  FAILED, KNOWN, expected N.2.0
    test 84 _N_90_0: -90.0  FAILED, KNOWN, expected N.90.0
    test 85 _nan: nan
    test 86 _pi: 3.141592653589793  FAILED, KNOWN, expected pi

    test 87 _SQRT2_2: _SQRT2_2 (0.707106781187)
    test 88 _SQRT2_2: _SQRT2_2
    test 89 _SQRT2_2: True

    test 90 DIG: DIG (15)
    test 91 DIG: DIG
    test 92 DIG: True
    test 93 DIG: True

    test 94 EPS: EPS (2.22044604925e-16)
    test 95 EPS: EPS
    test 96 EPS: True
    test 97 EPS: True

    test 98 EPS0: EPS0 (4.93038065763e-32)
    test 99 EPS0: EPS0
    test 100 EPS0: True
    test 101 EPS0: True

    test 102 EPS02: EPS02 (2.43086534291e-63)
    test 103 EPS02: EPS02
    test 104 EPS02: True
    test 105 EPS02: True

    test 106 EPS1: EPS1 (1.0)
    test 107 EPS1: EPS1
    test 108 EPS1: True
    test 109 EPS1: True

    test 110 EPS2: EPS2 (4.4408920985e-16)
    test 111 EPS2: EPS2
    test 112 EPS2: True
    test 113 EPS2: True

    test 114 EPS4: EPS4 (8.881784197e-16)
    test 115 EPS4: EPS4
    test 116 EPS4: True
    test 117 EPS4: True

    test 118 EPS_2: EPS_2 (1.11022302463e-16)
    test 119 EPS_2: EPS_2
    test 120 EPS_2: True
    test 121 EPS_2: True

    test 122 INF: INF (inf)
    test 123 INF: INF
    test 124 INF: True
    test 125 INF: True

    test 126 INT0: INT0 (0)
    test 127 INT0: INT0
    test 128 INT0: True
    test 129 INT0: True

    test 130 MANT_DIG: MANT_DIG (53)
    test 131 MANT_DIG: MANT_DIG
    test 132 MANT_DIG: True
    test 133 MANT_DIG: True

    test 134 MAX: MAX (1.79769313486e+308)
    test 135 MAX: MAX
    test 136 MAX: True
    test 137 MAX: True

    test 138 MAX_EXP: MAX_EXP (1024)
    test 139 MAX_EXP: MAX_EXP
    test 140 MAX_EXP: True
    test 141 MAX_EXP: True

    test 142 MIN: MIN (2.22507385851e-308)
    test 143 MIN: MIN
    test 144 MIN: True
    test 145 MIN: True

    test 146 MIN_EXP: MIN_EXP (-1021)
    test 147 MIN_EXP: MIN_EXP
    test 148 MIN_EXP: True
    test 149 MIN_EXP: True

    test 150 NAN: NAN (nan)
    test 151 NAN: NAN
    test 152 NAN: True
    test 153 NAN: True

    test 154 NEG0: NEG0 (-0)
    test 155 NEG0: NEG0
    test 156 NEG0: True
    test 157 NEG0: True

    test 158 NINF: NINF (-inf)
    test 159 NINF: NINF
    test 160 NINF: True
    test 161 NINF: True

    test 162 PI: PI (3.14159265359)
    test 163 PI: PI
    test 164 PI: True
    test 165 PI: True

    test 166 PI2: PI2 (6.28318530718)
    test 167 PI2: PI2
    test 168 PI2: True
    test 169 PI2: True

    test 170 PI3: PI3 (9.42477796077)
    test 171 PI3: PI3
    test 172 PI3: True
    test 173 PI3: True

    test 174 PI3_2: PI3_2 (4.71238898038)
    test 175 PI3_2: PI3_2
    test 176 PI3_2: True
    test 177 PI3_2: True

    test 178 PI4: PI4 (12.5663706144)
    test 179 PI4: PI4
    test 180 PI4: True
    test 181 PI4: True

    test 182 PI_2: PI_2 (1.57079632679)
    test 183 PI_2: PI_2
    test 184 PI_2: True
    test 185 PI_2: True

    test 186 PI_3: PI_3 (1.0471975512)
    test 187 PI_3: PI_3
    test 188 PI_3: True
    test 189 PI_3: True

    test 190 PI_4: PI_4 (0.785398163397)
    test 191 PI_4: PI_4
    test 192 PI_4: True
    test 193 PI_4: True

    test 194 R_FM: R_FM (6371000.0)
    test 195 R_FM: R_FM
    test 196 R_FM: True
    test 197 R_FM: True

    test 198 R_GM: R_GM (6371230.0)
    test 199 R_GM: R_GM
    test 200 R_GM: True
    test 201 R_GM: True

    test 202 R_KM: R_KM (6371.00877141)
    test 203 R_KM: R_KM
    test 204 R_KM: True
    test 205 R_KM: True

    test 206 R_M: R_M (6371008.77141)
    test 207 R_M: R_M
    test 208 R_M: True
    test 209 R_M: True

    test 210 R_MA: R_MA (6378137.0)
    test 211 R_MA: R_MA
    test 212 R_MA: True
    test 213 R_MA: True

    test 214 R_MB: R_MB (6356752.3)
    test 215 R_MB: R_MB
    test 216 R_MB: True
    test 217 R_MB: True

    test 218 R_NM: R_NM (3440.069531)
    test 219 R_NM: R_NM
    test 220 R_NM: True
    test 221 R_NM: True

    test 222 R_QM: R_QM (6372797.56086)
    test 223 R_QM: R_QM
    test 224 R_QM: True
    test 225 R_QM: True

    test 226 R_SM: R_SM (3958.76131605)
    test 227 R_SM: R_SM
    test 228 R_SM: True
    test 229 R_SM: True

    test 230 R_VM: R_VM (6366707.01949)
    test 231 R_VM: R_VM
    test 232 R_VM: True
    test 233 R_VM: True

    test 234 EPS: True
    test 235 EPS+1: True
    test 236 EPS-1: True

    test 237 EPS0: True
    test 238 EPS02: True

    test 239 EPS_2: True
    test 240 EPS_2: 1.1102230246251565e-16

    test 241 EPS1: True
    test 242 EPS1+1: True
    test 243 EPS1-1: True

    test 244 EPS2: True
    test 245 EPS2: 4.440892098500626e-16

    test 246 EPS4: True
    test 247 EPS4: 8.881784197001252e-16

    test 248 INF: True
    test 249 INF: False
    test 250 NINF: True
    test 251 NINF: -inf

    test 252 INT0: 0
    test 253 INT0: True
    test 254 INT0: True
    test 255 INT0: False
    test 256 INT0: False
    test 257 INT0: False

    test 258 NAN: True
    test 259 NAN: False
    test 260 NAN: False

    test 261 NEG0: -0.0
    test 262 NEG0: True
    test 263 NEG0: False
    test 264 NEG0: 0.0

    test 265 _off90: True
    test 266 _off90: True
    test 267 float_: (1.0, 2.0, 3.0)
    test 268 float_: True

    test 269 _0_0: True

    test 270 _0_0s: 0
    test 271 _0_0s: 0
    test 272 _0_0s: 1
    test 273 _0_0s: 1
    test 274 _0_0s: 2
    test 275 _0_0s: 2
    test 276 _0_0s: 3
    test 277 _0_0s: 3
    test 278 _0_0s: 5
    test 279 _0_0s: 5
    test 280 _0_0s: 8
    test 281 _0_0s: 8
    test 282 _0_0s: 9
    test 283 _0_0s: 9
    test 284 _0_0s: 10
    test 285 _0_0s: 10
    test 286 _0_0s: 12
    test 287 _0_0s: 12
    test 288 _0_0s: 25
    test 289 _0_0s: 25
    test 290 _0_0s: 49
    test 291 _0_0s: 49
    test 292 _0_0s: 129
    test 293 _0_0s: 129
    test 294 _0_0s: 257
    test 295 _0_0s: 257

    10 of 295 testConstants.py tests (3.4%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 2.271 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testCss.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.CassiniSoldner from .css by testCss.py line 11
# lazily imported pygeodesy.Css from .css by testCss.py line 11
# lazily imported pygeodesy.CSSError from .css by testCss.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testCss.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCss.py line 11
# lazily imported pygeodesy.haversine from .formy by testCss.py line 11
# lazily imported pygeodesy.hypot from .fmath by testCss.py line 11
# lazily imported pygeodesy.toCss from .css by testCss.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalNvector by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalVincenty by testCss.py line 124

    testing testCss.py 23.03.27 (module pygeodesy.css 24.11.06) isLazy=3
# lazily imported pygeodesy.ellipsoidalKarney by testCss.py line 131
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 1 CassiniSoldner(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
# lazily imported pygeodesy.geodesicx by css.py line 252
    test 2 Exact: False
    test 3 forward: -37518.854545, 230003.561828
    test 4 reverse: 50.9, 1.8
    test 5 forward4: -37518.854545, 230003.561828, 89.586104, 0.999983
    test 6 equatorarc: 89.662511
    test 7 equatorazimuth: 39.192992
    test 8 copy(CassiniSoldner): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 9 CassiniSoldner.copy(): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 10 reverse: 50.899937, 1.793161
    test 11 forward: -38000.0, 230000.0
    test 12 reverse4: 50.899937, 1.793161, 89.580797, 0.999982
    test 13 reverse(pygeodesy.ellipsoidalKarney): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 14 reverse(pygeodesy.ellipsoidalExact): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 15 reverse(pygeodesy.ellipsoidalNvector): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 16 reverse(pygeodesy.ellipsoidalVincenty): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 17 CassiniSoldner(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 18 forward: 170557.151692, -293280.6051
    test 19 reverse: 48.833333, 2.333333
    test 20 hypot: 339268.707  FAILED, KNOWN, expected 338901.865
    test 21 toCss: -37518.854545 230003.561828 +1.00m
    test 22 toCss: [E:-37518.854545, N:230003.561828, H:+1.00m, name:'Calais', C:CassiniSoldner(48.833333, 2.333333, name='Paris')]
    test 23 Css.easting: -37518.854545
    test 24 Css.northing: 230003.561828
    test 25 Css.height: 1.0
    test 26 Css.azi: 89.586103815
    test 27 Css.rk: 0.999982722
    test 28 Css.name: Calais
    test 29 Css.cs0: 48.833333 2.333333
    test 30 Css.toLatLon: LatLon(50°54′00.0″N, 001°48′00.0″E, +1.00m)
    test 31 Css.toLatLon.height: 1.0
    test 32 Css.toLatLon.name: Calais
    test 33 Css.toLatLon.datum.name: WGS84
    test 34 Css.toLatLon.height: 1.0  FAILED, KNOWN, expected height(1.0)
    test 35 copy(Css): (<class 'pygeodesy.css.Css'>, True)
    test 36 Css.copy(): (<class 'pygeodesy.css.Css'>, True)
    test 37 cs0.name: Paris
    test 38 cs0.name: Default
    test 39 cs0.flattening: 0.003352811
    test 40 cs0.lat0: 0.0
    test 41 cs0.equatoradius: 6378137.0
    test 42 cs0.lat0: 0.0  FAILED, KNOWN, expected lat(0.0)
    test 43 classof.height: 1.0
    test 44 classof.azi: 89.586103815
    test 45 classof.rk: 0.999982722
    test 46 classof.name: Calais
    test 47 classof.cs0: 48.833333 2.333333
    test 48 cs0.latlon0: (48.833333, 2.333333)
    test 49 cs0.latlon0: (48.833333, 2.333333)
    test 50 cs0.latlon0: latlon0 (None): 'NoneType' object has no attribute 'lat'
    test 51 cs0.latlon0: (48.0, 2.0)
    test 52 datum: True
    test 53 datum: False
    test 54 forward6: (39142.269011, -229679.266845, 90.401497, 0.999981, 90.352206, 41.257592)

    3 of 54 testCss.py tests (5.6%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 12.310 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testDatums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Datum from .datums by testDatums.py line 11
# lazily imported pygeodesy.Datums from .datums by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.R_M from .constants by testDatums.py line 11
# lazily imported pygeodesy.Transform from .datums by testDatums.py line 11
# lazily imported pygeodesy.Transforms from .datums by testDatums.py line 11

    testing testDatums.py 24.05.17 (module pygeodesy.datums 24.10.12) isLazy=3
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, f=0, f_=0, b=1000
    test 5 TestTransform: name='TestTransform', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True
    test 8 Sphere: True

    test 9 all: all

    test 10 BD72: name='BD72', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.BD72
    test 11 Intl1924: name='Intl1924', a=6378388, f=0.003367, f_=297, b=6356911.94612795
    test 12 BD72: name='BD72', tx=106.87, ty=-52.298, tz=103.72, s1=1.0, rx=-1.6317e-06, ry=-2.2154e-06, rz=-8.9311e-06, s=1.2727, sx=-0.33657, sy=-0.45696, sz=-1.8422

    test 13 DHDN: name='DHDN', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.DHDN
    test 14 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 15 DHDN: name='DHDN', tx=-591.28, ty=-81.35, tz=-396.39, s1=0.99999, rx=7.1607e-06, ry=-3.5682e-07, rz=-7.0686e-06, s=-9.82, sx=1.477, sy=-0.0736, sz=-1.458

    test 16 ED50: name='ED50', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.ED50
    test 17 Intl1924: name='Intl1924', a=6378388, f=0.003367, f_=297, b=6356911.94612795
    test 18 ED50: name='ED50', tx=89.5, ty=93.8, tz=123.1, s1=1.0, rx=0.0, ry=0.0, rz=7.5631e-07, s=-1.2, sx=0.0, sy=0.0, sz=0.156

    test 19 GDA2020: name='GDA2020', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 20 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 21 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 22 GRS80: name='GRS80', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 23 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 24 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 25 Irl1975: name='Irl1975', ellipsoid=Ellipsoids.AiryModified, transform=Transforms.Irl1975
    test 26 AiryModified: name='AiryModified', a=6377340.189, f=0.00334085, f_=299.3249646, b=6356034.44793853
    test 27 Irl1975: name='Irl1975', tx=-482.53, ty=130.6, tz=-564.56, s1=0.99999, rx=5.0518e-06, ry=1.0375e-06, rz=3.0592e-06, s=-8.15, sx=1.042, sy=0.214, sz=0.631

    test 28 Krassovski1940: name='Krassovski1940', ellipsoid=Ellipsoids.Krassovski1940, transform=Transforms.Krassovski1940
    test 29 Krassovski1940: name='Krassovski1940', a=6378245, f=0.00335233, f_=298.3, b=6356863.01877305
    test 30 Krassovski1940: name='Krassovski1940', tx=-24, ty=123.0, tz=94.0, s1=1.0, rx=-9.6963e-08, ry=1.2605e-06, rz=6.3026e-07, s=-2.423, sx=-0.02, sy=0.26, sz=0.13

    test 31 Krassowsky1940: name='Krassowsky1940', ellipsoid=Ellipsoids.Krassowsky1940, transform=Transforms.Krassowsky1940
    test 32 Krassowsky1940: name='Krassowsky1940', a=6378245, f=0.00335233, f_=298.3, b=6356863.01877305
    test 33 Krassowsky1940: name='Krassowsky1940', tx=-24, ty=123.0, tz=94.0, s1=1.0, rx=-9.6963e-08, ry=1.2605e-06, rz=6.3026e-07, s=-2.423, sx=-0.02, sy=0.26, sz=0.13

    test 34 MGI: name='MGI', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.MGI
    test 35 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 36 MGI: name='MGI', tx=-577.33, ty=-90.129, tz=-463.92, s1=1.0, rx=2.4905e-05, ry=7.1462e-06, rz=2.5681e-05, s=-2.423, sx=5.137, sy=1.474, sz=5.297

    test 37 NAD27: name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27
    test 38 Clarke1866: name='Clarke1866', a=6378206.4, f=0.00339008, f_=294.97869821, b=6356583.8
    test 39 NAD27: name='NAD27', tx=8.0, ty=-160, tz=-176, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 40 NAD83: name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83
    test 41 GRS80: name='GRS80', a=6378137, f=0.00335281, f_=298.2572221, b=6356752.31414035
    test 42 NAD83: name='NAD83', tx=1.004, ty=-1.91, tz=-0.515, s1=1.0, rx=1.2945e-07, ry=1.6484e-09, rz=5.333e-08, s=-0.0015, sx=0.0267, sy=0.00034, sz=0.011

    test 43 NTF: name='NTF', ellipsoid=Ellipsoids.Clarke1880IGN, transform=Transforms.NTF
    test 44 Clarke1880IGN: name='Clarke1880IGN', a=6378249.2, f=0.00340755, f_=293.46602129, b=6356515
    test 45 NTF: name='NTF', tx=-168, ty=-60, tz=320.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 46 OSGB36: name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36
    test 47 Airy1830: name='Airy1830', a=6377563.396, f=0.00334085, f_=299.3249646, b=6356256.90923729
    test 48 OSGB36: name='OSGB36', tx=-446.45, ty=125.16, tz=-542.06, s1=1.0, rx=-7.2819e-07, ry=-1.1975e-06, rz=-4.0826e-06, s=20.489, sx=-0.1502, sy=-0.247, sz=-0.8421

    test 49 Potsdam: name='Potsdam', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.Bessel1841
    test 50 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 51 Bessel1841: name='Bessel1841', tx=-582, ty=-105, tz=-414, s1=0.99999, rx=-5.0421e-06, ry=-1.6968e-06, rz=1.4932e-05, s=-8.3, sx=-1.04, sy=-0.35, sz=3.08

    test 52 Sphere: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 53 Sphere: name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 54 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 55 TokyoJapan: name='TokyoJapan', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.TokyoJapan
    test 56 Bessel1841: name='Bessel1841', a=6377397.155, f=0.00334277, f_=299.1528128, b=6356078.962818
    test 57 TokyoJapan: name='TokyoJapan', tx=148.0, ty=-507, tz=-685, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 58 WGS72: name='WGS72', ellipsoid=Ellipsoids.WGS72, transform=Transforms.WGS72
    test 59 WGS72: name='WGS72', a=6378135, f=0.00335278, f_=298.26, b=6356750.52001609
    test 60 WGS72: name='WGS72', tx=0.0, ty=0.0, tz=-4.5, s1=1.0, rx=0.0, ry=0.0, rz=2.6859e-06, s=-0.22, sx=0.0, sy=0.0, sz=0.554

    test 61 WGS84: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 62 WGS84: name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 63 WGS84: name='WGS84', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=0.0, sx=0.0, sy=0.0, sz=0.0

    test 64 total: 18

    all 64 testDatums.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 6.335 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testDeprecated.py
./pygeodesy/deprecated/classes.py:121: DeprecationWarning: class L{HeightIDW<pygeodesy.deprecated.classes.HeightIDW>} has been DEPRECATED, use class L{HeightIDWeuclidean}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/classes.py:134: DeprecationWarning: class L{HeightIDW2<pygeodesy.deprecated.classes.HeightIDW2>} has been DEPRECATED, use class L{HeightIDWequirectangular}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/classes.py:148: DeprecationWarning: class L{HeightIDW3<pygeodesy.deprecated.classes.HeightIDW3>} has been DEPRECATED, use class L{HeightIDWhaversine}.
  deprecated_class(self.__class__)
./test/testDeprecated.py:37: DeprecationWarning: function L{areaof<pygeodesy.deprecated.functions.areaof>} has been DEPRECATED, use function L{pygeodesy.areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')  # PYCHOK DEPRECATED
./test/testDeprecated.py:40: DeprecationWarning: function L{bounds<pygeodesy.deprecated.functions.bounds>} has been DEPRECATED, use function L{pygeodesy.boundsOf}.
  b = map2(float, bounds(p))  # PYCHOK DEPRECATED
./test/testDeprecated.py:43: DeprecationWarning: function L{anStr<pygeodesy.deprecated.functions.anStr>} has been DEPRECATED, use function L{pygeodesy.anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')  # PYCHOK DEPRECATED
./test/testDeprecated.py:45: DeprecationWarning: function L{clipStr<pygeodesy.deprecated.functions.clipStr>} has been DEPRECATED, use function L{pygeodesy.clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')  # PYCHOK DEPRECATED
./test/testDeprecated.py:47: DeprecationWarning: function L{decodeEPSG2<pygeodesy.deprecated.functions.decodeEPSG2>} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")  # PYCHOK DEPRECATED
./test/testDeprecated.py:48: DeprecationWarning: function L{encodeEPSG<pygeodesy.deprecated.functions.encodeEPSG>} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')  # PYCHOK DEPRECATED
./test/testDeprecated.py:50: DeprecationWarning: function L{equirectangular3<pygeodesy.deprecated.functions.equirectangular3>} has been DEPRECATED, use function L{pygeodesy.equirectangular4}.
  t = equirectangular3(0, 2, 3, 4)  # PYCHOK DEPRECATED
./test/testDeprecated.py:54: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')  # PYCHOK DEPRECATED
./test/testDeprecated.py:55: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')  # PYCHOK DEPRECATED
./test/testDeprecated.py:56: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')  # PYCHOK DEPRECATED
./test/testDeprecated.py:57: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')  # PYCHOK DEPRECATED
./test/testDeprecated.py:58: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')  # PYCHOK DEPRECATED
./test/testDeprecated.py:59: DeprecationWarning: function L{fStr<pygeodesy.deprecated.functions.fStr>} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')  # PYCHOK DEPRECATED
./test/testDeprecated.py:61: DeprecationWarning: function L{hypot3<pygeodesy.deprecated.functions.hypot3>} has been DEPRECATED, use function L{pygeodesy.hypot_}.
  h = hypot3(3000, 200, 10)  # PYCHOK DEPRECATED
./test/testDeprecated.py:66: DeprecationWarning: function L{isenclosedby<pygeodesy.deprecated.functions.isenclosedby>} has been DEPRECATED, use function L{pygeodesy.isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)  # PYCHOK DEPRECATED
./test/testDeprecated.py:70: DeprecationWarning: function L{nearestOn3<pygeodesy.deprecated.functions.nearestOn3>} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn3(p, b, adjust=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:73: DeprecationWarning: function L{nearestOn4<pygeodesy.deprecated.functions.nearestOn4>} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn4(p, b, adjust=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:77: DeprecationWarning: function L{parseUTM<pygeodesy.deprecated.functions.parseUTM>} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # PYCHOK Milford, PA
./test/testDeprecated.py:81: DeprecationWarning: function L{perimeterof<pygeodesy.deprecated.functions.perimeterof>} has been DEPRECATED, use function L{pygeodesy.perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')  # PYCHOK DEPRECATED
./test/testDeprecated.py:84: DeprecationWarning: function L{polygon<pygeodesy.deprecated.functions.polygon>} has been DEPRECATED, use function L{pygeodesy.points2}.
  self.test('polygon', polygon(p)[0], 3)  # PYCHOK DEPRECATED
./test/testDeprecated.py:86: DeprecationWarning: function L{simplify2<pygeodesy.deprecated.functions.simplify2>} has been DEPRECATED, use function L{pygeodesy.simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)  # PYCHOK DEPRECATED
./test/testDeprecated.py:89: DeprecationWarning: function L{toUtm<pygeodesy.deprecated.functions.toUtm>} has been DEPRECATED, use function L{pygeodesy.toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')  # PYCHOK DEPRECATED
./test/testDeprecated.py:92: DeprecationWarning: function L{utmZoneBand2<pygeodesy.deprecated.functions.utmZoneBand2>} has been DEPRECATED, use function L{pygeodesy.utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')  # PYCHOK DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.R_MA from .constants by testDeprecated.py line 11
# lazily imported pygeodesy.deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.isDEPRECATED from .basics by testDeprecated.py line 11
# lazily imported pygeodesy.unstr from .streprs by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13

    testing testDeprecated.py 24.10.14 (module pygeodesy.deprecated 24.11.07) isLazy=3

    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True

# lazily imported pygeodesy.booleans by points.py line 978
    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
# lazily imported pygeodesy.epsg by functions.py line 93
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 fStr: 0.123
    test 18 hypot3: 3006.675905
    test 19 isenclosedby: True
    test 20 nearestOn3: 3
    test 21 nearestOn3: (45.5, 1.5)
    test 22 nearestOn4: 4
    test 23 nearestOn4: (45.5, 1.5)
    test 24 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 25 perimeterof: 2.687460e+05
    test 26 polygon: 3
# lazily imported pygeodesy.simplify by functions.py line 301
    test 27 simplify2: 4
    test 28 toUtm: 6
    test 29 utmZoneBand2: (11, 'U')

    test 30 HeightIDW: True
    test 31 HeightIDW2: True
    test 32 HeightIDW3: True

    test 33 areaof: 7.086883e+09
    test 34 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 35 anStr: a-b__
    test 36 clipStr: test/t....ics.py
    test 37 decodeEPSG2: (12, 'S')
    test 38 encodeEPSG: 32712
    test 39 equirectangular3: 3
    test 40 equirectangular3: 12.997
    test 41 fStr: 0.123000
    test 42 fStr: 0.123
    test 43 fStr: 0.123, 456.789
    test 44 fStr: 1.23000e-01
    test 45 fStr: 1.23e-01
    test 46 fStr: 0.123
    test 47 hypot3: 3006.675905
    test 48 isenclosedby: True
    test 49 nearestOn3: 3
    test 50 nearestOn3: (45.5, 1.5)
    test 51 nearestOn4: 4
    test 52 nearestOn4: (45.5, 1.5)
    test 53 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 54 perimeterof: 2.687460e+05
    test 55 polygon: 3
    test 56 simplify2: 4
    test 57 toUtm: 6
    test 58 utmZoneBand2: (11, 'U')

    test 59 HeightIDW: True
    test 60 HeightIDW2: True
    test 61 HeightIDW3: True

    test 62 areaof: 7.086883e+09
    test 63 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 64 anStr: a-b__
    test 65 clipStr: test/t....ics.py
    test 66 decodeEPSG2: (12, 'S')
    test 67 encodeEPSG: 32712
    test 68 equirectangular3: 3
    test 69 equirectangular3: 12.997
    test 70 fStr: 0.123000
    test 71 fStr: 0.123
    test 72 fStr: 0.123, 456.789
    test 73 fStr: 1.23000e-01
    test 74 fStr: 1.23e-01
    test 75 fStr: 0.123
    test 76 hypot3: 3006.675905
    test 77 isenclosedby: True
    test 78 nearestOn3: 3
    test 79 nearestOn3: (45.5, 1.5)
    test 80 nearestOn4: 4
    test 81 nearestOn4: (45.5, 1.5)
    test 82 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 83 perimeterof: 2.687460e+05
    test 84 polygon: 3
    test 85 simplify2: 4
    test 86 toUtm: 6
    test 87 utmZoneBand2: (11, 'U')

    test 88 deprecated: 7
    test 89 isDEPRECATED('bases'): True
    test 90 isDEPRECATED('datum'): True
    test 91 isDEPRECATED('nvector'): True
    test 92 isDEPRECATED('rhumbaux'): True
    test 93 isDEPRECATED('rhumbBase'): True
    test 94 isDEPRECATED('rhumbsolve'): True
    test 95 isDEPRECATED('rhumbx'): True

    78 of 95 testDeprecated.py tests (82.1%) FAILED, incl. 78 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 54.654 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testDms.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60 from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60__ from .dms by testDms.py line 11
# lazily imported pygeodesy.compassPoint from .dms by testDms.py line 11
# lazily imported pygeodesy.degDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.fstr from .streprs by testDms.py line 11
# lazily imported pygeodesy.parseDDDMMSS from .dms by testDms.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.ParseError from .errors by testDms.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testDms.py line 11
# lazily imported pygeodesy.RangeError from .errors by testDms.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testDms.py line 11
# lazily imported pygeodesy.toDMS from .dms by testDms.py line 11

    testing testDms.py 23.03.27 (module pygeodesy.dms 24.10.18) isLazy=3
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS(76.5432, sexagecimal=False): 76.5432
    test 66 parseDDDMMSS(76.5432, sexagecimal=True): 76.9089
    test 67 parseDDDMMSS(00.0102, sexagecimal=False): 0.0102
    test 68 parseDDDMMSS(00.0102, sexagecimal=True): 0.0172
    test 69 parseDDDMMSS('12E'): ParseError("sexagecimal (False), strDDDMMSS ('12E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 70 parseDMS('12E'): 12.0
    test 71 parseDDDMMSS('012.3S'): ParseError("sexagecimal (False), strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 72 parseDMS('012.3S'): -12.3
    test 73 parseDDDMMSS('123N'): ParseError("sexagecimal (False), strDDDMMSS ('123N') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 74 parseDMS('123N'): 123.0
    test 75 parseDDDMMSS('1234E'): ParseError("sexagecimal (False), strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 76 parseDMS('1234E'): 1234.0
    test 77 parseDDDMMSS('12345N'): ParseError("sexagecimal (False), strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 78 parseDMS('12345N'): 12345.0
    test 79 parseDDDMMSS('1234.5W'): ParseError("sexagecimal (False), strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 80 parseDMS('1234.5W'): -1234.5
    test 81 parseDDDMMSS('123456E'): ParseError("sexagecimal (False), strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 82 parseDMS('123456E'): 123456.0
    test 83 parseDDDMMSS('1234567S'): ParseError("sexagecimal (False), strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 84 parseDMS('1234567S'): -1234567.0
    test 85 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 86 parseDMS: -90.0
    test 87 parse3llh: 51.477811, -0.001475, 0.0
    test 88 toDMS(dm): 46°00.0′
    test 89 toDMS(dm): 46°00.0′
    test 90 toDMS(dm): 45°59.99′
    test 91 toDMS(dm): 45°59.999′
    test 92 toDMS(dms): 46°00′00.0″
    test 93 toDMS(dms): 45°59′59.96″
    test 94 toDMS(dms): 45°59′59.964″
    test 95 toDMS(d60): 45.5959964
    test 96 toDMS(d60): 45°45′45.36″
    test 97 toDMS(d60): 45d45m45.36s
    test 98 normDMS: 45°45′45.36″
    test 99 parseDMS: 45.7626
    test 100 toDMS(d): 45.7626°
    test 101 toDMS(d): -45.7626°
    test 102 toDMS(dm): 45°45.756′
    test 103 toDMS(dm): -45°45.756′
    test 104 toDMS(dms): 45°45′45.36″
    test 105 toDMS(dms): -45°45′45.36″
    test 106 toDMS(deg): 45.7626
    test 107 toDMS(deg): -45.7626
    test 108 toDMS(min): 4545.756
    test 109 toDMS(min): -4545.756
    test 110 toDMS(sec): 454545.36
    test 111 toDMS(sec): -454545.36
    test 112 toDMS(rad): 0.79871
    test 113 toDMS(rad): -0.79871
    test 114 toDMS(d60): 45.4545
    test 115 toDMS(d60): -45.4545
    test 116 toDMS(d): 45.7626°
    test 117 toDMS(d): -45.7626°
    test 118 toDMS(dm): 45°45.7560′
    test 119 toDMS(dm): -45°45.7560′
    test 120 toDMS(dms): 45°45′45.36″
    test 121 toDMS(dms): -45°45′45.36″
    test 122 toDMS(deg): 45.762600
    test 123 toDMS(deg): -45.762600
    test 124 toDMS(min): 4545.75600
    test 125 toDMS(min): -4545.75600
    test 126 toDMS(sec): 454545.360
    test 127 toDMS(sec): -454545.360
    test 128 toDMS(rad): 0.798708
    test 129 toDMS(rad): -0.798708
    test 130 toDMS(d60): 45.4545360
    test 131 toDMS(d60): -45.4545360
    test 132 toDMS(-d): 45.7626°
    test 133 toDMS(-d): -45.7626°
    test 134 toDMS(-dm): 45°45.7560′
    test 135 toDMS(-dm): -45°45.7560′
    test 136 toDMS(-dms): 45°45′45.36″
    test 137 toDMS(-dms): -45°45′45.36″
    test 138 toDMS(-deg): 45.762600
    test 139 toDMS(-deg): -45.762600
    test 140 toDMS(-min): 4545.75600
    test 141 toDMS(-min): -4545.75600
    test 142 toDMS(-sec): 454545.360
    test 143 toDMS(-sec): -454545.360
    test 144 toDMS(-rad): 0.798708
    test 145 toDMS(-rad): -0.798708
    test 146 toDMS(-d60): 45.45453600
    test 147 toDMS(-d60): -45.45453600
    test 148 toDMS(+d): +45.7626°
    test 149 toDMS(+d): -45.7626°
    test 150 toDMS(+dm): +45°45.7560′
    test 151 toDMS(+dm): -45°45.7560′
    test 152 toDMS(+dms): +45°45′45.36″
    test 153 toDMS(+dms): -45°45′45.36″
    test 154 toDMS(+deg): +45.762600
    test 155 toDMS(+deg): -45.762600
    test 156 toDMS(+min): +4545.75600
    test 157 toDMS(+min): -4545.75600
    test 158 toDMS(+sec): +454545.360
    test 159 toDMS(+sec): -454545.360
    test 160 toDMS(+rad): +0.798708
    test 161 toDMS(+rad): -0.798708
    test 162 toDMS(+d60): +45.454536
    test 163 toDMS(+d60): -45.454536
    test 164 compassPoint(1,): N
    test 165 compassPoint(0,): N
    test 166 compassPoint(-1,): N
    test 167 compassPoint(359,): N
    test 168 compassPoint(24,): NNE
    test 169 compassPoint(24, 1): N
    test 170 compassPoint(24, 2): NE
    test 171 compassPoint(24, 3): NNE
    test 172 compassPoint(226,): SW
    test 173 compassPoint(226, 1): W
    test 174 compassPoint(226, 2): SW
    test 175 compassPoint(226, 3): SW
    test 176 compassPoint(237,): WSW
    test 177 compassPoint(237, 1): W
    test 178 compassPoint(237, 2): SW
    test 179 compassPoint(237, 3): WSW
    test 180 compassPoint(11.25,): NNE
    test 181 compassPoint(11.249,): N
    test 182 compassPoint(-11.25,): N
    test 183 compassPoint(348.749,): NNW
    test 184 compassPoint(45, 1): E
    test 185 compassPoint(44.99, 1): N
    test 186 compassPoint(45, 2): NE
    test 187 compassPoint(44.99, 2): NE
    test 188 compassPoint(45, 3): NE
    test 189 compassPoint(44.99, 3): NE
    test 190 compassPoint(45, 4): NE
    test 191 compassPoint(44.99, 4): NE
    test 192 compassPoint(22.5, 1): N
    test 193 compassPoint(22.49, 1): N
    test 194 compassPoint(22.5, 2): NE
    test 195 compassPoint(22.49, 2): N
    test 196 compassPoint(22.5, 3): NNE
    test 197 compassPoint(22.49, 3): NNE
    test 198 compassPoint(22.5, 4): NNE
    test 199 compassPoint(22.49, 4): NNE
    test 200 compassPoint(11.25, 1): N
    test 201 compassPoint(11.249, 1): N
    test 202 compassPoint(11.25, 2): N
    test 203 compassPoint(11.249, 2): N
    test 204 compassPoint(11.25, 3): NNE
    test 205 compassPoint(11.249, 3): N
    test 206 compassPoint(11.25, 4): NbE
    test 207 compassPoint(11.249, 4): NbE
    test 208 compassPoint(24, 1): N
    test 209 compassPoint(24, 2): NE
    test 210 compassPoint(24, 3): NNE
    test 211 compassPoint(24,): NNE
    test 212 compassPoint(18, 3): NNE
    test 213 compassPoint(11, 4): NbE
    test 214 compassPoint(30, 4): NEbN
    test 215 compassPoint(11.25): NbE
    test 216 compassPoint(33.75): NEbN
    test 217 compassPoint(56.25): NEbE
    test 218 compassPoint(78.75): EbN
    test 219 compassPoint(101.25): EbS
    test 220 compassPoint(123.75): SEbE
    test 221 compassPoint(146.25): SEbS
    test 222 compassPoint(168.75): SbE
    test 223 compassPoint(191.25): SbW
    test 224 compassPoint(213.75): SWbS
    test 225 compassPoint(236.25): SWbW
    test 226 compassPoint(258.75): WbS
    test 227 compassPoint(281.25): WbN
    test 228 compassPoint(303.75): NWbW
    test 229 compassPoint(326.25): NWbN
    test 230 compassPoint(348.75): NbW
    test 231 _DEG: +1.0101
    test 232 _MIN: +0.606′
    test 233 _SEC: +36.36″

    all 233 testDms.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 3.760 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEcef.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Datums from .datums by testEcef.py line 11
# lazily imported pygeodesy.EcefError from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefMatrix from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testEcef.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEcef.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEcef.py line 11
# lazily imported pygeodesy.latDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testEcef.py line 11
# lazily imported pygeodesy.sphericalNvector by testEcef.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalKarney by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalNvector by testEcef.py line 243
# lazily imported pygeodesy.ellipsoidalVincenty by testEcef.py line 243
# lazily imported pygeodesy.sphericalTrigonometry by testEcef.py line 243

    testing testEcef.py 23.07.21 isLazy=3

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 Vermeille: (65.772506, 169.060801)
    test 36 Vermeille: (1.147947, 3.141593)
    test 37 reverse-1: 45.0, 120.0, 1000.0
    test 38 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 39 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 40 philam-1: 0.7854, 2.0944
    test 41 reverse-2: 45.0, 120.0, 2000.0
    test 42 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 43 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 44 philam-2: 0.7854, 2.0944
    test 45 reverse-3: 45.0, 120.0, 3000.0
    test 46 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 47 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 48 philam-3: 0.7854, 2.0944
    test 49 reverse-4: 45.0, 120.0, 4000.0
    test 50 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 51 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 52 philam-4: 0.7854, 2.0944
    test 53 reverse-5: 45.0, 120.0, 10000.0
    test 54 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 55 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 56 philam-5: 0.7854, 2.0944
    test 57 reverse-6: 45.0, 120.0, 20000.0
    test 58 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 59 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 60 philam-6: 0.7854, 2.0944
    test 61 reverse-7: 45.0, 120.0, 100000.0
    test 62 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 63 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 64 philam-7: 0.7854, 2.0944
    test 65 reverse-8: 45.0, 120.0, 800000.0
    test 66 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 67 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 68 philam-8: 0.7854, 2.0944
    test 69 reverse-9: 45.0, 120.0, 1000000.0
    test 70 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 71 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 72 philam-9: 0.7854, 2.0944
    test 73 sudano: 45.0, 0.0, 100000.0
    test 74 name: OS-UK
    test 75 forward: 53.61199036, -1.66444222, 299.8
    test 76 forward: 3790644.9, -110149.21, 5111482.97
    test 77 reverse: 3790644.9, -110149.21, 5111482.97
    test 78 reverse: 53.61199036, -1.66444223
    test 79 reverse.lat: 53°36′43.1653″N
    test 80 reverse.lon: 001°39′51.992″W
    test 81 reverse.height: 299.800
    test 82 case: 2
    test 83 iteration: None
    test 84 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 85 reverse: 34.0, -117.333569, 251.702
    test 86 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 87 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 88 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 89 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 90 EcefFarrell21: ...
    test 91 name: Test
    test 92 toStr: EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell21
    test 93 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell21
    test 94 copy(EcefFarrell21): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 95 EcefFarrell21.copy(): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 96 forward: 27.99, 86.93, 8820.0
    test 97 forward: 302271.4, 5635928.4, 2979666.1
    test 98 name: Test
    test 99 reverse: 302271.4, 5635928.4, 2979666.1
    test 100 reverse: 27.99, 86.93, 8820.01
    test 101 case: 1
    test 102 iteration: None
    test 103 name: Test
    test 104 reverse: 302000.0, 5636000.0, 2980000.0
    test 105 reverse: 27.99, 86.93, 9027.03
    test 106 case: 1
    test 107 iteration: None
    test 108 forward: 27.99, 86.93, 8820.0
    test 109 forward: 302271.43, 5635928.37, 2979666.13
    test 110 forward: 33.3, 44.4, 6000.0
    test 111 forward: 3816209.6, 3737108.55, 3485109.57
    test 112 reverse: 3816209.6, 3737108.55, 3485109.57
    test 113 reverse: 33.3, 44.4, 5999.996
    test 114 case: 1
    test 115 iteration: None
    test 116 reverse: 30000.0, 30000.0, 0.0
    test 117 reverse: 0.0, 45.0, -6335168.061  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 118 case: 1
    test 119 iteration: None
    test 120 forward: 6.483, 45.0, -6335709.726
    test 121 forward: 30000.0, 30000.0, -0.0
    test 122 Vermeille: -168.919
    test 123 Vermeille: 190.939
    test 124 Vermeille: (65.772506, 169.060801)
    test 125 Vermeille: (1.147947, 3.141593)
    test 126 reverse-1: 45.0, 120.0, 1000.0
    test 127 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 128 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 129 philam-1: 0.7854, 2.0944
    test 130 reverse-2: 45.0, 120.0, 2000.0
    test 131 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 132 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 133 philam-2: 0.7854, 2.0944
    test 134 reverse-3: 45.0, 120.0, 3000.0
    test 135 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 136 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 137 philam-3: 0.7854, 2.0944
    test 138 reverse-4: 45.0, 120.0, 4000.0
    test 139 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 140 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 141 philam-4: 0.7854, 2.0944
    test 142 reverse-5: 45.0, 120.0, 10000.0
    test 143 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 144 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 145 philam-5: 0.7854, 2.0944
    test 146 reverse-6: 45.0, 120.0, 20000.0
    test 147 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 148 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 149 philam-6: 0.7854, 2.0944
    test 150 reverse-7: 45.0, 120.0, 100000.0
    test 151 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 152 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 153 philam-7: 0.7854, 2.0944
    test 154 reverse-8: 45.0, 120.0, 800000.0
    test 155 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 156 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 157 philam-8: 0.7854, 2.0944
    test 158 reverse-9: 45.0, 120.0, 1000000.0
    test 159 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 160 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 161 philam-9: 0.7854, 2.0944
    test 162 sudano: 45.0, 0.0, 100000.0
    test 163 name: OS-UK
    test 164 forward: 53.61199036, -1.66444222, 299.8
    test 165 forward: 3790644.9, -110149.21, 5111482.97
    test 166 reverse: 3790644.9, -110149.21, 5111482.97
    test 167 reverse: 53.61199036, -1.66444223
    test 168 reverse.lat: 53°36′43.1653″N
    test 169 reverse.lon: 001°39′51.992″W
    test 170 reverse.height: 299.800
    test 171 case: 1
    test 172 iteration: None
    test 173 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 174 reverse: 34.0, -117.333569, 251.702
    test 175 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 176 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6292741.654168, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 177 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 178 EcefFarrell21: EcefFarrell21(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell21

    test 179 EcefFarrell22: ...
    test 180 name: Test
    test 181 toStr: EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell22
    test 182 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell22
    test 183 copy(EcefFarrell22): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 184 EcefFarrell22.copy(): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 185 forward: 27.99, 86.93, 8820.0
    test 186 forward: 302271.4, 5635928.4, 2979666.1
    test 187 name: Test
    test 188 reverse: 302271.4, 5635928.4, 2979666.1
    test 189 reverse: 27.99, 86.93, 8820.01
    test 190 case: 1
    test 191 iteration: None
    test 192 name: Test
    test 193 reverse: 302000.0, 5636000.0, 2980000.0
    test 194 reverse: 27.99, 86.93, 9027.03
    test 195 case: 1
    test 196 iteration: None
    test 197 forward: 27.99, 86.93, 8820.0
    test 198 forward: 302271.43, 5635928.37, 2979666.13
    test 199 forward: 33.3, 44.4, 6000.0
    test 200 forward: 3816209.6, 3737108.55, 3485109.57
    test 201 reverse: 3816209.6, 3737108.55, 3485109.57
    test 202 reverse: 33.3, 44.4, 5999.996
    test 203 case: 1
    test 204 iteration: None
    test 205 reverse: 30000.0, 30000.0, 0.0
    test 206 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 207 case: 1
    test 208 iteration: None
    test 209 forward: 6.483, 45.0, -6335709.726
    test 210 forward: 30000.0, 30000.0, -0.0
    test 211 Vermeille: -168.919
    test 212 Vermeille: 190.939
    test 213 Vermeille: (65.772506, 169.060801)
    test 214 Vermeille: (1.147947, 3.141593)
    test 215 reverse-1: 45.0, 120.0, 1000.0
    test 216 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 217 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 218 philam-1: 0.7854, 2.0944
    test 219 reverse-2: 45.0, 120.0, 2000.0
    test 220 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 221 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 222 philam-2: 0.7854, 2.0944
    test 223 reverse-3: 45.0, 120.0, 3000.0
    test 224 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 225 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 226 philam-3: 0.7854, 2.0944
    test 227 reverse-4: 45.0, 120.0, 4000.0
    test 228 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 229 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 230 philam-4: 0.7854, 2.0944
    test 231 reverse-5: 45.0, 120.0, 10000.0
    test 232 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 233 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 234 philam-5: 0.7854, 2.0944
    test 235 reverse-6: 45.0, 120.0, 20000.0
    test 236 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 237 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 238 philam-6: 0.7854, 2.0944
    test 239 reverse-7: 45.0, 120.0, 100000.0
    test 240 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 241 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 242 philam-7: 0.7854, 2.0944
    test 243 reverse-8: 45.0, 120.0, 800000.005  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 244 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 245 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 246 philam-8: 0.7854, 2.0944
    test 247 reverse-9: 45.0, 120.0, 1000000.007  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 248 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 249 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 250 philam-9: 0.7854, 2.0944
    test 251 sudano: 45.0, 0.0, 100000.0
    test 252 name: OS-UK
    test 253 forward: 53.61199036, -1.66444222, 299.8
    test 254 forward: 3790644.9, -110149.21, 5111482.97
    test 255 reverse: 3790644.9, -110149.21, 5111482.97
    test 256 reverse: 53.61199036, -1.66444223
    test 257 reverse.lat: 53°36′43.1653″N
    test 258 reverse.lon: 001°39′51.992″W
    test 259 reverse.height: 299.800
    test 260 case: 1
    test 261 iteration: None
    test 262 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 263 reverse: 34.0, -117.333569, 251.702
    test 264 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 265 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 266 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 267 EcefFarrell22: EcefFarrell22(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell22

    test 268 EcefVeness: ...
    test 269 name: Test
    test 270 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 271 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 272 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 273 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 274 forward: 27.99, 86.93, 8820.0
    test 275 forward: 302271.4, 5635928.4, 2979666.1
    test 276 name: Test
    test 277 reverse: 302271.4, 5635928.4, 2979666.1
    test 278 reverse: 27.99, 86.93, 8820.01
    test 279 case: 1
    test 280 iteration: None
    test 281 name: Test
    test 282 reverse: 302000.0, 5636000.0, 2980000.0
    test 283 reverse: 27.99, 86.93, 9027.03
    test 284 case: 1
    test 285 iteration: None
    test 286 forward: 27.99, 86.93, 8820.0
    test 287 forward: 302271.43, 5635928.37, 2979666.13
    test 288 forward: 33.3, 44.4, 6000.0
    test 289 forward: 3816209.6, 3737108.55, 3485109.57
    test 290 reverse: 3816209.6, 3737108.55, 3485109.57
    test 291 reverse: 33.3, 44.4, 5999.996
    test 292 case: 1
    test 293 iteration: None
    test 294 reverse: 30000.0, 30000.0, 0.0
    test 295 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 296 case: 1
    test 297 iteration: None
    test 298 forward: 6.483, 45.0, -6335709.726
    test 299 forward: 30000.0, 30000.0, -0.0
    test 300 Vermeille: -168.919
    test 301 Vermeille: 190.939
    test 302 Vermeille: (65.772506, 169.060801)
    test 303 Vermeille: (1.147947, 3.141593)
    test 304 reverse-1: 45.0, 120.0, 1000.0
    test 305 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 306 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 307 philam-1: 0.7854, 2.0944
    test 308 reverse-2: 45.0, 120.0, 2000.0
    test 309 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 310 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 311 philam-2: 0.7854, 2.0944
    test 312 reverse-3: 45.0, 120.0, 3000.0
    test 313 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 314 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 315 philam-3: 0.7854, 2.0944
    test 316 reverse-4: 45.0, 120.0, 4000.0
    test 317 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 318 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 319 philam-4: 0.7854, 2.0944
    test 320 reverse-5: 45.0, 120.0, 10000.0
    test 321 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 322 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 323 philam-5: 0.7854, 2.0944
    test 324 reverse-6: 45.0, 120.0, 20000.0
    test 325 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 326 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 327 philam-6: 0.7854, 2.0944
    test 328 reverse-7: 45.0, 120.0, 100000.0
    test 329 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 330 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 331 philam-7: 0.7854, 2.0944
    test 332 reverse-8: 45.0, 120.0, 800000.0
    test 333 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 334 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 335 philam-8: 0.7854, 2.0944
    test 336 reverse-9: 45.0, 120.0, 1000000.0
    test 337 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 338 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 339 philam-9: 0.7854, 2.0944
    test 340 sudano: 45.0, 0.0, 100000.0
    test 341 name: OS-UK
    test 342 forward: 53.61199036, -1.66444222, 299.8
    test 343 forward: 3790644.9, -110149.21, 5111482.97
    test 344 reverse: 3790644.9, -110149.21, 5111482.97
    test 345 reverse: 53.61199036, -1.66444223
    test 346 reverse.lat: 53°36′43.1653″N
    test 347 reverse.lon: 001°39′51.992″W
    test 348 reverse.height: 299.800
    test 349 case: 1
    test 350 iteration: None
    test 351 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 352 reverse: 34.0, -117.333569, 251.702
    test 353 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 354 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 355 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 356 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 357 EcefSudano: ...
    test 358 name: Test
    test 359 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 360 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 361 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 362 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 363 forward: 27.99, 86.93, 8820.0
    test 364 forward: 302271.4, 5635928.4, 2979666.1
    test 365 name: Test
    test 366 reverse: 302271.4, 5635928.4, 2979666.1
    test 367 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 368 case: 6
    test 369 iteration: 6
    test 370 name: Test
    test 371 reverse: 302000.0, 5636000.0, 2980000.0
    test 372 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 373 case: 6
    test 374 iteration: 6
    test 375 forward: 27.99, 86.93, 8820.0
    test 376 forward: 302271.43, 5635928.37, 2979666.13
    test 377 forward: 33.3, 44.4, 6000.0
    test 378 forward: 3816209.6, 3737108.55, 3485109.57
    test 379 reverse: 3816209.6, 3737108.55, 3485109.57
    test 380 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 381 case: 6
    test 382 iteration: 6
    test 383 reverse: 30000.0, 30000.0, 0.0
    test 384 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 385 case: 1
    test 386 iteration: 1
    test 387 forward: 6.483, 45.0, -6335709.726
    test 388 forward: 30000.0, 30000.0, -0.0
    test 389 Vermeille: -168.919
    test 390 Vermeille: 190.939
    test 391 Vermeille: (65.979481, 169.060801)  FAILED, KNOWN, expected (65.772506, 169.060801)
    test 392 Vermeille: (1.151559, 3.141593)  FAILED, KNOWN, expected (1.147947, 3.141593)
    test 393 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 394 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 395 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 396 philam-1: 0.7868, 2.0944
    test 397 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 398 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 399 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 400 philam-2: 0.7868, 2.0944
    test 401 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 402 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 403 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 404 philam-3: 0.7868, 2.0944
    test 405 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 406 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 407 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 408 philam-4: 0.7868, 2.0944
    test 409 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 410 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 411 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 412 philam-5: 0.7868, 2.0944
    test 413 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 414 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 415 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 416 philam-6: 0.7868, 2.0944
    test 417 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 418 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 419 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 420 philam-7: 0.7868, 2.0944
    test 421 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 422 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 423 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 424 philam-8: 0.7866, 2.0944
    test 425 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 426 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 427 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 428 philam-9: 0.7866, 2.0944
    test 429 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 430 name: OS-UK
    test 431 forward: 53.61199036, -1.66444222, 299.8
    test 432 forward: 3790644.9, -110149.21, 5111482.97
    test 433 reverse: 3790644.9, -110149.21, 5111482.97
    test 434 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 435 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 436 reverse.lon: 001°39′51.992″W
    test 437 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 438 case: 7
    test 439 iteration: 7
    test 440 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 441 reverse: 34.036724, -117.333569, 250.396541  FAILED, KNOWN, expected 34.0, -117.333569, 251.702
    test 442 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 443 EcefError: (0.0, 0.0, 0.0, 0.0, 0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 444 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 445 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 446 EcefYou: ...
    test 447 name: Test
    test 448 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefYou
    test 449 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefYou
    test 450 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 451 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 452 forward: 27.99, 86.93, 8820.0
    test 453 forward: 302271.4, 5635928.4, 2979666.1
    test 454 name: Test
    test 455 reverse: 302271.4, 5635928.4, 2979666.1
    test 456 reverse: 27.99, 86.93, 8820.01
    test 457 case: 1
    test 458 iteration: None
    test 459 name: Test
    test 460 reverse: 302000.0, 5636000.0, 2980000.0
    test 461 reverse: 27.99, 86.93, 9027.03
    test 462 case: 1
    test 463 iteration: None
    test 464 forward: 27.99, 86.93, 8820.0
    test 465 forward: 302271.43, 5635928.37, 2979666.13
    test 466 forward: 33.3, 44.4, 6000.0
    test 467 forward: 3816209.6, 3737108.55, 3485109.57
    test 468 reverse: 3816209.6, 3737108.55, 3485109.57
    test 469 reverse: 33.3, 44.4, 5999.996
    test 470 case: 1
    test 471 iteration: None
    test 472 reverse: 30000.0, 30000.0, 0.0
    test 473 reverse: 90.0, 45.0, -6356893.894  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 474 case: 1
    test 475 iteration: None
    test 476 forward: 6.483, 45.0, -6335709.726
    test 477 forward: 30000.0, 30000.0, -0.0
    test 478 Vermeille: -168.919
    test 479 Vermeille: 190.939
    test 480 Vermeille: (65.772506, 169.060801)
    test 481 Vermeille: (1.147947, 3.141593)
    test 482 reverse-1: 45.0, 120.0, 1000.0
    test 483 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 484 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 485 philam-1: 0.7854, 2.0944
    test 486 reverse-2: 45.0, 120.0, 2000.0
    test 487 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 488 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 489 philam-2: 0.7854, 2.0944
    test 490 reverse-3: 45.0, 120.0, 3000.0
    test 491 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 492 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 493 philam-3: 0.7854, 2.0944
    test 494 reverse-4: 45.0, 120.0, 4000.0
    test 495 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 496 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 497 philam-4: 0.7854, 2.0944
    test 498 reverse-5: 45.0, 120.0, 10000.0
    test 499 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 500 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 501 philam-5: 0.7854, 2.0944
    test 502 reverse-6: 45.0, 120.0, 20000.0
    test 503 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 504 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 505 philam-6: 0.7854, 2.0944
    test 506 reverse-7: 45.0, 120.0, 100000.0
    test 507 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 508 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 509 philam-7: 0.7854, 2.0944
    test 510 reverse-8: 45.0, 120.0, 800000.0
    test 511 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 512 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 513 philam-8: 0.7854, 2.0944
    test 514 reverse-9: 45.0, 120.0, 1000000.0
    test 515 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 516 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 517 philam-9: 0.7854, 2.0944
    test 518 sudano: 45.0, 0.0, 100000.0
    test 519 name: OS-UK
    test 520 forward: 53.61199036, -1.66444222, 299.8
    test 521 forward: 3790644.9, -110149.21, 5111482.97
    test 522 reverse: 3790644.9, -110149.21, 5111482.97
    test 523 reverse: 53.61199036, -1.66444223
    test 524 reverse.lat: 53°36′43.1653″N
    test 525 reverse.lon: 001°39′51.992″W
    test 526 reverse.height: 299.800
    test 527 case: 1
    test 528 iteration: None
    test 529 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 530 reverse: 34.0, -117.333569, 251.702
    test 531 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 532 EcefError: (0.0, 0.0, 0.0, 90.0, 0, -6356752.31414, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 533 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 534 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 535 EcefMatrix: ...
    test 536 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 537 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 538 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 539 matrix3: True
    test 540 matrixT3: True
    test 541 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 542 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 543 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 544 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 545 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 546 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 547 unrotate: (1.0, 1.0, 1.0)

    test 548 pygeodesy.sphericalNvector: Cartesian
    test 549 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 550 pygeodesy.sphericalNvector: LatLon
    test 551 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 552 forward: 48.833, 2.333, 0.0
    test 553 forward: 4190278.55, 170716.35, 4796058.21
    test 554 name: Paris
    test 555 reverse: 48.833, 2.333, 0.0
    test 556 name: Paris
    test 557 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 558 name: Paris
    test 559 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 560 to4Tuple: LatLon4Tuple
    test 561 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 562 to3Tuple: LatLon3Tuple
    test 563 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 564 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 565 name: Paris
    test 566 forward: [4190278.55, 170716.35, 4796058.21]
    test 567 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 568 pygeodesy.sphericalTrigonometry: Cartesian
    test 569 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 570 pygeodesy.sphericalTrigonometry: LatLon
    test 571 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 572 forward: 48.833, 2.333, 0.0
    test 573 forward: 4190278.55, 170716.35, 4796058.21
    test 574 name: Paris
    test 575 reverse: 48.833, 2.333, 0.0
    test 576 name: Paris
    test 577 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 578 name: Paris
    test 579 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 580 to4Tuple: LatLon4Tuple
    test 581 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 582 to3Tuple: LatLon3Tuple
    test 583 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 584 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 585 name: Paris
    test 586 forward: [4190278.55, 170716.35, 4796058.21]
    test 587 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 588 pygeodesy.ellipsoidalNvector: Cartesian
    test 589 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 590 pygeodesy.ellipsoidalNvector: LatLon
    test 591 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 592 forward: 48.833, 2.333, 0.0
    test 593 forward: 4202946.8, 171232.47, 4778354.17
    test 594 name: Paris
    test 595 reverse: 48.833, 2.333, 0.0
    test 596 name: Paris
    test 597 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 598 name: Paris
    test 599 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 600 to4Tuple: LatLon4Tuple
    test 601 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 602 to3Tuple: LatLon3Tuple
    test 603 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 604 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 605 name: Paris
    test 606 forward: [4202946.8, 171232.47, 4778354.17]
    test 607 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 608 pygeodesy.ellipsoidalVincenty: Cartesian
    test 609 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 610 pygeodesy.ellipsoidalVincenty: LatLon
    test 611 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 612 forward: 48.833, 2.333, 0.0
    test 613 forward: 4202946.8, 171232.47, 4778354.17
    test 614 name: Paris
    test 615 reverse: 48.833, 2.333, 0.0
    test 616 name: Paris
    test 617 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 618 name: Paris
    test 619 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 620 to4Tuple: LatLon4Tuple
    test 621 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 622 to3Tuple: LatLon3Tuple
    test 623 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 624 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 625 name: Paris
    test 626 forward: [4202946.8, 171232.47, 4778354.17]
    test 627 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 628 pygeodesy.ellipsoidalKarney: Cartesian
    test 629 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 630 pygeodesy.ellipsoidalKarney: LatLon
    test 631 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 632 forward: 48.833, 2.333, 0.0
    test 633 forward: 4202946.8, 171232.47, 4778354.17
    test 634 name: Paris
    test 635 reverse: 48.833, 2.333, 0.0
    test 636 name: Paris
    test 637 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 638 name: Paris
    test 639 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 640 to4Tuple: LatLon4Tuple
    test 641 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 642 to3Tuple: LatLon3Tuple
    test 643 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 644 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 645 name: Paris
    test 646 forward: [4202946.8, 171232.47, 4778354.17]
    test 647 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 648 pygeodesy.ellipsoidalExact: Cartesian
    test 649 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 650 pygeodesy.ellipsoidalExact: LatLon
    test 651 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 652 forward: 48.833, 2.333, 0.0
    test 653 forward: 4202946.8, 171232.47, 4778354.17
    test 654 name: Paris
    test 655 reverse: 48.833, 2.333, 0.0
    test 656 name: Paris
    test 657 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 658 name: Paris
    test 659 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 660 to4Tuple: LatLon4Tuple
    test 661 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 662 to3Tuple: LatLon3Tuple
    test 663 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 664 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 665 name: Paris
    test 666 forward: [4202946.8, 171232.47, 4778354.17]
    test 667 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    74 of 667 testEcef.py tests (11.1%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 39.033 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testElevations.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.elevation2 from .elevations by testElevations.py line 11
# lazily imported pygeodesy.Datums from .datums by testElevations.py line 11
# lazily imported pygeodesy.geoidHeight2 from .elevations by testElevations.py line 11

    testing testElevations.py 25.09.25 isLazy=3
# lazily imported pygeodesy.ellipsoidalVincenty by testElevations.py line 79
    test 1 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 2 geoidHeight2: -31.699
    test 3 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 4 geodHeight2: -31.699
    test 5 elevation2: elevation2(42.354117, -71.069351): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 2.03
    test 6 geodHeight2: -27.773
    test 7 elevation2: elevation2(41.499498, -81.695391): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 199.18
    test 8 geodHeight2: -34.337  FAILED, KNOWN (0.268124), expected -27.077
    test 9 elevation2: elevation2(41.49008, -71.312796): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 8.52
    test 10 geodHeight2: -30.000
    test 11 elevation2: elevation2(40.779147, -73.96808): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 32.79
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, "<HTTPError 301: 'Move Permanently'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 15 elevation2: (None, "URLError(OSError(65, 'No route to host'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 17 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 18 geoidHeight2: -31.699
    test 19 elevation2: elevation2(37.8816, -121.9142): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 1173.79
    test 20 geodHeight2: -31.699
    test 21 elevation2: elevation2(42.354117, -71.069351): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 2.03
    test 22 geodHeight2: -27.773
    test 23 elevation2: elevation2(41.499498, -81.695391): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 199.18
    test 24 geodHeight2: -34.337  FAILED, KNOWN (0.268124), expected -27.077
    test 25 elevation2: elevation2(41.49008, -71.312796): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 8.52
    test 26 geodHeight2: -30.000
    test 27 elevation2: elevation2(40.779147, -73.96808): <HTTPError 301: 'Move Permanently'>  FAILED, KNOWN, expected 32.79
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, "<HTTPError 301: 'Move Permanently'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 31 elevation2: (None, "URLError(OSError(65, 'No route to host'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")

    22 of 32 testElevations.py tests (68.8%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 13.871 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEllipsoidal.py
<string>:1: DeprecationWarning: method L{__matmul__<pygeodesy.trf.RefFrame.__matmul__>} has been DEPRECATED on 2024.02.16, use method C{B{point}.toRefFrame}.
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
./pygeodesy/azimuthal.py:634: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.bearingDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.compassDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.Datums from .datums by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS_ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.m2SM from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.RefFrames from .trf by testEllipsoidal.py line 13
# lazily imported pygeodesy.wrap360 from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidal.py line 753
# lazily imported pygeodesy.ellipsoidalNvector by testEllipsoidal.py line 753
# lazily imported pygeodesy.Equidistant from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testEllipsoidal.py line 753
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testEllipsoidal.py line 753

    testing testEllipsoidal.py 24.11.02 isLazy=3

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 toDatum: 51.4778°N, 000.0016°W
    test 8 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 9 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 10 parse: 51.477284°N, 000.00002°E, -45.91m
    test 11 reframe: None
    test 12 toCartesian: [3980581.21, -111.159, 4966824.522]
# lazily imported pygeodesy.css by ellipsoidalBase.py line 791
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 13 toCss: -111.158797 5705242.333679
    test 14 toCss: -111.158797 5705242.333679
    test 15 toEcef: 3980581.21, -111.159, 4966824.522
# lazily imported pygeodesy.etm by ellipsoidalBase.py line 441
# lazily imported pygeodesy.elliptic by etm.py line 354
    test 16 toEtm: 30 N 916396 5720041
    test 17 toEtm: 30 N 916396 5720041
# lazily imported pygeodesy.lcc by ellipsoidalBase.py line 838
    test 18 toLcc: 5639901 4612638
    test 19 toLcc: 5639901 4612638
# lazily imported pygeodesy.osgr by ellipsoidalBase.py line 867
    test 20 toOsgr: TQ 38876 77320
    test 21 toOsgr: TQ 38876 77320
# lazily imported pygeodesy.ktm by osgr.py line 107
    test 22 toOsgrTM: TQ 38876 77320
    test 23 toUtmUps: 30 N 708207 5707224
    test 24 toUtm: 30 N 708207 5707224
    test 25 toUtm: 30 N 708207 5707224
# lazily imported pygeodesy.webmercator by latlonBase.py line 1603
    test 26 toWm: -178.111 6672799.209
    test 27 toWm: -178.111 6672799.209
# lazily imported pygeodesy.elevations by ellipsoidalBase.py line 342
    test 28 elevation2: None
    test 29 geoidHeight2: None
    test 30 toUtmUps: 30 N 708207 5707224
    test 31 toUtm: 30 N 708207 5707224
    test 32 toUtm: 30 N 708207 5707224
# lazily imported pygeodesy.ups by ellipsoidalBase.py line 1078
    test 33 toUtmUps: 00 N 2000000 1333272
    test 34 toUps: 00 N 2000000 1333272
    test 35 toUps: 00 N 0 -666728
    test 36 toUps: 00 N 2000000 1555732
    test 37 toUtm: 31 N 459200 9217519
    test 38 nearestOn: 32.81°N, 031.42°E
    test 39 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 40 toNvector: True
    test 41 toCartesian: [3980581, 97, 4966825]
    test 42 toCartesian: True
    test 43 toVector3D: (0.6228, 0.0, 0.7824)
    test 44 Nvector: (0.5, 0.5, 0.7071)
    test 45 toVector3D: (0.5, 0.5, 0.7071)
    test 46 philamheight: 0.7854, 0.7854, 0.0
    test 47 latlonheight: 45.0, 45.0, 0.0
    test 48 xyzh: 0.5, 0.5, 0.7, 0.0
    test 49 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 50 toCartesian: True
    test 51 toLatLon: 45.0°N, 045.0°E
    test 52 toLatLon: True
    test 53 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 54 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 55 dop: 51.998889°N, 004.373333°E, +134.64m
    test 56 distance: 3806542.943645769  FAILED, KNOWN, expected 3806542.943647
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{ned<pygeodesy.ltpTuples.Ned.ned>} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{Ned3Tuple<pygeodesy.deprecated.classes.Ned3Tuple>} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)

    32 tests skipped (32): insersecant2

    testLatLon(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 57 isEllipsoidal: True
    test 58 isSpherical: False
    test 59 lat/lonDMS: 52.20472°N, 000.14056°E
    test 60 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 61 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 62 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 63 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 64 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 65 isequalTo: True
    test 66 isequalTo: True
    test 67 latlon2: 52.20472, 0.14056
    test 68 latlon2: 52.2047, 0.1406
    test 69 latlon2: 52.205, 0.141
    test 70 latlon2: 52.2, 0.14
    test 71 latlon2: 52.2, 0.1
    test 72 latlon2: 52.0, 0.0
    test 73 chordTo: 12029263.15
    test 74 chordTo: 12029049.69
    test 75 copy: True
    test 76 __eq__: True
    test 77 __ne__: False
    test 78 equirectangularTo: 404329.56
    test 79 distanceTo: 404279.720589
    test 80 distanceTo: 404279.720589
    test 81 distanceTo: 3972863
    test 82 distanceTo: 18013602.92
    test 83 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 84 intermediateTo: 51.372294°N, 000.707192°E
    test 85 intermediateTo: True
    test 86 intermediateTo: 404279.721
    test 87 intermediateTo+5: 35.560239°N, 008.833512°E
    test 88 intermediateTo+5: 4.885
    test 89 intermediateTo-4: 64.570387°N, 013.156352°W
    test 90 intermediateTo-4: 3.885
    test 91 intermediateTo-h: 125.000
    test 92 midpointTo: 50.536327°N, 001.274614°E
# lazily imported pygeodesy.booleans by iters.py line 76
    test 93 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 94 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 95 chordTo: 125203.963
    test 96 cosineAndoyerLambertTo: 125205.962
    test 97 cosineAndoyerLambertTo: 125205.962
    test 98 cosineForsyheAndoyerLambertTo: 125205.965
    test 99 cosineForsyheAndoyerLambertTo: 125205.965
    test 100 cosineLawTo: 124801.098
    test 101 cosineLawTo: 124801.098
    test 102 equirectangularTo: 124804.754
    test 103 equirectangularTo: 124804.754
    test 104 euclideanTo: 130015.089
    test 105 euclideanTo: 130015.089
    test 106 flatLocalTo: 125209.633
    test 107 flatLocalTo: 125209.633
    test 108 flatPolarTo: 133663.257
    test 109 flatPolarTo: 133663.257
    test 110 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 981
    test 111 hartzell: 53.349541°N, 001.7297°W
    test 112 height4: 0.0
    test 113 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 114 height4: 53°19′14.2″N, 001°43′46.9″W
    test 115 height4: 53°19′14.2″N, 001°43′46.9″W
    test 116 haversineTo: 124801.098
    test 117 haversineTo: 124801.098
    test 118 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 119 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 120 thomasTo: 125206.188
    test 121 thomasTo: 125206.188
    test 122 vincentysTo: 124801.098
    test 123 vincentysTo: 124801.098
    test 124 isclockwise: False
    test 125 isclockwise*: False
    test 126 isclockwise: True
    test 127 isclockwise*: True
    test 128 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 129 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 130 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 131 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 132 isconvex: False
    test 133 isconvex*: False
    test 134 isconvex: True
    test 135 isconvex*: True
    test 136 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 137 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 138 isenclosedBy1: True
    test 139 isenclosedBy1*: True
    test 140 isenclosedBy2: False
    test 141 isenclosedBy2*: False
    test 142 isenclosedBy3: False
    test 143 isenclosedBy3*: False
    test 144 isenclosedBy4: False
    test 145 isenclosedBy4*: False
    test 146 isenclosedBy5: False
    test 147 isenclosedBy5*: False
    test 148 isenclosedBy6: True
    test 149 isenclosedBy6*: True
    test 150 isenclosedBy7: True
    test 151 isenclosedBy7*: True
    test 152 isenclosedBy-CCW: True
    test 153 isenclosedBy-CW : True
    test 154 isenclosedBy-CCW: True
    test 155 compassAngleTo: 100.017
    test 156 compassAngleTo: 105.599
    test 157 compassAngleTo: 280.017
    test 158 compassAngleTo: 285.599
    test 159 equirectangularTo: 592.185
    test 160 distanceTo: 591.831
    test 161 compassAngleTo: 0.0
    test 162 compassAngleTo: 45.0
    test 163 compassAngleTo: 90.0
    test 164 compassAngleTo: 180.0
    test 165 compassAngleTo: 225.0
    test 166 compassAngleTo: 315.0
    test 167 compassAngleTo: 270.0
    test 168 compassAngleTo: 359.4
    test 169 latlon2: (53.0, 1.0)
    test 170 philam2: (0.93, 0.02)
    test 171 compassAngleTo: 31
    test 172 compassAngleTo: 45

    test 173 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 174 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 175 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 176 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 177 isequalTo: <class 'bool'>
    test 178 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 179 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 180 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 181 xyz3: <class 'tuple'>
    test 182 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 183 compassAngleTo: <class 'float'>
    test 184 cosineLawTo: <class 'float'>
    test 185 euclideanTo: <class 'float'>
    test 186 flatLocalTo: <class 'float'>
    test 187 flatPolarTo: <class 'float'>
    test 188 haversineTo: <class 'float'>
    test 189 hubenyTo: <class 'float'>
    test 190 vincentysTo: <class 'float'>
    test 191 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 192 toVector3d: (0.61823, 0.0, 0.786)
    test 193 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 194 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 195 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 196 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 197 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 198 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)

    22 tests skipped (54): No module named 'numpy': required by vector2d._numpy

    testVectorial(pygeodesy.ellipsoidalNvector, 24.10.19)

    test 199 toLatLon: 44.995674°N, 045.0°E
    test 200 toNvector: (0.50004, 0.50004, 0.70705)
    test 201 isequalTo: False
    test 202 isequalTo: True
    test 203 length: 0.99992449715
    test 204 euclid: 0.99995577
    test 205 length: 1.00
    test 206 euclid: 1.0000
    test 207 meanOf: 44.995674°N, 045.0°E
    test 208 meanOf: LatLon
    test 209 apply: (0.5, 0.5, 0.707)
    test 210 init: (0.5, 0.5, 0.707)
    test 211 i***: (0.5, 0.5, 0.707)
    test 212 abs: 0.99992449715
    test 213 sumOf: (52.70504, 0.61904, 0.70705)
    test 214 sumOf: Nv
    test 215 sumOf: sumOf
    test 216 length: 52.7134151513
    test 217 sizeof: 217  FAILED, KNOWN, expected 128
    test 218 length: 52.2051356286
    test 219 sizeof: 320  FAILED, KNOWN, expected 247
    test 220 copy: True
    test 221 length: 52.2051356286
    test 222 sizeof: 320
    test 223 isenclosedBy: True
    test 224 isenclosedBy*: True
    test 225 isenclosedBy: True
    test 226 isenclosedBy*: True

    test 227 nearestOn: 51.0°N, 001.0°E
    test 228 nearestOn: 50.987°N, 000.298°W
    test 229 nearestOn: 51.0°N, 002.0°E
    test 230 nearestOn: 50.995°N, 002.655°E
    test 231 nearestOn: 51.0°N, 001.9°E
    test 232 nearestOn: True
    test 233 distanceTo: 42.826
    test 234 nearestOn: 51.0°N, 002.0°E
    test 235 nearestOn: True
    test 236 nearestOn: 00.0°N, 000.0°E
    test 237 nearestOn: True
    test 238 nearestOn: 00.0°N, 020.0°E
    test 239 nearestOn: True
    test 240 nearestOn: 02.0°N, 002.0°E
    test 241 nearestOn: 02.0°N, 002.0°E

    test 242 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 243 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 244 BasseC: 47.3038°N, 002.5721°W
    test 245 BasseH: 47.311067°N, 002.528617°W
    test 246 triangulate: 47.323667°N, 002.568501°W
    test 247 triangulate: True

    test 248 trilaterate: 37.419078°N, 121.960579°W
    test 249 trilaterate: True
    test 250 trilaterate: 08.068912°S, 034.888699°W
    test 251 trilaterate: True
    test 252 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 253 trilaterate: True
    test 254 trilaterate: 42.67456065°N, 002.49539502°E
    test 255 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 367
# lazily imported pygeodesy.deprecated by ltpTuples.py line 537

    test 256 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 257 sumOf: Nvector
    test 258 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 259 ecef.lat, .lon: 44.995674, 45.0
    test 260 ecef.height: -0.0
    test 261 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 262 .isEllipsoidal: True
    test 263 .isSpherical: False
    test 264 .latlon: (44.995674, 45.0)
    test 265 .philam: (0.785323, 0.785398)
    test 266 .latlonheight: (44.995674, 45.0, 0.0)
    test 267 .philamheight: (0.785323, 0.785398, 0.0)
    test 268 parse: (0.5, 0.5, 0.707)
    test 269 cmp: 0
    test 270 eq: True
    test 271 ge: True
    test 272 gt: False
    test 273 le: True
    test 274 lt: False
    test 275 ne: False
    test 276 *: (1.0, 1.0, 1.414)
    test 277 +: (1.0, 1.0, 1.414)
    test 278 /: (0.5, 0.5, 0.707)
    test 279 -: (0.5, 0.5, 0.707)
    test 280 @: (0.0, 0.0, 0.0)
    test 281 @: (0.0, 0.0, 0.0)
    test 282 rotate: (0.26268, 0.26268, 0.37143)
    test 283 crosserrors: True
    test 284 0: divisor (0): float division by zero
    test 285 intersections2: (500.0, 0.0, 0.0)
    test 286 nearestOn: (0.0, 0.0, 0.0)
    test 287 nearestOn: True
    test 288 nearestOn: (100.0, 100.0, 100.0)
    test 289 nearestOn: True
    test 290 iscolinearWith: False
    test 291 iscolinearWith: True
    test 292 nearestOn: (0.0, 0.0, 0.0)
    test 293 nearestOn: True
    test 294 nearestOn: (100.0, 100.0, 100.0)
    test 295 nearestOn: True
    test 296 iscolinearWith: False
    test 297 iscolinearWith: True

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 298 isEllipsoidal: True
    test 299 isSpherical: False
    test 300 isEllipsoidal: True
    test 301 isSpherical: False
    test 302 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 303 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 304 toDatum: 51.4778°N, 000.0016°W
    test 305 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 306 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 307 parse: 51.477284°N, 000.00002°E, -45.91m
    test 308 reframe: None
    test 309 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 310 toCss: -111.158797 5705242.333679
    test 311 toCss: -111.158797 5705242.333679
    test 312 toEcef: 3980581.21, -111.159, 4966824.522
    test 313 toEtm: 30 N 916396 5720041
    test 314 toEtm: 30 N 916396 5720041
    test 315 toLcc: 5639901 4612638
    test 316 toLcc: 5639901 4612638
    test 317 toOsgr: TQ 38876 77320
    test 318 toOsgr: TQ 38876 77320
    test 319 toOsgrTM: TQ 38876 77320
    test 320 toUtmUps: 30 N 708207 5707224
    test 321 toUtm: 30 N 708207 5707224
    test 322 toUtm: 30 N 708207 5707224
    test 323 toWm: -178.111 6672799.209
    test 324 toWm: -178.111 6672799.209
    test 325 elevation2: None
    test 326 geoidHeight2: None
    test 327 toUtmUps: 30 N 708207 5707224
    test 328 toUtm: 30 N 708207 5707224
    test 329 toUtm: 30 N 708207 5707224
    test 330 toUtmUps: 00 N 2000000 1333272
    test 331 toUps: 00 N 2000000 1333272
    test 332 toUps: 00 N 0 -666728
    test 333 toUps: 00 N 2000000 1555732
    test 334 toUtm: 31 N 459200 9217519
    test 335 nearestOn: 32.81°N, 031.42°E
    test 336 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 337 dop: 51.998889°N, 004.373333°E, +134.64m
    test 338 distance: 3817991.0740122627  FAILED, KNOWN, expected 3817991.074015
    test 339 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 340 iteration: 0
    test 341 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 342 iteration: 1
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1023
# lazily imported pygeodesy.rhumb by geodesicw.py line 585
# lazily imported pygeodesy.geodsolve by ellipsoids.py line 1037
    test 343 intersecant2: 2.849e-11% 5 LatLon(03°18′54.69″S, 023°52′08.48″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 344 intersecant2: 2.945e-11% 5 LatLon(22°22′23.65″S, 007°55′54.49″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 345 intersecant2: 7.375e-11% 5 LatLon(10°39′24.95″N, 034°45′48.18″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 346 intersecant2: 6.494e-11% 4 LatLon(25°11′09.14″S, 005°10′35.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 347 intersecant2: 6.554e-12% 5 LatLon(10°14′21.91″S, 021°00′17.05″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 348 intersecant2: 1.993e-11% 5 LatLon(20°55′17.31″S, 010°40′21.43″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 349 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (LatLon(15°00′00.0″N, 045°00′00.0″E)), exact (False), start (LatLon(45°00′00.0″S, 015°00′00.0″W)) or wrap (False): too distant (3.69e+06) plumb to (16°56′45.9″S, 020°17′02.98″E)
    test 350 intersecant2: 7.630e-11% 5 LatLon(27°16′36.73″N, 016°14′20.64″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 351 intersecant2: 1.070e-10% 5 LatLon(13°56′24.6″N, 024°05′19.27″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 352 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (75.6195013210251), exact (False), start (LatLon(13°56′24.6″N, 024°05′19.27″E)) or wrap (False): too distant (1.8e+07) plumb to (12°18′06.46″N, 170°02′29.8″E)
./test/testLatLon.py:621: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testLatLon.py:622: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
    test 353 intersecant2: 7.474e-12% 5 LatLon(15°46′45.43″S, 026°59′18.46″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 354 intersecant2: 3.346e-12% 4 LatLon(35°09′22.78″N, 004°25′11.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 355 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (1.1562523903942894), exact (False), start (LatLon(35°09′22.78″N, 004°25′11.44″W)) or wrap (False): too distant (1.73e+07) plumb to (05°02′58.47″S, 160°24′42.23″W)
    test 356 intersecant2: 8.797e-11% 5 LatLon(11°56′56.66″N, 024°32′29.34″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 357 intersecant2: 3.228e-11% 5 LatLon(07°10′47.21″N, 025°05′46.68″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 358 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (87.59197368772915), exact (False), start (LatLon(07°10′47.21″N, 025°05′46.68″E)) or wrap (False): no convergence (256), tolerance (1.49012e-08) plumb to (07°19′47.86″N, 004°55′24.53″W)

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 359 isEllipsoidal: True
    test 360 isSpherical: False
    test 361 lat/lonDMS: 52.20472°N, 000.14056°E
    test 362 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 363 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 364 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 365 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 366 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 367 isequalTo: True
    test 368 isequalTo: True
    test 369 latlon2: 52.20472, 0.14056
    test 370 latlon2: 52.2047, 0.1406
    test 371 latlon2: 52.205, 0.141
    test 372 latlon2: 52.2, 0.14
    test 373 latlon2: 52.2, 0.1
    test 374 latlon2: 52.0, 0.0
    test 375 chordTo: 12029263.15
    test 376 chordTo: 12029049.69
    test 377 initialBearingTo: 156.1106
    test 378 initialBearingTo: 65.9335
    test 379 initialBearingTo: 0.0
    test 380 initialBearingTo: 180.0
    test 381 finalBearingTo: 157.8345
    test 382 finalBearingTo: 93.9034
    test 383 bearingTo2: 156.1106, 157.8345
    test 384 ispolar: True
    test 385 copy: True
    test 386 __eq__: True
    test 387 __ne__: False
    test 388 equirectangularTo: 404329.56
    test 389 distanceTo: 404607.805988
    test 390 distanceTo: 404607.805988
    test 391 distanceTo: 3981601
    test 392 antipodal: False
    test 393 distanceTo dateline: 19959679.267
    test 394 distanceTo unrolled: 19959679.267
    test 395 antipodal: False
    test 396 distanceTo dateline: 9513998
    test 397 distanceTo unrolled: 9513998
    test 398 distanceTo: 18012714.66
    test 399 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 400 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 401 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 402 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 403 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 404 intermediateTo: 51.372275°N, 000.707253°E
    test 405 intermediateTo: True
    test 406 intermediateTo: 404607.806
    test 407 intermediateTo+5: 35.139582°N, 008.994368°E
    test 408 intermediateTo+5: 5.000
    test 409 intermediateTo-4: 64.894124°N, 013.705689°W
    test 410 intermediateTo-4: 4.000
    test 411 intermediateTo-h: 125.000
    test 412 midpointTo: 50.536583°N, 001.274507°E
    test 413 destination: 51.513526°N, 000.098038°W
    test 414 destination: 51°30′49″N, 000°05′53″W
    test 415 destination: 33°57′N, 118°24′W
    test 416 destination: 33.950367°N, 118.399012°W
    test 417 destination: 0.592546N, 2.066453W
    test 418 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 419 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 420 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 421 chordTo: 125203.963
    test 422 cosineAndoyerLambertTo: 125205.962
    test 423 cosineAndoyerLambertTo: 125205.962
    test 424 cosineForsyheAndoyerLambertTo: 125205.965
    test 425 cosineForsyheAndoyerLambertTo: 125205.965
    test 426 cosineLawTo: 124801.098
    test 427 cosineLawTo: 124801.098
    test 428 equirectangularTo: 124804.754
    test 429 equirectangularTo: 124804.754
    test 430 euclideanTo: 130015.089
    test 431 euclideanTo: 130015.089
    test 432 flatLocalTo: 125209.633
    test 433 flatLocalTo: 125209.633
    test 434 flatPolarTo: 133663.257
    test 435 flatPolarTo: 133663.257
    test 436 hartzell: 53.3206°N, 001.7297°W
    test 437 hartzell: 53.349541°N, 001.7297°W
    test 438 height4: 0.0
    test 439 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 440 height4: 53°19′14.2″N, 001°43′46.9″W
    test 441 height4: 53°19′14.2″N, 001°43′46.9″W
    test 442 haversineTo: 124801.098
    test 443 haversineTo: 124801.098
    test 444 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 445 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 446 thomasTo: 125206.188
    test 447 thomasTo: 125206.188
    test 448 vincentysTo: 124801.098
    test 449 vincentysTo: 124801.098
    test 450 isclockwise: False
    test 451 isclockwise*: False
    test 452 isclockwise: True
    test 453 isclockwise*: True
    test 454 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 455 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 456 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 457 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 458 isconvex: False
    test 459 isconvex*: False
    test 460 isconvex: True
    test 461 isconvex*: True
    test 462 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 463 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 464 isenclosedBy1: True
    test 465 isenclosedBy1*: True
    test 466 isenclosedBy2: False
    test 467 isenclosedBy2*: False
    test 468 isenclosedBy3: False
    test 469 isenclosedBy3*: False
    test 470 isenclosedBy4: False
    test 471 isenclosedBy4*: False
    test 472 isenclosedBy5: False
    test 473 isenclosedBy5*: False
    test 474 isenclosedBy6: True
    test 475 isenclosedBy6*: True
    test 476 isenclosedBy7: True
    test 477 isenclosedBy7*: True
    test 478 isenclosedBy-CCW: True
    test 479 isenclosedBy-CW : True
    test 480 isenclosedBy-CCW: True
    test 481 initialBearingTo: 102.392291
    test 482 compassAngleTo: 100.017
    test 483 compassAngleTo: 105.599
    test 484 initialBearingTo: 288.676039
    test 485 compassAngleTo: 280.017
    test 486 compassAngleTo: 285.599
    test 487 equirectangularTo: 592.185
    test 488 distanceTo: 593.571
    test 489 bearingTo: 0.0
    test 490 compassAngleTo: 0.0
    test 491 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 492 compassAngleTo: 45.0
    test 493 bearingTo: 90.0
    test 494 compassAngleTo: 90.0
    test 495 bearingTo: 180.0
    test 496 compassAngleTo: 180.0
    test 497 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 498 compassAngleTo: 225.0
    test 499 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 500 compassAngleTo: 315.0
    test 501 bearingTo: 270.0
    test 502 compassAngleTo: 270.0
    test 503 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 504 compassAngleTo: 359.4
    test 505 latlon2: (53.0, 1.0)
    test 506 philam2: (0.93, 0.02)
    test 507 bearingTo: 31
    test 508 compassAngleTo: 31
    test 509 compassAngleTo: 45

    test 510 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 511 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 512 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 513 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 514 isequalTo: <class 'bool'>
    test 515 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 516 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 517 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 518 xyz3: <class 'tuple'>
    test 519 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 520 compassAngleTo: <class 'float'>
    test 521 cosineLawTo: <class 'float'>
    test 522 euclideanTo: <class 'float'>
    test 523 flatLocalTo: <class 'float'>
    test 524 flatPolarTo: <class 'float'>
    test 525 haversineTo: <class 'float'>
    test 526 hubenyTo: <class 'float'>
    test 527 vincentysTo: <class 'float'>
    test 528 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 529 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 530 toVector3d: (0.61823, 0.0, 0.786)
# lazily imported pygeodesy.sphericalTrigonometry by ellipsoidalBaseDI.py line 731

    test 531 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 532 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 533 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 534 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 535 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 536 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 537 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 538 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 539 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 540 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 541 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 542 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 543 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 544 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 545 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 546 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 547 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 548 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 549 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 550 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (81): No module named 'numpy': required by vector2d._numpy

    test 551 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (103): No module named 'numpy': required by vector2d._numpy
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399

    test 552 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 553 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 554 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 555 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 556 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 557 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 558 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 559 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 560 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 561 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 562 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 563 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 564 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 1, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 565 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 566 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 567 Equidistant: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W  FAILED, KNOWN, expected 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 568 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 569 Equidistant: 00.0°N, 035.4073°W, 00.0°N, 035.4073°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 570 Equidistant: 1.63814 (% of radius)
    test 571 Equidistant: 22.756°N, 000.0°E, 22.756°S, 000.0°E  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 572 Equidistant: 1.30784 (% of radius)
    test 573 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 574 Equidistant: 1.31348 (% of radius)
    test 575 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 576 Equidistant: 1.81093 (% of radius)
    test 577 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 578 Equidistant 5: 0.00337268 (% of radius)
    test 579 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 580 Equidistant 10: 0.00344677 (% of radius)
    test 581 Equidistant: 04.20982°N, 004.517622°W Random +/- 45
    test 582 Equidistant: 04.127959°N, 004.471857°W, 00.83723°S, 050.922055°W  d 10380.7 meter (iteration 3)
    test 583 Equidistant: 04.11427°N, 004.419073°W, 00.006144°S, 052.379399°W  d 15210.4 meter (iteration 4)

    testVincenty(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='WGS84')
    test 584 distanceTo: 866455.43292
    test 585 toDatum: OSGB36
    test 586 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 587 isEllipsoidal: True
    test 588 isSpherical: False
    test 589 epsilon: 1e-12
    test 590 iterations: 200
    test 591 copy: True
    test 592 isEllipsoidal: True
    test 593 isSpherical: False
    test 594 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 595 epsilon: 2.220446049250e-16
    test 596 iterations: 400
    test 597 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='WGS84')
    test 598 coincident: 0.0
    test 599 coincident: 0.0, 0.0, 0.0
    test 600 destination: 37.6528°S, 143.9265°E
    test 601 destination: True
    test 602 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 603 destination2: True
    test 604 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 605 distanceTo: 969954.166
    test 606 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 607 distanceTo2: 972708.16174, 11.22502
    test 608 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 609 destination: 58.64402°N, 003.07009°W
    test 610 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 611 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 612 distanceTo: 404607.806
    test 613 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 614 distanceTo2: 402574.597287, 157.726344
    test 615 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 616 destination: 48.857°N, 002.351°E
    test 617 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 618 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 619 distanceTo: 54973.295
    test 620 distanceTo3: 54973.29527, 233.13008, 232.82461
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
    test 621 distanceTo2: 54903.41209, 232.9209
    test 622 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 623 destination: 37.6528°N, 143.9265°E
    test 624 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 625 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 626 distanceToMP: 298396.057
    test 627 distanceToSM: 185.415
    test 628 distanceToMP: 111319.491
    test 629 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 630 distanceToKW: 222638.982
    test 631 distanceToKW: 111319.491
    test 632 distanceTo3: 54972.271
    test 633 distanceTo3: 306°52′05.37″
    test 634 distanceTo3: 307°10′25.07″
    test 635 distanceTo2: 54902.390
    test 636 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='WGS84')
    test 637 distanceTo/antipodal (182): 19936288.579
    test 638 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 639 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 640 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 641 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 642 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 643 distanceTo/coincident (5): 111319.491
    test 644 distanceTo/meridional (1): 10001965.729
    test 645 initialBearingTo/meridional (1): 180.0
    test 646 distanceTo/coincident (1): 0.0
    test 647 initialBearingTo/coincident (1): 0.0
    test 648 finalBearingTo/coincident (1): 0.0
    test 649 destination/coincident (1): 50.06632°N, 005.71475°W
    test 650 distanceTo/anti-meridian (4): 10825924.1
    test 651 distanceTo/quadrants (5): 4015703.02
    test 652 distanceTo/quadrants (5): 4015703.02
    test 653 distanceTo/quadrants (5): 4015703.02
    test 654 distanceTo/quadrants (5): 4015703.02
    test 655 distanceTo/quadrants (5): 4015703.02
    test 656 distanceTo/quadrants (5): 4015703.02
    test 657 distanceTo/quadrants (5): 4015703.02
    test 658 distanceTo/quadrants (5): 4015703.02
    test 659 distanceTo/quadrants (5): 4015703.02
    test 660 distanceTo/quadrants (5): 4015703.02
    test 661 distanceTo/quadrants (5): 4015703.02
    test 662 distanceTo/quadrants (5): 4015703.02
    test 663 distanceTo/quadrants (5): 4015703.02
    test 664 distanceTo/quadrants (5): 4015703.02
    test 665 distanceTo/quadrants (5): 4015703.02
    test 666 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='NAD83')
    test 667 distanceTo: 866455.43292
    test 668 toDatum: OSGB36
    test 669 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 670 isEllipsoidal: True
    test 671 isSpherical: False
    test 672 epsilon: 1e-12
    test 673 iterations: 200
    test 674 copy: True
    test 675 isEllipsoidal: True
    test 676 isSpherical: False
    test 677 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 678 epsilon: 2.220446049250e-16
    test 679 iterations: 400
    test 680 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='NAD83')
    test 681 coincident: 0.0
    test 682 coincident: 0.0, 0.0, 0.0
    test 683 destination: 37.6528°S, 143.9265°E
    test 684 destination: True
    test 685 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 686 destination2: True
    test 687 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 688 distanceTo: 969954.166
    test 689 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 690 distanceTo2: 972708.16174, 11.22502
    test 691 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 692 destination: 58.64402°N, 003.07009°W
    test 693 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 694 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 695 distanceTo: 404607.806
    test 696 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 697 distanceTo2: 402574.597287, 157.726344
    test 698 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 699 destination: 48.857°N, 002.351°E
    test 700 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 701 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 702 distanceTo: 54973.295
    test 703 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 704 distanceTo2: 54903.41209, 232.9209
    test 705 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 706 destination: 37.6528°N, 143.9265°E
    test 707 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 708 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 709 distanceToMP: 298396.057
    test 710 distanceToSM: 185.415
    test 711 distanceToMP: 111319.491
    test 712 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 713 distanceToKW: 222638.982
    test 714 distanceToKW: 111319.491
    test 715 distanceTo3: 54972.271
    test 716 distanceTo3: 306°52′05.37″
    test 717 distanceTo3: 307°10′25.07″
    test 718 distanceTo2: 54902.390
    test 719 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 24.10.12, datum='NAD83')
    test 720 distanceTo/antipodal (182): 19936288.579
    test 721 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 722 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 723 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 724 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 725 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 726 distanceTo/coincident (5): 111319.491
    test 727 distanceTo/meridional (1): 10001965.729
    test 728 initialBearingTo/meridional (1): 180.0
    test 729 distanceTo/coincident (1): 0.0
    test 730 initialBearingTo/coincident (1): 0.0
    test 731 finalBearingTo/coincident (1): 0.0
    test 732 destination/coincident (1): 50.06632°N, 005.71475°W
    test 733 distanceTo/anti-meridian (4): 10825924.1
    test 734 distanceTo/quadrants (5): 4015703.02
    test 735 distanceTo/quadrants (5): 4015703.02
    test 736 distanceTo/quadrants (5): 4015703.02
    test 737 distanceTo/quadrants (5): 4015703.02
    test 738 distanceTo/quadrants (5): 4015703.02
    test 739 distanceTo/quadrants (5): 4015703.02
    test 740 distanceTo/quadrants (5): 4015703.02
    test 741 distanceTo/quadrants (5): 4015703.02
    test 742 distanceTo/quadrants (5): 4015703.02
    test 743 distanceTo/quadrants (5): 4015703.02
    test 744 distanceTo/quadrants (5): 4015703.02
    test 745 distanceTo/quadrants (5): 4015703.02
    test 746 distanceTo/quadrants (5): 4015703.02
    test 747 distanceTo/quadrants (5): 4015703.02
    test 748 distanceTo/quadrants (5): 4015703.02
    test 749 distanceTo/quadrants (5): 4015703.02

    testEllipsoidal(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 750 isEllipsoidal: True
    test 751 isSpherical: False
    test 752 isEllipsoidal: True
    test 753 isSpherical: False
    test 754 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 755 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 756 toDatum: 51.4778°N, 000.0016°W
    test 757 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 758 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 759 parse: 51.477284°N, 000.00002°E, -45.91m
    test 760 reframe: None
    test 761 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 762 toCss: -111.158797 5705242.333679
    test 763 toCss: -111.158797 5705242.333679
    test 764 toEcef: 3980581.21, -111.159, 4966824.522
    test 765 toEtm: 30 N 916396 5720041
    test 766 toEtm: 30 N 916396 5720041
    test 767 toLcc: 5639901 4612638
    test 768 toLcc: 5639901 4612638
    test 769 toOsgr: TQ 38876 77320
    test 770 toOsgr: TQ 38876 77320
    test 771 toOsgrTM: TQ 38876 77320
    test 772 toUtmUps: 30 N 708207 5707224
    test 773 toUtm: 30 N 708207 5707224
    test 774 toUtm: 30 N 708207 5707224
    test 775 toWm: -178.111 6672799.209
    test 776 toWm: -178.111 6672799.209
    test 777 elevation2: None
    test 778 geoidHeight2: None
    test 779 toUtmUps: 30 N 708207 5707224
    test 780 toUtm: 30 N 708207 5707224
    test 781 toUtm: 30 N 708207 5707224
    test 782 toUtmUps: 00 N 2000000 1333272
    test 783 toUps: 00 N 2000000 1333272
    test 784 toUps: 00 N 0 -666728
    test 785 toUps: 00 N 2000000 1555732
    test 786 toUtm: 31 N 459200 9217519
    test 787 nearestOn: 32.81°N, 031.42°E
    test 788 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 789 dop: 51.998889°N, 004.373333°E, +134.64m
    test 790 distance: 3802238.504988623  FAILED, KNOWN, expected 3802238.504989
    test 791 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 792 iteration: 0
    test 793 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 794 iteration: 1
    test 795 intersecant2: 1.394e-14% 60 LatLon(03°18′54.69″S, 023°52′08.48″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 796 intersecant2: 1.394e-14% 60 LatLon(22°22′23.65″S, 007°55′54.49″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 797 intersecant2: 9.761e-14% 57 LatLon(10°39′24.95″N, 034°45′48.18″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 798 intersecant2: 1.813e-13% 57 LatLon(25°11′09.14″S, 005°10′35.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 799 intersecant2: 1.394e-14% 61 LatLon(10°14′21.91″S, 021°00′17.05″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 800 intersecant2: 4.183e-14% 61 LatLon(20°55′17.31″S, 010°40′21.43″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 801 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (LatLon(15°00′00.0″N, 045°00′00.0″E)), exact (False), start (LatLon(45°00′00.0″S, 015°00′00.0″W)) or wrap (False): too distant (3.69e+06) plumb to (16°56′45.9″S, 020°17′02.98″E)
    test 802 intersecant2: 1.255e-13% 53 LatLon(16°17′43.01″N, 033°21′59.43″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 803 intersecant2: 5.577e-14% 53 LatLon(12°31′06.36″S, 019°35′10.98″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 804 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (123.99677263676239), exact (False), start (LatLon(12°31′06.36″S, 019°35′10.98″E)) or wrap (False): no convergence (32768), tolerance (1.49012e-08) plumb to (14°10′35.1″S, 017°41′02.85″W)
    test 805 intersecant2: 1.394e-14% 65 LatLon(22°28′49.89″S, 017°41′51.43″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 806 intersecant2: 1.394e-14% 65 LatLon(25°00′31.67″S, 008°20′35.63″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 807 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (186.67438087786655), exact (False), start (LatLon(25°00′31.67″S, 008°20′35.63″W)) or wrap (False): too distant (1.67e+07) plumb to (02°18′03.44″S, 154°52′06.38″W)
    test 808 intersecant2: 5.577e-14% 52 LatLon(10°51′58.73″S, 020°38′32.46″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 809 intersecant2: 9.761e-14% 52 LatLon(10°33′06.4″N, 024°46′44.53″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 810 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (81.71468405032293), exact (False), start (LatLon(10°33′06.4″N, 024°46′44.53″E)) or wrap (False): no convergence (524288), tolerance (1.49012e-08) plumb to (11°19′07.76″S, 005°09′30.47″W)

    testLatLon(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 811 isEllipsoidal: True
    test 812 isSpherical: False
    test 813 lat/lonDMS: 52.20472°N, 000.14056°E
    test 814 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 815 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 816 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 817 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 818 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 819 isequalTo: True
    test 820 isequalTo: True
    test 821 latlon2: 52.20472, 0.14056
    test 822 latlon2: 52.2047, 0.1406
    test 823 latlon2: 52.205, 0.141
    test 824 latlon2: 52.2, 0.14
    test 825 latlon2: 52.2, 0.1
    test 826 latlon2: 52.0, 0.0
    test 827 chordTo: 12029263.15
    test 828 chordTo: 12029049.69
    test 829 initialBearingTo: 156.1106
    test 830 initialBearingTo: 65.9335
    test 831 initialBearingTo: 0.0
    test 832 initialBearingTo: 180.0
    test 833 finalBearingTo: 157.8345
    test 834 finalBearingTo: 93.9034
    test 835 bearingTo2: 156.1106, 157.8345
    test 836 ispolar: True
    test 837 copy: True
    test 838 __eq__: True
    test 839 __ne__: False
    test 840 equirectangularTo: 404329.56
    test 841 distanceTo: 404607.805988
    test 842 distanceTo: 404607.805988
    test 843 distanceTo: 3981601
    test 844 antipodal: False
    test 845 distanceTo dateline: 19959679.267
    test 846 distanceTo unrolled: 19959679.267
    test 847 antipodal: False
    test 848 distanceTo dateline: 9513998
    test 849 distanceTo unrolled: 9513998
    test 850 distanceTo: 18012714.66
    test 851 distanceTo: 20003931.46
    test 852 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 853 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 854 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 855 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 856 intermediateTo: 51.372275°N, 000.707253°E
    test 857 intermediateTo: True
    test 858 intermediateTo: 404607.806
    test 859 intermediateTo+5: 35.139582°N, 008.994368°E
    test 860 intermediateTo+5: 5.000
    test 861 intermediateTo-4: 64.894124°N, 013.705689°W
    test 862 intermediateTo-4: 4.000
    test 863 intermediateTo-h: 125.000
    test 864 midpointTo: 50.536583°N, 001.274507°E
    test 865 destination: 51.513526°N, 000.098038°W
    test 866 destination: 51°30′49″N, 000°05′53″W
    test 867 destination: 33°57′N, 118°24′W
    test 868 destination: 33.950367°N, 118.399012°W
    test 869 destination: 0.592546N, 2.066453W
    test 870 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 871 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 872 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 873 chordTo: 125203.963
    test 874 cosineAndoyerLambertTo: 125205.962
    test 875 cosineAndoyerLambertTo: 125205.962
    test 876 cosineForsyheAndoyerLambertTo: 125205.965
    test 877 cosineForsyheAndoyerLambertTo: 125205.965
    test 878 cosineLawTo: 124801.098
    test 879 cosineLawTo: 124801.098
    test 880 equirectangularTo: 124804.754
    test 881 equirectangularTo: 124804.754
    test 882 euclideanTo: 130015.089
    test 883 euclideanTo: 130015.089
    test 884 flatLocalTo: 125209.633
    test 885 flatLocalTo: 125209.633
    test 886 flatPolarTo: 133663.257
    test 887 flatPolarTo: 133663.257
    test 888 hartzell: 53.3206°N, 001.7297°W
    test 889 hartzell: 53.349541°N, 001.7297°W
    test 890 height4: 0.0
    test 891 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 892 height4: 53°19′14.2″N, 001°43′46.9″W
    test 893 height4: 53°19′14.2″N, 001°43′46.9″W
    test 894 haversineTo: 124801.098
    test 895 haversineTo: 124801.098
    test 896 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 897 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 898 thomasTo: 125206.188
    test 899 thomasTo: 125206.188
    test 900 vincentysTo: 124801.098
    test 901 vincentysTo: 124801.098
    test 902 isclockwise: False
    test 903 isclockwise*: False
    test 904 isclockwise: True
    test 905 isclockwise*: True
    test 906 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 907 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 908 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 909 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 910 isconvex: False
    test 911 isconvex*: False
    test 912 isconvex: True
    test 913 isconvex*: True
    test 914 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 915 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 916 isenclosedBy1: True
    test 917 isenclosedBy1*: True
    test 918 isenclosedBy2: False
    test 919 isenclosedBy2*: False
    test 920 isenclosedBy3: False
    test 921 isenclosedBy3*: False
    test 922 isenclosedBy4: False
    test 923 isenclosedBy4*: False
    test 924 isenclosedBy5: False
    test 925 isenclosedBy5*: False
    test 926 isenclosedBy6: True
    test 927 isenclosedBy6*: True
    test 928 isenclosedBy7: True
    test 929 isenclosedBy7*: True
    test 930 isenclosedBy-CCW: True
    test 931 isenclosedBy-CW : True
    test 932 isenclosedBy-CCW: True
    test 933 initialBearingTo: 102.392291
    test 934 compassAngleTo: 100.017
    test 935 compassAngleTo: 105.599
    test 936 initialBearingTo: 288.676039
    test 937 compassAngleTo: 280.017
    test 938 compassAngleTo: 285.599
    test 939 equirectangularTo: 592.185
    test 940 distanceTo: 593.571
    test 941 bearingTo: 0.0
    test 942 compassAngleTo: 0.0
    test 943 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 944 compassAngleTo: 45.0
    test 945 bearingTo: 90.0
    test 946 compassAngleTo: 90.0
    test 947 bearingTo: 180.0
    test 948 compassAngleTo: 180.0
    test 949 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 950 compassAngleTo: 225.0
    test 951 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 952 compassAngleTo: 315.0
    test 953 bearingTo: 270.0
    test 954 compassAngleTo: 270.0
    test 955 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 956 compassAngleTo: 359.4
    test 957 latlon2: (53.0, 1.0)
    test 958 philam2: (0.93, 0.02)
    test 959 bearingTo: 31
    test 960 compassAngleTo: 31
    test 961 compassAngleTo: 45

    test 962 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 963 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 964 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 965 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 966 isequalTo: <class 'bool'>
    test 967 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 968 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 969 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 970 xyz3: <class 'tuple'>
    test 971 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 972 compassAngleTo: <class 'float'>
    test 973 cosineLawTo: <class 'float'>
    test 974 euclideanTo: <class 'float'>
    test 975 flatLocalTo: <class 'float'>
    test 976 flatPolarTo: <class 'float'>
    test 977 haversineTo: <class 'float'>
    test 978 hubenyTo: <class 'float'>
    test 979 vincentysTo: <class 'float'>
    test 980 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 981 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 982 toVector3d: (0.61823, 0.0, 0.786)

    test 983 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 984 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 985 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 986 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 987 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 988 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 989 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 990 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 991 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 992 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 993 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 994 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 995 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 996 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 997 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 998 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 999 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 1000 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1001 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1002 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (130): No module named 'numpy': required by vector2d._numpy

    test 1003 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (152): No module named 'numpy': required by vector2d._numpy

    test 1004 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 1005 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1006 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1007 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1008 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 1009 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1010 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1011 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1012 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1013 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1014 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1015 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
./pygeodesy/ellipsoidalKarney.py:266: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  a = _polygon(datum.ellipsoid.geodesic, points, True, False, wrap)
    test 1016 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 1, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1017 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1018 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 1019 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1020 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1021 EquidistantKarney: 00.0°S, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1022 EquidistantKarney: 1.63715 (% of radius)
    test 1023 EquidistantKarney: 22.657°N, 000.0°W, 22.657°S, 000.0°E  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1024 EquidistantKarney: 1.30663 (% of radius)
    test 1025 EquidistantKarney: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1026 EquidistantKarney: 1.31396 (% of radius)
    test 1027 EquidistantKarney: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1028 EquidistantKarney: 1.83268 (% of radius)
    test 1029 EquidistantKarney 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1030 EquidistantKarney 5: 4.18779e-16 (% of radius)
    test 1031 EquidistantKarney 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1032 EquidistantKarney 10: 4.18779e-16 (% of radius)
    test 1033 EquidistantKarney: 09.51552°S, 040.886378°E Random +/- 45
    test 1034 EquidistantKarney: 09.51552°S, 040.886378°E, 50.900592°S, 079.900852°W  d 2.42291e-09 meter (iteration 3)
    test 1035 EquidistantKarney: 09.51552°S, 040.886378°E, 07.981036°S, 035.908217°W  d 7.98311e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalKarney, 24.08.13, datum='WGS84')
    test 1036 distanceTo: 866455.4329
    test 1037 coincident: 0.0
    test 1038 toDatum: OSGB36
    test 1039 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1040 isEllipsoidal: True
    test 1041 copy: True
    test 1042 isEllipsoidal: True
    test 1043 isSpherical: False
    test 1044 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 24.08.13, datum='WGS84')
    test 1045 coincident: 0.0
    test 1046 coincident: 0.0, 0.0, 0.0
    test 1047 destination: 37.6528°S, 143.9265°E
    test 1048 destination: True
    test 1049 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1050 destination2: True
    test 1051 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1052 distanceTo: 969954.166
    test 1053 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1054 distanceTo2: 972708.16174, 11.22502
    test 1055 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1056 destination: 58.64402°N, 003.07009°W
    test 1057 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1058 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1059 distanceTo: 404607.806
    test 1060 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1061 distanceTo2: 402574.597287, 157.726344
    test 1062 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1063 destination: 48.857°N, 002.351°E
    test 1064 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1065 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1066 distanceTo: 54973.295
    test 1067 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1068 distanceTo2: 54903.41209, 232.9209
    test 1069 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1070 destination: 37.6528°N, 143.9265°E
    test 1071 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1072 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1073 distanceToMP: 298396.057
    test 1074 distanceToSM: 185.415
    test 1075 distanceToMP: 111319.491
    test 1076 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1077 distanceToKW: 222638.982
    test 1078 distanceToKW: 111319.491
    test 1079 distanceTo3: 54972.271
    test 1080 distanceTo3: 306°52′05.37″
    test 1081 distanceTo3: 307°10′25.07″
    test 1082 distanceTo2: 54902.390
    test 1083 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 24.08.13, datum='WGS84')
    test 1084 distanceTo/antipodal (None): 19936288.579
    test 1085 distanceTo/VincentyError (None): 19944127.421
    test 1086 initialBearingTo/VincentyError (None): 15.556883
    test 1087 finalBearingTo/VincentyError (None): 164.442514
    test 1088 distanceTo/equatorial (None): 20003931.46
    test 1089 initialBearingTo/equatorial (None): 0.0
    test 1090 distanceTo/coincident (None): 111319.491
    test 1091 distanceTo/meridional (None): 10001965.729
    test 1092 initialBearingTo/meridional (None): 180.0
    test 1093 distanceTo/coincident (None): 0.0
    test 1094 initialBearingTo/coincident (None): 180.0
    test 1095 finalBearingTo/coincident (None): 180.0
    test 1096 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1097 distanceTo/anti-meridian (None): 10825924.1
    test 1098 distanceTo/quadrants (None): 4015703.02
    test 1099 distanceTo/quadrants (None): 4015703.02
    test 1100 distanceTo/quadrants (None): 4015703.02
    test 1101 distanceTo/quadrants (None): 4015703.02
    test 1102 distanceTo/quadrants (None): 4015703.02
    test 1103 distanceTo/quadrants (None): 4015703.02
    test 1104 distanceTo/quadrants (None): 4015703.02
    test 1105 distanceTo/quadrants (None): 4015703.02
    test 1106 distanceTo/quadrants (None): 4015703.02
    test 1107 distanceTo/quadrants (None): 4015703.02
    test 1108 distanceTo/quadrants (None): 4015703.02
    test 1109 distanceTo/quadrants (None): 4015703.02
    test 1110 distanceTo/quadrants (None): 4015703.02
    test 1111 distanceTo/quadrants (None): 4015703.02
    test 1112 distanceTo/quadrants (None): 4015703.02
    test 1113 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalKarney, 24.08.13, datum='NAD83')
    test 1114 distanceTo: 866455.4329
    test 1115 coincident: 0.0
    test 1116 toDatum: OSGB36
    test 1117 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1118 isEllipsoidal: True
    test 1119 copy: True
    test 1120 isEllipsoidal: True
    test 1121 isSpherical: False
    test 1122 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 24.08.13, datum='NAD83')
    test 1123 coincident: 0.0
    test 1124 coincident: 0.0, 0.0, 0.0
    test 1125 destination: 37.6528°S, 143.9265°E
    test 1126 destination: True
    test 1127 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1128 destination2: True
    test 1129 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1130 distanceTo: 969954.166
    test 1131 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1132 distanceTo2: 972708.16174, 11.22502
    test 1133 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1134 destination: 58.64402°N, 003.07009°W
    test 1135 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1136 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1137 distanceTo: 404607.806
    test 1138 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1139 distanceTo2: 402574.597287, 157.726344
    test 1140 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1141 destination: 48.857°N, 002.351°E
    test 1142 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1143 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1144 distanceTo: 54973.295
    test 1145 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1146 distanceTo2: 54903.41209, 232.9209
    test 1147 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1148 destination: 37.6528°N, 143.9265°E
    test 1149 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1150 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1151 distanceToMP: 298396.057
    test 1152 distanceToSM: 185.415
    test 1153 distanceToMP: 111319.491
    test 1154 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1155 distanceToKW: 222638.982
    test 1156 distanceToKW: 111319.491
    test 1157 distanceTo3: 54972.271
    test 1158 distanceTo3: 306°52′05.37″
    test 1159 distanceTo3: 307°10′25.07″
    test 1160 distanceTo2: 54902.390
    test 1161 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 24.08.13, datum='NAD83')
    test 1162 distanceTo/antipodal (None): 19936288.579
    test 1163 distanceTo/VincentyError (None): 19944127.421
    test 1164 initialBearingTo/VincentyError (None): 15.556883
    test 1165 finalBearingTo/VincentyError (None): 164.442514
    test 1166 distanceTo/equatorial (None): 20003931.46
    test 1167 initialBearingTo/equatorial (None): 0.0
    test 1168 distanceTo/coincident (None): 111319.491
    test 1169 distanceTo/meridional (None): 10001965.729
    test 1170 initialBearingTo/meridional (None): 180.0
    test 1171 distanceTo/coincident (None): 0.0
    test 1172 initialBearingTo/coincident (None): 180.0
    test 1173 finalBearingTo/coincident (None): 180.0
    test 1174 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1175 distanceTo/anti-meridian (None): 10825924.1
    test 1176 distanceTo/quadrants (None): 4015703.02
    test 1177 distanceTo/quadrants (None): 4015703.02
    test 1178 distanceTo/quadrants (None): 4015703.02
    test 1179 distanceTo/quadrants (None): 4015703.02
    test 1180 distanceTo/quadrants (None): 4015703.02
    test 1181 distanceTo/quadrants (None): 4015703.02
    test 1182 distanceTo/quadrants (None): 4015703.02
    test 1183 distanceTo/quadrants (None): 4015703.02
    test 1184 distanceTo/quadrants (None): 4015703.02
    test 1185 distanceTo/quadrants (None): 4015703.02
    test 1186 distanceTo/quadrants (None): 4015703.02
    test 1187 distanceTo/quadrants (None): 4015703.02
    test 1188 distanceTo/quadrants (None): 4015703.02
    test 1189 distanceTo/quadrants (None): 4015703.02
    test 1190 distanceTo/quadrants (None): 4015703.02
    test 1191 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 1192 .lat1: -41.320
    test 1193 .lon1: 174.810
    test 1194 .azi1: 161.067669986160
    test 1195 .lat2: 40.960
    test 1196 .lon2: -5.500
    test 1197 .azi2: 18.825195123247
    test 1198 .s12: 19959679.267353821546
    test 1199 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1200 destination2: 40.96, -5.5, 18.825195123247
    test 1201 areaOf: 1.366270368e+13
    test 1202 perimeterOf: 1.683106789e+07
    test 1203 isclockwise: False
    test 1204 isclockwise: True
    test 1205 areaCO: 2.69154549884e+11
    test 1206 isclockwise: True
    test 1207 perimeterCO: 2099854.381923

    testEllipsoidal(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1208 isEllipsoidal: True
    test 1209 isSpherical: False
    test 1210 isEllipsoidal: True
    test 1211 isSpherical: False
    test 1212 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 1213 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 1214 toDatum: 51.4778°N, 000.0016°W
    test 1215 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1216 __matmul__: 51.477284°N, 000.00002°E, -45.90m
    test 1217 parse: 51.477284°N, 000.00002°E, -45.91m
    test 1218 reframe: None
    test 1219 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 1220 toCss: -111.158797 5705242.333679
    test 1221 toCss: -111.158797 5705242.333679
    test 1222 toEcef: 3980581.21, -111.159, 4966824.522
    test 1223 toEtm: 30 N 916396 5720041
    test 1224 toEtm: 30 N 916396 5720041
    test 1225 toLcc: 5639901 4612638
    test 1226 toLcc: 5639901 4612638
    test 1227 toOsgr: TQ 38876 77320
    test 1228 toOsgr: TQ 38876 77320
    test 1229 toOsgrTM: TQ 38876 77320
    test 1230 toUtmUps: 30 N 708207 5707224
    test 1231 toUtm: 30 N 708207 5707224
    test 1232 toUtm: 30 N 708207 5707224
    test 1233 toWm: -178.111 6672799.209
    test 1234 toWm: -178.111 6672799.209
    test 1235 elevation2: None
    test 1236 geoidHeight2: None
    test 1237 toUtmUps: 30 N 708207 5707224
    test 1238 toUtm: 30 N 708207 5707224
    test 1239 toUtm: 30 N 708207 5707224
    test 1240 toUtmUps: 00 N 2000000 1333272
    test 1241 toUps: 00 N 2000000 1333272
    test 1242 toUps: 00 N 0 -666728
    test 1243 toUps: 00 N 2000000 1555732
    test 1244 toUtm: 31 N 459200 9217519
    test 1245 nearestOn: 32.81°N, 031.42°E
    test 1246 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 1247 dop: 51.998889°N, 004.373333°E, +134.64m
    test 1248 distance: 3802238.5049886242  FAILED, KNOWN, expected 3802238.504989
    test 1249 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 1250 iteration: 0
    test 1251 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 1252 iteration: 1
    test 1253 nearestOn: 54.928536°N, 021.934843°W
    test 1254 intersecant2: 1.394e-14% 60 LatLon(03°18′54.69″S, 023°52′08.48″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1255 intersecant2: 2.789e-14% 60 LatLon(22°22′23.65″S, 007°55′54.49″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1256 intersecant2: 1.813e-13% 57 LatLon(10°39′24.95″N, 034°45′48.18″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1257 intersecant2: 1.813e-13% 57 LatLon(25°11′09.14″S, 005°10′35.44″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1258 intersecant2: 1.394e-14% 61 LatLon(10°14′21.91″S, 021°00′17.05″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1259 intersecant2: 4.183e-14% 61 LatLon(20°55′17.31″S, 010°40′21.43″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1260 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (LatLon(15°00′00.0″N, 045°00′00.0″E)), exact (False), start (LatLon(45°00′00.0″S, 015°00′00.0″W)) or wrap (False): too distant (3.69e+06) plumb to (16°56′45.9″S, 020°17′02.98″E)
    test 1261 intersecant2: 2.789e-14% 69 LatLon(30°17′15.17″N, 012°21′25.11″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1262 intersecant2: 9.761e-14% 69 LatLon(33°49′46.23″N, 004°29′34.53″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1263 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (19.18839346064206), exact (False), start (LatLon(33°49′46.23″N, 004°29′34.53″E)) or wrap (False): too distant (1.42e+07) plumb to (28°00′56.4″S, 135°26′40.47″W)
    test 1264 intersecant2: 1.255e-13% 62 LatLon(08°21′21.6″S, 031°58′46.99″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1265 intersecant2: 1.115e-13% 62 LatLon(24°41′50.39″S, 000°31′46.37″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1266 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (168.92796338466022), exact (False), start (LatLon(24°41′50.39″S, 000°31′46.37″E)) or wrap (False): too distant (9.24e+06) plumb to (47°01′11.51″S, 079°18′12.46″W)
    test 1267 intersecant2: 9.761e-14% 53 LatLon(27°13′42.82″N, 016°17′26.73″E)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1268 intersecant2: 2.231e-13% 53 LatLon(25°00′18.0″S, 001°37′16.89″W)  FAILED, KNOWN, expected 2.0e-10% ...
    test 1269 intersecant2: center (LatLon(05°00′00.0″N, 005°00′00.0″W)), circle (3339584), end (173.25468050546078), exact (False), start (LatLon(25°00′18.0″S, 001°37′16.89″W)) or wrap (False): too distant (4.68e+06) plumb to (01°01′54.15″N, 036°55′05.49″E)

    testLatLon(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1270 isEllipsoidal: True
    test 1271 isSpherical: False
    test 1272 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1273 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1274 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1275 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1276 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1277 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1278 isequalTo: True
    test 1279 isequalTo: True
    test 1280 latlon2: 52.20472, 0.14056
    test 1281 latlon2: 52.2047, 0.1406
    test 1282 latlon2: 52.205, 0.141
    test 1283 latlon2: 52.2, 0.14
    test 1284 latlon2: 52.2, 0.1
    test 1285 latlon2: 52.0, 0.0
    test 1286 chordTo: 12029263.15
    test 1287 chordTo: 12029049.69
    test 1288 initialBearingTo: 156.1106
    test 1289 initialBearingTo: 65.9335
    test 1290 initialBearingTo: 0.0
    test 1291 initialBearingTo: 180.0
    test 1292 finalBearingTo: 157.8345
    test 1293 finalBearingTo: 93.9034
    test 1294 bearingTo2: 156.1106, 157.8345
    test 1295 ispolar: True
    test 1296 copy: True
    test 1297 __eq__: True
    test 1298 __ne__: False
    test 1299 equirectangularTo: 404329.56
    test 1300 distanceTo: 404607.805988
    test 1301 distanceTo: 404607.805988
    test 1302 distanceTo: 3981601
    test 1303 antipodal: False
    test 1304 distanceTo dateline: 19959679.267
    test 1305 distanceTo unrolled: 19959679.267
    test 1306 antipodal: False
    test 1307 distanceTo dateline: 9513998
    test 1308 distanceTo unrolled: 9513998
    test 1309 distanceTo: 18012714.66
    test 1310 distanceTo: 20003931.46
    test 1311 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1312 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1313 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1314 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1315 intermediateTo: 51.372275°N, 000.707253°E
    test 1316 intermediateTo: True
    test 1317 intermediateTo: 404607.806
    test 1318 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1319 intermediateTo+5: 5.000
    test 1320 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1321 intermediateTo-4: 4.000
    test 1322 intermediateTo-h: 125.000
    test 1323 midpointTo: 50.536583°N, 001.274507°E
    test 1324 destination: 51.513526°N, 000.098038°W
    test 1325 destination: 51°30′49″N, 000°05′53″W
    test 1326 destination: 33°57′N, 118°24′W
    test 1327 destination: 33.950367°N, 118.399012°W
    test 1328 destination: 0.592546N, 2.066453W
    test 1329 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1330 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1331 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1332 chordTo: 125203.963
    test 1333 cosineAndoyerLambertTo: 125205.962
    test 1334 cosineAndoyerLambertTo: 125205.962
    test 1335 cosineForsyheAndoyerLambertTo: 125205.965
    test 1336 cosineForsyheAndoyerLambertTo: 125205.965
    test 1337 cosineLawTo: 124801.098
    test 1338 cosineLawTo: 124801.098
    test 1339 equirectangularTo: 124804.754
    test 1340 equirectangularTo: 124804.754
    test 1341 euclideanTo: 130015.089
    test 1342 euclideanTo: 130015.089
    test 1343 flatLocalTo: 125209.633
    test 1344 flatLocalTo: 125209.633
    test 1345 flatPolarTo: 133663.257
    test 1346 flatPolarTo: 133663.257
    test 1347 hartzell: 53.3206°N, 001.7297°W
    test 1348 hartzell: 53.349541°N, 001.7297°W
    test 1349 height4: 0.0
    test 1350 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1351 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1352 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1353 haversineTo: 124801.098
    test 1354 haversineTo: 124801.098
    test 1355 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1356 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1357 thomasTo: 125206.188
    test 1358 thomasTo: 125206.188
    test 1359 vincentysTo: 124801.098
    test 1360 vincentysTo: 124801.098
    test 1361 isclockwise: False
    test 1362 isclockwise*: False
    test 1363 isclockwise: True
    test 1364 isclockwise*: True
    test 1365 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1366 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1367 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1368 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1369 isconvex: False
    test 1370 isconvex*: False
    test 1371 isconvex: True
    test 1372 isconvex*: True
    test 1373 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1374 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1375 isenclosedBy1: True
    test 1376 isenclosedBy1*: True
    test 1377 isenclosedBy2: False
    test 1378 isenclosedBy2*: False
    test 1379 isenclosedBy3: False
    test 1380 isenclosedBy3*: False
    test 1381 isenclosedBy4: False
    test 1382 isenclosedBy4*: False
    test 1383 isenclosedBy5: False
    test 1384 isenclosedBy5*: False
    test 1385 isenclosedBy6: True
    test 1386 isenclosedBy6*: True
    test 1387 isenclosedBy7: True
    test 1388 isenclosedBy7*: True
    test 1389 isenclosedBy-CCW: True
    test 1390 isenclosedBy-CW : True
    test 1391 isenclosedBy-CCW: True
    test 1392 initialBearingTo: 102.392291
    test 1393 compassAngleTo: 100.017
    test 1394 compassAngleTo: 105.599
    test 1395 initialBearingTo: 288.676039
    test 1396 compassAngleTo: 280.017
    test 1397 compassAngleTo: 285.599
    test 1398 equirectangularTo: 592.185
    test 1399 distanceTo: 593.571
    test 1400 bearingTo: 0.0
    test 1401 compassAngleTo: 0.0
    test 1402 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1403 compassAngleTo: 45.0
    test 1404 bearingTo: 90.0
    test 1405 compassAngleTo: 90.0
    test 1406 bearingTo: 180.0
    test 1407 compassAngleTo: 180.0
    test 1408 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1409 compassAngleTo: 225.0
    test 1410 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1411 compassAngleTo: 315.0
    test 1412 bearingTo: 270.0
    test 1413 compassAngleTo: 270.0
    test 1414 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 1415 compassAngleTo: 359.4
    test 1416 latlon2: (53.0, 1.0)
    test 1417 philam2: (0.93, 0.02)
    test 1418 bearingTo: 31
    test 1419 compassAngleTo: 31
    test 1420 compassAngleTo: 45

    test 1421 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1422 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1423 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1424 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1425 isequalTo: <class 'bool'>
    test 1426 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1427 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1428 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1429 xyz3: <class 'tuple'>
    test 1430 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1431 compassAngleTo: <class 'float'>
    test 1432 cosineLawTo: <class 'float'>
    test 1433 euclideanTo: <class 'float'>
    test 1434 flatLocalTo: <class 'float'>
    test 1435 flatPolarTo: <class 'float'>
    test 1436 haversineTo: <class 'float'>
    test 1437 hubenyTo: <class 'float'>
    test 1438 vincentysTo: <class 'float'>
    test 1439 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 1440 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 1441 toVector3d: (0.61823, 0.0, 0.786)

    test 1442 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 1443 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 1444 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 1445 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 1446 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1447 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 1448 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 1449 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1450 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1451 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 1452 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 1453 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 1454 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1455 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1456 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 1457 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 1458 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 1459 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1460 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1461 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (179): No module named 'numpy': required by vector2d._numpy

    test 1462 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (201): No module named 'numpy': required by vector2d._numpy

    test 1463 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1464 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1465 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1466 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1467 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1468 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1469 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1470 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1471 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1472 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1473 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1474 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1475 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 1, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1476 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1477 #58: <class 'pygeodesy.errors.IntersectionError'>
    test 1478 intersection3: (LatLon(54°43′01.31″N, 014°33′49.88″W), 0, 0)
    test 1479 intersection3: 54.71703°N, 014.563856°W

    testIntersections2(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1480 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1481 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1482 EquidistantExact: 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1483 EquidistantExact: 1.63715 (% of radius)
    test 1484 EquidistantExact: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1485 EquidistantExact: 1.30663 (% of radius)
    test 1486 EquidistantExact: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1487 EquidistantExact: 1.31396 (% of radius)
    test 1488 EquidistantExact: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1489 EquidistantExact: 1.83268 (% of radius)
    test 1490 EquidistantExact 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1491 EquidistantExact 5: 3.9784e-15 (% of radius)
    test 1492 EquidistantExact 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1493 EquidistantExact 10: 2.09389e-15 (% of radius)
    test 1494 EquidistantExact: 37.284839°S, 016.893728°W Random +/- 45
    test 1495 EquidistantExact: 37.284839°S, 016.893728°W, 02.584328°S, 038.053957°E  d 1.2602e-09 meter (iteration 3)
    test 1496 EquidistantExact: 37.284839°S, 016.893728°W, 36.528791°S, 030.923084°W  d 6.0275e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalExact, 24.11.06, datum='WGS84')
    test 1497 distanceTo: 866455.4329
    test 1498 coincident: 0.0
    test 1499 toDatum: OSGB36
    test 1500 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1501 isEllipsoidal: True
    test 1502 copy: True
    test 1503 isEllipsoidal: True
    test 1504 isSpherical: False
    test 1505 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 24.11.06, datum='WGS84')
    test 1506 coincident: 0.0
    test 1507 coincident: 0.0, 0.0, 0.0
    test 1508 destination: 37.6528°S, 143.9265°E
    test 1509 destination: True
    test 1510 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1511 destination2: True
    test 1512 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1513 distanceTo: 969954.166
    test 1514 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1515 distanceTo2: 972708.16174, 11.22502
    test 1516 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1517 destination: 58.64402°N, 003.07009°W
    test 1518 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1519 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1520 distanceTo: 404607.806
    test 1521 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1522 distanceTo2: 402574.597287, 157.726344
    test 1523 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1524 destination: 48.857°N, 002.351°E
    test 1525 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1526 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1527 distanceTo: 54973.295
    test 1528 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1529 distanceTo2: 54903.41209, 232.9209
    test 1530 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1531 destination: 37.6528°N, 143.9265°E
    test 1532 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1533 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1534 distanceToMP: 298396.057
    test 1535 distanceToSM: 185.415
    test 1536 distanceToMP: 111319.491
    test 1537 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1538 distanceToKW: 222638.982
    test 1539 distanceToKW: 111319.491
    test 1540 distanceTo3: 54972.271
    test 1541 distanceTo3: 306°52′05.37″
    test 1542 distanceTo3: 307°10′25.07″
    test 1543 distanceTo2: 54902.390
    test 1544 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 24.11.06, datum='WGS84')
    test 1545 distanceTo/antipodal (None): 19936288.579
    test 1546 distanceTo/VincentyError (None): 19944127.421
    test 1547 initialBearingTo/VincentyError (None): 15.556883
    test 1548 finalBearingTo/VincentyError (None): 164.442514
    test 1549 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 1550 initialBearingTo/equatorial (None): 0.0
    test 1551 distanceTo/coincident (None): 111319.491
    test 1552 distanceTo/meridional (None): 9999551.606
    test 1553 initialBearingTo/meridional (None): 180.0
    test 1554 distanceTo/coincident (None): 0.0
    test 1555 initialBearingTo/coincident (None): 180.0
    test 1556 finalBearingTo/coincident (None): 180.0
    test 1557 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1558 distanceTo/anti-meridian (None): 10825924.1
    test 1559 distanceTo/quadrants (None): 4015703.02
    test 1560 distanceTo/quadrants (None): 4015703.02
    test 1561 distanceTo/quadrants (None): 4015703.02
    test 1562 distanceTo/quadrants (None): 4015703.02
    test 1563 distanceTo/quadrants (None): 4015703.02
    test 1564 distanceTo/quadrants (None): 4015703.02
    test 1565 distanceTo/quadrants (None): 4015703.02
    test 1566 distanceTo/quadrants (None): 4015703.02
    test 1567 distanceTo/quadrants (None): 4015703.02
    test 1568 distanceTo/quadrants (None): 4015703.02
    test 1569 distanceTo/quadrants (None): 4015703.02
    test 1570 distanceTo/quadrants (None): 4015703.02
    test 1571 distanceTo/quadrants (None): 4015703.02
    test 1572 distanceTo/quadrants (None): 4015703.02
    test 1573 distanceTo/quadrants (None): 4015703.02
    test 1574 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalExact, 24.11.06, datum='NAD83')
    test 1575 distanceTo: 866455.4329
    test 1576 coincident: 0.0
    test 1577 toDatum: OSGB36
    test 1578 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1579 isEllipsoidal: True
    test 1580 copy: True
    test 1581 isEllipsoidal: True
    test 1582 isSpherical: False
    test 1583 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 24.11.06, datum='NAD83')
    test 1584 coincident: 0.0
    test 1585 coincident: 0.0, 0.0, 0.0
    test 1586 destination: 37.6528°S, 143.9265°E
    test 1587 destination: True
    test 1588 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1589 destination2: True
    test 1590 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1591 distanceTo: 969954.166
    test 1592 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1593 distanceTo2: 972708.16174, 11.22502
    test 1594 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1595 destination: 58.64402°N, 003.07009°W
    test 1596 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1597 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1598 distanceTo: 404607.806
    test 1599 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1600 distanceTo2: 402574.597287, 157.726344
    test 1601 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1602 destination: 48.857°N, 002.351°E
    test 1603 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1604 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1605 distanceTo: 54973.295
    test 1606 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1607 distanceTo2: 54903.41209, 232.9209
    test 1608 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1609 destination: 37.6528°N, 143.9265°E
    test 1610 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1611 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1612 distanceToMP: 298396.057
    test 1613 distanceToSM: 185.415
    test 1614 distanceToMP: 111319.491
    test 1615 distanceToMP: 110574.389  FAILED, KNOWN, expected 110574.361
    test 1616 distanceToKW: 222638.982
    test 1617 distanceToKW: 111319.491
    test 1618 distanceTo3: 54972.271
    test 1619 distanceTo3: 306°52′05.37″
    test 1620 distanceTo3: 307°10′25.07″
    test 1621 distanceTo2: 54902.390
    test 1622 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 24.11.06, datum='NAD83')
    test 1623 distanceTo/antipodal (None): 19936288.579
    test 1624 distanceTo/VincentyError (None): 19944127.421
    test 1625 initialBearingTo/VincentyError (None): 15.556883
    test 1626 finalBearingTo/VincentyError (None): 164.442514
    test 1627 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 1628 initialBearingTo/equatorial (None): 0.0
    test 1629 distanceTo/coincident (None): 111319.491
    test 1630 distanceTo/meridional (None): 9999551.606
    test 1631 initialBearingTo/meridional (None): 180.0
    test 1632 distanceTo/coincident (None): 0.0
    test 1633 initialBearingTo/coincident (None): 180.0
    test 1634 finalBearingTo/coincident (None): 180.0
    test 1635 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1636 distanceTo/anti-meridian (None): 10825924.1
    test 1637 distanceTo/quadrants (None): 4015703.02
    test 1638 distanceTo/quadrants (None): 4015703.02
    test 1639 distanceTo/quadrants (None): 4015703.02
    test 1640 distanceTo/quadrants (None): 4015703.02
    test 1641 distanceTo/quadrants (None): 4015703.02
    test 1642 distanceTo/quadrants (None): 4015703.02
    test 1643 distanceTo/quadrants (None): 4015703.02
    test 1644 distanceTo/quadrants (None): 4015703.02
    test 1645 distanceTo/quadrants (None): 4015703.02
    test 1646 distanceTo/quadrants (None): 4015703.02
    test 1647 distanceTo/quadrants (None): 4015703.02
    test 1648 distanceTo/quadrants (None): 4015703.02
    test 1649 distanceTo/quadrants (None): 4015703.02
    test 1650 distanceTo/quadrants (None): 4015703.02
    test 1651 distanceTo/quadrants (None): 4015703.02
    test 1652 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalExact, 24.11.06)
    test 1653 .lat1: -41.320
    test 1654 .lon1: 174.810
    test 1655 .azi1: 161.067669986160
    test 1656 .lat2: 40.960
    test 1657 .lon2: -5.500
    test 1658 .azi2: 18.825195123247
    test 1659 .s12: 19959679.267353821546
    test 1660 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1661 destination2: 40.96, -5.5, 18.825195123247
    test 1662 areaOf: 1.366270368e+13
    test 1663 perimeterOf: 1.683089136e+07
    test 1664 isclockwise: False
    test 1665 isclockwise: True
    test 1666 areaCO: 2.69154549884e+11
    test 1667 isclockwise: True
    test 1668 perimeterCO: 2099102.485159  FAILED, KNOWN, expected 2098430.887891

    862 of 1668 testEllipsoidal.py tests (51.7%) FAILED, incl. 112 KNOWN plus 750 DeprecationWarnings, 201 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 6:56.587

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEllipsoidalGeodTest.py
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalKarney by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15

    testing testEllipsoidalGeodTest.py 23.12.18 (module pygeodesy.ellipsoidalKarney 24.08.13) isLazy=3
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 4 line 1 lat2: -48.164270779098
    test 5 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 6 line 1 azi2: 175.334308316285
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
# lazily imported pygeodesy.elliptic by gxline.py line 284
    test 7 line 1 lat2: -48.164270779098
    test 8 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 9 line 1 azi2: 175.334308316285
    test 10 line 2 lat: -23.186513
    test 11 line 2 lon: 68.567247
    test 12 line 2 fb: 154.287114
    test 13 line 2 lat2: -23.186512533703
    test 14 line 2 lon2: 68.567247430960
    test 15 line 2 azi2: 154.287114123872
    test 16 line 2 lat2: -23.186512533703
    test 17 line 2 lon2: 68.567247430960
    test 18 line 2 azi2: 154.287114123872
    test 19 line 3 lat: 53.997072
    test 20 line 3 lon: 44.520619
    test 21 line 3 fb: 52.159487
    test 22 line 3 lat2: 53.997072295385
    test 23 line 3 lon2: 44.520619105668
    test 24 line 3 azi2: 52.159486739948
    test 25 line 3 lat2: 53.997072295385
    test 26 line 3 lon2: 44.520619105668
    test 27 line 3 azi2: 52.159486739948
    test 28 line 4 lat: -49.416672
    test 29 line 4 lon: 166.828083
    test 30 line 4 fb: 22.033031
    test 31 line 4 lat2: -49.416672064706
    test 32 line 4 lon2: 166.828083210689
    test 33 line 4 azi2: 22.033030848249
    test 34 line 4 lat2: -49.416672064706
    test 35 line 4 lon2: 166.828083210689
    test 36 line 4 azi2: 22.033030848249
    test 37 line 5 lat: -60.405136
    test 38 line 5 lon: 110.581140
    test 39 line 5 fb: 75.518296
    test 40 line 5 lat2: -60.405136414530
    test 41 line 5 lon2: 110.581139538777
    test 42 line 5 azi2: 75.518295964649
    test 43 line 5 lat2: -60.405136414530
    test 44 line 5 lon2: 110.581139538777
    test 45 line 5 azi2: 75.518295964649
    test 46 line 6 lat: -11.212600
    test 47 line 6 lon: 144.177077
    test 48 line 6 fb: 133.027766
    test 49 line 6 lat2: -11.212600121556
    test 50 line 6 lon2: 144.177076511360
    test 51 line 6 azi2: 133.027766301029
    test 52 line 6 lat2: -11.212600121556
    test 53 line 6 lon2: 144.177076511360
    test 54 line 6 azi2: 133.027766301029
    test 55 line 7 lat: -6.529067
    test 56 line 7 lon: 2.895924
    test 57 line 7 fb: 178.740350
    test 58 line 7 lat2: -6.529066987956
    test 59 line 7 lon2: 2.895923948125
    test 60 line 7 azi2: 178.740350145954
    test 61 line 7 lat2: -6.529066987956
    test 62 line 7 lon2: 2.895923948125
    test 63 line 7 azi2: 178.740350145954
    test 64 line 8 lat: -8.855512
    test 65 line 8 lon: 112.749196
    test 66 line 8 fb: 119.512004
    test 67 line 8 lat2: -8.855512357257
    test 68 line 8 lon2: 112.749196494485
    test 69 line 8 azi2: 119.512003891282
    test 70 line 8 lat2: -8.855512357257
    test 71 line 8 lon2: 112.749196494485
    test 72 line 8 azi2: 119.512003891282
    test 73 line 9 lat: 29.866967
    test 74 line 9 lon: 171.726893
    test 75 line 9 fb: 171.662245
    test 76 line 9 lat2: 29.866967483293
    test 77 line 9 lon2: 171.726892560963
    test 78 line 9 azi2: 171.662244609397
    test 79 line 9 lat2: 29.866967483293
    test 80 line 9 lon2: 171.726892560963
    test 81 line 9 azi2: 171.662244609397
    test 82 line 10 lat: -29.238404
    test 83 line 10 lon: 133.459814
    test 84 line 10 fb: 69.814124
    test 85 line 10 lat2: -29.238404337998
    test 86 line 10 lon2: 133.459813533284
    test 87 line 10 azi2: 69.814124320813
    test 88 line 10 lat2: -29.238404337998
    test 89 line 10 lon2: 133.459813533284
    test 90 line 10 azi2: 69.814124320813
    test 91 line 11 lat: 55.600487
    test 92 line 11 lon: 75.128743
    test 93 line 11 fb: 153.896689
    test 94 line 11 lat2: 55.600487151983
    test 95 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 96 line 11 azi2: 153.896688535572
    test 97 line 11 lat2: 55.600487151982  FAILED, KNOWN, expected 55.600487151983
    test 98 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 99 line 11 azi2: 153.896688535572
    test 100 line 12 lat: -22.858435
    test 101 line 12 lon: 67.207513
    test 102 line 12 fb: 142.939529
    test 103 line 12 lat2: -22.858434825399
    test 104 line 12 lon2: 67.207513019332
    test 105 line 12 azi2: 142.939529056687
    test 106 line 12 lat2: -22.858434825399
    test 107 line 12 lon2: 67.207513019332
    test 108 line 12 azi2: 142.939529056687
    test 109 line 13 lat: -32.634475
    test 110 line 13 lon: 22.238523
    test 111 line 13 fb: 172.112993
    test 112 line 13 lat2: -32.634475461067
    test 113 line 13 lon2: 22.238523021935
    test 114 line 13 azi2: 172.112992582333
    test 115 line 13 lat2: -32.634475461067
    test 116 line 13 lon2: 22.238523021935
    test 117 line 13 azi2: 172.112992582333
    test 118 line 14 lat: 62.224985
    test 119 line 14 lon: 47.119133
    test 120 line 14 fb: 54.318105
    test 121 line 14 lat2: 62.224984867045
    test 122 line 14 lon2: 47.119133304525
    test 123 line 14 azi2: 54.318105291965
    test 124 line 14 lat2: 62.224984867045
    test 125 line 14 lon2: 47.119133304525
    test 126 line 14 azi2: 54.318105291965
    test 127 line 15 lat: 33.069613
    test 128 line 15 lon: 5.796996
    test 129 line 15 fb: 17.403845
    test 130 line 15 lat2: 33.069613195450
    test 131 line 15 lon2: 5.796995960186
    test 132 line 15 azi2: 17.403844642346
    test 133 line 15 lat2: 33.069613195450
    test 134 line 15 lon2: 5.796995960186
    test 135 line 15 azi2: 17.403844642346
    test 136 line 16 lat: 53.760900
    test 137 line 16 lon: 119.204306
    test 138 line 16 fb: 141.069793
    test 139 line 16 lat2: 53.760899500985
    test 140 line 16 lon2: 119.204305898518
    test 141 line 16 azi2: 141.069793254983
    test 142 line 16 lat2: 53.760899500985
    test 143 line 16 lon2: 119.204305898518
    test 144 line 16 azi2: 141.069793254983
    test 145 line 17 lat: -3.225632
    test 146 line 17 lon: 103.742354
    test 147 line 17 fb: 127.880328
    test 148 line 17 lat2: -3.225632004245
    test 149 line 17 lon2: 103.742354347526
    test 150 line 17 azi2: 127.880328388524
    test 151 line 17 lat2: -3.225632004245
    test 152 line 17 lon2: 103.742354347526
    test 153 line 17 azi2: 127.880328388524
    test 154 line 18 lat: 47.108712
    test 155 line 18 lon: 99.934107
    test 156 line 18 fb: 104.103491
    test 157 line 18 lat2: 47.108712008353
    test 158 line 18 lon2: 99.934107358387
    test 159 line 18 azi2: 104.103491123038
    test 160 line 18 lat2: 47.108712008353
    test 161 line 18 lon2: 99.934107358387
    test 162 line 18 azi2: 104.103491123038
    test 163 line 19 lat: 5.399363
    test 164 line 19 lon: 135.250064
    test 165 line 19 fb: 102.177018
    test 166 line 19 lat2: 5.399363208349
    test 167 line 19 lon2: 135.250063670790
    test 168 line 19 azi2: 102.177017677370
    test 169 line 19 lat2: 5.399363208349
    test 170 line 19 lon2: 135.250063670790
    test 171 line 19 azi2: 102.177017677370
    test 172 line 20 lat: -58.669225
    test 173 line 20 lon: 54.875015
    test 174 line 20 fb: 131.345308
    test 175 line 20 lat2: -58.669224697403
    test 176 line 20 lon2: 54.875014559502
    test 177 line 20 azi2: 131.345308028428
    test 178 line 20 lat2: -58.669224697403
    test 179 line 20 lon2: 54.875014559502
    test 180 line 20 azi2: 131.345308028428
    test 181 line 21 lat: 9.184229
    test 182 line 21 lon: 151.302637
    test 183 line 21 fb: 128.175105
    test 184 line 21 lat2: 9.184228666560
    test 185 line 21 lon2: 151.302636871911
    test 186 line 21 azi2: 128.175105446048
    test 187 line 21 lat2: 9.184228666560
    test 188 line 21 lon2: 151.302636871911
    test 189 line 21 azi2: 128.175105446048
    test 190 line 22 lat: 53.467940
    test 191 line 22 lon: 67.724192
    test 192 line 22 fb: 78.863492
    test 193 line 22 lat2: 53.467939714247
    test 194 line 22 lon2: 67.724192258333
    test 195 line 22 azi2: 78.863492168727
    test 196 line 22 lat2: 53.467939714247
    test 197 line 22 lon2: 67.724192258333
    test 198 line 22 azi2: 78.863492168727
    test 199 line 23 lat: 39.699456
    test 200 line 23 lon: 67.156325
    test 201 line 23 fb: 85.276830
    test 202 line 23 lat2: 39.699455912449
    test 203 line 23 lon2: 67.156324625647
    test 204 line 23 azi2: 85.276829539878
    test 205 line 23 lat2: 39.699455912449
    test 206 line 23 lon2: 67.156324625647
    test 207 line 23 azi2: 85.276829539878
    test 208 line 24 lat: 70.942602
    test 209 line 24 lon: 17.379214
    test 210 line 24 fb: 21.869008
    test 211 line 24 lat2: 70.942602144324
    test 212 line 24 lon2: 17.379213644124
    test 213 line 24 azi2: 21.869008256312
    test 214 line 24 lat2: 70.942602144324
    test 215 line 24 lon2: 17.379213644124
    test 216 line 24 azi2: 21.869008256312
    test 217 line 25 lat: 69.633349
    test 218 line 25 lon: 110.601933
    test 219 line 25 fb: 138.575193
    test 220 line 25 lat2: 69.633349004538
    test 221 line 25 lon2: 110.601933261211
    test 222 line 25 azi2: 138.575192608514
    test 223 line 25 lat2: 69.633349004538
    test 224 line 25 lon2: 110.601933261211
    test 225 line 25 azi2: 138.575192608514
    test 226 line 26 lat: 16.190815
    test 227 line 26 lon: 87.606993
    test 228 line 26 fb: 131.929410
    test 229 line 26 lat2: 16.190814826165
    test 230 line 26 lon2: 87.606993293114
    test 231 line 26 azi2: 131.929409507039
    test 232 line 26 lat2: 16.190814826165
    test 233 line 26 lon2: 87.606993293114
    test 234 line 26 azi2: 131.929409507039
    test 235 line 27 lat: 54.774905
    test 236 line 27 lon: 52.952507
    test 237 line 27 fb: 85.904051
    test 238 line 27 lat2: 54.774904542264
    test 239 line 27 lon2: 52.952506835523
    test 240 line 27 azi2: 85.904050867676
    test 241 line 27 lat2: 54.774904542264
    test 242 line 27 lon2: 52.952506835523
    test 243 line 27 azi2: 85.904050867676
    test 244 line 28 lat: -62.008569
    test 245 line 28 lon: 172.274877
    test 246 line 28 fb: 21.992601
    test 247 line 28 lat2: -62.008568677307
    test 248 line 28 lon2: 172.274876714260
    test 249 line 28 azi2: 21.992601380429
    test 250 line 28 lat2: -62.008568677307
    test 251 line 28 lon2: 172.274876714260
    test 252 line 28 azi2: 21.992601380429
    test 253 line 29 lat: 27.303730
    test 254 line 29 lon: 159.184451
    test 255 line 29 fb: 150.697920
    test 256 line 29 lat2: 27.303729660018
    test 257 line 29 lon2: 159.184451093393
    test 258 line 29 azi2: 150.697920369703
    test 259 line 29 lat2: 27.303729660018
    test 260 line 29 lon2: 159.184451093393
    test 261 line 29 azi2: 150.697920369703
    test 262 line 30 lat: 31.979897
    test 263 line 30 lon: 55.946759
    test 264 line 30 fb: 87.398293
    test 265 line 30 lat2: 31.979897342658
    test 266 line 30 lon2: 55.946758945497
    test 267 line 30 azi2: 87.398292964767
    test 268 line 30 lat2: 31.979897342658
    test 269 line 30 lon2: 55.946758945497
    test 270 line 30 azi2: 87.398292964767
    test 271 line 31 lat: 49.991468
    test 272 line 31 lon: 133.962411
    test 273 line 31 fb: 142.016540
    test 274 line 31 lat2: 49.991467522545
    test 275 line 31 lon2: 133.962411191467
    test 276 line 31 azi2: 142.016540226251
    test 277 line 31 lat2: 49.991467522545
    test 278 line 31 lon2: 133.962411191467
    test 279 line 31 azi2: 142.016540226251
    test 280 line 32 lat: 2.818559
    test 281 line 32 lon: 7.234774
    test 282 line 32 fb: 168.804029
    test 283 line 32 lat2: 2.818558842278
    test 284 line 32 lon2: 7.234774421859
    test 285 line 32 azi2: 168.804029404993
    test 286 line 32 lat2: 2.818558842278
    test 287 line 32 lon2: 7.234774421859
    test 288 line 32 azi2: 168.804029404993
    test 289 line 33 lat: -38.118071
    test 290 line 33 lon: 93.395971
    test 291 line 33 fb: 117.017377
    test 292 line 33 lat2: -38.118070550305
    test 293 line 33 lon2: 93.395971367720
    test 294 line 33 azi2: 117.017376985228
    test 295 line 33 lat2: -38.118070550305
    test 296 line 33 lon2: 93.395971367720
    test 297 line 33 azi2: 117.017376985228
    test 298 line 34 lat: 3.377824
    test 299 line 34 lon: 65.294746
    test 300 line 34 fb: 138.982544
    test 301 line 34 lat2: 3.377824468035
    test 302 line 34 lon2: 65.294745963255
    test 303 line 34 azi2: 138.982543784560
    test 304 line 34 lat2: 3.377824468035
    test 305 line 34 lon2: 65.294745963255
    test 306 line 34 azi2: 138.982543784560
    test 307 line 35 lat: 4.631157
    test 308 line 35 lon: 84.335045
    test 309 line 35 fb: 132.120804
    test 310 line 35 lat2: 4.631157299024
    test 311 line 35 lon2: 84.335044694540
    test 312 line 35 azi2: 132.120804319474
    test 313 line 35 lat2: 4.631157299024
    test 314 line 35 lon2: 84.335044694540
    test 315 line 35 azi2: 132.120804319474
    test 316 line 36 lat: 38.952215
    test 317 line 36 lon: 133.416463
    test 318 line 36 fb: 160.690586
    test 319 line 36 lat2: 38.952215219507
    test 320 line 36 lon2: 133.416463103113
    test 321 line 36 azi2: 160.690585690749
    test 322 line 36 lat2: 38.952215219507
    test 323 line 36 lon2: 133.416463103113
    test 324 line 36 azi2: 160.690585690749
    test 325 line 37 lat: -39.013297
    test 326 line 37 lon: 160.302849
    test 327 line 37 fb: 115.363715
    test 328 line 37 lat2: -39.013296805131
    test 329 line 37 lon2: 160.302849365986
    test 330 line 37 azi2: 115.363714797610
    test 331 line 37 lat2: -39.013296805131
    test 332 line 37 lon2: 160.302849365986
    test 333 line 37 azi2: 115.363714797610
    test 334 line 38 lat: -48.456093
    test 335 line 38 lon: 38.613822
    test 336 line 38 fb: 137.651668
    test 337 line 38 lat2: -48.456093143589
    test 338 line 38 lon2: 38.613821719886
    test 339 line 38 azi2: 137.651668464815
    test 340 line 38 lat2: -48.456093143589
    test 341 line 38 lon2: 38.613821719886
    test 342 line 38 azi2: 137.651668464815
    test 343 line 39 lat: -13.861956
    test 344 line 39 lon: 74.250572
    test 345 line 39 fb: 143.968262
    test 346 line 39 lat2: -13.861956131519
    test 347 line 39 lon2: 74.250571564776
    test 348 line 39 azi2: 143.968262419705
    test 349 line 39 lat2: -13.861956131519
    test 350 line 39 lon2: 74.250571564776
    test 351 line 39 azi2: 143.968262419705
    test 352 line 40 lat: 25.289202
    test 353 line 40 lon: 47.063579
    test 354 line 40 fb: 78.672533
    test 355 line 40 lat2: 25.289201968371
    test 356 line 40 lon2: 47.063578519727
    test 357 line 40 azi2: 78.672532588106
    test 358 line 40 lat2: 25.289201968371
    test 359 line 40 lon2: 47.063578519727
    test 360 line 40 azi2: 78.672532588106
    test 361 line 41 lat: 49.498121
    test 362 line 41 lon: 131.993365
    test 363 line 41 fb: 157.425605
    test 364 line 41 lat2: 49.498121110507
    test 365 line 41 lon2: 131.993365399320
    test 366 line 41 azi2: 157.425605424890
    test 367 line 41 lat2: 49.498121110507
    test 368 line 41 lon2: 131.993365399320
    test 369 line 41 azi2: 157.425605424890
    test 370 line 42 lat: -2.104242
    test 371 line 42 lon: 56.532079
    test 372 line 42 fb: 129.406955
    test 373 line 42 lat2: -2.104241718494
    test 374 line 42 lon2: 56.532079408825
    test 375 line 42 azi2: 129.406954892035
    test 376 line 42 lat2: -2.104241718494
    test 377 line 42 lon2: 56.532079408825
    test 378 line 42 azi2: 129.406954892035
    test 379 line 43 lat: -39.997315
    test 380 line 43 lon: 49.004259
    test 381 line 43 fb: 135.432995
    test 382 line 43 lat2: -39.997315471629
    test 383 line 43 lon2: 49.004258662721
    test 384 line 43 azi2: 135.432994751523
    test 385 line 43 lat2: -39.997315471629
    test 386 line 43 lon2: 49.004258662721
    test 387 line 43 azi2: 135.432994751523
    test 388 line 44 lat: 9.333272
    test 389 line 44 lon: 98.670857
    test 390 line 44 fb: 120.694280
    test 391 line 44 lat2: 9.333271992381
    test 392 line 44 lon2: 98.670857333200
    test 393 line 44 azi2: 120.694280236304
    test 394 line 44 lat2: 9.333271992381
    test 395 line 44 lon2: 98.670857333200
    test 396 line 44 azi2: 120.694280236304
    test 397 line 45 lat: 38.653646
    test 398 line 45 lon: 136.060468
    test 399 line 45 fb: 152.489416
    test 400 line 45 lat2: 38.653646179484
    test 401 line 45 lon2: 136.060467518677
    test 402 line 45 azi2: 152.489415748331
    test 403 line 45 lat2: 38.653646179484
    test 404 line 45 lon2: 136.060467518677
    test 405 line 45 azi2: 152.489415748331
    test 406 line 46 lat: -4.564995
    test 407 line 46 lon: 166.894968
    test 408 line 46 fb: 127.520036
    test 409 line 46 lat2: -4.564994956240
    test 410 line 46 lon2: 166.894968092836
    test 411 line 46 azi2: 127.520036113641
    test 412 line 46 lat2: -4.564994956240
    test 413 line 46 lon2: 166.894968092836
    test 414 line 46 azi2: 127.520036113641
    test 415 line 47 lat: -38.522500
    test 416 line 47 lon: 178.679307
    test 417 line 47 fb: 176.468685
    test 418 line 47 lat2: -38.522500159620
    test 419 line 47 lon2: 178.679306959466
    test 420 line 47 azi2: 176.468684587438
    test 421 line 47 lat2: -38.522500159620
    test 422 line 47 lon2: 178.679306959466
    test 423 line 47 azi2: 176.468684587438
    test 424 line 48 lat: 45.529796
    test 425 line 48 lon: 145.048738
    test 426 line 48 fb: 160.706227
    test 427 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 428 line 48 lon2: 145.048737846273
    test 429 line 48 azi2: 160.706226714169
    test 430 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 431 line 48 lon2: 145.048737846273
    test 432 line 48 azi2: 160.706226714169
    test 433 line 49 lat: -2.968925
    test 434 line 49 lon: 5.044083
    test 435 line 49 fb: 174.913528
    test 436 line 49 lat2: -2.968924563433
    test 437 line 49 lon2: 5.044082955485
    test 438 line 49 azi2: 174.913527615338
    test 439 line 49 lat2: -2.968924563433
    test 440 line 49 lon2: 5.044082955485
    test 441 line 49 azi2: 174.913527615338
    test 442 line 50 lat: 1.618184
    test 443 line 50 lon: 163.262955
    test 444 line 50 fb: 161.097730
    test 445 line 50 lat2: 1.618184178387
    test 446 line 50 lon2: 163.262955108028
    test 447 line 50 azi2: 161.097729713868
    test 448 line 50 lat2: 1.618184178387
    test 449 line 50 lon2: 163.262955108028
    test 450 line 50 azi2: 161.097729713868
    test 451 line 51 lat: 25.179740
    test 452 line 51 lon: 107.504992
    test 453 line 51 fb: 154.055552
    test 454 line 51 lat2: 25.179740339437
    test 455 line 51 lon2: 107.504991932892
    test 456 line 51 azi2: 154.055552232572
    test 457 line 51 lat2: 25.179740339437
    test 458 line 51 lon2: 107.504991932892
    test 459 line 51 azi2: 154.055552232572
    test 460 line 52 lat: 57.391251
    test 461 line 52 lon: 89.082271
    test 462 line 52 fb: 101.276115
    test 463 line 52 lat2: 57.391251345244
    test 464 line 52 lon2: 89.082271206722
    test 465 line 52 azi2: 101.276114553753
    test 466 line 52 lat2: 57.391251345244
    test 467 line 52 lon2: 89.082271206722
    test 468 line 52 azi2: 101.276114553753
    test 469 line 53 lat: -11.470673
    test 470 line 53 lon: 48.285095
    test 471 line 53 fb: 148.389696
    test 472 line 53 lat2: -11.470672507979
    test 473 line 53 lon2: 48.285094684225
    test 474 line 53 azi2: 148.389695684750
    test 475 line 53 lat2: -11.470672507979
    test 476 line 53 lon2: 48.285094684225
    test 477 line 53 azi2: 148.389695684750
    test 478 line 54 lat: 27.356639
    test 479 line 54 lon: 84.391682
    test 480 line 54 fb: 104.661818
    test 481 line 54 lat2: 27.356639349123
    test 482 line 54 lon2: 84.391681754671
    test 483 line 54 azi2: 104.661818309238
    test 484 line 54 lat2: 27.356639349123
    test 485 line 54 lon2: 84.391681754671
    test 486 line 54 azi2: 104.661818309238
    test 487 line 55 lat: -40.533598
    test 488 line 55 lon: 103.488381
    test 489 line 55 fb: 132.398259
    test 490 line 55 lat2: -40.533597900971
    test 491 line 55 lon2: 103.488381204009
    test 492 line 55 azi2: 132.398259207371
    test 493 line 55 lat2: -40.533597900971
    test 494 line 55 lon2: 103.488381204009
    test 495 line 55 azi2: 132.398259207371
    test 496 line 56 lat: 52.337949
    test 497 line 56 lon: 149.908279
    test 498 line 56 fb: 162.333474
    test 499 line 56 lat2: 52.337949466457
    test 500 line 56 lon2: 149.908278798430
    test 501 line 56 azi2: 162.333474334205
    test 502 line 56 lat2: 52.337949466457
    test 503 line 56 lon2: 149.908278798430
    test 504 line 56 azi2: 162.333474334205
    test 505 line 57 lat: -58.474076
    test 506 line 57 lon: 78.718606
    test 507 line 57 fb: 117.457565
    test 508 line 57 lat2: -58.474075605820
    test 509 line 57 lon2: 78.718605560533
    test 510 line 57 azi2: 117.457565115569
    test 511 line 57 lat2: -58.474075605820
    test 512 line 57 lon2: 78.718605560533
    test 513 line 57 azi2: 117.457565115569
    test 514 line 58 lat: -35.840568
    test 515 line 58 lon: 4.157534
    test 516 line 58 fb: 174.451067
    test 517 line 58 lat2: -35.840568348239
    test 518 line 58 lon2: 4.157534199470
    test 519 line 58 azi2: 174.451066901814
    test 520 line 58 lat2: -35.840568348239
    test 521 line 58 lon2: 4.157534199470
    test 522 line 58 azi2: 174.451066901814
    test 523 line 59 lat: 15.629163
    test 524 line 59 lon: 102.677417
    test 525 line 59 fb: 103.482103
    test 526 line 59 lat2: 15.629163409998
    test 527 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 528 line 59 azi2: 103.482102722183
    test 529 line 59 lat2: 15.629163409998
    test 530 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 531 line 59 azi2: 103.482102722183
    test 532 line 60 lat: -1.256180
    test 533 line 60 lon: 133.625255
    test 534 line 60 fb: 104.470489
    test 535 line 60 lat2: -1.256179633151
    test 536 line 60 lon2: 133.625254783633
    test 537 line 60 azi2: 104.470489013739
    test 538 line 60 lat2: -1.256179633151
    test 539 line 60 lon2: 133.625254783633
    test 540 line 60 azi2: 104.470489013739
    test 541 line 61 lat: -40.558253
    test 542 line 61 lon: 112.897054
    test 543 line 61 fb: 90.226134
    test 544 line 61 lat2: -40.558252601871
    test 545 line 61 lon2: 112.897053867085
    test 546 line 61 azi2: 90.226134266467
    test 547 line 61 lat2: -40.558252601871
    test 548 line 61 lon2: 112.897053867085
    test 549 line 61 azi2: 90.226134266467
    test 550 line 62 lat: 86.193596
    test 551 line 62 lon: 116.956880
    test 552 line 62 fb: 117.618329
    test 553 line 62 lat2: 86.193595821107
    test 554 line 62 lon2: 116.956880430711
    test 555 line 62 azi2: 117.618329340274
    test 556 line 62 lat2: 86.193595821107
    test 557 line 62 lon2: 116.956880430711
    test 558 line 62 azi2: 117.618329340274
    test 559 line 63 lat: 6.874181
    test 560 line 63 lon: 54.891199
    test 561 line 63 fb: 90.820790
    test 562 line 63 lat2: 6.874181093562
    test 563 line 63 lon2: 54.891198619261
    test 564 line 63 azi2: 90.820789878786
    test 565 line 63 lat2: 6.874181093562
    test 566 line 63 lon2: 54.891198619261
    test 567 line 63 azi2: 90.820789878786
    test 568 line 64 lat: -2.554657
    test 569 line 64 lon: 71.539549
    test 570 line 64 fb: 105.722921
    test 571 line 64 lat2: -2.554657243385
    test 572 line 64 lon2: 71.539549368441
    test 573 line 64 azi2: 105.722921401613
    test 574 line 64 lat2: -2.554657243385
    test 575 line 64 lon2: 71.539549368441
    test 576 line 64 azi2: 105.722921401613
    test 577 line 65 lat: 1.329645
    test 578 line 65 lon: 138.134969
    test 579 line 65 fb: 150.465118
    test 580 line 65 lat2: 1.329645321136
    test 581 line 65 lon2: 138.134968538140
    test 582 line 65 azi2: 150.465118219879
    test 583 line 65 lat2: 1.329645321136
    test 584 line 65 lon2: 138.134968538140
    test 585 line 65 azi2: 150.465118219879
    test 586 line 66 lat: -44.026427
    test 587 line 66 lon: 121.367591
    test 588 line 66 fb: 123.975227
    test 589 line 66 lat2: -44.026426573446
    test 590 line 66 lon2: 121.367591215510
    test 591 line 66 azi2: 123.975227063718
    test 592 line 66 lat2: -44.026426573446
    test 593 line 66 lon2: 121.367591215510
    test 594 line 66 azi2: 123.975227063718
    test 595 line 67 lat: -3.399081
    test 596 line 67 lon: 138.655764
    test 597 line 67 fb: 98.994343
    test 598 line 67 lat2: -3.399080708673
    test 599 line 67 lon2: 138.655764270175
    test 600 line 67 azi2: 98.994343217447
    test 601 line 67 lat2: -3.399080708673
    test 602 line 67 lon2: 138.655764270175
    test 603 line 67 azi2: 98.994343217447
    test 604 line 68 lat: -26.776985
    test 605 line 68 lon: 67.020055
    test 606 line 68 fb: 119.394665
    test 607 line 68 lat2: -26.776984673364
    test 608 line 68 lon2: 67.020054548341
    test 609 line 68 azi2: 119.394664651636
    test 610 line 68 lat2: -26.776984673364
    test 611 line 68 lon2: 67.020054548341
    test 612 line 68 azi2: 119.394664651636
    test 613 line 69 lat: 52.057239
    test 614 line 69 lon: 151.887270
    test 615 line 69 fb: 161.537826
    test 616 line 69 lat2: 52.057239269050
    test 617 line 69 lon2: 151.887270484247
    test 618 line 69 azi2: 161.537826425477
    test 619 line 69 lat2: 52.057239269050
    test 620 line 69 lon2: 151.887270484247
    test 621 line 69 azi2: 161.537826425477
    test 622 line 70 lat: 3.784724
    test 623 line 70 lon: 102.727745
    test 624 line 70 fb: 116.453155
    test 625 line 70 lat2: 3.784724165483
    test 626 line 70 lon2: 102.727744934481
    test 627 line 70 azi2: 116.453155405439
    test 628 line 70 lat2: 3.784724165483
    test 629 line 70 lon2: 102.727744934481
    test 630 line 70 azi2: 116.453155405439
    test 631 line 71 lat: -40.409299
    test 632 line 71 lon: 86.033195
    test 633 line 71 fb: 121.080298
    test 634 line 71 lat2: -40.409298772797
    test 635 line 71 lon2: 86.033195335657
    test 636 line 71 azi2: 121.080297615268
    test 637 line 71 lat2: -40.409298772797
    test 638 line 71 lon2: 86.033195335657
    test 639 line 71 azi2: 121.080297615268
    test 640 line 72 lat: 73.013460
    test 641 line 72 lon: 76.188125
    test 642 line 72 fb: 78.877769
    test 643 line 72 lat2: 73.013460186926
    test 644 line 72 lon2: 76.188125151657
    test 645 line 72 azi2: 78.877769459629
    test 646 line 72 lat2: 73.013460186926
    test 647 line 72 lon2: 76.188125151657
    test 648 line 72 azi2: 78.877769459629
    test 649 line 73 lat: 52.870132
    test 650 line 73 lon: 51.020900
    test 651 line 73 fb: 102.113351
    test 652 line 73 lat2: 52.870131799667
    test 653 line 73 lon2: 51.020900069545
    test 654 line 73 azi2: 102.113351369331
    test 655 line 73 lat2: 52.870131799667
    test 656 line 73 lon2: 51.020900069545
    test 657 line 73 azi2: 102.113351369331
    test 658 line 74 lat: 28.909632
    test 659 line 74 lon: 17.071526
    test 660 line 74 fb: 103.660711
    test 661 line 74 lat2: 28.909631785857
    test 662 line 74 lon2: 17.071526465331
    test 663 line 74 azi2: 103.660711362255
    test 664 line 74 lat2: 28.909631785857
    test 665 line 74 lon2: 17.071526465331
    test 666 line 74 azi2: 103.660711362255
    test 667 line 75 lat: -58.257855
    test 668 line 75 lon: 15.812862
    test 669 line 75 fb: 169.606337
    test 670 line 75 lat2: -58.257854831091
    test 671 line 75 lon2: 15.812862089412
    test 672 line 75 azi2: 169.606337169070
    test 673 line 75 lat2: -58.257854831091
    test 674 line 75 lon2: 15.812862089412
    test 675 line 75 azi2: 169.606337169070
    test 676 line 76 lat: -58.869445
    test 677 line 76 lon: 132.036795
    test 678 line 76 fb: 53.946549
    test 679 line 76 lat2: -58.869445004289
    test 680 line 76 lon2: 132.036794965086
    test 681 line 76 azi2: 53.946549037654
    test 682 line 76 lat2: -58.869445004289
    test 683 line 76 lon2: 132.036794965086
    test 684 line 76 azi2: 53.946549037654
    test 685 line 77 lat: -45.547043
    test 686 line 77 lon: 77.540664
    test 687 line 77 fb: 126.917177
    test 688 line 77 lat2: -45.547042598505
    test 689 line 77 lon2: 77.540663933413
    test 690 line 77 azi2: 126.917177154676
    test 691 line 77 lat2: -45.547042598505
    test 692 line 77 lon2: 77.540663933413
    test 693 line 77 azi2: 126.917177154676
    test 694 line 78 lat: 45.046385
    test 695 line 78 lon: 149.382429
    test 696 line 78 fb: 162.117474
    test 697 line 78 lat2: 45.046384823604
    test 698 line 78 lon2: 149.382428769460
    test 699 line 78 azi2: 162.117474447248
    test 700 line 78 lat2: 45.046384823604
    test 701 line 78 lon2: 149.382428769460
    test 702 line 78 azi2: 162.117474447248
    test 703 line 79 lat: -74.853338
    test 704 line 79 lon: 96.072097
    test 705 line 79 fb: 85.425493
    test 706 line 79 lat2: -74.853338324199
    test 707 line 79 lon2: 96.072096720955
    test 708 line 79 azi2: 85.425493305289
    test 709 line 79 lat2: -74.853338324199
    test 710 line 79 lon2: 96.072096720956  FAILED, KNOWN, expected 96.072096720955
    test 711 line 79 azi2: 85.425493305289
    test 712 line 80 lat: -13.205775
    test 713 line 80 lon: 57.532285
    test 714 line 80 fb: 122.358040
    test 715 line 80 lat2: -13.205775181752
    test 716 line 80 lon2: 57.532285422140
    test 717 line 80 azi2: 122.358040028964
    test 718 line 80 lat2: -13.205775181752
    test 719 line 80 lon2: 57.532285422140
    test 720 line 80 azi2: 122.358040028964
    test 721 line 81 lat: -5.135864
    test 722 line 81 lon: 115.048833
    test 723 line 81 fb: 93.168400
    test 724 line 81 lat2: -5.135863872649
    test 725 line 81 lon2: 115.048832990097
    test 726 line 81 azi2: 93.168399576996
    test 727 line 81 lat2: -5.135863872649
    test 728 line 81 lon2: 115.048832990097
    test 729 line 81 azi2: 93.168399576996
    test 730 line 82 lat: 13.355453
    test 731 line 82 lon: 19.253946
    test 732 line 82 fb: 143.568719
    test 733 line 82 lat2: 13.355452912310
    test 734 line 82 lon2: 19.253945880531
    test 735 line 82 azi2: 143.568718864193
    test 736 line 82 lat2: 13.355452912310
    test 737 line 82 lon2: 19.253945880531
    test 738 line 82 azi2: 143.568718864193
    test 739 line 83 lat: 0.766426
    test 740 line 83 lon: 147.485817
    test 741 line 83 fb: 144.982274
    test 742 line 83 lat2: 0.766426443892
    test 743 line 83 lon2: 147.485816830606
    test 744 line 83 azi2: 144.982273873382
    test 745 line 83 lat2: 0.766426443892
    test 746 line 83 lon2: 147.485816830606
    test 747 line 83 azi2: 144.982273873382
    test 748 line 84 lat: 10.228416
    test 749 line 84 lon: 159.204118
    test 750 line 84 fb: 173.111973
    test 751 line 84 lat2: 10.228416314659
    test 752 line 84 lon2: 159.204118025562
    test 753 line 84 azi2: 173.111973027488
    test 754 line 84 lat2: 10.228416314659
    test 755 line 84 lon2: 159.204118025562
    test 756 line 84 azi2: 173.111973027488
    test 757 line 85 lat: 73.178089
    test 758 line 85 lon: 131.762700
    test 759 line 85 fb: 135.271161
    test 760 line 85 lat2: 73.178089048974
    test 761 line 85 lon2: 131.762699581940
    test 762 line 85 azi2: 135.271161440271
    test 763 line 85 lat2: 73.178089048974
    test 764 line 85 lon2: 131.762699581941  FAILED, KNOWN, expected 131.762699581940
    test 765 line 85 azi2: 135.271161440271
    test 766 line 86 lat: -16.908717
    test 767 line 86 lon: 149.240494
    test 768 line 86 fb: 90.725082
    test 769 line 86 lat2: -16.908717231321
    test 770 line 86 lon2: 149.240493850337
    test 771 line 86 azi2: 90.725082091932
    test 772 line 86 lat2: -16.908717231321
    test 773 line 86 lon2: 149.240493850337
    test 774 line 86 azi2: 90.725082091932
    test 775 line 87 lat: -23.440025
    test 776 line 87 lon: 98.819595
    test 777 line 87 fb: 154.388320
    test 778 line 87 lat2: -23.440025289757
    test 779 line 87 lon2: 98.819595131759
    test 780 line 87 azi2: 154.388319751570
    test 781 line 87 lat2: -23.440025289757
    test 782 line 87 lon2: 98.819595131759
    test 783 line 87 azi2: 154.388319751570
    test 784 line 88 lat: -51.344465
    test 785 line 88 lon: 54.299399
    test 786 line 88 fb: 139.903236
    test 787 line 88 lat2: -51.344465279371
    test 788 line 88 lon2: 54.299399477396
    test 789 line 88 azi2: 139.903236261795
    test 790 line 88 lat2: -51.344465279371
    test 791 line 88 lon2: 54.299399477396
    test 792 line 88 azi2: 139.903236261795
    test 793 line 89 lat: 33.922320
    test 794 line 89 lon: 143.463070
    test 795 line 89 fb: 132.788230
    test 796 line 89 lat2: 33.922319712554
    test 797 line 89 lon2: 143.463070326988
    test 798 line 89 azi2: 132.788229856713
    test 799 line 89 lat2: 33.922319712554
    test 800 line 89 lon2: 143.463070326988
    test 801 line 89 azi2: 132.788229856713
    test 802 line 90 lat: -83.333068
    test 803 line 90 lon: 177.611925
    test 804 line 90 fb: 2.633769
    test 805 line 90 lat2: -83.333068057524
    test 806 line 90 lon2: 177.611924577958
    test 807 line 90 azi2: 2.633768744582
    test 808 line 90 lat2: -83.333068057524
    test 809 line 90 lon2: 177.611924577958
    test 810 line 90 azi2: 2.633768744582
    test 811 line 91 lat: 20.587333
    test 812 line 91 lon: 164.201962
    test 813 line 91 fb: 166.991083
    test 814 line 91 lat2: 20.587333492522
    test 815 line 91 lon2: 164.201962479604
    test 816 line 91 azi2: 166.991083245940
    test 817 line 91 lat2: 20.587333492522
    test 818 line 91 lon2: 164.201962479604
    test 819 line 91 azi2: 166.991083245940
    test 820 line 92 lat: 52.612815
    test 821 line 92 lon: 110.766184
    test 822 line 92 fb: 168.281486
    test 823 line 92 lat2: 52.612815386144
    test 824 line 92 lon2: 110.766184475279
    test 825 line 92 azi2: 168.281485715811
    test 826 line 92 lat2: 52.612815386144
    test 827 line 92 lon2: 110.766184475279
    test 828 line 92 azi2: 168.281485715811
    test 829 line 93 lat: -41.681373
    test 830 line 93 lon: 82.150183
    test 831 line 93 fb: 107.012959
    test 832 line 93 lat2: -41.681372899642
    test 833 line 93 lon2: 82.150183233451
    test 834 line 93 azi2: 107.012959072514
    test 835 line 93 lat2: -41.681372899642
    test 836 line 93 lon2: 82.150183233451
    test 837 line 93 azi2: 107.012959072514
    test 838 line 94 lat: 27.082807
    test 839 line 94 lon: 171.332531
    test 840 line 94 fb: 174.934340
    test 841 line 94 lat2: 27.082807052702
    test 842 line 94 lon2: 171.332530862401
    test 843 line 94 azi2: 174.934339881142
    test 844 line 94 lat2: 27.082807052702
    test 845 line 94 lon2: 171.332530862401
    test 846 line 94 azi2: 174.934339881142
    test 847 line 95 lat: 57.992299
    test 848 line 95 lon: 15.128357
    test 849 line 95 fb: 62.342982
    test 850 line 95 lat2: 57.992299464191
    test 851 line 95 lon2: 15.128356773547
    test 852 line 95 azi2: 62.342982084737
    test 853 line 95 lat2: 57.992299464191
    test 854 line 95 lon2: 15.128356773547
    test 855 line 95 azi2: 62.342982084737
    test 856 line 96 lat: -10.526000
    test 857 line 96 lon: 33.778702
    test 858 line 96 fb: 165.687804
    test 859 line 96 lat2: -10.526000344959
    test 860 line 96 lon2: 33.778701722506
    test 861 line 96 azi2: 165.687803859941
    test 862 line 96 lat2: -10.526000344959
    test 863 line 96 lon2: 33.778701722506
    test 864 line 96 azi2: 165.687803859941
    test 865 line 97 lat: 25.802395
    test 866 line 97 lon: 98.502531
    test 867 line 97 fb: 97.837271
    test 868 line 97 lat2: 25.802394934787
    test 869 line 97 lon2: 98.502531199301
    test 870 line 97 azi2: 97.837270592496
    test 871 line 97 lat2: 25.802394934787
    test 872 line 97 lon2: 98.502531199301
    test 873 line 97 azi2: 97.837270592496
    test 874 line 98 lat: 47.163255
    test 875 line 98 lon: 156.720176
    test 876 line 98 fb: 160.291022
    test 877 line 98 lat2: 47.163255465769
    test 878 line 98 lon2: 156.720176105542
    test 879 line 98 azi2: 160.291021678921
    test 880 line 98 lat2: 47.163255465769
    test 881 line 98 lon2: 156.720176105542
    test 882 line 98 azi2: 160.291021678921
    test 883 line 99 lat: 47.932063
    test 884 line 99 lon: 35.094714
    test 885 line 99 fb: 137.545065
    test 886 line 99 lat2: 47.932062978964
    test 887 line 99 lon2: 35.094714092217
    test 888 line 99 azi2: 137.545065115425
    test 889 line 99 lat2: 47.932062978964
    test 890 line 99 lon2: 35.094714092217
    test 891 line 99 azi2: 137.545065115425
    test 892 line 100 lat: -60.204340
    test 893 line 100 lon: 117.726218
    test 894 line 100 fb: 72.585011
    test 895 line 100 lat2: -60.204339807984
    test 896 line 100 lon2: 117.726217548610
    test 897 line 100 azi2: 72.585010656772
    test 898 line 100 lat2: -60.204339807984
    test 899 line 100 lon2: 117.726217548610
    test 900 line 100 azi2: 72.585010656772
    test 901 line 101 lat: 35.247411
    test 902 line 101 lon: 59.471562
    test 903 line 101 fb: 81.179468
    test 904 line 101 lat2: 35.247410984329
    test 905 line 101 lon2: 59.471562388985
    test 906 line 101 azi2: 81.179468094302
    test 907 line 101 lat2: 35.247410984329
    test 908 line 101 lon2: 59.471562388985
    test 909 line 101 azi2: 81.179468094302
    test 910 line 102 lat: 19.218268
    test 911 line 102 lon: 165.507915
    test 912 line 102 fb: 167.452074
    test 913 line 102 lat2: 19.218268047706
    test 914 line 102 lon2: 165.507915017643
    test 915 line 102 azi2: 167.452074301867
    test 916 line 102 lat2: 19.218268047706
    test 917 line 102 lon2: 165.507915017643
    test 918 line 102 azi2: 167.452074301867
    test 919 line 103 lat: 55.428809
    test 920 line 103 lon: 121.956541
    test 921 line 103 fb: 154.501481
    test 922 line 103 lat2: 55.428809300888
    test 923 line 103 lon2: 121.956541206929
    test 924 line 103 azi2: 154.501481394521
    test 925 line 103 lat2: 55.428809300888
    test 926 line 103 lon2: 121.956541206929
    test 927 line 103 azi2: 154.501481394521
    test 928 line 104 lat: 49.294374
    test 929 line 104 lon: 119.661420
    test 930 line 104 fb: 157.209489
    test 931 line 104 lat2: 49.294374468687
    test 932 line 104 lon2: 119.661419832789
    test 933 line 104 azi2: 157.209488754087
    test 934 line 104 lat2: 49.294374468687
    test 935 line 104 lon2: 119.661419832789
    test 936 line 104 azi2: 157.209488754087
    test 937 line 105 lat: -32.534872
    test 938 line 105 lon: 152.280610
    test 939 line 105 fb: 45.281812
    test 940 line 105 lat2: -32.534872085863
    test 941 line 105 lon2: 152.280609797481
    test 942 line 105 azi2: 45.281812386148
    test 943 line 105 lat2: -32.534872085863
    test 944 line 105 lon2: 152.280609797481
    test 945 line 105 azi2: 45.281812386148
    test 946 line 106 lat: -1.097899
    test 947 line 106 lon: 104.697360
    test 948 line 106 fb: 126.298489
    test 949 line 106 lat2: -1.097899218947
    test 950 line 106 lon2: 104.697359959629
    test 951 line 106 azi2: 126.298488917783
    test 952 line 106 lat2: -1.097899218947
    test 953 line 106 lon2: 104.697359959629
    test 954 line 106 azi2: 126.298488917783
    test 955 line 107 lat: -18.034366
    test 956 line 107 lon: 28.460388
    test 957 line 107 fb: 129.520364
    test 958 line 107 lat2: -18.034366293950
    test 959 line 107 lon2: 28.460387638999
    test 960 line 107 azi2: 129.520363751001
    test 961 line 107 lat2: -18.034366293950
    test 962 line 107 lon2: 28.460387638999
    test 963 line 107 azi2: 129.520363751001
    test 964 line 108 lat: 76.310833
    test 965 line 108 lon: 80.110525
    test 966 line 108 fb: 106.655922
    test 967 line 108 lat2: 76.310832995825
    test 968 line 108 lon2: 80.110524683625
    test 969 line 108 azi2: 106.655921818336
    test 970 line 108 lat2: 76.310832995825
    test 971 line 108 lon2: 80.110524683625
    test 972 line 108 azi2: 106.655921818336
    test 973 line 109 lat: 39.838034
    test 974 line 109 lon: 42.989610
    test 975 line 109 fb: 69.695281
    test 976 line 109 lat2: 39.838033717901
    test 977 line 109 lon2: 42.989610477861
    test 978 line 109 azi2: 69.695281464222
    test 979 line 109 lat2: 39.838033717901
    test 980 line 109 lon2: 42.989610477861
    test 981 line 109 azi2: 69.695281464222
    test 982 line 110 lat: -56.710166
    test 983 line 110 lon: 125.242287
    test 984 line 110 fb: 60.118756
    test 985 line 110 lat2: -56.710165877845
    test 986 line 110 lon2: 125.242287231675
    test 987 line 110 azi2: 60.118756013168
    test 988 line 110 lat2: -56.710165877845
    test 989 line 110 lon2: 125.242287231675
    test 990 line 110 azi2: 60.118756013168
    test 991 line 111 lat: 55.796062
    test 992 line 111 lon: 59.736599
    test 993 line 111 fb: 73.536728
    test 994 line 111 lat2: 55.796061639165
    test 995 line 111 lon2: 59.736598787303
    test 996 line 111 azi2: 73.536727826063
    test 997 line 111 lat2: 55.796061639165
    test 998 line 111 lon2: 59.736598787303
    test 999 line 111 azi2: 73.536727826063
    test 1000 line 112 lat: -36.553675
    test 1001 line 112 lon: 38.656806
    test 1002 line 112 fb: 134.414837
    test 1003 line 112 lat2: -36.553675319553
    test 1004 line 112 lon2: 38.656806212281
    test 1005 line 112 azi2: 134.414836606696
    test 1006 line 112 lat2: -36.553675319553
    test 1007 line 112 lon2: 38.656806212281
    test 1008 line 112 azi2: 134.414836606696
    test 1009 line 113 lat: -36.798456
    test 1010 line 113 lon: 163.588375
    test 1011 line 113 fb: 147.324204
    test 1012 line 113 lat2: -36.798455994877
    test 1013 line 113 lon2: 163.588375017283
    test 1014 line 113 azi2: 147.324204021436
    test 1015 line 113 lat2: -36.798455994877
    test 1016 line 113 lon2: 163.588375017283
    test 1017 line 113 azi2: 147.324204021436
    test 1018 line 114 lat: -15.952937
    test 1019 line 114 lon: 55.126807
    test 1020 line 114 fb: 134.743426
    test 1021 line 114 lat2: -15.952937085211
    test 1022 line 114 lon2: 55.126807113658
    test 1023 line 114 azi2: 134.743426025963
    test 1024 line 114 lat2: -15.952937085211
    test 1025 line 114 lon2: 55.126807113658
    test 1026 line 114 azi2: 134.743426025963
    test 1027 line 115 lat: -34.573087
    test 1028 line 115 lon: 69.304064
    test 1029 line 115 fb: 111.515973
    test 1030 line 115 lat2: -34.573086586710
    test 1031 line 115 lon2: 69.304064202466
    test 1032 line 115 azi2: 111.515973223076
    test 1033 line 115 lat2: -34.573086586710
    test 1034 line 115 lon2: 69.304064202466
    test 1035 line 115 azi2: 111.515973223076
    test 1036 line 116 lat: 26.643499
    test 1037 line 116 lon: 1.500481
    test 1038 line 116 fb: 7.958966
    test 1039 line 116 lat2: 26.643498959841
    test 1040 line 116 lon2: 1.500480924882
    test 1041 line 116 azi2: 7.958966071178
    test 1042 line 116 lat2: 26.643498959841
    test 1043 line 116 lon2: 1.500480924882
    test 1044 line 116 azi2: 7.958966071178
    test 1045 line 117 lat: 60.891878
    test 1046 line 117 lon: 91.543410
    test 1047 line 117 fb: 92.273095
    test 1048 line 117 lat2: 60.891878271763
    test 1049 line 117 lon2: 91.543409983653
    test 1050 line 117 azi2: 92.273095036246
    test 1051 line 117 lat2: 60.891878271763
    test 1052 line 117 lon2: 91.543409983653
    test 1053 line 117 azi2: 92.273095036246
    test 1054 line 118 lat: 64.148187
    test 1055 line 118 lon: 136.552579
    test 1056 line 118 fb: 147.193229
    test 1057 line 118 lat2: 64.148186913822
    test 1058 line 118 lon2: 136.552579389353
    test 1059 line 118 azi2: 147.193228706030
    test 1060 line 118 lat2: 64.148186913822
    test 1061 line 118 lon2: 136.552579389353
    test 1062 line 118 azi2: 147.193228706030
    test 1063 line 119 lat: 62.311678
    test 1064 line 119 lon: 39.238630
    test 1065 line 119 fb: 53.785893
    test 1066 line 119 lat2: 62.311677748693
    test 1067 line 119 lon2: 39.238629619778
    test 1068 line 119 azi2: 53.785893324444
    test 1069 line 119 lat2: 62.311677748693
    test 1070 line 119 lon2: 39.238629619778
    test 1071 line 119 azi2: 53.785893324444
    test 1072 line 120 lat: 27.239733
    test 1073 line 120 lon: 136.649227
    test 1074 line 120 fb: 162.935700
    test 1075 line 120 lat2: 27.239733033115
    test 1076 line 120 lon2: 136.649227320518
    test 1077 line 120 azi2: 162.935700444146
    test 1078 line 120 lat2: 27.239733033115
    test 1079 line 120 lon2: 136.649227320518
    test 1080 line 120 azi2: 162.935700444146
    test 1081 line 121 lat: 6.562844
    test 1082 line 121 lon: 170.159007
    test 1083 line 121 fb: 174.851345
    test 1084 line 121 lat2: 6.562844367534
    test 1085 line 121 lon2: 170.159007094343
    test 1086 line 121 azi2: 174.851345174583
    test 1087 line 121 lat2: 6.562844367534
    test 1088 line 121 lon2: 170.159007094343
    test 1089 line 121 azi2: 174.851345174583
    test 1090 line 122 lat: -29.537259
    test 1091 line 122 lon: 105.350044
    test 1092 line 122 fb: 141.393876
    test 1093 line 122 lat2: -29.537259231420
    test 1094 line 122 lon2: 105.350044044462
    test 1095 line 122 azi2: 141.393876478962
    test 1096 line 122 lat2: -29.537259231420
    test 1097 line 122 lon2: 105.350044044462
    test 1098 line 122 azi2: 141.393876478962
    test 1099 line 123 lat: -66.447700
    test 1100 line 123 lon: 83.741961
    test 1101 line 123 fb: 129.422490
    test 1102 line 123 lat2: -66.447699831143
    test 1103 line 123 lon2: 83.741960628420
    test 1104 line 123 azi2: 129.422490051758
    test 1105 line 123 lat2: -66.447699831143
    test 1106 line 123 lon2: 83.741960628420
    test 1107 line 123 azi2: 129.422490051758
    test 1108 line 124 lat: 56.926818
    test 1109 line 124 lon: 20.197117
    test 1110 line 124 fb: 37.960006
    test 1111 line 124 lat2: 56.926817599968
    test 1112 line 124 lon2: 20.197117058896
    test 1113 line 124 azi2: 37.960006049295
    test 1114 line 124 lat2: 56.926817599968
    test 1115 line 124 lon2: 20.197117058896
    test 1116 line 124 azi2: 37.960006049295
    test 1117 line 125 lat: 55.018266
    test 1118 line 125 lon: 83.735441
    test 1119 line 125 fb: 130.766515
    test 1120 line 125 lat2: 55.018265995959
    test 1121 line 125 lon2: 83.735441278691
    test 1122 line 125 azi2: 130.766514657995
    test 1123 line 125 lat2: 55.018265995959
    test 1124 line 125 lon2: 83.735441278691
    test 1125 line 125 azi2: 130.766514657995
    test 1126 line 126 lat: -78.131054
    test 1127 line 126 lon: 56.098176
    test 1128 line 126 fb: 127.132203
    test 1129 line 126 lat2: -78.131053729786
    test 1130 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1131 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1132 line 126 lat2: -78.131053729786
    test 1133 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1134 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1135 line 127 lat: -18.223027
    test 1136 line 127 lon: 86.221345
    test 1137 line 127 fb: 114.875019
    test 1138 line 127 lat2: -18.223027345294
    test 1139 line 127 lon2: 86.221345156045
    test 1140 line 127 azi2: 114.875019395396
    test 1141 line 127 lat2: -18.223027345294
    test 1142 line 127 lon2: 86.221345156045
    test 1143 line 127 azi2: 114.875019395396
    test 1144 line 128 lat: -16.100413
    test 1145 line 128 lon: 54.195260
    test 1146 line 128 fb: 126.748474
    test 1147 line 128 lat2: -16.100412777565
    test 1148 line 128 lon2: 54.195259657284
    test 1149 line 128 azi2: 126.748473963924
    test 1150 line 128 lat2: -16.100412777565
    test 1151 line 128 lon2: 54.195259657284
    test 1152 line 128 azi2: 126.748473963924
    test 1153 line 129 lat: -15.192944
    test 1154 line 129 lon: 85.057605
    test 1155 line 129 fb: 133.468781
    test 1156 line 129 lat2: -15.192944143354
    test 1157 line 129 lon2: 85.057605312625
    test 1158 line 129 azi2: 133.468780913302
    test 1159 line 129 lat2: -15.192944143354
    test 1160 line 129 lon2: 85.057605312625
    test 1161 line 129 azi2: 133.468780913302
    test 1162 line 130 lat: -1.279757
    test 1163 line 130 lon: 93.430943
    test 1164 line 130 fb: 128.545662
    test 1165 line 130 lat2: -1.279756550061
    test 1166 line 130 lon2: 93.430943123745
    test 1167 line 130 azi2: 128.545661704820
    test 1168 line 130 lat2: -1.279756550061
    test 1169 line 130 lon2: 93.430943123745
    test 1170 line 130 azi2: 128.545661704820
    test 1171 line 131 lat: -29.465713
    test 1172 line 131 lon: 79.050046
    test 1173 line 131 fb: 109.482097
    test 1174 line 131 lat2: -29.465712645249
    test 1175 line 131 lon2: 79.050045796725
    test 1176 line 131 azi2: 109.482097420926
    test 1177 line 131 lat2: -29.465712645249
    test 1178 line 131 lon2: 79.050045796725
    test 1179 line 131 azi2: 109.482097420926
    test 1180 line 132 lat: 31.819596
    test 1181 line 132 lon: 88.251997
    test 1182 line 132 fb: 91.173935
    test 1183 line 132 lat2: 31.819596255581
    test 1184 line 132 lon2: 88.251997328019
    test 1185 line 132 azi2: 91.173935030538
    test 1186 line 132 lat2: 31.819596255581
    test 1187 line 132 lon2: 88.251997328019
    test 1188 line 132 azi2: 91.173935030538
    test 1189 line 133 lat: -63.260477
    test 1190 line 133 lon: 96.535465
    test 1191 line 133 fb: 84.208873
    test 1192 line 133 lat2: -63.260477387265
    test 1193 line 133 lon2: 96.535465277415
    test 1194 line 133 azi2: 84.208873088521
    test 1195 line 133 lat2: -63.260477387265
    test 1196 line 133 lon2: 96.535465277415
    test 1197 line 133 azi2: 84.208873088521
    test 1198 line 134 lat: 12.908849
    test 1199 line 134 lon: 116.734308
    test 1200 line 134 fb: 110.313866
    test 1201 line 134 lat2: 12.908849199388
    test 1202 line 134 lon2: 116.734308245854
    test 1203 line 134 azi2: 110.313865884978
    test 1204 line 134 lat2: 12.908849199388
    test 1205 line 134 lon2: 116.734308245854
    test 1206 line 134 azi2: 110.313865884978
    test 1207 line 135 lat: -73.345839
    test 1208 line 135 lon: 99.753937
    test 1209 line 135 fb: 89.074642
    test 1210 line 135 lat2: -73.345839080078
    test 1211 line 135 lon2: 99.753937450114
    test 1212 line 135 azi2: 89.074641755279
    test 1213 line 135 lat2: -73.345839080078
    test 1214 line 135 lon2: 99.753937450114
    test 1215 line 135 azi2: 89.074641755279
    test 1216 line 136 lat: -58.777033
    test 1217 line 136 lon: 161.963990
    test 1218 line 136 fb: 21.998889
    test 1219 line 136 lat2: -58.777033293076
    test 1220 line 136 lon2: 161.963989905489
    test 1221 line 136 azi2: 21.998888971548
    test 1222 line 136 lat2: -58.777033293076
    test 1223 line 136 lon2: 161.963989905489
    test 1224 line 136 azi2: 21.998888971548
    test 1225 line 137 lat: 5.093069
    test 1226 line 137 lon: 53.687921
    test 1227 line 137 fb: 124.015842
    test 1228 line 137 lat2: 5.093068996651
    test 1229 line 137 lon2: 53.687921438754
    test 1230 line 137 azi2: 124.015842231205
    test 1231 line 137 lat2: 5.093068996651
    test 1232 line 137 lon2: 53.687921438754
    test 1233 line 137 azi2: 124.015842231205
    test 1234 line 138 lat: 35.659489
    test 1235 line 138 lon: 111.729315
    test 1236 line 138 fb: 133.697281
    test 1237 line 138 lat2: 35.659488664161
    test 1238 line 138 lon2: 111.729315023485
    test 1239 line 138 azi2: 133.697281357224
    test 1240 line 138 lat2: 35.659488664161
    test 1241 line 138 lon2: 111.729315023485
    test 1242 line 138 azi2: 133.697281357224
    test 1243 line 139 lat: -24.330784
    test 1244 line 139 lon: 71.666568
    test 1245 line 139 fb: 106.278062
    test 1246 line 139 lat2: -24.330783755994
    test 1247 line 139 lon2: 71.666567863169  FAILED, KNOWN, expected 71.666567863170
    test 1248 line 139 azi2: 106.278062394907
    test 1249 line 139 lat2: -24.330783755994
    test 1250 line 139 lon2: 71.666567863170
    test 1251 line 139 azi2: 106.278062394907
    test 1252 line 140 lat: -46.218742
    test 1253 line 140 lon: 91.580078
    test 1254 line 140 fb: 106.279111
    test 1255 line 140 lat2: -46.218742288678
    test 1256 line 140 lon2: 91.580077788700
    test 1257 line 140 azi2: 106.279110700398
    test 1258 line 140 lat2: -46.218742288678
    test 1259 line 140 lon2: 91.580077788700
    test 1260 line 140 azi2: 106.279110700398
    test 1261 line 141 lat: 50.143353
    test 1262 line 141 lon: 101.322503
    test 1263 line 141 fb: 154.314496
    test 1264 line 141 lat2: 50.143352562968
    test 1265 line 141 lon2: 101.322502529615
    test 1266 line 141 azi2: 154.314496467352
    test 1267 line 141 lat2: 50.143352562968
    test 1268 line 141 lon2: 101.322502529615
    test 1269 line 141 azi2: 154.314496467352
    test 1270 line 142 lat: -16.604376
    test 1271 line 142 lon: 134.279201
    test 1272 line 142 fb: 106.895990
    test 1273 line 142 lat2: -16.604375537699
    test 1274 line 142 lon2: 134.279201209117
    test 1275 line 142 azi2: 106.895989785632
    test 1276 line 142 lat2: -16.604375537699
    test 1277 line 142 lon2: 134.279201209117
    test 1278 line 142 azi2: 106.895989785632
    test 1279 line 143 lat: 54.031290
    test 1280 line 143 lon: 144.862702
    test 1281 line 143 fb: 152.937010
    test 1282 line 143 lat2: 54.031289901242
    test 1283 line 143 lon2: 144.862701667601
    test 1284 line 143 azi2: 152.937009701639
    test 1285 line 143 lat2: 54.031289901242
    test 1286 line 143 lon2: 144.862701667601
    test 1287 line 143 azi2: 152.937009701639
    test 1288 line 144 lat: 0.616911
    test 1289 line 144 lon: 110.974662
    test 1290 line 144 fb: 115.206118
    test 1291 line 144 lat2: 0.616910921892
    test 1292 line 144 lon2: 110.974662272005
    test 1293 line 144 azi2: 115.206118431862
    test 1294 line 144 lat2: 0.616910921892
    test 1295 line 144 lon2: 110.974662272005
    test 1296 line 144 azi2: 115.206118431862
    test 1297 line 145 lat: -6.243779
    test 1298 line 145 lon: 175.658895
    test 1299 line 145 fb: 177.520147
    test 1300 line 145 lat2: -6.243779047728
    test 1301 line 145 lon2: 175.658894820006
    test 1302 line 145 azi2: 177.520147377315
    test 1303 line 145 lat2: -6.243779047728
    test 1304 line 145 lon2: 175.658894820006
    test 1305 line 145 azi2: 177.520147377315
    test 1306 line 146 lat: -70.416699
    test 1307 line 146 lon: 169.642468
    test 1308 line 146 fb: 11.978943
    test 1309 line 146 lat2: -70.416698815769
    test 1310 line 146 lon2: 169.642468357274
    test 1311 line 146 azi2: 11.978943348082
    test 1312 line 146 lat2: -70.416698815769
    test 1313 line 146 lon2: 169.642468357274
    test 1314 line 146 azi2: 11.978943348082
    test 1315 line 147 lat: 19.558617
    test 1316 line 147 lon: 88.645709
    test 1317 line 147 fb: 113.578814
    test 1318 line 147 lat2: 19.558616692495
    test 1319 line 147 lon2: 88.645708539223
    test 1320 line 147 azi2: 113.578814362497
    test 1321 line 147 lat2: 19.558616692495
    test 1322 line 147 lon2: 88.645708539223
    test 1323 line 147 azi2: 113.578814362497
    test 1324 line 148 lat: -23.555114
    test 1325 line 148 lon: 162.457529
    test 1326 line 148 fb: 147.104331
    test 1327 line 148 lat2: -23.555114207892
    test 1328 line 148 lon2: 162.457529431664
    test 1329 line 148 azi2: 147.104330772141
    test 1330 line 148 lat2: -23.555114207892
    test 1331 line 148 lon2: 162.457529431664
    test 1332 line 148 azi2: 147.104330772141
    test 1333 line 149 lat: -51.275738
    test 1334 line 149 lon: 103.747943
    test 1335 line 149 fb: 115.235374
    test 1336 line 149 lat2: -51.275737933996
    test 1337 line 149 lon2: 103.747943009536
    test 1338 line 149 azi2: 115.235373813929
    test 1339 line 149 lat2: -51.275737933996
    test 1340 line 149 lon2: 103.747943009536
    test 1341 line 149 azi2: 115.235373813929
    test 1342 line 150 lat: 25.374602
    test 1343 line 150 lon: 143.135783
    test 1344 line 150 fb: 126.548735
    test 1345 line 150 lat2: 25.374601552526
    test 1346 line 150 lon2: 143.135783283239
    test 1347 line 150 azi2: 126.548735117003
    test 1348 line 150 lat2: 25.374601552526
    test 1349 line 150 lon2: 143.135783283239
    test 1350 line 150 azi2: 126.548735117003
    test 1351 line 151 lat: 23.967825
    test 1352 line 151 lon: 153.611116
    test 1353 line 151 fb: 149.714116
    test 1354 line 151 lat2: 23.967824782385
    test 1355 line 151 lon2: 153.611115762587
    test 1356 line 151 azi2: 149.714116426025
    test 1357 line 151 lat2: 23.967824782385
    test 1358 line 151 lon2: 153.611115762587
    test 1359 line 151 azi2: 149.714116426025
    test 1360 line 152 lat: -22.787507
    test 1361 line 152 lon: 111.258647
    test 1362 line 152 fb: 86.335100
    test 1363 line 152 lat2: -22.787506689568
    test 1364 line 152 lon2: 111.258646767306
    test 1365 line 152 azi2: 86.335099650483
    test 1366 line 152 lat2: -22.787506689568
    test 1367 line 152 lon2: 111.258646767306
    test 1368 line 152 azi2: 86.335099650483
    test 1369 line 153 lat: -59.789842
    test 1370 line 153 lon: 114.054983
    test 1371 line 153 fb: 75.612605
    test 1372 line 153 lat2: -59.789841532294
    test 1373 line 153 lon2: 114.054983422255
    test 1374 line 153 azi2: 75.612605242726
    test 1375 line 153 lat2: -59.789841532294
    test 1376 line 153 lon2: 114.054983422255
    test 1377 line 153 azi2: 75.612605242726
    test 1378 line 154 lat: -2.802505
    test 1379 line 154 lon: 126.245955
    test 1380 line 154 fb: 150.100576
    test 1381 line 154 lat2: -2.802505438545
    test 1382 line 154 lon2: 126.245955176418
    test 1383 line 154 azi2: 150.100575968176
    test 1384 line 154 lat2: -2.802505438545
    test 1385 line 154 lon2: 126.245955176418
    test 1386 line 154 azi2: 150.100575968176
    test 1387 line 155 lat: 35.735653
    test 1388 line 155 lon: 102.768725
    test 1389 line 155 fb: 99.024702
    test 1390 line 155 lat2: 35.735653026165
    test 1391 line 155 lon2: 102.768725495110
    test 1392 line 155 azi2: 99.024701978369
    test 1393 line 155 lat2: 35.735653026165
    test 1394 line 155 lon2: 102.768725495110
    test 1395 line 155 azi2: 99.024701978369
    test 1396 line 156 lat: 15.906682
    test 1397 line 156 lon: 117.446654
    test 1398 line 156 fb: 130.449965
    test 1399 line 156 lat2: 15.906681603252
    test 1400 line 156 lon2: 117.446653873860
    test 1401 line 156 azi2: 130.449965412147
    test 1402 line 156 lat2: 15.906681603252
    test 1403 line 156 lon2: 117.446653873860
    test 1404 line 156 azi2: 130.449965412147
    test 1405 line 157 lat: -54.375988
    test 1406 line 157 lon: 33.243363
    test 1407 line 157 fb: 144.361175
    test 1408 line 157 lat2: -54.375987804166
    test 1409 line 157 lon2: 33.243362594038
    test 1410 line 157 azi2: 144.361175098783
    test 1411 line 157 lat2: -54.375987804166
    test 1412 line 157 lon2: 33.243362594038
    test 1413 line 157 azi2: 144.361175098783
    test 1414 line 158 lat: 3.588251
    test 1415 line 158 lon: 156.659583
    test 1416 line 158 fb: 112.153293
    test 1417 line 158 lat2: 3.588250783960
    test 1418 line 158 lon2: 156.659583234995
    test 1419 line 158 azi2: 112.153293017228
    test 1420 line 158 lat2: 3.588250783960
    test 1421 line 158 lon2: 156.659583234995
    test 1422 line 158 azi2: 112.153293017228
    test 1423 line 159 lat: -51.719977
    test 1424 line 159 lon: 134.141061
    test 1425 line 159 fb: 129.170451
    test 1426 line 159 lat2: -51.719977004790
    test 1427 line 159 lon2: 134.141060992499
    test 1428 line 159 azi2: 129.170451102958
    test 1429 line 159 lat2: -51.719977004790
    test 1430 line 159 lon2: 134.141060992499
    test 1431 line 159 azi2: 129.170451102958
    test 1432 line 160 lat: 22.935153
    test 1433 line 160 lon: 109.461291
    test 1434 line 160 fb: 120.676556
    test 1435 line 160 lat2: 22.935153219965
    test 1436 line 160 lon2: 109.461291078917
    test 1437 line 160 azi2: 120.676555897336
    test 1438 line 160 lat2: 22.935153219965
    test 1439 line 160 lon2: 109.461291078917
    test 1440 line 160 azi2: 120.676555897336
    test 1441 line 161 lat: -5.314690
    test 1442 line 161 lon: 70.995225
    test 1443 line 161 fb: 129.681273
    test 1444 line 161 lat2: -5.314689990173
    test 1445 line 161 lon2: 70.995224692450
    test 1446 line 161 azi2: 129.681272635794
    test 1447 line 161 lat2: -5.314689990173
    test 1448 line 161 lon2: 70.995224692450
    test 1449 line 161 azi2: 129.681272635794
    test 1450 line 162 lat: 49.147134
    test 1451 line 162 lon: 16.182514
    test 1452 line 162 fb: 38.926644
    test 1453 line 162 lat2: 49.147133873971
    test 1454 line 162 lon2: 16.182514450690
    test 1455 line 162 azi2: 38.926644196248
    test 1456 line 162 lat2: 49.147133873971
    test 1457 line 162 lon2: 16.182514450690
    test 1458 line 162 azi2: 38.926644196248
    test 1459 line 163 lat: -55.079363
    test 1460 line 163 lon: 93.170898
    test 1461 line 163 fb: 97.017492
    test 1462 line 163 lat2: -55.079363368717
    test 1463 line 163 lon2: 93.170898482121
    test 1464 line 163 azi2: 97.017491592293
    test 1465 line 163 lat2: -55.079363368717
    test 1466 line 163 lon2: 93.170898482121
    test 1467 line 163 azi2: 97.017491592293
    test 1468 line 164 lat: 26.410771
    test 1469 line 164 lon: 109.934003
    test 1470 line 164 fb: 103.660846
    test 1471 line 164 lat2: 26.410770923895
    test 1472 line 164 lon2: 109.934003168641
    test 1473 line 164 azi2: 103.660846029906
    test 1474 line 164 lat2: 26.410770923895
    test 1475 line 164 lon2: 109.934003168641
    test 1476 line 164 azi2: 103.660846029906
    test 1477 line 165 lat: -2.539670
    test 1478 line 165 lon: 138.682325
    test 1479 line 165 fb: 100.016568
    test 1480 line 165 lat2: -2.539669792389
    test 1481 line 165 lon2: 138.682325493918
    test 1482 line 165 azi2: 100.016568432752
    test 1483 line 165 lat2: -2.539669792389
    test 1484 line 165 lon2: 138.682325493918
    test 1485 line 165 azi2: 100.016568432752
    test 1486 line 166 lat: 10.563299
    test 1487 line 166 lon: 50.532119
    test 1488 line 166 fb: 126.356066
    test 1489 line 166 lat2: 10.563299452649
    test 1490 line 166 lon2: 50.532119480076
    test 1491 line 166 azi2: 126.356065708364
    test 1492 line 166 lat2: 10.563299452649
    test 1493 line 166 lon2: 50.532119480076
    test 1494 line 166 azi2: 126.356065708364
    test 1495 line 167 lat: 51.443871
    test 1496 line 167 lon: 88.799162
    test 1497 line 167 fb: 145.239198
    test 1498 line 167 lat2: 51.443871023711
    test 1499 line 167 lon2: 88.799161779253
    test 1500 line 167 azi2: 145.239198135633
    test 1501 line 167 lat2: 51.443871023711
    test 1502 line 167 lon2: 88.799161779253
    test 1503 line 167 azi2: 145.239198135632  FAILED, KNOWN, expected 145.239198135633
    test 1504 line 168 lat: -80.240756
    test 1505 line 168 lon: 170.591261
    test 1506 line 168 fb: 19.402427
    test 1507 line 168 lat2: -80.240756380896
    test 1508 line 168 lon2: 170.591260542730
    test 1509 line 168 azi2: 19.402427357239
    test 1510 line 168 lat2: -80.240756380896
    test 1511 line 168 lon2: 170.591260542730
    test 1512 line 168 azi2: 19.402427357239
    test 1513 line 169 lat: 51.976040
    test 1514 line 169 lon: 165.045244
    test 1515 line 169 fb: 167.962110
    test 1516 line 169 lat2: 51.976039799074
    test 1517 line 169 lon2: 165.045244285456
    test 1518 line 169 azi2: 167.962110268433
    test 1519 line 169 lat2: 51.976039799074
    test 1520 line 169 lon2: 165.045244285456
    test 1521 line 169 azi2: 167.962110268433
    test 1522 line 170 lat: 29.365655
    test 1523 line 170 lon: 91.354349
    test 1524 line 170 fb: 135.101279
    test 1525 line 170 lat2: 29.365654873524
    test 1526 line 170 lon2: 91.354349089561
    test 1527 line 170 azi2: 135.101278715212
    test 1528 line 170 lat2: 29.365654873524
    test 1529 line 170 lon2: 91.354349089561
    test 1530 line 170 azi2: 135.101278715212
    test 1531 line 171 lat: 61.745486
    test 1532 line 171 lon: 142.333199
    test 1533 line 171 fb: 139.666209
    test 1534 line 171 lat2: 61.745485817368
    test 1535 line 171 lon2: 142.333198773096
    test 1536 line 171 azi2: 139.666208757008
    test 1537 line 171 lat2: 61.745485817368
    test 1538 line 171 lon2: 142.333198773096
    test 1539 line 171 azi2: 139.666208757008
    test 1540 line 172 lat: 13.414523
    test 1541 line 172 lon: 39.322993
    test 1542 line 172 fb: 144.276516
    test 1543 line 172 lat2: 13.414522997032
    test 1544 line 172 lon2: 39.322992706733
    test 1545 line 172 azi2: 144.276515542083
    test 1546 line 172 lat2: 13.414522997032
    test 1547 line 172 lon2: 39.322992706733
    test 1548 line 172 azi2: 144.276515542083
    test 1549 line 173 lat: -49.831353
    test 1550 line 173 lon: 72.426738
    test 1551 line 173 fb: 126.251620
    test 1552 line 173 lat2: -49.831353332108
    test 1553 line 173 lon2: 72.426737728887
    test 1554 line 173 azi2: 126.251620412456
    test 1555 line 173 lat2: -49.831353332108
    test 1556 line 173 lon2: 72.426737728887
    test 1557 line 173 azi2: 126.251620412456
    test 1558 line 174 lat: 1.822589
    test 1559 line 174 lon: 53.589208
    test 1560 line 174 fb: 97.925176
    test 1561 line 174 lat2: 1.822589208021
    test 1562 line 174 lon2: 53.589207810481
    test 1563 line 174 azi2: 97.925176229124
    test 1564 line 174 lat2: 1.822589208021
    test 1565 line 174 lon2: 53.589207810481
    test 1566 line 174 azi2: 97.925176229124
    test 1567 line 175 lat: -7.987194
    test 1568 line 175 lon: 49.318809
    test 1569 line 175 fb: 128.386595
    test 1570 line 175 lat2: -7.987193900849
    test 1571 line 175 lon2: 49.318809304076
    test 1572 line 175 azi2: 128.386594768748
    test 1573 line 175 lat2: -7.987193900849
    test 1574 line 175 lon2: 49.318809304076
    test 1575 line 175 azi2: 128.386594768748
    test 1576 line 176 lat: -56.807375
    test 1577 line 176 lon: 4.521802
    test 1578 line 176 fb: 176.806063
    test 1579 line 176 lat2: -56.807375049864
    test 1580 line 176 lon2: 4.521801986353
    test 1581 line 176 azi2: 176.806062785470
    test 1582 line 176 lat2: -56.807375049864
    test 1583 line 176 lon2: 4.521801986353
    test 1584 line 176 azi2: 176.806062785470
    test 1585 line 177 lat: -25.969834
    test 1586 line 177 lon: 64.903749
    test 1587 line 177 fb: 124.103844
    test 1588 line 177 lat2: -25.969833883721
    test 1589 line 177 lon2: 64.903749477059
    test 1590 line 177 azi2: 124.103844353942
    test 1591 line 177 lat2: -25.969833883721
    test 1592 line 177 lon2: 64.903749477059
    test 1593 line 177 azi2: 124.103844353942
    test 1594 line 178 lat: 32.807360
    test 1595 line 178 lon: 65.107962
    test 1596 line 178 fb: 124.577990
    test 1597 line 178 lat2: 32.807359742667
    test 1598 line 178 lon2: 65.107961864983
    test 1599 line 178 azi2: 124.577990419073
    test 1600 line 178 lat2: 32.807359742667
    test 1601 line 178 lon2: 65.107961864983
    test 1602 line 178 azi2: 124.577990419073
    test 1603 line 179 lat: -21.552138
    test 1604 line 179 lon: 102.466022
    test 1605 line 179 fb: 109.640197
    test 1606 line 179 lat2: -21.552137872353
    test 1607 line 179 lon2: 102.466021945025
    test 1608 line 179 azi2: 109.640197455958
    test 1609 line 179 lat2: -21.552137872353
    test 1610 line 179 lon2: 102.466021945025
    test 1611 line 179 azi2: 109.640197455958
    test 1612 line 180 lat: -26.271741
    test 1613 line 180 lon: 158.321581
    test 1614 line 180 fb: 165.993649
    test 1615 line 180 lat2: -26.271741383677
    test 1616 line 180 lon2: 158.321581345077
    test 1617 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1618 line 180 lat2: -26.271741383677
    test 1619 line 180 lon2: 158.321581345077
    test 1620 line 180 azi2: 165.993649158305
    test 1621 line 181 lat: 41.023069
    test 1622 line 181 lon: 155.562542
    test 1623 line 181 fb: 153.407414
    test 1624 line 181 lat2: 41.023069113496
    test 1625 line 181 lon2: 155.562542134179
    test 1626 line 181 azi2: 153.407413608014
    test 1627 line 181 lat2: 41.023069113496
    test 1628 line 181 lon2: 155.562542134179
    test 1629 line 181 azi2: 153.407413608014
    test 1630 line 182 lat: 16.445471
    test 1631 line 182 lon: 165.261461
    test 1632 line 182 fb: 165.424806
    test 1633 line 182 lat2: 16.445470954340
    test 1634 line 182 lon2: 165.261461448873
    test 1635 line 182 azi2: 165.424806257119
    test 1636 line 182 lat2: 16.445470954340
    test 1637 line 182 lon2: 165.261461448873
    test 1638 line 182 azi2: 165.424806257119
    test 1639 line 183 lat: -3.222107
    test 1640 line 183 lon: 84.129727
    test 1641 line 183 fb: 154.083851
    test 1642 line 183 lat2: -3.222107095788
    test 1643 line 183 lon2: 84.129726900596
    test 1644 line 183 azi2: 154.083851495688
    test 1645 line 183 lat2: -3.222107095788
    test 1646 line 183 lon2: 84.129726900596
    test 1647 line 183 azi2: 154.083851495688
    test 1648 line 184 lat: 7.811710
    test 1649 line 184 lon: 123.143308
    test 1650 line 184 fb: 123.998106
    test 1651 line 184 lat2: 7.811709739638
    test 1652 line 184 lon2: 123.143308309660
    test 1653 line 184 azi2: 123.998105582525
    test 1654 line 184 lat2: 7.811709739638
    test 1655 line 184 lon2: 123.143308309660
    test 1656 line 184 azi2: 123.998105582525
    test 1657 line 185 lat: -45.235922
    test 1658 line 185 lon: 129.419283
    test 1659 line 185 fb: 91.493406
    test 1660 line 185 lat2: -45.235922276879
    test 1661 line 185 lon2: 129.419282696458
    test 1662 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1663 line 185 lat2: -45.235922276879
    test 1664 line 185 lon2: 129.419282696458
    test 1665 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1666 line 186 lat: -43.047563
    test 1667 line 186 lon: 121.565541
    test 1668 line 186 fb: 99.850543
    test 1669 line 186 lat2: -43.047563118772
    test 1670 line 186 lon2: 121.565540573788
    test 1671 line 186 azi2: 99.850542926816
    test 1672 line 186 lat2: -43.047563118772
    test 1673 line 186 lon2: 121.565540573788
    test 1674 line 186 azi2: 99.850542926816
    test 1675 line 187 lat: -22.881002
    test 1676 line 187 lon: 159.765030
    test 1677 line 187 fb: 60.474878
    test 1678 line 187 lat2: -22.881001889671
    test 1679 line 187 lon2: 159.765030106650
    test 1680 line 187 azi2: 60.474878214384
    test 1681 line 187 lat2: -22.881001889671
    test 1682 line 187 lon2: 159.765030106650
    test 1683 line 187 azi2: 60.474878214384
    test 1684 line 188 lat: -15.011946
    test 1685 line 188 lon: 55.594746
    test 1686 line 188 fb: 121.838839
    test 1687 line 188 lat2: -15.011946251300
    test 1688 line 188 lon2: 55.594746074667
    test 1689 line 188 azi2: 121.838839080255
    test 1690 line 188 lat2: -15.011946251300
    test 1691 line 188 lon2: 55.594746074667
    test 1692 line 188 azi2: 121.838839080255
    test 1693 line 189 lat: -29.011142
    test 1694 line 189 lon: 0.856639
    test 1695 line 189 fb: 178.744943
    test 1696 line 189 lat2: -29.011142183887
    test 1697 line 189 lon2: 0.856639457160
    test 1698 line 189 azi2: 178.744943180805
    test 1699 line 189 lat2: -29.011142183887
    test 1700 line 189 lon2: 0.856639457160
    test 1701 line 189 azi2: 178.744943180805
    test 1702 line 190 lat: -0.353001
    test 1703 line 190 lon: 48.401255
    test 1704 line 190 fb: 95.612551
    test 1705 line 190 lat2: -0.353000909367
    test 1706 line 190 lon2: 48.401254652488  FAILED, KNOWN, expected 48.401254652487
    test 1707 line 190 azi2: 95.612551044908
    test 1708 line 190 lat2: -0.353000909367
    test 1709 line 190 lon2: 48.401254652487
    test 1710 line 190 azi2: 95.612551044908
    test 1711 line 191 lat: 18.843341
    test 1712 line 191 lon: 105.405456
    test 1713 line 191 fb: 145.215722
    test 1714 line 191 lat2: 18.843340962664
    test 1715 line 191 lon2: 105.405456105476
    test 1716 line 191 azi2: 145.215722323742
    test 1717 line 191 lat2: 18.843340962664
    test 1718 line 191 lon2: 105.405456105476
    test 1719 line 191 azi2: 145.215722323742
    test 1720 line 192 lat: 19.672225
    test 1721 line 192 lon: 64.132980
    test 1722 line 192 fb: 131.894863
    test 1723 line 192 lat2: 19.672224913225
    test 1724 line 192 lon2: 64.132979510420
    test 1725 line 192 azi2: 131.894863434272
    test 1726 line 192 lat2: 19.672224913225
    test 1727 line 192 lon2: 64.132979510420
    test 1728 line 192 azi2: 131.894863434272
    test 1729 line 193 lat: -44.315074
    test 1730 line 193 lon: 132.711860
    test 1731 line 193 fb: 57.236875
    test 1732 line 193 lat2: -44.315073617889
    test 1733 line 193 lon2: 132.711860436437
    test 1734 line 193 azi2: 57.236875169148
    test 1735 line 193 lat2: -44.315073617889
    test 1736 line 193 lon2: 132.711860436437
    test 1737 line 193 azi2: 57.236875169148
    test 1738 line 194 lat: 71.956294
    test 1739 line 194 lon: 23.707587
    test 1740 line 194 fb: 28.235947
    test 1741 line 194 lat2: 71.956293555096
    test 1742 line 194 lon2: 23.707587498943
    test 1743 line 194 azi2: 28.235946630177
    test 1744 line 194 lat2: 71.956293555096
    test 1745 line 194 lon2: 23.707587498943
    test 1746 line 194 azi2: 28.235946630177
    test 1747 line 195 lat: -1.372652
    test 1748 line 195 lon: 37.704231
    test 1749 line 195 fb: 92.737862
    test 1750 line 195 lat2: -1.372652195171
    test 1751 line 195 lon2: 37.704230798676
    test 1752 line 195 azi2: 92.737862264368
    test 1753 line 195 lat2: -1.372652195171
    test 1754 line 195 lon2: 37.704230798676
    test 1755 line 195 azi2: 92.737862264368
    test 1756 line 196 lat: 32.377148
    test 1757 line 196 lon: 148.638709
    test 1758 line 196 fb: 164.415210
    test 1759 line 196 lat2: 32.377147634362
    test 1760 line 196 lon2: 148.638709383249
    test 1761 line 196 azi2: 164.415210005459
    test 1762 line 196 lat2: 32.377147634362
    test 1763 line 196 lon2: 148.638709383249
    test 1764 line 196 azi2: 164.415210005459
    test 1765 line 197 lat: 77.876832
    test 1766 line 197 lon: 86.074591
    test 1767 line 197 fb: 93.017705
    test 1768 line 197 lat2: 77.876831887051
    test 1769 line 197 lon2: 86.074590642864
    test 1770 line 197 azi2: 93.017704501543
    test 1771 line 197 lat2: 77.876831887051
    test 1772 line 197 lon2: 86.074590642864
    test 1773 line 197 azi2: 93.017704501543
    test 1774 line 198 lat: -7.405195
    test 1775 line 198 lon: 11.962469
    test 1776 line 198 fb: 123.788484
    test 1777 line 198 lat2: -7.405194804958
    test 1778 line 198 lon2: 11.962468510681
    test 1779 line 198 azi2: 123.788484407208
    test 1780 line 198 lat2: -7.405194804958
    test 1781 line 198 lon2: 11.962468510681
    test 1782 line 198 azi2: 123.788484407208
    test 1783 line 199 lat: -75.001311
    test 1784 line 199 lon: 173.334144
    test 1785 line 199 fb: 8.916523
    test 1786 line 199 lat2: -75.001310556015
    test 1787 line 199 lon2: 173.334144385512
    test 1788 line 199 azi2: 8.916523271572
    test 1789 line 199 lat2: -75.001310556015
    test 1790 line 199 lon2: 173.334144385512
    test 1791 line 199 azi2: 8.916523271572
    test 1792 line 200 lat: -33.145967
    test 1793 line 200 lon: 32.349241
    test 1794 line 200 fb: 154.035798
    test 1795 line 200 lat2: -33.145966631435
    test 1796 line 200 lon2: 32.349240627001
    test 1797 line 200 azi2: 154.035798269631
    test 1798 line 200 lat2: -33.145966631435
    test 1799 line 200 lon2: 32.349240627001
    test 1800 line 200 azi2: 154.035798269631
    test 1801 line 201 lat: 32.938605
    test 1802 line 201 lon: 98.042857
    test 1803 line 201 fb: 124.954750
    test 1804 line 201 lat2: 32.938605083648
    test 1805 line 201 lon2: 98.042857137838
    test 1806 line 201 azi2: 124.954750401990
    test 1807 line 201 lat2: 32.938605083648
    test 1808 line 201 lon2: 98.042857137838
    test 1809 line 201 azi2: 124.954750401990
    test 1810 line 202 lat: 18.924315
    test 1811 line 202 lon: 20.712136
    test 1812 line 202 fb: 118.058457
    test 1813 line 202 lat2: 18.924314631117
    test 1814 line 202 lon2: 20.712135699713
    test 1815 line 202 azi2: 118.058457437327
    test 1816 line 202 lat2: 18.924314631117
    test 1817 line 202 lon2: 20.712135699713
    test 1818 line 202 azi2: 118.058457437327
    test 1819 line 203 lat: 34.281652
    test 1820 line 203 lon: 66.815398
    test 1821 line 203 fb: 147.693080
    test 1822 line 203 lat2: 34.281652047931
    test 1823 line 203 lon2: 66.815398066147
    test 1824 line 203 azi2: 147.693079659533
    test 1825 line 203 lat2: 34.281652047931
    test 1826 line 203 lon2: 66.815398066147
    test 1827 line 203 azi2: 147.693079659533
    test 1828 line 204 lat: -56.830635
    test 1829 line 204 lon: 2.137046
    test 1830 line 204 fb: 178.041562
    test 1831 line 204 lat2: -56.830634769513
    test 1832 line 204 lon2: 2.137046322217
    test 1833 line 204 azi2: 178.041562126305
    test 1834 line 204 lat2: -56.830634769513
    test 1835 line 204 lon2: 2.137046322217
    test 1836 line 204 azi2: 178.041562126305
    test 1837 line 205 lat: -68.481893
    test 1838 line 205 lon: 107.036720
    test 1839 line 205 fb: 152.384477
    test 1840 line 205 lat2: -68.481892540174
    test 1841 line 205 lon2: 107.036720123074
    test 1842 line 205 azi2: 152.384476595412
    test 1843 line 205 lat2: -68.481892540174
    test 1844 line 205 lon2: 107.036720123074
    test 1845 line 205 azi2: 152.384476595412
    test 1846 line 206 lat: -22.502042
    test 1847 line 206 lon: 171.827566
    test 1848 line 206 fb: 158.834328
    test 1849 line 206 lat2: -22.502042312255
    test 1850 line 206 lon2: 171.827566033608
    test 1851 line 206 azi2: 158.834327972407
    test 1852 line 206 lat2: -22.502042312255
    test 1853 line 206 lon2: 171.827566033608
    test 1854 line 206 azi2: 158.834327972407
    test 1855 line 207 lat: -4.504199
    test 1856 line 207 lon: 138.544338
    test 1857 line 207 fb: 123.633526
    test 1858 line 207 lat2: -4.504199404775
    test 1859 line 207 lon2: 138.544338028736
    test 1860 line 207 azi2: 123.633526406205
    test 1861 line 207 lat2: -4.504199404775
    test 1862 line 207 lon2: 138.544338028736
    test 1863 line 207 azi2: 123.633526406205
    test 1864 line 208 lat: -9.226343
    test 1865 line 208 lon: 120.310050
    test 1866 line 208 fb: 142.789186
    test 1867 line 208 lat2: -9.226343110712
    test 1868 line 208 lon2: 120.310050148004
    test 1869 line 208 azi2: 142.789186422068
    test 1870 line 208 lat2: -9.226343110712
    test 1871 line 208 lon2: 120.310050148004
    test 1872 line 208 azi2: 142.789186422068
    test 1873 line 209 lat: -51.684044
    test 1874 line 209 lon: 137.764140
    test 1875 line 209 fb: 56.844891
    test 1876 line 209 lat2: -51.684044075582
    test 1877 line 209 lon2: 137.764139808689
    test 1878 line 209 azi2: 56.844890846790
    test 1879 line 209 lat2: -51.684044075582
    test 1880 line 209 lon2: 137.764139808689
    test 1881 line 209 azi2: 56.844890846790
    test 1882 line 210 lat: 19.467357
    test 1883 line 210 lon: 93.870087
    test 1884 line 210 fb: 129.125491
    test 1885 line 210 lat2: 19.467357090193
    test 1886 line 210 lon2: 93.870087361293
    test 1887 line 210 azi2: 129.125490840370
    test 1888 line 210 lat2: 19.467357090193
    test 1889 line 210 lon2: 93.870087361293
    test 1890 line 210 azi2: 129.125490840370
    test 1891 line 211 lat: 33.594608
    test 1892 line 211 lon: 58.324143
    test 1893 line 211 fb: 101.975372
    test 1894 line 211 lat2: 33.594607695347
    test 1895 line 211 lon2: 58.324143410893
    test 1896 line 211 azi2: 101.975372004111
    test 1897 line 211 lat2: 33.594607695347
    test 1898 line 211 lon2: 58.324143410893
    test 1899 line 211 azi2: 101.975372004111
    test 1900 line 212 lat: -1.184701
    test 1901 line 212 lon: 92.834285
    test 1902 line 212 fb: 134.201097
    test 1903 line 212 lat2: -1.184701423910
    test 1904 line 212 lon2: 92.834285031504
    test 1905 line 212 azi2: 134.201097217000
    test 1906 line 212 lat2: -1.184701423910
    test 1907 line 212 lon2: 92.834285031504
    test 1908 line 212 azi2: 134.201097217000
    test 1909 line 213 lat: 5.878639
    test 1910 line 213 lon: 90.756173
    test 1911 line 213 fb: 156.936699
    test 1912 line 213 lat2: 5.878638801092
    test 1913 line 213 lon2: 90.756172727682
    test 1914 line 213 azi2: 156.936698928215
    test 1915 line 213 lat2: 5.878638801092
    test 1916 line 213 lon2: 90.756172727682
    test 1917 line 213 azi2: 156.936698928215
    test 1918 line 214 lat: 47.611646
    test 1919 line 214 lon: 131.482218
    test 1920 line 214 fb: 152.077667
    test 1921 line 214 lat2: 47.611646039058
    test 1922 line 214 lon2: 131.482217984255
    test 1923 line 214 azi2: 152.077667341138
    test 1924 line 214 lat2: 47.611646039058
    test 1925 line 214 lon2: 131.482217984255
    test 1926 line 214 azi2: 152.077667341138
    test 1927 line 215 lat: 13.906234
    test 1928 line 215 lon: 115.526238
    test 1929 line 215 fb: 130.769627
    test 1930 line 215 lat2: 13.906233945801
    test 1931 line 215 lon2: 115.526238064488
    test 1932 line 215 azi2: 130.769627488545
    test 1933 line 215 lat2: 13.906233945801
    test 1934 line 215 lon2: 115.526238064488
    test 1935 line 215 azi2: 130.769627488545
    test 1936 line 216 lat: 3.675485
    test 1937 line 216 lon: 80.781862
    test 1938 line 216 fb: 94.188426
    test 1939 line 216 lat2: 3.675485213596
    test 1940 line 216 lon2: 80.781861923838
    test 1941 line 216 azi2: 94.188426367881
    test 1942 line 216 lat2: 3.675485213596
    test 1943 line 216 lon2: 80.781861923838
    test 1944 line 216 azi2: 94.188426367881
    test 1945 line 217 lat: 68.665600
    test 1946 line 217 lon: 21.503123
    test 1947 line 217 fb: 107.667810
    test 1948 line 217 lat2: 68.665599857810
    test 1949 line 217 lon2: 21.503123449290
    test 1950 line 217 azi2: 107.667809564608
    test 1951 line 217 lat2: 68.665599857810
    test 1952 line 217 lon2: 21.503123449290
    test 1953 line 217 azi2: 107.667809564608
    test 1954 line 218 lat: -60.791732
    test 1955 line 218 lon: 82.476063
    test 1956 line 218 fb: 117.665953
    test 1957 line 218 lat2: -60.791732218314
    test 1958 line 218 lon2: 82.476062801971
    test 1959 line 218 azi2: 117.665952598924
    test 1960 line 218 lat2: -60.791732218314
    test 1961 line 218 lon2: 82.476062801971
    test 1962 line 218 azi2: 117.665952598924
    test 1963 line 219 lat: -33.122376
    test 1964 line 219 lon: 89.871476
    test 1965 line 219 fb: 124.068098
    test 1966 line 219 lat2: -33.122375734012
    test 1967 line 219 lon2: 89.871476211443
    test 1968 line 219 azi2: 124.068098444465
    test 1969 line 219 lat2: -33.122375734012
    test 1970 line 219 lon2: 89.871476211443
    test 1971 line 219 azi2: 124.068098444465
    test 1972 line 220 lat: -34.085934
    test 1973 line 220 lon: 117.886549
    test 1974 line 220 fb: 93.366647
    test 1975 line 220 lat2: -34.085934037207
    test 1976 line 220 lon2: 117.886548615401
    test 1977 line 220 azi2: 93.366647127153
    test 1978 line 220 lat2: -34.085934037207
    test 1979 line 220 lon2: 117.886548615401
    test 1980 line 220 azi2: 93.366647127153
    test 1981 line 221 lat: -43.746811
    test 1982 line 221 lon: 107.199939
    test 1983 line 221 fb: 101.218435
    test 1984 line 221 lat2: -43.746811413059
    test 1985 line 221 lon2: 107.199938541143
    test 1986 line 221 azi2: 101.218434581373
    test 1987 line 221 lat2: -43.746811413059
    test 1988 line 221 lon2: 107.199938541143
    test 1989 line 221 azi2: 101.218434581373
    test 1990 line 222 lat: -44.514857
    test 1991 line 222 lon: 19.560361
    test 1992 line 222 fb: 166.449925
    test 1993 line 222 lat2: -44.514857277517
    test 1994 line 222 lon2: 19.560360617266
    test 1995 line 222 azi2: 166.449925135617
    test 1996 line 222 lat2: -44.514857277517
    test 1997 line 222 lon2: 19.560360617266
    test 1998 line 222 azi2: 166.449925135617
    test 1999 line 223 lat: -18.049262
    test 2000 line 223 lon: 42.099193
    test 2001 line 223 fb: 158.127141
    test 2002 line 223 lat2: -18.049261796697
    test 2003 line 223 lon2: 42.099193394607
    test 2004 line 223 azi2: 158.127140901909
    test 2005 line 223 lat2: -18.049261796697
    test 2006 line 223 lon2: 42.099193394607
    test 2007 line 223 azi2: 158.127140901909
    test 2008 line 224 lat: 9.832902
    test 2009 line 224 lon: 51.448057
    test 2010 line 224 fb: 114.348703
    test 2011 line 224 lat2: 9.832901687662
    test 2012 line 224 lon2: 51.448057387281
    test 2013 line 224 azi2: 114.348702917675
    test 2014 line 224 lat2: 9.832901687662
    test 2015 line 224 lon2: 51.448057387281
    test 2016 line 224 azi2: 114.348702917675
    test 2017 line 225 lat: -57.516443
    test 2018 line 225 lon: 64.700933
    test 2019 line 225 fb: 137.459801
    test 2020 line 225 lat2: -57.516443280706
    test 2021 line 225 lon2: 64.700933124813
    test 2022 line 225 azi2: 137.459801078685
    test 2023 line 225 lat2: -57.516443280706
    test 2024 line 225 lon2: 64.700933124813
    test 2025 line 225 azi2: 137.459801078685
    test 2026 line 226 lat: -23.072600
    test 2027 line 226 lon: 95.392602
    test 2028 line 226 fb: 140.119143
    test 2029 line 226 lat2: -23.072599811854
    test 2030 line 226 lon2: 95.392601883769
    test 2031 line 226 azi2: 140.119143469104
    test 2032 line 226 lat2: -23.072599811854
    test 2033 line 226 lon2: 95.392601883769
    test 2034 line 226 azi2: 140.119143469104
    test 2035 line 227 lat: -45.117254
    test 2036 line 227 lon: 97.361647
    test 2037 line 227 fb: 97.339041
    test 2038 line 227 lat2: -45.117253614100
    test 2039 line 227 lon2: 97.361647352714
    test 2040 line 227 azi2: 97.339040559115
    test 2041 line 227 lat2: -45.117253614100
    test 2042 line 227 lon2: 97.361647352714
    test 2043 line 227 azi2: 97.339040559115
    test 2044 line 228 lat: -11.277328
    test 2045 line 228 lon: 19.602358
    test 2046 line 228 fb: 156.779730
    test 2047 line 228 lat2: -11.277328262947
    test 2048 line 228 lon2: 19.602358024471
    test 2049 line 228 azi2: 156.779729902321
    test 2050 line 228 lat2: -11.277328262947
    test 2051 line 228 lon2: 19.602358024471
    test 2052 line 228 azi2: 156.779729902321
    test 2053 line 229 lat: -4.823524
    test 2054 line 229 lon: 164.626842
    test 2055 line 229 fb: 151.314797
    test 2056 line 229 lat2: -4.823524348693
    test 2057 line 229 lon2: 164.626841855534
    test 2058 line 229 azi2: 151.314796841238
    test 2059 line 229 lat2: -4.823524348693
    test 2060 line 229 lon2: 164.626841855534
    test 2061 line 229 azi2: 151.314796841238
    test 2062 line 230 lat: 36.317088
    test 2063 line 230 lon: 89.326155
    test 2064 line 230 fb: 94.589052
    test 2065 line 230 lat2: 36.317087922282
    test 2066 line 230 lon2: 89.326155365943
    test 2067 line 230 azi2: 94.589051951235
    test 2068 line 230 lat2: 36.317087922282
    test 2069 line 230 lon2: 89.326155365943
    test 2070 line 230 azi2: 94.589051951234  FAILED, KNOWN, expected 94.589051951235
    test 2071 line 231 lat: 3.975433
    test 2072 line 231 lon: 105.460359
    test 2073 line 231 fb: 126.257925
    test 2074 line 231 lat2: 3.975432760073
    test 2075 line 231 lon2: 105.460358584149
    test 2076 line 231 azi2: 126.257925455058
    test 2077 line 231 lat2: 3.975432760073
    test 2078 line 231 lon2: 105.460358584149
    test 2079 line 231 azi2: 126.257925455058
    test 2080 line 232 lat: 28.815984
    test 2081 line 232 lon: 89.807394
    test 2082 line 232 fb: 116.984375
    test 2083 line 232 lat2: 28.815983592511
    test 2084 line 232 lon2: 89.807393686834
    test 2085 line 232 azi2: 116.984374981602
    test 2086 line 232 lat2: 28.815983592511
    test 2087 line 232 lon2: 89.807393686834
    test 2088 line 232 azi2: 116.984374981602
    test 2089 line 233 lat: 66.161717
    test 2090 line 233 lon: 63.218655
    test 2091 line 233 fb: 88.869959
    test 2092 line 233 lat2: 66.161716765270
    test 2093 line 233 lon2: 63.218655052918
    test 2094 line 233 azi2: 88.869959091488
    test 2095 line 233 lat2: 66.161716765270
    test 2096 line 233 lon2: 63.218655052918
    test 2097 line 233 azi2: 88.869959091488
    test 2098 line 234 lat: 74.859972
    test 2099 line 234 lon: 53.523361
    test 2100 line 234 fb: 58.125008
    test 2101 line 234 lat2: 74.859971601090
    test 2102 line 234 lon2: 53.523360738831
    test 2103 line 234 azi2: 58.125008091802
    test 2104 line 234 lat2: 74.859971601090
    test 2105 line 234 lon2: 53.523360738831
    test 2106 line 234 azi2: 58.125008091802
    test 2107 line 235 lat: -0.265481
    test 2108 line 235 lon: 79.537677
    test 2109 line 235 fb: 112.945830
    test 2110 line 235 lat2: -0.265481234322
    test 2111 line 235 lon2: 79.537677388981
    test 2112 line 235 azi2: 112.945829781102
    test 2113 line 235 lat2: -0.265481234322
    test 2114 line 235 lon2: 79.537677388981
    test 2115 line 235 azi2: 112.945829781102
    test 2116 line 236 lat: -12.099598
    test 2117 line 236 lon: 155.371356
    test 2118 line 236 fb: 76.454292
    test 2119 line 236 lat2: -12.099598021004
    test 2120 line 236 lon2: 155.371356164845
    test 2121 line 236 azi2: 76.454291606612
    test 2122 line 236 lat2: -12.099598021004
    test 2123 line 236 lon2: 155.371356164845
    test 2124 line 236 azi2: 76.454291606612
    test 2125 line 237 lat: -6.746465
    test 2126 line 237 lon: 19.102484
    test 2127 line 237 fb: 149.342236
    test 2128 line 237 lat2: -6.746464854112
    test 2129 line 237 lon2: 19.102484309526
    test 2130 line 237 azi2: 149.342236428405
    test 2131 line 237 lat2: -6.746464854112
    test 2132 line 237 lon2: 19.102484309526
    test 2133 line 237 azi2: 149.342236428405
    test 2134 line 238 lat: 0.663830
    test 2135 line 238 lon: 101.295721
    test 2136 line 238 fb: 133.862626
    test 2137 line 238 lat2: 0.663830251510
    test 2138 line 238 lon2: 101.295720736944
    test 2139 line 238 azi2: 133.862626019473
    test 2140 line 238 lat2: 0.663830251510
    test 2141 line 238 lon2: 101.295720736944
    test 2142 line 238 azi2: 133.862626019473
    test 2143 line 239 lat: -61.764624
    test 2144 line 239 lon: 148.537522
    test 2145 line 239 fb: 149.298772
    test 2146 line 239 lat2: -61.764623993813
    test 2147 line 239 lon2: 148.537521922087
    test 2148 line 239 azi2: 149.298771734214
    test 2149 line 239 lat2: -61.764623993813
    test 2150 line 239 lon2: 148.537521922087
    test 2151 line 239 azi2: 149.298771734214
    test 2152 line 240 lat: 14.505122
    test 2153 line 240 lon: 111.665519
    test 2154 line 240 fb: 97.740222
    test 2155 line 240 lat2: 14.505121777043
    test 2156 line 240 lon2: 111.665518774379
    test 2157 line 240 azi2: 97.740221959573
    test 2158 line 240 lat2: 14.505121777043
    test 2159 line 240 lon2: 111.665518774379
    test 2160 line 240 azi2: 97.740221959573
    test 2161 line 241 lat: -24.713205
    test 2162 line 241 lon: 34.159384
    test 2163 line 241 fb: 125.866132
    test 2164 line 241 lat2: -24.713205327375
    test 2165 line 241 lon2: 34.159384140577
    test 2166 line 241 azi2: 125.866132443875
    test 2167 line 241 lat2: -24.713205327375
    test 2168 line 241 lon2: 34.159384140577
    test 2169 line 241 azi2: 125.866132443875
    test 2170 line 242 lat: 50.480262
    test 2171 line 242 lon: 42.263850
    test 2172 line 242 fb: 153.395659
    test 2173 line 242 lat2: 50.480261762893
    test 2174 line 242 lon2: 42.263849601327
    test 2175 line 242 azi2: 153.395658919028
    test 2176 line 242 lat2: 50.480261762893
    test 2177 line 242 lon2: 42.263849601327
    test 2178 line 242 azi2: 153.395658919028
    test 2179 line 243 lat: 11.787247
    test 2180 line 243 lon: 49.506460
    test 2181 line 243 fb: 120.836778
    test 2182 line 243 lat2: 11.787247309610
    test 2183 line 243 lon2: 49.506459509702
    test 2184 line 243 azi2: 120.836778496206
    test 2185 line 243 lat2: 11.787247309610
    test 2186 line 243 lon2: 49.506459509702
    test 2187 line 243 azi2: 120.836778496206
    test 2188 line 244 lat: -19.956674
    test 2189 line 244 lon: 14.599479
    test 2190 line 244 fb: 177.883855
    test 2191 line 244 lat2: -19.956673621927
    test 2192 line 244 lon2: 14.599479227718
    test 2193 line 244 azi2: 177.883855088778
    test 2194 line 244 lat2: -19.956673621927
    test 2195 line 244 lon2: 14.599479227718
    test 2196 line 244 azi2: 177.883855088778
    test 2197 line 245 lat: 0.738566
    test 2198 line 245 lon: 12.600972
    test 2199 line 245 fb: 176.085445
    test 2200 line 245 lat2: 0.738565517815
    test 2201 line 245 lon2: 12.600972006927
    test 2202 line 245 azi2: 176.085445031797
    test 2203 line 245 lat2: 0.738565517815
    test 2204 line 245 lon2: 12.600972006927
    test 2205 line 245 azi2: 176.085445031797
    test 2206 line 246 lat: 25.799128
    test 2207 line 246 lon: 9.800259
    test 2208 line 246 fb: 166.282764
    test 2209 line 246 lat2: 25.799128425384
    test 2210 line 246 lon2: 9.800259258495
    test 2211 line 246 azi2: 166.282764024264
    test 2212 line 246 lat2: 25.799128425384
    test 2213 line 246 lon2: 9.800259258495
    test 2214 line 246 azi2: 166.282764024264
    test 2215 line 247 lat: -3.897277
    test 2216 line 247 lon: 16.693319
    test 2217 line 247 fb: 168.780736
    test 2218 line 247 lat2: -3.897277132184
    test 2219 line 247 lon2: 16.693318601970
    test 2220 line 247 azi2: 168.780736094343
    test 2221 line 247 lat2: -3.897277132184
    test 2222 line 247 lon2: 16.693318601970
    test 2223 line 247 azi2: 168.780736094343
    test 2224 line 248 lat: 2.479585
    test 2225 line 248 lon: 72.317321
    test 2226 line 248 fb: 126.935932
    test 2227 line 248 lat2: 2.479585385319
    test 2228 line 248 lon2: 72.317321261259
    test 2229 line 248 azi2: 126.935932221711
    test 2230 line 248 lat2: 2.479585385319
    test 2231 line 248 lon2: 72.317321261259
    test 2232 line 248 azi2: 126.935932221711
    test 2233 line 249 lat: -0.836621
    test 2234 line 249 lon: 2.490193
    test 2235 line 249 fb: 150.640498
    test 2236 line 249 lat2: -0.836621274662
    test 2237 line 249 lon2: 2.490192836679
    test 2238 line 249 azi2: 150.640498065221
    test 2239 line 249 lat2: -0.836621274662
    test 2240 line 249 lon2: 2.490192836679
    test 2241 line 249 azi2: 150.640498065221
    test 2242 line 250 lat: -69.098227
    test 2243 line 250 lon: 43.929874
    test 2244 line 250 fb: 143.378404
    test 2245 line 250 lat2: -69.098226894675
    test 2246 line 250 lon2: 43.929873562507
    test 2247 line 250 azi2: 143.378403982035
    test 2248 line 250 lat2: -69.098226894675
    test 2249 line 250 lon2: 43.929873562507
    test 2250 line 250 azi2: 143.378403982035
    test 2251 line 251 lat: 19.156121
    test 2252 line 251 lon: 130.658473
    test 2253 line 251 fb: 136.204475
    test 2254 line 251 lat2: 19.156121137418
    test 2255 line 251 lon2: 130.658473280949
    test 2256 line 251 azi2: 136.204475163250
    test 2257 line 251 lat2: 19.156121137418
    test 2258 line 251 lon2: 130.658473280949
    test 2259 line 251 azi2: 136.204475163250
    test 2260 line 252 lat: 68.881949
    test 2261 line 252 lon: 79.375865
    test 2262 line 252 fb: 99.052732
    test 2263 line 252 lat2: 68.881948915820
    test 2264 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2265 line 252 azi2: 99.052731550675
    test 2266 line 252 lat2: 68.881948915820
    test 2267 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2268 line 252 azi2: 99.052731550675
    test 2269 line 253 lat: -23.509016
    test 2270 line 253 lon: 122.232226
    test 2271 line 253 fb: 90.354604
    test 2272 line 253 lat2: -23.509015988874
    test 2273 line 253 lon2: 122.232226283491
    test 2274 line 253 azi2: 90.354603607380
    test 2275 line 253 lat2: -23.509015988874
    test 2276 line 253 lon2: 122.232226283491
    test 2277 line 253 azi2: 90.354603607380
    test 2278 line 254 lat: -64.950636
    test 2279 line 254 lon: 70.184354
    test 2280 line 254 fb: 122.478937
    test 2281 line 254 lat2: -64.950635804577
    test 2282 line 254 lon2: 70.184354384370
    test 2283 line 254 azi2: 122.478937039089
    test 2284 line 254 lat2: -64.950635804577
    test 2285 line 254 lon2: 70.184354384370
    test 2286 line 254 azi2: 122.478937039089
    test 2287 line 255 lat: 4.931109
    test 2288 line 255 lon: 176.100221
    test 2289 line 255 fb: 175.754221
    test 2290 line 255 lat2: 4.931108669549
    test 2291 line 255 lon2: 176.100220910178
    test 2292 line 255 azi2: 175.754221027085
    test 2293 line 255 lat2: 4.931108669549
    test 2294 line 255 lon2: 176.100220910178
    test 2295 line 255 azi2: 175.754221027085
    test 2296 line 256 lat: -35.503236
    test 2297 line 256 lon: 122.767107
    test 2298 line 256 fb: 94.201020
    test 2299 line 256 lat2: -35.503236005727
    test 2300 line 256 lon2: 122.767107174014
    test 2301 line 256 azi2: 94.201020059324
    test 2302 line 256 lat2: -35.503236005727
    test 2303 line 256 lon2: 122.767107174014
    test 2304 line 256 azi2: 94.201020059324
    test 2305 line 257 lat: 58.728016
    test 2306 line 257 lon: 76.607531
    test 2307 line 257 fb: 114.353509
    test 2308 line 257 lat2: 58.728016150448
    test 2309 line 257 lon2: 76.607530844045
    test 2310 line 257 azi2: 114.353508957613
    test 2311 line 257 lat2: 58.728016150448
    test 2312 line 257 lon2: 76.607530844045
    test 2313 line 257 azi2: 114.353508957613
    test 2314 line 258 lat: 13.725793
    test 2315 line 258 lon: 60.384503
    test 2316 line 258 fb: 102.783242
    test 2317 line 258 lat2: 13.725792757601
    test 2318 line 258 lon2: 60.384502867486
    test 2319 line 258 azi2: 102.783241874789
    test 2320 line 258 lat2: 13.725792757601
    test 2321 line 258 lon2: 60.384502867486
    test 2322 line 258 azi2: 102.783241874789
    test 2323 line 259 lat: 40.298524
    test 2324 line 259 lon: 59.957993
    test 2325 line 259 fb: 90.056366
    test 2326 line 259 lat2: 40.298523592677
    test 2327 line 259 lon2: 59.957993458231
    test 2328 line 259 azi2: 90.056365696933
    test 2329 line 259 lat2: 40.298523592677
    test 2330 line 259 lon2: 59.957993458231
    test 2331 line 259 azi2: 90.056365696933
    test 2332 line 260 lat: 21.526222
    test 2333 line 260 lon: 19.836420
    test 2334 line 260 fb: 89.081274
    test 2335 line 260 lat2: 21.526221960544
    test 2336 line 260 lon2: 19.836419824899
    test 2337 line 260 azi2: 89.081274273400
    test 2338 line 260 lat2: 21.526221960544
    test 2339 line 260 lon2: 19.836419824899
    test 2340 line 260 azi2: 89.081274273400
    test 2341 line 261 lat: -65.269872
    test 2342 line 261 lon: 134.049515
    test 2343 line 261 fb: 54.613515
    test 2344 line 261 lat2: -65.269872123888
    test 2345 line 261 lon2: 134.049514626723
    test 2346 line 261 azi2: 54.613514542799
    test 2347 line 261 lat2: -65.269872123888
    test 2348 line 261 lon2: 134.049514626723
    test 2349 line 261 azi2: 54.613514542799
    test 2350 line 262 lat: -47.687068
    test 2351 line 262 lon: 86.855941
    test 2352 line 262 fb: 115.133532
    test 2353 line 262 lat2: -47.687068378110
    test 2354 line 262 lon2: 86.855941174728
    test 2355 line 262 azi2: 115.133531572693
    test 2356 line 262 lat2: -47.687068378110
    test 2357 line 262 lon2: 86.855941174728
    test 2358 line 262 azi2: 115.133531572693
    test 2359 line 263 lat: -56.637273
    test 2360 line 263 lon: 158.001121
    test 2361 line 263 fb: 35.013276
    test 2362 line 263 lat2: -56.637272907294
    test 2363 line 263 lon2: 158.001120751267
    test 2364 line 263 azi2: 35.013276119319
    test 2365 line 263 lat2: -56.637272907294
    test 2366 line 263 lon2: 158.001120751267
    test 2367 line 263 azi2: 35.013276119319
    test 2368 line 264 lat: 6.880772
    test 2369 line 264 lon: 36.289125
    test 2370 line 264 fb: 144.499557
    test 2371 line 264 lat2: 6.880771895178
    test 2372 line 264 lon2: 36.289124705135
    test 2373 line 264 azi2: 144.499557452454
    test 2374 line 264 lat2: 6.880771895178
    test 2375 line 264 lon2: 36.289124705135
    test 2376 line 264 azi2: 144.499557452454
    test 2377 line 265 lat: 59.205527
    test 2378 line 265 lon: 115.787268
    test 2379 line 265 fb: 116.793619
    test 2380 line 265 lat2: 59.205526512430
    test 2381 line 265 lon2: 115.787267608171
    test 2382 line 265 azi2: 116.793618855456
    test 2383 line 265 lat2: 59.205526512430
    test 2384 line 265 lon2: 115.787267608171
    test 2385 line 265 azi2: 116.793618855456
    test 2386 line 266 lat: 29.463206
    test 2387 line 266 lon: 68.742710
    test 2388 line 266 fb: 113.906069
    test 2389 line 266 lat2: 29.463206450868
    test 2390 line 266 lon2: 68.742710218988
    test 2391 line 266 azi2: 113.906069374400
    test 2392 line 266 lat2: 29.463206450868
    test 2393 line 266 lon2: 68.742710218988
    test 2394 line 266 azi2: 113.906069374400
    test 2395 line 267 lat: 5.507960
    test 2396 line 267 lon: 2.913367
    test 2397 line 267 fb: 175.225892
    test 2398 line 267 lat2: 5.507959555355
    test 2399 line 267 lon2: 2.913367209347
    test 2400 line 267 azi2: 175.225891805562
    test 2401 line 267 lat2: 5.507959555355
    test 2402 line 267 lon2: 2.913367209347
    test 2403 line 267 azi2: 175.225891805562
    test 2404 line 268 lat: 32.568215
    test 2405 line 268 lon: 107.814340
    test 2406 line 268 fb: 126.321687
    test 2407 line 268 lat2: 32.568215067951
    test 2408 line 268 lon2: 107.814340389788
    test 2409 line 268 azi2: 126.321687264203
    test 2410 line 268 lat2: 32.568215067951
    test 2411 line 268 lon2: 107.814340389788
    test 2412 line 268 azi2: 126.321687264203
    test 2413 line 269 lat: 48.941036
    test 2414 line 269 lon: 170.309380
    test 2415 line 269 fb: 170.816057
    test 2416 line 269 lat2: 48.941036400994
    test 2417 line 269 lon2: 170.309379989564
    test 2418 line 269 azi2: 170.816056872564
    test 2419 line 269 lat2: 48.941036400994
    test 2420 line 269 lon2: 170.309379989564
    test 2421 line 269 azi2: 170.816056872564
    test 2422 line 270 lat: 32.657811
    test 2423 line 270 lon: 174.401372
    test 2424 line 270 fb: 173.967029
    test 2425 line 270 lat2: 32.657810935795
    test 2426 line 270 lon2: 174.401372292954
    test 2427 line 270 azi2: 173.967029189838
    test 2428 line 270 lat2: 32.657810935795
    test 2429 line 270 lon2: 174.401372292954
    test 2430 line 270 azi2: 173.967029189838
    test 2431 line 271 lat: -30.959342
    test 2432 line 271 lon: 144.596945
    test 2433 line 271 fb: 157.635539
    test 2434 line 271 lat2: -30.959341511189
    test 2435 line 271 lon2: 144.596944855700
    test 2436 line 271 azi2: 157.635538872114
    test 2437 line 271 lat2: -30.959341511189
    test 2438 line 271 lon2: 144.596944855700
    test 2439 line 271 azi2: 157.635538872114
    test 2440 line 272 lat: 52.180060
    test 2441 line 272 lon: 68.363538
    test 2442 line 272 fb: 82.619820
    test 2443 line 272 lat2: 52.180060488771
    test 2444 line 272 lon2: 68.363538073511
    test 2445 line 272 azi2: 82.619819936898
    test 2446 line 272 lat2: 52.180060488771
    test 2447 line 272 lon2: 68.363538073511
    test 2448 line 272 azi2: 82.619819936898
    test 2449 line 273 lat: -49.230655
    test 2450 line 273 lon: 119.085123
    test 2451 line 273 fb: 81.553785
    test 2452 line 273 lat2: -49.230654785601
    test 2453 line 273 lon2: 119.085122995371
    test 2454 line 273 azi2: 81.553785297210
    test 2455 line 273 lat2: -49.230654785601
    test 2456 line 273 lon2: 119.085122995371
    test 2457 line 273 azi2: 81.553785297210
    test 2458 line 274 lat: 12.315309
    test 2459 line 274 lon: 21.800337
    test 2460 line 274 fb: 86.572317
    test 2461 line 274 lat2: 12.315308710130
    test 2462 line 274 lon2: 21.800336803956
    test 2463 line 274 azi2: 86.572316548512
    test 2464 line 274 lat2: 12.315308710130
    test 2465 line 274 lon2: 21.800336803956
    test 2466 line 274 azi2: 86.572316548512
    test 2467 line 275 lat: 0.074875
    test 2468 line 275 lon: 122.092567
    test 2469 line 275 fb: 93.940324
    test 2470 line 275 lat2: 0.074874782626
    test 2471 line 275 lon2: 122.092567299352
    test 2472 line 275 azi2: 93.940323652996
    test 2473 line 275 lat2: 0.074874782626
    test 2474 line 275 lon2: 122.092567299352
    test 2475 line 275 azi2: 93.940323652996
    test 2476 line 276 lat: -32.420609
    test 2477 line 276 lon: 80.147417
    test 2478 line 276 fb: 123.183256
    test 2479 line 276 lat2: -32.420609134175
    test 2480 line 276 lon2: 80.147416945184
    test 2481 line 276 azi2: 123.183256201588
    test 2482 line 276 lat2: -32.420609134175
    test 2483 line 276 lon2: 80.147416945184
    test 2484 line 276 azi2: 123.183256201588
    test 2485 line 277 lat: 82.600418
    test 2486 line 277 lon: 34.418367
    test 2487 line 277 fb: 35.057122
    test 2488 line 277 lat2: 82.600418456713
    test 2489 line 277 lon2: 34.418367124569
    test 2490 line 277 azi2: 35.057122384192
    test 2491 line 277 lat2: 82.600418456713
    test 2492 line 277 lon2: 34.418367124569
    test 2493 line 277 azi2: 35.057122384192
    test 2494 line 278 lat: 26.274633
    test 2495 line 278 lon: 93.043032
    test 2496 line 278 fb: 114.480069
    test 2497 line 278 lat2: 26.274632977288
    test 2498 line 278 lon2: 93.043031668414
    test 2499 line 278 azi2: 114.480069066657
    test 2500 line 278 lat2: 26.274632977288
    test 2501 line 278 lon2: 93.043031668414
    test 2502 line 278 azi2: 114.480069066657
    test 2503 line 279 lat: 28.433986
    test 2504 line 279 lon: 132.962042
    test 2505 line 279 fb: 118.817242
    test 2506 line 279 lat2: 28.433985598740
    test 2507 line 279 lon2: 132.962041543078
    test 2508 line 279 azi2: 118.817241997246
    test 2509 line 279 lat2: 28.433985598740
    test 2510 line 279 lon2: 132.962041543078
    test 2511 line 279 azi2: 118.817241997246
    test 2512 line 280 lat: 32.426459
    test 2513 line 280 lon: 65.171889
    test 2514 line 280 fb: 113.230923
    test 2515 line 280 lat2: 32.426458512822
    test 2516 line 280 lon2: 65.171889395963
    test 2517 line 280 azi2: 113.230923394172
    test 2518 line 280 lat2: 32.426458512822
    test 2519 line 280 lon2: 65.171889395963
    test 2520 line 280 azi2: 113.230923394172
    test 2521 line 281 lat: 8.427284
    test 2522 line 281 lon: 20.342496
    test 2523 line 281 fb: 140.993359
    test 2524 line 281 lat2: 8.427284359102
    test 2525 line 281 lon2: 20.342496251702
    test 2526 line 281 azi2: 140.993359066103
    test 2527 line 281 lat2: 8.427284359102
    test 2528 line 281 lon2: 20.342496251702
    test 2529 line 281 azi2: 140.993359066103
    test 2530 line 282 lat: -16.412702
    test 2531 line 282 lon: 47.392542
    test 2532 line 282 fb: 167.389705
    test 2533 line 282 lat2: -16.412702228950
    test 2534 line 282 lon2: 47.392541669265
    test 2535 line 282 azi2: 167.389704666322
    test 2536 line 282 lat2: -16.412702228950
    test 2537 line 282 lon2: 47.392541669265
    test 2538 line 282 azi2: 167.389704666322
    test 2539 line 283 lat: -54.082376
    test 2540 line 283 lon: 159.985466
    test 2541 line 283 fb: 56.023710
    test 2542 line 283 lat2: -54.082375801659
    test 2543 line 283 lon2: 159.985465829683
    test 2544 line 283 azi2: 56.023710499162
    test 2545 line 283 lat2: -54.082375801659
    test 2546 line 283 lon2: 159.985465829683
    test 2547 line 283 azi2: 56.023710499162
    test 2548 line 284 lat: 38.704319
    test 2549 line 284 lon: 78.307551
    test 2550 line 284 fb: 106.582126
    test 2551 line 284 lat2: 38.704318557557
    test 2552 line 284 lon2: 78.307550831333
    test 2553 line 284 azi2: 106.582125725743
    test 2554 line 284 lat2: 38.704318557557
    test 2555 line 284 lon2: 78.307550831333
    test 2556 line 284 azi2: 106.582125725743
    test 2557 line 285 lat: 15.206275
    test 2558 line 285 lon: 59.878378
    test 2559 line 285 fb: 114.460428
    test 2560 line 285 lat2: 15.206274688849
    test 2561 line 285 lon2: 59.878378252292
    test 2562 line 285 azi2: 114.460428216582
    test 2563 line 285 lat2: 15.206274688849
    test 2564 line 285 lon2: 59.878378252292
    test 2565 line 285 azi2: 114.460428216582
    test 2566 line 286 lat: -62.789550
    test 2567 line 286 lon: 66.649185
    test 2568 line 286 fb: 119.232672
    test 2569 line 286 lat2: -62.789549909136
    test 2570 line 286 lon2: 66.649184622337
    test 2571 line 286 azi2: 119.232671643971
    test 2572 line 286 lat2: -62.789549909136
    test 2573 line 286 lon2: 66.649184622337
    test 2574 line 286 azi2: 119.232671643971
    test 2575 line 287 lat: 31.235252
    test 2576 line 287 lon: 19.933468
    test 2577 line 287 fb: 145.488470
    test 2578 line 287 lat2: 31.235252170087
    test 2579 line 287 lon2: 19.933467970517
    test 2580 line 287 azi2: 145.488469796544
    test 2581 line 287 lat2: 31.235252170087
    test 2582 line 287 lon2: 19.933467970517
    test 2583 line 287 azi2: 145.488469796544
    test 2584 line 288 lat: 11.983236
    test 2585 line 288 lon: 145.307369
    test 2586 line 288 fb: 151.192641
    test 2587 line 288 lat2: 11.983236088753
    test 2588 line 288 lon2: 145.307368849730
    test 2589 line 288 azi2: 151.192640854621
    test 2590 line 288 lat2: 11.983236088753
    test 2591 line 288 lon2: 145.307368849730
    test 2592 line 288 azi2: 151.192640854621
    test 2593 line 289 lat: 27.629694
    test 2594 line 289 lon: 16.148459
    test 2595 line 289 fb: 63.008012
    test 2596 line 289 lat2: 27.629693628283
    test 2597 line 289 lon2: 16.148459400244
    test 2598 line 289 azi2: 63.008012267521
    test 2599 line 289 lat2: 27.629693628283
    test 2600 line 289 lon2: 16.148459400244
    test 2601 line 289 azi2: 63.008012267521
    test 2602 line 290 lat: 34.077784
    test 2603 line 290 lon: 115.693210
    test 2604 line 290 fb: 112.252264
    test 2605 line 290 lat2: 34.077783768135
    test 2606 line 290 lon2: 115.693209573427
    test 2607 line 290 azi2: 112.252263721679
    test 2608 line 290 lat2: 34.077783768135
    test 2609 line 290 lon2: 115.693209573427
    test 2610 line 290 azi2: 112.252263721679
    test 2611 line 291 lat: 17.100340
    test 2612 line 291 lon: 26.538643
    test 2613 line 291 fb: 131.391925
    test 2614 line 291 lat2: 17.100339523444
    test 2615 line 291 lon2: 26.538642768875
    test 2616 line 291 azi2: 131.391925094902
    test 2617 line 291 lat2: 17.100339523444
    test 2618 line 291 lon2: 26.538642768875
    test 2619 line 291 azi2: 131.391925094902
    test 2620 line 292 lat: -8.128040
    test 2621 line 292 lon: 28.609615
    test 2622 line 292 fb: 144.189095
    test 2623 line 292 lat2: -8.128039572354
    test 2624 line 292 lon2: 28.609615412806
    test 2625 line 292 azi2: 144.189095481788
    test 2626 line 292 lat2: -8.128039572354
    test 2627 line 292 lon2: 28.609615412806
    test 2628 line 292 azi2: 144.189095481788
    test 2629 line 293 lat: 17.307082
    test 2630 line 293 lon: 150.748550
    test 2631 line 293 fb: 172.334611
    test 2632 line 293 lat2: 17.307081581668
    test 2633 line 293 lon2: 150.748549863580
    test 2634 line 293 azi2: 172.334611079260
    test 2635 line 293 lat2: 17.307081581668
    test 2636 line 293 lon2: 150.748549863580
    test 2637 line 293 azi2: 172.334611079260
    test 2638 line 294 lat: 4.135230
    test 2639 line 294 lon: 142.094814
    test 2640 line 294 fb: 170.513214
    test 2641 line 294 lat2: 4.135229575811
    test 2642 line 294 lon2: 142.094814225629
    test 2643 line 294 azi2: 170.513213518678
    test 2644 line 294 lat2: 4.135229575811
    test 2645 line 294 lon2: 142.094814225629
    test 2646 line 294 azi2: 170.513213518678
    test 2647 line 295 lat: -61.544041
    test 2648 line 295 lon: 167.154866
    test 2649 line 295 fb: 51.415676
    test 2650 line 295 lat2: -61.544040804472
    test 2651 line 295 lon2: 167.154866481811
    test 2652 line 295 azi2: 51.415675504866
    test 2653 line 295 lat2: -61.544040804472
    test 2654 line 295 lon2: 167.154866481811
    test 2655 line 295 azi2: 51.415675504866
    test 2656 line 296 lat: 27.782466
    test 2657 line 296 lon: 53.844550
    test 2658 line 296 fb: 78.357665
    test 2659 line 296 lat2: 27.782465760718
    test 2660 line 296 lon2: 53.844549799795
    test 2661 line 296 azi2: 78.357665271795
    test 2662 line 296 lat2: 27.782465760718
    test 2663 line 296 lon2: 53.844549799795
    test 2664 line 296 azi2: 78.357665271795
    test 2665 line 297 lat: -30.157337
    test 2666 line 297 lon: 14.759636
    test 2667 line 297 fb: 157.487063
    test 2668 line 297 lat2: -30.157336788088
    test 2669 line 297 lon2: 14.759635614931
    test 2670 line 297 azi2: 157.487063280783
    test 2671 line 297 lat2: -30.157336788088
    test 2672 line 297 lon2: 14.759635614931
    test 2673 line 297 azi2: 157.487063280783
    test 2674 line 298 lat: -16.819268
    test 2675 line 298 lon: 22.734618
    test 2676 line 298 fb: 167.761663
    test 2677 line 298 lat2: -16.819268371139
    test 2678 line 298 lon2: 22.734618221531
    test 2679 line 298 azi2: 167.761663436059
    test 2680 line 298 lat2: -16.819268371139
    test 2681 line 298 lon2: 22.734618221531
    test 2682 line 298 azi2: 167.761663436059
    test 2683 line 299 lat: 58.190743
    test 2684 line 299 lon: 15.576363
    test 2685 line 299 fb: 71.213972
    test 2686 line 299 lat2: 58.190742593673
    test 2687 line 299 lon2: 15.576363250416
    test 2688 line 299 azi2: 71.213972172079
    test 2689 line 299 lat2: 58.190742593673
    test 2690 line 299 lon2: 15.576363250416
    test 2691 line 299 azi2: 71.213972172079
    test 2692 line 300 lat: 57.214981
    test 2693 line 300 lon: 163.530752
    test 2694 line 300 fb: 162.056064
    test 2695 line 300 lat2: 57.214981133823
    test 2696 line 300 lon2: 163.530751680014
    test 2697 line 300 azi2: 162.056064225923
    test 2698 line 300 lat2: 57.214981133823
    test 2699 line 300 lon2: 163.530751680014
    test 2700 line 300 azi2: 162.056064225923
    test 2701 line 301 lat: 31.811818
    test 2702 line 301 lon: 81.663494
    test 2703 line 301 fb: 112.546404
    test 2704 line 301 lat2: 31.811817748936
    test 2705 line 301 lon2: 81.663494432962
    test 2706 line 301 azi2: 112.546403824977
    test 2707 line 301 lat2: 31.811817748936
    test 2708 line 301 lon2: 81.663494432962
    test 2709 line 301 azi2: 112.546403824977
    test 2710 line 302 lat: -11.315727
    test 2711 line 302 lon: 48.409490
    test 2712 line 302 fb: 121.434574
    test 2713 line 302 lat2: -11.315726799012
    test 2714 line 302 lon2: 48.409489590525
    test 2715 line 302 azi2: 121.434573764585
    test 2716 line 302 lat2: -11.315726799011  FAILED, KNOWN, expected -11.315726799012
    test 2717 line 302 lon2: 48.409489590525
    test 2718 line 302 azi2: 121.434573764585
    test 2719 line 303 lat: 6.119956
    test 2720 line 303 lon: 5.687908
    test 2721 line 303 fb: 94.977171
    test 2722 line 303 lat2: 6.119956010623
    test 2723 line 303 lon2: 5.687908365969
    test 2724 line 303 azi2: 94.977170961146
    test 2725 line 303 lat2: 6.119956010623
    test 2726 line 303 lon2: 5.687908365969
    test 2727 line 303 azi2: 94.977170961146
    test 2728 line 304 lat: -13.455263
    test 2729 line 304 lon: 92.797729
    test 2730 line 304 fb: 125.067595
    test 2731 line 304 lat2: -13.455262906771
    test 2732 line 304 lon2: 92.797729354548
    test 2733 line 304 azi2: 125.067595131171
    test 2734 line 304 lat2: -13.455262906771
    test 2735 line 304 lon2: 92.797729354548
    test 2736 line 304 azi2: 125.067595131171
    test 2737 line 305 lat: -61.258454
    test 2738 line 305 lon: 32.464613
    test 2739 line 305 fb: 153.578300
    test 2740 line 305 lat2: -61.258454070259
    test 2741 line 305 lon2: 32.464613321886
    test 2742 line 305 azi2: 153.578299580216
    test 2743 line 305 lat2: -61.258454070259
    test 2744 line 305 lon2: 32.464613321886
    test 2745 line 305 azi2: 153.578299580216
    test 2746 line 306 lat: 76.656194
    test 2747 line 306 lon: 147.658262
    test 2748 line 306 fb: 154.870277
    test 2749 line 306 lat2: 76.656194303754
    test 2750 line 306 lon2: 147.658261698859
    test 2751 line 306 azi2: 154.870276891567
    test 2752 line 306 lat2: 76.656194303754
    test 2753 line 306 lon2: 147.658261698859
    test 2754 line 306 azi2: 154.870276891567
    test 2755 line 307 lat: 38.020470
    test 2756 line 307 lon: 22.502210
    test 2757 line 307 fb: 164.603876
    test 2758 line 307 lat2: 38.020470355438
    test 2759 line 307 lon2: 22.502210018002
    test 2760 line 307 azi2: 164.603876406614
    test 2761 line 307 lat2: 38.020470355438
    test 2762 line 307 lon2: 22.502210018002
    test 2763 line 307 azi2: 164.603876406614
    test 2764 line 308 lat: -28.475186
    test 2765 line 308 lon: 125.031589
    test 2766 line 308 fb: 71.946314
    test 2767 line 308 lat2: -28.475185707347
    test 2768 line 308 lon2: 125.031589334958
    test 2769 line 308 azi2: 71.946313988393
    test 2770 line 308 lat2: -28.475185707347
    test 2771 line 308 lon2: 125.031589334958
    test 2772 line 308 azi2: 71.946313988393
    test 2773 line 309 lat: 33.123700
    test 2774 line 309 lon: 47.796870
    test 2775 line 309 fb: 66.233041
    test 2776 line 309 lat2: 33.123699771125
    test 2777 line 309 lon2: 47.796870281285
    test 2778 line 309 azi2: 66.233040505915
    test 2779 line 309 lat2: 33.123699771125
    test 2780 line 309 lon2: 47.796870281285
    test 2781 line 309 azi2: 66.233040505915
    test 2782 line 310 lat: 36.967606
    test 2783 line 310 lon: 91.462107
    test 2784 line 310 fb: 113.555931
    test 2785 line 310 lat2: 36.967605507925
    test 2786 line 310 lon2: 91.462107367844
    test 2787 line 310 azi2: 113.555931272414
    test 2788 line 310 lat2: 36.967605507925
    test 2789 line 310 lon2: 91.462107367844
    test 2790 line 310 azi2: 113.555931272414
    test 2791 line 311 lat: -3.784112
    test 2792 line 311 lon: 75.465096
    test 2793 line 311 fb: 146.940895
    test 2794 line 311 lat2: -3.784112064078
    test 2795 line 311 lon2: 75.465096433718
    test 2796 line 311 azi2: 146.940895363525
    test 2797 line 311 lat2: -3.784112064078
    test 2798 line 311 lon2: 75.465096433718
    test 2799 line 311 azi2: 146.940895363525
    test 2800 line 312 lat: 10.772454
    test 2801 line 312 lon: 162.137695
    test 2802 line 312 fb: 176.774643
    test 2803 line 312 lat2: 10.772454234710
    test 2804 line 312 lon2: 162.137694811372
    test 2805 line 312 azi2: 176.774642770857
    test 2806 line 312 lat2: 10.772454234711  FAILED, KNOWN, expected 10.772454234710
    test 2807 line 312 lon2: 162.137694811372
    test 2808 line 312 azi2: 176.774642770857
    test 2809 line 313 lat: 23.928740
    test 2810 line 313 lon: 28.953169
    test 2811 line 313 fb: 143.614710
    test 2812 line 313 lat2: 23.928739648982
    test 2813 line 313 lon2: 28.953169497861
    test 2814 line 313 azi2: 143.614709768381
    test 2815 line 313 lat2: 23.928739648982
    test 2816 line 313 lon2: 28.953169497861
    test 2817 line 313 azi2: 143.614709768381
    test 2818 line 314 lat: 5.199377
    test 2819 line 314 lon: 162.802668
    test 2820 line 314 fb: 146.857520
    test 2821 line 314 lat2: 5.199376594428
    test 2822 line 314 lon2: 162.802668362269
    test 2823 line 314 azi2: 146.857519761344
    test 2824 line 314 lat2: 5.199376594428
    test 2825 line 314 lon2: 162.802668362269
    test 2826 line 314 azi2: 146.857519761344
    test 2827 line 315 lat: 6.285334
    test 2828 line 315 lon: 164.204548
    test 2829 line 315 fb: 159.451359
    test 2830 line 315 lat2: 6.285334322282
    test 2831 line 315 lon2: 164.204548022855
    test 2832 line 315 azi2: 159.451359223111
    test 2833 line 315 lat2: 6.285334322282
    test 2834 line 315 lon2: 164.204548022855
    test 2835 line 315 azi2: 159.451359223111
    test 2836 line 316 lat: -8.151874
    test 2837 line 316 lon: 43.923539
    test 2838 line 316 fb: 121.501273
    test 2839 line 316 lat2: -8.151873580306
    test 2840 line 316 lon2: 43.923539410568
    test 2841 line 316 azi2: 121.501272690158
    test 2842 line 316 lat2: -8.151873580306
    test 2843 line 316 lon2: 43.923539410568
    test 2844 line 316 azi2: 121.501272690158
    test 2845 line 317 lat: 20.145480
    test 2846 line 317 lon: 92.310645
    test 2847 line 317 fb: 97.369333
    test 2848 line 317 lat2: 20.145480383316
    test 2849 line 317 lon2: 92.310644735772
    test 2850 line 317 azi2: 97.369333245027
    test 2851 line 317 lat2: 20.145480383316
    test 2852 line 317 lon2: 92.310644735772
    test 2853 line 317 azi2: 97.369333245027
    test 2854 line 318 lat: 38.715579
    test 2855 line 318 lon: 89.141427
    test 2856 line 318 fb: 100.831087
    test 2857 line 318 lat2: 38.715578802658
    test 2858 line 318 lon2: 89.141426830360
    test 2859 line 318 azi2: 100.831086703170
    test 2860 line 318 lat2: 38.715578802658
    test 2861 line 318 lon2: 89.141426830360
    test 2862 line 318 azi2: 100.831086703170
    test 2863 line 319 lat: -25.760685
    test 2864 line 319 lon: 145.864001
    test 2865 line 319 fb: 142.714674
    test 2866 line 319 lat2: -25.760685020607
    test 2867 line 319 lon2: 145.864001048187
    test 2868 line 319 azi2: 142.714673928912
    test 2869 line 319 lat2: -25.760685020607
    test 2870 line 319 lon2: 145.864001048187
    test 2871 line 319 azi2: 142.714673928912
    test 2872 line 320 lat: 49.387283
    test 2873 line 320 lon: 28.917044
    test 2874 line 320 fb: 61.545235
    test 2875 line 320 lat2: 49.387283074155
    test 2876 line 320 lon2: 28.917043656754
    test 2877 line 320 azi2: 61.545235148403
    test 2878 line 320 lat2: 49.387283074155
    test 2879 line 320 lon2: 28.917043656754
    test 2880 line 320 azi2: 61.545235148403
    test 2881 line 321 lat: 10.120685
    test 2882 line 321 lon: 2.869738
    test 2883 line 321 fb: 176.526916
    test 2884 line 321 lat2: 10.120685293027
    test 2885 line 321 lon2: 2.869737593886
    test 2886 line 321 azi2: 176.526915822865
    test 2887 line 321 lat2: 10.120685293027
    test 2888 line 321 lon2: 2.869737593886
    test 2889 line 321 azi2: 176.526915822865
    test 2890 line 322 lat: 2.463216
    test 2891 line 322 lon: 102.917600
    test 2892 line 322 fb: 170.609004
    test 2893 line 322 lat2: 2.463216066166
    test 2894 line 322 lon2: 102.917599852201
    test 2895 line 322 azi2: 170.609003610639
    test 2896 line 322 lat2: 2.463216066166
    test 2897 line 322 lon2: 102.917599852201
    test 2898 line 322 azi2: 170.609003610639
    test 2899 line 323 lat: 58.201294
    test 2900 line 323 lon: 155.022079
    test 2901 line 323 fb: 153.181269
    test 2902 line 323 lat2: 58.201293688923
    test 2903 line 323 lon2: 155.022079105501
    test 2904 line 323 azi2: 153.181268692773
    test 2905 line 323 lat2: 58.201293688923
    test 2906 line 323 lon2: 155.022079105501
    test 2907 line 323 azi2: 153.181268692773
    test 2908 line 324 lat: 3.089608
    test 2909 line 324 lon: 20.686800
    test 2910 line 324 fb: 144.857820
    test 2911 line 324 lat2: 3.089607756265
    test 2912 line 324 lon2: 20.686800266169
    test 2913 line 324 azi2: 144.857820265585
    test 2914 line 324 lat2: 3.089607756265
    test 2915 line 324 lon2: 20.686800266169
    test 2916 line 324 azi2: 144.857820265585
    test 2917 line 325 lat: 48.232274
    test 2918 line 325 lon: 18.567244
    test 2919 line 325 fb: 24.556438
    test 2920 line 325 lat2: 48.232274219515
    test 2921 line 325 lon2: 18.567244222293
    test 2922 line 325 azi2: 24.556437713520
    test 2923 line 325 lat2: 48.232274219515
    test 2924 line 325 lon2: 18.567244222293
    test 2925 line 325 azi2: 24.556437713520
    test 2926 line 326 lat: 30.265261
    test 2927 line 326 lon: 7.440738
    test 2928 line 326 fb: 142.022972
    test 2929 line 326 lat2: 30.265261486767
    test 2930 line 326 lon2: 7.440737656545
    test 2931 line 326 azi2: 142.022971576270
    test 2932 line 326 lat2: 30.265261486767
    test 2933 line 326 lon2: 7.440737656545
    test 2934 line 326 azi2: 142.022971576270
    test 2935 line 327 lat: -11.166197
    test 2936 line 327 lon: 176.728934
    test 2937 line 327 fb: 24.287273
    test 2938 line 327 lat2: -11.166197413148
    test 2939 line 327 lon2: 176.728933575636
    test 2940 line 327 azi2: 24.287272842989
    test 2941 line 327 lat2: -11.166197413148
    test 2942 line 327 lon2: 176.728933575636
    test 2943 line 327 azi2: 24.287272842989
    test 2944 line 328 lat: 84.645539
    test 2945 line 328 lon: 90.023922
    test 2946 line 328 fb: 92.786262
    test 2947 line 328 lat2: 84.645539196082
    test 2948 line 328 lon2: 90.023922499395
    test 2949 line 328 azi2: 92.786261566827
    test 2950 line 328 lat2: 84.645539196082
    test 2951 line 328 lon2: 90.023922499395
    test 2952 line 328 azi2: 92.786261566828  FAILED, KNOWN, expected 92.786261566827
    test 2953 line 329 lat: 61.618717
    test 2954 line 329 lon: 162.510959
    test 2955 line 329 fb: 160.923940
    test 2956 line 329 lat2: 61.618716728051
    test 2957 line 329 lon2: 162.510958917359
    test 2958 line 329 azi2: 160.923939760553
    test 2959 line 329 lat2: 61.618716728051
    test 2960 line 329 lon2: 162.510958917359
    test 2961 line 329 azi2: 160.923939760553
    test 2962 line 330 lat: 27.643242
    test 2963 line 330 lon: 45.376215
    test 2964 line 330 fb: 147.964522
    test 2965 line 330 lat2: 27.643242341173
    test 2966 line 330 lon2: 45.376215094118
    test 2967 line 330 azi2: 147.964522484664
    test 2968 line 330 lat2: 27.643242341173
    test 2969 line 330 lon2: 45.376215094118
    test 2970 line 330 azi2: 147.964522484664
    test 2971 line 331 lat: 2.218750
    test 2972 line 331 lon: 170.358342
    test 2973 line 331 fb: 141.658474
    test 2974 line 331 lat2: 2.218749985364
    test 2975 line 331 lon2: 170.358342078292
    test 2976 line 331 azi2: 141.658474129787
    test 2977 line 331 lat2: 2.218749985364
    test 2978 line 331 lon2: 170.358342078292
    test 2979 line 331 azi2: 141.658474129787
    test 2980 line 332 lat: 26.019142
    test 2981 line 332 lon: 32.534760
    test 2982 line 332 fb: 128.159784
    test 2983 line 332 lat2: 26.019142329663
    test 2984 line 332 lon2: 32.534760195963
    test 2985 line 332 azi2: 128.159784291645
    test 2986 line 332 lat2: 26.019142329663
    test 2987 line 332 lon2: 32.534760195963
    test 2988 line 332 azi2: 128.159784291645
    test 2989 line 333 lat: 10.049636
    test 2990 line 333 lon: 72.205347
    test 2991 line 333 fb: 143.602160
    test 2992 line 333 lat2: 10.049636247749
    test 2993 line 333 lon2: 72.205346955818
    test 2994 line 333 azi2: 143.602159725306
    test 2995 line 333 lat2: 10.049636247749
    test 2996 line 333 lon2: 72.205346955818
    test 2997 line 333 azi2: 143.602159725306
    test 2998 line 334 lat: -31.030497
    test 2999 line 334 lon: 91.539195
    test 3000 line 334 fb: 109.891398
    test 3001 line 334 lat2: -31.030496743715
    test 3002 line 334 lon2: 91.539195292896
    test 3003 line 334 azi2: 109.891398221790
    test 3004 line 334 lat2: -31.030496743715
    test 3005 line 334 lon2: 91.539195292896
    test 3006 line 334 azi2: 109.891398221790
    test 3007 line 335 lat: 30.113796
    test 3008 line 335 lon: 109.096982
    test 3009 line 335 fb: 146.779343
    test 3010 line 335 lat2: 30.113795853671
    test 3011 line 335 lon2: 109.096981631502
    test 3012 line 335 azi2: 146.779343066541
    test 3013 line 335 lat2: 30.113795853671
    test 3014 line 335 lon2: 109.096981631502
    test 3015 line 335 azi2: 146.779343066541
    test 3016 line 336 lat: -73.967996
    test 3017 line 336 lon: 65.944243
    test 3018 line 336 fb: 120.592999
    test 3019 line 336 lat2: -73.967996185770
    test 3020 line 336 lon2: 65.944242524678
    test 3021 line 336 azi2: 120.592998665529
    test 3022 line 336 lat2: -73.967996185770
    test 3023 line 336 lon2: 65.944242524678
    test 3024 line 336 azi2: 120.592998665529
    test 3025 line 337 lat: 52.211150
    test 3026 line 337 lon: 168.054185
    test 3027 line 337 fb: 172.425992
    test 3028 line 337 lat2: 52.211149755494
    test 3029 line 337 lon2: 168.054184827868
    test 3030 line 337 azi2: 172.425991612467
    test 3031 line 337 lat2: 52.211149755494
    test 3032 line 337 lon2: 168.054184827868
    test 3033 line 337 azi2: 172.425991612467
    test 3034 line 338 lat: -64.497146
    test 3035 line 338 lon: 72.073419
    test 3036 line 338 fb: 114.249129
    test 3037 line 338 lat2: -64.497146189688
    test 3038 line 338 lon2: 72.073418936581
    test 3039 line 338 azi2: 114.249128850219
    test 3040 line 338 lat2: -64.497146189688
    test 3041 line 338 lon2: 72.073418936581
    test 3042 line 338 azi2: 114.249128850219
    test 3043 line 339 lat: -25.711399
    test 3044 line 339 lon: 6.036423
    test 3045 line 339 fb: 169.464098
    test 3046 line 339 lat2: -25.711398997503
    test 3047 line 339 lon2: 6.036423474639
    test 3048 line 339 azi2: 169.464098294263
    test 3049 line 339 lat2: -25.711398997503
    test 3050 line 339 lon2: 6.036423474639
    test 3051 line 339 azi2: 169.464098294263
    test 3052 line 340 lat: 33.904613
    test 3053 line 340 lon: 30.989094
    test 3054 line 340 fb: 124.896016
    test 3055 line 340 lat2: 33.904613360449
    test 3056 line 340 lon2: 30.989094387217
    test 3057 line 340 azi2: 124.896016003640
    test 3058 line 340 lat2: 33.904613360449
    test 3059 line 340 lon2: 30.989094387217
    test 3060 line 340 azi2: 124.896016003640
    test 3061 line 341 lat: -25.053080
    test 3062 line 341 lon: 137.078639
    test 3063 line 341 fb: 115.960750
    test 3064 line 341 lat2: -25.053079543516
    test 3065 line 341 lon2: 137.078638665495
    test 3066 line 341 azi2: 115.960750169086
    test 3067 line 341 lat2: -25.053079543516
    test 3068 line 341 lon2: 137.078638665495
    test 3069 line 341 azi2: 115.960750169086
    test 3070 line 342 lat: 10.298031
    test 3071 line 342 lon: 27.737374
    test 3072 line 342 fb: 142.265457
    test 3073 line 342 lat2: 10.298031202629
    test 3074 line 342 lon2: 27.737373649973
    test 3075 line 342 azi2: 142.265457288483
    test 3076 line 342 lat2: 10.298031202629
    test 3077 line 342 lon2: 27.737373649973
    test 3078 line 342 azi2: 142.265457288483
    test 3079 line 343 lat: -0.738692
    test 3080 line 343 lon: 150.933627
    test 3081 line 343 fb: 174.004688
    test 3082 line 343 lat2: -0.738692377457
    test 3083 line 343 lon2: 150.933627031610
    test 3084 line 343 azi2: 174.004687728765
    test 3085 line 343 lat2: -0.738692377457
    test 3086 line 343 lon2: 150.933627031610
    test 3087 line 343 azi2: 174.004687728765
    test 3088 line 344 lat: 50.619289
    test 3089 line 344 lon: 67.178203
    test 3090 line 344 fb: 105.177353
    test 3091 line 344 lat2: 50.619289349009
    test 3092 line 344 lon2: 67.178203328135
    test 3093 line 344 azi2: 105.177353051107
    test 3094 line 344 lat2: 50.619289349009
    test 3095 line 344 lon2: 67.178203328135
    test 3096 line 344 azi2: 105.177353051107
    test 3097 line 345 lat: -2.127739
    test 3098 line 345 lon: 38.604245
    test 3099 line 345 fb: 118.657849
    test 3100 line 345 lat2: -2.127739360728
    test 3101 line 345 lon2: 38.604245449983
    test 3102 line 345 azi2: 118.657849063154
    test 3103 line 345 lat2: -2.127739360728
    test 3104 line 345 lon2: 38.604245449983
    test 3105 line 345 azi2: 118.657849063154
    test 3106 line 346 lat: 37.188367
    test 3107 line 346 lon: 90.865255
    test 3108 line 346 fb: 104.826548
    test 3109 line 346 lat2: 37.188366752551
    test 3110 line 346 lon2: 90.865255121714
    test 3111 line 346 azi2: 104.826548310924
    test 3112 line 346 lat2: 37.188366752551
    test 3113 line 346 lon2: 90.865255121714
    test 3114 line 346 azi2: 104.826548310924
    test 3115 line 347 lat: 46.019257
    test 3116 line 347 lon: 20.402591
    test 3117 line 347 fb: 31.068588
    test 3118 line 347 lat2: 46.019256998097
    test 3119 line 347 lon2: 20.402590686048
    test 3120 line 347 azi2: 31.068587858373
    test 3121 line 347 lat2: 46.019256998097
    test 3122 line 347 lon2: 20.402590686048
    test 3123 line 347 azi2: 31.068587858373
    test 3124 line 348 lat: 9.023356
    test 3125 line 348 lon: 106.678645
    test 3126 line 348 fb: 141.375490
    test 3127 line 348 lat2: 9.023355647006
    test 3128 line 348 lon2: 106.678645473545
    test 3129 line 348 azi2: 141.375490245645
    test 3130 line 348 lat2: 9.023355647006
    test 3131 line 348 lon2: 106.678645473545
    test 3132 line 348 azi2: 141.375490245645
    test 3133 line 349 lat: -1.321473
    test 3134 line 349 lon: 67.418879
    test 3135 line 349 fb: 105.590913
    test 3136 line 349 lat2: -1.321473235187
    test 3137 line 349 lon2: 67.418878731595
    test 3138 line 349 azi2: 105.590912857546
    test 3139 line 349 lat2: -1.321473235187
    test 3140 line 349 lon2: 67.418878731595
    test 3141 line 349 azi2: 105.590912857546
    test 3142 line 350 lat: 7.459339
    test 3143 line 350 lon: 30.150648
    test 3144 line 350 fb: 109.667752
    test 3145 line 350 lat2: 7.459338626177
    test 3146 line 350 lon2: 30.150648477470
    test 3147 line 350 azi2: 109.667751753912
    test 3148 line 350 lat2: 7.459338626177
    test 3149 line 350 lon2: 30.150648477470
    test 3150 line 350 azi2: 109.667751753912
    test 3151 line 351 lat: 16.344755
    test 3152 line 351 lon: 146.829160
    test 3153 line 351 fb: 128.666192
    test 3154 line 351 lat2: 16.344755038185
    test 3155 line 351 lon2: 146.829159972334
    test 3156 line 351 azi2: 128.666191953616
    test 3157 line 351 lat2: 16.344755038185
    test 3158 line 351 lon2: 146.829159972334
    test 3159 line 351 azi2: 128.666191953616
    test 3160 line 352 lat: -55.785670
    test 3161 line 352 lon: 158.086173
    test 3162 line 352 fb: 33.903277
    test 3163 line 352 lat2: -55.785670347270
    test 3164 line 352 lon2: 158.086173376809
    test 3165 line 352 azi2: 33.903276835071
    test 3166 line 352 lat2: -55.785670347270
    test 3167 line 352 lon2: 158.086173376809
    test 3168 line 352 azi2: 33.903276835071
    test 3169 line 353 lat: -74.409604
    test 3170 line 353 lon: 111.280935
    test 3171 line 353 fb: 78.510830
    test 3172 line 353 lat2: -74.409603561050
    test 3173 line 353 lon2: 111.280934985965
    test 3174 line 353 azi2: 78.510830028461
    test 3175 line 353 lat2: -74.409603561050
    test 3176 line 353 lon2: 111.280934985965
    test 3177 line 353 azi2: 78.510830028461
    test 3178 line 354 lat: 9.922204
    test 3179 line 354 lon: 138.538334
    test 3180 line 354 fb: 125.268473
    test 3181 line 354 lat2: 9.922203731557
    test 3182 line 354 lon2: 138.538333703571
    test 3183 line 354 azi2: 125.268473410634
    test 3184 line 354 lat2: 9.922203731557
    test 3185 line 354 lon2: 138.538333703571
    test 3186 line 354 azi2: 125.268473410634
    test 3187 line 355 lat: -27.082389
    test 3188 line 355 lon: 91.425844
    test 3189 line 355 fb: 153.267616
    test 3190 line 355 lat2: -27.082389068807
    test 3191 line 355 lon2: 91.425843733185
    test 3192 line 355 azi2: 153.267616113653
    test 3193 line 355 lat2: -27.082389068808  FAILED, KNOWN, expected -27.082389068807
    test 3194 line 355 lon2: 91.425843733185
    test 3195 line 355 azi2: 153.267616113653
    test 3196 line 356 lat: 14.627508
    test 3197 line 356 lon: 74.629605
    test 3198 line 356 fb: 159.825211
    test 3199 line 356 lat2: 14.627507744773
    test 3200 line 356 lon2: 74.629604673488
    test 3201 line 356 azi2: 159.825210987464
    test 3202 line 356 lat2: 14.627507744773
    test 3203 line 356 lon2: 74.629604673488
    test 3204 line 356 azi2: 159.825210987464
    test 3205 line 357 lat: 46.941087
    test 3206 line 357 lon: 18.833436
    test 3207 line 357 fb: 63.924917
    test 3208 line 357 lat2: 46.941086934169
    test 3209 line 357 lon2: 18.833435620675
    test 3210 line 357 azi2: 63.924916745148
    test 3211 line 357 lat2: 46.941086934169
    test 3212 line 357 lon2: 18.833435620675
    test 3213 line 357 azi2: 63.924916745148
    test 3214 line 358 lat: 42.371666
    test 3215 line 358 lon: 126.270074
    test 3216 line 358 fb: 117.352107
    test 3217 line 358 lat2: 42.371665615782
    test 3218 line 358 lon2: 126.270074354353
    test 3219 line 358 azi2: 117.352106840236
    test 3220 line 358 lat2: 42.371665615782
    test 3221 line 358 lon2: 126.270074354353
    test 3222 line 358 azi2: 117.352106840236
    test 3223 line 359 lat: 60.888684
    test 3224 line 359 lon: 106.363657
    test 3225 line 359 fb: 108.973271
    test 3226 line 359 lat2: 60.888683732870
    test 3227 line 359 lon2: 106.363656697522
    test 3228 line 359 azi2: 108.973271101790
    test 3229 line 359 lat2: 60.888683732870
    test 3230 line 359 lon2: 106.363656697522
    test 3231 line 359 azi2: 108.973271101790
    test 3232 line 360 lat: 53.972090
    test 3233 line 360 lon: 136.000658
    test 3234 line 360 fb: 138.361589
    test 3235 line 360 lat2: 53.972089572795
    test 3236 line 360 lon2: 136.000657911062
    test 3237 line 360 azi2: 138.361588598638
    test 3238 line 360 lat2: 53.972089572795
    test 3239 line 360 lon2: 136.000657911062
    test 3240 line 360 azi2: 138.361588598638
    test 3241 line 361 lat: 47.850867
    test 3242 line 361 lon: 25.277934
    test 3243 line 361 fb: 71.284668
    test 3244 line 361 lat2: 47.850866585267
    test 3245 line 361 lon2: 25.277933660114
    test 3246 line 361 azi2: 71.284667717290
    test 3247 line 361 lat2: 47.850866585267
    test 3248 line 361 lon2: 25.277933660114
    test 3249 line 361 azi2: 71.284667717290
    test 3250 line 362 lat: 64.280614
    test 3251 line 362 lon: 16.447697
    test 3252 line 362 fb: 35.692750
    test 3253 line 362 lat2: 64.280614171157
    test 3254 line 362 lon2: 16.447696559380
    test 3255 line 362 azi2: 35.692750218622
    test 3256 line 362 lat2: 64.280614171157
    test 3257 line 362 lon2: 16.447696559380
    test 3258 line 362 azi2: 35.692750218622
    test 3259 line 363 lat: -3.339044
    test 3260 line 363 lon: 91.646260
    test 3261 line 363 fb: 95.928001
    test 3262 line 363 lat2: -3.339044133285
    test 3263 line 363 lon2: 91.646260438368
    test 3264 line 363 azi2: 95.928000721064
    test 3265 line 363 lat2: -3.339044133285
    test 3266 line 363 lon2: 91.646260438368
    test 3267 line 363 azi2: 95.928000721064
    test 3268 line 364 lat: -46.029875
    test 3269 line 364 lon: 30.599197
    test 3270 line 364 fb: 146.810525
    test 3271 line 364 lat2: -46.029874698950
    test 3272 line 364 lon2: 30.599196661458
    test 3273 line 364 azi2: 146.810525207719
    test 3274 line 364 lat2: -46.029874698950
    test 3275 line 364 lon2: 30.599196661458
    test 3276 line 364 azi2: 146.810525207719
    test 3277 line 365 lat: 25.605076
    test 3278 line 365 lon: 14.382003
    test 3279 line 365 fb: 116.566847
    test 3280 line 365 lat2: 25.605076391429
    test 3281 line 365 lon2: 14.382002787798
    test 3282 line 365 azi2: 116.566847403824
    test 3283 line 365 lat2: 25.605076391429
    test 3284 line 365 lon2: 14.382002787798
    test 3285 line 365 azi2: 116.566847403824
    test 3286 line 366 lat: -15.052413
    test 3287 line 366 lon: 150.673460
    test 3288 line 366 fb: 64.906721
    test 3289 line 366 lat2: -15.052412502534
    test 3290 line 366 lon2: 150.673460237577
    test 3291 line 366 azi2: 64.906720897603
    test 3292 line 366 lat2: -15.052412502534
    test 3293 line 366 lon2: 150.673460237577
    test 3294 line 366 azi2: 64.906720897603
    test 3295 line 367 lat: -24.631882
    test 3296 line 367 lon: 170.403348
    test 3297 line 367 fb: 38.497784
    test 3298 line 367 lat2: -24.631881773331
    test 3299 line 367 lon2: 170.403348095216
    test 3300 line 367 azi2: 38.497783925432
    test 3301 line 367 lat2: -24.631881773331
    test 3302 line 367 lon2: 170.403348095216
    test 3303 line 367 azi2: 38.497783925432
    test 3304 line 368 lat: 84.347730
    test 3305 line 368 lon: 37.352130
    test 3306 line 368 fb: 38.599794
    test 3307 line 368 lat2: 84.347730272741
    test 3308 line 368 lon2: 37.352130023033
    test 3309 line 368 azi2: 38.599794179850
    test 3310 line 368 lat2: 84.347730272741
    test 3311 line 368 lon2: 37.352130023033
    test 3312 line 368 azi2: 38.599794179850
    test 3313 line 369 lat: 11.680773
    test 3314 line 369 lon: 170.552617
    test 3315 line 369 fb: 174.460436
    test 3316 line 369 lat2: 11.680772997529
    test 3317 line 369 lon2: 170.552617119135
    test 3318 line 369 azi2: 174.460435573783
    test 3319 line 369 lat2: 11.680772997529
    test 3320 line 369 lon2: 170.552617119135
    test 3321 line 369 azi2: 174.460435573783
    test 3322 line 370 lat: -4.129058
    test 3323 line 370 lon: 136.743627
    test 3324 line 370 fb: 142.147604
    test 3325 line 370 lat2: -4.129057873299
    test 3326 line 370 lon2: 136.743626644380
    test 3327 line 370 azi2: 142.147603954035
    test 3328 line 370 lat2: -4.129057873299
    test 3329 line 370 lon2: 136.743626644380
    test 3330 line 370 azi2: 142.147603954035
    test 3331 line 371 lat: 22.191782
    test 3332 line 371 lon: 164.962392
    test 3333 line 371 fb: 163.266967
    test 3334 line 371 lat2: 22.191782097783
    test 3335 line 371 lon2: 164.962391587580
    test 3336 line 371 azi2: 163.266967353376
    test 3337 line 371 lat2: 22.191782097783
    test 3338 line 371 lon2: 164.962391587580
    test 3339 line 371 azi2: 163.266967353376
    test 3340 line 372 lat: -20.517212
    test 3341 line 372 lon: 128.116444
    test 3342 line 372 fb: 110.769757
    test 3343 line 372 lat2: -20.517212185628
    test 3344 line 372 lon2: 128.116443546305
    test 3345 line 372 azi2: 110.769757212730
    test 3346 line 372 lat2: -20.517212185628
    test 3347 line 372 lon2: 128.116443546305
    test 3348 line 372 azi2: 110.769757212730
    test 3349 line 373 lat: -71.269219
    test 3350 line 373 lon: 117.744329
    test 3351 line 373 fb: 81.341006
    test 3352 line 373 lat2: -71.269218648518
    test 3353 line 373 lon2: 117.744328537214
    test 3354 line 373 azi2: 81.341005509003
    test 3355 line 373 lat2: -71.269218648518
    test 3356 line 373 lon2: 117.744328537214
    test 3357 line 373 azi2: 81.341005509003
    test 3358 line 374 lat: -28.381893
    test 3359 line 374 lon: 4.526029
    test 3360 line 374 fb: 176.348678
    test 3361 line 374 lat2: -28.381892766057
    test 3362 line 374 lon2: 4.526028955177
    test 3363 line 374 azi2: 176.348678015377
    test 3364 line 374 lat2: -28.381892766057
    test 3365 line 374 lon2: 4.526028955177
    test 3366 line 374 azi2: 176.348678015377
    test 3367 line 375 lat: -28.786090
    test 3368 line 375 lon: 25.937634
    test 3369 line 375 fb: 147.973102
    test 3370 line 375 lat2: -28.786089606638
    test 3371 line 375 lon2: 25.937634058027
    test 3372 line 375 azi2: 147.973102126478
    test 3373 line 375 lat2: -28.786089606638
    test 3374 line 375 lon2: 25.937634058027
    test 3375 line 375 azi2: 147.973102126478
    test 3376 line 376 lat: -37.872672
    test 3377 line 376 lon: 116.904193
    test 3378 line 376 fb: 88.568636
    test 3379 line 376 lat2: -37.872671755645
    test 3380 line 376 lon2: 116.904192578457
    test 3381 line 376 azi2: 88.568636418662
    test 3382 line 376 lat2: -37.872671755645
    test 3383 line 376 lon2: 116.904192578457
    test 3384 line 376 azi2: 88.568636418662
    test 3385 line 377 lat: -26.321447
    test 3386 line 377 lon: 85.206987
    test 3387 line 377 fb: 112.408109
    test 3388 line 377 lat2: -26.321446841940
    test 3389 line 377 lon2: 85.206986852002  FAILED, KNOWN, expected 85.206986852001
    test 3390 line 377 azi2: 112.408108683681
    test 3391 line 377 lat2: -26.321446841940
    test 3392 line 377 lon2: 85.206986852001
    test 3393 line 377 azi2: 112.408108683681
    test 3394 line 378 lat: -54.824260
    test 3395 line 378 lon: 156.561574
    test 3396 line 378 fb: 45.534810
    test 3397 line 378 lat2: -54.824260467184
    test 3398 line 378 lon2: 156.561573965853
    test 3399 line 378 azi2: 45.534810497878
    test 3400 line 378 lat2: -54.824260467184
    test 3401 line 378 lon2: 156.561573965853
    test 3402 line 378 azi2: 45.534810497878
    test 3403 line 379 lat: -16.423550
    test 3404 line 379 lon: 36.685134
    test 3405 line 379 fb: 149.426790
    test 3406 line 379 lat2: -16.423550298805
    test 3407 line 379 lon2: 36.685133578511
    test 3408 line 379 azi2: 149.426789575292
    test 3409 line 379 lat2: -16.423550298805
    test 3410 line 379 lon2: 36.685133578511
    test 3411 line 379 azi2: 149.426789575292
    test 3412 line 380 lat: -16.806591
    test 3413 line 380 lon: 149.738610
    test 3414 line 380 fb: 108.898472
    test 3415 line 380 lat2: -16.806590952462
    test 3416 line 380 lon2: 149.738610286185
    test 3417 line 380 azi2: 108.898472198507
    test 3418 line 380 lat2: -16.806590952462
    test 3419 line 380 lon2: 149.738610286185
    test 3420 line 380 azi2: 108.898472198507
    test 3421 line 381 lat: 61.200095
    test 3422 line 381 lon: 179.666196
    test 3423 line 381 fb: 179.746894
    test 3424 line 381 lat2: 61.200095175201
    test 3425 line 381 lon2: 179.666196014679
    test 3426 line 381 azi2: 179.746893753530
    test 3427 line 381 lat2: 61.200095175201
    test 3428 line 381 lon2: 179.666196014679
    test 3429 line 381 azi2: 179.746893753530
    test 3430 line 382 lat: 66.474418
    test 3431 line 382 lon: 1.552183
    test 3432 line 382 fb: 2.088868
    test 3433 line 382 lat2: 66.474418401288
    test 3434 line 382 lon2: 1.552183188407
    test 3435 line 382 azi2: 2.088868324926
    test 3436 line 382 lat2: 66.474418401288
    test 3437 line 382 lon2: 1.552183188407
    test 3438 line 382 azi2: 2.088868324926
    test 3439 line 383 lat: -75.177220
    test 3440 line 383 lon: 158.741597
    test 3441 line 383 fb: 24.127094
    test 3442 line 383 lat2: -75.177219719926
    test 3443 line 383 lon2: 158.741596988185
    test 3444 line 383 azi2: 24.127093846134
    test 3445 line 383 lat2: -75.177219719926
    test 3446 line 383 lon2: 158.741596988185
    test 3447 line 383 azi2: 24.127093846134
    test 3448 line 384 lat: 43.592977
    test 3449 line 384 lon: 90.684526
    test 3450 line 384 fb: 91.539242
    test 3451 line 384 lat2: 43.592976578444
    test 3452 line 384 lon2: 90.684525887486
    test 3453 line 384 azi2: 91.539242394540
    test 3454 line 384 lat2: 43.592976578444
    test 3455 line 384 lon2: 90.684525887486
    test 3456 line 384 azi2: 91.539242394541  FAILED, KNOWN, expected 91.539242394540
    test 3457 line 385 lat: -5.075415
    test 3458 line 385 lon: 101.127103
    test 3459 line 385 fb: 107.948022
    test 3460 line 385 lat2: -5.075415464229
    test 3461 line 385 lon2: 101.127103351067
    test 3462 line 385 azi2: 107.948021613622
    test 3463 line 385 lat2: -5.075415464229
    test 3464 line 385 lon2: 101.127103351067
    test 3465 line 385 azi2: 107.948021613622
    test 3466 line 386 lat: 50.406166
    test 3467 line 386 lon: 135.501939
    test 3468 line 386 fb: 162.003144
    test 3469 line 386 lat2: 50.406165949083
    test 3470 line 386 lon2: 135.501938931444
    test 3471 line 386 azi2: 162.003144394969
    test 3472 line 386 lat2: 50.406165949083
    test 3473 line 386 lon2: 135.501938931444
    test 3474 line 386 azi2: 162.003144394969
    test 3475 line 387 lat: -17.207733
    test 3476 line 387 lon: 43.634692
    test 3477 line 387 fb: 136.506793
    test 3478 line 387 lat2: -17.207732564306
    test 3479 line 387 lon2: 43.634692466982
    test 3480 line 387 azi2: 136.506792603897
    test 3481 line 387 lat2: -17.207732564306
    test 3482 line 387 lon2: 43.634692466982
    test 3483 line 387 azi2: 136.506792603897
    test 3484 line 388 lat: -28.917723
    test 3485 line 388 lon: 163.486470
    test 3486 line 388 fb: 38.990274
    test 3487 line 388 lat2: -28.917723347931
    test 3488 line 388 lon2: 163.486470248682
    test 3489 line 388 azi2: 38.990273918754
    test 3490 line 388 lat2: -28.917723347931
    test 3491 line 388 lon2: 163.486470248682
    test 3492 line 388 azi2: 38.990273918754
    test 3493 line 389 lat: -32.592414
    test 3494 line 389 lon: 76.048812
    test 3495 line 389 fb: 98.024249
    test 3496 line 389 lat2: -32.592414472935
    test 3497 line 389 lon2: 76.048812057267
    test 3498 line 389 azi2: 98.024248734062
    test 3499 line 389 lat2: -32.592414472935
    test 3500 line 389 lon2: 76.048812057267
    test 3501 line 389 azi2: 98.024248734062
    test 3502 line 390 lat: 50.602735
    test 3503 line 390 lon: 49.792893
    test 3504 line 390 fb: 110.500761
    test 3505 line 390 lat2: 50.602735331532
    test 3506 line 390 lon2: 49.792893095354
    test 3507 line 390 azi2: 110.500760610103
    test 3508 line 390 lat2: 50.602735331532
    test 3509 line 390 lon2: 49.792893095354
    test 3510 line 390 azi2: 110.500760610103
    test 3511 line 391 lat: -4.912232
    test 3512 line 391 lon: 142.681744
    test 3513 line 391 fb: 119.428358
    test 3514 line 391 lat2: -4.912231564840
    test 3515 line 391 lon2: 142.681743549937
    test 3516 line 391 azi2: 119.428358444443
    test 3517 line 391 lat2: -4.912231564840
    test 3518 line 391 lon2: 142.681743549937
    test 3519 line 391 azi2: 119.428358444443
    test 3520 line 392 lat: -45.213515
    test 3521 line 392 lon: 131.987859
    test 3522 line 392 fb: 96.014100
    test 3523 line 392 lat2: -45.213514932524
    test 3524 line 392 lon2: 131.987859404857
    test 3525 line 392 azi2: 96.014100177112
    test 3526 line 392 lat2: -45.213514932524
    test 3527 line 392 lon2: 131.987859404857
    test 3528 line 392 azi2: 96.014100177112
    test 3529 line 393 lat: -27.151096
    test 3530 line 393 lon: 127.729463
    test 3531 line 393 fb: 85.960623
    test 3532 line 393 lat2: -27.151095883523
    test 3533 line 393 lon2: 127.729463064736
    test 3534 line 393 azi2: 85.960623495334
    test 3535 line 393 lat2: -27.151095883523
    test 3536 line 393 lon2: 127.729463064736
    test 3537 line 393 azi2: 85.960623495334
    test 3538 line 394 lat: 8.000358
    test 3539 line 394 lon: 144.233747
    test 3540 line 394 fb: 142.364017
    test 3541 line 394 lat2: 8.000357843774
    test 3542 line 394 lon2: 144.233746766535
    test 3543 line 394 azi2: 142.364016793767
    test 3544 line 394 lat2: 8.000357843774
    test 3545 line 394 lon2: 144.233746766535
    test 3546 line 394 azi2: 142.364016793767
    test 3547 line 395 lat: -6.431774
    test 3548 line 395 lon: 170.549196
    test 3549 line 395 fb: 122.180851
    test 3550 line 395 lat2: -6.431773707290
    test 3551 line 395 lon2: 170.549196384306
    test 3552 line 395 azi2: 122.180850600243
    test 3553 line 395 lat2: -6.431773707290
    test 3554 line 395 lon2: 170.549196384306
    test 3555 line 395 azi2: 122.180850600243
    test 3556 line 396 lat: 62.834146
    test 3557 line 396 lon: 171.218298
    test 3558 line 396 fb: 175.117433
    test 3559 line 396 lat2: 62.834146216572
    test 3560 line 396 lon2: 171.218297548713
    test 3561 line 396 azi2: 175.117432600362
    test 3562 line 396 lat2: 62.834146216572
    test 3563 line 396 lon2: 171.218297548713
    test 3564 line 396 azi2: 175.117432600362
    test 3565 line 397 lat: 22.902814
    test 3566 line 397 lon: 70.233438
    test 3567 line 397 fb: 120.935912
    test 3568 line 397 lat2: 22.902813652262
    test 3569 line 397 lon2: 70.233438162142
    test 3570 line 397 azi2: 120.935911762169
    test 3571 line 397 lat2: 22.902813652262
    test 3572 line 397 lon2: 70.233438162142
    test 3573 line 397 azi2: 120.935911762169
    test 3574 line 398 lat: 22.584853
    test 3575 line 398 lon: 31.616865
    test 3576 line 398 fb: 107.124038
    test 3577 line 398 lat2: 22.584853282541
    test 3578 line 398 lon2: 31.616864803984
    test 3579 line 398 azi2: 107.124038156545
    test 3580 line 398 lat2: 22.584853282541
    test 3581 line 398 lon2: 31.616864803984
    test 3582 line 398 azi2: 107.124038156545
    test 3583 line 399 lat: 31.269173
    test 3584 line 399 lon: 65.399306
    test 3585 line 399 fb: 151.892600
    test 3586 line 399 lat2: 31.269173344204
    test 3587 line 399 lon2: 65.399305777763
    test 3588 line 399 azi2: 151.892599739667
    test 3589 line 399 lat2: 31.269173344204
    test 3590 line 399 lon2: 65.399305777763
    test 3591 line 399 azi2: 151.892599739667
    test 3592 line 400 lat: 35.519614
    test 3593 line 400 lon: 143.165122
    test 3594 line 400 fb: 161.479891
    test 3595 line 400 lat2: 35.519613515115
    test 3596 line 400 lon2: 143.165121509798
    test 3597 line 400 azi2: 161.479891246031
    test 3598 line 400 lat2: 35.519613515115
    test 3599 line 400 lon2: 143.165121509798
    test 3600 line 400 azi2: 161.479891246031
    test 3601 line 401 lat: -53.741922
    test 3602 line 401 lon: 67.121402
    test 3603 line 401 fb: 130.871188
    test 3604 line 401 lat2: -53.741921506580
    test 3605 line 401 lon2: 67.121402135047
    test 3606 line 401 azi2: 130.871188003209
    test 3607 line 401 lat2: -53.741921506580
    test 3608 line 401 lon2: 67.121402135047
    test 3609 line 401 azi2: 130.871188003209
    test 3610 line 402 lat: 9.046227
    test 3611 line 402 lon: 35.933737
    test 3612 line 402 fb: 175.770789
    test 3613 line 402 lat2: 9.046227267580
    test 3614 line 402 lon2: 35.933736921417
    test 3615 line 402 azi2: 175.770788535406
    test 3616 line 402 lat2: 9.046227267580
    test 3617 line 402 lon2: 35.933736921417
    test 3618 line 402 azi2: 175.770788535406
    test 3619 line 403 lat: 75.917034
    test 3620 line 403 lon: 125.150808
    test 3621 line 403 fb: 135.354467
    test 3622 line 403 lat2: 75.917034235438
    test 3623 line 403 lon2: 125.150808062636
    test 3624 line 403 azi2: 135.354466840051
    test 3625 line 403 lat2: 75.917034235438
    test 3626 line 403 lon2: 125.150808062636
    test 3627 line 403 azi2: 135.354466840051
    test 3628 line 404 lat: -39.724826
    test 3629 line 404 lon: 77.372087
    test 3630 line 404 fb: 111.852577
    test 3631 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3632 line 404 lon2: 77.372086855267
    test 3633 line 404 azi2: 111.852577362108
    test 3634 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3635 line 404 lon2: 77.372086855267
    test 3636 line 404 azi2: 111.852577362108
    test 3637 line 405 lat: 3.917212
    test 3638 line 405 lon: 142.621752
    test 3639 line 405 fb: 124.176952
    test 3640 line 405 lat2: 3.917212154431
    test 3641 line 405 lon2: 142.621751764236
    test 3642 line 405 azi2: 124.176952499321
    test 3643 line 405 lat2: 3.917212154431
    test 3644 line 405 lon2: 142.621751764236
    test 3645 line 405 azi2: 124.176952499321
    test 3646 line 406 lat: 60.230364
    test 3647 line 406 lon: 26.245689
    test 3648 line 406 fb: 48.509486
    test 3649 line 406 lat2: 60.230364486607
    test 3650 line 406 lon2: 26.245688508507
    test 3651 line 406 azi2: 48.509486474608
    test 3652 line 406 lat2: 60.230364486607
    test 3653 line 406 lon2: 26.245688508507
    test 3654 line 406 azi2: 48.509486474608
    test 3655 line 407 lat: 29.597322
    test 3656 line 407 lon: 29.129808
    test 3657 line 407 fb: 79.288539
    test 3658 line 407 lat2: 29.597322070518
    test 3659 line 407 lon2: 29.129807944898
    test 3660 line 407 azi2: 79.288538667829
    test 3661 line 407 lat2: 29.597322070518
    test 3662 line 407 lon2: 29.129807944898
    test 3663 line 407 azi2: 79.288538667829
    test 3664 line 408 lat: -62.913760
    test 3665 line 408 lon: 14.845859
    test 3666 line 408 fb: 165.794536
    test 3667 line 408 lat2: -62.913759669564
    test 3668 line 408 lon2: 14.845859018930
    test 3669 line 408 azi2: 165.794535940950
    test 3670 line 408 lat2: -62.913759669564
    test 3671 line 408 lon2: 14.845859018930
    test 3672 line 408 azi2: 165.794535940950
    test 3673 line 409 lat: 15.360446
    test 3674 line 409 lon: 161.450680
    test 3675 line 409 fb: 164.457024
    test 3676 line 409 lat2: 15.360445685187
    test 3677 line 409 lon2: 161.450680426049
    test 3678 line 409 azi2: 164.457024354600
    test 3679 line 409 lat2: 15.360445685187
    test 3680 line 409 lon2: 161.450680426049
    test 3681 line 409 azi2: 164.457024354600
    test 3682 line 410 lat: -58.330109
    test 3683 line 410 lon: 17.628134
    test 3684 line 410 fb: 161.349788
    test 3685 line 410 lat2: -58.330108507597
    test 3686 line 410 lon2: 17.628133627705
    test 3687 line 410 azi2: 161.349788081184
    test 3688 line 410 lat2: -58.330108507597
    test 3689 line 410 lon2: 17.628133627705
    test 3690 line 410 azi2: 161.349788081184
    test 3691 line 411 lat: -68.514277
    test 3692 line 411 lon: 19.958792
    test 3693 line 411 fb: 162.262811
    test 3694 line 411 lat2: -68.514276940652
    test 3695 line 411 lon2: 19.958792438281
    test 3696 line 411 azi2: 162.262811488702
    test 3697 line 411 lat2: -68.514276940652
    test 3698 line 411 lon2: 19.958792438281
    test 3699 line 411 azi2: 162.262811488702
    test 3700 line 412 lat: -23.686766
    test 3701 line 412 lon: 77.544158
    test 3702 line 412 fb: 97.517041
    test 3703 line 412 lat2: -23.686765736999
    test 3704 line 412 lon2: 77.544158137101
    test 3705 line 412 azi2: 97.517041033585
    test 3706 line 412 lat2: -23.686765736999
    test 3707 line 412 lon2: 77.544158137101
    test 3708 line 412 azi2: 97.517041033585
    test 3709 line 413 lat: -50.843575
    test 3710 line 413 lon: 118.404202
    test 3711 line 413 fb: 75.928950
    test 3712 line 413 lat2: -50.843574559525
    test 3713 line 413 lon2: 118.404202153051
    test 3714 line 413 azi2: 75.928950296488
    test 3715 line 413 lat2: -50.843574559525
    test 3716 line 413 lon2: 118.404202153051
    test 3717 line 413 azi2: 75.928950296488
    test 3718 line 414 lat: 44.438742
    test 3719 line 414 lon: 152.028260
    test 3720 line 414 fb: 156.092336
    test 3721 line 414 lat2: 44.438741945021
    test 3722 line 414 lon2: 152.028260148130
    test 3723 line 414 azi2: 156.092336139519
    test 3724 line 414 lat2: 44.438741945021
    test 3725 line 414 lon2: 152.028260148130
    test 3726 line 414 azi2: 156.092336139519
    test 3727 line 415 lat: 33.820395
    test 3728 line 415 lon: 178.008342
    test 3729 line 415 fb: 177.679586
    test 3730 line 415 lat2: 33.820395378014
    test 3731 line 415 lon2: 178.008341908011
    test 3732 line 415 azi2: 177.679585823345
    test 3733 line 415 lat2: 33.820395378014
    test 3734 line 415 lon2: 178.008341908011
    test 3735 line 415 azi2: 177.679585823345
    test 3736 line 416 lat: 27.506735
    test 3737 line 416 lon: 153.242452
    test 3738 line 416 fb: 150.262824
    test 3739 line 416 lat2: 27.506735286152
    test 3740 line 416 lon2: 153.242452449881
    test 3741 line 416 azi2: 150.262824421351
    test 3742 line 416 lat2: 27.506735286152
    test 3743 line 416 lon2: 153.242452449881
    test 3744 line 416 azi2: 150.262824421351
    test 3745 line 417 lat: -31.250437
    test 3746 line 417 lon: 179.014499
    test 3747 line 417 fb: 178.103046
    test 3748 line 417 lat2: -31.250436707468
    test 3749 line 417 lon2: 179.014498940190
    test 3750 line 417 azi2: 178.103045898455
    test 3751 line 417 lat2: -31.250436707468
    test 3752 line 417 lon2: 179.014498940190
    test 3753 line 417 azi2: 178.103045898455
    test 3754 line 418 lat: 40.341542
    test 3755 line 418 lon: 109.605984
    test 3756 line 418 fb: 105.401958
    test 3757 line 418 lat2: 40.341542234586
    test 3758 line 418 lon2: 109.605984313079
    test 3759 line 418 azi2: 105.401958406556
    test 3760 line 418 lat2: 40.341542234586
    test 3761 line 418 lon2: 109.605984313079
    test 3762 line 418 azi2: 105.401958406556
    test 3763 line 419 lat: 48.318632
    test 3764 line 419 lon: 92.282799
    test 3765 line 419 fb: 111.987482
    test 3766 line 419 lat2: 48.318632112439
    test 3767 line 419 lon2: 92.282799489208
    test 3768 line 419 azi2: 111.987482299261
    test 3769 line 419 lat2: 48.318632112439
    test 3770 line 419 lon2: 92.282799489208
    test 3771 line 419 azi2: 111.987482299261
    test 3772 line 420 lat: 0.675299
    test 3773 line 420 lon: 6.789301
    test 3774 line 420 fb: 164.921926
    test 3775 line 420 lat2: 0.675299289459
    test 3776 line 420 lon2: 6.789300798072
    test 3777 line 420 azi2: 164.921926385405
    test 3778 line 420 lat2: 0.675299289459
    test 3779 line 420 lon2: 6.789300798072
    test 3780 line 420 azi2: 164.921926385405
    test 3781 line 421 lat: 33.232812
    test 3782 line 421 lon: 170.163205
    test 3783 line 421 fb: 175.445424
    test 3784 line 421 lat2: 33.232811536179
    test 3785 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3786 line 421 azi2: 175.445424087910
    test 3787 line 421 lat2: 33.232811536179
    test 3788 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3789 line 421 azi2: 175.445424087910
    test 3790 line 422 lat: 51.425532
    test 3791 line 422 lon: 167.128188
    test 3792 line 422 fb: 169.431307
    test 3793 line 422 lat2: 51.425532151818
    test 3794 line 422 lon2: 167.128188073883
    test 3795 line 422 azi2: 169.431306547043
    test 3796 line 422 lat2: 51.425532151818
    test 3797 line 422 lon2: 167.128188073883
    test 3798 line 422 azi2: 169.431306547043
    test 3799 line 423 lat: 72.043795
    test 3800 line 423 lon: 23.320161
    test 3801 line 423 fb: 85.002463
    test 3802 line 423 lat2: 72.043794732818
    test 3803 line 423 lon2: 23.320160820556
    test 3804 line 423 azi2: 85.002463342037
    test 3805 line 423 lat2: 72.043794732818
    test 3806 line 423 lon2: 23.320160820556
    test 3807 line 423 azi2: 85.002463342037
    test 3808 line 424 lat: 55.279253
    test 3809 line 424 lon: 148.483684
    test 3810 line 424 fb: 155.614243
    test 3811 line 424 lat2: 55.279252586695
    test 3812 line 424 lon2: 148.483684405588
    test 3813 line 424 azi2: 155.614243012977
    test 3814 line 424 lat2: 55.279252586695
    test 3815 line 424 lon2: 148.483684405588
    test 3816 line 424 azi2: 155.614243012977
    test 3817 line 425 lat: 50.054601
    test 3818 line 425 lon: 43.609545
    test 3819 line 425 fb: 100.758451
    test 3820 line 425 lat2: 50.054601019930
    test 3821 line 425 lon2: 43.609545475731
    test 3822 line 425 azi2: 100.758450815354
    test 3823 line 425 lat2: 50.054601019930
    test 3824 line 425 lon2: 43.609545475731
    test 3825 line 425 azi2: 100.758450815354
    test 3826 line 426 lat: 31.194436
    test 3827 line 426 lon: 31.458476
    test 3828 line 426 fb: 92.204244
    test 3829 line 426 lat2: 31.194436445411
    test 3830 line 426 lon2: 31.458476146984
    test 3831 line 426 azi2: 92.204244235305
    test 3832 line 426 lat2: 31.194436445411
    test 3833 line 426 lon2: 31.458476146984
    test 3834 line 426 azi2: 92.204244235305
    test 3835 line 427 lat: 57.758262
    test 3836 line 427 lon: 164.499274
    test 3837 line 427 fb: 162.877999
    test 3838 line 427 lat2: 57.758262113137
    test 3839 line 427 lon2: 164.499274258053
    test 3840 line 427 azi2: 162.877999232894
    test 3841 line 427 lat2: 57.758262113137
    test 3842 line 427 lon2: 164.499274258053
    test 3843 line 427 azi2: 162.877999232894
    test 3844 line 428 lat: 27.006898
    test 3845 line 428 lon: 173.173812
    test 3846 line 428 fb: 177.878074
    test 3847 line 428 lat2: 27.006897756516
    test 3848 line 428 lon2: 173.173811781657
    test 3849 line 428 azi2: 177.878073603766
    test 3850 line 428 lat2: 27.006897756516
    test 3851 line 428 lon2: 173.173811781657
    test 3852 line 428 azi2: 177.878073603766
    test 3853 line 429 lat: -62.917581
    test 3854 line 429 lon: 18.990464
    test 3855 line 429 fb: 169.629168
    test 3856 line 429 lat2: -62.917580953804
    test 3857 line 429 lon2: 18.990464058493
    test 3858 line 429 azi2: 169.629168390979
    test 3859 line 429 lat2: -62.917580953804
    test 3860 line 429 lon2: 18.990464058493
    test 3861 line 429 azi2: 169.629168390979
    test 3862 line 430 lat: -43.128167
    test 3863 line 430 lon: 61.680974
    test 3864 line 430 fb: 135.269008
    test 3865 line 430 lat2: -43.128166633902
    test 3866 line 430 lon2: 61.680974170546
    test 3867 line 430 azi2: 135.269008366092
    test 3868 line 430 lat2: -43.128166633902
    test 3869 line 430 lon2: 61.680974170546
    test 3870 line 430 azi2: 135.269008366092
    test 3871 line 431 lat: -49.314417
    test 3872 line 431 lon: 55.826072
    test 3873 line 431 fb: 131.974574
    test 3874 line 431 lat2: -49.314417365795
    test 3875 line 431 lon2: 55.826071541563
    test 3876 line 431 azi2: 131.974573587520
    test 3877 line 431 lat2: -49.314417365795
    test 3878 line 431 lon2: 55.826071541563
    test 3879 line 431 azi2: 131.974573587520
    test 3880 line 432 lat: -24.322411
    test 3881 line 432 lon: 103.867391
    test 3882 line 432 fb: 139.458674
    test 3883 line 432 lat2: -24.322411486444
    test 3884 line 432 lon2: 103.867391100271
    test 3885 line 432 azi2: 139.458674175181
    test 3886 line 432 lat2: -24.322411486444
    test 3887 line 432 lon2: 103.867391100271
    test 3888 line 432 azi2: 139.458674175181
    test 3889 line 433 lat: -19.557319
    test 3890 line 433 lon: 81.358495
    test 3891 line 433 fb: 134.029610
    test 3892 line 433 lat2: -19.557318635270
    test 3893 line 433 lon2: 81.358494523202
    test 3894 line 433 azi2: 134.029609915778
    test 3895 line 433 lat2: -19.557318635270
    test 3896 line 433 lon2: 81.358494523202
    test 3897 line 433 azi2: 134.029609915778
    test 3898 line 434 lat: 7.830115
    test 3899 line 434 lon: 5.114172
    test 3900 line 434 fb: 175.025641
    test 3901 line 434 lat2: 7.830115253087
    test 3902 line 434 lon2: 5.114172330857
    test 3903 line 434 azi2: 175.025640902819
    test 3904 line 434 lat2: 7.830115253087
    test 3905 line 434 lon2: 5.114172330857
    test 3906 line 434 azi2: 175.025640902819
    test 3907 line 435 lat: -65.834623
    test 3908 line 435 lon: 41.772796
    test 3909 line 435 fb: 143.178050
    test 3910 line 435 lat2: -65.834622858584
    test 3911 line 435 lon2: 41.772796000787
    test 3912 line 435 azi2: 143.178050120951
    test 3913 line 435 lat2: -65.834622858584
    test 3914 line 435 lon2: 41.772796000787
    test 3915 line 435 azi2: 143.178050120951
    test 3916 line 436 lat: -7.997604
    test 3917 line 436 lon: 31.723397
    test 3918 line 436 fb: 153.896388
    test 3919 line 436 lat2: -7.997604143032
    test 3920 line 436 lon2: 31.723396618974
    test 3921 line 436 azi2: 153.896387549518
    test 3922 line 436 lat2: -7.997604143032
    test 3923 line 436 lon2: 31.723396618974
    test 3924 line 436 azi2: 153.896387549518
    test 3925 line 437 lat: -22.173130
    test 3926 line 437 lon: 164.896770
    test 3927 line 437 fb: 152.675597
    test 3928 line 437 lat2: -22.173129586699
    test 3929 line 437 lon2: 164.896770399383
    test 3930 line 437 azi2: 152.675596916021
    test 3931 line 437 lat2: -22.173129586699
    test 3932 line 437 lon2: 164.896770399383
    test 3933 line 437 azi2: 152.675596916021
    test 3934 line 438 lat: 35.085786
    test 3935 line 438 lon: 173.892271
    test 3936 line 438 fb: 171.931231
    test 3937 line 438 lat2: 35.085785799083
    test 3938 line 438 lon2: 173.892270533009
    test 3939 line 438 azi2: 171.931230872910
    test 3940 line 438 lat2: 35.085785799083
    test 3941 line 438 lon2: 173.892270533009
    test 3942 line 438 azi2: 171.931230872910
    test 3943 line 439 lat: -25.378865
    test 3944 line 439 lon: 2.197740
    test 3945 line 439 fb: 178.756775
    test 3946 line 439 lat2: -25.378865450268
    test 3947 line 439 lon2: 2.197739985587
    test 3948 line 439 azi2: 178.756775063163
    test 3949 line 439 lat2: -25.378865450268
    test 3950 line 439 lon2: 2.197739985587
    test 3951 line 439 azi2: 178.756775063163
    test 3952 line 440 lat: -13.782608
    test 3953 line 440 lon: 143.084799
    test 3954 line 440 fb: 141.818572
    test 3955 line 440 lat2: -13.782608118540
    test 3956 line 440 lon2: 143.084798779239
    test 3957 line 440 azi2: 141.818572490275
    test 3958 line 440 lat2: -13.782608118540
    test 3959 line 440 lon2: 143.084798779239
    test 3960 line 440 azi2: 141.818572490275
    test 3961 line 441 lat: -16.657589
    test 3962 line 441 lon: 100.829440
    test 3963 line 441 fb: 94.804409
    test 3964 line 441 lat2: -16.657588778768
    test 3965 line 441 lon2: 100.829440071396
    test 3966 line 441 azi2: 94.804408628371
    test 3967 line 441 lat2: -16.657588778768
    test 3968 line 441 lon2: 100.829440071396
    test 3969 line 441 azi2: 94.804408628371
    test 3970 line 442 lat: 23.629666
    test 3971 line 442 lon: 148.675531
    test 3972 line 442 fb: 169.091767
    test 3973 line 442 lat2: 23.629665922502
    test 3974 line 442 lon2: 148.675530832608
    test 3975 line 442 azi2: 169.091766635020
    test 3976 line 442 lat2: 23.629665922502
    test 3977 line 442 lon2: 148.675530832608
    test 3978 line 442 azi2: 169.091766635020
    test 3979 line 443 lat: 4.022724
    test 3980 line 443 lon: 161.803702
    test 3981 line 443 fb: 141.272785
    test 3982 line 443 lat2: 4.022724409294
    test 3983 line 443 lon2: 161.803702045621
    test 3984 line 443 azi2: 141.272784545678
    test 3985 line 443 lat2: 4.022724409294
    test 3986 line 443 lon2: 161.803702045621
    test 3987 line 443 azi2: 141.272784545678
    test 3988 line 444 lat: 13.280168
    test 3989 line 444 lon: 20.120413
    test 3990 line 444 fb: 158.170551
    test 3991 line 444 lat2: 13.280167579164
    test 3992 line 444 lon2: 20.120413486875
    test 3993 line 444 azi2: 158.170551379189
    test 3994 line 444 lat2: 13.280167579164
    test 3995 line 444 lon2: 20.120413486875
    test 3996 line 444 azi2: 158.170551379189
    test 3997 line 445 lat: -47.521450
    test 3998 line 445 lon: 150.549196
    test 3999 line 445 fb: 44.718791
    test 4000 line 445 lat2: -47.521449956879
    test 4001 line 445 lon2: 150.549196046351
    test 4002 line 445 azi2: 44.718791294775
    test 4003 line 445 lat2: -47.521449956879
    test 4004 line 445 lon2: 150.549196046351
    test 4005 line 445 azi2: 44.718791294775
    test 4006 line 446 lat: 17.790615
    test 4007 line 446 lon: 141.461006
    test 4008 line 446 fb: 115.746784
    test 4009 line 446 lat2: 17.790615163216
    test 4010 line 446 lon2: 141.461005551791
    test 4011 line 446 azi2: 115.746784352318
    test 4012 line 446 lat2: 17.790615163216
    test 4013 line 446 lon2: 141.461005551791
    test 4014 line 446 azi2: 115.746784352318
    test 4015 line 447 lat: -26.519374
    test 4016 line 447 lon: 98.067906
    test 4017 line 447 fb: 113.253929
    test 4018 line 447 lat2: -26.519374288386
    test 4019 line 447 lon2: 98.067906321718
    test 4020 line 447 azi2: 113.253928642653
    test 4021 line 447 lat2: -26.519374288386
    test 4022 line 447 lon2: 98.067906321718
    test 4023 line 447 azi2: 113.253928642653
    test 4024 line 448 lat: -12.401139
    test 4025 line 448 lon: 73.327970
    test 4026 line 448 fb: 124.879499
    test 4027 line 448 lat2: -12.401138571717
    test 4028 line 448 lon2: 73.327969848986
    test 4029 line 448 azi2: 124.879499241464
    test 4030 line 448 lat2: -12.401138571717
    test 4031 line 448 lon2: 73.327969848986
    test 4032 line 448 azi2: 124.879499241464
    test 4033 line 449 lat: 61.619396
    test 4034 line 449 lon: 99.785406
    test 4035 line 449 fb: 107.998380
    test 4036 line 449 lat2: 61.619396375102
    test 4037 line 449 lon2: 99.785406498835
    test 4038 line 449 azi2: 107.998379654880
    test 4039 line 449 lat2: 61.619396375102
    test 4040 line 449 lon2: 99.785406498835
    test 4041 line 449 azi2: 107.998379654880
    test 4042 line 450 lat: 36.997252
    test 4043 line 450 lon: 56.015643
    test 4044 line 450 fb: 103.921663
    test 4045 line 450 lat2: 36.997252125041
    test 4046 line 450 lon2: 56.015642631106
    test 4047 line 450 azi2: 103.921662760483
    test 4048 line 450 lat2: 36.997252125041
    test 4049 line 450 lon2: 56.015642631106
    test 4050 line 450 azi2: 103.921662760483
    test 4051 line 451 lat: 37.824447
    test 4052 line 451 lon: 83.438440
    test 4053 line 451 fb: 89.229164
    test 4054 line 451 lat2: 37.824446788544
    test 4055 line 451 lon2: 83.438439603294
    test 4056 line 451 azi2: 89.229164462127
    test 4057 line 451 lat2: 37.824446788544
    test 4058 line 451 lon2: 83.438439603294
    test 4059 line 451 azi2: 89.229164462127
    test 4060 line 452 lat: 78.387864
    test 4061 line 452 lon: 118.814812
    test 4062 line 452 fb: 133.706108
    test 4063 line 452 lat2: 78.387863550790
    test 4064 line 452 lon2: 118.814812128945
    test 4065 line 452 azi2: 133.706108131229
    test 4066 line 452 lat2: 78.387863550790
    test 4067 line 452 lon2: 118.814812128944  FAILED, KNOWN, expected 118.814812128945
    test 4068 line 452 azi2: 133.706108131229
    test 4069 line 453 lat: -21.219381
    test 4070 line 453 lon: 53.544400
    test 4071 line 453 fb: 108.462517
    test 4072 line 453 lat2: -21.219381398156
    test 4073 line 453 lon2: 53.544399883561
    test 4074 line 453 azi2: 108.462517491505
    test 4075 line 453 lat2: -21.219381398156
    test 4076 line 453 lon2: 53.544399883561
    test 4077 line 453 azi2: 108.462517491505
    test 4078 line 454 lat: 63.304502
    test 4079 line 454 lon: 132.034926
    test 4080 line 454 fb: 139.912627
    test 4081 line 454 lat2: 63.304502042590
    test 4082 line 454 lon2: 132.034925840674
    test 4083 line 454 azi2: 139.912627269623
    test 4084 line 454 lat2: 63.304502042590
    test 4085 line 454 lon2: 132.034925840674
    test 4086 line 454 azi2: 139.912627269623
    test 4087 line 455 lat: 13.515663
    test 4088 line 455 lon: 8.989766
    test 4089 line 455 fb: 35.949535
    test 4090 line 455 lat2: 13.515662875313
    test 4091 line 455 lon2: 8.989765670730
    test 4092 line 455 azi2: 35.949534634702
    test 4093 line 455 lat2: 13.515662875313
    test 4094 line 455 lon2: 8.989765670730
    test 4095 line 455 azi2: 35.949534634702
    test 4096 line 456 lat: -6.742624
    test 4097 line 456 lon: 4.531931
    test 4098 line 456 fb: 171.306863
    test 4099 line 456 lat2: -6.742624347861
    test 4100 line 456 lon2: 4.531931315168
    test 4101 line 456 azi2: 171.306863155411
    test 4102 line 456 lat2: -6.742624347861
    test 4103 line 456 lon2: 4.531931315168
    test 4104 line 456 azi2: 171.306863155411
    test 4105 line 457 lat: -24.910509
    test 4106 line 457 lon: 128.137682
    test 4107 line 457 fb: 121.711631
    test 4108 line 457 lat2: -24.910509138681
    test 4109 line 457 lon2: 128.137681811633
    test 4110 line 457 azi2: 121.711631340407
    test 4111 line 457 lat2: -24.910509138681
    test 4112 line 457 lon2: 128.137681811633
    test 4113 line 457 azi2: 121.711631340407
    test 4114 line 458 lat: -40.687591
    test 4115 line 458 lon: 76.389897
    test 4116 line 458 fb: 116.394433
    test 4117 line 458 lat2: -40.687590598372
    test 4118 line 458 lon2: 76.389897347637
    test 4119 line 458 azi2: 116.394432846311
    test 4120 line 458 lat2: -40.687590598372
    test 4121 line 458 lon2: 76.389897347637
    test 4122 line 458 azi2: 116.394432846311
    test 4123 line 459 lat: 50.593808
    test 4124 line 459 lon: 155.175630
    test 4125 line 459 fb: 149.533910
    test 4126 line 459 lat2: 50.593807692461
    test 4127 line 459 lon2: 155.175629862288
    test 4128 line 459 azi2: 149.533910451363
    test 4129 line 459 lat2: 50.593807692461
    test 4130 line 459 lon2: 155.175629862288
    test 4131 line 459 azi2: 149.533910451363
    test 4132 line 460 lat: 12.198222
    test 4133 line 460 lon: 165.839456
    test 4134 line 460 fb: 172.783459
    test 4135 line 460 lat2: 12.198221826512
    test 4136 line 460 lon2: 165.839456381799
    test 4137 line 460 azi2: 172.783459292833
    test 4138 line 460 lat2: 12.198221826512
    test 4139 line 460 lon2: 165.839456381799
    test 4140 line 460 azi2: 172.783459292833
    test 4141 line 461 lat: 34.436568
    test 4142 line 461 lon: 7.117338
    test 4143 line 461 fb: 169.786492
    test 4144 line 461 lat2: 34.436568298724
    test 4145 line 461 lon2: 7.117337693395
    test 4146 line 461 azi2: 169.786491850891
    test 4147 line 461 lat2: 34.436568298724
    test 4148 line 461 lon2: 7.117337693395
    test 4149 line 461 azi2: 169.786491850891
    test 4150 line 462 lat: -3.145255
    test 4151 line 462 lon: 30.502293
    test 4152 line 462 fb: 103.563749
    test 4153 line 462 lat2: -3.145254788627
    test 4154 line 462 lon2: 30.502293345016
    test 4155 line 462 azi2: 103.563748974525
    test 4156 line 462 lat2: -3.145254788627
    test 4157 line 462 lon2: 30.502293345016
    test 4158 line 462 azi2: 103.563748974525
    test 4159 line 463 lat: 16.264722
    test 4160 line 463 lon: 85.497207
    test 4161 line 463 fb: 116.933863
    test 4162 line 463 lat2: 16.264722156696
    test 4163 line 463 lon2: 85.497207496626
    test 4164 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4165 line 463 lat2: 16.264722156696
    test 4166 line 463 lon2: 85.497207496627  FAILED, KNOWN, expected 85.497207496626
    test 4167 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4168 line 464 lat: 1.433605
    test 4169 line 464 lon: 4.165940
    test 4170 line 464 fb: 170.272462
    test 4171 line 464 lat2: 1.433605151882
    test 4172 line 464 lon2: 4.165940219923
    test 4173 line 464 azi2: 170.272462365963
    test 4174 line 464 lat2: 1.433605151882
    test 4175 line 464 lon2: 4.165940219923
    test 4176 line 464 azi2: 170.272462365963
    test 4177 line 465 lat: -43.326676
    test 4178 line 465 lon: 153.148367
    test 4179 line 465 fb: 42.921394
    test 4180 line 465 lat2: -43.326676023438
    test 4181 line 465 lon2: 153.148366512832
    test 4182 line 465 azi2: 42.921393854868
    test 4183 line 465 lat2: -43.326676023438
    test 4184 line 465 lon2: 153.148366512832
    test 4185 line 465 azi2: 42.921393854868
    test 4186 line 466 lat: 20.405242
    test 4187 line 466 lon: 178.247549
    test 4188 line 466 fb: 178.801033
    test 4189 line 466 lat2: 20.405242225208
    test 4190 line 466 lon2: 178.247549230810
    test 4191 line 466 azi2: 178.801032702563
    test 4192 line 466 lat2: 20.405242225208
    test 4193 line 466 lon2: 178.247549230810
    test 4194 line 466 azi2: 178.801032702563
    test 4195 line 467 lat: -22.482832
    test 4196 line 467 lon: 140.761211
    test 4197 line 467 fb: 82.371737
    test 4198 line 467 lat2: -22.482831544520
    test 4199 line 467 lon2: 140.761210729739
    test 4200 line 467 azi2: 82.371736722715
    test 4201 line 467 lat2: -22.482831544520
    test 4202 line 467 lon2: 140.761210729739
    test 4203 line 467 azi2: 82.371736722715
    test 4204 line 468 lat: -41.151672
    test 4205 line 468 lon: 38.419124
    test 4206 line 468 fb: 148.221356
    test 4207 line 468 lat2: -41.151672070525
    test 4208 line 468 lon2: 38.419124284860
    test 4209 line 468 azi2: 148.221356053664
    test 4210 line 468 lat2: -41.151672070525
    test 4211 line 468 lon2: 38.419124284860
    test 4212 line 468 azi2: 148.221356053664
    test 4213 line 469 lat: -63.212817
    test 4214 line 469 lon: 15.714998
    test 4215 line 469 fb: 166.777356
    test 4216 line 469 lat2: -63.212816746477
    test 4217 line 469 lon2: 15.714998156904
    test 4218 line 469 azi2: 166.777356149473
    test 4219 line 469 lat2: -63.212816746477
    test 4220 line 469 lon2: 15.714998156904
    test 4221 line 469 azi2: 166.777356149473
    test 4222 line 470 lat: -33.892681
    test 4223 line 470 lon: 120.971496
    test 4224 line 470 fb: 170.404814
    test 4225 line 470 lat2: -33.892680517408
    test 4226 line 470 lon2: 120.971495805190
    test 4227 line 470 azi2: 170.404813772447
    test 4228 line 470 lat2: -33.892680517408
    test 4229 line 470 lon2: 120.971495805190
    test 4230 line 470 azi2: 170.404813772447
    test 4231 line 471 lat: -17.570093
    test 4232 line 471 lon: 137.259693
    test 4233 line 471 fb: 175.973637
    test 4234 line 471 lat2: -17.570092516031
    test 4235 line 471 lon2: 137.259693182063
    test 4236 line 471 azi2: 175.973637230107
    test 4237 line 471 lat2: -17.570092516031
    test 4238 line 471 lon2: 137.259693182063
    test 4239 line 471 azi2: 175.973637230107
    test 4240 line 472 lat: -24.221028
    test 4241 line 472 lon: 33.960052
    test 4242 line 472 fb: 130.753279
    test 4243 line 472 lat2: -24.221027716301  FAILED, KNOWN, expected -24.221027716300
    test 4244 line 472 lon2: 33.960051796001
    test 4245 line 472 azi2: 130.753279335550
    test 4246 line 472 lat2: -24.221027716301  FAILED, KNOWN, expected -24.221027716300
    test 4247 line 472 lon2: 33.960051796001
    test 4248 line 472 azi2: 130.753279335550
    test 4249 line 473 lat: -48.849133
    test 4250 line 473 lon: 176.601435
    test 4251 line 473 fb: 5.037779
    test 4252 line 473 lat2: -48.849132604777
    test 4253 line 473 lon2: 176.601435366477
    test 4254 line 473 azi2: 5.037779120578
    test 4255 line 473 lat2: -48.849132604777
    test 4256 line 473 lon2: 176.601435366477
    test 4257 line 473 azi2: 5.037779120578
    test 4258 line 474 lat: -50.620233
    test 4259 line 474 lon: 22.061011
    test 4260 line 474 fb: 159.730881
    test 4261 line 474 lat2: -50.620232529081
    test 4262 line 474 lon2: 22.061010504617
    test 4263 line 474 azi2: 159.730880799186
    test 4264 line 474 lat2: -50.620232529081
    test 4265 line 474 lon2: 22.061010504617
    test 4266 line 474 azi2: 159.730880799186
    test 4267 line 475 lat: -11.354875
    test 4268 line 475 lon: 76.258812
    test 4269 line 475 fb: 104.014357
    test 4270 line 475 lat2: -11.354875472483
    test 4271 line 475 lon2: 76.258812283705
    test 4272 line 475 azi2: 104.014356938495
    test 4273 line 475 lat2: -11.354875472483
    test 4274 line 475 lon2: 76.258812283705
    test 4275 line 475 azi2: 104.014356938495
    test 4276 line 476 lat: -19.640051
    test 4277 line 476 lon: 105.698979
    test 4278 line 476 fb: 156.650619
    test 4279 line 476 lat2: -19.640050782646
    test 4280 line 476 lon2: 105.698978700604
    test 4281 line 476 azi2: 156.650619021389
    test 4282 line 476 lat2: -19.640050782646
    test 4283 line 476 lon2: 105.698978700604
    test 4284 line 476 azi2: 156.650619021389
    test 4285 line 477 lat: 83.855267
    test 4286 line 477 lon: 112.674858
    test 4287 line 477 fb: 122.383784
    test 4288 line 477 lat2: 83.855266840098
    test 4289 line 477 lon2: 112.674858066810
    test 4290 line 477 azi2: 122.383784147681
    test 4291 line 477 lat2: 83.855266840098
    test 4292 line 477 lon2: 112.674858066811  FAILED, KNOWN, expected 112.674858066810
    test 4293 line 477 azi2: 122.383784147681
    test 4294 line 478 lat: 48.296558
    test 4295 line 478 lon: 34.072463
    test 4296 line 478 fb: 61.415867
    test 4297 line 478 lat2: 48.296557545891
    test 4298 line 478 lon2: 34.072462542900
    test 4299 line 478 azi2: 61.415867309157
    test 4300 line 478 lat2: 48.296557545891
    test 4301 line 478 lon2: 34.072462542900
    test 4302 line 478 azi2: 61.415867309157
    test 4303 line 479 lat: 20.173772
    test 4304 line 479 lon: 12.682422
    test 4305 line 479 fb: 165.220898
    test 4306 line 479 lat2: 20.173772376863
    test 4307 line 479 lon2: 12.682422408956
    test 4308 line 479 azi2: 165.220897942891
    test 4309 line 479 lat2: 20.173772376863
    test 4310 line 479 lon2: 12.682422408956
    test 4311 line 479 azi2: 165.220897942891
    test 4312 line 480 lat: 47.501521
    test 4313 line 480 lon: 54.338775
    test 4314 line 480 fb: 80.572388
    test 4315 line 480 lat2: 47.501521345953
    test 4316 line 480 lon2: 54.338775236773
    test 4317 line 480 azi2: 80.572387690286
    test 4318 line 480 lat2: 47.501521345953
    test 4319 line 480 lon2: 54.338775236773
    test 4320 line 480 azi2: 80.572387690286
    test 4321 line 481 lat: -34.023172
    test 4322 line 481 lon: 174.310259
    test 4323 line 481 fb: 123.138509
    test 4324 line 481 lat2: -34.023171607796
    test 4325 line 481 lon2: 174.310258612178
    test 4326 line 481 azi2: 123.138509441522
    test 4327 line 481 lat2: -34.023171607796
    test 4328 line 481 lon2: 174.310258612178
    test 4329 line 481 azi2: 123.138509441522
    test 4330 line 482 lat: -31.540913
    test 4331 line 482 lon: 52.441924
    test 4332 line 482 fb: 155.194513
    test 4333 line 482 lat2: -31.540912691186
    test 4334 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4335 line 482 azi2: 155.194512958367
    test 4336 line 482 lat2: -31.540912691186
    test 4337 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4338 line 482 azi2: 155.194512958367
    test 4339 line 483 lat: 64.121649
    test 4340 line 483 lon: 21.295234
    test 4341 line 483 fb: 51.966943
    test 4342 line 483 lat2: 64.121648788158
    test 4343 line 483 lon2: 21.295234110583
    test 4344 line 483 azi2: 51.966943039534
    test 4345 line 483 lat2: 64.121648788158
    test 4346 line 483 lon2: 21.295234110583
    test 4347 line 483 azi2: 51.966943039534
    test 4348 line 484 lat: -4.599613
    test 4349 line 484 lon: 107.727091
    test 4350 line 484 fb: 109.270070
    test 4351 line 484 lat2: -4.599612537190
    test 4352 line 484 lon2: 107.727090701893
    test 4353 line 484 azi2: 109.270070124629
    test 4354 line 484 lat2: -4.599612537190
    test 4355 line 484 lon2: 107.727090701893
    test 4356 line 484 azi2: 109.270070124629
    test 4357 line 485 lat: -16.799515
    test 4358 line 485 lon: 43.675397
    test 4359 line 485 fb: 144.940350
    test 4360 line 485 lat2: -16.799514501718
    test 4361 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4362 line 485 azi2: 144.940350340820
    test 4363 line 485 lat2: -16.799514501718
    test 4364 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4365 line 485 azi2: 144.940350340820
    test 4366 line 486 lat: -16.337411
    test 4367 line 486 lon: 13.110283
    test 4368 line 486 fb: 167.467077
    test 4369 line 486 lat2: -16.337410785184
    test 4370 line 486 lon2: 13.110282576579
    test 4371 line 486 azi2: 167.467077049713
    test 4372 line 486 lat2: -16.337410785184
    test 4373 line 486 lon2: 13.110282576579
    test 4374 line 486 azi2: 167.467077049713
    test 4375 line 487 lat: -26.145379
    test 4376 line 487 lon: 9.977868
    test 4377 line 487 fb: 171.929335
    test 4378 line 487 lat2: -26.145378737931
    test 4379 line 487 lon2: 9.977868070750
    test 4380 line 487 azi2: 171.929335050809
    test 4381 line 487 lat2: -26.145378737931
    test 4382 line 487 lon2: 9.977868070750
    test 4383 line 487 azi2: 171.929335050809
    test 4384 line 488 lat: -3.245748
    test 4385 line 488 lon: 71.931981
    test 4386 line 488 fb: 124.120047
    test 4387 line 488 lat2: -3.245748416402
    test 4388 line 488 lon2: 71.931980979620
    test 4389 line 488 azi2: 124.120046609527
    test 4390 line 488 lat2: -3.245748416402
    test 4391 line 488 lon2: 71.931980979620
    test 4392 line 488 azi2: 124.120046609527
    test 4393 line 489 lat: 72.975644
    test 4394 line 489 lon: 36.459313
    test 4395 line 489 fb: 49.411324
    test 4396 line 489 lat2: 72.975644407376
    test 4397 line 489 lon2: 36.459312843012
    test 4398 line 489 azi2: 49.411324496539
    test 4399 line 489 lat2: 72.975644407376
    test 4400 line 489 lon2: 36.459312843012
    test 4401 line 489 azi2: 49.411324496539
    test 4402 line 490 lat: 50.342418
    test 4403 line 490 lon: 35.445910
    test 4404 line 490 fb: 43.087650
    test 4405 line 490 lat2: 50.342417843481
    test 4406 line 490 lon2: 35.445910446930
    test 4407 line 490 azi2: 43.087650398316
    test 4408 line 490 lat2: 50.342417843481
    test 4409 line 490 lon2: 35.445910446930
    test 4410 line 490 azi2: 43.087650398316
    test 4411 line 491 lat: -22.878804
    test 4412 line 491 lon: 69.376306
    test 4413 line 491 fb: 102.211558
    test 4414 line 491 lat2: -22.878804028267
    test 4415 line 491 lon2: 69.376306288000
    test 4416 line 491 azi2: 102.211557813582
    test 4417 line 491 lat2: -22.878804028267
    test 4418 line 491 lon2: 69.376306288000
    test 4419 line 491 azi2: 102.211557813582
    test 4420 line 492 lat: 21.254912
    test 4421 line 492 lon: 21.899215
    test 4422 line 492 fb: 92.966926
    test 4423 line 492 lat2: 21.254912121078
    test 4424 line 492 lon2: 21.899214754868
    test 4425 line 492 azi2: 92.966926161390
    test 4426 line 492 lat2: 21.254912121078
    test 4427 line 492 lon2: 21.899214754868
    test 4428 line 492 azi2: 92.966926161390
    test 4429 line 493 lat: 26.486641
    test 4430 line 493 lon: 19.097603
    test 4431 line 493 fb: 158.053447
    test 4432 line 493 lat2: 26.486640906235
    test 4433 line 493 lon2: 19.097602913800
    test 4434 line 493 azi2: 158.053446850267
    test 4435 line 493 lat2: 26.486640906235
    test 4436 line 493 lon2: 19.097602913800
    test 4437 line 493 azi2: 158.053446850267
    test 4438 line 494 lat: 43.041538
    test 4439 line 494 lon: 114.186950
    test 4440 line 494 fb: 155.795323
    test 4441 line 494 lat2: 43.041538374784
    test 4442 line 494 lon2: 114.186949886941
    test 4443 line 494 azi2: 155.795322500736
    test 4444 line 494 lat2: 43.041538374784
    test 4445 line 494 lon2: 114.186949886941
    test 4446 line 494 azi2: 155.795322500736
    test 4447 line 495 lat: -10.570764
    test 4448 line 495 lon: 107.625834
    test 4449 line 495 fb: 98.142401
    test 4450 line 495 lat2: -10.570763915882
    test 4451 line 495 lon2: 107.625834147204
    test 4452 line 495 azi2: 98.142400502747
    test 4453 line 495 lat2: -10.570763915882
    test 4454 line 495 lon2: 107.625834147204
    test 4455 line 495 azi2: 98.142400502747
    test 4456 line 496 lat: 12.624313
    test 4457 line 496 lon: 139.841077
    test 4458 line 496 fb: 148.385662
    test 4459 line 496 lat2: 12.624313141297
    test 4460 line 496 lon2: 139.841076840613
    test 4461 line 496 azi2: 148.385661923898
    test 4462 line 496 lat2: 12.624313141297
    test 4463 line 496 lon2: 139.841076840613
    test 4464 line 496 azi2: 148.385661923898
    test 4465 line 497 lat: -25.169999
    test 4466 line 497 lon: 33.175749
    test 4467 line 497 fb: 169.905377
    test 4468 line 497 lat2: -25.169998746665
    test 4469 line 497 lon2: 33.175749310362
    test 4470 line 497 azi2: 169.905376778384
    test 4471 line 497 lat2: -25.169998746665
    test 4472 line 497 lon2: 33.175749310361  FAILED, KNOWN, expected 33.175749310362
    test 4473 line 497 azi2: 169.905376778384
    test 4474 line 498 lat: -41.360282
    test 4475 line 498 lon: 147.341948
    test 4476 line 498 fb: 136.551910
    test 4477 line 498 lat2: -41.360281944908
    test 4478 line 498 lon2: 147.341948469937
    test 4479 line 498 azi2: 136.551910060918
    test 4480 line 498 lat2: -41.360281944908
    test 4481 line 498 lon2: 147.341948469937
    test 4482 line 498 azi2: 136.551910060918
    test 4483 line 499 lat: 39.182099
    test 4484 line 499 lon: 150.590705
    test 4485 line 499 fb: 165.522951
    test 4486 line 499 lat2: 39.182099298590
    test 4487 line 499 lon2: 150.590705311219
    test 4488 line 499 azi2: 165.522950851635
    test 4489 line 499 lat2: 39.182099298590
    test 4490 line 499 lon2: 150.590705311219
    test 4491 line 499 azi2: 165.522950851635
    test 4492 line 500 lat: -57.494441
    test 4493 line 500 lon: 113.054057
    test 4494 line 500 fb: 130.988277
    test 4495 line 500 lat2: -57.494440629886
    test 4496 line 500 lon2: 113.054056725195
    test 4497 line 500 azi2: 130.988276746436
    test 4498 line 500 lat2: -57.494440629886
    test 4499 line 500 lon2: 113.054056725195
    test 4500 line 500 azi2: 130.988276746436
    test 4501 WGS84.KsOrder: 8

    546 of 4501 testEllipsoidalGeodTest.py tests (12.1%) FAILED, incl. 46 KNOWN plus 500 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 11.177 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEllipsoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EcefKarney from .ecef by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f_ from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2n from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_f2Tuple from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f_2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.circle4 from .utily by testEllipsoids.py line 11
# lazily imported pygeodesy.e2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.f_2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEllipsoids.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testEllipsoids.py line 11
# lazily imported pygeodesy.n2e2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.n2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.R_M from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testEllipsoids.py line 11

    testing testEllipsoids.py 24.06.24 (module pygeodesy.ellipsoids 24.10.15) isLazy=3
    test 1 ellipsoid: True
    test 2 TestEllipsoid: name='TestEllipsoid', a=1000, f=0, f_=0, b=1000

    testWGS84(pygeodesy.ellipsoids, 24.10.15)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 A: 6367449.1
# lazily imported pygeodesy.elliptic by ellipsoids.py line 842
    test 7 L: 10001965.7
    test 8 Rrectifying: 6367449.1
    test 9 Rgeometric: 6367435.7
    test 10 Rgeocentric: 6378137.000
    test 11 Rgeocentric: 6367489.544
    test 12 Rgeocentric: 6356752.314
    test 13 Rlat: 6378137.000
    test 14 Rlat: 6367444.657
    test 15 Rlat: 6356752.314
    test 16 circle4.radius: 6378137.000
    test 17 circle4.radius: 4517590.879
    test 18 circle4.radius: 0.000
    test 19 distance2: 156903.472, 45.192
    test 20 distance2: 1569034.719, 45.192
    test 21 distance2: 1400742.676, 37.563
    test 22 distance2: 1179164.848, 18.896
    test 23 roc2: 6335439.327, 6378137.0
    test 24 roc2: 6367381.816, 6388838.29
    test 25 roc2: 6399593.626, 6399593.626
    test 26 rocBearing: 6335439.327
    test 27 rocBearing: 6378092.008
    test 28 rocBearing: 6399593.626
    test 29 rocGauss: 6356752.314
    test 30 rocGauss: 6378101.030
    test 31 rocGauss: 6399593.626
    test 32 rocMean: 6356716.465
    test 33 rocMean: 6378092.008
    test 34 rocMean: 6399593.626
    test 35 rocMeridional: 6335439.327
    test 36 rocMeridional: 6367381.816
    test 37 rocMeridional: 6399593.626
    test 38 rocPrimeVertical: 6378137.0
    test 39 rocPrimeVertical: 6388838.29
    test 40 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 24.10.15)
    test 41 R1: 6371008.7714
    test 42 R2: 6371007.2
    test 43 R3: 6371000.8
    test 44 A: 6367449.1
    test 45 L: 10001965.7
    test 46 Rrectifying: 6367449.1
    test 47 Rgeometric: 6367435.7
    test 48 Rgeocentric: 6378137.000
    test 49 Rgeocentric: 6367489.544
    test 50 Rgeocentric: 6356752.314
    test 51 Rlat: 6378137.000
    test 52 Rlat: 6367444.657
    test 53 Rlat: 6356752.314
    test 54 circle4.radius: 6378137.000
    test 55 circle4.radius: 4517590.879
    test 56 circle4.radius: 0.000
    test 57 distance2: 156903.472, 45.192
    test 58 distance2: 1569034.719, 45.192
    test 59 distance2: 1400742.676, 37.563
    test 60 distance2: 1179164.848, 18.896
    test 61 roc2: 6335439.327, 6378137.0
    test 62 roc2: 6367381.816, 6388838.29
    test 63 roc2: 6399593.626, 6399593.626
    test 64 rocBearing: 6335439.327
    test 65 rocBearing: 6378092.008
    test 66 rocBearing: 6399593.626
    test 67 rocGauss: 6356752.314
    test 68 rocGauss: 6378101.030
    test 69 rocGauss: 6399593.626
    test 70 rocMean: 6356716.465
    test 71 rocMean: 6378092.008
    test 72 rocMean: 6399593.626
    test 73 rocMeridional: 6335439.327
    test 74 rocMeridional: 6367381.816
    test 75 rocMeridional: 6399593.626
    test 76 rocPrimeVertical: 6378137.0
    test 77 rocPrimeVertical: 6388838.29
    test 78 rocPrimeVertical: 6399593.626

    test<function Ellipsoid.__init__ at 0x1022c8680>(pygeodesy.ellipsoids, 24.10.15)
    test 79 a, b, None: 2.0
    test 80 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 24.10.15)
    test 81 WGS84.copy: True
    test 82 WGS84.copy: True
    test 83 WGS84.find: None
    test 84 WGS84.a2_b: 6399593.625758
    test 85 WGS84.b2_a: 6335439.327293
    test 86 WGS84.R2: 6371007.180918
    test 87 WGS84.c2: 40589732499315
    test 88 WGS84.es: 0.081819
    test 89 WGS84.e22: 0.006739
    test 90 WGS84.f2: 0.003364
    test 91 WGS84.m2degrees: 90
    test 92 WGS84.degrees2m: 10018754
    test 93 WGS84.area: 5.101e+14
    test 94 WGS84.volume: 1.083e+21
    test 95 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 96 WGS84.ecef: WGS84
    test 97 WGS84: name='WGS84', a=6378137, f=0.0033528107, f_=298.257223563, b=6356752.3142451793, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e21=0.99330562, e22=0.0067394967, e32=0.0033584313, A=6367449.1458234144, L=10001965.7293127235, R1=6371008.7714150595, R2=6371007.1809184738, R3=6371000.7900091587, Rbiaxial=6367453.6345163295, Rtriaxial=6372797.5559594007
    test 98 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204 (1.5612511284e-17)

    testKruegers(pygeodesy.ellipsoids, 24.10.15)
    test 99 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503242e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 100 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 101 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 102 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19
    test 103 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 104 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 24.10.15)
    test 105 a [Radius_]: 6356752.314
    test 106 b [Radius_]: 6378137.000
    test 107 n [Float]: -0.002
    test 108 R1 [Radius]: 6363880.543
    test 109 R2 [Radius]: 6363878.941
    test 110 R3 [Radius]: 6363872.564
    test 111 Rbiaxial [Radius]: 6367453.635
    test 112 Rgeometric [Radius]: 6367435.680
    test 113 c2 [Meter2]: 40498955180263.188
    test 114 area [Meter2]: 508924880289508.500
    test 115 volume [Meter3]: 1079575530747445379072.000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 24.10.15)
    test 116 isEllipsoidal: True
    test 117 isOblate: True
    test 118 isProlate: False
    test 119 isSpherical: False
# lazily imported pygeodesy.albers by ellipsoids.py line 381
    test 120 auxAuthalic(-90): -90.0
    test 121 name: auxAuthalic
    test 122 inverse: lat (-90.0)
    test 123 auxConformal(-90): -90.0
    test 124 name: auxConformal
    test 125 inverse: lat (-90.0)
    test 126 auxGeocentric(-90): -90.0
    test 127 name: auxGeocentric
    test 128 inverse: lat (-90.0)
    test 129 auxIsometric(-90): -2178.287790219
    test 130 name: auxIsometric
    test 131 inverse: lat (-90.0)
    test 132 auxParametric(-90): -90.0
    test 133 name: auxParametric
    test 134 inverse: lat (-90.0)
    test 135 auxRectifying(-90): -90.0
    test 136 name: auxRectifying
    test 137 inverse: lat (-90.0)
    test 138 auxAuthalic(-60): -59.88878557
    test 139 name: auxAuthalic
    test 140 inverse: lat (-60.0)
    test 141 auxConformal(-60): -59.833216158
    test 142 name: auxConformal
    test 143 inverse: lat (-60.0)
    test 144 auxGeocentric(-60): -59.83307615
    test 145 name: auxGeocentric
    test 146 inverse: lat (-60.0)
    test 147 auxIsometric(-60): -75.123399226
    test 148 name: auxIsometric
    test 149 inverse: lat (-60.0)
    test 150 auxParametric(-60): -59.916607797
    test 151 name: auxParametric
    test 152 inverse: lat (-60.0)
    test 153 auxRectifying(-60): -59.874885594
    test 154 name: auxRectifying
    test 155 inverse: lat (-60.0)
    test 156 auxAuthalic(-30): -29.888997034
    test 157 name: auxAuthalic
    test 158 inverse: lat (-30.0)
    test 159 auxConformal(-30): -29.833682042
    test 160 name: auxConformal
    test 161 inverse: lat (-30.0)
    test 162 auxGeocentric(-30): -29.83363581
    test 163 name: auxGeocentric
    test 164 inverse: lat (-30.0)
    test 165 auxIsometric(-30): -31.281036776
    test 166 name: auxIsometric
    test 167 inverse: lat (-30.0)
    test 168 auxParametric(-30): -29.916747713
    test 169 name: auxParametric
    test 170 inverse: lat (-30.0)
    test 171 auxRectifying(-30): -29.875147936
    test 172 name: auxRectifying
    test 173 inverse: lat (-30.0)
    test 174 auxAuthalic(0): 0.0
    test 175 name: auxAuthalic
    test 176 inverse: lat (0.0)
    test 177 auxConformal(0): 0.0
    test 178 name: auxConformal
    test 179 inverse: lat (0.0)
    test 180 auxGeocentric(0): 0.0
    test 181 name: auxGeocentric
    test 182 inverse: lat (0.0)
    test 183 auxIsometric(0): 0.0
    test 184 name: auxIsometric
    test 185 inverse: lat (0.0)
    test 186 auxParametric(0): 0.0
    test 187 name: auxParametric
    test 188 inverse: lat (0.0)
    test 189 auxRectifying(0): 0.0
    test 190 name: auxRectifying
    test 191 inverse: lat (0.0)
    test 192 auxAuthalic(30): 29.888997034
    test 193 name: auxAuthalic
    test 194 inverse: lat (30.0)
    test 195 auxConformal(30): 29.833682042
    test 196 name: auxConformal
    test 197 inverse: lat (30.0)
    test 198 auxGeocentric(30): 29.83363581
    test 199 name: auxGeocentric
    test 200 inverse: lat (30.0)
    test 201 auxIsometric(30): 31.281036776
    test 202 name: auxIsometric
    test 203 inverse: lat (30.0)
    test 204 auxParametric(30): 29.916747713
    test 205 name: auxParametric
    test 206 inverse: lat (30.0)
    test 207 auxRectifying(30): 29.875147936
    test 208 name: auxRectifying
    test 209 inverse: lat (30.0)
    test 210 auxAuthalic(60): 59.88878557
    test 211 name: auxAuthalic
    test 212 inverse: lat (60.0)
    test 213 auxConformal(60): 59.833216158
    test 214 name: auxConformal
    test 215 inverse: lat (60.0)
    test 216 auxGeocentric(60): 59.83307615
    test 217 name: auxGeocentric
    test 218 inverse: lat (60.0)
    test 219 auxIsometric(60): 75.123399226
    test 220 name: auxIsometric
    test 221 inverse: lat (60.0)
    test 222 auxParametric(60): 59.916607797
    test 223 name: auxParametric
    test 224 inverse: lat (60.0)
    test 225 auxRectifying(60): 59.874885594
    test 226 name: auxRectifying
    test 227 inverse: lat (60.0)
    test 228 auxAuthalic(90): 90.0
    test 229 name: auxAuthalic
    test 230 inverse: lat (90.0)
    test 231 auxConformal(90): 90.0
    test 232 name: auxConformal
    test 233 inverse: lat (90.0)
    test 234 auxGeocentric(90): 90.0
    test 235 name: auxGeocentric
    test 236 inverse: lat (90.0)
    test 237 auxIsometric(90): 2178.287790219
    test 238 name: auxIsometric
    test 239 inverse: lat (90.0)
    test 240 auxParametric(90): 90.0
    test 241 name: auxParametric
    test 242 inverse: lat (90.0)
    test 243 auxRectifying(90): 90.0
    test 244 name: auxRectifying
    test 245 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 24.10.15)
    test 246 isEllipsoidal: True
    test 247 isOblate: False
    test 248 isProlate: True
    test 249 isSpherical: False
    test 250 auxAuthalic(-90): -90.0
    test 251 name: auxAuthalic
    test 252 inverse: lat (-90.0)
    test 253 auxConformal(-90): -90.0
    test 254 name: auxConformal
    test 255 inverse: lat (-90.0)
    test 256 auxGeocentric(-90): -90.0
    test 257 name: auxGeocentric
    test 258 inverse: lat (-90.0)
    test 259 auxIsometric(-90): -2179.057490028
    test 260 name: auxIsometric
    test 261 inverse: lat (-90.0)
    test 262 auxParametric(-90): -90.0
    test 263 name: auxParametric
    test 264 inverse: lat (-90.0)
    test 265 auxRectifying(-90): -90.0
    test 266 name: auxRectifying
    test 267 inverse: lat (-90.0)
    test 268 auxAuthalic(-60): -60.110978127
    test 269 name: auxAuthalic
    test 270 inverse: lat (-60.0)
    test 271 auxConformal(-60): -60.16650401
    test 272 name: auxConformal
    test 273 inverse: lat (-60.0)
    test 274 auxGeocentric(-60): -60.16636419
    test 275 name: auxGeocentric
    test 276 inverse: lat (-60.0)
    test 277 auxIsometric(-60): -75.789978689
    test 278 name: auxIsometric
    test 279 inverse: lat (-60.0)
    test 280 auxParametric(-60): -60.083252287
    test 281 name: auxParametric
    test 282 inverse: lat (-60.0)
    test 283 auxRectifying(-60): -60.041947439
    test 284 name: auxRectifying
    test 285 inverse: lat (-60.0)
    test 286 auxAuthalic(-30): -30.11118952
    test 287 name: auxAuthalic
    test 288 inverse: lat (-30.0)
    test 289 auxConformal(-30): -30.166970897
    test 290 name: auxConformal
    test 291 inverse: lat (-30.0)
    test 292 auxGeocentric(-30): -30.16692385
    test 293 name: auxGeocentric
    test 294 inverse: lat (-30.0)
    test 295 auxIsometric(-30): -31.665887766
    test 296 name: auxIsometric
    test 297 inverse: lat (-30.0)
    test 298 auxParametric(-30): -30.083392203
    test 299 name: auxParametric
    test 300 inverse: lat (-30.0)
    test 301 auxRectifying(-30): -30.041931117
    test 302 name: auxRectifying
    test 303 inverse: lat (-30.0)
    test 304 auxAuthalic(0): 0.0
    test 305 name: auxAuthalic
    test 306 inverse: lat (0.0)
    test 307 auxConformal(0): 0.0
    test 308 name: auxConformal
    test 309 inverse: lat (0.0)
    test 310 auxGeocentric(0): 0.0
    test 311 name: auxGeocentric
    test 312 inverse: lat (0.0)
    test 313 auxIsometric(0): 0.0
    test 314 name: auxIsometric
    test 315 inverse: lat (0.0)
    test 316 auxParametric(0): 0.0
    test 317 name: auxParametric
    test 318 inverse: lat (0.0)
    test 319 auxRectifying(0): 0.0
    test 320 name: auxRectifying
    test 321 inverse: lat (0.0)
    test 322 auxAuthalic(30): 30.11118952
    test 323 name: auxAuthalic
    test 324 inverse: lat (30.0)
    test 325 auxConformal(30): 30.166970897
    test 326 name: auxConformal
    test 327 inverse: lat (30.0)
    test 328 auxGeocentric(30): 30.16692385
    test 329 name: auxGeocentric
    test 330 inverse: lat (30.0)
    test 331 auxIsometric(30): 31.665887766
    test 332 name: auxIsometric
    test 333 inverse: lat (30.0)
    test 334 auxParametric(30): 30.083392203
    test 335 name: auxParametric
    test 336 inverse: lat (30.0)
    test 337 auxRectifying(30): 30.041931117
    test 338 name: auxRectifying
    test 339 inverse: lat (30.0)
    test 340 auxAuthalic(60): 60.110978127
    test 341 name: auxAuthalic
    test 342 inverse: lat (60.0)
    test 343 auxConformal(60): 60.16650401
    test 344 name: auxConformal
    test 345 inverse: lat (60.0)
    test 346 auxGeocentric(60): 60.16636419
    test 347 name: auxGeocentric
    test 348 inverse: lat (60.0)
    test 349 auxIsometric(60): 75.789978689
    test 350 name: auxIsometric
    test 351 inverse: lat (60.0)
    test 352 auxParametric(60): 60.083252287
    test 353 name: auxParametric
    test 354 inverse: lat (60.0)
    test 355 auxRectifying(60): 60.041947439
    test 356 name: auxRectifying
    test 357 inverse: lat (60.0)
    test 358 auxAuthalic(90): 90.0
    test 359 name: auxAuthalic
    test 360 inverse: lat (90.0)
    test 361 auxConformal(90): 90.0
    test 362 name: auxConformal
    test 363 inverse: lat (90.0)
    test 364 auxGeocentric(90): 90.0
    test 365 name: auxGeocentric
    test 366 inverse: lat (90.0)
    test 367 auxIsometric(90): 2179.057490028
    test 368 name: auxIsometric
    test 369 inverse: lat (90.0)
    test 370 auxParametric(90): 90.0
    test 371 name: auxParametric
    test 372 inverse: lat (90.0)
    test 373 auxRectifying(90): 90.0
    test 374 name: auxRectifying
    test 375 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 24.10.15)
    test 376 isEllipsoidal: False
    test 377 isOblate: False
    test 378 isProlate: False
    test 379 isSpherical: True
    test 380 auxAuthalic(-90): -90.0
    test 381 name: auxAuthalic
    test 382 inverse: lat (-90.0)
    test 383 auxConformal(-90): -90.0
    test 384 name: auxConformal
    test 385 inverse: lat (-90.0)
    test 386 auxGeocentric(-90): -90.0
    test 387 name: auxGeocentric
    test 388 inverse: lat (-90.0)
    test 389 auxIsometric(-90): -90.0
    test 390 name: auxIsometric
    test 391 inverse: lat (-90.0)
    test 392 auxParametric(-90): -90.0
    test 393 name: auxParametric
    test 394 inverse: lat (-90.0)
    test 395 auxRectifying(-90): -90.0
    test 396 name: auxRectifying
    test 397 inverse: lat (-90.0)
    test 398 auxAuthalic(-60): -60.0
    test 399 name: auxAuthalic
    test 400 inverse: lat (-60.0)
    test 401 auxConformal(-60): -60.0
    test 402 name: auxConformal
    test 403 inverse: lat (-60.0)
    test 404 auxGeocentric(-60): -60.0
    test 405 name: auxGeocentric
    test 406 inverse: lat (-60.0)
    test 407 auxIsometric(-60): -60.0
    test 408 name: auxIsometric
    test 409 inverse: lat (-60.0)
    test 410 auxParametric(-60): -60.0
    test 411 name: auxParametric
    test 412 inverse: lat (-60.0)
    test 413 auxRectifying(-60): -60.0
    test 414 name: auxRectifying
    test 415 inverse: lat (-60.0)
    test 416 auxAuthalic(-30): -30.0
    test 417 name: auxAuthalic
    test 418 inverse: lat (-30.0)
    test 419 auxConformal(-30): -30.0
    test 420 name: auxConformal
    test 421 inverse: lat (-30.0)
    test 422 auxGeocentric(-30): -30.0
    test 423 name: auxGeocentric
    test 424 inverse: lat (-30.0)
    test 425 auxIsometric(-30): -30.0
    test 426 name: auxIsometric
    test 427 inverse: lat (-30.0)
    test 428 auxParametric(-30): -30.0
    test 429 name: auxParametric
    test 430 inverse: lat (-30.0)
    test 431 auxRectifying(-30): -30.0
    test 432 name: auxRectifying
    test 433 inverse: lat (-30.0)
    test 434 auxAuthalic(0): 0.0
    test 435 name: auxAuthalic
    test 436 inverse: lat (0.0)
    test 437 auxConformal(0): 0.0
    test 438 name: auxConformal
    test 439 inverse: lat (0.0)
    test 440 auxGeocentric(0): 0.0
    test 441 name: auxGeocentric
    test 442 inverse: lat (0.0)
    test 443 auxIsometric(0): 0.0
    test 444 name: auxIsometric
    test 445 inverse: lat (0.0)
    test 446 auxParametric(0): 0.0
    test 447 name: auxParametric
    test 448 inverse: lat (0.0)
    test 449 auxRectifying(0): 0.0
    test 450 name: auxRectifying
    test 451 inverse: lat (0.0)
    test 452 auxAuthalic(30): 30.0
    test 453 name: auxAuthalic
    test 454 inverse: lat (30.0)
    test 455 auxConformal(30): 30.0
    test 456 name: auxConformal
    test 457 inverse: lat (30.0)
    test 458 auxGeocentric(30): 30.0
    test 459 name: auxGeocentric
    test 460 inverse: lat (30.0)
    test 461 auxIsometric(30): 30.0
    test 462 name: auxIsometric
    test 463 inverse: lat (30.0)
    test 464 auxParametric(30): 30.0
    test 465 name: auxParametric
    test 466 inverse: lat (30.0)
    test 467 auxRectifying(30): 30.0
    test 468 name: auxRectifying
    test 469 inverse: lat (30.0)
    test 470 auxAuthalic(60): 60.0
    test 471 name: auxAuthalic
    test 472 inverse: lat (60.0)
    test 473 auxConformal(60): 60.0
    test 474 name: auxConformal
    test 475 inverse: lat (60.0)
    test 476 auxGeocentric(60): 60.0
    test 477 name: auxGeocentric
    test 478 inverse: lat (60.0)
    test 479 auxIsometric(60): 60.0
    test 480 name: auxIsometric
    test 481 inverse: lat (60.0)
    test 482 auxParametric(60): 60.0
    test 483 name: auxParametric
    test 484 inverse: lat (60.0)
    test 485 auxRectifying(60): 60.0
    test 486 name: auxRectifying
    test 487 inverse: lat (60.0)
    test 488 auxAuthalic(90): 90.0
    test 489 name: auxAuthalic
    test 490 inverse: lat (90.0)
    test 491 auxConformal(90): 90.0
    test 492 name: auxConformal
    test 493 inverse: lat (90.0)
    test 494 auxGeocentric(90): 90.0
    test 495 name: auxGeocentric
    test 496 inverse: lat (90.0)
    test 497 auxIsometric(90): 90.0
    test 498 name: auxIsometric
    test 499 inverse: lat (90.0)
    test 500 auxParametric(90): 90.0
    test 501 name: auxParametric
    test 502 inverse: lat (90.0)
    test 503 auxRectifying(90): 90.0
    test 504 name: auxRectifying
    test 505 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 24.10.15)
    test 506 all: all
    test 507 _TOL: 1.4901161193847657e-09

    test 508 Airy1830.f_ - 1 / .f: 0.0
    test 509 Airy1830.f - 1 / .f_: 0.0

    test 510 AiryModified.f_ - 1 / .f: 0.0
    test 511 AiryModified.f - 1 / .f_: 0.0

    test 512 ATS1977.f_ - 1 / .f: 0.0
    test 513 ATS1977.f - 1 / .f_: 0.0

    test 514 Australia1966.f_ - 1 / .f: 0.0
    test 515 Australia1966.f - 1 / .f_: 0.0

    test 516 Bessel1841.f_ - 1 / .f: -3.6334313335828483e-10
    test 517 Bessel1841.f - 1 / .f_: -4.060120295523717e-15

    test 518 BesselModified.f_ - 1 / .f: 0.0
    test 519 BesselModified.f - 1 / .f_: 0.0

    test 520 CGCS2000.f_ - 1 / .f: 0.0
    test 521 CGCS2000.f - 1 / .f_: 0.0

    test 522 Clarke1866.f_ - 1 / .f: 1.0180656317970715e-10
    test 523 Clarke1866.f - 1 / .f_: 1.1700709845463564e-15

    test 524 Clarke1880.f_ - 1 / .f: -6.275513442233205e-11
    test 525 Clarke1880.f - 1 / .f_: -7.28583859910259e-16

    test 526 Clarke1880IGN.f_ - 1 / .f: 3.73063357983483e-10
    test 527 Clarke1880IGN.f - 1 / .f_: 4.3320382003830815e-15

    test 528 Clarke1880Mod.f_ - 1 / .f: 6.866684998385608e-11
    test 529 Clarke1880Mod.f - 1 / .f_: 7.971054372113429e-16

    test 530 CPM1799.f_ - 1 / .f: -4.774847184307873e-11
    test 531 CPM1799.f - 1 / .f_: -4.2674197509029455e-16

    test 532 Delambre1810.f_ - 1 / .f: 6.008349373587407e-11
    test 533 Delambre1810.f - 1 / .f_: 6.192962809237201e-16

    test 534 Engelis1985.f_ - 1 / .f: 3.171862772433087e-11
    test 535 Engelis1985.f - 1 / .f_: 3.5691935518222806e-16

    test 536 Everest1969.f_ - 1 / .f: -1.0334133548894897e-10
    test 537 Everest1969.f - 1 / .f_: -1.1418817280617333e-15

    test 538 Everest1975.f_ - 1 / .f: 2.1088908397359774e-11
    test 539 Everest1975.f - 1 / .f_: 2.3288662664988635e-16

    test 540 Fisher1968.f_ - 1 / .f: 6.394884621840902e-11
    test 541 Fisher1968.f - 1 / .f_: 7.186091999233923e-16

    test 542 GEM10C.f_ - 1 / .f: 3.501554601825774e-11
    test 543 GEM10C.f - 1 / .f_: 3.937822290467352e-16

    test 544 GRS67.f_ - 1 / .f: 0.0
    test 545 GRS67.f - 1 / .f_: 0.0

    test 546 GRS80.f_ - 1 / .f: 5.7980287238024175e-12
    test 547 GRS80.f - 1 / .f_: 6.505213034913027e-17

    test 548 Helmert1906.f_ - 1 / .f: 1.944044925039634e-11
    test 549 Helmert1906.f - 1 / .f_: 2.185751579730777e-16

    test 550 IAU76.f_ - 1 / .f: 0.0
    test 551 IAU76.f - 1 / .f_: 0.0

    test 552 IERS1989.f_ - 1 / .f: 0.0
    test 553 IERS1989.f - 1 / .f_: 0.0

    test 554 IERS1992TOPEX.f_ - 1 / .f: -4.746425474877469e-11
    test 555 IERS1992TOPEX.f - 1 / .f_: -5.334274688628682e-16

    test 556 IERS2003.f_ - 1 / .f: -3.6777692002942786e-11
    test 557 IERS2003.f - 1 / .f_: -4.137315490204685e-16

    test 558 Intl1924.f_ - 1 / .f: 0.0
    test 559 Intl1924.f - 1 / .f_: 0.0

    test 560 Intl1967.f_ - 1 / .f: -1.3528733688872308e-11
    test 561 Intl1967.f - 1 / .f_: -1.5222198501696482e-16

    test 562 Krassovski1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 563 Krassovski1940.f - 1 / .f_: -4.358492733391728e-16

    test 564 Krassowsky1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 565 Krassowsky1940.f - 1 / .f_: -4.358492733391728e-16

    test 566 Maupertuis1738.f_ - 1 / .f: 1.5347723092418164e-11
    test 567 Maupertuis1738.f - 1 / .f_: 4.206704429243757e-16

    test 568 Mercury1960.f_ - 1 / .f: -4.803268893738277e-11
    test 569 Mercury1960.f - 1 / .f_: -5.39499001028787e-16

    test 570 Mercury1968Mod.f_ - 1 / .f: 6.394884621840902e-11
    test 571 Mercury1968Mod.f - 1 / .f_: 7.186091999233923e-16

    test 572 NWL1965.f_ - 1 / .f: 5.32054400537163e-11
    test 573 NWL1965.f - 1 / .f_: 5.980459183430042e-16

    test 574 OSU86F.f_ - 1 / .f: 1.460875864722766e-11
    test 575 OSU86F.f - 1 / .f_: 1.6436504934880247e-16

    test 576 OSU91A.f_ - 1 / .f: -2.2737367544323206e-12
    test 577 OSU91A.f - 1 / .f_: -2.5587171270657905e-17

    test 578 Plessis1817.f_ - 1 / .f: 4.2234660213580355e-11
    test 579 Plessis1817.f - 1 / .f_: 4.432218481120742e-16

    test 580 Prolate.f_ - 1 / .f: 0.0
    test 581 Prolate.f - 1 / .f_: 0.0

    test 582 PZ90.f_ - 1 / .f: 0.0
    test 583 PZ90.f - 1 / .f_: 0.0

    test 584 SGS85.f_ - 1 / .f: 1.659827830735594e-11
    test 585 SGS85.f - 1 / .f_: 1.8691645453650096e-16

    test 586 SoAmerican1969.f_ - 1 / .f: -5.6843418860808015e-11
    test 587 SoAmerican1969.f - 1 / .f_: -6.388119200284592e-16

    test 588 Struve1860.f_ - 1 / .f: 1.9042545318370685e-11
    test 589 Struve1860.f - 1 / .f_: 2.194425197110661e-16

    test 590 WGS60.f_ - 1 / .f: -5.076117304270156e-11
    test 591 WGS60.f - 1 / .f_: -5.702903427273753e-16

    test 592 WGS66.f_ - 1 / .f: 5.32054400537163e-11
    test 593 WGS66.f - 1 / .f_: 5.980459183430042e-16

    test 594 WGS72.f_ - 1 / .f: 0.0
    test 595 WGS72.f - 1 / .f_: 0.0

    test 596 WGS84.f_ - 1 / .f: 0.0
    test 597 WGS84.f - 1 / .f_: 0.0

    test 598 WGS84_NGS.f_ - 1 / .f: 0.0
    test 599 WGS84_NGS.f - 1 / .f_: 0.0

    testEllipsoid2(pygeodesy.ellipsoids, 24.10.15)
    test 600 _2_Airy1830: a=6377563.396, f=0.0033409, f_=299.3249646, b=6356256.9092373
    test 601 _2_AiryModified: a=6377340.189, f=0.0033409, f_=299.3249646, b=6356034.4479385
    test 602 _2_ATS1977: a=6378135, f=0.0033528, f_=298.257, b=6356750.3049216
    test 603 _2_Australia1966: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 604 _2_Bessel1841: a=6377397.155, f=0.0033428, f_=299.1528128, b=6356078.962818
    test 605 _2_BesselModified: a=6377492.018, f=0.0033428, f_=299.1528128, b=6356173.5087127
    test 606 _2_CGCS2000: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141404
    test 607 _2_Clarke1866: a=6378206.4, f=0.0033901, f_=294.9786982, b=6356583.8
    test 608 _2_Clarke1880: a=6378249.145, f=0.0034076, f_=293.465, b=6356514.8695498
    test 609 _2_Clarke1880IGN: a=6378249.2, f=0.0034075, f_=293.4660213, b=6356515
    test 610 _2_Clarke1880Mod: a=6378249.145, f=0.0034075, f_=293.4663077, b=6356514.9663955
    test 611 _2_CPM1799: a=6375738.7, f=0.0029905, f_=334.39, b=6356671.9255749
    test 612 _2_Delambre1810: a=6376428, f=0.0032103, f_=311.5, b=6355957.9261637
    test 613 _2_Engelis1985: a=6378136.05, f=0.0033528, f_=298.2566, b=6356751.3227215
    test 614 _2_Everest1969: a=6377295.664, f=0.0033244, f_=300.8017, b=6356094.667915
    test 615 _2_Everest1975: a=6377299.151, f=0.0033244, f_=300.8017255, b=6356098.1451201
    test 616 _2_Fisher1968: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 617 _2_GEM10C: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142478
    test 618 _2_GPES: a=6378135, f=0, f_=0, b=6378135
    test 619 _2_GRS67: a=6378160, f=0.0033529, f_=298.2471674, b=6356774.5160907
    test 620 _2_GRS80: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 621 _2_Helmert1906: a=6378200, f=0.0033523, f_=298.3, b=6356818.1696279
    test 622 _2_IAU76: a=6378140, f=0.0033528, f_=298.257, b=6356755.2881575
    test 623 _2_IERS1989: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 624 _2_IERS1992TOPEX: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165922
    test 625 _2_IERS2003: a=6378136.6, f=0.0033528, f_=298.25642, b=6356751.8579716
    test 626 _2_Intl1924: a=6378388, f=0.003367, f_=297, b=6356911.9461279
    test 627 _2_Intl1967: a=6378157.5, f=0.0033529, f_=298.2496154, b=6356772.2
    test 628 _2_Krassovski1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 629 _2_Krassowsky1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 630 _2_Maupertuis1738: a=6397300, f=0.0052356, f_=191, b=6363806.2827225
    test 631 _2_Mercury1960: a=6378166, f=0.0033523, f_=298.3, b=6356784.2836071
    test 632 _2_Mercury1968Mod: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 633 _2_NWL1965: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 634 _2_OSU86F: a=6378136.2, f=0.0033528, f_=298.2572236, b=6356751.5169301
    test 635 _2_OSU91A: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165948
    test 636 _2_Plessis1817: a=6376523, f=0.00324, f_=308.64, b=6355862.9332556
    test 637 _2_Prolate: a=6356752.3142452, f=-0.0033641, f_=-297.2572236, b=6378137
    test 638 _2_PZ90: a=6378136, f=0.0033528, f_=298.2578393, b=6356751.3617457
    test 639 _2_SGS85: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 640 _2_SoAmerican1969: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 641 _2_Sphere: a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 642 _2_SphereAuthalic: a=6371000, f=0, f_=0, b=6371000
    test 643 _2_SpherePopular: a=6378137, f=0, f_=0, b=6378137
    test 644 _2_Struve1860: a=6378298.3, f=0.0033929, f_=294.73, b=6356657.1426696
    test 645 _2_WGS60: a=6378165, f=0.0033523, f_=298.3, b=6356783.2869594
    test 646 _2_WGS66: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 647 _2_WGS72: a=6378135, f=0.0033528, f_=298.26, b=6356750.5200161
    test 648 _2_WGS84: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142452
    test 649 _2_WGS84_NGS: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403

    testa_f2Tuple(pygeodesy.ellipsoids, 24.10.15)
    test 650 a_b_Airy1830: a=6377563.396, f=0.0033409, f_=299.3249646, b=6356256.9092373
    test 651 a_b_AiryModified: a=6377340.189, f=0.0033409, f_=299.3249646, b=6356034.4479385
    test 652 a_b_ATS1977: a=6378135, f=0.0033528, f_=298.257, b=6356750.3049216
    test 653 a_b_Australia1966: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 654 a_b_Bessel1841: a=6377397.155, f=0.0033428, f_=299.1528128, b=6356078.962818
    test 655 a_b_BesselModified: a=6377492.018, f=0.0033428, f_=299.1528128, b=6356173.5087127
    test 656 a_b_CGCS2000: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141404
    test 657 a_b_Clarke1866: a=6378206.4, f=0.0033901, f_=294.9786982, b=6356583.8
    test 658 a_b_Clarke1880: a=6378249.145, f=0.0034076, f_=293.465, b=6356514.8695498
    test 659 a_b_Clarke1880IGN: a=6378249.2, f=0.0034075, f_=293.4660213, b=6356515
    test 660 a_b_Clarke1880Mod: a=6378249.145, f=0.0034075, f_=293.4663077, b=6356514.9663955
    test 661 a_b_CPM1799: a=6375738.7, f=0.0029905, f_=334.39, b=6356671.9255749
    test 662 a_b_Delambre1810: a=6376428, f=0.0032103, f_=311.5, b=6355957.9261637
    test 663 a_b_Engelis1985: a=6378136.05, f=0.0033528, f_=298.2566, b=6356751.3227215
    test 664 a_b_Everest1969: a=6377295.664, f=0.0033244, f_=300.8017, b=6356094.667915
    test 665 a_b_Everest1975: a=6377299.151, f=0.0033244, f_=300.8017255, b=6356098.1451201
    test 666 a_b_Fisher1968: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 667 a_b_GEM10C: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142478
    test 668 a_b_GPES: a=6378135, f=0, f_=0, b=6378135
    test 669 a_b_GRS67: a=6378160, f=0.0033529, f_=298.2471674, b=6356774.5160907
    test 670 a_b_GRS80: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 671 a_b_Helmert1906: a=6378200, f=0.0033523, f_=298.3, b=6356818.1696279
    test 672 a_b_IAU76: a=6378140, f=0.0033528, f_=298.257, b=6356755.2881575
    test 673 a_b_IERS1989: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 674 a_b_IERS1992TOPEX: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165922
    test 675 a_b_IERS2003: a=6378136.6, f=0.0033528, f_=298.25642, b=6356751.8579716
    test 676 a_b_Intl1924: a=6378388, f=0.003367, f_=297, b=6356911.9461279
    test 677 a_b_Intl1967: a=6378157.5, f=0.0033529, f_=298.2496154, b=6356772.2
    test 678 a_b_Krassovski1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 679 a_b_Krassowsky1940: a=6378245, f=0.0033523, f_=298.3, b=6356863.0187731
    test 680 a_b_Maupertuis1738: a=6397300, f=0.0052356, f_=191, b=6363806.2827225
    test 681 a_b_Mercury1960: a=6378166, f=0.0033523, f_=298.3, b=6356784.2836071
    test 682 a_b_Mercury1968Mod: a=6378150, f=0.0033523, f_=298.3, b=6356768.3372444
    test 683 a_b_NWL1965: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 684 a_b_OSU86F: a=6378136.2, f=0.0033528, f_=298.2572236, b=6356751.5169301
    test 685 a_b_OSU91A: a=6378136.3, f=0.0033528, f_=298.2572236, b=6356751.6165948
    test 686 a_b_Plessis1817: a=6376523, f=0.00324, f_=308.64, b=6355862.9332556
    test 687 a_b_Prolate: a=6356752.3142452, f=-0.0033641, f_=-297.2572236, b=6378137
    test 688 a_b_PZ90: a=6378136, f=0.0033528, f_=298.2578393, b=6356751.3617457
    test 689 a_b_SGS85: a=6378136, f=0.0033528, f_=298.257, b=6356751.3015688
    test 690 a_b_SoAmerican1969: a=6378160, f=0.0033529, f_=298.25, b=6356774.7191953
    test 691 a_b_Sphere: a=6371008.771415, f=0, f_=0, b=6371008.771415
    test 692 a_b_SphereAuthalic: a=6371000, f=0, f_=0, b=6371000
    test 693 a_b_SpherePopular: a=6378137, f=0, f_=0, b=6378137
    test 694 a_b_Struve1860: a=6378298.3, f=0.0033929, f_=294.73, b=6356657.1426696
    test 695 a_b_WGS60: a=6378165, f=0.0033523, f_=298.3, b=6356783.2869594
    test 696 a_b_WGS66: a=6378145, f=0.0033529, f_=298.25, b=6356759.7694887
    test 697 a_b_WGS72: a=6378135, f=0.0033528, f_=298.26, b=6356750.5200161
    test 698 a_b_WGS84: a=6378137, f=0.0033528, f_=298.2572236, b=6356752.3142452
    test 699 a_b_WGS84_NGS: a=6378137, f=0.0033528, f_=298.2572221, b=6356752.3141403
    test 700 _a_f_ellipsoid: a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 701 _toEllipsoid2: a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518

    testFunctions(pygeodesy.ellipsoids, 24.10.15)

    test 702 a_b2f_(Airy1830): 299.32496460
    test 703 a_b2f2(Airy1830): 0.00335205
    test 704 a_b2n(Airy1830): 0.00167322
    test 705 b_f2a(Airy1830): 6377563.396
    test 706 b_f_2a(Airy1830): 6377563.396
    test 707 f_2f(Airy1830): 0.00334085
    test 708 e2f(Airy1830): 0.00334085
    test 709 n2e2(Airy1830): 0.00667054
    test 710 n2f(Airy1830): 0.00334085

    test 711 a_b2f_(AiryModified): 299.32496460
    test 712 a_b2f2(AiryModified): 0.00335205
    test 713 a_b2n(AiryModified): 0.00167322
    test 714 b_f2a(AiryModified): 6377340.189
    test 715 b_f_2a(AiryModified): 6377340.189
    test 716 f_2f(AiryModified): 0.00334085
    test 717 e2f(AiryModified): 0.00334085
    test 718 n2e2(AiryModified): 0.00667054
    test 719 n2f(AiryModified): 0.00334085

    test 720 a_b2f_(ATS1977): 298.25700000
    test 721 a_b2f2(ATS1977): 0.00336409
    test 722 a_b2n(ATS1977): 0.00167922
    test 723 b_f2a(ATS1977): 6378135.000
    test 724 b_f_2a(ATS1977): 6378135.000
    test 725 f_2f(ATS1977): 0.00335281
    test 726 e2f(ATS1977): 0.00335281
    test 727 n2e2(ATS1977): 0.00669438
    test 728 n2f(ATS1977): 0.00335281

    test 729 a_b2f_(Australia1966): 298.25000000
    test 730 a_b2f2(Australia1966): 0.00336417
    test 731 a_b2n(Australia1966): 0.00167926
    test 732 b_f2a(Australia1966): 6378160.000
    test 733 b_f_2a(Australia1966): 6378160.000
    test 734 f_2f(Australia1966): 0.00335289
    test 735 e2f(Australia1966): 0.00335289
    test 736 n2e2(Australia1966): 0.00669454
    test 737 n2f(Australia1966): 0.00335289

    test 738 a_b2f_(Bessel1841): 299.15281280
    test 739 a_b2f2(Bessel1841): 0.00335398
    test 740 a_b2n(Bessel1841): 0.00167418
    test 741 b_f2a(Bessel1841): 6377397.155
    test 742 b_f_2a(Bessel1841): 6377397.155
    test 743 f_2f(Bessel1841): 0.00334277
    test 744 e2f(Bessel1841): 0.00334277
    test 745 n2e2(Bessel1841): 0.00667437
    test 746 n2f(Bessel1841): 0.00334277

    test 747 a_b2f_(BesselModified): 299.15281280
    test 748 a_b2f2(BesselModified): 0.00335398
    test 749 a_b2n(BesselModified): 0.00167418
    test 750 b_f2a(BesselModified): 6377492.018
    test 751 b_f_2a(BesselModified): 6377492.018
    test 752 f_2f(BesselModified): 0.00334277
    test 753 e2f(BesselModified): 0.00334277
    test 754 n2e2(BesselModified): 0.00667437
    test 755 n2f(BesselModified): 0.00334277

    test 756 a_b2f_(CGCS2000): 298.25722210
    test 757 a_b2f2(CGCS2000): 0.00336409
    test 758 a_b2n(CGCS2000): 0.00167922
    test 759 b_f2a(CGCS2000): 6378137.000
    test 760 b_f_2a(CGCS2000): 6378137.000
    test 761 f_2f(CGCS2000): 0.00335281
    test 762 e2f(CGCS2000): 0.00335281
    test 763 n2e2(CGCS2000): 0.00669438
    test 764 n2f(CGCS2000): 0.00335281

    test 765 a_b2f_(Clarke1866): 294.97869821
    test 766 a_b2f2(Clarke1866): 0.00340161
    test 767 a_b2n(Clarke1866): 0.00169792
    test 768 b_f2a(Clarke1866): 6378206.400
    test 769 b_f_2a(Clarke1866): 6378206.400
    test 770 f_2f(Clarke1866): 0.00339008
    test 771 e2f(Clarke1866): 0.00339008
    test 772 n2e2(Clarke1866): 0.00676866
    test 773 n2f(Clarke1866): 0.00339008

    test 774 a_b2f_(Clarke1880): 293.46500000
    test 775 a_b2f2(Clarke1880): 0.00341921
    test 776 a_b2n(Clarke1880): 0.00170669
    test 777 b_f2a(Clarke1880): 6378249.145
    test 778 b_f_2a(Clarke1880): 6378249.145
    test 779 f_2f(Clarke1880): 0.00340756
    test 780 e2f(Clarke1880): 0.00340756
    test 781 n2e2(Clarke1880): 0.00680351
    test 782 n2f(Clarke1880): 0.00340756

    test 783 a_b2f_(Clarke1880IGN): 293.46602129
    test 784 a_b2f2(Clarke1880IGN): 0.00341920
    test 785 a_b2n(Clarke1880IGN): 0.00170668
    test 786 b_f2a(Clarke1880IGN): 6378249.200
    test 787 b_f_2a(Clarke1880IGN): 6378249.200
    test 788 f_2f(Clarke1880IGN): 0.00340755
    test 789 e2f(Clarke1880IGN): 0.00340755
    test 790 n2e2(Clarke1880IGN): 0.00680349
    test 791 n2f(Clarke1880IGN): 0.00340755

    test 792 a_b2f_(Clarke1880Mod): 293.46630766
    test 793 a_b2f2(Clarke1880Mod): 0.00341920
    test 794 a_b2n(Clarke1880Mod): 0.00170668
    test 795 b_f2a(Clarke1880Mod): 6378249.145
    test 796 b_f_2a(Clarke1880Mod): 6378249.145
    test 797 f_2f(Clarke1880Mod): 0.00340755
    test 798 e2f(Clarke1880Mod): 0.00340755
    test 799 n2e2(Clarke1880Mod): 0.00680348
    test 800 n2f(Clarke1880Mod): 0.00340755

    test 801 a_b2f_(CPM1799): 334.39000000
    test 802 a_b2f2(CPM1799): 0.00299949
    test 803 a_b2n(CPM1799): 0.00149750
    test 804 b_f2a(CPM1799): 6375738.700
    test 805 b_f_2a(CPM1799): 6375738.700
    test 806 f_2f(CPM1799): 0.00299052
    test 807 e2f(CPM1799): 0.00299052
    test 808 n2e2(CPM1799): 0.00597210
    test 809 n2f(CPM1799): 0.00299052

    test 810 a_b2f_(Delambre1810): 311.50000000
    test 811 a_b2f2(Delambre1810): 0.00322061
    test 812 a_b2n(Delambre1810): 0.00160772
    test 813 b_f2a(Delambre1810): 6376428.000
    test 814 b_f_2a(Delambre1810): 6376428.000
    test 815 f_2f(Delambre1810): 0.00321027
    test 816 e2f(Delambre1810): 0.00321027
    test 817 n2e2(Delambre1810): 0.00641024
    test 818 n2f(Delambre1810): 0.00321027

    test 819 a_b2f_(Engelis1985): 298.25660000
    test 820 a_b2f2(Engelis1985): 0.00336410
    test 821 a_b2n(Engelis1985): 0.00167922
    test 822 b_f2a(Engelis1985): 6378136.050
    test 823 b_f_2a(Engelis1985): 6378136.050
    test 824 f_2f(Engelis1985): 0.00335282
    test 825 e2f(Engelis1985): 0.00335282
    test 826 n2e2(Engelis1985): 0.00669439
    test 827 n2f(Engelis1985): 0.00335282

    test 828 a_b2f_(Everest1969): 300.80170000
    test 829 a_b2f2(Everest1969): 0.00333554
    test 830 a_b2n(Everest1969): 0.00166499
    test 831 b_f2a(Everest1969): 6377295.664
    test 832 b_f_2a(Everest1969): 6377295.664
    test 833 f_2f(Everest1969): 0.00332445
    test 834 e2f(Everest1969): 0.00332445
    test 835 n2e2(Everest1969): 0.00663785
    test 836 n2f(Everest1969): 0.00332445

    test 837 a_b2f_(Everest1975): 300.80172550
    test 838 a_b2f2(Everest1975): 0.00333554
    test 839 a_b2n(Everest1975): 0.00166499
    test 840 b_f2a(Everest1975): 6377299.151
    test 841 b_f_2a(Everest1975): 6377299.151
    test 842 f_2f(Everest1975): 0.00332445
    test 843 e2f(Everest1975): 0.00332445
    test 844 n2e2(Everest1975): 0.00663785
    test 845 n2f(Everest1975): 0.00332445

    test 846 a_b2f_(Fisher1968): 298.30000000
    test 847 a_b2f2(Fisher1968): 0.00336361
    test 848 a_b2n(Fisher1968): 0.00167898
    test 849 b_f2a(Fisher1968): 6378150.000
    test 850 b_f_2a(Fisher1968): 6378150.000
    test 851 f_2f(Fisher1968): 0.00335233
    test 852 e2f(Fisher1968): 0.00335233
    test 853 n2e2(Fisher1968): 0.00669342
    test 854 n2f(Fisher1968): 0.00335233

    test 855 a_b2f_(GEM10C): 298.25722360
    test 856 a_b2f2(GEM10C): 0.00336409
    test 857 a_b2n(GEM10C): 0.00167922
    test 858 b_f2a(GEM10C): 6378137.000
    test 859 b_f_2a(GEM10C): 6378137.000
    test 860 f_2f(GEM10C): 0.00335281
    test 861 e2f(GEM10C): 0.00335281
    test 862 n2e2(GEM10C): 0.00669438
    test 863 n2f(GEM10C): 0.00335281

    test 864 a_b2f_(GPES): 0.00000000
    test 865 a_b2f2(GPES): 0.00000000
    test 866 a_b2n(GPES): 0.00000000
    test 867 b_f2a(GPES): 6378135.000
    test 868 b_f_2a(GPES): 6378135.000
    test 869 f_2f(GPES): 0.00000000
    test 870 e2f(GPES): 0.00000000
    test 871 n2e2(GPES): 0.00000000
    test 872 n2f(GPES): 0.00000000

    test 873 a_b2f_(GRS67): 298.24716743
    test 874 a_b2f2(GRS67): 0.00336420
    test 875 a_b2n(GRS67): 0.00167928
    test 876 b_f2a(GRS67): 6378160.000
    test 877 b_f_2a(GRS67): 6378160.000
    test 878 f_2f(GRS67): 0.00335292
    test 879 e2f(GRS67): 0.00335292
    test 880 n2e2(GRS67): 0.00669461
    test 881 n2f(GRS67): 0.00335292

    test 882 a_b2f_(GRS80): 298.25722210
    test 883 a_b2f2(GRS80): 0.00336409
    test 884 a_b2n(GRS80): 0.00167922
    test 885 b_f2a(GRS80): 6378137.000
    test 886 b_f_2a(GRS80): 6378137.000
    test 887 f_2f(GRS80): 0.00335281
    test 888 e2f(GRS80): 0.00335281
    test 889 n2e2(GRS80): 0.00669438
    test 890 n2f(GRS80): 0.00335281

    test 891 a_b2f_(Helmert1906): 298.30000000
    test 892 a_b2f2(Helmert1906): 0.00336361
    test 893 a_b2n(Helmert1906): 0.00167898
    test 894 b_f2a(Helmert1906): 6378200.000
    test 895 b_f_2a(Helmert1906): 6378200.000
    test 896 f_2f(Helmert1906): 0.00335233
    test 897 e2f(Helmert1906): 0.00335233
    test 898 n2e2(Helmert1906): 0.00669342
    test 899 n2f(Helmert1906): 0.00335233

    test 900 a_b2f_(IAU76): 298.25700000
    test 901 a_b2f2(IAU76): 0.00336409
    test 902 a_b2n(IAU76): 0.00167922
    test 903 b_f2a(IAU76): 6378140.000
    test 904 b_f_2a(IAU76): 6378140.000
    test 905 f_2f(IAU76): 0.00335281
    test 906 e2f(IAU76): 0.00335281
    test 907 n2e2(IAU76): 0.00669438
    test 908 n2f(IAU76): 0.00335281

    test 909 a_b2f_(IERS1989): 298.25700000
    test 910 a_b2f2(IERS1989): 0.00336409
    test 911 a_b2n(IERS1989): 0.00167922
    test 912 b_f2a(IERS1989): 6378136.000
    test 913 b_f_2a(IERS1989): 6378136.000
    test 914 f_2f(IERS1989): 0.00335281
    test 915 e2f(IERS1989): 0.00335281
    test 916 n2e2(IERS1989): 0.00669438
    test 917 n2f(IERS1989): 0.00335281

    test 918 a_b2f_(IERS1992TOPEX): 298.25722356
    test 919 a_b2f2(IERS1992TOPEX): 0.00336409
    test 920 a_b2n(IERS1992TOPEX): 0.00167922
    test 921 b_f2a(IERS1992TOPEX): 6378136.300
    test 922 b_f_2a(IERS1992TOPEX): 6378136.300
    test 923 f_2f(IERS1992TOPEX): 0.00335281
    test 924 e2f(IERS1992TOPEX): 0.00335281
    test 925 n2e2(IERS1992TOPEX): 0.00669438
    test 926 n2f(IERS1992TOPEX): 0.00335281

    test 927 a_b2f_(IERS2003): 298.25642000
    test 928 a_b2f2(IERS2003): 0.00336410
    test 929 a_b2n(IERS2003): 0.00167922
    test 930 b_f2a(IERS2003): 6378136.600
    test 931 b_f_2a(IERS2003): 6378136.600
    test 932 f_2f(IERS2003): 0.00335282
    test 933 e2f(IERS2003): 0.00335282
    test 934 n2e2(IERS2003): 0.00669440
    test 935 n2f(IERS2003): 0.00335282

    test 936 a_b2f_(Intl1924): 297.00000000
    test 937 a_b2f2(Intl1924): 0.00337838
    test 938 a_b2n(Intl1924): 0.00168634
    test 939 b_f2a(Intl1924): 6378388.000
    test 940 b_f_2a(Intl1924): 6378388.000
    test 941 f_2f(Intl1924): 0.00336700
    test 942 e2f(Intl1924): 0.00336700
    test 943 n2e2(Intl1924): 0.00672267
    test 944 n2f(Intl1924): 0.00336700

    test 945 a_b2f_(Intl1967): 298.24961539
    test 946 a_b2f2(Intl1967): 0.00336418
    test 947 a_b2n(Intl1967): 0.00167926
    test 948 b_f2a(Intl1967): 6378157.500
    test 949 b_f_2a(Intl1967): 6378157.500
    test 950 f_2f(Intl1967): 0.00335290
    test 951 e2f(Intl1967): 0.00335290
    test 952 n2e2(Intl1967): 0.00669455
    test 953 n2f(Intl1967): 0.00335290

    test 954 a_b2f_(Krassovski1940): 298.30000000
    test 955 a_b2f2(Krassovski1940): 0.00336361
    test 956 a_b2n(Krassovski1940): 0.00167898
    test 957 b_f2a(Krassovski1940): 6378245.000
    test 958 b_f_2a(Krassovski1940): 6378245.000
    test 959 f_2f(Krassovski1940): 0.00335233
    test 960 e2f(Krassovski1940): 0.00335233
    test 961 n2e2(Krassovski1940): 0.00669342
    test 962 n2f(Krassovski1940): 0.00335233

    test 963 a_b2f_(Krassowsky1940): 298.30000000
    test 964 a_b2f2(Krassowsky1940): 0.00336361
    test 965 a_b2n(Krassowsky1940): 0.00167898
    test 966 b_f2a(Krassowsky1940): 6378245.000
    test 967 b_f_2a(Krassowsky1940): 6378245.000
    test 968 f_2f(Krassowsky1940): 0.00335233
    test 969 e2f(Krassowsky1940): 0.00335233
    test 970 n2e2(Krassowsky1940): 0.00669342
    test 971 n2f(Krassowsky1940): 0.00335233

    test 972 a_b2f_(Maupertuis1738): 191.00000000
    test 973 a_b2f2(Maupertuis1738): 0.00526316
    test 974 a_b2n(Maupertuis1738): 0.00262467
    test 975 b_f2a(Maupertuis1738): 6397300.000
    test 976 b_f_2a(Maupertuis1738): 6397300.000
    test 977 f_2f(Maupertuis1738): 0.00523560
    test 978 e2f(Maupertuis1738): 0.00523560
    test 979 n2e2(Maupertuis1738): 0.01044379
    test 980 n2f(Maupertuis1738): 0.00523560

    test 981 a_b2f_(Mercury1960): 298.30000000
    test 982 a_b2f2(Mercury1960): 0.00336361
    test 983 a_b2n(Mercury1960): 0.00167898
    test 984 b_f2a(Mercury1960): 6378166.000
    test 985 b_f_2a(Mercury1960): 6378166.000
    test 986 f_2f(Mercury1960): 0.00335233
    test 987 e2f(Mercury1960): 0.00335233
    test 988 n2e2(Mercury1960): 0.00669342
    test 989 n2f(Mercury1960): 0.00335233

    test 990 a_b2f_(Mercury1968Mod): 298.30000000
    test 991 a_b2f2(Mercury1968Mod): 0.00336361
    test 992 a_b2n(Mercury1968Mod): 0.00167898
    test 993 b_f2a(Mercury1968Mod): 6378150.000
    test 994 b_f_2a(Mercury1968Mod): 6378150.000
    test 995 f_2f(Mercury1968Mod): 0.00335233
    test 996 e2f(Mercury1968Mod): 0.00335233
    test 997 n2e2(Mercury1968Mod): 0.00669342
    test 998 n2f(Mercury1968Mod): 0.00335233

    test 999 a_b2f_(NWL1965): 298.25000000
    test 1000 a_b2f2(NWL1965): 0.00336417
    test 1001 a_b2n(NWL1965): 0.00167926
    test 1002 b_f2a(NWL1965): 6378145.000
    test 1003 b_f_2a(NWL1965): 6378145.000
    test 1004 f_2f(NWL1965): 0.00335289
    test 1005 e2f(NWL1965): 0.00335289
    test 1006 n2e2(NWL1965): 0.00669454
    test 1007 n2f(NWL1965): 0.00335289

    test 1008 a_b2f_(OSU86F): 298.25722360
    test 1009 a_b2f2(OSU86F): 0.00336409
    test 1010 a_b2n(OSU86F): 0.00167922
    test 1011 b_f2a(OSU86F): 6378136.200
    test 1012 b_f_2a(OSU86F): 6378136.200
    test 1013 f_2f(OSU86F): 0.00335281
    test 1014 e2f(OSU86F): 0.00335281
    test 1015 n2e2(OSU86F): 0.00669438
    test 1016 n2f(OSU86F): 0.00335281

    test 1017 a_b2f_(OSU91A): 298.25722360
    test 1018 a_b2f2(OSU91A): 0.00336409
    test 1019 a_b2n(OSU91A): 0.00167922
    test 1020 b_f2a(OSU91A): 6378136.300
    test 1021 b_f_2a(OSU91A): 6378136.300
    test 1022 f_2f(OSU91A): 0.00335281
    test 1023 e2f(OSU91A): 0.00335281
    test 1024 n2e2(OSU91A): 0.00669438
    test 1025 n2f(OSU91A): 0.00335281

    test 1026 a_b2f_(Plessis1817): 308.64000000
    test 1027 a_b2f2(Plessis1817): 0.00325055
    test 1028 a_b2n(Plessis1817): 0.00162264
    test 1029 b_f2a(Plessis1817): 6376523.000
    test 1030 b_f_2a(Plessis1817): 6376523.000
    test 1031 f_2f(Plessis1817): 0.00324002
    test 1032 e2f(Plessis1817): 0.00324002
    test 1033 n2e2(Plessis1817): 0.00646954
    test 1034 n2f(Plessis1817): 0.00324002

    test 1035 a_b2f_(Prolate): -297.25722356
    test 1036 a_b2f2(Prolate): -0.00335281
    test 1037 a_b2n(Prolate): -0.00167922
    test 1038 b_f2a(Prolate): 6356752.314
    test 1039 b_f_2a(Prolate): 6356752.314
    test 1040 f_2f(Prolate): -0.00336409
    test 1041 e2f(Prolate): 0.00337545  FAILED, KNOWN, expected -0.00336409
    test 1042 n2e2(Prolate): -0.00673950
    test 1043 n2f(Prolate): -0.00336409

    test 1044 a_b2f_(PZ90): 298.25783930
    test 1045 a_b2f2(PZ90): 0.00336408
    test 1046 a_b2n(PZ90): 0.00167922
    test 1047 b_f2a(PZ90): 6378136.000
    test 1048 b_f_2a(PZ90): 6378136.000
    test 1049 f_2f(PZ90): 0.00335280
    test 1050 e2f(PZ90): 0.00335280
    test 1051 n2e2(PZ90): 0.00669437
    test 1052 n2f(PZ90): 0.00335280

    test 1053 a_b2f_(SGS85): 298.25700000
    test 1054 a_b2f2(SGS85): 0.00336409
    test 1055 a_b2n(SGS85): 0.00167922
    test 1056 b_f2a(SGS85): 6378136.000
    test 1057 b_f_2a(SGS85): 6378136.000
    test 1058 f_2f(SGS85): 0.00335281
    test 1059 e2f(SGS85): 0.00335281
    test 1060 n2e2(SGS85): 0.00669438
    test 1061 n2f(SGS85): 0.00335281

    test 1062 a_b2f_(SoAmerican1969): 298.25000000
    test 1063 a_b2f2(SoAmerican1969): 0.00336417
    test 1064 a_b2n(SoAmerican1969): 0.00167926
    test 1065 b_f2a(SoAmerican1969): 6378160.000
    test 1066 b_f_2a(SoAmerican1969): 6378160.000
    test 1067 f_2f(SoAmerican1969): 0.00335289
    test 1068 e2f(SoAmerican1969): 0.00335289
    test 1069 n2e2(SoAmerican1969): 0.00669454
    test 1070 n2f(SoAmerican1969): 0.00335289

    test 1071 a_b2f_(Sphere): 0.00000000
    test 1072 a_b2f2(Sphere): 0.00000000
    test 1073 a_b2n(Sphere): 0.00000000
    test 1074 b_f2a(Sphere): 6371008.771
    test 1075 b_f_2a(Sphere): 6371008.771
    test 1076 f_2f(Sphere): 0.00000000
    test 1077 e2f(Sphere): 0.00000000
    test 1078 n2e2(Sphere): 0.00000000
    test 1079 n2f(Sphere): 0.00000000

    test 1080 a_b2f_(SphereAuthalic): 0.00000000
    test 1081 a_b2f2(SphereAuthalic): 0.00000000
    test 1082 a_b2n(SphereAuthalic): 0.00000000
    test 1083 b_f2a(SphereAuthalic): 6371000.000
    test 1084 b_f_2a(SphereAuthalic): 6371000.000
    test 1085 f_2f(SphereAuthalic): 0.00000000
    test 1086 e2f(SphereAuthalic): 0.00000000
    test 1087 n2e2(SphereAuthalic): 0.00000000
    test 1088 n2f(SphereAuthalic): 0.00000000

    test 1089 a_b2f_(SpherePopular): 0.00000000
    test 1090 a_b2f2(SpherePopular): 0.00000000
    test 1091 a_b2n(SpherePopular): 0.00000000
    test 1092 b_f2a(SpherePopular): 6378137.000
    test 1093 b_f_2a(SpherePopular): 6378137.000
    test 1094 f_2f(SpherePopular): 0.00000000
    test 1095 e2f(SpherePopular): 0.00000000
    test 1096 n2e2(SpherePopular): 0.00000000
    test 1097 n2f(SpherePopular): 0.00000000

    test 1098 a_b2f_(Struve1860): 294.73000000
    test 1099 a_b2f2(Struve1860): 0.00340449
    test 1100 a_b2n(Struve1860): 0.00169935
    test 1101 b_f2a(Struve1860): 6378298.300
    test 1102 b_f_2a(Struve1860): 6378298.300
    test 1103 f_2f(Struve1860): 0.00339294
    test 1104 e2f(Struve1860): 0.00339294
    test 1105 n2e2(Struve1860): 0.00677436
    test 1106 n2f(Struve1860): 0.00339294

    test 1107 a_b2f_(WGS60): 298.30000000
    test 1108 a_b2f2(WGS60): 0.00336361
    test 1109 a_b2n(WGS60): 0.00167898
    test 1110 b_f2a(WGS60): 6378165.000
    test 1111 b_f_2a(WGS60): 6378165.000
    test 1112 f_2f(WGS60): 0.00335233
    test 1113 e2f(WGS60): 0.00335233
    test 1114 n2e2(WGS60): 0.00669342
    test 1115 n2f(WGS60): 0.00335233

    test 1116 a_b2f_(WGS66): 298.25000000
    test 1117 a_b2f2(WGS66): 0.00336417
    test 1118 a_b2n(WGS66): 0.00167926
    test 1119 b_f2a(WGS66): 6378145.000
    test 1120 b_f_2a(WGS66): 6378145.000
    test 1121 f_2f(WGS66): 0.00335289
    test 1122 e2f(WGS66): 0.00335289
    test 1123 n2e2(WGS66): 0.00669454
    test 1124 n2f(WGS66): 0.00335289

    test 1125 a_b2f_(WGS72): 298.26000000
    test 1126 a_b2f2(WGS72): 0.00336406
    test 1127 a_b2n(WGS72): 0.00167920
    test 1128 b_f2a(WGS72): 6378135.000
    test 1129 b_f_2a(WGS72): 6378135.000
    test 1130 f_2f(WGS72): 0.00335278
    test 1131 e2f(WGS72): 0.00335278
    test 1132 n2e2(WGS72): 0.00669432
    test 1133 n2f(WGS72): 0.00335278

    test 1134 a_b2f_(WGS84): 298.25722356
    test 1135 a_b2f2(WGS84): 0.00336409
    test 1136 a_b2n(WGS84): 0.00167922
    test 1137 b_f2a(WGS84): 6378137.000
    test 1138 b_f_2a(WGS84): 6378137.000
    test 1139 f_2f(WGS84): 0.00335281
    test 1140 e2f(WGS84): 0.00335281
    test 1141 n2e2(WGS84): 0.00669438
    test 1142 n2f(WGS84): 0.00335281

    test 1143 a_b2f_(WGS84_NGS): 298.25722210
    test 1144 a_b2f2(WGS84_NGS): 0.00336409
    test 1145 a_b2n(WGS84_NGS): 0.00167922
    test 1146 b_f2a(WGS84_NGS): 6378137.000
    test 1147 b_f_2a(WGS84_NGS): 6378137.000
    test 1148 f_2f(WGS84_NGS): 0.00335281
    test 1149 e2f(WGS84_NGS): 0.00335281
    test 1150 n2e2(WGS84_NGS): 0.00669438
    test 1151 n2f(WGS84_NGS): 0.00335281

    test 1152 total: 50

    testWGS84(pygeodesy.ellipsoids, 24.10.15)
    test 1153 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1154 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1155 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1156 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1157 roc1_ 10: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1158 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1159 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1160 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1161 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1162 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1163 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1164 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1165 roc1_ 30: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1166 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1167 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1168 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1169 roc1_ 40: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1170 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1171 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1172 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1173 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1174 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1175 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1176 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1177 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1178 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1179 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1180 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1181 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1182 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1183 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1184 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1185 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1186 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1187 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1188 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1189 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1190 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testProlate(pygeodesy.ellipsoids, 24.10.15)
    test 1191 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1192 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1193 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1194 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1195 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1196 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1197 roc1_ 15: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1198 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1199 roc1_ 20: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1200 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1201 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1202 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1203 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1204 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1205 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1206 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1207 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1208 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1209 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1210 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1211 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1212 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1213 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1214 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1215 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1216 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1217 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1218 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1219 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1220 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1221 roc1_ 75: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1222 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1223 roc1_ 80: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1224 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1225 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1226 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1227 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1228 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testSphereAuthalic(pygeodesy.ellipsoids, 24.10.15)
    test 1229 roc1_ 0: 0.0
    test 1230 roc1_ 0: 0.0
    test 1231 roc1_ 5: 0.0
    test 1232 roc1_ 5: 0.0
    test 1233 roc1_ 10: 0.0
    test 1234 roc1_ 10: 0.0
    test 1235 roc1_ 15: 0.0
    test 1236 roc1_ 15: 0.0
    test 1237 roc1_ 20: 0.0
    test 1238 roc1_ 20: 0.0
    test 1239 roc1_ 25: 0.0
    test 1240 roc1_ 25: 0.0
    test 1241 roc1_ 30: 0.0
    test 1242 roc1_ 30: 0.0
    test 1243 roc1_ 35: 0.0
    test 1244 roc1_ 35: 0.0
    test 1245 roc1_ 40: 0.0
    test 1246 roc1_ 40: 0.0
    test 1247 roc1_ 45: 0.0
    test 1248 roc1_ 45: 0.0
    test 1249 roc1_ 50: 0.0
    test 1250 roc1_ 50: 0.0
    test 1251 roc1_ 55: 0.0
    test 1252 roc1_ 55: 0.0
    test 1253 roc1_ 60: 0.0
    test 1254 roc1_ 60: 0.0
    test 1255 roc1_ 65: 0.0
    test 1256 roc1_ 65: 0.0
    test 1257 roc1_ 70: 0.0
    test 1258 roc1_ 70: 0.0
    test 1259 roc1_ 75: 0.0
    test 1260 roc1_ 75: 0.0
    test 1261 roc1_ 80: 0.0
    test 1262 roc1_ 80: 0.0
    test 1263 roc1_ 85: 0.0
    test 1264 roc1_ 85: 0.0
    test 1265 roc1_ 90: 0.0
    test 1266 roc1_ 90: 0.0

    testcircle4(pygeodesy.ellipsoids, 24.10.15)

    testWGS84(pygeodesy.ellipsoids, 24.10.15)
    test 1267 circle4 0: 6378137.000000
    test 1268 circle4 0: 6378137.000000
    test 1269 circle4 10: 6377497.402124
    test 1270 circle4 10: 6377497.402124
    test 1271 circle4 20: 6375653.951276
    test 1272 circle4 20: 6375653.951276
    test 1273 circle4 30: 6372824.420294
    test 1274 circle4 30: 6372824.420294
    test 1275 circle4 40: 6369344.863240
    test 1276 circle4 40: 6369344.863240
    test 1277 circle4 50: 6365631.517537
    test 1278 circle4 50: 6365631.517537
    test 1279 circle4 60: 6362132.224397
    test 1280 circle4 60: 6362132.224397
    test 1281 circle4 70: 6359272.455642
    test 1282 circle4 70: 6359272.455642
    test 1283 circle4 80: 6357402.413808
    test 1284 circle4 80: 6357402.413808
    test 1285 circle4 90: 6356752.314245
    test 1286 circle4 90: 6356752.314245

    testSphere(pygeodesy.ellipsoids, 24.10.15)
    test 1287 circle4 0: 6371008.771415
    test 1288 circle4 0: 6371008.771415
    test 1289 circle4 10: 6371008.771415
    test 1290 circle4 10: 6371008.771415
    test 1291 circle4 20: 6371008.771415
    test 1292 circle4 20: 6371008.771415
    test 1293 circle4 30: 6371008.771415
    test 1294 circle4 30: 6371008.771415
    test 1295 circle4 40: 6371008.771415
    test 1296 circle4 40: 6371008.771415
    test 1297 circle4 50: 6371008.771415
    test 1298 circle4 50: 6371008.771415
    test 1299 circle4 60: 6371008.771415
    test 1300 circle4 60: 6371008.771415
    test 1301 circle4 70: 6371008.771415
    test 1302 circle4 70: 6371008.771415
    test 1303 circle4 80: 6371008.771415
    test 1304 circle4 80: 6371008.771415
    test 1305 circle4 90: 6371008.771415
    test 1306 circle4 90: 6371008.771415
# lazily imported pygeodesy.triaxials by ellipsoids.py line 1109
# lazily imported pygeodesy.latlonBase by basics.py line 412

    test 1307 hartzell4: (3642031.283571, 3678090.99925, 3714150.714929, 11296639.666827)

    77 of 1307 testEllipsoids.py tests (5.9%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 137.906 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testElliptic.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.elliptic by testElliptic.py line 11
# lazily imported pygeodesy.Elliptic from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EllipticError from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.Elliptic3Tuple from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EPS from .constants by testElliptic.py line 11
# lazily imported pygeodesy.fstr from .streprs by testElliptic.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.radians from .utily by testElliptic.py line 11
# lazily imported pygeodesy.Scalar from .units by testElliptic.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testElliptic.py line 11

    testing testElliptic.py 23.09.06 isLazy=3
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 k2: 0.1000000
    test 201 kp2: 0.9000000
    test 202 eps: 0.0263340
    test 203 cD: 0.816837118
    test 204 cE: 1.530757637
    test 205 cG: 1.530757637
    test 206 cH: 0.795604230
    test 207 cK: 1.612441349
    test 208 cKE: 0.081683712
    test 209 cPi: 1.612441349
    test 210 fE(phi): 0.348372822
    test 211 fDelta(sn, cn): 0.994133906
    test 212 fD(sn, cn, dn): 0.013885234
    test 213 fE(sn, cn, dn): 0.348372822
    test 214 fEd(PI_2): 0.027415224
    test 215 fEinv(PI_2): 1.612999420
    test 216 fF(sn, cn, dn): 0.349761345
    test 217 fG(sn, cn, dn): 0.348372822
    test 218 fH(sn, cn, dn): 0.335876111
    test 219 fPi(sn, cn, dn): 0.349761345
    test 220 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 221 fPi(sn, dn, None): invokation Elliptic.fH(0, 1, None): invalid

    test 222 deltaD(sn, cn, dn): -0.3223642
    test 223 deltaE(sn, cn, dn): 0.0084191
    test 224 deltaEinv(sn, cn): -0.0082518
    test 225 deltaF(sn, cn, dn): -0.0083379
    test 226 deltaG(sn, cn, dn): 0.0084191
    test 227 deltaH(sn, cn, dn): 0.3140691
    test 228 deltaPi(sn, cn, dn): -0.0083379
    test 229 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 230 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 231 RF(1,   2, 0): 1.3110287771461
    test 232 RF(0.5, 1, 0): 1.8540746773014
    test 233 RF(2,   3, 4): 0.58408284167715

    test 234 RC(0,  1/4): 3.1415926535898
    test 235 RC(9/4,  2): 0.69314718055995
    test 236 RC(1/4, -2): 0.23104906018665

    test 237 RJ(0, 1, 2, 3): 0.77688623778582
    test 238 RJ(2, 3, 4, 5): 0.14297579667157

    test 239 RD(0, 2, 1): 1.7972103521034
    test 240 RD(2, 3, 4): 0.16510527294261

    test 241 RG(0, 16, 16): 3.1415926535898
    test 242 RG(2,  3,  4): 1.7255030280692
    test 243 RG(0,  0.0796, 4): 1.0284758090288

    test 244 reset: 4

    test 245 sncndn(x, jam=True): 0.0, 1.0, 1.0
    test 246 sncndn(x, jam=True): 0.998602459, 0.052850065, 0.948830497
    test 247 sncndn(x, jam=True): 0.0, 1.0, 1.0
    test 248 sncndn(x, jam=True): 0.917152336, 0.398536815, 0.398536815
    test 249 sncndn(x, jam=True): <class 'pygeodesy.elliptic.Elliptic3Tuple'>

    test 250 sncndn(x, jam=False): 0.0, 1.0, 1.0
    test 251 sncndn(x, jam=False): 0.999219618, 0.0394988, 0.948765522
    test 252 sncndn(x, jam=False): 0.0, 1.0, 1.0
    test 253 sncndn(x, jam=False): 0.917152336, 0.398536815, 0.398536815
    test 254 sncndn(x, jam=False): <class 'pygeodesy.elliptic.Elliptic3Tuple'>

    test 255 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 256 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 257 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 258 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 259 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 260 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    test 261 _convergenceError: no convergence (1), tolerance (2)

    test 262 _ellipticError: invokation Elliptic.testElliptic(None): test
    test 263 _ellipticError: invokation Elliptic._ellipticError(None): invokation Elliptic.testElliptic(None): test

    all 263 testElliptic.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 564.504 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEpsg.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Epsg from .epsg by testEpsg.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testEpsg.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testEpsg.py 23.03.27 isLazy=3
    test 1 Epsg: Epsg(32661)
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: Epsg(32761)
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: Epsg(32761)
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: Epsg(32761)
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: Epsg(32661)
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: Epsg(32661)
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 TMcoord 1: 38W N
    test 142 TMcoord 2: 34P N
    test 143 TMcoord 3: 43Q N
    test 144 TMcoord 4: 35Q N
    test 145 TMcoord 5: 37N N
    test 146 TMcoord 6: 34W N
    test 147 TMcoord 7: 40V N
    test 148 TMcoord 8: 34P N
    test 149 TMcoord 9: 41S N
    test 150 TMcoord 10: 41X N
    test 151 TMcoord 11: 43X N
    test 152 TMcoord 12: 44Q N
    test 153 TMcoord 13: 44R N
    test 154 TMcoord 14: 39U N
    test 155 TMcoord 15: 44P N
    test 156 TMcoord 16: 39R N
    test 157 TMcoord 17: 41W N
    test 158 TMcoord 18: 45U N
    test 159 TMcoord 19: 32R N
    test 160 TMcoord 20: 44X N
    test 161 TMcoord 21: 35T N
    test 162 TMcoord 22: 32T N
    test 163 TMcoord 23: 31T N
    test 164 TMcoord 24: 35N N
    test 165 TMcoord 25: 45P N
    test 166 TMcoord 26: 33V N
    test 167 TMcoord 27: 41Q N
    test 168 TMcoord 28: 40X N
    test 169 TMcoord 29: 33P N
    test 170 TMcoord 30: 40S N
    test 171 TMcoord 31: 37T N
    test 172 TMcoord 32: 33X N
    test 173 TMcoord 33: 41U N
    test 174 TMcoord 34: 43Q N
    test 175 TMcoord 35: 42S N
    test 176 TMcoord 36: 33S N
    test 177 TMcoord 37: 35X N
    test 178 TMcoord 38: 38N N
    test 179 TMcoord 39: 44P N
    test 180 TMcoord 40: 33U N
    test 181 TMcoord 41: 37W N
    test 182 TMcoord 42: 36T N
    test 183 TMcoord 43: 36Q N
    test 184 TMcoord 44: 34S N
    test 185 TMcoord 45: 37S N
    test 186 TMcoord 46: 34N N
    test 187 TMcoord 47: 34T N
    test 188 TMcoord 48: 43Q N
    test 189 TMcoord 49: 32N N
    test 190 TMcoord 50: 31Q N
    test 191 TMcoord 51: 45R N
    test 192 TMcoord 52: 45R N
    test 193 TMcoord 53: 34W N
    test 194 TMcoord 54: 44V N
    test 195 TMcoord 55: 44S N
    test 196 TMcoord 56: 39R N
    test 197 TMcoord 57: 00Z N
    test 198 TMcoord 58: 36R N
    test 199 TMcoord 59: 41V N
    test 200 TMcoord 60: 42N N
    test 201 TMcoord 61: 43S N
    test 202 TMcoord 62: 34N N
    test 203 TMcoord 63: 34U N
    test 204 TMcoord 64: 38V N
    test 205 TMcoord 65: 34Q N
    test 206 TMcoord 66: 38P N
    test 207 TMcoord 67: 42S N
    test 208 TMcoord 68: 44S N
    test 209 TMcoord 69: 31Q N
    test 210 TMcoord 70: 40W N
    test 211 TMcoord 71: 35X N
    test 212 TMcoord 72: 32T N
    test 213 TMcoord 73: 45U N
    test 214 TMcoord 74: 40Q N
    test 215 TMcoord 75: 31T N
    test 216 TMcoord 76: 44R N
    test 217 TMcoord 77: 34U N
    test 218 TMcoord 78: 38P N
    test 219 TMcoord 79: 38Q N
    test 220 TMcoord 80: 45N N
    test 221 TMcoord 81: 31S N
    test 222 TMcoord 82: 41U N
    test 223 TMcoord 83: 40V N
    test 224 TMcoord 84: 43X N
    test 225 TMcoord 85: 35N N
    test 226 TMcoord 86: 44P N
    test 227 TMcoord 87: 41N N
    test 228 TMcoord 88: 38Q N
    test 229 TMcoord 89: 43X N
    test 230 TMcoord 90: 36V N
    test 231 TMcoord 91: 34Q N
    test 232 TMcoord 92: 35W N
    test 233 TMcoord 93: 45U N
    test 234 TMcoord 94: 40R N
    test 235 TMcoord 95: 36R N
    test 236 TMcoord 96: 35S N
    test 237 TMcoord 97: 41R N
    test 238 TMcoord 98: 39Q N
    test 239 TMcoord 99: 37T N
    test 240 TMcoord 100: 42P N
    test 241 TMcoord 101: 35T N
    test 242 TMcoord 102: 34Q N
    test 243 TMcoord 103: 41T N
    test 244 TMcoord 104: 43R N
    test 245 TMcoord 105: 34Q N
    test 246 TMcoord 106: 45P N
    test 247 TMcoord 107: 31P N
    test 248 TMcoord 108: 44V N
    test 249 TMcoord 109: 42X N
    test 250 TMcoord 110: 33R N
    test 251 TMcoord 111: 37W N
    test 252 TMcoord 112: 31S N
    test 253 TMcoord 113: 42N N
    test 254 TMcoord 114: 39N N
    test 255 TMcoord 115: 39T N
    test 256 TMcoord 116: 39P N
    test 257 TMcoord 117: 34U N
    test 258 TMcoord 118: 41P N
    test 259 TMcoord 119: 37R N
    test 260 TMcoord 120: 44Q N
    test 261 TMcoord 121: 32V N
    test 262 TMcoord 122: 41R N
    test 263 TMcoord 123: 36T N
    test 264 TMcoord 124: 42U N
    test 265 TMcoord 125: 42U N
    test 266 TMcoord 126: 39T N
    test 267 TMcoord 127: 32T N
    test 268 TMcoord 128: 32Q N
    test 269 TMcoord 129: 38P N
    test 270 TMcoord 130: 34Q N
    test 271 TMcoord 131: 36V N
    test 272 TMcoord 132: 36T N
    test 273 TMcoord 133: 43T N
    test 274 TMcoord 134: 41W N
    test 275 TMcoord 135: 32V N
    test 276 TMcoord 136: 39X N
    test 277 TMcoord 137: 32U N
    test 278 TMcoord 138: 37X N
    test 279 TMcoord 139: 35N N
    test 280 TMcoord 140: 36P N
    test 281 TMcoord 141: 31S N
    test 282 TMcoord 142: 36N N
    test 283 TMcoord 143: 42S N
    test 284 TMcoord 144: 44N N
    test 285 TMcoord 145: 44P N
    test 286 TMcoord 146: 39U N
    test 287 TMcoord 147: 45Q N
    test 288 TMcoord 148: 41W N
    test 289 TMcoord 149: 41N N
    test 290 TMcoord 150: 32S N
    test 291 TMcoord 151: 32N N
    test 292 TMcoord 152: 32T N
    test 293 TMcoord 153: 38R N
    test 294 TMcoord 154: 32V N
    test 295 TMcoord 155: 37Q N
    test 296 TMcoord 156: 44N N
    test 297 TMcoord 157: 34W N
    test 298 TMcoord 158: 45N N
    test 299 TMcoord 159: 42S N
    test 300 TMcoord 160: 40T N
    test 301 TMcoord 161: 31U N
    test 302 TMcoord 162: 45Q N
    test 303 TMcoord 163: 40U N
    test 304 TMcoord 164: 45T N
    test 305 TMcoord 165: 40R N
    test 306 TMcoord 166: 31V N
    test 307 TMcoord 167: 45P N
    test 308 TMcoord 168: 43W N
    test 309 TMcoord 169: 43U N
    test 310 TMcoord 170: 44V N
    test 311 TMcoord 171: 40P N
    test 312 TMcoord 172: 36Q N
    test 313 TMcoord 173: 42Q N
    test 314 TMcoord 174: 41Q N
    test 315 TMcoord 175: 32S N
    test 316 TMcoord 176: 39P N
    test 317 TMcoord 177: 39Q N
    test 318 TMcoord 178: 39T N
    test 319 TMcoord 179: 34U N
    test 320 TMcoord 180: 32W N
    test 321 TMcoord 181: 41U N
    test 322 TMcoord 182: 31Q N
    test 323 TMcoord 183: 40N N
    test 324 TMcoord 184: 40T N
    test 325 TMcoord 185: 38P N
    test 326 TMcoord 186: 44P N
    test 327 TMcoord 187: 40N N
    test 328 TMcoord 188: 44V N
    test 329 TMcoord 189: 41V N
    test 330 TMcoord 190: 43Q N
    test 331 TMcoord 191: 43X N
    test 332 TMcoord 192: 39N N
    test 333 TMcoord 193: 38T N
    test 334 TMcoord 194: 32R N
    test 335 TMcoord 195: 37S N
    test 336 TMcoord 196: 44W N
    test 337 TMcoord 197: 43V N
    test 338 TMcoord 198: 35T N
    test 339 TMcoord 199: 44W N
    test 340 TMcoord 200: 44X N
    test 341 TMcoord 201: 33Q N
    test 342 TMcoord 202: 40W N
    test 343 TMcoord 203: 43S N
    test 344 TMcoord 204: 32U N
    test 345 TMcoord 205: 33V N
    test 346 TMcoord 206: 34R N
    test 347 TMcoord 207: 39S N
    test 348 TMcoord 208: 43W N
    test 349 TMcoord 209: 39T N
    test 350 TMcoord 210: 31W N
    test 351 TMcoord 211: 45R N
    test 352 TMcoord 212: 34W N
    test 353 TMcoord 213: 32T N
    test 354 TMcoord 214: 31P N
    test 355 TMcoord 215: 44V N
    test 356 TMcoord 216: 45U N
    test 357 TMcoord 217: 43R N
    test 358 TMcoord 218: 31N N
    test 359 TMcoord 219: 43T N
    test 360 TMcoord 220: 45R N
    test 361 TMcoord 221: 39N N
    test 362 TMcoord 222: 37S N
    test 363 TMcoord 223: 31R N
    test 364 TMcoord 224: 38Q N
    test 365 TMcoord 225: 40V N
    test 366 TMcoord 226: 45N N
    test 367 TMcoord 227: 44R N
    test 368 TMcoord 228: 43P N
    test 369 TMcoord 229: 42P N
    test 370 TMcoord 230: 45S N
    test 371 TMcoord 231: 42N N
    test 372 TMcoord 232: 38S N
    test 373 TMcoord 233: 32T N
    test 374 TMcoord 234: 41T N
    test 375 TMcoord 235: 34S N
    test 376 TMcoord 236: 40R N
    test 377 TMcoord 237: 35V N
    test 378 TMcoord 238: 38N N
    test 379 TMcoord 239: 40V N
    test 380 TMcoord 240: 36R N
    test 381 TMcoord 241: 37W N
    test 382 TMcoord 242: 45R N
    test 383 TMcoord 243: 37V N
    test 384 TMcoord 244: 33P N
    test 385 TMcoord 245: 32U N
    test 386 TMcoord 246: 38T N
    test 387 TMcoord 247: 37N N
    test 388 TMcoord 248: 36R N
    test 389 TMcoord 249: 44R N
    test 390 TMcoord 250: 44Q N
    test 391 TMcoord 251: 45R N
    test 392 TMcoord 252: 34N N
    test 393 TMcoord 253: 43S N
    test 394 TMcoord 254: 40Q N
    test 395 TMcoord 255: 33T N
    test 396 TMcoord 256: 44P N
    test 397 TMcoord 257: 39N N
    test 398 TMcoord 258: 40Q N

    all 398 testEpsg.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 652.312 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testErrors.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.crosserrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.exception_chaining from .errors by testErrors.py line 11
# lazily imported pygeodesy.LenError from .errors by testErrors.py line 11
# lazily imported pygeodesy.LimitError from .errors by testErrors.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.RangeError from .errors by testErrors.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.ClipError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CrossError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CSSError from .css by testErrors.py line 93
# lazily imported pygeodesy.EcefError from .ecef by testErrors.py line 93
# lazily imported pygeodesy.EllipticError from .elliptic by testErrors.py line 93
# lazily imported pygeodesy.EPSGError from .epsg by testErrors.py line 93
# lazily imported pygeodesy.ETMError from .etm by testErrors.py line 93
# lazily imported pygeodesy.FrechetError from .frechet by testErrors.py line 93
# lazily imported pygeodesy.GARSError from .gars by testErrors.py line 93
# lazily imported pygeodesy.GeohashError from .geohash by testErrors.py line 93
# lazily imported pygeodesy.GeoidError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.HausdorffError from .hausdorff by testErrors.py line 93
# lazily imported pygeodesy.HeightError from .heights by testErrors.py line 93
# lazily imported pygeodesy.LCCError from .lcc by testErrors.py line 93
# lazily imported pygeodesy.MGRSError from .errors by testErrors.py line 93
# lazily imported pygeodesy.OSGRError from .osgr by testErrors.py line 93
# lazily imported pygeodesy.PGMError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.PointsError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyWarning from .errors by testErrors.py line 93
# lazily imported pygeodesy.TRFError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UnitError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UPSError from .ups by testErrors.py line 93
# lazily imported pygeodesy.UTMError from .utm by testErrors.py line 93
# lazily imported pygeodesy.UTMUPSError from .utmups by testErrors.py line 93
# lazily imported pygeodesy.VectorError from .errors by testErrors.py line 93
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testErrors.py line 93
# lazily imported pygeodesy.WebMercatorError from .webmercator by testErrors.py line 93
# lazily imported pygeodesy.WGRSError from .wgrs by testErrors.py line 93

    testing testErrors.py 23.03.27 (module pygeodesy.errors 24.11.02) isLazy=3
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 SciPyError: name ('value'): test1 txt
    test 54 SciPyError: 'name=value' MISSING: test2 txt
    test 55 SciPyWarning: name ('value'): test1 txt
    test 56 SciPyWarning: 'name=value' MISSING: test2 txt
    test 57 TRFError: name ('value'): test1 txt
    test 58 TRFError: 'name=value' MISSING: test2 txt
    test 59 UnitError: name ('value'): test1 txt
    test 60 UnitError: 'name=value' MISSING: test2 txt
    test 61 UPSError: name ('value'): test1 txt
    test 62 UPSError: 'name=value' MISSING: test2 txt
    test 63 UTMError: name ('value'): test1 txt
    test 64 UTMError: 'name=value' MISSING: test2 txt
    test 65 UTMUPSError: name ('value'): test1 txt
    test 66 UTMUPSError: 'name=value' MISSING: test2 txt
    test 67 VectorError: name ('value'): test1 txt
    test 68 VectorError: 'name=value' MISSING: test2 txt
    test 69 VincentyError: name ('value'): test1 txt
    test 70 VincentyError: 'name=value' MISSING: test2 txt
    test 71 WebMercatorError: name ('value'): test1 txt
    test 72 WebMercatorError: 'name=value' MISSING: test2 txt
    test 73 WGRSError: name ('value'): test1 txt
    test 74 WGRSError: 'name=value' MISSING: test2 txt
    test 75 _InvalidError: zero (1): invalid
    test 76 _InvalidError: ValueError('zero (1): invalid')
    test 77 _InvalidError: one (2) or zero (1): outside
    test 78 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 81 _IsnotError: _None (None): not an int or float
    test 82 _IsnotError: TypeError('_None (None): not an int or float')
    test 83 _IsnotError: _None (None): not a scalar
    test 84 _IsnotError: TypeError('_None (None): not a scalar')
    test 85 _IsnotError: _None (None): not a scalar
    test 86 _IsnotError: LimitError('_None (None): not a scalar')
    test 87 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 88 crosserrors: True
    test 89 crosserrors: False
    test 90 limiterrors: True
    test 91 limiterrors: False
    test 92 rangerrors: True
    test 93 rangerrors: False
    test 94 exception_chaining: False
    test 95 exception_chaining: None
    test 96 exception_chaining: None
    test 97 _xkwds_get: test1
    test 98 _xkwds_get: test2
    test 99 _xkwds_get: _xkwds_get({})
    test 100 _xkwds_get: _xkwds_get({}, n1='d1', n2='d2')
    test 101 _xkwds_pop: test1
    test 102 _xkwds_pop: test2
    test 103 _xkwds_pop: _xkwds_pop2({})
    test 104 _xkwds_pop: _xkwds_pop2({}, n1='d1', n2='d2')

    all 104 testErrors.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.293 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.etm by testEtm.py line 11
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testEtm.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testEtm.py line 115
# lazily imported pygeodesy.ellipsoidalVincenty by testEtm.py line 115

    testing testEtm.py 23.08.30 (module pygeodesy.etm 24.11.04) isLazy=3

    testExactTransverseMercator(pygeodesy.etm, 24.11.04)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
# lazily imported pygeodesy.elliptic by etm.py line 354

    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643

    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608

    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.378357
    test 32 northing: 4235043.607933
    test 33 gamma: 67.633329
    test 34 scale: 26.336995

    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 24.11.04)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'

    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643

    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608

    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547

    test 67 easting: 0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 180.000  FAILED, KNOWN, expected 0.000
    test 73 gamma: -180.000
    test 74 scale: 1.000

    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 24.11.04)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parse: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 24.11.04)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parse: 31 N 448251 5411932
    test 102 name: parse

    1 of 102 testEtm.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 322.086 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testEtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.Etm from .etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.toEtm8 from .etm by testEtmTMcoords.py line 17

    testing testEtmTMcoords.py 24.03.22 (module pygeodesy.etm 24.11.04) isLazy=3
# lazily imported pygeodesy.elliptic by etm.py line 354
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.gamma: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.gamma: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.gamma: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.gamma: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.gamma: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.gamma: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.gamma: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.gamma: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.gamma: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.gamma: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.gamma: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.gamma: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.gamma: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.gamma: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.gamma: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.gamma: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.gamma: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.gamma: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.gamma: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.gamma: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.gamma: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.gamma: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.gamma: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.gamma: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.gamma: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.gamma: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.gamma: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.gamma: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.gamma: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.gamma: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.gamma: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.gamma: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.gamma: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.gamma: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.gamma: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.gamma: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.gamma: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.gamma: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.gamma: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.gamma: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.gamma: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.gamma: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.gamma: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.gamma: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.gamma: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.gamma: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.gamma: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.gamma: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.gamma: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.gamma: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.gamma: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.gamma: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.gamma: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.gamma: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.gamma: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.gamma: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350

    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.gamma: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.gamma: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.gamma: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.gamma: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.gamma: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.gamma: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.gamma: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.gamma: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.gamma: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.gamma: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.gamma: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.gamma: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.gamma: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.gamma: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.gamma: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.gamma: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.gamma: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.gamma: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.gamma: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.gamma: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.gamma: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.gamma: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.gamma: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.gamma: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.gamma: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.gamma: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.gamma: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.gamma: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.gamma: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.gamma: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.gamma: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.gamma: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.gamma: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.gamma: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.gamma: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.gamma: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.gamma: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.gamma: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.gamma: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.gamma: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.gamma: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.gamma: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.gamma: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.gamma: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.gamma: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.gamma: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.gamma: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.gamma: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.gamma: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.gamma: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.gamma: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.gamma: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.gamma: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.gamma: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.gamma: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.gamma: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.gamma: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.gamma: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.gamma: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.gamma: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.gamma: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.gamma: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.gamma: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.gamma: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.gamma: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.gamma: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.gamma: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.gamma: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.gamma: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.gamma: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.gamma: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.gamma: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.gamma: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.gamma: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.gamma: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.gamma: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.gamma: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.gamma: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.gamma: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.gamma: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.gamma: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.gamma: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.gamma: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.gamma: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.gamma: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.gamma: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.gamma: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.gamma: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.gamma: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.gamma: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.gamma: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.gamma: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.gamma: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.gamma: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.gamma: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.gamma: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.gamma: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.gamma: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.gamma: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.gamma: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.gamma: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.gamma: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.gamma: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.gamma: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.gamma: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.gamma: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.gamma: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.gamma: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.gamma: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.gamma: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.gamma: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.gamma: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.gamma: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.gamma: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.gamma: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.gamma: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.gamma: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.gamma: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.gamma: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.gamma: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.gamma: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.gamma: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.gamma: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.gamma: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.gamma: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.gamma: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.gamma: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.gamma: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.gamma: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.gamma: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.gamma: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.gamma: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.gamma: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.gamma: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.gamma: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.gamma: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.gamma: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.gamma: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.gamma: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.gamma: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.gamma: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.gamma: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.gamma: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.gamma: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.gamma: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.gamma: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.gamma: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.gamma: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.gamma: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.gamma: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.gamma: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.gamma: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.gamma: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.gamma: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.gamma: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.gamma: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.gamma: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.gamma: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.gamma: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.gamma: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.gamma: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.gamma: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.gamma: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.gamma: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.gamma: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.gamma: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.gamma: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.gamma: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.gamma: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.gamma: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.gamma: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.gamma: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.gamma: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.gamma: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.gamma: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.gamma: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.gamma: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.gamma: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.gamma: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.gamma: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.gamma: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.gamma: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.gamma: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.gamma: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.gamma: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.gamma: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.gamma: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.gamma: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.gamma: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.gamma: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.gamma: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.gamma: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.gamma: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.gamma: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.gamma: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.gamma: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.gamma: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.gamma: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.gamma: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.gamma: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.gamma: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 3.352761e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testEtmTMcoords.py tests passed, 1 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 5.941 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testExactTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.LatLon_ from .points by testExactTMcoords.py line 14

    testing testExactTMcoords.py 24.03.22 (module pygeodesy.etm 24.11.04) isLazy=3
# lazily imported pygeodesy.elliptic by etm.py line 354
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.gamma: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.gamma: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.gamma: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.gamma: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.gamma: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.gamma: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.gamma: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.gamma: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.gamma: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.gamma: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.gamma: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.gamma: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.gamma: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.gamma: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.gamma: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.gamma: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.gamma: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.gamma: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.gamma: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.gamma: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.gamma: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.gamma: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.gamma: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.gamma: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.gamma: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.gamma: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.gamma: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.gamma: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.gamma: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.gamma: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.gamma: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.gamma: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.gamma: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.gamma: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.gamma: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.gamma: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.gamma: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.gamma: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.gamma: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.gamma: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.gamma: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.gamma: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.gamma: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.gamma: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.gamma: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.gamma: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.gamma: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.gamma: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.gamma: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.gamma: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.gamma: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.gamma: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.gamma: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.gamma: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.gamma: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.gamma: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350

    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.gamma: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.gamma: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.gamma: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.gamma: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.gamma: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.gamma: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.gamma: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.gamma: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.gamma: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.gamma: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.gamma: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.gamma: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.gamma: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.gamma: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.gamma: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.gamma: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.gamma: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.gamma: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.gamma: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.gamma: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.gamma: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.gamma: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.gamma: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.gamma: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.gamma: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.gamma: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.gamma: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.gamma: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.gamma: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.gamma: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.gamma: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.gamma: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.gamma: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.gamma: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.gamma: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.gamma: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.gamma: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.gamma: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.gamma: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.gamma: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.gamma: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.gamma: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.gamma: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.gamma: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.gamma: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.gamma: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.gamma: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.gamma: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.gamma: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.gamma: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.gamma: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.gamma: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.gamma: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.gamma: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.gamma: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.gamma: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.gamma: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.gamma: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.gamma: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.gamma: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.gamma: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.gamma: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.gamma: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.gamma: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.gamma: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.gamma: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.gamma: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.gamma: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.gamma: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.gamma: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.gamma: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.gamma: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.gamma: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.gamma: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.gamma: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.gamma: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.gamma: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.gamma: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.gamma: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.gamma: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.gamma: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.gamma: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.gamma: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.gamma: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.gamma: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.gamma: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.gamma: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.gamma: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.gamma: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.gamma: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.gamma: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.gamma: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.gamma: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.gamma: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.gamma: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.gamma: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.gamma: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.gamma: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.gamma: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.gamma: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.gamma: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.gamma: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.gamma: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.gamma: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.gamma: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.gamma: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.gamma: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.gamma: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.gamma: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.gamma: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.gamma: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.gamma: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.gamma: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.gamma: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.gamma: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.gamma: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.gamma: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.gamma: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.gamma: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.gamma: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.gamma: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.gamma: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.gamma: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.gamma: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.gamma: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.gamma: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.gamma: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.gamma: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.gamma: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.gamma: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.gamma: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.gamma: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.gamma: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.gamma: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.gamma: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.gamma: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.gamma: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.gamma: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.gamma: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.gamma: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.gamma: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.gamma: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.gamma: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.gamma: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.gamma: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.gamma: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.gamma: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.gamma: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.gamma: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.gamma: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.gamma: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.gamma: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.gamma: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.gamma: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.gamma: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.gamma: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.gamma: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.gamma: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.gamma: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.gamma: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.gamma: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.gamma: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.gamma: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.gamma: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.gamma: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.gamma: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.gamma: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.gamma: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.gamma: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.gamma: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.gamma: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.gamma: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.gamma: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.gamma: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.gamma: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.gamma: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.gamma: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.gamma: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.gamma: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.gamma: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.gamma: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.gamma: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.gamma: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.gamma: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.gamma: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.gamma: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.gamma: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.gamma: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.gamma: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.gamma: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.gamma: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.gamma: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.gamma: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.gamma: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.gamma: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.gamma: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.gamma: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.gamma: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.gamma: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.gamma: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.gamma: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 2.048910e-08
    test 1544 max reverse error: 1.136868e-13
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testExactTMcoords.py tests passed, 1 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 5.953 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFmath.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fcbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fhypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.INF from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Froot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsqrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFmath.py line 11
# lazily imported pygeodesy.bqrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.cbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.cbrt2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.euclid_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testFmath.py line 11
# lazily imported pygeodesy.facos1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fasin1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fhorner from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fma from .fmath by testFmath.py line 11
# lazily imported pygeodesy.f2mul_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpolynomial from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.frandoms from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFmath.py line 11
# lazily imported pygeodesy.hypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot2_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.isinf from .constants by testFmath.py line 11
# lazily imported pygeodesy.norm_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.signOf from .basics by testFmath.py line 11
# lazily imported pygeodesy.sqrt3 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.sqrt_a from .fmath by testFmath.py line 11
# lazily imported pygeodesy.zcrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.zqrt from .fmath by testFmath.py line 11

    testing testFmath.py 24.11.09 (module pygeodesy.fmath 24.11.08) isLazy=3
    test 1 fpolynomialA: 1.21197509765625
    test 2 fhornerA: 1.21197509765625
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875

    test 5 fpolynomialA: 1.21197509765625
    test 6 fhornerA: 1.21197509765625
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875

    test 9 fpolynomialA: 1.21197509765625
    test 10 fhornerA: 1.21197509765625
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875

    test 13 fpolynomialA: 1.21197509765625
    test 14 fhornerA: 1.21197509765625
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875

    test 17 fpolynomialA: 1.21197509765625
    test 18 fhornerA: 1.21197509765625
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875

    test 21 fpolynomialA: 1.21197509765625
    test 22 fhornerA: 1.21197509765625
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875

    test 25 fpolynomialA: 1.21197509765625
    test 26 fhornerA: 1.21197509765625
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875

    test 29 fpolynomialA: 1.21197509765625
    test 30 fhornerA: 1.21197509765625
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875

    test 33 fpolynomialA: 1.21197509765625
    test 34 fhornerA: 1.21197509765625
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875

    test 37 fpolynomialA: 1.21197509765625
    test 38 fhornerA: 1.21197509765625
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875

    test 41 fpolynomialA: 1.21197509765625
    test 42 fhornerA: 1.21197509765625
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875

    test 45 fpolynomialA: 1.21197509765625
    test 46 fhornerA: 1.21197509765625
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875

    test 49 fpolynomialA: 1.21197509765625
    test 50 fhornerA: 1.21197509765625
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875

    test 53 fpolynomialA: 1.21197509765625
    test 54 fhornerA: 1.21197509765625
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875

    test 57 fpolynomialA: 1.21197509765625
    test 58 fhornerA: 1.21197509765625
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875

    test 61 fpolynomialA: 1.21197509765625
    test 62 fhornerA: 1.21197509765625
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875

    test 65 fpolynomialA: 1.21197509765625
    test 66 fhornerA: 1.21197509765625
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875

    test 69 fpolynomialA: 1.21197509765625
    test 70 fhornerA: 1.21197509765625
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875

    test 73 fpolynomialA: 1.21197509765625
    test 74 fhornerA: 1.21197509765625
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875

    test 77 fpolynomialA: 1.21197509765625
    test 78 fhornerA: 1.21197509765625
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875

    test 81 fpolynomialA: 1.21197509765625
    test 82 fhornerA: 1.21197509765625
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875

    test 85 fpolynomialA: 1.21197509765625
    test 86 fhornerA: 1.21197509765625
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875

    test 89 fpolynomialA: 1.21197509765625
    test 90 fhornerA: 1.21197509765625
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875

    test 93 fpolynomialA: 1.21197509765625
    test 94 fhornerA: 1.21197509765625
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875

    test 97 fpolynomialA: 1.21197509765625
    test 98 fhornerA: 1.21197509765625
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875

    test 101 fpolynomialA: 1.21197509765625
    test 102 fhornerA: 1.21197509765625
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875

    test 105 fpolynomialA: 1.21197509765625
    test 106 fhornerA: 1.21197509765625
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875

    test 109 fpolynomialA: 1.21197509765625
    test 110 fhornerA: 1.21197509765625
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875

    test 113 fpolynomialA: 1.21197509765625
    test 114 fhornerA: 1.21197509765625
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875

    test 117 fpolynomialA: 1.21197509765625
    test 118 fhornerA: 1.21197509765625
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875

    test 121 fpolynomialA: 1.21197509765625
    test 122 fhornerA: 1.21197509765625
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875

    test 125 fpolynomialA: 1.21197509765625
    test 126 fhornerA: 1.21197509765625
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875

    test 129 fpolynomialA: 1.21197509765625
    test 130 fhornerA: 1.21197509765625
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875

    test 133 fpowers: 10
    test 134 fpowers: 2
    test 135 fpowers: 1024
    test 136 fpowers: 4
    test 137 fpowers: 16
    test 138 fpowers: 1024
    test 139 fpowers: 4
    test 140 fpowers: 8
    test 141 fpowers: 512

    test 142 Airy1830: 6366914.608925221
    test 143 Airy1830: 6366914.608925221
    test 144 Airy1830: 6366914.608925221
    test 145 Airy1830: 6366914.608925221

    test 146 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 147 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 148 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 149 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881

    test 150 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 151 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 152 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 153 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950

    test 154 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 155 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 156 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 157 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284

    test 158 Bessel1841: 6366742.520233950
    test 159 Bessel1841: 6366742.520233950
    test 160 Bessel1841: 6366742.520233950
    test 161 Bessel1841: 6366742.520233950

    test 162 BesselModified: 6366837.224747659  FAILED, KNOWN, expected 6366837.224747658
    test 163 BesselModified: 6366837.224747659  FAILED, KNOWN, expected 6366837.224747658
    test 164 BesselModified: 6366837.224747659  FAILED, KNOWN, expected 6366837.224747658
    test 165 BesselModified: 6366837.224747659  FAILED, KNOWN, expected 6366837.224747658

    test 166 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 167 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 168 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 169 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048

    test 170 Clarke1866: 6367399.689169783
    test 171 Clarke1866: 6367399.689169783
    test 172 Clarke1866: 6367399.689169783
    test 173 Clarke1866: 6367399.689169783

    test 174 Clarke1880: 6367386.643980513
    test 175 Clarke1880: 6367386.643980513
    test 176 Clarke1880: 6367386.643980513
    test 177 Clarke1880: 6367386.643980513

    test 178 Clarke1880IGN: 6367386.736673363
    test 179 Clarke1880IGN: 6367386.736673363
    test 180 Clarke1880IGN: 6367386.736673363
    test 181 Clarke1880IGN: 6367386.736673363

    test 182 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 183 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 184 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 185 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011

    test 186 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 187 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 188 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 189 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841

    test 190 Delambre1810: 6366197.076843344
    test 191 Delambre1810: 6366197.076843344
    test 192 Delambre1810: 6366197.076843344
    test 193 Delambre1810: 6366197.076843344

    test 194 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 195 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 196 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 197 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712

    test 198 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395010
    test 199 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395010
    test 200 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395010
    test 201 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395010

    test 202 Everest1975: 6366703.060499237
    test 203 Everest1975: 6366703.060499237
    test 204 Everest1975: 6366703.060499237
    test 205 Everest1975: 6366703.060499237

    test 206 Fisher1968: 6367463.656043807
    test 207 Fisher1968: 6367463.656043807
    test 208 Fisher1968: 6367463.656043807
    test 209 Fisher1968: 6367463.656043807

    test 210 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 211 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 212 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 213 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740

    test 214 GPES: 6378135.000000000
    test 215 GPES: 6378135.000000000
    test 216 GPES: 6378135.000000000
    test 217 GPES: 6378135.000000000

    test 218 GRS67: 6367471.747065325
    test 219 GRS67: 6367471.747065325
    test 220 GRS67: 6367471.747065325
    test 221 GRS67: 6367471.747065325

    test 222 GRS80: 6367449.145771043
    test 223 GRS80: 6367449.145771043
    test 224 GRS80: 6367449.145771043
    test 225 GRS80: 6367449.145771043

    test 226 Helmert1906: 6367513.572270742
    test 227 Helmert1906: 6367513.572270742
    test 228 Helmert1906: 6367513.572270742
    test 229 Helmert1906: 6367513.572270742

    test 230 IAU76: 6367452.132788436
    test 231 IAU76: 6367452.132788436
    test 232 IAU76: 6367452.132788436
    test 233 IAU76: 6367452.132788436

    test 234 IERS1989: 6367448.139491247
    test 235 IERS1989: 6367448.139491247
    test 236 IERS1989: 6367448.139491247
    test 237 IERS1989: 6367448.139491247

    test 238 IERS1992TOPEX: 6367448.446996409
    test 239 IERS1992TOPEX: 6367448.446996409
    test 240 IERS1992TOPEX: 6367448.446996409
    test 241 IERS1992TOPEX: 6367448.446996409

    test 242 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 243 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 244 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 245 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577

    test 246 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 247 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 248 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 249 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584

    test 250 Intl1967: 6367469.338944457
    test 251 Intl1967: 6367469.338944457
    test 252 Intl1967: 6367469.338944457
    test 253 Intl1967: 6367469.338944457

    test 254 Krassovski1940: 6367558.496874981
    test 255 Krassovski1940: 6367558.496874981
    test 256 Krassovski1940: 6367558.496874981
    test 257 Krassovski1940: 6367558.496874981

    test 258 Krassowsky1940: 6367558.496874981
    test 259 Krassowsky1940: 6367558.496874981
    test 260 Krassowsky1940: 6367558.496874981
    test 261 Krassowsky1940: 6367558.496874981

    test 262 Maupertuis1738: 6380564.130118373
    test 263 Maupertuis1738: 6380564.130118373
    test 264 Maupertuis1738: 6380564.130118373
    test 265 Maupertuis1738: 6380564.130118373

    test 266 Mercury1960: 6367479.629236430
    test 267 Mercury1960: 6367479.629236430
    test 268 Mercury1960: 6367479.629236430
    test 269 Mercury1960: 6367479.629236430

    test 270 Mercury1968Mod: 6367463.656043807
    test 271 Mercury1968Mod: 6367463.656043807
    test 272 Mercury1968Mod: 6367463.656043807
    test 273 Mercury1968Mod: 6367463.656043807

    test 274 NWL1965: 6367456.873668412
    test 275 NWL1965: 6367456.873668412
    test 276 NWL1965: 6367456.873668412
    test 277 NWL1965: 6367456.873668412

    test 278 OSU86F: 6367448.347165301
    test 279 OSU86F: 6367448.347165301
    test 280 OSU86F: 6367448.347165301
    test 281 OSU86F: 6367448.347165301

    test 282 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 283 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 284 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 285 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732

    test 286 Plessis1817: 6366197.157107386  FAILED, KNOWN, expected 6366197.157107385
    test 287 Plessis1817: 6366197.157107386  FAILED, KNOWN, expected 6366197.157107385
    test 288 Plessis1817: 6366197.157107386  FAILED, KNOWN, expected 6366197.157107385
    test 289 Plessis1817: 6366197.157107386  FAILED, KNOWN, expected 6366197.157107385

    test 290 PZ90: 6367448.169554430  FAILED, KNOWN, expected 6367448.169554429
    test 291 PZ90: 6367448.169554430  FAILED, KNOWN, expected 6367448.169554429
    test 292 PZ90: 6367448.169554430  FAILED, KNOWN, expected 6367448.169554429
    test 293 PZ90: 6367448.169554430  FAILED, KNOWN, expected 6367448.169554429

    test 294 SGS85: 6367448.139491247
    test 295 SGS85: 6367448.139491247
    test 296 SGS85: 6367448.139491247
    test 297 SGS85: 6367448.139491247

    test 298 SoAmerican1969: 6367471.848532285
    test 299 SoAmerican1969: 6367471.848532285
    test 300 SoAmerican1969: 6367471.848532285
    test 301 SoAmerican1969: 6367471.848532285

    test 302 Sphere: 6371008.771415000
    test 303 Sphere: 6371008.771415000
    test 304 Sphere: 6371008.771415000
    test 305 Sphere: 6371008.771415000

    test 306 SphereAuthalic: 6371000.000000000
    test 307 SphereAuthalic: 6371000.000000000
    test 308 SphereAuthalic: 6371000.000000000
    test 309 SphereAuthalic: 6371000.000000000

    test 310 SpherePopular: 6378137.000000000
    test 311 SpherePopular: 6378137.000000000
    test 312 SpherePopular: 6378137.000000000
    test 313 SpherePopular: 6378137.000000000

    test 314 Struve1860: 6367482.318325493
    test 315 Struve1860: 6367482.318325493
    test 316 Struve1860: 6367482.318325493
    test 317 Struve1860: 6367482.318325493

    test 318 WGS60: 6367478.630911891  FAILED, KNOWN, expected 6367478.630911890
    test 319 WGS60: 6367478.630911891  FAILED, KNOWN, expected 6367478.630911890
    test 320 WGS60: 6367478.630911891  FAILED, KNOWN, expected 6367478.630911890
    test 321 WGS60: 6367478.630911891  FAILED, KNOWN, expected 6367478.630911890

    test 322 WGS66: 6367456.873668412
    test 323 WGS66: 6367456.873668412
    test 324 WGS66: 6367456.873668412
    test 325 WGS66: 6367456.873668412

    test 326 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 327 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 328 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 329 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826

    test 330 WGS84: 6367449.145823414
    test 331 WGS84: 6367449.145823414
    test 332 WGS84: 6367449.145823414
    test 333 WGS84: 6367449.145823414

    test 334 WGS84_NGS: 6367449.145771043
    test 335 WGS84_NGS: 6367449.145771043
    test 336 WGS84_NGS: 6367449.145771043
    test 337 WGS84_NGS: 6367449.145771043

    test 338 hypot: 1
    test 339 sqrt_a: 0.6102683302836
    test 340 sqrt_a: 0.6102683302836
    test 341 hypot_ : 1.00001250
    test 342 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 343 hypot2_: 1.00002500
    test 344 norm_  : 1.00000000
    test 345 hypot_ : 3606.937759
    test 346 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 347 hypot2_: 13010000.0
    test 348 norm_  : 1.0
    test 349 hypot_ : 40112.842
    test 350 hypot2_: 1609040100.0
    test 351 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 352 bqrt: 2.00
    test 353 cbrt: 3.00
    test 354 cbrt: -3.00
    test 355 cbrt2: 9.00
    test 356 cbrt2: 9.00
    test 357 sqrt3: 27.00
    test 358 zcrt: 2.00
    test 359 zqrt: 2.00
    test 360 facos1: 0.005%
    test 361 fasin1: 0.439%
    test 362 fatan : 0.134%
    test 363 fatan1: 2.834%
    test 364 fatan2: 0.321%

    test 365 Fhypot: Fhypot[1] (5.0, 0)
    test 366 Fhypot: Fhypot[1] (9.43398, 0)
    test 367 Fhypot: Fhypot[1] (5.0, 0)
    test 368 Fhypot: Fhypot[1] (-2.18182, 0)
    test 369 Fhypot: Fhypot[1] (-12, 0)
    test 370 Fhypot: Fhypot[1] (1.41421, 0)
    test 371 Fhypot: Fhypot[1] (-0.5, 0)
    test 372 Fhypot: Fhypot[1] (-0.333333, 0)
    test 373 Fhypot: fmath.Fhypot(<Fsum[1] (-1, 0) at 0x105cf4350>, -1, root=0): 1.0 / 0: float division by zero

    test 374 Fsqrt: Fsqrt[1] (3.0, 0)
    test 375 Fsqrt: Fcbrt[1] (3.0, 0)
    test 376 Fsqrt: Fsqrt[1] (1.41421, 0)
    test 377 Fsqrt: Fsqrt[1] (1.41421, 0)
    test 378 Froot: Froot[1] (0.5, 0)
    test 379 Froot: Froot[1] (0.5, 0)
    test 380 Fsqrt: fmath.Fsqrt(<Fsum[1] (-1, 0) at 0x105c53ed0>, -1, root=2): -2.0 root Fsum[1] (0.5, 0): complex (8.659560562354934e-17+1.4142135623730951j) from 2-arg pow(-2, 0.5)
    test 381 Fsqrt: fmath.Froot(<Fsum[1] (-1, 0) at 0x105c53ed0>, -1, root=0): 1.0 / 0: float division by zero
    test 382 Froot: Froot[1] (-0.25, 0)

    test 383 Fhypot1: 3.74165739e+100
    test 384 Fpowers1: -0.349296125
    test 385 Fsqrt1: 0.329970491
    test 386 Fcbrt1: 0.477511024

    test 387 Fhypot2: 3.74165739e+100
    test 388 Fpowers2: -3665.72723
    test 389 Fsqrt2: 0.101180065
    test 390 Fcbrt2: 0.217135068

    test 391 Fhypot3: 3.74165739e+100
    test 392 Fpowers3: -93395.7453
    test 393 Fsqrt3: 4.50957748e-06
    test 394 Fcbrt3: 0.000272954695

    test 395 Fhypot4: 3.74165739e+100
    test 396 Fpowers4: -5130.49102
    test 397 Fsqrt4: 2.41703058e-05
    test 398 Fcbrt4: 0.000835965004

    test 399 Fhypot5: 3.74165739e+100
    test 400 Fpowers5: 24618.6665
    test 401 Fsqrt5: 2.59604267e-06
    test 402 Fcbrt5: 0.000188889529

    test 403 Fhypot6: 3.74165739e+100
    test 404 Fpowers6: -370593.227
    test 405 Fsqrt6: 0.000166842068
    test 406 Fcbrt6: 0.00303065878

    test 407 Fhypot7: 3.74165739e+100
    test 408 Fpowers7: 131.591828
    test 409 Fsqrt7: 7.62755011e-06
    test 410 Fcbrt7: 0.000387486622

    test 411 Fhypot10: 3.74165739e+100
    test 412 Fpowers10: -8.42286473
    test 413 Fsqrt10: 1.35351905
    test 414 Fcbrt10: 1.22360971

    test 415 fma: 2.4412441982659e-05
    test 416 fma: 6.365860485903399
    test 417 abc: 6.3658604845404625  FAILED, KNOWN, expected 6.365860485903399

    test 418 f2mul_: 24.0
    test 419 f2mul_: inf
    test 420 f2mul_: inf

    72 of 420 testFmath.py tests (17.1%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 186.988 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFormy.py
./pygeodesy/formy.py:1154: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  if d.ellipsoid.geodesic:
./pygeodesy/azimuthal.py:634: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.PI from .constants by testFormy.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testFormy.py line 11
# lazily imported pygeodesy.R_M from .constants by testFormy.py line 11
# lazily imported pygeodesy.antipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.bearing from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineForsytheAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineLaw from .formy by testFormy.py line 11
# lazily imported pygeodesy.Datums from .datums by testFormy.py line 11
# lazily imported pygeodesy.equirectangular from .formy by testFormy.py line 11
# lazily imported pygeodesy.euclidean from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessAbc_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessCagnoli_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessGirard_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessLHuilier_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessKarney from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessQuad from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatLocal from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatPolar from .formy by testFormy.py line 11
# lazily imported pygeodesy.hartzell from .formy by testFormy.py line 11
# lazily imported pygeodesy.haversine from .formy by testFormy.py line 11
# lazily imported pygeodesy.heightOf from .formy by testFormy.py line 11
# lazily imported pygeodesy.heightOrthometric from .formy by testFormy.py line 11
# lazily imported pygeodesy.horizon from .formy by testFormy.py line 11
# lazily imported pygeodesy.hubeny from .formy by testFormy.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testFormy.py line 11
# lazily imported pygeodesy.intersection2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.intersections2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testFormy.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.LimitError from .errors by testFormy.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testFormy.py line 11
# lazily imported pygeodesy.map1 from .basics by testFormy.py line 11
# lazily imported pygeodesy.normal from .formy by testFormy.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.radical2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.thomas from .formy by testFormy.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testFormy.py line 11
# lazily imported pygeodesy.vincentys from .formy by testFormy.py line 11

    testing testFormy.py 24.05.28 isLazy=3
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 excessAbc_: 11.9698
    test 7 excessAbc_: 11.9698
    test 8 excessCagnoli_: 11.9698
    test 9 excessGirard_: 11.9698
    test 10 excessLHuilier_: 11.9698
    test 11 excessKarney: 56.9625
    test 12 excessQuad: 56.9625
    test 13 excessKarney: 44.0235
    test 14 excessQuad: 44.0235
    test 15 excessKarney: -44.0235
    test 16 excessQuad: -44.0235

    test 17 isantipode1: True
    test 18 isantipode2: True
    test 19 isantipode3: False
    test 20 isantipode4: True
    test 21 isantipode5: True
    test 22 isantipode6: True
    test 23 isantipode7: False
    test 24 isantipode8: True

    test 25 isnormal1: True
    test 26 isnormal2: False
    test 27 isnormal3: True
    test 28 isnormal4: True
    test 29 isnormal5: True
    test 30 isnormal6: False
    test 31 isnormal7: True
    test 32 isnormal8: True
# lazily imported pygeodesy.triaxials by formy.py line 981
# lazily imported pygeodesy.cartesianBase by formy.py line 983

    test 33 hartzell: (884080.396945, 5592040.198472, 2927517.711001)
# lazily imported pygeodesy.ecef by cartesianBase.py line 218
    test 34 hartzell: 27.500482°N, 081.016111°E, +12669647.30  FAILED, KNOWN, expected 27.500482°N, 081.016111°E, +12669647.30, 'hartzell'
    test 35 hartzell: (3642031.283571, 3678090.99925, 3714150.714929)
    test 36 hartzell: 35.843738°N, 045.282243°E, +11296639.67  FAILED, KNOWN, expected 35.843738°N, 045.282243°E, +11296639.67, 'hartzell'
    test 37 hartzell: (3647362.058328, 3683474.553955, 3703640.299338)
    test 38 hartzell: 35.726966°N, 045.282243°E, +11296619.03  FAILED, KNOWN, expected 35.726966°N, 045.282243°E, +11296619.03, 'hartzell'
    test 39 heightOf0: 2638958.23912
    test 40 heightOf45: 5401080.43931
    test 41 heightOf90: 6371008.77141
    test 42 heightOf135: 5401080.43931
    test 43 horizon0: 0.0
    test 44 horizon10Km: 357099.672
    test 45 horizon30Kft: 392310.704
    test 46 horizon10Kft: 214877.422
    test 47 normal1: (-89.0, 179.0)
    test 48 normal2: (81.0, 180.0)
    test 49 normal3: (81.0, -19.0)
    test 50 normal4: (-81.0, 0.0)

    test 51 haversine1 (0.00%): 298009.404
    test 52 vincentys1 (0.00%): 298009.404
    test 53 vincentys1 (0.00%): 298009.404
    test 54 cosineAndoyerLambert1 (0.13%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 55 cosineForsytheAndoyerLambert1 (0.13%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 56 cosineLaw1 (0.00%): 298009.404
    test 57 equirectangular1 (0.01%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 58 euclidean1 (5.26%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 59 flatLocal1 (0.14%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 60 flatPolar1 (8.67%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 61 thomas1 (0.13%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 62 hubeny1: <function flatLocal at 0x106a11e40>

    test 63 haversine2 (0.00%): 98164.988
    test 64 vincentys2 (0.00%): 98164.988
    test 65 vincentys2 (0.00%): 98164.988
    test 66 cosineAndoyerLambert2 (0.10%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 67 cosineForsytheAndoyerLambert2 (0.10%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 68 cosineLaw2 (0.00%): 98164.988
    test 69 equirectangular2 (0.00%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 70 euclidean2 (6.37%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 71 flatLocal2 (0.10%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 72 flatPolar2 (0.57%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 73 thomas2 (0.10%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 74 hubeny2: <function flatLocal at 0x106a11e40>

    test 75 haversine3 (0.00%): 651816.987
    test 76 vincentys3 (0.00%): 651816.987
    test 77 vincentys3 (0.00%): 651816.987
    test 78 cosineAndoyerLambert3 (0.25%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 79 cosineForsytheAndoyerLambert3 (0.25%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 80 cosineLaw3 (0.00%): 651816.987
    test 81 equirectangular3 (0.03%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 82 euclidean3 (4.37%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 83 flatLocal3 (0.29%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 84 flatPolar3 (13.00%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 85 thomas3 (0.25%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 86 hubeny3: <function flatLocal at 0x106a11e40>

    test 87 haversine4 (0.00%): 4084985.780
    test 88 vincentys4 (0.00%): 4084985.780
    test 89 vincentys4 (0.00%): 4084985.780
    test 90 cosineAndoyerLambert4 (0.24%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 91 cosineForsytheAndoyerLambert4 (0.24%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 92 cosineLaw4 (0.00%): 4084985.780
    test 93 equirectangular4 (1.26%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 94 euclidean4 (4.22%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 95 flatLocal4 (1.51%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 96 flatPolar4 (12.31%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 97 thomas4 (0.24%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 98 hubeny4: <function flatLocal at 0x106a11e40>

    test 99 haversine5 (0.00%): 9670051.606
    test 100 vincentys5 (0.00%): 9670051.606
    test 101 vincentys5 (0.00%): 9670051.606
    test 102 cosineAndoyerLambert5 (0.21%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 103 cosineForsytheAndoyerLambert5 (0.21%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 104 cosineLaw5 (0.00%): 9670051.606
    test 105 equirectangular5 (7.79%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 106 euclidean5 (9.34%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 107 flatLocal5 (8.03%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 108 flatPolar5 (55.59%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 109 thomas5 (0.21%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 110 hubeny5: <function flatLocal at 0x106a11e40>

    test 111 haversine6 (0.00%): 10496496.577
    test 112 vincentys6 (0.00%): 10496496.577
    test 113 vincentys6 (0.00%): 10496496.577
    test 114 cosineAndoyerLambert6 (0.18%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 115 cosineForsytheAndoyerLambert6 (0.18%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 116 cosineLaw6 (0.00%): 10496496.577
    test 117 equirectangular6 (3.32%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 118 euclidean6 (4.50%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 119 flatLocal6 (3.07%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 120 flatPolar6 (23.87%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 121 thomas6 (0.18%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 122 hubeny6: <function flatLocal at 0x106a11e40>

    test 123 haversine7 (0.00%): 8998396.669
    test 124 vincentys7 (0.00%): 8998396.669
    test 125 vincentys7 (0.00%): 8998396.669
    test 126 cosineAndoyerLambert7 (0.27%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 127 cosineForsytheAndoyerLambert7 (0.27%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 128 cosineLaw7 (0.00%): 8998396.669
    test 129 equirectangular7 (2.05%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 130 euclidean7 (7.76%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 131 flatLocal7 (1.71%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 132 flatPolar7 (17.56%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 133 thomas7 (0.27%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 134 hubeny7: <function flatLocal at 0x106a11e40>

    test 135 haversine8 (0.00%): 6906867.946
    test 136 vincentys8 (0.00%): 6906867.946
    test 137 vincentys8 (0.00%): 6906867.946
    test 138 cosineAndoyerLambert8 (0.13%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 139 cosineForsytheAndoyerLambert8 (0.13%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 140 cosineLaw8 (0.00%): 6906867.946
    test 141 equirectangular8 (0.91%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 142 euclidean8 (6.54%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 143 flatLocal8 (1.04%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 144 flatPolar8 (23.23%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 145 thomas8 (0.13%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 146 hubeny8: <function flatLocal at 0x106a11e40>

    test 147 haversine9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 148 vincentys9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 149 cosineAndoyerLambert9 (0.07%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 150 cosineForsytheAndoyerLambert9 (0.07%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 151 cosineLaw9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 152 flatLocal9 (15.21%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 153 thomas9 (0.07%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 154 hubeny9: <function flatLocal at 0x106a11e40>

    test 155 intersection2: pygeodesy.formy
    test 156 intersection2(None): (25.980762, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.sphericalTrigonometry by formy.py line 1150
    test 157 intersection2(6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.sphericalNvector by formy.py line 1145
    test 158 intersection2(-6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
# lazily imported pygeodesy.ellipsoidalKarney by formy.py line 1156
# lazily imported pygeodesy.azimuthal by ellipsoidalKarney.py line 85
    test 159 intersection2(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84): (24.284126, 15.0)

    test 160 intersections2: pygeodesy.formy
    test 161 intersections2(None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 162 intersections2(None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 163 intersections2(None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 164 intersections2(None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 165 intersections2(None) 20: (22.494, 22.494), (-22.494, -22.494)
    test 166 intersections2(None) 30: (38.7298, 38.7298), (-38.7298, -38.7298)
    test 167 intersections2(None) 40: (62.0732, 62.0732), (-62.0732, -62.0732)
    test 168 intersections2(R_M) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 169 intersections2(R_M) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 170 intersections2(R_M) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 171 intersections2(R_M) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 172 intersections2(R_M) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 173 intersections2(R_M) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 174 intersections2(R_M) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 175 intersections2(WGS84) 1: (-1.0112, -0.998), (1.0112, 0.998)
    test 176 intersections2(WGS84) 2: (-2.0224, -1.9979), (2.0224, 1.9979)
    test 177 intersections2(WGS84) 5: (-5.0558, -5.0271), (5.0558, 5.0271)
    test 178 intersections2(WGS84) 10: (-10.1081, -10.2901), (10.1081, 10.2901)
    test 179 intersections2(WGS84) 20: (-20.1241, -22.6411), (20.1241, 22.6411)
    test 180 intersections2(WGS84) 30: (-29.4898, -40.1785), (29.4898, 40.1785)
    test 181 intersections2(WGS84) 40: (-35.8146, -68.7149), (35.8146, 68.7149)

    test 182 radical2: (0.26, 2.6)
    test 183 radical2: (0.74, 7.4)
    test 184 radical2: (0.5, 5.0)
    test 185 radical2: (0.5, 0.0)
    test 186 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 187 LimitError: equirectangular4(0.0, 0.0, 60.0, 120.0, limit=45, wrap=False): delta (120) exceeds limit (45)  FAILED, KNOWN, expected delta exceeds ...

    test 188 heightOrthometric: -1.0
    test 189 heightOrthometric: 1.0

    143 of 189 testFormy.py tests (75.7%) FAILED, incl. 71 KNOWN plus 72 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 124.505 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFrechet.py
./pygeodesy/frechet.py:682: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  self._func = self.datum.ellipsoid.geodesic.Inverse1
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.FrechetError from .frechet by testFrechet.py line 12
# lazily imported pygeodesy.fstr from .streprs by testFrechet.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testFrechet.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testFrechet.py line 12
# lazily imported pygeodesy.fractional from .points by testFrechet.py line 58
# lazily imported pygeodesy.frechet_ from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineAndoyerLambert from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineForsytheAndoyerLambert from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetCosineLaw from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetDegrees from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetDistanceTo from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetEquirectangular from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetEuclidean from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetExact from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetFlatLocal from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetFlatPolar from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetKarney from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetHaversine from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetHubeny from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetRadians from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetThomas from .frechet by testFrechet.py line 58
# lazily imported pygeodesy.FrechetVincentys from .frechet by testFrechet.py line 58

    testing testFrechet.py 23.03.27 isLazy=3
# lazily imported pygeodesy.booleans by iters.py line 503
    test 1 FrechetDegrees_ (degrees): (178.5, 74, 56, 19, 5400)
    test 2 FrechetDegrees_ (degrees): (175.5, 74, 52.5, 29, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (3.11541, 74, 56, 19, 5400)
    test 6 FrechetRadians_ (radians): (3.06305, 74, 52.5, 29, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (2.63867, 0, 0, 149, 5400)
    test 18 FrechetCosineLaw (radians): (2.63867, 0, 0, 208, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.1331, 8, 3, 138, 5400)
    test 22 FrechetEquirectangular (radians2): (7.01295, 0, 0, 208, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.81124, 8, 3, 138, 5400)
    test 26 FrechetEuclidean (radians): (2.74296, 0, 0, 208, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.13778, 8, 3, 138, 5400)
    test 30 FrechetFlatLocal (radians2): (6.92262, 0, 0, 208, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.65039, 0, 0, 149, 5400)
    test 34 FrechetFlatPolar (radians): (2.65039, 0, 0, 208, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (2.63867, 0, 0, 149, 5400)
    test 38 FrechetHaversine (radians): (2.63867, 0, 0, 208, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.13778, 8, 3, 138, 5400)
    test 42 FrechetHubeny (radians2): (6.92262, 0, 0, 208, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (2.63187, 0, 0, 149, 5400)
    test 46 FrechetThomas (radians): (2.63187, 0, 0, 208, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (2.63867, 0, 0, 149, 5400)
    test 50 FrechetVincentys (radians): (2.63867, 0, 0, 208, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 53 FrechetKarney (degrees): (151.09508, 0, 0, 149, 5400)
    test 54 FrechetKarney (degrees): (151.09508, 0, 0, 208, 10710)
    test 55 copy(FrechetKarney): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
    test 56 FrechetKarney.copy(): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
# lazily imported pygeodesy.ellipsoidalNvector by testFrechet.py line 231
# lazily imported pygeodesy.ellipsoidalVincenty by testFrechet.py line 231
# lazily imported pygeodesy.sphericalNvector by testFrechet.py line 231
# lazily imported pygeodesy.sphericalTrigonometry by testFrechet.py line 231
# lazily imported pygeodesy.ellipsoidalKarney by testFrechet.py line 236
    test 57 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 58 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalVincenty.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 59 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 60 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 61 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 62 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalKarney.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 63 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 64 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 65 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 66 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 67 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 68 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 69 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 70 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 71 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 72 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 73 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 74 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalTrigonometry.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 75 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 76 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 77 frechet_: (178.5, 74, 56, 19, 5400, 'test')
    test 78 [fi1]: 64.0°S, 096.0°E
    test 79 [fi2]: 41.0°S, 071.0°W
    test 80 [fi1]: LatLon_(64.0°S, 096.0°E)
    test 81 [fi2]: LatLon_(41.0°S, 071.0°W)

    96 of 81 testFrechet.py tests (118.5%) FAILED, incl. 5 KNOWN plus 91 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 27.372 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFrozen.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28

    testing testFrozen.py 24.03.03 isLazy=3
    test 1 cmd: /Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13 -c 'import sys; sys.frozen = True; import pygeodesy; sys.exit(0 if pygeodesy._isfrozen else 1)'
    test 2 PYGEODESY_LAZY_IMPORT=0: 0
    test 3 PYGEODESY_LAZY_IMPORT=1: 0
    test 4 PYGEODESY_LAZY_IMPORT=2: 0

    all 4 testFrozen.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 300.044 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFstats.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS0 from .constants by testFstats.py line 11
# lazily imported pygeodesy.Fcook from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Flinear from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFstats.py line 11
# lazily imported pygeodesy.Fsum2Tuple from .fsums by testFstats.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testFstats.py line 11

    testing testFstats.py 23.05.08 (module pygeodesy.fstats 24.10.08) isLazy=3
    test 1 Fcook: 8
    test 2 Fcook: -0.218750
    test 3 Fcook: 4.562500
    test 4 Fcook: 5.0
    test 5 Fcook: 0.656250
    test 6 Fcook: 2.0
    test 7 Fcook: 4.0
    test 8 Fcook: 1.039635

    test 9 copy: Fcook copy[8]
    test 10 copy: 5.0
    test 11 copy: 2.0
    test 12 Fcook: 8

    test 13 Doubled: 16
    test 14 Doubled: -0.218750
    test 15 Doubled: 4.5625
    test 16 Doubled: 5.0
    test 17 Doubled: 0.656250
    test 18 Doubled: 2.0
    test 19 Doubled: 4.0
    test 20 Doubled: 1.340453  FAILED, KNOWN, expected 1.039635

    test 21 Empty: Fcook Empty[16]
    test 22 Empty: 18
    test 23 Empty: TypeError('Fcook Empty[18] += None: None: not iterable')

    test 24 Excel: 8
    test 25 Excel: -1.114187
    test 26 Excel: -0.939792
    test 27 Excel: 2.735294
    test 28 Excel: 2.50
    test 29 Excel: -0.342403
    test 30 Excel: -0.427052
    test 31 Excel: 2.061553
    test 32 Excel: 4.2
    test 33 Excel: 0.470372

    test 34 Fwelford: 8
    test 35 Fwelford: 5.0
    test 36 Fwelford: 2.0
    test 37 Fwelford: 4.0

    test 38 copy: Fwelford copy[8]
    test 39 copy: 5.0
    test 40 copy: 2.0
    test 41 copy: 4.0
    test 42 copy: 8
    test 43 __add__: 18
    test 44 __add__: TypeError('Fwelford __add__[18] += None: None: not iterable')

    test 45 Flinear: 9
    test 46 Flinear: 0.988288
    test 47 Flinear: 167.682949
    test 48 Flinear: 23.422786
    test 49 __add__: 10
    test 50 __add__: 21
    test 51 __add__: TypeError('Flinear __add__[21] += None: None: not iterable')
    test 52 __add__: ValueError('Flinear __add__[21] += (1, 2, 3): odd len (3): invalid')

    1 of 52 testFstats.py tests (1.9%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.008 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testFsums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testFsums.py line 11
# lazily imported pygeodesy.INF from .constants by testFsums.py line 11
# lazily imported pygeodesy.NAN from .constants by testFsums.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.Fsum2product from .deprecated.functions by testFsums.py line 11
# lazily imported pygeodesy.Fsum2Tuple from .fsums by testFsums.py line 11
# lazily imported pygeodesy.ResidualError from .fsums by testFsums.py line 11
# lazily imported pygeodesy.f2product from .fsums by testFsums.py line 11
# lazily imported pygeodesy.frandoms from .fmath by testFsums.py line 11
# lazily imported pygeodesy.fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFsums.py line 11
# lazily imported pygeodesy.isfinite from .constants by testFsums.py line 11
# lazily imported pygeodesy.nonfiniterrors from .fsums by testFsums.py line 11

    testing testFsums.py 24.09.29 (module pygeodesy.fsums 24.11.09) isLazy=3
    test 1 sum1: 0.0  FAILED, KNOWN, expected 2.0
    test 2 fsum: 2.0
    test 3 Fsum: 2.0
    test 4 sum2: 1.0  FAILED, KNOWN, expected 4.0
    test 5 fsum: 4.0
    test 6 Fsum: 4.0
    test 7 sum3: 3.0  FAILED, KNOWN, expected 8.0
    test 8 fsum: 8.0
    test 9 Fsum: 8.0
    test 10 sum4: 7.0  FAILED, KNOWN, expected 16.0
    test 11 fsum: 16.0
    test 12 Fsum: 16.0
    test 13 sum5: 15.0  FAILED, KNOWN, expected 32.0
    test 14 fsum: 32.0
    test 15 Fsum: 32.0
    test 16 sum6: 31.0  FAILED, KNOWN, expected 64.0
    test 17 fsum: 64.0
    test 18 Fsum: 64.0
    test 19 sum7: 63.0  FAILED, KNOWN, expected 128.0
    test 20 fsum: 128.0
    test 21 Fsum: 128.0
    test 22 sum8: 127.0  FAILED, KNOWN, expected 256.0
    test 23 fsum: 256.0
    test 24 Fsum: 256.0
    test 25 sum9: 255.0  FAILED, KNOWN, expected 512.0
    test 26 fsum: 512.0
    test 27 Fsum: 512.0
    test 28 sum10: 511.0  FAILED, KNOWN, expected 1024.0
    test 29 fsum: 1024.0
    test 30 Fsum: 1024.0
    test 31 sum: 1.005000000001
    test 32 fsum: 1.005000000001
    test 33 Fsum: 1.005000000001
    test 34 fsum: 1.0000000000000002e+16
    test 35 Fsum: 1.0000000000000002e+16
    test 36 Fsum: 1.0000000000000002e+16


    test 37 fsum: -0.00014778142795882123
    test 38 sum1: -14.00014778142819  FAILED, KNOWN, expected -0.00014778142795882123
    test 39 pow(4): Fsum[25] pow(4.76957e-16, 7.05509e-33)
    test 40 pow(1): Fsum[842] pow(-0.000147781, 6.99719e-21)
    test 41 pow(0): Fsum[1] pow(1.0, 0)
    test 42 ceil: True
    test 43 floor: True
    test 44 divmod: Fsum[850] (0.0, 0)
    test 45 residual: 0
    test 46 is_exact: True
    test 47 Fsum: -0.00014778142795882123
    test 48 Fsum: -0.00014778142795882123

    test 49 fsum: 3.770071331704819e-10
    test 50 sum2: 3.725865397458117e-10  FAILED, KNOWN, expected 3.770071331704819e-10
    test 51 pow(4): Fsum[13] pow(2.02022e-38, -7.57217e-55)
    test 52 pow(1): Fsum[842] pow(3.77007e-10, -2.44677e-27)
    test 53 pow(0): Fsum[1] pow(1.0, 0)
    test 54 ceil: True
    test 55 floor: True
    test 56 divmod: Fsum[846] (0.0, 0)
    test 57 residual: 0
    test 58 is_exact: True
    test 59 Fsum: 3.770071331704819e-10
    test 60 Fsum: 3.770071331704819e-10

    test 61 fsum: 1.4927782995344654e-05
    test 62 sum3: -13.999985072216987  FAILED, KNOWN, expected 1.4927782995344654e-05
    test 63 pow(4): Fsum[13] pow(4.96571e-20, -1.01121e-36)
    test 64 pow(1): Fsum[842] pow(1.49278e-05, -5.22416e-22)
    test 65 pow(0): Fsum[1] pow(1.0, 0)
    test 66 ceil: True
    test 67 floor: True
    test 68 divmod: Fsum[848] (0.0, 0)
    test 69 residual: 0
    test 70 is_exact: True
    test 71 Fsum: 1.4927782995344654e-05
    test 72 Fsum: 1.4927782995344654e-05

    test 73 fsum: -3.431965844429411e-13
    test 74 sum4: 0.0  FAILED, KNOWN, expected -3.431965844429411e-13
    test 75 pow(4): Fsum[8] pow(1.3873e-50, -3.7788e-67)
    test 76 pow(1): Fsum[842] pow(-3.43197e-13, -1.57584e-29)
    test 77 pow(0): Fsum[1] pow(1.0, 0)
    test 78 ceil: True
    test 79 floor: True
    test 80 divmod: Fsum[848] (0.0, 0)
    test 81 residual: 0
    test 82 is_exact: True
    test 83 Fsum: -3.431965844429411e-13
    test 84 Fsum: -3.431965844429411e-13

    test 85 fsum: -0.07187220174725797
    test 86 sum5: 0.0  FAILED, KNOWN, expected -0.07187220174725797
    test 87 pow(4): Fsum[24] pow(2.66836e-05, 1.10369e-21)
    test 88 pow(1): Fsum[842] pow(-0.0718722, 4.48987e-18)
    test 89 pow(0): Fsum[1] pow(1.0, 0)
    test 90 ceil: True
    test 91 floor: True
    test 92 divmod: Fsum[851] (0.0, 0)
    test 93 residual: 0
    test 94 is_exact: True
    test 95 Fsum: -0.07187220174725797
    test 96 Fsum: -0.07187220174725797

    test 97 fsum: 8.081310262691688e-14
    test 98 sum6: 7.656375533571236e-14  FAILED, KNOWN, expected 8.081310262691688e-14
    test 99 pow(4): Fsum[8] pow(4.26508e-53, -1.17005e-69)
    test 100 pow(1): Fsum[842] pow(8.08131e-14, -3.13661e-30)
    test 101 pow(0): Fsum[1] pow(1.0, 0)
    test 102 ceil: True
    test 103 floor: True
    test 104 divmod: Fsum[844] (0.0, 0)
    test 105 residual: 0
    test 106 is_exact: True
    test 107 Fsum: 8.081310262691688e-14
    test 108 Fsum: 8.081310262691688e-14

    test 109 fsum: 5.9779209352342725e-15
    test 110 sum7: -7.000000000000092  FAILED, KNOWN, expected 5.9779209352342725e-15
    test 111 pow(4): Fsum[9] pow(1.27703e-57, -4.63841e-74)
    test 112 pow(1): Fsum[842] pow(5.97792e-15, 1.8838e-32)
    test 113 pow(0): Fsum[1] pow(1.0, 0)
    test 114 ceil: True
    test 115 floor: True
    test 116 divmod: Fsum[844] (0.0, 0)
    test 117 residual: 0
    test 118 is_exact: True
    test 119 Fsum: 5.9779209352342725e-15
    test 120 Fsum: 5.9779209352342725e-15

    test 121 fsum: -0.4612902451197076
    test 122 sum8: 0.0  FAILED, KNOWN, expected -0.4612902451197076
    test 123 pow(4): Fsum[23] pow(0.045279, 1.89278e-18)
    test 124 pow(1): Fsum[842] pow(-0.46129, -1.48247e-17)
    test 125 pow(0): Fsum[1] pow(1.0, 0)
    test 126 ceil: True
    test 127 floor: True
    test 128 divmod: Fsum[849] (0.0, 0)
    test 129 residual: 0
    test 130 is_exact: True
    test 131 Fsum: -0.4612902451197076
    test 132 Fsum: -0.4612902451197076

    test 133 fsum: -1.1572104414146207e-10
    test 134 sum9: 0.0  FAILED, KNOWN, expected -1.1572104414146207e-10
    test 135 pow(4): Fsum[12] pow(1.79329e-40, 6.96054e-57)
    test 136 pow(1): Fsum[842] pow(-1.15721e-10, -3.997e-27)
    test 137 pow(0): Fsum[1] pow(1.0, 0)
    test 138 ceil: True
    test 139 floor: True
    test 140 divmod: Fsum[847] (0.0, 0)
    test 141 residual: 0
    test 142 is_exact: True
    test 143 Fsum: -1.1572104414146207e-10
    test 144 Fsum: -1.1572104414146207e-10

    test 145 fsum: -2.2299919469045365e-12
    test 146 sum10: -7.000000000002501  FAILED, KNOWN, expected -2.2299919469045365e-12
    test 147 pow(4): Fsum[10] pow(2.47294e-47, -1.33618e-63)
    test 148 pow(1): Fsum[842] pow(-2.22999e-12, -8.83829e-29)
    test 149 pow(0): Fsum[1] pow(1.0, 0)
    test 150 ceil: True
    test 151 floor: True
    test 152 divmod: Fsum[846] (0.0, 0)
    test 153 residual: 0
    test 154 is_exact: True
    test 155 Fsum: -2.2299919469045365e-12
    test 156 Fsum: -2.2299919469045365e-12

    test 157 fsum: 3.3657860724588344e-07
    test 158 sum11: 0.0  FAILED, KNOWN, expected 3.3657860724588344e-07
    test 159 pow(4): Fsum[13] pow(1.28335e-26, -4.63668e-43)
    test 160 pow(1): Fsum[842] pow(3.36579e-07, -1.74159e-23)
    test 161 pow(0): Fsum[1] pow(1.0, 0)
    test 162 ceil: True
    test 163 floor: True
    test 164 divmod: Fsum[848] (0.0, 0)
    test 165 residual: 0
    test 166 is_exact: True
    test 167 Fsum: 3.3657860724588344e-07
    test 168 Fsum: 3.3657860724588344e-07

    test 169 fsum: 0.0016678706621154756
    test 170 sum12: 0.0  FAILED, KNOWN, expected 0.0016678706621154756
    test 171 pow(4): Fsum[32] pow(7.73837e-12, 1.32017e-28)
    test 172 pow(1): Fsum[842] pow(0.00166787, -9.37833e-20)
    test 173 pow(0): Fsum[1] pow(1.0, 0)
    test 174 ceil: True
    test 175 floor: True
    test 176 divmod: Fsum[848] (0.0, 0)
    test 177 residual: 0
    test 178 is_exact: True
    test 179 Fsum: 0.0016678706621154756
    test 180 Fsum: 0.0016678706621154756

    test 181 fsum: -0.009256434751361755
    test 182 sum13: 0.0  FAILED, KNOWN, expected -0.009256434751361755
    test 183 pow(4): Fsum[29] pow(7.34133e-09, 3.77708e-25)
    test 184 pow(1): Fsum[842] pow(-0.00925643, -8.432e-19)
    test 185 pow(0): Fsum[1] pow(1.0, 0)
    test 186 ceil: True
    test 187 floor: True
    test 188 divmod: Fsum[851] (0.0, 0)
    test 189 residual: 0
    test 190 is_exact: True
    test 191 Fsum: -0.009256434751361755
    test 192 Fsum: -0.009256434751361755

    test 193 fsum: -3.8770991918050264e-14
    test 194 sum14: 0.0  FAILED, KNOWN, expected -3.8770991918050264e-14
    test 195 pow(4): Fsum[11] pow(2.25958e-54, 6.90023e-71)
    test 196 pow(1): Fsum[842] pow(-3.8771e-14, -7.70023e-31)
    test 197 pow(0): Fsum[1] pow(1.0, 0)
    test 198 ceil: True
    test 199 floor: True
    test 200 divmod: Fsum[847] (0.0, 0)
    test 201 residual: 0
    test 202 is_exact: True
    test 203 Fsum: -3.8770991918050264e-14
    test 204 Fsum: -3.8770991918050264e-14

    test 205 fsum: 1.7086992881574675e-14
    test 206 sum15: 13.99999999999929  FAILED, KNOWN, expected 1.7086992881574675e-14
    test 207 pow(4): Fsum[9] pow(8.52438e-56, 6.73637e-72)
    test 208 pow(1): Fsum[842] pow(1.7087e-14, 8.07699e-31)
    test 209 pow(0): Fsum[1] pow(1.0, 0)
    test 210 ceil: True
    test 211 floor: True
    test 212 divmod: Fsum[845] (0.0, 0)
    test 213 residual: 0
    test 214 is_exact: True
    test 215 Fsum: 1.7086992881574675e-14
    test 216 Fsum: 1.7086992881574675e-14

    test 217 fsum: -2.4501185255164587e-08
    test 218 sum16: 0.0  FAILED, KNOWN, expected -2.4501185255164587e-08
    test 219 pow(4): Fsum[11] pow(3.6037e-31, -1.7425e-47)
    test 220 pow(1): Fsum[842] pow(-2.45012e-08, -1.24739e-24)
    test 221 pow(0): Fsum[1] pow(1.0, 0)
    test 222 ceil: True
    test 223 floor: True
    test 224 divmod: Fsum[847] (0.0, 0)
    test 225 residual: 0
    test 226 is_exact: True
    test 227 Fsum: -2.4501185255164587e-08
    test 228 Fsum: -2.4501185255164587e-08

    test 229 fsum: -8.46030413943544e-05
    test 230 sum17: 0.0  FAILED, KNOWN, expected -8.46030413943544e-05
    test 231 pow(4): Fsum[21] pow(5.12323e-17, 5.82061e-34)
    test 232 pow(1): Fsum[842] pow(-8.4603e-05, 1.97409e-21)
    test 233 pow(0): Fsum[1] pow(1.0, 0)
    test 234 ceil: True
    test 235 floor: True
    test 236 divmod: Fsum[851] (0.0, 0)
    test 237 residual: 0
    test 238 is_exact: True
    test 239 Fsum: -8.46030413943544e-05
    test 240 Fsum: -8.46030413943544e-05

    test 241 fsum: 0.1069965613779842
    test 242 sum18: 0.10699656137811075  FAILED, KNOWN, expected 0.1069965613779842
    test 243 pow(4): Fsum[28] pow(0.000131063, -1.29482e-20)
    test 244 pow(1): Fsum[842] pow(0.106997, -1.51793e-18)
    test 245 pow(0): Fsum[1] pow(1.0, 0)
    test 246 ceil: True
    test 247 floor: True
    test 248 divmod: Fsum[847] (0.0, 0)
    test 249 residual: 0
    test 250 is_exact: True
    test 251 Fsum: 0.1069965613779842
    test 252 Fsum: 0.1069965613779842

    test 253 fsum: 1.2074606808062927e-06
    test 254 sum19: 0.0  FAILED, KNOWN, expected 1.2074606808062927e-06
    test 255 pow(4): Fsum[15] pow(2.12565e-24, 1.69975e-40)
    test 256 pow(1): Fsum[842] pow(1.20746e-06, -1.00671e-23)
    test 257 pow(0): Fsum[1] pow(1.0, 0)
    test 258 ceil: True
    test 259 floor: True
    test 260 divmod: Fsum[845] (0.0, 0)
    test 261 residual: 0
    test 262 is_exact: True
    test 263 Fsum: 1.2074606808062927e-06
    test 264 Fsum: 1.2074606808062927e-06

    test 265 fsum: 30.960907435836084
    test 266 sum20: 0.0  FAILED, KNOWN, expected 30.960907435836084
    test 267 pow(4): Fsum[26] pow(918871.0, 1.0898e-12)
    test 268 pow(1): Fsum[842] pow(30.9609, 1.23385e-15)
    test 269 pow(0): Fsum[1] pow(1.0, 0)
    test 270 ceil: True
    test 271 floor: True
    test 272 divmod: Fsum[846] (0.0, 0)
    test 273 residual: 0
    test 274 is_exact: True
    test 275 Fsum: 30.960907435836084
    test 276 Fsum: 30.960907435836084

    test 277 fsum: 1.5212941510178903e-11
    test 278 sum21: 0.0  FAILED, KNOWN, expected 1.5212941510178903e-11
    test 279 pow(4): Fsum[6] pow(5.35615e-44, 8.12686e-61)
    test 280 pow(1): Fsum[842] pow(1.52129e-11, 5.92688e-28)
    test 281 pow(0): Fsum[1] pow(1.0, 0)
    test 282 ceil: True
    test 283 floor: True
    test 284 divmod: Fsum[846] (0.0, 0)
    test 285 residual: 0
    test 286 is_exact: True
    test 287 Fsum: 1.5212941510178903e-11
    test 288 Fsum: 1.5212941510178903e-11

    test 289 fsum: 4.553694914710133e-05
    test 290 sum22: 0.0  FAILED, KNOWN, expected 4.553694914710133e-05
    test 291 pow(4): Fsum[19] pow(4.29987e-18, 3.76424e-34)
    test 292 pow(1): Fsum[842] pow(4.55369e-05, -1.45213e-21)
    test 293 pow(0): Fsum[1] pow(1.0, 0)
    test 294 ceil: True
    test 295 floor: True
    test 296 divmod: Fsum[846] (0.0, 0)
    test 297 residual: 0
    test 298 is_exact: True
    test 299 Fsum: 4.553694914710133e-05
    test 300 Fsum: 4.553694914710133e-05

    test 301 fsum: -2.986598823488991e-05
    test 302 sum23: 0.0  FAILED, KNOWN, expected -2.986598823488991e-05
    test 303 pow(4): Fsum[24] pow(7.95623e-19, 1.42891e-35)
    test 304 pow(1): Fsum[842] pow(-2.9866e-05, -1.48957e-21)
    test 305 pow(0): Fsum[1] pow(1.0, 0)
    test 306 ceil: True
    test 307 floor: True
    test 308 divmod: Fsum[850] (0.0, 0)
    test 309 residual: 0
    test 310 is_exact: True
    test 311 Fsum: -2.986598823488991e-05
    test 312 Fsum: -2.986598823488991e-05

    test 313 fsum: 0.004020265984707603
    test 314 sum24: 0.0  FAILED, KNOWN, expected 0.004020265984707603
    test 315 pow(4): Fsum[23] pow(2.61228e-10, -1.63979e-26)
    test 316 pow(1): Fsum[842] pow(0.00402027, -3.79155e-19)
    test 317 pow(0): Fsum[1] pow(1.0, 0)
    test 318 ceil: True
    test 319 floor: True
    test 320 divmod: Fsum[849] (0.0, 0)
    test 321 residual: 0
    test 322 is_exact: True
    test 323 Fsum: 0.004020265984707603
    test 324 Fsum: 0.004020265984707603

    test 325 fsum: -0.00034430904427889034
    test 326 sum25: 0.0  FAILED, KNOWN, expected -0.00034430904427889034
    test 327 pow(4): Fsum[23] pow(1.40538e-14, -7.1465e-31)
    test 328 pow(1): Fsum[842] pow(-0.000344309, 4.69816e-22)
    test 329 pow(0): Fsum[1] pow(1.0, 0)
    test 330 ceil: True
    test 331 floor: True
    test 332 divmod: Fsum[849] (0.0, 0)
    test 333 residual: 0
    test 334 is_exact: True
    test 335 Fsum: -0.00034430904427889034
    test 336 Fsum: -0.00034430904427889034

    test 337 fsum: -0.0004100180512855475
    test 338 sum26: 0.0  FAILED, KNOWN, expected -0.0004100180512855475
    test 339 pow(4): Fsum[22] pow(2.82626e-14, -8.53164e-31)
    test 340 pow(1): Fsum[842] pow(-0.000410018, -1.38221e-20)
    test 341 pow(0): Fsum[1] pow(1.0, 0)
    test 342 ceil: True
    test 343 floor: True
    test 344 divmod: Fsum[850] (0.0, 0)
    test 345 residual: 0
    test 346 is_exact: True
    test 347 Fsum: -0.0004100180512855475
    test 348 Fsum: -0.0004100180512855475

    test 349 fsum: -7.387901662369077e-07
    test 350 sum27: 0.0  FAILED, KNOWN, expected -7.387901662369077e-07
    test 351 pow(4): Fsum[15] pow(2.9791e-25, -7.31952e-42)
    test 352 pow(1): Fsum[842] pow(-7.3879e-07, -7.93695e-24)
    test 353 pow(0): Fsum[1] pow(1.0, 0)
    test 354 ceil: True
    test 355 floor: True
    test 356 divmod: Fsum[847] (0.0, 0)
    test 357 residual: 0
    test 358 is_exact: True
    test 359 Fsum: -7.387901662369077e-07
    test 360 Fsum: -7.387901662369077e-07

    test 361 fsum: -0.12185407300173932
    test 362 sum28: 0.0  FAILED, KNOWN, expected -0.12185407300173932
    test 363 pow(4): Fsum[34] pow(0.000220475, -2.71003e-21)
    test 364 pow(1): Fsum[842] pow(-0.121854, -1.5873e-18)
    test 365 pow(0): Fsum[1] pow(1.0, 0)
    test 366 ceil: True
    test 367 floor: True
    test 368 divmod: Fsum[849] (0.0, 0)
    test 369 residual: 0
    test 370 is_exact: True
    test 371 Fsum: -0.12185407300173932
    test 372 Fsum: -0.12185407300173932

    test 373 fsum: 0.13781701477756916
    test 374 sum29: 0.0  FAILED, KNOWN, expected 0.13781701477756916
    test 375 pow(4): Fsum[23] pow(0.000360754, -1.9892e-20)
    test 376 pow(1): Fsum[842] pow(0.137817, -7.64412e-18)
    test 377 pow(0): Fsum[1] pow(1.0, 0)
    test 378 ceil: True
    test 379 floor: True
    test 380 divmod: Fsum[846] (0.0, 0)
    test 381 residual: 0
    test 382 is_exact: True
    test 383 Fsum: 0.13781701477756916
    test 384 Fsum: 0.13781701477756916

    test 385 fsum: 5.9498194895446616e-05
    test 386 sum30: 7.0000594981953554  FAILED, KNOWN, expected 5.9498194895446616e-05
    test 387 pow(4): Fsum[20] pow(1.25318e-17, 6.085e-34)
    test 388 pow(1): Fsum[842] pow(5.94982e-05, 5.96056e-22)
    test 389 pow(0): Fsum[1] pow(1.0, 0)
    test 390 ceil: True
    test 391 floor: True
    test 392 divmod: Fsum[849] (0.0, 0)
    test 393 residual: 0
    test 394 is_exact: True
    test 395 Fsum: 5.9498194895446616e-05
    test 396 Fsum: 5.9498194895446616e-05

    test 397 fsum: -0.001079427370625171
    test 398 sum31: 0.0  FAILED, KNOWN, expected -0.001079427370625171
    test 399 pow(4): Fsum[22] pow(1.35761e-12, -4.736e-29)
    test 400 pow(1): Fsum[842] pow(-0.00107943, -5.75689e-20)
    test 401 pow(0): Fsum[1] pow(1.0, 0)
    test 402 ceil: True
    test 403 floor: True
    test 404 divmod: Fsum[847] (0.0, 0)
    test 405 residual: 0
    test 406 is_exact: True
    test 407 Fsum: -0.001079427370625171
    test 408 Fsum: -0.001079427370625171

    test 409 fsum: 3.7670644535973156e-10
    test 410 sum32: 3.766800205085019e-10  FAILED, KNOWN, expected 3.7670644535973156e-10
    test 411 pow(4): Fsum[30] pow(2.01378e-38, 1.55734e-55)
    test 412 pow(1): Fsum[842] pow(3.76706e-10, 5.9069e-27)
    test 413 pow(0): Fsum[1] pow(1.0, 0)
    test 414 ceil: True
    test 415 floor: True
    test 416 divmod: Fsum[847] (0.0, 0)
    test 417 residual: 0
    test 418 is_exact: True
    test 419 Fsum: 3.7670644535973156e-10
    test 420 Fsum: 3.7670644535973156e-10

    test 421 fsum: -24.72501884240964
    test 422 sum33: 0.0  FAILED, KNOWN, expected -24.72501884240964
    test 423 pow(4): Fsum[30] pow(373720.0, -1.92261e-11)
    test 424 pow(1): Fsum[842] pow(-24.725, -8.82512e-16)
    test 425 pow(0): Fsum[1] pow(1.0, 0)
    test 426 ceil: True
    test 427 floor: True
    test 428 divmod: Fsum[853] (0.0, 0)
    test 429 residual: 0
    test 430 is_exact: True
    test 431 Fsum: -24.72501884240964
    test 432 Fsum: -24.72501884240964

    test 433 fsum: 6.371294481514785e-07
    test 434 sum34: -6.9999993628726145  FAILED, KNOWN, expected 6.371294481514785e-07
    test 435 pow(4): Fsum[17] pow(1.64782e-25, 4.45685e-42)
    test 436 pow(1): Fsum[842] pow(6.37129e-07, -1.84545e-23)
    test 437 pow(0): Fsum[1] pow(1.0, 0)
    test 438 ceil: True
    test 439 floor: True
    test 440 divmod: Fsum[847] (0.0, 0)
    test 441 residual: 0
    test 442 is_exact: True
    test 443 Fsum: 6.371294481514785e-07
    test 444 Fsum: 6.371294481514785e-07

    test 445 fsum: 1.2648410470095153e-13
    test 446 sum35: 0.0  FAILED, KNOWN, expected 1.2648410470095153e-13
    test 447 pow(4): Fsum[15] pow(2.55943e-52, -1.30225e-68)
    test 448 pow(1): Fsum[842] pow(1.26484e-13, 1.8838e-32)
    test 449 pow(0): Fsum[1] pow(1.0, 0)
    test 450 ceil: True
    test 451 floor: True
    test 452 divmod: Fsum[844] (0.0, 0)
    test 453 residual: 0
    test 454 is_exact: True
    test 455 Fsum: 1.2648410470095153e-13
    test 456 Fsum: 1.2648410470095153e-13

    test 457 fsum: 0.0004471695332195854
    test 458 sum36: 0.0  FAILED, KNOWN, expected 0.0004471695332195854
    test 459 pow(4): Fsum[24] pow(3.99842e-14, -2.38435e-30)
    test 460 pow(1): Fsum[842] pow(0.00044717, -4.46308e-21)
    test 461 pow(0): Fsum[1] pow(1.0, 0)
    test 462 ceil: True
    test 463 floor: True
    test 464 divmod: Fsum[850] (0.0, 0)
    test 465 residual: 0
    test 466 is_exact: True
    test 467 Fsum: 0.0004471695332195854
    test 468 Fsum: 0.0004471695332195854

    test 469 fsum: -5.0953386272087245e-12
    test 470 sum37: 0.0  FAILED, KNOWN, expected -5.0953386272087245e-12
    test 471 pow(4): Fsum[12] pow(6.7405e-46, -1.70026e-62)
    test 472 pow(1): Fsum[842] pow(-5.09534e-12, 2.209e-28)
    test 473 pow(0): Fsum[1] pow(1.0, 0)
    test 474 ceil: True
    test 475 floor: True
    test 476 divmod: Fsum[847] (0.0, 0)
    test 477 residual: 0
    test 478 is_exact: True
    test 479 Fsum: -5.0953386272087245e-12
    test 480 Fsum: -5.0953386272087245e-12

    test 481 fsum: 4.3121018688776535e-05
    test 482 sum38: -13.999956878981674  FAILED, KNOWN, expected 4.3121018688776535e-05
    test 483 pow(4): Fsum[16] pow(3.45745e-18, -6.42576e-36)
    test 484 pow(1): Fsum[842] pow(4.3121e-05, -1.30243e-21)
    test 485 pow(0): Fsum[1] pow(1.0, 0)
    test 486 ceil: True
    test 487 floor: True
    test 488 divmod: Fsum[846] (0.0, 0)
    test 489 residual: 0
    test 490 is_exact: True
    test 491 Fsum: 4.3121018688776535e-05
    test 492 Fsum: 4.3121018688776535e-05

    test 493 fsum: 1.2525010247735813
    test 494 sum39: -5.747498975225881  FAILED, KNOWN, expected 1.2525010247735813
    test 495 pow(4): Fsum[26] pow(2.461, -1.73237e-16)
    test 496 pow(1): Fsum[842] pow(1.2525, -3.70468e-17)
    test 497 pow(0): Fsum[1] pow(1.0, 0)
    test 498 ceil: True
    test 499 floor: True
    test 500 divmod: Fsum[849] (0.0, 0)
    test 501 residual: 0
    test 502 is_exact: True
    test 503 Fsum: 1.2525010247735813
    test 504 Fsum: 1.2525010247735813

    test 505 fsum: 1.2006080603500958e-09
    test 506 sum40: 0.0  FAILED, KNOWN, expected 1.2006080603500958e-09
    test 507 pow(4): Fsum[12] pow(2.07781e-36, -1.64569e-52)
    test 508 pow(1): Fsum[842] pow(1.20061e-09, -9.36902e-26)
    test 509 pow(0): Fsum[1] pow(1.0, 0)
    test 510 ceil: True
    test 511 floor: True
    test 512 divmod: Fsum[845] (0.0, 0)
    test 513 residual: 0
    test 514 is_exact: True
    test 515 Fsum: 1.2006080603500958e-09
    test 516 Fsum: 1.2006080603500958e-09

    test 517 fsum: -3.6665991262585946e-05
    test 518 sum41: 0.0  FAILED, KNOWN, expected -3.6665991262585946e-05
    test 519 pow(4): Fsum[15] pow(1.8074e-18, 1.3747e-34)
    test 520 pow(1): Fsum[842] pow(-3.6666e-05, 1.608e-22)
    test 521 pow(0): Fsum[1] pow(1.0, 0)
    test 522 ceil: True
    test 523 floor: True
    test 524 divmod: Fsum[848] (0.0, 0)
    test 525 residual: 0
    test 526 is_exact: True
    test 527 Fsum: -3.6665991262585946e-05
    test 528 Fsum: -3.6665991262585946e-05

    test 529 fsum: 3.3249957760076146e-14
    test 530 sum42: 3.659295089164516e-13  FAILED, KNOWN, expected 3.3249957760076146e-14
    test 531 pow(4): Fsum[9] pow(1.22226e-54, 8.60671e-72)
    test 532 pow(1): Fsum[842] pow(3.325e-14, -1.55888e-30)
    test 533 pow(0): Fsum[1] pow(1.0, 0)
    test 534 ceil: True
    test 535 floor: True
    test 536 divmod: Fsum[846] (0.0, 0)
    test 537 residual: 0
    test 538 is_exact: True
    test 539 Fsum: 3.3249957760076146e-14
    test 540 Fsum: 3.3249957760076146e-14

    test 541 fsum: -0.005646189278090298
    test 542 sum43: 0.0  FAILED, KNOWN, expected -0.005646189278090298
    test 543 pow(4): Fsum[27] pow(1.0163e-09, 9.70929e-26)
    test 544 pow(1): Fsum[842] pow(-0.00564619, 2.69109e-19)
    test 545 pow(0): Fsum[1] pow(1.0, 0)
    test 546 ceil: True
    test 547 floor: True
    test 548 divmod: Fsum[852] (0.0, 0)
    test 549 residual: 0
    test 550 is_exact: True
    test 551 Fsum: -0.005646189278090298
    test 552 Fsum: -0.005646189278090298

    test 553 fsum: -1.4479537770184953e-06
    test 554 sum44: 0.0  FAILED, KNOWN, expected -1.4479537770184953e-06
    test 555 pow(4): Fsum[21] pow(4.39561e-24, -3.43616e-40)
    test 556 pow(1): Fsum[842] pow(-1.44795e-06, 2.14497e-23)
    test 557 pow(0): Fsum[1] pow(1.0, 0)
    test 558 ceil: True
    test 559 floor: True
    test 560 divmod: Fsum[850] (0.0, 0)
    test 561 residual: 0
    test 562 is_exact: True
    test 563 Fsum: -1.4479537770184953e-06
    test 564 Fsum: -1.4479537770184953e-06

    test 565 fsum: 0.0001602153211902849
    test 566 sum45: 0.0  FAILED, KNOWN, expected 0.0001602153211902849
    test 567 pow(4): Fsum[61] pow(6.58895e-16, -8.77398e-33)
    test 568 pow(1): Fsum[842] pow(0.000160215, 1.29224e-20)
    test 569 pow(0): Fsum[1] pow(1.0, 0)
    test 570 ceil: True
    test 571 floor: True
    test 572 divmod: Fsum[852] (0.0, 0)
    test 573 residual: 0
    test 574 is_exact: True
    test 575 Fsum: 0.0001602153211902849
    test 576 Fsum: 0.0001602153211902849

    test 577 fsum: -4.156751915808662e-07
    test 578 sum46: 13.999999584324598  FAILED, KNOWN, expected -4.156751915808662e-07
    test 579 pow(4): Fsum[12] pow(2.9855e-26, -8.83891e-43)
    test 580 pow(1): Fsum[842] pow(-4.15675e-07, -8.49476e-24)
    test 581 pow(0): Fsum[1] pow(1.0, 0)
    test 582 ceil: True
    test 583 floor: True
    test 584 divmod: Fsum[848] (0.0, 0)
    test 585 residual: 0
    test 586 is_exact: True
    test 587 Fsum: -4.156751915808662e-07
    test 588 Fsum: -4.156751915808662e-07

    test 589 fsum: 0.0005307057196202139
    test 590 sum47: 0.0  FAILED, KNOWN, expected 0.0005307057196202139
    test 591 pow(4): Fsum[24] pow(7.93259e-14, 1.83417e-30)
    test 592 pow(1): Fsum[842] pow(0.000530706, -2.91566e-20)
    test 593 pow(0): Fsum[1] pow(1.0, 0)
    test 594 ceil: True
    test 595 floor: True
    test 596 divmod: Fsum[850] (0.0, 0)
    test 597 residual: 0
    test 598 is_exact: True
    test 599 Fsum: 0.0005307057196202139
    test 600 Fsum: 0.0005307057196202139

    test 601 fsum: 0.5659161863095493
    test 602 sum48: 0.0  FAILED, KNOWN, expected 0.5659161863095493
    test 603 pow(4): Fsum[23] pow(0.102567, -2.91673e-18)
    test 604 pow(1): Fsum[842] pow(0.565916, 4.16452e-17)
    test 605 pow(0): Fsum[1] pow(1.0, 0)
    test 606 ceil: True
    test 607 floor: True
    test 608 divmod: Fsum[847] (0.0, 0)
    test 609 residual: 0
    test 610 is_exact: True
    test 611 Fsum: 0.5659161863095493
    test 612 Fsum: 0.5659161863095493

    test 613 fsum: 8.117983654157014e-14
    test 614 sum49: 0.0  FAILED, KNOWN, expected 8.117983654157014e-14
    test 615 pow(4): Fsum[10] pow(4.34303e-53, -1.97863e-69)
    test 616 pow(1): Fsum[842] pow(8.11798e-14, 6.78517e-31)
    test 617 pow(0): Fsum[1] pow(1.0, 0)
    test 618 ceil: True
    test 619 floor: True
    test 620 divmod: Fsum[846] (0.0, 0)
    test 621 residual: 0
    test 622 is_exact: True
    test 623 Fsum: 8.117983654157014e-14
    test 624 Fsum: 8.117983654157014e-14

    test 625 fsum: -1.2248337332652735e-08
    test 626 sum50: -1.224429979629349e-08  FAILED, KNOWN, expected -1.2248337332652735e-08
    test 627 pow(4): Fsum[13] pow(2.25065e-32, 1.83377e-49)
    test 628 pow(1): Fsum[842] pow(-1.22483e-08, -2.42852e-25)
    test 629 pow(0): Fsum[1] pow(1.0, 0)
    test 630 ceil: True
    test 631 floor: True
    test 632 divmod: Fsum[850] (0.0, 0)
    test 633 residual: 0
    test 634 is_exact: True
    test 635 Fsum: -1.2248337332652735e-08
    test 636 Fsum: -1.2248337332652735e-08

    test 637 fsum: 0.36470088333616113
    test 638 sum51: 7.364700883335942  FAILED, KNOWN, expected 0.36470088333616113
    test 639 pow(4): Fsum[26] pow(0.0176908, 1.09234e-18)
    test 640 pow(1): Fsum[842] pow(0.364701, -1.24824e-19)
    test 641 pow(0): Fsum[1] pow(1.0, 0)
    test 642 ceil: True
    test 643 floor: True
    test 644 divmod: Fsum[849] (0.0, 0)
    test 645 residual: 0
    test 646 is_exact: True
    test 647 Fsum: 0.36470088333616113
    test 648 Fsum: 0.36470088333616113

    test 649 fsum: 0.00030584913433942984
    test 650 sum52: 0.0  FAILED, KNOWN, expected 0.00030584913433942984
    test 651 pow(4): Fsum[26] pow(8.75042e-15, -1.15513e-31)
    test 652 pow(1): Fsum[842] pow(0.000305849, -1.192e-20)
    test 653 pow(0): Fsum[1] pow(1.0, 0)
    test 654 ceil: True
    test 655 floor: True
    test 656 divmod: Fsum[848] (0.0, 0)
    test 657 residual: 0
    test 658 is_exact: True
    test 659 Fsum: 0.00030584913433942984
    test 660 Fsum: 0.00030584913433942984

    test 661 fsum: -0.0002915473309582999
    test 662 sum53: 0.0  FAILED, KNOWN, expected -0.0002915473309582999
    test 663 pow(4): Fsum[11] pow(7.22497e-15, 8.51704e-32)
    test 664 pow(1): Fsum[842] pow(-0.000291547, -5.73171e-21)
    test 665 pow(0): Fsum[1] pow(1.0, 0)
    test 666 ceil: True
    test 667 floor: True
    test 668 divmod: Fsum[847] (0.0, 0)
    test 669 residual: 0
    test 670 is_exact: True
    test 671 Fsum: -0.0002915473309582999
    test 672 Fsum: -0.0002915473309582999

    test 673 fsum: -9.221003017896294e-09
    test 674 sum54: 0.0  FAILED, KNOWN, expected -9.221003017896294e-09
    test 675 pow(4): Fsum[12] pow(7.22957e-33, 6.36511e-49)
    test 676 pow(1): Fsum[842] pow(-9.221e-09, -9.83742e-26)
    test 677 pow(0): Fsum[1] pow(1.0, 0)
    test 678 ceil: True
    test 679 floor: True
    test 680 divmod: Fsum[848] (0.0, 0)
    test 681 residual: 0
    test 682 is_exact: True
    test 683 Fsum: -9.221003017896294e-09
    test 684 Fsum: -9.221003017896294e-09

    test 685 fsum: 5.363259368241433e-12
    test 686 sum55: 7.000000000005313  FAILED, KNOWN, expected 5.363259368241433e-12
    test 687 pow(4): Fsum[10] pow(8.27399e-46, -4.67278e-62)
    test 688 pow(1): Fsum[842] pow(5.36326e-12, 2.4851e-28)
    test 689 pow(0): Fsum[1] pow(1.0, 0)
    test 690 ceil: True
    test 691 floor: True
    test 692 divmod: Fsum[845] (0.0, 0)
    test 693 residual: 0
    test 694 is_exact: True
    test 695 Fsum: 5.363259368241433e-12
    test 696 Fsum: 5.363259368241433e-12

    test 697 fsum: 2.1005323231187722e-05
    test 698 sum56: -27.999978994677324  FAILED, KNOWN, expected 2.1005323231187722e-05
    test 699 pow(4): Fsum[22] pow(1.94678e-19, 5.36175e-36)
    test 700 pow(1): Fsum[842] pow(2.10053e-05, 1.64629e-21)
    test 701 pow(0): Fsum[1] pow(1.0, 0)
    test 702 ceil: True
    test 703 floor: True
    test 704 divmod: Fsum[850] (0.0, 0)
    test 705 residual: 0
    test 706 is_exact: True
    test 707 Fsum: 2.1005323231187722e-05
    test 708 Fsum: 2.1005323231187722e-05

    test 709 fsum: 1.5003687589282565e-15
    test 710 sum57: 0.0  FAILED, KNOWN, expected 1.5003687589282565e-15
    test 711 pow(4): Fsum[6] pow(5.06748e-60, 5.42351e-76)
    test 712 pow(1): Fsum[842] pow(1.50037e-15, 1.8838e-32)
    test 713 pow(0): Fsum[1] pow(1.0, 0)
    test 714 ceil: True
    test 715 floor: True
    test 716 divmod: Fsum[845] (0.0, 0)
    test 717 residual: 0
    test 718 is_exact: True
    test 719 Fsum: 1.5003687589282565e-15
    test 720 Fsum: 1.5003687589282565e-15

    test 721 fsum: 6.695906725818819e-05
    test 722 sum58: 0.0  FAILED, KNOWN, expected 6.695906725818819e-05
    test 723 pow(4): Fsum[16] pow(2.01019e-17, -1.04163e-33)
    test 724 pow(1): Fsum[842] pow(6.69591e-05, -2.15277e-21)
    test 725 pow(0): Fsum[1] pow(1.0, 0)
    test 726 ceil: True
    test 727 floor: True
    test 728 divmod: Fsum[848] (0.0, 0)
    test 729 residual: 0
    test 730 is_exact: True
    test 731 Fsum: 6.695906725818819e-05
    test 732 Fsum: 6.695906725818819e-05

    test 733 fsum: -0.3750413071745409
    test 734 sum59: 0.0  FAILED, KNOWN, expected -0.3750413071745409
    test 735 pow(4): Fsum[33] pow(0.0197841, -9.4789e-19)
    test 736 pow(1): Fsum[842] pow(-0.375041, 6.91205e-18)
    test 737 pow(0): Fsum[1] pow(1.0, 0)
    test 738 ceil: True
    test 739 floor: True
    test 740 divmod: Fsum[849] (0.0, 0)
    test 741 residual: 0
    test 742 is_exact: True
    test 743 Fsum: -0.3750413071745409
    test 744 Fsum: -0.3750413071745409

    test 745 fsum: -2.653870162783508e-13
    test 746 sum60: 6.999999999999962  FAILED, KNOWN, expected -2.653870162783508e-13
    test 747 pow(4): Fsum[8] pow(4.96042e-51, 7.38817e-68)
    test 748 pow(1): Fsum[842] pow(-2.65387e-13, 7.68481e-30)
    test 749 pow(0): Fsum[1] pow(1.0, 0)
    test 750 ceil: True
    test 751 floor: True
    test 752 divmod: Fsum[847] (0.0, 0)
    test 753 residual: 0
    test 754 is_exact: True
    test 755 Fsum: -2.653870162783508e-13
    test 756 Fsum: -2.653870162783508e-13

    test 757 fsum: 1.2326407768487836e-05
    test 758 sum61: 0.0  FAILED, KNOWN, expected 1.2326407768487836e-05
    test 759 pow(4): Fsum[16] pow(2.30859e-20, 9.56892e-37)
    test 760 pow(1): Fsum[842] pow(1.23264e-05, 4.9385e-22)
    test 761 pow(0): Fsum[1] pow(1.0, 0)
    test 762 ceil: True
    test 763 floor: True
    test 764 divmod: Fsum[846] (0.0, 0)
    test 765 residual: 0
    test 766 is_exact: True
    test 767 Fsum: 1.2326407768487836e-05
    test 768 Fsum: 1.2326407768487836e-05

    test 769 fsum: 1.526642458136596e-08
    test 770 sum62: 0.0  FAILED, KNOWN, expected 1.526642458136596e-08
    test 771 pow(4): Fsum[12] pow(5.43187e-32, 2.69023e-48)
    test 772 pow(1): Fsum[842] pow(1.52664e-08, -1.10107e-24)
    test 773 pow(0): Fsum[1] pow(1.0, 0)
    test 774 ceil: True
    test 775 floor: True
    test 776 divmod: Fsum[848] (0.0, 0)
    test 777 residual: 0
    test 778 is_exact: True
    test 779 Fsum: 1.526642458136596e-08
    test 780 Fsum: 1.526642458136596e-08

    test 781 fsum: 4.054765792506784e-14
    test 782 sum63: 2.2737367544323206e-13  FAILED, KNOWN, expected 4.054765792506784e-14
    test 783 pow(4): Fsum[9] pow(2.70311e-54, 1.60768e-70)
    test 784 pow(1): Fsum[842] pow(4.05477e-14, 1.8838e-32)
    test 785 pow(0): Fsum[1] pow(1.0, 0)
    test 786 ceil: True
    test 787 floor: True
    test 788 divmod: Fsum[844] (0.0, 0)
    test 789 residual: 0
    test 790 is_exact: True
    test 791 Fsum: 4.054765792506784e-14
    test 792 Fsum: 4.054765792506784e-14

    test 793 fsum: -0.11676840492749149
    test 794 sum64: 0.0  FAILED, KNOWN, expected -0.11676840492749149
    test 795 pow(4): Fsum[25] pow(0.000185909, 9.12191e-21)
    test 796 pow(1): Fsum[842] pow(-0.116768, 6.28088e-18)
    test 797 pow(0): Fsum[1] pow(1.0, 0)
    test 798 ceil: True
    test 799 floor: True
    test 800 divmod: Fsum[849] (0.0, 0)
    test 801 residual: 0
    test 802 is_exact: True
    test 803 Fsum: -0.11676840492749149
    test 804 Fsum: -0.11676840492749149

    test 805 fsum: 0.0003211067431798165
    test 806 sum65: 0.0  FAILED, KNOWN, expected 0.0003211067431798165
    test 807 pow(4): Fsum[19] pow(1.06316e-14, 2.68359e-31)
    test 808 pow(1): Fsum[842] pow(0.000321107, 8.86027e-21)
    test 809 pow(0): Fsum[1] pow(1.0, 0)
    test 810 ceil: True
    test 811 floor: True
    test 812 divmod: Fsum[847] (0.0, 0)
    test 813 residual: 0
    test 814 is_exact: True
    test 815 Fsum: 0.0003211067431798165
    test 816 Fsum: 0.0003211067431798165

    test 817 fsum: 1.6577839428989663e-08
    test 818 sum66: 0.0  FAILED, KNOWN, expected 1.6577839428989663e-08
    test 819 pow(4): Fsum[11] pow(7.55286e-32, 3.27487e-48)
    test 820 pow(1): Fsum[842] pow(1.65778e-08, 1.15984e-24)
    test 821 pow(0): Fsum[1] pow(1.0, 0)
    test 822 ceil: True
    test 823 floor: True
    test 824 divmod: Fsum[847] (0.0, 0)
    test 825 residual: 0
    test 826 is_exact: True
    test 827 Fsum: 1.6577839428989663e-08
    test 828 Fsum: 1.6577839428989663e-08

    test 829 fsum: 0.03424387694656991
    test 830 sum67: 7.034243876948949  FAILED, KNOWN, expected 0.03424387694656991
    test 831 pow(4): Fsum[29] pow(1.37509e-06, 7.60257e-23)
    test 832 pow(1): Fsum[842] pow(0.0342439, -5.50482e-19)
    test 833 pow(0): Fsum[1] pow(1.0, 0)
    test 834 ceil: True
    test 835 floor: True
    test 836 divmod: Fsum[850] (0.0, 0)
    test 837 residual: 0
    test 838 is_exact: True
    test 839 Fsum: 0.03424387694656991
    test 840 Fsum: 0.03424387694656991

    test 841 fsum: 0.004241447917457559
    test 842 sum68: 0.0  FAILED, KNOWN, expected 0.004241447917457559
    test 843 pow(4): Fsum[24] pow(3.23636e-10, 1.00575e-26)
    test 844 pow(1): Fsum[842] pow(0.00424145, 3.36006e-19)
    test 845 pow(0): Fsum[1] pow(1.0, 0)
    test 846 ceil: True
    test 847 floor: True
    test 848 divmod: Fsum[852] (0.0, 0)
    test 849 residual: 0
    test 850 is_exact: True
    test 851 Fsum: 0.004241447917457559
    test 852 Fsum: 0.004241447917457559

    test 853 fsum: 0.012697358185227952
    test 854 sum69: -27.98730264181495  FAILED, KNOWN, expected 0.012697358185227952
    test 855 pow(4): Fsum[26] pow(2.59928e-08, -1.10195e-24)
    test 856 pow(1): Fsum[842] pow(0.0126974, -2.4503e-19)
    test 857 pow(0): Fsum[1] pow(1.0, 0)
    test 858 ceil: True
    test 859 floor: True
    test 860 divmod: Fsum[849] (0.0, 0)
    test 861 residual: 0
    test 862 is_exact: True
    test 863 Fsum: 0.012697358185227952
    test 864 Fsum: 0.012697358185227952

    test 865 fsum: 0.00023194097677471225
    test 866 sum70: 0.0  FAILED, KNOWN, expected 0.00023194097677471225
    test 867 pow(4): Fsum[21] pow(2.89408e-15, 1.06399e-31)
    test 868 pow(1): Fsum[842] pow(0.000231941, -9.09022e-21)
    test 869 pow(0): Fsum[1] pow(1.0, 0)
    test 870 ceil: True
    test 871 floor: True
    test 872 divmod: Fsum[846] (0.0, 0)
    test 873 residual: 0
    test 874 is_exact: True
    test 875 Fsum: 0.00023194097677471225
    test 876 Fsum: 0.00023194097677471225

    test 877 fsum: 0.0006200992577317127
    test 878 sum71: -20.99937990074173  FAILED, KNOWN, expected 0.0006200992577317127
    test 879 pow(4): Fsum[21] pow(1.47858e-13, -3.70128e-30)
    test 880 pow(1): Fsum[842] pow(0.000620099, 2.48455e-21)
    test 881 pow(0): Fsum[1] pow(1.0, 0)
    test 882 ceil: True
    test 883 floor: True
    test 884 divmod: Fsum[848] (0.0, 0)
    test 885 residual: 0
    test 886 is_exact: True
    test 887 Fsum: 0.0006200992577317127
    test 888 Fsum: 0.0006200992577317127

    test 889 fsum: -1.3522359422729673e-06
    test 890 sum72: 0.0  FAILED, KNOWN, expected -1.3522359422729673e-06
    test 891 pow(4): Fsum[15] pow(3.34357e-24, -3.2881e-41)
    test 892 pow(1): Fsum[842] pow(-1.35224e-06, -1.02754e-22)
    test 893 pow(0): Fsum[1] pow(1.0, 0)
    test 894 ceil: True
    test 895 floor: True
    test 896 divmod: Fsum[847] (0.0, 0)
    test 897 residual: 0
    test 898 is_exact: True
    test 899 Fsum: -1.3522359422729673e-06
    test 900 Fsum: -1.3522359422729673e-06

    test 901 fsum: -7.92366873968949e-06
    test 902 sum73: -7.000007923668761  FAILED, KNOWN, expected -7.92366873968949e-06
    test 903 pow(4): Fsum[15] pow(3.9419e-21, 1.00062e-37)
    test 904 pow(1): Fsum[842] pow(-7.92367e-06, -1.08032e-22)
    test 905 pow(0): Fsum[1] pow(1.0, 0)
    test 906 ceil: True
    test 907 floor: True
    test 908 divmod: Fsum[848] (0.0, 0)
    test 909 residual: 0
    test 910 is_exact: True
    test 911 Fsum: -7.92366873968949e-06
    test 912 Fsum: -7.92366873968949e-06

    test 913 fsum: -0.00028666499032731137
    test 914 sum74: -0.000286664991190122  FAILED, KNOWN, expected -0.00028666499032731137
    test 915 pow(4): Fsum[17] pow(6.75303e-15, -3.18689e-31)
    test 916 pow(1): Fsum[842] pow(-0.000286665, 5.3295e-21)
    test 917 pow(0): Fsum[1] pow(1.0, 0)
    test 918 ceil: True
    test 919 floor: True
    test 920 divmod: Fsum[848] (0.0, 0)
    test 921 residual: 0
    test 922 is_exact: True
    test 923 Fsum: -0.00028666499032731137
    test 924 Fsum: -0.00028666499032731137

    test 925 fsum: 1.3811902854337737e-11
    test 926 sum75: 1.3774759111129242e-11  FAILED, KNOWN, expected 1.3811902854337737e-11
    test 927 pow(4): Fsum[7] pow(3.63927e-44, -1.08278e-60)
    test 928 pow(1): Fsum[842] pow(1.38119e-11, -2.90082e-28)
    test 929 pow(0): Fsum[1] pow(1.0, 0)
    test 930 ceil: True
    test 931 floor: True
    test 932 divmod: Fsum[846] (0.0, 0)
    test 933 residual: 0
    test 934 is_exact: True
    test 935 Fsum: 1.3811902854337737e-11
    test 936 Fsum: 1.3811902854337737e-11

    test 937 fsum: 3.85759057188891e-06
    test 938 sum76: 0.0  FAILED, KNOWN, expected 3.85759057188891e-06
    test 939 pow(4): Fsum[19] pow(2.21444e-22, 1.45658e-38)
    test 940 pow(1): Fsum[842] pow(3.85759e-06, -3.72492e-22)
    test 941 pow(0): Fsum[1] pow(1.0, 0)
    test 942 ceil: True
    test 943 floor: True
    test 944 divmod: Fsum[848] (0.0, 0)
    test 945 residual: 0
    test 946 is_exact: True
    test 947 Fsum: 3.85759057188891e-06
    test 948 Fsum: 3.85759057188891e-06

    test 949 fsum: 4.3586409104315544e-06
    test 950 sum77: 0.0  FAILED, KNOWN, expected 4.3586409104315544e-06
    test 951 pow(4): Fsum[19] pow(3.60915e-22, -2.34191e-38)
    test 952 pow(1): Fsum[842] pow(4.35864e-06, -3.32514e-22)
    test 953 pow(0): Fsum[1] pow(1.0, 0)
    test 954 ceil: True
    test 955 floor: True
    test 956 divmod: Fsum[846] (0.0, 0)
    test 957 residual: 0
    test 958 is_exact: True
    test 959 Fsum: 4.3586409104315544e-06
    test 960 Fsum: 4.3586409104315544e-06

    test 961 fsum: -2.31469927509762e-08
    test 962 sum78: 0.0  FAILED, KNOWN, expected -2.31469927509762e-08
    test 963 pow(4): Fsum[13] pow(2.87064e-31, 2.69474e-48)
    test 964 pow(1): Fsum[842] pow(-2.3147e-08, -1.62519e-24)
    test 965 pow(0): Fsum[1] pow(1.0, 0)
    test 966 ceil: True
    test 967 floor: True
    test 968 divmod: Fsum[846] (0.0, 0)
    test 969 residual: 0
    test 970 is_exact: True
    test 971 Fsum: -2.31469927509762e-08
    test 972 Fsum: -2.31469927509762e-08

    test 973 fsum: -0.0012918499027553835
    test 974 sum79: -0.0012918499026470798  FAILED, KNOWN, expected -0.0012918499027553835
    test 975 pow(4): Fsum[22] pow(2.78515e-12, 1.41708e-28)
    test 976 pow(1): Fsum[842] pow(-0.00129185, -9.34331e-20)
    test 977 pow(0): Fsum[1] pow(1.0, 0)
    test 978 ceil: True
    test 979 floor: True
    test 980 divmod: Fsum[848] (0.0, 0)
    test 981 residual: 0
    test 982 is_exact: True
    test 983 Fsum: -0.0012918499027553835
    test 984 Fsum: -0.0012918499027553835

    test 985 fsum: 5.593515755526138e-06
    test 986 sum80: 0.0  FAILED, KNOWN, expected 5.593515755526138e-06
    test 987 pow(4): Fsum[14] pow(9.78903e-22, -1.42699e-38)
    test 988 pow(1): Fsum[842] pow(5.59352e-06, 2.9545e-22)
    test 989 pow(0): Fsum[1] pow(1.0, 0)
    test 990 ceil: True
    test 991 floor: True
    test 992 divmod: Fsum[847] (0.0, 0)
    test 993 residual: 0
    test 994 is_exact: True
    test 995 Fsum: 5.593515755526138e-06
    test 996 Fsum: 5.593515755526138e-06

    test 997 fsum: 37.95309078480286
    test 998 sum81: 0.0  FAILED, KNOWN, expected 37.95309078480286
    test 999 pow(4): Fsum[45] pow(2.07486e+06, -9.94954e-11)
    test 1000 pow(1): Fsum[842] pow(37.9531, 3.36642e-15)
    test 1001 pow(0): Fsum[1] pow(1.0, 0)
    test 1002 ceil: True
    test 1003 floor: True
    test 1004 divmod: Fsum[850] (0.0, 0)
    test 1005 residual: 0
    test 1006 is_exact: True
    test 1007 Fsum: 37.95309078480286
    test 1008 Fsum: 37.95309078480286

    test 1009 fsum: -0.015333031705228354
    test 1010 sum82: 27.98466696829493  FAILED, KNOWN, expected -0.015333031705228354
    test 1011 pow(4): Fsum[27] pow(5.52729e-08, 6.83991e-25)
    test 1012 pow(1): Fsum[842] pow(-0.015333, -6.23961e-19)
    test 1013 pow(0): Fsum[1] pow(1.0, 0)
    test 1014 ceil: True
    test 1015 floor: True
    test 1016 divmod: Fsum[851] (0.0, 0)
    test 1017 residual: 0
    test 1018 is_exact: True
    test 1019 Fsum: -0.015333031705228354
    test 1020 Fsum: -0.015333031705228354

    test 1021 fsum: 0.37152651028174366
    test 1022 sum83: -6.628473489718658  FAILED, KNOWN, expected 0.37152651028174366
    test 1023 pow(4): Fsum[35] pow(0.0190528, 1.6657e-18)
    test 1024 pow(1): Fsum[842] pow(0.371527, -3.66335e-18)
    test 1025 pow(0): Fsum[1] pow(1.0, 0)
    test 1026 ceil: True
    test 1027 floor: True
    test 1028 divmod: Fsum[850] (0.0, 0)
    test 1029 residual: 0
    test 1030 is_exact: True
    test 1031 Fsum: 0.37152651028174366
    test 1032 Fsum: 0.37152651028174366

    test 1033 fsum: -0.08551218786332168
    test 1034 sum84: 0.0  FAILED, KNOWN, expected -0.08551218786332168
    test 1035 pow(4): Fsum[34] pow(5.34702e-05, 3.20432e-21)
    test 1036 pow(1): Fsum[842] pow(-0.0855122, -1.08099e-18)
    test 1037 pow(0): Fsum[1] pow(1.0, 0)
    test 1038 ceil: True
    test 1039 floor: True
    test 1040 divmod: Fsum[850] (0.0, 0)
    test 1041 residual: 0
    test 1042 is_exact: True
    test 1043 Fsum: -0.08551218786332168
    test 1044 Fsum: -0.08551218786332168

    test 1045 fsum: -0.0010620055269617307
    test 1046 sum85: -21.001062005526645  FAILED, KNOWN, expected -0.0010620055269617307
    test 1047 pow(4): Fsum[24] pow(1.27206e-12, -8.30387e-29)
    test 1048 pow(1): Fsum[842] pow(-0.00106201, -1.26355e-20)
    test 1049 pow(0): Fsum[1] pow(1.0, 0)
    test 1050 ceil: True
    test 1051 floor: True
    test 1052 divmod: Fsum[850] (0.0, 0)
    test 1053 residual: 0
    test 1054 is_exact: True
    test 1055 Fsum: -0.0010620055269617307
    test 1056 Fsum: -0.0010620055269617307

    test 1057 fsum: 7.761926451081674e-05
    test 1058 sum86: 0.0  FAILED, KNOWN, expected 7.761926451081674e-05
    test 1059 pow(4): Fsum[17] pow(3.62976e-17, -2.14016e-33)
    test 1060 pow(1): Fsum[842] pow(7.76193e-05, -6.50121e-21)
    test 1061 pow(0): Fsum[1] pow(1.0, 0)
    test 1062 ceil: True
    test 1063 floor: True
    test 1064 divmod: Fsum[847] (0.0, 0)
    test 1065 residual: 0
    test 1066 is_exact: True
    test 1067 Fsum: 7.761926451081674e-05
    test 1068 Fsum: 7.761926451081674e-05

    test 1069 fsum: 9.034802812486818
    test 1070 sum87: 16.034802812486383  FAILED, KNOWN, expected 9.034802812486818
    test 1071 pow(4): Fsum[31] pow(6663.08, -2.6248e-13)
    test 1072 pow(1): Fsum[842] pow(9.0348, 3.55182e-16)
    test 1073 pow(0): Fsum[1] pow(1.0, 0)
    test 1074 ceil: True
    test 1075 floor: True
    test 1076 divmod: Fsum[852] (0.0, 0)
    test 1077 residual: 0
    test 1078 is_exact: True
    test 1079 Fsum: 9.034802812486818
    test 1080 Fsum: 9.034802812486818

    test 1081 fsum: 0.023884920373602878
    test 1082 sum88: 0.0  FAILED, KNOWN, expected 0.023884920373602878
    test 1083 pow(4): Fsum[30] pow(3.25458e-07, 2.47453e-23)
    test 1084 pow(1): Fsum[842] pow(0.0238849, -5.34441e-19)
    test 1085 pow(0): Fsum[1] pow(1.0, 0)
    test 1086 ceil: True
    test 1087 floor: True
    test 1088 divmod: Fsum[850] (0.0, 0)
    test 1089 residual: 0
    test 1090 is_exact: True
    test 1091 Fsum: 0.023884920373602878
    test 1092 Fsum: 0.023884920373602878

    test 1093 fsum: -0.4300117014831597
    test 1094 sum89: 0.0  FAILED, KNOWN, expected -0.4300117014831597
    test 1095 pow(4): Fsum[17] pow(0.0341917, -1.53556e-18)
    test 1096 pow(1): Fsum[842] pow(-0.430012, -2.61645e-17)
    test 1097 pow(0): Fsum[1] pow(1.0, 0)
    test 1098 ceil: True
    test 1099 floor: True
    test 1100 divmod: Fsum[849] (0.0, 0)
    test 1101 residual: 0
    test 1102 is_exact: True
    test 1103 Fsum: -0.4300117014831597
    test 1104 Fsum: -0.4300117014831597

    test 1105 fsum: -0.003775232477439488
    test 1106 sum90: 20.996224767521227  FAILED, KNOWN, expected -0.003775232477439488
    test 1107 pow(4): Fsum[21] pow(2.0313e-10, 3.17348e-27)
    test 1108 pow(1): Fsum[842] pow(-0.00377523, 1.52134e-19)
    test 1109 pow(0): Fsum[1] pow(1.0, 0)
    test 1110 ceil: True
    test 1111 floor: True
    test 1112 divmod: Fsum[850] (0.0, 0)
    test 1113 residual: 0
    test 1114 is_exact: True
    test 1115 Fsum: -0.003775232477439488
    test 1116 Fsum: -0.003775232477439488

    test 1117 fsum: -1.3997065753605015e-13
    test 1118 sum91: 0.0  FAILED, KNOWN, expected -1.3997065753605015e-13
    test 1119 pow(4): Fsum[9] pow(3.83838e-52, 1.08598e-68)
    test 1120 pow(1): Fsum[842] pow(-1.39971e-13, -9.44749e-30)
    test 1121 pow(0): Fsum[1] pow(1.0, 0)
    test 1122 ceil: True
    test 1123 floor: True
    test 1124 divmod: Fsum[847] (0.0, 0)
    test 1125 residual: 0
    test 1126 is_exact: True
    test 1127 Fsum: -1.3997065753605015e-13
    test 1128 Fsum: -1.3997065753605015e-13

    test 1129 fsum: 0.02166986971707933
    test 1130 sum92: 0.0  FAILED, KNOWN, expected 0.02166986971707933
    test 1131 pow(4): Fsum[24] pow(2.20508e-07, -9.20455e-24)
    test 1132 pow(1): Fsum[842] pow(0.0216699, 8.82103e-19)
    test 1133 pow(0): Fsum[1] pow(1.0, 0)
    test 1134 ceil: True
    test 1135 floor: True
    test 1136 divmod: Fsum[848] (0.0, 0)
    test 1137 residual: 0
    test 1138 is_exact: True
    test 1139 Fsum: 0.02166986971707933
    test 1140 Fsum: 0.02166986971707933

    test 1141 fsum: -7.677738652469849e-05
    test 1142 sum93: -7.000076777387051  FAILED, KNOWN, expected -7.677738652469849e-05
    test 1143 pow(4): Fsum[28] pow(3.47483e-17, 1.9658e-33)
    test 1144 pow(1): Fsum[842] pow(-7.67774e-05, 1.24391e-21)
    test 1145 pow(0): Fsum[1] pow(1.0, 0)
    test 1146 ceil: True
    test 1147 floor: True
    test 1148 divmod: Fsum[850] (0.0, 0)
    test 1149 residual: 0
    test 1150 is_exact: True
    test 1151 Fsum: -7.677738652469849e-05
    test 1152 Fsum: -7.677738652469849e-05

    test 1153 fsum: 0.1639419664783547
    test 1154 sum94: 21.16394196647706  FAILED, KNOWN, expected 0.1639419664783547
    test 1155 pow(4): Fsum[29] pow(0.000722371, 2.48866e-20)
    test 1156 pow(1): Fsum[842] pow(0.163942, -1.94652e-18)
    test 1157 pow(0): Fsum[1] pow(1.0, 0)
    test 1158 ceil: True
    test 1159 floor: True
    test 1160 divmod: Fsum[848] (0.0, 0)
    test 1161 residual: 0
    test 1162 is_exact: True
    test 1163 Fsum: 0.1639419664783547
    test 1164 Fsum: 0.1639419664783547

    test 1165 fsum: 0.13336188524638318
    test 1166 sum95: 0.0  FAILED, KNOWN, expected 0.13336188524638318
    test 1167 pow(4): Fsum[16] pow(0.00031632, -8.66061e-21)
    test 1168 pow(1): Fsum[842] pow(0.133362, -1.33717e-17)
    test 1169 pow(0): Fsum[1] pow(1.0, 0)
    test 1170 ceil: True
    test 1171 floor: True
    test 1172 divmod: Fsum[847] (0.0, 0)
    test 1173 residual: 0
    test 1174 is_exact: True
    test 1175 Fsum: 0.13336188524638318
    test 1176 Fsum: 0.13336188524638318

    test 1177 fsum: 4.2525409357656675e-14
    test 1178 sum96: 0.0  FAILED, KNOWN, expected 4.2525409357656675e-14
    test 1179 pow(4): Fsum[9] pow(3.27035e-54, -9.30962e-71)
    test 1180 pow(1): Fsum[842] pow(4.25254e-14, 2.38542e-30)
    test 1181 pow(0): Fsum[1] pow(1.0, 0)
    test 1182 ceil: True
    test 1183 floor: True
    test 1184 divmod: Fsum[845] (0.0, 0)
    test 1185 residual: 0
    test 1186 is_exact: True
    test 1187 Fsum: 4.2525409357656675e-14
    test 1188 Fsum: 4.2525409357656675e-14

    test 1189 fsum: 6.615155322712624e-12
    test 1190 sum97: 0.0  FAILED, KNOWN, expected 6.615155322712624e-12
    test 1191 pow(4): Fsum[7] pow(1.91496e-45, -1.35413e-62)
    test 1192 pow(1): Fsum[842] pow(6.61516e-12, 2.80271e-28)
    test 1193 pow(0): Fsum[1] pow(1.0, 0)
    test 1194 ceil: True
    test 1195 floor: True
    test 1196 divmod: Fsum[847] (0.0, 0)
    test 1197 residual: 0
    test 1198 is_exact: True
    test 1199 Fsum: 6.615155322712624e-12
    test 1200 Fsum: 6.615155322712624e-12

    test 1201 fsum: -0.0001615867984444804
    test 1202 sum98: -14.0001615867983  FAILED, KNOWN, expected -0.0001615867984444804
    test 1203 pow(4): Fsum[25] pow(6.81747e-16, 3.13289e-32)
    test 1204 pow(1): Fsum[842] pow(-0.000161587, 4.38508e-21)
    test 1205 pow(0): Fsum[1] pow(1.0, 0)
    test 1206 ceil: True
    test 1207 floor: True
    test 1208 divmod: Fsum[852] (0.0, 0)
    test 1209 residual: 0
    test 1210 is_exact: True
    test 1211 Fsum: -0.0001615867984444804
    test 1212 Fsum: -0.0001615867984444804

    test 1213 fsum: 4.506166428464988
    test 1214 sum99: 4.50616642846456  FAILED, KNOWN, expected 4.506166428464988
    test 1215 pow(4): Fsum[29] pow(412.315, -1.75222e-14)
    test 1216 pow(1): Fsum[842] pow(4.50617, -2.23684e-16)
    test 1217 pow(0): Fsum[1] pow(1.0, 0)
    test 1218 ceil: True
    test 1219 floor: True
    test 1220 divmod: Fsum[850] (0.0, 0)
    test 1221 residual: 0
    test 1222 is_exact: True
    test 1223 Fsum: 4.506166428464988
    test 1224 Fsum: 4.506166428464988

    test 1225 fsum: 1.6725420736844085e-06
    test 1226 sum100: 0.0  FAILED, KNOWN, expected 1.6725420736844085e-06
    test 1227 pow(4): Fsum[16] pow(7.82543e-24, -7.00365e-40)
    test 1228 pow(1): Fsum[842] pow(1.67254e-06, 6.02181e-23)
    test 1229 pow(0): Fsum[1] pow(1.0, 0)
    test 1230 ceil: True
    test 1231 floor: True
    test 1232 divmod: Fsum[848] (0.0, 0)
    test 1233 residual: 0
    test 1234 is_exact: True
    test 1235 Fsum: 1.6725420736844085e-06
    test 1236 Fsum: 1.6725420736844085e-06
    test 1237 fmul: 0.02797397

    test 1238 len1: 4
    test 1239 FSum+: 4.0
    test 1240 FSum-: 2.0
    test 1241 FSum-: 0.0
    test 1242 FSum*: 4.0
    test 1243 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1244 ._fint2: (4, 0)
    test 1245 ._fprs: 4.0
    test 1246 ._fprs2: (4.0, 0)
    test 1247 ._n: 5
    test 1248 ._ps: [4.0]
    test 1249 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1250 ._fint2: (4, 0)
    test 1251 ._fprs: 4.0
    test 1252 ._fprs2: (4.0, 0)
    test 1253 ._n: 5
    test 1254 ._ps: [4.0]
    test 1255 len2: 8
    test 1256 FSum+: 8.0
    test 1257 FSum-: 4.0
    test 1258 FSum-: 0.0
    test 1259 FSum*: 8.0
    test 1260 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1261 ._fint2: (8, 0)
    test 1262 ._fprs: 8.0
    test 1263 ._fprs2: (8.0, 0)
    test 1264 ._n: 9
    test 1265 ._ps: [8.0]
    test 1266 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1267 ._fint2: (8, 0)
    test 1268 ._fprs: 8.0
    test 1269 ._fprs2: (8.0, 0)
    test 1270 ._n: 9
    test 1271 ._ps: [8.0]
    test 1272 len3: 16
    test 1273 FSum+: 16.0
    test 1274 FSum-: 8.0
    test 1275 FSum-: 0.0
    test 1276 FSum*: 16.0
    test 1277 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1278 ._fint2: (16, 0)
    test 1279 ._fprs: 16.0
    test 1280 ._fprs2: (16.0, 0)
    test 1281 ._n: 17
    test 1282 ._ps: [16.0]
    test 1283 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1284 ._fint2: (16, 0)
    test 1285 ._fprs: 16.0
    test 1286 ._fprs2: (16.0, 0)
    test 1287 ._n: 17
    test 1288 ._ps: [16.0]
    test 1289 len4: 32
    test 1290 FSum+: 32.0
    test 1291 FSum-: 16.0
    test 1292 FSum-: 0.0
    test 1293 FSum*: 32.0
    test 1294 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1295 ._fint2: (32, 0)
    test 1296 ._fprs: 32.0
    test 1297 ._fprs2: (32.0, 0)
    test 1298 ._n: 33
    test 1299 ._ps: [32.0]
    test 1300 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1301 ._fint2: (32, 0)
    test 1302 ._fprs: 32.0
    test 1303 ._fprs2: (32.0, 0)
    test 1304 ._n: 33
    test 1305 ._ps: [32.0]
    test 1306 len5: 64
    test 1307 FSum+: 64.0
    test 1308 FSum-: 32.0
    test 1309 FSum-: 0.0
    test 1310 FSum*: 64.0
    test 1311 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1312 ._fint2: (64, 0)
    test 1313 ._fprs: 64.0
    test 1314 ._fprs2: (64.0, 0)
    test 1315 ._n: 65
    test 1316 ._ps: [64.0]
    test 1317 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1318 ._fint2: (64, 0)
    test 1319 ._fprs: 64.0
    test 1320 ._fprs2: (64.0, 0)
    test 1321 ._n: 65
    test 1322 ._ps: [64.0]
    test 1323 len6: 128
    test 1324 FSum+: 128.0
    test 1325 FSum-: 64.0
    test 1326 FSum-: 0.0
    test 1327 FSum*: 128.0
    test 1328 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1329 ._fint2: (128, 0)
    test 1330 ._fprs: 128.0
    test 1331 ._fprs2: (128.0, 0)
    test 1332 ._n: 129
    test 1333 ._ps: [128.0]
    test 1334 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1335 ._fint2: (128, 0)
    test 1336 ._fprs: 128.0
    test 1337 ._fprs2: (128.0, 0)
    test 1338 ._n: 129
    test 1339 ._ps: [128.0]
    test 1340 len7: 256
    test 1341 FSum+: 256.0
    test 1342 FSum-: 128.0
    test 1343 FSum-: 0.0
    test 1344 FSum*: 256.0
    test 1345 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1346 ._fint2: (256, 0)
    test 1347 ._fprs: 256.0
    test 1348 ._fprs2: (256.0, 0)
    test 1349 ._n: 257
    test 1350 ._ps: [256.0]
    test 1351 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1352 ._fint2: (256, 0)
    test 1353 ._fprs: 256.0
    test 1354 ._fprs2: (256.0, 0)
    test 1355 ._n: 257
    test 1356 ._ps: [256.0]
    test 1357 len8: 512
    test 1358 FSum+: 512.0
    test 1359 FSum-: 256.0
    test 1360 FSum-: 0.0
    test 1361 FSum*: 512.0
    test 1362 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1363 ._fint2: (512, 0)
    test 1364 ._fprs: 512.0
    test 1365 ._fprs2: (512.0, 0)
    test 1366 ._n: 513
    test 1367 ._ps: [512.0]
    test 1368 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1369 ._fint2: (512, 0)
    test 1370 ._fprs: 512.0
    test 1371 ._fprs2: (512.0, 0)
    test 1372 ._n: 513
    test 1373 ._ps: [512.0]
    test 1374 len: 513
    test 1375 partials: (512.0,)

    test 1376 FSum0: 0.0
    test 1377 FSum0: 0.0
    test 1378 FSum0: 0.0
    test 1379 FSum0: 0.0
    test 1380 FSum0: 0.0
    test 1381 sizeof: 413
    test 1382 FSum0: 0.0
    test 1383 Fsum#: 514
    test 1384 Fsum#: 1
    test 1385 FSum.: Fsum[514] (0.0, 0)
    test 1386 FsumI: 0.0
    test 1387 FsumR: 0.0
    test 1388 radd: 514.0
    test 1389 rdiv: 3.91e-03
    test 1390 rmul: 1024.0
    test 1391 rpow: 1.0
    test 1392 rsub: -510.0
    test 1393 _2sum: OverflowError('_2sum(1.0e+308, inf): not finite (inf)')
    test 1394 F("nan"): TypeError('0.0 + nan: invalid')
    test 1395 F(None): TypeError('0.0 + None: invalid')

    test 1396 ints: 1
    test 1397 ints: 1
    test 1398 fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1399 fsum_: -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1400 Fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1401 sum  : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1402 F * 2: 4.0000
    test 1403 F / 2: 2.0000
    test 1404 F / F: True
    test 1405 F / F: 1.0
    test 1406 F / F: 2.0
    test 1407 abs  : Fsum[4] __abs__(2.0, 0)  FAILED, KNOWN, expected Fsum[4] (2.0, 0)
    test 1408 int  : 2
    test 1409 eq F: True
    test 1410 ge F: True
    test 1411 gt F: False
    test 1412 le F: True
    test 1413 lt F: False
    test 1414 ne F: False
    test 1415 if F: True
    test 1416 gt 0: True
    test 1417 lt 0: False
    test 1418 eq 0: False
    test 1419 lt 0: True
    test 1420 gt 0: True
    test 1421 gt 0: False
    test 1422 signOf: 1
    test 1423 signOf: -1
    test 1424 ceil : 3
    test 1425 floor: 2

    test 1426 divmod : (2, <Fsum[2] __divmod__(0.0, 0) at 0x106720210>)
    test 1427 divmod : (2, <Fsum[2] __divmod__(0.0, 0) at 0x1067202f0>)
    test 1428 rdivmod : (0, <Fsum[1] __rdivmod__(2, 0) at 0x106720210>)
    test 1429 divmod : (-2, <Fsum[2] __divmod__(1.0, 0) at 0x106720360>)
    test 1430 imod: Fsum[2] __imod__(0.0, 0)
    test 1431 mod : Fsum[2] __mod__(0.0, 0)
    test 1432 rmod: Fsum[1] __rmod__(2, 0)
    test 1433 neg : Fsum[1] __neg__(-2, 0)
    test 1434 pos : Fsum[4] (2.0, 0)
    test 1435 is_int: True
    test 1436 float: 9e-102
    test 1437 is_int: False
    test 1438 round1: 0.0
    test 1439 fset_: Fsum[4] (9.0e-102, 5.9483e-118)

    test 1440 F //: Fsum[1] __floordiv__(-1, 0)
    test 1441 // F: Fsum[1] __rfloordiv__(-2, 0)
    test 1442 F //=: Fsum[1] m(-2, 0)
    test 1443 F / 0: ZeroDivisionError('Fsum[2] __truediv__(9.0e-102, 5.9483e-118) / 0: float division by zero')
    test 1444 pow(F, +): Fsum[1] __pow__(6.36662e-213, 0)
    test 1445 pow(F, -): Fsum[1] __pow__(1.11111e+101, 0)
    test 1446 pow(-F, F): ValueError('-2 ** 9e-102: complex (1+2.8274333882308138e-101j) from 2-arg pow(-2, 9.0e-102)')
    test 1447 pow(F, F): Fsum[1] __pow__(1.0, 0)
    test 1448 pow(F, f, i): TypeError('Fsum[2] __pow__(9.0e-102, 5.9483e-118) ** 2.1: mod (2), pow() 3rd argument not allowed unless all arguments are integers')
    test 1449 pow(F, F, i): TypeError('-2 ** Fsum[1] (2.1, 0): mod (2), pow() 3rd argument not allowed unless all arguments are integers')
    test 1450 pow(F, i, None): Fsum[1] __pow__(4, 0)
    test 1451 Z**-2: ZeroDivisionError('0.0 ** -2: 0.0 cannot be raised to a negative power')
    test 1452 pow(0): 1.000
    test 1453 pow(1): -3.000
    test 1454 pow(2): 9.000
    test 1455 pow(21): -10460353203.000
    test 1456 pow(-5): -0.004
    test 1457 **= 2: 9.000
    test 1458 F0**0: Fsum[1] __pow__(1, 0)
    test 1459 F0**0.: Fsum[1] __pow__(1.0, 0)
    test 1460 0**F0: Fsum[1] __rpow__(1.0, 0)
    test 1461 0.**F0: Fsum[1] __rpow__(1.0, 0)
    test 1462 F0**0: Fsum[1] pow(1, 0)
    test 1463 F0**2: Fsum[1] pow(0.0, 0)
    test 1464 F0**0.: Fsum[1] pow(1.0, 0)
    test 1465 F0**3.: Fsum[1] pow(0.0, 0)
    test 1466 F0**0.: Fsum[1] pow(1, 0)
    test 1467 2**F0: Fsum[1] __rpow__(1.0, 0)
    test 1468 2.**F0: Fsum[1] __rpow__(1.0, 0)
    test 1469 F2**0: Fsum[1] __pow__(1, 0)
    test 1470 F2.**0: Fsum[1] __pow__(1, 0)
    test 1471 F2**F2: Fsum[1] __pow__(4, 0)
    test 1472 F2**F2: Fsum[1] __rpow__(4, 0)
    test 1473 F**2: 3125.000
    test 1474 F**-1: 0.200
    test 1475 F**-2: 0.040
    test 1476 F**-2.5: 0.018
    test 1477 F** 2.5: 55.902
    test 1478 pow(2): 25.000
    test 1479 pow(2.5): 55.902
    test 1480 pow(F): 3125.000
    test 1481 3pow(2, None): Fsum[1] pow(25, 0)
    test 1482 3pow(2.5, None): Fsum[1] pow(55.902, 0)
    test 1483 3pow(2, 20): Fsum[1] pow(5, 0)

    test 1484 fsum(): 5.0
    test 1485 fsum(): True
    test 1486 fsum2(): (5.0, 0)
    test 1487 fsum2(): True
    test 1488 fsum2(): Fsum2Tuple(fsum=5.0, residual=0)
    test 1489 Fsum2Tuple: ('fsum', 5.0, <class 'pygeodesy.unitsBase.Float'>)
    test 1490 Fsum2Tuple: ('residual', 0, <class 'pygeodesy.unitsBase.Int'>)
    test 1491 fmul(x): 25.0
    test 1492 fmul(F): 62.5
    test 1493 fadd(F): 65.0
    test 1494 fsub(F): 62.5
    test 1495 Fsum(F): 125.0

    test 1496 ratio: (-27021597764141911, 9007199254740992)
    test 1497 ratio: Fsum[1] (-3, 0)  FAILED, KNOWN, expected Fsum[4] (-3, 8.80732e-17)
    test 1498 int_float: -3.000
    test 1499 fint: Fsum[1] fint(-2, 0)
    test 1500 fint2: (-2, -1)
    test 1501 f2mul_: Fsum[8] f2mul_(12.0, -3.52293e-16)  FAILED, KNOWN, expected (12.0, ...
    test 1502 f2mul_: Fsum[1] f2mul_(-inf, 0)  FAILED, KNOWN, expected NINF
    test 1503 f2mul_: Fsum[1] f2mul_(nan, 0)  FAILED, KNOWN, expected NAN
    test 1504 += NAN: Fsum[5] (nan, 0.0)  FAILED, KNOWN, expected nan
    test 1505 -= NAN: Fsum[5] (nan, 0.0)  FAILED, KNOWN, expected nan
    test 1506 pow3: Fsum[1] __pow__(3, 0)

    test 1507 is_math_fsum: True

    test 1508 RESIDUAL: 0.0
    test 1509 RESIDUAL: 0.0
    test 1510 RESIDUAL: 1e-32
    test 1511 RESIDUAL: 9.0
    test 1512 RESIDUAL: sorted

    test 1513 ResidualError: 1 / Fsum[2] sorted(1.0e+17, 1.0): non-zero residual (1.0), ratio (1.0e-17) exceeds RESIDUAL (-1e-18) threshold

    test 1514 recursive: 8.0
    test 1515 recursive: 16.0

    test 1516 +=F2T: 17.0
    test 1517 -=F2T: 16.0
    test 1518 *=F2T: 16.000000000000004
    test 1519 /=F2T: 16.0
    test 1520 **F2T: 16.0
    test 1521 %=F2T: 16.0

    test 1522 abs(T): Fsum[2] __abs__(1.0, 0)
    test 1523 bool(T): True
    test 1524 float(T): 1.0000000000000002
    test 1525 T.Fsum_: Fsum[2] (2.0, 0)
    test 1526 int(T): 1
    test 1527 -T: Fsum[1] __neg__(-1, 0)
    test 1528 +T: Fsum[2] (1.0, 0)
    test 1529 as_i_: (4503599627370497, 4503599627370496)
    test 1530 is_x?: True
    test 1531 is_i?: False

    test 1532 F==T: False
    test 1533 F>=T: True
    test 1534 F> T: True
    test 1535 F<=T: False
    test 1536 F< T: False
    test 1537 F!=T: True

    test 1538 T._fint2: (1, 2.220446049250313e-16)
    test 1539 T._fprs2: (1.0, 0)
    test 1540 T._n: 2
    test 1541 T._ps: [1.0000000000000002]
    test 1542 T._ps_neg: [-1.0000000000000002]
    test 1543 T.signOf: 1

    test 1544 f2product: (True, None)
    test 1545 nonfinite*: (True, None)
    test 1546 Nones: (None, None)

    121 of 1546 testFsums.py tests (7.8%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 2.288 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGars.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.degDMS from .dms by testGars.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGars.py line 11
# lazily imported pygeodesy.gars by testGars.py line 11
# lazily imported pygeodesy.Garef from .gars by testGars.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testGars.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGars.py line 56

    testing testGars.py 23.03.27 (module pygeodesy.gars 24.08.13) isLazy=3
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'  FAILED, KNOWN, expected Garef('381NH45')
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    3 of 26 testGars.py tests (11.5%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.089 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGeodesici.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.euclid from .fmath by testGeodesici.py line 11
# lazily imported pygeodesy.geodesici by testGeodesici.py line 11
# lazily imported pygeodesy.Intersectool from .geodesici by testGeodesici.py line 11
# lazily imported pygeodesy.Intersector from .geodesici by testGeodesici.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testGeodesici.py line 11
# lazily imported pygeodesy.GeodesicExact from .geodesicx by testGeodesici.py line 135

    testing testGeodesici.py 24.07.28 (module pygeodesy.geodesici 24.10.22) isLazy=3

    testGeodesicExact(pygeodesy.geodesici, 24.10.22)
# lazily imported pygeodesy.geodsolve by ellipsoids.py line 1037
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1039
# lazily imported pygeodesy.elliptic by gxline.py line 284
    test 1 Intersector: name='', geodesic=GeodesicExact(name='', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)

    test 2 Closest.1.sA: 4.2253e+06
    test 3 Closest.1.sB: 2.70933e+06
    test 4 Closest.1.c: 0
    test 5 Closest.1.sX0: 6.93463e+06

    test 6 Closest5.1.A: {a1X: 38.075573, azi1: 45.0, aziX: 51.790249, lat1: 0.0, latX: 25.92918, lon1: 0.0, lonX: 28.89426, s1X: 4225301.108897}
    test 7 Closest5.1.B: {a1X: 24.392077, azi1: 135.0, aziX: 146.182975, lat1: 45.0, latX: 25.92918, lon1: 10.0, lonX: 28.89426, s1X: 2709328.885611}
    test 8 Closest5.1.sAB: 1.45654e-09
    test 9 Closest5.1.aAB: 1.31199e-14
    test 10 Closest5.1.c: 0

    test 11 Closest.2.sA: 6.05805e+06
    test 12 Closest.2.sB: -3.31125e+06
    test 13 Closest.2.c: 0
    test 14 Closest.2.sX0: 9.3693e+06

    test 15 Closest5.2.A: {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: 0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}
    test 16 Closest5.2.B: {a1X: -29.845558, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.745492, s1X: -3311252.995823}
    test 17 Closest5.2.sAB: 3.95486e-10
    test 18 Closest5.2.aAB: 3.56467e-15
    test 19 Closest5.2.c: 0

    test 20 All[0].sA: -494582
    test 21 All[0].sB: 1.40522e+07
    test 22 All[0].c: 0
    test 23 All[0].sX0: 1.45468e+07
    test 24 All[0].iteration: 4

    test 25 All[1].sA: 1.95291e+07
    test 26 All[1].sB: -5.93234e+06
    test 27 All[1].c: 0
    test 28 All[1].sX0: 2.54615e+07
    test 29 All[1].iteration: 4

    test 30 All[2].sA: -494582
    test 31 All[2].sB: -2.59556e+07
    test 32 All[2].c: 0
    test 33 All[2].sX0: 2.64502e+07
    test 34 All[2].iteration: 4

    test 35 All[3].sA: -2.05181e+07
    test 36 All[3].sB: -5.97086e+06
    test 37 All[3].c: 0
    test 38 All[3].sX0: 2.64889e+07
    test 39 All[3].iteration: 4

    test 40 All5[0].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}
    test 41 All5[0].B: {a1X: 126.399265, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: 14052229.965229}
    test 42 All5[0].sAB: 2.50932e-09
    test 43 All5[0].aAB: 2.25682e-14
    test 44 All5[0].c: 0
    test 45 All5[0].iteration: 4

    test 46 All5[1].A: {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: -180.0, s1X: 19529110.042937}
    test 47 All5[1].B: {a1X: -53.426639, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.518675, lon1: 180.0, lonX: 180.0, s1X: -5932344.259165}
    test 48 All5[1].sAB: 6.22315e-09
    test 49 All5[1].aAB: 5.59701e-14
    test 50 All5[1].c: 0
    test 51 All5[1].iteration: 4

    test 52 All5[2].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: -0.0, s1X: -494582.492241}
    test 53 All5[2].B: {a1X: -233.600735, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: -25955632.952022}
    test 54 All5[2].sAB: 4.73754e-09
    test 55 All5[2].aAB: 4.26083e-14
    test 56 All5[2].c: 0
    test 57 All5[2].iteration: 4

    test 58 All5[3].A: {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: -180.0, s1X: -20518081.166643}
    test 59 All5[3].B: {a1X: -53.773048, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.864737, lon1: 180.0, lonX: 180.0, s1X: -5970860.779079}
    test 60 All5[3].sAB: 2.57348e-09
    test 61 All5[3].aAB: 2.3145e-14
    test 62 All5[3].c: 0
    test 63 All5[3].iteration: 4

    test 64 Middle.sA: 782555
    test 65 Middle.sB: 5.53684e+06
    test 66 Middle.c: 0
    test 67 Middle.sX0: 0

    test 68 Middle5.A: {a12: 14.106434, a1M: 7.053396, azi1: 44.75191, azi2: 45.629037, aziM: 44.969535, lat1: 0.0, lat2: 10.0, latM: 5.019509, lon1: 0.0, lon2: 10.0, lonM: 4.961883, s12: 1565109.099218, s1M: 782554.549609}
    test 69 Middle5.B: {a12: 99.810444, a1M: 49.869061, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.036282, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11073670.322999, s1M: 5536835.161499}
    test 70 Middle5.sMM: 1.13857e+06
    test 71 Middle5.aMM: 10.2623
    test 72 Middle5.c: 0

    test 73 Segment.sA: -631414
    test 74 Segment.sB: 5.98889e+06
    test 75 Segment.c: 0
    test 76 Segment.sX0: 1.86602e+06
    test 77 Segment.kA: -1
    test 78 Segment.kB: 0
    test 79 Segment.k: -3

    test 80 Segment5.A: {a1X: -5.691141, azi1: 44.75191, azi2: 45.629037, aziX: 44.893464, k2: -1, lat1: 0.0, lat2: 10.0, latX: -4.051871, lon1: 0.0, lon2: 10.0, lonX: -4.0, s1X: -631414.26877}
    test 81 Segment5.B: {a1X: 53.943553, azi1: 180.0, azi2: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, lat2: -50.0, latX: -4.051871, lon1: -4.0, lon2: -4.0, lonX: -4.0, s1X: 5988887.278435}
    test 82 Segment5.sAB: 9.86261e-11
    test 83 Segment5.aAB: 8.88939e-16
    test 84 Segment5.c: 0

    test 85 intersect7s[0].A: 04.051871°S, 004.0°W
    test 86 intersect7s[0].B: 04.051871°S, 004.0°W
    test 87 intersect7s[0].sAB: 1.41495e-09
    test 88 intersect7s[0].aAB: 1.27532e-14
    test 89 intersect7s[0].c: 0
    test 90 intersect7s[0].kA: 0
    test 91 intersect7s[0].kB: 0
    test 92 intersect7s[0].iteration: None

    test 93 intersect7s[1].A: 03.623464°N, 176.0°E
    test 94 intersect7s[1].B: 03.623464°N, 176.0°E
    test 95 intersect7s[1].sAB: 1.67723e-09
    test 96 intersect7s[1].aAB: 1.51076e-14
    test 97 intersect7s[1].c: 0
    test 98 intersect7s[1].kA: 0
    test 99 intersect7s[1].kB: 0
    test 100 intersect7s[1].iteration: None

    test 101 intersect7s[2].A: 04.051871°S, 004.0°W
    test 102 intersect7s[2].B: 04.051871°S, 004.0°W
    test 103 intersect7s[2].sAB: 5.83925e-10
    test 104 intersect7s[2].aAB: 5.26305e-15
    test 105 intersect7s[2].c: 0
    test 106 intersect7s[2].kA: 0
    test 107 intersect7s[2].kB: 0
    test 108 intersect7s[2].iteration: None

    test 109 intersect7s[3].A: 04.4796°N, 176.0°E
    test 110 intersect7s[3].B: 04.4796°N, 176.0°E
    test 111 intersect7s[3].sAB: 3.49267e-09
    test 112 intersect7s[3].aAB: 3.14801e-14
    test 113 intersect7s[3].c: 0
    test 114 intersect7s[3].kA: 0
    test 115 intersect7s[3].kB: 0
    test 116 intersect7s[3].iteration: None

    test 117 Sphere.Closest.sA: 6.07719e+06
    test 118 Sphere.Closest.sB: -3.31802e+06
    test 119 Sphere.Closest.c: 0
    test 120 Sphere.Closest.sX0: 9.39521e+06

    test 121 Sphere.Closest5.A: {a1X: 54.653489, azi1: -147.7, aziX: -159.911264, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.839663, s1X: 6077190.710199}
    test 122 Sphere.Closest5.B: {a1X: -29.839663, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.839663, s1X: -3318019.115902}
    test 123 Sphere.Closest5.sAB: 2.77226e-09
    test 124 Sphere.Closest5.aAB: 2.49315e-14
    test 125 Sphere.Closest5.c: 0

    test 126 _Xdict2: 124

    testGeodesic(pygeodesy.geodesici, 24.10.22)
    test 127 Intersector: name='', geodesic=<pygeodesy.geodesicw._gWrapped.Geodesic.<locals>.Geodesic object at 0x102481fd0>

    test 128 Closest.1.sA: 4.2253e+06
    test 129 Closest.1.sB: 2.70933e+06
    test 130 Closest.1.c: 0
    test 131 Closest.1.sX0: 6.93463e+06

    test 132 Closest5.1.A: {a1X: 38.075573, azi1: 45.0, aziX: 51.790249, lat1: 0.0, latX: 25.92918, lon1: 0.0, lonX: 28.89426, s1X: 4225301.108897}
    test 133 Closest5.1.B: {a1X: 24.392077, azi1: 135.0, aziX: 146.182975, lat1: 45.0, latX: 25.92918, lon1: 10.0, lonX: 28.89426, s1X: 2709328.885611}
    test 134 Closest5.1.sAB: 7.11805e-10  FAILED, KNOWN (7.44733e-10), expected 1.45654e-09
    test 135 Closest5.1.aAB: 6.41166e-15  FAILED, KNOWN (6.70826e-15), expected 1.31199e-14
    test 136 Closest5.1.c: 0

    test 137 Closest.2.sA: 6.05805e+06
    test 138 Closest.2.sB: -3.31125e+06
    test 139 Closest.2.c: 0
    test 140 Closest.2.sX0: 9.3693e+06

    test 141 Closest5.2.A: {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}  FAILED, KNOWN, expected {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: 0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}
    test 142 Closest5.2.B: {a1X: -29.845558, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.745492, s1X: -3311252.995823}
    test 143 Closest5.2.sAB: 1.27e-09  FAILED, KNOWN (8.7451e-10), expected 3.95486e-10
    test 144 Closest5.2.aAB: 1.14469e-14  FAILED, KNOWN (7.88228e-15), expected 3.56467e-15
    test 145 Closest5.2.c: 0

    test 146 All[0].sA: -494582
    test 147 All[0].sB: 1.40522e+07
    test 148 All[0].c: 0
    test 149 All[0].sX0: 1.45468e+07
    test 150 All[0].iteration: 4

    test 151 All[1].sA: 1.95291e+07
    test 152 All[1].sB: -5.93234e+06
    test 153 All[1].c: 0
    test 154 All[1].sX0: 2.54615e+07
    test 155 All[1].iteration: 4

    test 156 All[2].sA: -494582
    test 157 All[2].sB: -2.59556e+07
    test 158 All[2].c: 0
    test 159 All[2].sX0: 2.64502e+07
    test 160 All[2].iteration: 4

    test 161 All[3].sA: -2.05181e+07
    test 162 All[3].sB: -5.97086e+06
    test 163 All[3].c: 0
    test 164 All[3].sX0: 2.64889e+07
    test 165 All[3].iteration: 4

    test 166 All5[0].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}
    test 167 All5[0].B: {a1X: 126.399265, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: 14052229.965229}
    test 168 All5[0].sAB: 1.44466e-09  FAILED, KNOWN (1.06466e-09), expected 2.50932e-09
    test 169 All5[0].aAB: 1.29929e-14  FAILED, KNOWN (9.57529e-15), expected 2.25682e-14
    test 170 All5[0].c: 0
    test 171 All5[0].iteration: 4

    test 172 All5[1].A: {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: 180.0, s1X: 19529110.042937}  FAILED, KNOWN, expected {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: -180.0, s1X: 19529110.042937}
    test 173 All5[1].A.lonX: 179.99999999999994  FAILED, KNOWN (2), expected -179.99999999999994
    test 174 All5[1].B: {a1X: -53.426639, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.518675, lon1: 180.0, lonX: 180.0, s1X: -5932344.259165}
    test 175 All5[1].sAB: 4.71379e-09  FAILED, KNOWN (1.50936e-09), expected 6.22315e-09
    test 176 All5[1].aAB: 4.23951e-14  FAILED, KNOWN (1.3575e-14), expected 5.59701e-14
    test 177 All5[1].c: 0
    test 178 All5[1].iteration: 4

    test 179 All5[2].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}  FAILED, KNOWN, expected {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: -0.0, s1X: -494582.492241}
    test 180 All5[2].B: {a1X: -233.600735, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: -25955632.952022}
    test 181 All5[2].sAB: 1.8823e-09  FAILED, KNOWN (2.85524e-09), expected 4.73754e-09
    test 182 All5[2].aAB: 1.6929e-14  FAILED, KNOWN (2.56794e-14), expected 4.26083e-14
    test 183 All5[2].c: 0
    test 184 All5[2].iteration: 4

    test 185 All5[3].A: {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: 180.0, s1X: -20518081.166643}  FAILED, KNOWN, expected {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: -180.0, s1X: -20518081.166643}
    test 186 All5[3].A.lonX: 179.99999999999994  FAILED, KNOWN (2), expected -179.99999999999997
    test 187 All5[3].B: {a1X: -53.773048, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.864737, lon1: 180.0, lonX: 180.0, s1X: -5970860.779079}
    test 188 All5[3].sAB: 3.99823e-09  FAILED, KNOWN (1.42475e-09), expected 2.57348e-09
    test 189 All5[3].aAB: 3.59587e-14  FAILED, KNOWN (1.28137e-14), expected 2.3145e-14
    test 190 All5[3].c: 0
    test 191 All5[3].iteration: 4

    test 192 Middle.sA: 782555
    test 193 Middle.sB: 5.54085e+06  FAILED, KNOWN (0.000724055), expected 5.53684e+06
    test 194 Middle.c: 0
    test 195 Middle.sX0: 0

    test 196 Middle5.A: {a12: 14.106434, a1M: 7.053396, azi1: 44.75191, azi2: 45.629037, aziM: 44.969535, lat1: 0.0, lat2: 10.0, latM: 5.019509, lon1: 0.0, lon2: 10.0, lonM: 4.961883, s12: 1565109.099218, s1M: 782554.549609}
    test 197 Middle5.B: {a12: 99.810444, a1M: 49.905222, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.0, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11081694.083368, s1M: 5540847.041684}  FAILED, KNOWN, expected {a12: 99.810444, a1M: 49.869061, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.036282, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11073670.322999, s1M: 5536835.161499}
    test 198 Middle5.B.latM: 0.0  FAILED, KNOWN (0.0362822), expected 0.03628221979726735
    test 199 Middle5.B.s1M: 5540847.04168415  FAILED, KNOWN (0.000724055), expected 5536835.161499483
    test 200 Middle5.B.a1M: 49.905221888853184  FAILED, KNOWN (0.000724585), expected 49.86906131643703
    test 201 Middle5.B.s12: 11081694.0833683  FAILED, KNOWN (0.000724055), expected 11073670.322998965
    test 202 Middle5.sMM: 1.14053e+06  FAILED, KNOWN (0.0017142), expected 1.13857e+06
    test 203 Middle5.aMM: 10.2799  FAILED, KNOWN (0.00171426), expected 10.2623
    test 204 Middle5.c: 0

    test 205 Segment.sA: -631414
    test 206 Segment.sB: 5.98889e+06
    test 207 Segment.c: 0
    test 208 Segment.sX0: 1.86201e+06  FAILED, KNOWN (0.00214997), expected 1.86602e+06
    test 209 Segment.kA: -1
    test 210 Segment.kB: 0
    test 211 Segment.k: -3

    test 212 Segment5.A: {a1X: -5.691141, azi1: 44.75191, aziX: 44.893464, k2: -1, lat1: 0.0, latX: -4.051871, lon1: 0.0, lonX: -4.0, s1X: -631414.26877}  FAILED, KNOWN, expected {a1X: -5.691141, azi1: 44.75191, azi2: 45.629037, aziX: 44.893464, k2: -1, lat1: 0.0, lat2: 10.0, latX: -4.051871, lon1: 0.0, lon2: 10.0, lonX: -4.0, s1X: -631414.26877}
    test 213 Segment5.B: {a1X: 53.943553, azi1: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, latX: -4.051871, lon1: -4.0, lonX: -4.0, s1X: 5988887.278435}  FAILED, KNOWN, expected {a1X: 53.943553, azi1: 180.0, azi2: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, lat2: -50.0, latX: -4.051871, lon1: -4.0, lon2: -4.0, lonX: -4.0, s1X: 5988887.278435}
    test 214 Segment5.sAB: 5.496e-10  FAILED, KNOWN (4.50974e-10), expected 9.86261e-11
    test 215 Segment5.aAB: 4.95367e-15  FAILED, KNOWN (4.06473e-15), expected 8.88939e-16
    test 216 Segment5.c: 0

    test 217 intersect7s[0].A: 04.051871°S, 004.0°W
    test 218 intersect7s[0].B: 04.051871°S, 004.0°W
    test 219 intersect7s[0].sAB: 2.64649e-10  FAILED, KNOWN (1.1503e-09), expected 1.41495e-09
    test 220 intersect7s[0].aAB: 2.38534e-15  FAILED, KNOWN (1.03679e-14), expected 1.27532e-14
    test 221 intersect7s[0].c: 0
    test 222 intersect7s[0].kA: 0
    test 223 intersect7s[0].kB: 0
    test 224 intersect7s[0].iteration: None

    test 225 intersect7s[1].A: 03.623464°N, 176.0°E
    test 226 intersect7s[1].B: 03.623464°N, 176.0°E
    test 227 intersect7s[1].sAB: 1.67611e-09  FAILED, KNOWN (1.12026e-12), expected 1.67723e-09
    test 228 intersect7s[1].aAB: 1.51076e-14
    test 229 intersect7s[1].c: 0
    test 230 intersect7s[1].kA: 0
    test 231 intersect7s[1].kB: 0
    test 232 intersect7s[1].iteration: None

    test 233 intersect7s[2].A: 04.051871°S, 004.0°W
    test 234 intersect7s[2].B: 04.051871°S, 004.0°W
    test 235 intersect7s[2].sAB: 5.83925e-10
    test 236 intersect7s[2].aAB: 5.26305e-15
    test 237 intersect7s[2].c: 0
    test 238 intersect7s[2].kA: 0
    test 239 intersect7s[2].kB: 0
    test 240 intersect7s[2].iteration: None

    test 241 intersect7s[3].A: 04.4796°N, 176.0°E
    test 242 intersect7s[3].B: 04.4796°N, 176.0°E
    test 243 intersect7s[3].sAB: 3.49267e-09
    test 244 intersect7s[3].aAB: 3.14801e-14
    test 245 intersect7s[3].c: 0
    test 246 intersect7s[3].kA: 0
    test 247 intersect7s[3].kB: 0
    test 248 intersect7s[3].iteration: None

    test 249 Sphere.Closest.sA: 6.07719e+06
    test 250 Sphere.Closest.sB: -3.31802e+06
    test 251 Sphere.Closest.c: 0
    test 252 Sphere.Closest.sX0: 9.39521e+06

    test 253 Sphere.Closest5.A: {a1X: 54.653489, azi1: -147.7, aziX: -159.911264, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.839663, s1X: 6077190.710199}
    test 254 Sphere.Closest5.B: {a1X: -29.839663, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.839663, s1X: -3318019.115902}
    test 255 Sphere.Closest5.sAB: 8.56921e-10  FAILED, KNOWN (1.91534e-09), expected 2.77226e-09
    test 256 Sphere.Closest5.aAB: 7.70647e-15  FAILED, KNOWN (1.7225e-14), expected 2.49315e-14
    test 257 Sphere.Closest5.c: 0

    test 258 _Xdict2: 124

    testGeodesicExact(pygeodesy.geodesici, 24.10.22)
    test 259 Intersector: name='', geodesic=GeodesicExact(name='', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)

    test 260 Closest.1.sA: 4.2253e+06
    test 261 Closest.1.sB: 2.70933e+06
    test 262 Closest.1.c: 0
    test 263 Closest.1.sX0: 6.93463e+06

    test 264 Closest5.1.A: {a1X: 38.075573, azi1: 45.0, aziX: 51.790249, lat1: 0.0, latX: 25.92918, lon1: 0.0, lonX: 28.89426, s1X: 4225301.108897}
    test 265 Closest5.1.B: {a1X: 24.392077, azi1: 135.0, aziX: 146.182975, lat1: 45.0, latX: 25.92918, lon1: 10.0, lonX: 28.89426, s1X: 2709328.885611}
    test 266 Closest5.1.sAB: 1.45654e-09
    test 267 Closest5.1.aAB: 1.31199e-14
    test 268 Closest5.1.c: 0

    test 269 Closest.2.sA: 6.05805e+06
    test 270 Closest.2.sB: -3.31125e+06
    test 271 Closest.2.c: 0
    test 272 Closest.2.sX0: 9.3693e+06

    test 273 Closest5.2.A: {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: 0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}
    test 274 Closest5.2.B: {a1X: -29.845558, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.745492, s1X: -3311252.995823}
    test 275 Closest5.2.sAB: 3.95486e-10
    test 276 Closest5.2.aAB: 3.56467e-15
    test 277 Closest5.2.c: 0

    test 278 All[0].sA: -494582
    test 279 All[0].sB: 1.40522e+07
    test 280 All[0].c: 0
    test 281 All[0].sX0: 1.45468e+07
    test 282 All[0].iteration: 4

    test 283 All[1].sA: 1.95291e+07
    test 284 All[1].sB: -5.93234e+06
    test 285 All[1].c: 0
    test 286 All[1].sX0: 2.54615e+07
    test 287 All[1].iteration: 4

    test 288 All[2].sA: -494582
    test 289 All[2].sB: -2.59556e+07
    test 290 All[2].c: 0
    test 291 All[2].sX0: 2.64502e+07
    test 292 All[2].iteration: 4

    test 293 All[3].sA: -2.05181e+07
    test 294 All[3].sB: -5.97086e+06
    test 295 All[3].c: 0
    test 296 All[3].sX0: 2.64889e+07
    test 297 All[3].iteration: 4

    test 298 All5[0].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}
    test 299 All5[0].B: {a1X: 126.399265, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: 14052229.965229}
    test 300 All5[0].sAB: 2.50932e-09
    test 301 All5[0].aAB: 2.25682e-14
    test 302 All5[0].c: 0
    test 303 All5[0].iteration: 4

    test 304 All5[1].A: {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: -180.0, s1X: 19529110.042937}
    test 305 All5[1].B: {a1X: -53.426639, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.518675, lon1: 180.0, lonX: 180.0, s1X: -5932344.259165}
    test 306 All5[1].sAB: 6.22315e-09
    test 307 All5[1].aAB: 5.59701e-14
    test 308 All5[1].c: 0
    test 309 All5[1].iteration: 4

    test 310 All5[2].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: -0.0, s1X: -494582.492241}
    test 311 All5[2].B: {a1X: -233.600735, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: -25955632.952022}
    test 312 All5[2].sAB: 4.73754e-09
    test 313 All5[2].aAB: 4.26083e-14
    test 314 All5[2].c: 0
    test 315 All5[2].iteration: 4

    test 316 All5[3].A: {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: -180.0, s1X: -20518081.166643}
    test 317 All5[3].B: {a1X: -53.773048, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.864737, lon1: 180.0, lonX: 180.0, s1X: -5970860.779079}
    test 318 All5[3].sAB: 2.57348e-09
    test 319 All5[3].aAB: 2.3145e-14
    test 320 All5[3].c: 0
    test 321 All5[3].iteration: 4

    test 322 Middle.sA: 782555
    test 323 Middle.sB: 5.53684e+06
    test 324 Middle.c: 0
    test 325 Middle.sX0: 0

    test 326 Middle5.A: {a12: 14.106434, a1M: 7.053396, azi1: 44.75191, azi2: 45.629037, aziM: 44.969535, lat1: 0.0, lat2: 10.0, latM: 5.019509, lon1: 0.0, lon2: 10.0, lonM: 4.961883, s12: 1565109.099218, s1M: 782554.549609}
    test 327 Middle5.B: {a12: 99.810444, a1M: 49.869061, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.036282, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11073670.322999, s1M: 5536835.161499}
    test 328 Middle5.sMM: 1.13857e+06
    test 329 Middle5.aMM: 10.2623
    test 330 Middle5.c: 0

    test 331 Segment.sA: -631414
    test 332 Segment.sB: 5.98889e+06
    test 333 Segment.c: 0
    test 334 Segment.sX0: 1.86602e+06
    test 335 Segment.kA: -1
    test 336 Segment.kB: 0
    test 337 Segment.k: -3

    test 338 Segment5.A: {a1X: -5.691141, azi1: 44.75191, azi2: 45.629037, aziX: 44.893464, k2: -1, lat1: 0.0, lat2: 10.0, latX: -4.051871, lon1: 0.0, lon2: 10.0, lonX: -4.0, s1X: -631414.26877}
    test 339 Segment5.B: {a1X: 53.943553, azi1: 180.0, azi2: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, lat2: -50.0, latX: -4.051871, lon1: -4.0, lon2: -4.0, lonX: -4.0, s1X: 5988887.278435}
    test 340 Segment5.sAB: 9.86261e-11
    test 341 Segment5.aAB: 8.88939e-16
    test 342 Segment5.c: 0

    test 343 intersect7s[0].A: 04.051871°S, 004.0°W
    test 344 intersect7s[0].B: 04.051871°S, 004.0°W
    test 345 intersect7s[0].sAB: 1.41495e-09
    test 346 intersect7s[0].aAB: 1.27532e-14
    test 347 intersect7s[0].c: 0
    test 348 intersect7s[0].kA: 0
    test 349 intersect7s[0].kB: 0
    test 350 intersect7s[0].iteration: None

    test 351 intersect7s[1].A: 03.623464°N, 176.0°E
    test 352 intersect7s[1].B: 03.623464°N, 176.0°E
    test 353 intersect7s[1].sAB: 1.67723e-09
    test 354 intersect7s[1].aAB: 1.51076e-14
    test 355 intersect7s[1].c: 0
    test 356 intersect7s[1].kA: 0
    test 357 intersect7s[1].kB: 0
    test 358 intersect7s[1].iteration: None

    test 359 intersect7s[2].A: 04.051871°S, 004.0°W
    test 360 intersect7s[2].B: 04.051871°S, 004.0°W
    test 361 intersect7s[2].sAB: 5.83925e-10
    test 362 intersect7s[2].aAB: 5.26305e-15
    test 363 intersect7s[2].c: 0
    test 364 intersect7s[2].kA: 0
    test 365 intersect7s[2].kB: 0
    test 366 intersect7s[2].iteration: None

    test 367 intersect7s[3].A: 04.4796°N, 176.0°E
    test 368 intersect7s[3].B: 04.4796°N, 176.0°E
    test 369 intersect7s[3].sAB: 3.49267e-09
    test 370 intersect7s[3].aAB: 3.14801e-14
    test 371 intersect7s[3].c: 0
    test 372 intersect7s[3].kA: 0
    test 373 intersect7s[3].kB: 0
    test 374 intersect7s[3].iteration: None

    test 375 Sphere.Closest.sA: 6.07719e+06
    test 376 Sphere.Closest.sB: -3.31802e+06
    test 377 Sphere.Closest.c: 0
    test 378 Sphere.Closest.sX0: 9.39521e+06

    test 379 Sphere.Closest5.A: {a1X: 54.653489, azi1: -147.7, aziX: -159.911264, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.839663, s1X: 6077190.710199}
    test 380 Sphere.Closest5.B: {a1X: -29.839663, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.839663, s1X: -3318019.115902}
    test 381 Sphere.Closest5.sAB: 2.77226e-09
    test 382 Sphere.Closest5.aAB: 2.49315e-14
    test 383 Sphere.Closest5.c: 0

    test 384 _Xdict2: 124

    testGeodesic(pygeodesy.geodesici, 24.10.22)
    test 385 Intersector: name='', geodesic=<pygeodesy.geodesicw._gWrapped.Geodesic.<locals>.Geodesic object at 0x10262c7d0>

    test 386 Closest.1.sA: 4.2253e+06
    test 387 Closest.1.sB: 2.70933e+06
    test 388 Closest.1.c: 0
    test 389 Closest.1.sX0: 6.93463e+06
    test 390 Closest.1.latA: 25.9292
    test 391 Closest.1.lonA: 28.8943
    test 392 Closest.1.latB: 25.9292
    test 393 Closest.1.lonB: 28.8943
    test 394 Closest.1.sAB: 7.11805e-10
    test 395 Closest.1.aAB: 6.41166e-15

    test 396 Closest5.1.A: {a1X: 38.075573, azi1: 45.0, aziX: 51.790249, lat1: 0.0, latX: 25.92918, lon1: 0.0, lonX: 28.89426, s1X: 4225301.108897}
    test 397 Closest5.1.B: {a1X: 24.392077, azi1: 135.0, aziX: 146.182975, lat1: 45.0, latX: 25.92918, lon1: 10.0, lonX: 28.89426, s1X: 2709328.885611}
    test 398 Closest5.1.sAB: 7.11805e-10  FAILED, KNOWN (7.44733e-10), expected 1.45654e-09
    test 399 Closest5.1.aAB: 6.41166e-15  FAILED, KNOWN (6.70826e-15), expected 1.31199e-14
    test 400 Closest5.1.c: 0

    test 401 Closest.2.sA: 6.05805e+06
    test 402 Closest.2.sB: -3.31125e+06
    test 403 Closest.2.c: 0
    test 404 Closest.2.sX0: 9.3693e+06
    test 405 Closest.2.latA: -8.98894e-15
    test 406 Closest.2.lonA: -29.7455
    test 407 Closest.2.latB: -0
    test 408 Closest.2.lonB: -29.7455
    test 409 Closest.2.sAB: 1.27e-09
    test 410 Closest.2.aAB: 1.14469e-14

    test 411 Closest5.2.A: {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}  FAILED, KNOWN, expected {a1X: 54.562637, azi1: -147.7, aziX: -159.869978, lat1: 50.0, latX: 0.0, lon1: -4.0, lonX: -29.745492, s1X: 6058048.653081}
    test 412 Closest5.2.B: {a1X: -29.845558, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.745492, s1X: -3311252.995823}
    test 413 Closest5.2.sAB: 1.27e-09  FAILED, KNOWN (8.7451e-10), expected 3.95486e-10
    test 414 Closest5.2.aAB: 1.14469e-14  FAILED, KNOWN (7.88228e-15), expected 3.56467e-15
    test 415 Closest5.2.c: 0

    test 416 All[0].sA: -494582
    test 417 All[0].sB: 1.40522e+07
    test 418 All[0].c: 0
    test 419 All[0].sX0: 1.45468e+07
    test 420 All[0].latA: 53.6926
    test 421 All[0].lonA: 4.44089e-15
    test 422 All[0].latB: 53.6926
    test 423 All[0].lonB: 0
    test 424 All[0].sAB: 1.44466e-09
    test 425 All[0].aAB: 1.29929e-14
    test 426 All[0].iteration: 4

    test 427 All[1].sA: 1.95291e+07
    test 428 All[1].sB: -5.93234e+06
    test 429 All[1].c: 0
    test 430 All[1].sX0: 2.54615e+07
    test 431 All[1].latA: -53.5187
    test 432 All[1].lonA: 180
    test 433 All[1].latB: -53.5187
    test 434 All[1].lonB: 180
    test 435 All[1].sAB: 4.71379e-09
    test 436 All[1].aAB: 4.23951e-14
    test 437 All[1].iteration: 4

    test 438 All[2].sA: -494582
    test 439 All[2].sB: -2.59556e+07
    test 440 All[2].c: 0
    test 441 All[2].sX0: 2.64502e+07
    test 442 All[2].latA: 53.6926
    test 443 All[2].lonA: 9.76996e-15
    test 444 All[2].latB: 53.6926
    test 445 All[2].lonB: 0
    test 446 All[2].sAB: 1.8823e-09
    test 447 All[2].aAB: 1.6929e-14
    test 448 All[2].iteration: 4

    test 449 All[3].sA: -2.05181e+07
    test 450 All[3].sB: -5.97086e+06
    test 451 All[3].c: 0
    test 452 All[3].sX0: 2.64889e+07
    test 453 All[3].latA: -53.8647
    test 454 All[3].lonA: 180
    test 455 All[3].latB: -53.8647
    test 456 All[3].lonB: 180
    test 457 All[3].sAB: 3.99823e-09
    test 458 All[3].aAB: 3.59587e-14
    test 459 All[3].iteration: 4

    test 460 All5[0].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}
    test 461 All5[0].B: {a1X: 126.399265, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: 14052229.965229}
    test 462 All5[0].sAB: 1.44466e-09  FAILED, KNOWN (1.06466e-09), expected 2.50932e-09
    test 463 All5[0].aAB: 1.29929e-14  FAILED, KNOWN (9.57529e-15), expected 2.25682e-14
    test 464 All5[0].c: 0
    test 465 All5[0].iteration: 4

    test 466 All5[1].A: {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: 180.0, s1X: 19529110.042937}  FAILED, KNOWN, expected {a1X: 175.764866, azi1: -147.7, aziX: -35.280487, lat1: 50.0, latX: -53.518675, lon1: -4.0, lonX: -180.0, s1X: 19529110.042937}
    test 467 All5[1].A.lonX: 179.99999999999994  FAILED, KNOWN (2), expected -179.99999999999994
    test 468 All5[1].B: {a1X: -53.426639, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.518675, lon1: 180.0, lonX: 180.0, s1X: -5932344.259165}
    test 469 All5[1].sAB: 4.71379e-09  FAILED, KNOWN (1.50936e-09), expected 6.22315e-09
    test 470 All5[1].aAB: 4.23951e-14  FAILED, KNOWN (1.3575e-14), expected 5.59701e-14
    test 471 All5[1].c: 0
    test 472 All5[1].iteration: 4

    test 473 All5[2].A: {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: 0.0, s1X: -494582.492241}  FAILED, KNOWN, expected {a1X: -4.448619, azi1: -147.7, aziX: -144.55245, lat1: 50.0, latX: 53.692598, lon1: -4.0, lonX: -0.0, s1X: -494582.492241}
    test 474 All5[2].B: {a1X: -233.600735, azi1: 0.0, aziX: 180.0, lat1: 0.0, latX: 53.692598, lon1: 180.0, lonX: 0.0, s1X: -25955632.952022}
    test 475 All5[2].sAB: 1.8823e-09  FAILED, KNOWN (2.85524e-09), expected 4.73754e-09
    test 476 All5[2].aAB: 1.6929e-14  FAILED, KNOWN (2.56794e-14), expected 4.26083e-14
    test 477 All5[2].c: 0
    test 478 All5[2].iteration: 4

    test 479 All5[3].A: {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: 180.0, s1X: -20518081.166643}  FAILED, KNOWN, expected {a1X: -184.660358, azi1: -147.7, aziX: -35.614985, lat1: 50.0, latX: -53.864737, lon1: -4.0, lonX: -180.0, s1X: -20518081.166643}
    test 480 All5[3].A.lonX: 179.99999999999994  FAILED, KNOWN (2), expected -179.99999999999997
    test 481 All5[3].B: {a1X: -53.773048, azi1: 0.0, aziX: 0.0, lat1: 0.0, latX: -53.864737, lon1: 180.0, lonX: 180.0, s1X: -5970860.779079}
    test 482 All5[3].sAB: 3.99823e-09  FAILED, KNOWN (1.42475e-09), expected 2.57348e-09
    test 483 All5[3].aAB: 3.59587e-14  FAILED, KNOWN (1.28137e-14), expected 2.3145e-14
    test 484 All5[3].c: 0
    test 485 All5[3].iteration: 4

    test 486 Middle.sA: 782555
    test 487 Middle.sB: 5.54085e+06  FAILED, KNOWN (0.000724055), expected 5.53684e+06
    test 488 Middle.c: 0
    test 489 Middle.sX0: 0
    test 490 Middle.latA: 5.01951
    test 491 Middle.lonA: 4.96188
    test 492 Middle.latB: 0
    test 493 Middle.lonB: -4
    test 494 Middle.sAB: 1.14053e+06
    test 495 Middle.aAB: 10.2799

    test 496 Middle5.A: {a12: 14.106434, a1M: 7.053396, azi1: 44.75191, azi2: 45.629037, aziM: 44.969535, lat1: 0.0, lat2: 10.0, latM: 5.019509, lon1: 0.0, lon2: 10.0, lonM: 4.961883, s12: 1565109.099218, s1M: 782554.549609}
    test 497 Middle5.B: {a12: 99.810444, a1M: 49.905222, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.0, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11081694.083368, s1M: 5540847.041684}  FAILED, KNOWN, expected {a12: 99.810444, a1M: 49.869061, azi1: 180.0, azi2: 180.0, aziM: 180.0, lat1: 50.0, lat2: -50.0, latM: 0.036282, lon1: -4.0, lon2: -4.0, lonM: -4.0, s12: 11073670.322999, s1M: 5536835.161499}
    test 498 Middle5.B.latM: 0.0  FAILED, KNOWN (0.0362822), expected 0.03628221979726735
    test 499 Middle5.B.s1M: 5540847.04168415  FAILED, KNOWN (0.000724055), expected 5536835.161499483
    test 500 Middle5.B.a1M: 49.905221888853184  FAILED, KNOWN (0.000724585), expected 49.86906131643703
    test 501 Middle5.B.s12: 11081694.0833683  FAILED, KNOWN (0.000724055), expected 11073670.322998965
    test 502 Middle5.sMM: 1.14053e+06  FAILED, KNOWN (0.0017142), expected 1.13857e+06
    test 503 Middle5.aMM: 10.2799  FAILED, KNOWN (0.00171426), expected 10.2623
    test 504 Middle5.c: 0

    test 505 Segment.sA: -631414
    test 506 Segment.sB: 5.98889e+06
    test 507 Segment.c: 0
    test 508 Segment.sX0: 1.86201e+06  FAILED, KNOWN (0.00214997), expected 1.86602e+06
    test 509 Segment.kA: -1
    test 510 Segment.kB: 0
    test 511 Segment.k: -3
    test 512 Segment.latA: -4.05187
    test 513 Segment.lonA: -4
    test 514 Segment.latB: -4.05187
    test 515 Segment.lonB: -4
    test 516 Segment.sAB: 5.496e-10
    test 517 Segment.aAB: 4.95367e-15

    test 518 Segment5.A: {a1X: -5.691141, azi1: 44.75191, aziX: 44.893464, k2: -1, lat1: 0.0, latX: -4.051871, lon1: 0.0, lonX: -4.0, s1X: -631414.26877}  FAILED, KNOWN, expected {a1X: -5.691141, azi1: 44.75191, azi2: 45.629037, aziX: 44.893464, k2: -1, lat1: 0.0, lat2: 10.0, latX: -4.051871, lon1: 0.0, lon2: 10.0, lonX: -4.0, s1X: -631414.26877}
    test 519 Segment5.B: {a1X: 53.943553, azi1: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, latX: -4.051871, lon1: -4.0, lonX: -4.0, s1X: 5988887.278435}  FAILED, KNOWN, expected {a1X: 53.943553, azi1: 180.0, azi2: 180.0, aziX: 180.0, k2: 0, lat1: 50.0, lat2: -50.0, latX: -4.051871, lon1: -4.0, lon2: -4.0, lonX: -4.0, s1X: 5988887.278435}
    test 520 Segment5.sAB: 5.496e-10  FAILED, KNOWN (4.50974e-10), expected 9.86261e-11
    test 521 Segment5.aAB: 4.95367e-15  FAILED, KNOWN (4.06473e-15), expected 8.88939e-16
    test 522 Segment5.c: 0

    test 523 intersect7s[0].A: 04.051871°S, 004.0°W
    test 524 intersect7s[0].B: 04.051871°S, 004.0°W
    test 525 intersect7s[0].sAB: 2.64649e-10  FAILED, KNOWN (1.1503e-09), expected 1.41495e-09
    test 526 intersect7s[0].aAB: 2.38534e-15  FAILED, KNOWN (1.03679e-14), expected 1.27532e-14
    test 527 intersect7s[0].c: 0
    test 528 intersect7s[0].kA: 0
    test 529 intersect7s[0].kB: 0
    test 530 intersect7s[0].iteration: None

    test 531 intersect7s[1].A: 03.623464°N, 176.0°E
    test 532 intersect7s[1].B: 03.623464°N, 176.0°E
    test 533 intersect7s[1].sAB: 1.67611e-09  FAILED, KNOWN (1.12026e-12), expected 1.67723e-09
    test 534 intersect7s[1].aAB: 1.51076e-14
    test 535 intersect7s[1].c: 0
    test 536 intersect7s[1].kA: 0
    test 537 intersect7s[1].kB: 0
    test 538 intersect7s[1].iteration: None

    test 539 intersect7s[2].A: 04.051871°S, 004.0°W
    test 540 intersect7s[2].B: 04.051871°S, 004.0°W
    test 541 intersect7s[2].sAB: 5.83925e-10
    test 542 intersect7s[2].aAB: 5.26305e-15
    test 543 intersect7s[2].c: 0
    test 544 intersect7s[2].kA: 0
    test 545 intersect7s[2].kB: 0
    test 546 intersect7s[2].iteration: None

    test 547 intersect7s[3].A: 04.4796°N, 176.0°E
    test 548 intersect7s[3].B: 04.4796°N, 176.0°E
    test 549 intersect7s[3].sAB: 3.49267e-09
    test 550 intersect7s[3].aAB: 3.14801e-14
    test 551 intersect7s[3].c: 0
    test 552 intersect7s[3].kA: 0
    test 553 intersect7s[3].kB: 0
    test 554 intersect7s[3].iteration: None

    test 555 Sphere.Closest.sA: 6.07719e+06
    test 556 Sphere.Closest.sB: -3.31802e+06
    test 557 Sphere.Closest.c: 0
    test 558 Sphere.Closest.sX0: 9.39521e+06
    test 559 Sphere.Closest.latA: -2.98706e-15
    test 560 Sphere.Closest.lonA: -29.8397
    test 561 Sphere.Closest.latB: -0
    test 562 Sphere.Closest.lonB: -29.8397
    test 563 Sphere.Closest.sAB: 8.56921e-10
    test 564 Sphere.Closest.aAB: 7.70647e-15

    test 565 Sphere.Closest5.A: {a1X: 54.653489, azi1: -147.7, aziX: -159.911264, lat1: 50.0, latX: -0.0, lon1: -4.0, lonX: -29.839663, s1X: 6077190.710199}
    test 566 Sphere.Closest5.B: {a1X: -29.839663, azi1: 90.0, aziX: 90.0, lat1: 0.0, latX: -0.0, lon1: 0.0, lonX: -29.839663, s1X: -3318019.115902}
    test 567 Sphere.Closest5.sAB: 8.56921e-10  FAILED, KNOWN (1.91534e-09), expected 2.77226e-09
    test 568 Sphere.Closest5.aAB: 7.70647e-15  FAILED, KNOWN (1.7225e-14), expected 2.49315e-14
    test 569 Sphere.Closest5.c: 0

    test 570 _Xdict2: 178

    72 of 570 testGeodesici.py tests (12.6%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 9.392 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGeodesicx.py
./test/testGeodesicx.py:49: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  gP = E.geodesic
./test/testGeodesicx.py:143: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  gP = E.geodesic
./test/testGeodesicx.py:278: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  t.testPolygon(geodesicw, E.geodesic, K=True)  # XXX geographiclib 1.49 issue?
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.classname from .named by testGeodesicx.py line 12
# lazily imported pygeodesy.DIG from .constants by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testGeodesicx.py line 12
# lazily imported pygeodesy.GDict from .karney by testGeodesicx.py line 12
# lazily imported pygeodesy.GeodesicLineExact from .geodesicx by testGeodesicx.py line 12
# lazily imported pygeodesy.itemsorted from .basics by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testGeodesicx.py line 257
# lazily imported pygeodesy.geodesicw by testGeodesicx.py line 257
# lazily imported pygeodesy.geodsolve by testGeodesicx.py line 257

    testing testGeodesicx.py 24.06.26 (module pygeodesy.geodesicx 24.11.02) isLazy=3

    testDirectX vs ...(pygeodesy.geodesicx, 24.11.02)
# lazily imported pygeodesy.elliptic by gxline.py line 284
    test 1 C++X.a12: 49.4755274632514  FAILED, KNOWN, expected 49.4755274632515
    test 2 C++X.azi1: 51
    test 3 C++X.azi2: 107.189397162606
    test 4 C++X.lat1: 40.6
    test 5 C++X.lat2: 51.8845645056068
    test 6 C++X.lon1: -73.8
    test 7 C++X.lon2: -1.1411728612009  FAILED, KNOWN, expected -1.14117286120083
    test 8 C++X.m12: 4844148.70310148  FAILED, KNOWN, expected 4844148.70310149
    test 9 C++X.M12: 0.650910566998087  FAILED, KNOWN, expected 0.650910566998086
    test 10 C++X.M21: 0.651228658921966
    test 11 C++X.s12: 5500000
    test 12 C++X.S12: 39735075134877.1
    test 13 iteration: None

    test 14 Python.a12: 49.4755274632514  FAILED, KNOWN, expected 49.4755274632515
    test 15 Python.azi1: 51
    test 16 Python.azi2: 107.189397162606
    test 17 Python.lat1: 40.6
    test 18 Python.lat2: 51.8845645056068
    test 19 Python.lon1: -73.8
    test 20 Python.lon2: -1.1411728612009  FAILED, KNOWN, expected -1.14117286120084
    test 21 Python.m12: 4844148.70310148  FAILED, KNOWN, expected 4844148.70310149
    test 22 Python.M12: 0.650910566998087  FAILED, KNOWN, expected 0.650910566998086
    test 23 Python.M21: 0.651228658921966
    test 24 Python.s12: 5500000
    test 25 Python.S12: 39735075134877.1
    test 26 iteration: None

    test 27 GeodesicLineExact: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=49.475527, s13=5500000, caps=34697, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 28 GeodesicExact: GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 29 GeodesicLineExact: Direct9Tuple(a12=49.475527, lat2=51.884565, lon2=-1.141173, azi2=107.189397, s12=5500000.0, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 30 GeodesicExact: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}
    test 31 GeodesicExact: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 32 GeodesicExact: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}

    test 33 Geodesic: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}
    test 34 Geodesic: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 35 Geodesic: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}

    test 36 ArcDirect.a12: 49.8
    test 37 ArcDirect.azi1: 51
    test 38 ArcDirect.azi2: 107.582082475406  FAILED, KNOWN, expected 107.5820825
    test 39 ArcDirect.lat1: 40.6
    test 40 ArcDirect.lat2: 51.7876866587893  FAILED, KNOWN, expected 51.7876867
    test 41 ArcDirect.lon1: -73.8
    test 42 ArcDirect.lon2: -0.641731343091337  FAILED, KNOWN, expected -0.641731
    test 43 ArcDirect.s12: 5536073.73439268  FAILED, KNOWN, expected 5536073.734393
    test 44 iteration: None

    test 45 ArcDirectLine: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=49.8, s13=5536073.734393, caps=36747, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 46 iteration: None

    test 47 GeodesicLineExact: name='', lat1=40.6, lon1=-73.8, azi1=51, a13=NAN, s13=NAN, caps=65439, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30)
    test 48 iteration: None

    testInverseX vs ...(pygeodesy.geodesicx, 24.11.02)
    test 49 C++X.a12: 49.941310217899
    test 50 C++X.azi1: 51.1988828455798
    test 51 C++X.azi2: 107.821776735514
    test 52 C++X.lat1: 40.6
    test 53 C++X.lat2: 51.6
    test 54 C++X.lon1: -73.8
    test 55 C++X.lon2: -0.5
    test 56 C++X.m12: 4877684.6027062
    test 57 C++X.M12: 0.644729692059482
    test 58 C++X.M21: 0.645045678521344
    test 59 C++X.s12: 5551759.40031868
    test 60 C++X.S12: 40041368848742.5
    test 61 iteration: 3

    test 62 Python.a12: 49.941310217899
    test 63 Python.azi1: 51.1988828455798
    test 64 Python.azi2: 107.821776735514
    test 65 Python.lat1: 40.6
    test 66 Python.lat2: 51.6
    test 67 Python.lon1: -73.8
    test 68 Python.lon2: -0.5
    test 69 Python.m12: 4877684.6027062
    test 70 Python.M12: 0.644729692059482
    test 71 Python.M21: 0.645045678521344
    test 72 Python.s12: 5551759.40031868
    test 73 Python.S12: 40041368848742.5
    test 74 iteration: None

    test 75 GeodesicLineExact: GeodesicLineExact(name='', lat1=40.6, lon1=-73.8, azi1=51.198883, a13=49.94131, s13=5551759.400319, caps=36747, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30))
    test 76 GeodesicExact: name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30
    test 77 GeodesicLineExact: Direct9Tuple(a12=49.94131, lat2=51.6, lon2=-0.5, azi2=107.821777, s12=5551759.400319, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 78 GeodesicExact: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, m12=4877684.602706, M12=0.64473, M21=0.645046, s12=5551759.400319)
    test 79 GeodesicExact: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=4877684.602706, M12=0.64473, M21=0.645046, S12=NAN)
    test 80 GeodesicExact: {a12: 49.94131, azi1: NAN, azi2: NAN, calp1: NAN, calp2: NAN, m12: 4877684.602706, M12: 0.64473, M21: 0.645046, s12: 5551759.400319, S12: NAN, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, m12: 4877684.602706, M12: 0.64473, M21: 0.645046, s12: 5551759.400319}

    test 81 Geodesic: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, calp1=0.626619, calp2=-0.306057, lon1=-73.8, lon2=-0.5, m12=NAN, M12=NAN, M21=NAN, s12=5551759.400319, S12=NAN, salp1=0.779326, salp2=0.952013)
    test 82 Geodesic: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=0.779326, calp1=0.626619, salp2=0.952013, calp2=-0.306057, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 83 Geodesic: {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: 0.779326, salp2: 0.952013}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, lon1: -73.8, lon2: -0.5, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: 0.779326, salp2: 0.952013}

    test 84 Inverse: {a12: 49.647855, azi1: 51.139649, azi2: 107.74164, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, m12: 4848370.615026, M12: 0.646331, M21: 0.646017, s12: 5515844.227497}
    test 85 Inverse1: 49.647854761166144

    testPolygon24(pygeodesy.geodesicx, 24.11.02)
    test 86 Compute: (1, 0, 0)
    test 87 AddEdges: (4, 4000, 1000000)
    test 88 TestEdge: (5, 4000, 1000000)
    test 89 Clear: 0
    test 90 TestPoint: (1, 0, 0)
    test 91 AddPoints: (4, 29506941, 65690027591346)
    test 92 TestPoint: (5, 29506941, 65690027591346)
    test 93 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=24), num=4, perimeter=29506941.155178, polyline=False

    testPolygon27(pygeodesy.geodesicx, 24.11.02)
    test 94 Compute: (1, 0, 0)
    test 95 AddEdges: (4, 4000, 1000000)
    test 96 TestEdge: (5, 4000, 1000000)
    test 97 Clear: 0
    test 98 TestPoint: (1, 0, 0)
    test 99 AddPoints: (4, 29506941, 65690027591346)
    test 100 TestPoint: (5, 29506941, 65690027591346)
    test 101 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=27), num=4, perimeter=29506941.155178, polyline=False

    testPolygon30(pygeodesy.geodesicx, 24.11.02)
    test 102 Compute: (1, 0, 0)
    test 103 AddEdges: (4, 4000, 1000000)
    test 104 TestEdge: (5, 4000, 1000000)
    test 105 Clear: 0
    test 106 TestPoint: (1, 0, 0)
    test 107 AddPoints: (4, 29506941, 65690027591346)
    test 108 TestPoint: (5, 29506941, 65690027591346)
    test 109 toStr: area=65690027591345.671875, geodesic=GeodesicExact(name='WGS84', caps=0, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), C4order=30), num=4, perimeter=29506941.155178, polyline=False

    testPolygon(pygeodesy.geodesicw, 24.11.02)
    test 110 Compute: (1, 0, 0)
    test 111 AddEdges: (4, 4000, 1000000)
    test 112 TestEdge: (5, 4000, 1000000)
    test 113 Clear: None  FAILED, KNOWN, expected 0
    test 114 TestPoint: (1, 0, 0)
    test 115 AddPoints: (4, 29506941, 65690027591346)
    test 116 TestPoint: (5, 29506941, 65690027591346)

    testPlumbTo ...(pygeodesy.geodesicx, 24.11.02)
# lazily imported pygeodesy.rhumb by geodesicw.py line 585
    test 117 lat2: 51.846089
    test 118 lon2: 5.260428
    test 119 s12: 24784.288415
    test 120 at: -270.000000
    test 121 iteration: 6

    test 122 lat2: 54.928531
    test 123 lon2: -21.937291
    test 124 s12: 3928788.572003
    test 125 at: 270.000000
    test 126 iteration: 27

    test 127 lat2: 37.976213  FAILED, KNOWN, expected 37.976217
    test 128 lon2: 18.344811  FAILED, KNOWN, expected 18.344820
    test 129 s12: 1012791.484755  FAILED, KNOWN, expected 1012790.599291
    test 130 at: 270.005449  FAILED, KNOWN, expected 270.005437
    test 131 iteration: 128

    23 of 131 testGeodesicx.py tests (17.6%) FAILED, incl. 20 KNOWN plus 3 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 23.223 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGeohash.py
./test/testGeohash.py:38: DeprecationWarning: function L{decode_error<pygeodesy.geohash.decode_error>} has been DEPRECATED on 2024.07.28, use L{geohash.decode_error2}.
  self.test('decode_error',  fstr(geohash.decode_error( g), fmt='%.*e'), '2.145767e-05, 2.145767e-05')  # DEPRECATED
./test/testGeohash.py:45: DeprecationWarning: property_RO L{sizes<pygeodesy.geohash.Geohash.sizes>} has been DEPRECATED on 2024.07.28, use property C{Geohash.sizes3}.
  self.test('sizes', fstr(g.sizes, prec=1), '4.8, 4.8')
./test/testGeohash.py:87: DeprecationWarning: function L{decode_error<pygeodesy.geohash.decode_error>} has been DEPRECATED on 2024.07.28, use L{geohash.decode_error2}.
  self.test('decode_error',  fstr(geohash.decode_error( 'u120fxw'), fmt='%.*e'), '6.866455e-04, 6.866455e-04')  # DEPRECATED
./test/testGeohash.py:94: DeprecationWarning: function L{sizes<pygeodesy.geohash.sizes>} has been DEPRECATED on 2024.07.28, use function L{pygeodesy.geohash.sizes3}.
  self.test('sizes',  fstr(geohash.sizes( 'u120fxw'), prec=1), '153.0, 153.0')  # DEPRECATED
./test/testGeohash.py:102: DeprecationWarning: function L{sizes<pygeodesy.geohash.sizes>} has been DEPRECATED on 2024.07.28, use function L{pygeodesy.geohash.sizes3}.
  self.test('sizes',  fstr(geohash.sizes( g), prec=1), '610.0, 1220.0')  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.classname from .named by testGeohash.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGeohash.py line 11
# lazily imported pygeodesy.geohash by testGeohash.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testGeohash.py line 11
# lazily imported pygeodesy.Geohashed from .geohash by testGeohash.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGeohash.py line 161

    testing testGeohash.py 24.08.01 (module pygeodesy.geohash 24.10.12) isLazy=3
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 philam: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode2: (65.390646, -17.929709)
    test 18 decode_error: 2.145767e-05, 2.145767e-05
    test 19 decode_error2: 2.145767e-05, 2.145767e-05
    test 20 distance1To: 2758.887
    test 21 distance2To: 682.760
    test 22 distance3To: 410.732
    test 23 distance4To: 397.404
    test 24 distance5To: 397.404
    test 25 sizes: 4.8, 4.8
    test 26 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 27 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 28 N: geehpbpbr
    test 29 NE: geek00002
    test 30 E: geek00000
    test 31 SE: gee7bpbpb
    test 32 S: gee5zzzzz
    test 33 SW: gee5zzzzy
    test 34 W: geehpbpbn
    test 35 NW: geehpbpbq
    test 36 N: geehpbpbr
    test 37 NE: geek00002
    test 38 E: geek00000
    test 39 SE: gee7bpbpb
    test 40 S: gee5zzzzz
    test 41 SW: gee5zzzzy
    test 42 W: geehpbpbn
    test 43 NW: geehpbpbq
    test 44 N: geehpbpbr
    test 45 NE: geek00002
    test 46 E: geek00000
    test 47 SE: gee7bpbpb
    test 48 S: gee5zzzzz
    test 49 SW: gee5zzzzy
    test 50 W: geehpbpbn
    test 51 NW: geehpbpbq
    test 52 N: geehpbpbr
    test 53 NE: geek00002
    test 54 E: geek00000
    test 55 SE: gee7bpbpb
    test 56 S: gee5zzzzz
    test 57 SW: gee5zzzzy
    test 58 W: geehpbpbn
    test 59 NW: geehpbpbq

    test 60 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 61 decode: 52.205, 0.1188
    test 62 encode-decode: u120fxw
    test 63 encode-decode: geek
    test 64 encode-decode: fur
    test 65 encode-decode: geehpbpbp
    test 66 encode-decode: u4pruydqqvj8
    test 67 encode-decode: bgr96qxvpd46
    test 68 encode-decode: 0123456789
    test 69 encode-decode: zzzzzz
    test 70 Geohash: u4pruydq
    test 71 N.E.S.W: True
    test 72 E.S.W.N: True
    test 73 S.W.N.E: True
    test 74 W.N.E.S: True
    test 75 N.E.S.S.W.W.N.N.E.S: True
    test 76 Geohash: u4pruydqq
    test 77 N.E.S.W: True
    test 78 E.S.W.N: True
    test 79 S.W.N.E: True
    test 80 W.N.E.S: True
    test 81 N.E.S.S.W.W.N.N.E.S: True
    test 82 Geohash: u4pruydqqv
    test 83 N.E.S.W: True
    test 84 E.S.W.N: True
    test 85 S.W.N.E: True
    test 86 W.N.E.S: True
    test 87 N.E.S.S.W.W.N.N.E.S: True
    test 88 Geohash: u4pruydqqvj
    test 89 N.E.S.W: True
    test 90 E.S.W.N: True
    test 91 S.W.N.E: True
    test 92 W.N.E.S: True
    test 93 N.E.S.S.W.W.N.N.E.S: True
    test 94 Geohash: u4pruydqqvj8
    test 95 N.E.S.W: True
    test 96 E.S.W.N: True
    test 97 S.W.N.E: True
    test 98 W.N.E.S: True
    test 99 N.E.S.S.W.W.N.N.E.S: True

    test 100 encode: u120fxw
    test 101 decode: ('52.205', '0.1188')
    test 102 decode2: (52.205, 0.1188)
    test 103 decode_error: 6.866455e-04, 6.866455e-04
    test 104 decode_error2: 6.866455e-04, 6.866455e-04
    test 105 distance_: 486.710
    test 106 distance2: 3.374
    test 107 distance3: 2.992
    test 108 distance4: 2.798
    test 109 distance5: 2.798
    test 110 sizes: 153.0, 153.0
    test 111 sizes3: 153.0, 153.0, 86.3

    test 112 Geohash: u336xv
    test 113 encode: u336xv
    test 114 equal: True
    test 115 sizes: 610.0, 1220.0
    test 116 sizes3: 610.0, 1220.0, 486.7
    test 117 encode: fur
    test 118 decode: ('69.6', '-45.7')
    test 119 decode: ('70.3', '-51')
    test 120 decode: ('68', '-68')
    test 121 decode_error2: (0.703125, 0.703125)
    test 122 decode_error2: (2.8125, 5.625)
    test 123 decode_error2: (22.5, 22.5)
    test 124 encode: ezs42e44yx96
    test 125 decode: ('42.60000003', '-5.59999997')
    test 126 encode: ezs42
    test 127 decode: ('42.605', '-5.603')
    test 128 distance1: 503442.4
    test 129 distance2: 303317.6
    test 130 distance3: 185425.4
    test 131 distance4: 179940.1
    test 132 distance5: 179940.1

    test 133 precision: 0  FAILED, KNOWN, expected 1
    test 134 resolution: 360.0, 180.0
    test 135 inferred: w
    test 136 precision: 1
    test 137 resolution: 45.0, 45.0
    test 138 inferred: wp
    test 139 precision: 2
    test 140 resolution: 11.25, 5.625
    test 141 inferred: wpy
    test 142 precision: 3
    test 143 resolution: 1.4062, 1.4062
    test 144 inferred: wpy6
    test 145 precision: 4
    test 146 resolution: 0.35156, 0.17578
    test 147 inferred: wpy6kc
    test 148 precision: 5
    test 149 resolution: 0.043945, 0.043945
    test 150 inferred: wpy6kcc
    test 151 precision: 6
    test 152 resolution: 0.0109863, 0.0054932
    test 153 inferred: wpy6kccw
    test 154 precision: 7
    test 155 resolution: 0.00137329, 0.00137329
    test 156 inferred: wpy6kccwe4
    test 157 precision: 8
    test 158 resolution: 0.000343323, 0.000171661
    test 159 inferred: wpy6kccwe4q
    test 160 precision: 9
    test 161 resolution: 0.0000429153, 0.0000429153
    test 162 inferred: wpy6kccwe4qr
    test 163 precision: 10
    test 164 resolution: 0.00001072884, 0.00000536442
    test 165 inferred: wpy6kccwe4qr
    test 166 precision: 11
    test 167 resolution: 0.000001341105, 0.000001341105
    test 168 inferred: wpy6kccwe4qr
    test 169 precision: 12
    test 170 resolution: 0.0000003352761, 0.0000001676381
    test 171 inferred: wpy6kccwe4qr
    test 172 precision: 13  FAILED, KNOWN, expected 12
    test 173 resolution: 0.00000033527613, 0.00000016763806
    test 174 inferred: wpy6kccwe4qr

    test 175 precision: 12
    test 176 ndigits: None
    test 177 encoded: tuvz4p141zc1
    test 178 encoded: tuvz4p141zc1
    test 179 encoded: True
    test 180 encoded: tuvz4p141zc1
    test 181 encoded: True
    test 182 decoded: (27.988056, 86.925278)
    test 183 decoded: (27.988056, 86.925278)
    test 184 decoded: True
    test 185 len: 1
    test 186 len2: (1, 1)

    test 187 precision: 12
    test 188 ndigits: 12
    test 189 encoded: tuvz4p141zc1
    test 190 encoded: tuvz4p141zc1
    test 191 encoded: True
    test 192 encoded: tuvz4p141zc1
    test 193 encoded: True
    test 194 decoded: (27.988056, 86.925278)
    test 195 decoded: (27.988056, 86.925278)
    test 196 decoded: True
    test 197 len: 1
    test 198 len2: (1, 1)

    7 of 198 testGeohash.py tests (3.5%) FAILED, incl. 2 KNOWN plus 5 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 12.190 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGeoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.fstr from .streprs by testGeoids.py line 17
# lazily imported pygeodesy.len2 from .basics by testGeoids.py line 17
# lazily imported pygeodesy.egmGeoidHeights from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.Fwelford from .fstats by testGeoids.py line 17
# lazily imported pygeodesy.GeoidError from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidG2012B from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidKarney from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidPGM from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.LatLon_ from .points by testGeoids.py line 17
# lazily imported pygeodesy.RangeError from .errors by testGeoids.py line 17
# lazily imported pygeodesy.reprs from .streprs by testGeoids.py line 17

    testing testGeoids.py 23.05.23 isLazy=3
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046496
    test 212 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.002766
    test 213 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.005116
    test 214 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 215 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 216 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 217 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 218 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 219 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 220 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 221 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 222 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 223 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 224 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 225 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 226 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 227 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 228 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 229 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 230 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 231 closed: True
    test 232 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 233 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 234 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 235 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 236 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 237 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 238 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 239 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 240 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 241 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 242 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 243 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 244 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 245 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 246 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 247 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 248 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 249 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 250 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 251 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 252 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 253 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 254 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 255 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 256 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 257 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 258 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 259 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 260 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 261 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 262 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 263 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 264 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 265 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 266 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 267 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 268 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 269 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 270 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 271 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 272 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 273 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 274 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 275 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 276 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 277 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 278 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 279 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 280 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 281 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 282 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 283 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 284 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 285 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 286 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 287 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 288 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 289 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 290 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 291 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 292 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 293 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 294 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 295 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 296 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 297 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 298 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 299 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 300 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 301 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 302 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 303 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 304 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 305 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 306 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 307 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 308 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 309 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 310 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 311 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 312 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 313 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 314 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 315 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 316 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 317 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 318 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 319 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 320 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 321 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 322 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 323 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 324 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 325 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 326 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 327 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 328 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 329 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 330 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 331 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 332 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 333 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 334 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 335 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 336 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 337 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 338 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 339 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 340 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 341 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 342 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 343 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 344 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 345 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 346 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 347 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 348 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 349 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 350 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 351 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 352 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 353 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 354 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 355 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 356 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 357 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 358 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 359 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 360 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 361 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 362 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 363 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 364 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 365 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 366 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 367 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 368 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 369 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 370 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 371 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 372 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 373 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 374 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 375 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 376 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 377 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 378 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 379 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 380 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 381 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 382 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 383 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 384 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 385 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 386 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 387 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 388 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 389 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 390 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 391 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 392 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 393 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 394 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 395 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 396 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 397 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 398 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 399 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 400 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 401 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 402 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 403 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 404 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 405 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 406 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 407 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 408 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 409 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 410 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 411 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 412 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 413 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 414 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 415 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 416 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 417 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 418 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 419 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 420 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 421 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 422 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 423 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 424 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 425 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 426 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 427 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 428 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 429 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 430 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 431 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 432 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 433 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 434 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 435 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 436 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 437 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 438 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 439 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 440 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 441 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 442 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 443 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 444 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001756
    test 445 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000524
    test 446 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000371
    test 447 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 448 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 449 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 450 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 451 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 452 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 453 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 454 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 455 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 456 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 457 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 458 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 459 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 460 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 461 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 462 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 463 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 464 closed: True
    test 465 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 466 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    232 tests skipped (232): no scipy
    test 467 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 468 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 469 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 470 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 471 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 472 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 473 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 474 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 475 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 476 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 477 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 478 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 479 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 480 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 481 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 482 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 483 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 484 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 485 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 486 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 487 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 488 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 489 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 490 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 491 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 492 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 493 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 494 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 495 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 496 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 497 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 498 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 499 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 500 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 501 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 502 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 503 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 504 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 505 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 506 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 507 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 508 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 509 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 510 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 511 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 512 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 513 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 514 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 515 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 516 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 517 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 518 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 519 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 520 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 521 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 522 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 523 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 524 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 525 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 526 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 527 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 528 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 529 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 530 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 531 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 532 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 533 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 534 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 535 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 536 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 537 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 538 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 539 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 540 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 541 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 542 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 543 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 544 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 545 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 546 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 547 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 548 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 549 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 550 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 551 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 552 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 553 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 554 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 555 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 556 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 557 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 558 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 559 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 560 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 561 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 562 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 563 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 564 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 565 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 566 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 567 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 568 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 569 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 570 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 571 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 572 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 573 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 574 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 575 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 576 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 577 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 578 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 579 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 580 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 581 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 582 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 583 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 584 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 585 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 586 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 587 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 588 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 589 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 590 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 591 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 592 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 593 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 594 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 595 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 596 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 597 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 598 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 599 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 600 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 601 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 602 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 603 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 604 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 605 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 606 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 607 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 608 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 609 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 610 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 611 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 612 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 613 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 614 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 615 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 616 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 617 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 618 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 619 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 620 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 621 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 622 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 623 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 624 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 625 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 626 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 627 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 628 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 629 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 630 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 631 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 632 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 633 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 634 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 635 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 636 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 637 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 638 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 639 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 640 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 641 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 642 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 643 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 644 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 645 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 646 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 647 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 648 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 649 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 650 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 651 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 652 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 653 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 654 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 655 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 656 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 657 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 658 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 659 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 660 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 661 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 662 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 663 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 664 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 665 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 666 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 667 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 668 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 669 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 670 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 671 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 672 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 673 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 674 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 675 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 676 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 677 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.002537
    test 678 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.000543
    test 679 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.000458
    test 680 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 681 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 682 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 683 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 684 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 685 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 686 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 687 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 688 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 689 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 690 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 691 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 692 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 693 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 694 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 695 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 696 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 697 closed: True
    test 698 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 699 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 700 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 701 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 702 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 703 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 704 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 705 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 706 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 707 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 708 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 709 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 710 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 711 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 712 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 713 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 714 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 715 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 716 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 717 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 718 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 719 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 720 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 721 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 722 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 723 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 724 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 725 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 726 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 727 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 728 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 729 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 730 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 731 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 732 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 733 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 734 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 735 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 736 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 737 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 738 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 739 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 740 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 741 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 742 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 743 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 744 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 745 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 746 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 747 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 748 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 749 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 750 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 751 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 752 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 753 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 754 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 755 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 756 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 757 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 758 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 759 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 760 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 761 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 762 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 763 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 764 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 765 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 766 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 767 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 768 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 769 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 770 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 771 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 772 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 773 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 774 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 775 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 776 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 777 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 778 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 779 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 780 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 781 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 782 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 783 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 784 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 785 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 786 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 787 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 788 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 789 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 790 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 791 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 792 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 793 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 794 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 795 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 796 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 797 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 798 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 799 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 800 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 801 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 802 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 803 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 804 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 805 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 806 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 807 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 808 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 809 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 810 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 811 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 812 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 813 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 814 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 815 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 816 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 817 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 818 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 819 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 820 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 821 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 822 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 823 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 824 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 825 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 826 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 827 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 828 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 829 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 830 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 831 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 832 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 833 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 834 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 835 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 836 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 837 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 838 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 839 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 840 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 841 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 842 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 843 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 844 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 845 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 846 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 847 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 848 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 849 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 850 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 851 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 852 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 853 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 854 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 855 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 856 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 857 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 858 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 859 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 860 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 861 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 862 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 863 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 864 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 865 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 866 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 867 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 868 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 869 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 870 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 871 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 872 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 873 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 874 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 875 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 876 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 877 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 878 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 879 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 880 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 881 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 882 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 883 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 884 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 885 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 886 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 887 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 888 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 889 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 890 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 891 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 892 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 893 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 894 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 895 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 896 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 897 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 898 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 899 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 900 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 901 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 902 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 903 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 904 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 905 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 906 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 907 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 908 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 909 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 910 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001323
    test 911 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000468
    test 912 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000333
    test 913 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 914 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 915 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 916 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 917 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 918 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 919 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 920 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 921 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 922 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 923 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 924 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 925 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 926 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 927 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 928 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 929 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 930 closed: True
    test 931 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 932 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    232 tests skipped (464): no scipy
    test 933 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 934 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 935 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 936 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 937 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 938 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 939 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 940 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 941 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 942 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 943 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 944 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 945 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 946 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 947 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 948 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 949 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 950 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 951 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 952 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 953 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 954 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 955 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 956 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 957 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 958 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 959 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 960 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 961 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 962 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 963 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 964 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 965 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 966 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 967 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 968 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 969 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 970 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 971 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 972 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 973 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 974 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 975 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 976 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 977 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 978 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 979 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 980 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 981 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 982 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 983 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 984 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 985 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 986 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 987 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 988 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 989 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 990 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 991 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 992 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 993 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 994 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 995 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 996 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 997 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 998 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 999 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 1000 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 1001 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 1002 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 1003 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 1004 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 1005 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 1006 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 1007 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 1008 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 1009 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 1010 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 1011 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 1012 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 1013 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 1014 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 1015 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 1016 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 1017 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 1018 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 1019 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 1020 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 1021 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 1022 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 1023 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 1024 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 1025 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 1026 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 1027 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 1028 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 1029 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 1030 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 1031 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 1032 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 1033 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 1034 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 1035 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 1036 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 1037 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 1038 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 1039 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 1040 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 1041 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 1042 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 1043 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 1044 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 1045 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 1046 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 1047 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 1048 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 1049 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 1050 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 1051 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 1052 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 1053 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 1054 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 1055 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 1056 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 1057 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 1058 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 1059 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 1060 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 1061 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 1062 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 1063 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1064 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1065 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1066 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1067 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1068 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1069 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1070 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1071 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1072 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1073 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1074 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1075 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1076 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1077 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1078 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1079 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1080 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1081 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1082 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1083 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1084 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1085 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1086 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1087 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1088 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1089 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1090 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1091 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1092 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1093 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1094 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1095 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1096 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1097 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1098 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1099 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1100 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1101 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1102 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1103 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1104 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1105 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1106 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1107 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1108 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1109 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1110 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1111 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1112 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1113 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1114 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1115 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1116 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1117 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1118 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1119 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1120 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1121 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1122 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1123 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1124 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1125 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1126 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1127 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1128 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1129 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1130 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1131 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1132 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1133 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1134 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1135 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1136 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1137 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1138 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1139 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1140 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1141 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1142 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1143 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.115669
    test 1144 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.010307
    test 1145 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.015203
    test 1146 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1147 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1148 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1149 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1150 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1151 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1152 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1153 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1154 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1155 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1156 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1157 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1158 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1159 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1160 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1161 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1162 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1163 closed: True
    test 1164 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1165 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1166 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1167 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1168 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1169 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1170 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1171 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1172 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1173 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1174 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1175 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1176 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1177 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1178 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1179 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1180 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1181 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1182 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1183 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1184 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1185 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1186 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1187 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1188 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1189 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1190 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1191 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1192 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1193 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1194 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1195 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1196 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1197 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1198 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1199 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1200 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1201 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1202 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1203 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1204 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1205 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1206 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1207 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1208 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1209 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1210 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1211 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1212 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1213 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1214 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1215 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1216 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1217 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1218 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1219 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1220 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1221 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1222 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1223 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1224 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1225 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1226 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1227 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1228 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1229 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1230 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1231 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1232 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1233 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1234 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1235 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1236 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1237 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1238 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1239 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1240 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1241 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1242 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1243 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1244 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1245 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1246 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1247 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1248 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1249 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1250 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1251 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1252 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1253 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1254 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1255 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1256 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1257 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1258 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1259 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1260 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1261 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1262 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1263 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1264 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1265 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1266 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1267 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1268 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1269 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1270 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1271 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1272 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1273 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1274 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1275 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1276 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1277 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1278 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1279 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1280 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1281 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1282 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1283 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1284 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1285 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1286 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1287 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1288 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1289 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1290 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1291 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1292 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1293 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1294 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1295 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1296 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1297 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1298 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1299 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1300 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1301 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1302 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1303 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1304 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1305 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1306 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1307 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1308 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1309 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1310 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1311 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1312 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1313 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1314 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1315 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1316 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1317 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1318 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1319 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1320 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1321 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1322 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1323 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1324 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1325 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1326 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1327 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1328 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1329 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1330 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1331 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1332 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1333 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1334 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1335 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1336 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1337 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1338 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1339 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1340 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1341 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1342 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1343 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1344 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1345 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1346 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1347 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1348 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1349 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1350 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1351 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1352 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1353 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1354 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1355 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1356 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1357 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1358 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1359 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1360 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1361 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1362 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1363 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1364 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1365 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1366 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1367 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1368 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1369 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1370 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1371 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1372 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1373 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1374 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1375 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1376 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005459
    test 1377 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000736
    test 1378 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000728
    test 1379 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1380 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1381 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1382 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1383 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1384 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1385 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1386 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1387 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1388 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1389 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1390 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1391 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1392 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1393 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1394 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1395 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1396 closed: True
    test 1397 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1398 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)

    232 tests skipped (696): no scipy

    31 tests skipped (727): no scipy

    778 of 1398 testGeoids.py tests (55.7%) FAILED, ALL KNOWN, 727 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 60.307 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testGreatCircle.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.F_DMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.classname from .named by testGreatCircle.py line 40
# lazily imported pygeodesy.bearingDMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.CrossError from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.crosserrors from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.sphericalNvector by testGreatCircle.py line 190
# lazily imported pygeodesy.sphericalTrigonometry by testGreatCircle.py line 190

    testing testGreatCircle.py 23.05.05 isLazy=3

    testGreatCircle(pygeodesy.sphericalNvector, 24.11.07)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: point (LatLon(43°55′51.28″N, 072°03′13.72″W)) or other (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: point (LatLon(43°55′51.28″N, 072°03′13.72″W)), other (LatLon(43°55′51.28″N, 072°03′13.72″W)) or wrap (False): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 37.533 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testHausdorff.py
./pygeodesy/hausdorff.py:658: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  self._func = self.datum.ellipsoid.geodesic.Inverse1
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Datums from .datums by testHausdorff.py line 12
# lazily imported pygeodesy.fstr from .streprs by testHausdorff.py line 12
# lazily imported pygeodesy.hausdorff_ from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineForsytheAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDegrees from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDistanceTo from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffRadians from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineLaw from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEquirectangular from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEuclidean from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffExact from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatLocal from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatPolar from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHaversine from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHubeny from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffKarney from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffThomas from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffVincentys from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testHausdorff.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testHausdorff.py line 12

    testing testHausdorff.py 23.03.27 isLazy=3
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (0, 1)
    test 4 randomrange[8]: (1, 4, 2, 6, 0, 3, 5, 7)
    test 5 randomrange[32]: (11, 6, 30, 28, 21, 9, 13, 26, 4, 29, 8, 27, 31, 15, 1, 24, 0, 25, 22, 2, 20, 17, 3, 23, 12, 19, 18, 14, 7, 10, 16, 5)
    test 6 randomrange[128]: (122, 62, 14, 24, 65, 57, 75, 84, 42, 32, 82, 43, 13, 34, 53, 104, 71, 22, 76, 15, 108, 113, 52, 79, 112, 54, 90, 106, 10, 87, 115, 123, 119, 120, 48, 61, 39, 19, 31, 94, 124, 98, 96, 3, 101, 25, 118, 30, 99, 105, 92, 66, 126, 114, 23, 117, 72, 67, 73, 64, 68, 50, 5, 74, 51, 9, 17, 21, 80, 95, 41, 37, 2, 11, 55, 127, 38, 85, 81, 109, 36, 121, 6, 102, 12, 1, 93, 91, 83, 16, 116, 103, 70, 56, 89, 35, 88, 86, 27, 20, 44, 110, 63, 28, 8, 4, 18, 45, 78, 100, 60, 125, 58, 33, 0, 7, 40, 59, 46, 69, 26, 77, 107, 47, 49, 97, 111, 29)
# lazily imported pygeodesy.booleans by iters.py line 503
    test 7 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 8 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 9 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 10 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 11 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 12 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 13 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 14 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 18 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 19 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 20 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 21 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 22 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 23 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 24 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 28 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 29 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 30 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 31 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 32 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 33 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 34 HausdorffCosineAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 38 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 39 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, 0.21184)
    test 40 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, 0.20084)
    test 41 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (meter): (0.501, 35, 3, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, 0.212)
    test 48 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, 0.20099)
    test 49 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, 0.212)
    test 50 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, 0.20099)
    test 51 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, None)
    test 52 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, None)
    test 53 HausdorffCosineLaw (meter): (0.50097, 35, 3, 90, None)
    test 54 HausdorffCosineLaw (meter): (0.50097, 35, 3, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, 0.05965)
    test 58 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, 0.05532)
    test 59 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, 0.05965)
    test 60 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, 0.05532)
    test 61 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, None)
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
    test 62 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, None)
    test 63 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 90, None)
    test 64 HausdorffEquirectangular (degrees2): (0.25113, 35, 3, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, 0.22571)
    test 68 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, 0.21579)
    test 69 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, 0.22571)
    test 70 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, 0.21579)
    test 71 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, None)
    test 72 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, None)
    test 73 HausdorffEuclidean (meter): (0.52803, 56, 51, 90, None)
    test 74 HausdorffEuclidean (meter): (0.52803, 56, 51, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 78 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 79 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 80 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 81 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, 0.22286)
    test 88 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, 0.21318)
    test 89 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, 0.22286)
    test 90 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, 0.21318)
    test 91 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, None)
    test 92 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, None)
    test 93 HausdorffFlatPolar (meter): (0.69043, 4, 31, 90, None)
    test 94 HausdorffFlatPolar (meter): (0.69043, 4, 31, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (meter): (0.50097, 35, 3, 90, 0.212)
    test 98 HausdorffHaversine (meter): (0.50097, 35, 3, 150, 0.20099)
    test 99 HausdorffHaversine (meter): (0.50097, 35, 3, 90, 0.212)
    test 100 HausdorffHaversine (meter): (0.50097, 35, 3, 150, 0.20099)
    test 101 HausdorffHaversine (meter): (0.50097, 35, 3, 90, None)
    test 102 HausdorffHaversine (meter): (0.50097, 35, 3, 150, None)
    test 103 HausdorffHaversine (meter): (0.50097, 35, 3, 90, None)
    test 104 HausdorffHaversine (meter): (0.50097, 35, 3, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 108 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 109 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 110 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 111 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 112 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 113 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 114 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (meter): (0.501, 35, 3, 90, 0.21184)
    test 118 HausdorffThomas (meter): (0.501, 35, 3, 150, 0.20084)
    test 119 HausdorffThomas (meter): (0.501, 35, 3, 90, 0.21184)
    test 120 HausdorffThomas (meter): (0.501, 35, 3, 150, 0.20084)
    test 121 HausdorffThomas (meter): (0.501, 35, 3, 90, None)
    test 122 HausdorffThomas (meter): (0.501, 35, 3, 150, None)
    test 123 HausdorffThomas (meter): (0.501, 35, 3, 90, None)
    test 124 HausdorffThomas (meter): (0.501, 35, 3, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (meter): (0.50097, 35, 3, 90, 0.212)
    test 128 HausdorffVincentys (meter): (0.50097, 35, 3, 150, 0.20099)
    test 129 HausdorffVincentys (meter): (0.50097, 35, 3, 90, 0.212)
    test 130 HausdorffVincentys (meter): (0.50097, 35, 3, 150, 0.20099)
    test 131 HausdorffVincentys (meter): (0.50097, 35, 3, 90, None)
    test 132 HausdorffVincentys (meter): (0.50097, 35, 3, 150, None)
    test 133 HausdorffVincentys (meter): (0.50097, 35, 3, 90, None)
    test 134 HausdorffVincentys (meter): (0.50097, 35, 3, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 137 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 138 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 139 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 140 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 141 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 142 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 143 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 144 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 145 copy(HausdorffKarney): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 146 HausdorffKarney.copy(): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 147 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 148 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 149 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 150 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 151 hausdorff_: (40.0, 22, 6, 90, None)
    test 152 hausdorff_: (48.0, 38, 36, 150, None)
    test 153 hausdorff_: (40.0, 22, 6, 90, None)
    test 154 hausdorff_: (48.0, 38, 36, 150, None)
# lazily imported pygeodesy.ellipsoidalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.ellipsoidalVincenty by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalTrigonometry by testHausdorff.py line 270
# lazily imported pygeodesy.ellipsoidalKarney by testHausdorff.py line 275
    test 155 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 156 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 157 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 158 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 159 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 160 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 161 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 162 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 163 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 164 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 165 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 166 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 167 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 168 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 169 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 170 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 171 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 172 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 173 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 174 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 175 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 176 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 177 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 178 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 179 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 180 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 181 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 182 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 183 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 184 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 185 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 186 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 187 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 188 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 189 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 190 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 191 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 192 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 193 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 194 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 195 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 196 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 197 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 198 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 199 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 200 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 201 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 202 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 203 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 204 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)

    156 of 204 testHausdorff.py tests (76.5%) FAILED, incl. 2 KNOWN plus 154 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 97.514 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testHeights.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Datums from .datums by testHeights.py line 17
# lazily imported pygeodesy.fstr from .streprs by testHeights.py line 17
# lazily imported pygeodesy.HeightError from .heights by testHeights.py line 17
# lazily imported pygeodesy.SciPyError from .errors by testHeights.py line 17
# lazily imported pygeodesy.HeightCubic from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineForsytheAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineLaw from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWdistanceTo from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWexact from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatLocal from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatPolar from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhubeny from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWkarney from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWthomas from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWvincentys from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLinear from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLSQBiSpline from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightSmoothBiSpline from .heights by testHeights.py line 17

    testing testHeights.py 23.05.14 isLazy=3
    test 1 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 2 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 3 HeightIDWcosineAndoyerLambert(wrap=False): 6.111157919
    test 4 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 5 HeightIDWcosineAndoyerLambert(latlon): True
    test 6 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 7 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 8 HeightIDWcosineAndoyerLambert(latlon): True
    test 9 HeightIDWcosineAndoyerLambert(wrap=False): (6.111157919, 5.0,)
    test 10 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 11 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 12 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 13 HeightIDWcosineAndoyerLambert(wrap=False): [6.111157919, 5.0]
    test 14 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 15 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 16 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 HeightIDWcosineAndoyerLambert.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 19 HeightIDWcosineAndoyerLambert.kmin: 2
    test 20 HeightIDWcosineAndoyerLambert.wrap: False
    test 21 HeightIDWcosineAndoyerLambert.beta: 2
    test 22 HeightIDWcosineAndoyerLambert.adjust: None
    test 23 HeightIDWcosineAndoyerLambert.beta: 2
    test 24 HeightIDWcosineAndoyerLambert.kmin: 2
    test 25 HeightIDWcosineAndoyerLambert.wrap: False
    test 26 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 27 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 28 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.111158354
    test 29 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 30 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 31 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 32 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 33 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 34 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.111158354, 5.0,)
    test 35 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 36 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 37 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 38 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.111158354, 5.0]
    test 39 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 40 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 41 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 42 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 43 HeightIDWcosineForsytheAndoyerLambert.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 44 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 45 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 46 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 47 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 48 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 49 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 50 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 51 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 52 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 53 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 54 HeightIDWcosineLaw(float): <class 'float'>
    test 55 HeightIDWcosineLaw(latlon): True
    test 56 HeightIDWcosineLaw(wrap=True): 5.0
    test 57 HeightIDWcosineLaw(float): <class 'float'>
    test 58 HeightIDWcosineLaw(latlon): True
    test 59 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 60 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 61 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 62 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 63 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 64 HeightIDWcosineLaw(list: <class 'list'>
    test 65 HeightIDWcosineLaw(list-float): <class 'float'>
    test 66 HeightIDWcosineLaw(list-float): <class 'float'>
    test 67 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 68 HeightIDWcosineLaw.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 69 HeightIDWcosineLaw.kmin: 2
    test 70 HeightIDWcosineLaw.wrap: True
    test 71 HeightIDWcosineLaw.beta: 2
    test 72 HeightIDWcosineLaw.adjust: None
    test 73 HeightIDWcosineLaw.beta: 2
    test 74 HeightIDWcosineLaw.kmin: 2
    test 75 HeightIDWcosineLaw.wrap: True
    test 76 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 77 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 78 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 79 HeightIDWcosineLaw(float): <class 'float'>
    test 80 HeightIDWcosineLaw(latlon): True
    test 81 HeightIDWcosineLaw(wrap=False): 5.0
    test 82 HeightIDWcosineLaw(float): <class 'float'>
    test 83 HeightIDWcosineLaw(latlon): True
    test 84 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 85 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 86 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 87 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 88 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 89 HeightIDWcosineLaw(list: <class 'list'>
    test 90 HeightIDWcosineLaw(list-float): <class 'float'>
    test 91 HeightIDWcosineLaw(list-float): <class 'float'>
    test 92 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 93 HeightIDWcosineLaw.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 94 HeightIDWcosineLaw.kmin: 2
    test 95 HeightIDWcosineLaw.wrap: False
    test 96 HeightIDWcosineLaw.beta: 2
    test 97 HeightIDWcosineLaw.adjust: None
    test 98 HeightIDWcosineLaw.beta: 2
    test 99 HeightIDWcosineLaw.kmin: 2
    test 100 HeightIDWcosineLaw.wrap: False
    test 101 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 102 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 103 HeightIDWdistanceTo(): 6.108538037
    test 104 HeightIDWdistanceTo(float): <class 'float'>
    test 105 HeightIDWdistanceTo(latlon): True
    test 106 HeightIDWdistanceTo(): 5.0
    test 107 HeightIDWdistanceTo(float): <class 'float'>
    test 108 HeightIDWdistanceTo(latlon): True
    test 109 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 110 HeightIDWdistanceTo(tuple): <class 'tuple'>
    test 111 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 112 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 113 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 114 HeightIDWdistanceTo(list: <class 'list'>
    test 115 HeightIDWdistanceTo(list-float): <class 'float'>
    test 116 HeightIDWdistanceTo(list-float): <class 'float'>
    test 117 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 118 HeightIDWdistanceTo.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 119 HeightIDWdistanceTo.kmin: 2
    test 120 HeightIDWdistanceTo.wrap: None
    test 121 HeightIDWdistanceTo.beta: 2
    test 122 HeightIDWdistanceTo.adjust: None
    test 123 HeightIDWdistanceTo.beta: 2
    test 124 HeightIDWdistanceTo.kmin: 2
    test 125 HeightIDWdistanceTo.wrap: None
    test 126 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 127 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 128 HeightIDWequirectangular(adjust=True, wrap=True): 6.860459007
    test 129 HeightIDWequirectangular(float): <class 'float'>
    test 130 HeightIDWequirectangular(latlon): True
    test 131 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 132 HeightIDWequirectangular(float): <class 'float'>
    test 133 HeightIDWequirectangular(latlon): True
    test 134 HeightIDWequirectangular(adjust=True, wrap=True): (6.860459007, 5.0,)
    test 135 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 136 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 137 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 138 HeightIDWequirectangular(adjust=True, wrap=True): [6.860459007, 5.0]
    test 139 HeightIDWequirectangular(list: <class 'list'>
    test 140 HeightIDWequirectangular(list-float): <class 'float'>
    test 141 HeightIDWequirectangular(list-float): <class 'float'>
    test 142 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 143 HeightIDWequirectangular.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 144 HeightIDWequirectangular.kmin: 2
    test 145 HeightIDWequirectangular.wrap: True
    test 146 HeightIDWequirectangular.beta: 2
    test 147 HeightIDWequirectangular.adjust: True
    test 148 HeightIDWequirectangular.beta: 2
    test 149 HeightIDWequirectangular.kmin: 2
    test 150 HeightIDWequirectangular.wrap: True
    test 151 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 152 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 153 HeightIDWequirectangular(adjust=False, wrap=True): 6.860498092
    test 154 HeightIDWequirectangular(float): <class 'float'>
    test 155 HeightIDWequirectangular(latlon): True
    test 156 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 157 HeightIDWequirectangular(float): <class 'float'>
    test 158 HeightIDWequirectangular(latlon): True
    test 159 HeightIDWequirectangular(adjust=False, wrap=True): (6.860498092, 5.0,)
    test 160 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 161 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 162 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 163 HeightIDWequirectangular(adjust=False, wrap=True): [6.860498092, 5.0]
    test 164 HeightIDWequirectangular(list: <class 'list'>
    test 165 HeightIDWequirectangular(list-float): <class 'float'>
    test 166 HeightIDWequirectangular(list-float): <class 'float'>
    test 167 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 168 HeightIDWequirectangular.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 169 HeightIDWequirectangular.kmin: 2
    test 170 HeightIDWequirectangular.wrap: True
    test 171 HeightIDWequirectangular.beta: 2
    test 172 HeightIDWequirectangular.adjust: False
    test 173 HeightIDWequirectangular.beta: 2
    test 174 HeightIDWequirectangular.kmin: 2
    test 175 HeightIDWequirectangular.wrap: True
    test 176 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 177 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 178 HeightIDWeuclidean(): 6.142945781
    test 179 HeightIDWeuclidean(float): <class 'float'>
    test 180 HeightIDWeuclidean(latlon): True
    test 181 HeightIDWeuclidean(): 5.0
    test 182 HeightIDWeuclidean(float): <class 'float'>
    test 183 HeightIDWeuclidean(latlon): True
    test 184 HeightIDWeuclidean(): (6.142945781, 5.0,)
    test 185 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 186 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 187 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 188 HeightIDWeuclidean(): [6.142945781, 5.0]
    test 189 HeightIDWeuclidean(list: <class 'list'>
    test 190 HeightIDWeuclidean(list-float): <class 'float'>
    test 191 HeightIDWeuclidean(list-float): <class 'float'>
    test 192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 193 HeightIDWeuclidean.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 194 HeightIDWeuclidean.kmin: 2
    test 195 HeightIDWeuclidean.wrap: None
    test 196 HeightIDWeuclidean.beta: 2
    test 197 HeightIDWeuclidean.adjust: None
    test 198 HeightIDWeuclidean.beta: 2
    test 199 HeightIDWeuclidean.kmin: 2
    test 200 HeightIDWeuclidean.wrap: None
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
    test 201 copy(HeightIDWexact): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 202 HeightIDWexact.copy(): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 203 HeightIDWexact(): 6.108538037
    test 204 HeightIDWexact(float): <class 'float'>
    test 205 HeightIDWexact(latlon): True
    test 206 HeightIDWexact(): 5.0
    test 207 HeightIDWexact(float): <class 'float'>
    test 208 HeightIDWexact(latlon): True
    test 209 HeightIDWexact(): (6.108538037, 5.0,)
    test 210 HeightIDWexact(tuple): <class 'tuple'>
    test 211 HeightIDWexact(tuple-float): <class 'float'>
    test 212 HeightIDWexact(tuple-float): <class 'float'>
    test 213 HeightIDWexact(): [6.108538037, 5.0]
    test 214 HeightIDWexact(list: <class 'list'>
    test 215 HeightIDWexact(list-float): <class 'float'>
    test 216 HeightIDWexact(list-float): <class 'float'>
    test 217 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 218 HeightIDWexact.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 219 HeightIDWexact.kmin: 2
    test 220 HeightIDWexact.wrap: None
    test 221 HeightIDWexact.beta: 2
    test 222 HeightIDWexact.adjust: None
    test 223 HeightIDWexact.beta: 2
    test 224 HeightIDWexact.kmin: 2
    test 225 HeightIDWexact.wrap: None
    test 226 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 227 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 228 HeightIDWflatLocal(): 6.111158784
    test 229 HeightIDWflatLocal(float): <class 'float'>
    test 230 HeightIDWflatLocal(latlon): True
    test 231 HeightIDWflatLocal(): 5.0
    test 232 HeightIDWflatLocal(float): <class 'float'>
    test 233 HeightIDWflatLocal(latlon): True
    test 234 HeightIDWflatLocal(): (6.111158784, 5.0,)
    test 235 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 236 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 237 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 238 HeightIDWflatLocal(): [6.111158784, 5.0]
    test 239 HeightIDWflatLocal(list: <class 'list'>
    test 240 HeightIDWflatLocal(list-float): <class 'float'>
    test 241 HeightIDWflatLocal(list-float): <class 'float'>
    test 242 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 243 HeightIDWflatLocal.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 244 HeightIDWflatLocal.kmin: 2
    test 245 HeightIDWflatLocal.wrap: None
    test 246 HeightIDWflatLocal.beta: 2
    test 247 HeightIDWflatLocal.adjust: None
    test 248 HeightIDWflatLocal.beta: 2
    test 249 HeightIDWflatLocal.kmin: 2
    test 250 HeightIDWflatLocal.wrap: None
    test 251 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 252 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 253 HeightIDWflatPolar(): 6.261469975
    test 254 HeightIDWflatPolar(float): <class 'float'>
    test 255 HeightIDWflatPolar(latlon): True
    test 256 HeightIDWflatPolar(): 5.0
    test 257 HeightIDWflatPolar(float): <class 'float'>
    test 258 HeightIDWflatPolar(latlon): True
    test 259 HeightIDWflatPolar(): (6.261469975, 5.0,)
    test 260 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 261 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 262 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 263 HeightIDWflatPolar(): [6.261469975, 5.0]
    test 264 HeightIDWflatPolar(list: <class 'list'>
    test 265 HeightIDWflatPolar(list-float): <class 'float'>
    test 266 HeightIDWflatPolar(list-float): <class 'float'>
    test 267 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 268 HeightIDWflatPolar.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 269 HeightIDWflatPolar.kmin: 2
    test 270 HeightIDWflatPolar.wrap: None
    test 271 HeightIDWflatPolar.beta: 2
    test 272 HeightIDWflatPolar.adjust: None
    test 273 HeightIDWflatPolar.beta: 2
    test 274 HeightIDWflatPolar.kmin: 2
    test 275 HeightIDWflatPolar.wrap: None
    test 276 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 277 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 278 HeightIDWhaversine(): 6.108538037
    test 279 HeightIDWhaversine(float): <class 'float'>
    test 280 HeightIDWhaversine(latlon): True
    test 281 HeightIDWhaversine(): 5.0
    test 282 HeightIDWhaversine(float): <class 'float'>
    test 283 HeightIDWhaversine(latlon): True
    test 284 HeightIDWhaversine(): (6.108538037, 5.0,)
    test 285 HeightIDWhaversine(tuple): <class 'tuple'>
    test 286 HeightIDWhaversine(tuple-float): <class 'float'>
    test 287 HeightIDWhaversine(tuple-float): <class 'float'>
    test 288 HeightIDWhaversine(): [6.108538037, 5.0]
    test 289 HeightIDWhaversine(list: <class 'list'>
    test 290 HeightIDWhaversine(list-float): <class 'float'>
    test 291 HeightIDWhaversine(list-float): <class 'float'>
    test 292 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 293 HeightIDWhaversine.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 294 HeightIDWhaversine.kmin: 2
    test 295 HeightIDWhaversine.wrap: None
    test 296 HeightIDWhaversine.beta: 2
    test 297 HeightIDWhaversine.adjust: None
    test 298 HeightIDWhaversine.beta: 2
    test 299 HeightIDWhaversine.kmin: 2
    test 300 HeightIDWhaversine.wrap: None
    test 301 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 302 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 303 HeightIDWhubeny(): 6.111158784
    test 304 HeightIDWhubeny(float): <class 'float'>
    test 305 HeightIDWhubeny(latlon): True
    test 306 HeightIDWhubeny(): 5.0
    test 307 HeightIDWhubeny(float): <class 'float'>
    test 308 HeightIDWhubeny(latlon): True
    test 309 HeightIDWhubeny(): (6.111158784, 5.0,)
    test 310 HeightIDWhubeny(tuple): <class 'tuple'>
    test 311 HeightIDWhubeny(tuple-float): <class 'float'>
    test 312 HeightIDWhubeny(tuple-float): <class 'float'>
    test 313 HeightIDWhubeny(): [6.111158784, 5.0]
    test 314 HeightIDWhubeny(list: <class 'list'>
    test 315 HeightIDWhubeny(list-float): <class 'float'>
    test 316 HeightIDWhubeny(list-float): <class 'float'>
    test 317 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 318 HeightIDWhubeny.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 319 HeightIDWhubeny.kmin: 2
    test 320 HeightIDWhubeny.wrap: None
    test 321 HeightIDWhubeny.beta: 2
    test 322 HeightIDWhubeny.adjust: None
    test 323 HeightIDWhubeny.beta: 2
    test 324 HeightIDWhubeny.kmin: 2
    test 325 HeightIDWhubeny.wrap: None
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 326 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 327 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 328 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 6.111158743
    test 329 HeightIDWkarney(float): <class 'float'>
    test 330 HeightIDWkarney(latlon): True
    test 331 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 5.0
    test 332 HeightIDWkarney(float): <class 'float'>
    test 333 HeightIDWkarney(latlon): True
    test 334 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (6.111158743, 5.0,)
    test 335 HeightIDWkarney(tuple): <class 'tuple'>
    test 336 HeightIDWkarney(tuple-float): <class 'float'>
    test 337 HeightIDWkarney(tuple-float): <class 'float'>
    test 338 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [6.111158743, 5.0]
    test 339 HeightIDWkarney(list: <class 'list'>
    test 340 HeightIDWkarney(list-float): <class 'float'>
    test 341 HeightIDWkarney(list-float): <class 'float'>
    test 342 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 343 HeightIDWkarney.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 344 HeightIDWkarney.kmin: 2
    test 345 HeightIDWkarney.wrap: True
    test 346 HeightIDWkarney.beta: 2
    test 347 HeightIDWkarney.adjust: None
    test 348 HeightIDWkarney.beta: 2
    test 349 HeightIDWkarney.kmin: 2
    test 350 HeightIDWkarney.wrap: True
    test 351 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 352 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 353 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 6.111158743
    test 354 HeightIDWkarney(float): <class 'float'>
    test 355 HeightIDWkarney(latlon): True
    test 356 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 5.0
    test 357 HeightIDWkarney(float): <class 'float'>
    test 358 HeightIDWkarney(latlon): True
    test 359 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (6.111158743, 5.0,)
    test 360 HeightIDWkarney(tuple): <class 'tuple'>
    test 361 HeightIDWkarney(tuple-float): <class 'float'>
    test 362 HeightIDWkarney(tuple-float): <class 'float'>
    test 363 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [6.111158743, 5.0]
    test 364 HeightIDWkarney(list: <class 'list'>
    test 365 HeightIDWkarney(list-float): <class 'float'>
    test 366 HeightIDWkarney(list-float): <class 'float'>
    test 367 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 368 HeightIDWkarney.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 369 HeightIDWkarney.kmin: 2
    test 370 HeightIDWkarney.wrap: False
    test 371 HeightIDWkarney.beta: 2
    test 372 HeightIDWkarney.adjust: None
    test 373 HeightIDWkarney.beta: 2
    test 374 HeightIDWkarney.kmin: 2
    test 375 HeightIDWkarney.wrap: False
    test 376 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 377 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 378 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 6.108538037
    test 379 HeightIDWkarney(float): <class 'float'>
    test 380 HeightIDWkarney(latlon): True
    test 381 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 5.0
    test 382 HeightIDWkarney(float): <class 'float'>
    test 383 HeightIDWkarney(latlon): True
    test 384 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (6.108538037, 5.0,)
    test 385 HeightIDWkarney(tuple): <class 'tuple'>
    test 386 HeightIDWkarney(tuple-float): <class 'float'>
    test 387 HeightIDWkarney(tuple-float): <class 'float'>
    test 388 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [6.108538037, 5.0]
    test 389 HeightIDWkarney(list: <class 'list'>
    test 390 HeightIDWkarney(list-float): <class 'float'>
    test 391 HeightIDWkarney(list-float): <class 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 HeightIDWkarney.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 394 HeightIDWkarney.kmin: 2
    test 395 HeightIDWkarney.wrap: True
    test 396 HeightIDWkarney.beta: 2
    test 397 HeightIDWkarney.adjust: None
    test 398 HeightIDWkarney.beta: 2
    test 399 HeightIDWkarney.kmin: 2
    test 400 HeightIDWkarney.wrap: True
    test 401 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 402 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 403 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 6.108538037
    test 404 HeightIDWkarney(float): <class 'float'>
    test 405 HeightIDWkarney(latlon): True
    test 406 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 5.0
    test 407 HeightIDWkarney(float): <class 'float'>
    test 408 HeightIDWkarney(latlon): True
    test 409 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (6.108538037, 5.0,)
    test 410 HeightIDWkarney(tuple): <class 'tuple'>
    test 411 HeightIDWkarney(tuple-float): <class 'float'>
    test 412 HeightIDWkarney(tuple-float): <class 'float'>
    test 413 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [6.108538037, 5.0]
    test 414 HeightIDWkarney(list: <class 'list'>
    test 415 HeightIDWkarney(list-float): <class 'float'>
    test 416 HeightIDWkarney(list-float): <class 'float'>
    test 417 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 418 HeightIDWkarney.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 419 HeightIDWkarney.kmin: 2
    test 420 HeightIDWkarney.wrap: False
    test 421 HeightIDWkarney.beta: 2
    test 422 HeightIDWkarney.adjust: None
    test 423 HeightIDWkarney.beta: 2
    test 424 HeightIDWkarney.kmin: 2
    test 425 HeightIDWkarney.wrap: False
    test 426 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 427 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 428 HeightIDWthomas(wrap=True): 6.111159454
    test 429 HeightIDWthomas(float): <class 'float'>
    test 430 HeightIDWthomas(latlon): True
    test 431 HeightIDWthomas(wrap=True): 5.0
    test 432 HeightIDWthomas(float): <class 'float'>
    test 433 HeightIDWthomas(latlon): True
    test 434 HeightIDWthomas(wrap=True): (6.111159454, 5.0,)
    test 435 HeightIDWthomas(tuple): <class 'tuple'>
    test 436 HeightIDWthomas(tuple-float): <class 'float'>
    test 437 HeightIDWthomas(tuple-float): <class 'float'>
    test 438 HeightIDWthomas(wrap=True): [6.111159454, 5.0]
    test 439 HeightIDWthomas(list: <class 'list'>
    test 440 HeightIDWthomas(list-float): <class 'float'>
    test 441 HeightIDWthomas(list-float): <class 'float'>
    test 442 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 443 HeightIDWthomas.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 444 HeightIDWthomas.kmin: 2
    test 445 HeightIDWthomas.wrap: True
    test 446 HeightIDWthomas.beta: 2
    test 447 HeightIDWthomas.adjust: None
    test 448 HeightIDWthomas.beta: 2
    test 449 HeightIDWthomas.kmin: 2
    test 450 HeightIDWthomas.wrap: True
    test 451 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 452 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 453 HeightIDWthomas(wrap=False): 6.111159454
    test 454 HeightIDWthomas(float): <class 'float'>
    test 455 HeightIDWthomas(latlon): True
    test 456 HeightIDWthomas(wrap=False): 5.0
    test 457 HeightIDWthomas(float): <class 'float'>
    test 458 HeightIDWthomas(latlon): True
    test 459 HeightIDWthomas(wrap=False): (6.111159454, 5.0,)
    test 460 HeightIDWthomas(tuple): <class 'tuple'>
    test 461 HeightIDWthomas(tuple-float): <class 'float'>
    test 462 HeightIDWthomas(tuple-float): <class 'float'>
    test 463 HeightIDWthomas(wrap=False): [6.111159454, 5.0]
    test 464 HeightIDWthomas(list: <class 'list'>
    test 465 HeightIDWthomas(list-float): <class 'float'>
    test 466 HeightIDWthomas(list-float): <class 'float'>
    test 467 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 468 HeightIDWthomas.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 469 HeightIDWthomas.kmin: 2
    test 470 HeightIDWthomas.wrap: False
    test 471 HeightIDWthomas.beta: 2
    test 472 HeightIDWthomas.adjust: None
    test 473 HeightIDWthomas.beta: 2
    test 474 HeightIDWthomas.kmin: 2
    test 475 HeightIDWthomas.wrap: False
    test 476 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 477 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 478 HeightIDWvincentys(wrap=True): 6.108538037
    test 479 HeightIDWvincentys(float): <class 'float'>
    test 480 HeightIDWvincentys(latlon): True
    test 481 HeightIDWvincentys(wrap=True): 5.0
    test 482 HeightIDWvincentys(float): <class 'float'>
    test 483 HeightIDWvincentys(latlon): True
    test 484 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 485 HeightIDWvincentys(tuple): <class 'tuple'>
    test 486 HeightIDWvincentys(tuple-float): <class 'float'>
    test 487 HeightIDWvincentys(tuple-float): <class 'float'>
    test 488 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 489 HeightIDWvincentys(list: <class 'list'>
    test 490 HeightIDWvincentys(list-float): <class 'float'>
    test 491 HeightIDWvincentys(list-float): <class 'float'>
    test 492 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 493 HeightIDWvincentys.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 494 HeightIDWvincentys.kmin: 2
    test 495 HeightIDWvincentys.wrap: True
    test 496 HeightIDWvincentys.beta: 2
    test 497 HeightIDWvincentys.adjust: None
    test 498 HeightIDWvincentys.beta: 2
    test 499 HeightIDWvincentys.kmin: 2
    test 500 HeightIDWvincentys.wrap: True
    test 501 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 502 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 503 HeightIDWvincentys(wrap=False): 6.108538037
    test 504 HeightIDWvincentys(float): <class 'float'>
    test 505 HeightIDWvincentys(latlon): True
    test 506 HeightIDWvincentys(wrap=False): 5.0
    test 507 HeightIDWvincentys(float): <class 'float'>
    test 508 HeightIDWvincentys(latlon): True
    test 509 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 510 HeightIDWvincentys(tuple): <class 'tuple'>
    test 511 HeightIDWvincentys(tuple-float): <class 'float'>
    test 512 HeightIDWvincentys(tuple-float): <class 'float'>
    test 513 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 514 HeightIDWvincentys(list: <class 'list'>
    test 515 HeightIDWvincentys(list-float): <class 'float'>
    test 516 HeightIDWvincentys(list-float): <class 'float'>
    test 517 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 518 HeightIDWvincentys.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 519 HeightIDWvincentys.kmin: 2
    test 520 HeightIDWvincentys.wrap: False
    test 521 HeightIDWvincentys.beta: 2
    test 522 HeightIDWvincentys.adjust: None
    test 523 HeightIDWvincentys.beta: 2
    test 524 HeightIDWvincentys.kmin: 2
    test 525 HeightIDWvincentys.wrap: False
    test 526 intersection: 02.64932°N, 002.550079°E, +2.50m

    test 527 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 528 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 529 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742781
    test 530 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 531 HeightIDWcosineAndoyerLambert(latlon): True
    test 532 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 533 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 534 HeightIDWcosineAndoyerLambert(latlon): True
    test 535 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742781, 3.0,)
    test 536 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 537 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 538 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 539 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742781, 3.0]
    test 540 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 541 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 542 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 543 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 544 HeightIDWcosineAndoyerLambert.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 545 HeightIDWcosineAndoyerLambert.kmin: 2
    test 546 HeightIDWcosineAndoyerLambert.wrap: False
    test 547 HeightIDWcosineAndoyerLambert.beta: 2
    test 548 HeightIDWcosineAndoyerLambert.adjust: None
    test 549 HeightIDWcosineAndoyerLambert.beta: 2
    test 550 HeightIDWcosineAndoyerLambert.kmin: 2
    test 551 HeightIDWcosineAndoyerLambert.wrap: False
    test 552 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 553 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 554 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742781
    test 555 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 556 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 557 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 558 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 559 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 560 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742781, 3.0,)
    test 561 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 562 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 563 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 564 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742781, 3.0]
    test 565 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 566 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 567 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 568 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 569 HeightIDWcosineForsytheAndoyerLambert.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 570 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 571 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 572 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 573 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 574 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 575 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 576 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 577 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 578 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 579 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 580 HeightIDWcosineLaw(float): <class 'float'>
    test 581 HeightIDWcosineLaw(latlon): True
    test 582 HeightIDWcosineLaw(wrap=True): 3.0
    test 583 HeightIDWcosineLaw(float): <class 'float'>
    test 584 HeightIDWcosineLaw(latlon): True
    test 585 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 586 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 587 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 588 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 589 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 590 HeightIDWcosineLaw(list: <class 'list'>
    test 591 HeightIDWcosineLaw(list-float): <class 'float'>
    test 592 HeightIDWcosineLaw(list-float): <class 'float'>
    test 593 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 594 HeightIDWcosineLaw.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 595 HeightIDWcosineLaw.kmin: 2
    test 596 HeightIDWcosineLaw.wrap: True
    test 597 HeightIDWcosineLaw.beta: 2
    test 598 HeightIDWcosineLaw.adjust: None
    test 599 HeightIDWcosineLaw.beta: 2
    test 600 HeightIDWcosineLaw.kmin: 2
    test 601 HeightIDWcosineLaw.wrap: True
    test 602 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 603 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 604 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 605 HeightIDWcosineLaw(float): <class 'float'>
    test 606 HeightIDWcosineLaw(latlon): True
    test 607 HeightIDWcosineLaw(wrap=False): 3.0
    test 608 HeightIDWcosineLaw(float): <class 'float'>
    test 609 HeightIDWcosineLaw(latlon): True
    test 610 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 611 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 612 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 613 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 614 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 615 HeightIDWcosineLaw(list: <class 'list'>
    test 616 HeightIDWcosineLaw(list-float): <class 'float'>
    test 617 HeightIDWcosineLaw(list-float): <class 'float'>
    test 618 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 619 HeightIDWcosineLaw.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 620 HeightIDWcosineLaw.kmin: 2
    test 621 HeightIDWcosineLaw.wrap: False
    test 622 HeightIDWcosineLaw.beta: 2
    test 623 HeightIDWcosineLaw.adjust: None
    test 624 HeightIDWcosineLaw.beta: 2
    test 625 HeightIDWcosineLaw.kmin: 2
    test 626 HeightIDWcosineLaw.wrap: False
    test 627 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 628 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 629 HeightIDWequirectangular(adjust=True, wrap=True): 2.689429914
    test 630 HeightIDWequirectangular(float): <class 'float'>
    test 631 HeightIDWequirectangular(latlon): True
    test 632 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 633 HeightIDWequirectangular(float): <class 'float'>
    test 634 HeightIDWequirectangular(latlon): True
    test 635 HeightIDWequirectangular(adjust=True, wrap=True): (2.689429914, 3.0,)
    test 636 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 637 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 638 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 639 HeightIDWequirectangular(adjust=True, wrap=True): [2.689429914, 3.0]
    test 640 HeightIDWequirectangular(list: <class 'list'>
    test 641 HeightIDWequirectangular(list-float): <class 'float'>
    test 642 HeightIDWequirectangular(list-float): <class 'float'>
    test 643 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 644 HeightIDWequirectangular.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 645 HeightIDWequirectangular.kmin: 2
    test 646 HeightIDWequirectangular.wrap: True
    test 647 HeightIDWequirectangular.beta: 2
    test 648 HeightIDWequirectangular.adjust: True
    test 649 HeightIDWequirectangular.beta: 2
    test 650 HeightIDWequirectangular.kmin: 2
    test 651 HeightIDWequirectangular.wrap: True
    test 652 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 653 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 654 HeightIDWequirectangular(adjust=False, wrap=True): 2.689413401
    test 655 HeightIDWequirectangular(float): <class 'float'>
    test 656 HeightIDWequirectangular(latlon): True
    test 657 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 658 HeightIDWequirectangular(float): <class 'float'>
    test 659 HeightIDWequirectangular(latlon): True
    test 660 HeightIDWequirectangular(adjust=False, wrap=True): (2.689413401, 3.0,)
    test 661 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 662 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 663 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 664 HeightIDWequirectangular(adjust=False, wrap=True): [2.689413401, 3.0]
    test 665 HeightIDWequirectangular(list: <class 'list'>
    test 666 HeightIDWequirectangular(list-float): <class 'float'>
    test 667 HeightIDWequirectangular(list-float): <class 'float'>
    test 668 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 669 HeightIDWequirectangular.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 670 HeightIDWequirectangular.kmin: 2
    test 671 HeightIDWequirectangular.wrap: True
    test 672 HeightIDWequirectangular.beta: 2
    test 673 HeightIDWequirectangular.adjust: False
    test 674 HeightIDWequirectangular.beta: 2
    test 675 HeightIDWequirectangular.kmin: 2
    test 676 HeightIDWequirectangular.wrap: True
    test 677 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 678 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 679 HeightIDWeuclidean(adjust=False): 2.592735541
    test 680 HeightIDWeuclidean(float): <class 'float'>
    test 681 HeightIDWeuclidean(latlon): True
    test 682 HeightIDWeuclidean(adjust=False): 3.0
    test 683 HeightIDWeuclidean(float): <class 'float'>
    test 684 HeightIDWeuclidean(latlon): True
    test 685 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 686 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 687 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 688 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 689 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 690 HeightIDWeuclidean(list: <class 'list'>
    test 691 HeightIDWeuclidean(list-float): <class 'float'>
    test 692 HeightIDWeuclidean(list-float): <class 'float'>
    test 693 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 694 HeightIDWeuclidean.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 695 HeightIDWeuclidean.kmin: 2
    test 696 HeightIDWeuclidean.wrap: None
    test 697 HeightIDWeuclidean.beta: 2
    test 698 HeightIDWeuclidean.adjust: False
    test 699 HeightIDWeuclidean.beta: 2
    test 700 HeightIDWeuclidean.kmin: 2
    test 701 HeightIDWeuclidean.wrap: None
    test 702 copy(HeightIDWexact): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 703 HeightIDWexact.copy(): (<class 'pygeodesy.heights.HeightIDWexact'>, True)
    test 704 HeightIDWexact(): 2.592742938
    test 705 HeightIDWexact(float): <class 'float'>
    test 706 HeightIDWexact(latlon): True
    test 707 HeightIDWexact(): 3.0
    test 708 HeightIDWexact(float): <class 'float'>
    test 709 HeightIDWexact(latlon): True
    test 710 HeightIDWexact(): (2.592742938, 3.0,)
    test 711 HeightIDWexact(tuple): <class 'tuple'>
    test 712 HeightIDWexact(tuple-float): <class 'float'>
    test 713 HeightIDWexact(tuple-float): <class 'float'>
    test 714 HeightIDWexact(): [2.592742938, 3.0]
    test 715 HeightIDWexact(list: <class 'list'>
    test 716 HeightIDWexact(list-float): <class 'float'>
    test 717 HeightIDWexact(list-float): <class 'float'>
    test 718 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 719 HeightIDWexact.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 720 HeightIDWexact.kmin: 2
    test 721 HeightIDWexact.wrap: None
    test 722 HeightIDWexact.beta: 2
    test 723 HeightIDWexact.adjust: None
    test 724 HeightIDWexact.beta: 2
    test 725 HeightIDWexact.kmin: 2
    test 726 HeightIDWexact.wrap: None
    test 727 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 728 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 729 HeightIDWflatLocal(): 2.592743288
    test 730 HeightIDWflatLocal(float): <class 'float'>
    test 731 HeightIDWflatLocal(latlon): True
    test 732 HeightIDWflatLocal(): 3.0
    test 733 HeightIDWflatLocal(float): <class 'float'>
    test 734 HeightIDWflatLocal(latlon): True
    test 735 HeightIDWflatLocal(): (2.592743288, 3.0,)
    test 736 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 737 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 738 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 739 HeightIDWflatLocal(): [2.592743288, 3.0]
    test 740 HeightIDWflatLocal(list: <class 'list'>
    test 741 HeightIDWflatLocal(list-float): <class 'float'>
    test 742 HeightIDWflatLocal(list-float): <class 'float'>
    test 743 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 744 HeightIDWflatLocal.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 745 HeightIDWflatLocal.kmin: 2
    test 746 HeightIDWflatLocal.wrap: None
    test 747 HeightIDWflatLocal.beta: 2
    test 748 HeightIDWflatLocal.adjust: None
    test 749 HeightIDWflatLocal.beta: 2
    test 750 HeightIDWflatLocal.kmin: 2
    test 751 HeightIDWflatLocal.wrap: None
    test 752 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 753 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 754 HeightIDWflatPolar(): 2.592973059
    test 755 HeightIDWflatPolar(float): <class 'float'>
    test 756 HeightIDWflatPolar(latlon): True
    test 757 HeightIDWflatPolar(): 3.0
    test 758 HeightIDWflatPolar(float): <class 'float'>
    test 759 HeightIDWflatPolar(latlon): True
    test 760 HeightIDWflatPolar(): (2.592973059, 3.0,)
    test 761 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 762 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 763 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 764 HeightIDWflatPolar(): [2.592973059, 3.0]
    test 765 HeightIDWflatPolar(list: <class 'list'>
    test 766 HeightIDWflatPolar(list-float): <class 'float'>
    test 767 HeightIDWflatPolar(list-float): <class 'float'>
    test 768 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 769 HeightIDWflatPolar.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 770 HeightIDWflatPolar.kmin: 2
    test 771 HeightIDWflatPolar.wrap: None
    test 772 HeightIDWflatPolar.beta: 2
    test 773 HeightIDWflatPolar.adjust: None
    test 774 HeightIDWflatPolar.beta: 2
    test 775 HeightIDWflatPolar.kmin: 2
    test 776 HeightIDWflatPolar.wrap: None
    test 777 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 778 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 779 HeightIDWhaversine(): 2.592742938
    test 780 HeightIDWhaversine(float): <class 'float'>
    test 781 HeightIDWhaversine(latlon): True
    test 782 HeightIDWhaversine(): 3.0
    test 783 HeightIDWhaversine(float): <class 'float'>
    test 784 HeightIDWhaversine(latlon): True
    test 785 HeightIDWhaversine(): (2.592742938, 3.0,)
    test 786 HeightIDWhaversine(tuple): <class 'tuple'>
    test 787 HeightIDWhaversine(tuple-float): <class 'float'>
    test 788 HeightIDWhaversine(tuple-float): <class 'float'>
    test 789 HeightIDWhaversine(): [2.592742938, 3.0]
    test 790 HeightIDWhaversine(list: <class 'list'>
    test 791 HeightIDWhaversine(list-float): <class 'float'>
    test 792 HeightIDWhaversine(list-float): <class 'float'>
    test 793 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 794 HeightIDWhaversine.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 795 HeightIDWhaversine.kmin: 2
    test 796 HeightIDWhaversine.wrap: None
    test 797 HeightIDWhaversine.beta: 2
    test 798 HeightIDWhaversine.adjust: None
    test 799 HeightIDWhaversine.beta: 2
    test 800 HeightIDWhaversine.kmin: 2
    test 801 HeightIDWhaversine.wrap: None
    test 802 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 803 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 804 HeightIDWhubeny(): 2.592743288
    test 805 HeightIDWhubeny(float): <class 'float'>
    test 806 HeightIDWhubeny(latlon): True
    test 807 HeightIDWhubeny(): 3.0
    test 808 HeightIDWhubeny(float): <class 'float'>
    test 809 HeightIDWhubeny(latlon): True
    test 810 HeightIDWhubeny(): (2.592743288, 3.0,)
    test 811 HeightIDWhubeny(tuple): <class 'tuple'>
    test 812 HeightIDWhubeny(tuple-float): <class 'float'>
    test 813 HeightIDWhubeny(tuple-float): <class 'float'>
    test 814 HeightIDWhubeny(): [2.592743288, 3.0]
    test 815 HeightIDWhubeny(list: <class 'list'>
    test 816 HeightIDWhubeny(list-float): <class 'float'>
    test 817 HeightIDWhubeny(list-float): <class 'float'>
    test 818 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 819 HeightIDWhubeny.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 820 HeightIDWhubeny.kmin: 2
    test 821 HeightIDWhubeny.wrap: None
    test 822 HeightIDWhubeny.beta: 2
    test 823 HeightIDWhubeny.adjust: None
    test 824 HeightIDWhubeny.beta: 2
    test 825 HeightIDWhubeny.kmin: 2
    test 826 HeightIDWhubeny.wrap: None
    test 827 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 828 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 829 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 2.592742915
    test 830 HeightIDWkarney(float): <class 'float'>
    test 831 HeightIDWkarney(latlon): True
    test 832 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 3.0
    test 833 HeightIDWkarney(float): <class 'float'>
    test 834 HeightIDWkarney(latlon): True
    test 835 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (2.592742915, 3.0,)
    test 836 HeightIDWkarney(tuple): <class 'tuple'>
    test 837 HeightIDWkarney(tuple-float): <class 'float'>
    test 838 HeightIDWkarney(tuple-float): <class 'float'>
    test 839 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [2.592742915, 3.0]
    test 840 HeightIDWkarney(list: <class 'list'>
    test 841 HeightIDWkarney(list-float): <class 'float'>
    test 842 HeightIDWkarney(list-float): <class 'float'>
    test 843 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 844 HeightIDWkarney.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 845 HeightIDWkarney.kmin: 2
    test 846 HeightIDWkarney.wrap: True
    test 847 HeightIDWkarney.beta: 2
    test 848 HeightIDWkarney.adjust: None
    test 849 HeightIDWkarney.beta: 2
    test 850 HeightIDWkarney.kmin: 2
    test 851 HeightIDWkarney.wrap: True
    test 852 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 853 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 854 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 2.592742915
    test 855 HeightIDWkarney(float): <class 'float'>
    test 856 HeightIDWkarney(latlon): True
    test 857 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 3.0
    test 858 HeightIDWkarney(float): <class 'float'>
    test 859 HeightIDWkarney(latlon): True
    test 860 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (2.592742915, 3.0,)
    test 861 HeightIDWkarney(tuple): <class 'tuple'>
    test 862 HeightIDWkarney(tuple-float): <class 'float'>
    test 863 HeightIDWkarney(tuple-float): <class 'float'>
    test 864 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [2.592742915, 3.0]
    test 865 HeightIDWkarney(list: <class 'list'>
    test 866 HeightIDWkarney(list-float): <class 'float'>
    test 867 HeightIDWkarney(list-float): <class 'float'>
    test 868 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 869 HeightIDWkarney.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 870 HeightIDWkarney.kmin: 2
    test 871 HeightIDWkarney.wrap: False
    test 872 HeightIDWkarney.beta: 2
    test 873 HeightIDWkarney.adjust: None
    test 874 HeightIDWkarney.beta: 2
    test 875 HeightIDWkarney.kmin: 2
    test 876 HeightIDWkarney.wrap: False
    test 877 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 878 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 879 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 2.592742938
    test 880 HeightIDWkarney(float): <class 'float'>
    test 881 HeightIDWkarney(latlon): True
    test 882 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 3.0
    test 883 HeightIDWkarney(float): <class 'float'>
    test 884 HeightIDWkarney(latlon): True
    test 885 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (2.592742938, 3.0,)
    test 886 HeightIDWkarney(tuple): <class 'tuple'>
    test 887 HeightIDWkarney(tuple-float): <class 'float'>
    test 888 HeightIDWkarney(tuple-float): <class 'float'>
    test 889 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [2.592742938, 3.0]
    test 890 HeightIDWkarney(list: <class 'list'>
    test 891 HeightIDWkarney(list-float): <class 'float'>
    test 892 HeightIDWkarney(list-float): <class 'float'>
    test 893 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 894 HeightIDWkarney.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 895 HeightIDWkarney.kmin: 2
    test 896 HeightIDWkarney.wrap: True
    test 897 HeightIDWkarney.beta: 2
    test 898 HeightIDWkarney.adjust: None
    test 899 HeightIDWkarney.beta: 2
    test 900 HeightIDWkarney.kmin: 2
    test 901 HeightIDWkarney.wrap: True
    test 902 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 903 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 904 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 2.592742938
    test 905 HeightIDWkarney(float): <class 'float'>
    test 906 HeightIDWkarney(latlon): True
    test 907 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 3.0
    test 908 HeightIDWkarney(float): <class 'float'>
    test 909 HeightIDWkarney(latlon): True
    test 910 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (2.592742938, 3.0,)
    test 911 HeightIDWkarney(tuple): <class 'tuple'>
    test 912 HeightIDWkarney(tuple-float): <class 'float'>
    test 913 HeightIDWkarney(tuple-float): <class 'float'>
    test 914 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [2.592742938, 3.0]
    test 915 HeightIDWkarney(list: <class 'list'>
    test 916 HeightIDWkarney(list-float): <class 'float'>
    test 917 HeightIDWkarney(list-float): <class 'float'>
    test 918 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 919 HeightIDWkarney.datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 920 HeightIDWkarney.kmin: 2
    test 921 HeightIDWkarney.wrap: False
    test 922 HeightIDWkarney.beta: 2
    test 923 HeightIDWkarney.adjust: None
    test 924 HeightIDWkarney.beta: 2
    test 925 HeightIDWkarney.kmin: 2
    test 926 HeightIDWkarney.wrap: False
    test 927 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 928 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 929 HeightIDWthomas(wrap=True): 2.592742781
    test 930 HeightIDWthomas(float): <class 'float'>
    test 931 HeightIDWthomas(latlon): True
    test 932 HeightIDWthomas(wrap=True): 3.0
    test 933 HeightIDWthomas(float): <class 'float'>
    test 934 HeightIDWthomas(latlon): True
    test 935 HeightIDWthomas(wrap=True): (2.592742781, 3.0,)
    test 936 HeightIDWthomas(tuple): <class 'tuple'>
    test 937 HeightIDWthomas(tuple-float): <class 'float'>
    test 938 HeightIDWthomas(tuple-float): <class 'float'>
    test 939 HeightIDWthomas(wrap=True): [2.592742781, 3.0]
    test 940 HeightIDWthomas(list: <class 'list'>
    test 941 HeightIDWthomas(list-float): <class 'float'>
    test 942 HeightIDWthomas(list-float): <class 'float'>
    test 943 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 944 HeightIDWthomas.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 945 HeightIDWthomas.kmin: 2
    test 946 HeightIDWthomas.wrap: True
    test 947 HeightIDWthomas.beta: 2
    test 948 HeightIDWthomas.adjust: None
    test 949 HeightIDWthomas.beta: 2
    test 950 HeightIDWthomas.kmin: 2
    test 951 HeightIDWthomas.wrap: True
    test 952 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 953 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 954 HeightIDWthomas(wrap=False): 2.592742781
    test 955 HeightIDWthomas(float): <class 'float'>
    test 956 HeightIDWthomas(latlon): True
    test 957 HeightIDWthomas(wrap=False): 3.0
    test 958 HeightIDWthomas(float): <class 'float'>
    test 959 HeightIDWthomas(latlon): True
    test 960 HeightIDWthomas(wrap=False): (2.592742781, 3.0,)
    test 961 HeightIDWthomas(tuple): <class 'tuple'>
    test 962 HeightIDWthomas(tuple-float): <class 'float'>
    test 963 HeightIDWthomas(tuple-float): <class 'float'>
    test 964 HeightIDWthomas(wrap=False): [2.592742781, 3.0]
    test 965 HeightIDWthomas(list: <class 'list'>
    test 966 HeightIDWthomas(list-float): <class 'float'>
    test 967 HeightIDWthomas(list-float): <class 'float'>
    test 968 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 969 HeightIDWthomas.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 970 HeightIDWthomas.kmin: 2
    test 971 HeightIDWthomas.wrap: False
    test 972 HeightIDWthomas.beta: 2
    test 973 HeightIDWthomas.adjust: None
    test 974 HeightIDWthomas.beta: 2
    test 975 HeightIDWthomas.kmin: 2
    test 976 HeightIDWthomas.wrap: False
    test 977 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 978 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 979 HeightIDWvincentys(wrap=True): 2.592742938
    test 980 HeightIDWvincentys(float): <class 'float'>
    test 981 HeightIDWvincentys(latlon): True
    test 982 HeightIDWvincentys(wrap=True): 3.0
    test 983 HeightIDWvincentys(float): <class 'float'>
    test 984 HeightIDWvincentys(latlon): True
    test 985 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 986 HeightIDWvincentys(tuple): <class 'tuple'>
    test 987 HeightIDWvincentys(tuple-float): <class 'float'>
    test 988 HeightIDWvincentys(tuple-float): <class 'float'>
    test 989 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 990 HeightIDWvincentys(list: <class 'list'>
    test 991 HeightIDWvincentys(list-float): <class 'float'>
    test 992 HeightIDWvincentys(list-float): <class 'float'>
    test 993 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 994 HeightIDWvincentys.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 995 HeightIDWvincentys.kmin: 2
    test 996 HeightIDWvincentys.wrap: True
    test 997 HeightIDWvincentys.beta: 2
    test 998 HeightIDWvincentys.adjust: None
    test 999 HeightIDWvincentys.beta: 2
    test 1000 HeightIDWvincentys.kmin: 2
    test 1001 HeightIDWvincentys.wrap: True
    test 1002 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1003 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1004 HeightIDWvincentys(wrap=False): 2.592742938
    test 1005 HeightIDWvincentys(float): <class 'float'>
    test 1006 HeightIDWvincentys(latlon): True
    test 1007 HeightIDWvincentys(wrap=False): 3.0
    test 1008 HeightIDWvincentys(float): <class 'float'>
    test 1009 HeightIDWvincentys(latlon): True
    test 1010 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 1011 HeightIDWvincentys(tuple): <class 'tuple'>
    test 1012 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1013 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1014 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 1015 HeightIDWvincentys(list: <class 'list'>
    test 1016 HeightIDWvincentys(list-float): <class 'float'>
    test 1017 HeightIDWvincentys(list-float): <class 'float'>
    test 1018 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1019 HeightIDWvincentys.datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1020 HeightIDWvincentys.kmin: 2
    test 1021 HeightIDWvincentys.wrap: False
    test 1022 HeightIDWvincentys.beta: 2
    test 1023 HeightIDWvincentys.adjust: None
    test 1024 HeightIDWvincentys.beta: 2
    test 1025 HeightIDWvincentys.kmin: 2
    test 1026 HeightIDWvincentys.wrap: False

    80 tests skipped (80): No module named 'numpy': required by heights.HeightLinear

    8 of 1026 testHeights.py tests (0.8%) FAILED, incl. 8 DeprecationWarnings, 80 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 747.950 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testInterns.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.machine from .internals by testInterns.py line 11

    testing testInterns.py 24.10.14 (module pygeodesy.interns 24.10.19) isLazy=3
    test 1 _0_ = '0': True
    test 2 _0_ = '0': 0
    test 3 _0to9_ = '0123456789': True
    test 4 _0to9_ = '0123456789': 0123456789  FAILED, KNOWN, expected 0to9
    test 5 _1_ = '1': True
    test 6 _1_ = '1': 1
    test 7 _2_ = '2': True
    test 8 _2_ = '2': 2
    test 9 _3_ = '3': True
    test 10 _3_ = '3': 3
    test 11 _4_ = '4': True
    test 12 _4_ = '4': 4
    test 13 __all__ = ('NN', 'Str_'): False  FAILED, KNOWN, expected True
    test 14 __builtins__ = {'__name__': 'builtins', ....) for help about object.}: False  FAILED, KNOWN, expected True
    test 15 __cached__ = './pygeodesy/__pycache__/interns.cpython-313.pyc': True
    test 16 __doc__ = "Single C{str}ing constan.... L{pygeodesy.machine}.\n": True
    test 17 __file__ = './pygeodesy/interns.py': True
    test 18 __loader__ = <_frozen_importlib_extern....er object at 0x1016c5a90>: False  FAILED, KNOWN, expected True
    test 19 __name__ = 'pygeodesy.interns': True
    test 20 __package__ = 'pygeodesy': True
    test 21 __spec__ = ModuleSpec(name='pygeodes....'./pygeodesy/interns.py'): False  FAILED, KNOWN, expected True
    test 22 __version__ = '24.10.19': True
    test 23 _a12_ = 'a12': True
    test 24 _a12_ = 'a12': a12
    test 25 _A_ = 'A': True
    test 26 _A_ = 'A': a
    test 27 _a_ = 'a': True
    test 28 _a_ = 'a': a
    test 29 _Airy1830_ = 'Airy1830': True
    test 30 _Airy1830_ = 'Airy1830': airy1830
    test 31 _AiryModified_ = 'AiryModified': True
    test 32 _AiryModified_ = 'AiryModified': airymodified
    test 33 _ambiguous_ = 'ambiguous': True
    test 34 _ambiguous_ = 'ambiguous': ambiguous
    test 35 _AMPERSAND_ = '&': True
    test 36 _AMPERSAND_ = '&': &  FAILED, KNOWN, expected ampersand
    test 37 _an_ = 'an': True
    test 38 _an_ = 'an': an
    test 39 _and_ = 'and': True
    test 40 _and_ = 'and': and
    test 41 _angle_ = 'angle': True
    test 42 _angle_ = 'angle': angle
    test 43 _antipodal_ = 'antipodal': True
    test 44 _antipodal_ = 'antipodal': antipodal
    test 45 _area_ = 'area': True
    test 46 _area_ = 'area': area
    test 47 _arg_ = 'arg': True
    test 48 _arg_ = 'arg': arg
    test 49 _AT_ = '@': True
    test 50 _AT_ = '@': @  FAILED, KNOWN, expected at
    test 51 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': True
    test 52 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': abcdefghjklmnpqrstuvwxyz  FAILED, KNOWN, expected atoznoio
    test 53 _attribute_ = 'attribute': True
    test 54 _attribute_ = 'attribute': attribute
    test 55 _azi12_ = 'azi12': True
    test 56 _azi12_ = 'azi12': azi12
    test 57 _azi1_ = 'azi1': True
    test 58 _azi1_ = 'azi1': azi1
    test 59 _azi2_ = 'azi2': True
    test 60 _azi2_ = 'azi2': azi2
    test 61 _azimuth_ = 'azimuth': True
    test 62 _azimuth_ = 'azimuth': azimuth
    test 63 _B_ = 'B': True
    test 64 _B_ = 'B': b
    test 65 _b_ = 'b': True
    test 66 _b_ = 'b': b
    test 67 _BACKSLASH_ = '\\': True
    test 68 _BACKSLASH_ = '\\': \  FAILED, KNOWN, expected backslash
    test 69 _band_ = 'band': True
    test 70 _band_ = 'band': band
    test 71 _BANG_ = '!': True
    test 72 _BANG_ = '!': !  FAILED, KNOWN, expected bang
    test 73 _BAR_ = '|': True
    test 74 _BAR_ = '|': |  FAILED, KNOWN, expected bar
    test 75 _bearing_ = 'bearing': True
    test 76 _bearing_ = 'bearing': bearing
    test 77 _Bessel1841_ = 'Bessel1841': True
    test 78 _Bessel1841_ = 'Bessel1841': bessel1841
    test 79 _beta_ = 'beta': True
    test 80 _beta_ = 'beta': beta
    test 81 _by_ = 'by': True
    test 82 _by_ = 'by': by
    test 83 _C_ = 'C': True
    test 84 _C_ = 'C': c
    test 85 _c_ = 'c': True
    test 86 _c_ = 'c': c
    test 87 _cartesian_ = 'cartesian': True
    test 88 _cartesian_ = 'cartesian': cartesian
    test 89 _center_ = 'center': True
    test 90 _center_ = 'center': center
    test 91 _Clarke1866_ = 'Clarke1866': True
    test 92 _Clarke1866_ = 'Clarke1866': clarke1866
    test 93 _Clarke1880IGN_ = 'Clarke1880IGN': True
    test 94 _Clarke1880IGN_ = 'Clarke1880IGN': clarke1880ign
    test 95 _clip_ = 'clip': True
    test 96 _clip_ = 'clip': clip
    test 97 _clipid_ = 'clipid': True
    test 98 _clipid_ = 'clipid': clipid
    test 99 _coincident_ = 'coincident': True
    test 100 _coincident_ = 'coincident': coincident
    test 101 _colinear_ = 'colinear': True
    test 102 _colinear_ = 'colinear': colinear
    test 103 _COLON_ = ':': True
    test 104 _COLON_ = ':': :  FAILED, KNOWN, expected colon
    test 105 _COLONSPACE_ = ': ': True
    test 106 _COLONSPACE_ = ': ': :   FAILED, KNOWN, expected colonspace
    test 107 _COMMA_ = ',': True
    test 108 _COMMA_ = ',': ,  FAILED, KNOWN, expected comma
    test 109 _COMMASPACE_ = ', ': True
    test 110 _COMMASPACE_ = ', ': ,   FAILED, KNOWN, expected commaspace
    test 111 _composite_ = 'composite': True
    test 112 _composite_ = 'composite': composite
    test 113 _concentric_ = 'concentric': True
    test 114 _concentric_ = 'concentric': concentric
    test 115 _convergence_ = 'convergence': True
    test 116 _convergence_ = 'convergence': convergence
    test 117 _conversion_ = 'conversion': True
    test 118 _conversion_ = 'conversion': conversion
    test 119 _convex_ = 'convex': True
    test 120 _convex_ = 'convex': convex
    test 121 _D_ = 'D': True
    test 122 _D_ = 'D': d
    test 123 _d_ = 'd': True
    test 124 _d_ = 'd': d
    test 125 _DASH_ = '-': True
    test 126 _DASH_ = '-': -  FAILED, KNOWN, expected dash
    test 127 _datum_ = 'datum': True
    test 128 _datum_ = 'datum': datum
    test 129 _DDOT_ = '..': True
    test 130 _DDOT_ = '..': ..  FAILED, KNOWN, expected ddot
    test 131 _decode3_ = 'decode3': True
    test 132 _decode3_ = 'decode3': decode3
    test 133 _deg_ = 'deg': True
    test 134 _deg_ = 'deg': deg
    test 135 _degrees2_ = 'degrees2': True
    test 136 _degrees2_ = 'degrees2': degrees2
    test 137 _degrees_ = 'degrees': True
    test 138 _degrees_ = 'degrees': degrees
    test 139 _delta_ = 'delta': True
    test 140 _delta_ = 'delta': delta
    test 141 _DEPRECATED_ = 'DEPRECATED': True
    test 142 _DEPRECATED_ = 'DEPRECATED': deprecated
    test 143 _DEQUALSPACED_ = ' == ': True
    test 144 _DEQUALSPACED_ = ' == ':  ==   FAILED, KNOWN, expected dequalspaced
    test 145 _distance_ = 'distance': True
    test 146 _distance_ = 'distance': distance
    test 147 _distant_ = 'distant': True
    test 148 _distant_ = 'distant': distant
    test 149 _doesn_t_exist_ = "doesn't exist": True
    test 150 _doesn_t_exist_ = "doesn't exist": doesn't exist  FAILED, KNOWN, expected doesn_t_exist
    test 151 _DOT_ = '.': True
    test 152 _DOT_ = '.': .  FAILED, KNOWN, expected dot
    test 153 _DUNDER_ = '__': True
    test 154 _DUNDER_ = '__': __  FAILED, KNOWN, expected dunder
    test 155 _DUNDER_all_ = '__all__': True
    test 156 _DUNDER_all_ = '__all__': __all__  FAILED, KNOWN, expected dunder_all
    test 157 _DUNDER_name_ = '__name__': True
    test 158 _DUNDER_name_ = '__name__': __name__  FAILED, KNOWN, expected dunder_name
    test 159 _duplicate_ = 'duplicate': True
    test 160 _duplicate_ = 'duplicate': duplicate
    test 161 _E_ = 'E': True
    test 162 _E_ = 'E': e
    test 163 _e_ = 'e': True
    test 164 _e_ = 'e': e
    test 165 _earth_ = 'earth': True
    test 166 _earth_ = 'earth': earth
    test 167 _easting_ = 'easting': True
    test 168 _easting_ = 'easting': easting
    test 169 _ecef_ = 'ecef': True
    test 170 _ecef_ = 'ecef': ecef
    test 171 _edge_ = 'edge': True
    test 172 _edge_ = 'edge': edge
    test 173 _elevation_ = 'elevation': True
    test 174 _elevation_ = 'elevation': elevation
    test 175 _ELLIPSIS4_ = '....': True
    test 176 _ELLIPSIS4_ = '....': ....  FAILED, KNOWN, expected ellipsis4
    test 177 _ELLIPSIS_ = '...': True
    test 178 _ELLIPSIS_ = '...': ...  FAILED, KNOWN, expected ellipsis
    test 179 _ellipsoid_ = 'ellipsoid': True
    test 180 _ellipsoid_ = 'ellipsoid': ellipsoid
    test 181 _ellipsoidal_ = 'ellipsoidal': True
    test 182 _ellipsoidal_ = 'ellipsoidal': ellipsoidal
    test 183 _encode_ = 'encode': True
    test 184 _encode_ = 'encode': encode
    test 185 _end_ = 'end': True
    test 186 _end_ = 'end': end
    test 187 _epoch_ = 'epoch': True
    test 188 _epoch_ = 'epoch': epoch
    test 189 _eps_ = 'eps': True
    test 190 _eps_ = 'eps': eps
    test 191 _EQUAL_ = '=': True
    test 192 _EQUAL_ = '=': =  FAILED, KNOWN, expected equal
    test 193 _EQUALSPACED_ = ' = ': True
    test 194 _EQUALSPACED_ = ' = ':  =   FAILED, KNOWN, expected equalspaced
    test 195 _Error_ = 'Error': True
    test 196 _Error_ = 'Error': error
    test 197 _EW_ = 'EW': True
    test 198 _EW_ = 'EW': ew
    test 199 _exceed_PI_radians_ = 'exceed PI radians': True
    test 200 _exceed_PI_radians_ = 'exceed PI radians': exceed pi radians  FAILED, KNOWN, expected exceed_pi_radians
    test 201 _exceeds_ = 'exceeds': True
    test 202 _exceeds_ = 'exceeds': exceeds
    test 203 _exists_ = 'exists': True
    test 204 _exists_ = 'exists': exists
    test 205 _F_ = 'F': True
    test 206 _F_ = 'F': f
    test 207 _f_ = 'f': True
    test 208 _f_ = 'f': f
    test 209 _feet_ = 'feet': True
    test 210 _feet_ = 'feet': feet
    test 211 _few_ = 'few': True
    test 212 _few_ = 'few': few
    test 213 _fi_ = 'fi': True
    test 214 _fi_ = 'fi': fi
    test 215 _finite_ = 'finite': True
    test 216 _finite_ = 'finite': finite
    test 217 _from_ = 'from': True
    test 218 _from_ = 'from': from
    test 219 _g_ = 'g': True
    test 220 _g_ = 'g': g
    test 221 _gamma_ = 'gamma': True
    test 222 _gamma_ = 'gamma': gamma
    test 223 _GRS80_ = 'GRS80': True
    test 224 _GRS80_ = 'GRS80': grs80
    test 225 _H_ = 'H': True
    test 226 _H_ = 'H': h
    test 227 _h_ = 'h': True
    test 228 _h_ = 'h': h
    test 229 _HASH_ = '#': True
    test 230 _HASH_ = '#': #  FAILED, KNOWN, expected hash
    test 231 _height_ = 'height': True
    test 232 _height_ = 'height': height
    test 233 _hemipole_ = 'hemipole': True
    test 234 _hemipole_ = 'hemipole': hemipole
    test 235 _i_ = 'i': True
    test 236 _i_ = 'i': i
    test 237 _immutable_ = 'immutable': True
    test 238 _immutable_ = 'immutable': immutable
    test 239 _in_ = 'in': True
    test 240 _in_ = 'in': in
    test 241 _incompatible_ = 'incompatible': True
    test 242 _incompatible_ = 'incompatible': incompatible
    test 243 _INF_ = 'INF': True
    test 244 _INF_ = 'INF': inf
    test 245 _infinite_ = 'infinite': True
    test 246 _infinite_ = 'infinite': infinite
    test 247 _initial_ = 'initial': True
    test 248 _initial_ = 'initial': initial
    test 249 _inside_ = 'inside': True
    test 250 _inside_ = 'inside': inside
    test 251 _insufficient_ = 'insufficient': True
    test 252 _insufficient_ = 'insufficient': insufficient
    test 253 _intersection_ = 'intersection': True
    test 254 _intersection_ = 'intersection': intersection
    test 255 _Intl1924_ = 'Intl1924': True
    test 256 _Intl1924_ = 'Intl1924': intl1924
    test 257 _INV_ = 'INV': True
    test 258 _INV_ = 'INV': inv
    test 259 _invalid_ = 'invalid': True
    test 260 _invalid_ = 'invalid': invalid
    test 261 _invokation_ = 'invokation': True
    test 262 _invokation_ = 'invokation': invokation
    test 263 _j_ = 'j': True
    test 264 _j_ = 'j': j
    test 265 _k0_ = 'k0': True
    test 266 _k0_ = 'k0': k0
    test 267 _keyword_ = 'keyword': True
    test 268 _keyword_ = 'keyword': keyword
    test 269 _kind_ = 'kind': True
    test 270 _kind_ = 'kind': kind
    test 271 _Krassovski1940_ = 'Krassovski1940': True
    test 272 _Krassovski1940_ = 'Krassovski1940': krassovski1940
    test 273 _Krassowsky1940_ = 'Krassowsky1940': True
    test 274 _Krassowsky1940_ = 'Krassowsky1940': krassowsky1940
    test 275 _lam_ = 'lam': True
    test 276 _lam_ = 'lam': lam
    test 277 _LANGLE_ = '<': True
    test 278 _LANGLE_ = '<': <  FAILED, KNOWN, expected langle
    test 279 _lat0_ = 'lat0': True
    test 280 _lat0_ = 'lat0': lat0
    test 281 _lat1_ = 'lat1': True
    test 282 _lat1_ = 'lat1': lat1
    test 283 _lat2_ = 'lat2': True
    test 284 _lat2_ = 'lat2': lat2
    test 285 _lat_ = 'lat': True
    test 286 _lat_ = 'lat': lat
    test 287 _LatLon_ = 'LatLon': True
    test 288 _LatLon_ = 'LatLon': latlon
    test 289 _latlon_ = 'latlon': True
    test 290 _latlon_ = 'latlon': latlon
    test 291 _LCURLY_ = '{': True
    test 292 _LCURLY_ = '{': {  FAILED, KNOWN, expected lcurly
    test 293 _len_ = 'len': True
    test 294 _len_ = 'len': len
    test 295 _limit_ = 'limit': True
    test 296 _limit_ = 'limit': limit
    test 297 _line_ = 'line': True
    test 298 _line_ = 'line': line
    test 299 _lon0_ = 'lon0': True
    test 300 _lon0_ = 'lon0': lon0
    test 301 _lon1_ = 'lon1': True
    test 302 _lon1_ = 'lon1': lon1
    test 303 _lon2_ = 'lon2': True
    test 304 _lon2_ = 'lon2': lon2
    test 305 _lon_ = 'lon': True
    test 306 _lon_ = 'lon': lon
    test 307 _low_ = 'low': True
    test 308 _low_ = 'low': low
    test 309 _LPAREN_ = '(': True
    test 310 _LPAREN_ = '(': (  FAILED, KNOWN, expected lparen
    test 311 _LSQUARE_ = '[': True
    test 312 _LSQUARE_ = '[': [  FAILED, KNOWN, expected lsquare
    test 313 _ltp_ = 'ltp': True
    test 314 _ltp_ = 'ltp': ltp
    test 315 _M12_ = 'M12': True
    test 316 _M12_ = 'M12': m12
    test 317 _m12_ = 'm12': True
    test 318 _m12_ = 'm12': m12
    test 319 _M21_ = 'M21': True
    test 320 _M21_ = 'M21': m21
    test 321 _M_ = 'M': True
    test 322 _M_ = 'M': m
    test 323 _m_ = 'm': True
    test 324 _m_ = 'm': m
    test 325 _MANT_DIG_ = 'MANT_DIG': True
    test 326 _MANT_DIG_ = 'MANT_DIG': mant_dig
    test 327 _MAX_ = 'MAX': True
    test 328 _MAX_ = 'MAX': max
    test 329 _mean_ = 'mean': True
    test 330 _mean_ = 'mean': mean
    test 331 _meanOf_ = 'meanOf': True
    test 332 _meanOf_ = 'meanOf': meanof
    test 333 _meridional_ = 'meridional': True
    test 334 _meridional_ = 'meridional': meridional
    test 335 _meter2_ = 'meter2': True
    test 336 _meter2_ = 'meter2': meter2
    test 337 _meter_ = 'meter': True
    test 338 _meter_ = 'meter': meter
    test 339 _MGRS_ = 'MGRS': True
    test 340 _MGRS_ = 'MGRS': mgrs
    test 341 _MIN_ = 'MIN': True
    test 342 _MIN_ = 'MIN': min
    test 343 _MINUS_ = '-': True
    test 344 _MINUS_ = '-': -  FAILED, KNOWN, expected minus
    test 345 _module_ = 'module': True
    test 346 _module_ = 'module': module
    test 347 _N_ = 'N': True
    test 348 _N_ = 'N': n
    test 349 _n_ = 'n': True
    test 350 _n_ = 'n': n
    test 351 _N_A_ = 'N/A': True
    test 352 _N_A_ = 'N/A': n/a  FAILED, KNOWN, expected n_a
    test 353 _n_a_ = 'n/a': True
    test 354 _n_a_ = 'n/a': n/a  FAILED, KNOWN, expected n_a
    test 355 _NAD27_ = 'NAD27': True
    test 356 _NAD27_ = 'NAD27': nad27
    test 357 _NAD83_ = 'NAD83': True
    test 358 _NAD83_ = 'NAD83': nad83
    test 359 _name_ = 'name': True
    test 360 _name_ = 'name': name
    test 361 _NAN_ = 'NAN': True
    test 362 _NAN_ = 'NAN': nan
    test 363 _NE_ = 'NE': True
    test 364 _NE_ = 'NE': ne
    test 365 _near_ = 'near': True
    test 366 _near_ = 'near': near
    test 367 _nearestOn2_ = 'nearestOn2': True
    test 368 _nearestOn2_ = 'nearestOn2': neareston2
    test 369 _negative_ = 'negative': True
    test 370 _negative_ = 'negative': negative
    test 371 _NL_ = '\n': True
    test 372 _NL_ = '\n': 
  FAILED, KNOWN, expected nl
    test 373 _NLATvar_ = '\n@var ': True
    test 374 _NLATvar_ = '\n@var ': 
@var   FAILED, KNOWN, expected nlatvar
    test 375 _NLHASH_ = '\n# ': True
    test 376 _NLHASH_ = '\n# ': 
#   FAILED, KNOWN, expected nlhash
    test 377 _NN_ = 'NN': True
    test 378 _NN_ = 'NN': nn
    test 379 _no_ = 'no': True
    test 380 _no_ = 'no': no
    test 381 _northing_ = 'northing': True
    test 382 _northing_ = 'northing': northing
    test 383 _not_ = 'not': True
    test 384 _not_ = 'not': not
    test 385 _not_finite_ = 'not finite': True
    test 386 _not_finite_ = 'not finite': not finite  FAILED, KNOWN, expected not_finite
    test 387 _not_scalar_ = 'not scalar': True
    test 388 _not_scalar_ = 'not scalar': not scalar  FAILED, KNOWN, expected not_scalar
    test 389 _NOTEQUAL_ = '!=': True
    test 390 _NOTEQUAL_ = '!=': !=  FAILED, KNOWN, expected notequal
    test 391 _NS_ = 'NS': True
    test 392 _NS_ = 'NS': ns
    test 393 _NSEW_ = 'NSEW': True
    test 394 _NSEW_ = 'NSEW': nsew
    test 395 _NTF_ = 'NTF': True
    test 396 _NTF_ = 'NTF': ntf
    test 397 _null_ = 'null': True
    test 398 _null_ = 'null': null
    test 399 _number_ = 'number': True
    test 400 _number_ = 'number': number
    test 401 _numpy_ = 'numpy': True
    test 402 _numpy_ = 'numpy': numpy
    test 403 _Nv00_ = 'Nv00': True
    test 404 _Nv00_ = 'Nv00': nv00
    test 405 _NW_ = 'NW': True
    test 406 _NW_ = 'NW': nw
    test 407 _odd_ = 'odd': True
    test 408 _odd_ = 'odd': odd
    test 409 _of_ = 'of': True
    test 410 _of_ = 'of': of
    test 411 _on_ = 'on': True
    test 412 _on_ = 'on': on
    test 413 _opposite_ = 'opposite': True
    test 414 _opposite_ = 'opposite': opposite
    test 415 _or_ = 'or': True
    test 416 _or_ = 'or': or
    test 417 _other_ = 'other': True
    test 418 _other_ = 'other': other
    test 419 _outside_ = 'outside': True
    test 420 _outside_ = 'outside': outside
    test 421 _overlap_ = 'overlap': True
    test 422 _overlap_ = 'overlap': overlap
    test 423 _parallel_ = 'parallel': True
    test 424 _parallel_ = 'parallel': parallel
    test 425 _PERCENT_ = '%': True
    test 426 _PERCENT_ = '%': %  FAILED, KNOWN, expected percent
    test 427 _PERCENTDOTSTAR_ = '%.*': True
    test 428 _PERCENTDOTSTAR_ = '%.*': %.*  FAILED, KNOWN, expected percentdotstar
    test 429 _phi_ = 'phi': True
    test 430 _phi_ = 'phi': phi
    test 431 _PLUS_ = '+': True
    test 432 _PLUS_ = '+': +  FAILED, KNOWN, expected plus
    test 433 _PLUSMINUS_ = '+-': True
    test 434 _PLUSMINUS_ = '+-': +-  FAILED, KNOWN, expected plusminus
    test 435 _point_ = 'point': True
    test 436 _point_ = 'point': point
    test 437 _points_ = 'points': True
    test 438 _points_ = 'points': points
    test 439 _pole_ = 'pole': True
    test 440 _pole_ = 'pole': pole
    test 441 _precision_ = 'precision': True
    test 442 _precision_ = 'precision': precision
    test 443 _prime_vertical_ = 'prime_vertical': True
    test 444 _prime_vertical_ = 'prime_vertical': prime_vertical
    test 445 _pygeodesy_ = 'pygeodesy': True
    test 446 _pygeodesy_ = 'pygeodesy': pygeodesy
    test 447 _pygeodesy_abspath_ = 'pygeodesy_abspath': True
    test 448 _pygeodesy_abspath_ = 'pygeodesy_abspath': pygeodesy_abspath
    test 449 _PyPy__ = 'PyPy ': True
    test 450 _PyPy__ = 'PyPy ': pypy   FAILED, KNOWN, expected pypy
    test 451 _Python_ = 'Python': True
    test 452 _Python_ = 'Python': python
    test 453 _python_ = 'python': True
    test 454 _python_ = 'python': python
    test 455 _QUOTE1_ = "'": True
    test 456 _QUOTE1_ = "'": '  FAILED, KNOWN, expected quote1
    test 457 _QUOTE2_ = '"': True
    test 458 _QUOTE2_ = '"': "  FAILED, KNOWN, expected quote2
    test 459 _QUOTE3_ = "'''": True
    test 460 _QUOTE3_ = "'''": '''  FAILED, KNOWN, expected quote3
    test 461 _R_ = 'R': True
    test 462 _R_ = 'R': r
    test 463 _radians2_ = 'radians2': True
    test 464 _radians2_ = 'radians2': radians2
    test 465 _radians_ = 'radians': True
    test 466 _radians_ = 'radians': radians
    test 467 _radius1_ = 'radius1': True
    test 468 _radius1_ = 'radius1': radius1
    test 469 _radius2_ = 'radius2': True
    test 470 _radius2_ = 'radius2': radius2
    test 471 _radius_ = 'radius': True
    test 472 _radius_ = 'radius': radius
    test 473 _range_ = 'range': True
    test 474 _range_ = 'range': range
    test 475 _RANGLE_ = '>': True
    test 476 _RANGLE_ = '>': >  FAILED, KNOWN, expected rangle
    test 477 _RCURLY_ = '}': True
    test 478 _RCURLY_ = '}': }  FAILED, KNOWN, expected rcurly
    test 479 _reciprocal_ = 'reciprocal': True
    test 480 _reciprocal_ = 'reciprocal': reciprocal
    test 481 _reframe_ = 'reframe': True
    test 482 _reframe_ = 'reframe': reframe
    test 483 _resolution_ = 'resolution': True
    test 484 _resolution_ = 'resolution': resolution
    test 485 _rIn_ = 'rIn': True
    test 486 _rIn_ = 'rIn': rin
    test 487 _RPAREN_ = ')': True
    test 488 _RPAREN_ = ')': )  FAILED, KNOWN, expected rparen
    test 489 _RSQUARE_ = ']': True
    test 490 _RSQUARE_ = ']': ]  FAILED, KNOWN, expected rsquare
    test 491 _S12_ = 'S12': True
    test 492 _S12_ = 'S12': s12
    test 493 _s12_ = 's12': True
    test 494 _s12_ = 's12': s12
    test 495 _S_ = 'S': True
    test 496 _S_ = 'S': s
    test 497 _s_ = 's': True
    test 498 _s_ = 's': s
    test 499 _scalar_ = 'scalar': True
    test 500 _scalar_ = 'scalar': scalar
    test 501 _scale0_ = 'scale0': True
    test 502 _scale0_ = 'scale0': scale0
    test 503 _scale_ = 'scale': True
    test 504 _scale_ = 'scale': scale
    test 505 _scipy_ = 'scipy': True
    test 506 _scipy_ = 'scipy': scipy
    test 507 _SE_ = 'SE': True
    test 508 _SE_ = 'SE': se
    test 509 _semi_circular_ = 'semi-circular': True
    test 510 _semi_circular_ = 'semi-circular': semi-circular  FAILED, KNOWN, expected semi_circular
    test 511 _sep_ = 'sep': True
    test 512 _sep_ = 'sep': sep
    test 513 _singular_ = 'singular': True
    test 514 _singular_ = 'singular': singular
    test 515 _SLASH_ = '/': True
    test 516 _SLASH_ = '/': /  FAILED, KNOWN, expected slash
    test 517 _small_ = 'small': True
    test 518 _small_ = 'small': small
    test 519 _SPACE_ = ' ': True
    test 520 _SPACE_ = ' ':    FAILED, KNOWN, expected space
    test 521 _specified_ = 'specified': True
    test 522 _specified_ = 'specified': specified
    test 523 _Sphere_ = 'Sphere': True
    test 524 _Sphere_ = 'Sphere': sphere
    test 525 _spherical_ = 'spherical': True
    test 526 _spherical_ = 'spherical': spherical
    test 527 _STAR_ = '*': True
    test 528 _STAR_ = '*': *  FAILED, KNOWN, expected star
    test 529 _start_ = 'start': True
    test 530 _start_ = 'start': start
    test 531 _std_ = 'std': True
    test 532 _std_ = 'std': std
    test 533 _stdev_ = 'stdev': True
    test 534 _stdev_ = 'stdev': stdev
    test 535 _SW_ = 'SW': True
    test 536 _SW_ = 'SW': sw
    test 537 _tbd_ = 'tbd': True
    test 538 _tbd_ = 'tbd': tbd
    test 539 _TILDE_ = '~': True
    test 540 _TILDE_ = '~': ~  FAILED, KNOWN, expected tilde
    test 541 _to_ = 'to': True
    test 542 _to_ = 'to': to
    test 543 _tolerance_ = 'tolerance': True
    test 544 _tolerance_ = 'tolerance': tolerance
    test 545 _too_ = 'too': True
    test 546 _too_ = 'too': too
    test 547 _transform_ = 'transform': True
    test 548 _transform_ = 'transform': transform
    test 549 _UNDER_ = '_': True
    test 550 _UNDER_ = '_': _  FAILED, KNOWN, expected under
    test 551 _units_ = 'units': True
    test 552 _units_ = 'units': units
    test 553 _UNUSED_ = 'UNUSED': True
    test 554 _UNUSED_ = 'UNUSED': unused
    test 555 _up_ = 'up': True
    test 556 _up_ = 'up': up
    test 557 _UPS_ = 'UPS': True
    test 558 _UPS_ = 'UPS': ups
    test 559 _utf_8_ = 'utf-8': True
    test 560 _utf_8_ = 'utf-8': utf-8  FAILED, KNOWN, expected utf_8
    test 561 _UTM_ = 'UTM': True
    test 562 _UTM_ = 'UTM': utm
    test 563 _V_ = 'V': True
    test 564 _V_ = 'V': v
    test 565 _valid_ = 'valid': True
    test 566 _valid_ = 'valid': valid
    test 567 _value_ = 'value': True
    test 568 _value_ = 'value': value
    test 569 _version_ = 'version': True
    test 570 _version_ = 'version': version
    test 571 _vs_ = 'vs': True
    test 572 _vs_ = 'vs': vs
    test 573 _W_ = 'W': True
    test 574 _W_ = 'W': w
    test 575 _WGS72_ = 'WGS72': True
    test 576 _WGS72_ = 'WGS72': wgs72
    test 577 _WGS84_ = 'WGS84': True
    test 578 _WGS84_ = 'WGS84': wgs84
    test 579 _width_ = 'width': True
    test 580 _width_ = 'width': width
    test 581 _with_ = 'with': True
    test 582 _with_ = 'with': with
    test 583 _X_ = 'X': True
    test 584 _X_ = 'X': x
    test 585 _x_ = 'x': True
    test 586 _x_ = 'x': x
    test 587 _xyz_ = 'xyz': True
    test 588 _xyz_ = 'xyz': xyz
    test 589 _Y_ = 'Y': True
    test 590 _Y_ = 'Y': y
    test 591 _y_ = 'y': True
    test 592 _y_ = 'y': y
    test 593 _Z_ = 'Z': True
    test 594 _Z_ = 'Z': z
    test 595 _z_ = 'z': True
    test 596 _z_ = 'z': z
    test 597 _zone_ = 'zone': True
    test 598 _zone_ = 'zone': zone
    test 599 .tillC: ABC
    test 600 .fromX: XYZ
    test 601 .fromH.tillJ: HJ
    test 602 .fromN.tillP: NP

    test 603 machine: arm64
    test 604 sysctl: 0
    test 605 usage: python3 -m pygeodesy.interns
    test 606 version: (3, 13)

    61 of 606 testInterns.py tests (10.1%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 16.749 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testIters.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.PointsError from .errors by testIters.py line 11
# lazily imported pygeodesy.PointsIter from .iters by testIters.py line 11

    testing testIters.py 23.03.27 (module pygeodesy.iters 24.06.09) isLazy=3
# lazily imported pygeodesy.booleans by iters.py line 76
    test 1 i : 7
    test 2 dedup: False
    test 3 i : 0
    test 4 p0: True
    test 5 dedup: True
    test 6 copies: [0, 1, 2, 3, 4, 5, 6, 7]
    test 7 i : 0
    test 8 copies: 9
    test 9 p0: True
    test 10 copies: True
    test 11 copies: (0, 1, 2, 3, 4, 5, 6, 7)
    test 12 iter: 1
    test 13 iter: 2
    test 14 iter: 3
    test 15 re-iter: PointsError('points (0): too few')

    all 15 testIters.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 6.132 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testKarney.py
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.fsum_ from .fsums by testKarney.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testKarney.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testKarney.py line 212
# lazily imported pygeodesy.geodesicw by testKarney.py line 212
# lazily imported pygeodesy.geodesicx by testKarney.py line 212

    testing testKarney.py 24.09.04 (module pygeodesy.karney 24.11.09) isLazy=3
# lazily imported pygeodesy.ellipsoidalKarney by testKarney.py line 217
    test 1 Geodesic: True
    test 2 Geodesic: True

    testDirect(pygeodesy.geodesicw, 24.11.02)
    test 3 Direct.lat2: -11.174910000000
    test 4 Direct.lon2: -69.959210000000
    test 5 Direct.azi2: 129.289270889709
    test 6 Direct.a12: 80.507297142820
    test 7 Direct.m12: 6273170.205530384555  FAILED, KNOWN (1.48461e-14), expected 6273170.205530383624
    test 8 Direct.M12: 0.166063184474
    test 9 Direct.M21: 0.164791169456
    test 10 Direct.S12: 12841384694976.431640625000
    test 11 Direct.lat2: 77.031960000000
    test 12 Direct.lon2: 197.182340000000
    test 13 Direct.azi2: 109.112041110672
    test 14 Direct.a12: 36.892740690446
    test 15 Direct.m12: 3828869.334438760299  FAILED, KNOWN (1.21618e-14), expected 3828869.334438760765
    test 16 Direct.M12: 0.800763496081
    test 17 Direct.M21: 0.801010069842
    test 18 Direct.S12: 61674961290615.609375000000  FAILED, KNOWN (1.26672e-14), expected 61674961290615.617187500000
    test 19 Direct.lat2: 41.841380000000
    test 20 Direct.lon2: 98.566350000000
    test 21 Direct.azi2: -41.843599514405
    test 22 Direct.a12: 75.629304910115
    test 23 Direct.m12: 6161154.577311060391  FAILED, KNOWN (1.5116e-14), expected 6161154.577311061323
    test 24 Direct.M12: 0.248163392340
    test 25 Direct.M21: 0.249302512036
    test 26 Direct.S12: -6637997720646.715820312500  FAILED, KNOWN (1.47117e-14), expected -6637997720646.716796875000
    test 27 Direct.lat2: -12.706310000000
    test 28 Direct.lon2: 285.903440000000
    test 29 Direct.azi2: 2.512956620914
    test 30 Direct.a12: 100.278634181156
    test 31 Direct.m12: 6289939.567044666968  FAILED, KNOWN (2.96131e-14), expected 6289939.567044668831
    test 32 Direct.M12: -0.171994902747
    test 33 Direct.M21: -0.177225695263
    test 34 Direct.S12: -121287239862139.734375000000  FAILED, KNOWN (1.28826e-14), expected -121287239862139.750000000000
    test 35 Direct.lat2: -15.847840000000
    test 36 Direct.lon2: 5.935570000000
    test 37 Direct.azi2: -20.787484651537
    test 38 Direct.a12: 144.640108810286
    test 39 Direct.m12: 3732902.158387716860  FAILED, KNOWN (4.9898e-14), expected 3732902.158387718722
    test 40 Direct.M12: -0.812736387001
    test 41 Direct.M21: -0.812998005192
    test 42 Direct.S12: 97825992354058.703125000000

    testInverse(pygeodesy.geodesicw, 24.11.02)
    test 43 Inverse.lat2: -11.174910000000
    test 44 Inverse.lon2: -69.959210000000
    test 45 Inverse.azi1: 111.098748429560
    test 46 Inverse.azi2: 129.289270889709
    test 47 Inverse.s12: 8935244.560481829569
    test 48 Inverse.a12: 80.507297142820
    test 49 Inverse.m12: 6273170.205530383624
    test 50 Inverse.M12: 0.166063184474
    test 51 Inverse.M21: 0.164791169456
    test 52 Inverse.S12: 12841384694976.433593750000  FAILED, KNOWN (1.52096e-14), expected 12841384694976.431640625000
    test 53 Inverse.lat2: 77.031960000000
    test 54 Inverse.lon2: 197.182340000000
    test 55 Inverse.azi1: 22.020059880983
    test 56 Inverse.azi2: 109.112041110672
    test 57 Inverse.s12: 4105086.171392441727  FAILED, KNOWN (2.2687e-14), expected 4105086.171392440796
    test 58 Inverse.a12: 36.892740690446
    test 59 Inverse.m12: 3828869.334438761696  FAILED, KNOWN (2.43237e-14), expected 3828869.334438760765
    test 60 Inverse.M12: 0.800763496081
    test 61 Inverse.M21: 0.801010069842
    test 62 Inverse.S12: 61674961290615.617187500000
    test 63 Inverse.lat2: 41.841380000000
    test 64 Inverse.lon2: 98.566350000000
    test 65 Inverse.azi1: -32.444568764332
    test 66 Inverse.azi2: -41.843599514405
    test 67 Inverse.s12: 8394328.894657669589  FAILED, KNOWN (2.21893e-14), expected 8394328.894657671452
    test 68 Inverse.a12: 75.629304910115
    test 69 Inverse.m12: 6161154.577311060391  FAILED, KNOWN (1.5116e-14), expected 6161154.577311061323
    test 70 Inverse.M12: 0.248163392340
    test 71 Inverse.M21: 0.249302512036
    test 72 Inverse.S12: -6637997720646.717773437500  FAILED, KNOWN (1.47117e-14), expected -6637997720646.716796875000
    test 73 Inverse.lat2: -12.706310000000
    test 74 Inverse.lon2: 285.903440000000
    test 75 Inverse.azi1: 173.734912408784
    test 76 Inverse.azi2: 2.512956620914
    test 77 Inverse.s12: 11150344.231208024547
    test 78 Inverse.a12: 100.278634181156
    test 79 Inverse.m12: 6289939.567044666968  FAILED, KNOWN (2.96131e-14), expected 6289939.567044668831
    test 80 Inverse.M12: -0.171994902747
    test 81 Inverse.M21: -0.177225695263
    test 82 Inverse.S12: -121287239862139.718750000000  FAILED, KNOWN (2.57653e-14), expected -121287239862139.750000000000
    test 83 Inverse.lat2: -15.847840000000
    test 84 Inverse.lon2: 5.935570000000
    test 85 Inverse.azi1: -159.033557661193
    test 86 Inverse.azi2: -20.787484651537
    test 87 Inverse.s12: 16076603.163118068129
    test 88 Inverse.a12: 144.640108810286
    test 89 Inverse.m12: 3732902.158387719188  FAILED, KNOWN (1.24745e-14), expected 3732902.158387718722
    test 90 Inverse.M12: -0.812736387001
    test 91 Inverse.M21: -0.812998005192
    test 92 Inverse.S12: 97825992354058.703125000000
    test 93 Inverse.lat2: 90.000000000000
    test 94 Inverse.lon2: 0.000000000000
    test 95 Inverse.azi1: 0.000000000000
    test 96 Inverse.azi2: 0.000000000000
    test 97 Inverse.s12: 558455.588646476739  FAILED, KNOWN (8.53641e-11), expected 558455.588646000018
    test 98 Inverse.a12: 5.016734754264  FAILED, KNOWN (4.89833e-06), expected 5.016735000000
    test 99 Inverse.m12: 557747.059253584128  FAILED, KNOWN (7.45563e-11), expected 557747.059253999963
    test 100 Inverse.M12: 0.996194698092  FAILED, KNOWN (3.03061e-05), expected 0.996195000000
    test 101 Inverse.M21: 0.996194828008  FAILED, KNOWN (1.72648e-05), expected 0.996195000000
    test 102 Inverse.S12: 0.000000000000
    test 103 Inverse.lat2: 90.000000000000
    test 104 Inverse.lon2: 10.000000000000
    test 105 Inverse.azi1: 0.000000000000
    test 106 Inverse.azi2: 10.000000000000
    test 107 Inverse.s12: 558455.588646476739  FAILED, KNOWN (8.53641e-11), expected 558455.588646000018
    test 108 Inverse.a12: 5.016734754264  FAILED, KNOWN (4.89833e-06), expected 5.016735000000
    test 109 Inverse.m12: 557747.059253584128  FAILED, KNOWN (7.45563e-11), expected 557747.059253999963
    test 110 Inverse.M12: 0.996194698092  FAILED, KNOWN (3.03061e-05), expected 0.996195000000
    test 111 Inverse.M21: 0.996194828008  FAILED, KNOWN (1.72648e-05), expected 0.996195000000
    test 112 Inverse.S12: 7084244746167.895507812500

    testInverseLine(pygeodesy.geodesicw, 24.11.02)
    test 113 InverseLine[0].lat: 40.640
    test 114 InverseLine[0].lon: -73.779
    test 115 InverseLine[1].lat: 49.825  FAILED, KNOWN (0.00641087), expected 49.829
    test 116 InverseLine[1].lon: -72.962
    test 117 InverseLine[2].lat: 58.992  FAILED, KNOWN (0.0026387), expected 58.994
    test 118 InverseLine[2].lon: -71.759
    test 119 InverseLine[3].lat: 68.132  FAILED, KNOWN (0.00640093), expected 68.127
    test 120 InverseLine[3].lon: -69.677  FAILED, KNOWN (0.0019843), expected -69.678
    test 121 InverseLine[4].lat: 77.203  FAILED, KNOWN (0.0174018), expected 77.190
    test 122 InverseLine[4].lon: -64.830  FAILED, KNOWN (0.0188051), expected -64.842
    test 123 InverseLine[5].lat: 85.794  FAILED, KNOWN (0.023512), expected 85.774
    test 124 InverseLine[5].lon: -39.425  FAILED, KNOWN (0.511977), expected -39.628
    test 125 InverseLine[6].lat: 83.690  FAILED, KNOWN (0.0405821), expected 83.724
    test 126 InverseLine[6].lon: 80.754  FAILED, KNOWN (0.167168), expected 80.619
    test 127 InverseLine[7].lat: 74.828  FAILED, KNOWN (0.0632801), expected 74.875
    test 128 InverseLine[7].lon: 94.774  FAILED, KNOWN (0.0324631), expected 94.743
    test 129 InverseLine[8].lat: 65.730  FAILED, KNOWN (0.0856355), expected 65.786
    test 130 InverseLine[8].lon: 98.489  FAILED, KNOWN (0.0149102), expected 98.474
    test 131 InverseLine[9].lat: 56.582  FAILED, KNOWN (0.108466), expected 56.643
    test 132 InverseLine[9].lon: 100.254  FAILED, KNOWN (0.0088657), expected 100.246
    test 133 InverseLine[10].lat: 47.409  FAILED, KNOWN (0.13059), expected 47.471
    test 134 InverseLine[10].lon: 101.327  FAILED, KNOWN (0.00584966), expected 101.321
    test 135 InverseLine[11].lat: 38.220  FAILED, KNOWN (0.150547), expected 38.277
    test 136 InverseLine[11].lon: 102.079  FAILED, KNOWN (0.00399913), expected 102.075
    test 137 InverseLine[12].lat: 29.017  FAILED, KNOWN (0.166648), expected 29.066
    test 138 InverseLine[12].lon: 102.662  FAILED, KNOWN (0.0026948), expected 102.659
    test 139 InverseLine[13].lat: 19.804  FAILED, KNOWN (0.176529), expected 19.839
    test 140 InverseLine[13].lon: 103.148  FAILED, KNOWN (0.00167385), expected 103.147
    test 141 InverseLine[14].lat: 10.584  FAILED, KNOWN (0.173707), expected 10.602
    test 142 InverseLine[14].lon: 103.581
    test 143 InverseLine[15].lat: 1.359
    test 144 InverseLine[15].lon: 103.989

    testGeodCalc(pygeodesy.ellipsoidalKarney, 24.08.13)
# lazily imported pygeodesy.booleans by karney.py line 836
    test 145 area: 13662703680020
    test 146 perimeter: 16831067.892791

    testMask(pygeodesy.geodesicw, 24.11.02)
    test 147 Geodesic.EMPTY: 0b0
    test 148 Geodesic.LATITUDE: 0b10000000
    test 149 Geodesic.LONGITUDE: 0b100001000
    test 150 Geodesic.AZIMUTH: 0b1000000000
    test 151 Geodesic.DISTANCE: 0b10000000001
    test 152 Geodesic.STANDARD: 0b11110001001
    test 153 Geodesic.DISTANCE_IN: 0b100000000011
    test 154 Geodesic.REDUCEDLENGTH: 0b1000000000101
    test 155 Geodesic.GEODESICSCALE: 0b10000000000101
    test 156 Geodesic.AREA: 0b100000000010000
    test 157 Geodesic.ALL: 0b111111110011111
    test 158 Caps: ALL|AREA|AZIMUTH|AZIMUTH_DISTANCE|AZIMUTH_DISTANCE_AREA|DISTANCE|DISTANCE_IN|GEODESICSCALE|LATITUDE|LATITUDE_LONGITUDE|LATITUDE_LONGITUDE_AREA|LINE_CAPS|LONGITUDE|REDUCEDLENGTH|STANDARD
    test 159 Caps: ALL|AREA|AZIMUTH|AZIMUTH_DISTANCE|AZIMUTH_DISTANCE_AREA|DISTANCE|DISTANCE_IN|GEODESICSCALE|LATITUDE|LATITUDE_LONGITUDE|LATITUDE_LONGITUDE_AREA|LINE_CAPS|LONGITUDE|REDUCEDLENGTH|STANDARD

    testDirect(pygeodesy.geodesicx, 24.11.02)
# lazily imported pygeodesy.elliptic by gxline.py line 284
    test 160 Direct.lat2: -11.174910000000
    test 161 Direct.lon2: -69.959210000000
    test 162 Direct.azi2: 129.289270889709
    test 163 Direct.a12: 80.507297142820
    test 164 Direct.m12: 6273170.205530384555  FAILED, KNOWN (1.48461e-14), expected 6273170.205530383624
    test 165 Direct.M12: 0.166063184474
    test 166 Direct.M21: 0.164791169456
    test 167 Direct.S12: 12841384694976.431640625000
    test 168 Direct.lat2: 77.031960000000
    test 169 Direct.lon2: 197.182340000000
    test 170 Direct.azi2: 109.112041110671  FAILED, KNOWN (1.04193e-13), expected 109.112041110672
    test 171 Direct.a12: 36.892740690446
    test 172 Direct.m12: 3828869.334438757971  FAILED, KNOWN (7.29711e-14), expected 3828869.334438760765
    test 173 Direct.M12: 0.800763496081
    test 174 Direct.M21: 0.801010069842
    test 175 Direct.S12: 61674961290615.531250000000  FAILED, KNOWN (1.39339e-13), expected 61674961290615.617187500000
    test 176 Direct.lat2: 41.841380000000
    test 177 Direct.lon2: 98.566350000000
    test 178 Direct.azi2: -41.843599514405
    test 179 Direct.a12: 75.629304910115
    test 180 Direct.m12: 6161154.577311060391  FAILED, KNOWN (1.5116e-14), expected 6161154.577311061323
    test 181 Direct.M12: 0.248163392340
    test 182 Direct.M21: 0.249302512036
    test 183 Direct.S12: -6637997720646.715820312500  FAILED, KNOWN (1.47117e-14), expected -6637997720646.716796875000
    test 184 Direct.lat2: -12.706310000000
    test 185 Direct.lon2: 285.903440000000
    test 186 Direct.azi2: 2.512956620914
    test 187 Direct.a12: 100.278634181156
    test 188 Direct.m12: 6289939.567044666968  FAILED, KNOWN (2.96131e-14), expected 6289939.567044668831
    test 189 Direct.M12: -0.171994902747
    test 190 Direct.M21: -0.177225695263
    test 191 Direct.S12: -121287239862139.734375000000  FAILED, KNOWN (1.28826e-14), expected -121287239862139.750000000000
    test 192 Direct.lat2: -15.847840000000
    test 193 Direct.lon2: 5.935570000000
    test 194 Direct.azi2: -20.787484651537
    test 195 Direct.a12: 144.640108810286
    test 196 Direct.m12: 3732902.158387714997  FAILED, KNOWN (9.97961e-14), expected 3732902.158387718722
    test 197 Direct.M12: -0.812736387001
    test 198 Direct.M21: -0.812998005192
    test 199 Direct.S12: 97825992354058.703125000000

    testInverse(pygeodesy.geodesicx, 24.11.02)
    test 200 Inverse.lat2: -11.174910000000
    test 201 Inverse.lon2: -69.959210000000
    test 202 Inverse.azi1: 111.098748429560
    test 203 Inverse.azi2: 129.289270889709
    test 204 Inverse.s12: 8935244.560481829569
    test 205 Inverse.a12: 80.507297142820
    test 206 Inverse.m12: 6273170.205530383624
    test 207 Inverse.M12: 0.166063184474
    test 208 Inverse.M21: 0.164791169456
    test 209 Inverse.S12: 12841384694976.433593750000  FAILED, KNOWN (1.52096e-14), expected 12841384694976.431640625000
    test 210 Inverse.lat2: 77.031960000000
    test 211 Inverse.lon2: 197.182340000000
    test 212 Inverse.azi1: 22.020059880983
    test 213 Inverse.azi2: 109.112041110672
    test 214 Inverse.s12: 4105086.171392444056  FAILED, KNOWN (7.94046e-14), expected 4105086.171392440796
    test 215 Inverse.a12: 36.892740690446
    test 216 Inverse.m12: 3828869.334438761696  FAILED, KNOWN (2.43237e-14), expected 3828869.334438760765
    test 217 Inverse.M12: 0.800763496081
    test 218 Inverse.M21: 0.801010069842
    test 219 Inverse.S12: 61674961290615.617187500000
    test 220 Inverse.lat2: 41.841380000000
    test 221 Inverse.lon2: 98.566350000000
    test 222 Inverse.azi1: -32.444568764332
    test 223 Inverse.azi2: -41.843599514405
    test 224 Inverse.s12: 8394328.894657671452
    test 225 Inverse.a12: 75.629304910115
    test 226 Inverse.m12: 6161154.577311059460  FAILED, KNOWN (3.02321e-14), expected 6161154.577311061323
    test 227 Inverse.M12: 0.248163392340
    test 228 Inverse.M21: 0.249302512036
    test 229 Inverse.S12: -6637997720646.715820312500  FAILED, KNOWN (1.47117e-14), expected -6637997720646.716796875000
    test 230 Inverse.lat2: -12.706310000000
    test 231 Inverse.lon2: 285.903440000000
    test 232 Inverse.azi1: 173.734912408784
    test 233 Inverse.azi2: 2.512956620914
    test 234 Inverse.s12: 11150344.231208024547
    test 235 Inverse.a12: 100.278634181156
    test 236 Inverse.m12: 6289939.567044666968  FAILED, KNOWN (2.96131e-14), expected 6289939.567044668831
    test 237 Inverse.M12: -0.171994902747
    test 238 Inverse.M21: -0.177225695263
    test 239 Inverse.S12: -121287239862139.718750000000  FAILED, KNOWN (2.57653e-14), expected -121287239862139.750000000000
    test 240 Inverse.lat2: -15.847840000000
    test 241 Inverse.lon2: 5.935570000000
    test 242 Inverse.azi1: -159.033557661193
    test 243 Inverse.azi2: -20.787484651537
    test 244 Inverse.s12: 16076603.163118060678  FAILED, KNOWN (4.63442e-14), expected 16076603.163118068129
    test 245 Inverse.a12: 144.640108810286
    test 246 Inverse.m12: 3732902.158387719188  FAILED, KNOWN (1.24745e-14), expected 3732902.158387718722
    test 247 Inverse.M12: -0.812736387001
    test 248 Inverse.M21: -0.812998005192
    test 249 Inverse.S12: 97825992354058.703125000000
    test 250 Inverse.lat2: 90.000000000000
    test 251 Inverse.lon2: 0.000000000000
    test 252 Inverse.azi1: 0.000000000000
    test 253 Inverse.azi2: 0.000000000000
    test 254 Inverse.s12: 558020.704208072624  FAILED, KNOWN (0.0778727), expected 558455.588646000018
    test 255 Inverse.a12: 5.016734754264  FAILED, KNOWN (4.89833e-06), expected 5.016735000000
    test 256 Inverse.m12: 557747.059253584128  FAILED, KNOWN (7.45563e-11), expected 557747.059253999963
    test 257 Inverse.M12: 0.996194698092  FAILED, KNOWN (3.03061e-05), expected 0.996195000000
    test 258 Inverse.M21: 0.996188865576  FAILED, KNOWN (0.000615785), expected 0.996195000000
    test 259 Inverse.S12: 0.000000000000
    test 260 Inverse.lat2: 90.000000000000
    test 261 Inverse.lon2: 10.000000000000
    test 262 Inverse.azi1: 0.000000000000
    test 263 Inverse.azi2: 10.000000000000
    test 264 Inverse.s12: 558020.704208072624  FAILED, KNOWN (0.0778727), expected 558455.588646000018
    test 265 Inverse.a12: 5.016734754264  FAILED, KNOWN (4.89833e-06), expected 5.016735000000
    test 266 Inverse.m12: 557747.059253584128  FAILED, KNOWN (7.45563e-11), expected 557747.059253999963
    test 267 Inverse.M12: 0.996194698092  FAILED, KNOWN (3.03061e-05), expected 0.996195000000
    test 268 Inverse.M21: 0.996188865576  FAILED, KNOWN (0.000615785), expected 0.996195000000
    test 269 Inverse.S12: 7084244746167.895507812500

    testInverseLine(pygeodesy.geodesicx, 24.11.02)
    test 270 InverseLine[0].lat: 40.640
    test 271 InverseLine[0].lon: -73.779
    test 272 InverseLine[1].lat: 49.825  FAILED, KNOWN (0.00641087), expected 49.829
    test 273 InverseLine[1].lon: -72.962
    test 274 InverseLine[2].lat: 58.992  FAILED, KNOWN (0.0026387), expected 58.994
    test 275 InverseLine[2].lon: -71.759
    test 276 InverseLine[3].lat: 68.132  FAILED, KNOWN (0.00640093), expected 68.127
    test 277 InverseLine[3].lon: -69.677  FAILED, KNOWN (0.0019843), expected -69.678
    test 278 InverseLine[4].lat: 77.203  FAILED, KNOWN (0.0174018), expected 77.190
    test 279 InverseLine[4].lon: -64.830  FAILED, KNOWN (0.0188051), expected -64.842
    test 280 InverseLine[5].lat: 85.794  FAILED, KNOWN (0.023512), expected 85.774
    test 281 InverseLine[5].lon: -39.425  FAILED, KNOWN (0.511977), expected -39.628
    test 282 InverseLine[6].lat: 83.690  FAILED, KNOWN (0.0405821), expected 83.724
    test 283 InverseLine[6].lon: 80.754  FAILED, KNOWN (0.167168), expected 80.619
    test 284 InverseLine[7].lat: 74.828  FAILED, KNOWN (0.0632801), expected 74.875
    test 285 InverseLine[7].lon: 94.774  FAILED, KNOWN (0.0324631), expected 94.743
    test 286 InverseLine[8].lat: 65.730  FAILED, KNOWN (0.0856355), expected 65.786
    test 287 InverseLine[8].lon: 98.489  FAILED, KNOWN (0.0149102), expected 98.474
    test 288 InverseLine[9].lat: 56.582  FAILED, KNOWN (0.108466), expected 56.643
    test 289 InverseLine[9].lon: 100.254  FAILED, KNOWN (0.0088657), expected 100.246
    test 290 InverseLine[10].lat: 47.409  FAILED, KNOWN (0.13059), expected 47.471
    test 291 InverseLine[10].lon: 101.327  FAILED, KNOWN (0.00584966), expected 101.321
    test 292 InverseLine[11].lat: 38.220  FAILED, KNOWN (0.150547), expected 38.277
    test 293 InverseLine[11].lon: 102.079  FAILED, KNOWN (0.00399913), expected 102.075
    test 294 InverseLine[12].lat: 29.017  FAILED, KNOWN (0.166648), expected 29.066
    test 295 InverseLine[12].lon: 102.662  FAILED, KNOWN (0.0026948), expected 102.659
    test 296 InverseLine[13].lat: 19.804  FAILED, KNOWN (0.176529), expected 19.839
    test 297 InverseLine[13].lon: 103.148  FAILED, KNOWN (0.00167385), expected 103.147
    test 298 InverseLine[14].lat: 10.584  FAILED, KNOWN (0.173707), expected 10.602
    test 299 InverseLine[14].lon: 103.581
    test 300 InverseLine[15].lat: 1.359
    test 301 InverseLine[15].lon: 103.989

    testGeodCalc(pygeodesy.ellipsoidalExact, 24.11.06)
    test 302 area: 13662703680020
    test 303 perimeter: 16830891.356049

    testMask(pygeodesy.geodesicx, 24.11.02)
    test 304 Geodesic.EMPTY: 0b0
    test 305 Geodesic.LATITUDE: 0b10000000
    test 306 Geodesic.LONGITUDE: 0b100001000
    test 307 Geodesic.AZIMUTH: 0b1000000000
    test 308 Geodesic.DISTANCE: 0b10000000001
    test 309 Geodesic.STANDARD: 0b11110001001
    test 310 Geodesic.DISTANCE_IN: 0b100000000011
    test 311 Geodesic.REDUCEDLENGTH: 0b1000000000101
    test 312 Geodesic.GEODESICSCALE: 0b10000000000101
    test 313 Geodesic.AREA: 0b100000000010000
    test 314 Geodesic.ALL: 0b111111110011111
    test 315 Caps: ALL|AREA|AZIMUTH|AZIMUTH_DISTANCE|AZIMUTH_DISTANCE_AREA|DISTANCE|DISTANCE_IN|GEODESICSCALE|LATITUDE|LATITUDE_LONGITUDE|LATITUDE_LONGITUDE_AREA|LINE_CAPS|LONGITUDE|REDUCEDLENGTH|STANDARD
    test 316 Caps: ALL|AREA|AZIMUTH|AZIMUTH_DISTANCE|AZIMUTH_DISTANCE_AREA|DISTANCE|DISTANCE_IN|GEODESICSCALE|LATITUDE|LATITUDE_LONGITUDE|LATITUDE_LONGITUDE_AREA|LINE_CAPS|LONGITUDE|REDUCEDLENGTH|STANDARD

    102 tests skipped (102): no GeodSolve

    testMath(pygeodesy.karney, 24.11.09)
    test 317 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 318 _diff182(-180, -90): 90.0
    test 319 _diff182(-180, 0): 180.0
    test 320 _diff182(-180, 90): -90.0
    test 321 _diff182(-180, 180): 0.0
    test 322 _diff182(-90, -180): -90.0
    test 323 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 324 _diff182(-90, 0): 90.0
    test 325 _diff182(-90, 90): 180.0
    test 326 _diff182(-90, 180): -90.0
    test 327 _diff182(0, -180): -180.0
    test 328 _diff182(0, -90): -90.0
    test 329 _diff182(0, 0): 0.0  FAILED, KNOWN, expected -0.0
    test 330 _diff182(0, 90): 90.0
    test 331 _diff182(0, 180): 180.0
    test 332 _diff182(90, -180): 90.0
    test 333 _diff182(90, -90): -180.0
    test 334 _diff182(90, 0): -90.0
    test 335 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 336 _diff182(90, 180): 90.0
    test 337 _diff182(180, -180): -0.0
    test 338 _diff182(180, -90): 90.0
    test 339 _diff182(180, 0): -180.0
    test 340 _diff182(180, 90): -90.0
    test 341 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 342 _norm180(-361): -1.0
    test 343  wrap180(-361): -1.0
    test 344 _norm180(-360): -0.0
    test 345  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 346 _norm180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 347  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 348 _norm180(-90): -90.0
    test 349  wrap180(-90): -90.0
    test 350 _norm180(0): 0.0
    test 351  wrap180(0): 0.0
    test 352 _norm180(0): 0.0
    test 353  wrap180(0): 0.0
    test 354 _norm180(90): 90.0
    test 355  wrap180(90): 90.0
    test 356 _norm180(180): 180.0
    test 357  wrap180(180): 180.0
    test 358 _norm180(360): 0.0
    test 359  wrap180(360): 0.0
    test 360 _norm180(361): 1.0
    test 361  wrap180(361): 1.0
    test 362 unroll(-30, 0): (30.0, 0.0)
    test 363 unroll(-30, 30): (60.0, 30.0)
    test 364 unroll(-30, 60): (90.0, 60.0)
    test 365 unroll(-30, 90): (120.0, 90.0)
    test 366 unroll(-30, 120): (150.0, 120.0)
    test 367 unroll(-30, 150): (180.0, 150.0)
    test 368 unroll(-30, 180): (-150.0, -180.0)
    test 369 unroll(-30, 210): (-120.0, -150.0)
    test 370 unroll(-30, 240): (-90.0, -120.0)
    test 371 unroll(-30, 270): (-60.0, -90.0)
    test 372 unroll(-30, 300): (-30.0, -60.0)
    test 373 unroll(-30, 330): (0.0, -30.0)
    test 374 unroll(-30, 360): (30.0, 0.0)

    test 375 _sum3.s: 1.000e-20
    test 376 _sum3.t: 0.000e+00
    test 377 fsum_: 1.000e-20

    test 378 _sum3.s: -8.000e-20  FAILED, KNOWN, expected 1.000e-20
    test 379 _sum3.t: 0.000e+00
    test 380 fsum_: 1.000e-20

    test 381 _sum3.s: 1.000e-20
    test 382 _sum3.t: 0.000e+00
    test 383 fsum_: 1.000e-20

    test 384 _sum3.s: -3.689e+19  FAILED, KNOWN, expected 1.0
    test 385 _sum3.t: 1.003e+18  FAILED, KNOWN, expected 0.000e+00
    test 386 fsum_: -3.589e+19  FAILED, KNOWN, expected 1.0

    119 of 386 testKarney.py tests (30.8%) FAILED, incl. 117 KNOWN plus 2 DeprecationWarnings, 102 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 4.429 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testKtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.fstr from .streprs by testKtm.py line 10
# lazily imported pygeodesy.hypot from .fmath by testKtm.py line 10
# lazily imported pygeodesy.sincos2d from .utily by testKtm.py line 10
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testKtm.py line 56
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testKtm.py line 56
# lazily imported pygeodesy.ktm by testKtm.py line 56
# lazily imported pygeodesy.KTransverseMercator from .ktm by testKtm.py line 56

    testing testKtm.py 23.03.27 (module pygeodesy.ktm 24.08.31) isLazy=3

    test 1 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=7)
    test 2 forward 0N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 3 reverse 0N (80.000, 0.000) -/-: 0.0
    test 4 forward 3N (79.890, 8.374) -/-: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 5 reverse 3N (79.890, 8.374) -/-: 1.7763568394002505e-15
    test 6 forward 6N (79.562, 16.725) -/-: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 7 reverse 6N (79.562, 16.725) -/-: 1.5888218580782548e-14
    test 8 forward 9N (79.015, 25.030) -/-: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 9 reverse 9N (79.015, 25.030) -/-: 2.1316282072803006e-14
    test 10 forward 12N (78.252, 33.266) -/-: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 11 reverse 12N (78.252, 33.266) -/-: 5.1728291973635394e-14
    test 12 forward 15N (77.274, 41.411) -/-: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 13 reverse 15N (77.274, 41.411) -/-: 0.0
    test 14 forward 18N (76.085, 49.443) -/-: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 15 reverse 18N (76.085, 49.443) -/-: 3.8263897345803626e-14
    test 16 forward 21N (74.686, 57.339) -/-: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 17 reverse 21N (74.686, 57.339) -/-: 5.859285502108464e-14
    test 18 forward 24N (73.084, 65.078) -/-: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 19 reverse 24N (73.084, 65.078) -/-: 1.4210854715202004e-14
    test 20 forward 27N (71.281, 72.638) -/-: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 21 reverse 27N (71.281, 72.638) -/-: 1.4210854715202004e-14
    test 22 forward 30N (69.282, 80.000) -/-: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 23 reverse 30N (69.282, 80.000) -/-: 1.4210854715202004e-14
    test 24 forward 33N (67.094, 87.142) -/-: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 25 reverse 33N (67.094, 87.142) -/-: 0.0
    test 26 forward 36N (64.721, 94.046) -/-: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 27 reverse 36N (64.721, 94.046) -/-: 0.0
    test 28 forward 39N (62.172, 100.691) -/-: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 29 reverse 39N (62.172, 100.691) -/-: 0.0
    test 30 forward 42N (59.452, 107.061) -/-: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 31 reverse 42N (59.452, 107.061) -/-: 1.4210854715202004e-14
    test 32 forward 45N (56.569, 113.137) -/-: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 33 reverse 45N (56.569, 113.137) -/-: 1.5888218580782548e-14
    test 34 forward 48N (53.530, 118.903) -/-: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 35 reverse 48N (53.530, 118.903) -/-: 1.4210854715202004e-14
    test 36 forward 51N (50.346, 124.343) -/-: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 37 reverse 51N (50.346, 124.343) -/-: 1.4210854715202004e-14
    test 38 forward 54N (47.023, 129.443) -/-: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 39 reverse 54N (47.023, 129.443) -/-: 2.842170943040401e-14
    test 40 forward 57N (43.571, 134.187) -/-: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 41 reverse 57N (43.571, 134.187) -/-: 0.0
    test 42 forward 60N (40.000, 138.564) -/-: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 43 reverse 60N (40.000, 138.564) -/-: 0.0
    test 44 forward 63N (36.319, 142.561) -/-: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 45 reverse 63N (36.319, 142.561) -/-: 7.105427357601002e-15
    test 46 forward 66N (32.539, 146.167) -/-: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 47 reverse 66N (32.539, 146.167) -/-: 7.105427357601002e-15
    test 48 forward 69N (28.669, 149.373) -/-: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 49 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 50 forward 72N (24.721, 152.169) -/-: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 51 reverse 72N (24.721, 152.169) -/-: 1.0658141036401503e-14
    test 52 forward 75N (20.706, 154.548) -/-: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 53 reverse 75N (20.706, 154.548) -/-: 1.7763568394002505e-14
    test 54 forward 78N (16.633, 156.504) -/-: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 55 reverse 78N (16.633, 156.504) -/-: 1.7763568394002505e-14
    test 56 forward 81N (12.515, 158.030) -/-: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 57 reverse 81N (12.515, 158.030) -/-: 1.2434497875801753e-14
    test 58 forward 84N (8.362, 159.124) -/-: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 59 reverse 84N (8.362, 159.124) -/-: 1.7763568394002505e-14
    test 60 forward 87N (4.187, 159.781) -/-: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 61 reverse 87N (4.187, 159.781) -/-: 8.881784197001252e-15
    test 62 forward 90N (0.000, 160.000) -/-: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 63 reverse 90N (0.000, 160.000) -/-: 2.402002211154445e-14
    test 64 forward 93N (-4.187, 159.781) -/-: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 65 reverse 93N (-4.187, 159.781) -/-: 6.217248937900877e-15
    test 66 forward 96N (-8.362, 159.124) -/-: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 67 reverse 96N (-8.362, 159.124) -/-: 1.5987211554602254e-14
    test 68 forward 99N (-12.515, 158.030) -/-: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 69 reverse 99N (-12.515, 158.030) -/-: 7.105427357601002e-15
    test 70 forward 102N (-16.633, 156.504) -/-: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 71 reverse 102N (-16.633, 156.504) -/-: 2.842170943040401e-14
    test 72 forward 105N (-20.706, 154.548) -/-: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 73 reverse 105N (-20.706, 154.548) -/-: 1.7763568394002505e-14
    test 74 forward 108N (-24.721, 152.169) -/-: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 75 reverse 108N (-24.721, 152.169) -/-: 7.105427357601002e-15
    test 76 forward 111N (-28.669, 149.373) -/-: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 77 reverse 111N (-28.669, 149.373) -/-: 7.105427357601002e-15
    test 78 forward 114N (-32.539, 146.167) -/-: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 79 reverse 114N (-32.539, 146.167) -/-: 7.105427357601002e-15
    test 80 forward 117N (-36.319, 142.561) -/-: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 81 reverse 117N (-36.319, 142.561) -/-: 7.105427357601002e-15
    test 82 forward 120N (-40.000, 138.564) -/-: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 83 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 84 forward 123N (-43.571, 134.187) -/-: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 85 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 86 forward 126N (-47.023, 129.443) -/-: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 87 reverse 126N (-47.023, 129.443) -/-: 2.842170943040401e-14
    test 88 forward 129N (-50.346, 124.343) -/-: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 89 reverse 129N (-50.346, 124.343) -/-: 1.4210854715202004e-14
    test 90 forward 132N (-53.530, 118.903) -/-: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 91 reverse 132N (-53.530, 118.903) -/-: 1.4210854715202004e-14
    test 92 forward 135N (-56.569, 113.137) -/-: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 93 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 94 forward 138N (-59.452, 107.061) -/-: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 95 reverse 138N (-59.452, 107.061) -/-: 1.4210854715202004e-14
    test 96 forward 141N (-62.172, 100.691) -/-: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 97 reverse 141N (-62.172, 100.691) -/-: 0.0
    test 98 forward 144N (-64.721, 94.046) -/-: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 99 reverse 144N (-64.721, 94.046) -/-: 0.0
    test 100 forward 147N (-67.094, 87.142) -/-: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 101 reverse 147N (-67.094, 87.142) -/-: 0.0
    test 102 forward 150N (-69.282, 80.000) -/-: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 103 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 104 forward 153N (-71.281, 72.638) -/-: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 105 reverse 153N (-71.281, 72.638) -/-: 1.4210854715202004e-14
    test 106 forward 156N (-73.084, 65.078) -/-: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 107 reverse 156N (-73.084, 65.078) -/-: 1.4210854715202004e-14
    test 108 forward 159N (-74.686, 57.339) -/-: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 109 reverse 159N (-74.686, 57.339) -/-: 1.4210854715202004e-14
    test 110 forward 162N (-76.085, 49.443) -/-: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 111 reverse 162N (-76.085, 49.443) -/-: 3.552713678800501e-14
    test 112 forward 165N (-77.274, 41.411) -/-: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 113 reverse 165N (-77.274, 41.411) -/-: 0.0
    test 114 forward 168N (-78.252, 33.266) -/-: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 115 reverse 168N (-78.252, 33.266) -/-: 2.5618982671915014e-14
    test 116 forward 171N (-79.015, 25.030) -/-: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 117 reverse 171N (-79.015, 25.030) -/-: 2.842170943040401e-14
    test 118 forward 174N (-79.562, 16.725) -/-: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 119 reverse 174N (-79.562, 16.725) -/-: 1.7763568394002505e-14
    test 120 forward 177N (-79.890, 8.374) -/-: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 121 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 122 forward 180N (-80.000, 0.000) -/-: 0.0, -8881585.815988, 0.0, 0.9996
    test 123 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 124 forward 183N (-79.890, -8.374) -/-: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 125 reverse 183N (-79.890, -8.374) -/-: 1.7763568394002505e-15
    test 126 forward 186N (-79.562, -16.725) -/-: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 127 reverse 186N (-79.562, -16.725) -/-: 1.5888218580782548e-14
    test 128 forward 189N (-79.015, -25.030) -/-: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 129 reverse 189N (-79.015, -25.030) -/-: 2.1316282072803006e-14
    test 130 forward 192N (-78.252, -33.266) -/-: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 131 reverse 192N (-78.252, -33.266) -/-: 5.1728291973635394e-14
    test 132 forward 195N (-77.274, -41.411) -/-: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 133 reverse 195N (-77.274, -41.411) -/-: 0.0
    test 134 forward 198N (-76.085, -49.443) -/-: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 135 reverse 198N (-76.085, -49.443) -/-: 3.8263897345803626e-14
    test 136 forward 201N (-74.686, -57.339) -/-: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 137 reverse 201N (-74.686, -57.339) -/-: 5.859285502108464e-14
    test 138 forward 204N (-73.084, -65.078) -/-: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 139 reverse 204N (-73.084, -65.078) -/-: 1.4210854715202004e-14
    test 140 forward 207N (-71.281, -72.638) -/-: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 141 reverse 207N (-71.281, -72.638) -/-: 1.4210854715202004e-14
    test 142 forward 210N (-69.282, -80.000) -/-: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 143 reverse 210N (-69.282, -80.000) -/-: 1.4210854715202004e-14
    test 144 forward 213N (-67.094, -87.142) -/-: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 145 reverse 213N (-67.094, -87.142) -/-: 0.0
    test 146 forward 216N (-64.721, -94.046) -/-: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 147 reverse 216N (-64.721, -94.046) -/-: 0.0
    test 148 forward 219N (-62.172, -100.691) -/-: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 149 reverse 219N (-62.172, -100.691) -/-: 0.0
    test 150 forward 222N (-59.452, -107.061) -/-: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 151 reverse 222N (-59.452, -107.061) -/-: 1.4210854715202004e-14
    test 152 forward 225N (-56.569, -113.137) -/-: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 153 reverse 225N (-56.569, -113.137) -/-: 1.5888218580782548e-14
    test 154 forward 228N (-53.530, -118.903) -/-: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 155 reverse 228N (-53.530, -118.903) -/-: 1.4210854715202004e-14
    test 156 forward 231N (-50.346, -124.343) -/-: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 157 reverse 231N (-50.346, -124.343) -/-: 1.4210854715202004e-14
    test 158 forward 234N (-47.023, -129.443) -/-: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 159 reverse 234N (-47.023, -129.443) -/-: 2.842170943040401e-14
    test 160 forward 237N (-43.571, -134.187) -/-: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 161 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 162 forward 240N (-40.000, -138.564) -/-: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 163 reverse 240N (-40.000, -138.564) -/-: 0.0
    test 164 forward 243N (-36.319, -142.561) -/-: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 165 reverse 243N (-36.319, -142.561) -/-: 7.105427357601002e-15
    test 166 forward 246N (-32.539, -146.167) -/-: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 167 reverse 246N (-32.539, -146.167) -/-: 7.105427357601002e-15
    test 168 forward 249N (-28.669, -149.373) -/-: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 169 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 170 forward 252N (-24.721, -152.169) -/-: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 171 reverse 252N (-24.721, -152.169) -/-: 1.0658141036401503e-14
    test 172 forward 255N (-20.706, -154.548) -/-: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 173 reverse 255N (-20.706, -154.548) -/-: 1.7763568394002505e-14
    test 174 forward 258N (-16.633, -156.504) -/-: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 175 reverse 258N (-16.633, -156.504) -/-: 1.7763568394002505e-14
    test 176 forward 261N (-12.515, -158.030) -/-: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 177 reverse 261N (-12.515, -158.030) -/-: 1.2434497875801753e-14
    test 178 forward 264N (-8.362, -159.124) -/-: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 179 reverse 264N (-8.362, -159.124) -/-: 1.7763568394002505e-14
    test 180 forward 267N (-4.187, -159.781) -/-: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 181 reverse 267N (-4.187, -159.781) -/-: 8.881784197001252e-15
    test 182 forward 270N (0.000, -160.000) -/-: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 183 reverse 270N (0.000, -160.000) -/-: 2.402002211154445e-14
    test 184 forward 273N (4.187, -159.781) -/-: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 185 reverse 273N (4.187, -159.781) -/-: 6.217248937900877e-15
    test 186 forward 276N (8.362, -159.124) -/-: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 187 reverse 276N (8.362, -159.124) -/-: 1.5987211554602254e-14
    test 188 forward 279N (12.515, -158.030) -/-: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 189 reverse 279N (12.515, -158.030) -/-: 7.105427357601002e-15
    test 190 forward 282N (16.633, -156.504) -/-: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 191 reverse 282N (16.633, -156.504) -/-: 2.842170943040401e-14
    test 192 forward 285N (20.706, -154.548) -/-: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 193 reverse 285N (20.706, -154.548) -/-: 1.7763568394002505e-14
    test 194 forward 288N (24.721, -152.169) -/-: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 195 reverse 288N (24.721, -152.169) -/-: 7.105427357601002e-15
    test 196 forward 291N (28.669, -149.373) -/-: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 197 reverse 291N (28.669, -149.373) -/-: 7.105427357601002e-15
    test 198 forward 294N (32.539, -146.167) -/-: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 199 reverse 294N (32.539, -146.167) -/-: 7.105427357601002e-15
    test 200 forward 297N (36.319, -142.561) -/-: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 201 reverse 297N (36.319, -142.561) -/-: 7.105427357601002e-15
    test 202 forward 300N (40.000, -138.564) -/-: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 203 reverse 300N (40.000, -138.564) -/-: 0.0
    test 204 forward 303N (43.571, -134.187) -/-: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 205 reverse 303N (43.571, -134.187) -/-: 0.0
    test 206 forward 306N (47.023, -129.443) -/-: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 207 reverse 306N (47.023, -129.443) -/-: 2.842170943040401e-14
    test 208 forward 309N (50.346, -124.343) -/-: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 209 reverse 309N (50.346, -124.343) -/-: 1.4210854715202004e-14
    test 210 forward 312N (53.530, -118.903) -/-: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 211 reverse 312N (53.530, -118.903) -/-: 1.4210854715202004e-14
    test 212 forward 315N (56.569, -113.137) -/-: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 213 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 214 forward 318N (59.452, -107.061) -/-: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 215 reverse 318N (59.452, -107.061) -/-: 1.4210854715202004e-14
    test 216 forward 321N (62.172, -100.691) -/-: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 217 reverse 321N (62.172, -100.691) -/-: 0.0
    test 218 forward 324N (64.721, -94.046) -/-: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 219 reverse 324N (64.721, -94.046) -/-: 0.0
    test 220 forward 327N (67.094, -87.142) -/-: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 221 reverse 327N (67.094, -87.142) -/-: 0.0
    test 222 forward 330N (69.282, -80.000) -/-: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 223 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 224 forward 333N (71.281, -72.638) -/-: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 225 reverse 333N (71.281, -72.638) -/-: 1.4210854715202004e-14
    test 226 forward 336N (73.084, -65.078) -/-: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 227 reverse 336N (73.084, -65.078) -/-: 1.4210854715202004e-14
    test 228 forward 339N (74.686, -57.339) -/-: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 229 reverse 339N (74.686, -57.339) -/-: 1.4210854715202004e-14
    test 230 forward 342N (76.085, -49.443) -/-: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 231 reverse 342N (76.085, -49.443) -/-: 3.552713678800501e-14
    test 232 forward 345N (77.274, -41.411) -/-: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 233 reverse 345N (77.274, -41.411) -/-: 0.0
    test 234 forward 348N (78.252, -33.266) -/-: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 235 reverse 348N (78.252, -33.266) -/-: 2.5618982671915014e-14
    test 236 forward 351N (79.015, -25.030) -/-: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 237 reverse 351N (79.015, -25.030) -/-: 2.842170943040401e-14
    test 238 forward 354N (79.562, -16.725) -/-: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 239 reverse 354N (79.562, -16.725) -/-: 1.7763568394002505e-14
    test 240 forward 357N (79.890, -8.374) -/-: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 241 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 242 forward 360N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 243 reverse 360N (80.000, 0.000) -/-: 0.0
    test 244 max: 5.859285502108464e-14  FAILED, KNOWN, expected 6e-14

    test 245 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 246 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    test 247 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=4)
    test 248 forward 0N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 249 reverse 0N (80.000, 0.000) -/-: 0.0
    test 250 forward 3N (79.890, 8.374) -/-: 162830.781916, 8891598.152508, 8.245541, 0.999927
    test 251 reverse 3N (79.890, 8.374) -/-: 3.552713678800501e-15
    test 252 forward 6N (79.562, 16.725) -/-: 332334.438121, 8891401.702739, 16.462875, 1.000961
    test 253 reverse 6N (79.562, 16.725) -/-: 3.552713678800501e-15
    test 254 forward 9N (79.015, 25.030) -/-: 514536.969405, 8894816.626946, 24.625748, 1.002864
    test 255 reverse 9N (79.015, 25.030) -/-: 3.552713678800501e-15
    test 256 forward 12N (78.252, 33.266) -/-: 714245.109628, 8907114.580812, 32.711919, 1.005893
    test 257 reverse 12N (78.252, 33.266) -/-: 1.4210854715202004e-14
    test 258 forward 15N (77.274, 41.411) -/-: 934605.427053, 8935050.398758, 40.705275, 1.010384
    test 259 reverse 15N (77.274, 41.411) -/-: 2.1316282072803006e-14
    test 260 forward 18N (76.085, 49.443) -/-: 1176821.393989, 8986356.098856, 48.597784, 1.016715
    test 261 reverse 18N (76.085, 49.443) -/-: 7.105427357601002e-15
    test 262 forward 21N (74.686, 57.339) -/-: 1440020.023752, 9069222.197918, 56.390849, 1.025263
    test 263 reverse 21N (74.686, 57.339) -/-: 1.4210854715202004e-14
    test 264 forward 24N (73.084, 65.078) -/-: 1721232.03303, 9191807.409386, 64.095597, 1.036332
    test 265 reverse 24N (73.084, 65.078) -/-: 4.4938668397781776e-14
    test 266 forward 27N (71.281, 72.638) -/-: 2015439.94304, 9361783.139474, 71.731644, 1.050076
    test 267 reverse 27N (71.281, 72.638) -/-: 0.0
    test 268 forward 30N (69.282, 80.000) -/-: 2315663.380439, 9585883.63353, 79.324018, 1.066413
    test 269 reverse 30N (69.282, 80.000) -/-: 0.0
    test 270 forward 33N (67.094, 87.142) -/-: 2613089.50746, 9869411.258858, 86.898056, 1.084934
    test 271 reverse 33N (67.094, 87.142) -/-: 1.4210854715202004e-14
    test 272 forward 36N (64.721, 94.046) -/-: 2897310.302591, 10215654.794479, 94.472414, 1.104843
    test 273 reverse 36N (64.721, 94.046) -/-: 4.4938668397781776e-14
    test 274 forward 39N (62.172, 100.691) -/-: 3156777.9732, 10625229.653451, 102.050793, 1.12494
    test 275 reverse 39N (62.172, 100.691) -/-: 7.105427357601002e-15
    test 276 forward 42N (59.452, 107.061) -/-: 3379601.994821, 11095444.501021, 109.613799, 1.143688
    test 277 reverse 42N (59.452, 107.061) -/-: 2.0097183471152322e-14
    test 278 forward 45N (56.569, 113.137) -/-: 3554744.82183, 11619912.294696, 117.113212, 1.159405
    test 279 reverse 45N (56.569, 113.137) -/-: 0.0
    test 280 forward 48N (53.530, 118.903) -/-: 3673507.549162, 12188686.186502, 124.471401, 1.170561
    test 281 reverse 48N (53.530, 118.903) -/-: 2.1316282072803006e-14
    test 282 forward 51N (50.346, 124.343) -/-: 3730980.59573, 12789121.454112, 131.587794, 1.176106
    test 283 reverse 51N (50.346, 124.343) -/-: 1.5888218580782548e-14
    test 284 forward 54N (47.023, 129.443) -/-: 3727003.760242, 13407411.821957, 138.351947, 1.175719
    test 285 reverse 54N (47.023, 129.443) -/-: 0.0
    test 286 forward 57N (43.571, 134.187) -/-: 3666275.084648, 14030431.844036, 144.659906, 1.16987
    test 287 reverse 57N (43.571, 134.187) -/-: 0.0
    test 288 forward 60N (40.000, 138.564) -/-: 3557564.445775, 14647347.719581, 150.428973, 1.159665
    test 289 reverse 60N (40.000, 138.564) -/-: 7.105427357601002e-15
    test 290 forward 63N (36.319, 142.561) -/-: 3412334.48396, 15250567.642625, 155.606964, 1.146559
    test 291 reverse 63N (36.319, 142.561) -/-: 0.0
    test 292 forward 66N (32.539, 146.167) -/-: 3243229.892204, 15835907.12812, 160.174784, 1.132049
    test 293 reverse 66N (32.539, 146.167) -/-: 3.1776437161565096e-14
    test 294 forward 69N (28.669, 149.373) -/-: 3062811.744735, 16402134.803105, 164.143685, 1.117448
    test 295 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 296 forward 72N (24.721, 152.169) -/-: 2882703.816659, 16950195.447611, 167.549757, 1.103767
    test 297 reverse 72N (24.721, 152.169) -/-: 0.0
    test 298 forward 75N (20.706, 154.548) -/-: 2713130.658999, 17482381.525728, 170.447906, 1.091693
    test 299 reverse 75N (20.706, 154.548) -/-: 1.0658141036401503e-14
    test 300 forward 78N (16.633, 156.504) -/-: 2562732.651149, 18001625.534999, 172.906642, 1.081633
    test 301 reverse 78N (16.633, 156.504) -/-: 7.105427357601002e-15
    test 302 forward 81N (12.515, 158.030) -/-: 2438532.075646, 18510987.984533, 175.004113, 1.07378
    test 303 reverse 81N (12.515, 158.030) -/-: 3.552713678800501e-15
    test 304 forward 84N (8.362, 159.124) -/-: 2345956.628332, 19013350.872509, 176.82525, 1.068192
    test 305 reverse 84N (8.362, 159.124) -/-: 8.881784197001252e-15
    test 306 forward 87N (4.187, 159.781) -/-: 2288868.720832, 19511292.939628, 178.459673, 1.064859
    test 307 reverse 87N (4.187, 159.781) -/-: 1.9539925233402755e-14
    test 308 forward 90N (0.000, 160.000) -/-: 2269582.383311, -20007108.306493, -180.0, 1.063752
    test 309 reverse 90N (0.000, 160.000) -/-: 0.0
    test 310 forward 93N (-4.187, 159.781) -/-: 2288868.720832, -19511292.939628, -178.459673, 1.064859
    test 311 reverse 93N (-4.187, 159.781) -/-: 3.019806626980426e-14
    test 312 forward 96N (-8.362, 159.124) -/-: 2345956.628332, -19013350.872509, -176.82525, 1.068192
    test 313 reverse 96N (-8.362, 159.124) -/-: 1.0658141036401503e-14
    test 314 forward 99N (-12.515, 158.030) -/-: 2438532.075646, -18510987.984533, -175.004113, 1.07378
    test 315 reverse 99N (-12.515, 158.030) -/-: 8.881784197001252e-15
    test 316 forward 102N (-16.633, 156.504) -/-: 2562732.651149, -18001625.534999, -172.906642, 1.081633
    test 317 reverse 102N (-16.633, 156.504) -/-: 3.552713678800501e-15
    test 318 forward 105N (-20.706, 154.548) -/-: 2713130.658999, -17482381.525728, -170.447906, 1.091693
    test 319 reverse 105N (-20.706, 154.548) -/-: 1.0658141036401503e-14
    test 320 forward 108N (-24.721, 152.169) -/-: 2882703.816659, -16950195.447611, -167.549757, 1.103767
    test 321 reverse 108N (-24.721, 152.169) -/-: 3.552713678800501e-15
    test 322 forward 111N (-28.669, 149.373) -/-: 3062811.744735, -16402134.803105, -164.143685, 1.117448
    test 323 reverse 111N (-28.669, 149.373) -/-: 1.0658141036401503e-14
    test 324 forward 114N (-32.539, 146.167) -/-: 3243229.892204, -15835907.12812, -160.174784, 1.132049
    test 325 reverse 114N (-32.539, 146.167) -/-: 3.1776437161565096e-14
    test 326 forward 117N (-36.319, 142.561) -/-: 3412334.48396, -15250567.642625, -155.606964, 1.146559
    test 327 reverse 117N (-36.319, 142.561) -/-: 0.0
    test 328 forward 120N (-40.000, 138.564) -/-: 3557564.445775, -14647347.719581, -150.428973, 1.159665
    test 329 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 330 forward 123N (-43.571, 134.187) -/-: 3666275.084648, -14030431.844036, -144.659906, 1.16987
    test 331 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 332 forward 126N (-47.023, 129.443) -/-: 3727003.760242, -13407411.821957, -138.351947, 1.175719
    test 333 reverse 126N (-47.023, 129.443) -/-: 0.0
    test 334 forward 129N (-50.346, 124.343) -/-: 3730980.59573, -12789121.454112, -131.587794, 1.176106
    test 335 reverse 129N (-50.346, 124.343) -/-: 1.5888218580782548e-14
    test 336 forward 132N (-53.530, 118.903) -/-: 3673507.549162, -12188686.186502, -124.471401, 1.170561
    test 337 reverse 132N (-53.530, 118.903) -/-: 2.1316282072803006e-14
    test 338 forward 135N (-56.569, 113.137) -/-: 3554744.82183, -11619912.294696, -117.113212, 1.159405
    test 339 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 340 forward 138N (-59.452, 107.061) -/-: 3379601.994821, -11095444.501021, -109.613799, 1.143688
    test 341 reverse 138N (-59.452, 107.061) -/-: 2.0097183471152322e-14
    test 342 forward 141N (-62.172, 100.691) -/-: 3156777.9732, -10625229.653451, -102.050793, 1.12494
    test 343 reverse 141N (-62.172, 100.691) -/-: 7.105427357601002e-15
    test 344 forward 144N (-64.721, 94.046) -/-: 2897310.302591, -10215654.794479, -94.472414, 1.104843
    test 345 reverse 144N (-64.721, 94.046) -/-: 4.4938668397781776e-14
    test 346 forward 147N (-67.094, 87.142) -/-: 2613089.50746, -9869411.258858, -86.898056, 1.084934
    test 347 reverse 147N (-67.094, 87.142) -/-: 1.4210854715202004e-14
    test 348 forward 150N (-69.282, 80.000) -/-: 2315663.380439, -9585883.63353, -79.324018, 1.066413
    test 349 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 350 forward 153N (-71.281, 72.638) -/-: 2015439.94304, -9361783.139474, -71.731644, 1.050076
    test 351 reverse 153N (-71.281, 72.638) -/-: 0.0
    test 352 forward 156N (-73.084, 65.078) -/-: 1721232.03303, -9191807.409386, -64.095597, 1.036332
    test 353 reverse 156N (-73.084, 65.078) -/-: 4.4938668397781776e-14
    test 354 forward 159N (-74.686, 57.339) -/-: 1440020.023752, -9069222.197918, -56.390849, 1.025263
    test 355 reverse 159N (-74.686, 57.339) -/-: 1.5888218580782548e-14
    test 356 forward 162N (-76.085, 49.443) -/-: 1176821.393989, -8986356.098856, -48.597784, 1.016715
    test 357 reverse 162N (-76.085, 49.443) -/-: 7.105427357601002e-15
    test 358 forward 165N (-77.274, 41.411) -/-: 934605.427053, -8935050.398758, -40.705275, 1.010384
    test 359 reverse 165N (-77.274, 41.411) -/-: 2.1316282072803006e-14
    test 360 forward 168N (-78.252, 33.266) -/-: 714245.109628, -8907114.580812, -32.711919, 1.005893
    test 361 reverse 168N (-78.252, 33.266) -/-: 1.4210854715202004e-14
    test 362 forward 171N (-79.015, 25.030) -/-: 514536.969405, -8894816.626946, -24.625748, 1.002864
    test 363 reverse 171N (-79.015, 25.030) -/-: 3.552713678800501e-15
    test 364 forward 174N (-79.562, 16.725) -/-: 332334.438121, -8891401.702739, -16.462875, 1.000961
    test 365 reverse 174N (-79.562, 16.725) -/-: 3.552713678800501e-15
    test 366 forward 177N (-79.890, 8.374) -/-: 162830.781916, -8891598.152508, -8.245541, 0.999927
    test 367 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 368 forward 180N (-80.000, 0.000) -/-: 0.0, -8892048.136219, 0.0, 0.9996
    test 369 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 370 forward 183N (-79.890, -8.374) -/-: -162830.781916, -8891598.152508, 8.245541, 0.999927
    test 371 reverse 183N (-79.890, -8.374) -/-: 3.552713678800501e-15
    test 372 forward 186N (-79.562, -16.725) -/-: -332334.438121, -8891401.702739, 16.462875, 1.000961
    test 373 reverse 186N (-79.562, -16.725) -/-: 3.552713678800501e-15
    test 374 forward 189N (-79.015, -25.030) -/-: -514536.969405, -8894816.626946, 24.625748, 1.002864
    test 375 reverse 189N (-79.015, -25.030) -/-: 3.552713678800501e-15
    test 376 forward 192N (-78.252, -33.266) -/-: -714245.109628, -8907114.580812, 32.711919, 1.005893
    test 377 reverse 192N (-78.252, -33.266) -/-: 1.4210854715202004e-14
    test 378 forward 195N (-77.274, -41.411) -/-: -934605.427053, -8935050.398758, 40.705275, 1.010384
    test 379 reverse 195N (-77.274, -41.411) -/-: 2.1316282072803006e-14
    test 380 forward 198N (-76.085, -49.443) -/-: -1176821.393989, -8986356.098856, 48.597784, 1.016715
    test 381 reverse 198N (-76.085, -49.443) -/-: 7.105427357601002e-15
    test 382 forward 201N (-74.686, -57.339) -/-: -1440020.023752, -9069222.197918, 56.390849, 1.025263
    test 383 reverse 201N (-74.686, -57.339) -/-: 1.4210854715202004e-14
    test 384 forward 204N (-73.084, -65.078) -/-: -1721232.03303, -9191807.409386, 64.095597, 1.036332
    test 385 reverse 204N (-73.084, -65.078) -/-: 4.4938668397781776e-14
    test 386 forward 207N (-71.281, -72.638) -/-: -2015439.94304, -9361783.139474, 71.731644, 1.050076
    test 387 reverse 207N (-71.281, -72.638) -/-: 0.0
    test 388 forward 210N (-69.282, -80.000) -/-: -2315663.380439, -9585883.63353, 79.324018, 1.066413
    test 389 reverse 210N (-69.282, -80.000) -/-: 0.0
    test 390 forward 213N (-67.094, -87.142) -/-: -2613089.50746, -9869411.258858, 86.898056, 1.084934
    test 391 reverse 213N (-67.094, -87.142) -/-: 1.4210854715202004e-14
    test 392 forward 216N (-64.721, -94.046) -/-: -2897310.302591, -10215654.794479, 94.472414, 1.104843
    test 393 reverse 216N (-64.721, -94.046) -/-: 4.4938668397781776e-14
    test 394 forward 219N (-62.172, -100.691) -/-: -3156777.9732, -10625229.653451, 102.050793, 1.12494
    test 395 reverse 219N (-62.172, -100.691) -/-: 7.105427357601002e-15
    test 396 forward 222N (-59.452, -107.061) -/-: -3379601.994821, -11095444.501021, 109.613799, 1.143688
    test 397 reverse 222N (-59.452, -107.061) -/-: 2.0097183471152322e-14
    test 398 forward 225N (-56.569, -113.137) -/-: -3554744.82183, -11619912.294696, 117.113212, 1.159405
    test 399 reverse 225N (-56.569, -113.137) -/-: 0.0
    test 400 forward 228N (-53.530, -118.903) -/-: -3673507.549162, -12188686.186502, 124.471401, 1.170561
    test 401 reverse 228N (-53.530, -118.903) -/-: 2.1316282072803006e-14
    test 402 forward 231N (-50.346, -124.343) -/-: -3730980.59573, -12789121.454112, 131.587794, 1.176106
    test 403 reverse 231N (-50.346, -124.343) -/-: 1.5888218580782548e-14
    test 404 forward 234N (-47.023, -129.443) -/-: -3727003.760242, -13407411.821957, 138.351947, 1.175719
    test 405 reverse 234N (-47.023, -129.443) -/-: 0.0
    test 406 forward 237N (-43.571, -134.187) -/-: -3666275.084648, -14030431.844036, 144.659906, 1.16987
    test 407 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 408 forward 240N (-40.000, -138.564) -/-: -3557564.445775, -14647347.719581, 150.428973, 1.159665
    test 409 reverse 240N (-40.000, -138.564) -/-: 7.105427357601002e-15
    test 410 forward 243N (-36.319, -142.561) -/-: -3412334.48396, -15250567.642625, 155.606964, 1.146559
    test 411 reverse 243N (-36.319, -142.561) -/-: 0.0
    test 412 forward 246N (-32.539, -146.167) -/-: -3243229.892204, -15835907.12812, 160.174784, 1.132049
    test 413 reverse 246N (-32.539, -146.167) -/-: 3.1776437161565096e-14
    test 414 forward 249N (-28.669, -149.373) -/-: -3062811.744735, -16402134.803105, 164.143685, 1.117448
    test 415 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 416 forward 252N (-24.721, -152.169) -/-: -2882703.816659, -16950195.447611, 167.549757, 1.103767
    test 417 reverse 252N (-24.721, -152.169) -/-: 0.0
    test 418 forward 255N (-20.706, -154.548) -/-: -2713130.658999, -17482381.525728, 170.447906, 1.091693
    test 419 reverse 255N (-20.706, -154.548) -/-: 1.0658141036401503e-14
    test 420 forward 258N (-16.633, -156.504) -/-: -2562732.651149, -18001625.534999, 172.906642, 1.081633
    test 421 reverse 258N (-16.633, -156.504) -/-: 7.105427357601002e-15
    test 422 forward 261N (-12.515, -158.030) -/-: -2438532.075646, -18510987.984533, 175.004113, 1.07378
    test 423 reverse 261N (-12.515, -158.030) -/-: 3.552713678800501e-15
    test 424 forward 264N (-8.362, -159.124) -/-: -2345956.628332, -19013350.872509, 176.82525, 1.068192
    test 425 reverse 264N (-8.362, -159.124) -/-: 8.881784197001252e-15
    test 426 forward 267N (-4.187, -159.781) -/-: -2288868.720832, -19511292.939628, 178.459673, 1.064859
    test 427 reverse 267N (-4.187, -159.781) -/-: 1.9539925233402755e-14
    test 428 forward 270N (0.000, -160.000) -/-: -2269582.383311, -20007108.306493, 180.0, 1.063752
    test 429 reverse 270N (0.000, -160.000) -/-: 0.0
    test 430 forward 273N (4.187, -159.781) -/-: -2288868.720832, 19511292.939628, -178.459673, 1.064859
    test 431 reverse 273N (4.187, -159.781) -/-: 3.019806626980426e-14
    test 432 forward 276N (8.362, -159.124) -/-: -2345956.628332, 19013350.872509, -176.82525, 1.068192
    test 433 reverse 276N (8.362, -159.124) -/-: 1.0658141036401503e-14
    test 434 forward 279N (12.515, -158.030) -/-: -2438532.075646, 18510987.984533, -175.004113, 1.07378
    test 435 reverse 279N (12.515, -158.030) -/-: 8.881784197001252e-15
    test 436 forward 282N (16.633, -156.504) -/-: -2562732.651149, 18001625.534999, -172.906642, 1.081633
    test 437 reverse 282N (16.633, -156.504) -/-: 3.552713678800501e-15
    test 438 forward 285N (20.706, -154.548) -/-: -2713130.658999, 17482381.525728, -170.447906, 1.091693
    test 439 reverse 285N (20.706, -154.548) -/-: 1.0658141036401503e-14
    test 440 forward 288N (24.721, -152.169) -/-: -2882703.816659, 16950195.447611, -167.549757, 1.103767
    test 441 reverse 288N (24.721, -152.169) -/-: 3.552713678800501e-15
    test 442 forward 291N (28.669, -149.373) -/-: -3062811.744735, 16402134.803105, -164.143685, 1.117448
    test 443 reverse 291N (28.669, -149.373) -/-: 1.0658141036401503e-14
    test 444 forward 294N (32.539, -146.167) -/-: -3243229.892204, 15835907.12812, -160.174784, 1.132049
    test 445 reverse 294N (32.539, -146.167) -/-: 3.1776437161565096e-14
    test 446 forward 297N (36.319, -142.561) -/-: -3412334.48396, 15250567.642625, -155.606964, 1.146559
    test 447 reverse 297N (36.319, -142.561) -/-: 0.0
    test 448 forward 300N (40.000, -138.564) -/-: -3557564.445775, 14647347.719581, -150.428973, 1.159665
    test 449 reverse 300N (40.000, -138.564) -/-: 0.0
    test 450 forward 303N (43.571, -134.187) -/-: -3666275.084648, 14030431.844036, -144.659906, 1.16987
    test 451 reverse 303N (43.571, -134.187) -/-: 0.0
    test 452 forward 306N (47.023, -129.443) -/-: -3727003.760242, 13407411.821957, -138.351947, 1.175719
    test 453 reverse 306N (47.023, -129.443) -/-: 0.0
    test 454 forward 309N (50.346, -124.343) -/-: -3730980.59573, 12789121.454112, -131.587794, 1.176106
    test 455 reverse 309N (50.346, -124.343) -/-: 1.5888218580782548e-14
    test 456 forward 312N (53.530, -118.903) -/-: -3673507.549162, 12188686.186502, -124.471401, 1.170561
    test 457 reverse 312N (53.530, -118.903) -/-: 2.1316282072803006e-14
    test 458 forward 315N (56.569, -113.137) -/-: -3554744.82183, 11619912.294696, -117.113212, 1.159405
    test 459 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 460 forward 318N (59.452, -107.061) -/-: -3379601.994821, 11095444.501021, -109.613799, 1.143688
    test 461 reverse 318N (59.452, -107.061) -/-: 2.0097183471152322e-14
    test 462 forward 321N (62.172, -100.691) -/-: -3156777.9732, 10625229.653451, -102.050793, 1.12494
    test 463 reverse 321N (62.172, -100.691) -/-: 7.105427357601002e-15
    test 464 forward 324N (64.721, -94.046) -/-: -2897310.302591, 10215654.794479, -94.472414, 1.104843
    test 465 reverse 324N (64.721, -94.046) -/-: 4.4938668397781776e-14
    test 466 forward 327N (67.094, -87.142) -/-: -2613089.50746, 9869411.258858, -86.898056, 1.084934
    test 467 reverse 327N (67.094, -87.142) -/-: 1.4210854715202004e-14
    test 468 forward 330N (69.282, -80.000) -/-: -2315663.380439, 9585883.63353, -79.324018, 1.066413
    test 469 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 470 forward 333N (71.281, -72.638) -/-: -2015439.94304, 9361783.139474, -71.731644, 1.050076
    test 471 reverse 333N (71.281, -72.638) -/-: 0.0
    test 472 forward 336N (73.084, -65.078) -/-: -1721232.03303, 9191807.409386, -64.095597, 1.036332
    test 473 reverse 336N (73.084, -65.078) -/-: 4.4938668397781776e-14
    test 474 forward 339N (74.686, -57.339) -/-: -1440020.023752, 9069222.197918, -56.390849, 1.025263
    test 475 reverse 339N (74.686, -57.339) -/-: 1.5888218580782548e-14
    test 476 forward 342N (76.085, -49.443) -/-: -1176821.393989, 8986356.098856, -48.597784, 1.016715
    test 477 reverse 342N (76.085, -49.443) -/-: 7.105427357601002e-15
    test 478 forward 345N (77.274, -41.411) -/-: -934605.427053, 8935050.398758, -40.705275, 1.010384
    test 479 reverse 345N (77.274, -41.411) -/-: 2.1316282072803006e-14
    test 480 forward 348N (78.252, -33.266) -/-: -714245.109628, 8907114.580812, -32.711919, 1.005893
    test 481 reverse 348N (78.252, -33.266) -/-: 1.4210854715202004e-14
    test 482 forward 351N (79.015, -25.030) -/-: -514536.969405, 8894816.626946, -24.625748, 1.002864
    test 483 reverse 351N (79.015, -25.030) -/-: 3.552713678800501e-15
    test 484 forward 354N (79.562, -16.725) -/-: -332334.438121, 8891401.702739, -16.462875, 1.000961
    test 485 reverse 354N (79.562, -16.725) -/-: 3.552713678800501e-15
    test 486 forward 357N (79.890, -8.374) -/-: -162830.781916, 8891598.152508, -8.245541, 0.999927
    test 487 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 488 forward 360N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 489 reverse 360N (80.000, 0.000) -/-: 0.0
    test 490 max: 4.4938668397781776e-14  FAILED, KNOWN, expected 5e-14

    test 491 forward: 6196225.831883, 5458228.732328, 40.893395, 1.511253
    test 492 reverse: 30.172556, 60.208316, 41.279729, 1.511925

    test 493 _TM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
# lazily imported pygeodesy.elliptic by etm.py line 354
    test 494 forward 0N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 495 reverse 0N (80.000, 0.000) 3/3: 0.0
    test 496 forward 3N (79.890, 8.374) 3/4: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 497 reverse 3N (79.890, 8.374) 3/3: 3.552713678800501e-14
    test 498 forward 6N (79.562, 16.725) 3/4: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 499 reverse 6N (79.562, 16.725) 3/3: 1.0658141036401503e-14
    test 500 forward 9N (79.015, 25.030) 3/4: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 501 reverse 9N (79.015, 25.030) 3/3: 1.5888218580782548e-14
    test 502 forward 12N (78.252, 33.266) 3/4: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 503 reverse 12N (78.252, 33.266) 3/3: 1.4210854715202004e-14
    test 504 forward 15N (77.274, 41.411) 3/4: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 505 reverse 15N (77.274, 41.411) 3/3: 0.0
    test 506 forward 18N (76.085, 49.443) 3/4: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 507 reverse 18N (76.085, 49.443) 3/3: 7.105427357601002e-15
    test 508 forward 21N (74.686, 57.339) 3/4: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 509 reverse 21N (74.686, 57.339) 3/3: 7.815970093361102e-14
    test 510 forward 24N (73.084, 65.078) 3/4: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 511 reverse 24N (73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 512 forward 27N (71.281, 72.638) 3/4: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 513 reverse 27N (71.281, 72.638) 3/3: 2.842170943040401e-14
    test 514 forward 30N (69.282, 80.000) 3/4: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 515 reverse 30N (69.282, 80.000) 3/4: 7.105427357601002e-14
    test 516 forward 33N (67.094, 87.142) 3/4: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 517 reverse 33N (67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 518 forward 36N (64.721, 94.046) 3/4: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 519 reverse 36N (64.721, 94.046) 3/4: 3.1776437161565096e-14
    test 520 forward 39N (62.172, 100.691) 3/4: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 521 reverse 39N (62.172, 100.691) 3/4: 7.105427357601002e-15
    test 522 forward 42N (59.452, 107.061) 3/4: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 523 reverse 42N (59.452, 107.061) 3/4: 4.4938668397781776e-14
    test 524 forward 45N (56.569, 113.137) 3/4: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 525 reverse 45N (56.569, 113.137) 3/4: 1.5888218580782548e-14
    test 526 forward 48N (53.530, 118.903) 3/4: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 527 reverse 48N (53.530, 118.903) 3/4: 7.105427357601002e-15
    test 528 forward 51N (50.346, 124.343) 3/4: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 529 reverse 51N (50.346, 124.343) 3/4: 3.1776437161565096e-14
    test 530 forward 54N (47.023, 129.443) 3/4: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 531 reverse 54N (47.023, 129.443) 3/4: 3.1776437161565096e-14
    test 532 forward 57N (43.571, 134.187) 3/4: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 533 reverse 57N (43.571, 134.187) 3/4: 1.4210854715202004e-14
    test 534 forward 60N (40.000, 138.564) 3/4: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 535 reverse 60N (40.000, 138.564) 3/4: 1.4210854715202004e-14
    test 536 forward 63N (36.319, 142.561) 3/4: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 537 reverse 63N (36.319, 142.561) 3/4: 7.105427357601002e-15
    test 538 forward 66N (32.539, 146.167) 3/4: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 539 reverse 66N (32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 540 forward 69N (28.669, 149.373) 3/4: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 541 reverse 69N (28.669, 149.373) 3/4: 1.0658141036401503e-14
    test 542 forward 72N (24.721, 152.169) 3/4: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 543 reverse 72N (24.721, 152.169) 3/4: 1.4210854715202004e-14
    test 544 forward 75N (20.706, 154.548) 3/4: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 545 reverse 75N (20.706, 154.548) 3/4: 3.552713678800501e-15
    test 546 forward 78N (16.633, 156.504) 3/4: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 547 reverse 78N (16.633, 156.504) 3/4: 3.552713678800501e-15
    test 548 forward 81N (12.515, 158.030) 3/4: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 549 reverse 81N (12.515, 158.030) 3/4: 5.329070518200751e-15
    test 550 forward 84N (8.362, 159.124) 3/4: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 551 reverse 84N (8.362, 159.124) 3/4: 8.881784197001252e-15
    test 552 forward 87N (4.187, 159.781) 3/4: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 553 reverse 87N (4.187, 159.781) 3/4: 9.769962616701378e-15
    test 554 forward 90N (0.000, 160.000) 3/4: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 555 reverse 90N (0.000, 160.000) 3/3: 0.0
    test 556 forward 93N (-4.187, 159.781) 3/4: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 557 reverse 93N (-4.187, 159.781) 3/4: 4.440892098500626e-15
    test 558 forward 96N (-8.362, 159.124) 3/4: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 559 reverse 96N (-8.362, 159.124) 3/4: 1.0658141036401503e-14
    test 560 forward 99N (-12.515, 158.030) 3/4: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 561 reverse 99N (-12.515, 158.030) 3/4: 1.0658141036401503e-14
    test 562 forward 102N (-16.633, 156.504) 3/4: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 563 reverse 102N (-16.633, 156.504) 3/4: 1.4210854715202004e-14
    test 564 forward 105N (-20.706, 154.548) 3/4: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 565 reverse 105N (-20.706, 154.548) 3/4: 3.552713678800501e-15
    test 566 forward 108N (-24.721, 152.169) 3/4: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 567 reverse 108N (-24.721, 152.169) 3/4: 1.0658141036401503e-14
    test 568 forward 111N (-28.669, 149.373) 3/4: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 569 reverse 111N (-28.669, 149.373) 3/4: 7.105427357601002e-15
    test 570 forward 114N (-32.539, 146.167) 3/4: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 571 reverse 114N (-32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 572 forward 117N (-36.319, 142.561) 3/4: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 573 reverse 117N (-36.319, 142.561) 3/4: 7.105427357601002e-15
    test 574 forward 120N (-40.000, 138.564) 3/4: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 575 reverse 120N (-40.000, 138.564) 3/4: 3.552713678800501e-14
    test 576 forward 123N (-43.571, 134.187) 3/4: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 577 reverse 123N (-43.571, 134.187) 3/4: 1.4210854715202004e-14
    test 578 forward 126N (-47.023, 129.443) 3/4: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 579 reverse 126N (-47.023, 129.443) 3/4: 3.1776437161565096e-14
    test 580 forward 129N (-50.346, 124.343) 3/4: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 581 reverse 129N (-50.346, 124.343) 3/4: 3.1776437161565096e-14
    test 582 forward 132N (-53.530, 118.903) 3/4: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 583 reverse 132N (-53.530, 118.903) 3/4: 7.105427357601002e-15
    test 584 forward 135N (-56.569, 113.137) 3/4: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 585 reverse 135N (-56.569, 113.137) 3/4: 3.552713678800501e-14
    test 586 forward 138N (-59.452, 107.061) 3/4: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 587 reverse 138N (-59.452, 107.061) 3/4: 4.4938668397781776e-14
    test 588 forward 141N (-62.172, 100.691) 3/4: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 589 reverse 141N (-62.172, 100.691) 3/4: 7.105427357601002e-15
    test 590 forward 144N (-64.721, 94.046) 3/4: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 591 reverse 144N (-64.721, 94.046) 3/4: 3.1776437161565096e-14
    test 592 forward 147N (-67.094, 87.142) 3/4: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 593 reverse 147N (-67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 594 forward 150N (-69.282, 80.000) 3/4: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 595 reverse 150N (-69.282, 80.000) 3/4: 8.526512829121202e-14
    test 596 forward 153N (-71.281, 72.638) 3/4: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 597 reverse 153N (-71.281, 72.638) 3/3: 2.842170943040401e-14
    test 598 forward 156N (-73.084, 65.078) 3/4: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 599 reverse 156N (-73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 600 forward 159N (-74.686, 57.339) 3/4: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 601 reverse 159N (-74.686, 57.339) 3/3: 5.684341886080802e-14
    test 602 forward 162N (-76.085, 49.443) 3/4: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 603 reverse 162N (-76.085, 49.443) 3/3: 0.0
    test 604 forward 165N (-77.274, 41.411) 3/4: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 605 reverse 165N (-77.274, 41.411) 3/3: 0.0
    test 606 forward 168N (-78.252, 33.266) 3/4: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 607 reverse 168N (-78.252, 33.266) 3/3: 7.105427357601002e-15
    test 608 forward 171N (-79.015, 25.030) 3/4: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 609 reverse 171N (-79.015, 25.030) 3/3: 1.4210854715202004e-14
    test 610 forward 174N (-79.562, 16.725) 3/4: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 611 reverse 174N (-79.562, 16.725) 3/3: 1.4210854715202004e-14
    test 612 forward 177N (-79.890, 8.374) 3/4: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 613 reverse 177N (-79.890, 8.374) 3/3: 3.552713678800501e-14
    test 614 forward 180N (-80.000, 0.000) 3/3: 0.0, -8881585.815988, 0.0, 0.9996
    test 615 reverse 180N (-80.000, 0.000) 3/3: 0.0
    test 616 forward 183N (-79.890, -8.374) 3/4: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 617 reverse 183N (-79.890, -8.374) 3/3: 3.552713678800501e-14
    test 618 forward 186N (-79.562, -16.725) 3/4: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 619 reverse 186N (-79.562, -16.725) 3/3: 1.0658141036401503e-14
    test 620 forward 189N (-79.015, -25.030) 3/4: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 621 reverse 189N (-79.015, -25.030) 3/3: 1.5888218580782548e-14
    test 622 forward 192N (-78.252, -33.266) 3/4: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 623 reverse 192N (-78.252, -33.266) 3/3: 1.4210854715202004e-14
    test 624 forward 195N (-77.274, -41.411) 3/4: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 625 reverse 195N (-77.274, -41.411) 3/3: 0.0
    test 626 forward 198N (-76.085, -49.443) 3/4: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 627 reverse 198N (-76.085, -49.443) 3/3: 7.105427357601002e-15
    test 628 forward 201N (-74.686, -57.339) 3/4: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 629 reverse 201N (-74.686, -57.339) 3/3: 7.815970093361102e-14
    test 630 forward 204N (-73.084, -65.078) 3/4: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 631 reverse 204N (-73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 632 forward 207N (-71.281, -72.638) 3/4: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 633 reverse 207N (-71.281, -72.638) 3/3: 2.842170943040401e-14
    test 634 forward 210N (-69.282, -80.000) 3/4: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 635 reverse 210N (-69.282, -80.000) 3/4: 7.105427357601002e-14
    test 636 forward 213N (-67.094, -87.142) 3/4: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 637 reverse 213N (-67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 638 forward 216N (-64.721, -94.046) 3/4: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 639 reverse 216N (-64.721, -94.046) 3/4: 3.1776437161565096e-14
    test 640 forward 219N (-62.172, -100.691) 3/4: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 641 reverse 219N (-62.172, -100.691) 3/4: 7.105427357601002e-15
    test 642 forward 222N (-59.452, -107.061) 3/4: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 643 reverse 222N (-59.452, -107.061) 3/4: 4.4938668397781776e-14
    test 644 forward 225N (-56.569, -113.137) 3/4: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 645 reverse 225N (-56.569, -113.137) 3/4: 1.5888218580782548e-14
    test 646 forward 228N (-53.530, -118.903) 3/4: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 647 reverse 228N (-53.530, -118.903) 3/4: 7.105427357601002e-15
    test 648 forward 231N (-50.346, -124.343) 3/4: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 649 reverse 231N (-50.346, -124.343) 3/4: 3.1776437161565096e-14
    test 650 forward 234N (-47.023, -129.443) 3/4: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 651 reverse 234N (-47.023, -129.443) 3/4: 3.1776437161565096e-14
    test 652 forward 237N (-43.571, -134.187) 3/4: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 653 reverse 237N (-43.571, -134.187) 3/4: 1.4210854715202004e-14
    test 654 forward 240N (-40.000, -138.564) 3/4: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 655 reverse 240N (-40.000, -138.564) 3/4: 1.4210854715202004e-14
    test 656 forward 243N (-36.319, -142.561) 3/4: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 657 reverse 243N (-36.319, -142.561) 3/4: 7.105427357601002e-15
    test 658 forward 246N (-32.539, -146.167) 3/4: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 659 reverse 246N (-32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 660 forward 249N (-28.669, -149.373) 3/4: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 661 reverse 249N (-28.669, -149.373) 3/4: 1.0658141036401503e-14
    test 662 forward 252N (-24.721, -152.169) 3/4: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 663 reverse 252N (-24.721, -152.169) 3/4: 1.4210854715202004e-14
    test 664 forward 255N (-20.706, -154.548) 3/4: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 665 reverse 255N (-20.706, -154.548) 3/4: 3.552713678800501e-15
    test 666 forward 258N (-16.633, -156.504) 3/4: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 667 reverse 258N (-16.633, -156.504) 3/4: 3.552713678800501e-15
    test 668 forward 261N (-12.515, -158.030) 3/4: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 669 reverse 261N (-12.515, -158.030) 3/4: 5.329070518200751e-15
    test 670 forward 264N (-8.362, -159.124) 3/4: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 671 reverse 264N (-8.362, -159.124) 3/4: 8.881784197001252e-15
    test 672 forward 267N (-4.187, -159.781) 3/4: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 673 reverse 267N (-4.187, -159.781) 3/4: 9.769962616701378e-15
    test 674 forward 270N (0.000, -160.000) 3/4: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 675 reverse 270N (0.000, -160.000) 3/3: 0.0
    test 676 forward 273N (4.187, -159.781) 3/4: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 677 reverse 273N (4.187, -159.781) 3/4: 4.440892098500626e-15
    test 678 forward 276N (8.362, -159.124) 3/4: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 679 reverse 276N (8.362, -159.124) 3/4: 1.0658141036401503e-14
    test 680 forward 279N (12.515, -158.030) 3/4: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 681 reverse 279N (12.515, -158.030) 3/4: 1.0658141036401503e-14
    test 682 forward 282N (16.633, -156.504) 3/4: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 683 reverse 282N (16.633, -156.504) 3/4: 1.4210854715202004e-14
    test 684 forward 285N (20.706, -154.548) 3/4: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 685 reverse 285N (20.706, -154.548) 3/4: 3.552713678800501e-15
    test 686 forward 288N (24.721, -152.169) 3/4: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 687 reverse 288N (24.721, -152.169) 3/4: 1.0658141036401503e-14
    test 688 forward 291N (28.669, -149.373) 3/4: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 689 reverse 291N (28.669, -149.373) 3/4: 7.105427357601002e-15
    test 690 forward 294N (32.539, -146.167) 3/4: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 691 reverse 294N (32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 692 forward 297N (36.319, -142.561) 3/4: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 693 reverse 297N (36.319, -142.561) 3/4: 7.105427357601002e-15
    test 694 forward 300N (40.000, -138.564) 3/4: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 695 reverse 300N (40.000, -138.564) 3/4: 3.552713678800501e-14
    test 696 forward 303N (43.571, -134.187) 3/4: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 697 reverse 303N (43.571, -134.187) 3/4: 1.4210854715202004e-14
    test 698 forward 306N (47.023, -129.443) 3/4: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 699 reverse 306N (47.023, -129.443) 3/4: 3.1776437161565096e-14
    test 700 forward 309N (50.346, -124.343) 3/4: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 701 reverse 309N (50.346, -124.343) 3/4: 3.1776437161565096e-14
    test 702 forward 312N (53.530, -118.903) 3/4: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 703 reverse 312N (53.530, -118.903) 3/4: 7.105427357601002e-15
    test 704 forward 315N (56.569, -113.137) 3/4: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 705 reverse 315N (56.569, -113.137) 3/4: 3.552713678800501e-14
    test 706 forward 318N (59.452, -107.061) 3/4: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 707 reverse 318N (59.452, -107.061) 3/4: 4.4938668397781776e-14
    test 708 forward 321N (62.172, -100.691) 3/4: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 709 reverse 321N (62.172, -100.691) 3/4: 7.105427357601002e-15
    test 710 forward 324N (64.721, -94.046) 3/4: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 711 reverse 324N (64.721, -94.046) 3/4: 3.1776437161565096e-14
    test 712 forward 327N (67.094, -87.142) 3/4: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 713 reverse 327N (67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 714 forward 330N (69.282, -80.000) 3/4: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 715 reverse 330N (69.282, -80.000) 3/4: 8.526512829121202e-14
    test 716 forward 333N (71.281, -72.638) 3/4: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 717 reverse 333N (71.281, -72.638) 3/3: 2.842170943040401e-14
    test 718 forward 336N (73.084, -65.078) 3/4: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 719 reverse 336N (73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 720 forward 339N (74.686, -57.339) 3/4: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 721 reverse 339N (74.686, -57.339) 3/3: 5.684341886080802e-14
    test 722 forward 342N (76.085, -49.443) 3/4: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 723 reverse 342N (76.085, -49.443) 3/3: 0.0
    test 724 forward 345N (77.274, -41.411) 3/4: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 725 reverse 345N (77.274, -41.411) 3/3: 0.0
    test 726 forward 348N (78.252, -33.266) 3/4: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 727 reverse 348N (78.252, -33.266) 3/3: 7.105427357601002e-15
    test 728 forward 351N (79.015, -25.030) 3/4: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 729 reverse 351N (79.015, -25.030) 3/3: 1.4210854715202004e-14
    test 730 forward 354N (79.562, -16.725) 3/4: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 731 reverse 354N (79.562, -16.725) 3/3: 1.4210854715202004e-14
    test 732 forward 357N (79.890, -8.374) 3/4: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 733 reverse 357N (79.890, -8.374) 3/3: 3.552713678800501e-14
    test 734 forward 360N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 735 reverse 360N (80.000, 0.000) 3/3: 0.0
    test 736 max: 8.526512829121202e-14  FAILED, KNOWN, expected 9e-14

    test 737 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 738 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    3 of 738 testKtm.py tests (0.4%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 2.702 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLatLon.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.ellipsoidalExact by testLatLon.py line 633
# lazily imported pygeodesy.ellipsoidalNvector by testLatLon.py line 633
# lazily imported pygeodesy.sphericalNvector by testLatLon.py line 633
# lazily imported pygeodesy.sphericalTrigonometry by testLatLon.py line 633

    testing testLatLon.py 24.08.18 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.11.07)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
# lazily imported pygeodesy.ecef by latlonBase.py line 482
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: 62331.59
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
# lazily imported pygeodesy.booleans by iters.py line 76
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 981
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyz3: <class 'tuple'>
    test 155 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 156 compassAngleTo: <class 'float'>
    test 157 cosineLawTo: <class 'float'>
    test 158 euclideanTo: <class 'float'>
    test 159 flatLocalTo: <class 'float'>
    test 160 flatPolarTo: <class 'float'>
    test 161 haversineTo: <class 'float'>
    test 162 hubenyTo: <class 'float'>
    test 163 vincentysTo: <class 'float'>
    test 164 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 165 toVector3d: (0.61566, 0.0, 0.78801)
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 170 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
# lazily imported pygeodesy.vector2d by latlonBase.py line 1145

    test 171 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)

    22 tests skipped (22): No module named 'numpy': required by vector2d._numpy

    test 172 area cw/ccw: 1.0

    testLatLon(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 173 isEllipsoidal: False
    test 174 isSpherical: True
    test 175 lat/lonDMS: 52.20472°N, 000.14056°E
    test 176 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 177 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 178 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 179 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 180 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 181 isequalTo: True
    test 182 isequalTo: True
    test 183 latlon2: 52.20472, 0.14056
    test 184 latlon2: 52.2047, 0.1406
    test 185 latlon2: 52.205, 0.141
    test 186 latlon2: 52.2, 0.14
    test 187 latlon2: 52.2, 0.1
    test 188 latlon2: 52.0, 0.0
    test 189 chordTo: 12036677.26
    test 190 chordTo: 12036463.78
    test 191 initialBearingTo: 156.1666
    test 192 initialBearingTo: 65.8921
    test 193 initialBearingTo: 0.0
    test 194 initialBearingTo: 180.0
    test 195 finalBearingTo: 157.8904
    test 196 finalBearingTo: 93.8581
    test 197 bearingTo2: 156.1666, 157.8904
    test 198 ispolar: True
    test 199 copy: True
    test 200 __eq__: True
    test 201 __ne__: False
    test 202 equirectangularTo: 404329.56
    test 203 distanceTo: 404279.720589
    test 204 distanceTo: 404279.720589
    test 205 distanceTo: 2145
    test 206 antipodal: False
    test 207 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 208 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 209 antipodal: False
    test 210 distanceTo dateline: 9491735
    test 211 distanceTo unrolled: 9491735
    test 212 distanceTo: 18013602.92
    test 213 distanceTo: 20015114.35
    test 214 intermediateTo: 51.372084°N, 000.707337°E
    test 215 intermediateTo: True
    test 216 intermediateTo: 404279.721
    test 217 intermediateTo+5: 35.160975°N, 008.989542°E
    test 218 intermediateTo+5: 5.000
    test 219 intermediateTo-4: 64.911647°N, 013.726301°W
    test 220 intermediateTo-4: 4.000
    test 221 intermediateTo-h: 125.000
    test 222 midpointTo: 50.536327°N, 001.274614°E
    test 223 destination: 51.513546°N, 000.098345°W
    test 224 destination: 51°30′49″N, 000°05′54″W
    test 225 destination: 34°37′N, 116°33′W
    test 226 destination: 34.613647°N, 116.55116°W
    test 227 destination: 0.604122N, 2.034201W
    test 228 destination: 31.96383509°N, 064.37329146°E
    test 229 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 230 alongTrackDistanceTo: 62331.58
    test 231 alongTrackDistanceTo: 99.588
    test 232 alongTrackDistanceTo: -7702.7
    test 233 alongTrackDistanceTo: 7587.6
    test 234 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 235 crossTrackDistanceTo: -307.55
    test 236 crossTrackDistanceTo: 7.4524
    test 237 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 238 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 239 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 240 chordTo: 124799.103
    test 241 cosineAndoyerLambertTo: 124801.098
    test 242 cosineAndoyerLambertTo: 124801.098
    test 243 cosineForsyheAndoyerLambertTo: 124801.098
    test 244 cosineForsyheAndoyerLambertTo: 124801.098
    test 245 cosineLawTo: 124801.098
    test 246 cosineLawTo: 124801.098
    test 247 equirectangularTo: 124804.754
    test 248 equirectangularTo: 124804.754
    test 249 euclideanTo: 130015.089
    test 250 euclideanTo: 130015.089
    test 251 flatLocalTo: 124804.754
    test 252 flatLocalTo: 124804.754
    test 253 flatPolarTo: 133663.257
    test 254 flatPolarTo: 133663.257
    test 255 hartzell: 53.3206°N, 001.7297°W
    test 256 hartzell: 53.3206°N, 001.7297°W
    test 257 height4: 0.0
    test 258 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 259 height4: 53°19′14.2″N, 001°43′46.9″W
    test 260 height4: 53°19′14.2″N, 001°43′46.9″W
    test 261 haversineTo: 124801.098
    test 262 haversineTo: 124801.098
    test 263 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 264 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 265 thomasTo: 124801.098
    test 266 thomasTo: 124801.098
    test 267 vincentysTo: 124801.098
    test 268 vincentysTo: 124801.098
    test 269 isclockwise: False
    test 270 isclockwise*: False
    test 271 isclockwise: True
    test 272 isclockwise*: True
    test 273 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 274 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 275 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 276 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 277 isconvex: False
    test 278 isconvex*: False
    test 279 isconvex: True
    test 280 isconvex*: True
    test 281 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 282 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 283 isenclosedBy1: True
    test 284 isenclosedBy1*: True
    test 285 isenclosedBy2: False
    test 286 isenclosedBy2*: False
    test 287 isenclosedBy3: False
    test 288 isenclosedBy3*: False
    test 289 isenclosedBy4: False
    test 290 isenclosedBy4*: False
    test 291 isenclosedBy5: False
    test 292 isenclosedBy5*: False
    test 293 isenclosedBy6: True
    test 294 isenclosedBy6*: True
    test 295 isenclosedBy7: True
    test 296 isenclosedBy7*: True
    test 297 isenclosedBy-CCW: True
    test 298 isenclosedBy-CW : True
    test 299 isenclosedBy-CCW: True
    test 300 initialBearingTo: 102.432182
    test 301 compassAngleTo: 100.017
    test 302 compassAngleTo: 105.599
    test 303 initialBearingTo: 288.715918
    test 304 compassAngleTo: 280.017
    test 305 compassAngleTo: 285.599
    test 306 equirectangularTo: 592.185
    test 307 distanceTo: 591.831
    test 308 bearingTo: 0.0
    test 309 compassAngleTo: 0.0
    test 310 bearingTo: 45.0
    test 311 compassAngleTo: 45.0
    test 312 bearingTo: 90.0
    test 313 compassAngleTo: 90.0
    test 314 bearingTo: 180.0
    test 315 compassAngleTo: 180.0
    test 316 bearingTo: 225.0
    test 317 compassAngleTo: 225.0
    test 318 bearingTo: 315.0
    test 319 compassAngleTo: 315.0
    test 320 bearingTo: 270.0
    test 321 compassAngleTo: 270.0
    test 322 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 323 compassAngleTo: 359.4
    test 324 latlon2: (53.0, 1.0)
    test 325 philam2: (0.93, 0.02)
    test 326 bearingTo: 31
    test 327 compassAngleTo: 31
    test 328 compassAngleTo: 45

    test 329 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 330 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 331 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 332 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 333 isequalTo: <class 'bool'>
    test 334 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 335 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 336 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 337 xyz3: <class 'tuple'>
    test 338 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 339 compassAngleTo: <class 'float'>
    test 340 cosineLawTo: <class 'float'>
    test 341 euclideanTo: <class 'float'>
    test 342 flatLocalTo: <class 'float'>
    test 343 flatPolarTo: <class 'float'>
    test 344 haversineTo: <class 'float'>
    test 345 hubenyTo: <class 'float'>
    test 346 vincentysTo: <class 'float'>
    test 347 toNvector: (0.61566, 0.0, 0.78801)
    test 348 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 349 toVector3d: (0.61566, 0.0, 0.78801)

    test 350 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 351 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 352 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 353 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 354 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 355 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 356 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 357 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 358 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 359 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 360 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 361 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 362 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 363 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 364 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 365 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 366 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 367 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 368 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 369 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    27 tests skipped (49): No module named 'numpy': required by vector2d._numpy

    test 370 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    22 tests skipped (71): No module named 'numpy': required by vector2d._numpy

    test 371 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 372 isEllipsoidal: True
    test 373 isSpherical: False
    test 374 lat/lonDMS: 52.20472°N, 000.14056°E
    test 375 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 376 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 377 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 378 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 379 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 380 isequalTo: True
    test 381 isequalTo: True
    test 382 latlon2: 52.20472, 0.14056
    test 383 latlon2: 52.2047, 0.1406
    test 384 latlon2: 52.205, 0.141
    test 385 latlon2: 52.2, 0.14
    test 386 latlon2: 52.2, 0.1
    test 387 latlon2: 52.0, 0.0
    test 388 chordTo: 12029263.15
    test 389 chordTo: 12029049.69
    test 390 copy: True
    test 391 __eq__: True
    test 392 __ne__: False
    test 393 equirectangularTo: 404329.56
    test 394 distanceTo: 404279.720589
    test 395 distanceTo: 404279.720589
    test 396 distanceTo: 3972863
    test 397 distanceTo: 18013602.92
    test 398 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 399 intermediateTo: 51.372294°N, 000.707192°E
    test 400 intermediateTo: True
    test 401 intermediateTo: 404279.721
    test 402 intermediateTo+5: 35.560239°N, 008.833512°E
    test 403 intermediateTo+5: 4.885
    test 404 intermediateTo-4: 64.570387°N, 013.156352°W
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
./pygeodesy/azimuthal.py:634: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
    test 405 intermediateTo-4: 3.885
    test 406 intermediateTo-h: 125.000
    test 407 midpointTo: 50.536327°N, 001.274614°E
    test 408 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 409 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 410 chordTo: 125203.963
    test 411 cosineAndoyerLambertTo: 125205.962
    test 412 cosineAndoyerLambertTo: 125205.962
    test 413 cosineForsyheAndoyerLambertTo: 125205.965
    test 414 cosineForsyheAndoyerLambertTo: 125205.965
    test 415 cosineLawTo: 124801.098
    test 416 cosineLawTo: 124801.098
    test 417 equirectangularTo: 124804.754
    test 418 equirectangularTo: 124804.754
    test 419 euclideanTo: 130015.089
    test 420 euclideanTo: 130015.089
    test 421 flatLocalTo: 125209.633
    test 422 flatLocalTo: 125209.633
    test 423 flatPolarTo: 133663.257
    test 424 flatPolarTo: 133663.257
    test 425 hartzell: 53.3206°N, 001.7297°W
    test 426 hartzell: 53.349541°N, 001.7297°W
    test 427 height4: 0.0
    test 428 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 429 height4: 53°19′14.2″N, 001°43′46.9″W
    test 430 height4: 53°19′14.2″N, 001°43′46.9″W
    test 431 haversineTo: 124801.098
    test 432 haversineTo: 124801.098
    test 433 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 434 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 435 thomasTo: 125206.188
    test 436 thomasTo: 125206.188
    test 437 vincentysTo: 124801.098
    test 438 vincentysTo: 124801.098
    test 439 isclockwise: False
    test 440 isclockwise*: False
    test 441 isclockwise: True
    test 442 isclockwise*: True
    test 443 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 444 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 445 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 446 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 447 isconvex: False
    test 448 isconvex*: False
    test 449 isconvex: True
    test 450 isconvex*: True
    test 451 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 452 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 453 isenclosedBy1: True
    test 454 isenclosedBy1*: True
    test 455 isenclosedBy2: False
    test 456 isenclosedBy2*: False
    test 457 isenclosedBy3: False
    test 458 isenclosedBy3*: False
    test 459 isenclosedBy4: False
    test 460 isenclosedBy4*: False
    test 461 isenclosedBy5: False
    test 462 isenclosedBy5*: False
    test 463 isenclosedBy6: True
    test 464 isenclosedBy6*: True
    test 465 isenclosedBy7: True
    test 466 isenclosedBy7*: True
    test 467 isenclosedBy-CCW: True
    test 468 isenclosedBy-CW : True
    test 469 isenclosedBy-CCW: True
    test 470 compassAngleTo: 100.017
    test 471 compassAngleTo: 105.599
    test 472 compassAngleTo: 280.017
    test 473 compassAngleTo: 285.599
    test 474 equirectangularTo: 592.185
    test 475 distanceTo: 591.831
    test 476 compassAngleTo: 0.0
    test 477 compassAngleTo: 45.0
    test 478 compassAngleTo: 90.0
    test 479 compassAngleTo: 180.0
    test 480 compassAngleTo: 225.0
    test 481 compassAngleTo: 315.0
    test 482 compassAngleTo: 270.0
    test 483 compassAngleTo: 359.4
    test 484 latlon2: (53.0, 1.0)
    test 485 philam2: (0.93, 0.02)
    test 486 compassAngleTo: 31
    test 487 compassAngleTo: 45

    test 488 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 489 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 490 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 491 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 492 isequalTo: <class 'bool'>
    test 493 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 494 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 495 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 496 xyz3: <class 'tuple'>
    test 497 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 498 compassAngleTo: <class 'float'>
    test 499 cosineLawTo: <class 'float'>
    test 500 euclideanTo: <class 'float'>
    test 501 flatLocalTo: <class 'float'>
    test 502 flatPolarTo: <class 'float'>
    test 503 haversineTo: <class 'float'>
    test 504 hubenyTo: <class 'float'>
    test 505 vincentysTo: <class 'float'>
    test 506 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 507 toVector3d: (0.61823, 0.0, 0.786)
    test 508 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 509 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 510 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 511 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 512 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 513 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)

    22 tests skipped (93): No module named 'numpy': required by vector2d._numpy

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 514 isEllipsoidal: True
    test 515 isSpherical: False
    test 516 lat/lonDMS: 52.20472°N, 000.14056°E
    test 517 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 518 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 519 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 520 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 521 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 522 isequalTo: True
    test 523 isequalTo: True
    test 524 latlon2: 52.20472, 0.14056
    test 525 latlon2: 52.2047, 0.1406
    test 526 latlon2: 52.205, 0.141
    test 527 latlon2: 52.2, 0.14
    test 528 latlon2: 52.2, 0.1
    test 529 latlon2: 52.0, 0.0
    test 530 chordTo: 12029263.15
    test 531 chordTo: 12029049.69
    test 532 initialBearingTo: 156.1106
    test 533 initialBearingTo: 65.9335
    test 534 initialBearingTo: 0.0
    test 535 initialBearingTo: 180.0
    test 536 finalBearingTo: 157.8345
    test 537 finalBearingTo: 93.9034
    test 538 bearingTo2: 156.1106, 157.8345
    test 539 ispolar: True
    test 540 copy: True
    test 541 __eq__: True
    test 542 __ne__: False
    test 543 equirectangularTo: 404329.56
    test 544 distanceTo: 404607.805988
    test 545 distanceTo: 404607.805988
    test 546 distanceTo: 3981601
    test 547 antipodal: False
    test 548 distanceTo dateline: 19959679.267
    test 549 distanceTo unrolled: 19959679.267
    test 550 antipodal: False
    test 551 distanceTo dateline: 9513998
    test 552 distanceTo unrolled: 9513998
    test 553 distanceTo: 18012714.66
    test 554 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 555 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 556 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 557 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 558 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 559 intermediateTo: 51.372275°N, 000.707253°E
./test/testLatLon.py:621: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testLatLon.py:622: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
    test 560 intermediateTo: True
    test 561 intermediateTo: 404607.806
    test 562 intermediateTo+5: 35.139582°N, 008.994368°E
    test 563 intermediateTo+5: 5.000
    test 564 intermediateTo-4: 64.894124°N, 013.705689°W
    test 565 intermediateTo-4: 4.000
    test 566 intermediateTo-h: 125.000
    test 567 midpointTo: 50.536583°N, 001.274507°E
    test 568 destination: 51.513526°N, 000.098038°W
    test 569 destination: 51°30′49″N, 000°05′53″W
    test 570 destination: 33°57′N, 118°24′W
    test 571 destination: 33.950367°N, 118.399012°W
    test 572 destination: 0.592546N, 2.066453W
    test 573 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 574 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 575 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 576 chordTo: 125203.963
    test 577 cosineAndoyerLambertTo: 125205.962
    test 578 cosineAndoyerLambertTo: 125205.962
    test 579 cosineForsyheAndoyerLambertTo: 125205.965
    test 580 cosineForsyheAndoyerLambertTo: 125205.965
    test 581 cosineLawTo: 124801.098
    test 582 cosineLawTo: 124801.098
    test 583 equirectangularTo: 124804.754
    test 584 equirectangularTo: 124804.754
    test 585 euclideanTo: 130015.089
    test 586 euclideanTo: 130015.089
    test 587 flatLocalTo: 125209.633
    test 588 flatLocalTo: 125209.633
    test 589 flatPolarTo: 133663.257
    test 590 flatPolarTo: 133663.257
    test 591 hartzell: 53.3206°N, 001.7297°W
    test 592 hartzell: 53.349541°N, 001.7297°W
    test 593 height4: 0.0
    test 594 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 595 height4: 53°19′14.2″N, 001°43′46.9″W
    test 596 height4: 53°19′14.2″N, 001°43′46.9″W
    test 597 haversineTo: 124801.098
    test 598 haversineTo: 124801.098
    test 599 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 600 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 601 thomasTo: 125206.188
    test 602 thomasTo: 125206.188
    test 603 vincentysTo: 124801.098
    test 604 vincentysTo: 124801.098
    test 605 isclockwise: False
    test 606 isclockwise*: False
    test 607 isclockwise: True
    test 608 isclockwise*: True
    test 609 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 610 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 611 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 612 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 613 isconvex: False
    test 614 isconvex*: False
    test 615 isconvex: True
    test 616 isconvex*: True
    test 617 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 618 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 619 isenclosedBy1: True
    test 620 isenclosedBy1*: True
    test 621 isenclosedBy2: False
    test 622 isenclosedBy2*: False
    test 623 isenclosedBy3: False
    test 624 isenclosedBy3*: False
    test 625 isenclosedBy4: False
    test 626 isenclosedBy4*: False
    test 627 isenclosedBy5: False
    test 628 isenclosedBy5*: False
    test 629 isenclosedBy6: True
    test 630 isenclosedBy6*: True
    test 631 isenclosedBy7: True
    test 632 isenclosedBy7*: True
    test 633 isenclosedBy-CCW: True
    test 634 isenclosedBy-CW : True
    test 635 isenclosedBy-CCW: True
    test 636 initialBearingTo: 102.392291
    test 637 compassAngleTo: 100.017
    test 638 compassAngleTo: 105.599
    test 639 initialBearingTo: 288.676039
    test 640 compassAngleTo: 280.017
    test 641 compassAngleTo: 285.599
    test 642 equirectangularTo: 592.185
    test 643 distanceTo: 593.571
    test 644 bearingTo: 0.0
    test 645 compassAngleTo: 0.0
    test 646 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 647 compassAngleTo: 45.0
    test 648 bearingTo: 90.0
    test 649 compassAngleTo: 90.0
    test 650 bearingTo: 180.0
    test 651 compassAngleTo: 180.0
    test 652 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 653 compassAngleTo: 225.0
    test 654 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 655 compassAngleTo: 315.0
    test 656 bearingTo: 270.0
    test 657 compassAngleTo: 270.0
    test 658 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 659 compassAngleTo: 359.4
    test 660 latlon2: (53.0, 1.0)
    test 661 philam2: (0.93, 0.02)
    test 662 bearingTo: 31
    test 663 compassAngleTo: 31
    test 664 compassAngleTo: 45

    test 665 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 666 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 667 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 668 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 669 isequalTo: <class 'bool'>
    test 670 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 671 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 672 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 673 xyz3: <class 'tuple'>
    test 674 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 675 compassAngleTo: <class 'float'>
    test 676 cosineLawTo: <class 'float'>
    test 677 euclideanTo: <class 'float'>
    test 678 flatLocalTo: <class 'float'>
    test 679 flatPolarTo: <class 'float'>
    test 680 haversineTo: <class 'float'>
    test 681 hubenyTo: <class 'float'>
    test 682 vincentysTo: <class 'float'>
    test 683 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 684 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 685 toVector3d: (0.61823, 0.0, 0.786)
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
# lazily imported pygeodesy.azimuthal by ellipsoidalBase.py line 433

    test 686 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 687 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 688 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 689 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 690 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 691 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 692 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 693 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 694 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 695 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 696 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 697 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 698 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 699 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 700 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 701 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 702 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 703 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 704 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 705 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (120): No module named 'numpy': required by vector2d._numpy

    test 706 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (142): No module named 'numpy': required by vector2d._numpy
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399

    test 707 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 708 isEllipsoidal: True
    test 709 isSpherical: False
    test 710 lat/lonDMS: 52.20472°N, 000.14056°E
    test 711 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 712 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 713 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 714 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 715 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 716 isequalTo: True
    test 717 isequalTo: True
    test 718 latlon2: 52.20472, 0.14056
    test 719 latlon2: 52.2047, 0.1406
    test 720 latlon2: 52.205, 0.141
    test 721 latlon2: 52.2, 0.14
    test 722 latlon2: 52.2, 0.1
    test 723 latlon2: 52.0, 0.0
    test 724 chordTo: 12029263.15
    test 725 chordTo: 12029049.69
    test 726 initialBearingTo: 156.1106
    test 727 initialBearingTo: 65.9335
    test 728 initialBearingTo: 0.0
    test 729 initialBearingTo: 180.0
    test 730 finalBearingTo: 157.8345
    test 731 finalBearingTo: 93.9034
    test 732 bearingTo2: 156.1106, 157.8345
    test 733 ispolar: True
    test 734 copy: True
    test 735 __eq__: True
    test 736 __ne__: False
    test 737 equirectangularTo: 404329.56
    test 738 distanceTo: 404607.805988
    test 739 distanceTo: 404607.805988
    test 740 distanceTo: 3981601
    test 741 antipodal: False
    test 742 distanceTo dateline: 19959679.267
    test 743 distanceTo unrolled: 19959679.267
    test 744 antipodal: False
    test 745 distanceTo dateline: 9513998
    test 746 distanceTo unrolled: 9513998
    test 747 distanceTo: 18012714.66
    test 748 distanceTo: 20003931.46
    test 749 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 750 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 751 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 752 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 753 intermediateTo: 51.372275°N, 000.707253°E
    test 754 intermediateTo: True
    test 755 intermediateTo: 404607.806
    test 756 intermediateTo+5: 35.139582°N, 008.994368°E
    test 757 intermediateTo+5: 5.000
    test 758 intermediateTo-4: 64.894124°N, 013.705689°W
    test 759 intermediateTo-4: 4.000
    test 760 intermediateTo-h: 125.000
    test 761 midpointTo: 50.536583°N, 001.274507°E
    test 762 destination: 51.513526°N, 000.098038°W
    test 763 destination: 51°30′49″N, 000°05′53″W
    test 764 destination: 33°57′N, 118°24′W
    test 765 destination: 33.950367°N, 118.399012°W
    test 766 destination: 0.592546N, 2.066453W
    test 767 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 768 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 769 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 770 chordTo: 125203.963
    test 771 cosineAndoyerLambertTo: 125205.962
    test 772 cosineAndoyerLambertTo: 125205.962
    test 773 cosineForsyheAndoyerLambertTo: 125205.965
    test 774 cosineForsyheAndoyerLambertTo: 125205.965
    test 775 cosineLawTo: 124801.098
    test 776 cosineLawTo: 124801.098
    test 777 equirectangularTo: 124804.754
    test 778 equirectangularTo: 124804.754
    test 779 euclideanTo: 130015.089
    test 780 euclideanTo: 130015.089
    test 781 flatLocalTo: 125209.633
    test 782 flatLocalTo: 125209.633
    test 783 flatPolarTo: 133663.257
    test 784 flatPolarTo: 133663.257
    test 785 hartzell: 53.3206°N, 001.7297°W
    test 786 hartzell: 53.349541°N, 001.7297°W
    test 787 height4: 0.0
    test 788 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 789 height4: 53°19′14.2″N, 001°43′46.9″W
    test 790 height4: 53°19′14.2″N, 001°43′46.9″W
    test 791 haversineTo: 124801.098
    test 792 haversineTo: 124801.098
    test 793 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 794 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 795 thomasTo: 125206.188
    test 796 thomasTo: 125206.188
    test 797 vincentysTo: 124801.098
    test 798 vincentysTo: 124801.098
    test 799 isclockwise: False
    test 800 isclockwise*: False
    test 801 isclockwise: True
    test 802 isclockwise*: True
    test 803 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 804 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 805 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 806 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 807 isconvex: False
    test 808 isconvex*: False
    test 809 isconvex: True
    test 810 isconvex*: True
    test 811 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 812 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 813 isenclosedBy1: True
    test 814 isenclosedBy1*: True
    test 815 isenclosedBy2: False
    test 816 isenclosedBy2*: False
    test 817 isenclosedBy3: False
    test 818 isenclosedBy3*: False
    test 819 isenclosedBy4: False
    test 820 isenclosedBy4*: False
    test 821 isenclosedBy5: False
    test 822 isenclosedBy5*: False
    test 823 isenclosedBy6: True
    test 824 isenclosedBy6*: True
    test 825 isenclosedBy7: True
    test 826 isenclosedBy7*: True
    test 827 isenclosedBy-CCW: True
    test 828 isenclosedBy-CW : True
    test 829 isenclosedBy-CCW: True
    test 830 initialBearingTo: 102.392291
    test 831 compassAngleTo: 100.017
    test 832 compassAngleTo: 105.599
    test 833 initialBearingTo: 288.676039
    test 834 compassAngleTo: 280.017
    test 835 compassAngleTo: 285.599
    test 836 equirectangularTo: 592.185
    test 837 distanceTo: 593.571
    test 838 bearingTo: 0.0
    test 839 compassAngleTo: 0.0
    test 840 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 841 compassAngleTo: 45.0
    test 842 bearingTo: 90.0
    test 843 compassAngleTo: 90.0
    test 844 bearingTo: 180.0
    test 845 compassAngleTo: 180.0
    test 846 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 847 compassAngleTo: 225.0
    test 848 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 849 compassAngleTo: 315.0
    test 850 bearingTo: 270.0
    test 851 compassAngleTo: 270.0
    test 852 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 853 compassAngleTo: 359.4
    test 854 latlon2: (53.0, 1.0)
    test 855 philam2: (0.93, 0.02)
    test 856 bearingTo: 31
    test 857 compassAngleTo: 31
    test 858 compassAngleTo: 45

    test 859 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 860 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 861 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 862 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 863 isequalTo: <class 'bool'>
    test 864 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 865 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 866 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 867 xyz3: <class 'tuple'>
    test 868 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 869 compassAngleTo: <class 'float'>
    test 870 cosineLawTo: <class 'float'>
    test 871 euclideanTo: <class 'float'>
    test 872 flatLocalTo: <class 'float'>
    test 873 flatPolarTo: <class 'float'>
    test 874 haversineTo: <class 'float'>
    test 875 hubenyTo: <class 'float'>
    test 876 vincentysTo: <class 'float'>
    test 877 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 878 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 879 toVector3d: (0.61823, 0.0, 0.786)

    test 880 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 881 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 882 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 883 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 884 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 885 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 886 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 887 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 888 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 889 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 890 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 891 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 892 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 893 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 894 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 895 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 896 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 897 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 898 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 899 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (169): No module named 'numpy': required by vector2d._numpy

    test 900 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (191): No module named 'numpy': required by vector2d._numpy

    test 901 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalExact, 24.11.06)
    test 902 isEllipsoidal: True
    test 903 isSpherical: False
    test 904 lat/lonDMS: 52.20472°N, 000.14056°E
    test 905 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 906 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 907 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 908 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 909 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 910 isequalTo: True
    test 911 isequalTo: True
    test 912 latlon2: 52.20472, 0.14056
    test 913 latlon2: 52.2047, 0.1406
    test 914 latlon2: 52.205, 0.141
    test 915 latlon2: 52.2, 0.14
    test 916 latlon2: 52.2, 0.1
    test 917 latlon2: 52.0, 0.0
    test 918 chordTo: 12029263.15
    test 919 chordTo: 12029049.69
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 920 initialBearingTo: 156.1106
    test 921 initialBearingTo: 65.9335
    test 922 initialBearingTo: 0.0
    test 923 initialBearingTo: 180.0
    test 924 finalBearingTo: 157.8345
    test 925 finalBearingTo: 93.9034
    test 926 bearingTo2: 156.1106, 157.8345
    test 927 ispolar: True
    test 928 copy: True
    test 929 __eq__: True
    test 930 __ne__: False
    test 931 equirectangularTo: 404329.56
    test 932 distanceTo: 404607.805988
    test 933 distanceTo: 404607.805988
    test 934 distanceTo: 3981601
    test 935 antipodal: False
    test 936 distanceTo dateline: 19959679.267
    test 937 distanceTo unrolled: 19959679.267
    test 938 antipodal: False
    test 939 distanceTo dateline: 9513998
    test 940 distanceTo unrolled: 9513998
    test 941 distanceTo: 18012714.66
    test 942 distanceTo: 20003931.46
    test 943 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 944 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 945 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 946 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 947 intermediateTo: 51.372275°N, 000.707253°E
    test 948 intermediateTo: True
    test 949 intermediateTo: 404607.806
    test 950 intermediateTo+5: 35.139582°N, 008.994368°E
    test 951 intermediateTo+5: 5.000
    test 952 intermediateTo-4: 64.894124°N, 013.705689°W
    test 953 intermediateTo-4: 4.000
    test 954 intermediateTo-h: 125.000
    test 955 midpointTo: 50.536583°N, 001.274507°E
    test 956 destination: 51.513526°N, 000.098038°W
    test 957 destination: 51°30′49″N, 000°05′53″W
    test 958 destination: 33°57′N, 118°24′W
    test 959 destination: 33.950367°N, 118.399012°W
    test 960 destination: 0.592546N, 2.066453W
    test 961 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 962 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 963 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 964 chordTo: 125203.963
    test 965 cosineAndoyerLambertTo: 125205.962
    test 966 cosineAndoyerLambertTo: 125205.962
    test 967 cosineForsyheAndoyerLambertTo: 125205.965
    test 968 cosineForsyheAndoyerLambertTo: 125205.965
    test 969 cosineLawTo: 124801.098
    test 970 cosineLawTo: 124801.098
    test 971 equirectangularTo: 124804.754
    test 972 equirectangularTo: 124804.754
    test 973 euclideanTo: 130015.089
    test 974 euclideanTo: 130015.089
    test 975 flatLocalTo: 125209.633
    test 976 flatLocalTo: 125209.633
    test 977 flatPolarTo: 133663.257
    test 978 flatPolarTo: 133663.257
    test 979 hartzell: 53.3206°N, 001.7297°W
    test 980 hartzell: 53.349541°N, 001.7297°W
    test 981 height4: 0.0
    test 982 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 983 height4: 53°19′14.2″N, 001°43′46.9″W
    test 984 height4: 53°19′14.2″N, 001°43′46.9″W
    test 985 haversineTo: 124801.098
    test 986 haversineTo: 124801.098
    test 987 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 988 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 989 thomasTo: 125206.188
    test 990 thomasTo: 125206.188
    test 991 vincentysTo: 124801.098
    test 992 vincentysTo: 124801.098
    test 993 isclockwise: False
    test 994 isclockwise*: False
    test 995 isclockwise: True
    test 996 isclockwise*: True
    test 997 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 998 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 999 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1000 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1001 isconvex: False
    test 1002 isconvex*: False
    test 1003 isconvex: True
    test 1004 isconvex*: True
    test 1005 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1006 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1007 isenclosedBy1: True
    test 1008 isenclosedBy1*: True
    test 1009 isenclosedBy2: False
    test 1010 isenclosedBy2*: False
    test 1011 isenclosedBy3: False
    test 1012 isenclosedBy3*: False
    test 1013 isenclosedBy4: False
    test 1014 isenclosedBy4*: False
    test 1015 isenclosedBy5: False
    test 1016 isenclosedBy5*: False
    test 1017 isenclosedBy6: True
    test 1018 isenclosedBy6*: True
    test 1019 isenclosedBy7: True
    test 1020 isenclosedBy7*: True
    test 1021 isenclosedBy-CCW: True
    test 1022 isenclosedBy-CW : True
    test 1023 isenclosedBy-CCW: True
    test 1024 initialBearingTo: 102.392291
    test 1025 compassAngleTo: 100.017
    test 1026 compassAngleTo: 105.599
    test 1027 initialBearingTo: 288.676039
    test 1028 compassAngleTo: 280.017
    test 1029 compassAngleTo: 285.599
    test 1030 equirectangularTo: 592.185
    test 1031 distanceTo: 593.571
    test 1032 bearingTo: 0.0
    test 1033 compassAngleTo: 0.0
    test 1034 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1035 compassAngleTo: 45.0
    test 1036 bearingTo: 90.0
    test 1037 compassAngleTo: 90.0
    test 1038 bearingTo: 180.0
    test 1039 compassAngleTo: 180.0
    test 1040 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1041 compassAngleTo: 225.0
    test 1042 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1043 compassAngleTo: 315.0
    test 1044 bearingTo: 270.0
    test 1045 compassAngleTo: 270.0
    test 1046 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 1047 compassAngleTo: 359.4
    test 1048 latlon2: (53.0, 1.0)
    test 1049 philam2: (0.93, 0.02)
    test 1050 bearingTo: 31
    test 1051 compassAngleTo: 31
    test 1052 compassAngleTo: 45

    test 1053 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1054 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1055 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1056 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1057 isequalTo: <class 'bool'>
    test 1058 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1059 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1060 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1061 xyz3: <class 'tuple'>
    test 1062 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1063 compassAngleTo: <class 'float'>
    test 1064 cosineLawTo: <class 'float'>
    test 1065 euclideanTo: <class 'float'>
    test 1066 flatLocalTo: <class 'float'>
    test 1067 flatPolarTo: <class 'float'>
    test 1068 haversineTo: <class 'float'>
    test 1069 hubenyTo: <class 'float'>
    test 1070 vincentysTo: <class 'float'>
    test 1071 toNvector: (0.615661, 0.0, 0.788011, 0)
    test 1072 toVector: (3934960.466675, 0.0, 5002803.345483)
    test 1073 toVector3d: (0.61823, 0.0, 0.786)

    test 1074 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 1075 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 1076 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 1077 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 1078 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1079 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 1080 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 1081 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1082 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1083 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 1084 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 1085 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 1086 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1087 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1088 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 1089 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 1090 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 1091 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1092 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1093 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    27 tests skipped (218): No module named 'numpy': required by vector2d._numpy

    test 1094 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)

    22 tests skipped (240): No module named 'numpy': required by vector2d._numpy

    test 1095 area cw/ccw: 1.0

    250 of 1095 testLatLon.py tests (22.8%) FAILED, incl. 63 KNOWN plus 187 DeprecationWarnings, 240 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 14.840 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLatLonBase.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.isCartesian from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.isLatLon from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.isNvector from .basics by testLatLonBase.py line 11
# lazily imported pygeodesy.precision from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalKarney by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalNvector by testLatLonBase.py line 140
# lazily imported pygeodesy.ellipsoidalVincenty by testLatLonBase.py line 140
# lazily imported pygeodesy.sphericalNvector by testLatLonBase.py line 140
# lazily imported pygeodesy.sphericalTrigonometry by testLatLonBase.py line 140

    testing testLatLonBase.py 23.10.15 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.11.07)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 isequalTo: False
    test 10 antipode1: 52.205°S, 179.881°W
    test 11 antipode2: True
    test 12 antipode3: 52.205°N, 000.119°E
    test 13 antipode4: True
    test 14 antipode5: 52.205°N, 000.119°E
    test 15 isnormal1: True
    test 16 isnormal2: False
    test 17 normal1: False
    test 18 normal2: True
    test 19 toStr: 51°28′40″N, 000°00′06″W
    test 20 toStr: 51.4778°N, 000.0016°W
    test 21 precision: 0
    test 22 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 23 isequalTo: True
    test 24 isequalTo3: False
    test 25 latlon: (51.4778, -0.0016)
    test 26 phimlam: (0.898457, -0.000028)
    test 27 isequalTo: True
    test 28 isequalTo3: True
    test 29 latlon: (51.4778, -0.0016)
    test 30 latlonheight: (51.4778, -0.0016, 42.0)
    test 31 phimlam: (0.898457, -0.000028)
    test 32 phimlamheight: (0.898457, -0.000028, 42.0)
    test 33 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 34 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 35 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 36 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 37 ellipsoidalLatLon: True
    test 38 sphericalLatLon: True
# lazily imported pygeodesy.rhumb by ellipsoids.py line 1497

    test 39 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 40 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 41 rhumbAzimuthTo: 107.563
    test 42 rhumbDestination: 50.964155°N, 001.853°E
    test 43 rhumbDestination: True
    test 44 rhumbDistanceTo: 42186.1
# lazily imported pygeodesy.elliptic by ellipsoids.py line 836
    test 45 rhumbIntersecant2: (LatLon(58°40′08.68″N, 042°42′40.63″E), LatLon(18°47′05.09″N, 011°00′15.53″W))
    test 46 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 47 rhumbMidpointo: True
    test 48 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 49 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 50 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 51 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 52 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 53 lat, lon: 50.06632°N, 005.71475°W
    test 54 lat, lon: 50.066389°N, 005.714722°W
    test 55 isequalTo: True
    test 56 isequalTo3: True
    test 57 latlon: (52.205, 0.119)
    test 58 latlonheight: (52.205, 0.119, 0)
    test 59 phimlam: (0.911149, 0.002077)
    test 60 phimlamheight: (0.911149, 0.002077, 0)
    test 61 isequalTo: False
    test 62 antipode1: 52.205°S, 179.881°W
    test 63 antipode2: True
    test 64 antipode3: 52.205°N, 000.119°E
    test 65 antipode4: True
    test 66 antipode5: 52.205°N, 000.119°E
    test 67 isnormal1: True
    test 68 isnormal2: False
    test 69 normal1: False
    test 70 normal2: True
    test 71 toStr: 51°28′40″N, 000°00′06″W
    test 72 toStr: 51.4778°N, 000.0016°W
    test 73 precision: 0
    test 74 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 75 isequalTo: True
    test 76 isequalTo3: False
    test 77 latlon: (51.4778, -0.0016)
    test 78 phimlam: (0.898457, -0.000028)
    test 79 isequalTo: True
    test 80 isequalTo3: True
    test 81 latlon: (51.4778, -0.0016)
    test 82 latlonheight: (51.4778, -0.0016, 42.0)
    test 83 phimlam: (0.898457, -0.000028)
    test 84 phimlamheight: (0.898457, -0.000028, 42.0)
    test 85 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 86 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 87 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 88 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 89 ellipsoidalLatLon: True
    test 90 sphericalLatLon: True

    test 91 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 92 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 93 rhumbAzimuthTo: 107.563
    test 94 rhumbDestination: 50.964155°N, 001.853°E
    test 95 rhumbDestination: True
    test 96 rhumbDistanceTo: 42186.1
    test 97 rhumbIntersecant2: (LatLon(58°40′08.68″N, 042°42′40.63″E), LatLon(18°47′05.09″N, 011°00′15.53″W))
    test 98 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 99 rhumbMidpointo: True
    test 100 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 101 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 102 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 103 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 104 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 105 lat, lon: 50.06632°N, 005.71475°W
    test 106 lat, lon: 50.066389°N, 005.714722°W
    test 107 isequalTo: True
    test 108 isequalTo3: True
    test 109 latlon: (52.205, 0.119)
    test 110 latlonheight: (52.205, 0.119, 0)
    test 111 phimlam: (0.911149, 0.002077)
    test 112 phimlamheight: (0.911149, 0.002077, 0)
    test 113 isequalTo: False
    test 114 antipode1: 52.205°S, 179.881°W
    test 115 antipode2: True
    test 116 antipode3: 52.205°N, 000.119°E
    test 117 antipode4: True
    test 118 antipode5: 52.205°N, 000.119°E
    test 119 isnormal1: True
    test 120 isnormal2: False
    test 121 normal1: False
    test 122 normal2: True
    test 123 toStr: 51°28′40″N, 000°00′06″W
    test 124 toStr: 51.4778°N, 000.0016°W
    test 125 precision: 0
    test 126 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 127 isequalTo: True
    test 128 isequalTo3: False
    test 129 latlon: (51.4778, -0.0016)
    test 130 phimlam: (0.898457, -0.000028)
    test 131 isequalTo: True
    test 132 isequalTo3: True
    test 133 latlon: (51.4778, -0.0016)
    test 134 latlonheight: (51.4778, -0.0016, 42.0)
    test 135 phimlam: (0.898457, -0.000028)
    test 136 phimlamheight: (0.898457, -0.000028, 42.0)
    test 137 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 138 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 139 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 140 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 141 ellipsoidalLatLon: True
    test 142 sphericalLatLon: True

    test 143 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 144 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 145 rhumbAzimuthTo: 116.661
    test 146 rhumbDestination: 50.964234°N, 001.851383°E
    test 147 rhumbDestination: True
    test 148 rhumbDistanceTo: 40413.1
    test 149 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 150 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 151 rhumbMidpointo: True
    test 152 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 153 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 154 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 155 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 156 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 157 lat, lon: 50.06632°N, 005.71475°W
    test 158 lat, lon: 50.066389°N, 005.714722°W
    test 159 isequalTo: True
    test 160 isequalTo3: True
    test 161 latlon: (52.205, 0.119)
    test 162 latlonheight: (52.205, 0.119, 0)
    test 163 phimlam: (0.911149, 0.002077)
    test 164 phimlamheight: (0.911149, 0.002077, 0)
    test 165 isequalTo: False
    test 166 antipode1: 52.205°S, 179.881°W
    test 167 antipode2: True
    test 168 antipode3: 52.205°N, 000.119°E
    test 169 antipode4: True
    test 170 antipode5: 52.205°N, 000.119°E
    test 171 isnormal1: True
    test 172 isnormal2: False
    test 173 normal1: False
    test 174 normal2: True
    test 175 toStr: 51°28′40″N, 000°00′06″W
    test 176 toStr: 51.4778°N, 000.0016°W
    test 177 precision: 0
    test 178 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 179 isequalTo: True
    test 180 isequalTo3: False
    test 181 latlon: (51.4778, -0.0016)
    test 182 phimlam: (0.898457, -0.000028)
    test 183 isequalTo: True
    test 184 isequalTo3: True
    test 185 latlon: (51.4778, -0.0016)
    test 186 latlonheight: (51.4778, -0.0016, 42.0)
    test 187 phimlam: (0.898457, -0.000028)
    test 188 phimlamheight: (0.898457, -0.000028, 42.0)
    test 189 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 190 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 191 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 192 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 193 ellipsoidalLatLon: True
    test 194 sphericalLatLon: True

    test 195 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 196 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 197 rhumbAzimuthTo: 116.661
    test 198 rhumbDestination: 50.964234°N, 001.851383°E
    test 199 rhumbDestination: True
    test 200 rhumbDistanceTo: 40413.1
    test 201 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 202 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 203 rhumbMidpointo: True
    test 204 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 205 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 206 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 207 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 208 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 209 lat, lon: 50.06632°N, 005.71475°W
    test 210 lat, lon: 50.066389°N, 005.714722°W
    test 211 isequalTo: True
    test 212 isequalTo3: True
    test 213 latlon: (52.205, 0.119)
    test 214 latlonheight: (52.205, 0.119, 0)
    test 215 phimlam: (0.911149, 0.002077)
    test 216 phimlamheight: (0.911149, 0.002077, 0)
    test 217 isequalTo: False
    test 218 antipode1: 52.205°S, 179.881°W
    test 219 antipode2: True
    test 220 antipode3: 52.205°N, 000.119°E
    test 221 antipode4: True
    test 222 antipode5: 52.205°N, 000.119°E
    test 223 isnormal1: True
    test 224 isnormal2: False
    test 225 normal1: False
    test 226 normal2: True
    test 227 toStr: 51°28′40″N, 000°00′06″W
    test 228 toStr: 51.4778°N, 000.0016°W
    test 229 precision: 0
    test 230 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 231 isequalTo: True
    test 232 isequalTo3: False
    test 233 latlon: (51.4778, -0.0016)
    test 234 phimlam: (0.898457, -0.000028)
    test 235 isequalTo: True
    test 236 isequalTo3: True
    test 237 latlon: (51.4778, -0.0016)
    test 238 latlonheight: (51.4778, -0.0016, 42.0)
    test 239 phimlam: (0.898457, -0.000028)
    test 240 phimlamheight: (0.898457, -0.000028, 42.0)
    test 241 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 242 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 243 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 244 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 245 ellipsoidalLatLon: True
    test 246 sphericalLatLon: True

    test 247 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 248 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 249 rhumbAzimuthTo: 116.661
    test 250 rhumbDestination: 50.964234°N, 001.851383°E
    test 251 rhumbDestination: True
    test 252 rhumbDistanceTo: 40413.1
    test 253 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 254 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 255 rhumbMidpointo: True
    test 256 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 257 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 258 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 259 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 260 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalExact, 24.11.06)
    test 261 lat, lon: 50.06632°N, 005.71475°W
    test 262 lat, lon: 50.066389°N, 005.714722°W
    test 263 isequalTo: True
    test 264 isequalTo3: True
    test 265 latlon: (52.205, 0.119)
    test 266 latlonheight: (52.205, 0.119, 0)
    test 267 phimlam: (0.911149, 0.002077)
    test 268 phimlamheight: (0.911149, 0.002077, 0)
    test 269 isequalTo: False
    test 270 antipode1: 52.205°S, 179.881°W
    test 271 antipode2: True
    test 272 antipode3: 52.205°N, 000.119°E
    test 273 antipode4: True
    test 274 antipode5: 52.205°N, 000.119°E
    test 275 isnormal1: True
    test 276 isnormal2: False
    test 277 normal1: False
    test 278 normal2: True
    test 279 toStr: 51°28′40″N, 000°00′06″W
    test 280 toStr: 51.4778°N, 000.0016°W
    test 281 precision: 0
    test 282 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 283 isequalTo: True
    test 284 isequalTo3: False
    test 285 latlon: (51.4778, -0.0016)
    test 286 phimlam: (0.898457, -0.000028)
    test 287 isequalTo: True
    test 288 isequalTo3: True
    test 289 latlon: (51.4778, -0.0016)
    test 290 latlonheight: (51.4778, -0.0016, 42.0)
    test 291 phimlam: (0.898457, -0.000028)
    test 292 phimlamheight: (0.898457, -0.000028, 42.0)
    test 293 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 294 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 295 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 296 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 297 ellipsoidalLatLon: True
    test 298 sphericalLatLon: True

    test 299 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 300 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 301 rhumbAzimuthTo: 116.661
    test 302 rhumbDestination: 50.964234°N, 001.851383°E
    test 303 rhumbDestination: True
    test 304 rhumbDistanceTo: 40413.1
    test 305 rhumbIntersecant2: (LatLon(58°59′33.52″N, 043°11′56.62″E), LatLon(20°25′12.01″N, 009°12′37.27″W))
    test 306 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 307 rhumbMidpointo: True
    test 308 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 309 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 310 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 311 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 312 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 24.11.07)
    test 313 lat, lon: 50.06632°N, 005.71475°W
    test 314 lat, lon: 50.066389°N, 005.714722°W
    test 315 isequalTo: True
    test 316 isequalTo3: True
    test 317 latlon: (52.205, 0.119)
    test 318 latlonheight: (52.205, 0.119, 0)
    test 319 phimlam: (0.911149, 0.002077)
    test 320 phimlamheight: (0.911149, 0.002077, 0)
    test 321 isequalTo: False
    test 322 antipode1: 52.205°S, 179.881°W
    test 323 antipode2: True
    test 324 antipode3: 52.205°N, 000.119°E
    test 325 antipode4: True
    test 326 antipode5: 52.205°N, 000.119°E
    test 327 isnormal1: True
    test 328 isnormal2: False
    test 329 normal1: False
    test 330 normal2: True
    test 331 toStr: 51°28′40″N, 000°00′06″W
    test 332 toStr: 51.4778°N, 000.0016°W
    test 333 precision: 0
    test 334 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 335 isequalTo: True
    test 336 isequalTo3: False
    test 337 latlon: (51.4778, -0.0016)
    test 338 phimlam: (0.898457, -0.000028)
    test 339 isequalTo: True
    test 340 isequalTo3: True
    test 341 latlon: (51.4778, -0.0016)
    test 342 latlonheight: (51.4778, -0.0016, 42.0)
    test 343 phimlam: (0.898457, -0.000028)
    test 344 phimlamheight: (0.898457, -0.000028, 42.0)
    test 345 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 346 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 347 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 348 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 349 ellipsoidalLatLon: True
    test 350 sphericalLatLon: True

    test 351 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 352 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 353 rhumbAzimuthTo: 116.661
    test 354 rhumbDestination: 50.964234°N, 001.851383°E
    test 355 rhumbDestination: True
    test 356 rhumbDistanceTo: 40413.1
    test 357 rhumbIntersecant2: (LatLonEllipsoidalBase(58°59′33.52″N, 043°11′56.62″E), LatLonEllipsoidalBase(20°25′12.01″N, 009°12′37.27″W))
    test 358 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 359 rhumbMidpointo: True
    test 360 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 361 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 362 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 363 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 364 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBaseDI(pygeodesy.ellipsoidalBaseDI, 24.11.04)
    test 365 lat, lon: 50.06632°N, 005.71475°W
    test 366 lat, lon: 50.066389°N, 005.714722°W
    test 367 isequalTo: True
    test 368 isequalTo3: True
    test 369 latlon: (52.205, 0.119)
    test 370 latlonheight: (52.205, 0.119, 0)
    test 371 phimlam: (0.911149, 0.002077)
    test 372 phimlamheight: (0.911149, 0.002077, 0)
    test 373 isequalTo: False
    test 374 antipode1: 52.205°S, 179.881°W
    test 375 antipode2: True
    test 376 antipode3: 52.205°N, 000.119°E
    test 377 antipode4: True
    test 378 antipode5: 52.205°N, 000.119°E
    test 379 isnormal1: True
    test 380 isnormal2: False
    test 381 normal1: False
    test 382 normal2: True
    test 383 toStr: 51°28′40″N, 000°00′06″W
    test 384 toStr: 51.4778°N, 000.0016°W
    test 385 precision: 0
    test 386 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 387 isequalTo: True
    test 388 isequalTo3: False
    test 389 latlon: (51.4778, -0.0016)
    test 390 phimlam: (0.898457, -0.000028)
    test 391 isequalTo: True
    test 392 isequalTo3: True
    test 393 latlon: (51.4778, -0.0016)
    test 394 latlonheight: (51.4778, -0.0016, 42.0)
    test 395 phimlam: (0.898457, -0.000028)
    test 396 phimlamheight: (0.898457, -0.000028, 42.0)
    test 397 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 398 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 399 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 400 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 401 ellipsoidalLatLon: True
    test 402 sphericalLatLon: True

    test 403 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 404 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=6)
    test 405 rhumbAzimuthTo: 116.661
    test 406 rhumbDestination: 50.964234°N, 001.851383°E
    test 407 rhumbDestination: True
    test 408 rhumbDistanceTo: 40413.1
    test 409 rhumbIntersecant2: (LatLonEllipsoidalBaseDI(58°59′33.52″N, 043°11′56.62″E), LatLonEllipsoidalBaseDI(20°25′12.01″N, 009°12′37.27″W))
    test 410 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 411 rhumbMidpointo: True
    test 412 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 413 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 414 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 415 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 416 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonBase(pygeodesy.latlonBase, 24.11.06)
    test 417 lat, lon: 50.06632°N, 005.71475°W
    test 418 lat, lon: 50.066389°N, 005.714722°W
    test 419 isequalTo: True
    test 420 isequalTo3: True
    test 421 latlon: (52.205, 0.119)
    test 422 latlonheight: (52.205, 0.119, 0)
    test 423 phimlam: (0.911149, 0.002077)
    test 424 phimlamheight: (0.911149, 0.002077, 0)
    test 425 isequalTo: False
    test 426 antipode1: 52.205°S, 179.881°W
    test 427 antipode2: True
    test 428 antipode3: 52.205°N, 000.119°E
    test 429 antipode4: True
    test 430 antipode5: 52.205°N, 000.119°E
    test 431 isnormal1: True
    test 432 isnormal2: False
    test 433 normal1: False
    test 434 normal2: True
    test 435 toStr: 51°28′40″N, 000°00′06″W
    test 436 toStr: 51.4778°N, 000.0016°W
    test 437 precision: 0
    test 438 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 439 isequalTo: True
    test 440 isequalTo3: False
    test 441 latlon: (51.4778, -0.0016)
    test 442 phimlam: (0.898457, -0.000028)
    test 443 isequalTo: True
    test 444 isequalTo3: True
    test 445 latlon: (51.4778, -0.0016)
    test 446 latlonheight: (51.4778, -0.0016, 42.0)
    test 447 phimlam: (0.898457, -0.000028)
    test 448 phimlamheight: (0.898457, -0.000028, 42.0)
    test 449 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 450 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 451 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 452 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 453 ellipsoidalLatLon: True
    test 454 sphericalLatLon: True
    test 455 isCartesian(LatLonBase, None): None
    test 456 isCartesian(LatLonBase, True): None
    test 457 isCartesian(LatLonBase, False): None
    test 458 isLatLon(LatLonBase, None): <class 'pygeodesy.latlonBase.LatLonBase'>
    test 459 isLatLon(LatLonBase, True): False
    test 460 isLatLon(LatLonBase, False): False
    test 461 isNvector(LatLonBase, None): None
    test 462 isNvector(LatLonBase, True): None
    test 463 isNvector(LatLonBase, False): None

    testLatLonNvectorBase(pygeodesy.nvectorBase, 24.10.12)
    test 464 lat, lon: 50.06632°N, 005.71475°W
    test 465 lat, lon: 50.066389°N, 005.714722°W
    test 466 isequalTo: True
    test 467 isequalTo3: True
    test 468 latlon: (52.205, 0.119)
    test 469 latlonheight: (52.205, 0.119, 0)
    test 470 phimlam: (0.911149, 0.002077)
    test 471 phimlamheight: (0.911149, 0.002077, 0)
    test 472 isequalTo: False
    test 473 antipode1: 52.205°S, 179.881°W
    test 474 antipode2: True
    test 475 antipode3: 52.205°N, 000.119°E
    test 476 antipode4: True
    test 477 antipode5: 52.205°N, 000.119°E
    test 478 isnormal1: True
    test 479 isnormal2: False
    test 480 normal1: False
    test 481 normal2: True
    test 482 toStr: 51°28′40″N, 000°00′06″W
    test 483 toStr: 51.4778°N, 000.0016°W
    test 484 precision: 0
    test 485 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 486 isequalTo: True
    test 487 isequalTo3: False
    test 488 latlon: (51.4778, -0.0016)
    test 489 phimlam: (0.898457, -0.000028)
    test 490 isequalTo: True
    test 491 isequalTo3: True
    test 492 latlon: (51.4778, -0.0016)
    test 493 latlonheight: (51.4778, -0.0016, 42.0)
    test 494 phimlam: (0.898457, -0.000028)
    test 495 phimlamheight: (0.898457, -0.000028, 42.0)
    test 496 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 497 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 498 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 499 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 500 ellipsoidalLatLon: True
    test 501 sphericalLatLon: True
    test 502 isCartesian(LatLonNvectorBase, None): None
    test 503 isCartesian(LatLonNvectorBase, True): None
    test 504 isCartesian(LatLonNvectorBase, False): None
    test 505 isLatLon(LatLonNvectorBase, None): <class 'pygeodesy.nvectorBase.LatLonNvectorBase'>
    test 506 isLatLon(LatLonNvectorBase, True): False
    test 507 isLatLon(LatLonNvectorBase, False): False
    test 508 isNvector(LatLonNvectorBase, None): None
    test 509 isNvector(LatLonNvectorBase, True): None
    test 510 isNvector(LatLonNvectorBase, False): None

    testLatLonSphericalBase(pygeodesy.sphericalBase, 24.10.19)
    test 511 lat, lon: 50.06632°N, 005.71475°W
    test 512 lat, lon: 50.066389°N, 005.714722°W
    test 513 isequalTo: True
    test 514 isequalTo3: True
    test 515 latlon: (52.205, 0.119)
    test 516 latlonheight: (52.205, 0.119, 0)
    test 517 phimlam: (0.911149, 0.002077)
    test 518 phimlamheight: (0.911149, 0.002077, 0)
    test 519 isequalTo: False
    test 520 antipode1: 52.205°S, 179.881°W
    test 521 antipode2: True
    test 522 antipode3: 52.205°N, 000.119°E
    test 523 antipode4: True
    test 524 antipode5: 52.205°N, 000.119°E
    test 525 isnormal1: True
    test 526 isnormal2: False
    test 527 normal1: False
    test 528 normal2: True
    test 529 toStr: 51°28′40″N, 000°00′06″W
    test 530 toStr: 51.4778°N, 000.0016°W
    test 531 precision: 0
    test 532 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 533 isequalTo: True
    test 534 isequalTo3: False
    test 535 latlon: (51.4778, -0.0016)
    test 536 phimlam: (0.898457, -0.000028)
    test 537 isequalTo: True
    test 538 isequalTo3: True
    test 539 latlon: (51.4778, -0.0016)
    test 540 latlonheight: (51.4778, -0.0016, 42.0)
    test 541 phimlam: (0.898457, -0.000028)
    test 542 phimlamheight: (0.898457, -0.000028, 42.0)
    test 543 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 544 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 545 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 546 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)
    test 547 ellipsoidalLatLon: True
    test 548 sphericalLatLon: True

    test 549 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 550 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....ere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)
    test 551 rhumbAzimuthTo: 107.563
    test 552 rhumbDestination: 50.964155°N, 001.853°E
    test 553 rhumbDestination: True
    test 554 rhumbDistanceTo: 42186.1
    test 555 rhumbIntersecant2: (LatLonSphericalBase(58°40′08.68″N, 042°42′40.63″E), LatLonSphericalBase(18°47′05.09″N, 011°00′15.53″W))
    test 556 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 557 rhumbMidpointo: True
    test 558 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 559 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 560 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 561 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 562 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    all 562 testLatLonBase.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.049 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLazily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28

    testing testLazily.py 23.11.30 isLazy=3

    test 1 isLazy: 3

    test 2 cmd: /Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13 -c 'import sys; import pygeodesy; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 3 PYGEODESY_LAZY_IMPORT=0: 0
    test 4 PYGEODESY_LAZY_IMPORT=1: 0
    test 5 PYGEODESY_LAZY_IMPORT=2: 0
    test 6 PYGEODESY_LAZY_IMPORT=3: 0
    test 7 PYGEODESY_LAZY_IMPORT=4: 0

    test 8 items: _ALL_MODS
    test 9 pygeodesy: <module 'pygeodesy' from './pygeodesy/__init__.py'>
    test 10 pygeodesy.basics: <module 'pygeodesy.basics' from './pygeodesy/basics.py'>
    test 11 pygeodesy.constants: <module 'pygeodesy.constants' from './pygeodesy/constants.py'>
    test 12 pygeodesy.dms: <module 'pygeodesy.dms' from './pygeodesy/dms.py'>
    test 13 pygeodesy.errors: <module 'pygeodesy.errors' from './pygeodesy/errors.py'>
    test 14 pygeodesy.fmath: <module 'pygeodesy.fmath' from './pygeodesy/fmath.py'>
    test 15 pygeodesy.fsums: <module 'pygeodesy.fsums' from './pygeodesy/fsums.py'>
    test 16 pygeodesy.internals: <module 'pygeodesy.internals' from './pygeodesy/internals.py'>
    test 17 pygeodesy.interns: <module 'pygeodesy.interns' from './pygeodesy/interns.py'>
    test 18 pygeodesy.iters: <module 'pygeodesy.iters' from './pygeodesy/iters.py'>
    test 19 pygeodesy.karney: <module 'pygeodesy.karney' from './pygeodesy/karney.py'>
    test 20 pygeodesy.lazily: <module 'pygeodesy.lazily' from './pygeodesy/lazily.py'>
    test 21 pygeodesy.named: <module 'pygeodesy.named' from './pygeodesy/named.py'>
    test 22 pygeodesy.namedTuples: <module 'pygeodesy.namedTuples' from './pygeodesy/namedTuples.py'>
    test 23 pygeodesy.props: <module 'pygeodesy.props' from './pygeodesy/props.py'>
    test 24 pygeodesy.streprs: <module 'pygeodesy.streprs' from './pygeodesy/streprs.py'>
    test 25 pygeodesy.units: <module 'pygeodesy.units' from './pygeodesy/units.py'>
    test 26 pygeodesy.unitsBase: <module 'pygeodesy.unitsBase' from './pygeodesy/unitsBase.py'>
    test 27 pygeodesy.utily: <module 'pygeodesy.utily' from './pygeodesy/utily.py'>

    all 27 testLazily.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 174.081 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLcc.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testLcc.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLcc.py line 11
# lazily imported pygeodesy.Conic from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Conics from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Datums from .datums by testLcc.py line 11
# lazily imported pygeodesy.Lcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.toLcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testLcc.py line 92
# lazily imported pygeodesy.ellipsoidalVincenty by testLcc.py line 92

    testing testLcc.py 23.03.27 (module pygeodesy.lcc 24.11.06) isLazy=3

    testLcc(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27

    test 21 Be08Lb: 49.833334°N, 003.025883°E
    test 22 Be08Lb: GRS80

    test 23 Be08Lb: 49.833334°N, 004.359216°E
    test 24 Be08Lb: GRS80

    test 25 Be08Lb: 49.833334°N, 005.692549°E
    test 26 Be08Lb: GRS80

    test 27 Be08Lb: 51.166667°N, 003.025883°E
    test 28 Be08Lb: GRS80

    test 29 Be08Lb: 51.166667°N, 004.359216°E
    test 30 Be08Lb: GRS80

    test 31 Be08Lb: 51.166667°N, 005.692549°E
    test 32 Be08Lb: GRS80

    test 33 Be72Lb: 49.833334°N, 003.034153°E
    test 34 Be72Lb: NAD83

    test 35 Be72Lb: 49.833334°N, 004.367487°E
    test 36 Be72Lb: NAD83

    test 37 Be72Lb: 49.833334°N, 005.70082°E
    test 38 Be72Lb: NAD83

    test 39 Be72Lb: 51.166667°N, 003.034153°E
    test 40 Be72Lb: NAD83

    test 41 Be72Lb: 51.166667°N, 004.367487°E
    test 42 Be72Lb: NAD83

    test 43 Be72Lb: 51.166667°N, 005.70082°E
    test 44 Be72Lb: NAD83

    test 45 Fr93Lb: 49.0°N, 002.0°W
    test 46 Fr93Lb: WGS84

    test 47 Fr93Lb: 49.0°N, 003.0°E
    test 48 Fr93Lb: WGS84

    test 49 Fr93Lb: 49.0°N, 008.0°E
    test 50 Fr93Lb: WGS84

    test 51 Fr93Lb: 44.0°N, 002.0°W
    test 52 Fr93Lb: WGS84

    test 53 Fr93Lb: 44.0°N, 003.0°E
    test 54 Fr93Lb: WGS84

    test 55 Fr93Lb: 44.0°N, 008.0°E
    test 56 Fr93Lb: WGS84

    test 57 MaNLb: 31.73°N, 008.54°W
    test 58 MaNLb: NTF

    test 59 MaNLb: 31.73°N, 005.4°W
    test 60 MaNLb: NTF

    test 61 MaNLb: 31.73°N, 002.26°W
    test 62 MaNLb: NTF

    test 63 MaNLb: 34.87°N, 008.54°W
    test 64 MaNLb: NTF

    test 65 MaNLb: 34.87°N, 005.4°W
    test 66 MaNLb: NTF

    test 67 MaNLb: 34.87°N, 002.26°W
    test 68 MaNLb: NTF

    test 69 MxLb: 17.5°N, 114.0°W
    test 70 MxLb: WGS84

    test 71 MxLb: 17.5°N, 102.0°W
    test 72 MxLb: WGS84

    test 73 MxLb: 17.5°N, 090.0°W
    test 74 MxLb: WGS84

    test 75 MxLb: 29.5°N, 114.0°W
    test 76 MxLb: WGS84

    test 77 MxLb: 29.5°N, 102.0°W
    test 78 MxLb: WGS84

    test 79 MxLb: 29.5°N, 090.0°W
    test 80 MxLb: WGS84

    test 81 PyT_Lb: 45.898939°N, 000.540154°E
    test 82 PyT_Lb: NTF

    test 83 PyT_Lb: 45.898939°N, 002.337229°E
    test 84 PyT_Lb: NTF

    test 85 PyT_Lb: 45.898939°N, 004.134305°E
    test 86 PyT_Lb: NTF

    test 87 PyT_Lb: 47.696014°N, 000.540154°E
    test 88 PyT_Lb: NTF

    test 89 PyT_Lb: 47.696014°N, 002.337229°E
    test 90 PyT_Lb: NTF

    test 91 PyT_Lb: 47.696014°N, 004.134305°E
    test 92 PyT_Lb: NTF

    test 93 Snyder: 33.0°N, 108.0°W
    test 94 Snyder: NAD27

    test 95 Snyder: 33.0°N, 096.0°W
    test 96 Snyder: NAD27

    test 97 Snyder: 33.0°N, 084.0°W
    test 98 Snyder: NAD27

    test 99 Snyder: 45.0°N, 108.0°W
    test 100 Snyder: NAD27

    test 101 Snyder: 45.0°N, 096.0°W
    test 102 Snyder: NAD27

    test 103 Snyder: 45.0°N, 084.0°W
    test 104 Snyder: NAD27

    test 105 USA_Lb: 33.0°N, 108.0°W
    test 106 USA_Lb: WGS84

    test 107 USA_Lb: 33.0°N, 096.0°W
    test 108 USA_Lb: WGS84

    test 109 USA_Lb: 33.0°N, 084.0°W
    test 110 USA_Lb: WGS84

    test 111 USA_Lb: 45.0°N, 108.0°W
    test 112 USA_Lb: WGS84

    test 113 USA_Lb: 45.0°N, 096.0°W
    test 114 USA_Lb: WGS84

    test 115 USA_Lb: 45.0°N, 084.0°W
    test 116 USA_Lb: WGS84

    test 117 WRF_Lb: 33.0°N, 109.0°W
    test 118 WRF_Lb: WGS84

    test 119 WRF_Lb: 33.0°N, 097.0°W
    test 120 WRF_Lb: WGS84

    test 121 WRF_Lb: 33.0°N, 085.0°W
    test 122 WRF_Lb: WGS84

    test 123 WRF_Lb: 45.0°N, 109.0°W
    test 124 WRF_Lb: WGS84

    test 125 WRF_Lb: 45.0°N, 097.0°W
    test 126 WRF_Lb: WGS84

    test 127 WRF_Lb: 45.0°N, 085.0°W
    test 128 WRF_Lb: WGS84


    testLcc(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 129 lb1: 448251.0 5411932.0001
    test 130 lb1: 448251, 5411932
    test 131 lb1: [E:448251, N:5411932]
    test 132 lb1: WRF_Lb.WGS84
    test 133 lb1: lb1
    test 134 lb1: (81.929348, -79.558697)
    test 135 lb1: (1.429937, -1.388561)
    test 136 LatLon: 46.5°N, 003.0°E
    test 137 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 138 toLcc1: 700000 6600000
    test 139 toLcc1: 46.5°N, 003.0°E
    test 140 lb2: 1894411 1564650
    test 141 lb2: Clarke1866
    test 142 lb2: lb2
    test 143 toLatLon2: 35.0°N, 075.0°W
    test 144 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 145 toLatLon2: NAD27
    test 146 toLcc2: 1894410.9 1564649.5
    test 147 toLcc2: [E:1894411, N:1564649]
    test 148 toLcc2: Snyder.NAD27

    test 149 Be08Lb: 49.833334°N, 003.025883°E
    test 150 Be08Lb: GRS80

    test 151 Be08Lb: 49.833334°N, 004.359216°E
    test 152 Be08Lb: GRS80

    test 153 Be08Lb: 49.833334°N, 005.692549°E
    test 154 Be08Lb: GRS80

    test 155 Be08Lb: 51.166667°N, 003.025883°E
    test 156 Be08Lb: GRS80

    test 157 Be08Lb: 51.166667°N, 004.359216°E
    test 158 Be08Lb: GRS80

    test 159 Be08Lb: 51.166667°N, 005.692549°E
    test 160 Be08Lb: GRS80

    test 161 Be72Lb: 49.833334°N, 003.034153°E
    test 162 Be72Lb: NAD83

    test 163 Be72Lb: 49.833334°N, 004.367487°E
    test 164 Be72Lb: NAD83

    test 165 Be72Lb: 49.833334°N, 005.70082°E
    test 166 Be72Lb: NAD83

    test 167 Be72Lb: 51.166667°N, 003.034153°E
    test 168 Be72Lb: NAD83

    test 169 Be72Lb: 51.166667°N, 004.367487°E
    test 170 Be72Lb: NAD83

    test 171 Be72Lb: 51.166667°N, 005.70082°E
    test 172 Be72Lb: NAD83

    test 173 Fr93Lb: 49.0°N, 002.0°W
    test 174 Fr93Lb: WGS84

    test 175 Fr93Lb: 49.0°N, 003.0°E
    test 176 Fr93Lb: WGS84

    test 177 Fr93Lb: 49.0°N, 008.0°E
    test 178 Fr93Lb: WGS84

    test 179 Fr93Lb: 44.0°N, 002.0°W
    test 180 Fr93Lb: WGS84

    test 181 Fr93Lb: 44.0°N, 003.0°E
    test 182 Fr93Lb: WGS84

    test 183 Fr93Lb: 44.0°N, 008.0°E
    test 184 Fr93Lb: WGS84

    test 185 MaNLb: 31.73°N, 008.54°W
    test 186 MaNLb: NTF

    test 187 MaNLb: 31.73°N, 005.4°W
    test 188 MaNLb: NTF

    test 189 MaNLb: 31.73°N, 002.26°W
    test 190 MaNLb: NTF

    test 191 MaNLb: 34.87°N, 008.54°W
    test 192 MaNLb: NTF

    test 193 MaNLb: 34.87°N, 005.4°W
    test 194 MaNLb: NTF

    test 195 MaNLb: 34.87°N, 002.26°W
    test 196 MaNLb: NTF

    test 197 MxLb: 17.5°N, 114.0°W
    test 198 MxLb: WGS84

    test 199 MxLb: 17.5°N, 102.0°W
    test 200 MxLb: WGS84

    test 201 MxLb: 17.5°N, 090.0°W
    test 202 MxLb: WGS84

    test 203 MxLb: 29.5°N, 114.0°W
    test 204 MxLb: WGS84

    test 205 MxLb: 29.5°N, 102.0°W
    test 206 MxLb: WGS84

    test 207 MxLb: 29.5°N, 090.0°W
    test 208 MxLb: WGS84

    test 209 PyT_Lb: 45.898939°N, 000.540154°E
    test 210 PyT_Lb: NTF

    test 211 PyT_Lb: 45.898939°N, 002.337229°E
    test 212 PyT_Lb: NTF

    test 213 PyT_Lb: 45.898939°N, 004.134305°E
    test 214 PyT_Lb: NTF

    test 215 PyT_Lb: 47.696014°N, 000.540154°E
    test 216 PyT_Lb: NTF

    test 217 PyT_Lb: 47.696014°N, 002.337229°E
    test 218 PyT_Lb: NTF

    test 219 PyT_Lb: 47.696014°N, 004.134305°E
    test 220 PyT_Lb: NTF

    test 221 Snyder: 33.0°N, 108.0°W
    test 222 Snyder: NAD27

    test 223 Snyder: 33.0°N, 096.0°W
    test 224 Snyder: NAD27

    test 225 Snyder: 33.0°N, 084.0°W
    test 226 Snyder: NAD27

    test 227 Snyder: 45.0°N, 108.0°W
    test 228 Snyder: NAD27

    test 229 Snyder: 45.0°N, 096.0°W
    test 230 Snyder: NAD27

    test 231 Snyder: 45.0°N, 084.0°W
    test 232 Snyder: NAD27

    test 233 USA_Lb: 33.0°N, 108.0°W
    test 234 USA_Lb: WGS84

    test 235 USA_Lb: 33.0°N, 096.0°W
    test 236 USA_Lb: WGS84

    test 237 USA_Lb: 33.0°N, 084.0°W
    test 238 USA_Lb: WGS84

    test 239 USA_Lb: 45.0°N, 108.0°W
    test 240 USA_Lb: WGS84

    test 241 USA_Lb: 45.0°N, 096.0°W
    test 242 USA_Lb: WGS84

    test 243 USA_Lb: 45.0°N, 084.0°W
    test 244 USA_Lb: WGS84

    test 245 WRF_Lb: 33.0°N, 109.0°W
    test 246 WRF_Lb: WGS84

    test 247 WRF_Lb: 33.0°N, 097.0°W
    test 248 WRF_Lb: WGS84

    test 249 WRF_Lb: 33.0°N, 085.0°W
    test 250 WRF_Lb: WGS84

    test 251 WRF_Lb: 45.0°N, 109.0°W
    test 252 WRF_Lb: WGS84

    test 253 WRF_Lb: 45.0°N, 097.0°W
    test 254 WRF_Lb: WGS84

    test 255 WRF_Lb: 45.0°N, 085.0°W
    test 256 WRF_Lb: WGS84


    testConic(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 257 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 258 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 259 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 260 _SnyderN .auth: ''
    test 261 _SnyderN .opt3: 0.0
    test 262 _SnyderN .latlon0: (23.0, -96.0)
    test 263 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 264 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 265 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 266 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 267 _SnyderV .auth: ''
    test 268 _SnyderV .opt3: 0.0
    test 269 _SnyderV .latlon0: (23.0, -96.0)
    test 270 _SnyderV .philam0: (0.401426, -1.675516)

    all 270 testLcc.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 32.796 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLtp.py
./pygeodesy/deprecated/classes.py:67: DeprecationWarning: class L{EcefCartesian_<pygeodesy.deprecated.classes.EcefCartesian_>} has been DEPRECATED, use class L{LocalCartesian} or L{Ltp}.
  deprecated_class(self.__class__)
./test/testLtp.py:41: DeprecationWarning: method L{forward<pygeodesy.deprecated.classes.EcefCartesian_.forward>} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(33.3, 44.4, 6000)
./test/testLtp.py:45: DeprecationWarning: method L{reverse<pygeodesy.deprecated.classes.EcefCartesian_.reverse>} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(37288.97, 33374.29, 5783.65)
./test/testLtp.py:54: DeprecationWarning: method L{forward<pygeodesy.deprecated.classes.EcefCartesian_.forward>} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(LatLon_(50.9, 1.8, name='Calais'))  # Local9Tuple
./test/testLtp.py:58: DeprecationWarning: method L{reverse<pygeodesy.deprecated.classes.EcefCartesian_.reverse>} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(-37518.64, 229949.65, -4260.43)  # Local9Tuple
./test/testLtp.py:62: DeprecationWarning: method L{reverse<pygeodesy.deprecated.classes.EcefCartesian_.reverse>} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = c.reverse(-38e3, 230e3, -4e3)
./test/testLtp.py:66: DeprecationWarning: method L{forward<pygeodesy.deprecated.classes.EcefCartesian_.forward>} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  t = c.forward(50.9, 1.79, 264.92)  # Local9Tuple
./test/testLtp.py:74: DeprecationWarning: method L{reverse<pygeodesy.deprecated.classes.EcefCartesian_.reverse>} has been DEPRECATED, use method L{LocalCartesian.reverse} or L{Ltp.reverse}.
  t = Z.reverse(M).toLatLon(datum=None)  # Matterhorn Xyz to LatLon
./test/testLtp.py:76: DeprecationWarning: method L{forward<pygeodesy.deprecated.classes.EcefCartesian_.forward>} has been DEPRECATED, use method L{LocalCartesian.forward} or L{Ltp.forward}.
  self.test('xyz', Z.forward(t).xyz.toStr(prec=1), '(-7134.8, -4556.3, 2852.4)', known=Sudano)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Aer from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Attitude from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLV from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVa from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVe from .ltp by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Ecef9Tuple from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Frustum from .ltp by testLtp.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtp.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testLtp.py line 11
# lazily imported pygeodesy.LocalCartesian from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.tyr3d from .ltp by testLtp.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.latDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testLtp.py line 286

    testing testLtp.py 23.11.21 isLazy=3

    test 1 EcefCartesian: {}
    test 2 name: Test
    test 3 toStr: EcefCartesian_(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected EcefCartesian_
    test 4 copy(EcefCartesian_): (<class 'pygeodesy.deprecated.classes.EcefCartesian.<locals>.EcefCartesian_'>, True)
    test 5 EcefCartesian_.copy(): (<class 'pygeodesy.deprecated.classes.EcefCartesian.<locals>.EcefCartesian_'>, True)
    test 6 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 7 forward: 37288.97, 33374.29, 5783.65
    test 8 name: Test
# lazily imported pygeodesy.cartesianBase by ecef.py line 269
    test 9 reverse: 33.3, 44.4, 6000.0
    test 10 name: Test
    test 11 name: Paris
    test 12 Paris: 48.833, 2.333, 0.0
    test 13 forward: -37518.64, 229949.65, -4260.43
    test 14 name: Calais
    test 15 reverse: 50.9, 1.8, -0.0
    test 16 name: Paris
    test 17 reverse: -38000.0, 230000.0, -4000.0
    test 18 reverse: 50.9, 1.79, 264.92
    test 19 forward: -38223.7, 229964.2, -4000.0

    test 20 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected EcefCartesian_
    test 21 Matterhorn: (45.976, 7.658, 4531.01)
    test 22 xyz: (-7134.8, -4556.3, 2852.4)
    test 23 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 24 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 25 _local2ecef: Ecef9Tuple
    test 26 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, EcefCartesian_(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 27 _ecef2local: Local9Tuple
    test 28 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 29 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 30 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 31 Ned: [-4556.3, -7134.8, -2852.4]
    test 32 Enu: [-7134.8, -4556.3, 2852.4]
    test 33 Ned: [-4556.3, -7134.8, -2852.4]

    test 34 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 35 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 36 Frustum: 90.0, 90.0
    test 37 hfov: 90.0
    test 38 vfov: 90.0
    test 39 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 40 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 41 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 42 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 43 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 44 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 45 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 46 alt: 0.0
    test 47 tilt: -10.0
    test 48 roll: -20.0
    test 49 yaw: 330.0
    test 50 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 51 rotate: (-0.005694, 1.334382, 1.104261)
    test 52 tyr3d: (0.0, 0.0, 0.0)
    test 53 tyr3d: (0.0, -2.0, 0.0)
    test 54 tyr3d: (0.0, -2.0, 0.0)
    test 55 tyr3d: (0.0, 0.0, -2.0)

    test 56 LocalCartesian: {}
    test 57 name: Test
    test 58 toStr: LocalCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected LocalCartesian
    test 59 copy(LocalCartesian): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 60 LocalCartesian.copy(): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 61 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 62 forward: 37288.97, 33374.29, 5783.65
    test 63 name: Test
    test 64 reverse: 33.3, 44.4, 6000.0
    test 65 name: Test
    test 66 name: Paris
    test 67 Paris: 48.833, 2.333, 0.0
    test 68 forward: -37518.64, 229949.65, -4260.43
    test 69 name: Calais
    test 70 reverse: 50.9, 1.8, -0.0
    test 71 name: Paris
    test 72 reverse: -38000.0, 230000.0, -4000.0
    test 73 reverse: 50.9, 1.79, 264.92
    test 74 forward: -38223.7, 229964.2, -4000.0

    test 75 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected LocalCartesian
    test 76 Matterhorn: (45.976, 7.658, 4531.01)
    test 77 xyz: (-7134.8, -4556.3, 2852.4)
    test 78 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 79 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 80 _local2ecef: Ecef9Tuple
    test 81 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, LocalCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 82 _ecef2local: Local9Tuple
    test 83 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 84 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 85 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 86 Ned: [-4556.3, -7134.8, -2852.4]
    test 87 Enu: [-7134.8, -4556.3, 2852.4]
    test 88 Ned: [-4556.3, -7134.8, -2852.4]

    test 89 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 90 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 91 Frustum: 90.0, 90.0
    test 92 hfov: 90.0
    test 93 vfov: 90.0
    test 94 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 95 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 96 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 97 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 98 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 99 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 100 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 101 alt: 0.0
    test 102 tilt: -10.0
    test 103 roll: -20.0
    test 104 yaw: 330.0
    test 105 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 106 rotate: (-0.005694, 1.334382, 1.104261)
    test 107 tyr3d: (0.0, 0.0, 0.0)
    test 108 tyr3d: (0.0, -2.0, 0.0)
    test 109 tyr3d: (0.0, -2.0, 0.0)
    test 110 tyr3d: (0.0, 0.0, -2.0)

    test 111 Ltp: {}
    test 112 name: Test
    test 113 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 114 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 115 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 116 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 117 forward: 37288.97, 33374.29, 5783.65
    test 118 name: Test
    test 119 reverse: 33.3, 44.4, 6000.0
    test 120 name: Test
    test 121 name: Paris
    test 122 Paris: 48.833, 2.333, 0.0
    test 123 forward: -37518.64, 229949.65, -4260.43
    test 124 name: Calais
    test 125 reverse: 50.9, 1.8, -0.0
    test 126 name: Paris
    test 127 reverse: -38000.0, 230000.0, -4000.0
    test 128 reverse: 50.9, 1.79, 264.92
    test 129 forward: -38223.7, 229964.2, -4000.0

    test 130 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 131 Matterhorn: (45.976, 7.658, 4531.01)
    test 132 xyz: (-7134.8, -4556.3, 2852.4)
    test 133 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 134 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 135 _local2ecef: Ecef9Tuple
    test 136 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 137 _ecef2local: Local9Tuple
    test 138 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 139 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 140 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 141 Ned: [-4556.3, -7134.8, -2852.4]
    test 142 Enu: [-7134.8, -4556.3, 2852.4]
    test 143 Ned: [-4556.3, -7134.8, -2852.4]

    test 144 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 145 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 146 Frustum: 90.0, 90.0
    test 147 hfov: 90.0
    test 148 vfov: 90.0
    test 149 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 150 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 151 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 152 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 153 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 154 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 155 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 156 alt: 0.0
    test 157 tilt: -10.0
    test 158 roll: -20.0
    test 159 yaw: 330.0
    test 160 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 161 rotate: (-0.005694, 1.334382, 1.104261)
    test 162 tyr3d: (0.0, 0.0, 0.0)
    test 163 tyr3d: (0.0, -2.0, 0.0)
    test 164 tyr3d: (0.0, -2.0, 0.0)
    test 165 tyr3d: (0.0, 0.0, -2.0)

    test 166 Ltp: {'ecef': EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 167 name: Test
    test 168 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 169 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 170 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 171 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 172 forward: 37288.97, 33374.29, 5783.65
    test 173 name: Test
    test 174 reverse: 33.3, 44.4, 6000.0
    test 175 name: Test
    test 176 name: Paris
    test 177 Paris: 48.833, 2.333, 0.0
    test 178 forward: -37518.64, 229949.65, -4260.43
    test 179 name: Calais
    test 180 reverse: 50.9, 1.8, -0.0
    test 181 name: Paris
    test 182 reverse: -38000.0, 230000.0, -4000.0
    test 183 reverse: 50.9, 1.79, 264.92
    test 184 forward: -38223.7, 229964.2, -4000.0

    test 185 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 186 Matterhorn: (45.976, 7.658, 4531.01)
    test 187 xyz: (-7134.8, -4556.3, 2852.4)
    test 188 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 189 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 190 _local2ecef: Ecef9Tuple
    test 191 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 192 _ecef2local: Local9Tuple
    test 193 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 194 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 195 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 196 Ned: [-4556.3, -7134.8, -2852.4]
    test 197 Enu: [-7134.8, -4556.3, 2852.4]
    test 198 Ned: [-4556.3, -7134.8, -2852.4]

    test 199 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 200 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 201 Frustum: 90.0, 90.0
    test 202 hfov: 90.0
    test 203 vfov: 90.0
    test 204 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 205 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 206 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 207 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 208 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 209 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 210 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 211 alt: 0.0
    test 212 tilt: -10.0
    test 213 roll: -20.0
    test 214 yaw: 330.0
    test 215 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 216 rotate: (-0.005694, 1.334382, 1.104261)
    test 217 tyr3d: (0.0, 0.0, 0.0)
    test 218 tyr3d: (0.0, -2.0, 0.0)
    test 219 tyr3d: (0.0, -2.0, 0.0)
    test 220 tyr3d: (0.0, 0.0, -2.0)

    test 221 Ltp: {'ecef': EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 222 name: Test
    test 223 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 224 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 225 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 226 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 227 forward: 37288.97, 33374.29, 5783.65
    test 228 name: Test
    test 229 reverse: 33.3, 44.4, 6000.0
    test 230 name: Test
    test 231 name: Paris
    test 232 Paris: 48.833, 2.333, 0.0
    test 233 forward: -37518.64, 229949.65, -4260.43
    test 234 name: Calais
    test 235 reverse: 50.9, 1.8, -0.0
    test 236 name: Paris
    test 237 reverse: -38000.0, 230000.0, -4000.0
    test 238 reverse: 50.9, 1.79, 264.92
    test 239 forward: -38223.7, 229964.2, -4000.0

    test 240 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 241 Matterhorn: (45.976, 7.658, 4531.01)
    test 242 xyz: (-7134.8, -4556.3, 2852.4)
    test 243 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 244 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 245 _local2ecef: Ecef9Tuple
    test 246 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 247 _ecef2local: Local9Tuple
    test 248 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 249 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 250 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 251 Ned: [-4556.3, -7134.8, -2852.4]
    test 252 Enu: [-7134.8, -4556.3, 2852.4]
    test 253 Ned: [-4556.3, -7134.8, -2852.4]

    test 254 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 255 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 256 Frustum: 90.0, 90.0
    test 257 hfov: 90.0
    test 258 vfov: 90.0
    test 259 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 260 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 261 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 262 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 263 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 264 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 265 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 266 alt: 0.0
    test 267 tilt: -10.0
    test 268 roll: -20.0
    test 269 yaw: 330.0
    test 270 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 271 rotate: (-0.005694, 1.334382, 1.104261)
    test 272 tyr3d: (0.0, 0.0, 0.0)
    test 273 tyr3d: (0.0, -2.0, 0.0)
    test 274 tyr3d: (0.0, -2.0, 0.0)
    test 275 tyr3d: (0.0, 0.0, -2.0)

    test 276 Ltp: {'ecef': EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 277 name: Test
    test 278 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 279 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 280 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 281 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 282 forward: 37288.97, 33374.29, 5783.65
    test 283 name: Test
    test 284 reverse: 33.3, 44.4, 6000.0
    test 285 name: Test
    test 286 name: Paris
    test 287 Paris: 48.833, 2.333, 0.0
    test 288 forward: -37518.64, 229949.65, -4260.43
    test 289 name: Calais
    test 290 reverse: 50.9, 1.8, -0.0
    test 291 name: Paris
    test 292 reverse: -38000.0, 230000.0, -4000.0
    test 293 reverse: 50.9, 1.79, 264.92
    test 294 forward: -38223.7, 229964.2, -4000.0

    test 295 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 296 Matterhorn: (45.976, 7.658, 4531.01)
    test 297 xyz: (-7134.8, -4556.3, 2852.4)
    test 298 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 299 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 300 _local2ecef: Ecef9Tuple
    test 301 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009609, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 302 _ecef2local: Local9Tuple
    test 303 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 304 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 305 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 306 Ned: [-4556.3, -7134.8, -2852.4]
    test 307 Enu: [-7134.8, -4556.3, 2852.4]
    test 308 Ned: [-4556.3, -7134.8, -2852.4]

    test 309 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 310 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 311 Frustum: 90.0, 90.0
    test 312 hfov: 90.0
    test 313 vfov: 90.0
    test 314 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 315 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 316 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 317 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 318 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 319 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 320 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 321 alt: 0.0
    test 322 tilt: -10.0
    test 323 roll: -20.0
    test 324 yaw: 330.0
    test 325 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 326 rotate: (-0.005694, 1.334382, 1.104261)
    test 327 tyr3d: (0.0, 0.0, 0.0)
    test 328 tyr3d: (0.0, -2.0, 0.0)
    test 329 tyr3d: (0.0, -2.0, 0.0)
    test 330 tyr3d: (0.0, 0.0, -2.0)

    test 331 Ltp: {'ecef': EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 332 name: Test
    test 333 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 334 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 335 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 336 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 337 forward: 37288.97, 33374.29, 5783.65
    test 338 name: Test
    test 339 reverse: 33.3, 44.4, 6000.0
    test 340 name: Test
    test 341 name: Paris
    test 342 Paris: 48.833, 2.333, 0.0
    test 343 forward: -37518.64, 229949.65, -4260.43
    test 344 name: Calais
    test 345 reverse: 50.9, 1.8, -0.0
    test 346 name: Paris
    test 347 reverse: -38000.0, 230000.0, -4000.0
    test 348 reverse: 50.9, 1.79, 264.92
    test 349 forward: -38223.7, 229964.2, -4000.0

    test 350 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 351 Matterhorn: (45.976, 7.658, 4531.01)
    test 352 xyz: (-7134.8, -4556.3, 2852.4)
    test 353 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 354 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 355 _local2ecef: Ecef9Tuple
    test 356 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 357 _ecef2local: Local9Tuple
    test 358 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 359 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 360 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 361 Ned: [-4556.3, -7134.8, -2852.4]
    test 362 Enu: [-7134.8, -4556.3, 2852.4]
    test 363 Ned: [-4556.3, -7134.8, -2852.4]

    test 364 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 365 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 366 Frustum: 90.0, 90.0
    test 367 hfov: 90.0
    test 368 vfov: 90.0
    test 369 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 370 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 371 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 372 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 373 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 374 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 375 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 376 alt: 0.0
    test 377 tilt: -10.0
    test 378 roll: -20.0
    test 379 yaw: 330.0
    test 380 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 381 rotate: (-0.005694, 1.334382, 1.104261)
    test 382 tyr3d: (0.0, 0.0, 0.0)
    test 383 tyr3d: (0.0, -2.0, 0.0)
    test 384 tyr3d: (0.0, -2.0, 0.0)
    test 385 tyr3d: (0.0, 0.0, -2.0)

    test 386 Ltp: {'ecef': EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 387 name: Test
    test 388 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 389 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 390 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 391 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 392 forward: 37288.97, 33374.29, 5783.65
    test 393 name: Test
    test 394 reverse: 33.33, 44.4, 5998.84  FAILED, KNOWN, expected 33.3, 44.4, 6000.0
    test 395 name: Test
    test 396 name: Paris
    test 397 Paris: 48.833, 2.333, 0.0
    test 398 forward: -37518.64, 229949.65, -4260.43
    test 399 name: Calais
    test 400 reverse: 51.01, 1.8, -11.8  FAILED, KNOWN, expected 50.9, 1.8, -0.0
    test 401 name: Paris
    test 402 reverse: -38000.0, 230000.0, -4000.0
    test 403 reverse: 51.01, 1.79, 253.12  FAILED, KNOWN, expected 50.9, 1.79, 264.92
    test 404 forward: -38223.7, 229964.2, -4000.0

    test 405 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 406 Matterhorn: (46.06, 7.658, 4524.116)  FAILED, KNOWN, expected (45.976, 7.658, 4531.01)
    test 407 xyz: (-7124.0, 4817.7, 2845.3)  FAILED, KNOWN, expected (-7134.8, -4556.3, 2852.4)
    test 408 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 409 _local2ecef: (4403757.602, 592124.536, 4566652.082, 46.06, 7.658, 4524.116, 7, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 410 _local2ecef: Ecef9Tuple
    test 411 _ecef2local: (-7134.8, -4556.3, 2852.4, 46.06, 7.658, 4524.116, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=46.060275, lon=7.657999, height=4524.115631, C=7, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 412 _ecef2local: Local9Tuple
    test 413 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 414 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 415 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 416 Ned: [-4556.3, -7134.8, -2852.4]
    test 417 Enu: [-7134.8, -4556.3, 2852.4]
    test 418 Ned: [-4556.3, -7134.8, -2852.4]

    test 419 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 420 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 421 Frustum: 90.0, 90.0
    test 422 hfov: 90.0
    test 423 vfov: 90.0
    test 424 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 425 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 426 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 427 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 428 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 429 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 430 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 431 alt: 0.0
    test 432 tilt: -10.0
    test 433 roll: -20.0
    test 434 yaw: 330.0
    test 435 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 436 rotate: (-0.005694, 1.334382, 1.104261)
    test 437 tyr3d: (0.0, 0.0, 0.0)
    test 438 tyr3d: (0.0, -2.0, 0.0)
    test 439 tyr3d: (0.0, -2.0, 0.0)
    test 440 tyr3d: (0.0, 0.0, -2.0)

    test 441 Ltp: {'ecef': EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='')}
    test 442 name: Test
    test 443 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 444 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 445 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 446 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 447 forward: 37288.97, 33374.29, 5783.65
    test 448 name: Test
    test 449 reverse: 33.3, 44.4, 6000.0
    test 450 name: Test
    test 451 name: Paris
    test 452 Paris: 48.833, 2.333, 0.0
    test 453 forward: -37518.64, 229949.65, -4260.43
    test 454 name: Calais
    test 455 reverse: 50.9, 1.8, -0.0
    test 456 name: Paris
    test 457 reverse: -38000.0, 230000.0, -4000.0
    test 458 reverse: 50.9, 1.79, 264.92
    test 459 forward: -38223.7, 229964.2, -4000.0

    test 460 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 461 Matterhorn: (45.976, 7.658, 4531.01)
    test 462 xyz: (-7134.8, -4556.3, 2852.4)
    test 463 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 464 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 465 _local2ecef: Ecef9Tuple
    test 466 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 467 _ecef2local: Local9Tuple
    test 468 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 469 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 470 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 471 Ned: [-4556.3, -7134.8, -2852.4]
    test 472 Enu: [-7134.8, -4556.3, 2852.4]
    test 473 Ned: [-4556.3, -7134.8, -2852.4]

    test 474 lon00: (90.0, 57.3, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 475 lon00: (90.0, 3.75, 0.0, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 476 Frustum: 90.0, 90.0
    test 477 hfov: 90.0
    test 478 vfov: 90.0
    test 479 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 480 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 481 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 482 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 483 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 484 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 485 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 486 alt: 0.0
    test 487 tilt: -10.0
    test 488 roll: -20.0
    test 489 yaw: 330.0
    test 490 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 491 rotate: (-0.005694, 1.334382, 1.104261)
    test 492 tyr3d: (0.0, 0.0, 0.0)
    test 493 tyr3d: (0.0, -2.0, 0.0)
    test 494 tyr3d: (0.0, -2.0, 0.0)
    test 495 tyr3d: (0.0, 0.0, -2.0)

    test 496 ChLV: ...
    test 497 name: Test
    test 498 ChLV_: ChLV

    test 499 forward1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 500 Y, X, h_: (-72.03999403763596, -147.36144397473055, -49.5521107337268)
    test 501 EN2_LV95: (2599927.960006, 1199852.638556)
    test 502 yx2_LV03: (599927.960006, 199852.638556)
    test 503 reverse1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 504 reverse2: (100000.0, 0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 505 forward2: (100000.0, 0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 506 Y, X, h_: (100000.00000000006, -6.588459045415719e-10, 600.0000000007242)
    test 507 EN2_LV95: (2700000.0, 1200000.0)
    test 508 yx2_LV03: (700000.0, 200000.0)

    test 509 forward3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 510 Y, X, h_: (99920.63980649532, -100148.24791021261, -967.6616955399912)
    test 511 EN2_LV95: (2699920.639806, 1099851.75209)
    test 512 yx2_LV03: (699920.639806, 99851.75209)
    test 513 reverse3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 514 forward4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 515 Y, X, h_: (79527.50238583283, 12274.80422893927, -556.3121548987446)
    test 516 EN2_LV95: (2679527.502386, 1212274.804229)
    test 517 yx2_LV03: (679527.502386, 212274.804229)
    test 518 reverse4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, -0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 519 REFRAME1: (8.616351530455896, 46.654750670631664, 3083.4064441197074)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 520 REFRAME1:  0.00146 m
    test 521 REFRAME2: (10.204043023734306, 46.777835938708535, 5053.168786317753)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 522 REFRAME2:  0.00145 m
    test 523 REFRAME3: (7.231565437123991, 47.39538671375251, 1150.358929550846)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 524 REFRAME3:  0.00125 m
    test 525 REFRAME4: (9.843252123471997, 46.814319314291666, 4291.256736215736)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 526 REFRAME4:  0.0014 m
    test 527 REFRAME5: (6.568908171267955, 46.52284580890318, 985.7597106108213)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 528 REFRAME5:  0.00138 m
    test 529 REFRAME6: (8.731242095241983, 46.04567715552447, 2216.7888714367236)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 530 REFRAME6:  0.00156 m

    test 531 Bollinger.lat: 46°11′13.03444″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 532 Bollinger.lon: 009°07′55.69155″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 533 Zermatt: (46.01693292843191, 7.7455811694023975, 2629.5454517406183)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 534 Zermatt:  0.00162 m
    test 535 Zimmerwald: (46.878427446046224, 7.466218796566257, 953.0972897404835)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 536 Zimmerwald:  4.34e-10 m
    test 537 Chrischona: (47.56830864684501, 7.66954858440231, 897.4060435656095)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 538 Chrischona:  1.55e-10 m
    test 539 Pfaender: (47.516320169780975, 9.784378737247414, 3868.8598426346603)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 540 Pfaender:  4.74e-11 m
    test 541 La Givrine: (46.45557406857666, 6.103316269663712, 2313.9449708991415)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 542 La Givrine:  3.63e-11 m
    test 543 Monte Generoso: (45.931118444496924, 9.021602047098654, 3855.4332412055323)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 544 Monte Generoso:  3.08e-12 m

    test 545 ChLVa: ...
    test 546 name: Test
    test 547 ChLV_: ChLVa

    test 548 forward1: (0.329415, -0.292702, -49.554242, 46.95108, 7.438637, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 549 Y, X, h_: (0.32941546850192266, -0.2927016084473125, -49.554241824400016)
    test 550 EN2_LV95: (2600000.329415, 1199999.707298)
    test 551 yx2_LV03: (600000.329415, 199999.707298)
    test 552 reverse1: (0.329415, -0.292702, -49.554242, 46.951078, 7.438642, -0.004239, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 553 reverse2: (100000.0, -100000.0, 600.0, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 554 forward2: (99999.933937, -100000.44412, 600.003469, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 555 Y, X, h_: (99999.93393731702, -100000.44412019117, 600.0034685464)
    test 556 EN2_LV95: (2699999.933937, 1099999.55588)
    test 557 yx2_LV03: (699999.933937, 99999.55588)

    test 558 forward3: (99999.763621, -100000.026905, 600.049476, 46.044131, 8.730497, 650.6, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 559 Y, X, h_: (99999.76362116335, -100000.0269049639, 600.0494759100001)
    test 560 EN2_LV95: (2699999.763621, 1099999.973095)
    test 561 yx2_LV03: (699999.763621, 99999.973095)
    test 562 reverse3: (99999.763621, -100000.026905, 600.049476, 46.044127, 8.730496, 650.603479, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 563 forward4: (79602.736359, 12421.914221, -48.257243, 47.058043, 8.48642, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 564 Y, X, h_: (79602.73635877526, 12421.914220824741, -48.25724328779257)
    test 565 EN2_LV95: (2679602.736359, 1212421.914221)
    test 566 yx2_LV03: (679602.736359, 212421.914221)
    test 567 reverse4: (79602.736359, 12421.914221, -48.257243, 47.058038, 8.486421, 0.00853, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 568 REFRAME1: (8.615878879495897, 46.65329026883798, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 569 REFRAME1:  5.65e-06 m
    test 570 REFRAME2: (10.204675703252203, 46.77638487390875, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 571 REFRAME2:  1.17e-05 m
    test 572 REFRAME3: (7.230597895755378, 47.39413163959343, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 573 REFRAME3:  9.75e-06 m
    test 574 REFRAME4: (9.843502988079765, 46.812913925274714, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 575 REFRAME4:  1.05e-05 m
    test 576 REFRAME5: (6.5678939352793595, 46.521468558550154, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 577 REFRAME5:  3.81e-06 m
    test 578 REFRAME6: (8.730499333333333, 46.04412677777777, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 579 REFRAME6:  5.83e-06 m

    test 580 Bollinger.lat: 46°11′07.65425″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 581 Bollinger.lon: 009°07′52.99874″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 582 Zermatt: (46.01531297876282, 7.744712831892469, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 583 Zermatt:  0.00249 m
    test 584 Zimmerwald: (46.877092307814216, 7.465275686541408, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 585 Zimmerwald:  0.00134 m
    test 586 Chrischona: (47.56704452300608, 7.668609312668058, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 587 Chrischona:  0.00126 m
    test 588 Pfaender: (47.51533372240414, 9.784358161933797, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 589 Pfaender:  0.000986 m
    test 590 La Givrine: (46.45409066669543, 6.1020351431347315, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 591 La Givrine:  0.00148 m
    test 592 Monte Generoso: (45.92930092608269, 9.021219925007552, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 593 Monte Generoso:  0.00182 m

    test 594 ChLVe: ...
    test 595 name: Test
    test 596 ChLV_: ChLVe

    test 597 forward1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 598 Y, X, h_: (-72.031251437589, -147.3449483831346, -49.554241824400016)
    test 599 EN2_LV95: (2599927.968749, 1199852.655052)
    test 600 yx2_LV03: (599927.968749, 199852.655052)
    test 601 reverse1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.000002, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 602 reverse2: (100000.0, 0.0, 600.0, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 603 forward2: (100000.000001, 0.0, 600.012265, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 604 Y, X, h_: (100000.00000057962, 1.8112537807228997e-07, 600.0122653531955)
    test 605 EN2_LV95: (2700000.000001, 1200000.0)
    test 606 yx2_LV03: (700000.000001, 200000.0)

    test 607 forward3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.6, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 608 Y, X, h_: (99914.74045471674, -100135.07938181335, 600.0494759100001)
    test 609 EN2_LV95: (2699914.740455, 1099864.920618)
    test 610 yx2_LV03: (699914.740455, 99864.920618)
    test 611 reverse3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.607608, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 612 forward4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 613 Y, X, h_: (79520.05000103211, 12273.439993103837, -48.25724328779257)
    test 614 EN2_LV95: (2679520.050001, 1212273.439993)
    test 615 yx2_LV03: (679520.050001, 212273.439993)
    test 616 reverse4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.012933, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 617 REFRAME1: (8.617004216786864, 46.65457267826783, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 618 REFRAME1:  0.00128 m
    test 619 REFRAME2: (10.206045201491072, 46.77766011924391, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 620 REFRAME2:  0.00136 m
    test 621 REFRAME3: (7.231508661195409, 47.39550748841831, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 622 REFRAME3:  0.00137 m
    test 623 REFRAME4: (9.844818386934287, 46.81419800173997, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 624 REFRAME4:  0.0013 m
    test 625 REFRAME5: (6.568709824649145, 46.52273852064229, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 626 REFRAME5:  0.00127 m
    test 627 REFRAME6: (8.731627351611777, 46.04533300622347, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 628 REFRAME6:  0.00121 m

    test 629 Bollinger.lat: 46°11′12.03969″N
    test 630 Bollinger.lon: 009°07′57.29664″E
    test 631 Bollinger.gamma: 1.3747154949761575

    test 632 Zermatt: (46.016524980589146, 7.745700583699864, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 633 Zermatt:  0.0015 m
    test 634 Zimmerwald: (46.878408134660475, 7.46622597045386, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 635 Zimmerwald:  1.93e-05 m
    test 636 Chrischona: (47.56844071309313, 7.66959585429788, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 637 Chrischona:  0.000132 m
    test 638 Pfaender: (47.51669640784962, 9.785678729594727, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 639 Pfaender:  0.0013 m
    test 640 La Givrine: (46.45534732351903, 6.102781792813615, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 641 La Givrine:  0.000534 m
    test 642 Monte Generoso: (45.93048753878003, 9.022387820586593, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 643 Monte Generoso:  0.000786 m

    102 of 643 testLtp.py tests (15.9%) FAILED, incl. 90 KNOWN plus 12 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 256.342 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testLtpTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Aer from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtpTuples.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Los from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtpTuples.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtpTuples.py line 11

    testing testLtpTuples.py 23.11.21 isLazy=3

    test 1 Aer.toRepr: [A:60.0°, E:40.0°, R:1000.0]
    test 2 Aer.toStr: [60.0, 40.0, 1000.0]
    test 3 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 4 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 5 Aer.xyzLocal.toEnu: [663.41, 383.02, 642.79]
    test 6 Enu.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 7 Aer.xyzLocal.toNed: [383.02, 663.41, -642.79]
    test 8 Ned.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 9 Aer.xyzLocal.toXyz: [663.41, 383.02, 642.79]
    test 10 Xyz.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 11 Aer.toCartesian: [4397663.96, 599165.33, 4568492.25]
    test 12 Cartesian.toLocal Aer: [60.0, 40.0, 1000.0]
    test 13 Aer.toLatLon: 46°01′13.6″N, 007°45′30.83″E, +2315.83m
    test 14 LatLon.toLocal Aer: [60.0, 40.0, 1000.0]
    test 15 Aer.azimuth: 60.0
    test 16 Aer.elevation: 40.0
    test 17 Aer.slantrange: 1000.0
    test 18 Aer.groundrange: 766.044
    test 19 Aer.east: 663.414
    test 20 Aer.north: 383.022
    test 21 Aer.up: 642.788
    test 22 Aer.down: -642.788
    test 23 Aer.x: 663.414
    test 24 Aer.y: 383.022
    test 25 Aer.z: 642.788
    test 26 Aer.xyz: 663.414, 383.022, 642.788

    test 27 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 28 Los: [E:0.5, N:0.5, U:-0.707]
    test 29 Los: [U:-0.707, V:0.5, W:0.5]
    test 30 Los: [E:0.5, N:0.5, U:-0.707]

    test 31 Enu.toRepr: [E:100.0, N:200.0, U:1000.0]
    test 32 Enu.toStr: [100.0, 200.0, 1000.0]
    test 33 Enu.xyzLocal.toAer: [26.57, 77.4, 1024.7]
    test 34 Aer.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 35 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 36 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 37 Enu.xyzLocal.toNed: [200.0, 100.0, -1000.0]
    test 38 Ned.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 39 Enu.xyzLocal.toXyz: [100.0, 200.0, 1000.0]
    test 40 Xyz.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 41 Enu.toCartesian: [4398116.23, 598658.27, 4568622.18]
    test 42 Cartesian.toLocal Enu: [100.0, 200.0, 1000.0]
    test 43 Enu.toLatLon: 46°01′07.67″N, 007°45′04.65″E, +2673.00m
    test 44 LatLon.toLocal Enu: [100.0, 200.0, 1000.0]
    test 45 Enu.azimuth: 26.565
    test 46 Enu.elevation: 77.396
    test 47 Enu.slantrange: 1024.695
    test 48 Enu.groundrange: 223.607
    test 49 Enu.east: 100.0
    test 50 Enu.north: 200.0
    test 51 Enu.up: 1000.0
    test 52 Enu.down: -1000.0
    test 53 Enu.x: 100.0
    test 54 Enu.y: 200.0
    test 55 Enu.z: 1000.0
    test 56 Enu.xyz: 100.0, 200.0, 1000.0

    test 57 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 58 Los: [E:0.5, N:0.5, U:-0.707]
    test 59 Los: [U:-0.707, V:0.5, W:0.5]
    test 60 Los: [E:0.5, N:0.5, U:-0.707]

    test 61 Ned.toRepr: [N:200.0, E:100.0, D:1000.0]
    test 62 Ned.toStr: [200.0, 100.0, 1000.0]
    test 63 Ned.xyzLocal.toAer: [26.57, -77.4, 1024.7]
    test 64 Aer.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 65 Ned.xyzLocal.toEnu: [100.0, 200.0, -1000.0]
    test 66 Enu.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 67 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 68 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 69 Ned.xyzLocal.toXyz: [100.0, 200.0, -1000.0]
    test 70 Xyz.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 71 Ned.toCartesian: [4396740.02, 598470.98, 4567183.09]
    test 72 Cartesian.toLocal Ned: [200.0, 100.0, 1000.0]
    test 73 Ned.toLatLon: 46°01′07.68″N, 007°45′04.65″E, +673.00m
    test 74 LatLon.toLocal Ned: [200.0, 100.0, 1000.0]
    test 75 Ned.azimuth: 26.565
    test 76 Ned.elevation: -77.396
    test 77 Ned.slantrange: 1024.695
    test 78 Ned.groundrange: 223.607
    test 79 Ned.east: 100.0
    test 80 Ned.north: 200.0
    test 81 Ned.up: -1000.0
    test 82 Ned.down: 1000.0
    test 83 Ned.x: 100.0
    test 84 Ned.y: 200.0
    test 85 Ned.z: -1000.0
    test 86 Ned.xyz: 100.0, 200.0, -1000.0

    test 87 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 88 Los: [E:0.5, N:0.5, U:-0.707]
    test 89 Los: [U:-0.707, V:0.5, W:0.5]
    test 90 Los: [E:0.5, N:0.5, U:-0.707]

    test 91 Xyz.toRepr: [X:10.0, Y:20.0, Z:100.0]
    test 92 Xyz.toStr: [10.0, 20.0, 100.0]
    test 93 Xyz.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 94 Aer.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 95 Xyz.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 96 Enu.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 97 Xyz.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 98 Ned.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 99 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 100 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 101 Xyz.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 102 Cartesian.toLocal Xyz: [10.0, 20.0, 100.0]
    test 103 Xyz.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 104 LatLon.toLocal Xyz: [10.0, 20.0, 100.0]
    test 105 Xyz.azimuth: 26.565
    test 106 Xyz.elevation: 77.396
    test 107 Xyz.slantrange: 102.47
    test 108 Xyz.groundrange: 22.361
    test 109 Xyz.east: 10.0
    test 110 Xyz.north: 20.0
    test 111 Xyz.up: 100.0
    test 112 Xyz.down: -100.0
    test 113 Xyz.x: 10.0
    test 114 Xyz.y: 20.0
    test 115 Xyz.z: 100.0
    test 116 Xyz.xyz: 10.0, 20.0, 100.0

    test 117 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 118 Los: [E:0.5, N:0.5, U:-0.707]
    test 119 Los: [U:-0.707, V:0.5, W:0.5]
    test 120 Los: [E:0.5, N:0.5, U:-0.707]

    test 121 Local9Tuple.toRepr: Local9Tuple(x=10.0, y=20.0, z=100.0, lat=46.02, lon=7.75, height=1773.0, ltp=Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transfo
    test 122 Local9Tuple.toStr: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 123 Local9Tuple.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 124 Aer.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 125 Local9Tuple.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 126 Enu.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 127 Local9Tuple.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 128 Ned.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 129 Local9Tuple.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 130 Xyz.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 131 Local9Tuple.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 132 Local9Tuple.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 133 Local9Tuple.azimuth: 26.565
    test 134 Local9Tuple.elevation: 77.396
    test 135 Local9Tuple.slantrange: 102.47
    test 136 Local9Tuple.groundrange: 22.361
    test 137 Local9Tuple.east: 10.0
    test 138 Local9Tuple.north: 20.0
    test 139 Local9Tuple.up: 100.0
    test 140 Local9Tuple.down: -100.0
    test 141 Local9Tuple.x: 10.0
    test 142 Local9Tuple.y: 20.0
    test 143 Local9Tuple.z: 100.0
    test 144 Local9Tuple.xyz: 10.0, 20.0, 100.0
    test 145 Local9Tuple.lat: 46.02
    test 146 Local9Tuple.lon: 7.75
    test 147 Local9Tuple.latlon: 46.02, 7.75
    test 148 Local9Tuple.latlonheight: 46.02, 7.75, 1773.0
    test 149 Local9Tuple.phi: 0.803
    test 150 Local9Tuple.lam: 0.135
    test 151 Local9Tuple.philam: 0.803, 0.135
    test 152 Local9Tuple.philamheight: 0.803, 0.135, 1773.0

    test 153 Los: [A:45.0°, E:-45.0°, R:1.0]
    test 154 Los: [E:0.5, N:0.5, U:-0.707]
    test 155 Los: [U:-0.707, V:0.5, W:0.5]
    test 156 Los: [E:0.5, N:0.5, U:-0.707]

    all 156 testLtpTuples.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 33.672 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testMgrs.py
./test/testMgrs.py:88: DeprecationWarning: property_RO L{en100k<pygeodesy.mgrs.Mgrs.en100k>} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:88: DeprecationWarning: property_RO L{digraph<pygeodesy.mgrs.Mgrs.digraph>} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:94: DeprecationWarning: property_RO L{digraph<pygeodesy.mgrs.Mgrs6Tuple.digraph>} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', m.digraph, m.EN, nt=1)  # DEPRECATED
./test/testMgrs.py:117: DeprecationWarning: property_RO L{digraph<pygeodesy.mgrs.Mgrs4Tuple.digraph>} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', t.digraph, t.EN)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.mgrs by testMgrs.py line 11
# lazily imported pygeodesy.Mgrs from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.parseMGRS from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testMgrs.py line 204

    testing testMgrs.py 24.10.13 (module pygeodesy.mgrs 24.11.06) isLazy=3
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31 N 431000 4582000
    test 16 Mgrs8: (41.38657, 2.174726, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.54564, 0.999659)
    test 17 Mgrs8: 31 N 431500 4582500
    test 18 Mgrs8: 31T DF 31000 82000
    test 19 Mgrs8: 41.391116°N, 002.180649°E
    test 20 Mgrs8: 31T DF 31000 82000
    test 21 Mgrs9: 31U DQ 48251 11932
    test 22 Mgrs9: [Z:31U, G:DQ, E:48251, N:11932]
    test 23 toUtm1: 31 N 448251 5411932
    test 24 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 25 toMgrs1: 31U DQ 48251 11932
    test 26 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]

    test 27 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 28 easting: 48251.0
    test 29 northing: 11932.0
    test 30 EN: DQ
    test 31 en100k: DQ
    test 32 digraph: DQ
    test 33 zone: 31
    test 34 band: U
    test 35 bandLatitude: 48
    test 36 eastingnorthing: (48251.0, 11932.0)
    test 37 resolution: 1.0
# lazily imported pygeodesy.utmups by mgrs.py line 277
    test 38 tilesize: 100000.0

    test 39 toMgrs: 31U DQ 48251 11932
    test 40 toMgrs(None): Mgrs6Tuple
    test 41 digraph: DQ

    test 42 (60.0°N, 001.0°E).toUtmUps.toMgrs: 31V CG 88455 53097
    test 43 (60.0°N, 003.0°E).toUtmUps.toMgrs: 32V JM 65640 66593
    test 44 (60.0°N, 009.0°E).toUtmUps.toMgrs: 32V NM 00000 51411
    test 45 (76.0°N, 001.0°E).toUtmUps.toMgrs: 31X DE 45999 36099
    test 46 (76.0°N, 013.0°E).toUtmUps.toMgrs: 33X VE 45999 36099
    test 47 (76.0°N, 025.0°E).toUtmUps.toMgrs: 35X ME 45999 36099
    test 48 (76.0°N, 037.0°E).toUtmUps.toMgrs: 37X DE 45999 36099
    test 49 (84.0°N, 042.0°E).toUtmUps.toMgrs: Z GC 46127 04524
    test 50 (90.0°S, 000.0°E).toUtmUps.toMgrs: B AN 00000 00000

    test 51 Mgrs: BAN00
    test 52 Mgrs4Tuple: ('B', 'AN', 0.0, 0.0)
    test 53 Mgrs4Tuple: SouthPole(zone='B', EN='AN', easting=0.0, northing=0.0)
    test 54 digraph: AN
    test 55 toMgrs.toLatLon: SouthPole(lat=-90.0, lon=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.0, scale=0.994)

    test 56 Ups: 00 S 2000000 2000000
    test 57 Ups: 00 S 2000500 2000500
    test 58 Mgrs: 0.1

    test 59 Mgrs: Y UB 17770 03800
    test 60 Mgrs: [Z:Y, G:UB, E:17770, N:03800]
    test 61 toUtmUps: 00 N 1617775 1403805
    test 62 toUtmUps: [Z:00Y, H:N, E:1617775, N:1403805]
    test 63 toLatLon: (83.627518, -32.664231, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.570098, 0.99708)
    test 64 toLatLon: LatLonDatum5Tuple(lat=83.627518, lon=-32.664231, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.570098, scale=0.99708)
    test 65 toMgrs!: 25X EN 04160 86523

    test 66 Mgrs: B FS 77514 99182
    test 67 Mgrs: [Z:B, G:FS, E:77514, N:99182]
    test 68 toUtmUps: 00 S 2377514 2499182
    test 69 toUtmUps: [Z:00B, H:S, E:2377514, N:2499182]
    test 70 toLatLon: (-84.367192, 37.098959, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.647499, 0.996406)
    test 71 toLatLon: LatLonDatum5Tuple(lat=-84.367192, lon=37.098959, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.647499, scale=0.996406)
    test 72 toMgrs: B FS 77514 99182

    test 73 Mgrs: 45S XT 47000 91000
    test 74 Mgrs: [Z:45S, G:XT, E:47000, N:91000]
    test 75 toUtmUps: 45 N 647500 3791500
    test 76 toUtmUps: [Z:45S, H:N, E:647500, N:3791500]
    test 77 toLatLon: (34.254177, 88.601932, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), 0.901835, 0.999868)
    test 78 toLatLon: LatLonDatum5Tuple(lat=34.254177, lon=88.601932, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=0.901835, scale=0.999868)
    test 79 toMgrs: 45S XT 47499 91499

    test 80 Mgrs: Y XK 35000 43000
    test 81 Mgrs: [Z:Y, G:XK, E:35000, N:43000]
    test 82 toUtmUps: 00 N 1735500 2243500
    test 83 toUtmUps: [Z:00Y, H:N, E:1735500, N:2243500]
    test 84 toLatLon: (86.762629, -132.632821, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.314879, 0.994794)
    test 85 toLatLon: LatLonDatum5Tuple(lat=86.762629, lon=-132.632821, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-2.314879, scale=0.994794)
    test 86 toMgrs: Y XK 35499 43500

    4 of 86 testMgrs.py tests (4.7%) FAILED, incl. 4 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 58.811 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testModules.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28

    testing testModules.py 24.06.05 isLazy=3

    2805 tests skipped (2805): pygeodesy

    all testModules.py tests passed, 2805 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 20.981 us

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testNamed.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.geohash by testNamed.py line 10
# lazily imported pygeodesy.Datum from .datums by testNamed.py line 10
# lazily imported pygeodesy.Datums from .datums by testNamed.py line 10
# lazily imported pygeodesy.ltpTuples by testNamed.py line 10
# lazily imported pygeodesy.nameof from .named by testNamed.py line 10
# lazily imported pygeodesy.ub2str from .basics by testNamed.py line 10

    testing testNamed.py 24.06.02 isLazy=3

    testing _Named() (pygeodesy.named, 24.10.14)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 named._Named 'Test': named._Named 'Test'
    test 7 pygeodesy.named._Named 'Test': pygeodesy.named._Named 'Test'
    test 8 Test: _Named.name = 'X' (was 'Test'): use _Named.rename('X')
    test 9 Test: _Named 'Test'
    test 10 _Named 'Test': Test
    test 11 _Named 'Test': Test
    test 12 _Named 'Test': _Named 'Test'
    test 13 _Named 'Test': <_Named 'Test' at 0x103fd0ad0>  FAILED, KNOWN, expected _Named 'Test'
    test 14 _Named 'Test': ''

    testing _NamedBase() (pygeodesy.named, 24.10.14)
    test 15 _NamedBase: _NamedBase
    test 16 _NamedBase: True
    test 17 _NamedBase: ''
    test 18 Test: Test
    test 19 _NamedBase 'Test': _NamedBase 'Test'
    test 20 named._NamedBase 'Test': named._NamedBase 'Test'
    test 21 pygeodesy.named._NamedBase 'Test': pygeodesy.named._NamedBase 'Test'
    test 22 Test: _NamedBase.name = 'X' (was 'Test'): use _NamedBase.rename('X')
    test 23 Test: named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 24 _NamedBase 'Test': Test
    test 25 _NamedBase 'Test': Test
    test 26 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 27 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 28 _NamedBase 'Test': ''

    testing _NamedDict() (pygeodesy.named, 24.10.14)
    test 29 _NamedDict: _NamedDict
    test 30 _NamedDict: True
    test 31 _NamedDict: ''
    test 32 Test: Test
    test 33 _NamedDict 'Test': _NamedDict 'Test'
    test 34 named._NamedDict 'Test': named._NamedDict 'Test'
    test 35 pygeodesy.named._NamedDict 'Test': pygeodesy.named._NamedDict 'Test'
    test 36 Test: _NamedDict.name = 'X' (was 'Test'): use _NamedDict.rename('X')
    test 37 Test: {}
    test 38 _NamedDict 'Test': Test
    test 39 _NamedDict 'Test': Test
    test 40 _NamedDict 'Test': {}
    test 41 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 42 _NamedDict: ''

    testing _NamedEnum(<class 'pygeodesy.datums.Datum'>,) (pygeodesy.named, 24.10.14)
    test 43 Datums: _NamedEnum
    test 44 Datums: True
    test 45 Datums: 'Datums'  FAILED, KNOWN, expected ''
    test 46 Test: Test
    test 47 _NamedEnum 'Test': _NamedEnum 'Test'
    test 48 named._NamedEnum 'Test': named._NamedEnum 'Test'
    test 49 pygeodesy.named._NamedEnum 'Test': pygeodesy.named._NamedEnum 'Test'
    test 50 Test: _NamedEnum.name = 'X' (was 'Test'): use _NamedEnum.rename('X')
    test 51 Test: Test.
    test 52 _NamedEnum 'Test': Test
    test 53 _NamedEnum 'Test': Test
    test 54 _NamedEnum 'Test': Test.
    test 55 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 56 _NamedEnum: ''

    testing _NamedEnumItem() (pygeodesy.named, 24.10.14)
    test 57 _NamedEnumItem: _NamedEnumItem
    test 58 _NamedEnumItem: True
    test 59 _NamedEnumItem: ''
    test 60 Test: Test
    test 61 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 62 named._NamedEnumItem 'Test': named._NamedEnumItem 'Test'
    test 63 pygeodesy.named._NamedEnumItem 'Test': pygeodesy.named._NamedEnumItem 'Test'
    test 64 _NamedEnumItem 'Test': Test
    test 65 _NamedEnumItem 'Test': Test
    test 66 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 67 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 68 _NamedEnumItem 'Test': ''

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 24.10.14)
    test 69 LatLon2Tuple: LatLon2Tuple
    test 70 LatLon2Tuple: True
    test 71 LatLon2Tuple: ''
    test 72 Test: Test
    test 73 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 74 namedTuples.LatLon2Tuple 'Test': namedTuples.LatLon2Tuple 'Test'
    test 75 pygeodesy.namedTuples.LatLon2Tuple 'Test': pygeodesy.namedTuples.LatLon2Tuple 'Test'
    test 76 Test: LatLon2Tuple.name = 'X' (was 'Test'): use LatLon2Tuple.rename('X')
    test 77 Test: (0, 0)
    test 78 LatLon2Tuple 'Test': Test
    test 79 LatLon2Tuple 'Test': Test
    test 80 LatLon2Tuple 'Test': (0, 0)
    test 81 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 82 LatLon2Tuple 'Test': ''

    testing NamedDicts (pygeodesy.named, 24.10.14)
# lazily imported pygeodesy.albers by bases.py line 198
# lazily imported pygeodesy.azimuthal by bases.py line 198
# lazily imported pygeodesy.booleans by bases.py line 198
# lazily imported pygeodesy.clipy by bases.py line 198
# lazily imported pygeodesy.css by bases.py line 198
# lazily imported pygeodesy.ecef by bases.py line 198
# lazily imported pygeodesy.elevations by bases.py line 198
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 198
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 198
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 198
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 198
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 198
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 198
# lazily imported pygeodesy.elliptic by bases.py line 198
# lazily imported pygeodesy.epsg by bases.py line 198
# lazily imported pygeodesy.etm by bases.py line 198
# lazily imported pygeodesy.frechet by bases.py line 198
# lazily imported pygeodesy.fstats by bases.py line 198
# lazily imported pygeodesy.gars by bases.py line 198
# lazily imported pygeodesy.geodesici by bases.py line 198
# lazily imported pygeodesy.geodesicw by bases.py line 198
# lazily imported pygeodesy.geodsolve by bases.py line 198
    test 83 Neighbors8Dict: Neighbors8Dict
    test 84 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 85 Neighbors8Dict: 8
# lazily imported pygeodesy.geoids by bases.py line 198
# lazily imported pygeodesy.hausdorff by bases.py line 198
# lazily imported pygeodesy.ktm by bases.py line 198
# lazily imported pygeodesy.lcc by bases.py line 198
# lazily imported pygeodesy.ltp by bases.py line 198
# lazily imported pygeodesy.mgrs by bases.py line 198
# lazily imported pygeodesy.osgr by bases.py line 198
# lazily imported pygeodesy.resections by bases.py line 198
# lazily imported pygeodesy.simplify by bases.py line 198
# lazily imported pygeodesy.sphericalBase by bases.py line 198
# lazily imported pygeodesy.sphericalNvector by bases.py line 198
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 198
# lazily imported pygeodesy.trf by bases.py line 198
# lazily imported pygeodesy.triaxials by bases.py line 198
# lazily imported pygeodesy.utmups by bases.py line 198
# lazily imported pygeodesy.vector2d by bases.py line 198
# lazily imported pygeodesy.webmercator by bases.py line 198
# lazily imported pygeodesy.wgrs by bases.py line 198
# lazily imported pygeodesy.auxilats by bases.py line 198
# lazily imported pygeodesy.deprecated by bases.py line 198
# lazily imported pygeodesy.geodesicx by bases.py line 198

    testing NamedTuples (pygeodesy.namedTuples, 24.08.18)
    test 86 Albers7Tuple: Albers7Tuple
    test 87 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 88 Albers7Tuple: 7
    test 89 Azimuthal7Tuple: Azimuthal7Tuple
    test 90 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 91 Azimuthal7Tuple: 7
    test 92 RadiusThetaPhi3Tuple: RadiusThetaPhi3Tuple
    test 93 RadiusThetaPhi3Tuple: 3-Tuple C{(r, theta, phi)}
    test 94 RadiusThetaPhi3Tuple: 3
    test 95 ClipCS4Tuple: ClipCS4Tuple
    test 96 ClipCS4Tuple: 4-Tuple C{(start, end, i, j)}
    test 97 ClipCS4Tuple: 4
    test 98 ClipFHP4Tuple: ClipFHP4Tuple
    test 99 ClipFHP4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 100 ClipFHP4Tuple: 4
    test 101 ClipGH4Tuple: ClipGH4Tuple
    test 102 ClipGH4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 103 ClipGH4Tuple: 4
    test 104 ClipLB6Tuple: ClipLB6Tuple
    test 105 ClipLB6Tuple: 6-Tuple C{(start, end, i, fi, fj, j)}
    test 106 ClipLB6Tuple: 6
    test 107 ClipSH3Tuple: ClipSH3Tuple
    test 108 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 109 ClipSH3Tuple: 3
    test 110 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 111 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 112 EasNorAziRk4Tuple: 4
    test 113 EasNorAziRkEqu6Tuple: EasNorAziRkEqu6Tuple
    test 114 EasNorAziRkEqu6Tuple: 6-Tuple C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 115 EasNorAziRkEqu6Tuple: 6
    test 116 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 117 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 118 LatLonAziRk4Tuple: 4
    test 119 Ecef9Tuple: Ecef9Tuple
    test 120 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 121 Ecef9Tuple: 9
    test 122 Elevation2Tuple: Elevation2Tuple
    test 123 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 124 Elevation2Tuple: 2
    test 125 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 126 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 127 GeoidHeight2Tuple: 2
    test 128 Circle4Tuple: Circle4Tuple
    test 129 Circle4Tuple: 4-Tuple C{(radius, height, lat, beta)}
    test 130 Circle4Tuple: 4
    test 131 Curvature2Tuple: Curvature2Tuple
    test 132 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 133 Curvature2Tuple: 2
    test 134 a_f2Tuple: a_f2Tuple
    test 135 a_f2Tuple: 2-Tuple C{(a, f)}
    test 136 a_f2Tuple: 2
    test 137 Elliptic3Tuple: Elliptic3Tuple
    test 138 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 139 Elliptic3Tuple: 3
    test 140 Radical2Tuple: Radical2Tuple
    test 141 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 142 Radical2Tuple: 2
    test 143 Frechet6Tuple: Frechet6Tuple
    test 144 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 145 Frechet6Tuple: 6
    test 146 DivMod2Tuple: DivMod2Tuple
    test 147 DivMod2Tuple: 2-Tuple C{(div, mod)}
    test 148 DivMod2Tuple: 2
    test 149 Fsum2Tuple: Fsum2Tuple
    test 150 Fsum2Tuple: 2-Tuple C{(fsum, residual)}
    test 151 Fsum2Tuple: 2
    test 152 Intersect7Tuple: Intersect7Tuple
    test 153 Intersect7Tuple: 7-Tuple C{(A, B, sAB, aAB, c, kA, kB)}
    test 154 Intersect7Tuple: 7
    test 155 Intersectool5Tuple: Intersectool5Tuple
    test 156 Intersectool5Tuple: 5-Tuple C{(A, B, sAB, aAB, c)}
    test 157 Intersectool5Tuple: 5
    test 158 Intersector5Tuple: Intersector5Tuple
    test 159 Intersector5Tuple: 5-Tuple C{(A, B, sAB, aAB, c)}
    test 160 Intersector5Tuple: 5
    test 161 Middle5Tuple: Middle5Tuple
    test 162 Middle5Tuple: 5-Tuple C{(A, B, sMM, aMM, c)}
    test 163 Middle5Tuple: 5
    test 164 Resolutions2Tuple: Resolutions2Tuple
    test 165 Resolutions2Tuple: 2-Tuple C{(res1, res2)}
    test 166 Resolutions2Tuple: 2
    test 167 Sizes3Tuple: Sizes3Tuple
    test 168 Sizes3Tuple: 3-Tuple C{(height, width, radius)}
    test 169 Sizes3Tuple: 3
    test 170 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 171 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 172 GeoidHeight5Tuple: 5
    test 173 Hausdorff6Tuple: Hausdorff6Tuple
    test 174 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 175 Hausdorff6Tuple: 6
    test 176 Area3Tuple: Area3Tuple
    test 177 Area3Tuple: 3-Tuple C{(number, perimeter, area)}
    test 178 Area3Tuple: 3
    test 179 Direct9Tuple: Direct9Tuple
    test 180 Direct9Tuple: 9-Tuple C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 181 Direct9Tuple: 9
    test 182 GeodSolve12Tuple: GeodSolve12Tuple
    test 183 GeodSolve12Tuple: 12-Tuple C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 184 GeodSolve12Tuple: 12
    test 185 Inverse10Tuple: Inverse10Tuple
    test 186 Inverse10Tuple: 10-Tuple C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 187 Inverse10Tuple: 10
    test 188 Rhumb8Tuple: Rhumb8Tuple
    test 189 Rhumb8Tuple: 8-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 190 Rhumb8Tuple: 8
    test 191 Aer4Tuple: Aer4Tuple
    test 192 Aer4Tuple: 4-Tuple C{(azimuth, elevation, slantrange, ltp)}
    test 193 Aer4Tuple: 4
    test 194 Attitude4Tuple: Attitude4Tuple
    test 195 Attitude4Tuple: 4-Tuple C{(alt, tilt, yaw, roll)}
    test 196 Attitude4Tuple: 4
    test 197 ChLV9Tuple: ChLV9Tuple
    test 198 ChLV9Tuple: 9-Tuple C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 199 ChLV9Tuple: 9
    test 200 ChLVEN2Tuple: ChLVEN2Tuple
    test 201 ChLVEN2Tuple: 2-Tuple C{(E_LV95, N_LV95)}
    test 202 ChLVEN2Tuple: 2
    test 203 ChLVYX2Tuple: ChLVYX2Tuple
    test 204 ChLVYX2Tuple: 2-Tuple C{(Y, X)}
    test 205 ChLVYX2Tuple: 2
    test 206 ChLVyx2Tuple: ChLVyx2Tuple
    test 207 ChLVyx2Tuple: 2-Tuple C{(y_LV03, x_LV03)}
    test 208 ChLVyx2Tuple: 2
    test 209 Enu4Tuple: Enu4Tuple
    test 210 Enu4Tuple: 4-Tuple C{(east, north, up, ltp)}
    test 211 Enu4Tuple: 4
    test 212 Footprint5Tuple: Footprint5Tuple
    test 213 Footprint5Tuple: 5-Tuple C{(center, upperleft, upperight, loweright, lowerleft)}
    test 214 Footprint5Tuple: 5
    test 215 Local9Tuple: Local9Tuple
    test 216 Local9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 217 Local9Tuple: 9
    test 218 Ned4Tuple: Ned4Tuple
    test 219 Ned4Tuple: 4-Tuple C{(north, east, down, ltp)}
    test 220 Ned4Tuple: 4
    test 221 Uvw3Tuple: Uvw3Tuple
    test 222 Uvw3Tuple: 3-Tuple C{(u, v, w)}
    test 223 Uvw3Tuple: 3
    test 224 Xyz4Tuple: Xyz4Tuple
    test 225 Xyz4Tuple: 4-Tuple C{(x, y, z, ltp)}
    test 226 Xyz4Tuple: 4
    test 227 Mgrs4Tuple: Mgrs4Tuple
    test 228 Mgrs4Tuple: 4-Tuple C{(zone, EN, easting, northing)}
    test 229 Mgrs4Tuple: 4
    test 230 Mgrs6Tuple: Mgrs6Tuple
    test 231 Mgrs6Tuple: 6-Tuple C{(zone, EN, easting, northing, band, datum)}
    test 232 Mgrs6Tuple: 6
    test 233 Bearing2Tuple: Bearing2Tuple
    test 234 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 235 Bearing2Tuple: 2
    test 236 Bounds2Tuple: Bounds2Tuple
    test 237 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 238 Bounds2Tuple: 2
    test 239 Bounds4Tuple: Bounds4Tuple
    test 240 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 241 Bounds4Tuple: 4
    test 242 Destination2Tuple: Destination2Tuple
    test 243 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 244 Destination2Tuple: 2
    test 245 Destination3Tuple: Destination3Tuple
    test 246 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 247 Destination3Tuple: 3
    test 248 Distance2Tuple: Distance2Tuple
    test 249 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 250 Distance2Tuple: 2
    test 251 Distance3Tuple: Distance3Tuple
    test 252 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 253 Distance3Tuple: 3
    test 254 Distance4Tuple: Distance4Tuple
    test 255 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 256 Distance4Tuple: 4
    test 257 EasNor2Tuple: EasNor2Tuple
    test 258 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 259 EasNor2Tuple: 2
    test 260 EasNor3Tuple: EasNor3Tuple
    test 261 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 262 EasNor3Tuple: 3
    test 263 Forward4Tuple: Forward4Tuple
    test 264 Forward4Tuple: 4-Tuple C{(easting, northing, gamma, scale)}
    test 265 Forward4Tuple: 4
    test 266 Intersection3Tuple: Intersection3Tuple
    test 267 Intersection3Tuple: 3-Tuple C{(point, outside1, outside2)}
    test 268 Intersection3Tuple: 3
    test 269 LatLon2Tuple: LatLon2Tuple
    test 270 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 271 LatLon2Tuple: 2
    test 272 LatLon3Tuple: LatLon3Tuple
    test 273 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 274 LatLon3Tuple: 3
    test 275 LatLon4Tuple: LatLon4Tuple
    test 276 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 277 LatLon4Tuple: 4
    test 278 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 279 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 280 LatLonDatum3Tuple: 3
    test 281 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 282 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, gamma, scale)}
    test 283 LatLonDatum5Tuple: 5
    test 284 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 285 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 286 LatLonPrec3Tuple: 3
    test 287 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 288 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 289 LatLonPrec5Tuple: 5
    test 290 NearestOn2Tuple: NearestOn2Tuple
    test 291 NearestOn2Tuple: 2-Tuple C{(closest, fraction)}
    test 292 NearestOn2Tuple: 2
    test 293 NearestOn3Tuple: NearestOn3Tuple
    test 294 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 295 NearestOn3Tuple: 3
    test 296 NearestOn5Tuple: NearestOn5Tuple
    test 297 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 298 NearestOn5Tuple: 5
    test 299 NearestOn6Tuple: NearestOn6Tuple
    test 300 NearestOn6Tuple: 6-Tuple C{(closest, distance, fi, j, start, end)}
    test 301 NearestOn6Tuple: 6
    test 302 NearestOn8Tuple: NearestOn8Tuple
    test 303 NearestOn8Tuple: 8-Tuple C{(closest, distance, fi, j, start, end, initial, final)}
    test 304 NearestOn8Tuple: 8
    test 305 PhiLam2Tuple: PhiLam2Tuple
    test 306 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 307 PhiLam2Tuple: 2
    test 308 PhiLam3Tuple: PhiLam3Tuple
    test 309 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 310 PhiLam3Tuple: 3
    test 311 PhiLam4Tuple: PhiLam4Tuple
    test 312 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 313 PhiLam4Tuple: 4
    test 314 Point3Tuple: Point3Tuple
    test 315 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 316 Point3Tuple: 3
    test 317 Points2Tuple: Points2Tuple
    test 318 Points2Tuple: 2-Tuple C{(number, points)}
    test 319 Points2Tuple: 2
    test 320 Reverse4Tuple: Reverse4Tuple
    test 321 Reverse4Tuple: 4-Tuple C{(lat, lon, gamma, scale)}
    test 322 Reverse4Tuple: 4
    test 323 Triangle7Tuple: Triangle7Tuple
    test 324 Triangle7Tuple: 7-Tuple C{(A, a, B, b, C, c, area)}
    test 325 Triangle7Tuple: 7
    test 326 Triangle8Tuple: Triangle8Tuple
    test 327 Triangle8Tuple: 8-Tuple C{(A, a, B, b, C, c, D, E)}
    test 328 Triangle8Tuple: 8
    test 329 Trilaterate5Tuple: Trilaterate5Tuple
    test 330 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 331 Trilaterate5Tuple: 5
    test 332 UtmUps2Tuple: UtmUps2Tuple
    test 333 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 334 UtmUps2Tuple: 2
    test 335 UtmUps5Tuple: UtmUps5Tuple
    test 336 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 337 UtmUps5Tuple: 5
    test 338 UtmUps8Tuple: UtmUps8Tuple
    test 339 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 340 UtmUps8Tuple: 8
    test 341 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 342 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 343 UtmUpsLatLon5Tuple: 5
    test 344 Vector2Tuple: Vector2Tuple
    test 345 Vector2Tuple: 2-Tuple C{(x, y)}
    test 346 Vector2Tuple: 2
    test 347 Vector3Tuple: Vector3Tuple
    test 348 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 349 Vector3Tuple: 3
    test 350 Vector4Tuple: Vector4Tuple
    test 351 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 352 Vector4Tuple: 4
    test 353 Shape2Tuple: Shape2Tuple
    test 354 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 355 Shape2Tuple: 2
    test 356 Collins5Tuple: Collins5Tuple
    test 357 Collins5Tuple: 5-Tuple C{(pointP, pointH, a, b, c)}
    test 358 Collins5Tuple: 5
    test 359 Survey3Tuple: Survey3Tuple
    test 360 Survey3Tuple: 3-Tuple C{(PA, PB, PC)}
    test 361 Survey3Tuple: 3
    test 362 Tienstra7Tuple: Tienstra7Tuple
    test 363 Tienstra7Tuple: 7-Tuple C{(pointP, A, B, C, a, b, c)}
    test 364 Tienstra7Tuple: 7
    test 365 TriAngle5Tuple: TriAngle5Tuple
    test 366 TriAngle5Tuple: 5-Tuple C{(radA, radB, radC, rIn, area)}
    test 367 TriAngle5Tuple: 5
    test 368 TriSide2Tuple: TriSide2Tuple
    test 369 TriSide2Tuple: 2-Tuple C{(a, radA)}
    test 370 TriSide2Tuple: 2
    test 371 TriSide4Tuple: TriSide4Tuple
    test 372 TriSide4Tuple: 4-Tuple C{(a, b, radC, d)}
    test 373 TriSide4Tuple: 4
    test 374 TRFXform7Tuple: TRFXform7Tuple
    test 375 TRFXform7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 376 TRFXform7Tuple: 7
    test 377 BetaOmega2Tuple: BetaOmega2Tuple
    test 378 BetaOmega2Tuple: 2-Tuple C{(beta, omega)}
    test 379 BetaOmega2Tuple: 2
    test 380 BetaOmega3Tuple: BetaOmega3Tuple
    test 381 BetaOmega3Tuple: 3-Tuple C{(beta, omega, height)}
    test 382 BetaOmega3Tuple: 3
    test 383 Jacobi2Tuple: Jacobi2Tuple
    test 384 Jacobi2Tuple: 2-Tuple C{(x, y)}
    test 385 Jacobi2Tuple: 2
    test 386 Circin6Tuple: Circin6Tuple
    test 387 Circin6Tuple: 6-Tuple C{(radius, center, deltas, cA, cB, cC)}
    test 388 Circin6Tuple: 6
    test 389 Circum3Tuple: Circum3Tuple
    test 390 Circum3Tuple: 3-Tuple C{(radius, center, deltas)}
    test 391 Circum3Tuple: 3
    test 392 Circum4Tuple: Circum4Tuple
    test 393 Circum4Tuple: 4-Tuple C{(radius, center, rank, residuals)}
    test 394 Circum4Tuple: 4
    test 395 Meeus2Tuple: Meeus2Tuple
    test 396 Meeus2Tuple: 2-Tuple C{(radius, Type)}
    test 397 Meeus2Tuple: 2
    test 398 Radii11Tuple: Radii11Tuple
    test 399 Radii11Tuple: 11-Tuple C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 400 Radii11Tuple: 11
    test 401 Soddy4Tuple: Soddy4Tuple
    test 402 Soddy4Tuple: 4-Tuple C{(radius, center, deltas, outer)}
    test 403 Soddy4Tuple: 4
    test 404 Triaxum5Tuple: Triaxum5Tuple
    test 405 Triaxum5Tuple: 5-Tuple C{(a, b, c, rank, residuals)}
    test 406 Triaxum5Tuple: 5
    test 407 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 408 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 409 EasNorRadius3Tuple: 3
    test 410 ClipCS3Tuple: DEPRECATED, see I{DEPRECATED} function L{pygeodesy.deprecated.clipCS3}.
    test 411 EasNorExact4Tuple: DEPRECATED, use class L{Forward4Tuple}, item C{gamma} for C{convergence}.
    test 412 Transform7Tuple: DEPRECATED on 2024.02.02, use class L{TRFXform7Tuple}, I{without} keyword arguments.
    test 413 LatLonExact4Tuple: DEPRECATED, use class L{Reverse4Tuple}, item C{gamma} for C{convergence}.
    test 414 NearestOn4Tuple: DEPRECATED on 2023.10.10, see methods L{RhumbLine.nearestOn4} and L{RhumbLineAux.nearestOn4}.
    test 415 Ned3Tuple: DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
    test 416 Rhumb7Tuple: DEPRECATED, use class L{Rhumb8Tuple}, ignoring item C{a12}.
    test 417 RhumbOrder2Tuple: DEPRECATED, see deprecated method L{Rhumb.orders}.
    test 418 Transform7Tuple: DEPRECATED on 2024.02.02, use class L{TRFXform7Tuple}, I{without} keyword arguments.
    test 419 TriAngle4Tuple: DEPRECATED on 2023.09.14, use class L{TriAngle5Tuple}, ignoring item C{area}.
    test 420 UtmUps4Tuple: DEPRECATED and OBSOLETE, expect a L{UtmUps5Tuple} from method C{pygeodesy.Mgrs.toUtm(utm=None)}. 4-Tuple C{(zone, hemipole, easting, northing)} with as C{zone} B{C{str}} and no C{band}.
    test 421 RhumbSolve7Tuple: RhumbSolve7Tuple
    test 422 RhumbSolve7Tuple: 7-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 423 RhumbSolve7Tuple: 7

    testing __init__.py (pygeodesy.named, 24.10.14)

    testing __main__.py (pygeodesy.named, 24.10.14)

    testing albers.py (pygeodesy.named, 24.10.14)
    test 424 albers.py:237: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 425 albers.py:358: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 24.10.14)
    test 426 azimuthal.py:184: L{LatLon2Tuple}C{(lat, lon)}
    test 427 azimuthal.py:359: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 428 azimuthal.py:392: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 429 azimuthal.py:485: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 430 azimuthal.py:511: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 431 azimuthal.py:656: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 432 azimuthal.py:681: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 433 azimuthal.py:751: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 434 azimuthal.py:791: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 435 azimuthal.py:956: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 436 azimuthal.py:982: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 437 azimuthal.py:1011: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 438 azimuthal.py:1034: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 439 azimuthal.py:1065: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 440 azimuthal.py:1105: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 24.10.14)

    testing booleans.py (pygeodesy.named, 24.10.14)

    testing cartesianBase.py (pygeodesy.named, 24.10.14)
    test 441 cartesianBase.py:140: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 442 cartesianBase.py:194: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 443 cartesianBase.py:299: L{Vector3Tuple}C{(x, y, z)}
    test 444 cartesianBase.py:353: L{Vector4Tuple}C{(x, y, z, h)}
    test 445 cartesianBase.py:398: L{LatLon2Tuple}C{(lat, lon)}
    test 446 cartesianBase.py:404: L{LatLon3Tuple}C{(lat, lon, height)}
    test 447 cartesianBase.py:410: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 448 cartesianBase.py:474: L{PhiLam2Tuple}C{(phi, lam)}
    test 449 cartesianBase.py:480: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 450 cartesianBase.py:486: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 451 cartesianBase.py:606: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 452 cartesianBase.py:626: L{PhiLam2Tuple}C{(phi, lam)}
    test 453 cartesianBase.py:634: L{LatLon2Tuple}C{(lat, lon)}
    test 454 cartesianBase.py:642: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 455 cartesianBase.py:699: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 456 cartesianBase.py:719: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 457 cartesianBase.py:748: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 458 cartesianBase.py:775: L{Vector4Tuple}C{(x, y, z, h)}
    test 459 cartesianBase.py:801: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 460 cartesianBase.py:851: L{Vector3Tuple}C{(x, y, z)}
    test 461 cartesianBase.py:877: L{Vector3Tuple}C{(x, y, z)}
    test 462 cartesianBase.py:891: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 463 cartesianBase.py:901: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 464 cartesianBase.py:948: L{Vector3Tuple}C{(x, y, z)}
    test 465 cartesianBase.py:1001: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}
    test 466 cartesianBase.py:1019: L{RadiusThetaPhi3Tuple}C{(r, theta, phi)}

    testing clipy.py (pygeodesy.named, 24.10.14)
    test 467 clipy.py:196: L{ClipCS4Tuple}C{(start, end, i, j)}
    test 468 clipy.py:276: L{ClipFHP4Tuple}C{(lat, lon, height, clipid)}
    test 469 clipy.py:321: L{ClipGH4Tuple}C{(lat, lon, height, clipid)}
    test 470 clipy.py:387: L{ClipLB6Tuple}C{(start, end, i, fi, fj, j)}
    test 471 clipy.py:665: L{ClipSH3Tuple}C{(start, end, original)}

    testing constants.py (pygeodesy.named, 24.10.14)

    testing css.py (pygeodesy.named, 24.10.14)
    test 472 css.py:137: L{EasNor2Tuple}C{(easting, northing)}
    test 473 css.py:156: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 474 css.py:177: L{EasNorAziRkEqu6Tuple}C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 475 css.py:262: L{LatLon2Tuple}C{(lat, lon)}
    test 476 css.py:327: L{LatLon2Tuple}C{(lat, lon)}
    test 477 css.py:356: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 478 css.py:522: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 479 css.py:616: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 24.10.14)
    test 480 datums.py:275: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 24.10.14)
    test 481 dms.py:760: L{LatLon2Tuple}C{(lat, lon)}
    test 482 dms.py:813: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 24.10.14)
    test 483 ecef.py:226: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 484 ecef.py:252: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 485 ecef.py:340: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 486 ecef.py:414: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 487 ecef.py:485: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 488 ecef.py:627: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 489 ecef.py:725: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 490 ecef.py:813: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 491 ecef.py:1064: L{LatLon2Tuple}C{(lat, lon)}
    test 492 ecef.py:1070: L{LatLon3Tuple}C{(lat, lon, height)}
    test 493 ecef.py:1076: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 494 ecef.py:1082: L{LatLon2Tuple}C{(lat, lon)}
    test 495 ecef.py:1105: L{PhiLam2Tuple}C{(phi, lam)}
    test 496 ecef.py:1111: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 497 ecef.py:1117: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 498 ecef.py:1123: L{PhiLam2Tuple}C{(phi, lam)}
    test 499 ecef.py:1141: L{Vector4Tuple}C{(x, y, z, h)}
    test 500 ecef.py:1183: L{LatLon3Tuple}C{(lat, lon, height)}
    test 501 ecef.py:1184: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 502 ecef.py:1215: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 503 ecef.py:1231: L{Vector3Tuple}C{(x, y, z)}
    test 504 ecef.py:1245: L{Vector3Tuple}C{(x, y, z)}
    test 505 ecef.py:1251: L{Vector4Tuple}C{(x, y, z, h)}

    testing elevations.py (pygeodesy.named, 24.10.14)
    test 506 elevations.py:150: L{Elevation2Tuple}C{(elevation, data_source)}
    test 507 elevations.py:206: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 24.10.14)
    test 508 ellipsoidalBase.py:321: L{Distance2Tuple}C{(distance, initial)}
    test 509 ellipsoidalBase.py:356: L{Elevation2Tuple}C{(elevation, data_source)}
    test 510 ellipsoidalBase.py:469: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 511 ellipsoidalBase.py:511: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 512 ellipsoidalBase.py:988: L{Vector3Tuple}C{(x, y, z)}
    test 513 ellipsoidalBase.py:1034: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalBaseDI.py (pygeodesy.named, 24.10.14)
    test 514 ellipsoidalBaseDI.py:58: L{Bearing2Tuple}C{(initial, final)}
    test 515 ellipsoidalBaseDI.py:100: L{Destination2Tuple}C{(destination, final)}
    test 516 ellipsoidalBaseDI.py:107: L{Destination2Tuple}C{(destination, final)}
    test 517 ellipsoidalBaseDI.py:108: L{Destination3Tuple}C{(lat, lon, final)}
    test 518 ellipsoidalBaseDI.py:159: L{Distance3Tuple}C{(distance, initial, final)}
    test 519 ellipsoidalBaseDI.py:313: L{Distance3Tuple}C{(distance, initial, final)}
    test 520 ellipsoidalBaseDI.py:338: L{NearestOn8Tuple}C{(closest, distance, fi, j, start, end, initial, final)}

    testing ellipsoidalExact.py (pygeodesy.named, 24.10.14)
    test 521 ellipsoidalExact.py:43: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 522 ellipsoidalExact.py:81: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 523 ellipsoidalExact.py:145: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 524 ellipsoidalExact.py:146: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 525 ellipsoidalExact.py:195: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 526 ellipsoidalExact.py:271: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalGeodSolve.py (pygeodesy.named, 24.10.14)
    test 527 ellipsoidalGeodSolve.py:43: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 528 ellipsoidalGeodSolve.py:81: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 529 ellipsoidalGeodSolve.py:137: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 530 ellipsoidalGeodSolve.py:138: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 531 ellipsoidalGeodSolve.py:189: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 532 ellipsoidalGeodSolve.py:266: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalKarney.py (pygeodesy.named, 24.10.14)
    test 533 ellipsoidalKarney.py:60: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 534 ellipsoidalKarney.py:104: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 535 ellipsoidalKarney.py:168: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 536 ellipsoidalKarney.py:169: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 537 ellipsoidalKarney.py:220: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 538 ellipsoidalKarney.py:301: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 24.10.14)
    test 539 ellipsoidalNvector.py:99: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 540 ellipsoidalNvector.py:116: L{Vector4Tuple}C{(x, y, z, h)}
    test 541 ellipsoidalNvector.py:395: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 542 ellipsoidalNvector.py:412: L{Vector4Tuple}C{(x, y, z, h)}
    test 543 ellipsoidalNvector.py:480: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 544 ellipsoidalNvector.py:498: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 545 ellipsoidalNvector.py:539: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 546 ellipsoidalNvector.py:577: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 547 ellipsoidalNvector.py:633: L{Ned3Tuple}C{(north, east, down)}  FAILED, KNOWN, expected DEPRECATED

    testing ellipsoidalVincenty.py (pygeodesy.named, 24.10.14)
    test 548 ellipsoidalVincenty.py:106: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 549 ellipsoidalVincenty.py:186: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 550 ellipsoidalVincenty.py:430: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 551 ellipsoidalVincenty.py:431: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 552 ellipsoidalVincenty.py:482: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 553 ellipsoidalVincenty.py:532: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 24.10.14)
    test 554 ellipsoids.py:141: L{a_f2Tuple}C{(a, f)}
    test 555 ellipsoids.py:663: L{Circle4Tuple}C{(radius, height, lat, beta)}
    test 556 ellipsoids.py:725: L{Distance2Tuple}C{(distance, initial)}
    test 557 ellipsoids.py:1092: L{Vector4Tuple}C{(x, y, z, h)}
    test 558 ellipsoids.py:1128: L{Vector4Tuple}C{(x, y, z, h)}
    test 559 ellipsoids.py:1616: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 560 ellipsoids.py:1635: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 561 ellipsoids.py:1692: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 24.10.14)
    test 562 elliptic.py:797: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 24.10.14)
    test 563 epsg.py:148: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 24.10.14)

    testing etm.py (pygeodesy.named, 24.10.14)
    test 564 etm.py:185: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 565 etm.py:446: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 566 etm.py:685: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}
    test 567 etm.py:1048: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 568 etm.py:1079: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}

    testing fmath.py (pygeodesy.named, 24.10.14)

    testing formy.py (pygeodesy.named, 24.10.14)
    test 569 formy.py:73: L{LatLon2Tuple}C{(lat, lon)}
    test 570 formy.py:89: L{PhiLam2Tuple}C{(phi, lam)}
    test 571 formy.py:476: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 572 formy.py:1206: L{LatLon2Tuple}C{(lat, lon)}
    test 573 formy.py:1275: L{LatLon2Tuple}C{(lat, lon)}
    test 574 formy.py:1406: L{Vector3Tuple}C{(x, y, z)}
    test 575 formy.py:1436: L{LatLon2Tuple}C{(lat, lon)}
    test 576 formy.py:1452: L{PhiLam2Tuple}C{(phi, lam)}
    test 577 formy.py:1477: L{LatLon2Tuple}C{(lat, lon)}
    test 578 formy.py:1492: L{PhiLam2Tuple}C{(phi, lam)}
    test 579 formy.py:1547: L{Vector3Tuple}C{(x, y, z)}
    test 580 formy.py:1592: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 24.10.14)
    test 581 frechet.py:195: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 582 frechet.py:357: L{PhiLam2Tuple}C{(phi, lam)}
    test 583 frechet.py:798: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing fstats.py (pygeodesy.named, 24.10.14)

    testing fsums.py (pygeodesy.named, 24.10.14)
    test 584 fsums.py:1398: L{Fsum2Tuple}C{(fsum, residual)}
    test 585 fsums.py:1817: L{Fsum2Tuple}C{(fsum, residual)}

    testing gars.py (pygeodesy.named, 24.10.14)
    test 586 gars.py:207: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geodesici.py (pygeodesy.named, 24.10.14)
    test 587 geodesici.py:345: L{Intersect7Tuple}C{(A, B, sAB, aAB, c, kA, kB)}
    test 588 geodesici.py:347: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 589 geodesici.py:906: L{Intersector5Tuple}C{(A, B, sAB, aAB, c)}
    test 590 geodesici.py:977: L{Intersector5Tuple}C{(A, B, sAB, aAB, c)}
    test 591 geodesici.py:1136: L{Middle5Tuple}C{(A, B, sMM, aMM, c)}
    test 592 geodesici.py:1208: L{Intersector5Tuple}C{(A, B, sAB, aAB, c)}
    test 593 geodesici.py:1336: L{Intersector5Tuple}C{(A, B, sAB, aAB, c)}
    test 594 geodesici.py:1429: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing geodesicw.py (pygeodesy.named, 24.10.14)

    testing geodsolve.py (pygeodesy.named, 24.10.14)
    test 595 geodsolve.py:123: L{Destination3Tuple}C{(lat, lon, final)}
    test 596 geodsolve.py:171: L{Distance3Tuple}C{(distance, initial, final)}

    testing geohash.py (pygeodesy.named, 24.10.14)
    test 597 geohash.py:490: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 598 geohash.py:973: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 599 geohash.py:366: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 600 geohash.py:367: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 601 geohash.py:483: L{LatLon2Tuple}C{(lat, lon)}
    test 602 geohash.py:500: L{PhiLam2Tuple}C{(phi, lam)}
    test 603 geohash.py:513: L{Resolutions2Tuple}C{(res1, res2)}
    test 604 geohash.py:526: L{Sizes3Tuple}C{(height, width, radius)}
    test 605 geohash.py:541: L{LatLon2Tuple}C{(lat, lon)}
    test 606 geohash.py:782: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 607 geohash.py:783: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 608 geohash.py:825: L{LatLon2Tuple}C{(lat, lon)}
    test 609 geohash.py:850: L{LatLon2Tuple}C{(lat, lon)}
    test 610 geohash.py:1016: L{Resolutions2Tuple}C{(res1, res2)}
    test 611 geohash.py:1043: L{Sizes3Tuple}C{(height, width, radius)}

    testing geoids.py (pygeodesy.named, 24.10.14)
    test 612 geoids.py:303: L{LatLon3Tuple}C{(lat, lon, height)}
    test 613 geoids.py:416: L{LatLon3Tuple}C{(lat, lon, height)}
    test 614 geoids.py:481: L{LatLon3Tuple}C{(lat, lon, height)}
    test 615 geoids.py:499: L{LatLon3Tuple}C{(lat, lon, height)}
    test 616 geoids.py:519: L{LatLon3Tuple}C{(lat, lon, height)}
    test 617 geoids.py:665: L{LatLon3Tuple}C{(lat, lon, height)}
    test 618 geoids.py:683: L{LatLon3Tuple}C{(lat, lon, height)}
    test 619 geoids.py:1120: L{LatLon3Tuple}C{(lat, lon, height)}
    test 620 geoids.py:1177: L{LatLon3Tuple}C{(lat, lon, height)}
    test 621 geoids.py:1639: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 24.10.14)
    test 622 hausdorff.py:164: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 623 hausdorff.py:242: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 624 hausdorff.py:307: L{PhiLam2Tuple}C{(phi, lam)}
    test 625 hausdorff.py:787: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 24.10.14)

    testing internals.py (pygeodesy.named, 24.10.14)

    testing interns.py (pygeodesy.named, 24.10.14)

    testing iters.py (pygeodesy.named, 24.10.14)
    test 626 iters.py:375: L{Point3Tuple}C{(x, y, ll)}
    test 627 iters.py:495: L{Points2Tuple}C{(number, points)}

    testing karney.py (pygeodesy.named, 24.10.14)
    test 628 karney.py:418: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 629 karney.py:430: L{GeodSolve12Tuple}C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 630 karney.py:441: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 631 karney.py:465: L{Rhumb8Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 632 karney.py:475: L{RhumbSolve7Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 633 karney.py:603: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 634 karney.py:620: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}

    testing ktm.py (pygeodesy.named, 24.10.14)
    test 635 ktm.py:230: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 636 ktm.py:361: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}

    testing latlonBase.py (pygeodesy.named, 24.10.14)
    test 637 latlonBase.py:155: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 638 latlonBase.py:209: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 639 latlonBase.py:226: L{LatLon3Tuple}C{(lat, lon, height)}
    test 640 latlonBase.py:257: L{Circum3Tuple}C{(radius, center, deltas)}
    test 641 latlonBase.py:260: L{LatLon3Tuple}C{(lat, lon, height)}
    test 642 latlonBase.py:277: L{LatLon3Tuple}C{(lat, lon, height)}
    test 643 latlonBase.py:299: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 644 latlonBase.py:451: L{LatLon3Tuple}C{(lat, lon, height)}
    test 645 latlonBase.py:452: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 646 latlonBase.py:714: L{Vector4Tuple}C{(x, y, z, h)}
    test 647 latlonBase.py:876: L{LatLon2Tuple}C{(lat, lon)}
    test 648 latlonBase.py:915: L{LatLon2Tuple}C{(lat, lon)}
    test 649 latlonBase.py:933: L{LatLon3Tuple}C{(lat, lon, height)}
    test 650 latlonBase.py:985: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 651 latlonBase.py:1062: L{PhiLam2Tuple}C{(phi, lam)}
    test 652 latlonBase.py:1071: L{PhiLam2Tuple}C{(phi, lam)}
    test 653 latlonBase.py:1082: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 654 latlonBase.py:1099: L{Points2Tuple}C{(number, points)}
    test 655 latlonBase.py:1133: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 656 latlonBase.py:1401: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 657 latlonBase.py:1441: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 658 latlonBase.py:1465: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 659 latlonBase.py:1513: L{Vector4Tuple}C{(x, y, z, h)}
    test 660 latlonBase.py:1568: L{Vector3Tuple}C{(x, y, z)}
    test 661 latlonBase.py:1647: L{Vector3Tuple}C{(x, y, z)}
    test 662 latlonBase.py:1659: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 24.10.14)

    testing lcc.py (pygeodesy.named, 24.10.14)
    test 663 lcc.py:166: L{LatLon2Tuple}C{(lat, lon)}
    test 664 lcc.py:220: L{PhiLam2Tuple}C{(phi, lam)}
    test 665 lcc.py:481: L{LatLon3Tuple}C{(lat, lon, height)}
    test 666 lcc.py:487: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 667 lcc.py:506: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 668 lcc.py:512: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 669 lcc.py:523: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 670 lcc.py:550: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 671 lcc.py:628: L{EasNor3Tuple}C{(easting, northing, height)}

    testing ltp.py (pygeodesy.named, 24.10.14)
    test 672 ltp.py:158: L{Vector3Tuple}C{(x, y, z)}
    test 673 ltp.py:284: L{Footprint5Tuple}C{(center, upperleft, upperight, loweright, lowerleft)}
    test 674 ltp.py:477: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 675 ltp.py:517: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 676 ltp.py:549: L{LatLon3Tuple}C{(lat, lon, height)}
    test 677 ltp.py:561: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 678 ltp.py:637: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 679 ltp.py:746: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 680 ltp.py:768: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 681 ltp.py:883: L{ChLVEN2Tuple}C{(E_LV95, N_LV95)}
    test 682 ltp.py:884: L{ChLVyx2Tuple}C{(y_LV03, x_LV03)}
    test 683 ltp.py:885: L{ChLVYX2Tuple}C{(Y, X)}
    test 684 ltp.py:935: L{ChLVYX2Tuple}C{(Y, X)}
    test 685 ltp.py:1106: L{Vector3Tuple}C{(x, y, z)}

    testing ltpTuples.py (pygeodesy.named, 24.10.14)
    test 686 ltpTuples.py:134: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 687 ltpTuples.py:149: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 688 ltpTuples.py:164: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 689 ltpTuples.py:180: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 690 ltpTuples.py:188: L{Vector3Tuple}C{(x, y, z)}
    test 691 ltpTuples.py:822: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 692 ltpTuples.py:840: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 693 ltpTuples.py:864: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 694 ltpTuples.py:882: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 695 ltpTuples.py:902: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 696 ltpTuples.py:921: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 697 ltpTuples.py:937: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 698 ltpTuples.py:957: L{Vector3Tuple}C{(x, y, z)}
    test 699 ltpTuples.py:1050: L{Uvw3Tuple}C{(u, v, w)}
    test 700 ltpTuples.py:1144: L{LatLon2Tuple}C{(lat, lon)}
    test 701 ltpTuples.py:1150: L{LatLon3Tuple}C{(lat, lon, height)}
    test 702 ltpTuples.py:1168: L{PhiLam2Tuple}C{(phi, lam)}
    test 703 ltpTuples.py:1174: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 704 ltpTuples.py:1193: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 705 ltpTuples.py:1209: L{Vector4Tuple}C{(x, y, z, h)}
    test 706 ltpTuples.py:1224: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 707 ltpTuples.py:1240: L{LatLon3Tuple}C{(lat, lon, height)}
    test 708 ltpTuples.py:1241: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 709 ltpTuples.py:1257: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 710 ltpTuples.py:1272: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 711 ltpTuples.py:1286: L{Vector3Tuple}C{(x, y, z)}
    test 712 ltpTuples.py:1332: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 713 ltpTuples.py:1357: L{Uvw3Tuple}C{(u, v, w)}
    test 714 ltpTuples.py:1578: L{LatLon3Tuple}C{(lat, lon, height)}
    test 715 ltpTuples.py:1579: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing mgrs.py (pygeodesy.named, 24.10.14)
    test 716 mgrs.py:206: L{EasNor2Tuple}C{(easting, northing)}
    test 717 mgrs.py:291: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 718 mgrs.py:352: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 719 mgrs.py:370: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 720 mgrs.py:390: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 721 mgrs.py:464: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}
    test 722 mgrs.py:548: L{Mgrs4Tuple}C{(zone, EN, easting, northing)}
    test 723 mgrs.py:604: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 24.10.14)

    testing namedTuples.py (pygeodesy.named, 24.10.14)
    test 724 namedTuples.py:209: L{LatLon3Tuple}C{(lat, lon, height)}
    test 725 namedTuples.py:223: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 726 namedTuples.py:246: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 727 namedTuples.py:313: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 728 namedTuples.py:372: L{LatLon3Tuple}C{(lat, lon, height)}
    test 729 namedTuples.py:440: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 730 namedTuples.py:452: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 731 namedTuples.py:480: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 732 namedTuples.py:646: L{Vector3Tuple}C{(x, y, z)}
    test 733 namedTuples.py:667: L{Vector4Tuple}C{(x, y, z, h)}
    test 734 namedTuples.py:696: L{Vector3Tuple}C{(x, y, z)}

    testing nvectorBase.py (pygeodesy.named, 24.10.14)
    test 735 nvectorBase.py:160: L{LatLon2Tuple}C{(lat, lon)}
    test 736 nvectorBase.py:166: L{LatLon3Tuple}C{(lat, lon, height)}
    test 737 nvectorBase.py:172: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 738 nvectorBase.py:190: L{PhiLam2Tuple}C{(phi, lam)}
    test 739 nvectorBase.py:196: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 740 nvectorBase.py:202: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 741 nvectorBase.py:216: L{PhiLam2Tuple}C{(phi, lam)}
    test 742 nvectorBase.py:227: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 743 nvectorBase.py:245: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 744 nvectorBase.py:278: L{LatLon2Tuple}C{(lat, lon)}
    test 745 nvectorBase.py:289: L{LatLon3Tuple}C{(lat, lon, height)}
    test 746 nvectorBase.py:308: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 747 nvectorBase.py:371: L{Vector4Tuple}C{(x, y, z, h)}
    test 748 nvectorBase.py:446: L{Vector4Tuple}C{(x, y, z, h)}
    test 749 nvectorBase.py:516: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 750 nvectorBase.py:572: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 24.10.14)
    test 751 osgr.py:300: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 752 osgr.py:521: L{EasNor2Tuple}C{(easting, northing)}
    test 753 osgr.py:599: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 24.10.14)
    test 754 points.py:559: L{Shape2Tuple}C{(nrows, ncols)}
    test 755 points.py:761: L{Point3Tuple}C{(x, y, ll)}
    test 756 points.py:995: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 757 points.py:997: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 758 points.py:1037: L{LatLon2Tuple}C{(lat, lon)}
    test 759 points.py:1117: L{LatLon2Tuple}C{(lat, lon)}
    test 760 points.py:1484: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 761 points.py:1486: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing props.py (pygeodesy.named, 24.10.14)

    testing resections.py (pygeodesy.named, 24.10.14)
    test 762 resections.py:232: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 763 resections.py:542: L{Survey3Tuple}C{(PA, PB, PC)}
    test 764 resections.py:608: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 765 resections.py:730: L{TriAngle5Tuple}C{(radA, radB, radC, rIn, area)}
    test 766 resections.py:864: L{TriSide2Tuple}C{(a, radA)}
    test 767 resections.py:907: L{TriSide4Tuple}C{(a, b, radC, d)}
    test 768 resections.py:950: L{Survey3Tuple}C{(PA, PB, PC)}

    testing simplify.py (pygeodesy.named, 24.10.14)

    testing solveBase.py (pygeodesy.named, 24.10.14)

    testing sphericalBase.py (pygeodesy.named, 24.10.14)
    test 769 sphericalBase.py:151: L{Bearing2Tuple}C{(initial, final)}
    test 770 sphericalBase.py:579: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 24.10.14)
    test 771 sphericalNvector.py:82: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 772 sphericalNvector.py:98: L{Vector4Tuple}C{(x, y, z, h)}
    test 773 sphericalNvector.py:640: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 774 sphericalNvector.py:676: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 775 sphericalNvector.py:691: L{Vector4Tuple}C{(x, y, z, h)}
    test 776 sphericalNvector.py:730: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 777 sphericalNvector.py:747: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 778 sphericalNvector.py:878: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 779 sphericalNvector.py:909: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 780 sphericalNvector.py:1041: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 24.10.14)
    test 781 sphericalTrigonometry.py:77: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 782 sphericalTrigonometry.py:619: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 783 sphericalTrigonometry.py:650: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 784 sphericalTrigonometry.py:668: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 785 sphericalTrigonometry.py:669: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 786 sphericalTrigonometry.py:719: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 787 sphericalTrigonometry.py:1008: L{LatLon3Tuple}C{(lat, lon, height)}
    test 788 sphericalTrigonometry.py:1052: L{LatLon3Tuple}C{(lat, lon, height)}
    test 789 sphericalTrigonometry.py:1170: L{LatLon3Tuple}C{(lat, lon, height)}
    test 790 sphericalTrigonometry.py:1195: L{LatLon2Tuple}C{(lat, lon)}
    test 791 sphericalTrigonometry.py:1226: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 792 sphericalTrigonometry.py:1227: L{LatLon3Tuple}C{(lat, lon, height)}
    test 793 sphericalTrigonometry.py:1323: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 794 sphericalTrigonometry.py:1328: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 795 sphericalTrigonometry.py:1355: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}

    testing streprs.py (pygeodesy.named, 24.10.14)

    testing trf.py (pygeodesy.named, 24.10.14)
    test 796 trf.py:472: L{Vector3Tuple}C{(x, y, z)}
    test 797 trf.py:514: L{Vector3Tuple}C{(x, y, z)}

    testing triaxials.py (pygeodesy.named, 24.10.14)
    test 798 triaxials.py:104: L{BetaOmega2Tuple}C{(beta, omega)}
    test 799 triaxials.py:116: L{BetaOmega2Tuple}C{(beta, omega)}
    test 800 triaxials.py:137: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 801 triaxials.py:149: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 802 triaxials.py:174: L{Jacobi2Tuple}C{(x, y)}
    test 803 triaxials.py:185: L{Jacobi2Tuple}C{(x, y)}
    test 804 triaxials.py:392: L{Vector4Tuple}C{(x, y, z, h)}
    test 805 triaxials.py:690: L{Vector3Tuple}C{(x, y, z)}
    test 806 triaxials.py:725: L{Vector3Tuple}C{(x, y, z)}
    test 807 triaxials.py:763: L{Vector3Tuple}C{(x, y, z)}
    test 808 triaxials.py:781: L{Vector3Tuple}C{(x, y, z)}
    test 809 triaxials.py:853: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 810 triaxials.py:880: L{Vector3Tuple}C{(x, y, z)}
    test 811 triaxials.py:909: L{LatLon3Tuple}C{(lat, lon, height)}
    test 812 triaxials.py:987: L{Jacobi2Tuple}C{(x, y)}
    test 813 triaxials.py:1000: L{Jacobi2Tuple}C{(x, y)}
    test 814 triaxials.py:1014: L{Jacobi2Tuple}C{(x, y)}
    test 815 triaxials.py:1256: L{Vector4Tuple}C{(x, y, z, h)}

    testing units.py (pygeodesy.named, 24.10.14)

    testing unitsBase.py (pygeodesy.named, 24.10.14)

    testing ups.py (pygeodesy.named, 24.10.14)
    test 816 ups.py:148: L{EasNor2Tuple}C{(easting, northing)}
    test 817 ups.py:210: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 818 ups.py:356: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 819 ups.py:403: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 820 ups.py:478: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 24.10.14)
    test 821 utily.py:170: L{Circle4Tuple}C{(radius, height, lat, beta)}

    testing utm.py (pygeodesy.named, 24.10.14)
    test 822 utm.py:252: L{EasNor2Tuple}C{(easting, northing)}
    test 823 utm.py:306: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 824 utm.py:512: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 825 utm.py:542: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 826 utm.py:721: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 24.10.14)
    test 827 utmups.py:89: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 828 utmups.py:129: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 829 utmups.py:278: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 24.10.14)
    test 830 utmupsBase.py:153: L{EasNor2Tuple}C{(easting, northing)}
    test 831 utmupsBase.py:163: L{EasNor2Tuple}C{(easting, northing)}
    test 832 utmupsBase.py:274: L{EasNor2Tuple}C{(easting, northing)}

    testing vector2d.py (pygeodesy.named, 24.10.14)
    test 833 vector2d.py:143: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 834 vector2d.py:207: L{Circum3Tuple}C{(radius, center, deltas)}
    test 835 vector2d.py:257: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 836 vector2d.py:333: L{Meeus2Tuple}C{(radius, Type)}
    test 837 vector2d.py:500: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 838 vector2d.py:577: L{Soddy4Tuple}C{(radius, center, deltas, outer)}
    test 839 vector2d.py:610: L{Triaxum5Tuple}C{(a, b, c, rank, residuals)}
    test 840 vector2d.py:692: L{Vector2Tuple}C{(x, y)}

    testing vector3d.py (pygeodesy.named, 24.10.14)
    test 841 vector3d.py:74: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 842 vector3d.py:108: L{Circum3Tuple}C{(radius, center, deltas)}
    test 843 vector3d.py:134: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 844 vector3d.py:181: L{Meeus2Tuple}C{(radius, Type)}
    test 845 vector3d.py:227: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 846 vector3d.py:263: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 847 vector3d.py:290: L{Soddy4Tuple}C{(radius, center, deltas, outer)}
    test 848 vector3d.py:504: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 849 vector3d.py:730: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 850 vector3d.py:801: L{Vector3Tuple}C{(x, y, z)}
    test 851 vector3d.py:825: L{Vector3Tuple}C{(x, y, z)}

    testing vector3dBase.py (pygeodesy.named, 24.10.14)
    test 852 vector3dBase.py:905: L{PhiLam2Tuple}C{(phi, lam)}
    test 853 vector3dBase.py:913: L{LatLon2Tuple}C{(lat, lon)}
    test 854 vector3dBase.py:979: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 24.10.14)
    test 855 webmercator.py:120: L{LatLon2Tuple}C{(lat, lon)}
    test 856 webmercator.py:178: L{LatLon2Tuple}C{(lat, lon)}
    test 857 webmercator.py:287: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 858 webmercator.py:323: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 24.10.14)
    test 859 wgrs.py:220: L{LatLon3Tuple}C{(lat, lon, height)}
    test 860 wgrs.py:238: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 861 wgrs.py:291: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing auxilats._CX_4.py (pygeodesy.named, 24.10.14)

    testing auxilats._CX_6.py (pygeodesy.named, 24.10.14)

    testing auxilats._CX_8.py (pygeodesy.named, 24.10.14)

    testing auxilats._CX_Rs.py (pygeodesy.named, 24.10.14)

    testing auxilats.__init__.py (pygeodesy.named, 24.10.14)

    testing auxilats.__main__.py (pygeodesy.named, 24.10.14)

    testing auxilats.auxAngle.py (pygeodesy.named, 24.10.14)

    testing auxilats.auxDLat.py (pygeodesy.named, 24.10.14)

    testing auxilats.auxDST.py (pygeodesy.named, 24.10.14)

    testing auxilats.auxLat.py (pygeodesy.named, 24.10.14)

    testing auxilats.auxily.py (pygeodesy.named, 24.10.14)

    testing deprecated.__init__.py (pygeodesy.named, 24.10.14)

    testing deprecated.bases.py (pygeodesy.named, 24.10.14)

    testing deprecated.classes.py (pygeodesy.named, 24.10.14)
    test 862 deprecated.classes.py:74: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 863 deprecated.classes.py:88: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}

    testing deprecated.consterns.py (pygeodesy.named, 24.10.14)

    testing deprecated.datum.py (pygeodesy.named, 24.10.14)

    testing deprecated.functions.py (pygeodesy.named, 24.10.14)
    test 864 deprecated.functions.py:54: L{ClipCS3Tuple}C{(start, end, index)}  FAILED, KNOWN, expected DEPRECATED
    test 865 deprecated.functions.py:340: L{TriAngle4Tuple}C{(radA, radB, radC, rIn)}  FAILED, KNOWN, expected DEPRECATED

    testing deprecated.nvector.py (pygeodesy.named, 24.10.14)

    testing deprecated.rhumbBase.py (pygeodesy.named, 24.10.14)

    testing deprecated.rhumbaux.py (pygeodesy.named, 24.10.14)

    testing deprecated.rhumbsolve.py (pygeodesy.named, 24.10.14)

    testing deprecated.rhumbx.py (pygeodesy.named, 24.10.14)

    testing geodesicx._C4_24.py (pygeodesy.named, 24.10.14)

    testing geodesicx._C4_27.py (pygeodesy.named, 24.10.14)

    testing geodesicx._C4_30.py (pygeodesy.named, 24.10.14)

    testing geodesicx.__init__.py (pygeodesy.named, 24.10.14)

    testing geodesicx.__main__.py (pygeodesy.named, 24.10.14)

    testing geodesicx.gx.py (pygeodesy.named, 24.10.14)
    test 866 geodesicx.gx.py:359: L{Destination3Tuple}C{(lat, lon, final)}
    test 867 geodesicx.gx.py:707: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 868 geodesicx.gx.py:716: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 869 geodesicx.gx.py:770: L{Distance3Tuple}C{(distance, initial, final)}

    testing geodesicx.gxarea.py (pygeodesy.named, 24.10.14)
    test 870 geodesicx.gxarea.py:161: L{Area3Tuple}C{(number, perimeter, area)}
    test 871 geodesicx.gxarea.py:329: L{Area3Tuple}C{(number, perimeter, area)}
    test 872 geodesicx.gxarea.py:361: L{Area3Tuple}C{(number, perimeter, area)}

    testing geodesicx.gxbases.py (pygeodesy.named, 24.10.14)

    testing geodesicx.gxline.py (pygeodesy.named, 24.10.14)
    test 873 geodesicx.gxline.py:453: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}

    testing rhumb.__init__.py (pygeodesy.named, 24.10.14)

    testing rhumb.aux_.py (pygeodesy.named, 24.10.14)

    testing rhumb.bases.py (pygeodesy.named, 24.10.14)
    test 874 rhumb.bases.py:587: L{Distance2Tuple}C{(distance, initial)}
    test 875 rhumb.bases.py:781: L{LatLon2Tuple}C{(lat, lon)}

    testing rhumb.ekx.py (pygeodesy.named, 24.10.14)
    test 876 rhumb.ekx.py:202: L{RhumbOrder2Tuple}C{(RAorder, TMorder)}  FAILED, KNOWN, expected DEPRECATED

    testing rhumb.solve.py (pygeodesy.named, 24.10.14)
    test 877 rhumb.solve.py:130: L{Destination3Tuple}C{(lat, lon, final)}
    test 878 rhumb.solve.py:194: L{Distance3Tuple}C{(distance, initial, final)}

    testing xtend (pygeodesy.namedTuples, 24.08.18)
    test 879 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 880 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 881 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 882 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 883 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 884 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 885 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 886 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 887 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 888 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 24.10.14)
    test 889 nd.dict: test(1=1, 2=2)
    test 890 nd.name: test
    test 891 nd.dict: test(1=1, 2=2)
    test 892 nd.name: test
    test 893 nd.kwds: test(one=1, two=2)
    test 894 nd.name: test
    test 895 nd.dict: test(1=1, 2=2)
    test 896 nd.name: test
    test 897 nd.list: test(1=1, 2=2)
    test 898 nd.name: test
    test 899 nd.updated: test(1=1, 2=2, name='kwds')
    test 900 nd.name: test

    testing coverage (pygeodesy.named, 24.10.14)
{E: 'E', N: 'N', NE: 'NE', NW: 'NW', S: 'S', SE: 'SE', SW: 'SW', W: 'W'}
    test 901 nd.name: name
    test 902 nd.named: name
    test 903 nd.named: Neighbors8Dict
    test 904 nd.name: test
    test 905 nd.test: test
    test 906 nd.test: None
    test 907 nd.classnaming: False
    test 908 nd.classname: Neighbors8Dict
    test 909 nd.named2: Neighbors8Dict 'test'
    test 910 nd.classnaming: True
    test 911 nd.classname: geohash.Neighbors8Dict
    test 912 nd.named2: geohash.Neighbors8Dict 'test'
    test 913 delattr: None
    test 914 classnaming: False
    test 915 classnaming: True

    testing unregister (pygeodesy.named, 24.10.14)
# lazily imported pygeodesy.Conics from .lcc by testNamed.py line 192
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testNamed.py line 192
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testNamed.py line 192
# lazily imported pygeodesy.RefFrames from .trf by testNamed.py line 192
# lazily imported pygeodesy.Transforms from .datums by testNamed.py line 192
    test 916 Conics: 1
    test 917 Conics: 8
    test 918 Conics.Be08Lb.unregister: None
    test 919 Conics.Be72Lb.unregister: None
    test 920 Conics.Fr93Lb.unregister: None
    test 921 Conics.MaNLb.unregister: None
    test 922 Conics.MxLb.unregister: None
    test 923 Conics.PyT_Lb.unregister: None
    test 924 Conics.USA_Lb.unregister: None
    test 925 Conics.WRF_Lb.unregister: None
    test 926 Conics: 0

    test 927 Datums: 6
    test 928 Datums: 18
    test 929 Datums.unregister(BD72): None
    test 930 Datums.unregister(DHDN): None
    test 931 Datums.unregister(ED50): None
    test 932 Datums.unregister(GDA2020): None
    test 933 Datums.unregister(GRS80): None
    test 934 Datums.unregister(Irl1975): None
    test 935 Datums.unregister(Krassovski1940): None
    test 936 Datums.unregister(Krassowsky1940): None
    test 937 Datums.unregister(MGI): None
    test 938 Datums.unregister(NAD27): None
    test 939 Datums.unregister(NAD83): None
    test 940 Datums.unregister(NTF): None
    test 941 Datums.unregister(OSGB36): None
    test 942 Datums.unregister(Potsdam): None
    test 943 Datums.unregister(Sphere): None
    test 944 Datums.unregister(TokyoJapan): None
    test 945 Datums.unregister(WGS72): None
    test 946 Datums.unregister(WGS84): None
    test 947 Datums: 0

    test 948 RefFrames: 32  FAILED, KNOWN, expected 0
    test 949 RefFrames: 36
    test 950 RefFrames.ETRF2000.unregister: None
    test 951 RefFrames.ETRF2005.unregister: None
    test 952 RefFrames.ETRF2008.unregister: None
    test 953 RefFrames.ETRF2014.unregister: None
    test 954 RefFrames.ETRF2020.unregister: None
    test 955 RefFrames.ETRF88.unregister: None
    test 956 RefFrames.ETRF89.unregister: None
    test 957 RefFrames.ETRF90.unregister: None
    test 958 RefFrames.ETRF91.unregister: None
    test 959 RefFrames.ETRF92.unregister: None
    test 960 RefFrames.ETRF93.unregister: None
    test 961 RefFrames.ETRF94.unregister: None
    test 962 RefFrames.ETRF96.unregister: None
    test 963 RefFrames.ETRF97.unregister: None
    test 964 RefFrames.GDA2020.unregister: None
    test 965 RefFrames.GDA94.unregister: None
    test 966 RefFrames.ITRF2000.unregister: None
    test 967 RefFrames.ITRF2005.unregister: None
    test 968 RefFrames.ITRF2008.unregister: None
    test 969 RefFrames.ITRF2014.unregister: None
    test 970 RefFrames.ITRF2020.unregister: None
    test 971 RefFrames.ITRF88.unregister: None
    test 972 RefFrames.ITRF89.unregister: None
    test 973 RefFrames.ITRF90.unregister: None
    test 974 RefFrames.ITRF91.unregister: None
    test 975 RefFrames.ITRF92.unregister: None
    test 976 RefFrames.ITRF93.unregister: None
    test 977 RefFrames.ITRF94.unregister: None
    test 978 RefFrames.ITRF96.unregister: None
    test 979 RefFrames.ITRF97.unregister: None
    test 980 RefFrames.NAD83.unregister: None
    test 981 RefFrames.NAD83cors96.unregister: None
    test 982 RefFrames.WGS84.unregister: None
    test 983 RefFrames.WGS84g1150.unregister: None
    test 984 RefFrames.WGS84g1674.unregister: None
    test 985 RefFrames.WGS84g1762.unregister: None
    test 986 RefFrames: 0

    test 987 Ellipsoids: 12
    test 988 Ellipsoids: 49
    test 989 Ellipsoids.Airy1830.unregister: None
    test 990 Ellipsoids.AiryModified.unregister: None
    test 991 Ellipsoids.ATS1977.unregister: None
    test 992 Ellipsoids.Australia1966.unregister: None
    test 993 Ellipsoids.Bessel1841.unregister: None
    test 994 Ellipsoids.BesselModified.unregister: None
    test 995 Ellipsoids.CGCS2000.unregister: None
    test 996 Ellipsoids.Clarke1866.unregister: None
    test 997 Ellipsoids.Clarke1880.unregister: None
    test 998 Ellipsoids.Clarke1880IGN.unregister: None
    test 999 Ellipsoids.Clarke1880Mod.unregister: None
    test 1000 Ellipsoids.CPM1799.unregister: None
    test 1001 Ellipsoids.Delambre1810.unregister: None
    test 1002 Ellipsoids.Engelis1985.unregister: None
    test 1003 Ellipsoids.Everest1969.unregister: None
    test 1004 Ellipsoids.Everest1975.unregister: None
    test 1005 Ellipsoids.Fisher1968.unregister: None
    test 1006 Ellipsoids.GEM10C.unregister: None
    test 1007 Ellipsoids.GPES.unregister: None
    test 1008 Ellipsoids.GRS67.unregister: None
    test 1009 Ellipsoids.GRS80.unregister: None
    test 1010 Ellipsoids.Helmert1906.unregister: None
    test 1011 Ellipsoids.IAU76.unregister: None
    test 1012 Ellipsoids.IERS1989.unregister: None
    test 1013 Ellipsoids.IERS1992TOPEX.unregister: None
    test 1014 Ellipsoids.IERS2003.unregister: None
    test 1015 Ellipsoids.Intl1924.unregister: None
    test 1016 Ellipsoids.Intl1967.unregister: None
    test 1017 Ellipsoids.Krassovski1940.unregister: None
    test 1018 Ellipsoids.Krassowsky1940.unregister: None
    test 1019 Ellipsoids.Maupertuis1738.unregister: None
    test 1020 Ellipsoids.Mercury1960.unregister: None
    test 1021 Ellipsoids.Mercury1968Mod.unregister: None
    test 1022 Ellipsoids.NWL1965.unregister: None
    test 1023 Ellipsoids.OSU86F.unregister: None
    test 1024 Ellipsoids.OSU91A.unregister: None
    test 1025 Ellipsoids.Plessis1817.unregister: None
    test 1026 Ellipsoids.PZ90.unregister: None
    test 1027 Ellipsoids.SGS85.unregister: None
    test 1028 Ellipsoids.SoAmerican1969.unregister: None
    test 1029 Ellipsoids.Sphere.unregister: None
    test 1030 Ellipsoids.SphereAuthalic.unregister: None
    test 1031 Ellipsoids.SpherePopular.unregister: None
    test 1032 Ellipsoids.Struve1860.unregister: None
    test 1033 Ellipsoids.WGS60.unregister: None
    test 1034 Ellipsoids.WGS66.unregister: None
    test 1035 Ellipsoids.WGS72.unregister: None
    test 1036 Ellipsoids.WGS84.unregister: None
    test 1037 Ellipsoids.WGS84_NGS.unregister: None
    test 1038 Ellipsoids: 0

    test 1039 Transforms: 16
    test 1040 Transforms: 20
    test 1041 Transforms.BD72.unregister: None
    test 1042 Transforms.Bessel1841.unregister: None
    test 1043 Transforms.Clarke1866.unregister: None
    test 1044 Transforms.DHDN.unregister: None
    test 1045 Transforms.DHDNE.unregister: None
    test 1046 Transforms.DHDNW.unregister: None
    test 1047 Transforms.ED50.unregister: None
    test 1048 Transforms.Identity.unregister: None
    test 1049 Transforms.Irl1965.unregister: None
    test 1050 Transforms.Irl1975.unregister: None
    test 1051 Transforms.Krassovski1940.unregister: None
    test 1052 Transforms.Krassowsky1940.unregister: None
    test 1053 Transforms.MGI.unregister: None
    test 1054 Transforms.NAD27.unregister: None
    test 1055 Transforms.NAD83.unregister: None
    test 1056 Transforms.NTF.unregister: None
    test 1057 Transforms.OSGB36.unregister: None
    test 1058 Transforms.TokyoJapan.unregister: None
    test 1059 Transforms.WGS72.unregister: None
    test 1060 Transforms.WGS84.unregister: None
    test 1061 Transforms: 0

    test 1062 nameof: KsOrder

    10 of 1062 testNamed.py tests (0.9%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 134.951 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testNamedTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.FIx from .units by testNamedTuples.py line 10

    testing testNamedTuples.py 24.06.08 isLazy=3
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Pass, datum=_Pass)
    test 3 pygeodesy.albers.Albers7Tuple.x: 0.5
    test 4 pygeodesy.albers.Albers7Tuple.y: 0.5
    test 5 pygeodesy.albers.Albers7Tuple.lat: 0.5
    test 6 pygeodesy.albers.Albers7Tuple.lon: 0.5
    test 7 pygeodesy.albers.Albers7Tuple.gamma: 0.5
    test 8 pygeodesy.albers.Albers7Tuple.scale: 0.5
    test 9 pygeodesy.albers.Albers7Tuple.datum: 0.5
    test 10 pygeodesy.albers.Albers7Tuple._validated: True
    test 11 pygeodesy.albers.Albers7Tuple._validated: True
# lazily imported pygeodesy.azimuthal by bases.py line 198
    test 12 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 13 pygeodesy.azimuthal: Azimuthal7Tuple(x=Easting, y=Northing, lat=Lat_, lon=Lon_, azimuth=Azimuth, scale=Scalar, datum=_Pass)
    test 14 pygeodesy.azimuthal.Azimuthal7Tuple.x: 0.5
    test 15 pygeodesy.azimuthal.Azimuthal7Tuple.y: 0.5
    test 16 pygeodesy.azimuthal.Azimuthal7Tuple.lat: 0.5
    test 17 pygeodesy.azimuthal.Azimuthal7Tuple.lon: 0.5
    test 18 pygeodesy.azimuthal.Azimuthal7Tuple.azimuth: 0.5
    test 19 pygeodesy.azimuthal.Azimuthal7Tuple.scale: 0.5
    test 20 pygeodesy.azimuthal.Azimuthal7Tuple.datum: 0.5
    test 21 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
    test 22 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
# lazily imported pygeodesy.booleans by bases.py line 198
    test 23 pygeodesy.cartesianBase: RadiusThetaPhi3Tuple(r=0.5, theta=0.5, phi=0.5)
    test 24 pygeodesy.cartesianBase: RadiusThetaPhi3Tuple(r=Meter, theta=_Pass, phi=_Pass)
    test 25 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.r: 0.5
    test 26 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.theta: 0.5
    test 27 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple.phi: 0.5
    test 28 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple._validated: True
    test 29 pygeodesy.cartesianBase.RadiusThetaPhi3Tuple._validated: True
# lazily imported pygeodesy.clipy by bases.py line 198
    test 30 pygeodesy.clipy: ClipCS4Tuple(start=0.5, end=0.5, i=0, j=0)
    test 31 pygeodesy.clipy: ClipCS4Tuple(start=_Pass, end=_Pass, i=Number_, j=Number_)
    test 32 pygeodesy.clipy.ClipCS4Tuple.start: 0.5
    test 33 pygeodesy.clipy.ClipCS4Tuple.end: 0.5
    test 34 pygeodesy.clipy.ClipCS4Tuple.i: 0.5
    test 35 pygeodesy.clipy.ClipCS4Tuple.j: 0.5
    test 36 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 37 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 38 pygeodesy.clipy: ClipFHP4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 39 pygeodesy.clipy: ClipFHP4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 40 pygeodesy.clipy.ClipFHP4Tuple.lat: 0.5
    test 41 pygeodesy.clipy.ClipFHP4Tuple.lon: 0.5
    test 42 pygeodesy.clipy.ClipFHP4Tuple.height: 0.5
    test 43 pygeodesy.clipy.ClipFHP4Tuple.clipid: 0.5
    test 44 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 45 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 46 pygeodesy.clipy: ClipGH4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 47 pygeodesy.clipy: ClipGH4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 48 pygeodesy.clipy.ClipGH4Tuple.lat: 0.5
    test 49 pygeodesy.clipy.ClipGH4Tuple.lon: 0.5
    test 50 pygeodesy.clipy.ClipGH4Tuple.height: 0.5
    test 51 pygeodesy.clipy.ClipGH4Tuple.clipid: 0.5
    test 52 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 53 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 54 pygeodesy.clipy: ClipLB6Tuple(start=0.5, end=0.5, i=0, fi=0.5, fj=0.5, j=0)
    test 55 pygeodesy.clipy: ClipLB6Tuple(start=_Pass, end=_Pass, i=Number_, fi=_Pass, fj=_Pass, j=Number_)
    test 56 pygeodesy.clipy.ClipLB6Tuple.start: 0.5
    test 57 pygeodesy.clipy.ClipLB6Tuple.end: 0.5
    test 58 pygeodesy.clipy.ClipLB6Tuple.i: 0.5
    test 59 pygeodesy.clipy.ClipLB6Tuple.fi: 0.5
    test 60 pygeodesy.clipy.ClipLB6Tuple.fj: 0.5
    test 61 pygeodesy.clipy.ClipLB6Tuple.j: 0.5
    test 62 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 63 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 64 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 65 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 66 pygeodesy.clipy.ClipSH3Tuple.start: 0.5
    test 67 pygeodesy.clipy.ClipSH3Tuple.end: 0.5
    test 68 pygeodesy.clipy.ClipSH3Tuple.original: 0.5
    test 69 pygeodesy.clipy.ClipSH3Tuple._validated: True
    test 70 pygeodesy.clipy.ClipSH3Tuple._validated: True
# lazily imported pygeodesy.css by bases.py line 198
    test 71 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 72 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Azimuth, reciprocal=Scalar)
    test 73 pygeodesy.css.EasNorAziRk4Tuple.easting: 0.5
    test 74 pygeodesy.css.EasNorAziRk4Tuple.northing: 0.5
    test 75 pygeodesy.css.EasNorAziRk4Tuple.azimuth: 0.5
    test 76 pygeodesy.css.EasNorAziRk4Tuple.reciprocal: 0.5
    test 77 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 78 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 79 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5, equatorarc=0.5, equatorazimuth=0.5)
    test 80 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=Easting, northing=Northing, azimuth=Azimuth, reciprocal=Scalar, equatorarc=Degrees, equatorazimuth=Azimuth)
    test 81 pygeodesy.css.EasNorAziRkEqu6Tuple.easting: 0.5
    test 82 pygeodesy.css.EasNorAziRkEqu6Tuple.northing: 0.5
    test 83 pygeodesy.css.EasNorAziRkEqu6Tuple.azimuth: 0.5
    test 84 pygeodesy.css.EasNorAziRkEqu6Tuple.reciprocal: 0.5
    test 85 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorarc: 0.5
    test 86 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorazimuth: 0.5
    test 87 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 88 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 89 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 90 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Azimuth, reciprocal=Scalar)
    test 91 pygeodesy.css.LatLonAziRk4Tuple.lat: 0.5
    test 92 pygeodesy.css.LatLonAziRk4Tuple.lon: 0.5
    test 93 pygeodesy.css.LatLonAziRk4Tuple.azimuth: 0.5
    test 94 pygeodesy.css.LatLonAziRk4Tuple.reciprocal: 0.5
    test 95 pygeodesy.css.LatLonAziRk4Tuple._validated: True
    test 96 pygeodesy.css.LatLonAziRk4Tuple._validated: True
# lazily imported pygeodesy.ecef by bases.py line 198
    test 97 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 98 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 99 pygeodesy.ecef.Ecef9Tuple.x: 0.5
    test 100 pygeodesy.ecef.Ecef9Tuple.y: 0.5
    test 101 pygeodesy.ecef.Ecef9Tuple.z: 0.5
    test 102 pygeodesy.ecef.Ecef9Tuple.lat: 0.5
    test 103 pygeodesy.ecef.Ecef9Tuple.lon: 0.5
    test 104 pygeodesy.ecef.Ecef9Tuple.height: 0.5
    test 105 pygeodesy.ecef.Ecef9Tuple.C: 0.5
    test 106 pygeodesy.ecef.Ecef9Tuple.M: 0.5
    test 107 pygeodesy.ecef.Ecef9Tuple.datum: 0.5
    test 108 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 109 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 110 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 111 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 112 pygeodesy.ecef.EcefMatrix._0_0_: 0.5
    test 113 pygeodesy.ecef.EcefMatrix._0_1_: 0.5
    test 114 pygeodesy.ecef.EcefMatrix._0_2_: 0.5
    test 115 pygeodesy.ecef.EcefMatrix._1_0_: 0.5
    test 116 pygeodesy.ecef.EcefMatrix._1_1_: 0.5
    test 117 pygeodesy.ecef.EcefMatrix._1_2_: 0.5
    test 118 pygeodesy.ecef.EcefMatrix._2_0_: 0.5
    test 119 pygeodesy.ecef.EcefMatrix._2_1_: 0.5
    test 120 pygeodesy.ecef.EcefMatrix._2_2_: 0.5
    test 121 pygeodesy.ecef.EcefMatrix._validated: True
    test 122 pygeodesy.ecef.EcefMatrix._validated: True
# lazily imported pygeodesy.elevations by bases.py line 198
    test 123 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 124 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 125 pygeodesy.elevations.Elevation2Tuple.elevation: 0.5
    test 126 pygeodesy.elevations.Elevation2Tuple.data_source: 0.5
    test 127 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 128 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 129 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 130 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 131 pygeodesy.elevations.GeoidHeight2Tuple.height: 0.5
    test 132 pygeodesy.elevations.GeoidHeight2Tuple.model_name: 0.5
    test 133 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
    test 134 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 198
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 198
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 198
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 198
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 198
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 198
    test 135 pygeodesy.ellipsoids: Circle4Tuple(radius=0.5, height=0.5, lat=0.5, beta=0.5)
    test 136 pygeodesy.ellipsoids: Circle4Tuple(radius=Radius, height=Height, lat=Lat, beta=Lat)
    test 137 pygeodesy.ellipsoids.Circle4Tuple.radius: 0.5
    test 138 pygeodesy.ellipsoids.Circle4Tuple.height: 0.5
    test 139 pygeodesy.ellipsoids.Circle4Tuple.lat: 0.5
    test 140 pygeodesy.ellipsoids.Circle4Tuple.beta: 0.5
    test 141 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 142 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 143 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 144 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 145 pygeodesy.ellipsoids.Curvature2Tuple.meridional: 0.5
    test 146 pygeodesy.ellipsoids.Curvature2Tuple.prime_vertical: 0.5
    test 147 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 148 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 149 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 150 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 151 pygeodesy.ellipsoids.a_f2Tuple.a: 0.5
    test 152 pygeodesy.ellipsoids.a_f2Tuple.f: 0.5
    test 153 pygeodesy.ellipsoids.a_f2Tuple._validated: True
    test 154 pygeodesy.ellipsoids.a_f2Tuple._validated: True
# lazily imported pygeodesy.elliptic by bases.py line 198
    test 155 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 156 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 157 pygeodesy.elliptic.Elliptic3Tuple.sn: 0.5
    test 158 pygeodesy.elliptic.Elliptic3Tuple.cn: 0.5
    test 159 pygeodesy.elliptic.Elliptic3Tuple.dn: 0.5
    test 160 pygeodesy.elliptic.Elliptic3Tuple._validated: True
    test 161 pygeodesy.elliptic.Elliptic3Tuple._validated: True
# lazily imported pygeodesy.epsg by bases.py line 198
# lazily imported pygeodesy.etm by bases.py line 198
    test 162 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 163 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 164 pygeodesy.formy.Radical2Tuple.ratio: 0.5
    test 165 pygeodesy.formy.Radical2Tuple.xline: 0.5
    test 166 pygeodesy.formy.Radical2Tuple._validated: True
    test 167 pygeodesy.formy.Radical2Tuple._validated: True
    test 168 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 169 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=FIx, fi2=FIx, r=Number_, n=Number_, units=_Pass)
    test 170 pygeodesy.frechet.Frechet6Tuple.fd: 0.5
    test 171 pygeodesy.frechet.Frechet6Tuple.fi1: 0.5
    test 172 pygeodesy.frechet.Frechet6Tuple.fi2: 0.5
    test 173 pygeodesy.frechet.Frechet6Tuple.r: 0.5
    test 174 pygeodesy.frechet.Frechet6Tuple.n: 0.5
    test 175 pygeodesy.frechet.Frechet6Tuple.units: <bound method _NamedTuple.units of Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0.5, n=0.5, units='test')>
    test 176 pygeodesy.frechet.Frechet6Tuple._validated: True
    test 177 pygeodesy.frechet.Frechet6Tuple._validated: True
# lazily imported pygeodesy.fstats by bases.py line 198
    test 178 pygeodesy.fsums: Fsum2Tuple(fsum=0.5, residual=0.5)
    test 179 pygeodesy.fsums: Fsum2Tuple(fsum=_Float_Int, residual=_Float_Int)
    test 180 pygeodesy.fsums.Fsum2Tuple.fsum: 0.5
    test 181 pygeodesy.fsums.Fsum2Tuple.residual: 0.5
    test 182 pygeodesy.fsums.Fsum2Tuple._validated: True
    test 183 pygeodesy.fsums.Fsum2Tuple._validated: True
# lazily imported pygeodesy.gars by bases.py line 198
# lazily imported pygeodesy.geodesici by bases.py line 198
    test 184 pygeodesy.geodesici: Intersect7Tuple(A=0.5, B=0.5, sAB=0.5, aAB=0.5, c=0, kA=0, kB=0)
    test 185 pygeodesy.geodesici: Intersect7Tuple(A=_Pass, B=_Pass, sAB=Meter, aAB=Degrees, c=Int, kA=Int, kB=Int)
    test 186 pygeodesy.geodesici.Intersect7Tuple.A: 0.5
    test 187 pygeodesy.geodesici.Intersect7Tuple.B: 0.5
    test 188 pygeodesy.geodesici.Intersect7Tuple.sAB: 0.5
    test 189 pygeodesy.geodesici.Intersect7Tuple.aAB: 0.5
    test 190 pygeodesy.geodesici.Intersect7Tuple.c: 0.5
    test 191 pygeodesy.geodesici.Intersect7Tuple.kA: 0.5
    test 192 pygeodesy.geodesici.Intersect7Tuple.kB: 0.5
    test 193 pygeodesy.geodesici.Intersect7Tuple._validated: True
    test 194 pygeodesy.geodesici.Intersect7Tuple._validated: True
    test 195 pygeodesy.geodesici: Intersectool5Tuple(A=0.5, B=0.5, sAB=0.5, aAB=0.5, c=0)
    test 196 pygeodesy.geodesici: Intersectool5Tuple(A=_Pass, B=_Pass, sAB=Meter, aAB=Degrees, c=Int)
    test 197 pygeodesy.geodesici.Intersectool5Tuple.A: 0.5
    test 198 pygeodesy.geodesici.Intersectool5Tuple.B: 0.5
    test 199 pygeodesy.geodesici.Intersectool5Tuple.sAB: 0.5
    test 200 pygeodesy.geodesici.Intersectool5Tuple.aAB: 0.5
    test 201 pygeodesy.geodesici.Intersectool5Tuple.c: 0.5
    test 202 pygeodesy.geodesici.Intersectool5Tuple._validated: True
    test 203 pygeodesy.geodesici.Intersectool5Tuple._validated: True
    test 204 pygeodesy.geodesici: Intersector5Tuple(A=0.5, B=0.5, sAB=0.5, aAB=0.5, c=0)
    test 205 pygeodesy.geodesici: Intersector5Tuple(A=_Pass, B=_Pass, sAB=Meter, aAB=Degrees, c=Int)
    test 206 pygeodesy.geodesici.Intersector5Tuple.A: 0.5
    test 207 pygeodesy.geodesici.Intersector5Tuple.B: 0.5
    test 208 pygeodesy.geodesici.Intersector5Tuple.sAB: 0.5
    test 209 pygeodesy.geodesici.Intersector5Tuple.aAB: 0.5
    test 210 pygeodesy.geodesici.Intersector5Tuple.c: 0.5
    test 211 pygeodesy.geodesici.Intersector5Tuple._validated: True
    test 212 pygeodesy.geodesici.Intersector5Tuple._validated: True
    test 213 pygeodesy.geodesici: Middle5Tuple(A=0.5, B=0.5, sMM=0.5, aMM=0.5, c=0)
    test 214 pygeodesy.geodesici: Middle5Tuple(A=_Pass, B=_Pass, sMM=Meter, aMM=Degrees, c=Int)
    test 215 pygeodesy.geodesici.Middle5Tuple.A: 0.5
    test 216 pygeodesy.geodesici.Middle5Tuple.B: 0.5
    test 217 pygeodesy.geodesici.Middle5Tuple.sMM: 0.5
    test 218 pygeodesy.geodesici.Middle5Tuple.aMM: 0.5
    test 219 pygeodesy.geodesici.Middle5Tuple.c: 0.5
    test 220 pygeodesy.geodesici.Middle5Tuple._validated: True
    test 221 pygeodesy.geodesici.Middle5Tuple._validated: True
# lazily imported pygeodesy.geodesicw by bases.py line 198
# lazily imported pygeodesy.geodsolve by bases.py line 198
# lazily imported pygeodesy.geohash by bases.py line 198
    test 222 pygeodesy.geohash: Resolutions2Tuple(res1=0.5, res2=0.5)
    test 223 pygeodesy.geohash: Resolutions2Tuple(res1=Degrees_, res2=Degrees_)
    test 224 pygeodesy.geohash.Resolutions2Tuple.res1: 0.5
    test 225 pygeodesy.geohash.Resolutions2Tuple.res2: 0.5
    test 226 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 227 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 228 pygeodesy.geohash: Sizes3Tuple(height=0.5, width=0.5, radius=0.5)
    test 229 pygeodesy.geohash: Sizes3Tuple(height=Meter, width=Meter, radius=Meter)
    test 230 pygeodesy.geohash.Sizes3Tuple.height: 0.5
    test 231 pygeodesy.geohash.Sizes3Tuple.width: 0.5
    test 232 pygeodesy.geohash.Sizes3Tuple.radius: 0.5
    test 233 pygeodesy.geohash.Sizes3Tuple._validated: True
    test 234 pygeodesy.geohash.Sizes3Tuple._validated: True
# lazily imported pygeodesy.geoids by bases.py line 198
    test 235 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 236 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 237 pygeodesy.geoids.GeoidHeight5Tuple.lat: 0.5
    test 238 pygeodesy.geoids.GeoidHeight5Tuple.lon: 0.5
    test 239 pygeodesy.geoids.GeoidHeight5Tuple.egm84: 0.5
    test 240 pygeodesy.geoids.GeoidHeight5Tuple.egm96: 0.5
    test 241 pygeodesy.geoids.GeoidHeight5Tuple.egm2008: 0.5
    test 242 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 243 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 244 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 245 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 246 pygeodesy.hausdorff.Hausdorff6Tuple.hd: 0.5
    test 247 pygeodesy.hausdorff.Hausdorff6Tuple.i: 0.5
    test 248 pygeodesy.hausdorff.Hausdorff6Tuple.j: 0.5
    test 249 pygeodesy.hausdorff.Hausdorff6Tuple.mn: 0.5
    test 250 pygeodesy.hausdorff.Hausdorff6Tuple.md: 0.5
    test 251 pygeodesy.hausdorff.Hausdorff6Tuple.units: <bound method _NamedTuple.units of Hausdorff6Tuple(hd=0.5, i=0.5, j=0.5, mn=0.5, md=0.5, units='test')>
    test 252 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 253 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 254 pygeodesy.karney: Area3Tuple(number=0, perimeter=0.5, area=0.5)
    test 255 pygeodesy.karney: Area3Tuple(number=Number_, perimeter=Meter, area=Meter2)
    test 256 pygeodesy.karney.Area3Tuple.number: 0.5
    test 257 pygeodesy.karney.Area3Tuple.perimeter: 0.5
    test 258 pygeodesy.karney.Area3Tuple.area: 0.5
    test 259 pygeodesy.karney.Area3Tuple._validated: True
    test 260 pygeodesy.karney.Area3Tuple._validated: True
    test 261 pygeodesy.karney: Direct9Tuple(a12=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 262 pygeodesy.karney: Direct9Tuple(a12=Azimuth, lat2=_Lat, lon2=_Lon, azi2=Azimuth, s12=Meter, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 263 pygeodesy.karney.Direct9Tuple.a12: 0.5
    test 264 pygeodesy.karney.Direct9Tuple.lat2: 0.5
    test 265 pygeodesy.karney.Direct9Tuple.lon2: 0.5
    test 266 pygeodesy.karney.Direct9Tuple.azi2: 0.5
    test 267 pygeodesy.karney.Direct9Tuple.s12: 0.5
    test 268 pygeodesy.karney.Direct9Tuple.m12: 0.5
    test 269 pygeodesy.karney.Direct9Tuple.M12: 0.5
    test 270 pygeodesy.karney.Direct9Tuple.M21: 0.5
    test 271 pygeodesy.karney.Direct9Tuple.S12: 0.5
    test 272 pygeodesy.karney.Direct9Tuple._validated: True
    test 273 pygeodesy.karney.Direct9Tuple._validated: True
    test 274 pygeodesy.karney: GeodSolve12Tuple(lat1=0.5, lon1=0.5, azi1=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, a12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 275 pygeodesy.karney: GeodSolve12Tuple(lat1=_Lat, lon1=_Lon, azi1=Azimuth, lat2=_Lat, lon2=_Lon, azi2=Azimuth, s12=Meter, a12=Degrees, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 276 pygeodesy.karney.GeodSolve12Tuple.lat1: 0.5
    test 277 pygeodesy.karney.GeodSolve12Tuple.lon1: 0.5
    test 278 pygeodesy.karney.GeodSolve12Tuple.azi1: 0.5
    test 279 pygeodesy.karney.GeodSolve12Tuple.lat2: 0.5
    test 280 pygeodesy.karney.GeodSolve12Tuple.lon2: 0.5
    test 281 pygeodesy.karney.GeodSolve12Tuple.azi2: 0.5
    test 282 pygeodesy.karney.GeodSolve12Tuple.s12: 0.5
    test 283 pygeodesy.karney.GeodSolve12Tuple.a12: 0.5
    test 284 pygeodesy.karney.GeodSolve12Tuple.m12: 0.5
    test 285 pygeodesy.karney.GeodSolve12Tuple.M12: 0.5
    test 286 pygeodesy.karney.GeodSolve12Tuple.M21: 0.5
    test 287 pygeodesy.karney.GeodSolve12Tuple.S12: 0.5
    test 288 pygeodesy.karney.GeodSolve12Tuple._validated: True
    test 289 pygeodesy.karney.GeodSolve12Tuple._validated: True
    test 290 pygeodesy.karney: Inverse10Tuple(a12=0.5, s12=0.5, salp1=0.5, calp1=0.5, salp2=0.5, calp2=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 291 pygeodesy.karney: Inverse10Tuple(a12=Azimuth, s12=Meter, salp1=_Pass, calp1=_Pass, salp2=_Pass, calp2=_Pass, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 292 pygeodesy.karney.Inverse10Tuple.a12: 0.5
    test 293 pygeodesy.karney.Inverse10Tuple.s12: 0.5
    test 294 pygeodesy.karney.Inverse10Tuple.salp1: 0.5
    test 295 pygeodesy.karney.Inverse10Tuple.calp1: 0.5
    test 296 pygeodesy.karney.Inverse10Tuple.salp2: 0.5
    test 297 pygeodesy.karney.Inverse10Tuple.calp2: 0.5
    test 298 pygeodesy.karney.Inverse10Tuple.m12: 0.5
    test 299 pygeodesy.karney.Inverse10Tuple.M12: 0.5
    test 300 pygeodesy.karney.Inverse10Tuple.M21: 0.5
    test 301 pygeodesy.karney.Inverse10Tuple.S12: 0.5
    test 302 pygeodesy.karney.Inverse10Tuple._validated: True
    test 303 pygeodesy.karney.Inverse10Tuple._validated: True
    test 304 pygeodesy.karney: Rhumb8Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5, a12=0.5)
    test 305 pygeodesy.karney: Rhumb8Tuple(lat1=Lat, lon1=Lon, lat2=Lat, lon2=Lon, azi12=Azimuth, s12=Meter, S12=Meter2, a12=Degrees)
    test 306 pygeodesy.karney.Rhumb8Tuple.lat1: 0.5
    test 307 pygeodesy.karney.Rhumb8Tuple.lon1: 0.5
    test 308 pygeodesy.karney.Rhumb8Tuple.lat2: 0.5
    test 309 pygeodesy.karney.Rhumb8Tuple.lon2: 0.5
    test 310 pygeodesy.karney.Rhumb8Tuple.azi12: 0.5
    test 311 pygeodesy.karney.Rhumb8Tuple.s12: 0.5
    test 312 pygeodesy.karney.Rhumb8Tuple.S12: 0.5
    test 313 pygeodesy.karney.Rhumb8Tuple.a12: 0.5
    test 314 pygeodesy.karney.Rhumb8Tuple._validated: True
    test 315 pygeodesy.karney.Rhumb8Tuple._validated: True
# lazily imported pygeodesy.ktm by bases.py line 198
# lazily imported pygeodesy.lcc by bases.py line 198
# lazily imported pygeodesy.ltp by bases.py line 198
    test 316 pygeodesy.ltpTuples: Aer4Tuple(azimuth=0.5, elevation=0.5, slantrange=0.5, ltp=0.5)
    test 317 pygeodesy.ltpTuples: Aer4Tuple(azimuth=Meter, elevation=Meter, slantrange=Meter, ltp=_Pass)
    test 318 pygeodesy.ltpTuples.Aer4Tuple.azimuth: 0.5
    test 319 pygeodesy.ltpTuples.Aer4Tuple.elevation: 0.5
    test 320 pygeodesy.ltpTuples.Aer4Tuple.slantrange: 0.5
    test 321 pygeodesy.ltpTuples.Aer4Tuple.ltp: 0.5
    test 322 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 323 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 324 pygeodesy.ltpTuples: Attitude4Tuple(alt=0.5, tilt=0.5, yaw=0.5, roll=0.5)
    test 325 pygeodesy.ltpTuples: Attitude4Tuple(alt=Meter, tilt=Degrees, yaw=Bearing, roll=Degrees)
    test 326 pygeodesy.ltpTuples.Attitude4Tuple.alt: 0.5
    test 327 pygeodesy.ltpTuples.Attitude4Tuple.tilt: 0.5
    test 328 pygeodesy.ltpTuples.Attitude4Tuple.yaw: 0.5
    test 329 pygeodesy.ltpTuples.Attitude4Tuple.roll: 0.5
    test 330 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 331 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 332 pygeodesy.ltpTuples: ChLV9Tuple(Y=0.5, X=0.5, h_=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 333 pygeodesy.ltpTuples: ChLV9Tuple(Y=Meter, X=Meter, h_=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 334 pygeodesy.ltpTuples.ChLV9Tuple.Y: 0.5
    test 335 pygeodesy.ltpTuples.ChLV9Tuple.X: 0.5
    test 336 pygeodesy.ltpTuples.ChLV9Tuple.h_: 0.5
    test 337 pygeodesy.ltpTuples.ChLV9Tuple.lat: 0.5
    test 338 pygeodesy.ltpTuples.ChLV9Tuple.lon: 0.5
    test 339 pygeodesy.ltpTuples.ChLV9Tuple.height: 0.5
    test 340 pygeodesy.ltpTuples.ChLV9Tuple.ltp: 0.5
    test 341 pygeodesy.ltpTuples.ChLV9Tuple.ecef: 0.5
    test 342 pygeodesy.ltpTuples.ChLV9Tuple.M: 0.5
    test 343 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 344 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 345 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=0.5, N_LV95=0.5)
    test 346 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=Meter, N_LV95=Meter)
    test 347 pygeodesy.ltpTuples.ChLVEN2Tuple.E_LV95: 0.5
    test 348 pygeodesy.ltpTuples.ChLVEN2Tuple.N_LV95: 0.5
    test 349 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 350 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 351 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=0.5, X=0.5)
    test 352 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=Meter, X=Meter)
    test 353 pygeodesy.ltpTuples.ChLVYX2Tuple.Y: 0.5
    test 354 pygeodesy.ltpTuples.ChLVYX2Tuple.X: 0.5
    test 355 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 356 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 357 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=0.5, x_LV03=0.5)
    test 358 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=Meter, x_LV03=Meter)
    test 359 pygeodesy.ltpTuples.ChLVyx2Tuple.y_LV03: 0.5
    test 360 pygeodesy.ltpTuples.ChLVyx2Tuple.x_LV03: 0.5
    test 361 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 362 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 363 pygeodesy.ltpTuples: Enu4Tuple(east=0.5, north=0.5, up=0.5, ltp=0.5)
    test 364 pygeodesy.ltpTuples: Enu4Tuple(east=Meter, north=Meter, up=Meter, ltp=_Pass)
    test 365 pygeodesy.ltpTuples.Enu4Tuple.east: 0.5
    test 366 pygeodesy.ltpTuples.Enu4Tuple.north: 0.5
    test 367 pygeodesy.ltpTuples.Enu4Tuple.up: 0.5
    test 368 pygeodesy.ltpTuples.Enu4Tuple.ltp: 0.5
    test 369 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 370 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 371 pygeodesy.ltpTuples: Footprint5Tuple(center=0.5, upperleft=0.5, upperight=0.5, loweright=0.5, lowerleft=0.5)
    test 372 pygeodesy.ltpTuples: Footprint5Tuple(center=_Pass, upperleft=_Pass, upperight=_Pass, loweright=_Pass, lowerleft=_Pass)
    test 373 pygeodesy.ltpTuples.Footprint5Tuple.center: 0.5
    test 374 pygeodesy.ltpTuples.Footprint5Tuple.upperleft: 0.5
    test 375 pygeodesy.ltpTuples.Footprint5Tuple.upperight: 0.5
    test 376 pygeodesy.ltpTuples.Footprint5Tuple.loweright: 0.5
    test 377 pygeodesy.ltpTuples.Footprint5Tuple.lowerleft: 0.5
    test 378 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 379 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 380 pygeodesy.ltpTuples: Local9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 381 pygeodesy.ltpTuples: Local9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 382 pygeodesy.ltpTuples.Local9Tuple.x: 0.5
    test 383 pygeodesy.ltpTuples.Local9Tuple.y: 0.5
    test 384 pygeodesy.ltpTuples.Local9Tuple.z: 0.5
    test 385 pygeodesy.ltpTuples.Local9Tuple.lat: 0.5
    test 386 pygeodesy.ltpTuples.Local9Tuple.lon: 0.5
    test 387 pygeodesy.ltpTuples.Local9Tuple.height: 0.5
    test 388 pygeodesy.ltpTuples.Local9Tuple.ltp: 0.5
    test 389 pygeodesy.ltpTuples.Local9Tuple.ecef: 0.5
    test 390 pygeodesy.ltpTuples.Local9Tuple.M: 0.5
    test 391 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 392 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 393 pygeodesy.ltpTuples: Ned4Tuple(north=0.5, east=0.5, down=0.5, ltp=0.5)
    test 394 pygeodesy.ltpTuples: Ned4Tuple(north=Meter, east=Meter, down=Meter, ltp=_Pass)
    test 395 pygeodesy.ltpTuples.Ned4Tuple.north: 0.5
    test 396 pygeodesy.ltpTuples.Ned4Tuple.east: 0.5
    test 397 pygeodesy.ltpTuples.Ned4Tuple.down: 0.5
    test 398 pygeodesy.ltpTuples.Ned4Tuple.ltp: 0.5
    test 399 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 400 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 401 pygeodesy.ltpTuples: Uvw3Tuple(u=0.5, v=0.5, w=0.5)
    test 402 pygeodesy.ltpTuples: Uvw3Tuple(u=Meter, v=Meter, w=Meter)
    test 403 pygeodesy.ltpTuples.Uvw3Tuple.u: 0.5
    test 404 pygeodesy.ltpTuples.Uvw3Tuple.v: 0.5
    test 405 pygeodesy.ltpTuples.Uvw3Tuple.w: 0.5
    test 406 pygeodesy.ltpTuples.Uvw3Tuple._validated: True
    test 407 pygeodesy.ltpTuples.Uvw3Tuple._validated: True
    test 408 pygeodesy.ltpTuples: Xyz4Tuple(x=0.5, y=0.5, z=0.5, ltp=0.5)
    test 409 pygeodesy.ltpTuples: Xyz4Tuple(x=Meter, y=Meter, z=Meter, ltp=_Pass)
    test 410 pygeodesy.ltpTuples.Xyz4Tuple.x: 0.5
    test 411 pygeodesy.ltpTuples.Xyz4Tuple.y: 0.5
    test 412 pygeodesy.ltpTuples.Xyz4Tuple.z: 0.5
    test 413 pygeodesy.ltpTuples.Xyz4Tuple.ltp: 0.5
    test 414 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
    test 415 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
# lazily imported pygeodesy.mgrs by bases.py line 198
    test 416 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5)
    test 417 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing)
    test 418 pygeodesy.mgrs.Mgrs4Tuple.zone: 0.5
    test 419 pygeodesy.mgrs.Mgrs4Tuple.EN: 0.5
    test 420 pygeodesy.mgrs.Mgrs4Tuple.easting: 0.5
    test 421 pygeodesy.mgrs.Mgrs4Tuple.northing: 0.5
    test 422 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 423 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 424 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 425 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 426 pygeodesy.mgrs.Mgrs6Tuple.zone: 0.5
    test 427 pygeodesy.mgrs.Mgrs6Tuple.EN: 0.5
    test 428 pygeodesy.mgrs.Mgrs6Tuple.easting: 0.5
    test 429 pygeodesy.mgrs.Mgrs6Tuple.northing: 0.5
    test 430 pygeodesy.mgrs.Mgrs6Tuple.band: 0.5
    test 431 pygeodesy.mgrs.Mgrs6Tuple.datum: 0.5
    test 432 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 433 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 434 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 435 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 436 pygeodesy.namedTuples.Bearing2Tuple.initial: 0.5
    test 437 pygeodesy.namedTuples.Bearing2Tuple.final: 0.5
    test 438 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 439 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 440 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 441 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 442 pygeodesy.namedTuples.Bounds2Tuple.latlonSW: 0.5
    test 443 pygeodesy.namedTuples.Bounds2Tuple.latlonNE: 0.5
    test 444 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 445 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 446 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 447 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 448 pygeodesy.namedTuples.Bounds4Tuple.latS: 0.5
    test 449 pygeodesy.namedTuples.Bounds4Tuple.lonW: 0.5
    test 450 pygeodesy.namedTuples.Bounds4Tuple.latN: 0.5
    test 451 pygeodesy.namedTuples.Bounds4Tuple.lonE: 0.5
    test 452 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 453 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 454 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 455 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 456 pygeodesy.namedTuples.Destination2Tuple.destination: 0.5
    test 457 pygeodesy.namedTuples.Destination2Tuple.final: 0.5
    test 458 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 459 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 460 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 461 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 462 pygeodesy.namedTuples.Destination3Tuple.lat: 0.5
    test 463 pygeodesy.namedTuples.Destination3Tuple.lon: 0.5
    test 464 pygeodesy.namedTuples.Destination3Tuple.final: 0.5
    test 465 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 466 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 467 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 468 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 469 pygeodesy.namedTuples.Distance2Tuple.distance: 0.5
    test 470 pygeodesy.namedTuples.Distance2Tuple.initial: 0.5
    test 471 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 472 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 473 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 474 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 475 pygeodesy.namedTuples.Distance3Tuple.distance: 0.5
    test 476 pygeodesy.namedTuples.Distance3Tuple.initial: 0.5
    test 477 pygeodesy.namedTuples.Distance3Tuple.final: 0.5
    test 478 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 479 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 480 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 481 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 482 pygeodesy.namedTuples.Distance4Tuple.distance2: 0.5
    test 483 pygeodesy.namedTuples.Distance4Tuple.delta_lat: 0.5
    test 484 pygeodesy.namedTuples.Distance4Tuple.delta_lon: 0.5
    test 485 pygeodesy.namedTuples.Distance4Tuple.unroll_lon2: 0.5
    test 486 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 487 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 488 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 489 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 490 pygeodesy.namedTuples.EasNor2Tuple.easting: 0.5
    test 491 pygeodesy.namedTuples.EasNor2Tuple.northing: 0.5
    test 492 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 493 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 494 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 495 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 496 pygeodesy.namedTuples.EasNor3Tuple.easting: 0.5
    test 497 pygeodesy.namedTuples.EasNor3Tuple.northing: 0.5
    test 498 pygeodesy.namedTuples.EasNor3Tuple.height: 0.5
    test 499 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 500 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 501 pygeodesy.namedTuples: Forward4Tuple(easting=0.5, northing=0.5, gamma=0.5, scale=0.5)
    test 502 pygeodesy.namedTuples: Forward4Tuple(easting=Easting, northing=Northing, gamma=Degrees, scale=Scalar)
    test 503 pygeodesy.namedTuples.Forward4Tuple.easting: 0.5
    test 504 pygeodesy.namedTuples.Forward4Tuple.northing: 0.5
    test 505 pygeodesy.namedTuples.Forward4Tuple.gamma: 0.5
    test 506 pygeodesy.namedTuples.Forward4Tuple.scale: 0.5
    test 507 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 508 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 509 pygeodesy.namedTuples: Intersection3Tuple(point=0.5, outside1=0, outside2=0)
    test 510 pygeodesy.namedTuples: Intersection3Tuple(point=_Pass, outside1=Int, outside2=Int)
    test 511 pygeodesy.namedTuples.Intersection3Tuple.point: 0.5
    test 512 pygeodesy.namedTuples.Intersection3Tuple.outside1: 0.5
    test 513 pygeodesy.namedTuples.Intersection3Tuple.outside2: 0.5
    test 514 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 515 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 516 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 517 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 518 pygeodesy.namedTuples.LatLon2Tuple.lat: 0.5
    test 519 pygeodesy.namedTuples.LatLon2Tuple.lon: 0.5
    test 520 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 521 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 522 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 523 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 524 pygeodesy.namedTuples.LatLon3Tuple.lat: 0.5
    test 525 pygeodesy.namedTuples.LatLon3Tuple.lon: 0.5
    test 526 pygeodesy.namedTuples.LatLon3Tuple.height: 0.5
    test 527 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 528 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 529 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 530 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 531 pygeodesy.namedTuples.LatLon4Tuple.lat: 0.5
    test 532 pygeodesy.namedTuples.LatLon4Tuple.lon: 0.5
    test 533 pygeodesy.namedTuples.LatLon4Tuple.height: 0.5
    test 534 pygeodesy.namedTuples.LatLon4Tuple.datum: 0.5
    test 535 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 536 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 537 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 538 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 539 pygeodesy.namedTuples.LatLonDatum3Tuple.lat: 0.5
    test 540 pygeodesy.namedTuples.LatLonDatum3Tuple.lon: 0.5
    test 541 pygeodesy.namedTuples.LatLonDatum3Tuple.datum: 0.5
    test 542 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 543 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 544 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, gamma=0.5, scale=0.5)
    test 545 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 546 pygeodesy.namedTuples.LatLonDatum5Tuple.lat: 0.5
    test 547 pygeodesy.namedTuples.LatLonDatum5Tuple.lon: 0.5
    test 548 pygeodesy.namedTuples.LatLonDatum5Tuple.datum: 0.5
    test 549 pygeodesy.namedTuples.LatLonDatum5Tuple.gamma: 0.5
    test 550 pygeodesy.namedTuples.LatLonDatum5Tuple.scale: 0.5
    test 551 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 552 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 553 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 554 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 555 pygeodesy.namedTuples.LatLonPrec3Tuple.lat: 0.5
    test 556 pygeodesy.namedTuples.LatLonPrec3Tuple.lon: 0.5
    test 557 pygeodesy.namedTuples.LatLonPrec3Tuple.precision: 0.5
    test 558 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 559 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 560 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 561 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 562 pygeodesy.namedTuples.LatLonPrec5Tuple.lat: 0.5
    test 563 pygeodesy.namedTuples.LatLonPrec5Tuple.lon: 0.5
    test 564 pygeodesy.namedTuples.LatLonPrec5Tuple.precision: 0.5
    test 565 pygeodesy.namedTuples.LatLonPrec5Tuple.height: 0.5
    test 566 pygeodesy.namedTuples.LatLonPrec5Tuple.radius: 0.5
    test 567 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 568 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 569 pygeodesy.namedTuples: NearestOn2Tuple(closest=0.5, fraction=0.5)
    test 570 pygeodesy.namedTuples: NearestOn2Tuple(closest=_Pass, fraction=_Pass)
    test 571 pygeodesy.namedTuples.NearestOn2Tuple.closest: 0.5
    test 572 pygeodesy.namedTuples.NearestOn2Tuple.fraction: 0.5
    test 573 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 574 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 575 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 576 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 577 pygeodesy.namedTuples.NearestOn3Tuple.closest: 0.5
    test 578 pygeodesy.namedTuples.NearestOn3Tuple.distance: 0.5
    test 579 pygeodesy.namedTuples.NearestOn3Tuple.angle: 0.5
    test 580 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 581 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 582 pygeodesy.namedTuples: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 583 pygeodesy.namedTuples: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Meter)
    test 584 pygeodesy.namedTuples.NearestOn5Tuple.lat: 0.5
    test 585 pygeodesy.namedTuples.NearestOn5Tuple.lon: 0.5
    test 586 pygeodesy.namedTuples.NearestOn5Tuple.distance: 0.5
    test 587 pygeodesy.namedTuples.NearestOn5Tuple.angle: 0.5
    test 588 pygeodesy.namedTuples.NearestOn5Tuple.height: 0.5
    test 589 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 590 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 591 pygeodesy.namedTuples: NearestOn6Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5)
    test 592 pygeodesy.namedTuples: NearestOn6Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass)
    test 593 pygeodesy.namedTuples.NearestOn6Tuple.closest: 0.5
    test 594 pygeodesy.namedTuples.NearestOn6Tuple.distance: 0.5
    test 595 pygeodesy.namedTuples.NearestOn6Tuple.fi: 0.5
    test 596 pygeodesy.namedTuples.NearestOn6Tuple.j: 0.5
    test 597 pygeodesy.namedTuples.NearestOn6Tuple.start: 0.5
    test 598 pygeodesy.namedTuples.NearestOn6Tuple.end: 0.5
    test 599 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 600 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 601 pygeodesy.namedTuples: NearestOn8Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5, initial=0.5, final=0.5)
    test 602 pygeodesy.namedTuples: NearestOn8Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass, initial=Bearing, final=Bearing)
    test 603 pygeodesy.namedTuples.NearestOn8Tuple.closest: 0.5
    test 604 pygeodesy.namedTuples.NearestOn8Tuple.distance: 0.5
    test 605 pygeodesy.namedTuples.NearestOn8Tuple.fi: 0.5
    test 606 pygeodesy.namedTuples.NearestOn8Tuple.j: 0.5
    test 607 pygeodesy.namedTuples.NearestOn8Tuple.start: 0.5
    test 608 pygeodesy.namedTuples.NearestOn8Tuple.end: 0.5
    test 609 pygeodesy.namedTuples.NearestOn8Tuple.initial: 0.5
    test 610 pygeodesy.namedTuples.NearestOn8Tuple.final: 0.5
    test 611 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 612 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 613 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 614 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 615 pygeodesy.namedTuples.PhiLam2Tuple.phi: 0.5
    test 616 pygeodesy.namedTuples.PhiLam2Tuple.lam: 0.5
    test 617 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 618 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 619 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 620 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 621 pygeodesy.namedTuples.PhiLam3Tuple.phi: 0.5
    test 622 pygeodesy.namedTuples.PhiLam3Tuple.lam: 0.5
    test 623 pygeodesy.namedTuples.PhiLam3Tuple.height: 0.5
    test 624 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 625 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 626 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 627 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 628 pygeodesy.namedTuples.PhiLam4Tuple.phi: 0.5
    test 629 pygeodesy.namedTuples.PhiLam4Tuple.lam: 0.5
    test 630 pygeodesy.namedTuples.PhiLam4Tuple.height: 0.5
    test 631 pygeodesy.namedTuples.PhiLam4Tuple.datum: 0.5
    test 632 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 633 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 634 pygeodesy.namedTuples: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 635 pygeodesy.namedTuples: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 636 pygeodesy.namedTuples.Point3Tuple.x: 0.5
    test 637 pygeodesy.namedTuples.Point3Tuple.y: 0.5
    test 638 pygeodesy.namedTuples.Point3Tuple.ll: 0.5
    test 639 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 640 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 641 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 642 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 643 pygeodesy.namedTuples.Points2Tuple.number: 0.5
    test 644 pygeodesy.namedTuples.Points2Tuple.points: 0.5
    test 645 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 646 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 647 pygeodesy.namedTuples: Reverse4Tuple(lat=0.5, lon=0.5, gamma=0.5, scale=0.5)
    test 648 pygeodesy.namedTuples: Reverse4Tuple(lat=Lat, lon=Lon, gamma=Degrees, scale=Scalar)
    test 649 pygeodesy.namedTuples.Reverse4Tuple.lat: 0.5
    test 650 pygeodesy.namedTuples.Reverse4Tuple.lon: 0.5
    test 651 pygeodesy.namedTuples.Reverse4Tuple.gamma: 0.5
    test 652 pygeodesy.namedTuples.Reverse4Tuple.scale: 0.5
    test 653 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 654 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 655 pygeodesy.namedTuples: Triangle7Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, area=0.5)
    test 656 pygeodesy.namedTuples: Triangle7Tuple(A=Degrees, a=Meter, B=Degrees, b=Meter, C=Degrees, c=Meter, area=Meter2)
    test 657 pygeodesy.namedTuples.Triangle7Tuple.A: 0.5
    test 658 pygeodesy.namedTuples.Triangle7Tuple.a: 0.5
    test 659 pygeodesy.namedTuples.Triangle7Tuple.B: 0.5
    test 660 pygeodesy.namedTuples.Triangle7Tuple.b: 0.5
    test 661 pygeodesy.namedTuples.Triangle7Tuple.C: 0.5
    test 662 pygeodesy.namedTuples.Triangle7Tuple.c: 0.5
    test 663 pygeodesy.namedTuples.Triangle7Tuple.area: 0.5
    test 664 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 665 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 666 pygeodesy.namedTuples: Triangle8Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, D=0.5, E=0.5)
    test 667 pygeodesy.namedTuples: Triangle8Tuple(A=Radians, a=Radians, B=Radians, b=Radians, C=Radians, c=Radians, D=Radians, E=Radians)
    test 668 pygeodesy.namedTuples.Triangle8Tuple.A: 0.5
    test 669 pygeodesy.namedTuples.Triangle8Tuple.a: 0.5
    test 670 pygeodesy.namedTuples.Triangle8Tuple.B: 0.5
    test 671 pygeodesy.namedTuples.Triangle8Tuple.b: 0.5
    test 672 pygeodesy.namedTuples.Triangle8Tuple.C: 0.5
    test 673 pygeodesy.namedTuples.Triangle8Tuple.c: 0.5
    test 674 pygeodesy.namedTuples.Triangle8Tuple.D: 0.5
    test 675 pygeodesy.namedTuples.Triangle8Tuple.E: 0.5
    test 676 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 677 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 678 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 679 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 680 pygeodesy.namedTuples.Trilaterate5Tuple.min: 0.5
    test 681 pygeodesy.namedTuples.Trilaterate5Tuple.minPoint: 0.5
    test 682 pygeodesy.namedTuples.Trilaterate5Tuple.max: 0.5
    test 683 pygeodesy.namedTuples.Trilaterate5Tuple.maxPoint: 0.5
    test 684 pygeodesy.namedTuples.Trilaterate5Tuple.n: 0.5
    test 685 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 686 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 687 pygeodesy.namedTuples: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 688 pygeodesy.namedTuples: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 689 pygeodesy.namedTuples.UtmUps2Tuple.zone: 0.5
    test 690 pygeodesy.namedTuples.UtmUps2Tuple.hemipole: 0.5
    test 691 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 692 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 693 pygeodesy.namedTuples: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 694 pygeodesy.namedTuples: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 695 pygeodesy.namedTuples.UtmUps5Tuple.zone: 0.5
    test 696 pygeodesy.namedTuples.UtmUps5Tuple.hemipole: 0.5
    test 697 pygeodesy.namedTuples.UtmUps5Tuple.easting: 0.5
    test 698 pygeodesy.namedTuples.UtmUps5Tuple.northing: 0.5
    test 699 pygeodesy.namedTuples.UtmUps5Tuple.band: 0.5
    test 700 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 701 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 702 pygeodesy.namedTuples: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, gamma=0.5, scale=0.5)
    test 703 pygeodesy.namedTuples: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 704 pygeodesy.namedTuples.UtmUps8Tuple.zone: 0.5
    test 705 pygeodesy.namedTuples.UtmUps8Tuple.hemipole: 0.5
    test 706 pygeodesy.namedTuples.UtmUps8Tuple.easting: 0.5
    test 707 pygeodesy.namedTuples.UtmUps8Tuple.northing: 0.5
    test 708 pygeodesy.namedTuples.UtmUps8Tuple.band: 0.5
    test 709 pygeodesy.namedTuples.UtmUps8Tuple.datum: 0.5
    test 710 pygeodesy.namedTuples.UtmUps8Tuple.gamma: 0.5
    test 711 pygeodesy.namedTuples.UtmUps8Tuple.scale: 0.5
    test 712 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 713 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 714 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 715 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 716 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.zone: 0.5
    test 717 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.band: 0.5
    test 718 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.hemipole: 0.5
    test 719 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lat: 0.5
    test 720 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lon: 0.5
    test 721 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 722 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 723 pygeodesy.namedTuples: Vector2Tuple(x=0.5, y=0.5)
    test 724 pygeodesy.namedTuples: Vector2Tuple(x=Scalar, y=Scalar)
    test 725 pygeodesy.namedTuples.Vector2Tuple.x: 0.5
    test 726 pygeodesy.namedTuples.Vector2Tuple.y: 0.5
    test 727 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 728 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 729 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 730 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 731 pygeodesy.namedTuples.Vector3Tuple.x: 0.5
    test 732 pygeodesy.namedTuples.Vector3Tuple.y: 0.5
    test 733 pygeodesy.namedTuples.Vector3Tuple.z: 0.5
    test 734 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 735 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 736 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 737 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 738 pygeodesy.namedTuples.Vector4Tuple.x: 0.5
    test 739 pygeodesy.namedTuples.Vector4Tuple.y: 0.5
    test 740 pygeodesy.namedTuples.Vector4Tuple.z: 0.5
    test 741 pygeodesy.namedTuples.Vector4Tuple.h: 0.5
    test 742 pygeodesy.namedTuples.Vector4Tuple._validated: True
    test 743 pygeodesy.namedTuples.Vector4Tuple._validated: True
# lazily imported pygeodesy.osgr by bases.py line 198
    test 744 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 745 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 746 pygeodesy.points.Shape2Tuple.nrows: 0.5
    test 747 pygeodesy.points.Shape2Tuple.ncols: 0.5
    test 748 pygeodesy.points.Shape2Tuple._validated: True
    test 749 pygeodesy.points.Shape2Tuple._validated: True
# lazily imported pygeodesy.resections by bases.py line 198
    test 750 pygeodesy.resections: Collins5Tuple(pointP=0.5, pointH=0.5, a=0.5, b=0.5, c=0.5)
    test 751 pygeodesy.resections: Collins5Tuple(pointP=_Pass, pointH=_Pass, a=Distance, b=Distance, c=Distance)
    test 752 pygeodesy.resections.Collins5Tuple.pointP: 0.5
    test 753 pygeodesy.resections.Collins5Tuple.pointH: 0.5
    test 754 pygeodesy.resections.Collins5Tuple.a: 0.5
    test 755 pygeodesy.resections.Collins5Tuple.b: 0.5
    test 756 pygeodesy.resections.Collins5Tuple.c: 0.5
    test 757 pygeodesy.resections.Collins5Tuple._validated: True
    test 758 pygeodesy.resections.Collins5Tuple._validated: True
    test 759 pygeodesy.resections: Survey3Tuple(PA=0.5, PB=0.5, PC=0.5)
    test 760 pygeodesy.resections: Survey3Tuple(PA=Distance, PB=Distance, PC=Distance)
    test 761 pygeodesy.resections.Survey3Tuple.PA: 0.5
    test 762 pygeodesy.resections.Survey3Tuple.PB: 0.5
    test 763 pygeodesy.resections.Survey3Tuple.PC: 0.5
    test 764 pygeodesy.resections.Survey3Tuple._validated: True
    test 765 pygeodesy.resections.Survey3Tuple._validated: True
    test 766 pygeodesy.resections: Tienstra7Tuple(pointP=0.5, A=0.5, B=0.5, C=0.5, a=0.5, b=0.5, c=0.5)
    test 767 pygeodesy.resections: Tienstra7Tuple(pointP=_Pass, A=Degrees, B=Degrees, C=Degrees, a=Distance, b=Distance, c=Distance)
    test 768 pygeodesy.resections.Tienstra7Tuple.pointP: 0.5
    test 769 pygeodesy.resections.Tienstra7Tuple.A: 0.5
    test 770 pygeodesy.resections.Tienstra7Tuple.B: 0.5
    test 771 pygeodesy.resections.Tienstra7Tuple.C: 0.5
    test 772 pygeodesy.resections.Tienstra7Tuple.a: 0.5
    test 773 pygeodesy.resections.Tienstra7Tuple.b: 0.5
    test 774 pygeodesy.resections.Tienstra7Tuple.c: 0.5
    test 775 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 776 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 777 pygeodesy.resections: TriAngle5Tuple(radA=0.5, radB=0.5, radC=0.5, rIn=0.5, area=0.5)
    test 778 pygeodesy.resections: TriAngle5Tuple(radA=Radians, radB=Radians, radC=Radians, rIn=Distance, area=_Pass)
    test 779 pygeodesy.resections.TriAngle5Tuple.radA: 0.5
    test 780 pygeodesy.resections.TriAngle5Tuple.radB: 0.5
    test 781 pygeodesy.resections.TriAngle5Tuple.radC: 0.5
    test 782 pygeodesy.resections.TriAngle5Tuple.rIn: 0.5
    test 783 pygeodesy.resections.TriAngle5Tuple.area: 0.5
    test 784 pygeodesy.resections.TriAngle5Tuple._validated: True
    test 785 pygeodesy.resections.TriAngle5Tuple._validated: True
    test 786 pygeodesy.resections: TriSide2Tuple(a=0.5, radA=0.5)
    test 787 pygeodesy.resections: TriSide2Tuple(a=Distance, radA=Radians)
    test 788 pygeodesy.resections.TriSide2Tuple.a: 0.5
    test 789 pygeodesy.resections.TriSide2Tuple.radA: 0.5
    test 790 pygeodesy.resections.TriSide2Tuple._validated: True
    test 791 pygeodesy.resections.TriSide2Tuple._validated: True
    test 792 pygeodesy.resections: TriSide4Tuple(a=0.5, b=0.5, radC=0.5, d=0.5)
    test 793 pygeodesy.resections: TriSide4Tuple(a=Distance, b=Distance, radC=Radians, d=Distance)
    test 794 pygeodesy.resections.TriSide4Tuple.a: 0.5
    test 795 pygeodesy.resections.TriSide4Tuple.b: 0.5
    test 796 pygeodesy.resections.TriSide4Tuple.radC: 0.5
    test 797 pygeodesy.resections.TriSide4Tuple.d: 0.5
    test 798 pygeodesy.resections.TriSide4Tuple._validated: True
    test 799 pygeodesy.resections.TriSide4Tuple._validated: True
# lazily imported pygeodesy.simplify by bases.py line 198
# lazily imported pygeodesy.sphericalBase by bases.py line 198
# lazily imported pygeodesy.sphericalNvector by bases.py line 198
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 198
# lazily imported pygeodesy.trf by bases.py line 198
    test 800 pygeodesy.trf: TRFXform7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 801 pygeodesy.trf: TRFXform7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 802 pygeodesy.trf.TRFXform7Tuple.tx: 0.5
    test 803 pygeodesy.trf.TRFXform7Tuple.ty: 0.5
    test 804 pygeodesy.trf.TRFXform7Tuple.tz: 0.5
    test 805 pygeodesy.trf.TRFXform7Tuple.s: 0.5
    test 806 pygeodesy.trf.TRFXform7Tuple.sx: 0.5
    test 807 pygeodesy.trf.TRFXform7Tuple.sy: 0.5
    test 808 pygeodesy.trf.TRFXform7Tuple.sz: 0.5
    test 809 pygeodesy.trf.TRFXform7Tuple._validated: True
    test 810 pygeodesy.trf.TRFXform7Tuple._validated: True
    test 811 pygeodesy.triaxials: BetaOmega2Tuple(beta=0.5, omega=0.5)
    test 812 pygeodesy.triaxials: BetaOmega2Tuple(beta=_Pass, omega=_Pass)
    test 813 pygeodesy.triaxials.BetaOmega2Tuple.beta: 0.5
    test 814 pygeodesy.triaxials.BetaOmega2Tuple.omega: 0.5
    test 815 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 816 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 817 pygeodesy.triaxials: BetaOmega3Tuple(beta=0.5, omega=0.5, height=0.5)
    test 818 pygeodesy.triaxials: BetaOmega3Tuple(beta=_Pass, omega=_Pass, height=Meter)
    test 819 pygeodesy.triaxials.BetaOmega3Tuple.beta: 0.5
    test 820 pygeodesy.triaxials.BetaOmega3Tuple.omega: 0.5
    test 821 pygeodesy.triaxials.BetaOmega3Tuple.height: 0.5
    test 822 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 823 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 824 pygeodesy.triaxials: Jacobi2Tuple(x=0.5, y=0.5)
    test 825 pygeodesy.triaxials: Jacobi2Tuple(x=_Pass, y=_Pass)
    test 826 pygeodesy.triaxials.Jacobi2Tuple.x: 0.5
    test 827 pygeodesy.triaxials.Jacobi2Tuple.y: 0.5
    test 828 pygeodesy.triaxials.Jacobi2Tuple._validated: True
    test 829 pygeodesy.triaxials.Jacobi2Tuple._validated: True
# lazily imported pygeodesy.utmups by bases.py line 198
# lazily imported pygeodesy.vector2d by bases.py line 198
    test 830 pygeodesy.vector2d: Circin6Tuple(radius=0.5, center=0.5, deltas=0.5, cA=0.5, cB=0.5, cC=0.5)
    test 831 pygeodesy.vector2d: Circin6Tuple(radius=Radius, center=_Pass, deltas=_Pass, cA=_Pass, cB=_Pass, cC=_Pass)
    test 832 pygeodesy.vector2d.Circin6Tuple.radius: 0.5
    test 833 pygeodesy.vector2d.Circin6Tuple.center: 0.5
    test 834 pygeodesy.vector2d.Circin6Tuple.deltas: 0.5
    test 835 pygeodesy.vector2d.Circin6Tuple.cA: 0.5
    test 836 pygeodesy.vector2d.Circin6Tuple.cB: 0.5
    test 837 pygeodesy.vector2d.Circin6Tuple.cC: 0.5
    test 838 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 839 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 840 pygeodesy.vector2d: Circum3Tuple(radius=0.5, center=0.5, deltas=0.5)
    test 841 pygeodesy.vector2d: Circum3Tuple(radius=Radius, center=_Pass, deltas=_Pass)
    test 842 pygeodesy.vector2d.Circum3Tuple.radius: 0.5
    test 843 pygeodesy.vector2d.Circum3Tuple.center: 0.5
    test 844 pygeodesy.vector2d.Circum3Tuple.deltas: 0.5
    test 845 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 846 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 847 pygeodesy.vector2d: Circum4Tuple(radius=0.5, center=0.5, rank=0, residuals=0.5)
    test 848 pygeodesy.vector2d: Circum4Tuple(radius=Radius, center=_Pass, rank=Int, residuals=_Pass)
    test 849 pygeodesy.vector2d.Circum4Tuple.radius: 0.5
    test 850 pygeodesy.vector2d.Circum4Tuple.center: 0.5
    test 851 pygeodesy.vector2d.Circum4Tuple.rank: 0.5
    test 852 pygeodesy.vector2d.Circum4Tuple.residuals: 0.5
    test 853 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 854 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 855 pygeodesy.vector2d: Meeus2Tuple(radius=0.5, Type=0.5)
    test 856 pygeodesy.vector2d: Meeus2Tuple(radius=Radius, Type=_Pass)
    test 857 pygeodesy.vector2d.Meeus2Tuple.radius: 0.5
    test 858 pygeodesy.vector2d.Meeus2Tuple.Type: 0.5
    test 859 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 860 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 861 pygeodesy.vector2d: Radii11Tuple(rA=0.5, rB=0.5, rC=0.5, cR=0.5, rIn=0.5, riS=0.5, roS=0.5, a=0.5, b=0.5, c=0.5, s=0.5)
    test 862 pygeodesy.vector2d: Radii11Tuple(rA=Meter, rB=Meter, rC=Meter, cR=Meter, rIn=Meter, riS=Meter, roS=Meter, a=Meter, b=Meter, c=Meter, s=Meter)
    test 863 pygeodesy.vector2d.Radii11Tuple.rA: 0.5
    test 864 pygeodesy.vector2d.Radii11Tuple.rB: 0.5
    test 865 pygeodesy.vector2d.Radii11Tuple.rC: 0.5
    test 866 pygeodesy.vector2d.Radii11Tuple.cR: 0.5
    test 867 pygeodesy.vector2d.Radii11Tuple.rIn: 0.5
    test 868 pygeodesy.vector2d.Radii11Tuple.riS: 0.5
    test 869 pygeodesy.vector2d.Radii11Tuple.roS: 0.5
    test 870 pygeodesy.vector2d.Radii11Tuple.a: 0.5
    test 871 pygeodesy.vector2d.Radii11Tuple.b: 0.5
    test 872 pygeodesy.vector2d.Radii11Tuple.c: 0.5
    test 873 pygeodesy.vector2d.Radii11Tuple.s: 0.5
    test 874 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 875 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 876 pygeodesy.vector2d: Soddy4Tuple(radius=0.5, center=0.5, deltas=0.5, outer=0.5)
    test 877 pygeodesy.vector2d: Soddy4Tuple(radius=Radius, center=_Pass, deltas=_Pass, outer=Radius)
    test 878 pygeodesy.vector2d.Soddy4Tuple.radius: 0.5
    test 879 pygeodesy.vector2d.Soddy4Tuple.center: 0.5
    test 880 pygeodesy.vector2d.Soddy4Tuple.deltas: 0.5
    test 881 pygeodesy.vector2d.Soddy4Tuple.outer: 0.5
    test 882 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 883 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 884 pygeodesy.vector2d: Triaxum5Tuple(a=0.5, b=0.5, c=0.5, rank=0, residuals=0.5)
    test 885 pygeodesy.vector2d: Triaxum5Tuple(a=Radius, b=Radius, c=Radius, rank=Int, residuals=_Pass)
    test 886 pygeodesy.vector2d.Triaxum5Tuple.a: 0.5
    test 887 pygeodesy.vector2d.Triaxum5Tuple.b: 0.5
    test 888 pygeodesy.vector2d.Triaxum5Tuple.c: 0.5
    test 889 pygeodesy.vector2d.Triaxum5Tuple.rank: 0.5
    test 890 pygeodesy.vector2d.Triaxum5Tuple.residuals: 0.5
    test 891 pygeodesy.vector2d.Triaxum5Tuple._validated: True
    test 892 pygeodesy.vector2d.Triaxum5Tuple._validated: True
# lazily imported pygeodesy.webmercator by bases.py line 198
    test 893 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 894 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 895 pygeodesy.webmercator.EasNorRadius3Tuple.easting: 0.5
    test 896 pygeodesy.webmercator.EasNorRadius3Tuple.northing: 0.5
    test 897 pygeodesy.webmercator.EasNorRadius3Tuple.radius: 0.5
    test 898 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
    test 899 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
# lazily imported pygeodesy.wgrs by bases.py line 198
# lazily imported pygeodesy.auxilats by bases.py line 198
# lazily imported pygeodesy.geodesicx by bases.py line 198
# lazily imported pygeodesy.rhumb by bases.py line 198
    test 900 pygeodesy.rhumb.solve: RhumbSolve7Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5)
    test 901 pygeodesy.rhumb.solve: RhumbSolve7Tuple(lat1=Lat, lon1=Lon, lat2=Lat, lon2=Lon, azi12=Azimuth, s12=Meter, S12=Meter2)
    test 902 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lat1: 0.5
    test 903 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lon1: 0.5
    test 904 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lat2: 0.5
    test 905 pygeodesy.rhumb.solve.RhumbSolve7Tuple.lon2: 0.5
    test 906 pygeodesy.rhumb.solve.RhumbSolve7Tuple.azi12: 0.5
    test 907 pygeodesy.rhumb.solve.RhumbSolve7Tuple.s12: 0.5
    test 908 pygeodesy.rhumb.solve.RhumbSolve7Tuple.S12: 0.5
    test 909 pygeodesy.rhumb.solve.RhumbSolve7Tuple._validated: True
    test 910 pygeodesy.rhumb.solve.RhumbSolve7Tuple._validated: True
    test 911 pygeodesy.named._NamedTuple._validated: False

    all 911 testNamedTuples.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 87.770 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testNavlabExamples.py
./pygeodesy/ellipsoidalNvector.py:58: DeprecationWarning: class L{Ned<pygeodesy.ellipsoidalNvector.Ned>} has been DEPRECATED on 2024.02.04, use class L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:41: DeprecationWarning: method L{toRepr<pygeodesy.ellipsoidalNvector.Ned.toRepr>} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(1, 'delta', delta.toRepr(prec=3), '[L:470357.384, B:45.109°, E:-2.12°]')  # DEPRECATED
./test/testNavlabExamples.py:43: DeprecationWarning: Property_RO L{bearing<pygeodesy.ellipsoidalNvector.Ned.bearing>} has been DEPRECATED, use C{azimuth}.
  t.test(1, 'bearing', delta.bearing, 45.109, fmt='%.3f')  # 45.109°
./test/testNavlabExamples.py:44: DeprecationWarning: Property_RO L{length<pygeodesy.ellipsoidalNvector.Ned.length>} has been DEPRECATED, use C{slantrange}.
  t.test(1, 'length', delta.length, 470357.384, fmt='%.3f')  # 470357.384 m
./test/testNavlabExamples.py:63: DeprecationWarning: method L{toRepr<pygeodesy.ellipsoidalNvector.Ned.toRepr>} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:3606.938, B:33.69°, E:-1.589°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{ned<pygeodesy.ellipsoidalNvector.Ned.ned>} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{Ned3Tuple<pygeodesy.deprecated.classes.Ned3Tuple>} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)
./test/testNavlabExamples.py:71: DeprecationWarning: method L{toRepr<pygeodesy.ellipsoidalNvector.Ned.toRepr>} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:116807.681, B:222.493°, E:-0.524°]')  # DEPRECATED
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./test/testNavlabExamples.py:143: DeprecationWarning: function L{toNed<pygeodesy.ellipsoidalNvector.toNed>} has been DEPRECATED, use L{pygeodesy.Aer}C{(bearing, elevation, distance).xyzLocal.toNed(B{Ned}, name=B{name})} or L{XyzLocal}C{(pygeodesy.Aer(bearing, elevation, distance)).toNed(B{Ned}, name=B{name})}.
  d = ellipsoidalNvector.toNed(116809.178, 222.493, -0.5416)
./test/testNavlabExamples.py:145: DeprecationWarning: Property_RO L{bearing<pygeodesy.ellipsoidalNvector.Ned.bearing>} has been DEPRECATED, use C{azimuth}.
  TestsBase.test(t, 'bearing',   d.bearing, '227.507',  fmt='%.3f')  # '222.493'
./test/testNavlabExamples.py:147: DeprecationWarning: Property_RO L{length<pygeodesy.ellipsoidalNvector.Ned.length>} has been DEPRECATED, use C{slantrange}.
  TestsBase.test(t, 'length',    d.length, '116809.178',  fmt='%.3f')
./test/testNavlabExamples.py:148: DeprecationWarning: method L{toVector3d<pygeodesy.ellipsoidalNvector.Ned.toVector3d>} has been DEPRECATED, use property L{xyz}.
  v = d.toVector3d()
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Datums from .datums by testNavlabExamples.py line 18
# lazily imported pygeodesy.F_D from .dms by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalExact by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalVincenty by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalTrigonometry by testNavlabExamples.py line 18
# lazily imported pygeodesy.EcefVeness from .ecef by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned from .ltpTuples by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned4Tuple from .ltpTuples by testNavlabExamples.py line 18

    testing testNavlabExamples.py 23.03.27 isLazy=3
    test 1 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384

    test 6 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 7 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned'>
# lazily imported pygeodesy.ltp by ellipsoidalNvector.py line 198
    test 8 Example 1 delta: (331730.863099, 332998.501491, 17398.304211, Ltp(lat0=1.0, lon0=2.0, height0=3.0, M=EcefMatrix(_0_0_=-0.034899, _0_1_=-0.017442, _0_2_=0.999239, _1_0_=0.999391, _1_1_=-0.000609, _1_2_=0.034894, _2_0_=0.0, _2_1_=0.999848, _2_2_=0.017452), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name=''))
    test 9 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned4Tuple'>
    test 10 Example 1 delta: <class 'pygeodesy.ecef.EcefVeness'>

    test 11 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 12 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 13 Example 2 delta: [3000.0, 2000.0, 100.0]
    test 14 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
# lazily imported pygeodesy.deprecated by ltpTuples.py line 537
    test 15 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 16 Example 2 delta: [-86126, -78900, 1069]
    test 17 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 18 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E

    test 19 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m

    test 20 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]

    test 21 Example 5 distanceTo: 332457

    test 22 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 23 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 24 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 25 Example 6 intermediateTo: 51.372084°N, 000.707337°E

    test 26 Example 7 meanOf: 67.2362°N, 006.9175°W

    test 27 Example 8 destination(pygeodesy.sphericalNvector): 79.991549°N, 090.017698°W
    test 28 Example 8 destination(pygeodesy.sphericalTrigonometry): 79.991549°N, 090.017698°W
    test 29 Example 8 destination(pygeodesy.ellipsoidalVincenty): 79.991584°N, 090.017621°W
# lazily imported pygeodesy.ellipsoidalKarney by testNavlabExamples.py line 120
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 30 Example 8 destination(pygeodesy.ellipsoidalKarney): 79.991584°N, 090.017621°W
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
# lazily imported pygeodesy.elliptic by gxline.py line 284
    test 31 Example 8 destination(pygeodesy.ellipsoidalExact): 79.991584°N, 090.017621°W

    test 32 Example 9 intersection: 40.318643°N, 055.901868°E

    test 33 Example 10 crossTrackDistance: 11118

    test 34 toNed: [-78901.1, -86126.6, 1104.1]
    test 35 bearing: 227.507
    test 36 elevation: -0.5416
    test 37 length: 116809.178
    test 38 toVector3d: (-86126.6, -78901.1, -1104.1)

    20 of 38 testNavlabExamples.py tests (52.6%) FAILED, incl. 2 KNOWN plus 18 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 66.831 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testOsgr.py
./test/testOsgr.py:25: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalNvector.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalNvector.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalVincenty.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalVincenty.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalKarney.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalKarney.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testOsgr.py line 11
# lazily imported pygeodesy.fstr from .streprs by testOsgr.py line 11
# lazily imported pygeodesy.Datums from .datums by testOsgr.py line 11
# lazily imported pygeodesy.Osgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.parseOSGR from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.toOsgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalKarney by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalNvector by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalVincenty by testOsgr.py line 221

    testing testOsgr.py 23.03.27 (module pygeodesy.osgr 24.11.06) isLazy=3

    testOSgr(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 1 WGS84: 51.4778°N, 000.0016°W
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: None
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.903,313177.270
    test 11 toOsgr1: 651409.903,313177.270
    test 12 toOsgr1: TG5140990313177270
    test 13 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 14 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 15 iteration: 4
    test 16 toOsgr2: 651409,313177
    test 17 toOsgr2: 651409,313177
    test 18 toOsgr3: TG 51409 13177
    test 19 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
# lazily imported pygeodesy.ktm by osgr.py line 107
    test 20 toOsgr4: TG 51409 13177
    test 21 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 22 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 23 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 24 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 25 toOsgr5: 0.001
    test 26 toOsgr5: TG5140900013177000
    test 27 toOsgr5: 651409.000,313177.000
    test 28 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 29 OSGR1: TG 48251 11932
    test 30 OSGR1: [G:TG, E:48251, N:11932]
    test 31 OSGR2: TG 51409 13177
    test 32 OSGR2: [G:TG, E:51409, N:13177]
    test 33 OSGR3: TG 51409 13177
    test 34 OSGR3: [G:TG, E:51409, N:13177]
    test 35 OSGR4: TG 51409 13177
    test 36 OSGR4: [G:TG, E:51409, N:13177]
    test 37 OSGR5: 651409,313177
    test 38 OSGR5: TG51409001317700
    test 39 OSGR5: 651409,313177
    test 40 OSGR5: 651409.000000,313177.000000
    test 41 OSGR5: 651409.00,313177.00
    test 42 OSGR5: [OSGR:651409.000,313177.000]
    test 43 OSGR5: [OSGR:651409,313177]
    test 44 OSGR5: [OSGR:651409.000,313177.000]
    test 45 OSGR5: [OSGR:651,313]
    test 46 OSGR6: 651409.000,313177.000
    test 47 OSGR6: 651409,313177
    test 48 OSGR6: (651409, 313177)
    test 49 OSGR6: 651409,313177
    test 50 OSGR6: 651409,313177
    test 51 OSGR6: (651409, 313177)
    test 52 OSGR6: 651409 313177

    test 53 issue: 38
    test 54 toOsgr: [G:TL, E:29158, N:35174]
    test 55 toOsgr: 529158.072, 235174.785
    test 56 toOsgr: OSGB36
    test 57 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 58 toLatLonOSGB36: OSGB36
    test 59 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 60 toLatLonWGS84 : WGS84

    test 61 Osgr: [G:TQ, E:32014, N:23971]
    test 62 Osgr: 532014.0, 123971.0
    test 63 Osgr: OSGB36
    test 64 toLatLonOSGB36: 50.999425N, 000.118417W
    test 65 toLatLonOSGB36: OSGB36
    test 66 toLatLonWGS84 : 50.999995N, 000.120004W
    test 67 toLatLonWGS84 : WGS84
    test 68 parseOSGR: [G:TQ, E:32014, N:23971]
    test 69 parseOSGR: 532014.0, 123971.0
    test 70 parseOSGR: OSGB36
    test 71 toLatLonOSGB36: 50.999425N, 000.118417W
    test 72 toLatLonOSGB36: OSGB36
    test 73 toLatLonWGS84: 50.999995N, 000.120004W
    test 74 toLatLonWGS84: WGS84
    test 75 toOsgr: [G:TQ, E:32013, N:23971]
    test 76 toOsgr: 532013.969, 123971.046
    test 77 toOsgr: OSGB36
    test 78 toLatLonOSGB36: 50.999426N, 000.118417W
    test 79 toLatLonOSGB36: OSGB36
    test 80 toLatLonWGS84 : 50.999995N, 000.120004W
    test 81 toLatLonWGS84 : WGS84
    test 82 toOsgr: [G:TQ, E:48853, N:24427]
    test 83 toOsgr: 548853.602, 124427.985
    test 84 toOsgr: OSGB36
    test 85 toLatLonOSGB36: 50.999422N, 000.121618E
    test 86 toLatLonOSGB36: OSGB36
    test 87 toLatLonWGS84 : 50.999995N, 000.120004E
    test 88 toLatLonWGS84 : WGS84

    test 89 LatLon: 49.926244°N, 006.297934°W
    test 90 datum: WGS84
    test 91 datum: OSGB36
    test 92 toOsgr: [G:SV, E:91645, N:11753]
    test 93 datum: OSGB36
    test 94 LatLon: 49.926244°N, 006.297934°W
    test 95 datum: WGS84
    test 96 distanceTo: 0.0103  FAILED, KNOWN, expected 0.0104

    test 97 prec=-2: [G:SV, E:91600, N:11700]

    test 98 toLatLon: 52.0N, 000.12W
    test 99 toLatLon: 52.0N, 000.12W
    test 100 toLatLon: 52.0N, 000.12W
    test 101 toLatLon: 52.0N, 000.12W
    test 102 toLatLon: 52.0N, 000.12W
    test 103 toLatLon: 52.0N, 000.12W
    test 104 toLatLon: 52.0N, 000.12W
    test 105 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 106 WGS84: 51.4778°N, 000.0016°W
    test 107 OSGB36: 51.477284°N, 000.00002°E
    test 108 WGS84: 51.4778°N, 000.0016°W
    test 109 OSgr1: TG 51409 13177
    test 110 OSgr1: [G:TG, E:51409, N:13177]
    test 111 iteration: None
    test 112 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 113 toLatLon1: 52.657979°N, 001.716052°E
    test 114 iteration: 4
    test 115 toOsgr1: 651409.903,313177.270
    test 116 toOsgr1: 651409.903,313177.270
    test 117 toOsgr1: TG5140990313177270
    test 118 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 119 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 120 iteration: 4
    test 121 toOsgr2: 651409,313177
    test 122 toOsgr2: 651409,313177
    test 123 toOsgr3: TG 51409 13177
    test 124 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 125 toOsgr4: TG 51409 13177
    test 126 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 127 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 128 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
./test/testOsgr.py:25: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalExact.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{convertDatum<pygeodesy.ellipsoidalExact.LatLon.convertDatum>} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
    test 129 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 130 toOsgr5: 0.001
    test 131 toOsgr5: TG5140900013177000
    test 132 toOsgr5: 651409.000,313177.000
    test 133 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 134 OSGR1: TG 48251 11932
    test 135 OSGR1: [G:TG, E:48251, N:11932]
    test 136 OSGR2: TG 51409 13177
    test 137 OSGR2: [G:TG, E:51409, N:13177]
    test 138 OSGR3: TG 51409 13177
    test 139 OSGR3: [G:TG, E:51409, N:13177]
    test 140 OSGR4: TG 51409 13177
    test 141 OSGR4: [G:TG, E:51409, N:13177]
    test 142 OSGR5: 651409,313177
    test 143 OSGR5: TG51409001317700
    test 144 OSGR5: 651409,313177
    test 145 OSGR5: 651409.000000,313177.000000
    test 146 OSGR5: 651409.00,313177.00
    test 147 OSGR5: [OSGR:651409.000,313177.000]
    test 148 OSGR5: [OSGR:651409,313177]
    test 149 OSGR5: [OSGR:651409.000,313177.000]
    test 150 OSGR5: [OSGR:651,313]
    test 151 OSGR6: 651409.000,313177.000
    test 152 OSGR6: 651409,313177
    test 153 OSGR6: (651409, 313177)
    test 154 OSGR6: 651409,313177
    test 155 OSGR6: 651409,313177
    test 156 OSGR6: (651409, 313177)
    test 157 OSGR6: 651409 313177

    test 158 issue: 38
    test 159 toOsgr: [G:TL, E:29158, N:35174]
    test 160 toOsgr: 529158.072, 235174.785
    test 161 toOsgr: OSGB36
    test 162 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 163 toLatLonOSGB36: OSGB36
    test 164 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 165 toLatLonWGS84 : WGS84

    test 166 Osgr: [G:TQ, E:32014, N:23971]
    test 167 Osgr: 532014.0, 123971.0
    test 168 Osgr: OSGB36
    test 169 toLatLonOSGB36: 50.999425N, 000.118417W
    test 170 toLatLonOSGB36: OSGB36
    test 171 toLatLonWGS84 : 50.999995N, 000.120004W
    test 172 toLatLonWGS84 : WGS84
    test 173 parseOSGR: [G:TQ, E:32014, N:23971]
    test 174 parseOSGR: 532014.0, 123971.0
    test 175 parseOSGR: OSGB36
    test 176 toLatLonOSGB36: 50.999425N, 000.118417W
    test 177 toLatLonOSGB36: OSGB36
    test 178 toLatLonWGS84: 50.999995N, 000.120004W
    test 179 toLatLonWGS84: WGS84
    test 180 toOsgr: [G:TQ, E:32013, N:23971]
    test 181 toOsgr: 532013.969, 123971.046
    test 182 toOsgr: OSGB36
    test 183 toLatLonOSGB36: 50.999426N, 000.118417W
    test 184 toLatLonOSGB36: OSGB36
    test 185 toLatLonWGS84 : 50.999995N, 000.120004W
    test 186 toLatLonWGS84 : WGS84
    test 187 toOsgr: [G:TQ, E:48853, N:24427]
    test 188 toOsgr: 548853.602, 124427.985
    test 189 toOsgr: OSGB36
    test 190 toLatLonOSGB36: 50.999422N, 000.121618E
    test 191 toLatLonOSGB36: OSGB36
    test 192 toLatLonWGS84 : 50.999995N, 000.120004E
    test 193 toLatLonWGS84 : WGS84

    test 194 LatLon: 49.926244°N, 006.297934°W
    test 195 datum: WGS84
    test 196 datum: OSGB36
    test 197 toOsgr: [G:SV, E:91645, N:11753]
    test 198 datum: OSGB36
    test 199 LatLon: 49.926244°N, 006.297934°W
    test 200 datum: WGS84
    test 201 distanceTo: 0.0104

    test 202 prec=-2: [G:SV, E:91600, N:11700]

    test 203 toLatLon: 52.0N, 000.12W
    test 204 toLatLon: 52.0N, 000.12W
    test 205 toLatLon: 52.0N, 000.12W
    test 206 toLatLon: 52.0N, 000.12W
    test 207 toLatLon: 52.0N, 000.12W
    test 208 toLatLon: 52.0N, 000.12W
    test 209 toLatLon: 52.0N, 000.12W
    test 210 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 211 WGS84: 51.4778°N, 000.0016°W
    test 212 OSGB36: 51.477284°N, 000.00002°E
    test 213 WGS84: 51.4778°N, 000.0016°W
    test 214 OSgr1: TG 51409 13177
    test 215 OSgr1: [G:TG, E:51409, N:13177]
    test 216 iteration: None
    test 217 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 218 toLatLon1: 52.657979°N, 001.716052°E
    test 219 iteration: 4
    test 220 toOsgr1: 651409.903,313177.270
    test 221 toOsgr1: 651409.903,313177.270
    test 222 toOsgr1: TG5140990313177270
    test 223 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 224 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 225 iteration: 4
    test 226 toOsgr2: 651409,313177
    test 227 toOsgr2: 651409,313177
    test 228 toOsgr3: TG 51409 13177
    test 229 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 230 toOsgr4: TG 51409 13177
    test 231 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 232 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 233 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 234 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 235 toOsgr5: 0.001
    test 236 toOsgr5: TG5140900013177000
    test 237 toOsgr5: 651409.000,313177.000
    test 238 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 239 OSGR1: TG 48251 11932
    test 240 OSGR1: [G:TG, E:48251, N:11932]
    test 241 OSGR2: TG 51409 13177
    test 242 OSGR2: [G:TG, E:51409, N:13177]
    test 243 OSGR3: TG 51409 13177
    test 244 OSGR3: [G:TG, E:51409, N:13177]
    test 245 OSGR4: TG 51409 13177
    test 246 OSGR4: [G:TG, E:51409, N:13177]
    test 247 OSGR5: 651409,313177
    test 248 OSGR5: TG51409001317700
    test 249 OSGR5: 651409,313177
    test 250 OSGR5: 651409.000000,313177.000000
    test 251 OSGR5: 651409.00,313177.00
    test 252 OSGR5: [OSGR:651409.000,313177.000]
    test 253 OSGR5: [OSGR:651409,313177]
    test 254 OSGR5: [OSGR:651409.000,313177.000]
    test 255 OSGR5: [OSGR:651,313]
    test 256 OSGR6: 651409.000,313177.000
    test 257 OSGR6: 651409,313177
    test 258 OSGR6: (651409, 313177)
    test 259 OSGR6: 651409,313177
    test 260 OSGR6: 651409,313177
    test 261 OSGR6: (651409, 313177)
    test 262 OSGR6: 651409 313177

    test 263 issue: 38
    test 264 toOsgr: [G:TL, E:29158, N:35174]
    test 265 toOsgr: 529158.072, 235174.785
    test 266 toOsgr: OSGB36
    test 267 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 268 toLatLonOSGB36: OSGB36
    test 269 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 270 toLatLonWGS84 : WGS84

    test 271 Osgr: [G:TQ, E:32014, N:23971]
    test 272 Osgr: 532014.0, 123971.0
    test 273 Osgr: OSGB36
    test 274 toLatLonOSGB36: 50.999425N, 000.118417W
    test 275 toLatLonOSGB36: OSGB36
    test 276 toLatLonWGS84 : 50.999995N, 000.120004W
    test 277 toLatLonWGS84 : WGS84
    test 278 parseOSGR: [G:TQ, E:32014, N:23971]
    test 279 parseOSGR: 532014.0, 123971.0
    test 280 parseOSGR: OSGB36
    test 281 toLatLonOSGB36: 50.999425N, 000.118417W
    test 282 toLatLonOSGB36: OSGB36
    test 283 toLatLonWGS84: 50.999995N, 000.120004W
    test 284 toLatLonWGS84: WGS84
    test 285 toOsgr: [G:TQ, E:32013, N:23971]
    test 286 toOsgr: 532013.969, 123971.046
    test 287 toOsgr: OSGB36
    test 288 toLatLonOSGB36: 50.999426N, 000.118417W
    test 289 toLatLonOSGB36: OSGB36
    test 290 toLatLonWGS84 : 50.999995N, 000.120004W
    test 291 toLatLonWGS84 : WGS84
    test 292 toOsgr: [G:TQ, E:48853, N:24427]
    test 293 toOsgr: 548853.602, 124427.985
    test 294 toOsgr: OSGB36
    test 295 toLatLonOSGB36: 50.999422N, 000.121618E
    test 296 toLatLonOSGB36: OSGB36
    test 297 toLatLonWGS84 : 50.999995N, 000.120004E
    test 298 toLatLonWGS84 : WGS84

    test 299 LatLon: 49.926244°N, 006.297934°W
    test 300 datum: WGS84
    test 301 datum: OSGB36
    test 302 toOsgr: [G:SV, E:91645, N:11753]
    test 303 datum: OSGB36
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 304 LatLon: 49.926244°N, 006.297934°W
    test 305 datum: WGS84
    test 306 distanceTo: 0.0104

    test 307 prec=-2: [G:SV, E:91600, N:11700]

    test 308 toLatLon: 52.0N, 000.12W
    test 309 toLatLon: 52.0N, 000.12W
    test 310 toLatLon: 52.0N, 000.12W
    test 311 toLatLon: 52.0N, 000.12W
    test 312 toLatLon: 52.0N, 000.12W
    test 313 toLatLon: 52.0N, 000.12W
    test 314 toLatLon: 52.0N, 000.12W
    test 315 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalExact, 24.11.06)
    test 316 WGS84: 51.4778°N, 000.0016°W
    test 317 OSGB36: 51.477284°N, 000.00002°E
    test 318 WGS84: 51.4778°N, 000.0016°W
    test 319 OSgr1: TG 51409 13177
    test 320 OSgr1: [G:TG, E:51409, N:13177]
    test 321 iteration: None
    test 322 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 323 toLatLon1: 52.657979°N, 001.716052°E
    test 324 iteration: 4
    test 325 toOsgr1: 651409.903,313177.270
    test 326 toOsgr1: 651409.903,313177.270
    test 327 toOsgr1: TG5140990313177270
    test 328 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 329 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 330 iteration: 4
    test 331 toOsgr2: 651409,313177
    test 332 toOsgr2: 651409,313177
    test 333 toOsgr3: TG 51409 13177
    test 334 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 335 toOsgr4: TG 51409 13177
    test 336 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 337 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 338 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 339 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 340 toOsgr5: 0.001
    test 341 toOsgr5: TG5140900013177000
    test 342 toOsgr5: 651409.000,313177.000
    test 343 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 344 OSGR1: TG 48251 11932
    test 345 OSGR1: [G:TG, E:48251, N:11932]
    test 346 OSGR2: TG 51409 13177
    test 347 OSGR2: [G:TG, E:51409, N:13177]
    test 348 OSGR3: TG 51409 13177
    test 349 OSGR3: [G:TG, E:51409, N:13177]
    test 350 OSGR4: TG 51409 13177
    test 351 OSGR4: [G:TG, E:51409, N:13177]
    test 352 OSGR5: 651409,313177
    test 353 OSGR5: TG51409001317700
    test 354 OSGR5: 651409,313177
    test 355 OSGR5: 651409.000000,313177.000000
    test 356 OSGR5: 651409.00,313177.00
    test 357 OSGR5: [OSGR:651409.000,313177.000]
    test 358 OSGR5: [OSGR:651409,313177]
    test 359 OSGR5: [OSGR:651409.000,313177.000]
    test 360 OSGR5: [OSGR:651,313]
    test 361 OSGR6: 651409.000,313177.000
    test 362 OSGR6: 651409,313177
    test 363 OSGR6: (651409, 313177)
    test 364 OSGR6: 651409,313177
    test 365 OSGR6: 651409,313177
    test 366 OSGR6: (651409, 313177)
    test 367 OSGR6: 651409 313177

    test 368 issue: 38
    test 369 toOsgr: [G:TL, E:29158, N:35174]
    test 370 toOsgr: 529158.072, 235174.785
    test 371 toOsgr: OSGB36
    test 372 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 373 toLatLonOSGB36: OSGB36
    test 374 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 375 toLatLonWGS84 : WGS84

    test 376 Osgr: [G:TQ, E:32014, N:23971]
    test 377 Osgr: 532014.0, 123971.0
    test 378 Osgr: OSGB36
    test 379 toLatLonOSGB36: 50.999425N, 000.118417W
    test 380 toLatLonOSGB36: OSGB36
    test 381 toLatLonWGS84 : 50.999995N, 000.120004W
    test 382 toLatLonWGS84 : WGS84
    test 383 parseOSGR: [G:TQ, E:32014, N:23971]
    test 384 parseOSGR: 532014.0, 123971.0
    test 385 parseOSGR: OSGB36
    test 386 toLatLonOSGB36: 50.999425N, 000.118417W
    test 387 toLatLonOSGB36: OSGB36
    test 388 toLatLonWGS84: 50.999995N, 000.120004W
    test 389 toLatLonWGS84: WGS84
    test 390 toOsgr: [G:TQ, E:32013, N:23971]
    test 391 toOsgr: 532013.969, 123971.046
    test 392 toOsgr: OSGB36
    test 393 toLatLonOSGB36: 50.999426N, 000.118417W
    test 394 toLatLonOSGB36: OSGB36
    test 395 toLatLonWGS84 : 50.999995N, 000.120004W
    test 396 toLatLonWGS84 : WGS84
    test 397 toOsgr: [G:TQ, E:48853, N:24427]
    test 398 toOsgr: 548853.602, 124427.985
    test 399 toOsgr: OSGB36
    test 400 toLatLonOSGB36: 50.999422N, 000.121618E
    test 401 toLatLonOSGB36: OSGB36
    test 402 toLatLonWGS84 : 50.999995N, 000.120004E
    test 403 toLatLonWGS84 : WGS84

    test 404 LatLon: 49.926244°N, 006.297934°W
    test 405 datum: WGS84
    test 406 datum: OSGB36
    test 407 toOsgr: [G:SV, E:91645, N:11753]
    test 408 datum: OSGB36
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
    test 409 LatLon: 49.926244°N, 006.297934°W
    test 410 datum: WGS84
    test 411 distanceTo: 0.0104

    test 412 prec=-2: [G:SV, E:91600, N:11700]

    test 413 toLatLon: 52.0N, 000.12W
    test 414 toLatLon: 52.0N, 000.12W
    test 415 toLatLon: 52.0N, 000.12W
    test 416 toLatLon: 52.0N, 000.12W
    test 417 toLatLon: 52.0N, 000.12W
    test 418 toLatLon: 52.0N, 000.12W
    test 419 toLatLon: 52.0N, 000.12W
    test 420 toLatLon: 52.0N, 000.12W

    14 of 420 testOsgr.py tests (3.3%) FAILED, incl. 5 KNOWN plus 9 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 206.038 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testPoints.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testPoints.py line 12
# lazily imported pygeodesy.R_M from .constants by testPoints.py line 12
# lazily imported pygeodesy.R_MA from .constants by testPoints.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testPoints.py line 12
# lazily imported pygeodesy.LatLon2psxy from .points by testPoints.py line 12
# lazily imported pygeodesy.Numpy2LatLon from .points by testPoints.py line 12
# lazily imported pygeodesy.Tuple2LatLon from .points by testPoints.py line 12
# lazily imported pygeodesy.areaOf from .points by testPoints.py line 12
# lazily imported pygeodesy.boundsOf from .points by testPoints.py line 12
# lazily imported pygeodesy.centroidOf from .points by testPoints.py line 12
# lazily imported pygeodesy.classname from .named by testPoints.py line 12
# lazily imported pygeodesy.fstr from .streprs by testPoints.py line 12
# lazily imported pygeodesy.isclockwise from .points by testPoints.py line 12
# lazily imported pygeodesy.isconvex from .points by testPoints.py line 12
# lazily imported pygeodesy.ispolar from .points by testPoints.py line 12
# lazily imported pygeodesy.luneOf from .points by testPoints.py line 12
# lazily imported pygeodesy.nearestOn5 from .points by testPoints.py line 12
# lazily imported pygeodesy.perimeterOf from .points by testPoints.py line 12
# lazily imported pygeodesy.quadOf from .points by testPoints.py line 12
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testPoints.py 23.12.03 (module pygeodesy.points 24.10.24) isLazy=3
    test 1 sizeof(LatLon_.__dict__): 48
# lazily imported pygeodesy.booleans by iters.py line 503
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.220446049250313e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489°N, 000.701206°W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 no: numpy
    test 113 Tuple2LatLon.ABC: True
    test 114 Tuple2LatLon.epsilon: 2.220446049250313e-16
    test 115 Tuple2LatLon.epsilon: 0.0
    test 116 Tuple2LatLon.len: 69
    test 117 Tuple2LatLon.iter: 69
    test 118 Tuple2LatLon.slice1: 11
    test 119 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 120 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 121 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 122 Tuple2LatLon.subset: <class 'list'>
    test 123 Tuple2LatLon.count: 1
    test 124 Tuple2LatLon.index: 10
    test 125 Tuple2LatLon.rfind: 10
    test 126 Tuple2LatLon.in: True
    test 127 Tuple2LatLon.count: 0
    test 128 Tuple2LatLon.find: -1
    test 129 Tuple2LatLon.rfind: -1
    test 130 Tuple2LatLon.not in: True
    test 131 Tuple2LatLon.count: 1
    test 132 Tuple2LatLon.index: 20
    test 133 Tuple2LatLon.rfind: 20
    test 134 Tuple2LatLon.in: True
    test 135 Tuple2LatLon.count: 0
    test 136 Tuple2LatLon.find: -1
    test 137 Tuple2LatLon.rfind: -1
    test 138 Tuple2LatLon.not in: True
    test 139 Tuple2LatLon.count: 1
    test 140 Tuple2LatLon.index: 30
    test 141 Tuple2LatLon.rfind: 30
    test 142 Tuple2LatLon.in: True
    test 143 Tuple2LatLon.count: 0
    test 144 Tuple2LatLon.find: -1
    test 145 Tuple2LatLon.rfind: -1
    test 146 Tuple2LatLon.not in: True
    test 147 Tuple2LatLon.count: 1
    test 148 Tuple2LatLon.index: 40
    test 149 Tuple2LatLon.rfind: 40
    test 150 Tuple2LatLon.in: True
    test 151 Tuple2LatLon.count: 0
    test 152 Tuple2LatLon.find: -1
    test 153 Tuple2LatLon.rfind: -1
    test 154 Tuple2LatLon.not in: True
    test 155 Tuple2LatLon.count: 1
    test 156 Tuple2LatLon.index: 50
    test 157 Tuple2LatLon.rfind: 50
    test 158 Tuple2LatLon.in: True
    test 159 Tuple2LatLon.count: 0
    test 160 Tuple2LatLon.find: -1
    test 161 Tuple2LatLon.rfind: -1
    test 162 Tuple2LatLon.not in: True
    test 163 Tuple2LatLon.count: 1
    test 164 Tuple2LatLon.index: 60
    test 165 Tuple2LatLon.rfind: 60
    test 166 Tuple2LatLon.in: True
    test 167 Tuple2LatLon.count: 0
    test 168 Tuple2LatLon.find: -1
    test 169 Tuple2LatLon.rfind: -1
    test 170 Tuple2LatLon.not in: True
    test 171 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 172 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 173 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 174 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 175 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 176 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 177 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 178 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 179 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 180 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 181 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 182 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 183 Tuple2LatLon.enumerate[*]: 11
    test 184 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 185 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 186 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 187 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 188 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 189 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 190 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 191 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 192 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 193 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 194 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 195 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 196 Tuple2LatLon.findall[0]: (0,)
    test 197 Tuple2LatLon.findall[1]: (1,)
    test 198 Tuple2LatLon.findall[2]: (2,)
    test 199 Tuple2LatLon.findall[3]: (3,)
    test 200 Tuple2LatLon.findall[4]: (4,)
    test 201 Tuple2LatLon.findall[5]: (5,)
    test 202 Tuple2LatLon.findall[6]: (6,)
    test 203 Tuple2LatLon.findall[7]: (7,)
    test 204 Tuple2LatLon.findall[8]: (8,)
    test 205 Tuple2LatLon.findall[9]: (9,)
    test 206 Tuple2LatLon.findall[10]: (10,)
    test 207 Tuple2LatLon.findall[11]: (11,)
    test 208 Tuple2LatLon.findall[*]: 11
    test 209 Tuple2LatLon.isNumpy2: False
    test 210 Tuple2LatLon.isPoints2: False
    test 211 Tuple2LatLon.isTuple2: True
# lazily imported pygeodesy.ellipsoidalExact by testPoints.py line 276
# lazily imported pygeodesy.ellipsoidalKarney by testPoints.py line 276
# lazily imported pygeodesy.ellipsoidalNvector by testPoints.py line 276
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testPoints.py line 276
# lazily imported pygeodesy.sphericalNvector by testPoints.py line 276

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 212 areaOf: 8.811228e+09
    test 213 centroidOf: 45.5, 1.5
    test 214 perimeterOf: 2.673633e+05
    test 215 isclockwise: False
    test 216 isconvex: True
    test 217 ispolar: False
    test 218 areaOf: 7.086883e+09
    test 219 perimeterOf: 2.687460e+05
    test 220 centroidOf: 0.333333, 0.333333
    test 221 isclockwise: True
    test 222 isconvex: True
    test 223 ispolar: False
    test 224 areaOf: 2.827856e+10
    test 225 perimeterOf: 4.717039e+05
    test 226 centroidOf: 1.0, 1.0
    test 227 isclockwise: False
    test 228 isconvex: True
    test 229 ispolar: False
    test 230 areaOf: 2.747297e+13
    test 231 perimeterOf: 2.332643e+07
    test 232 centroidOf: 52.113, 102.123
    test 233 isclockwise: False
    test 234 isconvex: False
    test 235 ispolar: True
    test 236 areaOf: 8.482014e+10
    test 237 perimeterOf: 1.334104e+06
    test 238 centroidOf: 1.167, 1.667
    test 239 isclockwise: False
    test 240 isconvex: False
    test 241 ispolar: False
    test 242 areaOf: 5.151974e+13
    test 243 perimeterOf: 2.638608e+07
    test 244 centroidOf: -19.444, -133.333
    test 245 isclockwise: True
    test 246 isconvex: True
    test 247 ispolar: False
    test 248 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 249 perimeterOf: 1.562029e+07
    test 250 centroidOf: -72.926, 46.47
    test 251 isclockwise: True
    test 252 isconvex: False
    test 253 ispolar: True
    test 254 points2: 18
    test 255 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 256 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 257 isclockwise: True
    test 258 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 259 boundsOf: (-77.9, -163.0, -63.1, 172.0)
    test 260 quadOf: 77.9°S, 163.0°W, 63.1°S, 163.0°W, 63.1°S, 172.0°E, 77.9°S, 172.0°E
    test 261 intermediateTo: 51.368°N, 000.677°E, 'intermediateTo'
    test 262 intermediateTo: True
    test 263 intermediateTo: 51.368°N, 000.677°E
    test 264 intermediateTo: 52.205°N, 000.119°E
    test 265 intermediateTo: 48.857°N, 002.351°E
    test 266 _isLatLon_: _Array2LatLon('[ ... ][1]', ilat=0, ilon=1)
    test 267 latlon: (-66.6, -88.0)
    test 268 philam: (-1.162389, -1.53589)
    test 269 toStr: 66.6°S, 088.0°W
    test 270 __ne__: False
    test 271 isequalTo: True
    test 272 isequalTo: True
    test 273 latlonheight: (-66.6, -88.0, 0)
    test 274 philamheight: (-1.162389, -1.53589, 0)
    test 275 _N_vector: (0.01386, -0.39691, -0.91775)
    test 276 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 277 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 278 classof: 66.6°S, 088.0°W
    test 279 others: 66.6°S, 088.0°W
    test 280 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
./pygeodesy/ellipsoidalKarney.py:94: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
    test 281 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 282 areaOf: 8.811228e+09
    test 283 centroidOf: 45.5, 1.5
    test 284 perimeterOf: 2.673633e+05
    test 285 isclockwise: False
    test 286 isconvex: True
    test 287 ispolar: False
    test 288 areaOf: 7.086883e+09
    test 289 perimeterOf: 2.687460e+05
    test 290 centroidOf: 0.333333, 0.333333
    test 291 isclockwise: True
    test 292 isconvex: True
    test 293 ispolar: False
    test 294 areaOf: 2.827856e+10
    test 295 perimeterOf: 4.717039e+05
    test 296 centroidOf: 1.0, 1.0
    test 297 isclockwise: False
    test 298 isconvex: True
    test 299 ispolar: False
    test 300 areaOf: 2.747297e+13
    test 301 perimeterOf: 2.332643e+07
    test 302 centroidOf: 52.113, 102.123
    test 303 isclockwise: False
    test 304 isconvex: False
    test 305 ispolar: True
    test 306 areaOf: 8.482014e+10
    test 307 perimeterOf: 1.334104e+06
    test 308 centroidOf: 1.167, 1.667
    test 309 isclockwise: False
    test 310 isconvex: False
    test 311 ispolar: False
    test 312 areaOf: 5.151974e+13
    test 313 perimeterOf: 2.638608e+07
    test 314 centroidOf: -19.444, -133.333
    test 315 isclockwise: True
    test 316 isconvex: True
    test 317 ispolar: False
    test 318 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 319 perimeterOf: 1.562029e+07
    test 320 centroidOf: -72.926, 46.47
    test 321 isclockwise: True
    test 322 isconvex: False
    test 323 ispolar: True
    test 324 points2: 18
    test 325 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 326 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 327 isclockwise: True
    test 328 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 329 latlon: (-66.6, -88.0)
    test 330 philam: (-1.162389, -1.53589)
    test 331 latlonheight: (-66.6, -88.0, 0)
    test 332 philamheight: (-1.162389, -1.53589, 0)
    test 333 _N_vector: (0.01386, -0.39691, -0.91775)
    test 334 toNvector: (0.01386, -0.39691, -0.91775)
    test 335 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 336 classof: 66.6°S, 088.0°W
    test 337 others: 66.6°S, 088.0°W
    test 338 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 339 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 340 areaOf: 8.811228e+09
    test 341 centroidOf: 45.5, 1.5
    test 342 perimeterOf: 2.673633e+05
    test 343 isclockwise: False
    test 344 isconvex: True
    test 345 ispolar: False
    test 346 areaOf: 7.086883e+09
    test 347 perimeterOf: 2.687460e+05
    test 348 centroidOf: 0.333333, 0.333333
    test 349 isclockwise: True
    test 350 isconvex: True
    test 351 ispolar: False
    test 352 areaOf: 2.827856e+10
    test 353 perimeterOf: 4.717039e+05
    test 354 centroidOf: 1.0, 1.0
    test 355 isclockwise: False
    test 356 isconvex: True
    test 357 ispolar: False
    test 358 areaOf: 2.747297e+13
    test 359 perimeterOf: 2.332643e+07
    test 360 centroidOf: 52.113, 102.123
    test 361 isclockwise: False
    test 362 isconvex: False
    test 363 ispolar: True
    test 364 areaOf: 8.482014e+10
    test 365 perimeterOf: 1.334104e+06
    test 366 centroidOf: 1.167, 1.667
    test 367 isclockwise: False
    test 368 isconvex: False
    test 369 ispolar: False
    test 370 areaOf: 5.151974e+13
    test 371 perimeterOf: 2.638608e+07
    test 372 centroidOf: -19.444, -133.333
    test 373 isclockwise: True
    test 374 isconvex: True
    test 375 ispolar: False
    test 376 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 377 perimeterOf: 1.562029e+07
    test 378 centroidOf: -72.926, 46.47
    test 379 isclockwise: True
    test 380 isconvex: False
    test 381 ispolar: True
    test 382 points2: 18
    test 383 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 384 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 385 isclockwise: True
    test 386 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 387 latlon: (-66.6, -88.0)
    test 388 philam: (-1.162389, -1.53589)
    test 389 latlonheight: (-66.6, -88.0, 0)
    test 390 philamheight: (-1.162389, -1.53589, 0)
    test 391 _N_vector: (0.01386, -0.39691, -0.91775)
    test 392 toNvector: (0.01386, -0.39691, -0.91775)
    test 393 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 394 classof: 66.6°S, 088.0°W
    test 395 others: 66.6°S, 088.0°W
    test 396 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 397 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 398 areaOf: 8.811228e+09
    test 399 centroidOf: 45.5, 1.5
    test 400 perimeterOf: 2.673633e+05
    test 401 isclockwise: False
    test 402 isconvex: True
    test 403 ispolar: False
    test 404 areaOf: 7.086883e+09
    test 405 perimeterOf: 2.687460e+05
    test 406 centroidOf: 0.333333, 0.333333
    test 407 isclockwise: True
    test 408 isconvex: True
    test 409 ispolar: False
    test 410 areaOf: 2.827856e+10
    test 411 perimeterOf: 4.717039e+05
    test 412 centroidOf: 1.0, 1.0
    test 413 isclockwise: False
    test 414 isconvex: True
    test 415 ispolar: False
    test 416 areaOf: 2.747297e+13
    test 417 perimeterOf: 2.332643e+07
    test 418 centroidOf: 52.113, 102.123
    test 419 isclockwise: False
    test 420 isconvex: False
    test 421 ispolar: True
    test 422 areaOf: 8.482014e+10
    test 423 perimeterOf: 1.334104e+06
    test 424 centroidOf: 1.167, 1.667
    test 425 isclockwise: False
    test 426 isconvex: False
    test 427 ispolar: False
    test 428 areaOf: 5.151974e+13
    test 429 perimeterOf: 2.638608e+07
    test 430 centroidOf: -19.444, -133.333
    test 431 isclockwise: True
    test 432 isconvex: True
    test 433 ispolar: False
    test 434 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 435 perimeterOf: 1.562029e+07
    test 436 centroidOf: -72.926, 46.47
    test 437 isclockwise: True
    test 438 isconvex: False
    test 439 ispolar: True
    test 440 points2: 18
    test 441 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 442 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 443 isclockwise: True
    test 444 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 445 latlon: (-66.6, -88.0)
    test 446 philam: (-1.162389, -1.53589)
    test 447 latlonheight: (-66.6, -88.0, 0)
    test 448 philamheight: (-1.162389, -1.53589, 0)
    test 449 _N_vector: (0.01386, -0.39691, -0.91775)
    test 450 toNvector: (0.01386, -0.39691, -0.91775)
    test 451 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 452 classof: 66.6°S, 088.0°W
    test 453 others: 66.6°S, 088.0°W
    test 454 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 455 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 456 areaOf: 8.811228e+09
    test 457 centroidOf: 45.5, 1.5
    test 458 perimeterOf: 2.673633e+05
    test 459 isclockwise: False
    test 460 isconvex: True
    test 461 ispolar: False
    test 462 areaOf: 7.086883e+09
    test 463 perimeterOf: 2.687460e+05
    test 464 centroidOf: 0.333333, 0.333333
    test 465 isclockwise: True
    test 466 isconvex: True
    test 467 ispolar: False
    test 468 areaOf: 2.827856e+10
    test 469 perimeterOf: 4.717039e+05
    test 470 centroidOf: 1.0, 1.0
    test 471 isclockwise: False
    test 472 isconvex: True
    test 473 ispolar: False
    test 474 areaOf: 2.747297e+13
    test 475 perimeterOf: 2.332643e+07
    test 476 centroidOf: 52.113, 102.123
    test 477 isclockwise: False
    test 478 isconvex: False
    test 479 ispolar: True
    test 480 areaOf: 8.482014e+10
    test 481 perimeterOf: 1.334104e+06
    test 482 centroidOf: 1.167, 1.667
    test 483 isclockwise: False
    test 484 isconvex: False
    test 485 ispolar: False
    test 486 areaOf: 5.151974e+13
    test 487 perimeterOf: 2.638608e+07
    test 488 centroidOf: -19.444, -133.333
    test 489 isclockwise: True
    test 490 isconvex: True
    test 491 ispolar: False
    test 492 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 493 perimeterOf: 1.562029e+07
    test 494 centroidOf: -72.926, 46.47
    test 495 isclockwise: True
    test 496 isconvex: False
    test 497 ispolar: True
    test 498 points2: 18
    test 499 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 500 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 501 isclockwise: True
    test 502 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 503 latlon: (-66.6, -88.0)
    test 504 philam: (-1.162389, -1.53589)
    test 505 latlonheight: (-66.6, -88.0, 0)
    test 506 philamheight: (-1.162389, -1.53589, 0)
    test 507 _N_vector: (0.01386, -0.39691, -0.91775)
    test 508 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 509 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 510 classof: 66.6°S, 088.0°W
    test 511 others: 66.6°S, 088.0°W
    test 512 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 513 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 514 areaOf: 8.811228e+09
    test 515 centroidOf: 45.5, 1.5
    test 516 perimeterOf: 2.673633e+05
    test 517 isclockwise: False
    test 518 isconvex: True
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 519 ispolar: False
    test 520 areaOf: 7.086883e+09
    test 521 perimeterOf: 2.687460e+05
    test 522 centroidOf: 0.333333, 0.333333
    test 523 isclockwise: True
    test 524 isconvex: True
    test 525 ispolar: False
    test 526 areaOf: 2.827856e+10
    test 527 perimeterOf: 4.717039e+05
    test 528 centroidOf: 1.0, 1.0
    test 529 isclockwise: False
    test 530 isconvex: True
    test 531 ispolar: False
    test 532 areaOf: 2.747297e+13
    test 533 perimeterOf: 2.332643e+07
    test 534 centroidOf: 52.113, 102.123
    test 535 isclockwise: False
    test 536 isconvex: False
    test 537 ispolar: True
    test 538 areaOf: 8.482014e+10
    test 539 perimeterOf: 1.334104e+06
    test 540 centroidOf: 1.167, 1.667
    test 541 isclockwise: False
    test 542 isconvex: False
    test 543 ispolar: False
    test 544 areaOf: 5.151974e+13
    test 545 perimeterOf: 2.638608e+07
    test 546 centroidOf: -19.444, -133.333
    test 547 isclockwise: True
    test 548 isconvex: True
    test 549 ispolar: False
    test 550 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 551 perimeterOf: 1.562029e+07
    test 552 centroidOf: -72.926, 46.47
    test 553 isclockwise: True
    test 554 isconvex: False
    test 555 ispolar: True
    test 556 points2: 18
    test 557 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 558 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 559 isclockwise: True
    test 560 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 561 latlon: (-66.6, -88.0)
    test 562 philam: (-1.162389, -1.53589)
    test 563 latlonheight: (-66.6, -88.0, 0)
    test 564 philamheight: (-1.162389, -1.53589, 0)
    test 565 _N_vector: (0.01386, -0.39691, -0.91775)
    test 566 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 567 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 568 classof: 66.6°S, 088.0°W
    test 569 others: 66.6°S, 088.0°W
    test 570 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 571 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 24.10.24, LatLon=<class 'pygeodesy.ellipsoidalExact.LatLon'>)
    test 572 areaOf: 8.811228e+09
    test 573 centroidOf: 45.5, 1.5
    test 574 perimeterOf: 2.673633e+05
    test 575 isclockwise: False
    test 576 isconvex: True
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1062
# lazily imported pygeodesy.elliptic by gx.py line 426
    test 577 ispolar: False
    test 578 areaOf: 7.086883e+09
    test 579 perimeterOf: 2.687460e+05
    test 580 centroidOf: 0.333333, 0.333333
    test 581 isclockwise: True
    test 582 isconvex: True
    test 583 ispolar: False
    test 584 areaOf: 2.827856e+10
    test 585 perimeterOf: 4.717039e+05
    test 586 centroidOf: 1.0, 1.0
    test 587 isclockwise: False
    test 588 isconvex: True
    test 589 ispolar: False
    test 590 areaOf: 2.747297e+13
    test 591 perimeterOf: 2.332643e+07
    test 592 centroidOf: 52.113, 102.123
    test 593 isclockwise: False
    test 594 isconvex: False
    test 595 ispolar: True
    test 596 areaOf: 8.482014e+10
    test 597 perimeterOf: 1.334104e+06
    test 598 centroidOf: 1.167, 1.667
    test 599 isclockwise: False
    test 600 isconvex: False
    test 601 ispolar: False
    test 602 areaOf: 5.151974e+13
    test 603 perimeterOf: 2.638608e+07
    test 604 centroidOf: -19.444, -133.333
    test 605 isclockwise: True
    test 606 isconvex: True
    test 607 ispolar: False
    test 608 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 609 perimeterOf: 1.562029e+07
    test 610 centroidOf: -72.926, 46.47
    test 611 isclockwise: True
    test 612 isconvex: False
    test 613 ispolar: True
    test 614 points2: 18
    test 615 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 616 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 617 isclockwise: True
    test 618 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2098430.887891
    test 619 latlon: (-66.6, -88.0)
    test 620 philam: (-1.162389, -1.53589)
    test 621 latlonheight: (-66.6, -88.0, 0)
    test 622 philamheight: (-1.162389, -1.53589, 0)
    test 623 _N_vector: (0.01386, -0.39691, -0.91775)
    test 624 toNvector: (0.01386, -0.39691, -0.91775, 0)
    test 625 toNvector: (0.01386, -0.396906, -0.917755, 0)
    test 626 classof: 66.6°S, 088.0°W
    test 627 others: 66.6°S, 088.0°W
    test 628 copy(LatLon): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)
    test 629 LatLon.copy(): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)

    testArea(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 630 luneOf: 1.27516405431022e+14

    testArea(pygeodesy.ellipsoidalExact, 24.11.06)
    test 631 luneOf: 1.27516405431022e+14

    67 of 631 testPoints.py tests (10.6%) FAILED, incl. 21 KNOWN plus 46 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 3.670 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testProps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Property from .props by testProps.py line 11
# lazily imported pygeodesy.Property_RO from .props by testProps.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testProps.py line 149
# lazily imported pygeodesy.R_M from .constants by testProps.py line 149

    testing testProps.py 23.03.27 isLazy=3

    test<class 'pygeodesy.named._NamedBase'>(pygeodesy.props, 24.11.06)
    test 1 P1: 1
    test 2 p1: 2
    test 3 P2: 1
    test 4 p2: 3
    test 5 q1: 1
    test 6 q2: 2
    test 7 q3: True
    test 8 u1: None
    test 9 u2: U
    test 10 P3: 4
    test 11 p3: 5
    test 12 q4: False
    test 13 q5: 2
    test 14 u3: None
    test 15 u4: U
    test 16 X1: immutable Property_RO: X.setter X
    test 17 X2: invalid Property_RO: X.deleter X
    test 18 y1: immutable property_RO: y.setter y
    test 19 y2: invalid property_RO: y.deleter y
    test 20 Z1: invalid Property: Z.deleter Z
    test 21 Z2: invalid Property: Z.getter Z

    test<class 'pygeodesy.ellipsoids.Ellipsoid'>(pygeodesy.props, 24.11.06)
    test 22 P1: 1
    test 23 p1: 2
    test 24 P2: 1
    test 25 p2: 3
    test 26 q1: 1
    test 27 q2: 2
    test 28 q3: True
    test 29 u1: None
    test 30 u2: U
    test 31 P3: 4
    test 32 p3: 5
    test 33 q4: False
    test 34 q5: 2
    test 35 u3: None
    test 36 u4: U
    test 37 X1: immutable Property_RO: X.setter X
    test 38 X2: invalid Property_RO: X.deleter X
    test 39 y1: immutable property_RO: y.setter y
    test 40 y2: invalid property_RO: y.deleter y
    test 41 Z1: invalid Property: Z.deleter Z
    test 42 Z2: invalid Property: Z.getter Z

    all 42 testProps.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 658.035 us

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testResections.py
./test/testResections.py:40: DeprecationWarning: method L{collins<__main__.Cartesian_.collins>} has been DEPRECATED, use method L{collins5}.
  self.test(collins.__name__, C_(A).collins(C, B, 109.5125, 115.0889), t, nl=1)  # DEPRECATED
./test/testResections.py:63: DeprecationWarning: method L{tienstra<__main__.Cartesian_.tienstra>} has been DEPRECATED, use method L{tienstra7}.
  self.test(tienstra.__name__, C_(A).tienstra(B, C, 115.0889, None, 109.5125), t, nl=1)  # DEPRECATED
./test/testResections.py:72: DeprecationWarning: function L{collins<pygeodesy.deprecated.functions.collins>} has been DEPRECATED, use function L{pygeodesy.collins5}.
  self.test(collins.__name__, collins(A, C, B, 109.3, 115.1), t, nl=1)  # DEPRECATED
./test/testResections.py:94: DeprecationWarning: function L{tienstra<pygeodesy.deprecated.functions.tienstra>} has been DEPRECATED, use function L{pygeodesy.tienstra7}.
  self.test(tienstra.__name__, tienstra(A, B, C, 115.1, beta=135.6, gamma=109.3), t, nl=1)  # DEPRECATED
./test/testResections.py:100: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(10, 30, c)
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{TriAngle4Tuple<pygeodesy.deprecated.classes.TriAngle4Tuple>} has been DEPRECATED on 2023.09.14, use class L{TriAngle5Tuple}, ignoring item C{area}.
  deprecated_class(cls)
./test/testResections.py:107: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(320, 435, 598)
./test/testResections.py:111: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(100, 100, 100)
./test/testResections.py:115: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(435, 320, 600)
./test/testResections.py:119: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  rA, rB, rC, _ = triAngle4(1716, 924, 1056)
./test/testResections.py:126: DeprecationWarning: function L{triAngle4<pygeodesy.deprecated.functions.triAngle4>} has been DEPRECATED on 2023.09.14, use function L{pygeodesy.triAngle5}.
  t = triAngle4(1, 2, EPS0 / 2)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS0 from .constants by testResections.py line 11
# lazily imported pygeodesy.PI from .constants by testResections.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testResections.py line 11
# lazily imported pygeodesy.cassini from .resections by testResections.py line 11
# lazily imported pygeodesy.collins5 from .resections by testResections.py line 11
# lazily imported pygeodesy.fstr from .streprs by testResections.py line 11
# lazily imported pygeodesy.pierlot from .resections by testResections.py line 11
# lazily imported pygeodesy.pierlotx from .resections by testResections.py line 11
# lazily imported pygeodesy.ResectionError from .resections by testResections.py line 11
# lazily imported pygeodesy.snellius3 from .resections by testResections.py line 11
# lazily imported pygeodesy.tienstra7 from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle5 from .resections by testResections.py line 11
# lazily imported pygeodesy.triArea from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide2 from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide4 from .resections by testResections.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testResections.py line 11
# lazily imported pygeodesy.wildberger3 from .resections by testResections.py line 11

    testing testResections.py 24.03.23 isLazy=3
    test 1 cassini: (2128.3903, 5578.1443, 0)
    test 2 cassini: Cartesian_(2128.3903, 5578.1443, 0)

    test 3 collins5: (2128.3903, 5578.1443, 0)
    test 4 collins5: (1830.5948, 2576.2429, 0)
    test 5 collins5: 1581.1388, 1562.0499, 2121.3203
    test 6 collins5: Cartesian_(2128.3903, 5578.1443, 0)
    test 7 collins5: Cartesian_(1830.5948, 2576.2429, 0)
    test 8 collins5: 1581.1388, 1562.0499, 2121.3203
    test 9 collins5: 1581.1388, 1562.0499, 2121.3203

    test 10 collins: (Cartesian_(2128.39, 5578.144, 0), Cartesian_(1830.595, 2576.243, 0), 1581.13883, 1562.049935, 2121.320344)

    test 11 pierlot: (2128.3903, 5578.1443, 0)
    test 12 pierlot: Cartesian_(2128.3903, 5578.1443, 0)
    test 13 pierlot: Cartesian_(2128.3903, 5578.1443, 0.0)

    test 14 pierlotx: (2128.3903, 5578.1443, 0)
    test 15 pierlotx: Cartesian_(2128.3903, 5578.1443, 0)
    test 16 pierlotx: Cartesian_(2128.3903, 5578.1443, 0.0)

    test 17 tienstra7: (2128.3903, 5578.1443, 0)
    test 18 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 19 tienstra7: Cartesian_(2128.3903, 5578.1443, 0)
    test 20 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 21 tienstra: (Cartesian_(2128.39, 5578.144, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 22 cassini: (2129.3018, 5575.8016, 0)

    test 23 collins5: (2129.3018, 5575.8016, 0)
    test 24 collins5: (1835.1911, 2563.0708, 0)
    test 25 collins5: 1581.1388, 1562.0499, 2121.3203

    test 26 collins: (Vector3d(2129.30185, 5575.80164, 0), Vector3d(1835.19112, 2563.07083, 0), 1581.13883, 1562.049935, 2121.320344)

    test 27 pierlot: (2129.3018, 5575.8016, 0)
    test 28 pierlot: alpha12 (115.1), alpha23 (109.3), eps (0), point1 (Vector3d(3100.0, 5000.0, 0)), point2 (Vector3d(2200.0, 6300.0, 0)) or point3 (Vector3d(1000.0, 5300.0, 0)): eps not positive

    test 29 pierlotx: (2129.3018, 5575.8016, 0)
    test 30 pierlotx: (2128.2026, 4708.1218, 0)
    test 31 pierlotx: (1969.0673, 6633.5695, 0)
    test 32 pierlotx: (2438.0239, 5094.568, 0)

    test 33 tienstra7: (2129.3018, 5575.8016, 0)
    test 34 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 35 tienstra: (Vector3d(2129.30185, 5575.80164, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 36 triSide4: (10.0, 30.0, 0.785398, 8.840862)

    test 37 snellius3: (17.54582, 38.564239, 46.317675)
    test 38 snellius3: (844.880591, 571.107418, 835.462796)
    test 39 snellius3: (128.557522, 100.0, 187.938524)
    test 40 snellius3: (567.480866, 847.344375, 832.446688)
    test 41 snellius3: (4064.197388, 3652.539386, 4988.197388)

    test 42 wildberger3: (17.54582, 38.56424, 46.317675)
    test 43 wildberger3: (844.880591, 571.107418, 835.462796)
    test 44 wildberger3: (128.557522, 100.0, 187.938524)
    test 45 wildberger3: (567.480866, 847.344375, 832.446688)
    test 46 wildberger3: (4064.197353, 3652.539342, 4988.197355)  FAILED, KNOWN, expected (4064.197343, 3652.539342, 4988.197355)

    test 47 triAngle: 3.141592654
    test 48 triAngle4: (1.570796, 1.570796, 0.0, 0.0)
    test 49 triAngle5: (1.570796, 1.570796, 0.0, 0.0, 0.0)
    test 50 triAngle5: (0.24871, 0.927295, 1.965587, 1.5, 24.0)
    test 51 triArea: 24.0
    test 52 triSide2: (2.0, 0.0)
    test 53 triSide2: (2.0, 3.141593)

    17 of 53 testResections.py tests (32.1%) FAILED, incl. 1 KNOWN plus 16 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 24.376 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testRhumb_aux_.py
./test/testRhumb_aux_.py:267: DeprecationWarning: method L{distance2<pygeodesy.rhumb.aux_.RhumbLineAux.distance2>} has been DEPRECATED on 23.09.23, use method L{RhumbLineAux.Inverse} or L{RhumbLine.Inverse}.
  t = r.distance2(p.lat2, p.lon2)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Caps from .karney by testRhumb_aux_.py line 11
# lazily imported pygeodesy.classname from .named by testRhumb_aux_.py line 11
# lazily imported pygeodesy.DIG from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testRhumb_aux_.py line 11
# lazily imported pygeodesy.GDict from .karney by testRhumb_aux_.py line 11
# lazily imported pygeodesy.isfinite from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.itemsorted from .basics by testRhumb_aux_.py line 11
# lazily imported pygeodesy.latDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.parseDMS2 from .dms by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbAux from .rhumb.aux_ by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbLineAux from .rhumb.aux_ by testRhumb_aux_.py line 11
# lazily imported pygeodesy.RhumbLineSolve from .rhumb.solve by testRhumb_aux_.py line 11
# lazily imported pygeodesy.R_M from .constants by testRhumb_aux_.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testRhumb_aux_.py line 11
# lazily imported pygeodesy.fremainder from .fmath by testRhumb_aux_.py line 11

    testing testRhumb_aux_.py 24.08.30 (module pygeodesy.rhumb.aux_ 24.09.02) isLazy=3

    testDirectX vs ...(pygeodesy.rhumb.aux_, 24.09.02)
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 21.3781208262067  FAILED, KNOWN (0.402846), expected 35.79999595
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: -102.999609498889  FAILED, KNOWN (1.73414), expected 140.3000041
    test 6 Direct.s12: 12782581.068

    20 tests skipped (20): No module named 'numpy': required by auxDST.AuxDST

    testInverseX vs ...(pygeodesy.rhumb.aux_, 24.09.02)
    test 7 Inverse.azi12: -92.3888879816997  FAILED, KNOWN (2.18457e-08), expected -92.38889
    test 8 Inverse.lat1: 40.6
    test 9 Inverse.lat2: 35.8
    test 10 Inverse.lon1: -73.8
    test 11 Inverse.lon2: 140.3
    test 12 Inverse.s12: 1282.19384243156  FAILED, KNOWN (1.8964e-09), expected 1282.19384
    test 13 Inverse.S12: 21234695071407.8  FAILED, KNOWN (0.00128112), expected 21207525604650.8

    60 tests skipped (80): No module named 'numpy': required by auxDST.AuxDST

    test 14 R.exact: True
    test 15 R.exact: False
    test 16 R: RhumbAux(RAorder=None, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=False)

    test 17 R.exact: True
    test 18 R.Line.exact: True
# lazily imported pygeodesy.etm by bases.py line 1012
    test 19 R.Line: RhumbLineAux(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=RhumbAux(RAorder=None, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0))
# lazily imported pygeodesy.ktm by bases.py line 446
# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1023

    test 20 PlumbTo(exact=False, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 21 a02: 17.967658
    test 22 s02: 1997960.116871
    test 23 s12: 3083112.636236
    test 24 azi0: 113.736
    test 25 azi2: 135.000
    test 26 iteration: 7

    test 27 PlumbTo(exact=False, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 28 a02: 17.967658
    test 29 s02: 1997960.116871
    test 30 s12: 3083112.636236
    test 31 azi0: 113.736
    test 32 azi2: 135.000
    test 33 iteration: 5
# lazily imported pygeodesy.formy by bases.py line 703

    test 34 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 35 azi0*=-90.000: exact=False, iteration=4, max=0, mean=-0.0, min=-0.0, stdev=0.0

    test 36 PlumbTo(exact=True, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 37 a02: 17.967658
    test 38 s02: 1997960.116871
    test 39 s12: 3083112.636236
    test 40 azi0: 113.736
    test 41 azi2: 135.000
    test 42 iteration: 7

    test 43 PlumbTo(exact=True, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 44 a02: 17.967658
    test 45 s02: 1997960.116871
    test 46 s12: 3083112.636236
    test 47 azi0: 113.736
    test 48 azi2: 135.000
    test 49 iteration: 5

    test 50 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 51 azi0*=-90.000: exact=True, iteration=4, max=0, mean=-0.0, min=-0.0, stdev=0.0

    test 52 PlumbTo(exact=None, est=None): Intersection(a02=17.798332, a12=19.521356, at=90.0, azi02=135.0, azi12=45.0, lat0=60.0, lat1=30.0, lat2=45.0, lon0=0.0, lon1=0.0, lon2=15.830286, name='Intersection', s02=1977981.142985, s12=2169465.957531)
    test 53 a02: 17.798332
    test 54 s02: 1977981.142985
    test 55 s12: 2169465.957531
    test 56 azi02: 135.000
    test 57 iteration: 9

    test 58 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 59 azi0*=90.000: exact=None, iteration=15, max=0, mean=-1.802066, min=-5.060016, stdev=2.124232

    test 60 xTM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)

    test 61 Intersection: Intersection(a02=42.220588, a12=16.98358, at=-85.0, azi02=-50.0, azi12=35.0, lat0=0.0, lat1=10.0, lat2=23.944114, lon0=-10.0, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=4694721.624938, s12=1888490.587742)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 62 PlumbTo: Intersection(a02=0.0, a12=16.98358, at=90.0, azi02=125.0, azi12=35.0, lat0=23.944114, lat1=10.0, lat2=23.944114, lon0=-45.833131, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=0.000044, s12=1888490.587743)
    test 63 PlumbTo: Intersection(a02=0.0, a12=42.220588, at=90.0, azi02=40.0, azi12=-50.0, lat0=23.944114, lat1=0.0, lat2=23.944114, lon0=-45.833131, lon1=-10.0, lon2=-45.833131, name='Intersection', s02=0.00026, s12=4694721.624901)
    test 64 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    test 65 Intersection: Intersection(a02=31.539478, a12=26.853309, at=-135.0, azi02=-45.0, azi12=90.0, lat0=15.0, lat1=37.0, lat2=37.0, lon0=-17.0, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=3507034.715572, s12=2985955.796006)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 66 PlumbTo: Intersection(a02=0.0, a12=26.853309, at=90.0, azi02=180.0, azi12=90.0, lat0=37.0, lat1=37.0, lat2=37.0, lon0=-42.376015, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=0.000162, s12=2985955.795978)
    test 67 PlumbTo: Intersection(a02=0.0, a12=31.539478, at=90.0, azi02=45.0, azi12=-45.0, lat0=37.0, lat1=15.0, lat2=37.0, lon0=-42.376015, lon1=-17.0, lon2=-42.376015, name='Intersection', s02=0.000092, s12=3507034.71557)
    test 68 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    28 of 68 testRhumb_aux_.py tests (41.2%) FAILED, incl. 7 KNOWN plus 21 DeprecationWarnings, 80 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 8.260 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testRhumb_ekx.py
./test/testRhumb_ekx.py:37: DeprecationWarning: property_RO L{rhumbx<pygeodesy.ellipsoids.Ellipsoid.rhumbx>} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:129: DeprecationWarning: property_RO L{rhumbx<pygeodesy.ellipsoids.Ellipsoid.rhumbx>} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:184: DeprecationWarning: property_RO L{rhumbx<pygeodesy.ellipsoids.Ellipsoid.rhumbx>} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  P = Ellipsoid(E.b, E.a, name='_Prolate').rhumbx  # '_...' for iOS
./test/testRhumb_ekx.py:218: DeprecationWarning: property_RO L{rhumbx<pygeodesy.ellipsoids.Ellipsoid.rhumbx>} has been DEPRECATED on 2023.11.28, use property C{rhumbekx}.
  R = E.rhumbx
./test/testRhumb_ekx.py:228: DeprecationWarning: method L{orders<pygeodesy.rhumb.ekx.Rhumb.orders>} has been DEPRECATED, use properties C{RAorder} and/or C{TMorder}.
  t = R.orders(4, 8)
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{RhumbOrder2Tuple<pygeodesy.deprecated.classes.RhumbOrder2Tuple>} has been DEPRECATED, see deprecated method L{Rhumb.orders}.
  deprecated_class(cls)
./test/testRhumb_ekx.py:230: DeprecationWarning: method L{orders<pygeodesy.rhumb.ekx.Rhumb.orders>} has been DEPRECATED, use properties C{RAorder} and/or C{TMorder}.
  t = R.orders(6, 6)
./test/testRhumb_ekx.py:269: DeprecationWarning: method L{distance2<pygeodesy.rhumb.ekx.RhumbLine.distance2>} has been DEPRECATED on 23.09.23, use method L{RhumbLineAux.Inverse} or L{RhumbLine.Inverse}.
  t = r.distance2(p.lat2, p.lon2)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Caps from .karney by testRhumb_ekx.py line 11
# lazily imported pygeodesy.classname from .named by testRhumb_ekx.py line 11
# lazily imported pygeodesy.DIG from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testRhumb_ekx.py line 11
# lazily imported pygeodesy.GDict from .karney by testRhumb_ekx.py line 11
# lazily imported pygeodesy.isfinite from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.itemsorted from .basics by testRhumb_ekx.py line 11
# lazily imported pygeodesy.latDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.parseDMS2 from .dms by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Rhumb from .rhumb.ekx by testRhumb_ekx.py line 11
# lazily imported pygeodesy.RhumbLine from .rhumb.ekx by testRhumb_ekx.py line 11
# lazily imported pygeodesy.RhumbLineSolve from .rhumb.solve by testRhumb_ekx.py line 11
# lazily imported pygeodesy.R_M from .constants by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testRhumb_ekx.py line 11
# lazily imported pygeodesy.fremainder from .fmath by testRhumb_ekx.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testRhumb_ekx.py line 346

    testing testRhumb_ekx.py 23.11.30 (module pygeodesy.rhumb.ekx 24.06.11) isLazy=3

    testDirectX vs ...(pygeodesy.rhumb.ekx, 24.06.11)
# lazily imported pygeodesy.elliptic by ellipsoids.py line 842
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.79999
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.23651
    test 6 Direct.s12: 12782581.068

    test 7 GDict.azi12: 51
    test 8 GDict.lat1: 40.6
    test 9 GDict.lat2: 71.688899882813
    test 10 GDict.lon1: -73.8
    test 11 GDict.lon2: 0.255519824423359
    test 12 GDict.s12: 5500000
    test 13 GDict.S12: 44095641862956.1
# lazily imported pygeodesy.etm by bases.py line 1012

    test 14 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 15 Rhumb: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True)
    test 16 isLoxodrome: True

    test 17 ArcPosition.a12: 51
    test 18 ArcPosition.azi12: 51
    test 19 ArcPosition.lat1: 40.6
    test 20 ArcPosition.lat2: 72.6351275818438  FAILED, KNOWN, expected 72.635128
    test 21 ArcPosition.lon1: -73.8
    test 22 ArcPosition.lon2: 4.06852757947455  FAILED, KNOWN, expected 4.068528
    test 23 ArcPosition.s12: 5667780.57994388  FAILED, KNOWN, expected 5667780.579944
    test 24 ArcPosition.S12: 46665957571716.4

    test 25 Position.a12: 51
    test 26 Position.azi12: 51
    test 27 Position.lat1: 40.6
    test 28 Position.lat2: 72.6351275818438  FAILED, KNOWN, expected 72.635128
    test 29 Position.lon1: -73.8
    test 30 Position.lon2: 4.06852757947455  FAILED, KNOWN, expected 4.068528
    test 31 Position.s12: 5667780.57994388
    test 32 Position.S12: 46665957571716.4

    test 33 Direct.a12: 115.020619671634  FAILED, KNOWN, expected 115.02062
    test 34 Direct.azi12: -92.38889
    test 35 Direct.lat1: 40.6
    test 36 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 37 Direct.lon1: -73.8
    test 38 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 39 Direct.s12: 12782581.068

    test 40 ArcDirect.a12: 115.020619671634
    test 41 ArcDirect.azi12: -92.38889
    test 42 ArcDirect.lat1: 40.6
    test 43 ArcDirect.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 44 ArcDirect.lon1: -73.8
    test 45 ArcDirect.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 46 ArcDirect.s12: 12782581.068

    test 47 Direct8: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.765625, 115.02062)
    test 48 toDirect9Tuple: (115.02062, 35.799996, 140.300004, -92.38889, 12782581.068, 12782581.068, 1.0, 1.0, -63760638302268.765625)
    test 49 DirectLine: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.765625, 115.02062)

    test 50 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 51 DirectLine: TMorder=6, azi12=-51.0, exact=True, lat1=35.8, lon1=140.3, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)

    testInverseX vs ...(pygeodesy.rhumb.ekx, 24.06.11)
    test 52 Inverse.azi12: -92.3888879816997  FAILED, KNOWN, expected -92.38889
    test 53 Inverse.lat1: 40.6
    test 54 Inverse.lat2: 35.8
    test 55 Inverse.lon1: -73.8
    test 56 Inverse.lon2: 140.3
    test 57 Inverse.s12: 12782581.0676842
    test 58 Inverse.S12: -63760642939072.5  FAILED, KNOWN, expected -63760642939073

    test 59 GDict.azi12: 77.7683897102557
    test 60 GDict.lat1: 40.6
    test 61 GDict.lat2: 51.6
    test 62 GDict.lon1: -73.8
    test 63 GDict.lon2: -0.5
    test 64 GDict.s12: 5771083.38332803
    test 65 GDict.S12: 37395209100030.4

    test 66 Inverse.azi12: 103.582833003411  FAILED, KNOWN, expected 103.582833333333
    test 67 Inverse.lat1: 40.6397222222222  FAILED, KNOWN, expected 40.639722
    test 68 Inverse.lat2: 1.35916666666667  FAILED, KNOWN, expected 1.359167
    test 69 Inverse.lon2: 103.989444444444  FAILED, KNOWN, expected 103.989444
    test 70 Inverse.s12: 18523563.0423774  FAILED, KNOWN, expected 18523563

    test 71 0,000 Km lat2: 40:38:23.0N
    test 72 0,000 Km lon2: 073:46:44.0W
    test 73 0,000 Km S12 : 0
    test 74 1,000 Km lat2: 36:24:30.3N
    test 75 1,000 Km lon2: 051:28:26.4W
    test 76 1,000 Km S12 : 9817078307820  FAILED, KNOWN, expected 9817078307821
    test 77 2,000 Km lat2: 32:10:26.8N
    test 78 2,000 Km lon2: 030:20:57.3W
    test 79 2,000 Km S12 : 18224745682004  FAILED, KNOWN, expected 18224745682005
    test 80 3,000 Km lat2: 27:56:13.2N
    test 81 3,000 Km lon2: 010:10:54.2W
    test 82 3,000 Km S12 : 25358020327741
    test 83 4,000 Km lat2: 23:41:50.1N
    test 84 4,000 Km lon2: 009:12:45.5E
    test 85 4,000 Km S12 : 31321269267101  FAILED, KNOWN, expected 31321269267102
    test 86 5,000 Km lat2: 19:27:18.7N
    test 87 5,000 Km lon2: 027:59:22.1E
    test 88 5,000 Km S12 : 36195163180159
    test 89 6,000 Km lat2: 15:12:40.2N
    test 90 6,000 Km lon2: 046:17:01.1E
    test 91 6,000 Km S12 : 40041499143669
    test 92 7,000 Km lat2: 10:57:55.9N
    test 93 7,000 Km lon2: 064:12:52.8E
    test 94 7,000 Km S12 : 42906570007050
    test 95 8,000 Km lat2: 06:43:07.3N
    test 96 8,000 Km lon2: 081:53:28.8E
    test 97 8,000 Km S12 : 44823504180200
    test 98 9,000 Km lat2: 02:28:16.2N
    test 99 9,000 Km lon2: 099:24:54.5E
    test 100 9,000 Km S12 : 45813843358737
    test 101 10,000 Km lat2: 01:46:36.0S
    test 102 10,000 Km lon2: 116:52:59.7E
    test 103 10,000 Km S12 : 45888525219677

    test 104 Inverse: {a12: 51.420061, azi12: 77.692032, azi21: -102.307968, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, name: '_Prolate', s12: 5733622.743165}
    test 105 Inverse8: (40.6, -73.8, 51.6, -0.5, 77.692032, 5733622.743165, 37469093881942.273438, 51.420061)
    test 106 toInverse10Tuple: (51.420061, 5733622.743165, 0.977016, 0.213166, 0.977016, 0.213166, 5733622.743165, 1.0, 1.0, 37469093881942.273438)
    test 107 InverseLine: -102.23161028974432

    test 108 R.exact: True
    test 109 R.exact: False
    test 110 R: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=False)

    test 111 R.exact: True
    test 112 R.Line.exact: True
    test 113 R.Line: RhumbLine(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), exact=True), xTM=ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0))
# lazily imported pygeodesy.deprecated by ekx.py line 205
    test 114 orders: (6, 6)
    test 115 orders: (4, 8)

# lazily imported pygeodesy.geodesicx by ellipsoids.py line 1023

    test 116 PlumbTo(exact=False, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 117 a02: 17.967658
    test 118 s02: 1997960.116871
    test 119 s12: 3083112.636236
    test 120 azi0: 113.736
    test 121 azi2: 135.000
    test 122 iteration: 7

    test 123 PlumbTo(exact=False, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 124 a02: 17.967658
    test 125 s02: 1997960.116871
    test 126 s12: 3083112.636236
    test 127 azi0: 113.736
    test 128 azi2: 135.000
    test 129 iteration: 5

    test 130 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 131 azi0*=-90.000: exact=False, iteration=4, max=0.0, mean=-0.0, min=-0.0, stdev=0.0

    test 132 PlumbTo(exact=True, est=1000000.0): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 133 a02: 17.967658
    test 134 s02: 1997960.116871
    test 135 s12: 3083112.636236
    test 136 azi0: 113.736
    test 137 azi2: 135.000
    test 138 iteration: 7

    test 139 PlumbTo(exact=True, est=None): PlumbTo(a02=17.967658, a12=27.74256, at=90.0, azi0=113.73626, azi12=45.0, lat0=60, lat1=30.0, lat2=49.634582, lon0=0, lon1=0.0, lon2=25.767876, name='PlumbTo', s02=1997960.116871, s12=3083112.636236)
    test 140 a02: 17.967658
    test 141 s02: 1997960.116871
    test 142 s12: 3083112.636236
    test 143 azi0: 113.736
    test 144 azi2: 135.000
    test 145 iteration: 5

    test 146 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 147 azi0*=-90.000: exact=True, iteration=4, max=0.0, mean=-0.0, min=-0.0, stdev=0.0

    test 148 PlumbTo(exact=None, est=None): Intersection(a02=17.798332, a12=19.521356, at=90.0, azi02=135.0, azi12=45.0, lat0=60.0, lat1=30.0, lat2=45.0, lon0=0.0, lon1=0.0, lon2=15.830286, name='Intersection', s02=1977981.142985, s12=2169465.957531)
    test 149 a02: 17.798332
    test 150 s02: 1977981.142985
    test 151 s12: 2169465.957531
    test 152 azi02: 135.000
    test 153 iteration: 9

    test 154 Intersecant2: (Intersecant2(a03=17.798332, a12=44.076956, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=61.164348, lat3=45.0, lon0=0.0, lon1=0.0, lon2=46.209348, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=4898402.305119), Intersecant2(a03=17.798332, a12=-5.034244, azi03=135.0, azi12=45.0, lat0=30.0, lat1=30.0, lat2=26.4303, lat3=45.0, lon0=0.0, lon1=0.0, lon2=-4.030999, lon3=15.830286, name='Intersecant2', s03=1977981.142985, s12=-559470.390057))
    test 155 azi0*=90.000: exact=None, iteration=15, max=0, mean=-1.802066, min=-5.060016, stdev=2.124232

    test 156 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518), k0=0.9996, TMorder=7)

    test 157 Intersection: Intersection(a02=41.823427, a12=16.45698, at=-85.0, azi02=-50.0, azi12=35.0, lat0=0.0, lat1=10.0, lat2=23.944114, lon0=-10.0, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=4650559.291378, s12=1829935.168035)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 158 PlumbTo: Intersection(a02=0.0, a12=16.45698, at=90.0, azi02=125.0, azi12=35.0, lat0=23.944114, lat1=10.0, lat2=23.944114, lon0=-45.833131, lon1=-56.0, lon2=-45.833131, name='Intersection', s02=0.000043, s12=1829935.168032)
    test 159 PlumbTo: Intersection(a02=0.0, a12=41.823427, at=90.0, azi02=40.0, azi12=-50.0, lat0=23.944114, lat1=0.0, lat2=23.944114, lon0=-45.833131, lon1=-10.0, lon2=-45.833131, name='Intersection', s02=0.000246, s12=4650559.291327)
    test 160 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    test 161 Intersection: Intersection(a02=29.910202, a12=26.853309, at=-135.0, azi02=-45.0, azi12=90.0, lat0=15.0, lat1=37.0, lat2=37.0, lon0=-17.0, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=3325867.316604, s12=2985955.796006)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 162 PlumbTo: Intersection(a02=0.0, a12=26.853309, at=90.0, azi02=180.0, azi12=90.0, lat0=37.0, lat1=37.0, lat2=37.0, lon0=-42.376015, lon1=-76.0, lon2=-42.376015, name='Intersection', s02=0.000129, s12=2985955.795978)
    test 163 PlumbTo: Intersection(a02=0.0, a12=29.910202, at=90.0, azi02=45.0, azi12=-45.0, lat0=37.0, lat1=15.0, lat2=37.0, lon0=-42.376015, lon1=-17.0, lon2=-42.376015, name='Intersection', s02=0.000081, s12=3325867.316586)
    test 164 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, f=0, f_=0, b=6371008.771415), k0=0.9996, TMorder=6)

    53 of 164 testRhumb_ekx.py tests (32.3%) FAILED, incl. 24 KNOWN plus 29 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 6.797 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testRoutes.py
./test/testRoutes.py:17103: DeprecationWarning: function L{areaOf<pygeodesy.ellipsoidalVincenty.areaOf>} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = f(pts, wrap=True, **kwds)
./pygeodesy/ellipsoidalKarney.py:139: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return fabs(_polygon(datum.ellipsoid.geodesic, points, True, False, wrap))
./test/testRoutes.py:17103: DeprecationWarning: function L{perimeterOf<pygeodesy.ellipsoidalVincenty.perimeterOf>} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  r = f(pts, wrap=True, **kwds)
./pygeodesy/ellipsoidalKarney.py:352: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return _polygon(datum.ellipsoid.geodesic, points, closed, True, wrap)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testRoutes.py 23.08.23 isLazy=3
# lazily imported pygeodesy.booleans by points.py line 978
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.01, wrap=True): 1751693.701  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.01, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.01, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.01, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.01, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.01, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.01, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.01, wrap=True): 10446635.730  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.01, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.01, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.01, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.01, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.01, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.01, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.01, wrap=True): 241480413.388
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.01, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.01, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.01, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.01, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.01, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.01, wrap=True): 80211278.393
# lazily imported pygeodesy.ellipsoidalKarney by ellipsoidalVincenty.py line 399
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
    test 22 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 23 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 24 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 25 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 26 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 27 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 28 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 29 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 30 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 31 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 32 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 33 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 34 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 35 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 36 points.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 37 points.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 38 points.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 39 points.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.129
    test 40 points.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672557.850
    test 41 points.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 42 points.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 43 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15470624.834
    test 44 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 45 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 46 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.116
    test 47 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672556.441
    test 48 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 15789078.314
    test 49 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26041264.665
    test 50 ellipsoidalVincenty.perimeterOf('Antarctica', closed=False, wrap=True): 15531947.149  FAILED, KNOWN, expected 15531770.613
    test 51 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=False, wrap=True): 3229.337
    test 52 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=False, wrap=True): 3190.602
    test 53 ellipsoidalVincenty.perimeterOf('Pts', closed=False, wrap=True): 2769709.679  FAILED, KNOWN, expected 2769709.412
    test 54 ellipsoidalVincenty.perimeterOf('VwPts', closed=False, wrap=True): 2679915.858
    test 55 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=False, wrap=True): 15766750.804  FAILED, KNOWN, expected 15763434.962
    test 56 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=False, wrap=True): 25981742.208  FAILED, KNOWN, expected 25972353.155
    test 57 ellipsoidalVincenty.perimeterOf('Antarctica', closed=True, wrap=True): 16831067.893  FAILED, KNOWN, expected 16830891.356
    test 58 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=True, wrap=True): 5491.045
    test 59 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=True, wrap=True): 5452.310
    test 60 ellipsoidalVincenty.perimeterOf('Pts', closed=True, wrap=True): 5259077.510  FAILED, KNOWN, expected 5259077.242
    test 61 ellipsoidalVincenty.perimeterOf('VwPts', closed=True, wrap=True): 5171947.931
    test 62 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=True, wrap=True): 23926469.479  FAILED, KNOWN, expected 23921931.540
    test 63 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=True, wrap=True): 31533501.608  FAILED, KNOWN, expected 31524112.555
    test 64 geographiclib.WNZ-SAL(WGS84): 19959679.267
    test 65 geographiclib.WNZ-SAL(WGS84): 354.50
    test 66 geographiclib.WNZ-SAL(Sphere): 19967403.498
    test 67 geographiclib.WNZ-SAL(Sphere): 354.50
    test 68 geographiclib.BJS-SFO(WGS84): 9513998.0
    test 69 geographiclib.BJS-SFO(WGS84): 237.6
    test 70 geographiclib.BJS-SFO(Sphere): 9491734.6
    test 71 geographiclib.BJS-SFO(Sphere): 237.6
    test 72 geographiclib.SW-Perth(WGS84): 32.11195529
    test 73 geographiclib.SW-Perth(WGS84): -63.95925278
    test 74 geographiclib.SW-Perth(Sphere): 31.96383509
    test 75 geographiclib.SW-Perth(Sphere): -64.14670854
    test 76 geographiclib.JFK-LHR(WGS84): 40041368848742.5
    test 77 geographiclib.JFK-LHR(WGS84): 5551759.4
    test 78 geographiclib.JFK-LHR(Sphere): 40105639196534.8
    test 79 geographiclib.JFK-LHR(Sphere): 5536892.0
    test 80 geographiclib.Antarctica Peri(WGS84): 16831067.893
    test 81 geographiclib.Antarctica Area(WGS84): 13662703680020.1
    test 82 geographiclib.Antarctica Peri(Sphere): 16765661.499
    test 83 geographiclib.Antarctica Area(Sphere): 13552524809674.8
    test 84 isclockwise('Antarctica', adjust=False, wrap=True): 1.000
    test 85 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 86 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 87 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 88 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 89 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 90 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    77 of 90 testRoutes.py tests (85.6%) FAILED, incl. 21 KNOWN plus 56 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 10.422 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testSimplify.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testSimplify.py line 11
# lazily imported pygeodesy.R_M from .constants by testSimplify.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testSimplify.py line 11
# lazily imported pygeodesy.Numpy2LatLon from .points by testSimplify.py line 11
# lazily imported pygeodesy.simplify1 from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDP from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDPm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVWm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testSimplify.py 23.03.27 (module pygeodesy.simplify 24.11.07) isLazy=3
    test 1 simplify1(16614, adjust=True) 1m (186.632 ms): 16597
    test 2 simplifyRW(16614, adjust=True, shortest=False, indices=True) 1m (149.131 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (149.420 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (1.303 sec): 8302
    test 5 simplifyVWm(16614, adjust=True, indices=True) 1m (2.390 sec): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (2.376 sec): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (2.350 sec): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (294.892 ms): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (4.349 sec): 15867
    test 10 simplifyRDPgr(16614, adjust=True, shortest=True, modified=True) 1m (176.589 ms): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (277.793 ms): 15869
    test 12 simplifyRDPfw(16614, adjust=False, shortest=False, modified=True) 1m (90.782 ms): 15869
    test 13 simplifyRDP(16614, adjust=True, shortest=True, indices=True) 1m (63.529 sec): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (63.603 sec): 10960
    test 15 simplifyRDPgr(16614, adjust=True, shortest=True, modified=False) 1m (1.789 sec): 10960
    test 16 simplifyRDP(16614, adjust=False, shortest=False, indices=True) 1m (2.076 sec): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (2.072 sec): 11248
    test 18 simplifyRDPfw(16614, adjust=False, shortest=False, modified=False) 1m (694.767 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (240.025 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (234.123 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (171.313 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (4.736 sec): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (137.102 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (160.470 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (53.641 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (99.120 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (9.592 ms): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (3.614 ms): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (1.203 ms): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (2.141 ms): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (2.952 ms): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (856.161 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (591.993 us): 5
    test 34 no module: numpy

    all 34 testSimplify.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 2:33.710

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testSpherical.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 12
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 12
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 12
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 12
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 12
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 12
# lazily imported pygeodesy.Height from .units by testLatLon.py line 12
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 12
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 12
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 12
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 12
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 12
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 12
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 12
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 12
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 12
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testSpherical.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testSpherical.py line 13
# lazily imported pygeodesy.classname from .named by testSpherical.py line 13
# lazily imported pygeodesy.degrees2m from .utily by testSpherical.py line 13
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testSpherical.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.lonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testSpherical.py line 446

    testing testSpherical.py 23.10.23 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 24.11.07)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
# lazily imported pygeodesy.ecef by latlonBase.py line 482
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: 62331.59
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
# lazily imported pygeodesy.booleans by iters.py line 76
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
# lazily imported pygeodesy.triaxials by formy.py line 981
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyz3: <class 'tuple'>
    test 155 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 156 compassAngleTo: <class 'float'>
    test 157 cosineLawTo: <class 'float'>
    test 158 euclideanTo: <class 'float'>
    test 159 flatLocalTo: <class 'float'>
    test 160 flatPolarTo: <class 'float'>
    test 161 haversineTo: <class 'float'>
    test 162 hubenyTo: <class 'float'>
    test 163 vincentysTo: <class 'float'>
    test 164 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 165 toVector3d: (0.61566, 0.0, 0.78801)
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 170 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 171 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)

    22 tests skipped (22): No module named 'numpy': required by vector2d._numpy

    test 172 area cw/ccw: 1.0

    testVectorial(pygeodesy.sphericalNvector, 24.11.07)
    test 173 crossTrackDistanceTo: -305.67
    test 174 crossTrackDistanceTo: -307.55

    test 175 toLatLon: 44.995674°N, 045.0°E
    test 176 toNvector: (0.50004, 0.50004, 0.70705)
    test 177 isequalTo: False
    test 178 isequalTo: True
    test 179 length: 0.99992449715
    test 180 euclid: 0.99995577
    test 181 length: 1.00
    test 182 euclid: 1.0000
    test 183 meanOf: 44.995674°N, 045.0°E
    test 184 meanOf: LatLon
    test 185 apply: (0.5, 0.5, 0.707)
    test 186 init: (0.5, 0.5, 0.707)
    test 187 i***: (0.5, 0.5, 0.707)
    test 188 abs: 0.99992449715
    test 189 sumOf: (52.70504, 0.61904, 0.70705)
    test 190 sumOf: Nv
    test 191 sumOf: sumOf
    test 192 length: 52.7134151513
    test 193 sizeof: 217  FAILED, KNOWN, expected 128
    test 194 length: 52.2051356286
    test 195 sizeof: 320  FAILED, KNOWN, expected 247
    test 196 copy: True
    test 197 length: 52.2051356286
    test 198 sizeof: 320

    test 199 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 200 toLatLon: 44.995674°N, 045.0°E
    test 201 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 202 intersection: 02.499372°N, 002.5°E

    test 203 intersection1: 02.499372°N, 002.5°E
    test 204 intersection2: 02.499372°S, 177.5°W

    test 205 isenclosedBy: True
    test 206 isenclosedBy*: True
    test 207 isenclosedBy: True
    test 208 isenclosedBy*: True

    test 209 iswithin: False
    test 210 iswithin: True

    test 211 nearestOn: 51.0°N, 001.0°E
    test 212 nearestOn: 50.987°N, 000.298°W
    test 213 nearestOn: 51.0°N, 002.0°E
    test 214 nearestOn: 50.995°N, 002.655°E
    test 215 nearestOn: 51.0°N, 001.9°E
    test 216 nearestOn: True
    test 217 distanceTo: 42.712
    test 218 nearestOn: 51.0°N, 002.0°E
    test 219 nearestOn: True
    test 220 nearestOn: 00.0°N, 000.0°E
    test 221 nearestOn: True
    test 222 nearestOn: 00.0°N, 020.0°E
    test 223 nearestOn: True
    test 224 nearestOn: 02.0°N, 002.0°E
    test 225 nearestOn: 02.0°N, 002.0°E

    test 226 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 227 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 228 BasseC: 47.3038°N, 002.5721°W
    test 229 BasseH: 47.311067°N, 002.528617°W
    test 230 triangulate: 47.323667°N, 002.568501°W
    test 231 triangulate: True

    test 232 trilaterate: 37.419078°N, 121.960579°W
    test 233 trilaterate: True
    test 234 trilaterate: 08.068912°S, 034.888699°W
./test/testSpherical.py:318: DeprecationWarning: method L{rhumbBearingTo<pygeodesy.sphericalNvector.LatLon.rhumbBearingTo>} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 235 trilaterate: True
    test 236 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 237 trilaterate: True
    test 238 trilaterate: 42.67456065°N, 002.49539502°E
    test 239 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 24.11.07)
    test 240 sumOf: Nvector
    test 241 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 242 ecef.lat, .lon: 44.995674, 45.0
    test 243 ecef.height: -0.0
    test 244 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 245 .isEllipsoidal: False
    test 246 .isSpherical: True
    test 247 .latlon: (44.995674, 45.0)
    test 248 .philam: (0.785323, 0.785398)
    test 249 .latlonheight: (44.995674, 45.0, 0.0)
    test 250 .philamheight: (0.785323, 0.785398, 0.0)
    test 251 parse: (0.5, 0.5, 0.707)
    test 252 cmp: 0
    test 253 eq: True
    test 254 ge: True
    test 255 gt: False
    test 256 le: True
    test 257 lt: False
    test 258 ne: False
    test 259 *: (1.0, 1.0, 1.414)
    test 260 +: (1.0, 1.0, 1.414)
    test 261 /: (0.5, 0.5, 0.707)
    test 262 -: (0.5, 0.5, 0.707)
    test 263 @: (0.0, 0.0, 0.0)
    test 264 @: (0.0, 0.0, 0.0)
    test 265 rotate: (0.26268, 0.26268, 0.37143)
    test 266 crosserrors: True
    test 267 0: divisor (0): float division by zero
    test 268 intersections2: (500.0, 0.0, 0.0)
    test 269 nearestOn: (0.0, 0.0, 0.0)
    test 270 nearestOn: True
    test 271 nearestOn: (100.0, 100.0, 100.0)
    test 272 nearestOn: True
    test 273 iscolinearWith: False
    test 274 iscolinearWith: True
    test 275 nearestOn: (0.0, 0.0, 0.0)
    test 276 nearestOn: True
    test 277 nearestOn: (100.0, 100.0, 100.0)
    test 278 nearestOn: True
    test 279 iscolinearWith: False
    test 280 iscolinearWith: True

    testSpherical(pygeodesy.sphericalNvector, 24.11.07)
    test 281 isSpherical: True
    test 282 isEllipsoidal: False
    test 283 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 284 ellipsoid: name='SphereAuthalic', a=6371000, f=0, f_=0, b=6371000
    test 285 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 286 isSpherical: True
    test 287 isEllipsoidal: False
    test 288 intersection1: 50.907608°N, 004.508575°E
    test 289 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 290 intersection1: True
    test 291 intersection2: True
    test 292 intersection2: 43.5719°N, 116.188757°W
    test 293 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 294 intersection3: 51.882166°N, 000.267801°E
    test 295 intersection4: 00.0°N, 026.565051°E
    test 296 intersection5: 26.565051°N, 000.0°W
    test 297 intersection6: 50.907809°N, 004.50841°E
    test 298 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 299 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 300 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 301 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 302 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 303 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 304 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 305 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 306 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 307 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 308 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 309 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 310 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 311 brng+end 1a: 01.000305°N, 002.0°E
    test 312 brng+end 1b: 01.000305°N, 002.0°E
    test 313 brng+end 2a: 01.000305°S, 178.0°W
    test 314 brng+end 2b: 01.000305°S, 178.0°W
    test 315 intersection7: 02.499372°N, 002.5°E
    test 316 maxLat0: 90.0
    test 317 maxLat1: 89.0
    test 318 maxLat90: 0.0
    test 319 minLat0: -90.0
    test 320 minLat1: -89.0
    test 321 minLat90: -0.0
    test 322 parse: 00.0°N, 000.0°E

    test 323 intersecant2: 04.260346°N, 006.272173°E and 01.250608°S, 000.749094°E
    test 324 intersecant2: 700000
    test 325 intersecant2: 699999  FAILED, KNOWN, expected 700000
    test 326 intersecant2: 45.014  FAILED, KNOWN, expected 45.000

    test 327 intersecant2: 04.261539°N, 006.265474°E and 00.0°N, 002.0°E
    test 328 intersecant2: 699248  FAILED, KNOWN, expected 700000
    test 329 intersecant2: 598698  FAILED, KNOWN, expected 700000
    test 330 intersecant2: 45.000
# lazily imported pygeodesy.rhumb by ellipsoids.py line 1497

    test 331 intersecant2: 04.262363°N, 006.2663°E and 01.258709°S, 000.74119°E
    test 332 intersecant2: 699302  FAILED, KNOWN, expected 700000
    test 333 intersecant2: 700080  FAILED, KNOWN, expected 700000
    test 334 intersecant2: 45.021  FAILED, KNOWN, expected 45.000

    test 335 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 336 intersecant4: 00.0°S, 025.0°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 337 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 338 intersecant4: 00.0°S, 025.0°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 339 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 340 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 341 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 342 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 343 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 344 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 345 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 346 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 347 intersecant2.1: LatLon(04°04′02.63″S, 029°43′21.16″W) Napier: 3333000.000
    test 348 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) Napier: 3333000.000
    test 349 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 350 intersecant2.1: LatLon(02°29′47.81″S, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 351 intersecant2.2: LatLon(04°04′02.63″S, 029°43′21.16″E) Napier: 3333000.000
    test 352 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) Napier: 3333000.000
    test 353 intersecant2.2: LatLon(02°29′47.81″S, 028°30′01.84″E) : 3180236.460  FAILED, KNOWN, expected 3333000.000
    test 354 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) : 3332999.886  FAILED, KNOWN, expected 3333000.000

    test 355 intersecant2.3: LatLon(04°04′02.63″N, 029°43′21.16″W) Napier: 3333000.000
    test 356 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) Napier: 3333000.000
    test 357 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 358 intersecant2.3: LatLon(02°29′47.81″N, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 359 intersecant2.4: LatLon(29°50′37.22″S, 002°56′03.42″W) Napier: 3333000.000
    test 360 intersecant2.4: LatLon(00°29′30.34″N, 029°58′14.48″E) Napier: 3333000.000
    test 361 intersecant2.4: LatLon(00°08′01.47″N, 029°38′09.18″E) : 3295394.784  FAILED, KNOWN, expected 3333000.000
    test 362 intersecant2.4: LatLon(29°31′09.01″S, 002°27′32.93″W) : 3292733.874  FAILED, KNOWN, expected 3333000.000

    test 363 intersecant2.5: LatLon(00°01′46.69″S, 029°58′27.6″E) Napier: 3333000.000
    test 364 intersecant2.5: LatLon(29°58′27.59″S, 000°02′03.16″E) Napier: 3333000.000
    test 365 intersecant2.5: LatLon(01°38′23.65″S, 028°34′45.37″E) : 3182660.966  FAILED, KNOWN, expected 3333000.000
    test 366 intersecant2.5: LatLon(29°58′27.58″S, 000°02′03.17″E) : 3332999.848  FAILED, KNOWN, expected 3333000.000

    test 367 intersecant2.6: LatLon(05°08′54.91″S, 029°34′09.94″E) Napier: 3333000.000
    test 368 intersecant2.6: LatLon(28°36′28.71″S, 009°21′04.99″E) Napier: 3333000.000
    test 369 intersecant2.6: LatLon(11°51′13.84″S, 024°23′59.0″E) : 2998636.503  FAILED, KNOWN, expected 3333000.000
    test 370 intersecant2.6: LatLon(26°53′11.53″S, 011°08′26.36″E) : 3218384.739  FAILED, KNOWN, expected 3333000.000
    test 371 isenclosedBy: True
    test 372 isenclosedBy*: True
    test 373 isenclosedBy: True
    test 374 isenclosedBy*: True
    test 375 rhumbBearingTo: 116.722
    test 376 rhumbDestination: 50.964155°N, 001.853°E
    test 377 rhumbDestination: True
    test 378 rhumbDistanceTo: 40307.8
    test 379 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 380 rhumbMidpointo: True
    test 381 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 382 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 383 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 384 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 385 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 386 areaOf: 8.66605875e+09
    test 387 perimeterOf: 3.78258541e+05
    test 388 perimeterOf: 2.67063461e+05
    test 389 areaOf: 6.18e+09
    test 390 perimeterOf: 3.79639757e+05
    test 391 perimeterOf: 2.68444678e+05
    test 392 nearestOn3: 46.000996°N, 001.353049°E
    test 393 nearestOn3: 569987.49
    test 394 distanceTo: 569987.49
    test 395 nearestOn3: 46.0°N, 002.0°E
    test 396 nearestOn3: 134989.80
    test 397 distanceTo: 134989.80
    test 398 nearestOn3: 45.330691°N, 001.318551°E
    test 399 distance: 64856.28
    test 400 distanceTo: 64856.28
    test 401 compassAngleTo: 304.54
    test 402 difference: 1000.53
    test 403 ispolar: True
    test 404 ispolar*: True
    test 405 ispolar: False  FAILED, KNOWN, expected True
    test 406 ispolar*: False  FAILED, KNOWN, expected True
    test 407 ispolar: True
    test 408 ispolar*: True
    test 409 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 410 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 411 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 412 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 413 isEllipsoidal: False
    test 414 isSpherical: True
    test 415 lat/lonDMS: 52.20472°N, 000.14056°E
    test 416 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 417 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 418 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 419 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 420 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 421 isequalTo: True
    test 422 isequalTo: True
    test 423 latlon2: 52.20472, 0.14056
    test 424 latlon2: 52.2047, 0.1406
    test 425 latlon2: 52.205, 0.141
    test 426 latlon2: 52.2, 0.14
    test 427 latlon2: 52.2, 0.1
    test 428 latlon2: 52.0, 0.0
    test 429 chordTo: 12036677.26
    test 430 chordTo: 12036463.78
    test 431 initialBearingTo: 156.1666
    test 432 initialBearingTo: 65.8921
    test 433 initialBearingTo: 0.0
    test 434 initialBearingTo: 180.0
    test 435 finalBearingTo: 157.8904
    test 436 finalBearingTo: 93.8581
    test 437 bearingTo2: 156.1666, 157.8904
    test 438 ispolar: True
    test 439 copy: True
    test 440 __eq__: True
    test 441 __ne__: False
    test 442 equirectangularTo: 404329.56
    test 443 distanceTo: 404279.720589
    test 444 distanceTo: 404279.720589
    test 445 distanceTo: 2145
    test 446 antipodal: False
    test 447 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 448 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 449 antipodal: False
    test 450 distanceTo dateline: 9491735
    test 451 distanceTo unrolled: 9491735
    test 452 distanceTo: 18013602.92
    test 453 distanceTo: 20015114.35
    test 454 intermediateTo: 51.372084°N, 000.707337°E
    test 455 intermediateTo: True
    test 456 intermediateTo: 404279.721
    test 457 intermediateTo+5: 35.160975°N, 008.989542°E
    test 458 intermediateTo+5: 5.000
    test 459 intermediateTo-4: 64.911647°N, 013.726301°W
    test 460 intermediateTo-4: 4.000
    test 461 intermediateTo-h: 125.000
    test 462 midpointTo: 50.536327°N, 001.274614°E
    test 463 destination: 51.513546°N, 000.098345°W
    test 464 destination: 51°30′49″N, 000°05′54″W
    test 465 destination: 34°37′N, 116°33′W
    test 466 destination: 34.613647°N, 116.55116°W
    test 467 destination: 0.604122N, 2.034201W
    test 468 destination: 31.96383509°N, 064.37329146°E
    test 469 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 470 alongTrackDistanceTo: 62331.58
    test 471 alongTrackDistanceTo: 99.588
    test 472 alongTrackDistanceTo: -7702.7
    test 473 alongTrackDistanceTo: 7587.6
    test 474 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 475 crossTrackDistanceTo: -307.55
    test 476 crossTrackDistanceTo: 7.4524
    test 477 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 478 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 479 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 480 chordTo: 124799.103
    test 481 cosineAndoyerLambertTo: 124801.098
    test 482 cosineAndoyerLambertTo: 124801.098
    test 483 cosineForsyheAndoyerLambertTo: 124801.098
    test 484 cosineForsyheAndoyerLambertTo: 124801.098
    test 485 cosineLawTo: 124801.098
    test 486 cosineLawTo: 124801.098
    test 487 equirectangularTo: 124804.754
    test 488 equirectangularTo: 124804.754
    test 489 euclideanTo: 130015.089
    test 490 euclideanTo: 130015.089
    test 491 flatLocalTo: 124804.754
    test 492 flatLocalTo: 124804.754
    test 493 flatPolarTo: 133663.257
    test 494 flatPolarTo: 133663.257
    test 495 hartzell: 53.3206°N, 001.7297°W
    test 496 hartzell: 53.3206°N, 001.7297°W
    test 497 height4: 0.0
    test 498 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 499 height4: 53°19′14.2″N, 001°43′46.9″W
    test 500 height4: 53°19′14.2″N, 001°43′46.9″W
    test 501 haversineTo: 124801.098
    test 502 haversineTo: 124801.098
    test 503 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 504 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 505 thomasTo: 124801.098
    test 506 thomasTo: 124801.098
    test 507 vincentysTo: 124801.098
    test 508 vincentysTo: 124801.098
    test 509 isclockwise: False
    test 510 isclockwise*: False
    test 511 isclockwise: True
    test 512 isclockwise*: True
    test 513 isclockwise: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 514 isclockwise*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 515 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 516 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 517 isconvex: False
    test 518 isconvex*: False
    test 519 isconvex: True
    test 520 isconvex*: True
    test 521 isconvex: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 522 isconvex*: latlon (3): too few  FAILED, KNOWN, expected points (2): too few
    test 523 isenclosedBy1: True
    test 524 isenclosedBy1*: True
    test 525 isenclosedBy2: False
    test 526 isenclosedBy2*: False
    test 527 isenclosedBy3: False
    test 528 isenclosedBy3*: False
    test 529 isenclosedBy4: False
    test 530 isenclosedBy4*: False
    test 531 isenclosedBy5: False
    test 532 isenclosedBy5*: False
    test 533 isenclosedBy6: True
    test 534 isenclosedBy6*: True
    test 535 isenclosedBy7: True
    test 536 isenclosedBy7*: True
    test 537 isenclosedBy-CCW: True
    test 538 isenclosedBy-CW : True
    test 539 isenclosedBy-CCW: True
    test 540 initialBearingTo: 102.432182
    test 541 compassAngleTo: 100.017
    test 542 compassAngleTo: 105.599
    test 543 initialBearingTo: 288.715918
    test 544 compassAngleTo: 280.017
    test 545 compassAngleTo: 285.599
    test 546 equirectangularTo: 592.185
    test 547 distanceTo: 591.831
    test 548 bearingTo: 0.0
    test 549 compassAngleTo: 0.0
    test 550 bearingTo: 45.0
    test 551 compassAngleTo: 45.0
    test 552 bearingTo: 90.0
    test 553 compassAngleTo: 90.0
    test 554 bearingTo: 180.0
    test 555 compassAngleTo: 180.0
    test 556 bearingTo: 225.0
    test 557 compassAngleTo: 225.0
    test 558 bearingTo: 315.0
    test 559 compassAngleTo: 315.0
    test 560 bearingTo: 270.0
    test 561 compassAngleTo: 270.0
    test 562 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 563 compassAngleTo: 359.4
    test 564 latlon2: (53.0, 1.0)
    test 565 philam2: (0.93, 0.02)
    test 566 bearingTo: 31
    test 567 compassAngleTo: 31
    test 568 compassAngleTo: 45

    test 569 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 570 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 571 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 572 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 573 isequalTo: <class 'bool'>
    test 574 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 575 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 576 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 577 xyz3: <class 'tuple'>
    test 578 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 579 compassAngleTo: <class 'float'>
    test 580 cosineLawTo: <class 'float'>
    test 581 euclideanTo: <class 'float'>
    test 582 flatLocalTo: <class 'float'>
    test 583 flatPolarTo: <class 'float'>
    test 584 haversineTo: <class 'float'>
    test 585 hubenyTo: <class 'float'>
    test 586 vincentysTo: <class 'float'>
    test 587 toNvector: (0.61566, 0.0, 0.78801)
    test 588 toVector: (3922384.659522, 0.0, 5020423.423198)
    test 589 toVector3d: (0.61566, 0.0, 0.78801)

    test 590 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 591 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 592 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 593 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 594 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 595 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 596 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 597 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 598 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 599 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 600 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 601 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 602 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 603 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 604 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 605 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 606 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 607 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 608 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 609 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    27 tests skipped (49): No module named 'numpy': required by vector2d._numpy

    test 610 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)

    22 tests skipped (71): No module named 'numpy': required by vector2d._numpy

    test 611 area cw/ccw: 1.0

    testSpherical(pygeodesy.sphericalTrigonometry, 24.11.07)
    test 612 isSpherical: True
    test 613 isEllipsoidal: False
    test 614 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 615 ellipsoid: name='SphereAuthalic', a=6371000, f=0, f_=0, b=6371000
    test 616 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 617 isSpherical: True
    test 618 isEllipsoidal: False
    test 619 intersection1: 50.907608°N, 004.508575°E
    test 620 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 621 intersection1: True
    test 622 intersection2: True
    test 623 intersection2: 43.5719°N, 116.188757°W
    test 624 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 625 intersection3: 51.882166°N, 000.267801°E
    test 626 intersection4: 00.0°N, 026.565051°E
    test 627 intersection5: 26.565051°N, 000.0°E  FAILED, KNOWN, expected 26.565051°N, 000.0°W
    test 628 intersection6: 50.907809°N, 004.50841°E
    test 629 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 630 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 631 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 632 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 633 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 634 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 635 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 636 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 637 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 638 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 639 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 640 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 641 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 642 brng+end 1a: 01.000305°N, 002.0°E
    test 643 brng+end 1b: 01.000305°N, 002.0°E
    test 644 brng+end 2a: 01.000305°S, 178.0°W
    test 645 brng+end 2b: 01.000305°S, 178.0°W
    test 646 intersection7: 02.499372°N, 002.5°E
    test 647 maxLat0: 90.0
    test 648 maxLat1: 89.0
./test/testSpherical.py:318: DeprecationWarning: method L{rhumbBearingTo<pygeodesy.sphericalTrigonometry.LatLon.rhumbBearingTo>} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 649 maxLat90: 0.0
    test 650 minLat0: -90.0
    test 651 minLat1: -89.0
    test 652 minLat90: -0.0
    test 653 parse: 00.0°N, 000.0°E
    test 654 crossingParallels: 009°35′38.65″E, 170°24′21.35″E

    test 655 intersecant2: 04.260346°N, 006.272173°E and 01.250608°S, 000.749094°E
    test 656 intersecant2: 700000
    test 657 intersecant2: 699999  FAILED, KNOWN, expected 700000
    test 658 intersecant2: 45.014  FAILED, KNOWN, expected 45.000

    test 659 intersecant2: 04.261539°N, 006.265474°E and 00.0°N, 002.0°E
    test 660 intersecant2: 699248  FAILED, KNOWN, expected 700000
    test 661 intersecant2: 598698  FAILED, KNOWN, expected 700000
    test 662 intersecant2: 45.000

    test 663 intersecant2: 04.262363°N, 006.2663°E and 01.258709°S, 000.74119°E
    test 664 intersecant2: 699302  FAILED, KNOWN, expected 700000
    test 665 intersecant2: 700080  FAILED, KNOWN, expected 700000
    test 666 intersecant2: 45.021  FAILED, KNOWN, expected 45.000

    test 667 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 668 intersecant4: 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 669 intersecant4: 02.375133°N, 024.894142°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 670 intersecant4: 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 671 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 672 intersecant4: 00.725365°N, 026.558638°E and 25.747°S, 000.826763°W  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 673 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 674 intersecant4: 00.021635°S, 025.811619°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 675 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 676 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 677 intersecant4: 00.807845°N, 026.641126°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E
    test 678 intersecant4: 01.624807°N, 026.572609°E and 25.0°S, 000.0°E  FAILED, KNOWN, expected 00.0°N, 025.0°E and 25.0°S, 000.0°E

    test 679 intersecant2.1: LatLon(04°04′02.63″S, 029°43′21.16″W) Napier: 3333000.000
    test 680 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) Napier: 3333000.000
    test 681 intersecant2.1: LatLon(29°58′27.6″N, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 682 intersecant2.1: LatLon(02°29′47.81″S, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 683 intersecant2.2: LatLon(04°04′02.63″S, 029°43′21.16″E) Napier: 3333000.000
    test 684 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) Napier: 3333000.000
    test 685 intersecant2.2: LatLon(02°29′47.81″S, 028°30′01.84″E) : 3180236.460  FAILED, KNOWN, expected 3333000.000
    test 686 intersecant2.2: LatLon(29°58′27.6″N, 000°01′46.65″E) : 3332999.886  FAILED, KNOWN, expected 3333000.000

    test 687 intersecant2.3: LatLon(04°04′02.63″N, 029°43′21.16″W) Napier: 3333000.000
    test 688 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) Napier: 3333000.000
    test 689 intersecant2.3: LatLon(29°58′27.6″S, 000°01′46.65″W) : 3332999.886  FAILED, KNOWN, expected 3333000.000
    test 690 intersecant2.3: LatLon(02°29′47.81″N, 028°30′01.84″W) : 3180236.460  FAILED, KNOWN, expected 3333000.000

    test 691 intersecant2.4: LatLon(29°50′37.22″S, 002°56′03.42″W) Napier: 3333000.000
    test 692 intersecant2.4: LatLon(00°29′30.34″N, 029°58′14.48″E) Napier: 3333000.000
    test 693 intersecant2.4: LatLon(00°08′01.47″N, 029°38′09.18″E) : 3295394.784  FAILED, KNOWN, expected 3333000.000
    test 694 intersecant2.4: LatLon(29°31′09.01″S, 002°27′32.93″W) : 3292733.874  FAILED, KNOWN, expected 3333000.000

    test 695 intersecant2.5: LatLon(00°01′46.69″S, 029°58′27.6″E) Napier: 3333000.000
    test 696 intersecant2.5: LatLon(29°58′27.59″S, 000°02′03.16″E) Napier: 3333000.000
    test 697 intersecant2.5: LatLon(01°38′23.65″S, 028°34′45.37″E) : 3182660.966  FAILED, KNOWN, expected 3333000.000
    test 698 intersecant2.5: LatLon(29°58′27.58″S, 000°02′03.17″E) : 3332999.848  FAILED, KNOWN, expected 3333000.000

    test 699 intersecant2.6: LatLon(05°08′54.91″S, 029°34′09.94″E) Napier: 3333000.000
    test 700 intersecant2.6: LatLon(28°36′28.71″S, 009°21′04.99″E) Napier: 3333000.000
    test 701 intersecant2.6: LatLon(11°51′13.84″S, 024°23′59.0″E) : 2998636.503  FAILED, KNOWN, expected 3333000.000
    test 702 intersecant2.6: LatLon(26°53′11.53″S, 011°08′26.36″E) : 3218384.739  FAILED, KNOWN, expected 3333000.000

    test 703 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 704 intersections2 (pygeodesy.sphericalTrigonometry): 36.989310429, -088.151425243, 38.238379679, -092.390486808
    test 705 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 706 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 707 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 708 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 709 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 710 intersections2 (pygeodesy.sphericalTrigonometry) 5: 6.28168e-16 (% of radius)
    test 711 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 712 intersections2 (pygeodesy.sphericalTrigonometry) 10: 2.93145e-15 (% of radius)
    test 713 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 714 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 715 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 716 intersections2 (pygeodesy.sphericalTrigonometry) 20: 1.25634e-15 (% of radius)
    test 717 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 718 intersections2 (pygeodesy.sphericalTrigonometry) 25: 6.70046e-16 (% of radius)
    test 719 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 720 intersections2 (pygeodesy.sphericalTrigonometry) 30: 6.97964e-16 (% of radius)
    test 721 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 722 intersections2 (pygeodesy.sphericalTrigonometry) 35: 8.37557e-16 (% of radius)
    test 723 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 724 intersections2 (pygeodesy.sphericalTrigonometry) 40: 4.18779e-16 (% of radius)
    test 725 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 726 intersections2 (pygeodesy.sphericalTrigonometry) 45: 1.86124e-16 (% of radius)
    test 727 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 728 intersections2 (pygeodesy.sphericalTrigonometry) 50: 1.67511e-16 (% of radius)
    test 729 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 730 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 731 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 732 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 733 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 734 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 735 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W Random +/- 89
    test 736 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 53.17886°S, 034.29816°W  d 2.41037e-08 meter
    test 737 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 72.224029°N, 074.701801°E  d 1.8059e-09 meter
    test 738 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 54.155939°S, 021.639731°W  d 1.8059e-09 meter
    test 739 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 29.112884°S, 045.329197°W  d 5.55907e-09 meter
    test 740 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 69.86666°S, 061.515784°W  d 1.31906e-08 meter
    test 741 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 78.235737°N, 141.244363°E  d 1.8059e-09 meter
    test 742 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 59.235298°S, 075.922869°E  d 1.8059e-09 meter
    test 743 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 58.3215°S, 021.030115°W  d 2.91195e-08 meter
    test 744 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 46.710684°N, 056.34701°W  d 1.8059e-09 meter
    test 745 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 59.740913°S, 021.426654°E  d 1.8059e-09 meter
    test 746 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 11.048278°S, 082.858923°E  d 5.85849e-09 meter
    test 747 intersections2 (pygeodesy.sphericalTrigonometry): 54.035233°S, 069.159095°W, 58.53383°S, 103.523048°W  d 5.85849e-09 meter
    test 748 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 749 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 750 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 751 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 752 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 753 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 754 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 755 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 756 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 757 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 758 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 759 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 760 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 761 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection, min 1.34e+03
    test 762 isenclosedBy: True
    test 763 isenclosedBy*: True
    test 764 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)) or wrap (False): not convex
    test 765 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)) or wrap (False): not convex
    test 766 rhumbBearingTo: 116.722
    test 767 rhumbDestination: 50.964155°N, 001.853°E
    test 768 rhumbDestination: True
    test 769 rhumbDistanceTo: 40307.8
    test 770 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 771 rhumbMidpointo: True
    test 772 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 773 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 774 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 775 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 776 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 777 areaOf: 8.66605875e+09
    test 778 perimeterOf: 3.78258541e+05
    test 779 perimeterOf: 2.67063461e+05
    test 780 areaOf: 6.18e+09
    test 781 perimeterOf: 3.79639757e+05
    test 782 perimeterOf: 2.68444678e+05
    test 783 nearestOn3: 46.0°N, 001.369324°E
    test 784 nearestOn3: 570101.83
    test 785 distanceTo: 570101.82
    test 786 nearestOn3: 46.0°N, 002.0°E
    test 787 nearestOn3: 134992.48
    test 788 distanceTo: 134989.80
    test 789 nearestOn3: 45.5°N, 001.5°E
    test 790 distance: 78626.79
    test 791 angle: 315.00
    test 792 compassAngleTo: 315.00
    test 793 nearestOn3: 45.331319°N, 001.331319°E
    test 794 distance: 64074.48
    test 795 angle: 305.10
    test 796 distanceTo: 64074.12
    test 797 compassAngleTo: 305.10
    test 798 difference: 1000.53
    test 799 nearestOn3: 00.5°N, 001.5°E
    test 800 distance: 235880.385
    test 801 angle: 135.00
    test 802 nearestOn3: 01.5°N, 002.5°E
    test 803 distance: 235880.385
    test 804 angle: 135.00
    test 805 nearestOn3: 02.5°N, 003.5°E
    test 806 distance: 235880.385
    test 807 angle: 135.00
    test 808 nearestOn3: 03.5°N, 004.5°E
    test 809 distance: 235880.385
    test 810 angle: 135.00
    test 811 nearestOn3: 04.5°N, 005.5°E
    test 812 distance: 235880.385
    test 813 angle: 135.00
    test 814 nearestOn3: 05.5°N, 006.5°E
    test 815 distance: 235880.385
    test 816 angle: 135.00
    test 817 nearestOn3: 06.5°N, 007.5°E
    test 818 distance: 235880.385
    test 819 angle: 135.00
    test 820 nearestOn3: 07.5°N, 008.5°E
    test 821 distance: 235880.385
    test 822 angle: 135.00
    test 823 meanOf: 04.004858°N, 004.990226°E
    test 824 nearestOn3: 07.5°N, 008.5°E
    test 825 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 826 ispolar: True
    test 827 ispolar*: True
    test 828 ispolar: False  FAILED, KNOWN, expected True
    test 829 ispolar*: False  FAILED, KNOWN, expected True
    test 830 ispolar: True
    test 831 ispolar*: True
    test 832 triangle7: (22.142114, 2189776.256122, 84.91384, 6998970.168483, 84.91384, 6998970.168483, 8479698853790.72168)
    test 833 triangle7: Triangle8Tuple(A=0.38645, a=0.34371, B=1.48203, b=1.09857, C=1.48203, c=1.09857, D=3.74234, E=0.20891)
    test 834 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 835 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 836 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 837 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    92 of 837 testSpherical.py tests (11.0%) FAILED, incl. 90 KNOWN plus 2 DeprecationWarnings, 71 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 714.667 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testStreprs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.INF from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NAN from .constants by testStreprs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.fstrzs from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.instr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testStreprs.py line 11
# lazily imported pygeodesy.unstr from .streprs by testStreprs.py line 11

    testing testStreprs.py 23.03.27 (module pygeodesy.streprs 24.10.14) isLazy=3
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%[<flags>][<width>].*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)
    test 42 F: 0.001
    test 43 F: 0.001
    test 44 F: 0.001
    test 45 F: 0.001
    test 46 f: 0.001
    test 47 f: 0.001
    test 48 f: 0.001
    test 49 f: 0.001
    test 50 E: 1.0E-03
    test 51 E: 1.0E-03
    test 52 E: 1.0E-03
    test 53 E: 1.0E-03
    test 54 e: 1.0e-03
    test 55 e: 1.0e-03
    test 56 e: 1.0e-03
    test 57 e: 1.0e-03
    test 58 G: 0.001
    test 59 G: 0.001
    test 60 G: 0.001
    test 61 G: 0.001
    test 62 g: 0.001
    test 63 g: 0.001
    test 64 g: 0.001
    test 65 g: 0.001

    all 65 testStreprs.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 864.029 us

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testTMcoords.py 24.03.22 isLazy=3
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 67.711 us

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testTrf.py
./test/testTrf.py:29: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.date2epoch from .trf by testTrf.py line 15
# lazily imported pygeodesy.Epoch from .units by testTrf.py line 15
# lazily imported pygeodesy.epoch2date from .trf by testTrf.py line 15
# lazily imported pygeodesy.F_D from .dms by testTrf.py line 15
# lazily imported pygeodesy.F_DMS from .dms by testTrf.py line 15
# lazily imported pygeodesy.fstr from .streprs by testTrf.py line 15
# lazily imported pygeodesy.RefFrames from .trf by testTrf.py line 15
# lazily imported pygeodesy.TRFError from .errors by testTrf.py line 15
# lazily imported pygeodesy.trfTransform0 from .trf by testTrf.py line 15
# lazily imported pygeodesy.trfTransforms from .trf by testTrf.py line 15
# lazily imported pygeodesy.trfXform from .trf by testTrf.py line 15
# lazily imported pygeodesy.Vector3d from .vector3d by testTrf.py line 15
# lazily imported pygeodesy.ellipsoidalExact by testTrf.py line 392
# lazily imported pygeodesy.ellipsoidalKarney by testTrf.py line 392
# lazily imported pygeodesy.ellipsoidalNvector by testTrf.py line 392
# lazily imported pygeodesy.ellipsoidalVincenty by testTrf.py line 392

    testing testTrf.py 24.10.14 (module pygeodesy.trf 24.10.14) isLazy=3

    testTrf(pygeodesy.ellipsoidalNvector, 24.10.19)
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521
    test 1 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 2 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 3 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 5 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 6 Nil: True
    test 7 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 8 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 Nil: True
    test 10 reframe: True
    test 11 Roundtrip: True
    test 12 reframe: True
    test 13 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 14 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 15 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 16 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 17 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 18 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 19 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 20 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 21 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 22 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 23 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 9.3132e-10, epoched 8.0
    test 24 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 25 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 26 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 27 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 28 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 29 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 30 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 31 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 32 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 33 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 34 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 35 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 36 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 1.8626e-09, epoched 8.0
    test 37 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 38 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 39 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 40 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 41 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 42 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 43 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 44 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 45 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 46 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 47 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 48 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 49 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 50 transform0: ITRF2014@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 51 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 52 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 53 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 54 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 55 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 56 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 57 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 58 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 59 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 60 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 61 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 62 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 63 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 64 TRFError: epoch (1899): below 1900.0 limit
    test 65 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 66 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 67 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 68 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 69 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 70 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 71 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 72 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 73 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 74 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 75 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 76 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 77 inverse: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@1989
    test 78 inverse: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989
    test 79 inverse: name='ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989', tx=0.0283, ty=0.046, tz=-0.0615, s1=1.0, rx=0.0, ry=0.0, rz=-7.757e-10, s=0.00567, sx=0.0, sy=0.0, sz=-0.00016

    test 80 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 81 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 82 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 83 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 84 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 85 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 86 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 87 TransformXform: ITRF2014@2015xETRF2000@2000

    test 88 inverse: -ITRF2014@2015xETRF2000@2000
    test 89 inverse: ITRF2014@2015xETRF2000@2000
    test 90 inverse: name='ITRF2014@2015xETRF2000@2000', tx=0.0537, ty=0.0512, tz=-0.0551, s1=1.0, rx=4.3197e-09, ry=2.6131e-08, rz=-4.2237e-08, s=0.00102, sx=0.000891, sy=0.00539, sz=-0.008712

    test 91 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 92 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 93 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 94 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 95 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 96 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 97 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 98 TransformXform: ITRF2014@2010xITRF2008@2005

    test 99 inverse: -ITRF2014@2010xITRF2008@2005
    test 100 inverse: ITRF2014@2010xITRF2008@2005
    test 101 inverse: name='ITRF2014@2010xITRF2008@2005', tx=0.0016, ty=0.0019, tz=0.0029, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=-0.00017, sx=0.0, sy=0.0, sz=0.0

    test 102 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 103 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 104 transform0: -ITRF2020@2015xITRF2014@2010
    test 105 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 106 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 107 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 108 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 109 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 110 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 111     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 112 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 113     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 114 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 115     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 116 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 117 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 118     Error2c: (0.000024786, -0.000062539, -0.000021304) max 6.254e-05, epoched 5.0
    test 119 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 120     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 121 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 122     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 123 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 124 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 125     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 126 transform2v: (0.00020, -0.00030, 0.00020)
    test 127     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 128 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 129     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 130 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 131 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 132     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 133 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 134     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 135 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 136     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 137 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 138 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 139     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 140 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 141     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 142 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 143     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 144 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 145 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 146     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 147 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 148     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 149 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 150 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
./test/testTrf.py:29: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
    test 151     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 152 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 153     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 154 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 155 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 156     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 157 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 158     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 159 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 160 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 161     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 162 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 163     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 164 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 165 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 166     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 167 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 168     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 169 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 170 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 171     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 172 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 173     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 174 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 175 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 176     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 177 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 178     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 179 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 180 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 181     Error2c: (0.026743934, 0.030857919, -0.094203576) max 0.0942, epoched 32.0
    test 182 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 183     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 184 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 185 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 186     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 187 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 188     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 189 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 190 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 191     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 192 transform2v: (0.01350, -0.01676, -0.01001)

    test 193 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 194 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 195     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 196 transform2v: (-0.01350, 0.01666, 0.01021)

    test 197 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 198 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 199     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 200 transform2v: (0.01381, -0.01706, -0.01024)

    test 201 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 202 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 203     Error2c: (-0.00006262, -0.000037673, -0.000034945) max 6.262e-05, epoched 5.0
    test 204 transform2v: (-0.01371, 0.01716, 0.00834)

    test 205 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 206 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 207     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 208 transform2v: (0.01287, -0.01740, -0.00945)

    test 209 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 210 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 211     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 212 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 213     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 214 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 215 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 216     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 3.8
    test 217 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 218     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775
./test/testTrf.py:136: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')

    test 219 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 220 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 221     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 222 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 223     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 224 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 225 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 226     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 227 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 228     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 229 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 230 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 231     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 232 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 233     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 234 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 235 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 236     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 237 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 238     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 239 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 240 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 241     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 242 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 243     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 244 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 245 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 246     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 247 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 248     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 249 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 250 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 251     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 252 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 253     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 254 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 255 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 256     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 257 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 258     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 259 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 260 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 261 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 262 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 263 Issue80: 48°46′36.915134″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 264 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 265 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 266 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 267 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 268 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 269 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 270 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 271 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 272 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 273 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 274 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 275 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 276 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 277 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 278 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 279 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 280 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalVincenty, 24.10.12)
    test 281 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 282 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 283 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 284 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 285 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 286 Nil: True
    test 287 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 288 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 289 Nil: True
    test 290 reframe: True
    test 291 Roundtrip: True
    test 292 reframe: True
    test 293 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 294 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 295 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 296 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 297 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 298 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 299 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 300 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 301 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 302 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 303 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 9.3132e-10, epoched 8.0
    test 304 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 305 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 306 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 307 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 308 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 309 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 310 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 311 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 312 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 313 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 314 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 315 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 316 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 1.8626e-09, epoched 8.0
    test 317 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 318 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 319 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 320 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 321 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 322 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 323 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 324 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 325 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 326 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 327 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 328 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 329 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 330 transform0: ITRF2014@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 331 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 332 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 333 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 334 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 335 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 336 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 337 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 338 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 339 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 340 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 341 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 342 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 343 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 344 TRFError: epoch (1899): below 1900.0 limit
    test 345 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 346 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 347 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 348 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 349 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 350 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 351 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 352 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 353 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 354 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 355 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 356 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 357 inverse: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@1989
    test 358 inverse: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989
    test 359 inverse: name='ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989', tx=0.0283, ty=0.046, tz=-0.0615, s1=1.0, rx=0.0, ry=0.0, rz=-7.757e-10, s=0.00567, sx=0.0, sy=0.0, sz=-0.00016

    test 360 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 361 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 362 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 363 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 364 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 365 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 366 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 367 TransformXform: ITRF2014@2015xETRF2000@2000

    test 368 inverse: -ITRF2014@2015xETRF2000@2000
    test 369 inverse: ITRF2014@2015xETRF2000@2000
    test 370 inverse: name='ITRF2014@2015xETRF2000@2000', tx=0.0537, ty=0.0512, tz=-0.0551, s1=1.0, rx=4.3197e-09, ry=2.6131e-08, rz=-4.2237e-08, s=0.00102, sx=0.000891, sy=0.00539, sz=-0.008712

    test 371 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 372 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 373 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 374 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 375 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 376 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 377 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 378 TransformXform: ITRF2014@2010xITRF2008@2005

    test 379 inverse: -ITRF2014@2010xITRF2008@2005
    test 380 inverse: ITRF2014@2010xITRF2008@2005
    test 381 inverse: name='ITRF2014@2010xITRF2008@2005', tx=0.0016, ty=0.0019, tz=0.0029, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=-0.00017, sx=0.0, sy=0.0, sz=0.0

    test 382 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 383 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 384 transform0: -ITRF2020@2015xITRF2014@2010
    test 385 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 386 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 387 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 388 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 389 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 390 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 391     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 392 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 393     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 394 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 395     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 396 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 397 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 398     Error2c: (0.000024786, -0.000062539, -0.000021304) max 6.254e-05, epoched 5.0
    test 399 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 400     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 401 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 402     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 403 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 404 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 405     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 406 transform2v: (0.00020, -0.00030, 0.00020)
    test 407     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 408 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 409     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 410 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 411 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 412     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 413 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 414     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 415 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 416     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 417 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 418 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 419     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 420 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 421     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 422 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 423     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 424 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 425 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 426     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 427 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 428     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 429 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 430 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 431     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 432 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 433     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 434 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 435 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 436     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 437 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 438     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 439 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 440 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 441     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 442 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 443     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 444 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 445 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 446     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 447 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 448     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 449 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 450 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 451     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 452 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 453     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
./test/testTrf.py:29: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)

    test 454 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 455 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 456     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 457 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 458     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 459 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 460 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 461     Error2c: (0.026743934, 0.030857919, -0.094203576) max 0.0942, epoched 32.0
    test 462 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 463     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 464 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 465 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 466     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 467 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 468     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 469 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 470 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 471     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 472 transform2v: (0.01350, -0.01676, -0.01001)

    test 473 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 474 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 475     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 476 transform2v: (-0.01350, 0.01666, 0.01021)

    test 477 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 478 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 479     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 480 transform2v: (0.01381, -0.01706, -0.01024)

    test 481 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 482 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 483     Error2c: (-0.00006262, -0.000037673, -0.000034945) max 6.262e-05, epoched 5.0
    test 484 transform2v: (-0.01371, 0.01716, 0.00834)

    test 485 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 486 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 487     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 488 transform2v: (0.01287, -0.01740, -0.00945)

    test 489 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 490 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 491     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 492 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 493     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 494 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 495 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 496     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 3.8
    test 497 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 498     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 499 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 500 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 501     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 502 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 503     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 504 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 505 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 506     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 507 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 508     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 509 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 510 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 511     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 512 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 513     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 514 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 515 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 516     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 517 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 518     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 519 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
./test/testTrf.py:136: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
    test 520 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 521     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 522 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 523     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 524 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 525 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 526     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 527 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 528     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 529 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 530 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 531     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 532 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 533     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 534 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 535 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 536     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 537 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 538     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 539 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 540 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 541 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 542 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 543 Issue80: 48°46′36.915134″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 544 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 545 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 546 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 547 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 548 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 549 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 550 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 551 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 552 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 553 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 554 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 555 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 556 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 557 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 558 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 559 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 560 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalKarney, 24.08.13)
    test 561 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 562 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 563 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 564 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 565 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 566 Nil: True
    test 567 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 568 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 569 Nil: True
    test 570 reframe: True
    test 571 Roundtrip: True
    test 572 reframe: True
    test 573 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 574 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 575 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 576 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 577 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 578 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 579 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 580 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 581 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 582 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 583 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 9.3132e-10, epoched 8.0
    test 584 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 585 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 586 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 587 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 588 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 589 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 590 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 591 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 592 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 593 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 594 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 595 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 596 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 1.8626e-09, epoched 8.0
    test 597 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 598 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 599 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 600 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 601 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 602 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 603 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 604 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 605 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 606 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 607 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 608 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 609 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 610 transform0: ITRF2014@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 611 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 612 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 613 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 614 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 615 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 616 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 617 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 618 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 619 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 620 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 621 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 622 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 623 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 624 TRFError: epoch (1899): below 1900.0 limit
    test 625 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 626 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 627 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 628 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 629 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 630 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 631 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 632 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 633 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 634 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 635 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 636 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 637 inverse: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@1989
    test 638 inverse: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989
    test 639 inverse: name='ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989', tx=0.0283, ty=0.046, tz=-0.0615, s1=1.0, rx=0.0, ry=0.0, rz=-7.757e-10, s=0.00567, sx=0.0, sy=0.0, sz=-0.00016

    test 640 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 641 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 642 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 643 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 644 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 645 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 646 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 647 TransformXform: ITRF2014@2015xETRF2000@2000

    test 648 inverse: -ITRF2014@2015xETRF2000@2000
    test 649 inverse: ITRF2014@2015xETRF2000@2000
    test 650 inverse: name='ITRF2014@2015xETRF2000@2000', tx=0.0537, ty=0.0512, tz=-0.0551, s1=1.0, rx=4.3197e-09, ry=2.6131e-08, rz=-4.2237e-08, s=0.00102, sx=0.000891, sy=0.00539, sz=-0.008712

    test 651 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 652 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 653 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 654 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 655 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 656 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 657 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 658 TransformXform: ITRF2014@2010xITRF2008@2005

    test 659 inverse: -ITRF2014@2010xITRF2008@2005
    test 660 inverse: ITRF2014@2010xITRF2008@2005
    test 661 inverse: name='ITRF2014@2010xITRF2008@2005', tx=0.0016, ty=0.0019, tz=0.0029, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=-0.00017, sx=0.0, sy=0.0, sz=0.0

    test 662 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 663 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 664 transform0: -ITRF2020@2015xITRF2014@2010
    test 665 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 666 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 667 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 668 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 669 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 670 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 671     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 672 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 673     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 674 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 675     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 676 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 677 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 678     Error2c: (0.000024786, -0.000062539, -0.000021304) max 6.254e-05, epoched 5.0
    test 679 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 680     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 681 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 682     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 683 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 684 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 685     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 686 transform2v: (0.00020, -0.00030, 0.00020)
    test 687     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 688 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 689     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 690 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 691 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 692     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 693 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 694     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 695 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 696     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 697 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 698 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 699     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 700 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 701     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 702 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 703     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 704 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 705 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 706     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 707 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 708     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 709 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 710 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 711     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 712 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 713     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 714 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 715 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 716     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 717 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 718     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 719 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 720 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 721     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 722 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 723     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 724 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 725 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 726     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 727 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 728     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 729 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 730 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 731     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 732 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 733     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 734 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 735 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 736     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 737 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 738     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 739 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 740 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 741     Error2c: (0.026743934, 0.030857919, -0.094203576) max 0.0942, epoched 32.0
    test 742 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 743     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 744 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 745 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 746     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 747 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 748     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 749 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 750 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 751     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 752 transform2v: (0.01350, -0.01676, -0.01001)

    test 753 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 754 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 755     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 756 transform2v: (-0.01350, 0.01666, 0.01021)

    test 757 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 758 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 759     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
./test/testTrf.py:29: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalExact.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:136: DeprecationWarning: method L{convertRefFrame<pygeodesy.ellipsoidalExact.LatLon.convertRefFrame>} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
    test 760 transform2v: (0.01381, -0.01706, -0.01024)

    test 761 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 762 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 763     Error2c: (-0.00006262, -0.000037673, -0.000034945) max 6.262e-05, epoched 5.0
    test 764 transform2v: (-0.01371, 0.01716, 0.00834)

    test 765 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 766 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 767     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 768 transform2v: (0.01287, -0.01740, -0.00945)

    test 769 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 770 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 771     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 772 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 773     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 774 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 775 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 776     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 3.8
    test 777 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 778     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 779 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 780 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 781     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 782 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 783     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 784 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 785 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 786     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 787 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 788     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 789 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 790 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 791     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 792 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 793     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 794 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 795 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 796     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 797 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 798     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 799 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 800 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 801     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 802 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 803     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 804 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 805 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 806     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 807 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 808     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 809 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 810 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 811     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 812 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 813     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 814 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 815 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 816     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 817 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 818     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 819 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 820 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 821 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 822 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 823 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 824 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 825 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 826 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 827 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 828 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 829 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 830 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 831 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 832 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 833 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 834 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 835 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 836 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 837 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 838 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 839 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 840 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    testTrf(pygeodesy.ellipsoidalExact, 24.11.06)
    test 841 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 842 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 843 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 844 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 845 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 846 Nil: True
    test 847 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 848 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 849 Nil: True
    test 850 reframe: True
    test 851 Roundtrip: True
    test 852 reframe: True
    test 853 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 854 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)

    test 855 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 856 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 857 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 858 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 859 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 860 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 861 Cartesian: [-734972.563, 4893188.492, 4011982.811]

    test 862 EUREF EX1: [4027894.0444, 307045.6209, 4919474.8613]
    test 863 transform0: ITRF2005@2015xETRF2020-ITRF91@2015xETRF2020@2007 max 9.3132e-10, epoched 8.0
    test 864 transform1: ITRF2005@2015xETRF2014-ITRF91@2015xETRF2014@2007 max 0.048666, epoched 8.0
    test 865 transform2: ITRF2005@2015xETRF2000-ITRF91@2015xETRF2000@2007 max 0.097331, epoched 8.0
    test 866 transform3: ITRF2005@2000xITRF2000+ITRF2000@1988xITRF91@2000@2007 max 0.146, epoched 19.0
    test 867 transform4: -ITRF2020@2015xITRF2005+ITRF2020@2015xITRF91@2007 max 0.19466, epoched 8.0
    test 868 transform5: -ITRF2014@2010xITRF2005+ITRF2014@2010xITRF91@2007 max 0.24333, epoched 3.0
    test 869 transform6: -ITRF2008@2005xITRF2005+ITRF2008@2000xITRF91@2005@2007 max 0.29199, epoched 7.0
    test 870 transform7: ITRF2000@1988xITRF91+ITRF2005@2000xITRF2000@1988@2007 max 0.34066, epoched 31.0
    test 871 transform8: ITRF2014@2010xITRF91-ITRF2014@2020xGDA2020@2010+ITRF2005@2020xGDA2020@2010@2007 max 0.98111, epoched 23.0
    test 872 transform9: ITRF2008@2000xITRF91-ITRF2008@1994xGDA94@2000+ITRF2005@1994xGDA94@2000@2007 max 0.35972, epoched 19.0
    test 873 transform10: ITRF2008@2000xITRF91-ITRF2008@1997xNAD83@2000+ITRF2005@1997xNAD83@2000@2007 max 0.40805, epoched 13.0
    test 874 EUREF EX2: [4027894.0060, 307045.6000, 4919474.9100]
    test 875 transform0: ITRF91@2015xETRF2020-ITRF2005@2015xETRF2020@2007 max 0.048666, epoched 8.0
    test 876 transform1: ITRF91@2015xETRF2014-ITRF2005@2015xETRF2014@2007 max 1.8626e-09, epoched 8.0
    test 877 transform2: ITRF91@2015xETRF2000-ITRF2005@2015xETRF2000@2007 max 0.048666, epoched 8.0
    test 878 transform3: -ITRF2005@2000xITRF2000-ITRF2000@1988xITRF91@2000@2007 max 0.097331, epoched 19.0
    test 879 EUREF EX4: [4027894.3559, 307045.2508, 4919474.6447]
    test 880 transform0: -ITRF2000@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 881 transform1: -ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2000@2012 max 0.35826, epoched 21.0
    test 882 transform2: -ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2000@2012 max 0.7048, epoched 21.0
    test 883 transform3: -ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2000@2012 max 1.054, epoched 30.0
    test 884 transform4: -ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2000@2012 max 1.4023, epoched 30.0
    test 885 transform5: -ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2000@2012 max 1.7514, epoched 30.0
    test 886 transform6: -ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2000@2012 max 2.1088, epoched 30.0
    test 887 transform7: -ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2000@2012 max 2.4877, epoched 30.0
    test 888 transform8: -ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2000@2012 max 2.8343, epoched 30.0
    test 889 EUREF EX5: [4027893.6458, 307045.9470, 4919475.1937]  FAILED, KNOWN, expected [4027894.3662, 307045.2530, 4919474.6263]
    test 890 transform0: ITRF2014@2015xETRF2000@2012 max 4.5169e-08, epoched 3.0
    test 891 transform1: ITRF2014@2010xITRF2008@2015+ITRF2008@2015xETRF2000@2012 max 0.36023, epoched 8.0
    test 892 transform2: ITRF2014@2010xITRF97@2015+ITRF97@2015xETRF2000@2012 max 0.72047, epoched 8.0
    test 893 transform3: ITRF2014@2010xITRF93@2015+ITRF93@2015xETRF2000@2012 max 1.0807, epoched 8.0
    test 894 transform4: ITRF2014@2010xITRF92@2015+ITRF92@2015xETRF2000@2012 max 1.4409, epoched 8.0
    test 895 transform5: ITRF2014@2010xITRF91@2015+ITRF91@2015xETRF2000@2012 max 1.8012, epoched 8.0
    test 896 transform6: ITRF2014@2010xITRF90@2015+ITRF90@2015xETRF2000@2012 max 2.1614, epoched 8.0
    test 897 transform7: ITRF2014@2010xITRF89@2015+ITRF89@2015xETRF2000@2012 max 2.5216, epoched 8.0
    test 898 transform8: ITRF2014@2010xITRF88@2015+ITRF88@2015xETRF2000@2012 max 2.8819, epoched 8.0

    test 899 Case 1A: [4027893.9619, 307045.5481, 4919474.9553]
    test 900 Case 1B: [4027894.0054, 307045.5938, 4919474.9083]
    test 901 Case 2A: [4027893.9639, 307045.545, 4919474.9573]
    test 902 Case 2B: [4027894.0033, 307045.5889, 4919474.9041]

    test 903 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 904 TRFError: epoch (1899): below 1900.0 limit
    test 905 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 906 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 907 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 908 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 909 ETRF89@1989: [4160476.944000, 653192.600000, 4774604.455000]
    test 910 ITRF2014@2018.8: [4160476.415, 653193.057, 4774604.903]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 911 TransformXform: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8
    test 912 Delta (m): [-0.06956, 0.035714, 0.122931]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 913 Error (m): 0.145692  FAILED, KNOWN, expected 0.01
    test 914 Epoch range: 29.800  FAILED, KNOWN, expected 14.0
    test 915 ETRF89@1989: [4160476.467836, 653193.103190, 4774604.868503]  FAILED, KNOWN, expected [4160476.944000, 653192.600000, 4774604.455000]
    test 916 TransformXform: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989

    test 917 inverse: -ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@1989
    test 918 inverse: ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989
    test 919 inverse: name='ITRF2014@2010xITRF89+ITRF89@1989xETRF89@2010@1989', tx=0.0283, ty=0.046, tz=-0.0615, s1=1.0, rx=0.0, ry=0.0, rz=-7.757e-10, s=0.00567, sx=0.0, sy=0.0, sz=-0.00016

    test 920 ETRF2000@2000: [4160476.952000, 653192.582000, 4774604.441000]
    test 921 ITRF2014@2018.8: [4160476.471, 653193.059, 4774604.804]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 922 TransformXform: -ITRF2014@2015xETRF2000@2018.8
    test 923 Delta (m): [-0.014174, 0.037835, 0.023963]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 924 Error (m): 0.046975  FAILED, KNOWN, expected 0.01
    test 925 Epoch range: 18.800  FAILED, KNOWN, expected 14.0
    test 926 ETRF2000@2000: [4160476.681125, 653192.914350, 4774604.647835]  FAILED, KNOWN, expected [4160476.952000, 653192.582000, 4774604.441000]
    test 927 TransformXform: ITRF2014@2015xETRF2000@2000

    test 928 inverse: -ITRF2014@2015xETRF2000@2000
    test 929 inverse: ITRF2014@2015xETRF2000@2000
    test 930 inverse: name='ITRF2014@2015xETRF2000@2000', tx=0.0537, ty=0.0512, tz=-0.0551, s1=1.0, rx=4.3197e-09, ry=2.6131e-08, rz=-4.2237e-08, s=0.00102, sx=0.000891, sy=0.00539, sz=-0.008712

    test 931 ITRF2008@2005: [4160476.674000, 653192.806000, 4774604.648000]
    test 932 ITRF2014@2018.8: [4160476.671, 653192.804, 4774604.645]  FAILED, KNOWN, expected [4160476.485, 653193.021, 4774604.78]
    test 933 TransformXform: -ITRF2014@2010xITRF2008@2018.8
    test 934 Delta (m): [0.186385, -0.217059, -0.134685]  FAILED, KNOWN, expected [0.01, 0.01, 0.01]
    test 935 Error (m): 0.316218  FAILED, KNOWN, expected 0.01
    test 936 Epoch range: 13.800  FAILED, KNOWN, expected 14.0
    test 937 ITRF2008@2005: [4160476.672278, 653192.805730, 4774604.647403]  FAILED, KNOWN, expected [4160476.674000, 653192.806000, 4774604.648000]
    test 938 TransformXform: ITRF2014@2010xITRF2008@2005

    test 939 inverse: -ITRF2014@2010xITRF2008@2005
    test 940 inverse: ITRF2014@2010xITRF2008@2005
    test 941 inverse: name='ITRF2014@2010xITRF2008@2005', tx=0.0016, ty=0.0019, tz=0.0029, s1=1.0, rx=0.0, ry=0.0, rz=0.0, s=-0.00017, sx=0.0, sy=0.0, sz=0.0

    test 942 toRefFrame1: ITRF2020@2015 2024.31 [0.0031474, 0.00210534, -0.00125667]
    test 943 toRefFrame2: ITRF2014@2010 2024.32 [0.0031474, 0.00210634, -0.00125867]
    test 944 transform0: -ITRF2020@2015xITRF2014@2010
    test 945 transform0X: TRFXform(epoch=2010.0, name='-ITRF2020@2015xITRF2014@2010')
    test 946 toRefFrame3: ITRF2020@2015 2010 [0.0031474, 0.00067434, 0.00160533]
    test 947 transform2x: (4160476.488147, 653193.021674, 4774604.781605)
    test 948 transform2v: (0.000, 0.000, 0.000)  FAILED, KNOWN, expected (0.004, 0.003, 0.004)

    test 949 transform0: name='ITRF2020@2015xETRF2020@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.75573508e-09, ry=5.28398431e-08, rz=-7.66635874e-08, s=0.0, sx=0.001806, sy=0.010899, sz=-0.015813
    test 950 transform2c: (4027893.9585, 307045.5550, 4919474.9620)  FAILED, KNOWN, expected (4027893.9585, 307045.5550, 4919474.9619)
    test 951     Error2c: (-0.000016463, 0.0000336, 0.000055143) max 5.514e-05, epoched 5.0
    test 952 transform2v: (-0.00011, 0.00010, 0.00023)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 953     Error2v: (-0.000220786, -0.000005544, -0.000006899) max 0.0002208
    test 954 transform0v: (0.00009, 0.00052, -0.00075)  FAILED, KNOWN, expected (0.00011, 0.00011, 0.00024)
    test 955     Error0v: (-0.000024, 0.000409, -0.000993) max 0.000993

    test 956 transform0: name='-ITRF2014@2015xETRF2020@2010', tx=-0.0014, ty=-0.0004, tz=0.0004, s1=1.0, rx=-8.75573508e-09, ry=-5.28398431e-08, rz=7.66635874e-08, s=-0.00042, sx=-0.001806, sy=-0.010899, sz=0.015813
    test 957 transform2c: (4027893.6719, 307045.9063, 4919475.1704)  FAILED, KNOWN, expected (4027893.6719, 307045.9064, 4919475.1704)
    test 958     Error2c: (0.000024786, -0.000062539, -0.000021304) max 6.254e-05, epoched 5.0
    test 959 transform2v: (-0.01339, 0.01677, 0.01045)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 960     Error2v: (0.000220784, 0.000005543, 0.000006898) max 0.0002208
    test 961 transform0v: (-0.00009, -0.00052, 0.00075)  FAILED, KNOWN, expected (-0.01361, 0.01676, 0.01044)
    test 962     Error0v: (0.013524, -0.017279, -0.009687) max 0.01728

    test 963 transform0: name='ITRF2014@2015xETRF2014@2010', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=8.65392421e-09, ry=5.40615736e-08, rz=-7.83943722e-08, s=0.0, sx=0.001785, sy=0.011151, sz=-0.01617
    test 964 transform2c: (4027893.9619, 307045.5481, 4919474.9553)  FAILED, KNOWN, expected (4027893.9620, 307045.5480, 4919474.9553)
    test 965     Error2c: (-0.00007476, 0.000063039, 0.000002882) max 7.476e-05, epoched 5.0
    test 966 transform2v: (0.00020, -0.00030, 0.00020)
    test 967     Error2v: (0.000000724, -0.000003666, -0.000002721) max 3.666e-06
    test 968 transform0v: (0.00009, 0.00053, -0.00077)  FAILED, KNOWN, expected (0.00020, -0.00030, 0.00020)
    test 969     Error0v: (-0.000115, 0.000831, -0.00097) max 0.00097

    test 970 transform0: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 971 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 972     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 973 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 974     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373
    test 975 transform0v: (-0.00008, -0.00053, 0.00077)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 976     Error0v: (0.012985, -0.017431, -0.00831) max 0.01743

    test 977 transform0: name='ITRF2000@2015xETRF2000@2010', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=8.24668072e-09, ry=4.98873278e-08, rz=-8.06342114e-08, s=0.0, sx=0.001701, sy=0.01029, sz=-0.016632
    test 978 transform2c: (4027894.0054, 307045.5938, 4919474.9083)  FAILED, KNOWN, expected (4027894.0053, 307045.5939, 4919474.9083)
    test 979     Error2c: (0.000077874, -0.000055372, -0.000008743) max 7.787e-05, epoched 5.0
    test 980 transform2v: (-0.00020, -0.00050, -0.00037)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 981     Error2v: (-0.000004389, 0.000002124, -0.000008036) max 8.036e-06
    test 982 transform0v: (0.00008, 0.00049, -0.00079)  FAILED, KNOWN, expected (-0.00020, -0.00050, -0.00036)
    test 983     Error0v: (0.000281, 0.00099, -0.000432) max 0.00099

    test 984 transform0/: name='-ITRF2000@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 985 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 986     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 5.0
    test 987 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 988     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 989 transform1/: name='-ITRF2000@1997xITRF97@2015-ITRF97@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=8.09154034e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01669
    test 990 transform2c: (4027893.6865, 307045.9168, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 991     Error2c: (0.005269863, 0.008612365, -0.033003577) max 0.033, epoched 23.0
    test 992 transform2v: (-0.01357, 0.01710, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 993     Error2v: (-0.00050027, 0.000204776, -0.00179728) max 0.001797

    test 994 transform2/: name='-ITRF2000@1997xITRF96@2015-ITRF96@2015xETRF2014@2010', tx=0.00673, ty=-0.00033, tz=-0.05913, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 995 transform2c: (4027893.6872, 307045.9067, 4919475.1217)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 996     Error2c: (0.006043935, -0.001542081, -0.033003577) max 0.033, epoched 23.0
    test 997 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 998     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 999 transform3/: name='-ITRF2000@1988xITRF93@2015-ITRF93@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1000 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 1001     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 1002 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1003     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 1004 transform4/: name='-ITRF2000@1988xITRF92@2015-ITRF92@2015xETRF2014@2010', tx=0.01393, ty=0.00147, tz=-0.06633, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1005 transform2c: (4027893.6944, 307045.9085, 4919475.1145)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 1006     Error2c: (0.013243935, 0.000257919, -0.040203577) max 0.0402, epoched 32.0
    test 1007 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1008     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 1009 transform5/: name='-ITRF2000@1988xITRF91@2015-ITRF91@2015xETRF2014@2010', tx=0.0007, ty=0.0012, tz=-0.0261, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1010 transform2c: (4027893.6812, 307045.9082, 4919475.1547)
    test 1011     Error2c: (0.000013934, -0.000012081, 0.000026423) max 2.642e-05, epoched 32.0
    test 1012 transform2v: (-0.01351, 0.01686, 0.00854)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1013     Error2v: (-0.000440726, -0.000036335, -0.00053728) max 0.0005373

    test 1014 transform6/: name='-ITRF2000@1988xITRF90@2015-ITRF90@2015xETRF2014@2010', tx=0.02293, ty=0.01047, tz=-0.08613, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1015 transform2c: (4027893.7034, 307045.9175, 4919475.0947)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 1016     Error2c: (0.022243935, 0.009257919, -0.060003577) max 0.06, epoched 32.0
    test 1017 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1018     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 1019 transform7/: name='-ITRF2000@1988xITRF89@2015-ITRF89@2015xETRF2014@2010', tx=0.02743, ty=0.03207, tz=-0.12033, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1020 transform2c: (4027893.7079, 307045.9391, 4919475.0605)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 1021     Error2c: (0.026743934, 0.030857919, -0.094203576) max 0.0942, epoched 32.0
    test 1022 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1023     Error2v: (-0.000440726, -0.000576335, -0.00179728) max 0.001797

    test 1024 transform8/: name='-ITRF2000@1988xITRF88@2015-ITRF88@2015xETRF2014@2010', tx=0.02293, ty=-0.00033, tz=-0.14193, s1=1.0, rx=-8.65392421e-09, ry=-5.40615736e-08, rz=7.83943722e-08, s=0.00212, sx=-0.001785, sy=-0.011151, sz=0.01617
    test 1025 transform2c: (4027893.7034, 307045.9067, 4919475.0389)  FAILED, KNOWN, expected (4027893.6812, 307045.9082, 4919475.1547)
    test 1026     Error2c: (0.022243935, -0.001542081, -0.115803577) max 0.1158, epoched 32.0
    test 1027 transform2v: (-0.01351, 0.01632, 0.00728)  FAILED, KNOWN, expected (-0.01307, 0.01690, 0.00908)
    test 1028     Error2v: (-0.000440725, -0.000576335, -0.00179728) max 0.001797

    test 1029 transform0: name='ITRF2020@2015xETRF2020@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.29251327e-08, ry=7.80016732e-08, rz=-1.13170058e-07, s=0.0, sx=0.002666, sy=0.016089, sz=-0.023343
    test 1030 transform2c: (4027893.9574, 307045.5561, 4919474.9643)
    test 1031     Error2c: (-0.000024276, -0.000021815, -0.000013824) max 2.428e-05, epoched 5.0
    test 1032 transform2v: (0.01350, -0.01676, -0.01001)

    test 1033 transform0: name='-ITRF2014@2015xETRF2020@2020', tx=-0.0014, ty=-0.0014, tz=0.0024, s1=1.0, rx=-1.29251327e-08, ry=-7.80016732e-08, rz=1.13170058e-07, s=-0.00042, sx=-0.002666, sy=-0.016089, sz=0.023343
    test 1034 transform2c: (4027893.5358, 307046.0740, 4919475.2748)
    test 1035     Error2c: (0.000032643, -0.000007101, 0.000047684) max 4.768e-05, epoched 5.0
    test 1036 transform2v: (-0.01350, 0.01666, 0.01021)

    test 1037 transform0: name='ITRF2014@2015xETRF2014@2020', tx=0.0, ty=0.0, tz=0.0, s1=1.0, rx=1.27748405e-08, ry=7.980518e-08, rz=-1.15725026e-07, s=0.0, sx=0.002635, sy=0.016461, sz=-0.02387
    test 1038 transform2c: (4027893.9639, 307045.5450, 4919474.9573)
    test 1039     Error2c: (0.000032525, 0.000026405, -0.000024305) max 3.253e-05, epoched 5.0
    test 1040 transform2v: (0.01381, -0.01706, -0.01024)

    test 1041 transform0: name='-ITRF2000@2015xETRF2014@2020', tx=0.0017, ty=0.0022, tz=-0.0451, s1=1.0, rx=-1.27748405e-08, ry=-7.980518e-08, rz=1.15725026e-07, s=0.00322, sx=-0.002635, sy=-0.016461, sz=0.02387
    test 1042 transform2c: (4027893.5504, 307046.0772, 4919475.2456)  FAILED, KNOWN, expected (4027893.5505, 307046.0772, 4919475.2456)
    test 1043     Error2c: (-0.00006262, -0.000037673, -0.000034945) max 6.262e-05, epoched 5.0
    test 1044 transform2v: (-0.01371, 0.01716, 0.00834)

    test 1045 transform0: name='ITRF2000@2015xETRF2000@2020', tx=0.054, ty=0.051, tz=-0.048, s1=1.0, rx=1.21736715e-08, ry=7.36431982e-08, rz=-1.19031455e-07, s=0.0, sx=0.002511, sy=0.01519, sz=-0.024552
    test 1046 transform2c: (4027894.0033, 307045.5889, 4919474.9047)
    test 1047     Error2c: (0.000034031, -0.000034106, 0.000010915) max 3.411e-05, epoched 5.0
    test 1048 transform2v: (0.01287, -0.01740, -0.00945)

    test 1049 transform0*: name='-ITRF2014@2010xITRF89-ITRF89@1989xETRF89@2010@2018.8', tx=-0.03128, ty=-0.0311, tz=0.15984, s1=0.999999991, rx=-1.58921925e-08, ry=-8.23504519e-08, rz=1.00463091e-07, s=-0.009246, sx=-0.003278, sy=-0.016986, sz=0.020722
    test 1050 transform2c: (4160476.4154, 653193.0567, 4774604.9029)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1051     Error2c: (-0.069560351, 0.035713888, 0.122930501) max 0.1229, epoched 29.8
    test 1052 transform2v: (-0.01148, 0.01996, 0.01845)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1053     Error2v: (-0.015479395, 0.016963959, 0.014448874) max 0.01696

    test 1054 transform0*: name='-ITRF2014@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1055 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1056     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 3.8
    test 1057 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1058     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1059 transform1*: name='-ITRF2014@2010xITRF2008@2015-ITRF2008@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1060 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1061     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1062 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1063     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1064 transform2*: name='-ITRF2014@2010xITRF97@2015-ITRF97@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1065 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1066     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1067 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1068     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1069 transform3*: name='-ITRF2014@2010xITRF93@2015-ITRF93@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1070 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1071     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1072 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1073     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1074 transform4*: name='-ITRF2014@2010xITRF92@2015-ITRF92@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1075 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1076     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1077 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1078     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1079 transform5*: name='-ITRF2014@2010xITRF91@2015-ITRF91@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1080 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1081     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1082 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1083     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1084 transform6*: name='-ITRF2014@2010xITRF90@2015-ITRF90@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1085 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1086     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1087 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1088     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1089 transform7*: name='-ITRF2014@2010xITRF89@2015-ITRF89@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1090 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1091     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1092 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1093     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1094 transform8*: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=0.999999997, rx=-1.17024326e-08, ry=-7.07924937e-08, rz=1.14423786e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.0236016
    test 1095 transform2c: (4160476.4708, 653193.0588, 4774604.8040)  FAILED, KNOWN, expected (4160476.4850, 653193.0210, 4774604.7800)
    test 1096     Error2c: (-0.014174475, 0.037834952, 0.023962617) max 0.03783, epoched 8.8
    test 1097 transform2v: (-0.00995, 0.02075, 0.01553)  FAILED, KNOWN, expected (0.00400, 0.00300, 0.00400)
    test 1098     Error2v: (-0.013950571, 0.017750066, 0.011527066) max 0.01775

    test 1099 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602
    test 1100 toTransform: name='-ITRF2014@2010xITRF88@2015-ITRF88@2015xETRF2000@2018.8', tx=-0.05558, ty=-0.05308, tz=0.09082, s1=1.0, rx=-1.1702e-08, ry=-7.0792e-08, rz=1.1442e-07, s=-0.003088, sx=-0.0024138, sy=-0.014602, sz=0.023602

    test 1101 Issue80: 48.77691577°N, 008.92257142°E, +476.05m
    test 1102 Issue80: 48.77692147°N, 008.92257868°E, +476.09m
    test 1103 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m  FAILED, KNOWN, expected 48°46′36.915134″N, 008°55′21.285094″E, +476.10
    test 1104 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 1105 Issue80: [4160476.944064, 653192.600457, 4774604.455385]
    test 1106 Issue80: [4160476.415504, 653193.057171, 4774604.903316]
    test 1107 Issue80: [4160476.467901, 653193.103647, 4774604.868888]
    test 1108 Issue80: 48°46′36.915133″N, 008°55′21.285094″E, +476.10m

    test 1109 Issue80: 48.77692032°N, 008.92257804°E, +476.05m
    test 1110 Issue80: 48.77691971°N, 008.92257856°E, +476.06m
    test 1111 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m  FAILED, KNOWN, expected 48°46′36.9131″N, 008°55′21.28095″E, +476.05m
    test 1112 Issue80: 0.804  FAILED, KNOWN, expected 0.01
    test 1113 Issue80: [4160476.492633, 653193.021888, 4774604.78885]
    test 1114 Issue80: [4160476.54503, 653193.068365, 4774604.754422]
    test 1115 Issue80: [4160476.016469, 653193.525079, 4774605.202353]
    test 1116 Issue80: 48°46′36.9315″N, 008°55′21.3089″E, +476.10m

    test 1117 ITRF96@1997xNAD83: TRFXform(epoch=1997.0, name='ITRF96@1997xNAD83')
    test 1118 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2503e-07, ry=4.6785e-08, rz=5.6529e-08, s=0.0, sx=0.02579, sy=0.00965, sz=0.01166
    test 1119 ITRF96@1997xNAD83: name='ITRF96@1997xNAD83@2007', tx=0.991, ty=-0.19072, tz=-0.5129, s1=1.0, rx=1.2761e-07, ry=1.0797e-08, rz=5.4997e-08, s=0.0, sx=0.026322, sy=0.002227, sz=0.011344
    test 1120 ITRF96@1997xNAD83: rx=-2.5792e-10, ry=3.5988e-09, rz=1.532e-10

    test 1121 TRFError: day (2), month (1) or year (None): int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
    test 1122 toStr: name='GDA94', epoch=1994, datum=Datums.GRS80
    test 1123 str: name='GDA94', epoch=1994, datum=Datums.GRS80
    test 1124 toStr2: RefFrame(name='GDA94', epoch=1994, datum=Datums.GRS80)
    test 1125 repr: RefFrame(name='GDA94', epoch=1994, datum=Datums.GRS80)

    test 1126 epoch: 2020.003
    test 1127 y-m-d: (2020, 1, 1)
    test 1128 epoch: 2020.251
    test 1129 y-m-d: (2020, 4, 1)
    test 1130 epoch: 2020.500
    test 1131 y-m-d: (2020, 7, 1)
    test 1132 epoch: 2020.751
    test 1133 y-m-d: (2020, 10, 1)
    test 1134 epoch: 2021.000
    test 1135 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)

    test 1136 Epoch (2020).std_repr: False
    test 1137 Epoch (2020.001): (2020, 1, 1)
    test 1138 Epoch (2020.086): (2020, 2, 1)
    test 1139 Epoch (2020.165): (2020, 3, 1)
    test 1140 Epoch (2020.25): (2020, 4, 1)
    test 1141 Epoch (2020.332): (2020, 5, 1)
    test 1142 Epoch (2020.416): (2020, 6, 1)
    test 1143 Epoch (2020.498): (2020, 7, 1)
    test 1144 Epoch (2020.583): (2020, 8, 1)
    test 1145 Epoch (2020.668): (2020, 9, 1)
    test 1146 Epoch (2020.75): (2020, 10, 1)
    test 1147 Epoch (2020.834): (2020, 11, 1)
    test 1148 Epoch (2020.916): (2020, 12, 1)
    test 1149 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    294 of 1149 testTrf.py tests (25.6%) FAILED, incl. 286 KNOWN plus 8 DeprecationWarnings (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 642.763 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testTriaxials.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testTriaxials.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testTriaxials.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTriaxials.py line 11
# lazily imported pygeodesy.fstr from .streprs by testTriaxials.py line 11
# lazily imported pygeodesy.JacobiConformal from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.JacobiConformalSpherical from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Los from .ltpTuples by testTriaxials.py line 11
# lazily imported pygeodesy.map1 from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.signBit from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.sincos2d_ from .utily by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial_ from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxials from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.triaxum5 from .vector2d by testTriaxials.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testTriaxials.py line 11

    testing testTriaxials.py 24.08.19 isLazy=3

    testHartzell(pygeodesy.triaxials, 24.10.15)
    test 1 hartzell4: (884268.349816, 5592134.174908, 2927668.068131, 12669388.912805)
    test 2 hartzell4: 0
    test 3 hartzell4: (3642143.609933, 3678204.437754, 3714265.265575, 11296443.179278)
    test 4 hartzell4: 0

    test 5 hartzell4: (888679.181482, 5594339.590741, 2931196.612187, 12663325.092381)
    test 6 hartzell4: 0
    test 7 hartzell4: (3642304.092727, 3678366.509487, 3714428.926247, 11296162.453809)
    test 8 hartzell4: 0

    test 9 hartzell4: (884080.396945, 5592040.198472, 2927517.711001, 12669647.302276)
    test 10 hartzell4: 0
    test 11 hartzell4: (3642031.283571, 3678090.99925, 3714150.714929, 11296639.666827)
    test 12 hartzell4: 0
# lazily imported pygeodesy.ecef by ellipsoidalVincenty.py line 373

    test 13 hartzell: 30°38′27.119″N, 060°44′36.777″E, +142549.69m
    test 14 hartzell: 30.640866, 060.743549, +142549.69m
    test 15 hartzell: [2807429.59, 4862610.688, 3220373.735]
    test 16 hartzell: [2684238.298, 4791786.806, 3231700.636]
    test 17 hartzell: 142549.6943849337

    test 18 hartzell: 30°00′00.0″N, 060°00′00.0″E, +100000.00m
    test 19 hartzell: 30.0, 060.0, +100000.00m
    test 20 hartzell: [2807429.59, 4862610.688, 3220373.735]
    test 21 hartzell: [2764128.32, 4787610.688, 3170373.735]
    test 22 hartzell: 100000.00000000023  FAILED, KNOWN, expected 100000.0

    testJacobiConformal(pygeodesy.triaxials, 24.10.15)
# lazily imported pygeodesy.elliptic by triaxials.py line 367
    test 23 JacobiConformal: JacobiConformal(name='Test', a=6378172, b=6378102, c=6356752, e2ab=0.00002195, e2bc=0.006683577, e2ac=0.00670538, xyQ2=xyQ2(x=1.572093, y=4.246581), volume=1083207266220584468480, area=510065604942135.9375, area_p=510065609807745.0)
    test 24 xR: 1.5720928043230937  FAILED, KNOWN, expected 1.572092804
    test 25 yR: 4.246581015231323  FAILED, KNOWN, expected 4.246581015
    test 26 xyR2.toDegrees: (90.074283, 243.31117)
    test 27 xyR2.toDegrees: (90.074283, 243.311169)  FAILED, KNOWN, expected ('90°04′27.42″N', '243°18′40.21″E')
    test 28 area: 510065604942135
    test 29 area_p: 510065609807745
    test 30 error: 9.54e-09
    test 31 volume: 1.083207e+21

    test 32 JacobiConformal: JacobiConformal(name='Itokawa25134', a=267.5, b=147, c=104.5, e2ab=0.6980138, e2bc=0.494643436, e2ac=0.847389292, xyQ2=xyQ2(x=3.13215, y=1.42547), volume=17212581.945495993, area=359464.659686278, area_p=359430.867250807)
    test 33 xyR2: (0.0, 0.61539)
    test 34 toDegrees: (0.0, 35.259243)
    test 35 toDegrees: (0.0, 35.259242)  FAILED, KNOWN, expected ('00°00′00.0″N', '035°15′33.27″E')
    test 36 xyQ2: (3.13215, 1.42547)
    test 37 toDegrees: (179.458966, 81.673412)  FAILED, KNOWN, expected (179.4589659, 81.673412)
    test 38 toDegrees: (179.458967, 81.673411)  FAILED, KNOWN, expected ('179°27′32.28″N', '081°40′24.28″E')

    testJacobiConformalSpherical(pygeodesy.triaxials, 24.10.15)
    test 39 JacobiConformalSpherical: JacobiConformalSpherical(name='Test', a=6378172, ab=1, bc=2, e2ab=0, e2bc=0, e2ac=0, xyQ2=xyQ2(x=1.733917, y=2.028959), volume=1086869218894412120064, area=511213503913540.8125, area_p=511213503913540.8125)
    test 40 xR: 1.7339168852579347  FAILED, KNOWN, expected 1.73391688526
    test 41 yR: 2.028959102748815  FAILED, KNOWN, expected 2.02895910275
    test 42 xyR2.toDegrees: (99.34612, 116.250793)
    test 43 xyR2.toDegrees: (99.346119, 116.250794)  FAILED, KNOWN, expected ('99°20′46.03″N', '116°15′02.86″E')
    test 44 areax: 511213503913540
    test 45 area_p: 511213503913540
    test 46 error: 0.00e+00
    test 47 volume: 1.086869e+21

    test 48 JacobiConformalSpherical: JacobiConformalSpherical(name='Itokawa25134', a=267.5, ab=147, bc=104.5, e2ab=0, e2bc=0, e2ac=0, xyQ2=xyQ2(x=1.933157, y=1.788429), volume=80178876.856908351, area=899202.357273738, area_p=899202.357273738)
    test 49 xyR2: (0.0, 0.818354)
    test 50 toDegrees: (0.0, 46.888217)
    test 51 toDegrees: (0.0, 46.888217)  FAILED, KNOWN, expected ('00°00′00.0″N', '046°53′17.58″E')
    test 52 xyQ2: (1.933157, 1.788429)
    test 53 toDegrees: (110.761743, 102.469455)  FAILED, KNOWN, expected (179.4589659, 81.673412)
    test 54 toDegrees: (110.761742, 102.469456)  FAILED, KNOWN, expected ('110°45′42.27″N', '102°28′10.04″E')

    testTriaxial(pygeodesy.triaxials, 24.10.15)
    test 55 Triaxial: Triaxial(name='Test', a=6378388, b=6378318, c=6356911.9461, e2ab=0.000021949, e2bc=0.006700868, e2ac=0.00672267, volume=1083307891664673177600, area=510097198412933.0625, area_p=510097203304282.5)
    test 56 Triaxial: Triaxial_(name='Un', a=6356911.9461, b=6378388, c=6378318, e2ab=-0.00676817, e2bc=0.000021949, e2ac=-0.006746073, volume=1083307891664673308672, area=510097198412933.0625, area_p=510097203304282.5)

    test 57 forwardBetaOmega: (4234607.381429, 3551286.590486, 3176009.080037)
    test 58 forwardBetaOmega: (4233813.533025, 3550620.827453, 3175409.655093)
    test 59 length: 1196.973671

    test 60 forwardCartesian: (4233813.533151, 3550620.827558, 3175409.654809, 1196.973671)
    test 61 forwardCartesian: (4239665.951888, 3553574.566129, 3164352.410834, 12911.309173)

    test 62 reverseCartesian: (4234607.381429, 3551286.590486, 3176009.080037)
    test 63 reverseCartesian: (4248255.186992, 3560773.833183, 3170763.143924)  FAILED, KNOWN, expected (4234607.381429, 3551286.590486, 3176009.080037)

    test 64 forwardBetaOmega_: (4233813.533025, 3550620.827453, 3175409.655093)

    test 65 reverseLatLon: (30.051881, 39.984967, 0.0)
    test 66 forwardLatLon: (4233813.533025, 3550620.827453, 3175409.655093)

    test 67 reverseBetaOmega: (0.520687, 0.698121, 12892.55755)
    test 68 reverseBetaOmega: (0.521162, 0.698437, 12918.032538)
    test 69 toDegrees: (29.860398, 40.017494, 12918.032538)
    test 70 toDegrees: (29.860397, 40.017494, 12918.032538)  FAILED, KNOWN, expected ('29°51′37.43″', '40°01′02.98″', 12918.032538)

    test 71 height4: (1.206423, 1.61288, 0.433517, 3.593736)
    test 72 height4: 52
    test 73 height4: 0
    test 74 height4: (-1.206423, -1.61288, -0.433517, 3.593736)
    test 75 height4: (0.0, 1.746769, 0.487031, 3.375213)
    test 76 height4: (1.563196, 0.0, 0.853517, 2.190477)
    test 77 height4: (1.297504, 1.803267, 0.0, 2.306326)

    test 78 height4(-2, -4, -3): (-1.206423, -1.61288, -0.433517, 3.593736) 52
    test 79 signBit(-2, -4, -3): (True, True, True)

    test 80 height4(-2, -4, 0): (-1.297504, -1.803267, 0.0, 2.306326) 52
    test 81 signBit(-2, -4, 0): (True, True, False)

    test 82 height4(-2, -4, 3): (-1.206423, -1.61288, 0.433517, 3.593736) 52
    test 83 signBit(-2, -4, 3): (True, True, False)

    test 84 height4(-2, 0, -3): (-1.563196, 0.0, -0.853517, 2.190477) 53
    test 85 signBit(-2, 0, -3): (True, False, True)

    test 86 height4(-2, 0, 0): (-3.0, 0.0, 0.0, -1.0) None
    test 87 signBit(-2, 0, 0): (True, False, False)

    test 88 height4(-2, 0, 3): (-1.563196, 0.0, 0.853517, 2.190477) 53
    test 89 signBit(-2, 0, 3): (True, False, False)

    test 90 height4(-2, 4, -3): (-1.206423, 1.61288, -0.433517, 3.593736) 52
    test 91 signBit(-2, 4, -3): (True, False, True)

    test 92 height4(-2, 4, 0): (-1.297504, 1.803267, 0.0, 2.306326) 52
    test 93 signBit(-2, 4, 0): (True, False, False)

    test 94 height4(-2, 4, 3): (-1.206423, 1.61288, 0.433517, 3.593736) 52
    test 95 signBit(-2, 4, 3): (True, False, False)

    test 96 height4(0, -4, -3): (0.0, -1.746769, -0.487031, 3.375213) 54
    test 97 signBit(0, -4, -3): (False, True, True)

    test 98 height4(0, -4, 0): (0.0, -2.0, 0.0, 2.0) None
    test 99 signBit(0, -4, 0): (False, True, False)

    test 100 height4(0, -4, 3): (0.0, -1.746769, 0.487031, 3.375213) 54
    test 101 signBit(0, -4, 3): (False, True, False)

    test 102 height4(0, 0, -3): (0.0, 0.0, -1.0, 2.0) None
    test 103 signBit(0, 0, -3): (False, False, True)

    test 104 height4(0, 0, 0): (0.0, 0.0, 0.0, -1.0) None
    test 105 signBit(0, 0, 0): (False, False, False)

    test 106 height4(0, 0, 3): (0.0, 0.0, 1.0, 2.0) None
    test 107 signBit(0, 0, 3): (False, False, False)

    test 108 height4(0, 4, -3): (0.0, 1.746769, -0.487031, 3.375213) 54
    test 109 signBit(0, 4, -3): (False, False, True)

    test 110 height4(0, 4, 0): (0.0, 2.0, 0.0, 2.0) None
    test 111 signBit(0, 4, 0): (False, False, False)

    test 112 height4(0, 4, 3): (0.0, 1.746769, 0.487031, 3.375213) 54
    test 113 signBit(0, 4, 3): (False, False, False)

    test 114 height4(2, -4, -3): (1.206423, -1.61288, -0.433517, 3.593736) 52
    test 115 signBit(2, -4, -3): (False, True, True)

    test 116 height4(2, -4, 0): (1.297504, -1.803267, 0.0, 2.306326) 52
    test 117 signBit(2, -4, 0): (False, True, False)

    test 118 height4(2, -4, 3): (1.206423, -1.61288, 0.433517, 3.593736) 52
    test 119 signBit(2, -4, 3): (False, True, False)

    test 120 height4(2, 0, -3): (1.563196, 0.0, -0.853517, 2.190477) 53
    test 121 signBit(2, 0, -3): (False, False, True)

    test 122 height4(2, 0, 0): (3.0, 0.0, 0.0, -1.0) None
    test 123 signBit(2, 0, 0): (False, False, False)

    test 124 height4(2, 0, 3): (1.563196, 0.0, 0.853517, 2.190477) 53
    test 125 signBit(2, 0, 3): (False, False, False)

    test 126 height4(2, 4, -3): (1.206423, 1.61288, -0.433517, 3.593736) 52
    test 127 signBit(2, 4, -3): (False, False, True)

    test 128 height4(2, 4, 0): (1.297504, 1.803267, 0.0, 2.306326) 52
    test 129 signBit(2, 4, 0): (False, False, False)

    test 130 height4(2, 4, 3): (1.206423, 1.61288, 0.433517, 3.593736) 52
    test 131 signBit(2, 4, 3): (False, False, False)

    test 132 _plumbTo5: 2.356, 1.116, 0.268, 6.503, 54
    test 133 _plumbTo5: 2.356, 0.268, 1.116, 6.503, 54
    test 134 _plumbTo5: 1.116, 2.356, 0.268, 6.503, 54
    test 135 _plumbTo5: 1.116, 0.268, 2.356, 6.503, 54
    test 136 _plumbTo5: 0.268, 2.356, 1.116, 6.503, 54
    test 137 _plumbTo5: 0.268, 1.116, 2.356, 6.503, 54

    test 138 _plumbTo5(2497392.6389425737, 1421943.7432763362, 0.0): (5539712.569012, 3128532.197828, 0.0, -3488288.220619) 53
    test 139 _plumbTo5(-7986011.478693855, 2988040.264654267, 2649548.6685901354): (-5687267.035518, 2132069.469994, 1890532.190229, 2567687.292247) 53
    test 140 _plumbTo5(-6951610.877991654, 5738051.450795166, -8085729.928673497): (-3649826.178205, 3022317.643114, -4258830.818444, 5737782.595899) 54
    test 141 _plumbTo5(2277950.5854603364, 1375390.5729984357, 3109080.8032656647): (3555894.059124, 2138925.785256, 4835116.847392, -2279325.770455) 55
    test 142 _plumbTo5(0.0, 3035849.6316963346, 3252002.705809174): (0.0, 4352538.692505, 4662484.665307, -1929541.251418) 54
    test 143 _plumbTo5(2659029.8014750327, 4452589.884502411, -10424030.540363634): (1452243.646393, 2439248.542083, -5710507.727, 5265659.834939) 54
    test 144 _plumbTo5(-6571381.065376812, -7228318.239559689, 2749363.403746281): (-4118325.865379, -4541429.381524, 1727364.160755, 3779065.228644) 53
    test 145 _plumbTo5(4300487.605291127, 5029639.538415094, -12173569.640109826): (1972517.144708, 2315385.446434, -5604014.342022, 7479684.388784) 53
    test 146 _plumbTo5(-8020626.795036516, 1893065.8902257811, 668710.694217942): (-6167309.223642, 1457901.904418, 514989.827163, 1909917.228561) 50
    test 147 _plumbTo5(5606229.207495488, -7871046.0018608635, -6784076.867434772): (3019006.897065, -4251823.002609, -3664621.316131, 5433552.920371) 54
    test 148 _plumbTo5(-12264130.670391047, -6906782.444915587, 0.0): (-5538516.052554, -3130664.260141, 0.0, 7713167.995904) 51
    test 149 _plumbTo5(1096446.0287868096, 6020749.16078667, -8641736.86903497): (658663.75147, 3626555.540425, -5205243.457586, 4211092.896274) 54
    test 150 _plumbTo5(6140158.46845594, 1426660.4165984183, 1093550.019700405): (6102446.734716, 1417956.675051, 1086878.365907, 39273.921919) 56
    test 151 _plumbTo5(3970424.331196042, -7973356.294829226, 5095373.929955613): (2461309.073838, -4955432.171094, 3166742.986471, 3886503.852151) 54
    test 152 _plumbTo5(4343815.582984223, -7510887.479548004, -10612550.702659082): (2013961.036037, -3494940.137236, -4938137.367047, 7331781.636787) 54
    test 153 _plumbTo5(3550875.591796924, 0.0, 2941530.169761292): (4907144.396049, 0.0, 4054679.828285, -1754584.63223) 54
    test 154 _plumbTo5(2525290.1419793274, 0.0, 5605322.312157325): (2618984.740981, 0.0, 5811848.894834, -226786.038446) 58
    test 155 _plumbTo5(3841139.237515256, 4259660.23685891, 0.0): (4266766.825356, 4728141.048376, 0.0, -632955.854931) 56
    test 156 _plumbTo5(814843.2466540458, -11267402.48897538, -8324889.715191486): (369009.868579, -5121393.004424, -3783882.00293, 7654603.257389) 55
    test 157 _plumbTo5(3371218.7211722564, 4205821.624473584, 5136731.827887001): (2883685.372341, 3601092.060026, 4398138.454935, 1071870.693184) 50
    test 158 _plumbTo5(3169956.0032425695, -9838583.016336141, 4417568.909102778): (1793378.147342, -5582399.517579, 2506499.192657, 4864386.089689) 55
    test 159 _plumbTo5(5644957.234784464, 3789787.1474174643, 0.0): (5282630.101137, 3548066.926052, 0.0, 435556.675065) 55
    test 160 _plumbTo5(4024145.2605877803, 2201230.176782536, -10822135.194114035): (2176907.303149, 1194466.667333, -5872420.852077, 5378246.2665) 54
    test 161 _plumbTo5(-12245037.077421712, 4887536.58055923, 4480762.602411048): (-5589618.3893, 2239246.230291, 2052856.540555, 7563251.122283) 51
    test 162 _plumbTo5(1067949.1408728543, 3064063.738952389, -9140129.89173091): (700682.954253, 2014995.08924, -6010703.435174, 3320954.596293) 55
    test 163 _plumbTo5(3030281.954799526, -7533274.157331877, 3200109.676907458): (2210137.962186, -5504413.233492, 2338242.516953, 2351962.546112) 55
    test 164 _plumbTo5(0.0, 6194715.101331376, -8042919.446189141): (0.0, 3892064.350968, -5053227.491822, 3773653.198183) 46
    test 165 _plumbTo5(5244538.40145937, 4181259.857427217, -6463030.064377862): (3582310.503641, 2862130.687193, -4424003.581878, 2942912.222338) 55
    test 166 _plumbTo5(2593676.8451666874, -8457599.163518788, -10539297.963674568): (1197957.827041, -3920547.569244, -4885468.286007, 7382320.69005) 54
    test 167 _plumbTo5(0.0, 1198639.905011473, -12232868.568641176): (0.0, 622008.430391, -6347917.336701, 5913134.097907) 47
    test 168 _plumbTo5(-9764201.932755714, 2502661.3451973693, -7083331.253368537): (-5038473.015076, 1295625.91487, -3666996.495715, 5954896.431493) 53
    test 169 _plumbTo5(4705930.845050017, -6992907.068025966, 2852446.082719654): (3365354.501791, -5010436.271741, 2043772.388777, 2526121.242835) 55
    test 170 _plumbTo5(-10996346.546274701, -10387476.107805137, -11023979.390970914): (-3731976.420527, -3541062.199432, -3757990.061371, 12346621.305705) 53
    test 171 _plumbTo5(2335929.6872970094, -10157734.768408628, 782369.2751823982): (1421684.542676, -6198470.541119, 477414.652569, 4074876.038337) 55
    test 172 _plumbTo5(-7217958.503776349, 4408524.7585573355, -7378015.202391249): (-4089252.692677, 2504899.123027, -4192107.260591, 4854132.262957) 50
    test 173 _plumbTo5(-12276908.819941448, -10463457.336631788, -10130224.091534395): (-4094504.837194, -3505401.975909, -3393714.725159, 12678597.232463) 53
    test 174 _plumbTo5(-10511232.498031115, -6933054.76189173, -9121868.720523627): (-4295981.212293, -2844874.818316, -3742973.283844, 9180145.96369) 53
    test 175 _plumbTo5(-12422485.114805823, 6231071.990700535, 5824530.903543648): (-5239654.776644, 2638447.18849, 2466272.694113, 8705050.421306) 52
    test 176 _plumbTo5(3051920.735775263, -9281694.747868227, -12739368.696120411): (1207601.77138, -3687616.363159, -5061282.909631, 9677201.39097) 54
    test 177 _plumbTo5(3145846.2848079586, 6330137.186619219, 5371995.581106471): (2255315.899332, 4546846.394559, 3858603.215826, 2502703.911331) 55
    test 178 _plumbTo5(-9362624.420406742, 4093248.5057445248, 0.0): (-5825368.614191, 2553279.592268, 0.0, 3857937.64764) 51
    test 179 _plumbTo5(-10392459.909841824, -6806577.160156282, -6456965.519783759): (-4717906.458356, -3101393.418448, -2942058.927211, 7634363.875798) 52
    test 180 _plumbTo5(-9341695.990629394, -6974509.6139016785, 4226959.7333309725): (-4788963.530321, -3587192.699768, 2174024.884699, 6034553.026087) 53
    test 181 _plumbTo5(3883624.89185628, 724648.1250986871, -9575955.370423745): (2384836.140617, 446145.646988, -5895599.003966, 3983585.612897) 54
    test 182 _plumbTo5(1678155.3698307977, 1344780.6420428616, -7169115.159804663): (1428494.886864, 1145862.596712, -6108649.979815, 1107467.89727) 56
    test 183 _plumbTo5(-10618253.033383999, 2707784.9604949467, -12377321.831054173): (-4081316.448125, 1045111.222423, -4777153.206968, 10161623.245994) 53
    test 184 _plumbTo5(-8558259.1035009, 4513533.1219230825, -11116032.546350684): (-3690525.178071, 1953813.779012, -4811837.338867, 8365995.093073) 53
    test 185 _plumbTo5(-9123383.867176268, 1141200.775634517, 5063666.20052008): (-5526222.838589, 693086.080163, 3075292.608348, 4134489.543817) 52
    test 186 _plumbTo5(2844530.554383691, 2743345.28152573, 0.0): (4592151.947029, 4410583.606682, 0.0, -2415339.347773) 54
    test 187 _plumbTo5(-9312410.26240324, -8308990.441077695, -6983425.977089287): (-4138462.58087, -3706383.550467, -3115052.382512, 7932089.199446) 53
    test 188 _plumbTo5(3470134.844707095, 2769481.6930854297, 5884590.866209695): (2998195.159294, 2395020.841556, 5088921.864628, 998016.611121) 55
    test 189 _plumbTo5(-6644520.308669184, -11222463.205816995, 966101.0506506079): (-3229605.084497, -5473650.926023, 471201.407011, 6704879.885119) 53
    test 190 _plumbTo5(0.0, 3847069.579949434, 4966675.498211407): (0.0, 3905857.473446, 5042574.020686, -96003.136071) 51
    test 191 _plumbTo5(-8909833.283840893, 0.0, -8693814.667460505): (-4550004.171659, 0.0, -4454294.750219, 6081253.079433) 53
    test 192 _plumbTo5(2952443.1425885675, -11920320.792855449, -11243358.535289083): (1126364.10487, -4566618.62663, -4307219.258385, 10272367.218424) 54
    test 193 _plumbTo5(-10725208.331601696, -8570877.692721704, -11043421.62285131): (-3867255.115843, -3103796.799771, -3999130.313883, 11249112.669238) 53
    test 194 _plumbTo5(-10786873.779957626, -9572030.954709334, -11393049.847623115): (-3728456.206589, -3323167.392148, -3955322.482823, 12007886.692364) 53
    test 195 _plumbTo5(-10756888.505988792, 3813440.2742577717, -6619483.959574603): (-5182665.846081, 1843737.456636, -3200378.471177, 6829492.645341) 52
    test 196 _plumbTo5(6058943.069015442, 5364705.910858905, -9011213.230786227): (3180497.680108, 2825097.134519, -4745327.811176, 5738714.055172) 54
    test 197 _plumbTo5(-11265061.64312357, 802613.2292453476, 0.0): (-6340852.142756, 453104.605777, 0.0, 4936597.561215) 46
    test 198 _plumbTo5(1926644.6577262378, 3007372.3278163495, -9595086.13512847): (1197197.962231, 1873520.075931, -5977456.656902, 3860693.778637) 54
    test 199 _plumbTo5(2773688.6022628667, 3518300.1807799772, 1677919.5630893875): (3699321.030373, 4681919.793345, 2232879.924978, -1587068.680928) 54
    test 200 _plumbTo5(5765098.28955027, 1696738.8038863076, 5013683.825255914): (4687163.341466, 1381225.559768, 4081358.879358, 1459699.340364) 54
    test 201 _plumbTo5(0.0, 4635116.250167716, 2415703.439303937): (0.0, 5656272.7169, 2947918.195055, -1151526.411243) 56
    test 202 _plumbTo5(-12450233.532337679, 5190536.354810521, 677951.2602187155): (-5859860.880362, 2451716.581388, 320222.224074, 7145776.060478) 50
    test 203 _plumbTo5(0.0, -12159548.388289405, -8692479.363540964): (0.0, -5188879.720365, -3709320.520249, 8568669.309494) 53
    test 204 _plumbTo5(2700391.020705163, -8771783.757925207, 2619285.446543159): (1800412.769307, -5861482.59309, 1750246.548466, 3167813.493468) 55
    test 205 _plumbTo5(-8452246.389094338, -11038619.378801458, -6581823.712311709): (-3491596.471963, -4578082.121543, -2729665.85304, 9010311.283497) 53
    test 206 _plumbTo5(-8332238.34295373, 5182864.805969842, 782521.4050380054): (-5382281.069731, 3355903.525783, 506678.472667, 3480822.425302) 52
    test 207 _plumbTo5(-9963304.132516706, 3569654.6809916995, 1054948.1365739505): (-5955385.474828, 2139482.584286, 632280.575846, 4276383.058116) 51
    test 208 _plumbTo5(5959811.362574612, -6622491.870635315, 4934819.269249696): (3721938.796668, -4146253.319258, 3089598.786743, 3813747.450164) 53
    test 209 _plumbTo5(-12531227.212018404, 4661070.542714445, 1262960.5996369792): (-5931563.37356, 2214122.33704, 599930.214966, 7069846.362751) 50
    test 210 _plumbTo5(0.0, -10562748.642718684, 3696210.7708364604): (0.0, -6020427.304854, 2106701.480876, 4812403.029599) 55
    test 211 _plumbTo5(2191494.9408823224, -12124534.165063651, -10712409.564558327): (852649.667246, -4736772.920205, -4185032.778183, 9948777.341417) 54
    test 212 _plumbTo5(3185681.829714491, 0.0, -11074281.542451419): (1757967.100194, 0.0, -6129571.257015, 5146700.803018) 55
    test 213 _plumbTo5(0.0, -8973954.776456753, -7881197.080287179): (0.0, -4792544.919035, -4208914.093142, 5565056.220149) 54
    test 214 _plumbTo5(5042509.655437409, -7442041.0815232415, -8989881.475927304): (2521364.433851, -3733732.082919, -4510246.773301, 6338363.820926) 54
    test 215 _plumbTo5(3771170.8046059264, -8446035.466983633, -12083448.559971726): (1574563.054288, -3540305.12636, -5064926.576008, 8840301.274451) 54
    test 216 _plumbTo5(1255471.6781489505, -11474606.03622916, -8127383.480309192): (565145.473476, -5184411.384088, -3672038.266031, 7739069.712122) 54
    test 217 _plumbTo5(2821653.4504646165, -10476896.579715347, 4294673.572810596): (1537563.959186, -5726547.695761, 2347394.393741, 5292125.900065) 54
    test 218 _plumbTo5(782859.2764719658, -7510538.272090135, -11601614.289333293): (359413.559673, -3460699.644878, -5345719.01583, 7464363.660392) 54
    test 219 _plumbTo5(1340220.3870179835, -8797429.607357461, 0.0): (958745.090794, -6305427.826921, 0.0, 2521030.796188) 56
    test 220 _plumbTo5(4747733.953461514, -9765380.816514418, 2159434.1310682287): (2727256.775564, -5625655.216179, 1243998.475429, 4696560.285155) 54
    test 221 _plumbTo5(-7361976.03893625, 2425877.623104783, -10836158.697132707): (-3512282.16726, 1161430.674811, -5187938.172276, 6951356.996162) 53
    test 222 _plumbTo5(-10927256.964738531, 3093042.772324479, 5542802.656371344): (-5496866.735004, 1561145.333944, 2797577.36125, 6274719.892544) 52
    test 223 _plumbTo5(0.0, 5332829.402708224, 4620991.417404049): (0.0, 4820415.073412, 4176966.488362, 678031.402281) 56
    test 224 _plumbTo5(0.0, 5160874.041130317, 716304.0543886654): (0.0, 6317822.840248, 876887.199214, -1168040.012235) 56
    test 225 _plumbTo5(-12710145.108062914, 3730437.5558454287, -7628021.572069365): (-5284914.73651, 1557242.478269, -3184218.245324, 8922119.194599) 52
    test 226 _plumbTo5(-6896214.937873134, 5946137.037656948, -8874774.562601896): (-3447751.08152, 2982788.417631, -4451845.801917, 6343156.693199) 52
    test 227 _plumbTo5(0.0, 2748448.2551633576, -11414308.594103085): (0.0, 1493171.985866, -6201082.717269, 5362223.657696) 50
    test 228 _plumbTo5(-8078373.239340017, -12615668.862940984, 5006052.592986449): (-3249722.91912, -5095435.940478, 2021905.206386, 9422043.448637) 53
    test 229 _plumbTo5(1970590.284324188, -7080605.544511909, 0.0): (1708326.752817, -6143753.013395, 0.0, 972869.377162) 56
    test 230 _plumbTo5(-11053815.246986892, 2818369.5213198, 1097538.6656114252): (-6131688.667634, 1568078.670475, 610640.372244, 5101727.866416) 50
    test 231 _plumbTo5(3740043.857495509, -9501683.529125037, -9998239.953967148): (1663066.529321, -4240898.613483, -4462473.049079, 7914190.291853) 54
    test 232 _plumbTo5(1307743.3085170847, 1403610.2401262885, -11349088.607049188): (722509.790995, 777814.970877, -6289071.129638, 5132045.874771) 55
    test 233 _plumbTo5(-10602285.556295153, -12444731.306306638, 4581651.391887155): (-3967542.60559, -4676689.442684, 1721746.062787, 10608550.650694) 53
    test 234 _plumbTo5(6157711.356831074, -7293637.268917868, 3925819.560451027): (3794521.57624, -4506130.773355, 2425416.466749, 3950451.600195) 48
    test 235 _plumbTo5(-8696011.491714343, 2841840.2888159268, -11283342.203195922): (-3804509.75565, 1248026.079888, -4955145.45469, 8155556.820617) 53
    test 236 _plumbTo5(5341984.06853042, 2855705.364368238, 2045167.4392448072): (5316903.033358, 2842387.318766, 2035629.260474, 29956.727429) 58
    test 237 _plumbTo5(0.0, -10226340.998969981, -12293315.434911124): (0.0, -4079090.176694, -4903501.712899, 9612389.896275) 49
    test 238 _plumbTo5(2100725.1696647047, 5206223.593604629, -10717785.048726046): (1103916.522391, 2744589.541654, -5650086.851319, 5721436.419729) 54
    test 239 _plumbTo5(-7845195.605195481, -10973401.807922736, 0.0): (-3696618.568093, -5189061.347706, 0.0, 7118236.157397) 53
    test 240 _plumbTo5(-10008419.186481882, 5338787.71328798, -7445785.427567036): (-4688469.357268, 2509937.704805, -3500465.131791, 7202069.896364) 52
    test 241 _plumbTo5(-11323773.299264213, 3143231.78603522, -10470011.398579838): (-4572087.556171, 1274218.984442, -4244330.065591, 9372170.361551) 52
    test 242 _plumbTo5(3456252.9686412453, 1941556.271297522, -11734575.81167466): (1774005.531461, 999822.287583, -6042763.579869, 6009454.702227) 54
    test 243 _plumbTo5(-11285529.335890222, -12286944.899537135, 5780309.733884335): (-4060948.714308, -4440404.633895, 2088928.905157, 11286675.849017) 50
    test 244 _plumbTo5(5988742.13410405, -9280408.33320775, -10298979.362377238): (2519787.856627, -3920034.858544, -4350223.052954, 8726680.307883) 54
    test 245 _plumbTo5(-9820545.300328126, -8907434.441070871, 3475616.7655449184): (-4554155.98877, -4145657.735385, 1617586.809855, 7339049.604134) 52
    test 246 _plumbTo5(-10418843.548475591, 2025445.7830781848, -10689692.418700427): (-4395491.754446, 857827.089446, -4527295.562717, 8695932.109842) 52
    test 247 _plumbTo5(-10493934.409229787, 1356593.2380181956, -8193743.199873789): (-4984355.609221, 646630.084996, -3905562.737334, 7017691.779458) 52
    test 248 _plumbTo5(2138371.854256389, -6709684.987857215, 2799121.4889191887): (1797579.697925, -5646412.530296, 2355541.236761, 1201437.078223) 56
    test 249 _plumbTo5(-6433965.60976421, -11241995.077096418, -9565432.026869893): (-2538555.23546, -4453716.285431, -3789465.791058, 9727113.492443) 51
    test 250 _plumbTo5(4439598.97963105, -10869464.699706392, -10616240.541797742): (1781847.47126, -4380122.787827, -4278023.716076, 9452417.365911) 54
    test 251 _plumbTo5(-11428727.653197808, 1020957.1361854925, -7061667.80857134): (-5392039.413709, 483401.038783, -3343507.756509, 7110224.021181) 52
    test 252 _plumbTo5(4039403.4857617114, 1951663.358713976, -8607202.97480029): (2647846.686927, 1282293.58713, -5655113.645344, 3331563.840688) 54
    test 253 _plumbTo5(4873025.924709822, -9673615.185292698, 1275697.399400438): (2841545.989315, -5656706.186353, 745965.129048, 4532448.004327) 54
    test 254 _plumbTo5(3265294.9658205463, 5116813.943307347, 6203630.484043922): (2394831.720689, 3759509.786377, 4558006.990588, 2303922.203061) 55
    test 255 _plumbTo5(-12237190.568908935, 6374327.949336008, 3809361.545174879): (-5434027.871206, 2841192.893555, 1697904.369505, 7951372.046288) 51
    test 256 _plumbTo5(881507.7802630115, -10118884.689427316, 1099467.2803917113): (548943.45537, -6317379.77167, 686409.154293, 3838314.172323) 55
    test 257 _plumbTo5(-11184408.108140677, -12354944.064347805, 754051.4366641514): (-4259988.449753, -4725497.602995, 288404.378122, 10313722.320057) 52
    test 258 _plumbTo5(-11771422.968079094, -7464257.339164039, 638848.8196356966): (-5362494.711847, -3412848.52067, 292094.467684, 7590027.232408) 51
    test 259 _plumbTo5(-8600056.650512686, -10645558.39619384, 1027462.7252130344): (-3982968.356298, -4948166.143852, 477569.739357, 7353921.748939) 53
    test 260 _plumbTo5(2418451.4868434425, 0.0, -11567294.216698831): (1301277.907086, 0.0, -6243251.799314, 5439991.219609) 54
    test 261 _plumbTo5(2879248.748827838, -7136348.739193991, -6827539.120613327): (1780477.216302, -4424344.215131, -4232855.252211, 3910837.735853) 54
    test 262 _plumbTo5(0.0, -10941303.50954594, -10582530.857785035): (0.0, -4584747.31201, -4434353.837943, 8843409.261125) 53
    test 263 _plumbTo5(2262853.5475109494, -9666008.285786519, -12409605.586798256): (904573.086925, -3879631.064478, -4980759.100644, 9513929.118495) 54
    test 264 _plumbTo5(3378001.4231474074, -11935958.192494605, 0.0): (1731226.767043, -6137295.997795, 0.0, 6027964.002565) 54
    test 265 _plumbTo5(-11681533.901906366, 3572170.2420837614, -12368780.878041342): (-4269535.999218, 1311201.479664, -4540023.957897, 11015404.103745) 53
    test 266 _plumbTo5(-9494152.873992765, 3037515.3250986445, -6714422.7484852625): (-5022015.008324, 1611824.328116, -3562898.383237, 5653734.84815) 53
    test 267 _plumbTo5(3466028.659706434, -6872727.880772907, -12168972.009545885): (1529629.715897, -3044510.75742, -5390598.009217, 8021922.54397) 54
    test 268 _plumbTo5(-12562466.5314427, -11952565.990443569, 0.0): (-4603460.124782, -4398699.619584, 0.0, 10972997.773173) 53
    test 269 _plumbTo5(2033861.8696448172, 0.0, -11436829.386376388): (1113365.143303, 0.0, -6279728.995503, 5238606.557545) 54
    test 270 _plumbTo5(0.0, 0.0, 5533725.324366549): (0.0, 0.0, 6378318.0, -844592.675633) None
    test 271 _plumbTo5(-7282670.777791584, -11392635.825444693, -10766714.725937646): (-2676485.361562, -4204835.053503, -3973762.810446, 10909886.330847) 54
    test 272 _plumbTo5(-7951259.127872179, 4520090.177193751, 1397060.82863365): (-5464809.951675, 3113151.200891, 962200.246371, 2889811.501614) 53
    test 273 _plumbTo5(1312507.055773608, -6658593.856195439, -9112888.299467204): (734601.963749, -3737837.326567, -5115519.405887, 4984350.616892) 55
    test 274 _plumbTo5(2736645.9483113564, 1526945.2467496302, 6030283.71373937): (2566166.323689, 1432423.928522, 5656988.00871, 421126.187033) 57
    test 275 _plumbTo5(-9540526.283410558, -8011682.940559893, 2943151.8050230523): (-4737664.763307, -3991976.961799, 1466466.521564, 6434758.298753) 52
    test 276 _plumbTo5(5891127.214053819, -11235403.492917342, 4353005.383638944): (2791794.216455, -5343335.150089, 2070179.229235, 7038013.188237) 53
    test 277 _plumbTo5(5827242.306888287, 4484085.350421791, -10027461.690205492): (2979290.194892, 2300132.513131, -5143578.297375, 6060758.881732) 54
    test 278 _plumbTo5(683956.5723498863, -10940868.680864686, 1793079.0384550146): (391612.702216, -6282460.669989, 1029611.412811, 4729599.660606) 55
    test 279 _plumbTo5(-9159139.407670956, 0.0, -8770291.594475301): (-4591453.910737, 0.0, -4411266.769085, 6313861.593928) 53
    test 280 _plumbTo5(-12550868.75299967, -8231902.038290396, 3036845.753334387): (-5209037.656449, -3430008.109972, 1265354.245841, 8949796.160261) 52
    test 281 _plumbTo5(4912332.4630008405, -12070433.736598667, 1564839.5703899756): (2378949.444544, -5865818.974691, 760450.061731, 6749986.395803) 54
    test 282 _plumbTo5(-9192936.865226043, 4842442.309512407, -10997842.632788008): (-3861183.007129, 2041865.847775, -4637295.144826, 8759417.336101) 53
    test 283 _plumbTo5(-9040788.965830533, -11985479.035589209, -8627722.421270635): (-3316933.382475, -4416093.012244, -3178871.401995, 10942947.726265) 51
    test 284 _plumbTo5(-9913662.037833693, -8833014.00772884, 1303371.2649828827): (-4723223.854353, -4223229.114367, 623159.027663, 6975202.791848) 53
    test 285 _plumbTo5(-10160922.192485651, -12248002.61295652, -9839372.626828287): (-3449622.056031, -4176729.655083, -3355306.682205, 12338156.582582) 52
    test 286 _plumbTo5(-10442991.49647655, -7079971.703272391, 1844797.1134943187): (-5206307.668518, -3541628.107399, 922816.349143, 6386922.689863) 51
    test 287 _plumbTo5(3205665.3173548654, 4567881.536820986, -6416665.044802597): (2399793.114239, 3425350.68254, -4811685.054972, 2128559.965915) 55
    test 288 _plumbTo5(-10772174.544449696, -10897209.232476048, 6126797.103892035): (-4147751.633605, -4213313.860145, 2368842.432701, 10133097.234346) 53
    test 289 _plumbTo5(-7948814.2579905465, -11127502.632367145, -6448533.240739313): (-3340828.701498, -4695105.93566, -2720840.744391, 8746710.781773) 53
    test 290 _plumbTo5(-10694075.76747533, 2839188.7396826535, -6930844.5974293435): (-5206733.073742, 1387129.554955, -3386133.272815, 6692113.574146) 51
    test 291 _plumbTo5(2317086.695818188, -10904221.460142452, -8217821.553788769): (1063275.055463, -5022046.580434, -3784753.834239, 7471553.677186) 54
    test 292 _plumbTo5(6166212.74949753, -6614502.868843074, -8640084.672905898): (3134238.064879, -3373251.03361, -4406205.826358, 6133866.157231) 54
    test 293 _plumbTo5(1811884.2384706347, -6716505.566441269, 2983804.9560013413): (1524940.905371, -5658854.984447, 2513935.411821, 1192366.813758) 56
    test 294 _plumbTo5(-7337137.672921394, -11582086.752836064, -12488627.461900525): (-2512708.633692, -3984063.813732, -4295838.33963, 12170737.929136) 54
    test 295 _plumbTo5(5185217.347201139, 2556885.6127855754, -10812305.885565002): (2688664.559842, 1330114.292784, -5624596.998373, 5886430.768293) 54
    test 296 _plumbTo5(4056437.6605710266, -8680261.428394329, -8863494.015465142): (1975472.717965, -4241889.951859, -4331383.858599, 6676045.156381) 53
    test 297 _plumbTo5(2179881.3842634684, 1414926.6751094754, -8333220.623195443): (1589795.462685, 1033792.494659, -6088492.183842, 2352077.895137) 55
    test 298 _plumbTo5(1190981.7514435304, 4648883.087816083, 0.0): (1585916.763554, 6176704.514244, 0.0, -1578040.549176) 56
    test 299 _plumbTo5(1566766.1519892337, -10730534.900370663, 1773942.602795971): (906864.726126, -6228610.160873, 1029687.268595, 4610500.217379) 55
    test 300 _plumbTo5(-11008353.593003035, -6424667.74474158, 5974778.035427179): (-4970595.596146, -2911662.391788, 2707739.669361, 7711631.988356) 52
    test 301 _plumbTo5(-8303065.3311490435, 0.0, -7014220.854371791): (-4857246.371039, 0.0, -4114722.247231, 4503416.533996) 53
    test 302 _plumbTo5(-10034012.565583989, -9147000.442904755, 5768598.293253897): (-4322730.397014, -3955735.28655, 2494671.74602, 8383708.783664) 53
    test 303 _plumbTo5(-7468959.147241482, 5531848.428810003, 2260307.249825219): (-4965867.340539, 3686250.672875, 1506186.984748, 3200062.037476) 53
    test 304 _plumbTo5(4237617.099434957, 3733740.68242653, -7042934.87773543): (2987131.3171, 2637176.308103, -4974459.355504, 2654196.508348) 55
    test 305 _plumbTo5(-12254797.522849953, 2814675.785388819, 3220154.307677645): (-6001857.369083, 1383248.432359, 1582499.732464, 6620434.830229) 50
    test 306 _plumbTo5(-9067033.726685017, -8926729.904013272, -9242355.703271307): (-3663507.747567, -3621326.87669, -3749318.603875, 9355151.033772) 52
    test 307 _plumbTo5(4942856.541612486, -10273983.273894116, 6020551.831122761): (2436966.065162, -5082682.990176, 2978418.02813, 6517949.354744) 53
    test 308 _plumbTo5(3158277.2469765106, -10405835.177413227, 5771227.598399916): (1630972.96319, -5391227.326506, 2990021.492721, 5934143.381813) 54
    test 309 _plumbTo5(0.0, 4986890.100278724, 2245997.920109515): (0.0, 5815746.501594, 2619308.213494, -909045.383437) 55
    test 310 _plumbTo5(5363347.578364357, -7846016.2623942895, 4234636.323747581): (3278640.779229, -4808874.287428, 2595414.033438, 4032032.183838) 54
    test 311 _plumbTo5(4209651.409126746, 3687722.394652935, 3128803.086815058): (4181568.692066, 3663285.770379, 3108069.67894, 42610.583257) 60
    test 312 _plumbTo5(-10450969.52432373, 5904579.811214915, 4792268.634579389): (-5140065.423158, 2913984.753374, 2365018.839127, 6560556.587767) 52
    test 313 _plumbTo5(0.0, 4100656.4672609265, 1152303.0835719514): (0.0, 6140544.049772, 1725539.595911, -2118901.000133) 55
    test 314 _plumbTo5(4244889.080945891, 2212699.423024219, 3621879.246673556): (4503802.363776, 2346698.833498, 3841222.631808, -364833.456026) 57
    test 315 _plumbTo5(1863403.6751875347, -11296844.438391065, -8265578.714988379): (838566.562501, -5102657.904629, -3733424.249851, 7743297.877419) 54
    test 316 _plumbTo5(0.0, 4353073.399469501, 3882084.876028771): (0.0, 4760344.044592, 4245298.866955, -545704.848415) 46
    test 317 _plumbTo5(-11853399.05095075, -8198419.033129232, 3517465.7645829967): (-5078252.579849, -3525928.567484, 1512752.376818, 8470752.777854) 52
    test 318 _plumbTo5(974691.6639166323, -11311187.986670312, -9945093.861153943): (410308.7191, -4780194.651919, -4202819.550141, 8714706.897531) 54
    test 319 _plumbTo5(5933317.028432815, 2368582.3760189004, -8028906.460645645): (3677984.943202, 1472014.514339, -4989722.447596, 3889343.930593) 54
    test 320 _plumbTo5(-8566123.845420213, -8860703.108717056, 3061577.120782944): (-4288094.957815, -4450499.711255, 1537733.413442, 6330365.298667) 54
    test 321 _plumbTo5(-7480368.377790124, -8357153.616989344, -10477708.610465463): (-3096775.661786, -3473437.254298, -4354735.869305, 8975375.524178) 54
    test 322 _plumbTo5(3091256.3044373733, 1433422.3393939205, -8751813.520351386): (2094591.525737, 973376.469867, -5942944.451741, 3015746.728053) 55
    test 323 _plumbTo5(5587023.52095353, -12598949.667807128, 3210677.0595192825): (2509049.466783, -5679034.564357, 1447210.018464, 7776179.352483) 53
    test 324 _plumbTo5(5059030.206925992, -6545966.446250856, 0.0): (3891724.375245, -5043392.4513, 0.0, 1902716.877251) 54
    test 325 _plumbTo5(4343260.359837109, 1462642.9769405012, 4925911.331699727): (4110807.55947, 1384860.089832, 4663947.493777, 358761.110357) 56
    test 326 _plumbTo5(-7925000.448537449, -7222650.930316243, 2815104.5213697157): (-4545494.0856, -4154562.017541, 1619269.349487, 4718501.307845) 53
    test 327 _plumbTo5(-8545049.508208271, 724443.1269030845, 4463188.387102112): (-5620082.123415, 477565.462288, 2942189.114605, 3306028.065569) 51
    test 328 _plumbTo5(-11547973.138007298, 4181739.8444174654, 6299115.824687403): (-5317972.282521, 1932748.209843, 2911338.718047, 7439617.446887) 51
    test 329 _plumbTo5(-8025125.587905278, -8566469.279822297, 4156571.3574270806): (-4096960.848074, -4387764.386802, 2128982.186999, 6083023.15056) 54
    test 330 _plumbTo5(-10126442.598550541, -9388997.069410242, 3977480.2196056237): (-4478574.14726, -4168055.565185, 1765700.43619, 8003038.050887) 52
    test 331 _plumbTo5(2160842.7481342726, -8436093.765478816, -9217939.010959698): (1083234.639819, -4243255.951275, -4636464.334968, 6303256.172652) 54
    test 332 _plumbTo5(-10610420.475760316, -8777301.151416475, 0.0): (-4897671.5997, -4066238.681508, 0.0, 7404701.838448) 52
    test 333 _plumbTo5(-10936400.105402, -6656940.057931041, -11195366.693195518): (-4085677.132708, -2497451.447124, -4200053.034377, 10638052.638396) 53
    test 334 _plumbTo5(0.0, -8345682.798960849, 4434363.907640849): (0.0, -5632648.621636, 2992809.11257, 3072236.103317) 54
    test 335 _plumbTo5(1187774.9996710017, -12706680.063192604, 5614004.747570587): (541402.321663, -5813126.357029, 2568297.163023, 7564073.970368) 54
    test 336 _plumbTo5(-12216254.156999422, 5671155.450967, -10473893.832106177): (-4549687.215152, 2121051.320468, -3917254.833002, 10694344.438805) 53
    test 337 _plumbTo5(-6410609.667812203, 942818.603962853, -7156738.867901879): (-4223663.616646, 622608.848364, -4726058.341499, 3285342.469169) 53
    test 338 _plumbTo5(4794023.304194539, -12415009.723872786, 2132245.8910718807): (2260706.44441, -5875389.505803, 1009071.323136, 7102524.059707) 53
    test 339 _plumbTo5(3736033.4520422085, -6569915.974975604, -11629068.538728917): (1711953.761575, -3021521.895961, -5348176.264102, 7492503.379967) 54
    test 340 _plumbTo5(-11350297.802557986, -11935919.076899849, 3335860.8378032814): (-4291510.148312, -4531878.728092, 1266556.08497, 10436873.037199) 53
    test 341 _plumbTo5(-7772575.535030624, -12741703.501003614, -8377158.281456202): (-2884853.368829, -4749262.319138, -3122406.230919, 10741571.725413) 53
    test 342 _plumbTo5(-12130035.913041724, -8249969.242570667, 4428693.572595492): (-5031005.802853, -3435240.286176, 1844059.201525, 8958692.887974) 51
    test 343 _plumbTo5(3050165.5199024724, 3932621.035212288, -8397291.290534561): (1988213.340223, 2569445.237839, -5486472.193298, 3385093.573789) 54
    test 344 _plumbTo5(853282.0020031772, 765109.7995305933, 3660029.605840131): (1424880.622368, 1271915.468455, 6084507.031959, -2541981.069681) 55
    test 345 _plumbTo5(-10551240.838103635, 4395800.154097682, -12318686.145467449): (-3989345.414896, 1668997.105933, -4677094.242669, 10434934.269918) 53
    test 346 _plumbTo5(-7656056.931655656, -12459079.374681761, -7899406.258265304): (-2926407.463252, -4782147.74987, -3031974.981884, 10246792.205188) 54
    test 347 _plumbTo5(5261925.037796426, -9992575.450126503, 0.0): (2962887.758577, -5643200.673965, 0.0, 4919617.195957) 54
    test 348 _plumbTo5(4053210.768139853, 1555462.1751233086, 2159128.5065313596): (5322710.51449, 2038354.075606, 2829447.383155, -1514642.396704) 55
    test 349 _plumbTo5(-12022173.24238125, -9099432.288795054, -6488906.783663311): (-4654226.226558, -3537299.458517, -2522453.903455, 10047721.796534) 53
    test 350 _plumbTo5(5688917.951721009, -6507658.036135705, 5899342.104361138): (3457494.25172, -3965548.128422, 3594830.018214, 4092963.531113) 54
    test 351 _plumbTo5(1290089.5584545413, -10695215.819616579, -12384667.413949909): (499246.936765, -4156028.96431, -4812464.43385, 10036167.333835) 54
    test 352 _plumbTo5(3740079.690162992, 2437265.259883129, 2828538.5035321536): (4509465.008301, 2934585.540557, 3405712.749652, -1082779.451097) 55
    test 353 _plumbTo5(2274832.8338471972, -8886369.495266175, -11934042.246041924): (960241.101035, -3765699.492444, -5057121.297085, 8674183.214573) 54
    test 354 _plumbTo5(5763020.050575199, -11247964.674116755, -10893615.284251194): (2194100.42073, -4300234.583865, -4164706.009672, 10309527.668948) 53
    test 355 _plumbTo5(3843970.1317134406, 0.0, -11198012.892771676): (2064406.166443, 0.0, -6032612.821987, 5463351.150873) 55
    test 356 _plumbTo5(2304395.6795372656, 2773881.0041496414, -11187229.88393149): (1246612.34551, 1505235.519437, -6070644.961471, 5376598.201128) 54
    test 357 _plumbTo5(-11581406.849911395, -6479376.904384206, -9313249.931067787): (-4539433.594191, -2550072.214036, -3665343.766861, 9845184.951211) 53
    test 358 _plumbTo5(1949588.8195784388, 2543724.1693126154, -7251833.297043164): (1566152.471251, 2046141.332592, -5833263.022812, 1551436.023673) 56
    test 359 _plumbTo5(-11759643.10135831, -11067176.462208217, 2361128.753274083): (-4578909.879855, -4327043.397603, 923141.511825, 9952895.590408) 52
    test 360 _plumbTo5(5301512.176796035, 4793870.336389957, 1160863.2717149248): (4659622.838196, 4216876.933922, 1021138.303295, 874337.678646) 55
    test 361 _plumbTo5(4814219.157011027, 0.0, -7134636.100141928): (3559620.634475, 0.0, -5284558.888129, 2235353.02428) 55
    test 362 _plumbTo5(6056787.327501762, -12196119.43965107, 1827897.087036209): (2801781.844466, -5662204.462326, 848614.626083, 7365195.161287) 54
    test 363 _plumbTo5(1129794.088406301, -6843636.8195006745, -12621618.50126945): (498488.300183, -3030938.475101, -5589846.794388, 8023778.972612) 54
    test 364 _plumbTo5(-11035045.469515068, 3751116.4684878546, -9755347.803804953): (-4614164.060829, 1574641.170842, -4095041.2461, 8831977.870945) 52
    test 365 _plumbTo5(-10495789.060881019, 0.0, -11753666.581040543): (-4232608.281671, 0.0, -4758898.18493, 9389047.789222) 53
    test 366 _plumbTo5(-10030999.578134174, 701398.2171014152, -12462916.20030854): (-3980321.783816, 279449.487227, -4965381.247719, 9643742.679406) 53
    test 367 _plumbTo5(732082.3993745827, -10855036.702817876, 3330055.311291121): (409183.044429, -6085252.843671, 1866786.236247, 4999625.830238) 55
    test 368 _plumbTo5(6155732.594804183, -6803216.397644002, 973410.9532384073): (4244319.572701, -4700565.756155, 672557.050387, 2857473.1026) 54
    test 369 _plumbTo5(3425044.960454927, -11816447.76853439, -7807186.801440491): (1493658.397007, -5172749.555927, -3417619.615843, 8193734.195991) 54
    test 370 _plumbTo5(-6451532.2213929165, 859246.3336616425, 4489817.790662823): (-5190393.445772, 692191.395179, 3616890.589538, 1542848.100854) 53
    test 371 _plumbTo5(-9790326.4856241, -10640345.464756932, -9898167.908535242): (-3549523.204512, -3874303.79003, -3604015.897138, 11150932.475818) 54
    test 372 _plumbTo5(6246910.911951709, 5864181.034944406, 2572680.796182567): (4442212.882581, 4178166.144124, 1832995.929736, 2578122.357634) 50
    test 373 _plumbTo5(4275972.89200179, 4807744.642941299, -7175403.322152784): (2822842.03096, 3181166.146539, -4747752.28814, 3263561.926364) 53
    test 374 _plumbTo5(-10142176.329867546, -10247721.871435786, -6970620.101103834): (-4024206.74922, -4082641.189862, -2777023.548547, 9644896.248569) 53
    test 375 _plumbTo5(0.0, -9465793.24082744, -11221454.932766499): (0.0, -4112654.383005, -4875385.695391, 8302330.419629) 51
    test 376 _plumbTo5(4208723.412091954, 0.0, -7926849.890643942): (2984324.642116, 0.0, -5631755.064871, 2601271.344402) 54
    test 377 _plumbTo5(5994043.528190226, -7245067.171709782, 2249343.81968877): (3943617.68729, -4777681.72372, 1483294.532815, 3298343.309588) 53
    test 378 _plumbTo5(-7671268.619503214, -6553938.015348664, 4171732.3473774954): (-4467740.592792, -3827754.167707, 2436431.356213, 4550377.9754) 51
    test 379 _plumbTo5(-9862982.299064847, 5756242.211588464, -8626984.47823419): (-4379908.445405, 2565795.072425, -3845356.773627, 7943992.405457) 51
    test 380 _plumbTo5(2700164.8049603207, -8343315.346042426, -10111325.779561015): (1282245.580413, -3976083.253049, -4818589.436952, 7006872.988273) 54
    test 381 _plumbTo5(-10017861.633409387, -11535572.939916994, -10642132.276149588): (-3417644.879555, -3952928.172662, -3646717.659263, 12247252.284753) 53
    test 382 _plumbTo5(-7253288.75403481, -7192687.407062097, -11707001.419644829): (-2966246.999922, -2953198.256252, -4806638.59585, 9163351.044315) 54
    test 383 _plumbTo5(3515040.9576620013, 5301557.143889425, -10969544.965311134): (1762174.612043, 2666738.227205, -5517734.694441, 6303732.733777) 55
    test 384 _plumbTo5(4838448.046457584, -9334437.484329067, -7222755.924679261): (2411251.230063, -4667578.459564, -3611616.66923, 6380531.660041) 54
    test 385 _plumbTo5(3347316.091747073, -8950823.95291254, 4931210.632097926): (1979864.442587, -5308796.948909, 2924709.757757, 4377251.474317) 54
    test 386 _plumbTo5(-8791075.803979808, 6193686.653649063, 2233485.367823627): (-5089072.126748, 3595646.873599, 1296602.684241, 4618700.151315) 53
    test 387 _plumbTo5(-6973484.846196986, -7836007.443000896, -11560472.476070238): (-2838396.845824, -3202232.114317, -4724196.090388, 9236097.736002) 54
    test 388 _plumbTo5(3167057.1916412744, 740735.0681968078, -9637929.136652991): (1980754.091745, 464443.147077, -6042961.491078, 3795713.983328) 54
    test 389 _plumbTo5(-12550156.79068972, -11095515.016490877, 5706310.413693899): (-4506039.952934, -4001001.800072, 2057645.614885, 11329284.544554) 53
    test 390 _plumbTo5(2986502.999366477, 0.0, 5656295.585224649): (2975855.762786, 0.0, 5636264.86908, 22684.647585) 62
    test 391 _plumbTo5(-8683519.61171652, -8080841.311917024, 5988878.644868106): (-4153827.268073, -3879135.013105, 2874874.385939, 6918776.703592) 53
    test 392 _plumbTo5(1503511.5430157918, -12162414.518054638, -10678811.023813542): (587562.632047, -4772539.20224, -4190316.362187, 9876729.345524) 54
    test 393 _plumbTo5(0.0, 6226157.620851992, -10017509.028940307): (0.0, 3366998.816909, -5417241.761714, 5416386.987289) 52

    test 394 _plumbTo5: (0.545455, 1.090909, 0.818182, 3.916483)
    test 395 _plumbTo5: None
    test 396 _plumbTo5: 0

    test 397 _plumbTo5: (1.090909, 0.545455, 0.818182, 3.916483)
    test 398 _plumbTo5: None
    test 399 _plumbTo5: 0

    test 400 _plumbTo5: (0.742781, 1.114172, 1.485563, 3.385165)
    test 401 _plumbTo5: None
    test 402 _plumbTo5: 0

    test 403 toTriaxial: name='WGS84', a=6378137, b=6378137, c=6356752.314245179, e2ab=0, e2bc=0.00669438, e2ac=0.00669438, volume=1083207319801408126976, area=510065621724088.4375, area_p=510065626589516.8125
    test 404 toEllipsoid: name='_', a=6378137, f=0.00335281, f_=298.25722356, b=6356752.31424518
    test 405 toEllipsoid: name='', a=2, f=-0.5, f_=-2, b=3

    test 406 Triaxials: 12
    test 407 Amalthea: name='Amalthea', a=125000, b=73000, c=64000, e2ab=0.658944, e2bc=0.231375493, e2ac=0.737856, volume=2446253479595252, area=93239507787.490371704, area_p=93212299402.670425415
    test 408 Ariel: name='Ariel', a=581100, b=577900, c=577700, e2ab=0.01098327, e2bc=0.000692042, e2ac=0.011667711, volume=812633172614203904, area=4211301462766.580078125, area_p=4211301574065.829589844
    test 409 Earth: name='Earth', a=6378173.435, b=6378103.9, c=6356754.399999999, e2ab=0.000021804, e2bc=0.006683418, e2ac=0.006705077, volume=1083208241574987694080, area=510065911057441.0625, area_p=510065915922713.6875
    test 410 Enceladus: name='Enceladus', a=256600, b=251400, c=248300, e2ab=0.040119337, e2bc=0.024509841, e2ac=0.06364586, volume=67094551514082248, area=798618496278.596679688, area_p=798619018175.109985352
    test 411 Europa: name='Europa', a=1564130, b=1561230, c=1560930, e2ab=0.003704694, e2bc=0.000384275, e2ac=0.004087546, volume=15966575194402123776, area=30663773697323.51953125, area_p=30663773794562.45703125
    test 412 Io: name='Io', a=1829400, b=1819300, c=1815700, e2ab=0.011011391, e2bc=0.003953651, e2ac=0.014921506, volume=25313121117889765376, area=41691875849096.7421875, area_p=41691877397441.2109375
    test 413 Mars: name='Mars', a=3394600, b=3393300, c=3376300, e2ab=0.000765776, e2bc=0.009994646, e2ac=0.010752768, volume=162907283585817247744, area=144249140795107.4375, area_p=144249144150662.15625
    test 414 Mimas: name='Mimas', a=207400, b=196800, c=190600, e2ab=0.09960581, e2bc=0.062015624, e2ac=0.155444317, volume=32587072869017956, area=493855762247.691833496, area_p=493857714107.9375
    test 415 Miranda: name='Miranda', a=240400, b=234200, c=232900, e2ab=0.050915557, e2bc=0.011070811, e2ac=0.061422691, volume=54926187094835456, area=698880863325.757080078, area_p=698881306767.950317383
    test 416 Moon: name='Moon', a=1735550, b=1735324, c=1734898, e2ab=0.000260419, e2bc=0.000490914, e2ac=0.000751206, volume=21886698675223740416, area=37838824729886.09375, area_p=37838824733332.21875
    test 417 Tethys: name='Tethys', a=535600, b=528200, c=525800, e2ab=0.027441672, e2bc=0.009066821, e2ac=0.036259685, volume=623086233855821440, area=3528073490771.394042969, area_p=3528074261832.738769531
    test 418 WGS84_35: name='WGS84_35', a=6378172, b=6378102, c=6356752.314245179, e2ab=0.00002195, e2bc=0.006683478, e2ac=0.006705281, volume=1083207319768789942272, area=510065621722018.125, area_p=510065626587483.3125

    2 tests skipped (2): triaxum5

    15 of 418 testTriaxials.py tests (3.6%) FAILED, ALL KNOWN, 2 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 410.580 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUnits.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Azimuth from .units by testUnits.py line 11
# lazily imported pygeodesy.Band from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Bool from .units by testUnits.py line 11
# lazily imported pygeodesy.Epoch from .units by testUnits.py line 11
# lazily imported pygeodesy.Epsg from .epsg by testUnits.py line 11
# lazily imported pygeodesy.FIx from .units by testUnits.py line 11
# lazily imported pygeodesy.Garef from .gars by testUnits.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testUnits.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testUnits.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Int_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Number_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Precision_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Lamd from .units by testUnits.py line 11
# lazily imported pygeodesy.Phid from .units by testUnits.py line 11
# lazily imported pygeodesy.Str from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Zone from .units by testUnits.py line 11
# lazily imported pygeodesy.Float from .unitsBase by testUnits.py line 11

    testing testUnits.py 24.07.25 isLazy=3
# lazily imported pygeodesy.albers by bases.py line 198
# lazily imported pygeodesy.azimuthal by bases.py line 198
# lazily imported pygeodesy.booleans by bases.py line 198
# lazily imported pygeodesy.clipy by bases.py line 198
# lazily imported pygeodesy.css by bases.py line 198
# lazily imported pygeodesy.ecef by bases.py line 198
# lazily imported pygeodesy.elevations by bases.py line 198
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 198
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 198
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 198
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 198
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 198
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 198
# lazily imported pygeodesy.elliptic by bases.py line 198
# lazily imported pygeodesy.etm by bases.py line 198
# lazily imported pygeodesy.frechet by bases.py line 198
# lazily imported pygeodesy.fstats by bases.py line 198
# lazily imported pygeodesy.geodesici by bases.py line 198
# lazily imported pygeodesy.geodesicw by bases.py line 198
# lazily imported pygeodesy.geodsolve by bases.py line 198
# lazily imported pygeodesy.geoids by bases.py line 198
# lazily imported pygeodesy.hausdorff by bases.py line 198

    testing _Lat(1.0,) (pygeodesy.units, 24.11.06)
    test 1 .classname: _Lat
    test 2 isinstance: True
    test 3 .name: _lat
    test 4 .named: _lat
    test 5 .named2: _Lat '_lat'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: _lat (1.0)
    test 11 .units: _lat
    test 12 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 13 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 14 _lat: TypeError
    test 15 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 16 .named: Test
    test 17 .named2: _Lat 'Test'
    test 18 .str: 1.0
    test 19 .toStr: 1.0
    test 20 .repr: 1.0
    test 21 .toRepr: Test (1.0)
    test 22 .units: _lat
    test 23 .name: Test
    test 24 ._name: Test
    test 25 .str: 1.0
    test 26 .repr: 1.0
    test 27 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 24.11.06)
    test 28 .classname: _Lon
    test 29 isinstance: True
    test 30 .name: _lon
    test 31 .named: _lon
    test 32 .named2: _Lon '_lon'
    test 33 .str: 1.0
    test 34 .toStr: 1.0
    test 35 .std_repr: True
    test 36 .repr: 1.0
    test 37 .toRepr: _lon (1.0)
    test 38 .units: _lon
    test 39 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 40 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 41 _lon: TypeError
    test 42 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 43 .named: Test
    test 44 .named2: _Lon 'Test'
    test 45 .str: 1.0
    test 46 .toStr: 1.0
    test 47 .repr: 1.0
    test 48 .toRepr: Test (1.0)
    test 49 .units: _lon
    test 50 .name: Test
    test 51 ._name: Test
    test 52 .str: 1.0
    test 53 .repr: 1.0
    test 54 delattr: ''
# lazily imported pygeodesy.ktm by bases.py line 198
# lazily imported pygeodesy.lcc by bases.py line 198
# lazily imported pygeodesy.ltp by bases.py line 198
# lazily imported pygeodesy.mgrs by bases.py line 198
# lazily imported pygeodesy.osgr by bases.py line 198
# lazily imported pygeodesy.resections by bases.py line 198
# lazily imported pygeodesy.simplify by bases.py line 198
# lazily imported pygeodesy.sphericalBase by bases.py line 198
# lazily imported pygeodesy.sphericalNvector by bases.py line 198
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 198
# lazily imported pygeodesy.trf by bases.py line 198
# lazily imported pygeodesy.triaxials by bases.py line 198

    testing Bearing(1.0,) (pygeodesy.units, 24.11.06)
    test 55 .classname: Bearing
    test 56 isinstance: True
    test 57 .name: bearing
    test 58 .named: bearing
    test 59 .named2: Bearing 'bearing'
    test 60 .str: 1.0
    test 61 .toStr: 1.0
    test 62 .std_repr: True
    test 63 .repr: 1.0
    test 64 .toRepr: bearing (1.0)
    test 65 .units: bearing
    test 66 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 67 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 68 bearing: TypeError
    test 69 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 70 .named: Test
    test 71 .named2: Bearing 'Test'
    test 72 .str: 1.0
    test 73 .toStr: 1.0
    test 74 .repr: 1.0
    test 75 .toRepr: Test (1.0)
    test 76 .units: bearing
    test 77 .name: Test
    test 78 ._name: Test
    test 79 .str: 1.0
    test 80 .repr: 1.0
    test 81 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 24.11.06)
    test 82 .classname: Degrees
    test 83 isinstance: True
    test 84 .name: degrees
    test 85 .named: degrees
    test 86 .named2: Degrees 'degrees'
    test 87 .str: 1.0
    test 88 .toStr: 1.0
    test 89 .std_repr: True
    test 90 .repr: 1.0
    test 91 .toRepr: degrees (1.0)
    test 92 .units: degrees
    test 93 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 94 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 95 degrees: TypeError
    test 96 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 97 .named: Test
    test 98 .named2: Degrees 'Test'
    test 99 .str: 1.0
    test 100 .toStr: 1.0
    test 101 .repr: 1.0
    test 102 .toRepr: Test (1.0)
    test 103 .units: degrees
    test 104 .name: Test
    test 105 ._name: Test
    test 106 .str: 1.0
    test 107 .repr: 1.0
    test 108 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 24.11.06)
    test 109 .classname: Degrees2
    test 110 isinstance: True
    test 111 .name: degrees2
    test 112 .named: degrees2
    test 113 .named2: Degrees2 'degrees2'
    test 114 .str: 1.0
    test 115 .toStr: 1.0
    test 116 .std_repr: True
    test 117 .repr: 1.0
    test 118 .toRepr: degrees2 (1.0)
    test 119 .units: degrees2
    test 120 degrees2: degrees2 ('X'): could not convert string to float: 'X'
    test 121 degrees2: U ('X'): could not convert string to float: 'X'
    test 122 degrees2: TypeError
    test 123 degrees2: degrees2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 124 .named: Test
    test 125 .named2: Degrees2 'Test'
    test 126 .str: 1.0
    test 127 .toStr: 1.0
    test 128 .repr: 1.0
    test 129 .toRepr: Test (1.0)
    test 130 .units: degrees2
    test 131 .name: Test
    test 132 ._name: Test
    test 133 .str: 1.0
    test 134 .repr: 1.0
    test 135 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 24.11.06)
    test 136 .classname: Degrees_
    test 137 isinstance: True
    test 138 .name: degrees_
    test 139 .named: degrees_
    test 140 .named2: Degrees_ 'degrees_'
    test 141 .str: 1.0
    test 142 .toStr: 1.0
    test 143 .std_repr: True
    test 144 .repr: 1.0
    test 145 .toRepr: degrees_ (1.0)
    test 146 .units: degrees_
    test 147 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 148 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 149 degrees_: TypeError
    test 150 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 151 .named: Test
    test 152 .named2: Degrees_ 'Test'
    test 153 .str: 1.0
    test 154 .toStr: 1.0
    test 155 .repr: 1.0
    test 156 .toRepr: Test (1.0)
    test 157 .units: degrees_
    test 158 .name: Test
    test 159 ._name: Test
    test 160 .str: 1.0
    test 161 .repr: 1.0
    test 162 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 24.11.06)
    test 163 .classname: Distance
    test 164 isinstance: True
    test 165 .name: distance
    test 166 .named: distance
    test 167 .named2: Distance 'distance'
    test 168 .str: 1.0
    test 169 .toStr: 1.0
    test 170 .std_repr: True
    test 171 .repr: 1.0
    test 172 .toRepr: distance (1.0)
    test 173 .units: distance
    test 174 distance: distance ('X'): could not convert string to float: 'X'
    test 175 distance: U ('X'): could not convert string to float: 'X'
    test 176 distance: TypeError
    test 177 distance: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 178 .named: Test
    test 179 .named2: Distance 'Test'
    test 180 .str: 1.0
    test 181 .toStr: 1.0
    test 182 .repr: 1.0
    test 183 .toRepr: Test (1.0)
    test 184 .units: distance
    test 185 .name: Test
    test 186 ._name: Test
    test 187 .str: 1.0
    test 188 .repr: 1.0
    test 189 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 24.11.06)
    test 190 .classname: Distance_
    test 191 isinstance: True
    test 192 .name: distance_
    test 193 .named: distance_
    test 194 .named2: Distance_ 'distance_'
    test 195 .str: 1.0
    test 196 .toStr: 1.0
    test 197 .std_repr: True
    test 198 .repr: 1.0
    test 199 .toRepr: distance_ (1.0)
    test 200 .units: distance_
    test 201 distance_: distance ('X'): could not convert string to float: 'X'
    test 202 distance_: U ('X'): could not convert string to float: 'X'
    test 203 distance_: TypeError
    test 204 distance_: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 205 .named: Test
    test 206 .named2: Distance_ 'Test'
    test 207 .str: 1.0
    test 208 .toStr: 1.0
    test 209 .repr: 1.0
    test 210 .toRepr: Test (1.0)
    test 211 .units: distance_
    test 212 .name: Test
    test 213 ._name: Test
    test 214 .str: 1.0
    test 215 .repr: 1.0
    test 216 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 24.11.06)
    test 217 .classname: Easting
    test 218 isinstance: True
    test 219 .name: easting
    test 220 .named: easting
    test 221 .named2: Easting 'easting'
    test 222 .str: 1.0
    test 223 .toStr: 1.0
    test 224 .std_repr: True
    test 225 .repr: 1.0
    test 226 .toRepr: easting (1.0)
    test 227 .units: easting
    test 228 easting: easting ('X'): could not convert string to float: 'X'
    test 229 easting: U ('X'): could not convert string to float: 'X'
    test 230 easting: TypeError
    test 231 easting: easting ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 232 .named: Test
    test 233 .named2: Easting 'Test'
    test 234 .str: 1.0
    test 235 .toStr: 1.0
    test 236 .repr: 1.0
    test 237 .toRepr: Test (1.0)
    test 238 .units: easting
    test 239 .name: Test
    test 240 ._name: Test
    test 241 .str: 1.0
    test 242 .repr: 1.0
    test 243 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 24.11.06)
    test 244 .classname: Feet
    test 245 isinstance: True
    test 246 .name: feet
    test 247 .named: feet
    test 248 .named2: Feet 'feet'
    test 249 .str: 1.0
    test 250 .toStr: 1.0
    test 251 .std_repr: True
    test 252 .repr: 1.0
    test 253 .toRepr: feet (1.0)
    test 254 .units: feet
    test 255 feet: feet ('X'): could not convert string to float: 'X'
    test 256 feet: U ('X'): could not convert string to float: 'X'
    test 257 feet: TypeError
    test 258 feet: feet ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 259 .named: Test
    test 260 .named2: Feet 'Test'
    test 261 .str: 1.0
    test 262 .toStr: 1.0
    test 263 .repr: 1.0
    test 264 .toRepr: Test (1.0)
    test 265 .units: feet
    test 266 .name: Test
    test 267 ._name: Test
    test 268 .str: 1.0
    test 269 .repr: 1.0
    test 270 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 24.11.06)
    test 271 .classname: Float_
    test 272 isinstance: True
    test 273 .name: float_
    test 274 .named: float_
    test 275 .named2: Float_ 'float_'
    test 276 .str: 1.0
    test 277 .toStr: 1.0
    test 278 .std_repr: True
    test 279 .repr: 1.0
    test 280 .toRepr: float_ (1.0)
    test 281 .units: float_
    test 282 float_: Float_ ('X'): could not convert string to float: 'X'
    test 283 float_: U ('X'): could not convert string to float: 'X'
    test 284 float_: TypeError
    test 285 float_: Float_ ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 286 .named: Test
    test 287 .named2: Float_ 'Test'
    test 288 .str: 1.0
    test 289 .toStr: 1.0
    test 290 .repr: 1.0
    test 291 .toRepr: Test (1.0)
    test 292 .units: float_
    test 293 .name: Test
    test 294 ._name: Test
    test 295 .str: 1.0
    test 296 .repr: 1.0
    test 297 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 24.11.06)
    test 298 .classname: Height
    test 299 isinstance: True
    test 300 .name: height
    test 301 .named: height
    test 302 .named2: Height 'height'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .std_repr: True
    test 306 .repr: 1.0
    test 307 .toRepr: height (1.0)
    test 308 .units: height
    test 309 height: height ('X'): could not convert string to float: 'X'
    test 310 height: U ('X'): could not convert string to float: 'X'
    test 311 height: TypeError
    test 312 height: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 313 .named: Test
    test 314 .named2: Height 'Test'
    test 315 .str: 1.0
    test 316 .toStr: 1.0
    test 317 .repr: 1.0
    test 318 .toRepr: Test (1.0)
    test 319 .units: height
    test 320 .name: Test
    test 321 ._name: Test
    test 322 .str: 1.0
    test 323 .repr: 1.0
    test 324 delattr: ''

    testing HeightX(1.0,) (pygeodesy.units, 24.11.06)
    test 325 .classname: HeightX
    test 326 isinstance: True
    test 327 .name: heightx
    test 328 .named: heightx
    test 329 .named2: HeightX 'heightx'
    test 330 .str: 1.0
    test 331 .toStr: 1.0
    test 332 .std_repr: True
    test 333 .repr: 1.0
    test 334 .toRepr: heightx (1.0)
    test 335 .units: heightx
    test 336 heightx: height ('X'): could not convert string to float: 'X'
    test 337 heightx: U ('X'): could not convert string to float: 'X'
    test 338 heightx: TypeError
    test 339 heightx: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 340 .named: Test
    test 341 .named2: HeightX 'Test'
    test 342 .str: 1.0
    test 343 .toStr: 1.0
    test 344 .repr: 1.0
    test 345 .toRepr: Test (1.0)
    test 346 .units: heightx
    test 347 .name: Test
    test 348 ._name: Test
    test 349 .str: 1.0
    test 350 .repr: 1.0
    test 351 delattr: ''

    testing Height_(1.0,) (pygeodesy.units, 24.11.06)
    test 352 .classname: Height_
    test 353 isinstance: True
    test 354 .name: height_
    test 355 .named: height_
    test 356 .named2: Height_ 'height_'
    test 357 .str: 1.0
    test 358 .toStr: 1.0
    test 359 .std_repr: True
    test 360 .repr: 1.0
    test 361 .toRepr: height_ (1.0)
    test 362 .units: height_
    test 363 height_: height ('X'): could not convert string to float: 'X'
    test 364 height_: U ('X'): could not convert string to float: 'X'
    test 365 height_: TypeError
    test 366 height_: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 367 .named: Test
    test 368 .named2: Height_ 'Test'
    test 369 .str: 1.0
    test 370 .toStr: 1.0
    test 371 .repr: 1.0
    test 372 .toRepr: Test (1.0)
    test 373 .units: height_
    test 374 .name: Test
    test 375 ._name: Test
    test 376 .str: 1.0
    test 377 .repr: 1.0
    test 378 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 24.11.06)
    test 379 .classname: Lam
    test 380 isinstance: True
    test 381 .name: lam
    test 382 .named: lam
    test 383 .named2: Lam 'lam'
    test 384 .str: 1.0
    test 385 .toStr: 1.0
    test 386 .std_repr: True
    test 387 .repr: 1.0
    test 388 .toRepr: lam (1.0)
    test 389 .units: lam
    test 390 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 391 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 392 lam: TypeError
    test 393 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 394 .named: Test
    test 395 .named2: Lam 'Test'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .repr: 1.0
    test 399 .toRepr: Test (1.0)
    test 400 .units: lam
    test 401 .name: Test
    test 402 ._name: Test
    test 403 .str: 1.0
    test 404 .repr: 1.0
    test 405 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 24.11.06)
    test 406 .classname: Lat
    test 407 isinstance: True
    test 408 .name: lat
    test 409 .named: lat
    test 410 .named2: Lat 'lat'
    test 411 .str: 1.0
    test 412 .toStr: 1.0
    test 413 .std_repr: True
    test 414 .repr: 1.0
    test 415 .toRepr: lat (1.0)
    test 416 .units: lat
    test 417 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 418 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 419 lat: TypeError
    test 420 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 421 .named: Test
    test 422 .named2: Lat 'Test'
    test 423 .str: 1.0
    test 424 .toStr: 1.0
    test 425 .repr: 1.0
    test 426 .toRepr: Test (1.0)
    test 427 .units: lat
    test 428 .name: Test
    test 429 ._name: Test
    test 430 .str: 1.0
    test 431 .repr: 1.0
    test 432 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 24.11.06)
    test 433 .classname: Lat_
    test 434 isinstance: True
    test 435 .name: lat_
    test 436 .named: lat_
    test 437 .named2: Lat_ 'lat_'
    test 438 .str: 1.0
    test 439 .toStr: 1.0
    test 440 .std_repr: True
    test 441 .repr: 1.0
    test 442 .toRepr: lat_ (1.0)
    test 443 .units: lat_
    test 444 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 445 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 446 lat_: TypeError
    test 447 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 448 .named: Test
    test 449 .named2: Lat_ 'Test'
    test 450 .str: 1.0
    test 451 .toStr: 1.0
    test 452 .repr: 1.0
    test 453 .toRepr: Test (1.0)
    test 454 .units: lat_
    test 455 .name: Test
    test 456 ._name: Test
    test 457 .str: 1.0
    test 458 .repr: 1.0
    test 459 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 24.11.06)
    test 460 .classname: Lon
    test 461 isinstance: True
    test 462 .name: lon
    test 463 .named: lon
    test 464 .named2: Lon 'lon'
    test 465 .str: 1.0
    test 466 .toStr: 1.0
    test 467 .std_repr: True
    test 468 .repr: 1.0
    test 469 .toRepr: lon (1.0)
    test 470 .units: lon
    test 471 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 472 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 473 lon: TypeError
    test 474 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 475 .named: Test
    test 476 .named2: Lon 'Test'
    test 477 .str: 1.0
    test 478 .toStr: 1.0
    test 479 .repr: 1.0
    test 480 .toRepr: Test (1.0)
    test 481 .units: lon
    test 482 .name: Test
    test 483 ._name: Test
    test 484 .str: 1.0
    test 485 .repr: 1.0
    test 486 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 24.11.06)
    test 487 .classname: Lon_
    test 488 isinstance: True
    test 489 .name: lon_
    test 490 .named: lon_
    test 491 .named2: Lon_ 'lon_'
    test 492 .str: 1.0
    test 493 .toStr: 1.0
    test 494 .std_repr: True
    test 495 .repr: 1.0
    test 496 .toRepr: lon_ (1.0)
    test 497 .units: lon_
    test 498 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 499 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 500 lon_: TypeError
    test 501 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 502 .named: Test
    test 503 .named2: Lon_ 'Test'
    test 504 .str: 1.0
    test 505 .toStr: 1.0
    test 506 .repr: 1.0
    test 507 .toRepr: Test (1.0)
    test 508 .units: lon_
    test 509 .name: Test
    test 510 ._name: Test
    test 511 .str: 1.0
    test 512 .repr: 1.0
    test 513 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 24.11.06)
    test 514 .classname: Meter
    test 515 isinstance: True
    test 516 .name: meter
    test 517 .named: meter
    test 518 .named2: Meter 'meter'
    test 519 .str: 1.0
    test 520 .toStr: 1.0
    test 521 .std_repr: True
    test 522 .repr: 1.0
    test 523 .toRepr: meter (1.0)
    test 524 .units: meter
    test 525 meter: meter ('X'): could not convert string to float: 'X'
    test 526 meter: U ('X'): could not convert string to float: 'X'
    test 527 meter: TypeError
    test 528 meter: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 529 .named: Test
    test 530 .named2: Meter 'Test'
    test 531 .str: 1.0
    test 532 .toStr: 1.0
    test 533 .repr: 1.0
    test 534 .toRepr: Test (1.0)
    test 535 .units: meter
    test 536 .name: Test
    test 537 ._name: Test
    test 538 .str: 1.0
    test 539 .repr: 1.0
    test 540 delattr: ''

    testing Meter2(1.0,) (pygeodesy.units, 24.11.06)
    test 541 .classname: Meter2
    test 542 isinstance: True
    test 543 .name: meter2
    test 544 .named: meter2
    test 545 .named2: Meter2 'meter2'
    test 546 .str: 1.0
    test 547 .toStr: 1.0
    test 548 .std_repr: True
    test 549 .repr: 1.0
    test 550 .toRepr: meter2 (1.0)
    test 551 .units: meter2
    test 552 meter2: meter2 ('X'): could not convert string to float: 'X'
    test 553 meter2: U ('X'): could not convert string to float: 'X'
    test 554 meter2: TypeError
    test 555 meter2: meter2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 556 .named: Test
    test 557 .named2: Meter2 'Test'
    test 558 .str: 1.0
    test 559 .toStr: 1.0
    test 560 .repr: 1.0
    test 561 .toRepr: Test (1.0)
    test 562 .units: meter2
    test 563 .name: Test
    test 564 ._name: Test
    test 565 .str: 1.0
    test 566 .repr: 1.0
    test 567 delattr: ''

    testing Meter3(1.0,) (pygeodesy.units, 24.11.06)
    test 568 .classname: Meter3
    test 569 isinstance: True
    test 570 .name: meter3
    test 571 .named: meter3
    test 572 .named2: Meter3 'meter3'
    test 573 .str: 1.0
    test 574 .toStr: 1.0
    test 575 .std_repr: True
    test 576 .repr: 1.0
    test 577 .toRepr: meter3 (1.0)
    test 578 .units: meter3
    test 579 meter3: meter3 ('X'): could not convert string to float: 'X'
    test 580 meter3: U ('X'): could not convert string to float: 'X'
    test 581 meter3: TypeError
    test 582 meter3: meter3 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 583 .named: Test
    test 584 .named2: Meter3 'Test'
    test 585 .str: 1.0
    test 586 .toStr: 1.0
    test 587 .repr: 1.0
    test 588 .toRepr: Test (1.0)
    test 589 .units: meter3
    test 590 .name: Test
    test 591 ._name: Test
    test 592 .str: 1.0
    test 593 .repr: 1.0
    test 594 delattr: ''

    testing Meter_(1.0,) (pygeodesy.units, 24.11.06)
    test 595 .classname: Meter_
    test 596 isinstance: True
    test 597 .name: meter_
    test 598 .named: meter_
    test 599 .named2: Meter_ 'meter_'
    test 600 .str: 1.0
    test 601 .toStr: 1.0
    test 602 .std_repr: True
    test 603 .repr: 1.0
    test 604 .toRepr: meter_ (1.0)
    test 605 .units: meter_
    test 606 meter_: meter ('X'): could not convert string to float: 'X'
    test 607 meter_: U ('X'): could not convert string to float: 'X'
    test 608 meter_: TypeError
    test 609 meter_: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 610 .named: Test
    test 611 .named2: Meter_ 'Test'
    test 612 .str: 1.0
    test 613 .toStr: 1.0
    test 614 .repr: 1.0
    test 615 .toRepr: Test (1.0)
    test 616 .units: meter_
    test 617 .name: Test
    test 618 ._name: Test
    test 619 .str: 1.0
    test 620 .repr: 1.0
    test 621 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 24.11.06)
    test 622 .classname: Northing
    test 623 isinstance: True
    test 624 .name: northing
    test 625 .named: northing
    test 626 .named2: Northing 'northing'
    test 627 .str: 1.0
    test 628 .toStr: 1.0
    test 629 .std_repr: True
    test 630 .repr: 1.0
    test 631 .toRepr: northing (1.0)
    test 632 .units: northing
    test 633 northing: northing ('X'): could not convert string to float: 'X'
    test 634 northing: U ('X'): could not convert string to float: 'X'
    test 635 northing: TypeError
    test 636 northing: northing ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 637 .named: Test
    test 638 .named2: Northing 'Test'
    test 639 .str: 1.0
    test 640 .toStr: 1.0
    test 641 .repr: 1.0
    test 642 .toRepr: Test (1.0)
    test 643 .units: northing
    test 644 .name: Test
    test 645 ._name: Test
    test 646 .str: 1.0
    test 647 .repr: 1.0
    test 648 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 24.11.06)
    test 649 .classname: Phi
    test 650 isinstance: True
    test 651 .name: phi
    test 652 .named: phi
    test 653 .named2: Phi 'phi'
    test 654 .str: 1.0
    test 655 .toStr: 1.0
    test 656 .std_repr: True
    test 657 .repr: 1.0
    test 658 .toRepr: phi (1.0)
    test 659 .units: phi
    test 660 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 661 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 662 phi: TypeError
    test 663 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 664 .named: Test
    test 665 .named2: Phi 'Test'
    test 666 .str: 1.0
    test 667 .toStr: 1.0
    test 668 .repr: 1.0
    test 669 .toRepr: Test (1.0)
    test 670 .units: phi
    test 671 .name: Test
    test 672 ._name: Test
    test 673 .str: 1.0
    test 674 .repr: 1.0
    test 675 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 24.11.06)
    test 676 .classname: Radians
    test 677 isinstance: True
    test 678 .name: radians
    test 679 .named: radians
    test 680 .named2: Radians 'radians'
    test 681 .str: 1.0
    test 682 .toStr: 1.0
    test 683 .std_repr: True
    test 684 .repr: 1.0
    test 685 .toRepr: radians (1.0)
    test 686 .units: radians
    test 687 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 688 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 689 radians: TypeError
    test 690 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 691 .named: Test
    test 692 .named2: Radians 'Test'
    test 693 .str: 1.0
    test 694 .toStr: 1.0
    test 695 .repr: 1.0
    test 696 .toRepr: Test (1.0)
    test 697 .units: radians
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: 1.0
    test 701 .repr: 1.0
    test 702 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 24.11.06)
    test 703 .classname: Radians2
    test 704 isinstance: True
    test 705 .name: radians2
    test 706 .named: radians2
    test 707 .named2: Radians2 'radians2'
    test 708 .str: 1.0
    test 709 .toStr: 1.0
    test 710 .std_repr: True
    test 711 .repr: 1.0
    test 712 .toRepr: radians2 (1.0)
    test 713 .units: radians2
    test 714 radians2: radians2 ('X'): could not convert string to float: 'X'
    test 715 radians2: U ('X'): could not convert string to float: 'X'
    test 716 radians2: TypeError
    test 717 radians2: radians2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 718 .named: Test
    test 719 .named2: Radians2 'Test'
    test 720 .str: 1.0
    test 721 .toStr: 1.0
    test 722 .repr: 1.0
    test 723 .toRepr: Test (1.0)
    test 724 .units: radians2
    test 725 .name: Test
    test 726 ._name: Test
    test 727 .str: 1.0
    test 728 .repr: 1.0
    test 729 delattr: ''

    testing Radians_(1.0,) (pygeodesy.units, 24.11.06)
    test 730 .classname: Radians_
    test 731 isinstance: True
    test 732 .name: radians_
    test 733 .named: radians_
    test 734 .named2: Radians_ 'radians_'
    test 735 .str: 1.0
    test 736 .toStr: 1.0
    test 737 .std_repr: True
    test 738 .repr: 1.0
    test 739 .toRepr: radians_ (1.0)
    test 740 .units: radians_
    test 741 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 742 radians_: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 743 radians_: TypeError
    test 744 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 745 .named: Test
    test 746 .named2: Radians_ 'Test'
    test 747 .str: 1.0
    test 748 .toStr: 1.0
    test 749 .repr: 1.0
    test 750 .toRepr: Test (1.0)
    test 751 .units: radians_
    test 752 .name: Test
    test 753 ._name: Test
    test 754 .str: 1.0
    test 755 .repr: 1.0
    test 756 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 24.11.06)
    test 757 .classname: Radius_
    test 758 isinstance: True
    test 759 .name: radius_
    test 760 .named: radius_
    test 761 .named2: Radius_ 'radius_'
    test 762 .str: 1.0
    test 763 .toStr: 1.0
    test 764 .std_repr: True
    test 765 .repr: 1.0
    test 766 .toRepr: radius_ (1.0)
    test 767 .units: radius_
    test 768 radius_: radius ('X'): could not convert string to float: 'X'
    test 769 radius_: U ('X'): could not convert string to float: 'X'
    test 770 radius_: TypeError
    test 771 radius_: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 772 .named: Test
    test 773 .named2: Radius_ 'Test'
    test 774 .str: 1.0
    test 775 .toStr: 1.0
    test 776 .repr: 1.0
    test 777 .toRepr: Test (1.0)
    test 778 .units: radius_
    test 779 .name: Test
    test 780 ._name: Test
    test 781 .str: 1.0
    test 782 .repr: 1.0
    test 783 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 24.11.06)
    test 784 .classname: Scalar
    test 785 isinstance: True
    test 786 .name: scalar
    test 787 .named: scalar
    test 788 .named2: Scalar 'scalar'
    test 789 .str: 1.0
    test 790 .toStr: 1.0
    test 791 .std_repr: True
    test 792 .repr: 1.0
    test 793 .toRepr: scalar (1.0)
    test 794 .units: scalar
    test 795 scalar: scalar ('X'): could not convert string to float: 'X'
    test 796 scalar: U ('X'): could not convert string to float: 'X'
    test 797 scalar: TypeError
    test 798 scalar: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 799 .named: Test
    test 800 .named2: Scalar 'Test'
    test 801 .str: 1.0
    test 802 .toStr: 1.0
    test 803 .repr: 1.0
    test 804 .toRepr: Test (1.0)
    test 805 .units: scalar
    test 806 .name: Test
    test 807 ._name: Test
    test 808 .str: 1.0
    test 809 .repr: 1.0
    test 810 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 24.11.06)
    test 811 .classname: Scalar_
    test 812 isinstance: True
    test 813 .name: scalar_
    test 814 .named: scalar_
    test 815 .named2: Scalar_ 'scalar_'
    test 816 .str: 1.0
    test 817 .toStr: 1.0
    test 818 .std_repr: True
    test 819 .repr: 1.0
    test 820 .toRepr: scalar_ (1.0)
    test 821 .units: scalar_
    test 822 scalar_: scalar ('X'): could not convert string to float: 'X'
    test 823 scalar_: U ('X'): could not convert string to float: 'X'
    test 824 scalar_: TypeError
    test 825 scalar_: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 826 .named: Test
    test 827 .named2: Scalar_ 'Test'
    test 828 .str: 1.0
    test 829 .toStr: 1.0
    test 830 .repr: 1.0
    test 831 .toRepr: Test (1.0)
    test 832 .units: scalar_
    test 833 .name: Test
    test 834 ._name: Test
    test 835 .str: 1.0
    test 836 .repr: 1.0
    test 837 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 24.11.06)
    test 838 .classname: Float
    test 839 isinstance: True
    test 840 .name: float
    test 841 .named: float
    test 842 .named2: Float 'float'
    test 843 .str: 1.0
    test 844 .toStr: 1.0
    test 845 .std_repr: True
    test 846 .repr: 1.0
    test 847 .toRepr: float (1.0)
    test 848 .units: float
    test 849 float: Float ('X'): could not convert string to float: 'X'
    test 850 float: U ('X'): could not convert string to float: 'X'
    test 851 float: TypeError
    test 852 float: Float ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 853 .named: Test
    test 854 .named2: Float 'Test'
    test 855 .str: 1.0
    test 856 .toStr: 1.0
    test 857 .repr: 1.0
    test 858 .toRepr: Test (1.0)
    test 859 .units: float
    test 860 .name: Test
    test 861 ._name: Test
    test 862 .str: 1.0
    test 863 .repr: 1.0
    test 864 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 24.11.06)
    test 865 .classname: Radius
    test 866 isinstance: True
    test 867 .name: radius
    test 868 .named: radius
    test 869 .named2: Radius 'radius'
    test 870 .str: 1.0
    test 871 .toStr: 1.0
    test 872 .std_repr: True
    test 873 .repr: 1.0
    test 874 .toRepr: radius (1.0)
    test 875 .units: radius
    test 876 radius: radius ('X'): could not convert string to float: 'X'
    test 877 radius: U ('X'): could not convert string to float: 'X'
    test 878 radius: TypeError
    test 879 radius: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 880 .named: Test
    test 881 .named2: Radius 'Test'
    test 882 .str: 1.0
    test 883 .toStr: 1.0
    test 884 .repr: 1.0
    test 885 .toRepr: Test (1.0)
    test 886 .units: radius
    test 887 .name: Test
    test 888 ._name: Test
    test 889 .str: 1.0
    test 890 .repr: 1.0
    test 891 delattr: ''
# lazily imported pygeodesy.utmups by bases.py line 198
# lazily imported pygeodesy.vector2d by bases.py line 198
# lazily imported pygeodesy.webmercator by bases.py line 198
# lazily imported pygeodesy.auxilats by bases.py line 198
# lazily imported pygeodesy.geodesicx by bases.py line 198
# lazily imported pygeodesy.rhumb by bases.py line 198

    testing _Lat(1.0,) (pygeodesy.units, 24.11.06)
    test 892 .classname: _Lat
    test 893 isinstance: True
    test 894 .name: _lat
    test 895 .named: _lat
    test 896 .named2: _Lat '_lat'
    test 897 .str: 1.0
    test 898 .toStr: 1.0
    test 899 .std_repr: True
    test 900 .repr: 1.0
    test 901 .toRepr: _lat (1.0)
    test 902 .units: _lat
    test 903 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 904 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 905 _lat: TypeError
    test 906 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 907 .named: Test
    test 908 .named2: _Lat 'Test'
    test 909 .str: 1.0
    test 910 .toStr: 1.0
    test 911 .repr: 1.0
    test 912 .toRepr: Test (1.0)
    test 913 .units: _lat
    test 914 .name: Test
    test 915 ._name: Test
    test 916 .str: 1.0
    test 917 .repr: 1.0
    test 918 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 24.11.06)
    test 919 .classname: _Lon
    test 920 isinstance: True
    test 921 .name: _lon
    test 922 .named: _lon
    test 923 .named2: _Lon '_lon'
    test 924 .str: 1.0
    test 925 .toStr: 1.0
    test 926 .std_repr: True
    test 927 .repr: 1.0
    test 928 .toRepr: _lon (1.0)
    test 929 .units: _lon
    test 930 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 931 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 932 _lon: TypeError
    test 933 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 934 .named: Test
    test 935 .named2: _Lon 'Test'
    test 936 .str: 1.0
    test 937 .toStr: 1.0
    test 938 .repr: 1.0
    test 939 .toRepr: Test (1.0)
    test 940 .units: _lon
    test 941 .name: Test
    test 942 ._name: Test
    test 943 .str: 1.0
    test 944 .repr: 1.0
    test 945 delattr: ''

    testing Band('U',) (pygeodesy.units, 24.11.06)
    test 946 .classname: Band
    test 947 isinstance: True
    test 948 .name: band
    test 949 .named: band
    test 950 .named2: Band 'band'
    test 951 .str: U
    test 952 .toStr: U
    test 953 .std_repr: True
    test 954 .repr: 'U'
    test 955 .toRepr: band ('U')
    test 956 .units: band
    test 957 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 958 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 959 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 960 .named: Test
    test 961 .named2: Band 'Test'
    test 962 .str: U
    test 963 .toStr: U
    test 964 .repr: 'U'
    test 965 .toRepr: Test ('U')
    test 966 .units: band
    test 967 .name: Test
    test 968 ._name: Test
    test 969 .str: U
    test 970 .repr: 'U'
    test 971 delattr: ''

    testing Str('U',) (pygeodesy.units, 24.11.06)
    test 972 .classname: Str
    test 973 isinstance: True
    test 974 .name: str
    test 975 .named: str
    test 976 .named2: Str 'str'
    test 977 .str: U
    test 978 .toStr: U
    test 979 .std_repr: True
    test 980 .repr: 'U'
    test 981 .toRepr: str ('U')
    test 982 .units: str
    test 983 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 984 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 985 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 986 .named: Test
    test 987 .named2: Str 'Test'
    test 988 .str: U
    test 989 .toStr: U
    test 990 .repr: 'U'
    test 991 .toRepr: Test ('U')
    test 992 .units: str
    test 993 .name: Test
    test 994 ._name: Test
    test 995 .str: U
    test 996 .repr: 'U'
    test 997 delattr: ''

    testing Bool(True,) (pygeodesy.units, 24.11.06)
    test 998 .classname: Bool
    test 999 isinstance: True
    test 1000 .name: bool
    test 1001 .named: bool
    test 1002 .named2: Bool 'bool'
    test 1003 .str: True
    test 1004 .toStr: True
    test 1005 .std_repr: True
    test 1006 .repr: True
    test 1007 .toRepr: bool (True)
    test 1008 .units: bool
    test 1009 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1010 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1011 Error: True  FAILED, KNOWN, expected <class 'TypeError'>
    test 1012 .named: Test
    test 1013 .named2: Bool 'Test'
    test 1014 .str: True
    test 1015 .toStr: True
    test 1016 .repr: True
    test 1017 .toRepr: Test (True)
    test 1018 .units: bool
    test 1019 .name: Test
    test 1020 ._name: Test
    test 1021 .str: True
    test 1022 .repr: True
    test 1023 delattr: ''

    testing Int(2,) (pygeodesy.units, 24.11.06)
    test 1024 .classname: Int
    test 1025 isinstance: True
    test 1026 .name: int
    test 1027 .named: int
    test 1028 .named2: Int 'int'
    test 1029 .str: 2
    test 1030 .toStr: 2
    test 1031 .std_repr: True
    test 1032 .repr: 2
    test 1033 .toRepr: int (2)
    test 1034 .units: int
    test 1035 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 1036 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 1037 int: TypeError
    test 1038 int: Int ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1039 .named: Test
    test 1040 .named2: Int 'Test'
    test 1041 .str: 2
    test 1042 .toStr: 2
    test 1043 .repr: 2
    test 1044 .toRepr: Test (2)
    test 1045 .units: int
    test 1046 .name: Test
    test 1047 ._name: Test
    test 1048 .str: 2
    test 1049 .repr: 2
    test 1050 delattr: ''

    testing Int_(2,) (pygeodesy.units, 24.11.06)
    test 1051 .classname: Int_
    test 1052 isinstance: True
    test 1053 .name: int_
    test 1054 .named: int_
    test 1055 .named2: Int_ 'int_'
    test 1056 .str: 2
    test 1057 .toStr: 2
    test 1058 .std_repr: True
    test 1059 .repr: 2
    test 1060 .toRepr: int_ (2)
    test 1061 .units: int_
    test 1062 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 1063 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1064 int_: TypeError
    test 1065 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1066 .named: Test
    test 1067 .named2: Int_ 'Test'
    test 1068 .str: 2
    test 1069 .toStr: 2
    test 1070 .repr: 2
    test 1071 .toRepr: Test (2)
    test 1072 .units: int_
    test 1073 .name: Test
    test 1074 ._name: Test
    test 1075 .str: 2
    test 1076 .repr: 2
    test 1077 delattr: ''

    testing Number_(2,) (pygeodesy.units, 24.11.06)
    test 1078 .classname: Number_
    test 1079 isinstance: True
    test 1080 .name: number_
    test 1081 .named: number_
    test 1082 .named2: Number_ 'number_'
    test 1083 .str: 2
    test 1084 .toStr: 2
    test 1085 .std_repr: True
    test 1086 .repr: 2
    test 1087 .toRepr: number_ (2)
    test 1088 .units: number_
    test 1089 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 1090 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1091 number_: TypeError
    test 1092 number_: number ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1093 .named: Test
    test 1094 .named2: Number_ 'Test'
    test 1095 .str: 2
    test 1096 .toStr: 2
    test 1097 .repr: 2
    test 1098 .toRepr: Test (2)
    test 1099 .units: number_
    test 1100 .name: Test
    test 1101 ._name: Test
    test 1102 .str: 2
    test 1103 .repr: 2
    test 1104 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 24.11.06)
    test 1105 .classname: Precision_
    test 1106 isinstance: True
    test 1107 .name: precision_
    test 1108 .named: precision_
    test 1109 .named2: Precision_ 'precision_'
    test 1110 .str: 2
    test 1111 .toStr: 2
    test 1112 .std_repr: True
    test 1113 .repr: 2
    test 1114 .toRepr: precision_ (2)
    test 1115 .units: precision_
    test 1116 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 1117 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1118 precision_: TypeError
    test 1119 precision_: precision ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1120 .named: Test
    test 1121 .named2: Precision_ 'Test'
    test 1122 .str: 2
    test 1123 .toStr: 2
    test 1124 .repr: 2
    test 1125 .toRepr: Test (2)
    test 1126 .units: precision_
    test 1127 .name: Test
    test 1128 ._name: Test
    test 1129 .str: 2
    test 1130 .repr: 2
    test 1131 delattr: ''

    testing Zone(2,) (pygeodesy.units, 24.11.06)
    test 1132 .classname: Zone
    test 1133 isinstance: True
    test 1134 .name: zone
    test 1135 .named: zone
    test 1136 .named2: Zone 'zone'
    test 1137 .str: 2
    test 1138 .toStr: 2
    test 1139 .std_repr: True
    test 1140 .repr: 2
    test 1141 .toRepr: zone (2)
    test 1142 .units: zone
    test 1143 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 1144 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 1145 zone: TypeError
    test 1146 zone: zone ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1147 .named: Test
    test 1148 .named2: Zone 'Test'
    test 1149 .str: 2
    test 1150 .toStr: 2
    test 1151 .repr: 2
    test 1152 .toRepr: Test (2)
    test 1153 .units: zone
    test 1154 .name: Test
    test 1155 ._name: Test
    test 1156 .str: 2
    test 1157 .repr: 2
    test 1158 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 24.11.06)
    test 1159 .classname: Epoch
    test 1160 isinstance: True
    test 1161 .name: epoch
    test 1162 .named: epoch
    test 1163 .named2: Epoch 'epoch'
    test 1164 .str: 1901
    test 1165 .toStr: 1901
    test 1166 .std_repr: False
    test 1167 .repr: epoch (1901)
    test 1168 .toRepr: epoch (1901)
    test 1169 .units: epoch
    test 1170 epoch: epoch ('X'): could not convert string to float: 'X'
    test 1171 epoch: U ('X'): could not convert string to float: 'X'
    test 1172 epoch: TypeError
    test 1173 epoch: epoch ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 1174 .named: Test
    test 1175 .named2: Epoch 'Test'
    test 1176 .str: 1901
    test 1177 .toStr: 1901
    test 1178 .repr: Test (1901)
    test 1179 .toRepr: Test (1901)
    test 1180 .units: epoch
    test 1181 .name: Test
    test 1182 ._name: Test
    test 1183 .str: 1901
    test 1184 .repr: Test (1901)
    test 1185 delattr: ''

    testing(pygeodesy.units, 24.11.06)

    test 1186 Azimuth: 1.0

    test 1187 Bearing: 1.0
    test 1188 Bearing_: 0.01745

    test 1189 Lamd: 6.30
    test 1190 Phid: 6.30

    test 1191 FIx: 1.0  FAILED, KNOWN, expected 1
    test 1192 FIx: 1.5

    test 1193 Dash: -
    test 1194 Dash: -

    test 1195 Dash: '-'
    test 1196 Dash: Dash ('-')

    test 1197 Join_d: c-a-l-l
    test 1198 Join_d: c-a-l-l

    test 1199 Join_d: 'c-a-l-l'
    test 1200 Join_d: Join_d ('c-a-l-l')

    51 of 1200 testUnits.py tests (4.2%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 94.952 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.degDMS from .dms by testUps.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUps.py line 11
# lazily imported pygeodesy.RangeError from .errors by testUps.py line 11
# lazily imported pygeodesy.strs from .streprs by testUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUps.py line 11
# lazily imported pygeodesy.Ups from .ups by testUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUps.py line 195

    testing testUps.py 23.03.27 (module pygeodesy.ups 24.10.14) isLazy=3
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 UtmUps.toLatLon: 43.610051°N, 004.46308°E
    test 7 UtmUps.toLatLon: 43°36′36.18″N, 004°27′47.09″E
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 8 UtmUps.toMgrs: 60T UP 60176 38249
    test 9 toUps: lat ('43.684097°'): inside UTM range [-79.5, 83.5]
    test 10 UtmUps.toUtm: 60 N 360177 4838249
    test 11 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 12 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 13 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 15 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 16 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 17 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 18 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 19 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 20 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 21 latlon: 84.0°N, 084.0°E
    test 22 toUps: 00 N 2663075 1930308
    test 23 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 24 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 25 .scale0: 0.994000
    test 26 rescale0: 0.997261
    test 27 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 28 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 29 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 30 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 31 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 32 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 33 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 34 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 35 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 36 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 37 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 38 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 39 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 40 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 41 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 42 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 43 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 44 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 45 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 46 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 47 NGA-10.3-1: -64.9164123332 -135.0
    test 48 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 49 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 50 NGA-10.3-4: -70.0552944014 153.4349488229
    test 51 NGA-10.3-5: -64.9164123332 135.0
    test 52 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 53 NGA-10.3-7: -77.3120791908 -135.0
    test 54 NGA-10.3-8: -81.0106632645 180.0
    test 55 NGA-10.3-9: -77.3120791908 135.0
    test 56 NGA-10.3-10: -70.0552944014 116.5650511771
    test 57 NGA-10.3-11: -72.1263610163 -90.0
    test 58 NGA-10.3-12: -81.0106632645 -90.0
    test 59 NGA-10.3-13: -90.0 0.0
    test 60 NGA-10.3-14: -81.0106632645 90.0
    test 61 NGA-10.3-15: -72.1263610163 90.0
    test 62 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 63 NGA-10.3-17: -77.3120791908 -45.0
    test 64 NGA-10.3-18: -81.0106632645 0.0
    test 65 NGA-10.3-19: -77.3120791908 45.0
    test 66 NGA-10.3-20: -70.0552944014 63.4349488229
    test 67 NGA-10.3-21: -64.9164123332 -45.0
    test 68 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 69 NGA-10.3-23: -72.1263610163 0.0
    test 70 NGA-10.3-24: -70.0552944014 26.5650511771
    test 71 NGA-10.3-25: -64.9164123332 45.0
    test 72 toUps: 00 N 2000000 1288738
    test 73 toUtm: 02 N 611555 10703765
    test 74 toUtm: [Z:00Z, H:N, E:2000000, N:2000000]

    2 of 74 testUps.py tests (2.7%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 62.400 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUtily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testUtily.py line 11
# lazily imported pygeodesy.INF from .constants by testUtily.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testUtily.py line 11
# lazily imported pygeodesy.NINF from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI3_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.acre2ha from .utily by testUtily.py line 11
# lazily imported pygeodesy.acre2m2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.atan1 from .utily by testUtily.py line 11
# lazily imported pygeodesy.atan2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.chain2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.cot_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.cotd_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fathom2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.ft2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.furlong2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades400 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2grades from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2radians from .utily by testUtily.py line 11
# lazily imported pygeodesy.isPoints2 from .iters by testUtily.py line 11
# lazily imported pygeodesy.map1 from .basics by testUtily.py line 11
# lazily imported pygeodesy.m2chain from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2fathom from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2ft from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2furlong from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2toise from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2yard from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincostan3 from .utily by testUtily.py line 11
# lazily imported pygeodesy.tan_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.toise2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.yard2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtily.py line 11

    testing testUtily.py 23.10.21 (module pygeodesy.utily 24.10.12) isLazy=3

    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): 0.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): 0.0
    test 6 degrees90(-PI2): 0.0

    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0

    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0

    test 19 degrees2grades(90): 100.0
    test 20 degrees2grades(180): 200.0
    test 21 degrees2grades(360): 400.0
    test 22 degrees2grades(-90): -100.0
    test 23 degrees2grades(-180): -200.0
    test 24 degrees2grades(-360): -400.0

    test 25 grades400(PI_2): 100.0
    test 26 grades400(PI): 200.0
    test 27 grades400(PI2): 0.0
    test 28 grades400(-PI_2): 300.0
    test 29 grades400(-PI): 200.0
    test 30 grades400(-PI2): 0.0

    test 31 grades2degrees(100): 90.0
    test 32 grades2degrees(200): 180.0
    test 33 grades2degrees(400): 360.0
    test 34 grades2degrees(-100): -90.0
    test 35 grades2degrees(-200): -180.0
    test 36 grades2degrees(-400): -360.0

    test 37 grades2radians(100): 1.5707963267948966
    test 38 grades2radians(200): 3.141592653589793
    test 39 grades2radians(400): 6.283185307179586
    test 40 grades2radians(-100): -1.5707963267948966
    test 41 grades2radians(-200): -3.141592653589793
    test 42 grades2radians(-400): -6.283185307179586

    test 43 radiansPI_2(90): 1.5707963267948966
    test 44 radiansPI_2(180): 0.0
    test 45 radiansPI_2(360): 0.0
    test 46 radiansPI_2(-90): -1.5707963267948966
    test 47 radiansPI_2(-180): 0.0
    test 48 radiansPI_2(-360): 0.0

    test 49 radiansPI(90): 1.5707963267948966
    test 50 radiansPI(180): 3.141592653589793
    test 51 radiansPI(360): 0.0
    test 52 radiansPI(-90): -1.5707963267948966
    test 53 radiansPI(-180): -3.141592653589793
    test 54 radiansPI(-360): 0.0

    test 55 radiansPI2(90): 1.5707963267948966
    test 56 radiansPI2(180): 3.141592653589793
    test 57 radiansPI2(360): 0.0
    test 58 radiansPI2(-90): 4.71238898038469
    test 59 radiansPI2(-180): 3.141592653589793
    test 60 radiansPI2(-360): 0.0

    test 61 wrap90(90): 90.0
    test 62 wrap90(180): 0.0
    test 63 wrap90(360): 0.0
    test 64 wrap90(-90): -90.0
    test 65 wrap90(-180): 0.0
    test 66 wrap90(-360): 0.0

    test 67 wrap180(90): 90.0
    test 68 wrap180(180): 180.0
    test 69 wrap180(360): 0.0
    test 70 wrap180(-90): -90.0
    test 71 wrap180(-180): -180.0
    test 72 wrap180(-360): 0.0

    test 73 wrap360(90): 90.0
    test 74 wrap360(180): 180.0
    test 75 wrap360(360): 0.0
    test 76 wrap360(-90): 270.0
    test 77 wrap360(-180): 180.0
    test 78 wrap360(-360): 0.0

    test 79 wrapPI_2(PI_2): 1.5707963267948966
    test 80 wrapPI_2(PI): 0.0
    test 81 wrapPI_2(PI2): 0.0
    test 82 wrapPI_2(-PI_2): -1.5707963267948966
    test 83 wrapPI_2(-PI): 0.0
    test 84 wrapPI_2(-PI2): 0.0

    test 85 wrapPI(PI_2): 1.5707963267948966
    test 86 wrapPI(PI): 3.141592653589793
    test 87 wrapPI(PI2): 0.0
    test 88 wrapPI(-PI_2): -1.5707963267948966
    test 89 wrapPI(-PI): -3.141592653589793
    test 90 wrapPI(-PI2): 0.0

    test 91 wrapPI2(PI_2): 1.5707963267948966
    test 92 wrapPI2(PI): 3.141592653589793
    test 93 wrapPI2(PI2): 0.0
    test 94 wrapPI2(-PI_2): 4.71238898038469
    test 95 wrapPI2(-PI): 3.141592653589793
    test 96 wrapPI2(-PI2): 0.0

    test 97 unroll180: -160.0, -250.0
    test 98 unroll180: 200.0, 110.0

    test 99 unroll180: -160.0, -250.0
    test 100 unroll180: 920.0, 830.0

    test 101 unroll180: -160.0, -270.0
    test 102 unroll180: 200.0, 90.0

    test 103 unroll180: -160.0, -990.0
    test 104 unroll180: 920.0, 90.0

    test 105 atan1: 0.0
    test 106 atan1: 0.0

    test 107 cot_ : -0.345499391106
    test 108 cotd_: -0.345499391106

    test 109 sincos2: 3.885780586188048e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 110 sincos2d: 9.992007221626409e-16  FAILED, KNOWN, expected 1.7763568394002505e-15

    test 111 Matan2d : 0  FAILED, KNOWN, expected 2.220446049250313e-16
    test 112 Msincosd: 8.881784197001252e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 113 sincos*d: 1.6653345369377348e-16  FAILED, KNOWN, expected 1.7763568394002505e-15

    test 114 iFt2m: 187441
    test 115 iFt2m: 757050
    test 116 sFt2m: 187441
    test 117 sFt2m: 757050

    test 118 m2iFt: 614963.91
    test 119 m2iFt: 2483759.84
    test 120 m2sFt: 614962.68
    test 121 m2sFt: 2483754.88

    test 122 acre2ha: 0.404686
    test 123 acre2m2: 4046.856422
    test 124 chain2m: 20.116800
    test 125 fathom2m: 1.828800
    test 126 furlong2m: 201.168000
    test 127 toise2m: 1.949044
    test 128 yard2m: 0.914400
    test 129 m2chain: 0.049710
    test 130 m2fathom: 0.546807
    test 131 m2furlong: 0.004971
    test 132 m2toise: 0.513072
    test 133 m2yard: 1.093613
# lazily imported pygeodesy.datums by utily.py line 180

    test 134 degrees2m: 10007557.1761
    test 135 degrees2m: 8666798.7443
    test 136 m2degrees: 90.0

    test 137 degrees2m: 20015114.3522
    test 138 degrees2m: 19987684.3336
    test 139 m2degrees: 180.0

    test 140 m2degrees2m(45, lat=0): 45.00
    test 141 m2degrees2m(45, lat=7): 45.00
    test 142 m2degrees2m(45, lat=14): 45.00
    test 143 m2degrees2m(45, lat=21): 45.00
    test 144 m2degrees2m(45, lat=28): 45.00
    test 145 m2degrees2m(45, lat=35): 45.00
    test 146 m2degrees2m(45, lat=42): 45.00
    test 147 m2degrees2m(45, lat=49): 45.00
    test 148 m2degrees2m(45, lat=56): 45.00
    test 149 m2degrees2m(45, lat=63): 45.00
    test 150 m2degrees2m(45, lat=70): 45.00
    test 151 m2degrees2m(45, lat=77): 45.00
    test 152 m2degrees2m(45, lat=84): 45.00

    test 153 isPoints2: False

    test 154 tan_2_semi: PI[1] edge (3.141592): semi-circular
    test 155 sincostan3(+0.0000): (0.0, 1.0, 0.0)
    test 156 sincostan3(-0.0000): (0.0, 1.0, 0.0)
    test 157 sincostan3(+1.5708): (1.0, 0.0, inf)
    test 158 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 159 sincostan3(+3.1416): (0.0, -1.0, -0.0)
    test 160 sincostan3(-3.1416): (-0.0, -1.0, 0.0)
    test 161 sincostan3(+4.7124): (-1.0, 0.0, -inf)  FAILED, KNOWN, expected (-1.0, -0.0, inf)
    test 162 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 163 sincostan3(+6.2832): (0.0, 1.0, 0.0)  FAILED, KNOWN, expected (-0.0, 1.0, -0.0)
    test 164 sincostan3(-6.2832): (-0.0, 1.0, -0.0)  FAILED, KNOWN, expected (0.0, 1.0, 0.0)

    8 of 164 testUtily.py tests (4.9%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 12.383 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testUtm.py line 11
# lazily imported pygeodesy.EPS from .constants by testUtm.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testUtm.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUtm.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtm.py line 11
# lazily imported pygeodesy.parseUTM5 from .utm by testUtm.py line 11
# lazily imported pygeodesy.toUtm8 from .utm by testUtm.py line 11
# lazily imported pygeodesy.Utm from .utm by testUtm.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtm.py line 178

    testing testUtm.py 22.07.25 (module pygeodesy.utm 24.11.07) isLazy=3
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
# lazily imported pygeodesy.etm by utm.py line 248
    test 14 toEtm: 13 S 622698 8516965
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 15 toMgrs1: 13L FF 22697 16965
    test 16 toMgrs2: 31U DQ 48251 11932
    test 17 toUtm14: 14 S -27436 8512042
    test 18 Utm8: 18 N 516620 4574500
    test 19 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 20 Utm8.toLatLon: 41.321801N, 074.801413W
    test 21 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 22 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 23 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 24 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 25 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 26 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 27 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 28 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 29 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 30 toUtm(80.5434°S, 170.654°W): lat ('-80.5434°'): outside UTM range [-80, 84)
    test 31 toUtm(90.0°N, 177.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 32 toUtm(90.0°S, 177.0°W): lat ('-90.0°'): outside UTM range [-80, 84)
    test 33 toUtm(90.0°N, 003.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 34 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 35 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 36 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454°'): outside UTM range [-80, 84)
    test 37 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 38 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 39 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 40 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 41 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 42 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 43 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 44 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 45 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 46 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 47 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 48 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 49 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 50 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 51 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 52 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 53 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 54 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 55 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 56 toUtm(84.0°N, 005.00601°W): lat ('84.0°'): outside UTM range [-80, 84)
    test 57 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 58 Utm9: 55 S 321441 5810117
    test 59 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 60 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 61 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 68 Utm10: 31 N 400000 5000000
    test 69 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 70 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 71 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 78 Utm111: 37 N 1399093 8314607
    test 79 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 80 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 81 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459
    test 88 CV#86: [Z:01, H:N, E:100000, N:0, C:n/a, S:n/a]
    test 89 CV#86: 00.0°N, 179.407673°E
    test 90 CV#86: [Z:60, H:N, E:767993, N:0, C:+0.0″, S:1.000489]  FAILED, KNOWN, expected [Z:01, H:N, E:100000, N:0, ...]
    test 91 #63: 32 N 280000 5653000
    test 92 toMgrs: 32U KB 80000 53000
    test 93 toLatLon: (50.986484, 5.865326, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.436605, 1.000194)
    test 94 band: U
    test 95 band: band ('?'): not 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W' or 'X'
    test 96 datum: Datum(name='_Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.Identity)  FAILED, KNOWN, expected same
    test 97 repr: [Z:32U, H:N, E:280000, N:5653000]
    test 98 E.N.: (280000.0, 5653000.0)

    2 of 98 testUtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 150.936 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtm8 from .utm by testUtmTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmTMcoords.py line 17

    testing testUtmTMcoords.py 24.03.22 (module pygeodesy.utm 24.11.07) isLazy=3
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.gamma: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.gamma: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.gamma: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.gamma: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.gamma: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.gamma: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.gamma: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.gamma: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.gamma: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.gamma: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.gamma: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105

    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.gamma: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179

    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.gamma: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.gamma: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395

    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.gamma: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.gamma: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.gamma: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.gamma: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.gamma: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.gamma: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507

    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.gamma: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.gamma: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.gamma: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.gamma: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.gamma: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.gamma: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.gamma: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.gamma: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.gamma: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.gamma: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.gamma: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.gamma: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.gamma: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824

    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.gamma: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.gamma: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.gamma: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.gamma: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.gamma: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.gamma: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.gamma: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.gamma: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.gamma: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.gamma: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.gamma: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948

    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.gamma: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823

    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.gamma: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.gamma: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350

    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.gamma: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.gamma: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.gamma: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.gamma: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.gamma: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.gamma: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.gamma: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.gamma: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.gamma: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.gamma: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918

    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.gamma: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.gamma: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.gamma: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.gamma: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804

    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.gamma: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.gamma: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541

    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.gamma: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.gamma: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.gamma: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153

    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.gamma: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.gamma: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.gamma: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.gamma: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.gamma: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.gamma: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.gamma: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.gamma: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.gamma: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.gamma: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.gamma: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687

    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.gamma: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.gamma: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.gamma: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.gamma: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.gamma: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.gamma: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.gamma: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.gamma: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.gamma: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.gamma: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.gamma: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.gamma: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657

    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.gamma: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.gamma: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.gamma: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.gamma: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.gamma: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.gamma: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.gamma: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.gamma: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.gamma: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.gamma: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.gamma: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.gamma: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.gamma: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391

    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.gamma: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.gamma: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.gamma: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.gamma: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.gamma: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.gamma: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.gamma: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.gamma: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.gamma: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.gamma: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.gamma: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.gamma: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.gamma: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.gamma: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.gamma: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.gamma: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.gamma: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.gamma: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.gamma: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.gamma: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.gamma: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.gamma: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.gamma: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176

    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.gamma: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904

    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.gamma: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.gamma: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.gamma: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.gamma: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.gamma: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.gamma: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.gamma: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.gamma: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871

    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.gamma: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255

    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.gamma: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.gamma: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.gamma: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798

    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.gamma: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056

    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.gamma: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.gamma: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593

    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.gamma: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.gamma: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365

    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.gamma: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.gamma: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.gamma: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.gamma: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.gamma: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.gamma: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.gamma: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.gamma: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.gamma: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.gamma: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.gamma: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.gamma: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.gamma: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.gamma: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.gamma: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.gamma: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.gamma: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.gamma: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.gamma: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.gamma: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.gamma: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.gamma: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.gamma: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.gamma: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.gamma: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.gamma: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.gamma: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.gamma: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.gamma: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523

    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.gamma: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.gamma: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.gamma: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.gamma: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.gamma: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.gamma: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.gamma: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.gamma: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.gamma: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.gamma: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336

    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.gamma: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.gamma: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.gamma: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.gamma: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322

    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.gamma: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.gamma: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.gamma: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118

    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.gamma: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.gamma: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.gamma: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.gamma: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.gamma: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214

    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.gamma: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.gamma: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351

    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.gamma: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.gamma: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.gamma: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.gamma: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.gamma: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.gamma: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.gamma: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.gamma: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.gamma: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.gamma: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.gamma: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513

    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.gamma: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.gamma: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.gamma: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.gamma: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.gamma: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.gamma: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996

    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.gamma: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.gamma: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.gamma: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.gamma: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.gamma: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.gamma: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.061 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUtmUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_DMS from .dms by testUtmUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUtmUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.utmupsValidateOK from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtmUps.py line 200

    testing testUtmUps.py 23.03.27 (module pygeodesy.utmups 24.06.11) isLazy=3
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps.ValidateOK: True
    test 13 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 14 toUtmUps8ID1.ValidateOK: True
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 17 toUtmUps8ID2.ValidateOK: True
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 20 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 21 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 22 toUtmUps8ID3.ValidateOK: True
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 UtmUps.toLatLonID4.ValidateOK: True
    test 25 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 26 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 27 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 28 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 29 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 30 UtmUps.ValidateOK: True
    test 31 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 32 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 33 latlon1: 61.2°N, 149.9°W
    test 34 toUtmUps8: 06 N 344174 6788521
    test 35 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 36 toUtmUps8.ValidateOK: True
# lazily imported pygeodesy.mgrs by utmupsBase.py line 431
    test 37 toMgrs: 06V UN 44173 88521
    test 38 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 39 toUtmUps8: 25 N 504164 9286466
    test 40 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 41 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 42 toUtmUps8.ValidateOK: True
    test 43 toMgrs: 25X EN 04163 86465
    test 44 latlon3: 33.33°N, 044.44°E
    test 45 toUtmUps8: 38 N 447882 3688012
    test 46 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 47 toUtmUps8.ValidateOK: True
    test 48 toMgrs: 38S MB 47882 88011
    test 49 latlon4: 79.0°S, 079.0°W
    test 50 toUtmUps8: 17 S 542594 1229296
    test 51 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 52 toUtmUps8.ValidateOK: True
    test 53 toMgrs: 17C NN 42594 29296
    test 54 latlon5: 84.0°N, 084.0°E
    test 55 toUtmUps8: 00 N 2663075 1930308
    test 56 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 57 toUtmUps8.ValidateOK: True
    test 58 latlon6: 13.4125°N, 103.8667°E
    test 59 toUtmUps8: 48 N 377302 1483035
    test 60 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 61 toUtmUps8.ValidateOK: True
    test 62 toMgrs: 48P UV 77302 83034
    test 63 latlon7: 13.4125°S, 103.8667°W
    test 64 LL.toUtmUps: 13 S 622698 8516965
    test 65 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 66 LL.toUtmUps.ValidateOK: True
    test 67 toMgrs: 13L FF 22697 16965
    test 68 latlon8: 43.684097°N, 175.265195°E
    test 69 LL.toUtmUps: 60 N 360177 4838249
    test 70 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 71 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 72 LL.toUtmUps.ValidateOK: True
    test 73 toMgrs: 60T UP 60176 38249
    test 74 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 75 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 76 latlon9: 41.321801°N, 074.801413°W
    test 77 LL.toUtmUps: 18 N 516620 4574500
    test 78 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 79 LL.toUtmUps.ValidateOK: True
    test 80 toMgrs: 18T WL 16619 74500
    test 81 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 82 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 83 parseUTMUPS5: 18 N 516620 4574500
    test 84 parseUTMUPS5.ValidateOK: True
    test 85 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 86 UtmUps: 00A S 321441 5810117
    test 87 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000, 3200000]  FAILED, KNOWN, expected True
    test 88 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 89 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 90 LL.toUtmUps: 27 S 316807 4044745
    test 91 LL.toUtmUps.ValidateOK: True
    test 92 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 93 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 94 UtmUps: 00Z N 400000 5000000
    test 95 UtmUps.ValidateOK: True
    test 96 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 97 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 97 testUtmUps.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 47.129 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testUtmUpsTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Ups from .ups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmUpsTMcoords.py line 17

    testing testUtmUpsTMcoords.py 24.03.22 (module pygeodesy.utmups 24.06.11) isLazy=3
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.gamma: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.gamma: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.gamma: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.gamma: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.gamma: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.gamma: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.gamma: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.gamma: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.gamma: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.gamma: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.gamma: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105

    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.gamma: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179

    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.gamma: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.gamma: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395

    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.gamma: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.gamma: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.gamma: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.gamma: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.gamma: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.gamma: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507

    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.gamma: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.gamma: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.gamma: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.gamma: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.gamma: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.gamma: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.gamma: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.gamma: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.gamma: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.gamma: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.gamma: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.gamma: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.gamma: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824

    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.gamma: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.gamma: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.gamma: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.gamma: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.gamma: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.gamma: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.gamma: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.gamma: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.gamma: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.gamma: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.gamma: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948

    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.gamma: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823

    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.gamma: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.gamma: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350

    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.gamma: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.gamma: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.gamma: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.gamma: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.gamma: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.gamma: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.gamma: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.gamma: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.gamma: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.gamma: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918

    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.gamma: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.gamma: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.gamma: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.gamma: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804

    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.gamma: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.gamma: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541

    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.gamma: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.gamma: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.gamma: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153

    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.gamma: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.gamma: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.gamma: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.gamma: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.gamma: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.gamma: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.gamma: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.gamma: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.gamma: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.gamma: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.gamma: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687

    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.gamma: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.gamma: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.gamma: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.gamma: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.gamma: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.gamma: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.gamma: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.gamma: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.gamma: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.gamma: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.gamma: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.gamma: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657

    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.gamma: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.gamma: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.gamma: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.gamma: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.gamma: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.gamma: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.gamma: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.gamma: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.gamma: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.gamma: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.gamma: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.gamma: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.gamma: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391

    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.gamma: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.gamma: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.gamma: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.gamma: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.gamma: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.gamma: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.gamma: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.gamma: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.gamma: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.gamma: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.gamma: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.gamma: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.gamma: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.gamma: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.gamma: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.gamma: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.gamma: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.gamma: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.gamma: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.gamma: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.gamma: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.gamma: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.gamma: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176

    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.gamma: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904

    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.gamma: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.gamma: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.gamma: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.gamma: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.gamma: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.gamma: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.gamma: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.gamma: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871

    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.gamma: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255

    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.gamma: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.gamma: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.gamma: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798

    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.gamma: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056

    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.gamma: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.gamma: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593

    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.gamma: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.gamma: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365

    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.gamma: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.gamma: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.gamma: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.gamma: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.gamma: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.gamma: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.gamma: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.gamma: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.gamma: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.gamma: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.gamma: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.gamma: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.gamma: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.gamma: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.gamma: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.gamma: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.gamma: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.gamma: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.gamma: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.gamma: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.gamma: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.gamma: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.gamma: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.gamma: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.gamma: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.gamma: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.gamma: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.gamma: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.gamma: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523

    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.gamma: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.gamma: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.gamma: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.gamma: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.gamma: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.gamma: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.gamma: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.gamma: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.gamma: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.gamma: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336

    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.gamma: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.gamma: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.gamma: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.gamma: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322

    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.gamma: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.gamma: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.gamma: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118

    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.gamma: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.gamma: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.gamma: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.gamma: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.gamma: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214

    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.gamma: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.gamma: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351

    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.gamma: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.gamma: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.gamma: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.gamma: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.gamma: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.gamma: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.gamma: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.gamma: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.gamma: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.gamma: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.gamma: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513

    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.gamma: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.gamma: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.gamma: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.gamma: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.gamma: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.gamma: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996

    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.gamma: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.gamma: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.gamma: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.gamma: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.gamma: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.gamma: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 1.081 sec

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testVectorial.py
./pygeodesy/ellipsoidalBase.py:432: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  _ = self.datum.ellipsoid.geodesic
./pygeodesy/azimuthal.py:634: DeprecationWarning: Property_RO L{geodesic<pygeodesy.ellipsoids.Ellipsoid.geodesic>} has been DEPRECATED, use property C{geodesicw}.
  return self.datum.ellipsoid.geodesic
./pygeodesy/ellipsoidalNvector.py:244: DeprecationWarning: Property_RO L{ned<pygeodesy.ltpTuples.Ned.ned>} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned[:3]  # XXX Ned4Tuple.to3Tuple
./pygeodesy/deprecated/classes.py:32: DeprecationWarning: class L{Ned3Tuple<pygeodesy.deprecated.classes.Ned3Tuple>} has been DEPRECATED, use class L{Ned4Tuple}, ignoring item C{ltp}.
  deprecated_class(cls)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.F_D from .dms by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.fstr from .streprs by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.Datums from .datums by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalExact by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalKarney by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalNvector by testVectorial.py line 533
# lazily imported pygeodesy.ellipsoidalVincenty by testVectorial.py line 533
# lazily imported pygeodesy.sphericalTrigonometry by testVectorial.py line 533

    testing testVectorial.py 24.05.10 isLazy=3

    testVectorial(pygeodesy.ellipsoidalNvector, 24.10.19)

    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 apply: (0.5, 0.5, 0.707)
    test 12 init: (0.5, 0.5, 0.707)
    test 13 i***: (0.5, 0.5, 0.707)
    test 14 abs: 0.99992449715
    test 15 sumOf: (52.70504, 0.61904, 0.70705)
    test 16 sumOf: Nv
    test 17 sumOf: sumOf
    test 18 length: 52.7134151513
    test 19 sizeof: 217  FAILED, KNOWN, expected 128
    test 20 length: 52.2051356286
    test 21 sizeof: 320  FAILED, KNOWN, expected 247
    test 22 copy: True
    test 23 length: 52.2051356286
    test 24 sizeof: 320
# lazily imported pygeodesy.booleans by points.py line 1368
    test 25 isenclosedBy: True
    test 26 isenclosedBy*: True
    test 27 isenclosedBy: True
    test 28 isenclosedBy*: True
# lazily imported pygeodesy.geodesicw by ellipsoids.py line 1054
# lazily imported pygeodesy.azimuthal by ellipsoidalBase.py line 433

    test 29 nearestOn: 51.0°N, 001.0°E
    test 30 nearestOn: 50.987°N, 000.298°W
    test 31 nearestOn: 51.0°N, 002.0°E
    test 32 nearestOn: 50.995°N, 002.655°E
    test 33 nearestOn: 51.0°N, 001.9°E
    test 34 nearestOn: True
    test 35 distanceTo: 42.826
    test 36 nearestOn: 51.0°N, 002.0°E
    test 37 nearestOn: True
    test 38 nearestOn: 00.0°N, 000.0°E
    test 39 nearestOn: True
    test 40 nearestOn: 00.0°N, 020.0°E
    test 41 nearestOn: True
    test 42 nearestOn: 02.0°N, 002.0°E
    test 43 nearestOn: 02.0°N, 002.0°E
# lazily imported pygeodesy.ecef by ellipsoidalNvector.py line 521

    test 44 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 45 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 46 BasseC: 47.3038°N, 002.5721°W
    test 47 BasseH: 47.311067°N, 002.528617°W
    test 48 triangulate: 47.323667°N, 002.568501°W
    test 49 triangulate: True

    test 50 trilaterate: 37.419078°N, 121.960579°W
    test 51 trilaterate: True
    test 52 trilaterate: 08.068912°S, 034.888699°W
    test 53 trilaterate: True
    test 54 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 55 trilaterate: True
    test 56 trilaterate: 42.67456065°N, 002.49539502°E
    test 57 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 367
# lazily imported pygeodesy.deprecated by ltpTuples.py line 537

    test 58 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 24.10.19)
    test 59 sumOf: Nvector
    test 60 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 61 ecef.lat, .lon: 44.995674, 45.0
    test 62 ecef.height: -0.0
    test 63 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 64 .isEllipsoidal: True
    test 65 .isSpherical: False
    test 66 .latlon: (44.995674, 45.0)
    test 67 .philam: (0.785323, 0.785398)
    test 68 .latlonheight: (44.995674, 45.0, 0.0)
    test 69 .philamheight: (0.785323, 0.785398, 0.0)
    test 70 parse: (0.5, 0.5, 0.707)
    test 71 cmp: 0
    test 72 eq: True
    test 73 ge: True
    test 74 gt: False
    test 75 le: True
    test 76 lt: False
    test 77 ne: False
    test 78 *: (1.0, 1.0, 1.414)
    test 79 +: (1.0, 1.0, 1.414)
    test 80 /: (0.5, 0.5, 0.707)
    test 81 -: (0.5, 0.5, 0.707)
    test 82 @: (0.0, 0.0, 0.0)
    test 83 @: (0.0, 0.0, 0.0)
    test 84 rotate: (0.26268, 0.26268, 0.37143)
    test 85 crosserrors: True
    test 86 0: divisor (0): float division by zero
    test 87 intersections2: (500.0, 0.0, 0.0)
    test 88 nearestOn: (0.0, 0.0, 0.0)
    test 89 nearestOn: True
    test 90 nearestOn: (100.0, 100.0, 100.0)
    test 91 nearestOn: True
    test 92 iscolinearWith: False
    test 93 iscolinearWith: True
    test 94 nearestOn: (0.0, 0.0, 0.0)
    test 95 nearestOn: True
    test 96 nearestOn: (100.0, 100.0, 100.0)
    test 97 nearestOn: True
    test 98 iscolinearWith: False
    test 99 iscolinearWith: True

    testVectorial(pygeodesy.sphericalNvector, 24.11.07)
    test 100 crossTrackDistanceTo: -305.67
    test 101 crossTrackDistanceTo: -307.55

    test 102 toLatLon: 44.995674°N, 045.0°E
    test 103 toNvector: (0.50004, 0.50004, 0.70705)
    test 104 isequalTo: False
    test 105 isequalTo: True
    test 106 length: 0.99992449715
    test 107 euclid: 0.99995577
    test 108 length: 1.00
    test 109 euclid: 1.0000
    test 110 meanOf: 44.995674°N, 045.0°E
    test 111 meanOf: LatLon
    test 112 apply: (0.5, 0.5, 0.707)
    test 113 init: (0.5, 0.5, 0.707)
    test 114 i***: (0.5, 0.5, 0.707)
    test 115 abs: 0.99992449715
    test 116 sumOf: (52.70504, 0.61904, 0.70705)
    test 117 sumOf: Nv
    test 118 sumOf: sumOf
    test 119 length: 52.7134151513
    test 120 sizeof: 217  FAILED, KNOWN, expected 128
    test 121 length: 52.2051356286
    test 122 sizeof: 320  FAILED, KNOWN, expected 247
    test 123 copy: True
    test 124 length: 52.2051356286
    test 125 sizeof: 320

    test 126 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 127 toLatLon: 44.995674°N, 045.0°E
    test 128 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 129 intersection: 02.499372°N, 002.5°E

    test 130 intersection1: 02.499372°N, 002.5°E
    test 131 intersection2: 02.499372°S, 177.5°W

    test 132 isenclosedBy: True
    test 133 isenclosedBy*: True
    test 134 isenclosedBy: True
    test 135 isenclosedBy*: True

    test 136 iswithin: False
    test 137 iswithin: True

    test 138 nearestOn: 51.0°N, 001.0°E
    test 139 nearestOn: 50.987°N, 000.298°W
    test 140 nearestOn: 51.0°N, 002.0°E
    test 141 nearestOn: 50.995°N, 002.655°E
    test 142 nearestOn: 51.0°N, 001.9°E
    test 143 nearestOn: True
    test 144 distanceTo: 42.712
    test 145 nearestOn: 51.0°N, 002.0°E
    test 146 nearestOn: True
    test 147 nearestOn: 00.0°N, 000.0°E
    test 148 nearestOn: True
    test 149 nearestOn: 00.0°N, 020.0°E
    test 150 nearestOn: True
    test 151 nearestOn: 02.0°N, 002.0°E
    test 152 nearestOn: 02.0°N, 002.0°E

    test 153 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 154 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 155 BasseC: 47.3038°N, 002.5721°W
    test 156 BasseH: 47.311067°N, 002.528617°W
    test 157 triangulate: 47.323667°N, 002.568501°W
    test 158 triangulate: True

    test 159 trilaterate: 37.419078°N, 121.960579°W
    test 160 trilaterate: True
    test 161 trilaterate: 08.068912°S, 034.888699°W
    test 162 trilaterate: True
    test 163 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 164 trilaterate: True
    test 165 trilaterate: 42.67456065°N, 002.49539502°E
    test 166 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, wrap=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 24.11.07)
    test 167 sumOf: Nvector
    test 168 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 169 ecef.lat, .lon: 44.995674, 45.0
    test 170 ecef.height: -0.0
    test 171 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 172 .isEllipsoidal: False
    test 173 .isSpherical: True
    test 174 .latlon: (44.995674, 45.0)
    test 175 .philam: (0.785323, 0.785398)
    test 176 .latlonheight: (44.995674, 45.0, 0.0)
    test 177 .philamheight: (0.785323, 0.785398, 0.0)
    test 178 parse: (0.5, 0.5, 0.707)
    test 179 cmp: 0
    test 180 eq: True
    test 181 ge: True
    test 182 gt: False
    test 183 le: True
    test 184 lt: False
    test 185 ne: False
    test 186 *: (1.0, 1.0, 1.414)
    test 187 +: (1.0, 1.0, 1.414)
    test 188 /: (0.5, 0.5, 0.707)
    test 189 -: (0.5, 0.5, 0.707)
    test 190 @: (0.0, 0.0, 0.0)
    test 191 @: (0.0, 0.0, 0.0)
    test 192 rotate: (0.26268, 0.26268, 0.37143)
    test 193 crosserrors: True
    test 194 0: divisor (0): float division by zero
    test 195 intersections2: (500.0, 0.0, 0.0)
    test 196 nearestOn: (0.0, 0.0, 0.0)
    test 197 nearestOn: True
    test 198 nearestOn: (100.0, 100.0, 100.0)
    test 199 nearestOn: True
    test 200 iscolinearWith: False
    test 201 iscolinearWith: True
    test 202 nearestOn: (0.0, 0.0, 0.0)
    test 203 nearestOn: True
    test 204 nearestOn: (100.0, 100.0, 100.0)
    test 205 nearestOn: True
    test 206 iscolinearWith: False
    test 207 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 24.10.12)
    test 208 sumOf: Vector4Tuple
    test 209 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 210 ecef.lat, .lon: 44.995674, 45.0
    test 211 ecef.height: -0.0
    test 212 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 213 .isEllipsoidal: False
    test 214 .isSpherical: True
    test 215 .latlon: (44.995674, 45.0)
    test 216 .philam: (0.785323, 0.785398)
    test 217 .latlonheight: (44.995674, 45.0, 0.0)
    test 218 .philamheight: (0.785323, 0.785398, 0.0)
    test 219 parse: (0.5, 0.5, 0.707)
    test 220 cmp: 0
    test 221 eq: True
    test 222 ge: True
    test 223 gt: False
    test 224 le: True
    test 225 lt: False
    test 226 ne: False
    test 227 *: (1.0, 1.0, 1.414)
    test 228 +: (1.0, 1.0, 1.414)
    test 229 /: (0.5, 0.5, 0.707)
    test 230 -: (0.5, 0.5, 0.707)
    test 231 @: (0.0, 0.0, 0.0)
    test 232 @: (0.0, 0.0, 0.0)
    test 233 rotate: (0.26268, 0.26268, 0.37143)
    test 234 crosserrors: True
    test 235 0: divisor (0): float division by zero
    test 236 intersections2: (500.0, 0.0, 0.0)
    test 237 nearestOn: (0.0, 0.0, 0.0)
    test 238 nearestOn: True
    test 239 nearestOn: (100.0, 100.0, 100.0)
    test 240 nearestOn: True
    test 241 iscolinearWith: False
    test 242 iscolinearWith: True
    test 243 nearestOn: (0.0, 0.0, 0.0)
    test 244 nearestOn: True
    test 245 nearestOn: (100.0, 100.0, 100.0)
    test 246 nearestOn: True
    test 247 iscolinearWith: False
    test 248 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 24.10.12)
    test 249 sumOf: Vector4Tuple
    test 250 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 251 ecef.lat, .lon: 44.995674, 45.0
    test 252 ecef.height: -0.0
    test 253 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 254 .isEllipsoidal: True
    test 255 .isSpherical: False
    test 256 .latlon: (44.995674, 45.0)
    test 257 .philam: (0.785323, 0.785398)
    test 258 .latlonheight: (44.995674, 45.0, 0.0)
    test 259 .philamheight: (0.785323, 0.785398, 0.0)
    test 260 parse: (0.5, 0.5, 0.707)
    test 261 cmp: 0
    test 262 eq: True
    test 263 ge: True
    test 264 gt: False
    test 265 le: True
    test 266 lt: False
    test 267 ne: False
    test 268 *: (1.0, 1.0, 1.414)
    test 269 +: (1.0, 1.0, 1.414)
    test 270 /: (0.5, 0.5, 0.707)
    test 271 -: (0.5, 0.5, 0.707)
    test 272 @: (0.0, 0.0, 0.0)
    test 273 @: (0.0, 0.0, 0.0)
    test 274 rotate: (0.26268, 0.26268, 0.37143)
    test 275 crosserrors: True
    test 276 0: divisor (0): float division by zero
    test 277 intersections2: (500.0, 0.0, 0.0)
    test 278 nearestOn: (0.0, 0.0, 0.0)
    test 279 nearestOn: True
    test 280 nearestOn: (100.0, 100.0, 100.0)
    test 281 nearestOn: True
    test 282 iscolinearWith: False
    test 283 iscolinearWith: True
    test 284 nearestOn: (0.0, 0.0, 0.0)
    test 285 nearestOn: True
    test 286 nearestOn: (100.0, 100.0, 100.0)
    test 287 nearestOn: True
    test 288 iscolinearWith: False
    test 289 iscolinearWith: True

    testCartesian(pygeodesy.sphericalNvector, 24.11.07)

    14 tests skipped (14): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.sphericalTrigonometry, 24.11.07)

    14 tests skipped (28): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalNvector, 24.10.19)

    14 tests skipped (42): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalVincenty, 24.10.12)

    14 tests skipped (56): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalKarney, 24.08.13)

    14 tests skipped (70): No module named 'numpy': required by vector2d._numpy

    testCartesian(pygeodesy.ellipsoidalExact, 24.11.06)

    14 tests skipped (84): No module named 'numpy': required by vector2d._numpy

    testCartesianBase(pygeodesy.cartesianBase, 24.11.06)

    14 tests skipped (98): No module named 'numpy': required by vector2d._numpy

    testNvectorBase(pygeodesy.nvectorBase, 24.10.12)

    14 tests skipped (112): No module named 'numpy': required by vector2d._numpy

    testVector3d(pygeodesy.vector2d, 24.11.07)

    14 tests skipped (126): No module named 'numpy': required by vector2d._numpy

    testTrilaterate2d2(pygeodesy.vector2d, 24.11.07)
    test 290 trilaterate2d2: (2.0, 3.0)
    test 291 trilaterate2d2: delta (6.39335377062e-06), radius1 (1.0), distance (1.00000639335) and trilaterate2d2(x=1.999994, y=3.000006): exceeds eps (2.22045e-16)
    test 292 trilaterate2d2: (-500.0, 250.0)
    test 293 meeus2: 2.236, 3.0, 2.0, 0.0
    test 294 meeus2: (3.0, 2.0, 0)
    test 295 circum3: 2.2361
    test 296 circum3: (3.0, 2.0, 0)
    test 297 circum3: None

    7 tests skipped (133): No module named 'numpy': required by vector2d._numpy

    testTrilaterate3d2(pygeodesy.vector2d, 24.11.07)

    18 tests skipped (151): No module named 'numpy': required by vector2d._numpy

    testIntersection3d3(pygeodesy.vector3d, 24.11.06)
    test 298 (30, 17): (Vector3d(30.30584, 16.75258, 0.0), 0, 0)
    test 299 (-1,  3): (Vector3d(-1.0429, 2.92225, 0.0), -1, -2)
    test 300 (65, 32): (Vector3d(64.86667, 32.0, 0.0), 1, -2)
    test 301 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 302 (49, 25): (Vector3d(49.0, 25.0, 0.0), 0, 0)

    test 303 at 0: (0.0, 50.0, 0.0)
    test 304 at 3: (2.6168, 49.93148, 0.0)
    test 305 at 6: (5.22642, 49.72609, 0.0)
    test 306 at 9: (7.82172, 49.38442, 0.0)
    test 307 at 12: (10.39558, 48.90738, 0.0)
    test 308 at 15: (12.94095, 48.29629, 0.0)
    test 309 at 18: (15.45085, 47.55283, 0.0)
    test 310 at 21: (17.9184, 46.67902, 0.0)
    test 311 at 24: (20.33683, 45.67727, 0.0)
    test 312 at 27: (22.69952, 44.55033, 0.0)
    test 313 at 30: (25.0, 43.30127, 0.0)
    test 314 at 33: (27.23195, 41.93353, 0.0)
    test 315 at 36: (29.38926, 40.45085, 0.0)
    test 316 at 39: (31.46602, 38.8573, 0.0)
    test 317 at 42: (33.45653, 37.15724, 0.0)
    test 318 at 45: (35.35534, 35.35534, 0.0)
    test 319 at 48: (37.15724, 33.45653, 0.0)
    test 320 at 51: (38.8573, 31.46602, 0.0)
    test 321 at 54: (40.45085, 29.38926, 0.0)
    test 322 at 57: (41.93353, 27.23195, 0.0)
    test 323 at 60: (43.30127, 25.0, 0.0)
    test 324 at 63: (44.55033, 22.69952, 0.0)
    test 325 at 66: (45.67727, 20.33683, 0.0)
    test 326 at 69: (46.67902, 17.9184, 0.0)
    test 327 at 72: (47.55283, 15.45085, 0.0)
    test 328 at 75: (48.29629, 12.94095, 0.0)
    test 329 at 78: (48.90738, 10.39558, 0.0)
    test 330 at 81: (49.38442, 7.82172, 0.0)
    test 331 at 84: (49.72609, 5.22642, 0.0)
    test 332 at 87: (49.93148, 2.6168, 0.0)
    test 333 at 90: (50.0, 0.0, 0.0)
    test 334 at 93: (49.93148, -2.6168, 0.0)
    test 335 at 96: (49.72609, -5.22642, 0.0)
    test 336 at 99: (49.38442, -7.82172, 0.0)
    test 337 at 102: (48.90738, -10.39558, 0.0)
    test 338 at 105: (48.29629, -12.94095, 0.0)
    test 339 at 108: (47.55283, -15.45085, 0.0)
    test 340 at 111: (46.67902, -17.9184, 0.0)
    test 341 at 114: (45.67727, -20.33683, 0.0)
    test 342 at 117: (44.55033, -22.69952, 0.0)
    test 343 at 120: (43.30127, -25.0, 0.0)
    test 344 at 123: (41.93353, -27.23195, 0.0)
    test 345 at 126: (40.45085, -29.38926, 0.0)
    test 346 at 129: (38.8573, -31.46602, 0.0)
    test 347 at 132: (37.15724, -33.45653, 0.0)
    test 348 at 135: (35.35534, -35.35534, 0.0)
    test 349 at 138: (33.45653, -37.15724, 0.0)
    test 350 at 141: (31.46602, -38.8573, 0.0)
    test 351 at 144: (29.38926, -40.45085, 0.0)
    test 352 at 147: (27.23195, -41.93353, 0.0)
    test 353 at 150: (25.0, -43.30127, 0.0)
    test 354 at 153: (22.69952, -44.55033, 0.0)
    test 355 at 156: (20.33683, -45.67727, 0.0)
    test 356 at 159: (17.9184, -46.67902, 0.0)
    test 357 at 162: (15.45085, -47.55283, 0.0)
    test 358 at 165: (12.94095, -48.29629, 0.0)
    test 359 at 168: (10.39558, -48.90738, 0.0)
    test 360 at 171: (7.82172, -49.38442, 0.0)
    test 361 at 174: (5.22642, -49.72609, 0.0)
    test 362 at 177: (2.6168, -49.93148, 0.0)
    test 363 at 180: (0.0, -50.0, 0.0)
    test 364 at 183: (-2.6168, -49.93148, 0.0)
    test 365 at 186: (-5.22642, -49.72609, 0.0)
    test 366 at 189: (-7.82172, -49.38442, 0.0)
    test 367 at 192: (-10.39558, -48.90738, 0.0)
    test 368 at 195: (-12.94095, -48.29629, 0.0)
    test 369 at 198: (-15.45085, -47.55283, 0.0)
    test 370 at 201: (-17.9184, -46.67902, 0.0)
    test 371 at 204: (-20.33683, -45.67727, 0.0)
    test 372 at 207: (-22.69952, -44.55033, 0.0)
    test 373 at 210: (-25.0, -43.30127, 0.0)
    test 374 at 213: (-27.23195, -41.93353, 0.0)
    test 375 at 216: (-29.38926, -40.45085, 0.0)
    test 376 at 219: (-31.46602, -38.8573, 0.0)
    test 377 at 222: (-33.45653, -37.15724, 0.0)
    test 378 at 225: (-35.35534, -35.35534, 0.0)
    test 379 at 228: (-37.15724, -33.45653, 0.0)
    test 380 at 231: (-38.8573, -31.46602, 0.0)
    test 381 at 234: (-40.45085, -29.38926, 0.0)
    test 382 at 237: (-41.93353, -27.23195, 0.0)
    test 383 at 240: (-43.30127, -25.0, 0.0)
    test 384 at 243: (-44.55033, -22.69952, 0.0)
    test 385 at 246: (-45.67727, -20.33683, 0.0)
    test 386 at 249: (-46.67902, -17.9184, 0.0)
    test 387 at 252: (-47.55283, -15.45085, 0.0)
    test 388 at 255: (-48.29629, -12.94095, 0.0)
    test 389 at 258: (-48.90738, -10.39558, 0.0)
    test 390 at 261: (-49.38442, -7.82172, 0.0)
    test 391 at 264: (-49.72609, -5.22642, 0.0)
    test 392 at 267: (-49.93148, -2.6168, 0.0)
    test 393 at 270: (-50.0, 0.0, 0.0)
    test 394 at 273: (-49.93148, 2.6168, 0.0)
    test 395 at 276: (-49.72609, 5.22642, 0.0)
    test 396 at 279: (-49.38442, 7.82172, 0.0)
    test 397 at 282: (-48.90738, 10.39558, 0.0)
    test 398 at 285: (-48.29629, 12.94095, 0.0)
    test 399 at 288: (-47.55283, 15.45085, 0.0)
    test 400 at 291: (-46.67902, 17.9184, 0.0)
    test 401 at 294: (-45.67727, 20.33683, 0.0)
    test 402 at 297: (-44.55033, 22.69952, 0.0)
    test 403 at 300: (-43.30127, 25.0, 0.0)
    test 404 at 303: (-41.93353, 27.23195, 0.0)
    test 405 at 306: (-40.45085, 29.38926, 0.0)
    test 406 at 309: (-38.8573, 31.46602, 0.0)
    test 407 at 312: (-37.15724, 33.45653, 0.0)
    test 408 at 315: (-35.35534, 35.35534, 0.0)
    test 409 at 318: (-33.45653, 37.15724, 0.0)
    test 410 at 321: (-31.46602, 38.8573, 0.0)
    test 411 at 324: (-29.38926, 40.45085, 0.0)
    test 412 at 327: (-27.23195, 41.93353, 0.0)
    test 413 at 330: (-25.0, 43.30127, 0.0)
    test 414 at 333: (-22.69952, 44.55033, 0.0)
    test 415 at 336: (-20.33683, 45.67727, 0.0)
    test 416 at 339: (-17.9184, 46.67902, 0.0)
    test 417 at 342: (-15.45085, 47.55283, 0.0)
    test 418 at 345: (-12.94095, 48.29629, 0.0)
    test 419 at 348: (-10.39558, 48.90738, 0.0)
    test 420 at 351: (-7.82172, 49.38442, 0.0)
    test 421 at 354: (-5.22642, 49.72609, 0.0)
    test 422 at 357: (-2.6168, 49.93148, 0.0)
    test 423 at 360: (0.0, 50.0, 0.0)
    test 424 max error: 2.4343737502e-13

    39 of 424 testVectorial.py tests (9.2%) FAILED, incl. 6 KNOWN plus 33 DeprecationWarnings, 151 skipped (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 368.260 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testWebMercator.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.F_D from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.R_M from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.R_MA from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.Datums from .datums by testWebMercator.py line 12
# lazily imported pygeodesy.fstr from .streprs by testWebMercator.py line 12
# lazily imported pygeodesy.toWm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.Wm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.ellipsoidalVincenty by testWebMercator.py line 153
# lazily imported pygeodesy.sphericalTrigonometry by testWebMercator.py line 153

    testing testWebMercator.py 23.06.12 (module pygeodesy.webmercator 24.11.06) isLazy=3
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: (43.653217, 4.026714, Datum(name='_Wm', ellipsoid=Ellipsoids._Wm, transform=Transforms.Identity))
    test 12 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 13 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 14 toWm1: 448251.795 5411932.678
    test 15 toWm2: 448252 5411933
    test 16 toWm3: [x:448252, y:5411933, radius:6378137]
    test 17 copy: 448251.795 5411932.678
    test 18 parse: 448251.795 5411932.678
    test 19 parse: 448251.795 5411932.678
    test 20 parse: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 21 toWm4: 11549466 1505215
    test 22 toWm4: 11549465.988273 1505214.929251
    test 23 toWm4E: 11562388 1496994
    test 24 toWm4E: 11562388.154378 1496993.698095
    test 25 toWm: -11169056 2800000
    test 26 toWm: -11169055.576258 2800000.003136
    test 27 toWm5E: -11169056 2782367
    test 28 toWm5E: -11169055.576258 2782367.05923
    test 29 toWm5: -11156573 2796871
    test 30 toWm5: -11156573.000041 2796870.713179
    test 31 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 32 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 33 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 34 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 35 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 36 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 37 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 38 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 39 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 40 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 41 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 42 Wm8.toWm.x: -33878.893
    test 43 Wm8.toWm.y: 6693890.382
    test 44 Wm8.toWm.latlon: 51.408596, -0.304339
    test 45 Wm8.toWm.philam: 0.897249, -0.005312
    test 46 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 47 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 48 Wm9.toLatLon: TypeError

    test 49 toWm(10.0000, 0, earth=R_MA).y: 1118889.97
    test 50 toWm(20.0000, 0, earth=R_MA).y: 2273030.93
    test 51 toWm(30.0000, 0, earth=R_MA).y: 3503549.84
    test 52 toWm(40.0000, 0, earth=R_MA).y: 4865942.28
    test 53 toWm(50.0000, 0, earth=R_MA).y: 6446275.84
    test 54 toWm(60.0000, 0, earth=R_MA).y: 8399737.89

    test 55 toWm(10.0003, 0, earth=R_MA).y: 1118921.37
    test 56 toWm(20.0003, 0, earth=R_MA).y: 2273063.83
    test 57 toWm(30.0003, 0, earth=R_MA).y: 3503585.55
    test 58 toWm(40.0003, 0, earth=R_MA).y: 4865982.65
    test 59 toWm(50.0003, 0, earth=R_MA).y: 6446323.95
    test 60 toWm(60.0003, 0, earth=R_MA).y: 8399799.73

    test 61 toWm(10.0000, 0, earth=WGS84).y: 1111475.10
    test 62 toWm(20.0000, 0, earth=WGS84).y: 2258423.65
    test 63 toWm(30.0000, 0, earth=WGS84).y: 3482189.09
    test 64 toWm(40.0000, 0, earth=WGS84).y: 4838471.40
    test 65 toWm(50.0000, 0, earth=WGS84).y: 6413524.59
    test 66 toWm(60.0000, 0, earth=WGS84).y: 8362698.55

    test 67 toWm(10.0003, 0, earth=WGS84).y: 1111506.30
    test 68 toWm(20.0003, 0, earth=WGS84).y: 2258456.36
    test 69 toWm(30.0003, 0, earth=WGS84).y: 3482224.61
    test 70 toWm(40.0003, 0, earth=WGS84).y: 4838511.61
    test 71 toWm(50.0003, 0, earth=WGS84).y: 6413572.57
    test 72 toWm(60.0003, 0, earth=WGS84).y: 8362760.29

    all 72 testWebMercator.py tests passed (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 4.143 ms

running /Library/Framewo....n3.13 -W default ~/PyGeodesy/test/testWgrs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 28
# lazily imported pygeodesy.clips from .basics by bases.py line 28
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 28
# lazily imported pygeodesy.isint from .basics by bases.py line 28
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 28
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 28
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 28
# lazily imported pygeodesy.LazyImportError from .lazily by bases.py line 28
# lazily imported pygeodesy.karney by bases.py line 28
# lazily imported pygeodesy.map2 from .basics by bases.py line 28
# lazily imported pygeodesy.NN from .interns by bases.py line 28
# lazily imported pygeodesy.normDMS from .dms by bases.py line 28
# lazily imported pygeodesy.pairs from .streprs by bases.py line 28
# lazily imported pygeodesy.printf from .internals by bases.py line 28
# lazily imported pygeodesy.property_RO from .props by bases.py line 28
# lazily imported pygeodesy.degDMS from .dms by testWgrs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testWgrs.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testWgrs.py line 11
# lazily imported pygeodesy.S_DEG from .dms by testWgrs.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testWgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testWgrs.py line 96

    testing testWgrs.py 23.03.27 (module pygeodesy.wgrs 24.11.06) isLazy=3
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W  default) 3.093 ms

test/run.py /Library/Framewo....n3.13 -W default: all 40633 tests OK (PyGeodesy 24.11.11 Python 3.13.0 64bit arm64 coverage 7.6.1 geographiclib 2.0 Math 2 macOS 14.6.1 isLazy 3 -W default) 15:53.793 (42.601 tps)
