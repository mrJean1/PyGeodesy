test/run.py typical test results (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W default)

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testAlbers.py

    testing testAlbers.py 21.01.28 (module pygeodesy.albers 22.07.07)
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 22.07.07)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 22.07.07)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 22.07.07)
    test 53 AlbersEqualArea.lat0: 45.0
    test 54 AlbersEqualArea.lat1: 45.0
    test 55 AlbersEqualArea.lat2: 45.0
    test 56 AlbersEqualArea2.lat0: 40.0
    test 57 AlbersEqualArea2.lat1: 40.0
    test 58 AlbersEqualArea2.lat2: 40.0
    test 59 AlbersEqualArea4.lat0: 30.0
    test 60 AlbersEqualArea4.lat1: 30.0
    test 61 AlbersEqualArea4.lat2: 30.0
    test 62 AlbersEqualArea4.lat0: -30.0
    test 63 AlbersEqualArea4.lat1: -30.0
    test 64 AlbersEqualArea4.lat2: -30.0
    test 65 AlbersEqualAreaCylindrical.lat0: 0.0
    test 66 AlbersEqualAreaCylindrical.lat1: 0.0
    test 67 AlbersEqualAreaCylindrical.lat2: 0.0
    test 68 AlbersEqualAreaNorth.lat0: 90.0
    test 69 AlbersEqualAreaNorth.lat1: 90.0
    test 70 AlbersEqualAreaNorth.lat2: 90.0
    test 71 AlbersEqualAreaSouth.lat0: -90.0
    test 72 AlbersEqualAreaSouth.lat1: -90.0
    test 73 AlbersEqualAreaSouth.lat2: -90.0
    test 74 error: lat1 (150.0): above 90 limit
    test 75 error: slat1 (-0.5) or slat2 (0.5): invalid

    9 of 75 testAlbers.py tests (12.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 10.477 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testAzimuthal.py

    testing testAzimuthal.py 22.06.20 (module pygeodesy.azimuthal 22.06.16)
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 13 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 14 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 16 iteration: None
    test 17 hypot: 339535.102  FAILED, KNOWN, expected 338901.865
    test 18 antipodal: (170420.92566, -293667.828613, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 19 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 20 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 21 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 22 iteration: None
    test 23 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 24 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 25 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 26 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 29 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 30 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 31 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 32 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 33 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 34 iteration: None
    test 35 hypot: 339855.719  FAILED, KNOWN, expected 338901.865
    test 36 antipodal: (170581.851218, -293945.134107, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 37 EquidistantExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 38 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 39 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 40 iteration: None
    test 41 copy(EquidistantExact): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 42 EquidistantExact.copy(): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 43 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 44 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 45 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 46 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 47 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 48 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 49 EquidistantExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 50 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 51 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 52 iteration: None
    test 53 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 54 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 55 GnomonicExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 56 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 57 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 58 iteration: 3
    test 59 copy(GnomonicExact): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 60 GnomonicExact.copy(): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 61 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 62 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 63 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 64 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 65 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 66 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 67 GnomonicExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 68 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 69 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 70 iteration: 3
    test 71 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 72 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 73 EquidistantKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 74 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 75 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 76 iteration: None
    test 77 copy(EquidistantKarney): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 78 EquidistantKarney.copy(): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 79 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 80 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 81 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 82 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 83 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 84 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 85 EquidistantKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 86 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 87 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 88 iteration: None
    test 89 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 90 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 91 GnomonicKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 92 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 93 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 94 iteration: 3
    test 95 copy(GnomonicKarney): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 96 GnomonicKarney.copy(): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 97 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 98 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 99 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 100 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 101 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 102 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 103 GnomonicKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 104 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 105 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 106 iteration: 3
    test 107 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 108 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 109 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W Random +/- 45
    test 110 pygeodesy.ellipsoidalExact: 15.050156°S, 017.698753°W, 51.543322°N, 021.970777°E  d 25195.3 meter  Spherical
    test 111 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 51.671088°N, 021.824255°E  d 5.7315e-09 meter  EquidistantExact
    test 112 pygeodesy.ellipsoidalExact: 15.110665°S, 017.749913°W, 51.469549°N, 021.916235°E  d 22398.7 meter  Equidistant
    test 113 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 5, 0, 4, 0, 5, °, S, ,,  , 0, 0, 0, ., 1, 3, 9, 5, 0, 8, °, E  00.986%, 000.792% of Random
    test 114 pygeodesy.ellipsoidalExact: 15.299000°S, 017.633771°W, 51.779077°S, 005.315649°E  d 4890.15 meter  Spherical
    test 115 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 51.817796°S, 005.180979°E  d 1.34501e-09 meter  EquidistantExact
    test 116 pygeodesy.ellipsoidalExact: 15.229851°S, 017.633095°W, 51.739306°S, 005.215869°E  d 4227.78 meter  Equidistant
    test 117 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 3, 1, 2, 1, 8, °, S, ,,  , 0, 0, 0, ., 0, 2, 2, 6, 9, 0, °, E  00.205%, 000.129% of Random
    test 118 pygeodesy.ellipsoidalExact: 15.045774°S, 017.676586°W, 57.783997°N, 030.878366°E  d 24861.6 meter  Spherical
    test 119 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 57.894829°N, 030.702526°E  d 6.88292e-09 meter  EquidistantExact
    test 120 pygeodesy.ellipsoidalExact: 15.129214°S, 017.679197°W, 57.740748°N, 030.670293°E  d 16355.6 meter  Equidistant
    test 121 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 3, 1, 8, 5, 5, °, S, ,,  , 0, 0, 0, ., 0, 6, 8, 7, 9, 2, °, E  00.864%, 000.391% of Random
    test 122 pygeodesy.ellipsoidalExact: 15.289477°S, 017.676502°W, 47.713495°S, 007.364979°W  d 7764.33 meter  Spherical
    test 123 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 47.726563°S, 007.411784°W  d 3.61111e-09 meter  EquidistantExact
    test 124 pygeodesy.ellipsoidalExact: 15.204744°S, 017.765686°W, 47.620328°S, 007.329360°W  d 17808.6 meter  Equidistant
    test 125 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 5, 6, 3, 2, 6, °, S, ,,  , 0, 0, 0, ., 1, 5, 5, 2, 8, 1, °, E  00.369%, 000.882% of Random
    test 126 pygeodesy.ellipsoidalExact: 15.165080°S, 017.514250°W, 15.472546°S, 061.718376°E  d 14817.1 meter  Spherical
    test 127 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 15.572810°S, 061.814243°E  d 2.58588e-09 meter  EquidistantExact
    test 128 pygeodesy.ellipsoidalExact: 15.189899°S, 017.650582°W, 15.497983°S, 061.853327°E  d 8980.54 meter  Equidistant
    test 129 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 7, 1, 1, 7, 1, °, S, ,,  , 0, 0, 0, ., 0, 4, 0, 1, 7, 7, °, E  00.466%, 000.228% of Random
    test 130 pygeodesy.ellipsoidalExact: 15.236796°S, 017.651131°W, 08.605868°S, 037.163963°W  d 5133.69 meter  Spherical
    test 131 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 08.525792°S, 037.182564°W  d 7.0587e-10 meter  EquidistantExact
    test 132 pygeodesy.ellipsoidalExact: 15.235120°S, 017.606412°W, 08.573108°S, 037.203210°W  d 2903.23 meter  Equidistant
    test 133 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 2, 5, 9, 5, 0, °, S, ,,  , 0, 0, 0, ., 0, 0, 3, 9, 9, 3, °, W  00.170%, 000.023% of Random
    test 134 pygeodesy.ellipsoidalExact: 15.262504°S, 017.658484°W, 60.126568°S, 003.997198°W  d 5167.09 meter  Spherical
    test 135 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 60.093183°S, 004.094305°W  d 3.5334e-10 meter  EquidistantExact
    test 136 pygeodesy.ellipsoidalExact: 15.161784°S, 017.692699°W, 59.963333°S, 004.053476°W  d 14102.2 meter  Equidistant
    test 137 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 9, 9, 2, 8, 5, °, S, ,,  , 0, 0, 0, ., 0, 8, 2, 2, 9, 4, °, E  00.651%, 000.467% of Random
    test 138 pygeodesy.ellipsoidalExact: 15.049922°S, 017.668918°W, 40.673891°N, 032.368169°E  d 24195.1 meter  Spherical
    test 139 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 40.893258°N, 032.245869°E  d 6.86931e-09 meter  EquidistantExact
    test 140 pygeodesy.ellipsoidalExact: 15.107241°S, 017.767479°W, 40.641424°N, 032.343881°E  d 23971.2 meter  Equidistant
    test 141 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 5, 3, 8, 2, 9, °, S, ,,  , 0, 0, 0, ., 1, 5, 7, 0, 7, 4, °, E  01.008%, 000.892% of Random
    test 142 pygeodesy.ellipsoidalExact: 14.987312°S, 017.740065°W, 03.680410°N, 051.677552°E  d 33343.7 meter  Spherical
    test 143 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 03.588728°N, 051.631095°E  d 8.0246e-10 meter  EquidistantExact
    test 144 pygeodesy.ellipsoidalExact: 15.097664°S, 017.755610°W, 03.566215°N, 051.755339°E  d 23883 meter  Equidistant
    test 145 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 6, 3, 4, 0, 5, °, S, ,,  , 0, 0, 0, ., 1, 4, 5, 2, 0, 6, °, E  01.071%, 000.825% of Random
    test 146 pygeodesy.ellipsoidalExact: 15.350854°S, 017.547734°W, 44.111091°S, 051.287102°W  d 12000 meter  Spherical
    test 147 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 44.176638°S, 051.205806°W  d 2.53776e-08 meter  EquidistantExact
    test 148 pygeodesy.ellipsoidalExact: 15.316202°S, 017.534563°W, 44.105058°S, 051.259295°W  d 10176.9 meter  Equidistant
    test 149 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 5, 5, 1, 3, 2, °, N, ,,  , 0, 0, 0, ., 0, 7, 5, 8, 4, 2, °, W  00.361%, 000.431% of Random
    test 150 pygeodesy.ellipsoidalExact: 15.282124°S, 017.543878°W, 20.679033°S, 011.915958°E  d 7516.05 meter  Spherical
    test 151 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 20.746578°S, 011.978296°E  d 1.55947e-09 meter  EquidistantExact
    test 152 pygeodesy.ellipsoidalExact: 15.274140°S, 017.606416°W, 20.690503°S, 011.965940°E  d 1508.33 meter  Equidistant
    test 153 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 1, 3, 0, 7, 0, °, N, ,,  , 0, 0, 0, ., 0, 0, 3, 9, 8, 8, °, W  00.086%, 000.023% of Random
    test 154 pygeodesy.ellipsoidalExact: 15.489500°S, 017.645971°W, 11.245590°S, 017.737586°W  d 25563.2 meter  Spherical
    test 155 pygeodesy.ellipsoidalExact: 15.261070°S, 017.610405°W, 11.482548°S, 017.689872°W  d 3.86151e-09 meter  EquidistantExact
    test 156 pygeodesy.ellipsoidalExact: 15.803337°S, 017.701970°W, 10.891722°S, 017.815846°W  d 60802.8 meter  Equidistant
    test 157 pygeodesy.ellipsoidalExact: 0, 0, ., 5, 4, 2, 2, 6, 8, °, N, ,,  , 0, 0, 0, ., 0, 9, 1, 5, 6, 6, °, E  03.553%, 000.520% of Random
    test 158 pygeodesy.ellipsoidalExact: 0, 0, ., 5, 4, 2, 2, 6, 8, °, N, ,,  , 0, 0, 0, ., 1, 5, 7, 0, 7, 4, °, E  03.553%, 000.892% of Random, max

    test 159 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W Random +/- 45
    test 160 pygeodesy.ellipsoidalVincenty: 37.641566°S, 039.920381°W, 55.397970°S, 065.440727°E  d 47551 meter  Spherical
    test 161 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 55.865490°S, 065.009949°E  d 1.37394e-05 meter  EquidistantExact
    test 162 pygeodesy.ellipsoidalVincenty: 37.611608°S, 039.912057°W, 55.125918°S, 065.498442°E  d 50569.9 meter  Equidistant
    test 163 pygeodesy.ellipsoidalVincenty: 0, 0, ., 4, 4, 1, 6, 1, 9, °, S, ,,  , 0, 0, 0, ., 1, 4, 1, 2, 7, 6, °, E  01.161%, 000.355% of Random
    test 164 pygeodesy.ellipsoidalVincenty: 38.145107°S, 039.801498°W, 34.626883°S, 040.282069°W  d 10548.4 meter  Spherical
    test 165 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 34.723591°S, 040.216205°W  d 6.99524e-05 meter  EquidistantExact
    test 166 pygeodesy.ellipsoidalVincenty: 38.095842°S, 039.780957°W, 34.615564°S, 040.290387°W  d 4813.69 meter  Equidistant
    test 167 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 4, 2, 6, 1, 5, °, N, ,,  , 0, 0, 0, ., 0, 1, 0, 1, 7, 6, °, E  00.112%, 000.026% of Random
    test 168 pygeodesy.ellipsoidalVincenty: 37.899613°S, 039.873095°W, 23.839580°N, 012.695989°W  d 19275.1 meter  Spherical
    test 169 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 23.992044°N, 012.739031°W  d 3.64075e-05 meter  EquidistantExact
    test 170 pygeodesy.ellipsoidalVincenty: 37.890818°S, 039.849690°W, 23.918803°N, 012.718351°W  d 19314.1 meter  Equidistant
    test 171 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 6, 2, 4, 0, 9, °, S, ,,  , 0, 0, 0, ., 0, 7, 8, 9, 0, 9, °, E  00.427%, 000.198% of Random
    test 172 pygeodesy.ellipsoidalVincenty: 37.760071°S, 039.833508°W, 01.208536°N, 072.422308°E  d 33003 meter  Spherical
    test 173 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 01.299173°N, 072.393267°E  d 3.89459e-05 meter  EquidistantExact
    test 174 pygeodesy.ellipsoidalVincenty: 37.750336°S, 039.811926°W, 01.199425°N, 072.585524°E  d 33813.4 meter  Equidistant
    test 175 pygeodesy.ellipsoidalVincenty: 0, 0, ., 3, 0, 2, 8, 9, 1, °, S, ,,  , 0, 0, 0, ., 0, 4, 1, 1, 4, 5, °, E  00.796%, 000.103% of Random
    test 176 pygeodesy.ellipsoidalVincenty: 37.865640°S, 039.858056°W, 52.930818°S, 047.275360°E  d 22189 meter  Spherical
    test 177 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 53.190001°S, 047.033509°E  d 3.32688e-05 meter  EquidistantExact
    test 178 pygeodesy.ellipsoidalVincenty: 37.852247°S, 039.843945°W, 52.812019°S, 047.212896°E  d 23216.2 meter  Equidistant
    test 179 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 0, 0, 9, 8, 0, °, S, ,,  , 0, 0, 0, ., 0, 7, 3, 1, 6, 4, °, E  00.528%, 000.184% of Random
    test 180 pygeodesy.ellipsoidalVincenty: 37.979203°S, 039.392178°W, 08.283261°S, 068.198812°W  d 34246.5 meter  Spherical
    test 181 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 08.418524°S, 068.132751°W  d 4.69314e-06 meter  EquidistantExact
    test 182 pygeodesy.ellipsoidalVincenty: 37.980153°S, 039.344166°W, 08.553028°S, 068.212948°W  d 38330.1 meter  Equidistant
    test 183 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 3, 0, 7, 4, °, S, ,,  , 0, 0, 0, ., 4, 2, 6, 6, 1, 5, °, W  00.192%, 001.073% of Random
    test 184 pygeodesy.ellipsoidalVincenty: 37.869674°S, 039.710136°W, 00.551137°S, 067.079739°W  d 21059.1 meter  Spherical
    test 185 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 00.458833°S, 067.053352°W  d 2.88938e-05 meter  EquidistantExact
    test 186 pygeodesy.ellipsoidalVincenty: 37.877519°S, 039.657665°W, 00.882877°S, 067.124138°W  d 21889.8 meter  Equidistant
    test 187 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 7, 5, 7, 0, 8, °, S, ,,  , 0, 0, 0, ., 1, 1, 3, 1, 1, 6, °, W  00.462%, 000.284% of Random
    test 188 pygeodesy.ellipsoidalVincenty: 37.745553°S, 039.881778°W, 30.099863°S, 009.332012°W  d 35518.2 meter  Spherical
    test 189 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 30.337140°S, 009.250216°W  d 8.23176e-06 meter  EquidistantExact
    test 190 pygeodesy.ellipsoidalVincenty: 37.726451°S, 039.881767°W, 30.133255°S, 009.307232°W  d 37561.2 meter  Equidistant
    test 191 pygeodesy.ellipsoidalVincenty: 0, 0, ., 3, 2, 6, 7, 7, 6, °, S, ,,  , 0, 0, 0, ., 1, 1, 0, 9, 8, 7, °, E  00.859%, 000.279% of Random
    test 192 pygeodesy.ellipsoidalVincenty: 37.896011°S, 039.843030°W, 14.865680°S, 020.918812°E  d 18569.1 meter  Spherical
    test 193 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 14.813359°S, 020.890189°E  d 2.41213e-05 meter  EquidistantExact
    test 194 pygeodesy.ellipsoidalVincenty: 37.889181°S, 039.832078°W, 14.861692°S, 020.990758°E  d 18988.3 meter  Equidistant
    test 195 pygeodesy.ellipsoidalVincenty: 0, 0, ., 1, 6, 4, 0, 4, 6, °, S, ,,  , 0, 0, 0, ., 0, 6, 1, 2, 9, 7, °, E  00.431%, 000.154% of Random
    test 196 pygeodesy.ellipsoidalVincenty: 37.834382°S, 039.722431°W, 34.695697°S, 022.542572°E  d 24659.8 meter  Spherical
    test 197 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 34.880344°S, 022.612498°E  d 1.37594e-05 meter  EquidistantExact
    test 198 pygeodesy.ellipsoidalVincenty: 37.822729°S, 039.705764°W, 34.698281°S, 022.547047°E  d 26214.8 meter  Equidistant
    test 199 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 3, 0, 4, 9, 8, °, S, ,,  , 0, 0, 0, ., 0, 6, 5, 0, 1, 6, °, W  00.606%, 000.163% of Random
    test 200 pygeodesy.ellipsoidalVincenty: 38.035516°S, 039.514017°W, 19.398982°S, 054.991669°W  d 22624.2 meter  Spherical
    test 201 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 19.503890°S, 054.978766°W  d 1.56939e-05 meter  EquidistantExact
    test 202 pygeodesy.ellipsoidalVincenty: 38.036586°S, 039.465242°W, 19.583233°S, 055.045057°W  d 26883.3 meter  Equidistant
    test 203 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 1, 6, 6, 4, 1, °, S, ,,  , 0, 0, 0, ., 3, 0, 5, 5, 3, 8, °, W  00.044%, 000.768% of Random
    test 204 pygeodesy.ellipsoidalVincenty: 37.669558°S, 039.869064°W, 40.678557°S, 107.012085°E  d 43454.3 meter  Spherical
    test 205 pygeodesy.ellipsoidalVincenty: 38.053227°S, 039.770781°W, 41.084100°S, 106.906994°E  d 5.0714e-05 meter  EquidistantExact
    test 206 pygeodesy.ellipsoidalVincenty: 37.651320°S, 039.847303°W, 40.635379°S, 106.960460°E  d 45114.6 meter  Equidistant
    test 207 pygeodesy.ellipsoidalVincenty: 0, 0, ., 4, 0, 1, 9, 0, 7, °, S, ,,  , 0, 0, 0, ., 0, 7, 6, 5, 2, 2, °, E  01.056%, 000.192% of Random
    test 208 pygeodesy.ellipsoidalVincenty: 0, 0, ., 4, 4, 1, 6, 1, 9, °, N, ,,  , 0, 0, 0, ., 4, 2, 6, 6, 1, 5, °, E  01.161%, 001.073% of Random, max

    test 209 Equidistant(10, 80): 1.37704, 0.24656
    test 210 Equidistant(10, 80): 10.0, 80.0
    test 211 Gnomonic(10, 80): 5.67128, 1.01543
    test 212 Gnomonic(10, 80): 10.0, 80.0
    test 213 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 214 LambertEqualArea(10, 80): 10.0, 80.0
    test 215 Orthographic(10, 80): 0.96985, 0.17365
    test 216 Orthographic(10, 80): 10.0, 80.0
    test 217 Stereographic(10, 80): 1.65643, 0.29658
    test 218 Stereographic(10, 80): 10.0, 80.0
    test 219 Equidistant(20, 20): 0.33454, 0.35601
    test 220 Equidistant(20, 20): 20.0, 20.0
    test 221 Gnomonic(20, 20): 0.36397, 0.38733
    test 222 Gnomonic(20, 20): 20.0, 20.0
    test 223 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 224 LambertEqualArea(20, 20): 20.0, 20.0
    test 225 Orthographic(20, 20): 0.32139, 0.34202
    test 226 Orthographic(20, 20): 20.0, 20.0
    test 227 Stereographic(20, 20): 0.34136, 0.36327
    test 228 Stereographic(20, 20): 20.0, 20.0
    test 229 Equidistant(40, 40): 0.57386, 0.74912
    test 230 Equidistant(40, 40): 40.0, 40.0
    test 231 Gnomonic(40, 40): 0.8391, 1.09537
    test 232 Gnomonic(40, 40): 40.0, 40.0
    test 233 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 234 LambertEqualArea(40, 40): 40.0, 40.0
    test 235 Orthographic(40, 40): 0.4924, 0.64279
    test 236 Orthographic(40, 40): 40.0, 40.0
    test 237 Stereographic(40, 40): 0.62062, 0.81016
    test 238 Stereographic(40, 40): 40.0, 40.0
    test 239 Equidistant(60, 60): 0.58948, 1.17896
    test 240 Equidistant(60, 60): 60.0, 60.0
    test 241 Gnomonic(60, 60): 1.73205, 3.4641
    test 242 Gnomonic(60, 60): 60.0, 60.0
    test 243 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 244 LambertEqualArea(60, 60): 60.0, 60.0
    test 245 Orthographic(60, 60): 0.43301, 0.86603
    test 246 Orthographic(60, 60): 60.0, 60.0
    test 247 Stereographic(60, 60): 0.69282, 1.38564
    test 248 Stereographic(60, 60): 60.0, 60.0
    test 249 Equidistant(70, 80): 0.50997, 1.42273
    test 250 Equidistant(70, 80): 70.0, 80.0
    test 251 Gnomonic(70, 80): 5.67128, 15.82209
    test 252 Gnomonic(70, 80): 70.0, 80.0
    test 253 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 254 LambertEqualArea(70, 80): 70.0, 80.0
    test 255 Orthographic(70, 80): 0.33682, 0.93969
    test 256 Orthographic(70, 80): 70.0, 80.0
    test 257 Stereographic(70, 80): 0.63588, 1.77402
    test 258 Stereographic(70, 80): 70.0, 80.0
    test 259 Equidistant(80, 80): 0.26358, 1.51792
    test 260 Equidistant(80, 80): 80.0, 80.0
    test 261 Gnomonic(80, 80): 5.67128, 32.65961
    test 262 Gnomonic(80, 80): 80.0, 80.0
    test 263 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 264 LambertEqualArea(80, 80): 80.0, 80.0
    test 265 Orthographic(80, 80): 0.17101, 0.98481
    test 266 Orthographic(80, 80): 80.0, 80.0
    test 267 Stereographic(80, 80): 0.33201, 1.91196
    test 268 Stereographic(80, 80): 80.0, 80.0
    test 269 Equidistant(80, 10): 0.04281, 1.39829
    test 270 Equidistant(80, 10): 80.0, 10.0
    test 271 Gnomonic(80, 10): 0.17633, 5.75877
    test 272 Gnomonic(80, 10): 80.0, 10.0
    test 273 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 274 LambertEqualArea(80, 10): 80.0, 10.0
    test 275 Orthographic(80, 10): 0.03015, 0.98481
    test 276 Orthographic(80, 10): 80.0, 10.0
    test 277 Stereographic(80, 10): 0.0515, 1.68198
    test 278 Stereographic(80, 10): 80.0, 10.0

    test 279 function: equidistant
    test 280 equatoradius: 1.0
    test 281 flattening: 0.0
    test 282 iteration: None
    test 283 latlon0: (0.0, 0.0)
    test 284 latlon0: (1.0, 2.0)
    test 285 name: coverage
    test 286 radius: 1.0

    test 287 function: gnomonic
    test 288 equatoradius: 1.0
    test 289 flattening: 0.0
    test 290 iteration: None
    test 291 latlon0: (0.0, 0.0)
    test 292 latlon0: (1.0, 2.0)
    test 293 name: coverage
    test 294 radius: 1.0
    test 295 NANing: (NAN, NAN, 0.0, 0.0, 0.0, 1.0, None)

    6 of 295 testAzimuthal.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 9.314 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testBasics.py

    testing testBasics.py 22.06.24 (module pygeodesy.basics 22.07.04)
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')

    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isninf(0): False
    test 7 isscalar(0): True

    test 8 isfinite(0.0): True
    test 9 isint(0.0): True
    test 10 isint(0.0+0.5): False
    test 11 isninf(0.0): False
    test 12 isscalar(0.0): True

    test 13 isfinite(1): True
    test 14 isint(1): True
    test 15 isint(1+0.5): False
    test 16 isninf(1): False
    test 17 isscalar(1): True

    test 18 isfinite(1.0): True
    test 19 isint(1.0): True
    test 20 isint(1.0+0.5): False
    test 21 isninf(1.0): False
    test 22 isscalar(1.0): True

    test 23 isfinite(1e+300): True
    test 24 isint(1e+300): True
    test 25 isint(1e+300+0.5): True
    test 26 isninf(1e+300): False
    test 27 isscalar(1e+300): True

    test 28 isfinite(-1e+300): True
    test 29 isint(-1e+300): True
    test 30 isint(-1e+300+0.5): True
    test 31 isninf(-1e+300): False
    test 32 isscalar(-1e+300): True

    test 33 isfinite(inf): False
    test 34 isint(inf): False
    test 35 isint(inf+0.5): False
    test 36 isninf(inf): False
    test 37 isscalar(inf): True

    test 38 isfinite(inf): False
    test 39 isint(inf): False
    test 40 isint(inf+0.5): False
    test 41 isninf(inf): False
    test 42 isscalar(inf): True

    test 43 isfinite(nan): False
    test 44 isint(nan): False
    test 45 isint(nan+0.5): False
    test 46 isninf(nan): False
    test 47 isscalar(nan): True

    test 48 isfinite(-0.0): True
    test 49 isint(-0.0): True
    test 50 isint(-0.0+0.5): False
    test 51 isninf(-0.0): False
    test 52 isscalar(-0.0): True

    test 53 isfinite(-inf): False
    test 54 isint(-inf): False
    test 55 isint(-inf+0.5): False
    test 56 isninf(-inf): True
    test 57 isscalar(-inf): True

    test 58 isfinite(complex): True
    test 59 isfinite(complex): False

    test 60 isint0(INT0): True
    test 61 isint0(False): False
    test 62 isint0(None): False
    test 63 isint0(0): True
    test 64 isint0(0.): False
    test 65 isint0(0.0): True

    test 66 isneg0(NEG0): True
    test 67 isneg0(0.0): False
    test 68 isneg0(INF): False
    test 69 isneg0(NAN): False

    test 70 type(C.r_o): property_RO
    test 71 type(c.r_o): <class 'bool'>
    test 72 c.r_o: True
    test 73 c.r_o = False: immutable property_RO: C.r_o = False
    test 74 c.a, c.b: (None, None)
    test 75 d.a, d.b: (True, False)
    test 76 c.a, c.b: (None, None)
    test 77 splice: ((0, 2, 4, 6, 8), (1, 3, 5, 7, 9))
    test 78 splice: ((0, 3, 6, 9), (1, 4, 7), (2, 5, 8))
    test 79 splice: ((0, 3, 6, 9), (1, 4, 7, -1), (2, 5, 8, -1))
    test 80 splice: ((0, 5, 10), (1, 6, 11), (2, 7), (3, 8), (4, 9))

    test 81 remainder(181, 360): -179.0
    test 82 remainder(181, -360): -179.0
    test 83 remainder(181, inf): 181.0
    test 84 remainder(181, nan): nan
    test 85 remainder(181, -inf): 181.0
    test 86 remainder(-181, 360): 179.0
    test 87 remainder(-181, -360): 179.0
    test 88 remainder(-181, inf): -181.0
    test 89 remainder(-181, nan): nan
    test 90 remainder(-181, -inf): -181.0
    test 91 remainder(179, 360): 179.0
    test 92 remainder(179, -360): 179.0
    test 93 remainder(179, inf): 179.0
    test 94 remainder(179, nan): nan
    test 95 remainder(179, -inf): 179.0
    test 96 remainder(-179, 360): -179.0
    test 97 remainder(-179, -360): -179.0
    test 98 remainder(-179, inf): -179.0
    test 99 remainder(-179, nan): nan
    test 100 remainder(-179, -inf): -179.0
    test 101 remainder(inf, 360): math domain error
    test 102 remainder(inf, -360): math domain error
    test 103 remainder(inf, inf): math domain error
    test 104 remainder(inf, nan): nan
    test 105 remainder(inf, -inf): math domain error
    test 106 remainder(nan, 360): nan
    test 107 remainder(nan, -360): nan
    test 108 remainder(nan, inf): nan
    test 109 remainder(nan, nan): nan
    test 110 remainder(nan, -inf): nan
    test 111 remainder(-inf, 360): math domain error
    test 112 remainder(-inf, -360): math domain error
    test 113 remainder(-inf, inf): math domain error
    test 114 remainder(-inf, nan): nan
    test 115 remainder(-inf, -inf): math domain error
    test 116 isclose: True
    test 117 isclose: False

    all 117 testBasics.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 710.964 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testCartesian.py

    testing testCartesian.py 22.05.14

    testCartesian(pygeodesy.sphericalNvector, 22.07.07)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: False
    test 4 isSpherical: True
    test 5 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 7 height: -5918.380258
    test 8 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 9 height4: [3984282.2, 97.1, 4971443.2]
    test 10 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 11 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 12 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 13 LatLon: 50.0379°N, 008.5622°E
    test 14 LatLon: 51.47°N, 000.4543°E
    test 15 LatLon: 40.633365°N, 073.783328°W
    test 16 LatLon: 33.95°N, 118.4°W
    test 17 LatLon: 41.32°S, 174.81°E
    test 18 LatLon: 40.96°N, 005.5°E
    test 19 LatLon: 40.1°N, 116.6°E
    test 20 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 21 copy: True
    test 22 __eq__: True
    test 23 __ne__: False
    test 24 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 25 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 26 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 27 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 28 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 29 isequalTo: <class 'bool'>
    test 30 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 31 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 32 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 33 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 34 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 35 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 36 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 37 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 38 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 39 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 40 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 41 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 42 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 43 isequalTo: <class 'bool'>
    test 44 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 45 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 46 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 47 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 48 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 49 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 50 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 51 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 52 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 53 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 54 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 55 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 56 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 57 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 58 vector3d.trilaterate3d2: [-0.032761, -0.784757, 0.618937]
    test 59 vector3d.trilaterate3d2: [0.025768, -0.798331, 0.601668]
    test 60 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 61 vector3d.intersections2: 0.0312613
    test 62 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 63 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 64 Cartesian0: [3980581, 97, 4966825]
    test 65 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 66 isEllipsoidal: False
    test 67 isSpherical: True
    test 68 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 69 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 70 height: -5918.380258
    test 71 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 72 height4: [3984282.2, 97.1, 4971443.2]
    test 73 Vector4Tuple: 0.625376979018, 1.52393750974e-05, 0.780322775447, -5918.38025833
    test 74 LatLon: 50.0379°N, 008.5622°E
    test 75 LatLon: 51.47°N, 000.4543°E
    test 76 LatLon: 40.633365°N, 073.783328°W
    test 77 LatLon: 33.95°N, 118.4°W
    test 78 LatLon: 41.32°S, 174.81°E
    test 79 LatLon: 40.96°N, 005.5°E
    test 80 LatLon: 40.1°N, 116.6°E
    test 81 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 82 copy: True
    test 83 __eq__: True
    test 84 __ne__: False
    test 85 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 86 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 87 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 88 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 89 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 90 isequalTo: <class 'bool'>
    test 91 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 92 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 93 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 94 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 95 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 96 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 97 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 98 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 99 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 100 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 101 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 102 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 103 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 104 isequalTo: <class 'bool'>
    test 105 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 106 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 107 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 108 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 109 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 110 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 111 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 112 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 113 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 114 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 115 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 116 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 117 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 118 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 119 vector3d.trilaterate3d2: [-0.032761, -0.784757, 0.618937]
    test 120 vector3d.trilaterate3d2: [0.025768, -0.798331, 0.601668]
    test 121 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 122 vector3d.intersections2: 0.0312613
    test 123 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 124 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 125 Cartesian0: [3980581, 97, 4966825]
    test 126 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 127 isEllipsoidal: True
    test 128 isSpherical: False
    test 129 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 130 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 131 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 132 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 133 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 134 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 135 height: 0.242887
    test 136 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 137 height4: [3980580.8, 97.0, 4966824.8]
    test 138 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 139 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 140 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 141 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 142 LatLon: 51.47°N, 000.4543°E
    test 143 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 144 LatLon: 33.95°N, 118.4°W
    test 145 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 146 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 147 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 148 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 149 copy: True
    test 150 __eq__: True
    test 151 __ne__: False
    test 152 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 153 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 154 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 155 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 156 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 157 isequalTo: <class 'bool'>
    test 158 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 159 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 160 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 161 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 162 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 163 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 164 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 165 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 166 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 167 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 168 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 169 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 170 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 171 isequalTo: <class 'bool'>
    test 172 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 173 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 174 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 175 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 176 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 177 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 178 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 179 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 180 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 181 ellipsoidalNvector.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 182 ellipsoidalNvector.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 183 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 184 ellipsoidalNvector.Cartesian.intersections2: 0.0312613
    test 185 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 186 vector3d.intersections2: 0.0312613
    test 187 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 188 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 189 Cartesian0: [3980581, 97, 4966825]
    test 190 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 191 isEllipsoidal: True
    test 192 isSpherical: False
    test 193 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 194 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 195 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 196 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 197 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 198 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 199 height: 0.242887
    test 200 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 201 height4: [3980580.8, 97.0, 4966824.8]
    test 202 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 203 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 204 LatLon: 51.47°N, 000.4543°E
    test 205 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 206 LatLon: 33.95°N, 118.4°W
    test 207 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 208 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 209 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 210 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 211 copy: True
    test 212 __eq__: True
    test 213 __ne__: False
    test 214 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 215 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 216 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 217 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 218 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 219 isequalTo: <class 'bool'>
    test 220 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 221 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 222 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 223 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 224 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 225 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 226 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 227 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 228 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 229 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 230 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 231 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 232 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 233 isequalTo: <class 'bool'>
    test 234 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 235 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 236 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 237 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 238 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 239 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 240 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 241 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 242 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 243 ellipsoidalVincenty.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 244 ellipsoidalVincenty.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 245 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 246 ellipsoidalVincenty.Cartesian.intersections2: 0.0312613
    test 247 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 248 vector3d.intersections2: 0.0312613
    test 249 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 250 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 251 Cartesian0: [3980581, 97, 4966825]
    test 252 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 253 isEllipsoidal: True
    test 254 isSpherical: False
    test 255 copy(Cartesian): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 256 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 257 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 258 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 259 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 260 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 261 height: 0.242887
    test 262 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 263 height4: [3980580.8, 97.0, 4966824.8]
    test 264 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 265 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 266 LatLon: 51.47°N, 000.4543°E
    test 267 LatLon: 40.633365°N, 073.783328°W
    test 268 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 269 LatLon: 41.32°S, 174.81°E
    test 270 LatLon: 40.96°N, 005.5°E
    test 271 LatLon: 40.1°N, 116.6°E
    test 272 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 273 copy: True
    test 274 __eq__: True
    test 275 __ne__: False
    test 276 Cartesian: <class 'pygeodesy.ellipsoidalKarney.Cartesian'>
    test 277 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 278 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 279 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 280 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 281 isequalTo: <class 'bool'>
    test 282 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 283 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 284 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 285 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 286 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 287 toLatLon: <class 'pygeodesy.ellipsoidalKarney.LatLon'>
    test 288 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 289 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 290 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 291 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 292 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 293 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 294 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 295 isequalTo: <class 'bool'>
    test 296 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 297 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 298 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 299 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 300 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 301 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 302 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 303 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 304 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 305 ellipsoidalKarney.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 306 ellipsoidalKarney.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 307 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 308 ellipsoidalKarney.Cartesian.intersections2: 0.0312613
    test 309 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 310 vector3d.intersections2: 0.0312613
    test 311 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 312 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalExact, 22.07.07)
    test 313 Cartesian0: [3980581, 97, 4966825]
    test 314 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 315 isEllipsoidal: True
    test 316 isSpherical: False
    test 317 copy(Cartesian): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 318 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 319 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 320 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 321 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 322 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 323 height: 0.242887
    test 324 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 325 height4: [3980580.8, 97.0, 4966824.8]
    test 326 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 327 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 328 LatLon: 51.47°N, 000.4543°E
    test 329 LatLon: 40.633365°N, 073.783328°W
    test 330 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 331 LatLon: 41.32°S, 174.81°E
    test 332 LatLon: 40.96°N, 005.5°E
    test 333 LatLon: 40.1°N, 116.6°E
    test 334 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 335 copy: True
    test 336 __eq__: True
    test 337 __ne__: False
    test 338 Cartesian: <class 'pygeodesy.ellipsoidalExact.Cartesian'>
    test 339 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 340 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 341 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 342 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 343 isequalTo: <class 'bool'>
    test 344 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 345 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 346 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 347 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 348 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 349 toLatLon: <class 'pygeodesy.ellipsoidalExact.LatLon'>
    test 350 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 351 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 352 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 353 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 354 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 355 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 356 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 357 isequalTo: <class 'bool'>
    test 358 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 359 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 360 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 361 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 362 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 363 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 364 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 365 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 366 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 367 ellipsoidalExact.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 368 ellipsoidalExact.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 369 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 370 ellipsoidalExact.Cartesian.intersections2: 0.0312613
    test 371 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 372 vector3d.intersections2: 0.0312613
    test 373 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 374 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    20 of 374 testCartesian.py tests (5.3%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 21.492 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testClasses.py

    testing testClasses.py 22.03.07

    testCartesianAttrs(22.03.07)
    test 1 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 angleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 apply() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 bearing() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 cassini() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 10 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 11 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 cmp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 collins() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 collins5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 17 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 18 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 cross() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 crosserrors _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 dividedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 dot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 27 equirectangular() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 28 euclid Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 30 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 iscolinearWith() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 isconjugateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 latlon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 latlonheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 length Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 length2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 meeus2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 minus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 negate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 philamheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 pierlot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 plus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 63 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 64 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 65 rotate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 66 rotateAround() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 67 soddy4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 68 sum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 69 tienstra() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 tienstra7() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 times() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 72 times_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 74 to2ll() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 75 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 76 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 77 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 78 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 79 toLatLon() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 80 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 81 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 83 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 84 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 85 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 87 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 toTransforms_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 89 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 trilaterate2d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 91 trilaterate3d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 92 unit() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 93 x Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 x2y2z2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 95 xyz Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 96 y Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 z Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(22.03.07)
    test 98 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 99 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 100 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 101 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 102 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 103 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(22.03.07)
    test 104 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 105 Equidistant Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 106 PointsIter() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 107 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 108 antipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 109 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 111 bearingTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 112 bounds() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 113 boundsOf() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 114 chordTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 115 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 116 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 117 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 118 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 119 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 120 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 121 compassAngle() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 122 compassAngleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 123 convergence property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 124 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 125 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 126 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 127 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 128 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 129 cosineLawTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 131 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 132 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 133 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 134 destination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 135 destination2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 136 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 137 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 138 distanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 139 distanceTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 140 distanceTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 141 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 142 elevation2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 143 ellipsoid() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 144 ellipsoids() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 145 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 146 epsilon _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 147 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 148 equals3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 149 equirectangularTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 150 euclideanTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 151 finalBearingOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 152 finalBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 153 flatLocalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 154 flatPolarTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 155 geodesic Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 156 geodesicx Property_RO: pygeodesy.ellipsoidalExact
    test 157 geoidHeight2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 158 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 159 greatCircleTo() method: pygeodesy.sphericalNvector
    test 160 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 161 haversineTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 162 height _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 163 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 heightStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 165 hubenyTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 166 initialBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 167 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 168 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 170 intersection3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 171 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 172 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 173 isEllipsoidalLatLon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 174 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 176 isWithin() method: pygeodesy.sphericalNvector
    test 177 isantipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 178 isantipodeTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 179 isenclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 180 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 181 isequalTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 iswithin() method: pygeodesy.sphericalNvector
    test 183 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 184 iterations _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 185 lam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 186 lat _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 latlon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 188 latlon2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 189 latlon2round() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 190 latlon_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 191 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 192 lon _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 midpointTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 195 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 196 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 197 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 198 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 199 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 200 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 201 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 202 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 203 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 204 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 205 nearestOn8() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 206 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 207 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 208 phi Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 209 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 210 philam2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 211 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 212 points() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 213 points2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 214 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 215 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 216 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 217 rhumbAzimuthTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 218 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 219 rhumbDestination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 220 rhumbDistanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 221 rhumbLine() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 222 rhumbMidpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 223 scale Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 224 thomasTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 225 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 226 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 227 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 228 toCartesian() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 229 toCss() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 230 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 231 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 232 toEtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 233 toLcc() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 234 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 235 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 236 toMgrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 237 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 238 toOsgr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 239 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 240 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 241 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 242 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 243 toUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 244 toUtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 245 toUtmUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 246 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 247 toVector3d() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 248 toWm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 249 triangle7() method: pygeodesy.sphericalTrigonometry
    test 250 triangulate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 251 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 252 trilaterate5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 253 vincentysTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 254 xyz Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 255 xyzh Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(22.03.07)
    test 256 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 257 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 258 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 259 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 260 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 261 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(22.03.07)
    test 262 Ecef Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 263 H _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 264 angleTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 265 apply() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 266 attrs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 267 bearing() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 268 circin6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 269 circum3() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 270 circum4_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 271 classname Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 272 classnaming _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 273 classof() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 274 cmp() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 275 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 276 cross() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 277 crosserrors _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 278 datum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 279 dividedBy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 280 dot() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 281 dup() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 282 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 283 equirectangular() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 284 euclid Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 285 greatCircle() method: pygeodesy.sphericalNvector
    test 286 h _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 287 hStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 288 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 289 isEllipsoidal Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 290 isSpherical Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 291 iscolinearWith() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 292 isconjugateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 293 isequalTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 294 iteration property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 295 lam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 296 lat Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 297 latlon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 298 latlonheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 299 latlonheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 300 length Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 301 length2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 302 lon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 303 meeus2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 304 minus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 305 name _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 306 named Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 307 named2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 308 named3 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 309 named4 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 310 nearestOn() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 311 nearestOn6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 312 negate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 313 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 314 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 315 phi Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 316 philam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 317 philamheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 318 philamheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 319 plus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 320 radii11() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 321 rename() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 322 rotate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 323 rotateAround() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 324 soddy4() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 325 sum() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 326 times() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 327 times_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 328 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 329 to2ll() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 330 to3abh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 331 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 332 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 333 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 334 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 335 toLatLon() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 336 toRepr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 337 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 338 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 339 toVector3d() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 340 trilaterate2d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 341 trilaterate3d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 342 unit() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 343 x Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 344 x2y2z2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 345 xyz Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 346 xyzh Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 347 y Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 348 z Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(22.03.07)
    test 349 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 350 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(22.03.07)
    test 351 angleTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 352 apply() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 353 attrs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 354 bearing() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 355 circin6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 356 circum3() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 357 circum4_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 358 classname Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 359 classnaming _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 360 classof() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 361 cmp() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 362 copy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 363 cross() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 364 crosserrors _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 365 dividedBy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 366 dot() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 367 dup() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 368 equals() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 369 equirectangular() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 370 euclid Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 371 intermediateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 372 iscolinearWith() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 373 isconjugateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 374 isequalTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 375 iteration property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 376 length Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 377 length2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 378 meeus2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 379 minus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 380 name _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 381 named Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 382 named2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 383 named3 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 384 named4 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 385 nearestOn() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 386 nearestOn6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 387 negate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 388 others() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 389 parse() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 390 plus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 391 radii11() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 392 rename() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 393 rotate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 394 rotateAround() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 395 soddy4() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 396 sum() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 397 times() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 398 times_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 399 to3xyz() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 400 toRepr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 401 toStr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 402 toStr2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 403 trilaterate2d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 404 trilaterate3d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 405 unit() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 406 x Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 407 x2y2z2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 408 xyz Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 409 y Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 410 z Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(22.03.07)
    test 411 pygeodesy.nvectorBase: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 412 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 413 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(22.03.07)
    test 414 Aer: copy
    test 415 Aer4Tuple: copy
    test 416 Albers7Tuple: copy
    test 417 AlbersEqualArea: copy
    test 418 AlbersEqualArea2: copy
    test 419 AlbersEqualArea4: copy
    test 420 AlbersEqualAreaCylindrical: copy
    test 421 AlbersEqualAreaNorth: copy
    test 422 AlbersEqualAreaSouth: copy
    test 423 Area3Tuple: copy
    test 424 Attitude: copy
    test 425 Attitude4Tuple: copy
    test 426 Azimuthal7Tuple: copy
    test 427 Band: copy
    test 428 Bearing: copy
    test 429 Bearing2Tuple: copy
    test 430 Bearing_: copy
    test 431 Bool: copy
    test 432 Bounds2Tuple: copy
    test 433 Bounds4Tuple: copy
    test 434 CassiniSoldner: copy
    test 435 Circin6Tuple: copy
    test 436 Circle4Tuple: copy
    test 437 Circum3Tuple: copy
    test 438 Circum4Tuple: copy
    test 439 ClipCS3Tuple: copy
    test 440 ClipCS4Tuple: copy
    test 441 ClipLB6Tuple: copy
    test 442 ClipSH3Tuple: copy
    test 443 Collins5Tuple: copy
    test 444 Conic: copy
    test 445 Css: copy
    test 446 Curvature2Tuple: copy
    test 447 Datum: copy
    test 448 Degrees: copy
    test 449 Degrees2: copy
    test 450 Degrees_: copy
    test 451 Destination2Tuple: copy
    test 452 Destination3Tuple: copy
    test 453 Direct9Tuple: copy
    test 454 Distance: copy
    test 455 Distance2Tuple: copy
    test 456 Distance3Tuple: copy
    test 457 Distance4Tuple: copy
    test 458 Distance_: copy
    test 459 EasNor2Tuple: copy
    test 460 EasNor3Tuple: copy
    test 461 EasNorAziRk4Tuple: copy
    test 462 EasNorAziRkEqu6Tuple: copy
    test 463 EasNorExact4Tuple: copy
    test 464 EasNorRadius3Tuple: copy
    test 465 Easting: copy
    test 466 Ecef9Tuple: copy
    test 467 EcefFarrell21: copy
    test 468 EcefFarrell22: copy
    test 469 EcefKarney: copy
    test 470 EcefMatrix: copy
    test 471 EcefSudano: copy
    test 472 EcefVeness: copy
    test 473 EcefYou: copy
    test 474 Elevation2Tuple: copy
    test 475 Ellipsoid: copy
    test 476 Ellipsoid2: copy
    test 477 Elliptic: copy
    test 478 Elliptic3Tuple: copy
    test 479 Enu: copy
    test 480 Enu4Tuple: copy
    test 481 Epoch: copy
    test 482 Epsg: copy
    test 483 Equidistant: copy
    test 484 EquidistantExact: copy
    test 485 EquidistantGeodSolve: copy
    test 486 EquidistantKarney: copy
    test 487 Etm: copy
    test 488 ExactTransverseMercator: copy
    test 489 FIx: copy
    test 490 Fcook: copy
    test 491 Fdot: copy
    test 492 Feet: copy
    test 493 Fhorner: copy
    test 494 Flinear: copy
    test 495 Float: copy
    test 496 Float_: copy
    test 497 Footprint5Tuple: copy
    test 498 Forward4Tuple: copy
    test 499 Fpolynomial: copy
    test 500 Frechet: copy
    test 501 Frechet6Tuple: copy
    test 502 FrechetCosineAndoyerLambert: copy
    test 503 FrechetCosineForsytheAndoyerLambert: copy
    test 504 FrechetCosineLaw: copy
    test 505 FrechetDegrees: copy
    test 506 FrechetDistanceTo: copy
    test 507 FrechetEquirectangular: copy
    test 508 FrechetEuclidean: copy
    test 509 FrechetExact: copy
    test 510 FrechetFlatLocal: copy
    test 511 FrechetFlatPolar: copy
    test 512 FrechetHaversine: copy
    test 513 FrechetHubeny: copy
    test 514 FrechetKarney: copy
    test 515 FrechetRadians: copy
    test 516 FrechetThomas: copy
    test 517 FrechetVincentys: copy
    test 518 Frustum: copy
    test 519 Fsum: copy
    test 520 Fsum2Tuple: copy
    test 521 Fwelford: copy
    test 522 GDict: copy
    test 523 Garef: copy
    test 524 GeodSolve12Tuple: copy
    test 525 GeodesicAreaExact: copy
    test 526 GeodesicExact: copy
    test 527 GeodesicLineExact: copy
    test 528 GeodesicLineSolve: copy
    test 529 GeodesicSolve: copy
    test 530 Geohash: copy
    test 531 GeoidG2012B: copy
    test 532 GeoidHeight2Tuple: copy
    test 533 GeoidHeight5Tuple: copy
    test 534 GeoidKarney: copy
    test 535 GeoidPGM: copy
    test 536 Georef: copy
    test 537 Gnomonic: copy
    test 538 GnomonicExact: copy
    test 539 GnomonicGeodSolve: copy
    test 540 GnomonicKarney: copy
    test 541 Hausdorff: copy
    test 542 Hausdorff6Tuple: copy
    test 543 HausdorffCosineAndoyerLambert: copy
    test 544 HausdorffCosineForsytheAndoyerLambert: copy
    test 545 HausdorffCosineLaw: copy
    test 546 HausdorffDegrees: copy
    test 547 HausdorffDistanceTo: copy
    test 548 HausdorffEquirectangular: copy
    test 549 HausdorffEuclidean: copy
    test 550 HausdorffExact: copy
    test 551 HausdorffFlatLocal: copy
    test 552 HausdorffFlatPolar: copy
    test 553 HausdorffHaversine: copy
    test 554 HausdorffHubeny: copy
    test 555 HausdorffKarney: copy
    test 556 HausdorffRadians: copy
    test 557 HausdorffThomas: copy
    test 558 HausdorffVincentys: copy
    test 559 Height: copy
    test 560 HeightCubic: copy
    test 561 HeightIDWcosineAndoyerLambert: copy
    test 562 HeightIDWcosineForsytheAndoyerLambert: copy
    test 563 HeightIDWcosineLaw: copy
    test 564 HeightIDWdistanceTo: copy
    test 565 HeightIDWequirectangular: copy
    test 566 HeightIDWeuclidean: copy
    test 567 HeightIDWflatLocal: copy
    test 568 HeightIDWflatPolar: copy
    test 569 HeightIDWhaversine: copy
    test 570 HeightIDWhubeny: copy
    test 571 HeightIDWkarney: copy
    test 572 HeightIDWthomas: copy
    test 573 HeightIDWvincentys: copy
    test 574 HeightLSQBiSpline: copy
    test 575 HeightLinear: copy
    test 576 HeightSmoothBiSpline: copy
    test 577 Helmert7Tuple: copy
    test 578 Int: copy
    test 579 Int_: copy
    test 580 Intersection3Tuple: copy
    test 581 Inverse10Tuple: copy
    test 582 KTransverseMercator: copy
    test 583 Lam: copy
    test 584 Lam_: copy
    test 585 LambertEqualArea: copy
    test 586 Lat: copy
    test 587 LatLon2PsxyIter: copy
    test 588 LatLon2Tuple: copy
    test 589 LatLon2psxy: copy
    test 590 LatLon3Tuple: copy
    test 591 LatLon4Tuple: copy
    test 592 LatLonAziRk4Tuple: copy
    test 593 LatLonDatum3Tuple: copy
    test 594 LatLonDatum5Tuple: copy
    test 595 LatLonExact4Tuple: copy
    test 596 LatLonPrec3Tuple: copy
    test 597 LatLonPrec5Tuple: copy
    test 598 LatLon_: copy
    test 599 Lat_: copy
    test 600 Lcc: copy
    test 601 Local9Tuple: copy
    test 602 LocalCartesian: copy
    test 603 Lon: copy
    test 604 Lon_: copy
    test 605 Ltp: copy
    test 606 Meeus2Tuple: copy
    test 607 Meter: copy
    test 608 Meter2: copy
    test 609 Meter3: copy
    test 610 Meter_: copy
    test 611 Mgrs: copy
    test 612 Mgrs4Tuple: copy
    test 613 Mgrs6Tuple: copy
    test 614 NearestOn2Tuple: copy
    test 615 NearestOn3Tuple: copy
    test 616 NearestOn4Tuple: copy
    test 617 NearestOn5Tuple: copy
    test 618 NearestOn6Tuple: copy
    test 619 NearestOn8Tuple: copy
    test 620 Ned: copy
    test 621 Ned3Tuple: copy
    test 622 Ned4Tuple: copy
    test 623 Neighbors8Dict: copy
    test 624 Northing: copy
    test 625 Number_: copy
    test 626 Numpy2LatLon: copy
    test 627 Orthographic: copy
    test 628 Osgr: copy
    test 629 Phi: copy
    test 630 PhiLam2Tuple: copy
    test 631 PhiLam3Tuple: copy
    test 632 PhiLam4Tuple: copy
    test 633 Phi_: copy
    test 634 Point3Tuple: copy
    test 635 Points2Tuple: copy
    test 636 PointsIter: copy
    test 637 PolygonArea: copy
    test 638 Precision_: copy
    test 639 Radians: copy
    test 640 Radians2: copy
    test 641 Radians_: copy
    test 642 Radical2Tuple: copy
    test 643 Radii11Tuple: copy
    test 644 Radius: copy
    test 645 Radius_: copy
    test 646 RefFrame: copy
    test 647 Resolutions2Tuple: copy
    test 648 Reverse4Tuple: copy
    test 649 Rhumb: copy
    test 650 Rhumb7Tuple: copy
    test 651 Rhumb8Tuple: copy
    test 652 RhumbLine: copy
    test 653 RhumbLineSolve: copy
    test 654 RhumbOrder2Tuple: copy
    test 655 RhumbSolve: copy
    test 656 RhumbSolve7Tuple: copy
    test 657 Scalar: copy
    test 658 Scalar_: copy
    test 659 Shape2Tuple: copy
    test 660 Soddy4Tuple: copy
    test 661 Stereographic: copy
    test 662 Str: copy
    test 663 Survey3Tuple: copy
    test 664 Tienstra7Tuple: copy
    test 665 Transform: copy
    test 666 Transform7Tuple: copy
    test 667 TriAngle4Tuple: copy
    test 668 TriSide2Tuple: copy
    test 669 TriSide4Tuple: copy
    test 670 Triangle7Tuple: copy
    test 671 Triangle8Tuple: copy
    test 672 Trilaterate5Tuple: copy
    test 673 Tuple2LatLon: copy
    test 674 Ups: copy
    test 675 Utm: copy
    test 676 UtmUps2Tuple: copy
    test 677 UtmUps4Tuple: copy
    test 678 UtmUps5Tuple: copy
    test 679 UtmUps8Tuple: copy
    test 680 UtmUpsLatLon5Tuple: copy
    test 681 Vector2Tuple: copy
    test 682 Vector3Tuple: copy
    test 683 Vector3d: copy
    test 684 Vector4Tuple: copy
    test 685 Wm: copy
    test 686 Xyz4Tuple: copy
    test 687 XyzLocal: copy
    test 688 Zone: copy
    test 689 a_f2Tuple: copy

    all 689 testClasses.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 7.234 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testClipy.py

    testing testClipy.py 22.01.03

    testing(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 clipCS4.p1: 07.5°N, 010.0°E
    test 2 clipCS4.p2: 04.5°N, 000.0°E
    test 3 clipCS4.i: 3
    test 4 clipCS4.j: 0
    test 5 clipCS4.p1: 05.0°N, 005.0°E
    test 6 clipCS4.p2: 05.0°N, 005.0°E
    test 7 clipCS4.i: 1
    test 8 clipCS4.j: 2
    test 9 clipLB6.p1: 07.5°N, 010.0°E
    test 10 clipLB6.p2: 04.5°N, 000.0°E
    test 11 clipLB6.i: 3
    test 12 clipLB6.fi: 3.25
    test 13 clipLB6.fi: 07.5°N, 010.0°E
    test 14 clipLB6.fj: 3.75
    test 15 clipLB6.fj: 04.5°N, 000.0°E
    test 16 clipLB6.j: 0
    test 17 clipLB6.fin: 4
    test 18 clipLB6.p1: 05.0°N, 005.0°E
    test 19 clipLB6.p2: 05.0°N, 005.0°E
    test 20 clipLB6.i: 1
    test 21 clipLB6.fi: 1.00
    test 22 clipLB6.fi: 05.0°N, 005.0°E
    test 23 clipLB6.fj: 2.00
    test 24 clipLB6.fj: 05.0°N, 005.0°E
    test 25 clipLB6.j: 2
    test 26 clipLB6.fin: 4
    test 27 clipCS4.p1: 60.0°N, 123.333333°E
    test 28 clipCS4.p2: 62.857143°N, 130.0°E
    test 29 clipCS4.i: 0
    test 30 clipCS4.j: 1
    test 31 clipLB6.p1: 60.0°N, 123.333333°E
    test 32 clipLB6.p2: 62.857143°N, 130.0°E
    test 33 clipLB6.i: 0
    test 34 clipLB6.fi: 0.666667
    test 35 clipLB6.fi: 60.0°N, 123.333333°E
    test 36 clipLB6.fj: 0.714286
    test 37 clipLB6.fj: 62.857143°N, 130.0°E
    test 38 clipLB6.j: 1
    test 39 clipLB6.fin: 0
    test 40 clipCS4.p1: 17.5°N, 020.0°E
    test 41 clipCS4.p2: 16.25°N, 015.0°E
    test 42 clipCS4.i: 2
    test 43 clipCS4.j: 0
    test 44 clipLB6.p1: 17.5°N, 020.0°E
    test 45 clipLB6.p2: 16.25°N, 015.0°E
    test 46 clipLB6.i: 2
    test 47 clipLB6.fi: 2.500
    test 48 clipLB6.fi: 17.5°N, 020.0°E
    test 49 clipLB6.fj: 2.750
    test 50 clipLB6.fj: 16.25°N, 015.0°E
    test 51 clipLB6.j: 0
    test 52 clipLB6.fin: 3
    test 53 clipSH1.len: 4
    test 54 clipSH1.0: 20.0°N, 020.0°E
    test 55 clipSH1.LL: True
    test 56 clipSH1.1: 17.5°N, 020.0°E
    test 57 clipSH1.LL: True
    test 58 clipSH1.2: 16.25°N, 015.0°E
    test 59 clipSH1.LL: True
    test 60 clipSH1.3: 20.0°N, 015.0°E
    test 61 clipSH1.LL: True
    test 62 clipSH2.len: 5
    test 63 clipSH2.0: 18.571°N, 024.286°E
    test 64 clipSH2.LL: True
    test 65 clipSH2.1: 16.667°N, 016.667°E
    test 66 clipSH2.LL: True
    test 67 clipSH2.2: 20.0°N, 015.0°E
    test 68 clipSH2.LL: True
    test 69 clipSH2.3: 25.0°N, 020.0°E
    test 70 clipSH2.LL: True
    test 71 clipSH2.4: 22.0°N, 026.0°E
    test 72 clipSH2.LL: True
    test 73 clipSH3.len: 2
    test 74 clipSH3.0: 18.571°N, 024.286°E
    test 75 clipSH3.LL: True
    test 76 clipSH3.1: 16.667°N, 016.667°E
    test 77 clipSH3.LL: True
    test 78 clipSH3.edge.: True
    test 79 clipSH3.len: 2
    test 80 clipSH3.0: 16.667°N, 016.667°E
    test 81 clipSH3.LL: True
    test 82 clipSH3.1: 20.0°N, 015.0°E
    test 83 clipSH3.LL: True
    test 84 clipSH3.edge.: False
    test 85 clipSH3.len: 2
    test 86 clipSH3.0: 20.0°N, 015.0°E
    test 87 clipSH3.LL: True
    test 88 clipSH3.1: 25.0°N, 020.0°E
    test 89 clipSH3.LL: True
    test 90 clipSH3.edge.: True
    test 91 clipSH3.len: 2
    test 92 clipSH3.0: 25.0°N, 020.0°E
    test 93 clipSH3.LL: True
    test 94 clipSH3.1: 22.0°N, 026.0°E
    test 95 clipSH3.LL: True
    test 96 clipSH3.edge.: True
    test 97 clipSH3.len: 2
    test 98 clipSH3.0: 22.0°N, 026.0°E
    test 99 clipSH3.LL: True
    test 100 clipSH3.1: 18.571°N, 024.286°E
    test 101 clipSH3.LL: True
    test 102 clipSH3.edge.: False
    test 103 clipSH2.reversed.len: 5
    test 104 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 105 clipSH2.reversed.LL: True
    test 106 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 107 clipSH2.reversed.LL: True
    test 108 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 109 clipSH2.reversed.LL: True
    test 110 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 111 clipSH2.reversed.LL: True
    test 112 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 113 clipSH2.reversed.LL: True
    test 114 clipSH3.reversed.len: 2
    test 115 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 116 clipSH3.reversed.LL: True
    test 117 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 118 clipSH3.reversed.LL: True
    test 119 clipSH3.edge.reversed.: True
    test 120 clipSH3.reversed.len: 2
    test 121 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 122 clipSH3.reversed.LL: True
    test 123 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 124 clipSH3.reversed.LL: True
    test 125 clipSH3.edge.reversed.: False
    test 126 clipSH3.reversed.len: 2
    test 127 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 128 clipSH3.reversed.LL: True
    test 129 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 130 clipSH3.reversed.LL: True
    test 131 clipSH3.edge.reversed.: True
    test 132 clipSH3.reversed.len: 2
    test 133 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 134 clipSH3.reversed.LL: True
    test 135 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 136 clipSH3.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.reversed.len: 2
    test 139 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 140 clipSH3.reversed.LL: True
    test 141 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 142 clipSH3.reversed.LL: True
    test 143 clipSH3.edge.reversed.: False
    test 144 clipSH.allout: ()
    test 145 clipSH3.allout: ()
    test 146 clipSH.allout.reversed: ()
    test 147 clipSH3.allout.reversed: ()
    test 148 clipSH.allin.len: 4
    test 149 clipSH.allin.0: 20.0°N, 030.0°E
    test 150 clipSH.allin.LL: True
    test 151 clipSH.allin.1: 15.0°N, 010.0°E
    test 152 clipSH.allin.LL: True
    test 153 clipSH.allin.2: 25.0°N, 020.0°E
    test 154 clipSH.allin.LL: True
    test 155 clipSH.allin.3: 20.0°N, 030.0°E
    test 156 clipSH.allin.LL: True
    test 157 clipSH3.allin.len: 2
    test 158 clipSH3.allin.0: 20.0°N, 030.0°E
    test 159 clipSH3.allin.LL: True
    test 160 clipSH3.allin.1: 15.0°N, 010.0°E
    test 161 clipSH3.allin.LL: True
    test 162 clipSH3.edge.: True
    test 163 clipSH3.allin.len: 2
    test 164 clipSH3.allin.0: 15.0°N, 010.0°E
    test 165 clipSH3.allin.LL: True
    test 166 clipSH3.allin.1: 25.0°N, 020.0°E
    test 167 clipSH3.allin.LL: True
    test 168 clipSH3.edge.: True
    test 169 clipSH.allin.reversed.len: 4
    test 170 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 171 clipSH.allin.reversed.LL: True
    test 172 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 173 clipSH.allin.reversed.LL: True
    test 174 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 175 clipSH.allin.reversed.LL: True
    test 176 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 177 clipSH.allin.reversed.LL: True
    test 178 clipSH3.allin.reversed.len: 2
    test 179 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 180 clipSH3.allin.reversed.LL: True
    test 181 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 182 clipSH3.allin.reversed.LL: True
    test 183 clipSH3.edge.reversed.: True
    test 184 clipSH3.allin.reversed.len: 2
    test 185 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 186 clipSH3.allin.reversed.LL: True
    test 187 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 188 clipSH3.allin.reversed.LL: True
    test 189 clipSH3.edge.reversed.: True
    test 190 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 191 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 192 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 193 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 194 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 195 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 196 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 197 overlap: (15.0, 10.0, 20.0, 20.0)
    test 198 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 199 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 200 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 201 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 202 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 203 clipSH9: None
    test 204 clipSH10: None
    test 205 clipSH11: None
    test 206 clipSH12: None

    testing(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 207 clipCS4.p1: 07.5°N, 010.0°E
    test 208 clipCS4.p2: 04.5°N, 000.0°E
    test 209 clipCS4.i: 3
    test 210 clipCS4.j: 0
    test 211 clipCS4.p1: 05.0°N, 005.0°E
    test 212 clipCS4.p2: 05.0°N, 005.0°E
    test 213 clipCS4.i: 1
    test 214 clipCS4.j: 2
    test 215 clipLB6.p1: 07.5°N, 010.0°E
    test 216 clipLB6.p2: 04.5°N, 000.0°E
    test 217 clipLB6.i: 3
    test 218 clipLB6.fi: 3.25
    test 219 clipLB6.fi: 07.5°N, 010.0°E
    test 220 clipLB6.fj: 3.75
    test 221 clipLB6.fj: 04.5°N, 000.0°E
    test 222 clipLB6.j: 0
    test 223 clipLB6.fin: 4
    test 224 clipLB6.p1: 05.0°N, 005.0°E
    test 225 clipLB6.p2: 05.0°N, 005.0°E
    test 226 clipLB6.i: 1
    test 227 clipLB6.fi: 1.00
    test 228 clipLB6.fi: 05.0°N, 005.0°E
    test 229 clipLB6.fj: 2.00
    test 230 clipLB6.fj: 05.0°N, 005.0°E
    test 231 clipLB6.j: 2
    test 232 clipLB6.fin: 4
    test 233 clipCS4.p1: 60.0°N, 123.333333°E
    test 234 clipCS4.p2: 62.857143°N, 130.0°E
    test 235 clipCS4.i: 0
    test 236 clipCS4.j: 1
    test 237 clipLB6.p1: 60.0°N, 123.333333°E
    test 238 clipLB6.p2: 62.857143°N, 130.0°E
    test 239 clipLB6.i: 0
    test 240 clipLB6.fi: 0.666667
    test 241 clipLB6.fi: 60.0°N, 123.333333°E
    test 242 clipLB6.fj: 0.714286
    test 243 clipLB6.fj: 62.857143°N, 130.0°E
    test 244 clipLB6.j: 1
    test 245 clipLB6.fin: 0
    test 246 clipCS4.p1: 17.5°N, 020.0°E
    test 247 clipCS4.p2: 16.25°N, 015.0°E
    test 248 clipCS4.i: 2
    test 249 clipCS4.j: 0
    test 250 clipLB6.p1: 17.5°N, 020.0°E
    test 251 clipLB6.p2: 16.25°N, 015.0°E
    test 252 clipLB6.i: 2
    test 253 clipLB6.fi: 2.500
    test 254 clipLB6.fi: 17.5°N, 020.0°E
    test 255 clipLB6.fj: 2.750
    test 256 clipLB6.fj: 16.25°N, 015.0°E
    test 257 clipLB6.j: 0
    test 258 clipLB6.fin: 3
    test 259 clipSH1.len: 4
    test 260 clipSH1.0: 20.0°N, 020.0°E
    test 261 clipSH1.LL: True
    test 262 clipSH1.1: 17.5°N, 020.0°E
    test 263 clipSH1.LL: True
    test 264 clipSH1.2: 16.25°N, 015.0°E
    test 265 clipSH1.LL: True
    test 266 clipSH1.3: 20.0°N, 015.0°E
    test 267 clipSH1.LL: True
    test 268 clipSH2.len: 5
    test 269 clipSH2.0: 18.571°N, 024.286°E
    test 270 clipSH2.LL: True
    test 271 clipSH2.1: 16.667°N, 016.667°E
    test 272 clipSH2.LL: True
    test 273 clipSH2.2: 20.0°N, 015.0°E
    test 274 clipSH2.LL: True
    test 275 clipSH2.3: 25.0°N, 020.0°E
    test 276 clipSH2.LL: True
    test 277 clipSH2.4: 22.0°N, 026.0°E
    test 278 clipSH2.LL: True
    test 279 clipSH3.len: 2
    test 280 clipSH3.0: 18.571°N, 024.286°E
    test 281 clipSH3.LL: True
    test 282 clipSH3.1: 16.667°N, 016.667°E
    test 283 clipSH3.LL: True
    test 284 clipSH3.edge.: True
    test 285 clipSH3.len: 2
    test 286 clipSH3.0: 16.667°N, 016.667°E
    test 287 clipSH3.LL: True
    test 288 clipSH3.1: 20.0°N, 015.0°E
    test 289 clipSH3.LL: True
    test 290 clipSH3.edge.: False
    test 291 clipSH3.len: 2
    test 292 clipSH3.0: 20.0°N, 015.0°E
    test 293 clipSH3.LL: True
    test 294 clipSH3.1: 25.0°N, 020.0°E
    test 295 clipSH3.LL: True
    test 296 clipSH3.edge.: True
    test 297 clipSH3.len: 2
    test 298 clipSH3.0: 25.0°N, 020.0°E
    test 299 clipSH3.LL: True
    test 300 clipSH3.1: 22.0°N, 026.0°E
    test 301 clipSH3.LL: True
    test 302 clipSH3.edge.: True
    test 303 clipSH3.len: 2
    test 304 clipSH3.0: 22.0°N, 026.0°E
    test 305 clipSH3.LL: True
    test 306 clipSH3.1: 18.571°N, 024.286°E
    test 307 clipSH3.LL: True
    test 308 clipSH3.edge.: False
    test 309 clipSH2.reversed.len: 5
    test 310 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 311 clipSH2.reversed.LL: True
    test 312 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 313 clipSH2.reversed.LL: True
    test 314 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 315 clipSH2.reversed.LL: True
    test 316 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 317 clipSH2.reversed.LL: True
    test 318 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 319 clipSH2.reversed.LL: True
    test 320 clipSH3.reversed.len: 2
    test 321 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 322 clipSH3.reversed.LL: True
    test 323 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 324 clipSH3.reversed.LL: True
    test 325 clipSH3.edge.reversed.: True
    test 326 clipSH3.reversed.len: 2
    test 327 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 328 clipSH3.reversed.LL: True
    test 329 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 330 clipSH3.reversed.LL: True
    test 331 clipSH3.edge.reversed.: False
    test 332 clipSH3.reversed.len: 2
    test 333 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 334 clipSH3.reversed.LL: True
    test 335 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 336 clipSH3.reversed.LL: True
    test 337 clipSH3.edge.reversed.: True
    test 338 clipSH3.reversed.len: 2
    test 339 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 340 clipSH3.reversed.LL: True
    test 341 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 342 clipSH3.reversed.LL: True
    test 343 clipSH3.edge.reversed.: True
    test 344 clipSH3.reversed.len: 2
    test 345 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 346 clipSH3.reversed.LL: True
    test 347 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 348 clipSH3.reversed.LL: True
    test 349 clipSH3.edge.reversed.: False
    test 350 clipSH.allout: ()
    test 351 clipSH3.allout: ()
    test 352 clipSH.allout.reversed: ()
    test 353 clipSH3.allout.reversed: ()
    test 354 clipSH.allin.len: 4
    test 355 clipSH.allin.0: 20.0°N, 030.0°E
    test 356 clipSH.allin.LL: True
    test 357 clipSH.allin.1: 15.0°N, 010.0°E
    test 358 clipSH.allin.LL: True
    test 359 clipSH.allin.2: 25.0°N, 020.0°E
    test 360 clipSH.allin.LL: True
    test 361 clipSH.allin.3: 20.0°N, 030.0°E
    test 362 clipSH.allin.LL: True
    test 363 clipSH3.allin.len: 2
    test 364 clipSH3.allin.0: 20.0°N, 030.0°E
    test 365 clipSH3.allin.LL: True
    test 366 clipSH3.allin.1: 15.0°N, 010.0°E
    test 367 clipSH3.allin.LL: True
    test 368 clipSH3.edge.: True
    test 369 clipSH3.allin.len: 2
    test 370 clipSH3.allin.0: 15.0°N, 010.0°E
    test 371 clipSH3.allin.LL: True
    test 372 clipSH3.allin.1: 25.0°N, 020.0°E
    test 373 clipSH3.allin.LL: True
    test 374 clipSH3.edge.: True
    test 375 clipSH.allin.reversed.len: 4
    test 376 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 377 clipSH.allin.reversed.LL: True
    test 378 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 379 clipSH.allin.reversed.LL: True
    test 380 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 381 clipSH.allin.reversed.LL: True
    test 382 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 383 clipSH.allin.reversed.LL: True
    test 384 clipSH3.allin.reversed.len: 2
    test 385 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 386 clipSH3.allin.reversed.LL: True
    test 387 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 388 clipSH3.allin.reversed.LL: True
    test 389 clipSH3.edge.reversed.: True
    test 390 clipSH3.allin.reversed.len: 2
    test 391 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 392 clipSH3.allin.reversed.LL: True
    test 393 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 394 clipSH3.allin.reversed.LL: True
    test 395 clipSH3.edge.reversed.: True
    test 396 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 397 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 398 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 399 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 400 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 401 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 402 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 403 overlap: (15.0, 10.0, 20.0, 20.0)
    test 404 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 405 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 406 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 407 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 408 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 409 clipSH9: None
    test 410 clipSH10: None
    test 411 clipSH11: None
    test 412 clipSH12: None

    testing(pygeodesy.sphericalNvector, 22.07.07)
    test 413 clipCS4.p1: 07.5°N, 010.0°E
    test 414 clipCS4.p2: 04.5°N, 000.0°E
    test 415 clipCS4.i: 3
    test 416 clipCS4.j: 0
    test 417 clipCS4.p1: 05.0°N, 005.0°E
    test 418 clipCS4.p2: 05.0°N, 005.0°E
    test 419 clipCS4.i: 1
    test 420 clipCS4.j: 2
    test 421 clipLB6.p1: 07.5°N, 010.0°E
    test 422 clipLB6.p2: 04.5°N, 000.0°E
    test 423 clipLB6.i: 3
    test 424 clipLB6.fi: 3.25
    test 425 clipLB6.fi: 07.5°N, 010.0°E
    test 426 clipLB6.fj: 3.75
    test 427 clipLB6.fj: 04.5°N, 000.0°E
    test 428 clipLB6.j: 0
    test 429 clipLB6.fin: 4
    test 430 clipLB6.p1: 05.0°N, 005.0°E
    test 431 clipLB6.p2: 05.0°N, 005.0°E
    test 432 clipLB6.i: 1
    test 433 clipLB6.fi: 1.00
    test 434 clipLB6.fi: 05.0°N, 005.0°E
    test 435 clipLB6.fj: 2.00
    test 436 clipLB6.fj: 05.0°N, 005.0°E
    test 437 clipLB6.j: 2
    test 438 clipLB6.fin: 4
    test 439 clipCS4.p1: 60.0°N, 123.333333°E
    test 440 clipCS4.p2: 62.857143°N, 130.0°E
    test 441 clipCS4.i: 0
    test 442 clipCS4.j: 1
    test 443 clipLB6.p1: 60.0°N, 123.333333°E
    test 444 clipLB6.p2: 62.857143°N, 130.0°E
    test 445 clipLB6.i: 0
    test 446 clipLB6.fi: 0.666667
    test 447 clipLB6.fi: 60.0°N, 123.333333°E
    test 448 clipLB6.fj: 0.714286
    test 449 clipLB6.fj: 62.857143°N, 130.0°E
    test 450 clipLB6.j: 1
    test 451 clipLB6.fin: 0
    test 452 clipCS4.p1: 17.5°N, 020.0°E
    test 453 clipCS4.p2: 16.25°N, 015.0°E
    test 454 clipCS4.i: 2
    test 455 clipCS4.j: 0
    test 456 clipLB6.p1: 17.5°N, 020.0°E
    test 457 clipLB6.p2: 16.25°N, 015.0°E
    test 458 clipLB6.i: 2
    test 459 clipLB6.fi: 2.500
    test 460 clipLB6.fi: 17.5°N, 020.0°E
    test 461 clipLB6.fj: 2.750
    test 462 clipLB6.fj: 16.25°N, 015.0°E
    test 463 clipLB6.j: 0
    test 464 clipLB6.fin: 3
    test 465 clipSH1.len: 4
    test 466 clipSH1.0: 20.0°N, 020.0°E
    test 467 clipSH1.LL: True
    test 468 clipSH1.1: 17.5°N, 020.0°E
    test 469 clipSH1.LL: True
    test 470 clipSH1.2: 16.25°N, 015.0°E
    test 471 clipSH1.LL: True
    test 472 clipSH1.3: 20.0°N, 015.0°E
    test 473 clipSH1.LL: True
    test 474 clipSH2.len: 5
    test 475 clipSH2.0: 18.571°N, 024.286°E
    test 476 clipSH2.LL: True
    test 477 clipSH2.1: 16.667°N, 016.667°E
    test 478 clipSH2.LL: True
    test 479 clipSH2.2: 20.0°N, 015.0°E
    test 480 clipSH2.LL: True
    test 481 clipSH2.3: 25.0°N, 020.0°E
    test 482 clipSH2.LL: True
    test 483 clipSH2.4: 22.0°N, 026.0°E
    test 484 clipSH2.LL: True
    test 485 clipSH3.len: 2
    test 486 clipSH3.0: 18.571°N, 024.286°E
    test 487 clipSH3.LL: True
    test 488 clipSH3.1: 16.667°N, 016.667°E
    test 489 clipSH3.LL: True
    test 490 clipSH3.edge.: True
    test 491 clipSH3.len: 2
    test 492 clipSH3.0: 16.667°N, 016.667°E
    test 493 clipSH3.LL: True
    test 494 clipSH3.1: 20.0°N, 015.0°E
    test 495 clipSH3.LL: True
    test 496 clipSH3.edge.: False
    test 497 clipSH3.len: 2
    test 498 clipSH3.0: 20.0°N, 015.0°E
    test 499 clipSH3.LL: True
    test 500 clipSH3.1: 25.0°N, 020.0°E
    test 501 clipSH3.LL: True
    test 502 clipSH3.edge.: True
    test 503 clipSH3.len: 2
    test 504 clipSH3.0: 25.0°N, 020.0°E
    test 505 clipSH3.LL: True
    test 506 clipSH3.1: 22.0°N, 026.0°E
    test 507 clipSH3.LL: True
    test 508 clipSH3.edge.: True
    test 509 clipSH3.len: 2
    test 510 clipSH3.0: 22.0°N, 026.0°E
    test 511 clipSH3.LL: True
    test 512 clipSH3.1: 18.571°N, 024.286°E
    test 513 clipSH3.LL: True
    test 514 clipSH3.edge.: False
    test 515 clipSH2.reversed.len: 5
    test 516 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 517 clipSH2.reversed.LL: True
    test 518 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 519 clipSH2.reversed.LL: True
    test 520 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 521 clipSH2.reversed.LL: True
    test 522 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 523 clipSH2.reversed.LL: True
    test 524 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 525 clipSH2.reversed.LL: True
    test 526 clipSH3.reversed.len: 2
    test 527 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 528 clipSH3.reversed.LL: True
    test 529 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 530 clipSH3.reversed.LL: True
    test 531 clipSH3.edge.reversed.: True
    test 532 clipSH3.reversed.len: 2
    test 533 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 534 clipSH3.reversed.LL: True
    test 535 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 536 clipSH3.reversed.LL: True
    test 537 clipSH3.edge.reversed.: False
    test 538 clipSH3.reversed.len: 2
    test 539 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 540 clipSH3.reversed.LL: True
    test 541 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 542 clipSH3.reversed.LL: True
    test 543 clipSH3.edge.reversed.: True
    test 544 clipSH3.reversed.len: 2
    test 545 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 546 clipSH3.reversed.LL: True
    test 547 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 548 clipSH3.reversed.LL: True
    test 549 clipSH3.edge.reversed.: True
    test 550 clipSH3.reversed.len: 2
    test 551 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 552 clipSH3.reversed.LL: True
    test 553 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 554 clipSH3.reversed.LL: True
    test 555 clipSH3.edge.reversed.: False
    test 556 clipSH.allout: ()
    test 557 clipSH3.allout: ()
    test 558 clipSH.allout.reversed: ()
    test 559 clipSH3.allout.reversed: ()
    test 560 clipSH.allin.len: 4
    test 561 clipSH.allin.0: 20.0°N, 030.0°E
    test 562 clipSH.allin.LL: True
    test 563 clipSH.allin.1: 15.0°N, 010.0°E
    test 564 clipSH.allin.LL: True
    test 565 clipSH.allin.2: 25.0°N, 020.0°E
    test 566 clipSH.allin.LL: True
    test 567 clipSH.allin.3: 20.0°N, 030.0°E
    test 568 clipSH.allin.LL: True
    test 569 clipSH3.allin.len: 2
    test 570 clipSH3.allin.0: 20.0°N, 030.0°E
    test 571 clipSH3.allin.LL: True
    test 572 clipSH3.allin.1: 15.0°N, 010.0°E
    test 573 clipSH3.allin.LL: True
    test 574 clipSH3.edge.: True
    test 575 clipSH3.allin.len: 2
    test 576 clipSH3.allin.0: 15.0°N, 010.0°E
    test 577 clipSH3.allin.LL: True
    test 578 clipSH3.allin.1: 25.0°N, 020.0°E
    test 579 clipSH3.allin.LL: True
    test 580 clipSH3.edge.: True
    test 581 clipSH.allin.reversed.len: 4
    test 582 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 583 clipSH.allin.reversed.LL: True
    test 584 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 585 clipSH.allin.reversed.LL: True
    test 586 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 587 clipSH.allin.reversed.LL: True
    test 588 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 589 clipSH.allin.reversed.LL: True
    test 590 clipSH3.allin.reversed.len: 2
    test 591 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 592 clipSH3.allin.reversed.LL: True
    test 593 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 594 clipSH3.allin.reversed.LL: True
    test 595 clipSH3.edge.reversed.: True
    test 596 clipSH3.allin.reversed.len: 2
    test 597 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 598 clipSH3.allin.reversed.LL: True
    test 599 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 600 clipSH3.allin.reversed.LL: True
    test 601 clipSH3.edge.reversed.: True
    test 602 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 603 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 604 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 605 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 606 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 607 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 608 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 609 overlap: (15.0, 10.0, 20.0, 20.0)
    test 610 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 611 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 612 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 613 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 614 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 615 clipSH9: None
    test 616 clipSH10: None
    test 617 clipSH11: None
    test 618 clipSH12: None

    testing(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 619 clipCS4.p1: 07.5°N, 010.0°E
    test 620 clipCS4.p2: 04.5°N, 000.0°E
    test 621 clipCS4.i: 3
    test 622 clipCS4.j: 0
    test 623 clipCS4.p1: 05.0°N, 005.0°E
    test 624 clipCS4.p2: 05.0°N, 005.0°E
    test 625 clipCS4.i: 1
    test 626 clipCS4.j: 2
    test 627 clipLB6.p1: 07.5°N, 010.0°E
    test 628 clipLB6.p2: 04.5°N, 000.0°E
    test 629 clipLB6.i: 3
    test 630 clipLB6.fi: 3.25
    test 631 clipLB6.fi: 07.5°N, 010.0°E
    test 632 clipLB6.fj: 3.75
    test 633 clipLB6.fj: 04.5°N, 000.0°E
    test 634 clipLB6.j: 0
    test 635 clipLB6.fin: 4
    test 636 clipLB6.p1: 05.0°N, 005.0°E
    test 637 clipLB6.p2: 05.0°N, 005.0°E
    test 638 clipLB6.i: 1
    test 639 clipLB6.fi: 1.00
    test 640 clipLB6.fi: 05.0°N, 005.0°E
    test 641 clipLB6.fj: 2.00
    test 642 clipLB6.fj: 05.0°N, 005.0°E
    test 643 clipLB6.j: 2
    test 644 clipLB6.fin: 4
    test 645 clipCS4.p1: 60.0°N, 123.333333°E
    test 646 clipCS4.p2: 62.857143°N, 130.0°E
    test 647 clipCS4.i: 0
    test 648 clipCS4.j: 1
    test 649 clipLB6.p1: 60.0°N, 123.333333°E
    test 650 clipLB6.p2: 62.857143°N, 130.0°E
    test 651 clipLB6.i: 0
    test 652 clipLB6.fi: 0.666667
    test 653 clipLB6.fi: 60.0°N, 123.333333°E
    test 654 clipLB6.fj: 0.714286
    test 655 clipLB6.fj: 62.857143°N, 130.0°E
    test 656 clipLB6.j: 1
    test 657 clipLB6.fin: 0
    test 658 clipCS4.p1: 17.5°N, 020.0°E
    test 659 clipCS4.p2: 16.25°N, 015.0°E
    test 660 clipCS4.i: 2
    test 661 clipCS4.j: 0
    test 662 clipLB6.p1: 17.5°N, 020.0°E
    test 663 clipLB6.p2: 16.25°N, 015.0°E
    test 664 clipLB6.i: 2
    test 665 clipLB6.fi: 2.500
    test 666 clipLB6.fi: 17.5°N, 020.0°E
    test 667 clipLB6.fj: 2.750
    test 668 clipLB6.fj: 16.25°N, 015.0°E
    test 669 clipLB6.j: 0
    test 670 clipLB6.fin: 3
    test 671 clipSH1.len: 4
    test 672 clipSH1.0: 20.0°N, 020.0°E
    test 673 clipSH1.LL: True
    test 674 clipSH1.1: 17.5°N, 020.0°E
    test 675 clipSH1.LL: True
    test 676 clipSH1.2: 16.25°N, 015.0°E
    test 677 clipSH1.LL: True
    test 678 clipSH1.3: 20.0°N, 015.0°E
    test 679 clipSH1.LL: True
    test 680 clipSH2.len: 5
    test 681 clipSH2.0: 18.571°N, 024.286°E
    test 682 clipSH2.LL: True
    test 683 clipSH2.1: 16.667°N, 016.667°E
    test 684 clipSH2.LL: True
    test 685 clipSH2.2: 20.0°N, 015.0°E
    test 686 clipSH2.LL: True
    test 687 clipSH2.3: 25.0°N, 020.0°E
    test 688 clipSH2.LL: True
    test 689 clipSH2.4: 22.0°N, 026.0°E
    test 690 clipSH2.LL: True
    test 691 clipSH3.len: 2
    test 692 clipSH3.0: 18.571°N, 024.286°E
    test 693 clipSH3.LL: True
    test 694 clipSH3.1: 16.667°N, 016.667°E
    test 695 clipSH3.LL: True
    test 696 clipSH3.edge.: True
    test 697 clipSH3.len: 2
    test 698 clipSH3.0: 16.667°N, 016.667°E
    test 699 clipSH3.LL: True
    test 700 clipSH3.1: 20.0°N, 015.0°E
    test 701 clipSH3.LL: True
    test 702 clipSH3.edge.: False
    test 703 clipSH3.len: 2
    test 704 clipSH3.0: 20.0°N, 015.0°E
    test 705 clipSH3.LL: True
    test 706 clipSH3.1: 25.0°N, 020.0°E
    test 707 clipSH3.LL: True
    test 708 clipSH3.edge.: True
    test 709 clipSH3.len: 2
    test 710 clipSH3.0: 25.0°N, 020.0°E
    test 711 clipSH3.LL: True
    test 712 clipSH3.1: 22.0°N, 026.0°E
    test 713 clipSH3.LL: True
    test 714 clipSH3.edge.: True
    test 715 clipSH3.len: 2
    test 716 clipSH3.0: 22.0°N, 026.0°E
    test 717 clipSH3.LL: True
    test 718 clipSH3.1: 18.571°N, 024.286°E
    test 719 clipSH3.LL: True
    test 720 clipSH3.edge.: False
    test 721 clipSH2.reversed.len: 5
    test 722 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 723 clipSH2.reversed.LL: True
    test 724 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 725 clipSH2.reversed.LL: True
    test 726 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 727 clipSH2.reversed.LL: True
    test 728 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 729 clipSH2.reversed.LL: True
    test 730 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 731 clipSH2.reversed.LL: True
    test 732 clipSH3.reversed.len: 2
    test 733 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 734 clipSH3.reversed.LL: True
    test 735 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 736 clipSH3.reversed.LL: True
    test 737 clipSH3.edge.reversed.: True
    test 738 clipSH3.reversed.len: 2
    test 739 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 740 clipSH3.reversed.LL: True
    test 741 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 742 clipSH3.reversed.LL: True
    test 743 clipSH3.edge.reversed.: False
    test 744 clipSH3.reversed.len: 2
    test 745 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 746 clipSH3.reversed.LL: True
    test 747 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 748 clipSH3.reversed.LL: True
    test 749 clipSH3.edge.reversed.: True
    test 750 clipSH3.reversed.len: 2
    test 751 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 752 clipSH3.reversed.LL: True
    test 753 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 754 clipSH3.reversed.LL: True
    test 755 clipSH3.edge.reversed.: True
    test 756 clipSH3.reversed.len: 2
    test 757 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 758 clipSH3.reversed.LL: True
    test 759 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 760 clipSH3.reversed.LL: True
    test 761 clipSH3.edge.reversed.: False
    test 762 clipSH.allout: ()
    test 763 clipSH3.allout: ()
    test 764 clipSH.allout.reversed: ()
    test 765 clipSH3.allout.reversed: ()
    test 766 clipSH.allin.len: 4
    test 767 clipSH.allin.0: 20.0°N, 030.0°E
    test 768 clipSH.allin.LL: True
    test 769 clipSH.allin.1: 15.0°N, 010.0°E
    test 770 clipSH.allin.LL: True
    test 771 clipSH.allin.2: 25.0°N, 020.0°E
    test 772 clipSH.allin.LL: True
    test 773 clipSH.allin.3: 20.0°N, 030.0°E
    test 774 clipSH.allin.LL: True
    test 775 clipSH3.allin.len: 2
    test 776 clipSH3.allin.0: 20.0°N, 030.0°E
    test 777 clipSH3.allin.LL: True
    test 778 clipSH3.allin.1: 15.0°N, 010.0°E
    test 779 clipSH3.allin.LL: True
    test 780 clipSH3.edge.: True
    test 781 clipSH3.allin.len: 2
    test 782 clipSH3.allin.0: 15.0°N, 010.0°E
    test 783 clipSH3.allin.LL: True
    test 784 clipSH3.allin.1: 25.0°N, 020.0°E
    test 785 clipSH3.allin.LL: True
    test 786 clipSH3.edge.: True
    test 787 clipSH.allin.reversed.len: 4
    test 788 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 789 clipSH.allin.reversed.LL: True
    test 790 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 791 clipSH.allin.reversed.LL: True
    test 792 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 793 clipSH.allin.reversed.LL: True
    test 794 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 795 clipSH.allin.reversed.LL: True
    test 796 clipSH3.allin.reversed.len: 2
    test 797 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 798 clipSH3.allin.reversed.LL: True
    test 799 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 800 clipSH3.allin.reversed.LL: True
    test 801 clipSH3.edge.reversed.: True
    test 802 clipSH3.allin.reversed.len: 2
    test 803 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 804 clipSH3.allin.reversed.LL: True
    test 805 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 806 clipSH3.allin.reversed.LL: True
    test 807 clipSH3.edge.reversed.: True
    test 808 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 809 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 810 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 811 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 812 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 813 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 814 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 815 overlap: (15.0, 10.0, 20.0, 20.0)
    test 816 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 817 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 818 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 819 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 820 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 821 clipSH9: None
    test 822 clipSH10: None
    test 823 clipSH11: None
    test 824 clipSH12: None

    all 824 testClipy.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 47.915 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testCss.py

    testing testCss.py 22.05.03 (module pygeodesy.css 22.07.04)
    test 1 CassiniSoldner(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 Exact: False
    test 3 forward: -37518.854545, 230003.561828
    test 4 reverse: 50.9, 1.8
    test 5 forward4: -37518.854545, 230003.561828, 89.586104, 0.999983
    test 6 equatorarc: 89.662511
    test 7 equatorazimuth: 39.192992
    test 8 copy(CassiniSoldner): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 9 CassiniSoldner.copy(): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 10 reverse: 50.899937, 1.793161
    test 11 forward: -38000.0, 230000.0
    test 12 reverse4: 50.899937, 1.793161, 89.580797, 0.999982
    test 13 reverse(pygeodesy.ellipsoidalKarney): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 14 reverse(pygeodesy.ellipsoidalExact): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 15 reverse(pygeodesy.ellipsoidalNvector): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 16 reverse(pygeodesy.ellipsoidalVincenty): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 17 CassiniSoldner(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 18 forward: 170557.151692, -293280.6051
    test 19 reverse: 48.833333, 2.333333
    test 20 hypot: 339268.707  FAILED, KNOWN, expected 338901.865
    test 21 toCss: -37518.854545 230003.561828 +1.00m
    test 22 toCss: [E:-37518.854545, N:230003.561828, H:+1.00m, name:'Calais', C:CassiniSoldner(48.833333, 2.333333, name='Paris')]
    test 23 Css.easting: -37518.854545
    test 24 Css.northing: 230003.561828
    test 25 Css.height: 1.0
    test 26 Css.azi: 89.586103815
    test 27 Css.rk: 0.999982722
    test 28 Css.name: Calais
    test 29 Css.cs0: 48.833333 2.333333
    test 30 Css.toLatLon: LatLon(50°54′00.0″N, 001°48′00.0″E, +1.00m)
    test 31 Css.toLatLon.height: 1.0
    test 32 Css.toLatLon.name: Calais
    test 33 Css.toLatLon.datum.name: WGS84
    test 34 Css.toLatLon.height: 1.0  FAILED, KNOWN, expected height(1.0)
    test 35 copy(Css): (<class 'pygeodesy.css.Css'>, True)
    test 36 Css.copy(): (<class 'pygeodesy.css.Css'>, True)
    test 37 cs0.name: Paris
    test 38 cs0.name: Default
    test 39 cs0.flattening: 0.003352811
    test 40 cs0.lat0: 0.0
    test 41 cs0.equatoradius: 6378137.0
    test 42 cs0.lat0: 0.0  FAILED, KNOWN, expected lat(0.0)
    test 43 classof.height: 1.0
    test 44 classof.azi: 89.586103815
    test 45 classof.rk: 0.999982722
    test 46 classof.name: Calais
    test 47 classof.cs0: 48.833333 2.333333
    test 48 cs0.latlon0: (48.833333, 2.333333)
    test 49 cs0.latlon0: (48.833333, 2.333333)
    test 50 cs0.latlon0: latlon0 (None): 'NoneType' object has no attribute 'lat'
    test 51 cs0.latlon0: (48.0, 2.0)
    test 52 datum: True
    test 53 datum: False
    test 54 forward6: (39142.269011, -229679.266845, 90.401497, 0.999981, 90.352206, 41.257592)

    3 of 54 testCss.py tests (5.6%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 4.727 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testDatums.py

    testing testDatums.py 22.07.01 (module pygeodesy.datums 22.07.05)
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000
    test 5 TestTransform: name='TestTransform', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True
    test 8 Sphere: True

    all 8 testDatums.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 566.006 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testDeprecated.py
./pygeodesy/deprecated/__init__.py:114: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW} has been DEPRECATED, use class L{HeightIDWeuclidean}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/__init__.py:128: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW2} has been DEPRECATED, use class L{HeightIDWequirectangular}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/__init__.py:143: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW3} has been DEPRECATED, use class L{HeightIDWhaversine}.
  deprecated_class(self.__class__)
./test/testDeprecated.py:38: DeprecationWarning: function L{pygeodesy.deprecated.areaof} has been DEPRECATED, use function L{pygeodesy.areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')
./test/testDeprecated.py:41: DeprecationWarning: function L{pygeodesy.deprecated.bounds} has been DEPRECATED, use function L{pygeodesy.boundsOf}.
  b = map2(float, bounds(p))
./test/testDeprecated.py:44: DeprecationWarning: function L{pygeodesy.deprecated.anStr} has been DEPRECATED, use function L{pygeodesy.anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')
./test/testDeprecated.py:46: DeprecationWarning: function L{pygeodesy.deprecated.clipStr} has been DEPRECATED, use function L{pygeodesy.clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")
./test/testDeprecated.py:49: DeprecationWarning: function L{pygeodesy.deprecated.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')
./test/testDeprecated.py:51: DeprecationWarning: function L{pygeodesy.deprecated.equirectangular3} has been DEPRECATED, use function C{equirectangular_}.
  t = equirectangular3(0, 2, 3, 4)
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')
./test/testDeprecated.py:60: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')
./test/testDeprecated.py:62: DeprecationWarning: function L{pygeodesy.deprecated.hypot3} has been DEPRECATED, use function L{pygeodesy.hypot_}.
  h = hypot3(3000, 200, 10)
./test/testDeprecated.py:67: DeprecationWarning: function L{pygeodesy.deprecated.isenclosedby} has been DEPRECATED, use function L{pygeodesy.isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)
./test/testDeprecated.py:71: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn3} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn3(p, b, adjust=False)
./test/testDeprecated.py:74: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn4} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn4(p, b, adjust=False)
./test/testDeprecated.py:78: DeprecationWarning: function L{pygeodesy.deprecated.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # Milford, PA
./test/testDeprecated.py:82: DeprecationWarning: function L{pygeodesy.deprecated.perimeterof} has been DEPRECATED, use function L{perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')
./test/testDeprecated.py:85: DeprecationWarning: function L{pygeodesy.deprecated.polygon} has been DEPRECATED, use function L{points2}.
  self.test('polygon', polygon(p)[0], 3)
./test/testDeprecated.py:87: DeprecationWarning: function L{pygeodesy.deprecated.simplify2} has been DEPRECATED, use function L{pygeodesy.simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)
./test/testDeprecated.py:90: DeprecationWarning: function L{pygeodesy.deprecated.toUtm} has been DEPRECATED, use function L{pygeodesy.toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')
./test/testDeprecated.py:93: DeprecationWarning: function L{pygeodesy.deprecated.utmZoneBand2} has been DEPRECATED, use function L{pygeodesy.utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')

    testing testDeprecated.py 22.05.27 (module pygeodesy.deprecated 22.07.05)

    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True

    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 fStr: 0.123
    test 18 hypot3: 3006.675905
    test 19 isenclosedby: True
    test 20 nearestOn3: 3
    test 21 nearestOn3: (45.5, 1.5)
    test 22 nearestOn4: 4
    test 23 nearestOn4: (45.5, 1.5)
    test 24 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 25 perimeterof: 2.687460e+05
    test 26 polygon: 3
    test 27 simplify2: 4
    test 28 toUtm: 6
    test 29 utmZoneBand2: (11, 'U')

    test 30 HeightIDW: True
    test 31 HeightIDW2: True
    test 32 HeightIDW3: True

    test 33 areaof: 7.086883e+09
    test 34 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 35 anStr: a-b__
    test 36 clipStr: test/t....ics.py
    test 37 decodeEPSG2: (12, 'S')
    test 38 encodeEPSG: 32712
    test 39 equirectangular3: 3
    test 40 equirectangular3: 12.997
    test 41 fStr: 0.123000
    test 42 fStr: 0.123
    test 43 fStr: 0.123, 456.789
    test 44 fStr: 1.23000e-01
    test 45 fStr: 1.23e-01
    test 46 fStr: 0.123
    test 47 hypot3: 3006.675905
    test 48 isenclosedby: True
    test 49 nearestOn3: 3
    test 50 nearestOn3: (45.5, 1.5)
    test 51 nearestOn4: 4
    test 52 nearestOn4: (45.5, 1.5)
    test 53 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 54 perimeterof: 2.687460e+05
    test 55 polygon: 3
    test 56 simplify2: 4
    test 57 toUtm: 6
    test 58 utmZoneBand2: (11, 'U')

    test 59 HeightIDW: True
    test 60 HeightIDW2: True
    test 61 HeightIDW3: True

    test 62 areaof: 7.086883e+09
    test 63 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 64 anStr: a-b__
    test 65 clipStr: test/t....ics.py
    test 66 decodeEPSG2: (12, 'S')
    test 67 encodeEPSG: 32712
    test 68 equirectangular3: 3
    test 69 equirectangular3: 12.997
    test 70 fStr: 0.123000
    test 71 fStr: 0.123
    test 72 fStr: 0.123, 456.789
    test 73 fStr: 1.23000e-01
    test 74 fStr: 1.23e-01
    test 75 fStr: 0.123
    test 76 hypot3: 3006.675905
    test 77 isenclosedby: True
    test 78 nearestOn3: 3
    test 79 nearestOn3: (45.5, 1.5)
    test 80 nearestOn4: 4
    test 81 nearestOn4: (45.5, 1.5)
    test 82 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 83 perimeterof: 2.687460e+05
    test 84 polygon: 3
    test 85 simplify2: 4
    test 86 toUtm: 6
    test 87 utmZoneBand2: (11, 'U')

    78 of 87 testDeprecated.py tests (89.7%) FAILED, incl. 78 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 6.016 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testDms.py

    testing testDms.py 22.02.03 (module pygeodesy.dms 22.07.04)
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS(76.5432, sexagecimal=False): 76.5432
    test 66 parseDDDMMSS(76.5432, sexagecimal=True): 76.9089
    test 67 parseDDDMMSS(00.0102, sexagecimal=False): 0.0102
    test 68 parseDDDMMSS(00.0102, sexagecimal=True): 0.0172
    test 69 parseDDDMMSS('12E'): ParseError("sexagecimal (False), strDDDMMSS ('12E') or suffix ('NSEW'): form DD applies N-S: invalid")
    test 70 parseDMS('12E'): 12.0
    test 71 parseDDDMMSS('012.3S'): ParseError("sexagecimal (False), strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 72 parseDMS('012.3S'): -12.3
    test 73 parseDDDMMSS('123N'): ParseError("sexagecimal (False), strDDDMMSS ('123N') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 74 parseDMS('123N'): 123.0
    test 75 parseDDDMMSS('1234E'): ParseError("sexagecimal (False), strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 76 parseDMS('1234E'): 1234.0
    test 77 parseDDDMMSS('12345N'): ParseError("sexagecimal (False), strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMM applies E-W: invalid")
    test 78 parseDMS('12345N'): 12345.0
    test 79 parseDDDMMSS('1234.5W'): ParseError("sexagecimal (False), strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 80 parseDMS('1234.5W'): -1234.5
    test 81 parseDDDMMSS('123456E'): ParseError("sexagecimal (False), strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 82 parseDMS('123456E'): 123456.0
    test 83 parseDDDMMSS('1234567S'): ParseError("sexagecimal (False), strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 84 parseDMS('1234567S'): -1234567.0
    test 85 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 86 parseDMS: strDMS (-91) or suffix ('NSEW'): -91 beyond -90.0 degrees
    test 87 parse3llh: 51.477811, -0.001475, 0.0
    test 88 toDMS(dm): 46°00.0′
    test 89 toDMS(dm): 46°00.0′
    test 90 toDMS(dm): 45°59.99′
    test 91 toDMS(dm): 45°59.999′
    test 92 toDMS(dms): 46°00′00.0″
    test 93 toDMS(dms): 45°59′59.96″
    test 94 toDMS(dms): 45°59′59.964″
    test 95 toDMS(d60): 45.5959964
    test 96 toDMS(d60): 45°45′45.36″
    test 97 toDMS(d60): 45d45m45.36s
    test 98 normDMS: 45°45′45.36″
    test 99 parseDMS: 45.7626
    test 100 toDMS(d): 45.7626°
    test 101 toDMS(d): -45.7626°
    test 102 toDMS(dm): 45°45.756′
    test 103 toDMS(dm): -45°45.756′
    test 104 toDMS(dms): 45°45′45.36″
    test 105 toDMS(dms): -45°45′45.36″
    test 106 toDMS(deg): 45.7626
    test 107 toDMS(deg): -45.7626
    test 108 toDMS(min): 4545.756
    test 109 toDMS(min): -4545.756
    test 110 toDMS(sec): 454545.36
    test 111 toDMS(sec): -454545.36
    test 112 toDMS(rad): 0.79871
    test 113 toDMS(rad): -0.79871
    test 114 toDMS(d60): 45.4545
    test 115 toDMS(d60): -45.4545
    test 116 toDMS(d): 45.7626°
    test 117 toDMS(d): -45.7626°
    test 118 toDMS(dm): 45°45.7560′
    test 119 toDMS(dm): -45°45.7560′
    test 120 toDMS(dms): 45°45′45.36″
    test 121 toDMS(dms): -45°45′45.36″
    test 122 toDMS(deg): 45.762600
    test 123 toDMS(deg): -45.762600
    test 124 toDMS(min): 4545.75600
    test 125 toDMS(min): -4545.75600
    test 126 toDMS(sec): 454545.360
    test 127 toDMS(sec): -454545.360
    test 128 toDMS(rad): 0.798708
    test 129 toDMS(rad): -0.798708
    test 130 toDMS(d60): 45.4545360
    test 131 toDMS(d60): -45.4545360
    test 132 toDMS(-d): 45.7626°
    test 133 toDMS(-d): -45.7626°
    test 134 toDMS(-dm): 45°45.7560′
    test 135 toDMS(-dm): -45°45.7560′
    test 136 toDMS(-dms): 45°45′45.36″
    test 137 toDMS(-dms): -45°45′45.36″
    test 138 toDMS(-deg): 45.762600
    test 139 toDMS(-deg): -45.762600
    test 140 toDMS(-min): 4545.75600
    test 141 toDMS(-min): -4545.75600
    test 142 toDMS(-sec): 454545.360
    test 143 toDMS(-sec): -454545.360
    test 144 toDMS(-rad): 0.798708
    test 145 toDMS(-rad): -0.798708
    test 146 toDMS(-d60): 45.45453600
    test 147 toDMS(-d60): -45.45453600
    test 148 toDMS(+d): +45.7626°
    test 149 toDMS(+d): -45.7626°
    test 150 toDMS(+dm): +45°45.7560′
    test 151 toDMS(+dm): -45°45.7560′
    test 152 toDMS(+dms): +45°45′45.36″
    test 153 toDMS(+dms): -45°45′45.36″
    test 154 toDMS(+deg): +45.762600
    test 155 toDMS(+deg): -45.762600
    test 156 toDMS(+min): +4545.75600
    test 157 toDMS(+min): -4545.75600
    test 158 toDMS(+sec): +454545.360
    test 159 toDMS(+sec): -454545.360
    test 160 toDMS(+rad): +0.798708
    test 161 toDMS(+rad): -0.798708
    test 162 toDMS(+d60): +45.454536
    test 163 toDMS(+d60): -45.454536
    test 164 compassPoint(1,): N
    test 165 compassPoint(0,): N
    test 166 compassPoint(-1,): N
    test 167 compassPoint(359,): N
    test 168 compassPoint(24,): NNE
    test 169 compassPoint(24, 1): N
    test 170 compassPoint(24, 2): NE
    test 171 compassPoint(24, 3): NNE
    test 172 compassPoint(226,): SW
    test 173 compassPoint(226, 1): W
    test 174 compassPoint(226, 2): SW
    test 175 compassPoint(226, 3): SW
    test 176 compassPoint(237,): WSW
    test 177 compassPoint(237, 1): W
    test 178 compassPoint(237, 2): SW
    test 179 compassPoint(237, 3): WSW
    test 180 compassPoint(11.25,): NNE
    test 181 compassPoint(11.249,): N
    test 182 compassPoint(-11.25,): N
    test 183 compassPoint(348.749,): NNW
    test 184 compassPoint(45, 1): E
    test 185 compassPoint(44.99, 1): N
    test 186 compassPoint(45, 2): NE
    test 187 compassPoint(44.99, 2): NE
    test 188 compassPoint(45, 3): NE
    test 189 compassPoint(44.99, 3): NE
    test 190 compassPoint(45, 4): NE
    test 191 compassPoint(44.99, 4): NE
    test 192 compassPoint(22.5, 1): N
    test 193 compassPoint(22.49, 1): N
    test 194 compassPoint(22.5, 2): NE
    test 195 compassPoint(22.49, 2): N
    test 196 compassPoint(22.5, 3): NNE
    test 197 compassPoint(22.49, 3): NNE
    test 198 compassPoint(22.5, 4): NNE
    test 199 compassPoint(22.49, 4): NNE
    test 200 compassPoint(11.25, 1): N
    test 201 compassPoint(11.249, 1): N
    test 202 compassPoint(11.25, 2): N
    test 203 compassPoint(11.249, 2): N
    test 204 compassPoint(11.25, 3): NNE
    test 205 compassPoint(11.249, 3): N
    test 206 compassPoint(11.25, 4): NbE
    test 207 compassPoint(11.249, 4): NbE
    test 208 compassPoint(24, 1): N
    test 209 compassPoint(24, 2): NE
    test 210 compassPoint(24, 3): NNE
    test 211 compassPoint(24,): NNE
    test 212 compassPoint(18, 3): NNE
    test 213 compassPoint(11, 4): NbE
    test 214 compassPoint(30, 4): NEbN
    test 215 compassPoint(11.25): NbE
    test 216 compassPoint(33.75): NEbN
    test 217 compassPoint(56.25): NEbE
    test 218 compassPoint(78.75): EbN
    test 219 compassPoint(101.25): EbS
    test 220 compassPoint(123.75): SEbE
    test 221 compassPoint(146.25): SEbS
    test 222 compassPoint(168.75): SbE
    test 223 compassPoint(191.25): SbW
    test 224 compassPoint(213.75): SWbS
    test 225 compassPoint(236.25): SWbW
    test 226 compassPoint(258.75): WbS
    test 227 compassPoint(281.25): WbN
    test 228 compassPoint(303.75): NWbW
    test 229 compassPoint(326.25): NWbN
    test 230 compassPoint(348.75): NbW
    test 231 _DEG: +1.0101
    test 232 _MIN: +0.606′
    test 233 _SEC: +36.36″

    all 233 testDms.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 2.732 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEcef.py

    testing testEcef.py 22.05.14

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 Vermeille: (65.772506, 169.060801)
    test 36 Vermeille: (1.147947, 3.141593)
    test 37 reverse-1: 45.0, 120.0, 1000.0
    test 38 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 39 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 40 philam-1: 0.7854, 2.0944
    test 41 reverse-2: 45.0, 120.0, 2000.0
    test 42 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 43 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 44 philam-2: 0.7854, 2.0944
    test 45 reverse-3: 45.0, 120.0, 3000.0
    test 46 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 47 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 48 philam-3: 0.7854, 2.0944
    test 49 reverse-4: 45.0, 120.0, 4000.0
    test 50 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 51 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 52 philam-4: 0.7854, 2.0944
    test 53 reverse-5: 45.0, 120.0, 10000.0
    test 54 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 55 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 56 philam-5: 0.7854, 2.0944
    test 57 reverse-6: 45.0, 120.0, 20000.0
    test 58 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 59 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 60 philam-6: 0.7854, 2.0944
    test 61 reverse-7: 45.0, 120.0, 100000.0
    test 62 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 63 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 64 philam-7: 0.7854, 2.0944
    test 65 reverse-8: 45.0, 120.0, 800000.0
    test 66 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 67 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 68 philam-8: 0.7854, 2.0944
    test 69 reverse-9: 45.0, 120.0, 1000000.0
    test 70 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 71 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 72 philam-9: 0.7854, 2.0944
    test 73 sudano: 45.0, 0.0, 100000.0
    test 74 name: OS-UK
    test 75 forward: 53.61199036, -1.66444222, 299.8
    test 76 forward: 3790644.9, -110149.21, 5111482.97
    test 77 reverse: 3790644.9, -110149.21, 5111482.97
    test 78 reverse: 53.61199036, -1.66444223
    test 79 reverse.lat: 53°36′43.1653″N
    test 80 reverse.lon: 001°39′51.992″W
    test 81 reverse.height: 299.800
    test 82 case: 2
    test 83 iteration: None
    test 84 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 85 reverse: 34.0, -117.333569, 251.702
    test 86 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 87 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 88 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 89 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 90 EcefFarrell21: ...
    test 91 name: Test
    test 92 toStr: EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell21
    test 93 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell21
    test 94 copy(EcefFarrell21): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 95 EcefFarrell21.copy(): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 96 forward: 27.99, 86.93, 8820.0
    test 97 forward: 302271.4, 5635928.4, 2979666.1
    test 98 name: Test
    test 99 reverse: 302271.4, 5635928.4, 2979666.1
    test 100 reverse: 27.99, 86.93, 8820.01
    test 101 case: 1
    test 102 iteration: None
    test 103 name: Test
    test 104 reverse: 302000.0, 5636000.0, 2980000.0
    test 105 reverse: 27.99, 86.93, 9027.03
    test 106 case: 1
    test 107 iteration: None
    test 108 forward: 27.99, 86.93, 8820.0
    test 109 forward: 302271.43, 5635928.37, 2979666.13
    test 110 forward: 33.3, 44.4, 6000.0
    test 111 forward: 3816209.6, 3737108.55, 3485109.57
    test 112 reverse: 3816209.6, 3737108.55, 3485109.57
    test 113 reverse: 33.3, 44.4, 5999.996
    test 114 case: 1
    test 115 iteration: None
    test 116 reverse: 30000.0, 30000.0, 0.0
    test 117 reverse: 0.0, 45.0, -6335168.061  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 118 case: 1
    test 119 iteration: None
    test 120 forward: 6.483, 45.0, -6335709.726
    test 121 forward: 30000.0, 30000.0, -0.0
    test 122 Vermeille: -168.919
    test 123 Vermeille: 190.939
    test 124 Vermeille: (65.772506, 169.060801)
    test 125 Vermeille: (1.147947, 3.141593)
    test 126 reverse-1: 45.0, 120.0, 1000.0
    test 127 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 128 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 129 philam-1: 0.7854, 2.0944
    test 130 reverse-2: 45.0, 120.0, 2000.0
    test 131 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 132 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 133 philam-2: 0.7854, 2.0944
    test 134 reverse-3: 45.0, 120.0, 3000.0
    test 135 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 136 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 137 philam-3: 0.7854, 2.0944
    test 138 reverse-4: 45.0, 120.0, 4000.0
    test 139 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 140 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 141 philam-4: 0.7854, 2.0944
    test 142 reverse-5: 45.0, 120.0, 10000.0
    test 143 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 144 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 145 philam-5: 0.7854, 2.0944
    test 146 reverse-6: 45.0, 120.0, 20000.0
    test 147 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 148 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 149 philam-6: 0.7854, 2.0944
    test 150 reverse-7: 45.0, 120.0, 100000.0
    test 151 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 152 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 153 philam-7: 0.7854, 2.0944
    test 154 reverse-8: 45.0, 120.0, 800000.0
    test 155 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 156 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 157 philam-8: 0.7854, 2.0944
    test 158 reverse-9: 45.0, 120.0, 1000000.0
    test 159 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 160 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 161 philam-9: 0.7854, 2.0944
    test 162 sudano: 45.0, 0.0, 100000.0
    test 163 name: OS-UK
    test 164 forward: 53.61199036, -1.66444222, 299.8
    test 165 forward: 3790644.9, -110149.21, 5111482.97
    test 166 reverse: 3790644.9, -110149.21, 5111482.97
    test 167 reverse: 53.61199036, -1.66444223
    test 168 reverse.lat: 53°36′43.1653″N
    test 169 reverse.lon: 001°39′51.992″W
    test 170 reverse.height: 299.800
    test 171 case: 1
    test 172 iteration: None
    test 173 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 174 reverse: 34.0, -117.333569, 251.702
    test 175 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 176 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6292741.654168, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 177 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 178 EcefFarrell21: EcefFarrell21(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell21

    test 179 EcefFarrell22: ...
    test 180 name: Test
    test 181 toStr: EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell22
    test 182 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell22
    test 183 copy(EcefFarrell22): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 184 EcefFarrell22.copy(): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 185 forward: 27.99, 86.93, 8820.0
    test 186 forward: 302271.4, 5635928.4, 2979666.1
    test 187 name: Test
    test 188 reverse: 302271.4, 5635928.4, 2979666.1
    test 189 reverse: 27.99, 86.93, 8820.01
    test 190 case: 1
    test 191 iteration: None
    test 192 name: Test
    test 193 reverse: 302000.0, 5636000.0, 2980000.0
    test 194 reverse: 27.99, 86.93, 9027.03
    test 195 case: 1
    test 196 iteration: None
    test 197 forward: 27.99, 86.93, 8820.0
    test 198 forward: 302271.43, 5635928.37, 2979666.13
    test 199 forward: 33.3, 44.4, 6000.0
    test 200 forward: 3816209.6, 3737108.55, 3485109.57
    test 201 reverse: 3816209.6, 3737108.55, 3485109.57
    test 202 reverse: 33.3, 44.4, 5999.996
    test 203 case: 1
    test 204 iteration: None
    test 205 reverse: 30000.0, 30000.0, 0.0
    test 206 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 207 case: 1
    test 208 iteration: None
    test 209 forward: 6.483, 45.0, -6335709.726
    test 210 forward: 30000.0, 30000.0, -0.0
    test 211 Vermeille: -168.919
    test 212 Vermeille: 190.939
    test 213 Vermeille: (65.772506, 169.060801)
    test 214 Vermeille: (1.147947, 3.141593)
    test 215 reverse-1: 45.0, 120.0, 1000.0
    test 216 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 217 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 218 philam-1: 0.7854, 2.0944
    test 219 reverse-2: 45.0, 120.0, 2000.0
    test 220 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 221 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 222 philam-2: 0.7854, 2.0944
    test 223 reverse-3: 45.0, 120.0, 3000.0
    test 224 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 225 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 226 philam-3: 0.7854, 2.0944
    test 227 reverse-4: 45.0, 120.0, 4000.0
    test 228 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 229 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 230 philam-4: 0.7854, 2.0944
    test 231 reverse-5: 45.0, 120.0, 10000.0
    test 232 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 233 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 234 philam-5: 0.7854, 2.0944
    test 235 reverse-6: 45.0, 120.0, 20000.0
    test 236 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 237 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 238 philam-6: 0.7854, 2.0944
    test 239 reverse-7: 45.0, 120.0, 100000.0
    test 240 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 241 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 242 philam-7: 0.7854, 2.0944
    test 243 reverse-8: 45.0, 120.0, 800000.005  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 244 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 245 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 246 philam-8: 0.7854, 2.0944
    test 247 reverse-9: 45.0, 120.0, 1000000.007  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 248 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 249 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 250 philam-9: 0.7854, 2.0944
    test 251 sudano: 45.0, 0.0, 100000.0
    test 252 name: OS-UK
    test 253 forward: 53.61199036, -1.66444222, 299.8
    test 254 forward: 3790644.9, -110149.21, 5111482.97
    test 255 reverse: 3790644.9, -110149.21, 5111482.97
    test 256 reverse: 53.61199036, -1.66444223
    test 257 reverse.lat: 53°36′43.1653″N
    test 258 reverse.lon: 001°39′51.992″W
    test 259 reverse.height: 299.800
    test 260 case: 1
    test 261 iteration: None
    test 262 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 263 reverse: 34.0, -117.333569, 251.702
    test 264 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 265 EcefError: (0.0, 0.0, 0.0, -180.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 266 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 267 EcefFarrell22: EcefFarrell22(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell22

    test 268 EcefVeness: ...
    test 269 name: Test
    test 270 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 271 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 272 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 273 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 274 forward: 27.99, 86.93, 8820.0
    test 275 forward: 302271.4, 5635928.4, 2979666.1
    test 276 name: Test
    test 277 reverse: 302271.4, 5635928.4, 2979666.1
    test 278 reverse: 27.99, 86.93, 8820.01
    test 279 case: 1
    test 280 iteration: None
    test 281 name: Test
    test 282 reverse: 302000.0, 5636000.0, 2980000.0
    test 283 reverse: 27.99, 86.93, 9027.03
    test 284 case: 1
    test 285 iteration: None
    test 286 forward: 27.99, 86.93, 8820.0
    test 287 forward: 302271.43, 5635928.37, 2979666.13
    test 288 forward: 33.3, 44.4, 6000.0
    test 289 forward: 3816209.6, 3737108.55, 3485109.57
    test 290 reverse: 3816209.6, 3737108.55, 3485109.57
    test 291 reverse: 33.3, 44.4, 5999.996
    test 292 case: 1
    test 293 iteration: None
    test 294 reverse: 30000.0, 30000.0, 0.0
    test 295 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 296 case: 1
    test 297 iteration: None
    test 298 forward: 6.483, 45.0, -6335709.726
    test 299 forward: 30000.0, 30000.0, -0.0
    test 300 Vermeille: -168.919
    test 301 Vermeille: 190.939
    test 302 Vermeille: (65.772506, 169.060801)
    test 303 Vermeille: (1.147947, 3.141593)
    test 304 reverse-1: 45.0, 120.0, 1000.0
    test 305 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 306 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 307 philam-1: 0.7854, 2.0944
    test 308 reverse-2: 45.0, 120.0, 2000.0
    test 309 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 310 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 311 philam-2: 0.7854, 2.0944
    test 312 reverse-3: 45.0, 120.0, 3000.0
    test 313 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 314 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 315 philam-3: 0.7854, 2.0944
    test 316 reverse-4: 45.0, 120.0, 4000.0
    test 317 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 318 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 319 philam-4: 0.7854, 2.0944
    test 320 reverse-5: 45.0, 120.0, 10000.0
    test 321 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 322 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 323 philam-5: 0.7854, 2.0944
    test 324 reverse-6: 45.0, 120.0, 20000.0
    test 325 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 326 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 327 philam-6: 0.7854, 2.0944
    test 328 reverse-7: 45.0, 120.0, 100000.0
    test 329 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 330 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 331 philam-7: 0.7854, 2.0944
    test 332 reverse-8: 45.0, 120.0, 800000.0
    test 333 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 334 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 335 philam-8: 0.7854, 2.0944
    test 336 reverse-9: 45.0, 120.0, 1000000.0
    test 337 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 338 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 339 philam-9: 0.7854, 2.0944
    test 340 sudano: 45.0, 0.0, 100000.0
    test 341 name: OS-UK
    test 342 forward: 53.61199036, -1.66444222, 299.8
    test 343 forward: 3790644.9, -110149.21, 5111482.97
    test 344 reverse: 3790644.9, -110149.21, 5111482.97
    test 345 reverse: 53.61199036, -1.66444223
    test 346 reverse.lat: 53°36′43.1653″N
    test 347 reverse.lon: 001°39′51.992″W
    test 348 reverse.height: 299.800
    test 349 case: 1
    test 350 iteration: None
    test 351 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 352 reverse: 34.0, -117.333569, 251.702
    test 353 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 354 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 355 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 356 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 357 EcefSudano: ...
    test 358 name: Test
    test 359 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 360 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 361 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 362 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 363 forward: 27.99, 86.93, 8820.0
    test 364 forward: 302271.4, 5635928.4, 2979666.1
    test 365 name: Test
    test 366 reverse: 302271.4, 5635928.4, 2979666.1
    test 367 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 368 case: 6
    test 369 iteration: 6
    test 370 name: Test
    test 371 reverse: 302000.0, 5636000.0, 2980000.0
    test 372 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 373 case: 6
    test 374 iteration: 6
    test 375 forward: 27.99, 86.93, 8820.0
    test 376 forward: 302271.43, 5635928.37, 2979666.13
    test 377 forward: 33.3, 44.4, 6000.0
    test 378 forward: 3816209.6, 3737108.55, 3485109.57
    test 379 reverse: 3816209.6, 3737108.55, 3485109.57
    test 380 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 381 case: 6
    test 382 iteration: 6
    test 383 reverse: 30000.0, 30000.0, 0.0
    test 384 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 385 case: 1
    test 386 iteration: 1
    test 387 forward: 6.483, 45.0, -6335709.726
    test 388 forward: 30000.0, 30000.0, -0.0
    test 389 Vermeille: -168.919
    test 390 Vermeille: 190.939
    test 391 Vermeille: (65.979481, 169.060801)  FAILED, KNOWN, expected (65.772506, 169.060801)
    test 392 Vermeille: (1.151559, 3.141593)  FAILED, KNOWN, expected (1.147947, 3.141593)
    test 393 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 394 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 395 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 396 philam-1: 0.7868, 2.0944
    test 397 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 398 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 399 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 400 philam-2: 0.7868, 2.0944
    test 401 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 402 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 403 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 404 philam-3: 0.7868, 2.0944
    test 405 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 406 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 407 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 408 philam-4: 0.7868, 2.0944
    test 409 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 410 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 411 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 412 philam-5: 0.7868, 2.0944
    test 413 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 414 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 415 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 416 philam-6: 0.7868, 2.0944
    test 417 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 418 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 419 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 420 philam-7: 0.7868, 2.0944
    test 421 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 422 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 423 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 424 philam-8: 0.7866, 2.0944
    test 425 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 426 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 427 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 428 philam-9: 0.7866, 2.0944
    test 429 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 430 name: OS-UK
    test 431 forward: 53.61199036, -1.66444222, 299.8
    test 432 forward: 3790644.9, -110149.21, 5111482.97
    test 433 reverse: 3790644.9, -110149.21, 5111482.97
    test 434 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 435 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 436 reverse.lon: 001°39′51.992″W
    test 437 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 438 case: 7
    test 439 iteration: 7
    test 440 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 441 reverse: 34.036724, -117.333569, 250.396541  FAILED, KNOWN, expected 34.0, -117.333569, 251.702
    test 442 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 443 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 444 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 445 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 446 EcefYou: ...
    test 447 name: Test
    test 448 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefYou
    test 449 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefYou
    test 450 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 451 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 452 forward: 27.99, 86.93, 8820.0
    test 453 forward: 302271.4, 5635928.4, 2979666.1
    test 454 name: Test
    test 455 reverse: 302271.4, 5635928.4, 2979666.1
    test 456 reverse: 27.99, 86.93, 8820.01
    test 457 case: 1
    test 458 iteration: None
    test 459 name: Test
    test 460 reverse: 302000.0, 5636000.0, 2980000.0
    test 461 reverse: 27.99, 86.93, 9027.03
    test 462 case: 1
    test 463 iteration: None
    test 464 forward: 27.99, 86.93, 8820.0
    test 465 forward: 302271.43, 5635928.37, 2979666.13
    test 466 forward: 33.3, 44.4, 6000.0
    test 467 forward: 3816209.6, 3737108.55, 3485109.57
    test 468 reverse: 3816209.6, 3737108.55, 3485109.57
    test 469 reverse: 33.3, 44.4, 5999.996
    test 470 case: 1
    test 471 iteration: None
    test 472 reverse: 30000.0, 30000.0, 0.0
    test 473 reverse: 90.0, 45.0, -6356893.894  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 474 case: 1
    test 475 iteration: None
    test 476 forward: 6.483, 45.0, -6335709.726
    test 477 forward: 30000.0, 30000.0, -0.0
    test 478 Vermeille: -168.919
    test 479 Vermeille: 190.939
    test 480 Vermeille: (65.772506, 169.060801)
    test 481 Vermeille: (1.147947, 3.141593)
    test 482 reverse-1: 45.0, 120.0, 1000.0
    test 483 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 484 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 485 philam-1: 0.7854, 2.0944
    test 486 reverse-2: 45.0, 120.0, 2000.0
    test 487 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 488 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 489 philam-2: 0.7854, 2.0944
    test 490 reverse-3: 45.0, 120.0, 3000.0
    test 491 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 492 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 493 philam-3: 0.7854, 2.0944
    test 494 reverse-4: 45.0, 120.0, 4000.0
    test 495 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 496 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 497 philam-4: 0.7854, 2.0944
    test 498 reverse-5: 45.0, 120.0, 10000.0
    test 499 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 500 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 501 philam-5: 0.7854, 2.0944
    test 502 reverse-6: 45.0, 120.0, 20000.0
    test 503 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 504 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 505 philam-6: 0.7854, 2.0944
    test 506 reverse-7: 45.0, 120.0, 100000.0
    test 507 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 508 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 509 philam-7: 0.7854, 2.0944
    test 510 reverse-8: 45.0, 120.0, 800000.0
    test 511 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 512 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 513 philam-8: 0.7854, 2.0944
    test 514 reverse-9: 45.0, 120.0, 1000000.0
    test 515 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 516 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 517 philam-9: 0.7854, 2.0944
    test 518 sudano: 45.0, 0.0, 100000.0
    test 519 name: OS-UK
    test 520 forward: 53.61199036, -1.66444222, 299.8
    test 521 forward: 3790644.9, -110149.21, 5111482.97
    test 522 reverse: 3790644.9, -110149.21, 5111482.97
    test 523 reverse: 53.61199036, -1.66444223
    test 524 reverse.lat: 53°36′43.1653″N
    test 525 reverse.lon: 001°39′51.992″W
    test 526 reverse.height: 299.800
    test 527 case: 1
    test 528 iteration: None
    test 529 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 530 reverse: 34.0, -117.333569, 251.702
    test 531 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 532 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 533 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 534 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 535 EcefMatrix: ...
    test 536 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 537 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 538 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 539 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 540 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 541 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 542 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 543 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 544 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 545 unrotate: (1.0, 1.0, 1.0)

    test 546 pygeodesy.sphericalNvector: Cartesian
    test 547 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 548 pygeodesy.sphericalNvector: LatLon
    test 549 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 550 forward: 48.833, 2.333, 0.0
    test 551 forward: 4190278.55, 170716.35, 4796058.21
    test 552 name: Paris
    test 553 reverse: 48.833, 2.333, 0.0
    test 554 name: Paris
    test 555 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 556 name: Paris
    test 557 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 558 to4Tuple: LatLon4Tuple
    test 559 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 560 to3Tuple: LatLon3Tuple
    test 561 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 562 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 563 name: Paris
    test 564 forward: [4190278.55, 170716.35, 4796058.21]
    test 565 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 566 pygeodesy.sphericalTrigonometry: Cartesian
    test 567 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 568 pygeodesy.sphericalTrigonometry: LatLon
    test 569 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 570 forward: 48.833, 2.333, 0.0
    test 571 forward: 4190278.55, 170716.35, 4796058.21
    test 572 name: Paris
    test 573 reverse: 48.833, 2.333, 0.0
    test 574 name: Paris
    test 575 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 576 name: Paris
    test 577 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 578 to4Tuple: LatLon4Tuple
    test 579 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 580 to3Tuple: LatLon3Tuple
    test 581 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 582 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 583 name: Paris
    test 584 forward: [4190278.55, 170716.35, 4796058.21]
    test 585 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 586 pygeodesy.ellipsoidalNvector: Cartesian
    test 587 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 588 pygeodesy.ellipsoidalNvector: LatLon
    test 589 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 590 forward: 48.833, 2.333, 0.0
    test 591 forward: 4202946.8, 171232.47, 4778354.17
    test 592 name: Paris
    test 593 reverse: 48.833, 2.333, 0.0
    test 594 name: Paris
    test 595 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 596 name: Paris
    test 597 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 598 to4Tuple: LatLon4Tuple
    test 599 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 600 to3Tuple: LatLon3Tuple
    test 601 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 602 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 603 name: Paris
    test 604 forward: [4202946.8, 171232.47, 4778354.17]
    test 605 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 606 pygeodesy.ellipsoidalVincenty: Cartesian
    test 607 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 608 pygeodesy.ellipsoidalVincenty: LatLon
    test 609 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 610 forward: 48.833, 2.333, 0.0
    test 611 forward: 4202946.8, 171232.47, 4778354.17
    test 612 name: Paris
    test 613 reverse: 48.833, 2.333, 0.0
    test 614 name: Paris
    test 615 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 616 name: Paris
    test 617 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 618 to4Tuple: LatLon4Tuple
    test 619 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 620 to3Tuple: LatLon3Tuple
    test 621 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 622 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 623 name: Paris
    test 624 forward: [4202946.8, 171232.47, 4778354.17]
    test 625 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 626 pygeodesy.ellipsoidalKarney: Cartesian
    test 627 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 628 pygeodesy.ellipsoidalKarney: LatLon
    test 629 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 630 forward: 48.833, 2.333, 0.0
    test 631 forward: 4202946.8, 171232.47, 4778354.17
    test 632 name: Paris
    test 633 reverse: 48.833, 2.333, 0.0
    test 634 name: Paris
    test 635 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 636 name: Paris
    test 637 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 638 to4Tuple: LatLon4Tuple
    test 639 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 640 to3Tuple: LatLon3Tuple
    test 641 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 642 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 643 name: Paris
    test 644 forward: [4202946.8, 171232.47, 4778354.17]
    test 645 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 646 pygeodesy.ellipsoidalExact: Cartesian
    test 647 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 648 pygeodesy.ellipsoidalExact: LatLon
    test 649 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 650 forward: 48.833, 2.333, 0.0
    test 651 forward: 4202946.8, 171232.47, 4778354.17
    test 652 name: Paris
    test 653 reverse: 48.833, 2.333, 0.0
    test 654 name: Paris
    test 655 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 656 name: Paris
    test 657 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 658 to4Tuple: LatLon4Tuple
    test 659 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 660 to3Tuple: LatLon3Tuple
    test 661 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 662 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 663 name: Paris
    test 664 forward: [4202946.8, 171232.47, 4778354.17]
    test 665 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    74 of 665 testEcef.py tests (11.1%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 21.819 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testElevations.py

    testing testElevations.py 21.11.21
    test 1 elevation2: 1173.790
    test 2 geoidHeight2: -31.699
    test 3 elevation2: 1173.790
    test 4 geodHeight2: -31.699
    test 5 elevation2: 2.030
    test 6 geodHeight2: -27.773
    test 7 elevation2: 199.180
    test 8 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 9 elevation2: 8.520
    test 10 geodHeight2: -30.000
    test 11 elevation2: 32.790
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 15 elevation2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 17 elevation2: 1173.790
    test 18 geoidHeight2: -31.699
    test 19 elevation2: 1173.790
    test 20 geodHeight2: -31.699
    test 21 elevation2: 2.030
    test 22 geodHeight2: -27.773
    test 23 elevation2: 199.180
    test 24 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 25 elevation2: 8.520
    test 26 geodHeight2: -30.000
    test 27 elevation2: 32.790
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 31 elevation2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")

    8 of 32 testElevations.py tests (25.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 8.949 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEllipsoidal.py

    testing testEllipsoidal.py 22.06.20

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 toDatum: 51.4778°N, 000.0016°W
    test 8 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 9 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 10 parse: 51.477284°N, 000.00002°E, -45.91m
    test 11 reframe: None
    test 12 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 13 toCss: -111.158797 5705242.333679
    test 14 toCss: -111.158797 5705242.333679
    test 15 toEcef: 3980581.21, -111.159, 4966824.522
    test 16 toEtm: 30 N 916396 5720041
    test 17 toEtm: 30 N 916396 5720041
    test 18 toLcc: 5639901 4612638
    test 19 toLcc: 5639901 4612638
    test 20 toOsgr: TQ 38876 77320
    test 21 toOsgr: TQ 38876 77320
    test 22 toUtmUps: 30 N 708207 5707224
    test 23 toUtm: 30 N 708207 5707224
    test 24 toUtm: 30 N 708207 5707224
    test 25 toWm: -178.111 6672799.209
    test 26 toWm: -178.111 6672799.209
    test 27 elevation2: None
    test 28 geoidHeight2: None
    test 29 toUtmUps: 30 N 708207 5707224
    test 30 toUtm: 30 N 708207 5707224
    test 31 toUtm: 30 N 708207 5707224
    test 32 toUtmUps: 00 N 2000000 1333272
    test 33 toUps: 00 N 2000000 1333272
    test 34 toUps: 00 N 0 -666728
    test 35 toUps: 00 N 2000000 1555732
    test 36 toUtm: 31 N 459200 9217519
    test 37 nearestOn: 32.81°N, 031.42°E
    test 38 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 39 toNvector: True
    test 40 toCartesian: [3980581, 97, 4966825]
    test 41 toCartesian: True
    test 42 toVector3D: (0.6228, 0.0, 0.7824)
    test 43 Nvector: (0.5, 0.5, 0.7071)
    test 44 toVector3D: (0.5, 0.5, 0.7071)
    test 45 philamheight: 0.7854, 0.7854, 0.0
    test 46 latlonheight: 45.0, 45.0, 0.0
    test 47 xyzh: 0.5, 0.5, 0.7, 0.0
    test 48 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 49 toCartesian: True
    test 50 toLatLon: 45.0°N, 045.0°E
    test 51 toLatLon: True
    test 52 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 53 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 54 dop: 51.998889°N, 004.373333°E, +134.64m
    test 55 distance: 3806542.943645769  FAILED, KNOWN, expected 3806542.943647

    testLatLon(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 56 isEllipsoidal: True
    test 57 isSpherical: False
    test 58 lat/lonDMS: 52.20472°N, 000.14056°E
    test 59 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 60 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 61 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 62 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 63 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 64 isequalTo: True
    test 65 isequalTo: True
    test 66 latlon2: 52.20472, 0.14056
    test 67 latlon2: 52.2047, 0.1406
    test 68 latlon2: 52.205, 0.141
    test 69 latlon2: 52.2, 0.14
    test 70 latlon2: 52.2, 0.1
    test 71 latlon2: 52.0, 0.0
    test 72 chordTo: 12029263.15
    test 73 chordTo: 12029049.69
    test 74 isequalTo: False
    test 75 antipode1: 52.205°S, 179.881°W
    test 76 antipode2: True
    test 77 antipode3: 52.205°N, 000.119°E
    test 78 antipode4: True
    test 79 antipode5: 52.205°N, 000.119°E
    test 80 copy: True
    test 81 __eq__: True
    test 82 __ne__: False
    test 83 equirectangularTo: 404329.56
    test 84 distanceTo: 404279.720589
    test 85 distanceTo: 404279.720589
    test 86 distanceTo: 3972863
    test 87 distanceTo: 18013602.92
    test 88 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 89 intermediateTo: 51.372294°N, 000.707192°E
    test 90 intermediateTo: True
    test 91 intermediateTo: 404279.721
    test 92 intermediateTo+5: 35.560239°N, 008.833512°E
    test 93 intermediateTo+5: 4.885
    test 94 intermediateTo-4: 64.570387°N, 013.156352°W
    test 95 intermediateTo-4: 3.885
    test 96 intermediateTo-h: 125.000
    test 97 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 98 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 99 chordTo: 125203.963
    test 100 cosineAndoyerLambertTo: 125205.962
    test 101 cosineAndoyerLambertTo: 125205.962
    test 102 cosineForsyheAndoyerLambertTo: 125205.965
    test 103 cosineForsyheAndoyerLambertTo: 125205.965
    test 104 cosineLawTo: 124801.098
    test 105 cosineLawTo: 124801.098
    test 106 equirectangularTo: 124804.754
    test 107 equirectangularTo: 124804.754
    test 108 euclideanTo: 130015.089
    test 109 euclideanTo: 130015.089
    test 110 flatLocalTo: 125209.633
    test 111 flatLocalTo: 125209.633
    test 112 flatPolarTo: 133663.257
    test 113 flatPolarTo: 133663.257
    test 114 hartzell: 53.3206°N, 001.7297°W
    test 115 hartzell: 53.349541°N, 001.7297°W
    test 116 height4: 0.0
    test 117 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 118 height4: 53°19′14.2″N, 001°43′46.9″W
    test 119 height4: 53°19′14.2″N, 001°43′46.9″W
    test 120 haversineTo: 124801.098
    test 121 haversineTo: 124801.098
    test 122 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 123 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 124 thomasTo: 125206.188
    test 125 thomasTo: 125206.188
    test 126 vincentysTo: 124801.098
    test 127 vincentysTo: 124801.098
    test 128 isclockwise: False
    test 129 isclockwise*: False
    test 130 isclockwise: True
    test 131 isclockwise*: True
    test 132 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 133 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 134 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 135 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 136 isconvex: False
    test 137 isconvex*: False
    test 138 isconvex: True
    test 139 isconvex*: True
    test 140 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 141 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 142 isenclosedBy1: True
    test 143 isenclosedBy1*: True
    test 144 isenclosedBy2: False
    test 145 isenclosedBy2*: False
    test 146 isenclosedBy3: False
    test 147 isenclosedBy3*: False
    test 148 isenclosedBy4: False
    test 149 isenclosedBy4*: False
    test 150 isenclosedBy5: False
    test 151 isenclosedBy5*: False
    test 152 isenclosedBy6: True
    test 153 isenclosedBy6*: True
    test 154 isenclosedBy7: True
    test 155 isenclosedBy7*: True
    test 156 compassAngleTo: 100.017
    test 157 compassAngleTo: 105.599
    test 158 compassAngleTo: 280.017
    test 159 compassAngleTo: 285.599
    test 160 equirectangularTo: 592.185
    test 161 distanceTo: 591.831
    test 162 compassAngleTo: 0.0
    test 163 compassAngleTo: 45.0
    test 164 compassAngleTo: 90.0
    test 165 compassAngleTo: 180.0
    test 166 compassAngleTo: 225.0
    test 167 compassAngleTo: 315.0
    test 168 compassAngleTo: 270.0
    test 169 compassAngleTo: 359.4
    test 170 latlon2: (53.0, 1.0)
    test 171 philam2: (0.93, 0.02)
    test 172 compassAngleTo: 31
    test 173 compassAngleTo: 45
    test 174 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 175 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 176 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 177 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 178 isequalTo: <class 'bool'>
    test 179 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 180 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 181 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 182 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 183 compassAngleTo: <class 'float'>
    test 184 cosineLawTo: <class 'float'>
    test 185 euclideanTo: <class 'float'>
    test 186 flatLocalTo: <class 'float'>
    test 187 flatPolarTo: <class 'float'>
    test 188 haversineTo: <class 'float'>
    test 189 hubenyTo: <class 'float'>
    test 190 vincentysTo: <class 'float'>
    test 191 toVector: (0.615661, 0.0, 0.788011)
    test 192 toVector3d: (0.61566, 0.0, 0.78801)
    test 193 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 194 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 195 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 196 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 197 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
    test 198 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)
    test 199 circum4 (pygeodesy.ellipsoidalNvector) .radius: 3184196.839  FAILED, KNOWN, expected 3184256.748
    test 200 circum4 (pygeodesy.ellipsoidalNvector) .center: 42.674776°N, 002.495488°E, -3184194.95m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 201 circum4 (pygeodesy.ellipsoidalNvector) .rank: 3
    test 202 circum4 (pygeodesy.ellipsoidalNvector) .residuals: ()
    test 203 circum4 (pygeodesy.ellipsoidalNvector) .d1: 4886.122  FAILED, KNOWN, expected 57818.033
    test 204 circum4 (pygeodesy.ellipsoidalNvector) .d2: 4904.641  FAILED, KNOWN, expected 57834.176
    test 205 circum4 (pygeodesy.ellipsoidalNvector) .d3: 4909.920  FAILED, KNOWN, expected 57830.992
    test 206 circum4 (pygeodesy.ellipsoidalNvector) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 207 circum4 (pygeodesy.ellipsoidalNvector) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 208 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 209 circin6 (pygeodesy.ellipsoidalNvector) .rB+rC: 1561159.315
    test 210 circin6 (pygeodesy.ellipsoidalNvector) .rC+pA: 1111782.535
    test 211 circin6 (pygeodesy.ellipsoidalNvector) .rA+rB: 1104451.745
    test 212 circin6 (pygeodesy.ellipsoidalNvector) .radius: 325058.721
    test 213 circin6 (pygeodesy.ellipsoidalNvector) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 214 circin6 (pygeodesy.ellipsoidalNvector) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 215 circin6 (pygeodesy.ellipsoidalNvector) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 216 circin6 (pygeodesy.ellipsoidalNvector) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 217 circin6 (pygeodesy.ellipsoidalNvector) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 218 circin6 (pygeodesy.ellipsoidalNvector) .dA: 327992.318  FAILED, KNOWN, expected 327263.596
    test 219 circin6 (pygeodesy.ellipsoidalNvector) .dB: 327863.711  FAILED, KNOWN, expected 326036.153
    test 220 circin6 (pygeodesy.ellipsoidalNvector) .dC: 325653.216  FAILED, KNOWN, expected 326020.432

    testVectorial(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 221 toLatLon: 44.995674°N, 045.0°E
    test 222 toNvector: (0.50004, 0.50004, 0.70705)
    test 223 isequalTo: False
    test 224 isequalTo: True
    test 225 length: 0.99992449715
    test 226 euclid: 0.99995577
    test 227 length: 1.00
    test 228 euclid: 1.0000
    test 229 meanOf: 44.995674°N, 045.0°E
    test 230 meanOf: LatLon
    test 231 apply: (0.5, 0.5, 0.707)
    test 232 init: (0.5, 0.5, 0.707)
    test 233 i***: (0.5, 0.5, 0.707)
    test 234 abs: 0.99992449715
    test 235 sumOf: (52.70504, 0.61904, 0.70705)
    test 236 sumOf: Nv
    test 237 sumOf: sumOf
    test 238 length: 52.7134151513
    test 239 copy: True
    test 240 length: 52.2051356286
    test 241 length: 52.2051356286
    test 242 nearestOn: 51.0°N, 001.0°E
    test 243 nearestOn: 50.987°N, 000.298°W
    test 244 nearestOn: 51.0°N, 002.0°E
    test 245 nearestOn: 50.995°N, 002.655°E
    test 246 nearestOn: 51.0°N, 001.9°E
    test 247 nearestOn: True
    test 248 distanceTo: 42.826
    test 249 nearestOn: 51.0°N, 002.0°E
    test 250 nearestOn: True
    test 251 nearestOn: 00.0°N, 000.0°E
    test 252 nearestOn: True
    test 253 nearestOn: 00.0°N, 020.0°E
    test 254 nearestOn: True
    test 255 nearestOn: 02.0°N, 002.0°E
    test 256 nearestOn: 02.0°N, 002.0°E
    test 257 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 258 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 259 BasseC: 47.3038°N, 002.5721°W
    test 260 BasseH: 47.311067°N, 002.528617°W
    test 261 triangulate: 47.323667°N, 002.568501°W
    test 262 triangulate: True
    test 263 trilaterate: 37.419078°N, 121.960579°W
    test 264 trilaterate: True
    test 265 trilaterate: 08.068912°S, 034.888699°W
    test 266 trilaterate: True
    test 267 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 268 trilaterate: True
    test 269 trilaterate: 42.67456065°N, 002.49539502°E
    test 270 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 271 sumOf: Nvector
    test 272 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 273 ecef.lat, .lon: 44.995674, 45.0
    test 274 ecef.height: -0.0
    test 275 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 276 .isEllipsoidal: True
    test 277 .isSpherical: False
    test 278 .latlon: (44.995674, 45.0)
    test 279 .philam: (0.785323, 0.785398)
    test 280 .latlonheight: (44.995674, 45.0, 0.0)
    test 281 .philamheight: (0.785323, 0.785398, 0.0)
    test 282 parse: (0.5, 0.5, 0.707)
    test 283 cmp: 0
    test 284 eq: True
    test 285 ge: True
    test 286 gt: False
    test 287 le: True
    test 288 lt: False
    test 289 ne: False
    test 290 *: (1.0, 1.0, 1.414)
    test 291 +: (1.0, 1.0, 1.414)
    test 292 /: (0.5, 0.5, 0.707)
    test 293 -: (0.5, 0.5, 0.707)
    test 294 @: (0.0, 0.0, 0.0)
    test 295 @: (0.0, 0.0, 0.0)
    test 296 rotate: (0.26268, 0.26268, 0.37143)
    test 297 crosserrors: True
    test 298 0: divisor (0): float division by zero
    test 299 intersections2: (500.0, 0.0, 0.0)
    test 300 nearestOn: (0.0, 0.0, 0.0)
    test 301 nearestOn: True
    test 302 nearestOn: (100.0, 100.0, 100.0)
    test 303 nearestOn: True
    test 304 iscolinearWith: False
    test 305 iscolinearWith: True
    test 306 nearestOn: (0.0, 0.0, 0.0)
    test 307 nearestOn: True
    test 308 nearestOn: (100.0, 100.0, 100.0)
    test 309 nearestOn: True
    test 310 iscolinearWith: False
    test 311 iscolinearWith: True

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 312 isEllipsoidal: True
    test 313 isSpherical: False
    test 314 isEllipsoidal: True
    test 315 isSpherical: False
    test 316 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 317 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 318 toDatum: 51.4778°N, 000.0016°W
    test 319 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 320 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 321 parse: 51.477284°N, 000.00002°E, -45.91m
    test 322 reframe: None
    test 323 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 324 toCss: -111.158797 5705242.333679
    test 325 toCss: -111.158797 5705242.333679
    test 326 toEcef: 3980581.21, -111.159, 4966824.522
    test 327 toEtm: 30 N 916396 5720041
    test 328 toEtm: 30 N 916396 5720041
    test 329 toLcc: 5639901 4612638
    test 330 toLcc: 5639901 4612638
    test 331 toOsgr: TQ 38876 77320
    test 332 toOsgr: TQ 38876 77320
    test 333 toUtmUps: 30 N 708207 5707224
    test 334 toUtm: 30 N 708207 5707224
    test 335 toUtm: 30 N 708207 5707224
    test 336 toWm: -178.111 6672799.209
    test 337 toWm: -178.111 6672799.209
    test 338 elevation2: None
    test 339 geoidHeight2: None
    test 340 toUtmUps: 30 N 708207 5707224
    test 341 toUtm: 30 N 708207 5707224
    test 342 toUtm: 30 N 708207 5707224
    test 343 toUtmUps: 00 N 2000000 1333272
    test 344 toUps: 00 N 2000000 1333272
    test 345 toUps: 00 N 0 -666728
    test 346 toUps: 00 N 2000000 1555732
    test 347 toUtm: 31 N 459200 9217519
    test 348 nearestOn: 32.81°N, 031.42°E
    test 349 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 350 dop: 51.998889°N, 004.373333°E, +134.64m
    test 351 distance: 3817991.0740122627  FAILED, KNOWN, expected 3817991.074015
    test 352 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 353 iteration: 0
    test 354 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 355 iteration: 1

    testLatLon(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 356 isEllipsoidal: True
    test 357 isSpherical: False
    test 358 lat/lonDMS: 52.20472°N, 000.14056°E
    test 359 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 360 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 361 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 362 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 363 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 364 isequalTo: True
    test 365 isequalTo: True
    test 366 latlon2: 52.20472, 0.14056
    test 367 latlon2: 52.2047, 0.1406
    test 368 latlon2: 52.205, 0.141
    test 369 latlon2: 52.2, 0.14
    test 370 latlon2: 52.2, 0.1
    test 371 latlon2: 52.0, 0.0
    test 372 chordTo: 12029263.15
    test 373 chordTo: 12029049.69
    test 374 isequalTo: False
    test 375 antipode1: 52.205°S, 179.881°W
    test 376 antipode2: True
    test 377 antipode3: 52.205°N, 000.119°E
    test 378 antipode4: True
    test 379 antipode5: 52.205°N, 000.119°E
    test 380 initialBearingTo: 156.1106
    test 381 initialBearingTo: 65.9335
    test 382 initialBearingTo: 0.0
    test 383 initialBearingTo: 180.0
    test 384 finalBearingTo: 157.8345
    test 385 finalBearingTo: 93.9034
    test 386 bearingTo2: 156.1106, 157.8345
    test 387 ispolar: True
    test 388 copy: True
    test 389 __eq__: True
    test 390 __ne__: False
    test 391 equirectangularTo: 404329.56
    test 392 distanceTo: 404607.805988
    test 393 distanceTo: 404607.805988
    test 394 distanceTo: 3981601
    test 395 antipodal: False
    test 396 distanceTo dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 397 distanceTo unrolled: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 398 antipodal: False
    test 399 distanceTo dateline: 9513998
    test 400 distanceTo unrolled: 9513998
    test 401 distanceTo: 18012714.66
    test 402 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 403 distanceTo3 dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 404 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 405 distanceTo3 dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 406 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 407 intermediateTo: 51.372275°N, 000.707253°E
    test 408 intermediateTo: True
    test 409 intermediateTo: 404607.806
    test 410 intermediateTo+5: 35.139582°N, 008.994368°E
    test 411 intermediateTo+5: 5.000
    test 412 intermediateTo-4: 64.894124°N, 013.705689°W
    test 413 intermediateTo-4: 4.000
    test 414 intermediateTo-h: 125.000
    test 415 destination: 51.513526°N, 000.098038°W
    test 416 destination: 51°30′49″N, 000°05′53″W
    test 417 destination: 33°57′N, 118°24′W
    test 418 destination: 33.950367°N, 118.399012°W
    test 419 destination: 0.592546N, 2.066453W
    test 420 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 421 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 422 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 423 chordTo: 125203.963
    test 424 cosineAndoyerLambertTo: 125205.962
    test 425 cosineAndoyerLambertTo: 125205.962
    test 426 cosineForsyheAndoyerLambertTo: 125205.965
    test 427 cosineForsyheAndoyerLambertTo: 125205.965
    test 428 cosineLawTo: 124801.098
    test 429 cosineLawTo: 124801.098
    test 430 equirectangularTo: 124804.754
    test 431 equirectangularTo: 124804.754
    test 432 euclideanTo: 130015.089
    test 433 euclideanTo: 130015.089
    test 434 flatLocalTo: 125209.633
    test 435 flatLocalTo: 125209.633
    test 436 flatPolarTo: 133663.257
    test 437 flatPolarTo: 133663.257
    test 438 hartzell: 53.3206°N, 001.7297°W
    test 439 hartzell: 53.349541°N, 001.7297°W
    test 440 height4: 0.0
    test 441 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 442 height4: 53°19′14.2″N, 001°43′46.9″W
    test 443 height4: 53°19′14.2″N, 001°43′46.9″W
    test 444 haversineTo: 124801.098
    test 445 haversineTo: 124801.098
    test 446 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 447 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 448 thomasTo: 125206.188
    test 449 thomasTo: 125206.188
    test 450 vincentysTo: 124801.098
    test 451 vincentysTo: 124801.098
    test 452 isclockwise: False
    test 453 isclockwise*: False
    test 454 isclockwise: True
    test 455 isclockwise*: True
    test 456 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 457 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 458 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 459 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 460 isconvex: False
    test 461 isconvex*: False
    test 462 isconvex: True
    test 463 isconvex*: True
    test 464 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 465 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 466 isenclosedBy1: True
    test 467 isenclosedBy1*: True
    test 468 isenclosedBy2: False
    test 469 isenclosedBy2*: False
    test 470 isenclosedBy3: False
    test 471 isenclosedBy3*: False
    test 472 isenclosedBy4: False
    test 473 isenclosedBy4*: False
    test 474 isenclosedBy5: False
    test 475 isenclosedBy5*: False
    test 476 isenclosedBy6: True
    test 477 isenclosedBy6*: True
    test 478 isenclosedBy7: True
    test 479 isenclosedBy7*: True
    test 480 initialBearingTo: 102.392291
    test 481 compassAngleTo: 100.017
    test 482 compassAngleTo: 105.599
    test 483 initialBearingTo: 288.676039
    test 484 compassAngleTo: 280.017
    test 485 compassAngleTo: 285.599
    test 486 equirectangularTo: 592.185
    test 487 distanceTo: 593.571
    test 488 bearingTo: 0.0
    test 489 compassAngleTo: 0.0
    test 490 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 491 compassAngleTo: 45.0
    test 492 bearingTo: 90.0
    test 493 compassAngleTo: 90.0
    test 494 bearingTo: 180.0
    test 495 compassAngleTo: 180.0
    test 496 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 497 compassAngleTo: 225.0
    test 498 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 499 compassAngleTo: 315.0
    test 500 bearingTo: 270.0
    test 501 compassAngleTo: 270.0
    test 502 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 503 compassAngleTo: 359.4
    test 504 latlon2: (53.0, 1.0)
    test 505 philam2: (0.93, 0.02)
    test 506 bearingTo: 31
    test 507 compassAngleTo: 31
    test 508 compassAngleTo: 45
    test 509 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 510 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 511 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 512 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 513 isequalTo: <class 'bool'>
    test 514 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 515 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 516 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 517 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 518 compassAngleTo: <class 'float'>
    test 519 cosineLawTo: <class 'float'>
    test 520 euclideanTo: <class 'float'>
    test 521 flatLocalTo: <class 'float'>
    test 522 flatPolarTo: <class 'float'>
    test 523 haversineTo: <class 'float'>
    test 524 hubenyTo: <class 'float'>
    test 525 vincentysTo: <class 'float'>
    test 526 toNvector: (0.615661, 0.0, 0.788011)
    test 527 toVector: (0.615661, 0.0, 0.788011)
    test 528 toVector3d: (0.61566, 0.0, 0.78801)
    test 529 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 530 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 531 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 532 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 533 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 534 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 535 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 536 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 537 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 538 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 539 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 540 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 541 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 542 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 543 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 544 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 545 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 546 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 547 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 548 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 549 circum3 (pygeodesy.ellipsoidalVincenty) .radius: 57792.067
    test 550 circum3 (pygeodesy.ellipsoidalVincenty) .center: 43.053532°N, 002.943255°E, -261.66m
    test 551 circum3 (pygeodesy.ellipsoidalVincenty) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 552 circum3 (pygeodesy.ellipsoidalVincenty) .d1: 57792.858
    test 553 circum3 (pygeodesy.ellipsoidalVincenty) .d2: 57792.859
    test 554 circum3 (pygeodesy.ellipsoidalVincenty) .d3: 57792.859
    test 555 circum3 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 556 circum3 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 557 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 558 circum4 (pygeodesy.ellipsoidalVincenty) .radius: 3184256.748
    test 559 circum4 (pygeodesy.ellipsoidalVincenty) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 560 circum4 (pygeodesy.ellipsoidalVincenty) .rank: 3
    test 561 circum4 (pygeodesy.ellipsoidalVincenty) .residuals: ()
    test 562 circum4 (pygeodesy.ellipsoidalVincenty) .d1: 57818.033
    test 563 circum4 (pygeodesy.ellipsoidalVincenty) .d2: 57834.176
    test 564 circum4 (pygeodesy.ellipsoidalVincenty) .d3: 57830.992
    test 565 circum4 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 566 circum4 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 567 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 568 circin6 (pygeodesy.ellipsoidalVincenty) .rB+rC: 1561159.315
    test 569 circin6 (pygeodesy.ellipsoidalVincenty) .rC+pA: 1111782.535
    test 570 circin6 (pygeodesy.ellipsoidalVincenty) .rA+rB: 1104451.745
    test 571 circin6 (pygeodesy.ellipsoidalVincenty) .radius: 325058.721
    test 572 circin6 (pygeodesy.ellipsoidalVincenty) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 573 circin6 (pygeodesy.ellipsoidalVincenty) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 574 circin6 (pygeodesy.ellipsoidalVincenty) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 575 circin6 (pygeodesy.ellipsoidalVincenty) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 576 circin6 (pygeodesy.ellipsoidalVincenty) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 577 circin6 (pygeodesy.ellipsoidalVincenty) .dA: 327263.596
    test 578 circin6 (pygeodesy.ellipsoidalVincenty) .dB: 326036.153
    test 579 circin6 (pygeodesy.ellipsoidalVincenty) .dC: 326020.432

    testNOAA(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 580 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 581 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 582 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 583 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 584 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 585 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 586 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 587 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 588 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 589 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 590 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 591 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 592 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 593 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 594 Equidistant: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W  FAILED, KNOWN, expected 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 595 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 596 Equidistant: 00.0°N, 035.4073°W, 00.0°N, 035.4073°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 597 Equidistant: 1.63814 (% of radius)
    test 598 Equidistant: 22.756°N, 000.0°E, 22.756°S, 000.0°E  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 599 Equidistant: 1.30784 (% of radius)
    test 600 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 601 Equidistant: 1.31348 (% of radius)
    test 602 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 603 Equidistant: 1.81093 (% of radius)
    test 604 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 605 Equidistant 5: 0.00337268 (% of radius)
    test 606 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 607 Equidistant 10: 0.00344677 (% of radius)
    test 608 Equidistant 15: 15.0326°S, 016.1429°W, 15.0326°N, 016.1429°E
    test 609 Equidistant 15: 0.00356146 (% of radius)
    test 610 Equidistant 20: 19.9682°S, 022.7468°W, 19.9682°N, 022.7468°E
    test 611 Equidistant 20: 0.00370135 (% of radius)
    test 612 Equidistant 25: 24.7603°S, 030.5908°W, 24.7603°N, 030.5908°E
    test 613 Equidistant 25: 0.00383987 (% of radius)
    test 614 Equidistant 30: 29.2359°S, 040.2625°W, 29.2359°N, 040.2625°E
    test 615 Equidistant 30: 0.00393258 (% of radius)
    test 616 Equidistant 35: 33.0487°S, 052.585°W, 33.0487°N, 052.585°E
    test 617 Equidistant 35: 0.00390516 (% of radius)
    test 618 Equidistant 40: 35.5123°S, 068.6794°W, 35.5123°N, 068.6794°E
    test 619 Equidistant 40: 0.0036308 (% of radius)
    test 620 Equidistant 45: 35.2644°S, 090.0019°W, 35.2644°N, 090.0019°E
    test 621 Equidistant 45: 0.00288386 (% of radius)
    test 622 Equidistant 50: 29.3392°S, 119.0221°W, 29.3392°N, 119.0221°E
    test 623 Equidistant 50: 0.00271777 (% of radius)
    test 624 Equidistant: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (222847): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 625 Equidistant: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.02385e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 626 Equidistant: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55077e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 627 Equidistant: 15.26107°S, 017.610405°W Random +/- 45
    test 628 Equidistant: 15.110665°S, 017.749913°W, 51.469549°N, 021.916235°E  d 22398.7 meter (iteration 4)
    test 629 Equidistant: 15.229851°S, 017.633095°W, 51.739306°S, 005.215869°E  d 4227.78 meter (iteration 4)
    test 630 Equidistant: 15.129214°S, 017.679197°W, 57.740748°N, 030.670293°E  d 16355.6 meter (iteration 4)
    test 631 Equidistant: 15.204744°S, 017.765686°W, 47.620328°S, 007.32936°W  d 17808.6 meter (iteration 4)
    test 632 Equidistant: 15.189899°S, 017.650582°W, 15.497983°S, 061.853327°E  d 8980.54 meter (iteration 3)
    test 633 Equidistant: 15.23512°S, 017.606412°W, 08.573108°S, 037.20321°W  d 2903.23 meter (iteration 3)
    test 634 Equidistant: 15.161784°S, 017.692699°W, 59.963333°S, 004.053476°W  d 14102.2 meter (iteration 4)
    test 635 Equidistant: 15.107241°S, 017.767479°W, 40.641424°N, 032.343881°E  d 23971.2 meter (iteration 4)
    test 636 Equidistant: 15.097664°S, 017.75561°W, 03.566215°N, 051.755339°E  d 23883 meter (iteration 4)
    test 637 Equidistant: 15.316202°S, 017.534563°W, 44.105058°S, 051.259295°W  d 10176.9 meter (iteration 4)
    test 638 Equidistant: 15.27414°S, 017.606416°W, 20.690503°S, 011.96594°E  d 1508.33 meter (iteration 3)
    test 639 Equidistant: 15.803337°S, 017.70197°W, 10.891722°S, 017.815846°W  d 60802.8 meter (iteration 5)

    testVincenty(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='WGS84')
    test 640 distanceTo: 866455.43292
    test 641 toDatum: OSGB36
    test 642 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 643 isEllipsoidal: True
    test 644 isSpherical: False
    test 645 epsilon: 1e-12
    test 646 iterations: 100
    test 647 copy: True
    test 648 isEllipsoidal: True
    test 649 isSpherical: False
    test 650 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 651 epsilon: 2.220446049250e-16
    test 652 iterations: 200
    test 653 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='WGS84')
    test 654 coincident: 0.0
    test 655 coincident: 0.0, 0.0, 0.0
    test 656 destination: 37.6528°S, 143.9265°E
    test 657 destination: True
    test 658 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 659 destination2: True
    test 660 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 661 distanceTo: 969954.166
    test 662 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 663 distanceTo2: 972708.16174, 11.22502
    test 664 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 665 destination: 58.64402°N, 003.07009°W
    test 666 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 667 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 668 distanceTo: 404607.806
    test 669 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 670 distanceTo2: 402574.597287, 157.726344
    test 671 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 672 destination: 48.857°N, 002.351°E
    test 673 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 674 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 675 distanceTo: 54973.295
    test 676 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 677 distanceTo2: 54903.41209, 232.9209
    test 678 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 679 destination: 37.6528°N, 143.9265°E
    test 680 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 681 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 682 distanceToMP: 298396.057
    test 683 distanceToSM: 185.415
    test 684 distanceToMP: 111319.491
    test 685 distanceToMP: 110574.389
    test 686 distanceToKW: 222638.982
    test 687 distanceToKW: 111319.491
    test 688 distanceTo3: 54972.271
    test 689 distanceTo3: 306°52′05.37″
    test 690 distanceTo3: 307°10′25.07″
    test 691 distanceTo2: 54902.390
    test 692 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='WGS84')
    test 693 distanceTo/antipodal (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 694 distanceTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 695 initialBearingTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 696 finalBearingTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 697 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 698 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 699 distanceTo/coincident (5): 111319.491
    test 700 distanceTo/meridional (1): 10001965.729
    test 701 initialBearingTo/meridional (1): 180.0
    test 702 distanceTo/coincident (1): 0.0
    test 703 initialBearingTo/coincident (1): 0.0
    test 704 finalBearingTo/coincident (1): 0.0
    test 705 destination/coincident (1): 50.06632°N, 005.71475°W
    test 706 distanceTo/anti-meridian (4): 10825924.1
    test 707 distanceTo/quadrants (5): 4015703.02
    test 708 distanceTo/quadrants (5): 4015703.02
    test 709 distanceTo/quadrants (5): 4015703.02
    test 710 distanceTo/quadrants (5): 4015703.02
    test 711 distanceTo/quadrants (5): 4015703.02
    test 712 distanceTo/quadrants (5): 4015703.02
    test 713 distanceTo/quadrants (5): 4015703.02
    test 714 distanceTo/quadrants (5): 4015703.02
    test 715 distanceTo/quadrants (5): 4015703.02
    test 716 distanceTo/quadrants (5): 4015703.02
    test 717 distanceTo/quadrants (5): 4015703.02
    test 718 distanceTo/quadrants (5): 4015703.02
    test 719 distanceTo/quadrants (5): 4015703.02
    test 720 distanceTo/quadrants (5): 4015703.02
    test 721 distanceTo/quadrants (5): 4015703.02
    test 722 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='NAD83')
    test 723 distanceTo: 866455.43292
    test 724 toDatum: OSGB36
    test 725 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 726 isEllipsoidal: True
    test 727 isSpherical: False
    test 728 epsilon: 1e-12
    test 729 iterations: 100
    test 730 copy: True
    test 731 isEllipsoidal: True
    test 732 isSpherical: False
    test 733 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 734 epsilon: 2.220446049250e-16
    test 735 iterations: 200
    test 736 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='NAD83')
    test 737 coincident: 0.0
    test 738 coincident: 0.0, 0.0, 0.0
    test 739 destination: 37.6528°S, 143.9265°E
    test 740 destination: True
    test 741 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 742 destination2: True
    test 743 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 744 distanceTo: 969954.166
    test 745 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 746 distanceTo2: 972708.16174, 11.22502
    test 747 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 748 destination: 58.64402°N, 003.07009°W
    test 749 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 750 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 751 distanceTo: 404607.806
    test 752 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 753 distanceTo2: 402574.597287, 157.726344
    test 754 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 755 destination: 48.857°N, 002.351°E
    test 756 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 757 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 758 distanceTo: 54973.295
    test 759 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 760 distanceTo2: 54903.41209, 232.9209
    test 761 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 762 destination: 37.6528°N, 143.9265°E
    test 763 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 764 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 765 distanceToMP: 298396.057
    test 766 distanceToSM: 185.415
    test 767 distanceToMP: 111319.491
    test 768 distanceToMP: 110574.389
    test 769 distanceToKW: 222638.982
    test 770 distanceToKW: 111319.491
    test 771 distanceTo3: 54972.271
    test 772 distanceTo3: 306°52′05.37″
    test 773 distanceTo3: 307°10′25.07″
    test 774 distanceTo2: 54902.390
    test 775 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 22.07.07, datum='NAD83')
    test 776 distanceTo/antipodal (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°30′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 777 distanceTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 778 initialBearingTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 779 finalBearingTo/VincentyError (100): no convergence: epsilon (1e-12) and iterations (100), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 780 distanceTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 781 initialBearingTo/equatorial (1): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 782 distanceTo/coincident (5): 111319.491
    test 783 distanceTo/meridional (1): 10001965.729
    test 784 initialBearingTo/meridional (1): 180.0
    test 785 distanceTo/coincident (1): 0.0
    test 786 initialBearingTo/coincident (1): 0.0
    test 787 finalBearingTo/coincident (1): 0.0
    test 788 destination/coincident (1): 50.06632°N, 005.71475°W
    test 789 distanceTo/anti-meridian (4): 10825924.1
    test 790 distanceTo/quadrants (5): 4015703.02
    test 791 distanceTo/quadrants (5): 4015703.02
    test 792 distanceTo/quadrants (5): 4015703.02
    test 793 distanceTo/quadrants (5): 4015703.02
    test 794 distanceTo/quadrants (5): 4015703.02
    test 795 distanceTo/quadrants (5): 4015703.02
    test 796 distanceTo/quadrants (5): 4015703.02
    test 797 distanceTo/quadrants (5): 4015703.02
    test 798 distanceTo/quadrants (5): 4015703.02
    test 799 distanceTo/quadrants (5): 4015703.02
    test 800 distanceTo/quadrants (5): 4015703.02
    test 801 distanceTo/quadrants (5): 4015703.02
    test 802 distanceTo/quadrants (5): 4015703.02
    test 803 distanceTo/quadrants (5): 4015703.02
    test 804 distanceTo/quadrants (5): 4015703.02
    test 805 distanceTo/quadrants (5): 4015703.02

    testEllipsoidal(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 806 isEllipsoidal: True
    test 807 isSpherical: False
    test 808 isEllipsoidal: True
    test 809 isSpherical: False
    test 810 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 811 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 812 toDatum: 51.4778°N, 000.0016°W
    test 813 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 814 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 815 parse: 51.477284°N, 000.00002°E, -45.91m
    test 816 reframe: None
    test 817 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 818 toCss: -111.158797 5705242.333679
    test 819 toCss: -111.158797 5705242.333679
    test 820 toEcef: 3980581.21, -111.159, 4966824.522
    test 821 toEtm: 30 N 916396 5720041
    test 822 toEtm: 30 N 916396 5720041
    test 823 toLcc: 5639901 4612638
    test 824 toLcc: 5639901 4612638
    test 825 toOsgr: TQ 38876 77320
    test 826 toOsgr: TQ 38876 77320
    test 827 toUtmUps: 30 N 708207 5707224
    test 828 toUtm: 30 N 708207 5707224
    test 829 toUtm: 30 N 708207 5707224
    test 830 toWm: -178.111 6672799.209
    test 831 toWm: -178.111 6672799.209
    test 832 elevation2: None
    test 833 geoidHeight2: None
    test 834 toUtmUps: 30 N 708207 5707224
    test 835 toUtm: 30 N 708207 5707224
    test 836 toUtm: 30 N 708207 5707224
    test 837 toUtmUps: 00 N 2000000 1333272
    test 838 toUps: 00 N 2000000 1333272
    test 839 toUps: 00 N 0 -666728
    test 840 toUps: 00 N 2000000 1555732
    test 841 toUtm: 31 N 459200 9217519
    test 842 nearestOn: 32.81°N, 031.42°E
    test 843 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 844 dop: 51.998889°N, 004.373333°E, +134.64m
    test 845 distance: 3802238.504988623  FAILED, KNOWN, expected 3802238.504989
    test 846 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 847 iteration: 0
    test 848 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 849 iteration: 1

    testLatLon(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 850 isEllipsoidal: True
    test 851 isSpherical: False
    test 852 lat/lonDMS: 52.20472°N, 000.14056°E
    test 853 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 854 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 855 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 856 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 857 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 858 isequalTo: True
    test 859 isequalTo: True
    test 860 latlon2: 52.20472, 0.14056
    test 861 latlon2: 52.2047, 0.1406
    test 862 latlon2: 52.205, 0.141
    test 863 latlon2: 52.2, 0.14
    test 864 latlon2: 52.2, 0.1
    test 865 latlon2: 52.0, 0.0
    test 866 chordTo: 12029263.15
    test 867 chordTo: 12029049.69
    test 868 isequalTo: False
    test 869 antipode1: 52.205°S, 179.881°W
    test 870 antipode2: True
    test 871 antipode3: 52.205°N, 000.119°E
    test 872 antipode4: True
    test 873 antipode5: 52.205°N, 000.119°E
    test 874 initialBearingTo: 156.1106
    test 875 initialBearingTo: 65.9335
    test 876 initialBearingTo: 0.0
    test 877 initialBearingTo: 180.0
    test 878 finalBearingTo: 157.8345
    test 879 finalBearingTo: 93.9034
    test 880 bearingTo2: 156.1106, 157.8345
    test 881 ispolar: True
    test 882 copy: True
    test 883 __eq__: True
    test 884 __ne__: False
    test 885 equirectangularTo: 404329.56
    test 886 distanceTo: 404607.805988
    test 887 distanceTo: 404607.805988
    test 888 distanceTo: 3981601
    test 889 antipodal: False
    test 890 distanceTo dateline: 19959679.267
    test 891 distanceTo unrolled: 19959679.267
    test 892 antipodal: False
    test 893 distanceTo dateline: 9513998
    test 894 distanceTo unrolled: 9513998
    test 895 distanceTo: 18012714.66
    test 896 distanceTo: 20003931.46
    test 897 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 898 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 899 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 900 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 901 intermediateTo: 51.372275°N, 000.707253°E
    test 902 intermediateTo: True
    test 903 intermediateTo: 404607.806
    test 904 intermediateTo+5: 35.139582°N, 008.994368°E
    test 905 intermediateTo+5: 5.000
    test 906 intermediateTo-4: 64.894124°N, 013.705689°W
    test 907 intermediateTo-4: 4.000
    test 908 intermediateTo-h: 125.000
    test 909 destination: 51.513526°N, 000.098038°W
    test 910 destination: 51°30′49″N, 000°05′53″W
    test 911 destination: 33°57′N, 118°24′W
    test 912 destination: 33.950367°N, 118.399012°W
    test 913 destination: 0.592546N, 2.066453W
    test 914 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 915 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 916 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 917 chordTo: 125203.963
    test 918 cosineAndoyerLambertTo: 125205.962
    test 919 cosineAndoyerLambertTo: 125205.962
    test 920 cosineForsyheAndoyerLambertTo: 125205.965
    test 921 cosineForsyheAndoyerLambertTo: 125205.965
    test 922 cosineLawTo: 124801.098
    test 923 cosineLawTo: 124801.098
    test 924 equirectangularTo: 124804.754
    test 925 equirectangularTo: 124804.754
    test 926 euclideanTo: 130015.089
    test 927 euclideanTo: 130015.089
    test 928 flatLocalTo: 125209.633
    test 929 flatLocalTo: 125209.633
    test 930 flatPolarTo: 133663.257
    test 931 flatPolarTo: 133663.257
    test 932 hartzell: 53.3206°N, 001.7297°W
    test 933 hartzell: 53.349541°N, 001.7297°W
    test 934 height4: 0.0
    test 935 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 936 height4: 53°19′14.2″N, 001°43′46.9″W
    test 937 height4: 53°19′14.2″N, 001°43′46.9″W
    test 938 haversineTo: 124801.098
    test 939 haversineTo: 124801.098
    test 940 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 941 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 942 thomasTo: 125206.188
    test 943 thomasTo: 125206.188
    test 944 vincentysTo: 124801.098
    test 945 vincentysTo: 124801.098
    test 946 isclockwise: False
    test 947 isclockwise*: False
    test 948 isclockwise: True
    test 949 isclockwise*: True
    test 950 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 951 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 952 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 953 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 954 isconvex: False
    test 955 isconvex*: False
    test 956 isconvex: True
    test 957 isconvex*: True
    test 958 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 959 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 960 isenclosedBy1: True
    test 961 isenclosedBy1*: True
    test 962 isenclosedBy2: False
    test 963 isenclosedBy2*: False
    test 964 isenclosedBy3: False
    test 965 isenclosedBy3*: False
    test 966 isenclosedBy4: False
    test 967 isenclosedBy4*: False
    test 968 isenclosedBy5: False
    test 969 isenclosedBy5*: False
    test 970 isenclosedBy6: True
    test 971 isenclosedBy6*: True
    test 972 isenclosedBy7: True
    test 973 isenclosedBy7*: True
    test 974 initialBearingTo: 102.392291
    test 975 compassAngleTo: 100.017
    test 976 compassAngleTo: 105.599
    test 977 initialBearingTo: 288.676039
    test 978 compassAngleTo: 280.017
    test 979 compassAngleTo: 285.599
    test 980 equirectangularTo: 592.185
    test 981 distanceTo: 593.571
    test 982 bearingTo: 0.0
    test 983 compassAngleTo: 0.0
    test 984 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 985 compassAngleTo: 45.0
    test 986 bearingTo: 90.0
    test 987 compassAngleTo: 90.0
    test 988 bearingTo: 180.0
    test 989 compassAngleTo: 180.0
    test 990 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 991 compassAngleTo: 225.0
    test 992 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 993 compassAngleTo: 315.0
    test 994 bearingTo: 270.0
    test 995 compassAngleTo: 270.0
    test 996 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 997 compassAngleTo: 359.4
    test 998 latlon2: (53.0, 1.0)
    test 999 philam2: (0.93, 0.02)
    test 1000 bearingTo: 31
    test 1001 compassAngleTo: 31
    test 1002 compassAngleTo: 45
    test 1003 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1004 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1005 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1006 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1007 isequalTo: <class 'bool'>
    test 1008 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1009 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1010 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1011 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1012 compassAngleTo: <class 'float'>
    test 1013 cosineLawTo: <class 'float'>
    test 1014 euclideanTo: <class 'float'>
    test 1015 flatLocalTo: <class 'float'>
    test 1016 flatPolarTo: <class 'float'>
    test 1017 haversineTo: <class 'float'>
    test 1018 hubenyTo: <class 'float'>
    test 1019 vincentysTo: <class 'float'>
    test 1020 toNvector: (0.615661, 0.0, 0.788011)
    test 1021 toVector: (0.615661, 0.0, 0.788011)
    test 1022 toVector3d: (0.61566, 0.0, 0.78801)
    test 1023 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 1024 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 1025 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 1026 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 1027 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 1028 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 1029 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 1030 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1031 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1032 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 1033 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 1034 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 1035 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 1036 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 1037 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 1038 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 1039 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 1040 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1041 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1042 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1043 circum3 (pygeodesy.ellipsoidalKarney) .radius: 57792.067
    test 1044 circum3 (pygeodesy.ellipsoidalKarney) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1045 circum3 (pygeodesy.ellipsoidalKarney) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1046 circum3 (pygeodesy.ellipsoidalKarney) .d1: 57792.858
    test 1047 circum3 (pygeodesy.ellipsoidalKarney) .d2: 57792.859
    test 1048 circum3 (pygeodesy.ellipsoidalKarney) .d3: 57792.859
    test 1049 circum3 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1050 circum3 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1051 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1052 circum4 (pygeodesy.ellipsoidalKarney) .radius: 3184256.748
    test 1053 circum4 (pygeodesy.ellipsoidalKarney) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1054 circum4 (pygeodesy.ellipsoidalKarney) .rank: 3
    test 1055 circum4 (pygeodesy.ellipsoidalKarney) .residuals: ()
    test 1056 circum4 (pygeodesy.ellipsoidalKarney) .d1: 57818.033
    test 1057 circum4 (pygeodesy.ellipsoidalKarney) .d2: 57834.176
    test 1058 circum4 (pygeodesy.ellipsoidalKarney) .d3: 57830.992
    test 1059 circum4 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1060 circum4 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1061 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1062 circin6 (pygeodesy.ellipsoidalKarney) .rB+rC: 1561159.315
    test 1063 circin6 (pygeodesy.ellipsoidalKarney) .rC+pA: 1111782.535
    test 1064 circin6 (pygeodesy.ellipsoidalKarney) .rA+rB: 1104451.745
    test 1065 circin6 (pygeodesy.ellipsoidalKarney) .radius: 325058.721
    test 1066 circin6 (pygeodesy.ellipsoidalKarney) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1067 circin6 (pygeodesy.ellipsoidalKarney) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1068 circin6 (pygeodesy.ellipsoidalKarney) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1069 circin6 (pygeodesy.ellipsoidalKarney) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1070 circin6 (pygeodesy.ellipsoidalKarney) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1071 circin6 (pygeodesy.ellipsoidalKarney) .dA: 327263.596
    test 1072 circin6 (pygeodesy.ellipsoidalKarney) .dB: 326036.153
    test 1073 circin6 (pygeodesy.ellipsoidalKarney) .dC: 326020.432

    testNOAA(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 1074 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1075 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1076 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1077 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 1078 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1079 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1080 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1081 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1082 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1083 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1084 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1085 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1086 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1087 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 1088 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1089 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1090 EquidistantKarney: 00.0°S, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1091 EquidistantKarney: 1.63715 (% of radius)
    test 1092 EquidistantKarney: 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1093 EquidistantKarney: 1.30663 (% of radius)
    test 1094 EquidistantKarney: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1095 EquidistantKarney: 1.31396 (% of radius)
    test 1096 EquidistantKarney: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1097 EquidistantKarney: 1.83268 (% of radius)
    test 1098 EquidistantKarney 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1099 EquidistantKarney 5: 4.18779e-16 (% of radius)
    test 1100 EquidistantKarney 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1101 EquidistantKarney 10: 4.18779e-16 (% of radius)
    test 1102 EquidistantKarney 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 1103 EquidistantKarney 15: 6.97964e-16 (% of radius)
    test 1104 EquidistantKarney 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 1105 EquidistantKarney 20: 2.09389e-16 (% of radius)
    test 1106 EquidistantKarney 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 1107 EquidistantKarney 25: 1.67511e-16 (% of radius)
    test 1108 EquidistantKarney 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 1109 EquidistantKarney 30: 4.18779e-16 (% of radius)
    test 1110 EquidistantKarney 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 1111 EquidistantKarney 35: 2.39302e-16 (% of radius)
    test 1112 EquidistantKarney 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 1113 EquidistantKarney 40: 4.18779e-16 (% of radius)
    test 1114 EquidistantKarney 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 1115 EquidistantKarney 45: 1.86124e-16 (% of radius)
    test 1116 EquidistantKarney 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 1117 EquidistantKarney 50: 1.67511e-16 (% of radius)
    test 1118 EquidistantKarney: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1119 EquidistantKarney: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1120 EquidistantKarney: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1121 EquidistantKarney: 38.053227°S, 039.770781°W Random +/- 45
    test 1122 EquidistantKarney: 38.053227°S, 039.770781°W, 55.86549°S, 065.009949°E  d 1.11032e-08 meter (iteration 3)
    test 1123 EquidistantKarney: 38.053227°S, 039.770781°W, 34.723591°S, 040.216205°W  d 1.06179e-08 meter (iteration 3)
    test 1124 EquidistantKarney: 38.053227°S, 039.770781°W, 23.992044°N, 012.739031°W  d 1.63683e-09 meter (iteration 3)
    test 1125 EquidistantKarney: 38.053227°S, 039.770781°W, 01.299173°N, 072.393267°E  d 3.58782e-09 meter (iteration 3)
    test 1126 EquidistantKarney: 38.053227°S, 039.770781°W, 53.190001°S, 047.033509°E  d 2.47287e-09 meter (iteration 3)
    test 1127 EquidistantKarney: 38.053227°S, 039.770781°W, 08.418524°S, 068.132751°W  d 7.00698e-08 meter (iteration 3)
    test 1128 EquidistantKarney: 38.053227°S, 039.770781°W, 00.458833°S, 067.053352°W  d 1.19276e-08 meter (iteration 4)
    test 1129 EquidistantKarney: 38.053227°S, 039.770781°W, 30.33714°S, 009.250216°W  d 2.49454e-09 meter (iteration 3)
    test 1130 EquidistantKarney: 38.053227°S, 039.770781°W, 14.813359°S, 020.890189°E  d 2.55066e-09 meter (iteration 3)
    test 1131 EquidistantKarney: 38.053227°S, 039.770781°W, 34.880344°S, 022.612498°E  d 6.23636e-10 meter (iteration 3)
    test 1132 EquidistantKarney: 38.053227°S, 039.770781°W, 19.50389°S, 054.978766°W  d 2.55066e-09 meter (iteration 3)
    test 1133 EquidistantKarney: 38.053227°S, 039.770781°W, 41.0841°S, 106.906994°E  d 1.0577e-08 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalKarney, 22.07.07, datum='WGS84')
    test 1134 distanceTo: 866455.4329
    test 1135 coincident: 0.0
    test 1136 toDatum: OSGB36
    test 1137 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1138 isEllipsoidal: True
    test 1139 copy: True
    test 1140 isEllipsoidal: True
    test 1141 isSpherical: False
    test 1142 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 22.07.07, datum='WGS84')
    test 1143 coincident: 0.0
    test 1144 coincident: 0.0, 0.0, 0.0
    test 1145 destination: 37.6528°S, 143.9265°E
    test 1146 destination: True
    test 1147 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1148 destination2: True
    test 1149 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1150 distanceTo: 969954.166
    test 1151 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1152 distanceTo2: 972708.16174, 11.22502
    test 1153 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1154 destination: 58.64402°N, 003.07009°W
    test 1155 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1156 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1157 distanceTo: 404607.806
    test 1158 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1159 distanceTo2: 402574.597287, 157.726344
    test 1160 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1161 destination: 48.857°N, 002.351°E
    test 1162 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1163 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1164 distanceTo: 54973.295
    test 1165 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1166 distanceTo2: 54903.41209, 232.9209
    test 1167 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1168 destination: 37.6528°N, 143.9265°E
    test 1169 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1170 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1171 distanceToMP: 298396.057
    test 1172 distanceToSM: 185.415
    test 1173 distanceToMP: 111319.491
    test 1174 distanceToMP: 110574.389
    test 1175 distanceToKW: 222638.982
    test 1176 distanceToKW: 111319.491
    test 1177 distanceTo3: 54972.271
    test 1178 distanceTo3: 306°52′05.37″
    test 1179 distanceTo3: 307°10′25.07″
    test 1180 distanceTo2: 54902.390
    test 1181 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 22.07.07, datum='WGS84')
    test 1182 distanceTo/antipodal (None): 19936288.579
    test 1183 distanceTo/VincentyError (None): 19944127.421
    test 1184 initialBearingTo/VincentyError (None): 15.556883
    test 1185 finalBearingTo/VincentyError (None): 164.442514
    test 1186 distanceTo/equatorial (None): 20003931.46
    test 1187 initialBearingTo/equatorial (None): 0.0
    test 1188 distanceTo/coincident (None): 111319.491
    test 1189 distanceTo/meridional (None): 10001965.729
    test 1190 initialBearingTo/meridional (None): 180.0
    test 1191 distanceTo/coincident (None): 0.0
    test 1192 initialBearingTo/coincident (None): 180.0
    test 1193 finalBearingTo/coincident (None): 180.0
    test 1194 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1195 distanceTo/anti-meridian (None): 10825924.1
    test 1196 distanceTo/quadrants (None): 4015703.02
    test 1197 distanceTo/quadrants (None): 4015703.02
    test 1198 distanceTo/quadrants (None): 4015703.02
    test 1199 distanceTo/quadrants (None): 4015703.02
    test 1200 distanceTo/quadrants (None): 4015703.02
    test 1201 distanceTo/quadrants (None): 4015703.02
    test 1202 distanceTo/quadrants (None): 4015703.02
    test 1203 distanceTo/quadrants (None): 4015703.02
    test 1204 distanceTo/quadrants (None): 4015703.02
    test 1205 distanceTo/quadrants (None): 4015703.02
    test 1206 distanceTo/quadrants (None): 4015703.02
    test 1207 distanceTo/quadrants (None): 4015703.02
    test 1208 distanceTo/quadrants (None): 4015703.02
    test 1209 distanceTo/quadrants (None): 4015703.02
    test 1210 distanceTo/quadrants (None): 4015703.02
    test 1211 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalKarney, 22.07.07, datum='NAD83')
    test 1212 distanceTo: 866455.4329
    test 1213 coincident: 0.0
    test 1214 toDatum: OSGB36
    test 1215 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1216 isEllipsoidal: True
    test 1217 copy: True
    test 1218 isEllipsoidal: True
    test 1219 isSpherical: False
    test 1220 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 22.07.07, datum='NAD83')
    test 1221 coincident: 0.0
    test 1222 coincident: 0.0, 0.0, 0.0
    test 1223 destination: 37.6528°S, 143.9265°E
    test 1224 destination: True
    test 1225 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1226 destination2: True
    test 1227 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1228 distanceTo: 969954.166
    test 1229 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1230 distanceTo2: 972708.16174, 11.22502
    test 1231 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1232 destination: 58.64402°N, 003.07009°W
    test 1233 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1234 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1235 distanceTo: 404607.806
    test 1236 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1237 distanceTo2: 402574.597287, 157.726344
    test 1238 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1239 destination: 48.857°N, 002.351°E
    test 1240 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1241 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1242 distanceTo: 54973.295
    test 1243 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1244 distanceTo2: 54903.41209, 232.9209
    test 1245 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1246 destination: 37.6528°N, 143.9265°E
    test 1247 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1248 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1249 distanceToMP: 298396.057
    test 1250 distanceToSM: 185.415
    test 1251 distanceToMP: 111319.491
    test 1252 distanceToMP: 110574.389
    test 1253 distanceToKW: 222638.982
    test 1254 distanceToKW: 111319.491
    test 1255 distanceTo3: 54972.271
    test 1256 distanceTo3: 306°52′05.37″
    test 1257 distanceTo3: 307°10′25.07″
    test 1258 distanceTo2: 54902.390
    test 1259 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 22.07.07, datum='NAD83')
    test 1260 distanceTo/antipodal (None): 19936288.579
    test 1261 distanceTo/VincentyError (None): 19944127.421
    test 1262 initialBearingTo/VincentyError (None): 15.556883
    test 1263 finalBearingTo/VincentyError (None): 164.442514
    test 1264 distanceTo/equatorial (None): 20003931.46
    test 1265 initialBearingTo/equatorial (None): 0.0
    test 1266 distanceTo/coincident (None): 111319.491
    test 1267 distanceTo/meridional (None): 10001965.729
    test 1268 initialBearingTo/meridional (None): 180.0
    test 1269 distanceTo/coincident (None): 0.0
    test 1270 initialBearingTo/coincident (None): 180.0
    test 1271 finalBearingTo/coincident (None): 180.0
    test 1272 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1273 distanceTo/anti-meridian (None): 10825924.1
    test 1274 distanceTo/quadrants (None): 4015703.02
    test 1275 distanceTo/quadrants (None): 4015703.02
    test 1276 distanceTo/quadrants (None): 4015703.02
    test 1277 distanceTo/quadrants (None): 4015703.02
    test 1278 distanceTo/quadrants (None): 4015703.02
    test 1279 distanceTo/quadrants (None): 4015703.02
    test 1280 distanceTo/quadrants (None): 4015703.02
    test 1281 distanceTo/quadrants (None): 4015703.02
    test 1282 distanceTo/quadrants (None): 4015703.02
    test 1283 distanceTo/quadrants (None): 4015703.02
    test 1284 distanceTo/quadrants (None): 4015703.02
    test 1285 distanceTo/quadrants (None): 4015703.02
    test 1286 distanceTo/quadrants (None): 4015703.02
    test 1287 distanceTo/quadrants (None): 4015703.02
    test 1288 distanceTo/quadrants (None): 4015703.02
    test 1289 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 1290 .lat1: -41.320
    test 1291 .lon1: 174.810
    test 1292 .azi1: 161.067669986160
    test 1293 .lat2: 40.960
    test 1294 .lon2: -5.500
    test 1295 .azi2: 18.825195123247
    test 1296 .s12: 19959679.267353821546
    test 1297 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1298 destination2: 40.96, -5.5, 18.825195123247
    test 1299 areaOf: 1.366270368e+13
    test 1300 perimeterOf: 1.683106789e+07
    test 1301 isclockwise: False
    test 1302 isclockwise: True
    test 1303 areaCO: 2.69154549884e+11
    test 1304 isclockwise: True
    test 1305 perimeterCO: 2099854.381923

    testEllipsoidal(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1306 isEllipsoidal: True
    test 1307 isSpherical: False
    test 1308 isEllipsoidal: True
    test 1309 isSpherical: False
    test 1310 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 1311 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 1312 toDatum: 51.4778°N, 000.0016°W
    test 1313 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1314 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1315 parse: 51.477284°N, 000.00002°E, -45.91m
    test 1316 reframe: None
    test 1317 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 1318 toCss: -111.158797 5705242.333679
    test 1319 toCss: -111.158797 5705242.333679
    test 1320 toEcef: 3980581.21, -111.159, 4966824.522
    test 1321 toEtm: 30 N 916396 5720041
    test 1322 toEtm: 30 N 916396 5720041
    test 1323 toLcc: 5639901 4612638
    test 1324 toLcc: 5639901 4612638
    test 1325 toOsgr: TQ 38876 77320
    test 1326 toOsgr: TQ 38876 77320
    test 1327 toUtmUps: 30 N 708207 5707224
    test 1328 toUtm: 30 N 708207 5707224
    test 1329 toUtm: 30 N 708207 5707224
    test 1330 toWm: -178.111 6672799.209
    test 1331 toWm: -178.111 6672799.209
    test 1332 elevation2: None
    test 1333 geoidHeight2: None
    test 1334 toUtmUps: 30 N 708207 5707224
    test 1335 toUtm: 30 N 708207 5707224
    test 1336 toUtm: 30 N 708207 5707224
    test 1337 toUtmUps: 00 N 2000000 1333272
    test 1338 toUps: 00 N 2000000 1333272
    test 1339 toUps: 00 N 0 -666728
    test 1340 toUps: 00 N 2000000 1555732
    test 1341 toUtm: 31 N 459200 9217519
    test 1342 nearestOn: 32.81°N, 031.42°E
    test 1343 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 1344 dop: 51.998889°N, 004.373333°E, +134.64m
    test 1345 distance: 3802238.504988627  FAILED, KNOWN, expected 3802238.504989
    test 1346 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4871366.31512, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 020°00′00.0″E), 0.0, 0.0)
    test 1347 iteration: 1
    test 1348 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 1349 iteration: 1

    testLatLon(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1350 isEllipsoidal: True
    test 1351 isSpherical: False
    test 1352 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1353 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1354 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1355 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1356 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1357 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1358 isequalTo: True
    test 1359 isequalTo: True
    test 1360 latlon2: 52.20472, 0.14056
    test 1361 latlon2: 52.2047, 0.1406
    test 1362 latlon2: 52.205, 0.141
    test 1363 latlon2: 52.2, 0.14
    test 1364 latlon2: 52.2, 0.1
    test 1365 latlon2: 52.0, 0.0
    test 1366 chordTo: 12029263.15
    test 1367 chordTo: 12029049.69
    test 1368 isequalTo: False
    test 1369 antipode1: 52.205°S, 179.881°W
    test 1370 antipode2: True
    test 1371 antipode3: 52.205°N, 000.119°E
    test 1372 antipode4: True
    test 1373 antipode5: 52.205°N, 000.119°E
    test 1374 initialBearingTo: 156.1106
    test 1375 initialBearingTo: 65.9335
    test 1376 initialBearingTo: 0.0
    test 1377 initialBearingTo: 180.0
    test 1378 finalBearingTo: 157.8345
    test 1379 finalBearingTo: 93.9034
    test 1380 bearingTo2: 156.1106, 157.8345
    test 1381 ispolar: True
    test 1382 copy: True
    test 1383 __eq__: True
    test 1384 __ne__: False
    test 1385 equirectangularTo: 404329.56
    test 1386 distanceTo: 404607.805988
    test 1387 distanceTo: 404607.805988
    test 1388 distanceTo: 3981601
    test 1389 antipodal: False
    test 1390 distanceTo dateline: 19959679.267
    test 1391 distanceTo unrolled: 19959679.267
    test 1392 antipodal: False
    test 1393 distanceTo dateline: 9513998
    test 1394 distanceTo unrolled: 9513998
    test 1395 distanceTo: 18003740.39
    test 1396 distanceTo: 19994797.60  FAILED, KNOWN, expected 20003931.46
    test 1397 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1398 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1399 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1400 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1401 intermediateTo: 51.372275°N, 000.707253°E
    test 1402 intermediateTo: True
    test 1403 intermediateTo: 404607.806
    test 1404 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1405 intermediateTo+5: 5.000
    test 1406 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1407 intermediateTo-4: 4.000
    test 1408 intermediateTo-h: 125.000
    test 1409 destination: 51.513526°N, 000.098038°W
    test 1410 destination: 51°30′49″N, 000°05′53″W
    test 1411 destination: 33°57′N, 118°24′W
    test 1412 destination: 33.950367°N, 118.399012°W
    test 1413 destination: 0.592546N, 2.066453W
    test 1414 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1415 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1416 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1417 chordTo: 125203.963
    test 1418 cosineAndoyerLambertTo: 125205.962
    test 1419 cosineAndoyerLambertTo: 125205.962
    test 1420 cosineForsyheAndoyerLambertTo: 125205.965
    test 1421 cosineForsyheAndoyerLambertTo: 125205.965
    test 1422 cosineLawTo: 124801.098
    test 1423 cosineLawTo: 124801.098
    test 1424 equirectangularTo: 124804.754
    test 1425 equirectangularTo: 124804.754
    test 1426 euclideanTo: 130015.089
    test 1427 euclideanTo: 130015.089
    test 1428 flatLocalTo: 125209.633
    test 1429 flatLocalTo: 125209.633
    test 1430 flatPolarTo: 133663.257
    test 1431 flatPolarTo: 133663.257
    test 1432 hartzell: 53.3206°N, 001.7297°W
    test 1433 hartzell: 53.349541°N, 001.7297°W
    test 1434 height4: 0.0
    test 1435 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1436 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1437 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1438 haversineTo: 124801.098
    test 1439 haversineTo: 124801.098
    test 1440 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1441 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1442 thomasTo: 125206.188
    test 1443 thomasTo: 125206.188
    test 1444 vincentysTo: 124801.098
    test 1445 vincentysTo: 124801.098
    test 1446 isclockwise: False
    test 1447 isclockwise*: False
    test 1448 isclockwise: True
    test 1449 isclockwise*: True
    test 1450 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1451 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1452 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1453 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1454 isconvex: False
    test 1455 isconvex*: False
    test 1456 isconvex: True
    test 1457 isconvex*: True
    test 1458 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1459 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1460 isenclosedBy1: True
    test 1461 isenclosedBy1*: True
    test 1462 isenclosedBy2: False
    test 1463 isenclosedBy2*: False
    test 1464 isenclosedBy3: False
    test 1465 isenclosedBy3*: False
    test 1466 isenclosedBy4: False
    test 1467 isenclosedBy4*: False
    test 1468 isenclosedBy5: False
    test 1469 isenclosedBy5*: False
    test 1470 isenclosedBy6: True
    test 1471 isenclosedBy6*: True
    test 1472 isenclosedBy7: True
    test 1473 isenclosedBy7*: True
    test 1474 initialBearingTo: 102.392291
    test 1475 compassAngleTo: 100.017
    test 1476 compassAngleTo: 105.599
    test 1477 initialBearingTo: 288.676039
    test 1478 compassAngleTo: 280.017
    test 1479 compassAngleTo: 285.599
    test 1480 equirectangularTo: 592.185
    test 1481 distanceTo: 593.571
    test 1482 bearingTo: 0.0
    test 1483 compassAngleTo: 0.0
    test 1484 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1485 compassAngleTo: 45.0
    test 1486 bearingTo: 90.0
    test 1487 compassAngleTo: 90.0
    test 1488 bearingTo: 180.0
    test 1489 compassAngleTo: 180.0
    test 1490 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1491 compassAngleTo: 225.0
    test 1492 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1493 compassAngleTo: 315.0
    test 1494 bearingTo: 270.0
    test 1495 compassAngleTo: 270.0
    test 1496 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1497 compassAngleTo: 359.4
    test 1498 latlon2: (53.0, 1.0)
    test 1499 philam2: (0.93, 0.02)
    test 1500 bearingTo: 31
    test 1501 compassAngleTo: 31
    test 1502 compassAngleTo: 45
    test 1503 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1504 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1505 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1506 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1507 isequalTo: <class 'bool'>
    test 1508 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1509 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1510 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1511 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1512 compassAngleTo: <class 'float'>
    test 1513 cosineLawTo: <class 'float'>
    test 1514 euclideanTo: <class 'float'>
    test 1515 flatLocalTo: <class 'float'>
    test 1516 flatPolarTo: <class 'float'>
    test 1517 haversineTo: <class 'float'>
    test 1518 hubenyTo: <class 'float'>
    test 1519 vincentysTo: <class 'float'>
    test 1520 toNvector: (0.615661, 0.0, 0.788011)
    test 1521 toVector: (0.615661, 0.0, 0.788011)
    test 1522 toVector3d: (0.61566, 0.0, 0.78801)
    test 1523 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 1524 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 1525 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 1526 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 1527 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1528 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 1529 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 1530 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1531 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1532 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 1533 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 1534 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 1535 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1536 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1537 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 1538 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 1539 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 1540 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1541 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1542 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1543 circum3 (pygeodesy.ellipsoidalExact) .radius: 57792.067
    test 1544 circum3 (pygeodesy.ellipsoidalExact) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1545 circum3 (pygeodesy.ellipsoidalExact) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1546 circum3 (pygeodesy.ellipsoidalExact) .d1: 57792.858
    test 1547 circum3 (pygeodesy.ellipsoidalExact) .d2: 57792.859
    test 1548 circum3 (pygeodesy.ellipsoidalExact) .d3: 57792.859
    test 1549 circum3 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1550 circum3 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1551 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1552 circum4 (pygeodesy.ellipsoidalExact) .radius: 3184256.748
    test 1553 circum4 (pygeodesy.ellipsoidalExact) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1554 circum4 (pygeodesy.ellipsoidalExact) .rank: 3
    test 1555 circum4 (pygeodesy.ellipsoidalExact) .residuals: ()
    test 1556 circum4 (pygeodesy.ellipsoidalExact) .d1: 57818.033
    test 1557 circum4 (pygeodesy.ellipsoidalExact) .d2: 57834.176
    test 1558 circum4 (pygeodesy.ellipsoidalExact) .d3: 57830.992
    test 1559 circum4 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1560 circum4 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1561 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1562 circin6 (pygeodesy.ellipsoidalExact) .rB+rC: 1561159.315
    test 1563 circin6 (pygeodesy.ellipsoidalExact) .rC+pA: 1111782.535
    test 1564 circin6 (pygeodesy.ellipsoidalExact) .rA+rB: 1104451.745
    test 1565 circin6 (pygeodesy.ellipsoidalExact) .radius: 325058.721
    test 1566 circin6 (pygeodesy.ellipsoidalExact) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1567 circin6 (pygeodesy.ellipsoidalExact) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1568 circin6 (pygeodesy.ellipsoidalExact) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1569 circin6 (pygeodesy.ellipsoidalExact) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1570 circin6 (pygeodesy.ellipsoidalExact) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1571 circin6 (pygeodesy.ellipsoidalExact) .dA: 327263.596
    test 1572 circin6 (pygeodesy.ellipsoidalExact) .dB: 326036.153
    test 1573 circin6 (pygeodesy.ellipsoidalExact) .dC: 326020.432

    testNOAA(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1574 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1575 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1576 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1577 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1578 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1579 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1580 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1581 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1582 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1583 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1584 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1585 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1586 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1587 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1588 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1589 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1590 EquidistantExact: 00.0°N, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1591 EquidistantExact: 1.63715 (% of radius)
    test 1592 EquidistantExact: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1593 EquidistantExact: 1.30663 (% of radius)
    test 1594 EquidistantExact: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1595 EquidistantExact: 1.31396 (% of radius)
    test 1596 EquidistantExact: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1597 EquidistantExact: 1.83268 (% of radius)
    test 1598 EquidistantExact 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1599 EquidistantExact 5: 2.51267e-15 (% of radius)
    test 1600 EquidistantExact 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1601 EquidistantExact 10: 2.51267e-15 (% of radius)
    test 1602 EquidistantExact 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 1603 EquidistantExact 15: 2.93145e-15 (% of radius)
    test 1604 EquidistantExact 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 1605 EquidistantExact 20: 6.28168e-16 (% of radius)
    test 1606 EquidistantExact 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 1607 EquidistantExact 25: 1.84263e-15 (% of radius)
    test 1608 EquidistantExact 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 1609 EquidistantExact 30: 9.7715e-16 (% of radius)
    test 1610 EquidistantExact 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 1611 EquidistantExact 35: 8.37557e-16 (% of radius)
    test 1612 EquidistantExact 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 1613 EquidistantExact 40: 1.46573e-15 (% of radius)
    test 1614 EquidistantExact 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 1615 EquidistantExact 45: 3.72248e-16 (% of radius)
    test 1616 EquidistantExact 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 1617 EquidistantExact 50: 3.35023e-16 (% of radius)
    test 1618 EquidistantExact: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1619 EquidistantExact: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1620 EquidistantExact: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal, near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1621 EquidistantExact: 22.580867°N, 022.424738°W Random +/- 45
    test 1622 EquidistantExact: 22.580867°N, 022.424738°W, 51.610642°S, 055.148383°W  d 4.38942e-09 meter (iteration 3)
    test 1623 EquidistantExact: 22.580867°N, 022.424738°W, 20.276532°N, 042.555836°W  d 1.51818e-08 meter (iteration 3)
    test 1624 EquidistantExact: 22.580867°N, 022.424738°W, 49.038938°N, 009.818438°W  d 5.08055e-09 meter (iteration 3)
    test 1625 EquidistantExact: 22.580867°N, 022.424738°W, 05.336034°N, 001.080064°E  d 1.46139e-09 meter (iteration 3)
    test 1626 EquidistantExact: 22.580867°N, 022.424738°W, 29.874174°S, 036.089201°W  d 2.07782e-09 meter (iteration 3)
    test 1627 EquidistantExact: 22.580867°N, 022.424738°W, 16.105115°S, 031.832434°E  d 6.94161e-09 meter (iteration 3)
    test 1628 EquidistantExact: 22.580867°N, 022.424738°W, 02.212519°N, 013.405778°E  d 0 meter (iteration 3)
    test 1629 EquidistantExact: 22.580867°N, 022.424738°W, 19.607389°N, 005.704949°E  d 4.84188e-09 meter (iteration 3)
    test 1630 EquidistantExact: 22.580867°N, 022.424738°W, 03.681193°S, 097.644834°E  d 5.74215e-09 meter (iteration 3)
    test 1631 EquidistantExact: 22.580867°N, 022.424738°W, 40.045591°S, 043.349214°W  d 2.07782e-09 meter (iteration 3)
    test 1632 EquidistantExact: 22.580867°N, 022.424738°W, 44.418741°N, 000.74759°W  d 1.89151e-08 meter (iteration 3)
    test 1633 EquidistantExact: 22.580867°N, 022.424738°W, 38.899271°N, 030.682674°W  d 6.85475e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalExact, 22.07.07, datum='WGS84')
    test 1634 distanceTo: 866455.4329
    test 1635 coincident: 0.0
    test 1636 toDatum: OSGB36
    test 1637 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1638 isEllipsoidal: True
    test 1639 copy: True
    test 1640 isEllipsoidal: True
    test 1641 isSpherical: False
    test 1642 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 22.07.07, datum='WGS84')
    test 1643 coincident: 0.0
    test 1644 coincident: 0.0, 0.0, 0.0
    test 1645 destination: 37.6528°S, 143.9265°E
    test 1646 destination: True
    test 1647 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1648 destination2: True
    test 1649 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1650 distanceTo: 969954.166
    test 1651 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1652 distanceTo2: 972708.16174, 11.22502
    test 1653 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1654 destination: 58.64402°N, 003.07009°W
    test 1655 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1656 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1657 distanceTo: 404607.806
    test 1658 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1659 distanceTo2: 402574.597287, 157.726344
    test 1660 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1661 destination: 48.857°N, 002.351°E
    test 1662 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1663 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1664 distanceTo: 54973.295
    test 1665 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1666 distanceTo2: 54903.41209, 232.9209
    test 1667 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1668 destination: 37.6528°N, 143.9265°E
    test 1669 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1670 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1671 distanceToMP: 298396.057
    test 1672 distanceToSM: 185.415
    test 1673 distanceToMP: 111319.491
    test 1674 distanceToMP: 110574.361
    test 1675 distanceToKW: 222638.982
    test 1676 distanceToKW: 111319.491
    test 1677 distanceTo3: 54972.271
    test 1678 distanceTo3: 306°52′05.37″
    test 1679 distanceTo3: 307°10′25.07″
    test 1680 distanceTo2: 54902.390
    test 1681 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 22.07.07, datum='WGS84')
    test 1682 distanceTo/antipodal (None): 19936288.579
    test 1683 distanceTo/VincentyError (None): 19944127.421
    test 1684 initialBearingTo/VincentyError (None): 15.556883
    test 1685 finalBearingTo/VincentyError (None): 164.442514
    test 1686 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 1687 initialBearingTo/equatorial (None): 0.0
    test 1688 distanceTo/coincident (None): 111319.491
    test 1689 distanceTo/meridional (None): 9999551.606
    test 1690 initialBearingTo/meridional (None): 180.0
    test 1691 distanceTo/coincident (None): 0.0
    test 1692 initialBearingTo/coincident (None): 180.0
    test 1693 finalBearingTo/coincident (None): 180.0
    test 1694 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1695 distanceTo/anti-meridian (None): 10825924.1
    test 1696 distanceTo/quadrants (None): 4015703.02
    test 1697 distanceTo/quadrants (None): 4015703.02
    test 1698 distanceTo/quadrants (None): 4015703.02
    test 1699 distanceTo/quadrants (None): 4015703.02
    test 1700 distanceTo/quadrants (None): 4015703.02
    test 1701 distanceTo/quadrants (None): 4015703.02
    test 1702 distanceTo/quadrants (None): 4015703.02
    test 1703 distanceTo/quadrants (None): 4015703.02
    test 1704 distanceTo/quadrants (None): 4015703.02
    test 1705 distanceTo/quadrants (None): 4015703.02
    test 1706 distanceTo/quadrants (None): 4015703.02
    test 1707 distanceTo/quadrants (None): 4015703.02
    test 1708 distanceTo/quadrants (None): 4015703.02
    test 1709 distanceTo/quadrants (None): 4015703.02
    test 1710 distanceTo/quadrants (None): 4015703.02
    test 1711 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalExact, 22.07.07, datum='NAD83')
    test 1712 distanceTo: 866455.4329
    test 1713 coincident: 0.0
    test 1714 toDatum: OSGB36
    test 1715 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1716 isEllipsoidal: True
    test 1717 copy: True
    test 1718 isEllipsoidal: True
    test 1719 isSpherical: False
    test 1720 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 22.07.07, datum='NAD83')
    test 1721 coincident: 0.0
    test 1722 coincident: 0.0, 0.0, 0.0
    test 1723 destination: 37.6528°S, 143.9265°E
    test 1724 destination: True
    test 1725 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1726 destination2: True
    test 1727 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1728 distanceTo: 969954.166
    test 1729 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1730 distanceTo2: 972708.16174, 11.22502
    test 1731 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1732 destination: 58.64402°N, 003.07009°W
    test 1733 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1734 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1735 distanceTo: 404607.806
    test 1736 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1737 distanceTo2: 402574.597287, 157.726344
    test 1738 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1739 destination: 48.857°N, 002.351°E
    test 1740 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1741 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1742 distanceTo: 54973.295
    test 1743 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1744 distanceTo2: 54903.41209, 232.9209
    test 1745 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1746 destination: 37.6528°N, 143.9265°E
    test 1747 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1748 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1749 distanceToMP: 298396.057
    test 1750 distanceToSM: 185.415
    test 1751 distanceToMP: 111319.491
    test 1752 distanceToMP: 110574.361
    test 1753 distanceToKW: 222638.982
    test 1754 distanceToKW: 111319.491
    test 1755 distanceTo3: 54972.271
    test 1756 distanceTo3: 306°52′05.37″
    test 1757 distanceTo3: 307°10′25.07″
    test 1758 distanceTo2: 54902.390
    test 1759 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 22.07.07, datum='NAD83')
    test 1760 distanceTo/antipodal (None): 19936288.579
    test 1761 distanceTo/VincentyError (None): 19944127.421
    test 1762 initialBearingTo/VincentyError (None): 15.556883
    test 1763 finalBearingTo/VincentyError (None): 164.442514
    test 1764 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 1765 initialBearingTo/equatorial (None): 0.0
    test 1766 distanceTo/coincident (None): 111319.491
    test 1767 distanceTo/meridional (None): 9999551.606
    test 1768 initialBearingTo/meridional (None): 180.0
    test 1769 distanceTo/coincident (None): 0.0
    test 1770 initialBearingTo/coincident (None): 180.0
    test 1771 finalBearingTo/coincident (None): 180.0
    test 1772 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1773 distanceTo/anti-meridian (None): 10825924.1
    test 1774 distanceTo/quadrants (None): 4015703.02
    test 1775 distanceTo/quadrants (None): 4015703.02
    test 1776 distanceTo/quadrants (None): 4015703.02
    test 1777 distanceTo/quadrants (None): 4015703.02
    test 1778 distanceTo/quadrants (None): 4015703.02
    test 1779 distanceTo/quadrants (None): 4015703.02
    test 1780 distanceTo/quadrants (None): 4015703.02
    test 1781 distanceTo/quadrants (None): 4015703.02
    test 1782 distanceTo/quadrants (None): 4015703.02
    test 1783 distanceTo/quadrants (None): 4015703.02
    test 1784 distanceTo/quadrants (None): 4015703.02
    test 1785 distanceTo/quadrants (None): 4015703.02
    test 1786 distanceTo/quadrants (None): 4015703.02
    test 1787 distanceTo/quadrants (None): 4015703.02
    test 1788 distanceTo/quadrants (None): 4015703.02
    test 1789 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1790 .lat1: -41.320
    test 1791 .lon1: 174.810
    test 1792 .azi1: 161.067669986160
    test 1793 .lat2: 40.960
    test 1794 .lon2: -5.500
    test 1795 .azi2: 18.825195123247
    test 1796 .s12: 19959679.267353817821  FAILED, KNOWN, expected 19959679.267353821546
    test 1797 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1798 destination2: 40.96, -5.5, 18.825195123247
    test 1799 areaOf: 1.366270368e+13
    test 1800 perimeterOf: 1.683089136e+07
    test 1801 isclockwise: False
    test 1802 isclockwise: True
    test 1803 areaCO: 2.69154549884e+11
    test 1804 isclockwise: True
    test 1805 perimeterCO: 2098430.887891

    99 of 1805 testEllipsoidal.py tests (5.5%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 34.810 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEllipsoidalGeodTest.py

    testing testEllipsoidalGeodTest.py 21.05.16 (module pygeodesy.ellipsoidalKarney 22.07.07)
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
    test 4 line 1 lat2: -48.164270779098
    test 5 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 6 line 1 azi2: 175.334308316285
    test 7 line 1 lat2: -48.164270779098
    test 8 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 9 line 1 azi2: 175.334308316285
    test 10 line 2 lat: -23.186513
    test 11 line 2 lon: 68.567247
    test 12 line 2 fb: 154.287114
    test 13 line 2 lat2: -23.186512533703
    test 14 line 2 lon2: 68.567247430960
    test 15 line 2 azi2: 154.287114123872
    test 16 line 2 lat2: -23.186512533703
    test 17 line 2 lon2: 68.567247430960
    test 18 line 2 azi2: 154.287114123872
    test 19 line 3 lat: 53.997072
    test 20 line 3 lon: 44.520619
    test 21 line 3 fb: 52.159487
    test 22 line 3 lat2: 53.997072295385
    test 23 line 3 lon2: 44.520619105668
    test 24 line 3 azi2: 52.159486739948
    test 25 line 3 lat2: 53.997072295385
    test 26 line 3 lon2: 44.520619105668
    test 27 line 3 azi2: 52.159486739948
    test 28 line 4 lat: -49.416672
    test 29 line 4 lon: 166.828083
    test 30 line 4 fb: 22.033031
    test 31 line 4 lat2: -49.416672064706
    test 32 line 4 lon2: 166.828083210689
    test 33 line 4 azi2: 22.033030848249
    test 34 line 4 lat2: -49.416672064706
    test 35 line 4 lon2: 166.828083210689
    test 36 line 4 azi2: 22.033030848249
    test 37 line 5 lat: -60.405136
    test 38 line 5 lon: 110.581140
    test 39 line 5 fb: 75.518296
    test 40 line 5 lat2: -60.405136414530
    test 41 line 5 lon2: 110.581139538777
    test 42 line 5 azi2: 75.518295964649
    test 43 line 5 lat2: -60.405136414530
    test 44 line 5 lon2: 110.581139538777
    test 45 line 5 azi2: 75.518295964649
    test 46 line 6 lat: -11.212600
    test 47 line 6 lon: 144.177077
    test 48 line 6 fb: 133.027766
    test 49 line 6 lat2: -11.212600121556
    test 50 line 6 lon2: 144.177076511360
    test 51 line 6 azi2: 133.027766301029
    test 52 line 6 lat2: -11.212600121556
    test 53 line 6 lon2: 144.177076511360
    test 54 line 6 azi2: 133.027766301029
    test 55 line 7 lat: -6.529067
    test 56 line 7 lon: 2.895924
    test 57 line 7 fb: 178.740350
    test 58 line 7 lat2: -6.529066987956
    test 59 line 7 lon2: 2.895923948125
    test 60 line 7 azi2: 178.740350145954
    test 61 line 7 lat2: -6.529066987956
    test 62 line 7 lon2: 2.895923948125
    test 63 line 7 azi2: 178.740350145954
    test 64 line 8 lat: -8.855512
    test 65 line 8 lon: 112.749196
    test 66 line 8 fb: 119.512004
    test 67 line 8 lat2: -8.855512357257
    test 68 line 8 lon2: 112.749196494485
    test 69 line 8 azi2: 119.512003891282
    test 70 line 8 lat2: -8.855512357257
    test 71 line 8 lon2: 112.749196494485
    test 72 line 8 azi2: 119.512003891282
    test 73 line 9 lat: 29.866967
    test 74 line 9 lon: 171.726893
    test 75 line 9 fb: 171.662245
    test 76 line 9 lat2: 29.866967483293
    test 77 line 9 lon2: 171.726892560963
    test 78 line 9 azi2: 171.662244609397
    test 79 line 9 lat2: 29.866967483293
    test 80 line 9 lon2: 171.726892560963
    test 81 line 9 azi2: 171.662244609397
    test 82 line 10 lat: -29.238404
    test 83 line 10 lon: 133.459814
    test 84 line 10 fb: 69.814124
    test 85 line 10 lat2: -29.238404337998
    test 86 line 10 lon2: 133.459813533284
    test 87 line 10 azi2: 69.814124320813
    test 88 line 10 lat2: -29.238404337998
    test 89 line 10 lon2: 133.459813533284
    test 90 line 10 azi2: 69.814124320813
    test 91 line 11 lat: 55.600487
    test 92 line 11 lon: 75.128743
    test 93 line 11 fb: 153.896689
    test 94 line 11 lat2: 55.600487151983
    test 95 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 96 line 11 azi2: 153.896688535572
    test 97 line 11 lat2: 55.600487151982  FAILED, KNOWN, expected 55.600487151983
    test 98 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 99 line 11 azi2: 153.896688535572
    test 100 line 12 lat: -22.858435
    test 101 line 12 lon: 67.207513
    test 102 line 12 fb: 142.939529
    test 103 line 12 lat2: -22.858434825399
    test 104 line 12 lon2: 67.207513019332
    test 105 line 12 azi2: 142.939529056687
    test 106 line 12 lat2: -22.858434825399
    test 107 line 12 lon2: 67.207513019332
    test 108 line 12 azi2: 142.939529056687
    test 109 line 13 lat: -32.634475
    test 110 line 13 lon: 22.238523
    test 111 line 13 fb: 172.112993
    test 112 line 13 lat2: -32.634475461067
    test 113 line 13 lon2: 22.238523021935
    test 114 line 13 azi2: 172.112992582333
    test 115 line 13 lat2: -32.634475461067
    test 116 line 13 lon2: 22.238523021935
    test 117 line 13 azi2: 172.112992582333
    test 118 line 14 lat: 62.224985
    test 119 line 14 lon: 47.119133
    test 120 line 14 fb: 54.318105
    test 121 line 14 lat2: 62.224984867045
    test 122 line 14 lon2: 47.119133304525
    test 123 line 14 azi2: 54.318105291965
    test 124 line 14 lat2: 62.224984867045
    test 125 line 14 lon2: 47.119133304525
    test 126 line 14 azi2: 54.318105291965
    test 127 line 15 lat: 33.069613
    test 128 line 15 lon: 5.796996
    test 129 line 15 fb: 17.403845
    test 130 line 15 lat2: 33.069613195450
    test 131 line 15 lon2: 5.796995960186
    test 132 line 15 azi2: 17.403844642346
    test 133 line 15 lat2: 33.069613195450
    test 134 line 15 lon2: 5.796995960186
    test 135 line 15 azi2: 17.403844642346
    test 136 line 16 lat: 53.760900
    test 137 line 16 lon: 119.204306
    test 138 line 16 fb: 141.069793
    test 139 line 16 lat2: 53.760899500985
    test 140 line 16 lon2: 119.204305898518
    test 141 line 16 azi2: 141.069793254983
    test 142 line 16 lat2: 53.760899500985
    test 143 line 16 lon2: 119.204305898518
    test 144 line 16 azi2: 141.069793254983
    test 145 line 17 lat: -3.225632
    test 146 line 17 lon: 103.742354
    test 147 line 17 fb: 127.880328
    test 148 line 17 lat2: -3.225632004245
    test 149 line 17 lon2: 103.742354347526
    test 150 line 17 azi2: 127.880328388524
    test 151 line 17 lat2: -3.225632004245
    test 152 line 17 lon2: 103.742354347526
    test 153 line 17 azi2: 127.880328388524
    test 154 line 18 lat: 47.108712
    test 155 line 18 lon: 99.934107
    test 156 line 18 fb: 104.103491
    test 157 line 18 lat2: 47.108712008353
    test 158 line 18 lon2: 99.934107358387
    test 159 line 18 azi2: 104.103491123038
    test 160 line 18 lat2: 47.108712008353
    test 161 line 18 lon2: 99.934107358387
    test 162 line 18 azi2: 104.103491123038
    test 163 line 19 lat: 5.399363
    test 164 line 19 lon: 135.250064
    test 165 line 19 fb: 102.177018
    test 166 line 19 lat2: 5.399363208349
    test 167 line 19 lon2: 135.250063670790
    test 168 line 19 azi2: 102.177017677370
    test 169 line 19 lat2: 5.399363208349
    test 170 line 19 lon2: 135.250063670790
    test 171 line 19 azi2: 102.177017677370
    test 172 line 20 lat: -58.669225
    test 173 line 20 lon: 54.875015
    test 174 line 20 fb: 131.345308
    test 175 line 20 lat2: -58.669224697403
    test 176 line 20 lon2: 54.875014559502
    test 177 line 20 azi2: 131.345308028428
    test 178 line 20 lat2: -58.669224697403
    test 179 line 20 lon2: 54.875014559502
    test 180 line 20 azi2: 131.345308028428
    test 181 line 21 lat: 9.184229
    test 182 line 21 lon: 151.302637
    test 183 line 21 fb: 128.175105
    test 184 line 21 lat2: 9.184228666560
    test 185 line 21 lon2: 151.302636871911
    test 186 line 21 azi2: 128.175105446048
    test 187 line 21 lat2: 9.184228666560
    test 188 line 21 lon2: 151.302636871911
    test 189 line 21 azi2: 128.175105446048
    test 190 line 22 lat: 53.467940
    test 191 line 22 lon: 67.724192
    test 192 line 22 fb: 78.863492
    test 193 line 22 lat2: 53.467939714247
    test 194 line 22 lon2: 67.724192258333
    test 195 line 22 azi2: 78.863492168727
    test 196 line 22 lat2: 53.467939714247
    test 197 line 22 lon2: 67.724192258333
    test 198 line 22 azi2: 78.863492168727
    test 199 line 23 lat: 39.699456
    test 200 line 23 lon: 67.156325
    test 201 line 23 fb: 85.276830
    test 202 line 23 lat2: 39.699455912449
    test 203 line 23 lon2: 67.156324625647
    test 204 line 23 azi2: 85.276829539878
    test 205 line 23 lat2: 39.699455912449
    test 206 line 23 lon2: 67.156324625647
    test 207 line 23 azi2: 85.276829539878
    test 208 line 24 lat: 70.942602
    test 209 line 24 lon: 17.379214
    test 210 line 24 fb: 21.869008
    test 211 line 24 lat2: 70.942602144324
    test 212 line 24 lon2: 17.379213644124
    test 213 line 24 azi2: 21.869008256312
    test 214 line 24 lat2: 70.942602144324
    test 215 line 24 lon2: 17.379213644124
    test 216 line 24 azi2: 21.869008256312
    test 217 line 25 lat: 69.633349
    test 218 line 25 lon: 110.601933
    test 219 line 25 fb: 138.575193
    test 220 line 25 lat2: 69.633349004538
    test 221 line 25 lon2: 110.601933261211
    test 222 line 25 azi2: 138.575192608514
    test 223 line 25 lat2: 69.633349004538
    test 224 line 25 lon2: 110.601933261211
    test 225 line 25 azi2: 138.575192608514
    test 226 line 26 lat: 16.190815
    test 227 line 26 lon: 87.606993
    test 228 line 26 fb: 131.929410
    test 229 line 26 lat2: 16.190814826165
    test 230 line 26 lon2: 87.606993293114
    test 231 line 26 azi2: 131.929409507039
    test 232 line 26 lat2: 16.190814826165
    test 233 line 26 lon2: 87.606993293114
    test 234 line 26 azi2: 131.929409507039
    test 235 line 27 lat: 54.774905
    test 236 line 27 lon: 52.952507
    test 237 line 27 fb: 85.904051
    test 238 line 27 lat2: 54.774904542264
    test 239 line 27 lon2: 52.952506835523
    test 240 line 27 azi2: 85.904050867676
    test 241 line 27 lat2: 54.774904542264
    test 242 line 27 lon2: 52.952506835523
    test 243 line 27 azi2: 85.904050867676
    test 244 line 28 lat: -62.008569
    test 245 line 28 lon: 172.274877
    test 246 line 28 fb: 21.992601
    test 247 line 28 lat2: -62.008568677307
    test 248 line 28 lon2: 172.274876714260
    test 249 line 28 azi2: 21.992601380429
    test 250 line 28 lat2: -62.008568677307
    test 251 line 28 lon2: 172.274876714260
    test 252 line 28 azi2: 21.992601380429
    test 253 line 29 lat: 27.303730
    test 254 line 29 lon: 159.184451
    test 255 line 29 fb: 150.697920
    test 256 line 29 lat2: 27.303729660018
    test 257 line 29 lon2: 159.184451093393
    test 258 line 29 azi2: 150.697920369703
    test 259 line 29 lat2: 27.303729660018
    test 260 line 29 lon2: 159.184451093393
    test 261 line 29 azi2: 150.697920369703
    test 262 line 30 lat: 31.979897
    test 263 line 30 lon: 55.946759
    test 264 line 30 fb: 87.398293
    test 265 line 30 lat2: 31.979897342658
    test 266 line 30 lon2: 55.946758945497
    test 267 line 30 azi2: 87.398292964767
    test 268 line 30 lat2: 31.979897342658
    test 269 line 30 lon2: 55.946758945497
    test 270 line 30 azi2: 87.398292964767
    test 271 line 31 lat: 49.991468
    test 272 line 31 lon: 133.962411
    test 273 line 31 fb: 142.016540
    test 274 line 31 lat2: 49.991467522545
    test 275 line 31 lon2: 133.962411191467
    test 276 line 31 azi2: 142.016540226251
    test 277 line 31 lat2: 49.991467522545
    test 278 line 31 lon2: 133.962411191467
    test 279 line 31 azi2: 142.016540226251
    test 280 line 32 lat: 2.818559
    test 281 line 32 lon: 7.234774
    test 282 line 32 fb: 168.804029
    test 283 line 32 lat2: 2.818558842278
    test 284 line 32 lon2: 7.234774421859
    test 285 line 32 azi2: 168.804029404993
    test 286 line 32 lat2: 2.818558842278
    test 287 line 32 lon2: 7.234774421859
    test 288 line 32 azi2: 168.804029404993
    test 289 line 33 lat: -38.118071
    test 290 line 33 lon: 93.395971
    test 291 line 33 fb: 117.017377
    test 292 line 33 lat2: -38.118070550305
    test 293 line 33 lon2: 93.395971367720
    test 294 line 33 azi2: 117.017376985228
    test 295 line 33 lat2: -38.118070550305
    test 296 line 33 lon2: 93.395971367720
    test 297 line 33 azi2: 117.017376985228
    test 298 line 34 lat: 3.377824
    test 299 line 34 lon: 65.294746
    test 300 line 34 fb: 138.982544
    test 301 line 34 lat2: 3.377824468035
    test 302 line 34 lon2: 65.294745963255
    test 303 line 34 azi2: 138.982543784560
    test 304 line 34 lat2: 3.377824468035
    test 305 line 34 lon2: 65.294745963255
    test 306 line 34 azi2: 138.982543784560
    test 307 line 35 lat: 4.631157
    test 308 line 35 lon: 84.335045
    test 309 line 35 fb: 132.120804
    test 310 line 35 lat2: 4.631157299024
    test 311 line 35 lon2: 84.335044694540
    test 312 line 35 azi2: 132.120804319474
    test 313 line 35 lat2: 4.631157299024
    test 314 line 35 lon2: 84.335044694540
    test 315 line 35 azi2: 132.120804319474
    test 316 line 36 lat: 38.952215
    test 317 line 36 lon: 133.416463
    test 318 line 36 fb: 160.690586
    test 319 line 36 lat2: 38.952215219507
    test 320 line 36 lon2: 133.416463103113
    test 321 line 36 azi2: 160.690585690749
    test 322 line 36 lat2: 38.952215219507
    test 323 line 36 lon2: 133.416463103113
    test 324 line 36 azi2: 160.690585690749
    test 325 line 37 lat: -39.013297
    test 326 line 37 lon: 160.302849
    test 327 line 37 fb: 115.363715
    test 328 line 37 lat2: -39.013296805131
    test 329 line 37 lon2: 160.302849365986
    test 330 line 37 azi2: 115.363714797610
    test 331 line 37 lat2: -39.013296805131
    test 332 line 37 lon2: 160.302849365986
    test 333 line 37 azi2: 115.363714797610
    test 334 line 38 lat: -48.456093
    test 335 line 38 lon: 38.613822
    test 336 line 38 fb: 137.651668
    test 337 line 38 lat2: -48.456093143589
    test 338 line 38 lon2: 38.613821719886
    test 339 line 38 azi2: 137.651668464815
    test 340 line 38 lat2: -48.456093143589
    test 341 line 38 lon2: 38.613821719886
    test 342 line 38 azi2: 137.651668464815
    test 343 line 39 lat: -13.861956
    test 344 line 39 lon: 74.250572
    test 345 line 39 fb: 143.968262
    test 346 line 39 lat2: -13.861956131519
    test 347 line 39 lon2: 74.250571564776
    test 348 line 39 azi2: 143.968262419705
    test 349 line 39 lat2: -13.861956131520  FAILED, KNOWN, expected -13.861956131519
    test 350 line 39 lon2: 74.250571564776
    test 351 line 39 azi2: 143.968262419705
    test 352 line 40 lat: 25.289202
    test 353 line 40 lon: 47.063579
    test 354 line 40 fb: 78.672533
    test 355 line 40 lat2: 25.289201968371
    test 356 line 40 lon2: 47.063578519727
    test 357 line 40 azi2: 78.672532588106
    test 358 line 40 lat2: 25.289201968371
    test 359 line 40 lon2: 47.063578519727
    test 360 line 40 azi2: 78.672532588106
    test 361 line 41 lat: 49.498121
    test 362 line 41 lon: 131.993365
    test 363 line 41 fb: 157.425605
    test 364 line 41 lat2: 49.498121110507
    test 365 line 41 lon2: 131.993365399320
    test 366 line 41 azi2: 157.425605424890
    test 367 line 41 lat2: 49.498121110507
    test 368 line 41 lon2: 131.993365399320
    test 369 line 41 azi2: 157.425605424890
    test 370 line 42 lat: -2.104242
    test 371 line 42 lon: 56.532079
    test 372 line 42 fb: 129.406955
    test 373 line 42 lat2: -2.104241718494
    test 374 line 42 lon2: 56.532079408825
    test 375 line 42 azi2: 129.406954892035
    test 376 line 42 lat2: -2.104241718494
    test 377 line 42 lon2: 56.532079408825
    test 378 line 42 azi2: 129.406954892035
    test 379 line 43 lat: -39.997315
    test 380 line 43 lon: 49.004259
    test 381 line 43 fb: 135.432995
    test 382 line 43 lat2: -39.997315471629
    test 383 line 43 lon2: 49.004258662721
    test 384 line 43 azi2: 135.432994751523
    test 385 line 43 lat2: -39.997315471629
    test 386 line 43 lon2: 49.004258662721
    test 387 line 43 azi2: 135.432994751523
    test 388 line 44 lat: 9.333272
    test 389 line 44 lon: 98.670857
    test 390 line 44 fb: 120.694280
    test 391 line 44 lat2: 9.333271992381
    test 392 line 44 lon2: 98.670857333200
    test 393 line 44 azi2: 120.694280236304
    test 394 line 44 lat2: 9.333271992381
    test 395 line 44 lon2: 98.670857333200
    test 396 line 44 azi2: 120.694280236304
    test 397 line 45 lat: 38.653646
    test 398 line 45 lon: 136.060468
    test 399 line 45 fb: 152.489416
    test 400 line 45 lat2: 38.653646179484
    test 401 line 45 lon2: 136.060467518677
    test 402 line 45 azi2: 152.489415748331
    test 403 line 45 lat2: 38.653646179484
    test 404 line 45 lon2: 136.060467518677
    test 405 line 45 azi2: 152.489415748331
    test 406 line 46 lat: -4.564995
    test 407 line 46 lon: 166.894968
    test 408 line 46 fb: 127.520036
    test 409 line 46 lat2: -4.564994956240
    test 410 line 46 lon2: 166.894968092836
    test 411 line 46 azi2: 127.520036113641
    test 412 line 46 lat2: -4.564994956240
    test 413 line 46 lon2: 166.894968092836
    test 414 line 46 azi2: 127.520036113641
    test 415 line 47 lat: -38.522500
    test 416 line 47 lon: 178.679307
    test 417 line 47 fb: 176.468685
    test 418 line 47 lat2: -38.522500159620
    test 419 line 47 lon2: 178.679306959466
    test 420 line 47 azi2: 176.468684587438
    test 421 line 47 lat2: -38.522500159620
    test 422 line 47 lon2: 178.679306959466
    test 423 line 47 azi2: 176.468684587438
    test 424 line 48 lat: 45.529796
    test 425 line 48 lon: 145.048738
    test 426 line 48 fb: 160.706227
    test 427 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 428 line 48 lon2: 145.048737846273
    test 429 line 48 azi2: 160.706226714169
    test 430 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 431 line 48 lon2: 145.048737846273
    test 432 line 48 azi2: 160.706226714169
    test 433 line 49 lat: -2.968925
    test 434 line 49 lon: 5.044083
    test 435 line 49 fb: 174.913528
    test 436 line 49 lat2: -2.968924563433
    test 437 line 49 lon2: 5.044082955485
    test 438 line 49 azi2: 174.913527615338
    test 439 line 49 lat2: -2.968924563433
    test 440 line 49 lon2: 5.044082955485
    test 441 line 49 azi2: 174.913527615338
    test 442 line 50 lat: 1.618184
    test 443 line 50 lon: 163.262955
    test 444 line 50 fb: 161.097730
    test 445 line 50 lat2: 1.618184178387
    test 446 line 50 lon2: 163.262955108028
    test 447 line 50 azi2: 161.097729713868
    test 448 line 50 lat2: 1.618184178387
    test 449 line 50 lon2: 163.262955108028
    test 450 line 50 azi2: 161.097729713868
    test 451 line 51 lat: 25.179740
    test 452 line 51 lon: 107.504992
    test 453 line 51 fb: 154.055552
    test 454 line 51 lat2: 25.179740339437
    test 455 line 51 lon2: 107.504991932892
    test 456 line 51 azi2: 154.055552232572
    test 457 line 51 lat2: 25.179740339437
    test 458 line 51 lon2: 107.504991932892
    test 459 line 51 azi2: 154.055552232572
    test 460 line 52 lat: 57.391251
    test 461 line 52 lon: 89.082271
    test 462 line 52 fb: 101.276115
    test 463 line 52 lat2: 57.391251345244
    test 464 line 52 lon2: 89.082271206722
    test 465 line 52 azi2: 101.276114553753
    test 466 line 52 lat2: 57.391251345244
    test 467 line 52 lon2: 89.082271206722
    test 468 line 52 azi2: 101.276114553753
    test 469 line 53 lat: -11.470673
    test 470 line 53 lon: 48.285095
    test 471 line 53 fb: 148.389696
    test 472 line 53 lat2: -11.470672507979
    test 473 line 53 lon2: 48.285094684225
    test 474 line 53 azi2: 148.389695684750
    test 475 line 53 lat2: -11.470672507979
    test 476 line 53 lon2: 48.285094684225
    test 477 line 53 azi2: 148.389695684750
    test 478 line 54 lat: 27.356639
    test 479 line 54 lon: 84.391682
    test 480 line 54 fb: 104.661818
    test 481 line 54 lat2: 27.356639349123
    test 482 line 54 lon2: 84.391681754671
    test 483 line 54 azi2: 104.661818309238
    test 484 line 54 lat2: 27.356639349123
    test 485 line 54 lon2: 84.391681754671
    test 486 line 54 azi2: 104.661818309238
    test 487 line 55 lat: -40.533598
    test 488 line 55 lon: 103.488381
    test 489 line 55 fb: 132.398259
    test 490 line 55 lat2: -40.533597900971
    test 491 line 55 lon2: 103.488381204009
    test 492 line 55 azi2: 132.398259207371
    test 493 line 55 lat2: -40.533597900971
    test 494 line 55 lon2: 103.488381204009
    test 495 line 55 azi2: 132.398259207371
    test 496 line 56 lat: 52.337949
    test 497 line 56 lon: 149.908279
    test 498 line 56 fb: 162.333474
    test 499 line 56 lat2: 52.337949466457
    test 500 line 56 lon2: 149.908278798430
    test 501 line 56 azi2: 162.333474334205
    test 502 line 56 lat2: 52.337949466457
    test 503 line 56 lon2: 149.908278798430
    test 504 line 56 azi2: 162.333474334205
    test 505 line 57 lat: -58.474076
    test 506 line 57 lon: 78.718606
    test 507 line 57 fb: 117.457565
    test 508 line 57 lat2: -58.474075605820
    test 509 line 57 lon2: 78.718605560533
    test 510 line 57 azi2: 117.457565115569
    test 511 line 57 lat2: -58.474075605820
    test 512 line 57 lon2: 78.718605560533
    test 513 line 57 azi2: 117.457565115569
    test 514 line 58 lat: -35.840568
    test 515 line 58 lon: 4.157534
    test 516 line 58 fb: 174.451067
    test 517 line 58 lat2: -35.840568348239
    test 518 line 58 lon2: 4.157534199470
    test 519 line 58 azi2: 174.451066901814
    test 520 line 58 lat2: -35.840568348239
    test 521 line 58 lon2: 4.157534199470
    test 522 line 58 azi2: 174.451066901814
    test 523 line 59 lat: 15.629163
    test 524 line 59 lon: 102.677417
    test 525 line 59 fb: 103.482103
    test 526 line 59 lat2: 15.629163409998
    test 527 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 528 line 59 azi2: 103.482102722183
    test 529 line 59 lat2: 15.629163409998
    test 530 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 531 line 59 azi2: 103.482102722183
    test 532 line 60 lat: -1.256180
    test 533 line 60 lon: 133.625255
    test 534 line 60 fb: 104.470489
    test 535 line 60 lat2: -1.256179633151
    test 536 line 60 lon2: 133.625254783633
    test 537 line 60 azi2: 104.470489013739
    test 538 line 60 lat2: -1.256179633151
    test 539 line 60 lon2: 133.625254783633
    test 540 line 60 azi2: 104.470489013739
    test 541 line 61 lat: -40.558253
    test 542 line 61 lon: 112.897054
    test 543 line 61 fb: 90.226134
    test 544 line 61 lat2: -40.558252601871
    test 545 line 61 lon2: 112.897053867085
    test 546 line 61 azi2: 90.226134266467
    test 547 line 61 lat2: -40.558252601871
    test 548 line 61 lon2: 112.897053867085
    test 549 line 61 azi2: 90.226134266467
    test 550 line 62 lat: 86.193596
    test 551 line 62 lon: 116.956880
    test 552 line 62 fb: 117.618329
    test 553 line 62 lat2: 86.193595821107
    test 554 line 62 lon2: 116.956880430711
    test 555 line 62 azi2: 117.618329340274
    test 556 line 62 lat2: 86.193595821107
    test 557 line 62 lon2: 116.956880430711
    test 558 line 62 azi2: 117.618329340274
    test 559 line 63 lat: 6.874181
    test 560 line 63 lon: 54.891199
    test 561 line 63 fb: 90.820790
    test 562 line 63 lat2: 6.874181093562
    test 563 line 63 lon2: 54.891198619261
    test 564 line 63 azi2: 90.820789878786
    test 565 line 63 lat2: 6.874181093562
    test 566 line 63 lon2: 54.891198619261
    test 567 line 63 azi2: 90.820789878786
    test 568 line 64 lat: -2.554657
    test 569 line 64 lon: 71.539549
    test 570 line 64 fb: 105.722921
    test 571 line 64 lat2: -2.554657243385
    test 572 line 64 lon2: 71.539549368441
    test 573 line 64 azi2: 105.722921401613
    test 574 line 64 lat2: -2.554657243385
    test 575 line 64 lon2: 71.539549368441
    test 576 line 64 azi2: 105.722921401613
    test 577 line 65 lat: 1.329645
    test 578 line 65 lon: 138.134969
    test 579 line 65 fb: 150.465118
    test 580 line 65 lat2: 1.329645321136
    test 581 line 65 lon2: 138.134968538140
    test 582 line 65 azi2: 150.465118219879
    test 583 line 65 lat2: 1.329645321136
    test 584 line 65 lon2: 138.134968538140
    test 585 line 65 azi2: 150.465118219879
    test 586 line 66 lat: -44.026427
    test 587 line 66 lon: 121.367591
    test 588 line 66 fb: 123.975227
    test 589 line 66 lat2: -44.026426573446
    test 590 line 66 lon2: 121.367591215510
    test 591 line 66 azi2: 123.975227063718
    test 592 line 66 lat2: -44.026426573446
    test 593 line 66 lon2: 121.367591215510
    test 594 line 66 azi2: 123.975227063718
    test 595 line 67 lat: -3.399081
    test 596 line 67 lon: 138.655764
    test 597 line 67 fb: 98.994343
    test 598 line 67 lat2: -3.399080708673
    test 599 line 67 lon2: 138.655764270175
    test 600 line 67 azi2: 98.994343217447
    test 601 line 67 lat2: -3.399080708673
    test 602 line 67 lon2: 138.655764270175
    test 603 line 67 azi2: 98.994343217447
    test 604 line 68 lat: -26.776985
    test 605 line 68 lon: 67.020055
    test 606 line 68 fb: 119.394665
    test 607 line 68 lat2: -26.776984673364
    test 608 line 68 lon2: 67.020054548341
    test 609 line 68 azi2: 119.394664651636
    test 610 line 68 lat2: -26.776984673364
    test 611 line 68 lon2: 67.020054548341
    test 612 line 68 azi2: 119.394664651636
    test 613 line 69 lat: 52.057239
    test 614 line 69 lon: 151.887270
    test 615 line 69 fb: 161.537826
    test 616 line 69 lat2: 52.057239269050
    test 617 line 69 lon2: 151.887270484247
    test 618 line 69 azi2: 161.537826425477
    test 619 line 69 lat2: 52.057239269050
    test 620 line 69 lon2: 151.887270484247
    test 621 line 69 azi2: 161.537826425477
    test 622 line 70 lat: 3.784724
    test 623 line 70 lon: 102.727745
    test 624 line 70 fb: 116.453155
    test 625 line 70 lat2: 3.784724165483
    test 626 line 70 lon2: 102.727744934481
    test 627 line 70 azi2: 116.453155405439
    test 628 line 70 lat2: 3.784724165483
    test 629 line 70 lon2: 102.727744934481
    test 630 line 70 azi2: 116.453155405439
    test 631 line 71 lat: -40.409299
    test 632 line 71 lon: 86.033195
    test 633 line 71 fb: 121.080298
    test 634 line 71 lat2: -40.409298772797
    test 635 line 71 lon2: 86.033195335657
    test 636 line 71 azi2: 121.080297615268
    test 637 line 71 lat2: -40.409298772797
    test 638 line 71 lon2: 86.033195335657
    test 639 line 71 azi2: 121.080297615268
    test 640 line 72 lat: 73.013460
    test 641 line 72 lon: 76.188125
    test 642 line 72 fb: 78.877769
    test 643 line 72 lat2: 73.013460186926
    test 644 line 72 lon2: 76.188125151657
    test 645 line 72 azi2: 78.877769459629
    test 646 line 72 lat2: 73.013460186926
    test 647 line 72 lon2: 76.188125151657
    test 648 line 72 azi2: 78.877769459629
    test 649 line 73 lat: 52.870132
    test 650 line 73 lon: 51.020900
    test 651 line 73 fb: 102.113351
    test 652 line 73 lat2: 52.870131799667
    test 653 line 73 lon2: 51.020900069545
    test 654 line 73 azi2: 102.113351369331
    test 655 line 73 lat2: 52.870131799667
    test 656 line 73 lon2: 51.020900069545
    test 657 line 73 azi2: 102.113351369331
    test 658 line 74 lat: 28.909632
    test 659 line 74 lon: 17.071526
    test 660 line 74 fb: 103.660711
    test 661 line 74 lat2: 28.909631785857
    test 662 line 74 lon2: 17.071526465331
    test 663 line 74 azi2: 103.660711362255
    test 664 line 74 lat2: 28.909631785857
    test 665 line 74 lon2: 17.071526465331
    test 666 line 74 azi2: 103.660711362255
    test 667 line 75 lat: -58.257855
    test 668 line 75 lon: 15.812862
    test 669 line 75 fb: 169.606337
    test 670 line 75 lat2: -58.257854831091
    test 671 line 75 lon2: 15.812862089412
    test 672 line 75 azi2: 169.606337169070
    test 673 line 75 lat2: -58.257854831091
    test 674 line 75 lon2: 15.812862089412
    test 675 line 75 azi2: 169.606337169070
    test 676 line 76 lat: -58.869445
    test 677 line 76 lon: 132.036795
    test 678 line 76 fb: 53.946549
    test 679 line 76 lat2: -58.869445004289
    test 680 line 76 lon2: 132.036794965086
    test 681 line 76 azi2: 53.946549037654
    test 682 line 76 lat2: -58.869445004289
    test 683 line 76 lon2: 132.036794965086
    test 684 line 76 azi2: 53.946549037654
    test 685 line 77 lat: -45.547043
    test 686 line 77 lon: 77.540664
    test 687 line 77 fb: 126.917177
    test 688 line 77 lat2: -45.547042598505
    test 689 line 77 lon2: 77.540663933413
    test 690 line 77 azi2: 126.917177154676
    test 691 line 77 lat2: -45.547042598505
    test 692 line 77 lon2: 77.540663933413
    test 693 line 77 azi2: 126.917177154676
    test 694 line 78 lat: 45.046385
    test 695 line 78 lon: 149.382429
    test 696 line 78 fb: 162.117474
    test 697 line 78 lat2: 45.046384823604
    test 698 line 78 lon2: 149.382428769460
    test 699 line 78 azi2: 162.117474447248
    test 700 line 78 lat2: 45.046384823604
    test 701 line 78 lon2: 149.382428769460
    test 702 line 78 azi2: 162.117474447248
    test 703 line 79 lat: -74.853338
    test 704 line 79 lon: 96.072097
    test 705 line 79 fb: 85.425493
    test 706 line 79 lat2: -74.853338324199
    test 707 line 79 lon2: 96.072096720955
    test 708 line 79 azi2: 85.425493305289
    test 709 line 79 lat2: -74.853338324199
    test 710 line 79 lon2: 96.072096720956  FAILED, KNOWN, expected 96.072096720955
    test 711 line 79 azi2: 85.425493305289
    test 712 line 80 lat: -13.205775
    test 713 line 80 lon: 57.532285
    test 714 line 80 fb: 122.358040
    test 715 line 80 lat2: -13.205775181752
    test 716 line 80 lon2: 57.532285422140
    test 717 line 80 azi2: 122.358040028964
    test 718 line 80 lat2: -13.205775181752
    test 719 line 80 lon2: 57.532285422140
    test 720 line 80 azi2: 122.358040028964
    test 721 line 81 lat: -5.135864
    test 722 line 81 lon: 115.048833
    test 723 line 81 fb: 93.168400
    test 724 line 81 lat2: -5.135863872649
    test 725 line 81 lon2: 115.048832990097
    test 726 line 81 azi2: 93.168399576996
    test 727 line 81 lat2: -5.135863872649
    test 728 line 81 lon2: 115.048832990097
    test 729 line 81 azi2: 93.168399576996
    test 730 line 82 lat: 13.355453
    test 731 line 82 lon: 19.253946
    test 732 line 82 fb: 143.568719
    test 733 line 82 lat2: 13.355452912310
    test 734 line 82 lon2: 19.253945880531
    test 735 line 82 azi2: 143.568718864193
    test 736 line 82 lat2: 13.355452912310
    test 737 line 82 lon2: 19.253945880531
    test 738 line 82 azi2: 143.568718864193
    test 739 line 83 lat: 0.766426
    test 740 line 83 lon: 147.485817
    test 741 line 83 fb: 144.982274
    test 742 line 83 lat2: 0.766426443892
    test 743 line 83 lon2: 147.485816830606
    test 744 line 83 azi2: 144.982273873382
    test 745 line 83 lat2: 0.766426443892
    test 746 line 83 lon2: 147.485816830606
    test 747 line 83 azi2: 144.982273873382
    test 748 line 84 lat: 10.228416
    test 749 line 84 lon: 159.204118
    test 750 line 84 fb: 173.111973
    test 751 line 84 lat2: 10.228416314659
    test 752 line 84 lon2: 159.204118025562
    test 753 line 84 azi2: 173.111973027488
    test 754 line 84 lat2: 10.228416314659
    test 755 line 84 lon2: 159.204118025562
    test 756 line 84 azi2: 173.111973027488
    test 757 line 85 lat: 73.178089
    test 758 line 85 lon: 131.762700
    test 759 line 85 fb: 135.271161
    test 760 line 85 lat2: 73.178089048974
    test 761 line 85 lon2: 131.762699581940
    test 762 line 85 azi2: 135.271161440271
    test 763 line 85 lat2: 73.178089048974
    test 764 line 85 lon2: 131.762699581941  FAILED, KNOWN, expected 131.762699581940
    test 765 line 85 azi2: 135.271161440271
    test 766 line 86 lat: -16.908717
    test 767 line 86 lon: 149.240494
    test 768 line 86 fb: 90.725082
    test 769 line 86 lat2: -16.908717231321
    test 770 line 86 lon2: 149.240493850337
    test 771 line 86 azi2: 90.725082091932
    test 772 line 86 lat2: -16.908717231321
    test 773 line 86 lon2: 149.240493850337
    test 774 line 86 azi2: 90.725082091932
    test 775 line 87 lat: -23.440025
    test 776 line 87 lon: 98.819595
    test 777 line 87 fb: 154.388320
    test 778 line 87 lat2: -23.440025289757
    test 779 line 87 lon2: 98.819595131759
    test 780 line 87 azi2: 154.388319751570
    test 781 line 87 lat2: -23.440025289757
    test 782 line 87 lon2: 98.819595131759
    test 783 line 87 azi2: 154.388319751570
    test 784 line 88 lat: -51.344465
    test 785 line 88 lon: 54.299399
    test 786 line 88 fb: 139.903236
    test 787 line 88 lat2: -51.344465279371
    test 788 line 88 lon2: 54.299399477396
    test 789 line 88 azi2: 139.903236261795
    test 790 line 88 lat2: -51.344465279371
    test 791 line 88 lon2: 54.299399477396
    test 792 line 88 azi2: 139.903236261795
    test 793 line 89 lat: 33.922320
    test 794 line 89 lon: 143.463070
    test 795 line 89 fb: 132.788230
    test 796 line 89 lat2: 33.922319712554
    test 797 line 89 lon2: 143.463070326988
    test 798 line 89 azi2: 132.788229856713
    test 799 line 89 lat2: 33.922319712554
    test 800 line 89 lon2: 143.463070326988
    test 801 line 89 azi2: 132.788229856713
    test 802 line 90 lat: -83.333068
    test 803 line 90 lon: 177.611925
    test 804 line 90 fb: 2.633769
    test 805 line 90 lat2: -83.333068057524
    test 806 line 90 lon2: 177.611924577958
    test 807 line 90 azi2: 2.633768744582
    test 808 line 90 lat2: -83.333068057524
    test 809 line 90 lon2: 177.611924577958
    test 810 line 90 azi2: 2.633768744582
    test 811 line 91 lat: 20.587333
    test 812 line 91 lon: 164.201962
    test 813 line 91 fb: 166.991083
    test 814 line 91 lat2: 20.587333492522
    test 815 line 91 lon2: 164.201962479604
    test 816 line 91 azi2: 166.991083245940
    test 817 line 91 lat2: 20.587333492522
    test 818 line 91 lon2: 164.201962479604
    test 819 line 91 azi2: 166.991083245940
    test 820 line 92 lat: 52.612815
    test 821 line 92 lon: 110.766184
    test 822 line 92 fb: 168.281486
    test 823 line 92 lat2: 52.612815386144
    test 824 line 92 lon2: 110.766184475279
    test 825 line 92 azi2: 168.281485715811
    test 826 line 92 lat2: 52.612815386144
    test 827 line 92 lon2: 110.766184475279
    test 828 line 92 azi2: 168.281485715811
    test 829 line 93 lat: -41.681373
    test 830 line 93 lon: 82.150183
    test 831 line 93 fb: 107.012959
    test 832 line 93 lat2: -41.681372899642
    test 833 line 93 lon2: 82.150183233451
    test 834 line 93 azi2: 107.012959072514
    test 835 line 93 lat2: -41.681372899642
    test 836 line 93 lon2: 82.150183233451
    test 837 line 93 azi2: 107.012959072514
    test 838 line 94 lat: 27.082807
    test 839 line 94 lon: 171.332531
    test 840 line 94 fb: 174.934340
    test 841 line 94 lat2: 27.082807052702
    test 842 line 94 lon2: 171.332530862401
    test 843 line 94 azi2: 174.934339881142
    test 844 line 94 lat2: 27.082807052702
    test 845 line 94 lon2: 171.332530862401
    test 846 line 94 azi2: 174.934339881142
    test 847 line 95 lat: 57.992299
    test 848 line 95 lon: 15.128357
    test 849 line 95 fb: 62.342982
    test 850 line 95 lat2: 57.992299464191
    test 851 line 95 lon2: 15.128356773547
    test 852 line 95 azi2: 62.342982084737
    test 853 line 95 lat2: 57.992299464191
    test 854 line 95 lon2: 15.128356773547
    test 855 line 95 azi2: 62.342982084737
    test 856 line 96 lat: -10.526000
    test 857 line 96 lon: 33.778702
    test 858 line 96 fb: 165.687804
    test 859 line 96 lat2: -10.526000344959
    test 860 line 96 lon2: 33.778701722506
    test 861 line 96 azi2: 165.687803859941
    test 862 line 96 lat2: -10.526000344959
    test 863 line 96 lon2: 33.778701722506
    test 864 line 96 azi2: 165.687803859941
    test 865 line 97 lat: 25.802395
    test 866 line 97 lon: 98.502531
    test 867 line 97 fb: 97.837271
    test 868 line 97 lat2: 25.802394934787
    test 869 line 97 lon2: 98.502531199301
    test 870 line 97 azi2: 97.837270592496
    test 871 line 97 lat2: 25.802394934787
    test 872 line 97 lon2: 98.502531199301
    test 873 line 97 azi2: 97.837270592496
    test 874 line 98 lat: 47.163255
    test 875 line 98 lon: 156.720176
    test 876 line 98 fb: 160.291022
    test 877 line 98 lat2: 47.163255465769
    test 878 line 98 lon2: 156.720176105542
    test 879 line 98 azi2: 160.291021678921
    test 880 line 98 lat2: 47.163255465769
    test 881 line 98 lon2: 156.720176105542
    test 882 line 98 azi2: 160.291021678921
    test 883 line 99 lat: 47.932063
    test 884 line 99 lon: 35.094714
    test 885 line 99 fb: 137.545065
    test 886 line 99 lat2: 47.932062978964
    test 887 line 99 lon2: 35.094714092217
    test 888 line 99 azi2: 137.545065115425
    test 889 line 99 lat2: 47.932062978964
    test 890 line 99 lon2: 35.094714092217
    test 891 line 99 azi2: 137.545065115425
    test 892 line 100 lat: -60.204340
    test 893 line 100 lon: 117.726218
    test 894 line 100 fb: 72.585011
    test 895 line 100 lat2: -60.204339807984
    test 896 line 100 lon2: 117.726217548610
    test 897 line 100 azi2: 72.585010656772
    test 898 line 100 lat2: -60.204339807984
    test 899 line 100 lon2: 117.726217548610
    test 900 line 100 azi2: 72.585010656772
    test 901 line 101 lat: 35.247411
    test 902 line 101 lon: 59.471562
    test 903 line 101 fb: 81.179468
    test 904 line 101 lat2: 35.247410984329
    test 905 line 101 lon2: 59.471562388985
    test 906 line 101 azi2: 81.179468094302
    test 907 line 101 lat2: 35.247410984329
    test 908 line 101 lon2: 59.471562388985
    test 909 line 101 azi2: 81.179468094302
    test 910 line 102 lat: 19.218268
    test 911 line 102 lon: 165.507915
    test 912 line 102 fb: 167.452074
    test 913 line 102 lat2: 19.218268047706
    test 914 line 102 lon2: 165.507915017643
    test 915 line 102 azi2: 167.452074301867
    test 916 line 102 lat2: 19.218268047706
    test 917 line 102 lon2: 165.507915017643
    test 918 line 102 azi2: 167.452074301867
    test 919 line 103 lat: 55.428809
    test 920 line 103 lon: 121.956541
    test 921 line 103 fb: 154.501481
    test 922 line 103 lat2: 55.428809300888
    test 923 line 103 lon2: 121.956541206929
    test 924 line 103 azi2: 154.501481394521
    test 925 line 103 lat2: 55.428809300888
    test 926 line 103 lon2: 121.956541206929
    test 927 line 103 azi2: 154.501481394521
    test 928 line 104 lat: 49.294374
    test 929 line 104 lon: 119.661420
    test 930 line 104 fb: 157.209489
    test 931 line 104 lat2: 49.294374468687
    test 932 line 104 lon2: 119.661419832789
    test 933 line 104 azi2: 157.209488754087
    test 934 line 104 lat2: 49.294374468687
    test 935 line 104 lon2: 119.661419832789
    test 936 line 104 azi2: 157.209488754087
    test 937 line 105 lat: -32.534872
    test 938 line 105 lon: 152.280610
    test 939 line 105 fb: 45.281812
    test 940 line 105 lat2: -32.534872085863
    test 941 line 105 lon2: 152.280609797481
    test 942 line 105 azi2: 45.281812386148
    test 943 line 105 lat2: -32.534872085863
    test 944 line 105 lon2: 152.280609797481
    test 945 line 105 azi2: 45.281812386148
    test 946 line 106 lat: -1.097899
    test 947 line 106 lon: 104.697360
    test 948 line 106 fb: 126.298489
    test 949 line 106 lat2: -1.097899218947
    test 950 line 106 lon2: 104.697359959629
    test 951 line 106 azi2: 126.298488917783
    test 952 line 106 lat2: -1.097899218947
    test 953 line 106 lon2: 104.697359959629
    test 954 line 106 azi2: 126.298488917783
    test 955 line 107 lat: -18.034366
    test 956 line 107 lon: 28.460388
    test 957 line 107 fb: 129.520364
    test 958 line 107 lat2: -18.034366293950
    test 959 line 107 lon2: 28.460387638999
    test 960 line 107 azi2: 129.520363751001
    test 961 line 107 lat2: -18.034366293950
    test 962 line 107 lon2: 28.460387638999
    test 963 line 107 azi2: 129.520363751001
    test 964 line 108 lat: 76.310833
    test 965 line 108 lon: 80.110525
    test 966 line 108 fb: 106.655922
    test 967 line 108 lat2: 76.310832995825
    test 968 line 108 lon2: 80.110524683625
    test 969 line 108 azi2: 106.655921818336
    test 970 line 108 lat2: 76.310832995825
    test 971 line 108 lon2: 80.110524683625
    test 972 line 108 azi2: 106.655921818336
    test 973 line 109 lat: 39.838034
    test 974 line 109 lon: 42.989610
    test 975 line 109 fb: 69.695281
    test 976 line 109 lat2: 39.838033717901
    test 977 line 109 lon2: 42.989610477861
    test 978 line 109 azi2: 69.695281464222
    test 979 line 109 lat2: 39.838033717901
    test 980 line 109 lon2: 42.989610477861
    test 981 line 109 azi2: 69.695281464222
    test 982 line 110 lat: -56.710166
    test 983 line 110 lon: 125.242287
    test 984 line 110 fb: 60.118756
    test 985 line 110 lat2: -56.710165877845
    test 986 line 110 lon2: 125.242287231675
    test 987 line 110 azi2: 60.118756013168
    test 988 line 110 lat2: -56.710165877845
    test 989 line 110 lon2: 125.242287231675
    test 990 line 110 azi2: 60.118756013168
    test 991 line 111 lat: 55.796062
    test 992 line 111 lon: 59.736599
    test 993 line 111 fb: 73.536728
    test 994 line 111 lat2: 55.796061639165
    test 995 line 111 lon2: 59.736598787303
    test 996 line 111 azi2: 73.536727826063
    test 997 line 111 lat2: 55.796061639165
    test 998 line 111 lon2: 59.736598787303
    test 999 line 111 azi2: 73.536727826063
    test 1000 line 112 lat: -36.553675
    test 1001 line 112 lon: 38.656806
    test 1002 line 112 fb: 134.414837
    test 1003 line 112 lat2: -36.553675319553
    test 1004 line 112 lon2: 38.656806212281
    test 1005 line 112 azi2: 134.414836606696
    test 1006 line 112 lat2: -36.553675319553
    test 1007 line 112 lon2: 38.656806212281
    test 1008 line 112 azi2: 134.414836606696
    test 1009 line 113 lat: -36.798456
    test 1010 line 113 lon: 163.588375
    test 1011 line 113 fb: 147.324204
    test 1012 line 113 lat2: -36.798455994877
    test 1013 line 113 lon2: 163.588375017283
    test 1014 line 113 azi2: 147.324204021436
    test 1015 line 113 lat2: -36.798455994877
    test 1016 line 113 lon2: 163.588375017283
    test 1017 line 113 azi2: 147.324204021436
    test 1018 line 114 lat: -15.952937
    test 1019 line 114 lon: 55.126807
    test 1020 line 114 fb: 134.743426
    test 1021 line 114 lat2: -15.952937085211
    test 1022 line 114 lon2: 55.126807113658
    test 1023 line 114 azi2: 134.743426025963
    test 1024 line 114 lat2: -15.952937085211
    test 1025 line 114 lon2: 55.126807113658
    test 1026 line 114 azi2: 134.743426025963
    test 1027 line 115 lat: -34.573087
    test 1028 line 115 lon: 69.304064
    test 1029 line 115 fb: 111.515973
    test 1030 line 115 lat2: -34.573086586710
    test 1031 line 115 lon2: 69.304064202466
    test 1032 line 115 azi2: 111.515973223076
    test 1033 line 115 lat2: -34.573086586710
    test 1034 line 115 lon2: 69.304064202466
    test 1035 line 115 azi2: 111.515973223076
    test 1036 line 116 lat: 26.643499
    test 1037 line 116 lon: 1.500481
    test 1038 line 116 fb: 7.958966
    test 1039 line 116 lat2: 26.643498959841
    test 1040 line 116 lon2: 1.500480924882
    test 1041 line 116 azi2: 7.958966071178
    test 1042 line 116 lat2: 26.643498959841
    test 1043 line 116 lon2: 1.500480924882
    test 1044 line 116 azi2: 7.958966071178
    test 1045 line 117 lat: 60.891878
    test 1046 line 117 lon: 91.543410
    test 1047 line 117 fb: 92.273095
    test 1048 line 117 lat2: 60.891878271763
    test 1049 line 117 lon2: 91.543409983653
    test 1050 line 117 azi2: 92.273095036246
    test 1051 line 117 lat2: 60.891878271763
    test 1052 line 117 lon2: 91.543409983653
    test 1053 line 117 azi2: 92.273095036246
    test 1054 line 118 lat: 64.148187
    test 1055 line 118 lon: 136.552579
    test 1056 line 118 fb: 147.193229
    test 1057 line 118 lat2: 64.148186913822
    test 1058 line 118 lon2: 136.552579389353
    test 1059 line 118 azi2: 147.193228706030
    test 1060 line 118 lat2: 64.148186913822
    test 1061 line 118 lon2: 136.552579389353
    test 1062 line 118 azi2: 147.193228706030
    test 1063 line 119 lat: 62.311678
    test 1064 line 119 lon: 39.238630
    test 1065 line 119 fb: 53.785893
    test 1066 line 119 lat2: 62.311677748693
    test 1067 line 119 lon2: 39.238629619778
    test 1068 line 119 azi2: 53.785893324444
    test 1069 line 119 lat2: 62.311677748693
    test 1070 line 119 lon2: 39.238629619778
    test 1071 line 119 azi2: 53.785893324444
    test 1072 line 120 lat: 27.239733
    test 1073 line 120 lon: 136.649227
    test 1074 line 120 fb: 162.935700
    test 1075 line 120 lat2: 27.239733033115
    test 1076 line 120 lon2: 136.649227320518
    test 1077 line 120 azi2: 162.935700444146
    test 1078 line 120 lat2: 27.239733033115
    test 1079 line 120 lon2: 136.649227320518
    test 1080 line 120 azi2: 162.935700444146
    test 1081 line 121 lat: 6.562844
    test 1082 line 121 lon: 170.159007
    test 1083 line 121 fb: 174.851345
    test 1084 line 121 lat2: 6.562844367534
    test 1085 line 121 lon2: 170.159007094343
    test 1086 line 121 azi2: 174.851345174583
    test 1087 line 121 lat2: 6.562844367534
    test 1088 line 121 lon2: 170.159007094343
    test 1089 line 121 azi2: 174.851345174583
    test 1090 line 122 lat: -29.537259
    test 1091 line 122 lon: 105.350044
    test 1092 line 122 fb: 141.393876
    test 1093 line 122 lat2: -29.537259231420
    test 1094 line 122 lon2: 105.350044044462
    test 1095 line 122 azi2: 141.393876478962
    test 1096 line 122 lat2: -29.537259231420
    test 1097 line 122 lon2: 105.350044044462
    test 1098 line 122 azi2: 141.393876478962
    test 1099 line 123 lat: -66.447700
    test 1100 line 123 lon: 83.741961
    test 1101 line 123 fb: 129.422490
    test 1102 line 123 lat2: -66.447699831143
    test 1103 line 123 lon2: 83.741960628420
    test 1104 line 123 azi2: 129.422490051758
    test 1105 line 123 lat2: -66.447699831143
    test 1106 line 123 lon2: 83.741960628420
    test 1107 line 123 azi2: 129.422490051758
    test 1108 line 124 lat: 56.926818
    test 1109 line 124 lon: 20.197117
    test 1110 line 124 fb: 37.960006
    test 1111 line 124 lat2: 56.926817599968
    test 1112 line 124 lon2: 20.197117058896
    test 1113 line 124 azi2: 37.960006049295
    test 1114 line 124 lat2: 56.926817599968
    test 1115 line 124 lon2: 20.197117058896
    test 1116 line 124 azi2: 37.960006049295
    test 1117 line 125 lat: 55.018266
    test 1118 line 125 lon: 83.735441
    test 1119 line 125 fb: 130.766515
    test 1120 line 125 lat2: 55.018265995959
    test 1121 line 125 lon2: 83.735441278691
    test 1122 line 125 azi2: 130.766514657995
    test 1123 line 125 lat2: 55.018265995959
    test 1124 line 125 lon2: 83.735441278691
    test 1125 line 125 azi2: 130.766514657995
    test 1126 line 126 lat: -78.131054
    test 1127 line 126 lon: 56.098176
    test 1128 line 126 fb: 127.132203
    test 1129 line 126 lat2: -78.131053729786
    test 1130 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1131 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1132 line 126 lat2: -78.131053729786
    test 1133 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1134 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1135 line 127 lat: -18.223027
    test 1136 line 127 lon: 86.221345
    test 1137 line 127 fb: 114.875019
    test 1138 line 127 lat2: -18.223027345294
    test 1139 line 127 lon2: 86.221345156045
    test 1140 line 127 azi2: 114.875019395396
    test 1141 line 127 lat2: -18.223027345294
    test 1142 line 127 lon2: 86.221345156045
    test 1143 line 127 azi2: 114.875019395396
    test 1144 line 128 lat: -16.100413
    test 1145 line 128 lon: 54.195260
    test 1146 line 128 fb: 126.748474
    test 1147 line 128 lat2: -16.100412777565
    test 1148 line 128 lon2: 54.195259657284
    test 1149 line 128 azi2: 126.748473963924
    test 1150 line 128 lat2: -16.100412777565
    test 1151 line 128 lon2: 54.195259657284
    test 1152 line 128 azi2: 126.748473963924
    test 1153 line 129 lat: -15.192944
    test 1154 line 129 lon: 85.057605
    test 1155 line 129 fb: 133.468781
    test 1156 line 129 lat2: -15.192944143354
    test 1157 line 129 lon2: 85.057605312625
    test 1158 line 129 azi2: 133.468780913302
    test 1159 line 129 lat2: -15.192944143354
    test 1160 line 129 lon2: 85.057605312625
    test 1161 line 129 azi2: 133.468780913302
    test 1162 line 130 lat: -1.279757
    test 1163 line 130 lon: 93.430943
    test 1164 line 130 fb: 128.545662
    test 1165 line 130 lat2: -1.279756550061
    test 1166 line 130 lon2: 93.430943123745
    test 1167 line 130 azi2: 128.545661704820
    test 1168 line 130 lat2: -1.279756550061
    test 1169 line 130 lon2: 93.430943123745
    test 1170 line 130 azi2: 128.545661704820
    test 1171 line 131 lat: -29.465713
    test 1172 line 131 lon: 79.050046
    test 1173 line 131 fb: 109.482097
    test 1174 line 131 lat2: -29.465712645249
    test 1175 line 131 lon2: 79.050045796725
    test 1176 line 131 azi2: 109.482097420926
    test 1177 line 131 lat2: -29.465712645249
    test 1178 line 131 lon2: 79.050045796725
    test 1179 line 131 azi2: 109.482097420926
    test 1180 line 132 lat: 31.819596
    test 1181 line 132 lon: 88.251997
    test 1182 line 132 fb: 91.173935
    test 1183 line 132 lat2: 31.819596255581
    test 1184 line 132 lon2: 88.251997328019
    test 1185 line 132 azi2: 91.173935030538
    test 1186 line 132 lat2: 31.819596255581
    test 1187 line 132 lon2: 88.251997328019
    test 1188 line 132 azi2: 91.173935030538
    test 1189 line 133 lat: -63.260477
    test 1190 line 133 lon: 96.535465
    test 1191 line 133 fb: 84.208873
    test 1192 line 133 lat2: -63.260477387265
    test 1193 line 133 lon2: 96.535465277415
    test 1194 line 133 azi2: 84.208873088521
    test 1195 line 133 lat2: -63.260477387265
    test 1196 line 133 lon2: 96.535465277415
    test 1197 line 133 azi2: 84.208873088521
    test 1198 line 134 lat: 12.908849
    test 1199 line 134 lon: 116.734308
    test 1200 line 134 fb: 110.313866
    test 1201 line 134 lat2: 12.908849199388
    test 1202 line 134 lon2: 116.734308245854
    test 1203 line 134 azi2: 110.313865884978
    test 1204 line 134 lat2: 12.908849199388
    test 1205 line 134 lon2: 116.734308245854
    test 1206 line 134 azi2: 110.313865884978
    test 1207 line 135 lat: -73.345839
    test 1208 line 135 lon: 99.753937
    test 1209 line 135 fb: 89.074642
    test 1210 line 135 lat2: -73.345839080078
    test 1211 line 135 lon2: 99.753937450114
    test 1212 line 135 azi2: 89.074641755279
    test 1213 line 135 lat2: -73.345839080078
    test 1214 line 135 lon2: 99.753937450114
    test 1215 line 135 azi2: 89.074641755279
    test 1216 line 136 lat: -58.777033
    test 1217 line 136 lon: 161.963990
    test 1218 line 136 fb: 21.998889
    test 1219 line 136 lat2: -58.777033293076
    test 1220 line 136 lon2: 161.963989905489
    test 1221 line 136 azi2: 21.998888971548
    test 1222 line 136 lat2: -58.777033293076
    test 1223 line 136 lon2: 161.963989905489
    test 1224 line 136 azi2: 21.998888971548
    test 1225 line 137 lat: 5.093069
    test 1226 line 137 lon: 53.687921
    test 1227 line 137 fb: 124.015842
    test 1228 line 137 lat2: 5.093068996651
    test 1229 line 137 lon2: 53.687921438754
    test 1230 line 137 azi2: 124.015842231205
    test 1231 line 137 lat2: 5.093068996651
    test 1232 line 137 lon2: 53.687921438754
    test 1233 line 137 azi2: 124.015842231205
    test 1234 line 138 lat: 35.659489
    test 1235 line 138 lon: 111.729315
    test 1236 line 138 fb: 133.697281
    test 1237 line 138 lat2: 35.659488664161
    test 1238 line 138 lon2: 111.729315023485
    test 1239 line 138 azi2: 133.697281357224
    test 1240 line 138 lat2: 35.659488664161
    test 1241 line 138 lon2: 111.729315023485
    test 1242 line 138 azi2: 133.697281357224
    test 1243 line 139 lat: -24.330784
    test 1244 line 139 lon: 71.666568
    test 1245 line 139 fb: 106.278062
    test 1246 line 139 lat2: -24.330783755994
    test 1247 line 139 lon2: 71.666567863169  FAILED, KNOWN, expected 71.666567863170
    test 1248 line 139 azi2: 106.278062394907
    test 1249 line 139 lat2: -24.330783755994
    test 1250 line 139 lon2: 71.666567863170
    test 1251 line 139 azi2: 106.278062394907
    test 1252 line 140 lat: -46.218742
    test 1253 line 140 lon: 91.580078
    test 1254 line 140 fb: 106.279111
    test 1255 line 140 lat2: -46.218742288678
    test 1256 line 140 lon2: 91.580077788700
    test 1257 line 140 azi2: 106.279110700398
    test 1258 line 140 lat2: -46.218742288678
    test 1259 line 140 lon2: 91.580077788700
    test 1260 line 140 azi2: 106.279110700398
    test 1261 line 141 lat: 50.143353
    test 1262 line 141 lon: 101.322503
    test 1263 line 141 fb: 154.314496
    test 1264 line 141 lat2: 50.143352562968
    test 1265 line 141 lon2: 101.322502529615
    test 1266 line 141 azi2: 154.314496467352
    test 1267 line 141 lat2: 50.143352562968
    test 1268 line 141 lon2: 101.322502529615
    test 1269 line 141 azi2: 154.314496467352
    test 1270 line 142 lat: -16.604376
    test 1271 line 142 lon: 134.279201
    test 1272 line 142 fb: 106.895990
    test 1273 line 142 lat2: -16.604375537699
    test 1274 line 142 lon2: 134.279201209117
    test 1275 line 142 azi2: 106.895989785632
    test 1276 line 142 lat2: -16.604375537699
    test 1277 line 142 lon2: 134.279201209117
    test 1278 line 142 azi2: 106.895989785632
    test 1279 line 143 lat: 54.031290
    test 1280 line 143 lon: 144.862702
    test 1281 line 143 fb: 152.937010
    test 1282 line 143 lat2: 54.031289901242
    test 1283 line 143 lon2: 144.862701667601
    test 1284 line 143 azi2: 152.937009701639
    test 1285 line 143 lat2: 54.031289901242
    test 1286 line 143 lon2: 144.862701667602  FAILED, KNOWN, expected 144.862701667601
    test 1287 line 143 azi2: 152.937009701639
    test 1288 line 144 lat: 0.616911
    test 1289 line 144 lon: 110.974662
    test 1290 line 144 fb: 115.206118
    test 1291 line 144 lat2: 0.616910921892
    test 1292 line 144 lon2: 110.974662272005
    test 1293 line 144 azi2: 115.206118431862
    test 1294 line 144 lat2: 0.616910921892
    test 1295 line 144 lon2: 110.974662272005
    test 1296 line 144 azi2: 115.206118431862
    test 1297 line 145 lat: -6.243779
    test 1298 line 145 lon: 175.658895
    test 1299 line 145 fb: 177.520147
    test 1300 line 145 lat2: -6.243779047728
    test 1301 line 145 lon2: 175.658894820006
    test 1302 line 145 azi2: 177.520147377315
    test 1303 line 145 lat2: -6.243779047728
    test 1304 line 145 lon2: 175.658894820006
    test 1305 line 145 azi2: 177.520147377315
    test 1306 line 146 lat: -70.416699
    test 1307 line 146 lon: 169.642468
    test 1308 line 146 fb: 11.978943
    test 1309 line 146 lat2: -70.416698815769
    test 1310 line 146 lon2: 169.642468357274
    test 1311 line 146 azi2: 11.978943348082
    test 1312 line 146 lat2: -70.416698815769
    test 1313 line 146 lon2: 169.642468357274
    test 1314 line 146 azi2: 11.978943348082
    test 1315 line 147 lat: 19.558617
    test 1316 line 147 lon: 88.645709
    test 1317 line 147 fb: 113.578814
    test 1318 line 147 lat2: 19.558616692495
    test 1319 line 147 lon2: 88.645708539223
    test 1320 line 147 azi2: 113.578814362497
    test 1321 line 147 lat2: 19.558616692495
    test 1322 line 147 lon2: 88.645708539223
    test 1323 line 147 azi2: 113.578814362497
    test 1324 line 148 lat: -23.555114
    test 1325 line 148 lon: 162.457529
    test 1326 line 148 fb: 147.104331
    test 1327 line 148 lat2: -23.555114207892
    test 1328 line 148 lon2: 162.457529431664
    test 1329 line 148 azi2: 147.104330772141
    test 1330 line 148 lat2: -23.555114207892
    test 1331 line 148 lon2: 162.457529431664
    test 1332 line 148 azi2: 147.104330772141
    test 1333 line 149 lat: -51.275738
    test 1334 line 149 lon: 103.747943
    test 1335 line 149 fb: 115.235374
    test 1336 line 149 lat2: -51.275737933996
    test 1337 line 149 lon2: 103.747943009536
    test 1338 line 149 azi2: 115.235373813929
    test 1339 line 149 lat2: -51.275737933996
    test 1340 line 149 lon2: 103.747943009536
    test 1341 line 149 azi2: 115.235373813929
    test 1342 line 150 lat: 25.374602
    test 1343 line 150 lon: 143.135783
    test 1344 line 150 fb: 126.548735
    test 1345 line 150 lat2: 25.374601552526
    test 1346 line 150 lon2: 143.135783283239
    test 1347 line 150 azi2: 126.548735117003
    test 1348 line 150 lat2: 25.374601552526
    test 1349 line 150 lon2: 143.135783283239
    test 1350 line 150 azi2: 126.548735117003
    test 1351 line 151 lat: 23.967825
    test 1352 line 151 lon: 153.611116
    test 1353 line 151 fb: 149.714116
    test 1354 line 151 lat2: 23.967824782385
    test 1355 line 151 lon2: 153.611115762587
    test 1356 line 151 azi2: 149.714116426025
    test 1357 line 151 lat2: 23.967824782385
    test 1358 line 151 lon2: 153.611115762587
    test 1359 line 151 azi2: 149.714116426025
    test 1360 line 152 lat: -22.787507
    test 1361 line 152 lon: 111.258647
    test 1362 line 152 fb: 86.335100
    test 1363 line 152 lat2: -22.787506689568
    test 1364 line 152 lon2: 111.258646767306
    test 1365 line 152 azi2: 86.335099650483
    test 1366 line 152 lat2: -22.787506689568
    test 1367 line 152 lon2: 111.258646767306
    test 1368 line 152 azi2: 86.335099650483
    test 1369 line 153 lat: -59.789842
    test 1370 line 153 lon: 114.054983
    test 1371 line 153 fb: 75.612605
    test 1372 line 153 lat2: -59.789841532294
    test 1373 line 153 lon2: 114.054983422255
    test 1374 line 153 azi2: 75.612605242726
    test 1375 line 153 lat2: -59.789841532294
    test 1376 line 153 lon2: 114.054983422255
    test 1377 line 153 azi2: 75.612605242726
    test 1378 line 154 lat: -2.802505
    test 1379 line 154 lon: 126.245955
    test 1380 line 154 fb: 150.100576
    test 1381 line 154 lat2: -2.802505438545
    test 1382 line 154 lon2: 126.245955176418
    test 1383 line 154 azi2: 150.100575968176
    test 1384 line 154 lat2: -2.802505438545
    test 1385 line 154 lon2: 126.245955176418
    test 1386 line 154 azi2: 150.100575968176
    test 1387 line 155 lat: 35.735653
    test 1388 line 155 lon: 102.768725
    test 1389 line 155 fb: 99.024702
    test 1390 line 155 lat2: 35.735653026165
    test 1391 line 155 lon2: 102.768725495110
    test 1392 line 155 azi2: 99.024701978369
    test 1393 line 155 lat2: 35.735653026165
    test 1394 line 155 lon2: 102.768725495110
    test 1395 line 155 azi2: 99.024701978369
    test 1396 line 156 lat: 15.906682
    test 1397 line 156 lon: 117.446654
    test 1398 line 156 fb: 130.449965
    test 1399 line 156 lat2: 15.906681603252
    test 1400 line 156 lon2: 117.446653873860
    test 1401 line 156 azi2: 130.449965412147
    test 1402 line 156 lat2: 15.906681603252
    test 1403 line 156 lon2: 117.446653873860
    test 1404 line 156 azi2: 130.449965412147
    test 1405 line 157 lat: -54.375988
    test 1406 line 157 lon: 33.243363
    test 1407 line 157 fb: 144.361175
    test 1408 line 157 lat2: -54.375987804166
    test 1409 line 157 lon2: 33.243362594038
    test 1410 line 157 azi2: 144.361175098783
    test 1411 line 157 lat2: -54.375987804166
    test 1412 line 157 lon2: 33.243362594038
    test 1413 line 157 azi2: 144.361175098783
    test 1414 line 158 lat: 3.588251
    test 1415 line 158 lon: 156.659583
    test 1416 line 158 fb: 112.153293
    test 1417 line 158 lat2: 3.588250783960
    test 1418 line 158 lon2: 156.659583234995
    test 1419 line 158 azi2: 112.153293017228
    test 1420 line 158 lat2: 3.588250783960
    test 1421 line 158 lon2: 156.659583234995
    test 1422 line 158 azi2: 112.153293017228
    test 1423 line 159 lat: -51.719977
    test 1424 line 159 lon: 134.141061
    test 1425 line 159 fb: 129.170451
    test 1426 line 159 lat2: -51.719977004790
    test 1427 line 159 lon2: 134.141060992499
    test 1428 line 159 azi2: 129.170451102958
    test 1429 line 159 lat2: -51.719977004790
    test 1430 line 159 lon2: 134.141060992499
    test 1431 line 159 azi2: 129.170451102958
    test 1432 line 160 lat: 22.935153
    test 1433 line 160 lon: 109.461291
    test 1434 line 160 fb: 120.676556
    test 1435 line 160 lat2: 22.935153219965
    test 1436 line 160 lon2: 109.461291078917
    test 1437 line 160 azi2: 120.676555897336
    test 1438 line 160 lat2: 22.935153219965
    test 1439 line 160 lon2: 109.461291078917
    test 1440 line 160 azi2: 120.676555897336
    test 1441 line 161 lat: -5.314690
    test 1442 line 161 lon: 70.995225
    test 1443 line 161 fb: 129.681273
    test 1444 line 161 lat2: -5.314689990173
    test 1445 line 161 lon2: 70.995224692450
    test 1446 line 161 azi2: 129.681272635794
    test 1447 line 161 lat2: -5.314689990173
    test 1448 line 161 lon2: 70.995224692450
    test 1449 line 161 azi2: 129.681272635794
    test 1450 line 162 lat: 49.147134
    test 1451 line 162 lon: 16.182514
    test 1452 line 162 fb: 38.926644
    test 1453 line 162 lat2: 49.147133873971
    test 1454 line 162 lon2: 16.182514450690
    test 1455 line 162 azi2: 38.926644196248
    test 1456 line 162 lat2: 49.147133873971
    test 1457 line 162 lon2: 16.182514450690
    test 1458 line 162 azi2: 38.926644196248
    test 1459 line 163 lat: -55.079363
    test 1460 line 163 lon: 93.170898
    test 1461 line 163 fb: 97.017492
    test 1462 line 163 lat2: -55.079363368717
    test 1463 line 163 lon2: 93.170898482121
    test 1464 line 163 azi2: 97.017491592293
    test 1465 line 163 lat2: -55.079363368717
    test 1466 line 163 lon2: 93.170898482121
    test 1467 line 163 azi2: 97.017491592293
    test 1468 line 164 lat: 26.410771
    test 1469 line 164 lon: 109.934003
    test 1470 line 164 fb: 103.660846
    test 1471 line 164 lat2: 26.410770923895
    test 1472 line 164 lon2: 109.934003168641
    test 1473 line 164 azi2: 103.660846029906
    test 1474 line 164 lat2: 26.410770923895
    test 1475 line 164 lon2: 109.934003168641
    test 1476 line 164 azi2: 103.660846029906
    test 1477 line 165 lat: -2.539670
    test 1478 line 165 lon: 138.682325
    test 1479 line 165 fb: 100.016568
    test 1480 line 165 lat2: -2.539669792389
    test 1481 line 165 lon2: 138.682325493918
    test 1482 line 165 azi2: 100.016568432752
    test 1483 line 165 lat2: -2.539669792389
    test 1484 line 165 lon2: 138.682325493918
    test 1485 line 165 azi2: 100.016568432752
    test 1486 line 166 lat: 10.563299
    test 1487 line 166 lon: 50.532119
    test 1488 line 166 fb: 126.356066
    test 1489 line 166 lat2: 10.563299452649
    test 1490 line 166 lon2: 50.532119480076
    test 1491 line 166 azi2: 126.356065708364
    test 1492 line 166 lat2: 10.563299452649
    test 1493 line 166 lon2: 50.532119480076
    test 1494 line 166 azi2: 126.356065708364
    test 1495 line 167 lat: 51.443871
    test 1496 line 167 lon: 88.799162
    test 1497 line 167 fb: 145.239198
    test 1498 line 167 lat2: 51.443871023711
    test 1499 line 167 lon2: 88.799161779253
    test 1500 line 167 azi2: 145.239198135633
    test 1501 line 167 lat2: 51.443871023711
    test 1502 line 167 lon2: 88.799161779253
    test 1503 line 167 azi2: 145.239198135633
    test 1504 line 168 lat: -80.240756
    test 1505 line 168 lon: 170.591261
    test 1506 line 168 fb: 19.402427
    test 1507 line 168 lat2: -80.240756380896
    test 1508 line 168 lon2: 170.591260542730
    test 1509 line 168 azi2: 19.402427357239
    test 1510 line 168 lat2: -80.240756380896
    test 1511 line 168 lon2: 170.591260542730
    test 1512 line 168 azi2: 19.402427357239
    test 1513 line 169 lat: 51.976040
    test 1514 line 169 lon: 165.045244
    test 1515 line 169 fb: 167.962110
    test 1516 line 169 lat2: 51.976039799074
    test 1517 line 169 lon2: 165.045244285456
    test 1518 line 169 azi2: 167.962110268433
    test 1519 line 169 lat2: 51.976039799074
    test 1520 line 169 lon2: 165.045244285456
    test 1521 line 169 azi2: 167.962110268433
    test 1522 line 170 lat: 29.365655
    test 1523 line 170 lon: 91.354349
    test 1524 line 170 fb: 135.101279
    test 1525 line 170 lat2: 29.365654873524
    test 1526 line 170 lon2: 91.354349089561
    test 1527 line 170 azi2: 135.101278715212
    test 1528 line 170 lat2: 29.365654873524
    test 1529 line 170 lon2: 91.354349089561
    test 1530 line 170 azi2: 135.101278715212
    test 1531 line 171 lat: 61.745486
    test 1532 line 171 lon: 142.333199
    test 1533 line 171 fb: 139.666209
    test 1534 line 171 lat2: 61.745485817368
    test 1535 line 171 lon2: 142.333198773096
    test 1536 line 171 azi2: 139.666208757008
    test 1537 line 171 lat2: 61.745485817368
    test 1538 line 171 lon2: 142.333198773096
    test 1539 line 171 azi2: 139.666208757008
    test 1540 line 172 lat: 13.414523
    test 1541 line 172 lon: 39.322993
    test 1542 line 172 fb: 144.276516
    test 1543 line 172 lat2: 13.414522997032
    test 1544 line 172 lon2: 39.322992706733
    test 1545 line 172 azi2: 144.276515542083
    test 1546 line 172 lat2: 13.414522997032
    test 1547 line 172 lon2: 39.322992706733
    test 1548 line 172 azi2: 144.276515542083
    test 1549 line 173 lat: -49.831353
    test 1550 line 173 lon: 72.426738
    test 1551 line 173 fb: 126.251620
    test 1552 line 173 lat2: -49.831353332108
    test 1553 line 173 lon2: 72.426737728887
    test 1554 line 173 azi2: 126.251620412456
    test 1555 line 173 lat2: -49.831353332108
    test 1556 line 173 lon2: 72.426737728887
    test 1557 line 173 azi2: 126.251620412456
    test 1558 line 174 lat: 1.822589
    test 1559 line 174 lon: 53.589208
    test 1560 line 174 fb: 97.925176
    test 1561 line 174 lat2: 1.822589208021
    test 1562 line 174 lon2: 53.589207810481
    test 1563 line 174 azi2: 97.925176229124
    test 1564 line 174 lat2: 1.822589208021
    test 1565 line 174 lon2: 53.589207810481
    test 1566 line 174 azi2: 97.925176229124
    test 1567 line 175 lat: -7.987194
    test 1568 line 175 lon: 49.318809
    test 1569 line 175 fb: 128.386595
    test 1570 line 175 lat2: -7.987193900849
    test 1571 line 175 lon2: 49.318809304076
    test 1572 line 175 azi2: 128.386594768748
    test 1573 line 175 lat2: -7.987193900849
    test 1574 line 175 lon2: 49.318809304076
    test 1575 line 175 azi2: 128.386594768748
    test 1576 line 176 lat: -56.807375
    test 1577 line 176 lon: 4.521802
    test 1578 line 176 fb: 176.806063
    test 1579 line 176 lat2: -56.807375049864
    test 1580 line 176 lon2: 4.521801986353
    test 1581 line 176 azi2: 176.806062785470
    test 1582 line 176 lat2: -56.807375049864
    test 1583 line 176 lon2: 4.521801986353
    test 1584 line 176 azi2: 176.806062785470
    test 1585 line 177 lat: -25.969834
    test 1586 line 177 lon: 64.903749
    test 1587 line 177 fb: 124.103844
    test 1588 line 177 lat2: -25.969833883721
    test 1589 line 177 lon2: 64.903749477059
    test 1590 line 177 azi2: 124.103844353942
    test 1591 line 177 lat2: -25.969833883721
    test 1592 line 177 lon2: 64.903749477059
    test 1593 line 177 azi2: 124.103844353942
    test 1594 line 178 lat: 32.807360
    test 1595 line 178 lon: 65.107962
    test 1596 line 178 fb: 124.577990
    test 1597 line 178 lat2: 32.807359742667
    test 1598 line 178 lon2: 65.107961864983
    test 1599 line 178 azi2: 124.577990419073
    test 1600 line 178 lat2: 32.807359742667
    test 1601 line 178 lon2: 65.107961864983
    test 1602 line 178 azi2: 124.577990419073
    test 1603 line 179 lat: -21.552138
    test 1604 line 179 lon: 102.466022
    test 1605 line 179 fb: 109.640197
    test 1606 line 179 lat2: -21.552137872353
    test 1607 line 179 lon2: 102.466021945025
    test 1608 line 179 azi2: 109.640197455958
    test 1609 line 179 lat2: -21.552137872353
    test 1610 line 179 lon2: 102.466021945025
    test 1611 line 179 azi2: 109.640197455958
    test 1612 line 180 lat: -26.271741
    test 1613 line 180 lon: 158.321581
    test 1614 line 180 fb: 165.993649
    test 1615 line 180 lat2: -26.271741383677
    test 1616 line 180 lon2: 158.321581345077
    test 1617 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1618 line 180 lat2: -26.271741383677
    test 1619 line 180 lon2: 158.321581345077
    test 1620 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1621 line 181 lat: 41.023069
    test 1622 line 181 lon: 155.562542
    test 1623 line 181 fb: 153.407414
    test 1624 line 181 lat2: 41.023069113496
    test 1625 line 181 lon2: 155.562542134179
    test 1626 line 181 azi2: 153.407413608014
    test 1627 line 181 lat2: 41.023069113496
    test 1628 line 181 lon2: 155.562542134179
    test 1629 line 181 azi2: 153.407413608014
    test 1630 line 182 lat: 16.445471
    test 1631 line 182 lon: 165.261461
    test 1632 line 182 fb: 165.424806
    test 1633 line 182 lat2: 16.445470954340
    test 1634 line 182 lon2: 165.261461448873
    test 1635 line 182 azi2: 165.424806257119
    test 1636 line 182 lat2: 16.445470954340
    test 1637 line 182 lon2: 165.261461448873
    test 1638 line 182 azi2: 165.424806257119
    test 1639 line 183 lat: -3.222107
    test 1640 line 183 lon: 84.129727
    test 1641 line 183 fb: 154.083851
    test 1642 line 183 lat2: -3.222107095788
    test 1643 line 183 lon2: 84.129726900596
    test 1644 line 183 azi2: 154.083851495688
    test 1645 line 183 lat2: -3.222107095788
    test 1646 line 183 lon2: 84.129726900596
    test 1647 line 183 azi2: 154.083851495688
    test 1648 line 184 lat: 7.811710
    test 1649 line 184 lon: 123.143308
    test 1650 line 184 fb: 123.998106
    test 1651 line 184 lat2: 7.811709739638
    test 1652 line 184 lon2: 123.143308309660
    test 1653 line 184 azi2: 123.998105582525
    test 1654 line 184 lat2: 7.811709739638
    test 1655 line 184 lon2: 123.143308309660
    test 1656 line 184 azi2: 123.998105582525
    test 1657 line 185 lat: -45.235922
    test 1658 line 185 lon: 129.419283
    test 1659 line 185 fb: 91.493406
    test 1660 line 185 lat2: -45.235922276879
    test 1661 line 185 lon2: 129.419282696458
    test 1662 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1663 line 185 lat2: -45.235922276879
    test 1664 line 185 lon2: 129.419282696458
    test 1665 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1666 line 186 lat: -43.047563
    test 1667 line 186 lon: 121.565541
    test 1668 line 186 fb: 99.850543
    test 1669 line 186 lat2: -43.047563118772
    test 1670 line 186 lon2: 121.565540573788
    test 1671 line 186 azi2: 99.850542926816
    test 1672 line 186 lat2: -43.047563118772
    test 1673 line 186 lon2: 121.565540573788
    test 1674 line 186 azi2: 99.850542926816
    test 1675 line 187 lat: -22.881002
    test 1676 line 187 lon: 159.765030
    test 1677 line 187 fb: 60.474878
    test 1678 line 187 lat2: -22.881001889671
    test 1679 line 187 lon2: 159.765030106650
    test 1680 line 187 azi2: 60.474878214384
    test 1681 line 187 lat2: -22.881001889671
    test 1682 line 187 lon2: 159.765030106650
    test 1683 line 187 azi2: 60.474878214384
    test 1684 line 188 lat: -15.011946
    test 1685 line 188 lon: 55.594746
    test 1686 line 188 fb: 121.838839
    test 1687 line 188 lat2: -15.011946251300
    test 1688 line 188 lon2: 55.594746074667
    test 1689 line 188 azi2: 121.838839080255
    test 1690 line 188 lat2: -15.011946251300
    test 1691 line 188 lon2: 55.594746074667
    test 1692 line 188 azi2: 121.838839080255
    test 1693 line 189 lat: -29.011142
    test 1694 line 189 lon: 0.856639
    test 1695 line 189 fb: 178.744943
    test 1696 line 189 lat2: -29.011142183887
    test 1697 line 189 lon2: 0.856639457160
    test 1698 line 189 azi2: 178.744943180805
    test 1699 line 189 lat2: -29.011142183887
    test 1700 line 189 lon2: 0.856639457160
    test 1701 line 189 azi2: 178.744943180805
    test 1702 line 190 lat: -0.353001
    test 1703 line 190 lon: 48.401255
    test 1704 line 190 fb: 95.612551
    test 1705 line 190 lat2: -0.353000909367
    test 1706 line 190 lon2: 48.401254652488  FAILED, KNOWN, expected 48.401254652487
    test 1707 line 190 azi2: 95.612551044908
    test 1708 line 190 lat2: -0.353000909367
    test 1709 line 190 lon2: 48.401254652487
    test 1710 line 190 azi2: 95.612551044908
    test 1711 line 191 lat: 18.843341
    test 1712 line 191 lon: 105.405456
    test 1713 line 191 fb: 145.215722
    test 1714 line 191 lat2: 18.843340962664
    test 1715 line 191 lon2: 105.405456105476
    test 1716 line 191 azi2: 145.215722323742
    test 1717 line 191 lat2: 18.843340962664
    test 1718 line 191 lon2: 105.405456105476
    test 1719 line 191 azi2: 145.215722323742
    test 1720 line 192 lat: 19.672225
    test 1721 line 192 lon: 64.132980
    test 1722 line 192 fb: 131.894863
    test 1723 line 192 lat2: 19.672224913225
    test 1724 line 192 lon2: 64.132979510420
    test 1725 line 192 azi2: 131.894863434272
    test 1726 line 192 lat2: 19.672224913225
    test 1727 line 192 lon2: 64.132979510420
    test 1728 line 192 azi2: 131.894863434272
    test 1729 line 193 lat: -44.315074
    test 1730 line 193 lon: 132.711860
    test 1731 line 193 fb: 57.236875
    test 1732 line 193 lat2: -44.315073617889
    test 1733 line 193 lon2: 132.711860436437
    test 1734 line 193 azi2: 57.236875169148
    test 1735 line 193 lat2: -44.315073617889
    test 1736 line 193 lon2: 132.711860436437
    test 1737 line 193 azi2: 57.236875169148
    test 1738 line 194 lat: 71.956294
    test 1739 line 194 lon: 23.707587
    test 1740 line 194 fb: 28.235947
    test 1741 line 194 lat2: 71.956293555096
    test 1742 line 194 lon2: 23.707587498943
    test 1743 line 194 azi2: 28.235946630177
    test 1744 line 194 lat2: 71.956293555096
    test 1745 line 194 lon2: 23.707587498943
    test 1746 line 194 azi2: 28.235946630177
    test 1747 line 195 lat: -1.372652
    test 1748 line 195 lon: 37.704231
    test 1749 line 195 fb: 92.737862
    test 1750 line 195 lat2: -1.372652195171
    test 1751 line 195 lon2: 37.704230798676
    test 1752 line 195 azi2: 92.737862264368
    test 1753 line 195 lat2: -1.372652195171
    test 1754 line 195 lon2: 37.704230798676
    test 1755 line 195 azi2: 92.737862264368
    test 1756 line 196 lat: 32.377148
    test 1757 line 196 lon: 148.638709
    test 1758 line 196 fb: 164.415210
    test 1759 line 196 lat2: 32.377147634362
    test 1760 line 196 lon2: 148.638709383249
    test 1761 line 196 azi2: 164.415210005459
    test 1762 line 196 lat2: 32.377147634362
    test 1763 line 196 lon2: 148.638709383249
    test 1764 line 196 azi2: 164.415210005459
    test 1765 line 197 lat: 77.876832
    test 1766 line 197 lon: 86.074591
    test 1767 line 197 fb: 93.017705
    test 1768 line 197 lat2: 77.876831887051
    test 1769 line 197 lon2: 86.074590642864
    test 1770 line 197 azi2: 93.017704501543
    test 1771 line 197 lat2: 77.876831887051
    test 1772 line 197 lon2: 86.074590642864
    test 1773 line 197 azi2: 93.017704501543
    test 1774 line 198 lat: -7.405195
    test 1775 line 198 lon: 11.962469
    test 1776 line 198 fb: 123.788484
    test 1777 line 198 lat2: -7.405194804958
    test 1778 line 198 lon2: 11.962468510681
    test 1779 line 198 azi2: 123.788484407208
    test 1780 line 198 lat2: -7.405194804958
    test 1781 line 198 lon2: 11.962468510681
    test 1782 line 198 azi2: 123.788484407208
    test 1783 line 199 lat: -75.001311
    test 1784 line 199 lon: 173.334144
    test 1785 line 199 fb: 8.916523
    test 1786 line 199 lat2: -75.001310556015
    test 1787 line 199 lon2: 173.334144385512
    test 1788 line 199 azi2: 8.916523271572
    test 1789 line 199 lat2: -75.001310556015
    test 1790 line 199 lon2: 173.334144385512
    test 1791 line 199 azi2: 8.916523271572
    test 1792 line 200 lat: -33.145967
    test 1793 line 200 lon: 32.349241
    test 1794 line 200 fb: 154.035798
    test 1795 line 200 lat2: -33.145966631435
    test 1796 line 200 lon2: 32.349240627001
    test 1797 line 200 azi2: 154.035798269631
    test 1798 line 200 lat2: -33.145966631435
    test 1799 line 200 lon2: 32.349240627001
    test 1800 line 200 azi2: 154.035798269631
    test 1801 line 201 lat: 32.938605
    test 1802 line 201 lon: 98.042857
    test 1803 line 201 fb: 124.954750
    test 1804 line 201 lat2: 32.938605083648
    test 1805 line 201 lon2: 98.042857137838
    test 1806 line 201 azi2: 124.954750401990
    test 1807 line 201 lat2: 32.938605083648
    test 1808 line 201 lon2: 98.042857137838
    test 1809 line 201 azi2: 124.954750401990
    test 1810 line 202 lat: 18.924315
    test 1811 line 202 lon: 20.712136
    test 1812 line 202 fb: 118.058457
    test 1813 line 202 lat2: 18.924314631117
    test 1814 line 202 lon2: 20.712135699713
    test 1815 line 202 azi2: 118.058457437327
    test 1816 line 202 lat2: 18.924314631117
    test 1817 line 202 lon2: 20.712135699713
    test 1818 line 202 azi2: 118.058457437327
    test 1819 line 203 lat: 34.281652
    test 1820 line 203 lon: 66.815398
    test 1821 line 203 fb: 147.693080
    test 1822 line 203 lat2: 34.281652047931
    test 1823 line 203 lon2: 66.815398066147
    test 1824 line 203 azi2: 147.693079659533
    test 1825 line 203 lat2: 34.281652047931
    test 1826 line 203 lon2: 66.815398066147
    test 1827 line 203 azi2: 147.693079659533
    test 1828 line 204 lat: -56.830635
    test 1829 line 204 lon: 2.137046
    test 1830 line 204 fb: 178.041562
    test 1831 line 204 lat2: -56.830634769513
    test 1832 line 204 lon2: 2.137046322217
    test 1833 line 204 azi2: 178.041562126305
    test 1834 line 204 lat2: -56.830634769513
    test 1835 line 204 lon2: 2.137046322217
    test 1836 line 204 azi2: 178.041562126305
    test 1837 line 205 lat: -68.481893
    test 1838 line 205 lon: 107.036720
    test 1839 line 205 fb: 152.384477
    test 1840 line 205 lat2: -68.481892540174
    test 1841 line 205 lon2: 107.036720123074
    test 1842 line 205 azi2: 152.384476595412
    test 1843 line 205 lat2: -68.481892540174
    test 1844 line 205 lon2: 107.036720123074
    test 1845 line 205 azi2: 152.384476595412
    test 1846 line 206 lat: -22.502042
    test 1847 line 206 lon: 171.827566
    test 1848 line 206 fb: 158.834328
    test 1849 line 206 lat2: -22.502042312255
    test 1850 line 206 lon2: 171.827566033608
    test 1851 line 206 azi2: 158.834327972407
    test 1852 line 206 lat2: -22.502042312255
    test 1853 line 206 lon2: 171.827566033608
    test 1854 line 206 azi2: 158.834327972407
    test 1855 line 207 lat: -4.504199
    test 1856 line 207 lon: 138.544338
    test 1857 line 207 fb: 123.633526
    test 1858 line 207 lat2: -4.504199404775
    test 1859 line 207 lon2: 138.544338028736
    test 1860 line 207 azi2: 123.633526406205
    test 1861 line 207 lat2: -4.504199404775
    test 1862 line 207 lon2: 138.544338028736
    test 1863 line 207 azi2: 123.633526406205
    test 1864 line 208 lat: -9.226343
    test 1865 line 208 lon: 120.310050
    test 1866 line 208 fb: 142.789186
    test 1867 line 208 lat2: -9.226343110712
    test 1868 line 208 lon2: 120.310050148004
    test 1869 line 208 azi2: 142.789186422068
    test 1870 line 208 lat2: -9.226343110712
    test 1871 line 208 lon2: 120.310050148004
    test 1872 line 208 azi2: 142.789186422068
    test 1873 line 209 lat: -51.684044
    test 1874 line 209 lon: 137.764140
    test 1875 line 209 fb: 56.844891
    test 1876 line 209 lat2: -51.684044075582
    test 1877 line 209 lon2: 137.764139808689
    test 1878 line 209 azi2: 56.844890846790
    test 1879 line 209 lat2: -51.684044075582
    test 1880 line 209 lon2: 137.764139808689
    test 1881 line 209 azi2: 56.844890846790
    test 1882 line 210 lat: 19.467357
    test 1883 line 210 lon: 93.870087
    test 1884 line 210 fb: 129.125491
    test 1885 line 210 lat2: 19.467357090193
    test 1886 line 210 lon2: 93.870087361293
    test 1887 line 210 azi2: 129.125490840370
    test 1888 line 210 lat2: 19.467357090193
    test 1889 line 210 lon2: 93.870087361293
    test 1890 line 210 azi2: 129.125490840370
    test 1891 line 211 lat: 33.594608
    test 1892 line 211 lon: 58.324143
    test 1893 line 211 fb: 101.975372
    test 1894 line 211 lat2: 33.594607695347
    test 1895 line 211 lon2: 58.324143410893
    test 1896 line 211 azi2: 101.975372004111
    test 1897 line 211 lat2: 33.594607695347
    test 1898 line 211 lon2: 58.324143410893
    test 1899 line 211 azi2: 101.975372004111
    test 1900 line 212 lat: -1.184701
    test 1901 line 212 lon: 92.834285
    test 1902 line 212 fb: 134.201097
    test 1903 line 212 lat2: -1.184701423910
    test 1904 line 212 lon2: 92.834285031504
    test 1905 line 212 azi2: 134.201097217000
    test 1906 line 212 lat2: -1.184701423910
    test 1907 line 212 lon2: 92.834285031504
    test 1908 line 212 azi2: 134.201097217000
    test 1909 line 213 lat: 5.878639
    test 1910 line 213 lon: 90.756173
    test 1911 line 213 fb: 156.936699
    test 1912 line 213 lat2: 5.878638801092
    test 1913 line 213 lon2: 90.756172727682
    test 1914 line 213 azi2: 156.936698928215
    test 1915 line 213 lat2: 5.878638801092
    test 1916 line 213 lon2: 90.756172727682
    test 1917 line 213 azi2: 156.936698928215
    test 1918 line 214 lat: 47.611646
    test 1919 line 214 lon: 131.482218
    test 1920 line 214 fb: 152.077667
    test 1921 line 214 lat2: 47.611646039058
    test 1922 line 214 lon2: 131.482217984255
    test 1923 line 214 azi2: 152.077667341138
    test 1924 line 214 lat2: 47.611646039058
    test 1925 line 214 lon2: 131.482217984255
    test 1926 line 214 azi2: 152.077667341138
    test 1927 line 215 lat: 13.906234
    test 1928 line 215 lon: 115.526238
    test 1929 line 215 fb: 130.769627
    test 1930 line 215 lat2: 13.906233945801
    test 1931 line 215 lon2: 115.526238064488
    test 1932 line 215 azi2: 130.769627488545
    test 1933 line 215 lat2: 13.906233945801
    test 1934 line 215 lon2: 115.526238064488
    test 1935 line 215 azi2: 130.769627488545
    test 1936 line 216 lat: 3.675485
    test 1937 line 216 lon: 80.781862
    test 1938 line 216 fb: 94.188426
    test 1939 line 216 lat2: 3.675485213596
    test 1940 line 216 lon2: 80.781861923838
    test 1941 line 216 azi2: 94.188426367881
    test 1942 line 216 lat2: 3.675485213596
    test 1943 line 216 lon2: 80.781861923838
    test 1944 line 216 azi2: 94.188426367881
    test 1945 line 217 lat: 68.665600
    test 1946 line 217 lon: 21.503123
    test 1947 line 217 fb: 107.667810
    test 1948 line 217 lat2: 68.665599857810
    test 1949 line 217 lon2: 21.503123449290
    test 1950 line 217 azi2: 107.667809564608
    test 1951 line 217 lat2: 68.665599857810
    test 1952 line 217 lon2: 21.503123449290
    test 1953 line 217 azi2: 107.667809564608
    test 1954 line 218 lat: -60.791732
    test 1955 line 218 lon: 82.476063
    test 1956 line 218 fb: 117.665953
    test 1957 line 218 lat2: -60.791732218314
    test 1958 line 218 lon2: 82.476062801971
    test 1959 line 218 azi2: 117.665952598924
    test 1960 line 218 lat2: -60.791732218314
    test 1961 line 218 lon2: 82.476062801971
    test 1962 line 218 azi2: 117.665952598924
    test 1963 line 219 lat: -33.122376
    test 1964 line 219 lon: 89.871476
    test 1965 line 219 fb: 124.068098
    test 1966 line 219 lat2: -33.122375734012
    test 1967 line 219 lon2: 89.871476211443
    test 1968 line 219 azi2: 124.068098444465
    test 1969 line 219 lat2: -33.122375734012
    test 1970 line 219 lon2: 89.871476211443
    test 1971 line 219 azi2: 124.068098444465
    test 1972 line 220 lat: -34.085934
    test 1973 line 220 lon: 117.886549
    test 1974 line 220 fb: 93.366647
    test 1975 line 220 lat2: -34.085934037207
    test 1976 line 220 lon2: 117.886548615401
    test 1977 line 220 azi2: 93.366647127153
    test 1978 line 220 lat2: -34.085934037207
    test 1979 line 220 lon2: 117.886548615401
    test 1980 line 220 azi2: 93.366647127153
    test 1981 line 221 lat: -43.746811
    test 1982 line 221 lon: 107.199939
    test 1983 line 221 fb: 101.218435
    test 1984 line 221 lat2: -43.746811413059
    test 1985 line 221 lon2: 107.199938541143
    test 1986 line 221 azi2: 101.218434581373
    test 1987 line 221 lat2: -43.746811413059
    test 1988 line 221 lon2: 107.199938541143
    test 1989 line 221 azi2: 101.218434581373
    test 1990 line 222 lat: -44.514857
    test 1991 line 222 lon: 19.560361
    test 1992 line 222 fb: 166.449925
    test 1993 line 222 lat2: -44.514857277517
    test 1994 line 222 lon2: 19.560360617266
    test 1995 line 222 azi2: 166.449925135617
    test 1996 line 222 lat2: -44.514857277517
    test 1997 line 222 lon2: 19.560360617266
    test 1998 line 222 azi2: 166.449925135617
    test 1999 line 223 lat: -18.049262
    test 2000 line 223 lon: 42.099193
    test 2001 line 223 fb: 158.127141
    test 2002 line 223 lat2: -18.049261796697
    test 2003 line 223 lon2: 42.099193394607
    test 2004 line 223 azi2: 158.127140901909
    test 2005 line 223 lat2: -18.049261796697
    test 2006 line 223 lon2: 42.099193394607
    test 2007 line 223 azi2: 158.127140901909
    test 2008 line 224 lat: 9.832902
    test 2009 line 224 lon: 51.448057
    test 2010 line 224 fb: 114.348703
    test 2011 line 224 lat2: 9.832901687662
    test 2012 line 224 lon2: 51.448057387281
    test 2013 line 224 azi2: 114.348702917675
    test 2014 line 224 lat2: 9.832901687662
    test 2015 line 224 lon2: 51.448057387281
    test 2016 line 224 azi2: 114.348702917675
    test 2017 line 225 lat: -57.516443
    test 2018 line 225 lon: 64.700933
    test 2019 line 225 fb: 137.459801
    test 2020 line 225 lat2: -57.516443280706
    test 2021 line 225 lon2: 64.700933124813
    test 2022 line 225 azi2: 137.459801078685
    test 2023 line 225 lat2: -57.516443280706
    test 2024 line 225 lon2: 64.700933124813
    test 2025 line 225 azi2: 137.459801078685
    test 2026 line 226 lat: -23.072600
    test 2027 line 226 lon: 95.392602
    test 2028 line 226 fb: 140.119143
    test 2029 line 226 lat2: -23.072599811854
    test 2030 line 226 lon2: 95.392601883769
    test 2031 line 226 azi2: 140.119143469104
    test 2032 line 226 lat2: -23.072599811854
    test 2033 line 226 lon2: 95.392601883769
    test 2034 line 226 azi2: 140.119143469104
    test 2035 line 227 lat: -45.117254
    test 2036 line 227 lon: 97.361647
    test 2037 line 227 fb: 97.339041
    test 2038 line 227 lat2: -45.117253614100
    test 2039 line 227 lon2: 97.361647352714
    test 2040 line 227 azi2: 97.339040559115
    test 2041 line 227 lat2: -45.117253614100
    test 2042 line 227 lon2: 97.361647352714
    test 2043 line 227 azi2: 97.339040559115
    test 2044 line 228 lat: -11.277328
    test 2045 line 228 lon: 19.602358
    test 2046 line 228 fb: 156.779730
    test 2047 line 228 lat2: -11.277328262947
    test 2048 line 228 lon2: 19.602358024471
    test 2049 line 228 azi2: 156.779729902321
    test 2050 line 228 lat2: -11.277328262947
    test 2051 line 228 lon2: 19.602358024471
    test 2052 line 228 azi2: 156.779729902321
    test 2053 line 229 lat: -4.823524
    test 2054 line 229 lon: 164.626842
    test 2055 line 229 fb: 151.314797
    test 2056 line 229 lat2: -4.823524348693
    test 2057 line 229 lon2: 164.626841855534
    test 2058 line 229 azi2: 151.314796841238
    test 2059 line 229 lat2: -4.823524348693
    test 2060 line 229 lon2: 164.626841855534
    test 2061 line 229 azi2: 151.314796841238
    test 2062 line 230 lat: 36.317088
    test 2063 line 230 lon: 89.326155
    test 2064 line 230 fb: 94.589052
    test 2065 line 230 lat2: 36.317087922282
    test 2066 line 230 lon2: 89.326155365943
    test 2067 line 230 azi2: 94.589051951235
    test 2068 line 230 lat2: 36.317087922282
    test 2069 line 230 lon2: 89.326155365943
    test 2070 line 230 azi2: 94.589051951235
    test 2071 line 231 lat: 3.975433
    test 2072 line 231 lon: 105.460359
    test 2073 line 231 fb: 126.257925
    test 2074 line 231 lat2: 3.975432760073
    test 2075 line 231 lon2: 105.460358584149
    test 2076 line 231 azi2: 126.257925455058
    test 2077 line 231 lat2: 3.975432760073
    test 2078 line 231 lon2: 105.460358584149
    test 2079 line 231 azi2: 126.257925455058
    test 2080 line 232 lat: 28.815984
    test 2081 line 232 lon: 89.807394
    test 2082 line 232 fb: 116.984375
    test 2083 line 232 lat2: 28.815983592511
    test 2084 line 232 lon2: 89.807393686834
    test 2085 line 232 azi2: 116.984374981602
    test 2086 line 232 lat2: 28.815983592511
    test 2087 line 232 lon2: 89.807393686834
    test 2088 line 232 azi2: 116.984374981602
    test 2089 line 233 lat: 66.161717
    test 2090 line 233 lon: 63.218655
    test 2091 line 233 fb: 88.869959
    test 2092 line 233 lat2: 66.161716765270
    test 2093 line 233 lon2: 63.218655052918
    test 2094 line 233 azi2: 88.869959091488
    test 2095 line 233 lat2: 66.161716765270
    test 2096 line 233 lon2: 63.218655052918
    test 2097 line 233 azi2: 88.869959091488
    test 2098 line 234 lat: 74.859972
    test 2099 line 234 lon: 53.523361
    test 2100 line 234 fb: 58.125008
    test 2101 line 234 lat2: 74.859971601090
    test 2102 line 234 lon2: 53.523360738831
    test 2103 line 234 azi2: 58.125008091802
    test 2104 line 234 lat2: 74.859971601090
    test 2105 line 234 lon2: 53.523360738831
    test 2106 line 234 azi2: 58.125008091802
    test 2107 line 235 lat: -0.265481
    test 2108 line 235 lon: 79.537677
    test 2109 line 235 fb: 112.945830
    test 2110 line 235 lat2: -0.265481234322
    test 2111 line 235 lon2: 79.537677388981
    test 2112 line 235 azi2: 112.945829781102
    test 2113 line 235 lat2: -0.265481234322
    test 2114 line 235 lon2: 79.537677388981
    test 2115 line 235 azi2: 112.945829781102
    test 2116 line 236 lat: -12.099598
    test 2117 line 236 lon: 155.371356
    test 2118 line 236 fb: 76.454292
    test 2119 line 236 lat2: -12.099598021004
    test 2120 line 236 lon2: 155.371356164845
    test 2121 line 236 azi2: 76.454291606612
    test 2122 line 236 lat2: -12.099598021004
    test 2123 line 236 lon2: 155.371356164845
    test 2124 line 236 azi2: 76.454291606612
    test 2125 line 237 lat: -6.746465
    test 2126 line 237 lon: 19.102484
    test 2127 line 237 fb: 149.342236
    test 2128 line 237 lat2: -6.746464854112
    test 2129 line 237 lon2: 19.102484309526
    test 2130 line 237 azi2: 149.342236428405
    test 2131 line 237 lat2: -6.746464854112
    test 2132 line 237 lon2: 19.102484309526
    test 2133 line 237 azi2: 149.342236428405
    test 2134 line 238 lat: 0.663830
    test 2135 line 238 lon: 101.295721
    test 2136 line 238 fb: 133.862626
    test 2137 line 238 lat2: 0.663830251510
    test 2138 line 238 lon2: 101.295720736944
    test 2139 line 238 azi2: 133.862626019473
    test 2140 line 238 lat2: 0.663830251510
    test 2141 line 238 lon2: 101.295720736944
    test 2142 line 238 azi2: 133.862626019473
    test 2143 line 239 lat: -61.764624
    test 2144 line 239 lon: 148.537522
    test 2145 line 239 fb: 149.298772
    test 2146 line 239 lat2: -61.764623993813
    test 2147 line 239 lon2: 148.537521922087
    test 2148 line 239 azi2: 149.298771734214
    test 2149 line 239 lat2: -61.764623993813
    test 2150 line 239 lon2: 148.537521922087
    test 2151 line 239 azi2: 149.298771734214
    test 2152 line 240 lat: 14.505122
    test 2153 line 240 lon: 111.665519
    test 2154 line 240 fb: 97.740222
    test 2155 line 240 lat2: 14.505121777043
    test 2156 line 240 lon2: 111.665518774379
    test 2157 line 240 azi2: 97.740221959573
    test 2158 line 240 lat2: 14.505121777043
    test 2159 line 240 lon2: 111.665518774379
    test 2160 line 240 azi2: 97.740221959573
    test 2161 line 241 lat: -24.713205
    test 2162 line 241 lon: 34.159384
    test 2163 line 241 fb: 125.866132
    test 2164 line 241 lat2: -24.713205327375
    test 2165 line 241 lon2: 34.159384140577
    test 2166 line 241 azi2: 125.866132443875
    test 2167 line 241 lat2: -24.713205327375
    test 2168 line 241 lon2: 34.159384140577
    test 2169 line 241 azi2: 125.866132443875
    test 2170 line 242 lat: 50.480262
    test 2171 line 242 lon: 42.263850
    test 2172 line 242 fb: 153.395659
    test 2173 line 242 lat2: 50.480261762893
    test 2174 line 242 lon2: 42.263849601327
    test 2175 line 242 azi2: 153.395658919028
    test 2176 line 242 lat2: 50.480261762893
    test 2177 line 242 lon2: 42.263849601327
    test 2178 line 242 azi2: 153.395658919028
    test 2179 line 243 lat: 11.787247
    test 2180 line 243 lon: 49.506460
    test 2181 line 243 fb: 120.836778
    test 2182 line 243 lat2: 11.787247309610
    test 2183 line 243 lon2: 49.506459509702
    test 2184 line 243 azi2: 120.836778496206
    test 2185 line 243 lat2: 11.787247309610
    test 2186 line 243 lon2: 49.506459509702
    test 2187 line 243 azi2: 120.836778496206
    test 2188 line 244 lat: -19.956674
    test 2189 line 244 lon: 14.599479
    test 2190 line 244 fb: 177.883855
    test 2191 line 244 lat2: -19.956673621927
    test 2192 line 244 lon2: 14.599479227718
    test 2193 line 244 azi2: 177.883855088778
    test 2194 line 244 lat2: -19.956673621927
    test 2195 line 244 lon2: 14.599479227718
    test 2196 line 244 azi2: 177.883855088778
    test 2197 line 245 lat: 0.738566
    test 2198 line 245 lon: 12.600972
    test 2199 line 245 fb: 176.085445
    test 2200 line 245 lat2: 0.738565517815
    test 2201 line 245 lon2: 12.600972006927
    test 2202 line 245 azi2: 176.085445031797
    test 2203 line 245 lat2: 0.738565517815
    test 2204 line 245 lon2: 12.600972006927
    test 2205 line 245 azi2: 176.085445031797
    test 2206 line 246 lat: 25.799128
    test 2207 line 246 lon: 9.800259
    test 2208 line 246 fb: 166.282764
    test 2209 line 246 lat2: 25.799128425384
    test 2210 line 246 lon2: 9.800259258495
    test 2211 line 246 azi2: 166.282764024264
    test 2212 line 246 lat2: 25.799128425384
    test 2213 line 246 lon2: 9.800259258495
    test 2214 line 246 azi2: 166.282764024264
    test 2215 line 247 lat: -3.897277
    test 2216 line 247 lon: 16.693319
    test 2217 line 247 fb: 168.780736
    test 2218 line 247 lat2: -3.897277132184
    test 2219 line 247 lon2: 16.693318601970
    test 2220 line 247 azi2: 168.780736094343
    test 2221 line 247 lat2: -3.897277132184
    test 2222 line 247 lon2: 16.693318601970
    test 2223 line 247 azi2: 168.780736094343
    test 2224 line 248 lat: 2.479585
    test 2225 line 248 lon: 72.317321
    test 2226 line 248 fb: 126.935932
    test 2227 line 248 lat2: 2.479585385319
    test 2228 line 248 lon2: 72.317321261259
    test 2229 line 248 azi2: 126.935932221711
    test 2230 line 248 lat2: 2.479585385319
    test 2231 line 248 lon2: 72.317321261259
    test 2232 line 248 azi2: 126.935932221711
    test 2233 line 249 lat: -0.836621
    test 2234 line 249 lon: 2.490193
    test 2235 line 249 fb: 150.640498
    test 2236 line 249 lat2: -0.836621274662
    test 2237 line 249 lon2: 2.490192836679
    test 2238 line 249 azi2: 150.640498065221
    test 2239 line 249 lat2: -0.836621274662
    test 2240 line 249 lon2: 2.490192836679
    test 2241 line 249 azi2: 150.640498065221
    test 2242 line 250 lat: -69.098227
    test 2243 line 250 lon: 43.929874
    test 2244 line 250 fb: 143.378404
    test 2245 line 250 lat2: -69.098226894675
    test 2246 line 250 lon2: 43.929873562507
    test 2247 line 250 azi2: 143.378403982035
    test 2248 line 250 lat2: -69.098226894675
    test 2249 line 250 lon2: 43.929873562507
    test 2250 line 250 azi2: 143.378403982035
    test 2251 line 251 lat: 19.156121
    test 2252 line 251 lon: 130.658473
    test 2253 line 251 fb: 136.204475
    test 2254 line 251 lat2: 19.156121137418
    test 2255 line 251 lon2: 130.658473280949
    test 2256 line 251 azi2: 136.204475163250
    test 2257 line 251 lat2: 19.156121137418
    test 2258 line 251 lon2: 130.658473280949
    test 2259 line 251 azi2: 136.204475163250
    test 2260 line 252 lat: 68.881949
    test 2261 line 252 lon: 79.375865
    test 2262 line 252 fb: 99.052732
    test 2263 line 252 lat2: 68.881948915820
    test 2264 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2265 line 252 azi2: 99.052731550675
    test 2266 line 252 lat2: 68.881948915820
    test 2267 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2268 line 252 azi2: 99.052731550675
    test 2269 line 253 lat: -23.509016
    test 2270 line 253 lon: 122.232226
    test 2271 line 253 fb: 90.354604
    test 2272 line 253 lat2: -23.509015988874
    test 2273 line 253 lon2: 122.232226283491
    test 2274 line 253 azi2: 90.354603607380
    test 2275 line 253 lat2: -23.509015988874
    test 2276 line 253 lon2: 122.232226283491
    test 2277 line 253 azi2: 90.354603607380
    test 2278 line 254 lat: -64.950636
    test 2279 line 254 lon: 70.184354
    test 2280 line 254 fb: 122.478937
    test 2281 line 254 lat2: -64.950635804577
    test 2282 line 254 lon2: 70.184354384370
    test 2283 line 254 azi2: 122.478937039089
    test 2284 line 254 lat2: -64.950635804577
    test 2285 line 254 lon2: 70.184354384370
    test 2286 line 254 azi2: 122.478937039089
    test 2287 line 255 lat: 4.931109
    test 2288 line 255 lon: 176.100221
    test 2289 line 255 fb: 175.754221
    test 2290 line 255 lat2: 4.931108669549
    test 2291 line 255 lon2: 176.100220910178
    test 2292 line 255 azi2: 175.754221027085
    test 2293 line 255 lat2: 4.931108669549
    test 2294 line 255 lon2: 176.100220910178
    test 2295 line 255 azi2: 175.754221027085
    test 2296 line 256 lat: -35.503236
    test 2297 line 256 lon: 122.767107
    test 2298 line 256 fb: 94.201020
    test 2299 line 256 lat2: -35.503236005727
    test 2300 line 256 lon2: 122.767107174014
    test 2301 line 256 azi2: 94.201020059324
    test 2302 line 256 lat2: -35.503236005727
    test 2303 line 256 lon2: 122.767107174014
    test 2304 line 256 azi2: 94.201020059324
    test 2305 line 257 lat: 58.728016
    test 2306 line 257 lon: 76.607531
    test 2307 line 257 fb: 114.353509
    test 2308 line 257 lat2: 58.728016150448
    test 2309 line 257 lon2: 76.607530844045
    test 2310 line 257 azi2: 114.353508957613
    test 2311 line 257 lat2: 58.728016150448
    test 2312 line 257 lon2: 76.607530844045
    test 2313 line 257 azi2: 114.353508957613
    test 2314 line 258 lat: 13.725793
    test 2315 line 258 lon: 60.384503
    test 2316 line 258 fb: 102.783242
    test 2317 line 258 lat2: 13.725792757601
    test 2318 line 258 lon2: 60.384502867486
    test 2319 line 258 azi2: 102.783241874789
    test 2320 line 258 lat2: 13.725792757601
    test 2321 line 258 lon2: 60.384502867486
    test 2322 line 258 azi2: 102.783241874789
    test 2323 line 259 lat: 40.298524
    test 2324 line 259 lon: 59.957993
    test 2325 line 259 fb: 90.056366
    test 2326 line 259 lat2: 40.298523592677
    test 2327 line 259 lon2: 59.957993458231
    test 2328 line 259 azi2: 90.056365696933
    test 2329 line 259 lat2: 40.298523592677
    test 2330 line 259 lon2: 59.957993458231
    test 2331 line 259 azi2: 90.056365696933
    test 2332 line 260 lat: 21.526222
    test 2333 line 260 lon: 19.836420
    test 2334 line 260 fb: 89.081274
    test 2335 line 260 lat2: 21.526221960544
    test 2336 line 260 lon2: 19.836419824899
    test 2337 line 260 azi2: 89.081274273400
    test 2338 line 260 lat2: 21.526221960544
    test 2339 line 260 lon2: 19.836419824899
    test 2340 line 260 azi2: 89.081274273400
    test 2341 line 261 lat: -65.269872
    test 2342 line 261 lon: 134.049515
    test 2343 line 261 fb: 54.613515
    test 2344 line 261 lat2: -65.269872123888
    test 2345 line 261 lon2: 134.049514626723
    test 2346 line 261 azi2: 54.613514542799
    test 2347 line 261 lat2: -65.269872123888
    test 2348 line 261 lon2: 134.049514626723
    test 2349 line 261 azi2: 54.613514542799
    test 2350 line 262 lat: -47.687068
    test 2351 line 262 lon: 86.855941
    test 2352 line 262 fb: 115.133532
    test 2353 line 262 lat2: -47.687068378110
    test 2354 line 262 lon2: 86.855941174728
    test 2355 line 262 azi2: 115.133531572693
    test 2356 line 262 lat2: -47.687068378110
    test 2357 line 262 lon2: 86.855941174728
    test 2358 line 262 azi2: 115.133531572693
    test 2359 line 263 lat: -56.637273
    test 2360 line 263 lon: 158.001121
    test 2361 line 263 fb: 35.013276
    test 2362 line 263 lat2: -56.637272907294
    test 2363 line 263 lon2: 158.001120751267
    test 2364 line 263 azi2: 35.013276119319
    test 2365 line 263 lat2: -56.637272907294
    test 2366 line 263 lon2: 158.001120751267
    test 2367 line 263 azi2: 35.013276119319
    test 2368 line 264 lat: 6.880772
    test 2369 line 264 lon: 36.289125
    test 2370 line 264 fb: 144.499557
    test 2371 line 264 lat2: 6.880771895178
    test 2372 line 264 lon2: 36.289124705135
    test 2373 line 264 azi2: 144.499557452454
    test 2374 line 264 lat2: 6.880771895178
    test 2375 line 264 lon2: 36.289124705135
    test 2376 line 264 azi2: 144.499557452454
    test 2377 line 265 lat: 59.205527
    test 2378 line 265 lon: 115.787268
    test 2379 line 265 fb: 116.793619
    test 2380 line 265 lat2: 59.205526512430
    test 2381 line 265 lon2: 115.787267608171
    test 2382 line 265 azi2: 116.793618855456
    test 2383 line 265 lat2: 59.205526512430
    test 2384 line 265 lon2: 115.787267608171
    test 2385 line 265 azi2: 116.793618855456
    test 2386 line 266 lat: 29.463206
    test 2387 line 266 lon: 68.742710
    test 2388 line 266 fb: 113.906069
    test 2389 line 266 lat2: 29.463206450868
    test 2390 line 266 lon2: 68.742710218988
    test 2391 line 266 azi2: 113.906069374400
    test 2392 line 266 lat2: 29.463206450868
    test 2393 line 266 lon2: 68.742710218988
    test 2394 line 266 azi2: 113.906069374400
    test 2395 line 267 lat: 5.507960
    test 2396 line 267 lon: 2.913367
    test 2397 line 267 fb: 175.225892
    test 2398 line 267 lat2: 5.507959555355
    test 2399 line 267 lon2: 2.913367209347
    test 2400 line 267 azi2: 175.225891805562
    test 2401 line 267 lat2: 5.507959555355
    test 2402 line 267 lon2: 2.913367209347
    test 2403 line 267 azi2: 175.225891805562
    test 2404 line 268 lat: 32.568215
    test 2405 line 268 lon: 107.814340
    test 2406 line 268 fb: 126.321687
    test 2407 line 268 lat2: 32.568215067951
    test 2408 line 268 lon2: 107.814340389788
    test 2409 line 268 azi2: 126.321687264203
    test 2410 line 268 lat2: 32.568215067951
    test 2411 line 268 lon2: 107.814340389788
    test 2412 line 268 azi2: 126.321687264203
    test 2413 line 269 lat: 48.941036
    test 2414 line 269 lon: 170.309380
    test 2415 line 269 fb: 170.816057
    test 2416 line 269 lat2: 48.941036400994
    test 2417 line 269 lon2: 170.309379989564
    test 2418 line 269 azi2: 170.816056872564
    test 2419 line 269 lat2: 48.941036400994
    test 2420 line 269 lon2: 170.309379989564
    test 2421 line 269 azi2: 170.816056872564
    test 2422 line 270 lat: 32.657811
    test 2423 line 270 lon: 174.401372
    test 2424 line 270 fb: 173.967029
    test 2425 line 270 lat2: 32.657810935795
    test 2426 line 270 lon2: 174.401372292954
    test 2427 line 270 azi2: 173.967029189838
    test 2428 line 270 lat2: 32.657810935795
    test 2429 line 270 lon2: 174.401372292954
    test 2430 line 270 azi2: 173.967029189838
    test 2431 line 271 lat: -30.959342
    test 2432 line 271 lon: 144.596945
    test 2433 line 271 fb: 157.635539
    test 2434 line 271 lat2: -30.959341511189
    test 2435 line 271 lon2: 144.596944855700
    test 2436 line 271 azi2: 157.635538872114
    test 2437 line 271 lat2: -30.959341511189
    test 2438 line 271 lon2: 144.596944855700
    test 2439 line 271 azi2: 157.635538872114
    test 2440 line 272 lat: 52.180060
    test 2441 line 272 lon: 68.363538
    test 2442 line 272 fb: 82.619820
    test 2443 line 272 lat2: 52.180060488771
    test 2444 line 272 lon2: 68.363538073511
    test 2445 line 272 azi2: 82.619819936898
    test 2446 line 272 lat2: 52.180060488771
    test 2447 line 272 lon2: 68.363538073511
    test 2448 line 272 azi2: 82.619819936898
    test 2449 line 273 lat: -49.230655
    test 2450 line 273 lon: 119.085123
    test 2451 line 273 fb: 81.553785
    test 2452 line 273 lat2: -49.230654785601
    test 2453 line 273 lon2: 119.085122995371
    test 2454 line 273 azi2: 81.553785297210
    test 2455 line 273 lat2: -49.230654785601
    test 2456 line 273 lon2: 119.085122995371
    test 2457 line 273 azi2: 81.553785297210
    test 2458 line 274 lat: 12.315309
    test 2459 line 274 lon: 21.800337
    test 2460 line 274 fb: 86.572317
    test 2461 line 274 lat2: 12.315308710130
    test 2462 line 274 lon2: 21.800336803956
    test 2463 line 274 azi2: 86.572316548512
    test 2464 line 274 lat2: 12.315308710130
    test 2465 line 274 lon2: 21.800336803956
    test 2466 line 274 azi2: 86.572316548512
    test 2467 line 275 lat: 0.074875
    test 2468 line 275 lon: 122.092567
    test 2469 line 275 fb: 93.940324
    test 2470 line 275 lat2: 0.074874782626
    test 2471 line 275 lon2: 122.092567299352
    test 2472 line 275 azi2: 93.940323652996
    test 2473 line 275 lat2: 0.074874782626
    test 2474 line 275 lon2: 122.092567299352
    test 2475 line 275 azi2: 93.940323652996
    test 2476 line 276 lat: -32.420609
    test 2477 line 276 lon: 80.147417
    test 2478 line 276 fb: 123.183256
    test 2479 line 276 lat2: -32.420609134175
    test 2480 line 276 lon2: 80.147416945184
    test 2481 line 276 azi2: 123.183256201588
    test 2482 line 276 lat2: -32.420609134175
    test 2483 line 276 lon2: 80.147416945184
    test 2484 line 276 azi2: 123.183256201588
    test 2485 line 277 lat: 82.600418
    test 2486 line 277 lon: 34.418367
    test 2487 line 277 fb: 35.057122
    test 2488 line 277 lat2: 82.600418456713
    test 2489 line 277 lon2: 34.418367124569
    test 2490 line 277 azi2: 35.057122384192
    test 2491 line 277 lat2: 82.600418456713
    test 2492 line 277 lon2: 34.418367124569
    test 2493 line 277 azi2: 35.057122384192
    test 2494 line 278 lat: 26.274633
    test 2495 line 278 lon: 93.043032
    test 2496 line 278 fb: 114.480069
    test 2497 line 278 lat2: 26.274632977288
    test 2498 line 278 lon2: 93.043031668414
    test 2499 line 278 azi2: 114.480069066657
    test 2500 line 278 lat2: 26.274632977288
    test 2501 line 278 lon2: 93.043031668414
    test 2502 line 278 azi2: 114.480069066657
    test 2503 line 279 lat: 28.433986
    test 2504 line 279 lon: 132.962042
    test 2505 line 279 fb: 118.817242
    test 2506 line 279 lat2: 28.433985598740
    test 2507 line 279 lon2: 132.962041543078
    test 2508 line 279 azi2: 118.817241997246
    test 2509 line 279 lat2: 28.433985598740
    test 2510 line 279 lon2: 132.962041543078
    test 2511 line 279 azi2: 118.817241997246
    test 2512 line 280 lat: 32.426459
    test 2513 line 280 lon: 65.171889
    test 2514 line 280 fb: 113.230923
    test 2515 line 280 lat2: 32.426458512822
    test 2516 line 280 lon2: 65.171889395963
    test 2517 line 280 azi2: 113.230923394172
    test 2518 line 280 lat2: 32.426458512822
    test 2519 line 280 lon2: 65.171889395963
    test 2520 line 280 azi2: 113.230923394172
    test 2521 line 281 lat: 8.427284
    test 2522 line 281 lon: 20.342496
    test 2523 line 281 fb: 140.993359
    test 2524 line 281 lat2: 8.427284359102
    test 2525 line 281 lon2: 20.342496251702
    test 2526 line 281 azi2: 140.993359066103
    test 2527 line 281 lat2: 8.427284359102
    test 2528 line 281 lon2: 20.342496251702
    test 2529 line 281 azi2: 140.993359066103
    test 2530 line 282 lat: -16.412702
    test 2531 line 282 lon: 47.392542
    test 2532 line 282 fb: 167.389705
    test 2533 line 282 lat2: -16.412702228950
    test 2534 line 282 lon2: 47.392541669265
    test 2535 line 282 azi2: 167.389704666322
    test 2536 line 282 lat2: -16.412702228950
    test 2537 line 282 lon2: 47.392541669265
    test 2538 line 282 azi2: 167.389704666322
    test 2539 line 283 lat: -54.082376
    test 2540 line 283 lon: 159.985466
    test 2541 line 283 fb: 56.023710
    test 2542 line 283 lat2: -54.082375801659
    test 2543 line 283 lon2: 159.985465829683
    test 2544 line 283 azi2: 56.023710499162
    test 2545 line 283 lat2: -54.082375801659
    test 2546 line 283 lon2: 159.985465829683
    test 2547 line 283 azi2: 56.023710499162
    test 2548 line 284 lat: 38.704319
    test 2549 line 284 lon: 78.307551
    test 2550 line 284 fb: 106.582126
    test 2551 line 284 lat2: 38.704318557557
    test 2552 line 284 lon2: 78.307550831333
    test 2553 line 284 azi2: 106.582125725743
    test 2554 line 284 lat2: 38.704318557557
    test 2555 line 284 lon2: 78.307550831333
    test 2556 line 284 azi2: 106.582125725743
    test 2557 line 285 lat: 15.206275
    test 2558 line 285 lon: 59.878378
    test 2559 line 285 fb: 114.460428
    test 2560 line 285 lat2: 15.206274688849
    test 2561 line 285 lon2: 59.878378252292
    test 2562 line 285 azi2: 114.460428216582
    test 2563 line 285 lat2: 15.206274688849
    test 2564 line 285 lon2: 59.878378252292
    test 2565 line 285 azi2: 114.460428216582
    test 2566 line 286 lat: -62.789550
    test 2567 line 286 lon: 66.649185
    test 2568 line 286 fb: 119.232672
    test 2569 line 286 lat2: -62.789549909136
    test 2570 line 286 lon2: 66.649184622337
    test 2571 line 286 azi2: 119.232671643971
    test 2572 line 286 lat2: -62.789549909136
    test 2573 line 286 lon2: 66.649184622337
    test 2574 line 286 azi2: 119.232671643971
    test 2575 line 287 lat: 31.235252
    test 2576 line 287 lon: 19.933468
    test 2577 line 287 fb: 145.488470
    test 2578 line 287 lat2: 31.235252170087
    test 2579 line 287 lon2: 19.933467970517
    test 2580 line 287 azi2: 145.488469796544
    test 2581 line 287 lat2: 31.235252170087
    test 2582 line 287 lon2: 19.933467970517
    test 2583 line 287 azi2: 145.488469796544
    test 2584 line 288 lat: 11.983236
    test 2585 line 288 lon: 145.307369
    test 2586 line 288 fb: 151.192641
    test 2587 line 288 lat2: 11.983236088753
    test 2588 line 288 lon2: 145.307368849730
    test 2589 line 288 azi2: 151.192640854621
    test 2590 line 288 lat2: 11.983236088753
    test 2591 line 288 lon2: 145.307368849730
    test 2592 line 288 azi2: 151.192640854621
    test 2593 line 289 lat: 27.629694
    test 2594 line 289 lon: 16.148459
    test 2595 line 289 fb: 63.008012
    test 2596 line 289 lat2: 27.629693628283
    test 2597 line 289 lon2: 16.148459400244
    test 2598 line 289 azi2: 63.008012267521
    test 2599 line 289 lat2: 27.629693628283
    test 2600 line 289 lon2: 16.148459400244
    test 2601 line 289 azi2: 63.008012267521
    test 2602 line 290 lat: 34.077784
    test 2603 line 290 lon: 115.693210
    test 2604 line 290 fb: 112.252264
    test 2605 line 290 lat2: 34.077783768135
    test 2606 line 290 lon2: 115.693209573427
    test 2607 line 290 azi2: 112.252263721679
    test 2608 line 290 lat2: 34.077783768135
    test 2609 line 290 lon2: 115.693209573427
    test 2610 line 290 azi2: 112.252263721679
    test 2611 line 291 lat: 17.100340
    test 2612 line 291 lon: 26.538643
    test 2613 line 291 fb: 131.391925
    test 2614 line 291 lat2: 17.100339523444
    test 2615 line 291 lon2: 26.538642768875
    test 2616 line 291 azi2: 131.391925094902
    test 2617 line 291 lat2: 17.100339523444
    test 2618 line 291 lon2: 26.538642768875
    test 2619 line 291 azi2: 131.391925094902
    test 2620 line 292 lat: -8.128040
    test 2621 line 292 lon: 28.609615
    test 2622 line 292 fb: 144.189095
    test 2623 line 292 lat2: -8.128039572354
    test 2624 line 292 lon2: 28.609615412806
    test 2625 line 292 azi2: 144.189095481788
    test 2626 line 292 lat2: -8.128039572354
    test 2627 line 292 lon2: 28.609615412806
    test 2628 line 292 azi2: 144.189095481788
    test 2629 line 293 lat: 17.307082
    test 2630 line 293 lon: 150.748550
    test 2631 line 293 fb: 172.334611
    test 2632 line 293 lat2: 17.307081581668
    test 2633 line 293 lon2: 150.748549863580
    test 2634 line 293 azi2: 172.334611079260
    test 2635 line 293 lat2: 17.307081581668
    test 2636 line 293 lon2: 150.748549863580
    test 2637 line 293 azi2: 172.334611079260
    test 2638 line 294 lat: 4.135230
    test 2639 line 294 lon: 142.094814
    test 2640 line 294 fb: 170.513214
    test 2641 line 294 lat2: 4.135229575811
    test 2642 line 294 lon2: 142.094814225629
    test 2643 line 294 azi2: 170.513213518678
    test 2644 line 294 lat2: 4.135229575811
    test 2645 line 294 lon2: 142.094814225629
    test 2646 line 294 azi2: 170.513213518678
    test 2647 line 295 lat: -61.544041
    test 2648 line 295 lon: 167.154866
    test 2649 line 295 fb: 51.415676
    test 2650 line 295 lat2: -61.544040804472
    test 2651 line 295 lon2: 167.154866481811
    test 2652 line 295 azi2: 51.415675504866
    test 2653 line 295 lat2: -61.544040804472
    test 2654 line 295 lon2: 167.154866481812  FAILED, KNOWN, expected 167.154866481811
    test 2655 line 295 azi2: 51.415675504865  FAILED, KNOWN, expected 51.415675504866
    test 2656 line 296 lat: 27.782466
    test 2657 line 296 lon: 53.844550
    test 2658 line 296 fb: 78.357665
    test 2659 line 296 lat2: 27.782465760718
    test 2660 line 296 lon2: 53.844549799795
    test 2661 line 296 azi2: 78.357665271795
    test 2662 line 296 lat2: 27.782465760718
    test 2663 line 296 lon2: 53.844549799795
    test 2664 line 296 azi2: 78.357665271795
    test 2665 line 297 lat: -30.157337
    test 2666 line 297 lon: 14.759636
    test 2667 line 297 fb: 157.487063
    test 2668 line 297 lat2: -30.157336788088
    test 2669 line 297 lon2: 14.759635614931
    test 2670 line 297 azi2: 157.487063280783
    test 2671 line 297 lat2: -30.157336788088
    test 2672 line 297 lon2: 14.759635614931
    test 2673 line 297 azi2: 157.487063280783
    test 2674 line 298 lat: -16.819268
    test 2675 line 298 lon: 22.734618
    test 2676 line 298 fb: 167.761663
    test 2677 line 298 lat2: -16.819268371139
    test 2678 line 298 lon2: 22.734618221531
    test 2679 line 298 azi2: 167.761663436059
    test 2680 line 298 lat2: -16.819268371139
    test 2681 line 298 lon2: 22.734618221531
    test 2682 line 298 azi2: 167.761663436059
    test 2683 line 299 lat: 58.190743
    test 2684 line 299 lon: 15.576363
    test 2685 line 299 fb: 71.213972
    test 2686 line 299 lat2: 58.190742593673
    test 2687 line 299 lon2: 15.576363250416
    test 2688 line 299 azi2: 71.213972172079
    test 2689 line 299 lat2: 58.190742593673
    test 2690 line 299 lon2: 15.576363250416
    test 2691 line 299 azi2: 71.213972172079
    test 2692 line 300 lat: 57.214981
    test 2693 line 300 lon: 163.530752
    test 2694 line 300 fb: 162.056064
    test 2695 line 300 lat2: 57.214981133823
    test 2696 line 300 lon2: 163.530751680014
    test 2697 line 300 azi2: 162.056064225923
    test 2698 line 300 lat2: 57.214981133823
    test 2699 line 300 lon2: 163.530751680014
    test 2700 line 300 azi2: 162.056064225923
    test 2701 line 301 lat: 31.811818
    test 2702 line 301 lon: 81.663494
    test 2703 line 301 fb: 112.546404
    test 2704 line 301 lat2: 31.811817748936
    test 2705 line 301 lon2: 81.663494432962
    test 2706 line 301 azi2: 112.546403824977
    test 2707 line 301 lat2: 31.811817748936
    test 2708 line 301 lon2: 81.663494432962
    test 2709 line 301 azi2: 112.546403824977
    test 2710 line 302 lat: -11.315727
    test 2711 line 302 lon: 48.409490
    test 2712 line 302 fb: 121.434574
    test 2713 line 302 lat2: -11.315726799012
    test 2714 line 302 lon2: 48.409489590525
    test 2715 line 302 azi2: 121.434573764585
    test 2716 line 302 lat2: -11.315726799012
    test 2717 line 302 lon2: 48.409489590525
    test 2718 line 302 azi2: 121.434573764585
    test 2719 line 303 lat: 6.119956
    test 2720 line 303 lon: 5.687908
    test 2721 line 303 fb: 94.977171
    test 2722 line 303 lat2: 6.119956010623
    test 2723 line 303 lon2: 5.687908365969
    test 2724 line 303 azi2: 94.977170961146
    test 2725 line 303 lat2: 6.119956010623
    test 2726 line 303 lon2: 5.687908365969
    test 2727 line 303 azi2: 94.977170961146
    test 2728 line 304 lat: -13.455263
    test 2729 line 304 lon: 92.797729
    test 2730 line 304 fb: 125.067595
    test 2731 line 304 lat2: -13.455262906771
    test 2732 line 304 lon2: 92.797729354548
    test 2733 line 304 azi2: 125.067595131171
    test 2734 line 304 lat2: -13.455262906771
    test 2735 line 304 lon2: 92.797729354548
    test 2736 line 304 azi2: 125.067595131171
    test 2737 line 305 lat: -61.258454
    test 2738 line 305 lon: 32.464613
    test 2739 line 305 fb: 153.578300
    test 2740 line 305 lat2: -61.258454070259
    test 2741 line 305 lon2: 32.464613321886
    test 2742 line 305 azi2: 153.578299580216
    test 2743 line 305 lat2: -61.258454070259
    test 2744 line 305 lon2: 32.464613321886
    test 2745 line 305 azi2: 153.578299580216
    test 2746 line 306 lat: 76.656194
    test 2747 line 306 lon: 147.658262
    test 2748 line 306 fb: 154.870277
    test 2749 line 306 lat2: 76.656194303754
    test 2750 line 306 lon2: 147.658261698859
    test 2751 line 306 azi2: 154.870276891567
    test 2752 line 306 lat2: 76.656194303754
    test 2753 line 306 lon2: 147.658261698859
    test 2754 line 306 azi2: 154.870276891567
    test 2755 line 307 lat: 38.020470
    test 2756 line 307 lon: 22.502210
    test 2757 line 307 fb: 164.603876
    test 2758 line 307 lat2: 38.020470355438
    test 2759 line 307 lon2: 22.502210018002
    test 2760 line 307 azi2: 164.603876406614
    test 2761 line 307 lat2: 38.020470355438
    test 2762 line 307 lon2: 22.502210018002
    test 2763 line 307 azi2: 164.603876406614
    test 2764 line 308 lat: -28.475186
    test 2765 line 308 lon: 125.031589
    test 2766 line 308 fb: 71.946314
    test 2767 line 308 lat2: -28.475185707347
    test 2768 line 308 lon2: 125.031589334958
    test 2769 line 308 azi2: 71.946313988393
    test 2770 line 308 lat2: -28.475185707347
    test 2771 line 308 lon2: 125.031589334958
    test 2772 line 308 azi2: 71.946313988393
    test 2773 line 309 lat: 33.123700
    test 2774 line 309 lon: 47.796870
    test 2775 line 309 fb: 66.233041
    test 2776 line 309 lat2: 33.123699771125
    test 2777 line 309 lon2: 47.796870281285
    test 2778 line 309 azi2: 66.233040505915
    test 2779 line 309 lat2: 33.123699771125
    test 2780 line 309 lon2: 47.796870281285
    test 2781 line 309 azi2: 66.233040505915
    test 2782 line 310 lat: 36.967606
    test 2783 line 310 lon: 91.462107
    test 2784 line 310 fb: 113.555931
    test 2785 line 310 lat2: 36.967605507925
    test 2786 line 310 lon2: 91.462107367844
    test 2787 line 310 azi2: 113.555931272414
    test 2788 line 310 lat2: 36.967605507925
    test 2789 line 310 lon2: 91.462107367844
    test 2790 line 310 azi2: 113.555931272414
    test 2791 line 311 lat: -3.784112
    test 2792 line 311 lon: 75.465096
    test 2793 line 311 fb: 146.940895
    test 2794 line 311 lat2: -3.784112064078
    test 2795 line 311 lon2: 75.465096433718
    test 2796 line 311 azi2: 146.940895363525
    test 2797 line 311 lat2: -3.784112064078
    test 2798 line 311 lon2: 75.465096433718
    test 2799 line 311 azi2: 146.940895363525
    test 2800 line 312 lat: 10.772454
    test 2801 line 312 lon: 162.137695
    test 2802 line 312 fb: 176.774643
    test 2803 line 312 lat2: 10.772454234710
    test 2804 line 312 lon2: 162.137694811372
    test 2805 line 312 azi2: 176.774642770857
    test 2806 line 312 lat2: 10.772454234711  FAILED, KNOWN, expected 10.772454234710
    test 2807 line 312 lon2: 162.137694811372
    test 2808 line 312 azi2: 176.774642770857
    test 2809 line 313 lat: 23.928740
    test 2810 line 313 lon: 28.953169
    test 2811 line 313 fb: 143.614710
    test 2812 line 313 lat2: 23.928739648982
    test 2813 line 313 lon2: 28.953169497861
    test 2814 line 313 azi2: 143.614709768381
    test 2815 line 313 lat2: 23.928739648982
    test 2816 line 313 lon2: 28.953169497861
    test 2817 line 313 azi2: 143.614709768381
    test 2818 line 314 lat: 5.199377
    test 2819 line 314 lon: 162.802668
    test 2820 line 314 fb: 146.857520
    test 2821 line 314 lat2: 5.199376594428
    test 2822 line 314 lon2: 162.802668362269
    test 2823 line 314 azi2: 146.857519761344
    test 2824 line 314 lat2: 5.199376594428
    test 2825 line 314 lon2: 162.802668362269
    test 2826 line 314 azi2: 146.857519761344
    test 2827 line 315 lat: 6.285334
    test 2828 line 315 lon: 164.204548
    test 2829 line 315 fb: 159.451359
    test 2830 line 315 lat2: 6.285334322282
    test 2831 line 315 lon2: 164.204548022855
    test 2832 line 315 azi2: 159.451359223111
    test 2833 line 315 lat2: 6.285334322282
    test 2834 line 315 lon2: 164.204548022855
    test 2835 line 315 azi2: 159.451359223111
    test 2836 line 316 lat: -8.151874
    test 2837 line 316 lon: 43.923539
    test 2838 line 316 fb: 121.501273
    test 2839 line 316 lat2: -8.151873580306
    test 2840 line 316 lon2: 43.923539410568
    test 2841 line 316 azi2: 121.501272690158
    test 2842 line 316 lat2: -8.151873580306
    test 2843 line 316 lon2: 43.923539410568
    test 2844 line 316 azi2: 121.501272690158
    test 2845 line 317 lat: 20.145480
    test 2846 line 317 lon: 92.310645
    test 2847 line 317 fb: 97.369333
    test 2848 line 317 lat2: 20.145480383316
    test 2849 line 317 lon2: 92.310644735772
    test 2850 line 317 azi2: 97.369333245027
    test 2851 line 317 lat2: 20.145480383316
    test 2852 line 317 lon2: 92.310644735772
    test 2853 line 317 azi2: 97.369333245027
    test 2854 line 318 lat: 38.715579
    test 2855 line 318 lon: 89.141427
    test 2856 line 318 fb: 100.831087
    test 2857 line 318 lat2: 38.715578802658
    test 2858 line 318 lon2: 89.141426830360
    test 2859 line 318 azi2: 100.831086703170
    test 2860 line 318 lat2: 38.715578802658
    test 2861 line 318 lon2: 89.141426830360
    test 2862 line 318 azi2: 100.831086703170
    test 2863 line 319 lat: -25.760685
    test 2864 line 319 lon: 145.864001
    test 2865 line 319 fb: 142.714674
    test 2866 line 319 lat2: -25.760685020607
    test 2867 line 319 lon2: 145.864001048187
    test 2868 line 319 azi2: 142.714673928912
    test 2869 line 319 lat2: -25.760685020607
    test 2870 line 319 lon2: 145.864001048187
    test 2871 line 319 azi2: 142.714673928912
    test 2872 line 320 lat: 49.387283
    test 2873 line 320 lon: 28.917044
    test 2874 line 320 fb: 61.545235
    test 2875 line 320 lat2: 49.387283074155
    test 2876 line 320 lon2: 28.917043656754
    test 2877 line 320 azi2: 61.545235148403
    test 2878 line 320 lat2: 49.387283074155
    test 2879 line 320 lon2: 28.917043656753  FAILED, KNOWN, expected 28.917043656754
    test 2880 line 320 azi2: 61.545235148403
    test 2881 line 321 lat: 10.120685
    test 2882 line 321 lon: 2.869738
    test 2883 line 321 fb: 176.526916
    test 2884 line 321 lat2: 10.120685293027
    test 2885 line 321 lon2: 2.869737593886
    test 2886 line 321 azi2: 176.526915822865
    test 2887 line 321 lat2: 10.120685293027
    test 2888 line 321 lon2: 2.869737593886
    test 2889 line 321 azi2: 176.526915822865
    test 2890 line 322 lat: 2.463216
    test 2891 line 322 lon: 102.917600
    test 2892 line 322 fb: 170.609004
    test 2893 line 322 lat2: 2.463216066166
    test 2894 line 322 lon2: 102.917599852201
    test 2895 line 322 azi2: 170.609003610639
    test 2896 line 322 lat2: 2.463216066166
    test 2897 line 322 lon2: 102.917599852201
    test 2898 line 322 azi2: 170.609003610639
    test 2899 line 323 lat: 58.201294
    test 2900 line 323 lon: 155.022079
    test 2901 line 323 fb: 153.181269
    test 2902 line 323 lat2: 58.201293688923
    test 2903 line 323 lon2: 155.022079105501
    test 2904 line 323 azi2: 153.181268692773
    test 2905 line 323 lat2: 58.201293688923
    test 2906 line 323 lon2: 155.022079105501
    test 2907 line 323 azi2: 153.181268692773
    test 2908 line 324 lat: 3.089608
    test 2909 line 324 lon: 20.686800
    test 2910 line 324 fb: 144.857820
    test 2911 line 324 lat2: 3.089607756265
    test 2912 line 324 lon2: 20.686800266169
    test 2913 line 324 azi2: 144.857820265585
    test 2914 line 324 lat2: 3.089607756265
    test 2915 line 324 lon2: 20.686800266169
    test 2916 line 324 azi2: 144.857820265585
    test 2917 line 325 lat: 48.232274
    test 2918 line 325 lon: 18.567244
    test 2919 line 325 fb: 24.556438
    test 2920 line 325 lat2: 48.232274219515
    test 2921 line 325 lon2: 18.567244222293
    test 2922 line 325 azi2: 24.556437713520
    test 2923 line 325 lat2: 48.232274219515
    test 2924 line 325 lon2: 18.567244222293
    test 2925 line 325 azi2: 24.556437713520
    test 2926 line 326 lat: 30.265261
    test 2927 line 326 lon: 7.440738
    test 2928 line 326 fb: 142.022972
    test 2929 line 326 lat2: 30.265261486767
    test 2930 line 326 lon2: 7.440737656545
    test 2931 line 326 azi2: 142.022971576270
    test 2932 line 326 lat2: 30.265261486767
    test 2933 line 326 lon2: 7.440737656545
    test 2934 line 326 azi2: 142.022971576270
    test 2935 line 327 lat: -11.166197
    test 2936 line 327 lon: 176.728934
    test 2937 line 327 fb: 24.287273
    test 2938 line 327 lat2: -11.166197413148
    test 2939 line 327 lon2: 176.728933575636
    test 2940 line 327 azi2: 24.287272842989
    test 2941 line 327 lat2: -11.166197413148
    test 2942 line 327 lon2: 176.728933575636
    test 2943 line 327 azi2: 24.287272842989
    test 2944 line 328 lat: 84.645539
    test 2945 line 328 lon: 90.023922
    test 2946 line 328 fb: 92.786262
    test 2947 line 328 lat2: 84.645539196082
    test 2948 line 328 lon2: 90.023922499395
    test 2949 line 328 azi2: 92.786261566827
    test 2950 line 328 lat2: 84.645539196082
    test 2951 line 328 lon2: 90.023922499395
    test 2952 line 328 azi2: 92.786261566828  FAILED, KNOWN, expected 92.786261566827
    test 2953 line 329 lat: 61.618717
    test 2954 line 329 lon: 162.510959
    test 2955 line 329 fb: 160.923940
    test 2956 line 329 lat2: 61.618716728051
    test 2957 line 329 lon2: 162.510958917359
    test 2958 line 329 azi2: 160.923939760553
    test 2959 line 329 lat2: 61.618716728051
    test 2960 line 329 lon2: 162.510958917359
    test 2961 line 329 azi2: 160.923939760553
    test 2962 line 330 lat: 27.643242
    test 2963 line 330 lon: 45.376215
    test 2964 line 330 fb: 147.964522
    test 2965 line 330 lat2: 27.643242341173
    test 2966 line 330 lon2: 45.376215094118
    test 2967 line 330 azi2: 147.964522484664
    test 2968 line 330 lat2: 27.643242341173
    test 2969 line 330 lon2: 45.376215094118
    test 2970 line 330 azi2: 147.964522484664
    test 2971 line 331 lat: 2.218750
    test 2972 line 331 lon: 170.358342
    test 2973 line 331 fb: 141.658474
    test 2974 line 331 lat2: 2.218749985364
    test 2975 line 331 lon2: 170.358342078292
    test 2976 line 331 azi2: 141.658474129787
    test 2977 line 331 lat2: 2.218749985364
    test 2978 line 331 lon2: 170.358342078292
    test 2979 line 331 azi2: 141.658474129787
    test 2980 line 332 lat: 26.019142
    test 2981 line 332 lon: 32.534760
    test 2982 line 332 fb: 128.159784
    test 2983 line 332 lat2: 26.019142329663
    test 2984 line 332 lon2: 32.534760195963
    test 2985 line 332 azi2: 128.159784291645
    test 2986 line 332 lat2: 26.019142329663
    test 2987 line 332 lon2: 32.534760195963
    test 2988 line 332 azi2: 128.159784291645
    test 2989 line 333 lat: 10.049636
    test 2990 line 333 lon: 72.205347
    test 2991 line 333 fb: 143.602160
    test 2992 line 333 lat2: 10.049636247749
    test 2993 line 333 lon2: 72.205346955818
    test 2994 line 333 azi2: 143.602159725306
    test 2995 line 333 lat2: 10.049636247749
    test 2996 line 333 lon2: 72.205346955818
    test 2997 line 333 azi2: 143.602159725306
    test 2998 line 334 lat: -31.030497
    test 2999 line 334 lon: 91.539195
    test 3000 line 334 fb: 109.891398
    test 3001 line 334 lat2: -31.030496743715
    test 3002 line 334 lon2: 91.539195292896
    test 3003 line 334 azi2: 109.891398221790
    test 3004 line 334 lat2: -31.030496743715
    test 3005 line 334 lon2: 91.539195292896
    test 3006 line 334 azi2: 109.891398221790
    test 3007 line 335 lat: 30.113796
    test 3008 line 335 lon: 109.096982
    test 3009 line 335 fb: 146.779343
    test 3010 line 335 lat2: 30.113795853671
    test 3011 line 335 lon2: 109.096981631502
    test 3012 line 335 azi2: 146.779343066541
    test 3013 line 335 lat2: 30.113795853671
    test 3014 line 335 lon2: 109.096981631502
    test 3015 line 335 azi2: 146.779343066541
    test 3016 line 336 lat: -73.967996
    test 3017 line 336 lon: 65.944243
    test 3018 line 336 fb: 120.592999
    test 3019 line 336 lat2: -73.967996185770
    test 3020 line 336 lon2: 65.944242524678
    test 3021 line 336 azi2: 120.592998665529
    test 3022 line 336 lat2: -73.967996185770
    test 3023 line 336 lon2: 65.944242524678
    test 3024 line 336 azi2: 120.592998665529
    test 3025 line 337 lat: 52.211150
    test 3026 line 337 lon: 168.054185
    test 3027 line 337 fb: 172.425992
    test 3028 line 337 lat2: 52.211149755494
    test 3029 line 337 lon2: 168.054184827868
    test 3030 line 337 azi2: 172.425991612467
    test 3031 line 337 lat2: 52.211149755494
    test 3032 line 337 lon2: 168.054184827868
    test 3033 line 337 azi2: 172.425991612467
    test 3034 line 338 lat: -64.497146
    test 3035 line 338 lon: 72.073419
    test 3036 line 338 fb: 114.249129
    test 3037 line 338 lat2: -64.497146189688
    test 3038 line 338 lon2: 72.073418936581
    test 3039 line 338 azi2: 114.249128850219
    test 3040 line 338 lat2: -64.497146189688
    test 3041 line 338 lon2: 72.073418936581
    test 3042 line 338 azi2: 114.249128850219
    test 3043 line 339 lat: -25.711399
    test 3044 line 339 lon: 6.036423
    test 3045 line 339 fb: 169.464098
    test 3046 line 339 lat2: -25.711398997503
    test 3047 line 339 lon2: 6.036423474639
    test 3048 line 339 azi2: 169.464098294263
    test 3049 line 339 lat2: -25.711398997503
    test 3050 line 339 lon2: 6.036423474639
    test 3051 line 339 azi2: 169.464098294263
    test 3052 line 340 lat: 33.904613
    test 3053 line 340 lon: 30.989094
    test 3054 line 340 fb: 124.896016
    test 3055 line 340 lat2: 33.904613360449
    test 3056 line 340 lon2: 30.989094387217
    test 3057 line 340 azi2: 124.896016003640
    test 3058 line 340 lat2: 33.904613360449
    test 3059 line 340 lon2: 30.989094387217
    test 3060 line 340 azi2: 124.896016003640
    test 3061 line 341 lat: -25.053080
    test 3062 line 341 lon: 137.078639
    test 3063 line 341 fb: 115.960750
    test 3064 line 341 lat2: -25.053079543516
    test 3065 line 341 lon2: 137.078638665495
    test 3066 line 341 azi2: 115.960750169086
    test 3067 line 341 lat2: -25.053079543516
    test 3068 line 341 lon2: 137.078638665495
    test 3069 line 341 azi2: 115.960750169086
    test 3070 line 342 lat: 10.298031
    test 3071 line 342 lon: 27.737374
    test 3072 line 342 fb: 142.265457
    test 3073 line 342 lat2: 10.298031202629
    test 3074 line 342 lon2: 27.737373649973
    test 3075 line 342 azi2: 142.265457288483
    test 3076 line 342 lat2: 10.298031202629
    test 3077 line 342 lon2: 27.737373649973
    test 3078 line 342 azi2: 142.265457288483
    test 3079 line 343 lat: -0.738692
    test 3080 line 343 lon: 150.933627
    test 3081 line 343 fb: 174.004688
    test 3082 line 343 lat2: -0.738692377457
    test 3083 line 343 lon2: 150.933627031610
    test 3084 line 343 azi2: 174.004687728765
    test 3085 line 343 lat2: -0.738692377457
    test 3086 line 343 lon2: 150.933627031610
    test 3087 line 343 azi2: 174.004687728765
    test 3088 line 344 lat: 50.619289
    test 3089 line 344 lon: 67.178203
    test 3090 line 344 fb: 105.177353
    test 3091 line 344 lat2: 50.619289349009
    test 3092 line 344 lon2: 67.178203328135
    test 3093 line 344 azi2: 105.177353051107
    test 3094 line 344 lat2: 50.619289349009
    test 3095 line 344 lon2: 67.178203328135
    test 3096 line 344 azi2: 105.177353051107
    test 3097 line 345 lat: -2.127739
    test 3098 line 345 lon: 38.604245
    test 3099 line 345 fb: 118.657849
    test 3100 line 345 lat2: -2.127739360728
    test 3101 line 345 lon2: 38.604245449983
    test 3102 line 345 azi2: 118.657849063154
    test 3103 line 345 lat2: -2.127739360728
    test 3104 line 345 lon2: 38.604245449983
    test 3105 line 345 azi2: 118.657849063154
    test 3106 line 346 lat: 37.188367
    test 3107 line 346 lon: 90.865255
    test 3108 line 346 fb: 104.826548
    test 3109 line 346 lat2: 37.188366752551
    test 3110 line 346 lon2: 90.865255121714
    test 3111 line 346 azi2: 104.826548310924
    test 3112 line 346 lat2: 37.188366752551
    test 3113 line 346 lon2: 90.865255121714
    test 3114 line 346 azi2: 104.826548310924
    test 3115 line 347 lat: 46.019257
    test 3116 line 347 lon: 20.402591
    test 3117 line 347 fb: 31.068588
    test 3118 line 347 lat2: 46.019256998097
    test 3119 line 347 lon2: 20.402590686048
    test 3120 line 347 azi2: 31.068587858373
    test 3121 line 347 lat2: 46.019256998097
    test 3122 line 347 lon2: 20.402590686048
    test 3123 line 347 azi2: 31.068587858373
    test 3124 line 348 lat: 9.023356
    test 3125 line 348 lon: 106.678645
    test 3126 line 348 fb: 141.375490
    test 3127 line 348 lat2: 9.023355647006
    test 3128 line 348 lon2: 106.678645473545
    test 3129 line 348 azi2: 141.375490245645
    test 3130 line 348 lat2: 9.023355647007  FAILED, KNOWN, expected 9.023355647006
    test 3131 line 348 lon2: 106.678645473545
    test 3132 line 348 azi2: 141.375490245645
    test 3133 line 349 lat: -1.321473
    test 3134 line 349 lon: 67.418879
    test 3135 line 349 fb: 105.590913
    test 3136 line 349 lat2: -1.321473235187
    test 3137 line 349 lon2: 67.418878731595
    test 3138 line 349 azi2: 105.590912857546
    test 3139 line 349 lat2: -1.321473235187
    test 3140 line 349 lon2: 67.418878731595
    test 3141 line 349 azi2: 105.590912857546
    test 3142 line 350 lat: 7.459339
    test 3143 line 350 lon: 30.150648
    test 3144 line 350 fb: 109.667752
    test 3145 line 350 lat2: 7.459338626177
    test 3146 line 350 lon2: 30.150648477470
    test 3147 line 350 azi2: 109.667751753912
    test 3148 line 350 lat2: 7.459338626177
    test 3149 line 350 lon2: 30.150648477470
    test 3150 line 350 azi2: 109.667751753912
    test 3151 line 351 lat: 16.344755
    test 3152 line 351 lon: 146.829160
    test 3153 line 351 fb: 128.666192
    test 3154 line 351 lat2: 16.344755038185
    test 3155 line 351 lon2: 146.829159972334
    test 3156 line 351 azi2: 128.666191953616
    test 3157 line 351 lat2: 16.344755038185
    test 3158 line 351 lon2: 146.829159972334
    test 3159 line 351 azi2: 128.666191953616
    test 3160 line 352 lat: -55.785670
    test 3161 line 352 lon: 158.086173
    test 3162 line 352 fb: 33.903277
    test 3163 line 352 lat2: -55.785670347270
    test 3164 line 352 lon2: 158.086173376809
    test 3165 line 352 azi2: 33.903276835071
    test 3166 line 352 lat2: -55.785670347270
    test 3167 line 352 lon2: 158.086173376809
    test 3168 line 352 azi2: 33.903276835071
    test 3169 line 353 lat: -74.409604
    test 3170 line 353 lon: 111.280935
    test 3171 line 353 fb: 78.510830
    test 3172 line 353 lat2: -74.409603561050
    test 3173 line 353 lon2: 111.280934985965
    test 3174 line 353 azi2: 78.510830028461
    test 3175 line 353 lat2: -74.409603561050
    test 3176 line 353 lon2: 111.280934985965
    test 3177 line 353 azi2: 78.510830028461
    test 3178 line 354 lat: 9.922204
    test 3179 line 354 lon: 138.538334
    test 3180 line 354 fb: 125.268473
    test 3181 line 354 lat2: 9.922203731557
    test 3182 line 354 lon2: 138.538333703571
    test 3183 line 354 azi2: 125.268473410634
    test 3184 line 354 lat2: 9.922203731557
    test 3185 line 354 lon2: 138.538333703571
    test 3186 line 354 azi2: 125.268473410634
    test 3187 line 355 lat: -27.082389
    test 3188 line 355 lon: 91.425844
    test 3189 line 355 fb: 153.267616
    test 3190 line 355 lat2: -27.082389068807
    test 3191 line 355 lon2: 91.425843733185
    test 3192 line 355 azi2: 153.267616113653
    test 3193 line 355 lat2: -27.082389068808  FAILED, KNOWN, expected -27.082389068807
    test 3194 line 355 lon2: 91.425843733185
    test 3195 line 355 azi2: 153.267616113653
    test 3196 line 356 lat: 14.627508
    test 3197 line 356 lon: 74.629605
    test 3198 line 356 fb: 159.825211
    test 3199 line 356 lat2: 14.627507744773
    test 3200 line 356 lon2: 74.629604673488
    test 3201 line 356 azi2: 159.825210987464
    test 3202 line 356 lat2: 14.627507744773
    test 3203 line 356 lon2: 74.629604673488
    test 3204 line 356 azi2: 159.825210987464
    test 3205 line 357 lat: 46.941087
    test 3206 line 357 lon: 18.833436
    test 3207 line 357 fb: 63.924917
    test 3208 line 357 lat2: 46.941086934169
    test 3209 line 357 lon2: 18.833435620675
    test 3210 line 357 azi2: 63.924916745148
    test 3211 line 357 lat2: 46.941086934168  FAILED, KNOWN, expected 46.941086934169
    test 3212 line 357 lon2: 18.833435620675
    test 3213 line 357 azi2: 63.924916745148
    test 3214 line 358 lat: 42.371666
    test 3215 line 358 lon: 126.270074
    test 3216 line 358 fb: 117.352107
    test 3217 line 358 lat2: 42.371665615782
    test 3218 line 358 lon2: 126.270074354353
    test 3219 line 358 azi2: 117.352106840236
    test 3220 line 358 lat2: 42.371665615782
    test 3221 line 358 lon2: 126.270074354353
    test 3222 line 358 azi2: 117.352106840236
    test 3223 line 359 lat: 60.888684
    test 3224 line 359 lon: 106.363657
    test 3225 line 359 fb: 108.973271
    test 3226 line 359 lat2: 60.888683732870
    test 3227 line 359 lon2: 106.363656697522
    test 3228 line 359 azi2: 108.973271101790
    test 3229 line 359 lat2: 60.888683732870
    test 3230 line 359 lon2: 106.363656697522
    test 3231 line 359 azi2: 108.973271101790
    test 3232 line 360 lat: 53.972090
    test 3233 line 360 lon: 136.000658
    test 3234 line 360 fb: 138.361589
    test 3235 line 360 lat2: 53.972089572795
    test 3236 line 360 lon2: 136.000657911062
    test 3237 line 360 azi2: 138.361588598638
    test 3238 line 360 lat2: 53.972089572795
    test 3239 line 360 lon2: 136.000657911062
    test 3240 line 360 azi2: 138.361588598638
    test 3241 line 361 lat: 47.850867
    test 3242 line 361 lon: 25.277934
    test 3243 line 361 fb: 71.284668
    test 3244 line 361 lat2: 47.850866585267
    test 3245 line 361 lon2: 25.277933660114
    test 3246 line 361 azi2: 71.284667717290
    test 3247 line 361 lat2: 47.850866585267
    test 3248 line 361 lon2: 25.277933660114
    test 3249 line 361 azi2: 71.284667717290
    test 3250 line 362 lat: 64.280614
    test 3251 line 362 lon: 16.447697
    test 3252 line 362 fb: 35.692750
    test 3253 line 362 lat2: 64.280614171157
    test 3254 line 362 lon2: 16.447696559380
    test 3255 line 362 azi2: 35.692750218622
    test 3256 line 362 lat2: 64.280614171157
    test 3257 line 362 lon2: 16.447696559380
    test 3258 line 362 azi2: 35.692750218622
    test 3259 line 363 lat: -3.339044
    test 3260 line 363 lon: 91.646260
    test 3261 line 363 fb: 95.928001
    test 3262 line 363 lat2: -3.339044133285
    test 3263 line 363 lon2: 91.646260438368
    test 3264 line 363 azi2: 95.928000721064
    test 3265 line 363 lat2: -3.339044133285
    test 3266 line 363 lon2: 91.646260438368
    test 3267 line 363 azi2: 95.928000721064
    test 3268 line 364 lat: -46.029875
    test 3269 line 364 lon: 30.599197
    test 3270 line 364 fb: 146.810525
    test 3271 line 364 lat2: -46.029874698950
    test 3272 line 364 lon2: 30.599196661458
    test 3273 line 364 azi2: 146.810525207719
    test 3274 line 364 lat2: -46.029874698950
    test 3275 line 364 lon2: 30.599196661458
    test 3276 line 364 azi2: 146.810525207719
    test 3277 line 365 lat: 25.605076
    test 3278 line 365 lon: 14.382003
    test 3279 line 365 fb: 116.566847
    test 3280 line 365 lat2: 25.605076391429
    test 3281 line 365 lon2: 14.382002787798
    test 3282 line 365 azi2: 116.566847403824
    test 3283 line 365 lat2: 25.605076391429
    test 3284 line 365 lon2: 14.382002787798
    test 3285 line 365 azi2: 116.566847403824
    test 3286 line 366 lat: -15.052413
    test 3287 line 366 lon: 150.673460
    test 3288 line 366 fb: 64.906721
    test 3289 line 366 lat2: -15.052412502534
    test 3290 line 366 lon2: 150.673460237577
    test 3291 line 366 azi2: 64.906720897603
    test 3292 line 366 lat2: -15.052412502534
    test 3293 line 366 lon2: 150.673460237577
    test 3294 line 366 azi2: 64.906720897603
    test 3295 line 367 lat: -24.631882
    test 3296 line 367 lon: 170.403348
    test 3297 line 367 fb: 38.497784
    test 3298 line 367 lat2: -24.631881773331
    test 3299 line 367 lon2: 170.403348095216
    test 3300 line 367 azi2: 38.497783925432
    test 3301 line 367 lat2: -24.631881773331
    test 3302 line 367 lon2: 170.403348095216
    test 3303 line 367 azi2: 38.497783925432
    test 3304 line 368 lat: 84.347730
    test 3305 line 368 lon: 37.352130
    test 3306 line 368 fb: 38.599794
    test 3307 line 368 lat2: 84.347730272741
    test 3308 line 368 lon2: 37.352130023033
    test 3309 line 368 azi2: 38.599794179850
    test 3310 line 368 lat2: 84.347730272741
    test 3311 line 368 lon2: 37.352130023033
    test 3312 line 368 azi2: 38.599794179850
    test 3313 line 369 lat: 11.680773
    test 3314 line 369 lon: 170.552617
    test 3315 line 369 fb: 174.460436
    test 3316 line 369 lat2: 11.680772997529
    test 3317 line 369 lon2: 170.552617119135
    test 3318 line 369 azi2: 174.460435573783
    test 3319 line 369 lat2: 11.680772997529
    test 3320 line 369 lon2: 170.552617119135
    test 3321 line 369 azi2: 174.460435573783
    test 3322 line 370 lat: -4.129058
    test 3323 line 370 lon: 136.743627
    test 3324 line 370 fb: 142.147604
    test 3325 line 370 lat2: -4.129057873299
    test 3326 line 370 lon2: 136.743626644380
    test 3327 line 370 azi2: 142.147603954035
    test 3328 line 370 lat2: -4.129057873299
    test 3329 line 370 lon2: 136.743626644380
    test 3330 line 370 azi2: 142.147603954035
    test 3331 line 371 lat: 22.191782
    test 3332 line 371 lon: 164.962392
    test 3333 line 371 fb: 163.266967
    test 3334 line 371 lat2: 22.191782097783
    test 3335 line 371 lon2: 164.962391587580
    test 3336 line 371 azi2: 163.266967353376
    test 3337 line 371 lat2: 22.191782097783
    test 3338 line 371 lon2: 164.962391587580
    test 3339 line 371 azi2: 163.266967353376
    test 3340 line 372 lat: -20.517212
    test 3341 line 372 lon: 128.116444
    test 3342 line 372 fb: 110.769757
    test 3343 line 372 lat2: -20.517212185628
    test 3344 line 372 lon2: 128.116443546305
    test 3345 line 372 azi2: 110.769757212730
    test 3346 line 372 lat2: -20.517212185628
    test 3347 line 372 lon2: 128.116443546305
    test 3348 line 372 azi2: 110.769757212730
    test 3349 line 373 lat: -71.269219
    test 3350 line 373 lon: 117.744329
    test 3351 line 373 fb: 81.341006
    test 3352 line 373 lat2: -71.269218648518
    test 3353 line 373 lon2: 117.744328537214
    test 3354 line 373 azi2: 81.341005509003
    test 3355 line 373 lat2: -71.269218648518
    test 3356 line 373 lon2: 117.744328537214
    test 3357 line 373 azi2: 81.341005509003
    test 3358 line 374 lat: -28.381893
    test 3359 line 374 lon: 4.526029
    test 3360 line 374 fb: 176.348678
    test 3361 line 374 lat2: -28.381892766057
    test 3362 line 374 lon2: 4.526028955177
    test 3363 line 374 azi2: 176.348678015377
    test 3364 line 374 lat2: -28.381892766057
    test 3365 line 374 lon2: 4.526028955177
    test 3366 line 374 azi2: 176.348678015377
    test 3367 line 375 lat: -28.786090
    test 3368 line 375 lon: 25.937634
    test 3369 line 375 fb: 147.973102
    test 3370 line 375 lat2: -28.786089606638
    test 3371 line 375 lon2: 25.937634058027
    test 3372 line 375 azi2: 147.973102126478
    test 3373 line 375 lat2: -28.786089606638
    test 3374 line 375 lon2: 25.937634058027
    test 3375 line 375 azi2: 147.973102126478
    test 3376 line 376 lat: -37.872672
    test 3377 line 376 lon: 116.904193
    test 3378 line 376 fb: 88.568636
    test 3379 line 376 lat2: -37.872671755645
    test 3380 line 376 lon2: 116.904192578457
    test 3381 line 376 azi2: 88.568636418662
    test 3382 line 376 lat2: -37.872671755645
    test 3383 line 376 lon2: 116.904192578457
    test 3384 line 376 azi2: 88.568636418662
    test 3385 line 377 lat: -26.321447
    test 3386 line 377 lon: 85.206987
    test 3387 line 377 fb: 112.408109
    test 3388 line 377 lat2: -26.321446841940
    test 3389 line 377 lon2: 85.206986852002  FAILED, KNOWN, expected 85.206986852001
    test 3390 line 377 azi2: 112.408108683681
    test 3391 line 377 lat2: -26.321446841940
    test 3392 line 377 lon2: 85.206986852001
    test 3393 line 377 azi2: 112.408108683681
    test 3394 line 378 lat: -54.824260
    test 3395 line 378 lon: 156.561574
    test 3396 line 378 fb: 45.534810
    test 3397 line 378 lat2: -54.824260467184
    test 3398 line 378 lon2: 156.561573965853
    test 3399 line 378 azi2: 45.534810497878
    test 3400 line 378 lat2: -54.824260467184
    test 3401 line 378 lon2: 156.561573965853
    test 3402 line 378 azi2: 45.534810497879  FAILED, KNOWN, expected 45.534810497878
    test 3403 line 379 lat: -16.423550
    test 3404 line 379 lon: 36.685134
    test 3405 line 379 fb: 149.426790
    test 3406 line 379 lat2: -16.423550298805
    test 3407 line 379 lon2: 36.685133578511
    test 3408 line 379 azi2: 149.426789575292
    test 3409 line 379 lat2: -16.423550298805
    test 3410 line 379 lon2: 36.685133578511
    test 3411 line 379 azi2: 149.426789575292
    test 3412 line 380 lat: -16.806591
    test 3413 line 380 lon: 149.738610
    test 3414 line 380 fb: 108.898472
    test 3415 line 380 lat2: -16.806590952462
    test 3416 line 380 lon2: 149.738610286185
    test 3417 line 380 azi2: 108.898472198507
    test 3418 line 380 lat2: -16.806590952462
    test 3419 line 380 lon2: 149.738610286185
    test 3420 line 380 azi2: 108.898472198507
    test 3421 line 381 lat: 61.200095
    test 3422 line 381 lon: 179.666196
    test 3423 line 381 fb: 179.746894
    test 3424 line 381 lat2: 61.200095175201
    test 3425 line 381 lon2: 179.666196014679
    test 3426 line 381 azi2: 179.746893753530
    test 3427 line 381 lat2: 61.200095175201
    test 3428 line 381 lon2: 179.666196014679
    test 3429 line 381 azi2: 179.746893753530
    test 3430 line 382 lat: 66.474418
    test 3431 line 382 lon: 1.552183
    test 3432 line 382 fb: 2.088868
    test 3433 line 382 lat2: 66.474418401288
    test 3434 line 382 lon2: 1.552183188407
    test 3435 line 382 azi2: 2.088868324926
    test 3436 line 382 lat2: 66.474418401288
    test 3437 line 382 lon2: 1.552183188407
    test 3438 line 382 azi2: 2.088868324926
    test 3439 line 383 lat: -75.177220
    test 3440 line 383 lon: 158.741597
    test 3441 line 383 fb: 24.127094
    test 3442 line 383 lat2: -75.177219719926
    test 3443 line 383 lon2: 158.741596988185
    test 3444 line 383 azi2: 24.127093846134
    test 3445 line 383 lat2: -75.177219719926
    test 3446 line 383 lon2: 158.741596988185
    test 3447 line 383 azi2: 24.127093846134
    test 3448 line 384 lat: 43.592977
    test 3449 line 384 lon: 90.684526
    test 3450 line 384 fb: 91.539242
    test 3451 line 384 lat2: 43.592976578444
    test 3452 line 384 lon2: 90.684525887486
    test 3453 line 384 azi2: 91.539242394540
    test 3454 line 384 lat2: 43.592976578444
    test 3455 line 384 lon2: 90.684525887486
    test 3456 line 384 azi2: 91.539242394540
    test 3457 line 385 lat: -5.075415
    test 3458 line 385 lon: 101.127103
    test 3459 line 385 fb: 107.948022
    test 3460 line 385 lat2: -5.075415464229
    test 3461 line 385 lon2: 101.127103351067
    test 3462 line 385 azi2: 107.948021613622
    test 3463 line 385 lat2: -5.075415464229
    test 3464 line 385 lon2: 101.127103351067
    test 3465 line 385 azi2: 107.948021613622
    test 3466 line 386 lat: 50.406166
    test 3467 line 386 lon: 135.501939
    test 3468 line 386 fb: 162.003144
    test 3469 line 386 lat2: 50.406165949083
    test 3470 line 386 lon2: 135.501938931444
    test 3471 line 386 azi2: 162.003144394969
    test 3472 line 386 lat2: 50.406165949083
    test 3473 line 386 lon2: 135.501938931444
    test 3474 line 386 azi2: 162.003144394969
    test 3475 line 387 lat: -17.207733
    test 3476 line 387 lon: 43.634692
    test 3477 line 387 fb: 136.506793
    test 3478 line 387 lat2: -17.207732564306
    test 3479 line 387 lon2: 43.634692466982
    test 3480 line 387 azi2: 136.506792603897
    test 3481 line 387 lat2: -17.207732564306
    test 3482 line 387 lon2: 43.634692466982
    test 3483 line 387 azi2: 136.506792603897
    test 3484 line 388 lat: -28.917723
    test 3485 line 388 lon: 163.486470
    test 3486 line 388 fb: 38.990274
    test 3487 line 388 lat2: -28.917723347931
    test 3488 line 388 lon2: 163.486470248682
    test 3489 line 388 azi2: 38.990273918754
    test 3490 line 388 lat2: -28.917723347931
    test 3491 line 388 lon2: 163.486470248682
    test 3492 line 388 azi2: 38.990273918754
    test 3493 line 389 lat: -32.592414
    test 3494 line 389 lon: 76.048812
    test 3495 line 389 fb: 98.024249
    test 3496 line 389 lat2: -32.592414472935
    test 3497 line 389 lon2: 76.048812057267
    test 3498 line 389 azi2: 98.024248734062
    test 3499 line 389 lat2: -32.592414472935
    test 3500 line 389 lon2: 76.048812057267
    test 3501 line 389 azi2: 98.024248734062
    test 3502 line 390 lat: 50.602735
    test 3503 line 390 lon: 49.792893
    test 3504 line 390 fb: 110.500761
    test 3505 line 390 lat2: 50.602735331532
    test 3506 line 390 lon2: 49.792893095354
    test 3507 line 390 azi2: 110.500760610103
    test 3508 line 390 lat2: 50.602735331532
    test 3509 line 390 lon2: 49.792893095354
    test 3510 line 390 azi2: 110.500760610103
    test 3511 line 391 lat: -4.912232
    test 3512 line 391 lon: 142.681744
    test 3513 line 391 fb: 119.428358
    test 3514 line 391 lat2: -4.912231564840
    test 3515 line 391 lon2: 142.681743549937
    test 3516 line 391 azi2: 119.428358444443
    test 3517 line 391 lat2: -4.912231564840
    test 3518 line 391 lon2: 142.681743549937
    test 3519 line 391 azi2: 119.428358444443
    test 3520 line 392 lat: -45.213515
    test 3521 line 392 lon: 131.987859
    test 3522 line 392 fb: 96.014100
    test 3523 line 392 lat2: -45.213514932524
    test 3524 line 392 lon2: 131.987859404857
    test 3525 line 392 azi2: 96.014100177112
    test 3526 line 392 lat2: -45.213514932524
    test 3527 line 392 lon2: 131.987859404857
    test 3528 line 392 azi2: 96.014100177112
    test 3529 line 393 lat: -27.151096
    test 3530 line 393 lon: 127.729463
    test 3531 line 393 fb: 85.960623
    test 3532 line 393 lat2: -27.151095883523
    test 3533 line 393 lon2: 127.729463064736
    test 3534 line 393 azi2: 85.960623495334
    test 3535 line 393 lat2: -27.151095883523
    test 3536 line 393 lon2: 127.729463064736
    test 3537 line 393 azi2: 85.960623495334
    test 3538 line 394 lat: 8.000358
    test 3539 line 394 lon: 144.233747
    test 3540 line 394 fb: 142.364017
    test 3541 line 394 lat2: 8.000357843774
    test 3542 line 394 lon2: 144.233746766535
    test 3543 line 394 azi2: 142.364016793767
    test 3544 line 394 lat2: 8.000357843774
    test 3545 line 394 lon2: 144.233746766535
    test 3546 line 394 azi2: 142.364016793767
    test 3547 line 395 lat: -6.431774
    test 3548 line 395 lon: 170.549196
    test 3549 line 395 fb: 122.180851
    test 3550 line 395 lat2: -6.431773707290
    test 3551 line 395 lon2: 170.549196384306
    test 3552 line 395 azi2: 122.180850600243
    test 3553 line 395 lat2: -6.431773707290
    test 3554 line 395 lon2: 170.549196384306
    test 3555 line 395 azi2: 122.180850600243
    test 3556 line 396 lat: 62.834146
    test 3557 line 396 lon: 171.218298
    test 3558 line 396 fb: 175.117433
    test 3559 line 396 lat2: 62.834146216572
    test 3560 line 396 lon2: 171.218297548713
    test 3561 line 396 azi2: 175.117432600362
    test 3562 line 396 lat2: 62.834146216572
    test 3563 line 396 lon2: 171.218297548713
    test 3564 line 396 azi2: 175.117432600362
    test 3565 line 397 lat: 22.902814
    test 3566 line 397 lon: 70.233438
    test 3567 line 397 fb: 120.935912
    test 3568 line 397 lat2: 22.902813652262
    test 3569 line 397 lon2: 70.233438162142
    test 3570 line 397 azi2: 120.935911762169
    test 3571 line 397 lat2: 22.902813652262
    test 3572 line 397 lon2: 70.233438162142
    test 3573 line 397 azi2: 120.935911762169
    test 3574 line 398 lat: 22.584853
    test 3575 line 398 lon: 31.616865
    test 3576 line 398 fb: 107.124038
    test 3577 line 398 lat2: 22.584853282541
    test 3578 line 398 lon2: 31.616864803984
    test 3579 line 398 azi2: 107.124038156545
    test 3580 line 398 lat2: 22.584853282541
    test 3581 line 398 lon2: 31.616864803984
    test 3582 line 398 azi2: 107.124038156545
    test 3583 line 399 lat: 31.269173
    test 3584 line 399 lon: 65.399306
    test 3585 line 399 fb: 151.892600
    test 3586 line 399 lat2: 31.269173344204
    test 3587 line 399 lon2: 65.399305777763
    test 3588 line 399 azi2: 151.892599739667
    test 3589 line 399 lat2: 31.269173344204
    test 3590 line 399 lon2: 65.399305777763
    test 3591 line 399 azi2: 151.892599739667
    test 3592 line 400 lat: 35.519614
    test 3593 line 400 lon: 143.165122
    test 3594 line 400 fb: 161.479891
    test 3595 line 400 lat2: 35.519613515115
    test 3596 line 400 lon2: 143.165121509798
    test 3597 line 400 azi2: 161.479891246031
    test 3598 line 400 lat2: 35.519613515115
    test 3599 line 400 lon2: 143.165121509798
    test 3600 line 400 azi2: 161.479891246031
    test 3601 line 401 lat: -53.741922
    test 3602 line 401 lon: 67.121402
    test 3603 line 401 fb: 130.871188
    test 3604 line 401 lat2: -53.741921506580
    test 3605 line 401 lon2: 67.121402135047
    test 3606 line 401 azi2: 130.871188003209
    test 3607 line 401 lat2: -53.741921506580
    test 3608 line 401 lon2: 67.121402135047
    test 3609 line 401 azi2: 130.871188003209
    test 3610 line 402 lat: 9.046227
    test 3611 line 402 lon: 35.933737
    test 3612 line 402 fb: 175.770789
    test 3613 line 402 lat2: 9.046227267580
    test 3614 line 402 lon2: 35.933736921417
    test 3615 line 402 azi2: 175.770788535406
    test 3616 line 402 lat2: 9.046227267580
    test 3617 line 402 lon2: 35.933736921417
    test 3618 line 402 azi2: 175.770788535406
    test 3619 line 403 lat: 75.917034
    test 3620 line 403 lon: 125.150808
    test 3621 line 403 fb: 135.354467
    test 3622 line 403 lat2: 75.917034235438
    test 3623 line 403 lon2: 125.150808062636
    test 3624 line 403 azi2: 135.354466840051
    test 3625 line 403 lat2: 75.917034235438
    test 3626 line 403 lon2: 125.150808062636
    test 3627 line 403 azi2: 135.354466840051
    test 3628 line 404 lat: -39.724826
    test 3629 line 404 lon: 77.372087
    test 3630 line 404 fb: 111.852577
    test 3631 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3632 line 404 lon2: 77.372086855267
    test 3633 line 404 azi2: 111.852577362108
    test 3634 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3635 line 404 lon2: 77.372086855267
    test 3636 line 404 azi2: 111.852577362108
    test 3637 line 405 lat: 3.917212
    test 3638 line 405 lon: 142.621752
    test 3639 line 405 fb: 124.176952
    test 3640 line 405 lat2: 3.917212154431
    test 3641 line 405 lon2: 142.621751764236
    test 3642 line 405 azi2: 124.176952499321
    test 3643 line 405 lat2: 3.917212154431
    test 3644 line 405 lon2: 142.621751764236
    test 3645 line 405 azi2: 124.176952499321
    test 3646 line 406 lat: 60.230364
    test 3647 line 406 lon: 26.245689
    test 3648 line 406 fb: 48.509486
    test 3649 line 406 lat2: 60.230364486607
    test 3650 line 406 lon2: 26.245688508507
    test 3651 line 406 azi2: 48.509486474608
    test 3652 line 406 lat2: 60.230364486607
    test 3653 line 406 lon2: 26.245688508507
    test 3654 line 406 azi2: 48.509486474608
    test 3655 line 407 lat: 29.597322
    test 3656 line 407 lon: 29.129808
    test 3657 line 407 fb: 79.288539
    test 3658 line 407 lat2: 29.597322070518
    test 3659 line 407 lon2: 29.129807944898
    test 3660 line 407 azi2: 79.288538667829
    test 3661 line 407 lat2: 29.597322070518
    test 3662 line 407 lon2: 29.129807944898
    test 3663 line 407 azi2: 79.288538667829
    test 3664 line 408 lat: -62.913760
    test 3665 line 408 lon: 14.845859
    test 3666 line 408 fb: 165.794536
    test 3667 line 408 lat2: -62.913759669564
    test 3668 line 408 lon2: 14.845859018930
    test 3669 line 408 azi2: 165.794535940950
    test 3670 line 408 lat2: -62.913759669564
    test 3671 line 408 lon2: 14.845859018930
    test 3672 line 408 azi2: 165.794535940950
    test 3673 line 409 lat: 15.360446
    test 3674 line 409 lon: 161.450680
    test 3675 line 409 fb: 164.457024
    test 3676 line 409 lat2: 15.360445685187
    test 3677 line 409 lon2: 161.450680426049
    test 3678 line 409 azi2: 164.457024354600
    test 3679 line 409 lat2: 15.360445685187
    test 3680 line 409 lon2: 161.450680426049
    test 3681 line 409 azi2: 164.457024354600
    test 3682 line 410 lat: -58.330109
    test 3683 line 410 lon: 17.628134
    test 3684 line 410 fb: 161.349788
    test 3685 line 410 lat2: -58.330108507597
    test 3686 line 410 lon2: 17.628133627705
    test 3687 line 410 azi2: 161.349788081184
    test 3688 line 410 lat2: -58.330108507597
    test 3689 line 410 lon2: 17.628133627705
    test 3690 line 410 azi2: 161.349788081184
    test 3691 line 411 lat: -68.514277
    test 3692 line 411 lon: 19.958792
    test 3693 line 411 fb: 162.262811
    test 3694 line 411 lat2: -68.514276940652
    test 3695 line 411 lon2: 19.958792438281
    test 3696 line 411 azi2: 162.262811488702
    test 3697 line 411 lat2: -68.514276940652
    test 3698 line 411 lon2: 19.958792438281
    test 3699 line 411 azi2: 162.262811488702
    test 3700 line 412 lat: -23.686766
    test 3701 line 412 lon: 77.544158
    test 3702 line 412 fb: 97.517041
    test 3703 line 412 lat2: -23.686765736999
    test 3704 line 412 lon2: 77.544158137101
    test 3705 line 412 azi2: 97.517041033585
    test 3706 line 412 lat2: -23.686765736999
    test 3707 line 412 lon2: 77.544158137101
    test 3708 line 412 azi2: 97.517041033585
    test 3709 line 413 lat: -50.843575
    test 3710 line 413 lon: 118.404202
    test 3711 line 413 fb: 75.928950
    test 3712 line 413 lat2: -50.843574559525
    test 3713 line 413 lon2: 118.404202153051
    test 3714 line 413 azi2: 75.928950296488
    test 3715 line 413 lat2: -50.843574559525
    test 3716 line 413 lon2: 118.404202153051
    test 3717 line 413 azi2: 75.928950296488
    test 3718 line 414 lat: 44.438742
    test 3719 line 414 lon: 152.028260
    test 3720 line 414 fb: 156.092336
    test 3721 line 414 lat2: 44.438741945021
    test 3722 line 414 lon2: 152.028260148130
    test 3723 line 414 azi2: 156.092336139519
    test 3724 line 414 lat2: 44.438741945021
    test 3725 line 414 lon2: 152.028260148130
    test 3726 line 414 azi2: 156.092336139519
    test 3727 line 415 lat: 33.820395
    test 3728 line 415 lon: 178.008342
    test 3729 line 415 fb: 177.679586
    test 3730 line 415 lat2: 33.820395378014
    test 3731 line 415 lon2: 178.008341908011
    test 3732 line 415 azi2: 177.679585823345
    test 3733 line 415 lat2: 33.820395378014
    test 3734 line 415 lon2: 178.008341908011
    test 3735 line 415 azi2: 177.679585823345
    test 3736 line 416 lat: 27.506735
    test 3737 line 416 lon: 153.242452
    test 3738 line 416 fb: 150.262824
    test 3739 line 416 lat2: 27.506735286152
    test 3740 line 416 lon2: 153.242452449881
    test 3741 line 416 azi2: 150.262824421351
    test 3742 line 416 lat2: 27.506735286152
    test 3743 line 416 lon2: 153.242452449881
    test 3744 line 416 azi2: 150.262824421351
    test 3745 line 417 lat: -31.250437
    test 3746 line 417 lon: 179.014499
    test 3747 line 417 fb: 178.103046
    test 3748 line 417 lat2: -31.250436707468
    test 3749 line 417 lon2: 179.014498940190
    test 3750 line 417 azi2: 178.103045898455
    test 3751 line 417 lat2: -31.250436707468
    test 3752 line 417 lon2: 179.014498940190
    test 3753 line 417 azi2: 178.103045898455
    test 3754 line 418 lat: 40.341542
    test 3755 line 418 lon: 109.605984
    test 3756 line 418 fb: 105.401958
    test 3757 line 418 lat2: 40.341542234586
    test 3758 line 418 lon2: 109.605984313079
    test 3759 line 418 azi2: 105.401958406556
    test 3760 line 418 lat2: 40.341542234586
    test 3761 line 418 lon2: 109.605984313079
    test 3762 line 418 azi2: 105.401958406556
    test 3763 line 419 lat: 48.318632
    test 3764 line 419 lon: 92.282799
    test 3765 line 419 fb: 111.987482
    test 3766 line 419 lat2: 48.318632112439
    test 3767 line 419 lon2: 92.282799489208
    test 3768 line 419 azi2: 111.987482299261
    test 3769 line 419 lat2: 48.318632112439
    test 3770 line 419 lon2: 92.282799489208
    test 3771 line 419 azi2: 111.987482299261
    test 3772 line 420 lat: 0.675299
    test 3773 line 420 lon: 6.789301
    test 3774 line 420 fb: 164.921926
    test 3775 line 420 lat2: 0.675299289459
    test 3776 line 420 lon2: 6.789300798072
    test 3777 line 420 azi2: 164.921926385405
    test 3778 line 420 lat2: 0.675299289459
    test 3779 line 420 lon2: 6.789300798072
    test 3780 line 420 azi2: 164.921926385405
    test 3781 line 421 lat: 33.232812
    test 3782 line 421 lon: 170.163205
    test 3783 line 421 fb: 175.445424
    test 3784 line 421 lat2: 33.232811536179
    test 3785 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3786 line 421 azi2: 175.445424087910
    test 3787 line 421 lat2: 33.232811536179
    test 3788 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3789 line 421 azi2: 175.445424087910
    test 3790 line 422 lat: 51.425532
    test 3791 line 422 lon: 167.128188
    test 3792 line 422 fb: 169.431307
    test 3793 line 422 lat2: 51.425532151818
    test 3794 line 422 lon2: 167.128188073883
    test 3795 line 422 azi2: 169.431306547043
    test 3796 line 422 lat2: 51.425532151818
    test 3797 line 422 lon2: 167.128188073883
    test 3798 line 422 azi2: 169.431306547043
    test 3799 line 423 lat: 72.043795
    test 3800 line 423 lon: 23.320161
    test 3801 line 423 fb: 85.002463
    test 3802 line 423 lat2: 72.043794732818
    test 3803 line 423 lon2: 23.320160820556
    test 3804 line 423 azi2: 85.002463342037
    test 3805 line 423 lat2: 72.043794732818
    test 3806 line 423 lon2: 23.320160820556
    test 3807 line 423 azi2: 85.002463342037
    test 3808 line 424 lat: 55.279253
    test 3809 line 424 lon: 148.483684
    test 3810 line 424 fb: 155.614243
    test 3811 line 424 lat2: 55.279252586695
    test 3812 line 424 lon2: 148.483684405588
    test 3813 line 424 azi2: 155.614243012977
    test 3814 line 424 lat2: 55.279252586695
    test 3815 line 424 lon2: 148.483684405588
    test 3816 line 424 azi2: 155.614243012977
    test 3817 line 425 lat: 50.054601
    test 3818 line 425 lon: 43.609545
    test 3819 line 425 fb: 100.758451
    test 3820 line 425 lat2: 50.054601019930
    test 3821 line 425 lon2: 43.609545475731
    test 3822 line 425 azi2: 100.758450815354
    test 3823 line 425 lat2: 50.054601019930
    test 3824 line 425 lon2: 43.609545475731
    test 3825 line 425 azi2: 100.758450815354
    test 3826 line 426 lat: 31.194436
    test 3827 line 426 lon: 31.458476
    test 3828 line 426 fb: 92.204244
    test 3829 line 426 lat2: 31.194436445411
    test 3830 line 426 lon2: 31.458476146984
    test 3831 line 426 azi2: 92.204244235305
    test 3832 line 426 lat2: 31.194436445411
    test 3833 line 426 lon2: 31.458476146984
    test 3834 line 426 azi2: 92.204244235305
    test 3835 line 427 lat: 57.758262
    test 3836 line 427 lon: 164.499274
    test 3837 line 427 fb: 162.877999
    test 3838 line 427 lat2: 57.758262113137
    test 3839 line 427 lon2: 164.499274258053
    test 3840 line 427 azi2: 162.877999232894
    test 3841 line 427 lat2: 57.758262113137
    test 3842 line 427 lon2: 164.499274258053
    test 3843 line 427 azi2: 162.877999232894
    test 3844 line 428 lat: 27.006898
    test 3845 line 428 lon: 173.173812
    test 3846 line 428 fb: 177.878074
    test 3847 line 428 lat2: 27.006897756516
    test 3848 line 428 lon2: 173.173811781657
    test 3849 line 428 azi2: 177.878073603766
    test 3850 line 428 lat2: 27.006897756516
    test 3851 line 428 lon2: 173.173811781657
    test 3852 line 428 azi2: 177.878073603766
    test 3853 line 429 lat: -62.917581
    test 3854 line 429 lon: 18.990464
    test 3855 line 429 fb: 169.629168
    test 3856 line 429 lat2: -62.917580953804
    test 3857 line 429 lon2: 18.990464058493
    test 3858 line 429 azi2: 169.629168390979
    test 3859 line 429 lat2: -62.917580953804
    test 3860 line 429 lon2: 18.990464058493
    test 3861 line 429 azi2: 169.629168390979
    test 3862 line 430 lat: -43.128167
    test 3863 line 430 lon: 61.680974
    test 3864 line 430 fb: 135.269008
    test 3865 line 430 lat2: -43.128166633902
    test 3866 line 430 lon2: 61.680974170546
    test 3867 line 430 azi2: 135.269008366092
    test 3868 line 430 lat2: -43.128166633902
    test 3869 line 430 lon2: 61.680974170546
    test 3870 line 430 azi2: 135.269008366092
    test 3871 line 431 lat: -49.314417
    test 3872 line 431 lon: 55.826072
    test 3873 line 431 fb: 131.974574
    test 3874 line 431 lat2: -49.314417365795
    test 3875 line 431 lon2: 55.826071541563
    test 3876 line 431 azi2: 131.974573587520
    test 3877 line 431 lat2: -49.314417365795
    test 3878 line 431 lon2: 55.826071541563
    test 3879 line 431 azi2: 131.974573587520
    test 3880 line 432 lat: -24.322411
    test 3881 line 432 lon: 103.867391
    test 3882 line 432 fb: 139.458674
    test 3883 line 432 lat2: -24.322411486444
    test 3884 line 432 lon2: 103.867391100271
    test 3885 line 432 azi2: 139.458674175181
    test 3886 line 432 lat2: -24.322411486444
    test 3887 line 432 lon2: 103.867391100271
    test 3888 line 432 azi2: 139.458674175181
    test 3889 line 433 lat: -19.557319
    test 3890 line 433 lon: 81.358495
    test 3891 line 433 fb: 134.029610
    test 3892 line 433 lat2: -19.557318635270
    test 3893 line 433 lon2: 81.358494523202
    test 3894 line 433 azi2: 134.029609915778
    test 3895 line 433 lat2: -19.557318635270
    test 3896 line 433 lon2: 81.358494523202
    test 3897 line 433 azi2: 134.029609915778
    test 3898 line 434 lat: 7.830115
    test 3899 line 434 lon: 5.114172
    test 3900 line 434 fb: 175.025641
    test 3901 line 434 lat2: 7.830115253087
    test 3902 line 434 lon2: 5.114172330857
    test 3903 line 434 azi2: 175.025640902819
    test 3904 line 434 lat2: 7.830115253087
    test 3905 line 434 lon2: 5.114172330857
    test 3906 line 434 azi2: 175.025640902819
    test 3907 line 435 lat: -65.834623
    test 3908 line 435 lon: 41.772796
    test 3909 line 435 fb: 143.178050
    test 3910 line 435 lat2: -65.834622858584
    test 3911 line 435 lon2: 41.772796000787
    test 3912 line 435 azi2: 143.178050120951
    test 3913 line 435 lat2: -65.834622858584
    test 3914 line 435 lon2: 41.772796000787
    test 3915 line 435 azi2: 143.178050120951
    test 3916 line 436 lat: -7.997604
    test 3917 line 436 lon: 31.723397
    test 3918 line 436 fb: 153.896388
    test 3919 line 436 lat2: -7.997604143032
    test 3920 line 436 lon2: 31.723396618974
    test 3921 line 436 azi2: 153.896387549518
    test 3922 line 436 lat2: -7.997604143032
    test 3923 line 436 lon2: 31.723396618974
    test 3924 line 436 azi2: 153.896387549518
    test 3925 line 437 lat: -22.173130
    test 3926 line 437 lon: 164.896770
    test 3927 line 437 fb: 152.675597
    test 3928 line 437 lat2: -22.173129586699
    test 3929 line 437 lon2: 164.896770399383
    test 3930 line 437 azi2: 152.675596916021
    test 3931 line 437 lat2: -22.173129586699
    test 3932 line 437 lon2: 164.896770399383
    test 3933 line 437 azi2: 152.675596916021
    test 3934 line 438 lat: 35.085786
    test 3935 line 438 lon: 173.892271
    test 3936 line 438 fb: 171.931231
    test 3937 line 438 lat2: 35.085785799083
    test 3938 line 438 lon2: 173.892270533009
    test 3939 line 438 azi2: 171.931230872910
    test 3940 line 438 lat2: 35.085785799083
    test 3941 line 438 lon2: 173.892270533009
    test 3942 line 438 azi2: 171.931230872910
    test 3943 line 439 lat: -25.378865
    test 3944 line 439 lon: 2.197740
    test 3945 line 439 fb: 178.756775
    test 3946 line 439 lat2: -25.378865450268
    test 3947 line 439 lon2: 2.197739985587
    test 3948 line 439 azi2: 178.756775063163
    test 3949 line 439 lat2: -25.378865450268
    test 3950 line 439 lon2: 2.197739985587
    test 3951 line 439 azi2: 178.756775063163
    test 3952 line 440 lat: -13.782608
    test 3953 line 440 lon: 143.084799
    test 3954 line 440 fb: 141.818572
    test 3955 line 440 lat2: -13.782608118540
    test 3956 line 440 lon2: 143.084798779239
    test 3957 line 440 azi2: 141.818572490275
    test 3958 line 440 lat2: -13.782608118540
    test 3959 line 440 lon2: 143.084798779239
    test 3960 line 440 azi2: 141.818572490275
    test 3961 line 441 lat: -16.657589
    test 3962 line 441 lon: 100.829440
    test 3963 line 441 fb: 94.804409
    test 3964 line 441 lat2: -16.657588778768
    test 3965 line 441 lon2: 100.829440071396
    test 3966 line 441 azi2: 94.804408628371
    test 3967 line 441 lat2: -16.657588778768
    test 3968 line 441 lon2: 100.829440071396
    test 3969 line 441 azi2: 94.804408628371
    test 3970 line 442 lat: 23.629666
    test 3971 line 442 lon: 148.675531
    test 3972 line 442 fb: 169.091767
    test 3973 line 442 lat2: 23.629665922502
    test 3974 line 442 lon2: 148.675530832608
    test 3975 line 442 azi2: 169.091766635020
    test 3976 line 442 lat2: 23.629665922502
    test 3977 line 442 lon2: 148.675530832608
    test 3978 line 442 azi2: 169.091766635020
    test 3979 line 443 lat: 4.022724
    test 3980 line 443 lon: 161.803702
    test 3981 line 443 fb: 141.272785
    test 3982 line 443 lat2: 4.022724409294
    test 3983 line 443 lon2: 161.803702045621
    test 3984 line 443 azi2: 141.272784545678
    test 3985 line 443 lat2: 4.022724409294
    test 3986 line 443 lon2: 161.803702045621
    test 3987 line 443 azi2: 141.272784545678
    test 3988 line 444 lat: 13.280168
    test 3989 line 444 lon: 20.120413
    test 3990 line 444 fb: 158.170551
    test 3991 line 444 lat2: 13.280167579164
    test 3992 line 444 lon2: 20.120413486875
    test 3993 line 444 azi2: 158.170551379189
    test 3994 line 444 lat2: 13.280167579164
    test 3995 line 444 lon2: 20.120413486875
    test 3996 line 444 azi2: 158.170551379189
    test 3997 line 445 lat: -47.521450
    test 3998 line 445 lon: 150.549196
    test 3999 line 445 fb: 44.718791
    test 4000 line 445 lat2: -47.521449956879
    test 4001 line 445 lon2: 150.549196046351
    test 4002 line 445 azi2: 44.718791294775
    test 4003 line 445 lat2: -47.521449956879
    test 4004 line 445 lon2: 150.549196046351
    test 4005 line 445 azi2: 44.718791294775
    test 4006 line 446 lat: 17.790615
    test 4007 line 446 lon: 141.461006
    test 4008 line 446 fb: 115.746784
    test 4009 line 446 lat2: 17.790615163216
    test 4010 line 446 lon2: 141.461005551791
    test 4011 line 446 azi2: 115.746784352318
    test 4012 line 446 lat2: 17.790615163216
    test 4013 line 446 lon2: 141.461005551791
    test 4014 line 446 azi2: 115.746784352318
    test 4015 line 447 lat: -26.519374
    test 4016 line 447 lon: 98.067906
    test 4017 line 447 fb: 113.253929
    test 4018 line 447 lat2: -26.519374288386
    test 4019 line 447 lon2: 98.067906321718
    test 4020 line 447 azi2: 113.253928642653
    test 4021 line 447 lat2: -26.519374288386
    test 4022 line 447 lon2: 98.067906321718
    test 4023 line 447 azi2: 113.253928642653
    test 4024 line 448 lat: -12.401139
    test 4025 line 448 lon: 73.327970
    test 4026 line 448 fb: 124.879499
    test 4027 line 448 lat2: -12.401138571717
    test 4028 line 448 lon2: 73.327969848986
    test 4029 line 448 azi2: 124.879499241464
    test 4030 line 448 lat2: -12.401138571717
    test 4031 line 448 lon2: 73.327969848986
    test 4032 line 448 azi2: 124.879499241464
    test 4033 line 449 lat: 61.619396
    test 4034 line 449 lon: 99.785406
    test 4035 line 449 fb: 107.998380
    test 4036 line 449 lat2: 61.619396375102
    test 4037 line 449 lon2: 99.785406498835
    test 4038 line 449 azi2: 107.998379654880
    test 4039 line 449 lat2: 61.619396375102
    test 4040 line 449 lon2: 99.785406498835
    test 4041 line 449 azi2: 107.998379654880
    test 4042 line 450 lat: 36.997252
    test 4043 line 450 lon: 56.015643
    test 4044 line 450 fb: 103.921663
    test 4045 line 450 lat2: 36.997252125041
    test 4046 line 450 lon2: 56.015642631106
    test 4047 line 450 azi2: 103.921662760483
    test 4048 line 450 lat2: 36.997252125041
    test 4049 line 450 lon2: 56.015642631106
    test 4050 line 450 azi2: 103.921662760483
    test 4051 line 451 lat: 37.824447
    test 4052 line 451 lon: 83.438440
    test 4053 line 451 fb: 89.229164
    test 4054 line 451 lat2: 37.824446788544
    test 4055 line 451 lon2: 83.438439603294
    test 4056 line 451 azi2: 89.229164462127
    test 4057 line 451 lat2: 37.824446788544
    test 4058 line 451 lon2: 83.438439603294
    test 4059 line 451 azi2: 89.229164462127
    test 4060 line 452 lat: 78.387864
    test 4061 line 452 lon: 118.814812
    test 4062 line 452 fb: 133.706108
    test 4063 line 452 lat2: 78.387863550790
    test 4064 line 452 lon2: 118.814812128945
    test 4065 line 452 azi2: 133.706108131229
    test 4066 line 452 lat2: 78.387863550790
    test 4067 line 452 lon2: 118.814812128945
    test 4068 line 452 azi2: 133.706108131229
    test 4069 line 453 lat: -21.219381
    test 4070 line 453 lon: 53.544400
    test 4071 line 453 fb: 108.462517
    test 4072 line 453 lat2: -21.219381398156
    test 4073 line 453 lon2: 53.544399883561
    test 4074 line 453 azi2: 108.462517491505
    test 4075 line 453 lat2: -21.219381398156
    test 4076 line 453 lon2: 53.544399883561
    test 4077 line 453 azi2: 108.462517491505
    test 4078 line 454 lat: 63.304502
    test 4079 line 454 lon: 132.034926
    test 4080 line 454 fb: 139.912627
    test 4081 line 454 lat2: 63.304502042590
    test 4082 line 454 lon2: 132.034925840674
    test 4083 line 454 azi2: 139.912627269623
    test 4084 line 454 lat2: 63.304502042590
    test 4085 line 454 lon2: 132.034925840674
    test 4086 line 454 azi2: 139.912627269623
    test 4087 line 455 lat: 13.515663
    test 4088 line 455 lon: 8.989766
    test 4089 line 455 fb: 35.949535
    test 4090 line 455 lat2: 13.515662875313
    test 4091 line 455 lon2: 8.989765670730
    test 4092 line 455 azi2: 35.949534634702
    test 4093 line 455 lat2: 13.515662875313
    test 4094 line 455 lon2: 8.989765670730
    test 4095 line 455 azi2: 35.949534634702
    test 4096 line 456 lat: -6.742624
    test 4097 line 456 lon: 4.531931
    test 4098 line 456 fb: 171.306863
    test 4099 line 456 lat2: -6.742624347861
    test 4100 line 456 lon2: 4.531931315168
    test 4101 line 456 azi2: 171.306863155411
    test 4102 line 456 lat2: -6.742624347861
    test 4103 line 456 lon2: 4.531931315168
    test 4104 line 456 azi2: 171.306863155411
    test 4105 line 457 lat: -24.910509
    test 4106 line 457 lon: 128.137682
    test 4107 line 457 fb: 121.711631
    test 4108 line 457 lat2: -24.910509138681
    test 4109 line 457 lon2: 128.137681811633
    test 4110 line 457 azi2: 121.711631340407
    test 4111 line 457 lat2: -24.910509138681
    test 4112 line 457 lon2: 128.137681811633
    test 4113 line 457 azi2: 121.711631340407
    test 4114 line 458 lat: -40.687591
    test 4115 line 458 lon: 76.389897
    test 4116 line 458 fb: 116.394433
    test 4117 line 458 lat2: -40.687590598372
    test 4118 line 458 lon2: 76.389897347637
    test 4119 line 458 azi2: 116.394432846311
    test 4120 line 458 lat2: -40.687590598372
    test 4121 line 458 lon2: 76.389897347637
    test 4122 line 458 azi2: 116.394432846311
    test 4123 line 459 lat: 50.593808
    test 4124 line 459 lon: 155.175630
    test 4125 line 459 fb: 149.533910
    test 4126 line 459 lat2: 50.593807692461
    test 4127 line 459 lon2: 155.175629862288
    test 4128 line 459 azi2: 149.533910451363
    test 4129 line 459 lat2: 50.593807692461
    test 4130 line 459 lon2: 155.175629862288
    test 4131 line 459 azi2: 149.533910451363
    test 4132 line 460 lat: 12.198222
    test 4133 line 460 lon: 165.839456
    test 4134 line 460 fb: 172.783459
    test 4135 line 460 lat2: 12.198221826512
    test 4136 line 460 lon2: 165.839456381799
    test 4137 line 460 azi2: 172.783459292833
    test 4138 line 460 lat2: 12.198221826512
    test 4139 line 460 lon2: 165.839456381799
    test 4140 line 460 azi2: 172.783459292833
    test 4141 line 461 lat: 34.436568
    test 4142 line 461 lon: 7.117338
    test 4143 line 461 fb: 169.786492
    test 4144 line 461 lat2: 34.436568298724
    test 4145 line 461 lon2: 7.117337693395
    test 4146 line 461 azi2: 169.786491850891
    test 4147 line 461 lat2: 34.436568298724
    test 4148 line 461 lon2: 7.117337693395
    test 4149 line 461 azi2: 169.786491850891
    test 4150 line 462 lat: -3.145255
    test 4151 line 462 lon: 30.502293
    test 4152 line 462 fb: 103.563749
    test 4153 line 462 lat2: -3.145254788627
    test 4154 line 462 lon2: 30.502293345016
    test 4155 line 462 azi2: 103.563748974525
    test 4156 line 462 lat2: -3.145254788627
    test 4157 line 462 lon2: 30.502293345016
    test 4158 line 462 azi2: 103.563748974525
    test 4159 line 463 lat: 16.264722
    test 4160 line 463 lon: 85.497207
    test 4161 line 463 fb: 116.933863
    test 4162 line 463 lat2: 16.264722156696
    test 4163 line 463 lon2: 85.497207496626
    test 4164 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4165 line 463 lat2: 16.264722156696
    test 4166 line 463 lon2: 85.497207496626
    test 4167 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4168 line 464 lat: 1.433605
    test 4169 line 464 lon: 4.165940
    test 4170 line 464 fb: 170.272462
    test 4171 line 464 lat2: 1.433605151882
    test 4172 line 464 lon2: 4.165940219923
    test 4173 line 464 azi2: 170.272462365963
    test 4174 line 464 lat2: 1.433605151882
    test 4175 line 464 lon2: 4.165940219923
    test 4176 line 464 azi2: 170.272462365963
    test 4177 line 465 lat: -43.326676
    test 4178 line 465 lon: 153.148367
    test 4179 line 465 fb: 42.921394
    test 4180 line 465 lat2: -43.326676023438
    test 4181 line 465 lon2: 153.148366512832
    test 4182 line 465 azi2: 42.921393854868
    test 4183 line 465 lat2: -43.326676023438
    test 4184 line 465 lon2: 153.148366512832
    test 4185 line 465 azi2: 42.921393854868
    test 4186 line 466 lat: 20.405242
    test 4187 line 466 lon: 178.247549
    test 4188 line 466 fb: 178.801033
    test 4189 line 466 lat2: 20.405242225208
    test 4190 line 466 lon2: 178.247549230810
    test 4191 line 466 azi2: 178.801032702563
    test 4192 line 466 lat2: 20.405242225208
    test 4193 line 466 lon2: 178.247549230810
    test 4194 line 466 azi2: 178.801032702563
    test 4195 line 467 lat: -22.482832
    test 4196 line 467 lon: 140.761211
    test 4197 line 467 fb: 82.371737
    test 4198 line 467 lat2: -22.482831544520
    test 4199 line 467 lon2: 140.761210729739
    test 4200 line 467 azi2: 82.371736722715
    test 4201 line 467 lat2: -22.482831544520
    test 4202 line 467 lon2: 140.761210729739
    test 4203 line 467 azi2: 82.371736722715
    test 4204 line 468 lat: -41.151672
    test 4205 line 468 lon: 38.419124
    test 4206 line 468 fb: 148.221356
    test 4207 line 468 lat2: -41.151672070525
    test 4208 line 468 lon2: 38.419124284860
    test 4209 line 468 azi2: 148.221356053664
    test 4210 line 468 lat2: -41.151672070525
    test 4211 line 468 lon2: 38.419124284860
    test 4212 line 468 azi2: 148.221356053664
    test 4213 line 469 lat: -63.212817
    test 4214 line 469 lon: 15.714998
    test 4215 line 469 fb: 166.777356
    test 4216 line 469 lat2: -63.212816746477
    test 4217 line 469 lon2: 15.714998156904
    test 4218 line 469 azi2: 166.777356149473
    test 4219 line 469 lat2: -63.212816746477
    test 4220 line 469 lon2: 15.714998156904
    test 4221 line 469 azi2: 166.777356149473
    test 4222 line 470 lat: -33.892681
    test 4223 line 470 lon: 120.971496
    test 4224 line 470 fb: 170.404814
    test 4225 line 470 lat2: -33.892680517408
    test 4226 line 470 lon2: 120.971495805190
    test 4227 line 470 azi2: 170.404813772447
    test 4228 line 470 lat2: -33.892680517408
    test 4229 line 470 lon2: 120.971495805190
    test 4230 line 470 azi2: 170.404813772447
    test 4231 line 471 lat: -17.570093
    test 4232 line 471 lon: 137.259693
    test 4233 line 471 fb: 175.973637
    test 4234 line 471 lat2: -17.570092516031
    test 4235 line 471 lon2: 137.259693182063
    test 4236 line 471 azi2: 175.973637230107
    test 4237 line 471 lat2: -17.570092516031
    test 4238 line 471 lon2: 137.259693182063
    test 4239 line 471 azi2: 175.973637230107
    test 4240 line 472 lat: -24.221028
    test 4241 line 472 lon: 33.960052
    test 4242 line 472 fb: 130.753279
    test 4243 line 472 lat2: -24.221027716300
    test 4244 line 472 lon2: 33.960051796001
    test 4245 line 472 azi2: 130.753279335550
    test 4246 line 472 lat2: -24.221027716300
    test 4247 line 472 lon2: 33.960051796001
    test 4248 line 472 azi2: 130.753279335550
    test 4249 line 473 lat: -48.849133
    test 4250 line 473 lon: 176.601435
    test 4251 line 473 fb: 5.037779
    test 4252 line 473 lat2: -48.849132604777
    test 4253 line 473 lon2: 176.601435366477
    test 4254 line 473 azi2: 5.037779120578
    test 4255 line 473 lat2: -48.849132604777
    test 4256 line 473 lon2: 176.601435366477
    test 4257 line 473 azi2: 5.037779120578
    test 4258 line 474 lat: -50.620233
    test 4259 line 474 lon: 22.061011
    test 4260 line 474 fb: 159.730881
    test 4261 line 474 lat2: -50.620232529081
    test 4262 line 474 lon2: 22.061010504617
    test 4263 line 474 azi2: 159.730880799186
    test 4264 line 474 lat2: -50.620232529081
    test 4265 line 474 lon2: 22.061010504617
    test 4266 line 474 azi2: 159.730880799186
    test 4267 line 475 lat: -11.354875
    test 4268 line 475 lon: 76.258812
    test 4269 line 475 fb: 104.014357
    test 4270 line 475 lat2: -11.354875472483
    test 4271 line 475 lon2: 76.258812283705
    test 4272 line 475 azi2: 104.014356938495
    test 4273 line 475 lat2: -11.354875472483
    test 4274 line 475 lon2: 76.258812283705
    test 4275 line 475 azi2: 104.014356938495
    test 4276 line 476 lat: -19.640051
    test 4277 line 476 lon: 105.698979
    test 4278 line 476 fb: 156.650619
    test 4279 line 476 lat2: -19.640050782646
    test 4280 line 476 lon2: 105.698978700604
    test 4281 line 476 azi2: 156.650619021389
    test 4282 line 476 lat2: -19.640050782646
    test 4283 line 476 lon2: 105.698978700604
    test 4284 line 476 azi2: 156.650619021389
    test 4285 line 477 lat: 83.855267
    test 4286 line 477 lon: 112.674858
    test 4287 line 477 fb: 122.383784
    test 4288 line 477 lat2: 83.855266840098
    test 4289 line 477 lon2: 112.674858066810
    test 4290 line 477 azi2: 122.383784147681
    test 4291 line 477 lat2: 83.855266840098
    test 4292 line 477 lon2: 112.674858066810
    test 4293 line 477 azi2: 122.383784147681
    test 4294 line 478 lat: 48.296558
    test 4295 line 478 lon: 34.072463
    test 4296 line 478 fb: 61.415867
    test 4297 line 478 lat2: 48.296557545891
    test 4298 line 478 lon2: 34.072462542900
    test 4299 line 478 azi2: 61.415867309157
    test 4300 line 478 lat2: 48.296557545891
    test 4301 line 478 lon2: 34.072462542900
    test 4302 line 478 azi2: 61.415867309157
    test 4303 line 479 lat: 20.173772
    test 4304 line 479 lon: 12.682422
    test 4305 line 479 fb: 165.220898
    test 4306 line 479 lat2: 20.173772376863
    test 4307 line 479 lon2: 12.682422408956
    test 4308 line 479 azi2: 165.220897942891
    test 4309 line 479 lat2: 20.173772376863
    test 4310 line 479 lon2: 12.682422408956
    test 4311 line 479 azi2: 165.220897942891
    test 4312 line 480 lat: 47.501521
    test 4313 line 480 lon: 54.338775
    test 4314 line 480 fb: 80.572388
    test 4315 line 480 lat2: 47.501521345953
    test 4316 line 480 lon2: 54.338775236773
    test 4317 line 480 azi2: 80.572387690286
    test 4318 line 480 lat2: 47.501521345953
    test 4319 line 480 lon2: 54.338775236773
    test 4320 line 480 azi2: 80.572387690286
    test 4321 line 481 lat: -34.023172
    test 4322 line 481 lon: 174.310259
    test 4323 line 481 fb: 123.138509
    test 4324 line 481 lat2: -34.023171607796
    test 4325 line 481 lon2: 174.310258612178
    test 4326 line 481 azi2: 123.138509441522
    test 4327 line 481 lat2: -34.023171607796
    test 4328 line 481 lon2: 174.310258612178
    test 4329 line 481 azi2: 123.138509441522
    test 4330 line 482 lat: -31.540913
    test 4331 line 482 lon: 52.441924
    test 4332 line 482 fb: 155.194513
    test 4333 line 482 lat2: -31.540912691186
    test 4334 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4335 line 482 azi2: 155.194512958367
    test 4336 line 482 lat2: -31.540912691186
    test 4337 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4338 line 482 azi2: 155.194512958367
    test 4339 line 483 lat: 64.121649
    test 4340 line 483 lon: 21.295234
    test 4341 line 483 fb: 51.966943
    test 4342 line 483 lat2: 64.121648788158
    test 4343 line 483 lon2: 21.295234110583
    test 4344 line 483 azi2: 51.966943039534
    test 4345 line 483 lat2: 64.121648788158
    test 4346 line 483 lon2: 21.295234110583
    test 4347 line 483 azi2: 51.966943039534
    test 4348 line 484 lat: -4.599613
    test 4349 line 484 lon: 107.727091
    test 4350 line 484 fb: 109.270070
    test 4351 line 484 lat2: -4.599612537190
    test 4352 line 484 lon2: 107.727090701893
    test 4353 line 484 azi2: 109.270070124629
    test 4354 line 484 lat2: -4.599612537190
    test 4355 line 484 lon2: 107.727090701893
    test 4356 line 484 azi2: 109.270070124629
    test 4357 line 485 lat: -16.799515
    test 4358 line 485 lon: 43.675397
    test 4359 line 485 fb: 144.940350
    test 4360 line 485 lat2: -16.799514501718
    test 4361 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4362 line 485 azi2: 144.940350340820
    test 4363 line 485 lat2: -16.799514501718
    test 4364 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4365 line 485 azi2: 144.940350340820
    test 4366 line 486 lat: -16.337411
    test 4367 line 486 lon: 13.110283
    test 4368 line 486 fb: 167.467077
    test 4369 line 486 lat2: -16.337410785184
    test 4370 line 486 lon2: 13.110282576579
    test 4371 line 486 azi2: 167.467077049713
    test 4372 line 486 lat2: -16.337410785184
    test 4373 line 486 lon2: 13.110282576579
    test 4374 line 486 azi2: 167.467077049713
    test 4375 line 487 lat: -26.145379
    test 4376 line 487 lon: 9.977868
    test 4377 line 487 fb: 171.929335
    test 4378 line 487 lat2: -26.145378737931
    test 4379 line 487 lon2: 9.977868070750
    test 4380 line 487 azi2: 171.929335050809
    test 4381 line 487 lat2: -26.145378737931
    test 4382 line 487 lon2: 9.977868070750
    test 4383 line 487 azi2: 171.929335050809
    test 4384 line 488 lat: -3.245748
    test 4385 line 488 lon: 71.931981
    test 4386 line 488 fb: 124.120047
    test 4387 line 488 lat2: -3.245748416402
    test 4388 line 488 lon2: 71.931980979620
    test 4389 line 488 azi2: 124.120046609527
    test 4390 line 488 lat2: -3.245748416402
    test 4391 line 488 lon2: 71.931980979620
    test 4392 line 488 azi2: 124.120046609527
    test 4393 line 489 lat: 72.975644
    test 4394 line 489 lon: 36.459313
    test 4395 line 489 fb: 49.411324
    test 4396 line 489 lat2: 72.975644407376
    test 4397 line 489 lon2: 36.459312843012
    test 4398 line 489 azi2: 49.411324496539
    test 4399 line 489 lat2: 72.975644407376
    test 4400 line 489 lon2: 36.459312843012
    test 4401 line 489 azi2: 49.411324496539
    test 4402 line 490 lat: 50.342418
    test 4403 line 490 lon: 35.445910
    test 4404 line 490 fb: 43.087650
    test 4405 line 490 lat2: 50.342417843481
    test 4406 line 490 lon2: 35.445910446930
    test 4407 line 490 azi2: 43.087650398316
    test 4408 line 490 lat2: 50.342417843481
    test 4409 line 490 lon2: 35.445910446930
    test 4410 line 490 azi2: 43.087650398316
    test 4411 line 491 lat: -22.878804
    test 4412 line 491 lon: 69.376306
    test 4413 line 491 fb: 102.211558
    test 4414 line 491 lat2: -22.878804028267
    test 4415 line 491 lon2: 69.376306288000
    test 4416 line 491 azi2: 102.211557813582
    test 4417 line 491 lat2: -22.878804028267
    test 4418 line 491 lon2: 69.376306288000
    test 4419 line 491 azi2: 102.211557813582
    test 4420 line 492 lat: 21.254912
    test 4421 line 492 lon: 21.899215
    test 4422 line 492 fb: 92.966926
    test 4423 line 492 lat2: 21.254912121078
    test 4424 line 492 lon2: 21.899214754868
    test 4425 line 492 azi2: 92.966926161390
    test 4426 line 492 lat2: 21.254912121078
    test 4427 line 492 lon2: 21.899214754868
    test 4428 line 492 azi2: 92.966926161390
    test 4429 line 493 lat: 26.486641
    test 4430 line 493 lon: 19.097603
    test 4431 line 493 fb: 158.053447
    test 4432 line 493 lat2: 26.486640906235
    test 4433 line 493 lon2: 19.097602913800
    test 4434 line 493 azi2: 158.053446850267
    test 4435 line 493 lat2: 26.486640906235
    test 4436 line 493 lon2: 19.097602913800
    test 4437 line 493 azi2: 158.053446850267
    test 4438 line 494 lat: 43.041538
    test 4439 line 494 lon: 114.186950
    test 4440 line 494 fb: 155.795323
    test 4441 line 494 lat2: 43.041538374784
    test 4442 line 494 lon2: 114.186949886941
    test 4443 line 494 azi2: 155.795322500736
    test 4444 line 494 lat2: 43.041538374784
    test 4445 line 494 lon2: 114.186949886941
    test 4446 line 494 azi2: 155.795322500736
    test 4447 line 495 lat: -10.570764
    test 4448 line 495 lon: 107.625834
    test 4449 line 495 fb: 98.142401
    test 4450 line 495 lat2: -10.570763915882
    test 4451 line 495 lon2: 107.625834147204
    test 4452 line 495 azi2: 98.142400502747
    test 4453 line 495 lat2: -10.570763915882
    test 4454 line 495 lon2: 107.625834147204
    test 4455 line 495 azi2: 98.142400502747
    test 4456 line 496 lat: 12.624313
    test 4457 line 496 lon: 139.841077
    test 4458 line 496 fb: 148.385662
    test 4459 line 496 lat2: 12.624313141297
    test 4460 line 496 lon2: 139.841076840613
    test 4461 line 496 azi2: 148.385661923898
    test 4462 line 496 lat2: 12.624313141297
    test 4463 line 496 lon2: 139.841076840613
    test 4464 line 496 azi2: 148.385661923898
    test 4465 line 497 lat: -25.169999
    test 4466 line 497 lon: 33.175749
    test 4467 line 497 fb: 169.905377
    test 4468 line 497 lat2: -25.169998746665
    test 4469 line 497 lon2: 33.175749310362
    test 4470 line 497 azi2: 169.905376778384
    test 4471 line 497 lat2: -25.169998746665
    test 4472 line 497 lon2: 33.175749310362
    test 4473 line 497 azi2: 169.905376778384
    test 4474 line 498 lat: -41.360282
    test 4475 line 498 lon: 147.341948
    test 4476 line 498 fb: 136.551910
    test 4477 line 498 lat2: -41.360281944908
    test 4478 line 498 lon2: 147.341948469937
    test 4479 line 498 azi2: 136.551910060918
    test 4480 line 498 lat2: -41.360281944908
    test 4481 line 498 lon2: 147.341948469937
    test 4482 line 498 azi2: 136.551910060918
    test 4483 line 499 lat: 39.182099
    test 4484 line 499 lon: 150.590705
    test 4485 line 499 fb: 165.522951
    test 4486 line 499 lat2: 39.182099298590
    test 4487 line 499 lon2: 150.590705311219
    test 4488 line 499 azi2: 165.522950851635
    test 4489 line 499 lat2: 39.182099298590
    test 4490 line 499 lon2: 150.590705311219
    test 4491 line 499 azi2: 165.522950851635
    test 4492 line 500 lat: -57.494441
    test 4493 line 500 lon: 113.054057
    test 4494 line 500 fb: 130.988277
    test 4495 line 500 lat2: -57.494440629886
    test 4496 line 500 lon2: 113.054056725195
    test 4497 line 500 azi2: 130.988276746436
    test 4498 line 500 lat2: -57.494440629886
    test 4499 line 500 lon2: 113.054056725195
    test 4500 line 500 azi2: 130.988276746436
    test 4501 WGS84.KsOrder: 8

    45 of 4501 testEllipsoidalGeodTest.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 2.918 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEllipsoids.py

    testing testEllipsoids.py 22.04.13 (module pygeodesy.ellipsoids 22.07.04)
    test 1 ellipsoid: True
    test 2 TestEllipsoid: name='TestEllipsoid', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000

    testWGS84(pygeodesy.ellipsoids, 22.07.04)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 A: 6367449.1
    test 7 L: 10001965.7
    test 8 Rrectifying: 6367449.1
    test 9 Rgeometric: 6367435.7
    test 10 Rgeocentric: 6378137.000
    test 11 Rgeocentric: 6367489.544
    test 12 Rgeocentric: 6356752.314
    test 13 Rlat: 6378137.000
    test 14 Rlat: 6367444.657
    test 15 Rlat: 6356752.314
    test 16 circle4.radius: 6378137.000
    test 17 circle4.radius: 4517590.879
    test 18 circle4.radius: 0.000
    test 19 distance2: 156903.472, 45.192
    test 20 distance2: 1569034.719, 45.192
    test 21 distance2: 1400742.676, 37.563
    test 22 distance2: 1179164.848, 18.896
    test 23 roc2: 6335439.327, 6378137.0
    test 24 roc2: 6367381.816, 6388838.29
    test 25 roc2: 6399593.626, 6399593.626
    test 26 rocBearing: 6335439.327
    test 27 rocBearing: 6378092.008
    test 28 rocBearing: 6399593.626
    test 29 rocGauss: 6356752.314
    test 30 rocGauss: 6378101.030
    test 31 rocGauss: 6399593.626
    test 32 rocMean: 6356716.465
    test 33 rocMean: 6378092.008
    test 34 rocMean: 6399593.626
    test 35 rocMeridional: 6335439.327
    test 36 rocMeridional: 6367381.816
    test 37 rocMeridional: 6399593.626
    test 38 rocPrimeVertical: 6378137.0
    test 39 rocPrimeVertical: 6388838.29
    test 40 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 22.07.04)
    test 41 R1: 6371008.7714
    test 42 R2: 6371007.2
    test 43 R3: 6371000.8
    test 44 A: 6367449.1
    test 45 L: 10001965.7
    test 46 Rrectifying: 6367449.1
    test 47 Rgeometric: 6367435.7
    test 48 Rgeocentric: 6378137.000
    test 49 Rgeocentric: 6367489.544
    test 50 Rgeocentric: 6356752.314
    test 51 Rlat: 6378137.000
    test 52 Rlat: 6367444.657
    test 53 Rlat: 6356752.314
    test 54 circle4.radius: 6378137.000
    test 55 circle4.radius: 4517590.879
    test 56 circle4.radius: 0.000
    test 57 distance2: 156903.472, 45.192
    test 58 distance2: 1569034.719, 45.192
    test 59 distance2: 1400742.676, 37.563
    test 60 distance2: 1179164.848, 18.896
    test 61 roc2: 6335439.327, 6378137.0
    test 62 roc2: 6367381.816, 6388838.29
    test 63 roc2: 6399593.626, 6399593.626
    test 64 rocBearing: 6335439.327
    test 65 rocBearing: 6378092.008
    test 66 rocBearing: 6399593.626
    test 67 rocGauss: 6356752.314
    test 68 rocGauss: 6378101.030
    test 69 rocGauss: 6399593.626
    test 70 rocMean: 6356716.465
    test 71 rocMean: 6378092.008
    test 72 rocMean: 6399593.626
    test 73 rocMeridional: 6335439.327
    test 74 rocMeridional: 6367381.816
    test 75 rocMeridional: 6399593.626
    test 76 rocPrimeVertical: 6378137.0
    test 77 rocPrimeVertical: 6388838.29
    test 78 rocPrimeVertical: 6399593.626

    test<function Ellipsoid.__init__ at 0x106181750>(pygeodesy.ellipsoids, 22.07.04)
    test 79 a, b, None: 2.0
    test 80 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 22.07.04)
    test 81 WGS84.copy: True
    test 82 WGS84.copy: True
    test 83 WGS84.find: None
    test 84 WGS84.a2_b: 6399593.625758
    test 85 WGS84.b2_a: 6335439.327293
    test 86 WGS84.R2: 6371007.180918
    test 87 WGS84.c2: 40589732499315
    test 88 WGS84.es: 0.081819
    test 89 WGS84.f2: 0.003364
    test 90 WGS84.m2degrees: 90
    test 91 WGS84.degrees2m: 10018754
    test 92 WGS84.area: 5.101e+14
    test 93 WGS84.volume: 1.083e+21
    test 94 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 95 WGS84.ecef: WGS84
    test 96 WGS84: name='WGS84', a=6378137, b=6356752.3142451793, f_=298.257223563, f=0.0033528107, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e22=0.0067394967, e32=0.0033584313, A=6367449.1458234144, L=10001965.7293127216, R1=6371008.7714150595, R2=6371007.1809184738, R3=6371000.7900091587, Rbiaxial=6367453.6345163295, Rtriaxial=6372797.5559594007
    test 97 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204 (1.5612511284e-17)

    testKruegers(pygeodesy.ellipsoids, 22.07.04)
    test 98 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503242e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 99 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 100 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 101 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19
    test 102 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 103 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 22.07.04)
    test 104 a [Radius_]: 6356752.314
    test 105 b [Radius_]: 6378137.000
    test 106 n [Float]: -0.002
    test 107 R1 [Radius]: 6363880.543
    test 108 R2 [Radius]: 6363878.941
    test 109 R3 [Radius]: 6363872.564
    test 110 Rbiaxial [Radius]: 6367453.635
    test 111 Rgeometric [Radius]: 6367435.680
    test 112 c2 [Meter2]: 40498955180263.188
    test 113 area [Meter2]: 508924880289508.500
    test 114 volume [Meter3]: 1079575530747445379072.000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 22.07.04)
    test 115 isEllipsoidal: True
    test 116 isOblate: True
    test 117 isProlate: False
    test 118 isSpherical: False
    test 119 auxAuthalic(-90): -90.0
    test 120 name: auxAuthalic
    test 121 inverse: lat (-90.0)
    test 122 auxConformal(-90): -90.0
    test 123 name: auxConformal
    test 124 inverse: lat (-90.0)
    test 125 auxGeocentric(-90): -90.0
    test 126 name: auxGeocentric
    test 127 inverse: lat (-90.0)
    test 128 auxIsometric(-90): -2178.287790219
    test 129 name: auxIsometric
    test 130 inverse: lat (-90.0)
    test 131 auxParametric(-90): -90.0
    test 132 name: auxParametric
    test 133 inverse: lat (-90.0)
    test 134 auxRectifying(-90): -90.0
    test 135 name: auxRectifying
    test 136 inverse: lat (-90.0)
    test 137 auxAuthalic(-60): -59.88878557
    test 138 name: auxAuthalic
    test 139 inverse: lat (-60.0)
    test 140 auxConformal(-60): -59.833216158
    test 141 name: auxConformal
    test 142 inverse: lat (-60.0)
    test 143 auxGeocentric(-60): -59.83307615
    test 144 name: auxGeocentric
    test 145 inverse: lat (-60.0)
    test 146 auxIsometric(-60): -75.123399226
    test 147 name: auxIsometric
    test 148 inverse: lat (-60.0)
    test 149 auxParametric(-60): -59.916607797
    test 150 name: auxParametric
    test 151 inverse: lat (-60.0)
    test 152 auxRectifying(-60): -59.874885594
    test 153 name: auxRectifying
    test 154 inverse: lat (-60.0)
    test 155 auxAuthalic(-30): -29.888997034
    test 156 name: auxAuthalic
    test 157 inverse: lat (-30.0)
    test 158 auxConformal(-30): -29.833682042
    test 159 name: auxConformal
    test 160 inverse: lat (-30.0)
    test 161 auxGeocentric(-30): -29.83363581
    test 162 name: auxGeocentric
    test 163 inverse: lat (-30.0)
    test 164 auxIsometric(-30): -31.281036776
    test 165 name: auxIsometric
    test 166 inverse: lat (-30.0)
    test 167 auxParametric(-30): -29.916747713
    test 168 name: auxParametric
    test 169 inverse: lat (-30.0)
    test 170 auxRectifying(-30): -29.875147936
    test 171 name: auxRectifying
    test 172 inverse: lat (-30.0)
    test 173 auxAuthalic(0): 0.0
    test 174 name: auxAuthalic
    test 175 inverse: lat (0.0)
    test 176 auxConformal(0): 0.0
    test 177 name: auxConformal
    test 178 inverse: lat (0.0)
    test 179 auxGeocentric(0): 0.0
    test 180 name: auxGeocentric
    test 181 inverse: lat (0.0)
    test 182 auxIsometric(0): 0.0
    test 183 name: auxIsometric
    test 184 inverse: lat (0.0)
    test 185 auxParametric(0): 0.0
    test 186 name: auxParametric
    test 187 inverse: lat (0.0)
    test 188 auxRectifying(0): 0.0
    test 189 name: auxRectifying
    test 190 inverse: lat (0.0)
    test 191 auxAuthalic(30): 29.888997034
    test 192 name: auxAuthalic
    test 193 inverse: lat (30.0)
    test 194 auxConformal(30): 29.833682042
    test 195 name: auxConformal
    test 196 inverse: lat (30.0)
    test 197 auxGeocentric(30): 29.83363581
    test 198 name: auxGeocentric
    test 199 inverse: lat (30.0)
    test 200 auxIsometric(30): 31.281036776
    test 201 name: auxIsometric
    test 202 inverse: lat (30.0)
    test 203 auxParametric(30): 29.916747713
    test 204 name: auxParametric
    test 205 inverse: lat (30.0)
    test 206 auxRectifying(30): 29.875147936
    test 207 name: auxRectifying
    test 208 inverse: lat (30.0)
    test 209 auxAuthalic(60): 59.88878557
    test 210 name: auxAuthalic
    test 211 inverse: lat (60.0)
    test 212 auxConformal(60): 59.833216158
    test 213 name: auxConformal
    test 214 inverse: lat (60.0)
    test 215 auxGeocentric(60): 59.83307615
    test 216 name: auxGeocentric
    test 217 inverse: lat (60.0)
    test 218 auxIsometric(60): 75.123399226
    test 219 name: auxIsometric
    test 220 inverse: lat (60.0)
    test 221 auxParametric(60): 59.916607797
    test 222 name: auxParametric
    test 223 inverse: lat (60.0)
    test 224 auxRectifying(60): 59.874885594
    test 225 name: auxRectifying
    test 226 inverse: lat (60.0)
    test 227 auxAuthalic(90): 90.0
    test 228 name: auxAuthalic
    test 229 inverse: lat (90.0)
    test 230 auxConformal(90): 90.0
    test 231 name: auxConformal
    test 232 inverse: lat (90.0)
    test 233 auxGeocentric(90): 90.0
    test 234 name: auxGeocentric
    test 235 inverse: lat (90.0)
    test 236 auxIsometric(90): 2178.287790219
    test 237 name: auxIsometric
    test 238 inverse: lat (90.0)
    test 239 auxParametric(90): 90.0
    test 240 name: auxParametric
    test 241 inverse: lat (90.0)
    test 242 auxRectifying(90): 90.0
    test 243 name: auxRectifying
    test 244 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 22.07.04)
    test 245 isEllipsoidal: True
    test 246 isOblate: False
    test 247 isProlate: True
    test 248 isSpherical: False
    test 249 auxAuthalic(-90): -90.0
    test 250 name: auxAuthalic
    test 251 inverse: lat (-90.0)
    test 252 auxConformal(-90): -90.0
    test 253 name: auxConformal
    test 254 inverse: lat (-90.0)
    test 255 auxGeocentric(-90): -90.0
    test 256 name: auxGeocentric
    test 257 inverse: lat (-90.0)
    test 258 auxIsometric(-90): -2179.057490028
    test 259 name: auxIsometric
    test 260 inverse: lat (-90.0)
    test 261 auxParametric(-90): -90.0
    test 262 name: auxParametric
    test 263 inverse: lat (-90.0)
    test 264 auxRectifying(-90): -90.0
    test 265 name: auxRectifying
    test 266 inverse: lat (-90.0)
    test 267 auxAuthalic(-60): -60.110978127
    test 268 name: auxAuthalic
    test 269 inverse: lat (-60.0)
    test 270 auxConformal(-60): -60.16650401
    test 271 name: auxConformal
    test 272 inverse: lat (-60.0)
    test 273 auxGeocentric(-60): -60.16636419
    test 274 name: auxGeocentric
    test 275 inverse: lat (-60.0)
    test 276 auxIsometric(-60): -75.789978689
    test 277 name: auxIsometric
    test 278 inverse: lat (-60.0)
    test 279 auxParametric(-60): -60.083252287
    test 280 name: auxParametric
    test 281 inverse: lat (-60.0)
    test 282 auxRectifying(-60): -60.041947439
    test 283 name: auxRectifying
    test 284 inverse: lat (-60.0)
    test 285 auxAuthalic(-30): -30.11118952
    test 286 name: auxAuthalic
    test 287 inverse: lat (-30.0)
    test 288 auxConformal(-30): -30.166970897
    test 289 name: auxConformal
    test 290 inverse: lat (-30.0)
    test 291 auxGeocentric(-30): -30.16692385
    test 292 name: auxGeocentric
    test 293 inverse: lat (-30.0)
    test 294 auxIsometric(-30): -31.665887766
    test 295 name: auxIsometric
    test 296 inverse: lat (-30.0)
    test 297 auxParametric(-30): -30.083392203
    test 298 name: auxParametric
    test 299 inverse: lat (-30.0)
    test 300 auxRectifying(-30): -30.041931117
    test 301 name: auxRectifying
    test 302 inverse: lat (-30.0)
    test 303 auxAuthalic(0): 0.0
    test 304 name: auxAuthalic
    test 305 inverse: lat (0.0)
    test 306 auxConformal(0): 0.0
    test 307 name: auxConformal
    test 308 inverse: lat (0.0)
    test 309 auxGeocentric(0): 0.0
    test 310 name: auxGeocentric
    test 311 inverse: lat (0.0)
    test 312 auxIsometric(0): 0.0
    test 313 name: auxIsometric
    test 314 inverse: lat (0.0)
    test 315 auxParametric(0): 0.0
    test 316 name: auxParametric
    test 317 inverse: lat (0.0)
    test 318 auxRectifying(0): 0.0
    test 319 name: auxRectifying
    test 320 inverse: lat (0.0)
    test 321 auxAuthalic(30): 30.11118952
    test 322 name: auxAuthalic
    test 323 inverse: lat (30.0)
    test 324 auxConformal(30): 30.166970897
    test 325 name: auxConformal
    test 326 inverse: lat (30.0)
    test 327 auxGeocentric(30): 30.16692385
    test 328 name: auxGeocentric
    test 329 inverse: lat (30.0)
    test 330 auxIsometric(30): 31.665887766
    test 331 name: auxIsometric
    test 332 inverse: lat (30.0)
    test 333 auxParametric(30): 30.083392203
    test 334 name: auxParametric
    test 335 inverse: lat (30.0)
    test 336 auxRectifying(30): 30.041931117
    test 337 name: auxRectifying
    test 338 inverse: lat (30.0)
    test 339 auxAuthalic(60): 60.110978127
    test 340 name: auxAuthalic
    test 341 inverse: lat (60.0)
    test 342 auxConformal(60): 60.16650401
    test 343 name: auxConformal
    test 344 inverse: lat (60.0)
    test 345 auxGeocentric(60): 60.16636419
    test 346 name: auxGeocentric
    test 347 inverse: lat (60.0)
    test 348 auxIsometric(60): 75.789978689
    test 349 name: auxIsometric
    test 350 inverse: lat (60.0)
    test 351 auxParametric(60): 60.083252287
    test 352 name: auxParametric
    test 353 inverse: lat (60.0)
    test 354 auxRectifying(60): 60.041947439
    test 355 name: auxRectifying
    test 356 inverse: lat (60.0)
    test 357 auxAuthalic(90): 90.0
    test 358 name: auxAuthalic
    test 359 inverse: lat (90.0)
    test 360 auxConformal(90): 90.0
    test 361 name: auxConformal
    test 362 inverse: lat (90.0)
    test 363 auxGeocentric(90): 90.0
    test 364 name: auxGeocentric
    test 365 inverse: lat (90.0)
    test 366 auxIsometric(90): 2179.057490028
    test 367 name: auxIsometric
    test 368 inverse: lat (90.0)
    test 369 auxParametric(90): 90.0
    test 370 name: auxParametric
    test 371 inverse: lat (90.0)
    test 372 auxRectifying(90): 90.0
    test 373 name: auxRectifying
    test 374 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 22.07.04)
    test 375 isEllipsoidal: False
    test 376 isOblate: False
    test 377 isProlate: False
    test 378 isSpherical: True
    test 379 auxAuthalic(-90): -90.0
    test 380 name: auxAuthalic
    test 381 inverse: lat (-90.0)
    test 382 auxConformal(-90): -90.0
    test 383 name: auxConformal
    test 384 inverse: lat (-90.0)
    test 385 auxGeocentric(-90): -90.0
    test 386 name: auxGeocentric
    test 387 inverse: lat (-90.0)
    test 388 auxIsometric(-90): -90.0
    test 389 name: auxIsometric
    test 390 inverse: lat (-90.0)
    test 391 auxParametric(-90): -90.0
    test 392 name: auxParametric
    test 393 inverse: lat (-90.0)
    test 394 auxRectifying(-90): -90.0
    test 395 name: auxRectifying
    test 396 inverse: lat (-90.0)
    test 397 auxAuthalic(-60): -60.0
    test 398 name: auxAuthalic
    test 399 inverse: lat (-60.0)
    test 400 auxConformal(-60): -60.0
    test 401 name: auxConformal
    test 402 inverse: lat (-60.0)
    test 403 auxGeocentric(-60): -60.0
    test 404 name: auxGeocentric
    test 405 inverse: lat (-60.0)
    test 406 auxIsometric(-60): -60.0
    test 407 name: auxIsometric
    test 408 inverse: lat (-60.0)
    test 409 auxParametric(-60): -60.0
    test 410 name: auxParametric
    test 411 inverse: lat (-60.0)
    test 412 auxRectifying(-60): -60.0
    test 413 name: auxRectifying
    test 414 inverse: lat (-60.0)
    test 415 auxAuthalic(-30): -30.0
    test 416 name: auxAuthalic
    test 417 inverse: lat (-30.0)
    test 418 auxConformal(-30): -30.0
    test 419 name: auxConformal
    test 420 inverse: lat (-30.0)
    test 421 auxGeocentric(-30): -30.0
    test 422 name: auxGeocentric
    test 423 inverse: lat (-30.0)
    test 424 auxIsometric(-30): -30.0
    test 425 name: auxIsometric
    test 426 inverse: lat (-30.0)
    test 427 auxParametric(-30): -30.0
    test 428 name: auxParametric
    test 429 inverse: lat (-30.0)
    test 430 auxRectifying(-30): -30.0
    test 431 name: auxRectifying
    test 432 inverse: lat (-30.0)
    test 433 auxAuthalic(0): 0.0
    test 434 name: auxAuthalic
    test 435 inverse: lat (0.0)
    test 436 auxConformal(0): 0.0
    test 437 name: auxConformal
    test 438 inverse: lat (0.0)
    test 439 auxGeocentric(0): 0.0
    test 440 name: auxGeocentric
    test 441 inverse: lat (0.0)
    test 442 auxIsometric(0): 0.0
    test 443 name: auxIsometric
    test 444 inverse: lat (0.0)
    test 445 auxParametric(0): 0.0
    test 446 name: auxParametric
    test 447 inverse: lat (0.0)
    test 448 auxRectifying(0): 0.0
    test 449 name: auxRectifying
    test 450 inverse: lat (0.0)
    test 451 auxAuthalic(30): 30.0
    test 452 name: auxAuthalic
    test 453 inverse: lat (30.0)
    test 454 auxConformal(30): 30.0
    test 455 name: auxConformal
    test 456 inverse: lat (30.0)
    test 457 auxGeocentric(30): 30.0
    test 458 name: auxGeocentric
    test 459 inverse: lat (30.0)
    test 460 auxIsometric(30): 30.0
    test 461 name: auxIsometric
    test 462 inverse: lat (30.0)
    test 463 auxParametric(30): 30.0
    test 464 name: auxParametric
    test 465 inverse: lat (30.0)
    test 466 auxRectifying(30): 30.0
    test 467 name: auxRectifying
    test 468 inverse: lat (30.0)
    test 469 auxAuthalic(60): 60.0
    test 470 name: auxAuthalic
    test 471 inverse: lat (60.0)
    test 472 auxConformal(60): 60.0
    test 473 name: auxConformal
    test 474 inverse: lat (60.0)
    test 475 auxGeocentric(60): 60.0
    test 476 name: auxGeocentric
    test 477 inverse: lat (60.0)
    test 478 auxIsometric(60): 60.0
    test 479 name: auxIsometric
    test 480 inverse: lat (60.0)
    test 481 auxParametric(60): 60.0
    test 482 name: auxParametric
    test 483 inverse: lat (60.0)
    test 484 auxRectifying(60): 60.0
    test 485 name: auxRectifying
    test 486 inverse: lat (60.0)
    test 487 auxAuthalic(90): 90.0
    test 488 name: auxAuthalic
    test 489 inverse: lat (90.0)
    test 490 auxConformal(90): 90.0
    test 491 name: auxConformal
    test 492 inverse: lat (90.0)
    test 493 auxGeocentric(90): 90.0
    test 494 name: auxGeocentric
    test 495 inverse: lat (90.0)
    test 496 auxIsometric(90): 90.0
    test 497 name: auxIsometric
    test 498 inverse: lat (90.0)
    test 499 auxParametric(90): 90.0
    test 500 name: auxParametric
    test 501 inverse: lat (90.0)
    test 502 auxRectifying(90): 90.0
    test 503 name: auxRectifying
    test 504 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 22.07.04)
    test 505 _TOL: 1.4901161193847657e-09
    test 506 WGS84.f_ - 1 / .f: 0.0
    test 507 WGS84.f - 1 / .f_: 0.0
    test 508 Airy1830.f_ - 1 / .f: 0.0
    test 509 Airy1830.f - 1 / .f_: 0.0
    test 510 GRS80.f_ - 1 / .f: 1.2579448593896814e-10
    test 511 GRS80.f - 1 / .f_: 1.4137996329210978e-15
    test 512 Prolate.f_ - 1 / .f: 0.0
    test 513 Prolate.f - 1 / .f_: 0.0

    testEllipsoid2(pygeodesy.ellipsoids, 22.07.04)
    test 514 _2_WGS84: a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 515 _2_Airy1830: a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366914.60892522, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572, Rbiaxial=6366919.065224, Rtriaxial=6372243.45317691
    test 516 _2_Sphere: a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 517 _2_GRS80: a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 518 _2_Prolate: a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, A=6367449.14582341, L=10035500.52045003, R1=6363880.54283012, R2=6363878.94135826, R3=6363872.56440201, Rbiaxial=6367453.63451633, Rtriaxial=6362105.22438825

    testa_f2Tuple(pygeodesy.ellipsoids, 22.07.04)
    test 519 a_b_WGS84: a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 520 a_b_Airy1830: a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366914.60892522, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572, Rbiaxial=6366919.065224, Rtriaxial=6372243.45317691
    test 521 a_b_Sphere: a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 522 a_b_GRS80: a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 523 a_b_Prolate: a=6356752.31424518, b=6378137, f_=-297.25722356, f=-0.00336409, f2=-0.00335281, n=-0.00167922, e=0.08209444, e2=-0.0067395, e22=-0.00669438, e32=-0.00335843, A=6367449.14582341, L=10035500.52045003, R1=6363880.54283012, R2=6363878.94135826, R3=6363872.56440201, Rbiaxial=6367453.63451633, Rtriaxial=6362105.22438825
    test 524 _a_f_ellipsoid: a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594

    testFunctions(pygeodesy.ellipsoids, 22.07.04)
    test 525 a_b2f_(WGS84): 298.25722356
    test 526 a_b2f2(WGS84): 0.00336409
    test 527 a_b2n(WGS84): 0.00167922
    test 528 b_f2a(WGS84): 6378137.000
    test 529 b_f_2a(WGS84): 6378137.000
    test 530 f_2f(WGS84): 0.00335281
    test 531 n2e2(WGS84): 0.00669438
    test 532 n2f(WGS84): 0.00335281
    test 533 a_b2f_(Airy1830): 299.32496460
    test 534 a_b2f2(Airy1830): 0.00335205
    test 535 a_b2n(Airy1830): 0.00167322
    test 536 b_f2a(Airy1830): 6377563.396
    test 537 b_f_2a(Airy1830): 6377563.396
    test 538 f_2f(Airy1830): 0.00334085
    test 539 n2e2(Airy1830): 0.00667054
    test 540 n2f(Airy1830): 0.00334085
    test 541 a_b2f_(Sphere): 0.00000000
    test 542 a_b2f2(Sphere): 0.00000000
    test 543 a_b2n(Sphere): 0.00000000
    test 544 b_f2a(Sphere): 6371008.771
    test 545 b_f_2a(Sphere): 6371008.771
    test 546 f_2f(Sphere): 0.00000000
    test 547 n2e2(Sphere): 0.00000000
    test 548 n2f(Sphere): 0.00000000
    test 549 a_b2f_(GRS80): 298.25722210
    test 550 a_b2f2(GRS80): 0.00336409
    test 551 a_b2n(GRS80): 0.00167922
    test 552 b_f2a(GRS80): 6378137.000
    test 553 b_f_2a(GRS80): 6378137.000
    test 554 f_2f(GRS80): 0.00335281
    test 555 n2e2(GRS80): 0.00669438
    test 556 n2f(GRS80): 0.00335281
    test 557 a_b2f_(Prolate): -297.25722356
    test 558 a_b2f2(Prolate): -0.00335281
    test 559 a_b2n(Prolate): -0.00167922
    test 560 b_f2a(Prolate): 6356752.314
    test 561 b_f_2a(Prolate): 6356752.314
    test 562 f_2f(Prolate): -0.00336409
    test 563 n2e2(Prolate): -0.00673950
    test 564 n2f(Prolate): -0.00336409

    testWGS84(pygeodesy.ellipsoids, 22.07.04)
    test 565 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 566 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 567 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 568 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 569 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 570 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 571 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 572 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 573 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 574 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 575 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 576 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 577 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 578 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 579 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 580 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 581 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 582 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 583 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 584 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 585 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 586 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 587 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 588 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 589 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 590 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 591 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 592 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 593 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 594 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 595 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 596 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 597 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 598 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 599 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 600 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 601 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 602 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testProlate(pygeodesy.ellipsoids, 22.07.04)
    test 603 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 604 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 605 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 606 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 607 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 608 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 609 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 610 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 611 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 612 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 613 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 614 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 615 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 616 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 617 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 618 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 619 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 620 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 621 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 622 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 623 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 624 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 625 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 626 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 627 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 628 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 629 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 630 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 631 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 632 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 633 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 634 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 635 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 636 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 637 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 638 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 639 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 640 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testSphereAuthalic(pygeodesy.ellipsoids, 22.07.04)
    test 641 roc1_ 0: 0.0
    test 642 roc1_ 0: 0.0
    test 643 roc1_ 5: 0.0
    test 644 roc1_ 5: 0.0
    test 645 roc1_ 10: 0.0
    test 646 roc1_ 10: 0.0
    test 647 roc1_ 15: 0.0
    test 648 roc1_ 15: 0.0
    test 649 roc1_ 20: 0.0
    test 650 roc1_ 20: 0.0
    test 651 roc1_ 25: 0.0
    test 652 roc1_ 25: 0.0
    test 653 roc1_ 30: 0.0
    test 654 roc1_ 30: 0.0
    test 655 roc1_ 35: 0.0
    test 656 roc1_ 35: 0.0
    test 657 roc1_ 40: 0.0
    test 658 roc1_ 40: 0.0
    test 659 roc1_ 45: 0.0
    test 660 roc1_ 45: 0.0
    test 661 roc1_ 50: 0.0
    test 662 roc1_ 50: 0.0
    test 663 roc1_ 55: 0.0
    test 664 roc1_ 55: 0.0
    test 665 roc1_ 60: 0.0
    test 666 roc1_ 60: 0.0
    test 667 roc1_ 65: 0.0
    test 668 roc1_ 65: 0.0
    test 669 roc1_ 70: 0.0
    test 670 roc1_ 70: 0.0
    test 671 roc1_ 75: 0.0
    test 672 roc1_ 75: 0.0
    test 673 roc1_ 80: 0.0
    test 674 roc1_ 80: 0.0
    test 675 roc1_ 85: 0.0
    test 676 roc1_ 85: 0.0
    test 677 roc1_ 90: 0.0
    test 678 roc1_ 90: 0.0

    testcircle4(pygeodesy.ellipsoids, 22.07.04)

    testWGS84(pygeodesy.ellipsoids, 22.07.04)
    test 679 circle4 0: 6378137.000000
    test 680 circle4 0: 6378137.000000
    test 681 circle4 10: 6377497.402124
    test 682 circle4 10: 6377497.402124
    test 683 circle4 20: 6375653.951276
    test 684 circle4 20: 6375653.951276
    test 685 circle4 30: 6372824.420294
    test 686 circle4 30: 6372824.420294
    test 687 circle4 40: 6369344.863240
    test 688 circle4 40: 6369344.863240
    test 689 circle4 50: 6365631.517537
    test 690 circle4 50: 6365631.517537
    test 691 circle4 60: 6362132.224397
    test 692 circle4 60: 6362132.224397
    test 693 circle4 70: 6359272.455642
    test 694 circle4 70: 6359272.455642
    test 695 circle4 80: 6357402.413808
    test 696 circle4 80: 6357402.413808
    test 697 circle4 90: 6356752.314245
    test 698 circle4 90: 6356752.314245

    testSphere(pygeodesy.ellipsoids, 22.07.04)
    test 699 circle4 0: 6371008.771415
    test 700 circle4 0: 6371008.771415
    test 701 circle4 10: 6371008.771415
    test 702 circle4 10: 6371008.771415
    test 703 circle4 20: 6371008.771415
    test 704 circle4 20: 6371008.771415
    test 705 circle4 30: 6371008.771415
    test 706 circle4 30: 6371008.771415
    test 707 circle4 40: 6371008.771415
    test 708 circle4 40: 6371008.771415
    test 709 circle4 50: 6371008.771415
    test 710 circle4 50: 6371008.771415
    test 711 circle4 60: 6371008.771415
    test 712 circle4 60: 6371008.771415
    test 713 circle4 70: 6371008.771415
    test 714 circle4 70: 6371008.771415
    test 715 circle4 80: 6371008.771415
    test 716 circle4 80: 6371008.771415
    test 717 circle4 90: 6371008.771415
    test 718 circle4 90: 6371008.771415

    76 of 718 testEllipsoids.py tests (10.6%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 36.580 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testElliptic.py

    testing testElliptic.py 22.05.22
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 k2: 0.1000000
    test 201 kp2: 0.9000000
    test 202 eps: 0.0263340
    test 203 cD: 0.816837118
    test 204 cE: 1.530757637
    test 205 cG: 1.530757637
    test 206 cH: 0.795604230
    test 207 cK: 1.612441349
    test 208 cKE: 0.081683712
    test 209 cPi: 1.612441349
    test 210 fE(phi): 0.348372822
    test 211 fDelta(sn, cn): 0.994133906
    test 212 fD(sn, cn, dn): 0.013885234
    test 213 fE(sn, cn, dn): 0.348372822
    test 214 fEd(PI_2): 0.027415224
    test 215 fEinv(PI_2): 1.612999420
    test 216 fF(sn, cn, dn): 0.349761345
    test 217 fG(sn, cn, dn): 0.348372822
    test 218 fH(sn, cn, dn): 0.335876111
    test 219 fPi(sn, cn, dn): 0.349761345
    test 220 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 221 fPi(sn, dn, None): invokation Elliptic.fPi(0, 1, None): invalid

    test 222 deltaD(sn, cn, dn): -0.3223642
    test 223 deltaE(sn, cn, dn): 0.0084191
    test 224 deltaEinv(sn, cn): -0.0082518
    test 225 deltaF(sn, cn, dn): -0.0083379
    test 226 deltaG(sn, cn, dn): 0.0084191
    test 227 deltaH(sn, cn, dn): 0.3140691
    test 228 deltaPi(sn, cn, dn): -0.0083379
    test 229 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 230 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 231 RF(1, 2, 0): 1.3110287771461
    test 232 RF(0.5, 1, 0): 1.8540746773014
    test 233 RF(2, 3, 4): 0.58408284167715
    test 234 RC(0, 1/4): 3.1415926535898
    test 235 RC(9/4, 2): 0.69314718055995
    test 236 RC(1/4, -2): 0.23104906018665
    test 237 RJ(0, 1, 2, 3): 0.77688623778582
    test 238 RJ(2, 3, 4, 5): 0.14297579667157
    test 239 RD(0, 2, 1): 1.7972103521034
    test 240 RD(2, 3, 4): 0.16510527294261
    test 241 RG(0, 16, 16): 3.1415926535898
    test 242 RG(2,  3,  4): 1.7255030280692
    test 243 RG(0,  0.0796, 4): 1.0284758090288

    test 244 reset: 5
    test 245 sncndn(x): 0.0, 1.0, 1.0
    test 246 sncndn(x): 1.0, 0.0, 1.0
    test 247 sncndn(x): 0.0, 1.0, 1.0
    test 248 sncndn(x): 0.917152336, 0.398536815, 0.398536815
    test 249 sncndn(x): <class 'pygeodesy.elliptic.Elliptic3Tuple'>
    test 250 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 251 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 252 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 253 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 254 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 255 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    all 255 testElliptic.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 151.940 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEpsg.py

    testing testEpsg.py 21.02.11
    test 1 Epsg: Epsg(32661)
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: Epsg(32761)
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: Epsg(32761)
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: Epsg(32761)
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: Epsg(32661)
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: Epsg(32661)
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 TMcoord 1: 38W N
    test 142 TMcoord 2: 34P N
    test 143 TMcoord 3: 43Q N
    test 144 TMcoord 4: 35Q N
    test 145 TMcoord 5: 37N N
    test 146 TMcoord 6: 34W N
    test 147 TMcoord 7: 40V N
    test 148 TMcoord 8: 34P N
    test 149 TMcoord 9: 41S N
    test 150 TMcoord 10: 41X N
    test 151 TMcoord 11: 43X N
    test 152 TMcoord 12: 44Q N
    test 153 TMcoord 13: 44R N
    test 154 TMcoord 14: 39U N
    test 155 TMcoord 15: 44P N
    test 156 TMcoord 16: 39R N
    test 157 TMcoord 17: 41W N
    test 158 TMcoord 18: 45U N
    test 159 TMcoord 19: 32R N
    test 160 TMcoord 20: 44X N
    test 161 TMcoord 21: 35T N
    test 162 TMcoord 22: 32T N
    test 163 TMcoord 23: 31T N
    test 164 TMcoord 24: 35N N
    test 165 TMcoord 25: 45P N
    test 166 TMcoord 26: 33V N
    test 167 TMcoord 27: 41Q N
    test 168 TMcoord 28: 40X N
    test 169 TMcoord 29: 33P N
    test 170 TMcoord 30: 40S N
    test 171 TMcoord 31: 37T N
    test 172 TMcoord 32: 33X N
    test 173 TMcoord 33: 41U N
    test 174 TMcoord 34: 43Q N
    test 175 TMcoord 35: 42S N
    test 176 TMcoord 36: 33S N
    test 177 TMcoord 37: 35X N
    test 178 TMcoord 38: 38N N
    test 179 TMcoord 39: 44P N
    test 180 TMcoord 40: 33U N
    test 181 TMcoord 41: 37W N
    test 182 TMcoord 42: 36T N
    test 183 TMcoord 43: 36Q N
    test 184 TMcoord 44: 34S N
    test 185 TMcoord 45: 37S N
    test 186 TMcoord 46: 34N N
    test 187 TMcoord 47: 34T N
    test 188 TMcoord 48: 43Q N
    test 189 TMcoord 49: 32N N
    test 190 TMcoord 50: 31Q N
    test 191 TMcoord 51: 45R N
    test 192 TMcoord 52: 45R N
    test 193 TMcoord 53: 34W N
    test 194 TMcoord 54: 44V N
    test 195 TMcoord 55: 44S N
    test 196 TMcoord 56: 39R N
    test 197 TMcoord 57: 00Z N
    test 198 TMcoord 58: 36R N
    test 199 TMcoord 59: 41V N
    test 200 TMcoord 60: 42N N
    test 201 TMcoord 61: 43S N
    test 202 TMcoord 62: 34N N
    test 203 TMcoord 63: 34U N
    test 204 TMcoord 64: 38V N
    test 205 TMcoord 65: 34Q N
    test 206 TMcoord 66: 38P N
    test 207 TMcoord 67: 42S N
    test 208 TMcoord 68: 44S N
    test 209 TMcoord 69: 31Q N
    test 210 TMcoord 70: 40W N
    test 211 TMcoord 71: 35X N
    test 212 TMcoord 72: 32T N
    test 213 TMcoord 73: 45U N
    test 214 TMcoord 74: 40Q N
    test 215 TMcoord 75: 31T N
    test 216 TMcoord 76: 44R N
    test 217 TMcoord 77: 34U N
    test 218 TMcoord 78: 38P N
    test 219 TMcoord 79: 38Q N
    test 220 TMcoord 80: 45N N
    test 221 TMcoord 81: 31S N
    test 222 TMcoord 82: 41U N
    test 223 TMcoord 83: 40V N
    test 224 TMcoord 84: 43X N
    test 225 TMcoord 85: 35N N
    test 226 TMcoord 86: 44P N
    test 227 TMcoord 87: 41N N
    test 228 TMcoord 88: 38Q N
    test 229 TMcoord 89: 43X N
    test 230 TMcoord 90: 36V N
    test 231 TMcoord 91: 34Q N
    test 232 TMcoord 92: 35W N
    test 233 TMcoord 93: 45U N
    test 234 TMcoord 94: 40R N
    test 235 TMcoord 95: 36R N
    test 236 TMcoord 96: 35S N
    test 237 TMcoord 97: 41R N
    test 238 TMcoord 98: 39Q N
    test 239 TMcoord 99: 37T N
    test 240 TMcoord 100: 42P N
    test 241 TMcoord 101: 35T N
    test 242 TMcoord 102: 34Q N
    test 243 TMcoord 103: 41T N
    test 244 TMcoord 104: 43R N
    test 245 TMcoord 105: 34Q N
    test 246 TMcoord 106: 45P N
    test 247 TMcoord 107: 31P N
    test 248 TMcoord 108: 44V N
    test 249 TMcoord 109: 42X N
    test 250 TMcoord 110: 33R N
    test 251 TMcoord 111: 37W N
    test 252 TMcoord 112: 31S N
    test 253 TMcoord 113: 42N N
    test 254 TMcoord 114: 39N N
    test 255 TMcoord 115: 39T N
    test 256 TMcoord 116: 39P N
    test 257 TMcoord 117: 34U N
    test 258 TMcoord 118: 41P N
    test 259 TMcoord 119: 37R N
    test 260 TMcoord 120: 44Q N
    test 261 TMcoord 121: 32V N
    test 262 TMcoord 122: 41R N
    test 263 TMcoord 123: 36T N
    test 264 TMcoord 124: 42U N
    test 265 TMcoord 125: 42U N
    test 266 TMcoord 126: 39T N
    test 267 TMcoord 127: 32T N
    test 268 TMcoord 128: 32Q N
    test 269 TMcoord 129: 38P N
    test 270 TMcoord 130: 34Q N
    test 271 TMcoord 131: 36V N
    test 272 TMcoord 132: 36T N
    test 273 TMcoord 133: 43T N
    test 274 TMcoord 134: 41W N
    test 275 TMcoord 135: 32V N
    test 276 TMcoord 136: 39X N
    test 277 TMcoord 137: 32U N
    test 278 TMcoord 138: 37X N
    test 279 TMcoord 139: 35N N
    test 280 TMcoord 140: 36P N
    test 281 TMcoord 141: 31S N
    test 282 TMcoord 142: 36N N
    test 283 TMcoord 143: 42S N
    test 284 TMcoord 144: 44N N
    test 285 TMcoord 145: 44P N
    test 286 TMcoord 146: 39U N
    test 287 TMcoord 147: 45Q N
    test 288 TMcoord 148: 41W N
    test 289 TMcoord 149: 41N N
    test 290 TMcoord 150: 32S N
    test 291 TMcoord 151: 32N N
    test 292 TMcoord 152: 32T N
    test 293 TMcoord 153: 38R N
    test 294 TMcoord 154: 32V N
    test 295 TMcoord 155: 37Q N
    test 296 TMcoord 156: 44N N
    test 297 TMcoord 157: 34W N
    test 298 TMcoord 158: 45N N
    test 299 TMcoord 159: 42S N
    test 300 TMcoord 160: 40T N
    test 301 TMcoord 161: 31U N
    test 302 TMcoord 162: 45Q N
    test 303 TMcoord 163: 40U N
    test 304 TMcoord 164: 45T N
    test 305 TMcoord 165: 40R N
    test 306 TMcoord 166: 31V N
    test 307 TMcoord 167: 45P N
    test 308 TMcoord 168: 43W N
    test 309 TMcoord 169: 43U N
    test 310 TMcoord 170: 44V N
    test 311 TMcoord 171: 40P N
    test 312 TMcoord 172: 36Q N
    test 313 TMcoord 173: 42Q N
    test 314 TMcoord 174: 41Q N
    test 315 TMcoord 175: 32S N
    test 316 TMcoord 176: 39P N
    test 317 TMcoord 177: 39Q N
    test 318 TMcoord 178: 39T N
    test 319 TMcoord 179: 34U N
    test 320 TMcoord 180: 32W N
    test 321 TMcoord 181: 41U N
    test 322 TMcoord 182: 31Q N
    test 323 TMcoord 183: 40N N
    test 324 TMcoord 184: 40T N
    test 325 TMcoord 185: 38P N
    test 326 TMcoord 186: 44P N
    test 327 TMcoord 187: 40N N
    test 328 TMcoord 188: 44V N
    test 329 TMcoord 189: 41V N
    test 330 TMcoord 190: 43Q N
    test 331 TMcoord 191: 43X N
    test 332 TMcoord 192: 39N N
    test 333 TMcoord 193: 38T N
    test 334 TMcoord 194: 32R N
    test 335 TMcoord 195: 37S N
    test 336 TMcoord 196: 44W N
    test 337 TMcoord 197: 43V N
    test 338 TMcoord 198: 35T N
    test 339 TMcoord 199: 44W N
    test 340 TMcoord 200: 44X N
    test 341 TMcoord 201: 33Q N
    test 342 TMcoord 202: 40W N
    test 343 TMcoord 203: 43S N
    test 344 TMcoord 204: 32U N
    test 345 TMcoord 205: 33V N
    test 346 TMcoord 206: 34R N
    test 347 TMcoord 207: 39S N
    test 348 TMcoord 208: 43W N
    test 349 TMcoord 209: 39T N
    test 350 TMcoord 210: 31W N
    test 351 TMcoord 211: 45R N
    test 352 TMcoord 212: 34W N
    test 353 TMcoord 213: 32T N
    test 354 TMcoord 214: 31P N
    test 355 TMcoord 215: 44V N
    test 356 TMcoord 216: 45U N
    test 357 TMcoord 217: 43R N
    test 358 TMcoord 218: 31N N
    test 359 TMcoord 219: 43T N
    test 360 TMcoord 220: 45R N
    test 361 TMcoord 221: 39N N
    test 362 TMcoord 222: 37S N
    test 363 TMcoord 223: 31R N
    test 364 TMcoord 224: 38Q N
    test 365 TMcoord 225: 40V N
    test 366 TMcoord 226: 45N N
    test 367 TMcoord 227: 44R N
    test 368 TMcoord 228: 43P N
    test 369 TMcoord 229: 42P N
    test 370 TMcoord 230: 45S N
    test 371 TMcoord 231: 42N N
    test 372 TMcoord 232: 38S N
    test 373 TMcoord 233: 32T N
    test 374 TMcoord 234: 41T N
    test 375 TMcoord 235: 34S N
    test 376 TMcoord 236: 40R N
    test 377 TMcoord 237: 35V N
    test 378 TMcoord 238: 38N N
    test 379 TMcoord 239: 40V N
    test 380 TMcoord 240: 36R N
    test 381 TMcoord 241: 37W N
    test 382 TMcoord 242: 45R N
    test 383 TMcoord 243: 37V N
    test 384 TMcoord 244: 33P N
    test 385 TMcoord 245: 32U N
    test 386 TMcoord 246: 38T N
    test 387 TMcoord 247: 37N N
    test 388 TMcoord 248: 36R N
    test 389 TMcoord 249: 44R N
    test 390 TMcoord 250: 44Q N
    test 391 TMcoord 251: 45R N
    test 392 TMcoord 252: 34N N
    test 393 TMcoord 253: 43S N
    test 394 TMcoord 254: 40Q N
    test 395 TMcoord 255: 33T N
    test 396 TMcoord 256: 44P N
    test 397 TMcoord 257: 39N N
    test 398 TMcoord 258: 40Q N

    all 398 testEpsg.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 51.907 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testErrors.py

    testing testErrors.py 21.02.11 (module pygeodesy.errors 22.07.03)
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 SciPyError: name ('value'): test1 txt
    test 54 SciPyError: 'name=value' MISSING: test2 txt
    test 55 SciPyWarning: name ('value'): test1 txt
    test 56 SciPyWarning: 'name=value' MISSING: test2 txt
    test 57 TRFError: name ('value'): test1 txt
    test 58 TRFError: 'name=value' MISSING: test2 txt
    test 59 UnitError: name ('value'): test1 txt
    test 60 UnitError: 'name=value' MISSING: test2 txt
    test 61 UPSError: name ('value'): test1 txt
    test 62 UPSError: 'name=value' MISSING: test2 txt
    test 63 UTMError: name ('value'): test1 txt
    test 64 UTMError: 'name=value' MISSING: test2 txt
    test 65 UTMUPSError: name ('value'): test1 txt
    test 66 UTMUPSError: 'name=value' MISSING: test2 txt
    test 67 VectorError: name ('value'): test1 txt
    test 68 VectorError: 'name=value' MISSING: test2 txt
    test 69 VincentyError: name ('value'): test1 txt
    test 70 VincentyError: 'name=value' MISSING: test2 txt
    test 71 WebMercatorError: name ('value'): test1 txt
    test 72 WebMercatorError: 'name=value' MISSING: test2 txt
    test 73 WGRSError: name ('value'): test1 txt
    test 74 WGRSError: 'name=value' MISSING: test2 txt
    test 75 _InvalidError: zero (1): invalid
    test 76 _InvalidError: ValueError('zero (1): invalid')
    test 77 _InvalidError: one (2) or zero (1): outside
    test 78 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 81 _IsnotError: _None (None) not an int or float
    test 82 _IsnotError: TypeError('_None (None) not an int or float')
    test 83 _IsnotError: _None (None) not scalar
    test 84 _IsnotError: TypeError('_None (None) not scalar')
    test 85 _IsnotError: _None (None) not scalar: invalid
    test 86 _IsnotError: LimitError('_None (None) not scalar: invalid')
    test 87 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 88 crosserrors: True
    test 89 crosserrors: False
    test 90 limiterrors: True
    test 91 limiterrors: False
    test 92 rangerrors: True
    test 93 rangerrors: False
    test 94 exception_chaining: False
    test 95 exception_chaining: None
    test 96 exception_chaining: None
    test 97 _xkwds_get: test1
    test 98 _xkwds_get: test2
    test 99 _xkwds_get: _xkwds_get(): no name=default kwargs
    test 100 _xkwds_get: _xkwds_get(n1='d1', n2='d2'): multiple name=default kwargs
    test 101 _xkwds_pop: test1
    test 102 _xkwds_pop: test2
    test 103 _xkwds_pop: _xkwds_pop(): no name=default kwargs
    test 104 _xkwds_pop: _xkwds_pop(n1='d1', n2='d2'): multiple name=default kwargs

    all 104 testErrors.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 978.231 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEtm.py

    testing testEtm.py 22.05.14 (module pygeodesy.etm 22.07.07)

    testExactTransverseMercator(pygeodesy.etm, 22.07.07)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643
    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608
    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.37835701  FAILED, KNOWN, expected 29735142.37835703
    test 32 northing: 4235043.60793303  FAILED, KNOWN, expected 4235043.60793304
    test 33 gamma: 67.63332900
    test 34 scale: 26.33699547
    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 22.07.07)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'
    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643
    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608
    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547
    test 67 easting: 0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 0.000
    test 73 gamma: 0.000
    test 74 scale: 1.000
    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 22.07.07)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parse: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 22.07.07)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parse: 31 N 448251 5411932
    test 102 name: parse

    2 of 102 testEtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 62.157 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testEtmTMcoords.py

    testing testEtmTMcoords.py 19.05.23 (module pygeodesy.etm 22.07.07)
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.convergence: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.convergence: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.convergence: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.convergence: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.convergence: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.convergence: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.convergence: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.convergence: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.convergence: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.convergence: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.convergence: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.convergence: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.convergence: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.convergence: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.convergence: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.convergence: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.convergence: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.convergence: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.convergence: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.convergence: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.convergence: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.convergence: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.convergence: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.convergence: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.convergence: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.convergence: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.convergence: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.convergence: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.convergence: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.convergence: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.convergence: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.convergence: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.convergence: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.convergence: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.convergence: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.convergence: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.convergence: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.convergence: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.convergence: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.convergence: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.convergence: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.convergence: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.convergence: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.convergence: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.convergence: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.convergence: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.convergence: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.convergence: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.convergence: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.convergence: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.convergence: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.convergence: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.convergence: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.convergence: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.convergence: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.convergence: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350
    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.convergence: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.convergence: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.convergence: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.convergence: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.convergence: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.convergence: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.convergence: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.convergence: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.convergence: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.convergence: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.convergence: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.convergence: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.convergence: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.convergence: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.convergence: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.convergence: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.convergence: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.convergence: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.convergence: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.convergence: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.convergence: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.convergence: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.convergence: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.convergence: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.convergence: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.convergence: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.convergence: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.convergence: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.convergence: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.convergence: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.convergence: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.convergence: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.convergence: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.convergence: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.convergence: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.convergence: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.convergence: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.convergence: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.convergence: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.convergence: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.convergence: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.convergence: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.convergence: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.convergence: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.convergence: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.convergence: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.convergence: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.convergence: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.convergence: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.convergence: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.convergence: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.convergence: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.convergence: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.convergence: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.convergence: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.convergence: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.convergence: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.convergence: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.convergence: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.convergence: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.convergence: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.convergence: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.convergence: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.convergence: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.convergence: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.convergence: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.convergence: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.convergence: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.convergence: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.convergence: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.convergence: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.convergence: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.convergence: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.convergence: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.convergence: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.convergence: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.convergence: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.convergence: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.convergence: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.convergence: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.convergence: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.convergence: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.convergence: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.convergence: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.convergence: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.convergence: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.convergence: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.convergence: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.convergence: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.convergence: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.convergence: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.convergence: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.convergence: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.convergence: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.convergence: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.convergence: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.convergence: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.convergence: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.convergence: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.convergence: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.convergence: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.convergence: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.convergence: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.convergence: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.convergence: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.convergence: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.convergence: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.convergence: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.convergence: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.convergence: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.convergence: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.convergence: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.convergence: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.convergence: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.convergence: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.convergence: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.convergence: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.convergence: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.convergence: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.convergence: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.convergence: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.convergence: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.convergence: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.convergence: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.convergence: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.convergence: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.convergence: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.convergence: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.convergence: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.convergence: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.convergence: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.convergence: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.convergence: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.convergence: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.convergence: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.convergence: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.convergence: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.convergence: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.convergence: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.convergence: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.convergence: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.convergence: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.convergence: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.convergence: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.convergence: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.convergence: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.convergence: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.convergence: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.convergence: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.convergence: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.convergence: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.convergence: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.convergence: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.convergence: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.convergence: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.convergence: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.convergence: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.convergence: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.convergence: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.convergence: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.convergence: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.convergence: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.convergence: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.convergence: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.convergence: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.convergence: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.convergence: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.convergence: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.convergence: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.convergence: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.convergence: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.convergence: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.convergence: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.convergence: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.convergence: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.convergence: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.convergence: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.convergence: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.convergence: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.convergence: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.convergence: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.convergence: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.convergence: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.convergence: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.convergence: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.convergence: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.convergence: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.convergence: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.convergence: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.convergence: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.convergence: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.convergence: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.convergence: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.convergence: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.convergence: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.convergence: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.convergence: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.convergence: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.convergence: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.convergence: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.convergence: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 3.166497e-08
    test 1544 max reverse error: 1.207923e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testEtmTMcoords.py tests passed, 1 skipped (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 1.271 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testExactTMcoords.py

    testing testExactTMcoords.py 19.05.23 (module pygeodesy.etm 22.07.07)
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.convergence: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.convergence: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.convergence: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.convergence: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.convergence: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.convergence: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.convergence: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.convergence: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.convergence: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.convergence: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.convergence: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.convergence: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.convergence: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.convergence: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.convergence: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.convergence: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.convergence: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.convergence: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.convergence: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.convergence: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.convergence: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.convergence: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.convergence: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.convergence: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.convergence: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.convergence: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.convergence: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.convergence: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.convergence: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.convergence: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.convergence: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.convergence: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.convergence: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.convergence: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.convergence: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.convergence: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.convergence: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.convergence: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.convergence: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.convergence: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.convergence: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.convergence: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.convergence: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.convergence: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.convergence: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.convergence: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.convergence: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.convergence: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.convergence: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.convergence: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.convergence: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.convergence: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.convergence: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.convergence: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.convergence: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.convergence: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350
    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.convergence: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.convergence: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.convergence: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.convergence: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.convergence: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.convergence: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.convergence: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.convergence: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.convergence: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.convergence: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.convergence: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.convergence: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.convergence: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.convergence: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.convergence: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.convergence: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.convergence: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.convergence: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.convergence: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.convergence: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.convergence: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.convergence: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.convergence: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.convergence: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.convergence: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.convergence: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.convergence: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.convergence: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.convergence: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.convergence: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.convergence: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.convergence: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.convergence: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.convergence: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.convergence: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.convergence: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.convergence: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.convergence: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.convergence: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.convergence: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.convergence: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.convergence: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.convergence: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.convergence: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.convergence: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.convergence: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.convergence: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.convergence: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.convergence: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.convergence: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.convergence: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.convergence: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.convergence: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.convergence: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.convergence: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.convergence: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.convergence: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.convergence: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.convergence: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.convergence: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.convergence: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.convergence: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.convergence: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.convergence: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.convergence: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.convergence: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.convergence: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.convergence: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.convergence: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.convergence: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.convergence: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.convergence: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.convergence: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.convergence: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.convergence: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.convergence: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.convergence: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.convergence: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.convergence: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.convergence: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.convergence: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.convergence: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.convergence: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.convergence: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.convergence: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.convergence: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.convergence: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.convergence: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.convergence: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.convergence: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.convergence: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.convergence: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.convergence: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.convergence: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.convergence: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.convergence: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.convergence: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.convergence: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.convergence: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.convergence: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.convergence: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.convergence: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.convergence: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.convergence: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.convergence: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.convergence: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.convergence: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.convergence: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.convergence: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.convergence: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.convergence: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.convergence: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.convergence: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.convergence: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.convergence: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.convergence: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.convergence: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.convergence: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.convergence: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.convergence: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.convergence: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.convergence: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.convergence: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.convergence: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.convergence: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.convergence: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.convergence: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.convergence: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.convergence: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.convergence: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.convergence: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.convergence: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.convergence: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.convergence: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.convergence: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.convergence: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.convergence: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.convergence: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.convergence: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.convergence: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.convergence: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.convergence: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.convergence: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.convergence: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.convergence: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.convergence: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.convergence: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.convergence: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.convergence: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.convergence: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.convergence: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.convergence: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.convergence: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.convergence: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.convergence: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.convergence: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.convergence: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.convergence: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.convergence: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.convergence: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.convergence: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.convergence: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.convergence: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.convergence: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.convergence: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.convergence: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.convergence: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.convergence: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.convergence: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.convergence: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.convergence: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.convergence: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.convergence: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.convergence: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.convergence: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.convergence: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.convergence: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.convergence: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.convergence: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.convergence: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.convergence: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.convergence: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.convergence: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.convergence: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.convergence: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.convergence: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.convergence: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.convergence: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.convergence: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.convergence: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.convergence: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.convergence: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.convergence: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.convergence: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.convergence: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.convergence: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.convergence: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.convergence: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.convergence: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.convergence: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.convergence: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 2.328306e-08
    test 1544 max reverse error: 1.278977e-13
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testExactTMcoords.py tests passed, 1 skipped (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 1.247 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testFmath.py

    testing testFmath.py 22.04.23 (module pygeodesy.fmath 22.07.07)
    test 1 fpolynomialA: 1.21197509765625
    test 2 fhornerA: 1.21197509765625
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875
    test 5 fpolynomialA: 1.21197509765625
    test 6 fhornerA: 1.21197509765625
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875
    test 9 fpolynomialA: 1.21197509765625
    test 10 fhornerA: 1.21197509765625
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875
    test 13 fpolynomialA: 1.21197509765625
    test 14 fhornerA: 1.21197509765625
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875
    test 17 fpolynomialA: 1.21197509765625
    test 18 fhornerA: 1.21197509765625
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875
    test 21 fpolynomialA: 1.21197509765625
    test 22 fhornerA: 1.21197509765625
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875
    test 25 fpolynomialA: 1.21197509765625
    test 26 fhornerA: 1.21197509765625
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875
    test 29 fpolynomialA: 1.21197509765625
    test 30 fhornerA: 1.21197509765625
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875
    test 33 fpolynomialA: 1.21197509765625
    test 34 fhornerA: 1.21197509765625
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875
    test 37 fpolynomialA: 1.21197509765625
    test 38 fhornerA: 1.21197509765625
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875
    test 41 fpolynomialA: 1.21197509765625
    test 42 fhornerA: 1.21197509765625
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875
    test 45 fpolynomialA: 1.21197509765625
    test 46 fhornerA: 1.21197509765625
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875
    test 49 fpolynomialA: 1.21197509765625
    test 50 fhornerA: 1.21197509765625
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875
    test 53 fpolynomialA: 1.21197509765625
    test 54 fhornerA: 1.21197509765625
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875
    test 57 fpolynomialA: 1.21197509765625
    test 58 fhornerA: 1.21197509765625
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875
    test 61 fpolynomialA: 1.21197509765625
    test 62 fhornerA: 1.21197509765625
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875
    test 65 fpolynomialA: 1.21197509765625
    test 66 fhornerA: 1.21197509765625
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875
    test 69 fpolynomialA: 1.21197509765625
    test 70 fhornerA: 1.21197509765625
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875
    test 73 fpolynomialA: 1.21197509765625
    test 74 fhornerA: 1.21197509765625
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875
    test 77 fpolynomialA: 1.21197509765625
    test 78 fhornerA: 1.21197509765625
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875
    test 81 fpolynomialA: 1.21197509765625
    test 82 fhornerA: 1.21197509765625
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875
    test 85 fpolynomialA: 1.21197509765625
    test 86 fhornerA: 1.21197509765625
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875
    test 89 fpolynomialA: 1.21197509765625
    test 90 fhornerA: 1.21197509765625
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875
    test 93 fpolynomialA: 1.21197509765625
    test 94 fhornerA: 1.21197509765625
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875
    test 97 fpolynomialA: 1.21197509765625
    test 98 fhornerA: 1.21197509765625
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875
    test 101 fpolynomialA: 1.21197509765625
    test 102 fhornerA: 1.21197509765625
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875
    test 105 fpolynomialA: 1.21197509765625
    test 106 fhornerA: 1.21197509765625
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875
    test 109 fpolynomialA: 1.21197509765625
    test 110 fhornerA: 1.21197509765625
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875
    test 113 fpolynomialA: 1.21197509765625
    test 114 fhornerA: 1.21197509765625
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875
    test 117 fpolynomialA: 1.21197509765625
    test 118 fhornerA: 1.21197509765625
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875
    test 121 fpolynomialA: 1.21197509765625
    test 122 fhornerA: 1.21197509765625
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875
    test 125 fpolynomialA: 1.21197509765625
    test 126 fhornerA: 1.21197509765625
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875
    test 129 fpolynomialA: 1.21197509765625
    test 130 fhornerA: 1.21197509765625
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875
    test 133 fpowers: 10
    test 134 fpowers: 2
    test 135 fpowers: 1024
    test 136 fpowers: 4
    test 137 fpowers: 16
    test 138 fpowers: 1024
    test 139 fpowers: 4
    test 140 fpowers: 8
    test 141 fpowers: 512
    test 142 Airy1830: 6366914.6089252215
    test 143 Airy1830: 6366914.6089252215
    test 144 Airy1830: 6366914.6089252215
    test 145 Airy1830: 6366914.6089252215
    test 146 Sphere: 6371008.7714149999
    test 147 Sphere: 6371008.7714149999
    test 148 Sphere: 6371008.7714149999
    test 149 Sphere: 6371008.7714149999
    test 150 WGS84: 6367449.1458234144
    test 151 WGS84: 6367449.1458234144
    test 152 WGS84: 6367449.1458234144
    test 153 WGS84: 6367449.1458234144
    test 154 hypot: 1
    test 155 sqrt_a: 0.6102683302836
    test 156 sqrt_a: 0.6102683302836
    test 157 hypot_ : 1.00001250
    test 158 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 159 hypot2_: 1.00002500
    test 160 norm_  : 1.00000000
    test 161 hypot_ : 3606.937759
    test 162 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 163 hypot2_: 13010000.0
    test 164 norm_  : 1.0
    test 165 hypot_ : 40112.842
    test 166 hypot2_: 1609040100.0
    test 167 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 168 cbrt: 3.00
    test 169 cbrt: -3.00
    test 170 cbrt2: 9.00
    test 171 cbrt2: 9.00
    test 172 sqrt3: 27.00
    test 173 facos1: 0.005%
    test 174 fasin1: 0.439%
    test 175 fatan : 0.134%
    test 176 fatan1: 2.834%
    test 177 fatan2: 0.321%

    3 of 177 testFmath.py tests (1.7%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 17.992 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testFormy.py

    testing testFormy.py 22.06.20
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 excessAbc: 11.9698
    test 7 excessAbc: 11.9698
    test 8 excessGirard: 11.9698
    test 9 excessLHuilier: 11.9698
    test 10 excessKarney: 56.9625
    test 11 excessQuad: 56.9625
    test 12 excessKarney: 44.0235
    test 13 excessQuad: 44.0235
    test 14 excessKarney: -44.0235
    test 15 excessQuad: -44.0235
    test 16 isantipode1: True
    test 17 isantipode2: True
    test 18 isantipode3: False
    test 19 isantipode4: True
    test 20 isantipode5: True
    test 21 isantipode6: False
    test 22 hartzell: (1125440.234789, 5562720.117395, 2900596.195524)
    test 23 hartzell: 27.226919°N, 078.562403°E, -0.00, 'hartzell'
    test 24 hartzell: (3678289.79469, 3678289.79469, 3678289.79469)
    test 25 hartzell: 35.446011°N, 045.0°E, -0.00, 'hartzell'
    test 26 heightOf0: 2638958.23912
    test 27 heightOf45: 5401080.43931
    test 28 heightOf90: 6371008.77141
    test 29 heightOf135: 5401080.43931
    test 30 horizon0: 0.0
    test 31 horizon10Km: 357099.672
    test 32 horizon30Kft: 392310.704
    test 33 horizon10Kft: 214877.422
    test 34 haversine1 (0.00%): 298009.404
    test 35 vincentys1 (0.00%): 298009.404
    test 36 vincentys1 (0.00%): 298009.404
    test 37 cosineAndoyerLambert1 (0.13%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 38 cosineForsytheAndoyerLambert1 (0.13%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 39 cosineLaw1 (0.00%): 298009.404
    test 40 equirectangular1 (0.01%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 41 euclidean1 (5.26%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 42 flatLocal1 (0.14%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 43 flatPolar1 (8.67%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 44 thomas1 (0.13%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 45 hubeny: <function flatLocal at 0x10210a680>
    test 46 haversine2 (0.00%): 98164.988
    test 47 vincentys2 (0.00%): 98164.988
    test 48 vincentys2 (0.00%): 98164.988
    test 49 cosineAndoyerLambert2 (0.10%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 50 cosineForsytheAndoyerLambert2 (0.10%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 51 cosineLaw2 (0.00%): 98164.988
    test 52 equirectangular2 (0.00%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 53 euclidean2 (6.37%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 54 flatLocal2 (0.10%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 55 flatPolar2 (0.57%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 56 thomas2 (0.10%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 57 hubeny: <function flatLocal at 0x10210a680>
    test 58 haversine3 (0.00%): 651816.987
    test 59 vincentys3 (0.00%): 651816.987
    test 60 vincentys3 (0.00%): 651816.987
    test 61 cosineAndoyerLambert3 (0.25%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 62 cosineForsytheAndoyerLambert3 (0.25%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 63 cosineLaw3 (0.00%): 651816.987
    test 64 equirectangular3 (0.03%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 65 euclidean3 (4.37%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 66 flatLocal3 (0.29%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 67 flatPolar3 (13.00%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 68 thomas3 (0.25%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 69 hubeny: <function flatLocal at 0x10210a680>
    test 70 haversine4 (0.00%): 4084985.780
    test 71 vincentys4 (0.00%): 4084985.780
    test 72 vincentys4 (0.00%): 4084985.780
    test 73 cosineAndoyerLambert4 (0.24%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 74 cosineForsytheAndoyerLambert4 (0.24%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 75 cosineLaw4 (0.00%): 4084985.780
    test 76 equirectangular4 (1.26%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 77 euclidean4 (4.22%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 78 flatLocal4 (1.51%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 79 flatPolar4 (12.31%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 80 thomas4 (0.24%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 81 hubeny: <function flatLocal at 0x10210a680>
    test 82 haversine5 (0.00%): 9670051.606
    test 83 vincentys5 (0.00%): 9670051.606
    test 84 vincentys5 (0.00%): 9670051.606
    test 85 cosineAndoyerLambert5 (0.21%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 86 cosineForsytheAndoyerLambert5 (0.21%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 87 cosineLaw5 (0.00%): 9670051.606
    test 88 equirectangular5 (7.79%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 89 euclidean5 (9.34%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 90 flatLocal5 (8.03%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 91 flatPolar5 (55.59%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 92 thomas5 (0.21%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 93 hubeny: <function flatLocal at 0x10210a680>
    test 94 haversine6 (0.00%): 10496496.577
    test 95 vincentys6 (0.00%): 10496496.577
    test 96 vincentys6 (0.00%): 10496496.577
    test 97 cosineAndoyerLambert6 (0.18%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 98 cosineForsytheAndoyerLambert6 (0.18%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 99 cosineLaw6 (0.00%): 10496496.577
    test 100 equirectangular6 (3.32%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 101 euclidean6 (4.50%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 102 flatLocal6 (3.07%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 103 flatPolar6 (23.87%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 104 thomas6 (0.18%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 105 hubeny: <function flatLocal at 0x10210a680>
    test 106 haversine7 (0.00%): 8998396.669
    test 107 vincentys7 (0.00%): 8998396.669
    test 108 vincentys7 (0.00%): 8998396.669
    test 109 cosineAndoyerLambert7 (0.27%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 110 cosineForsytheAndoyerLambert7 (0.27%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 111 cosineLaw7 (0.00%): 8998396.669
    test 112 equirectangular7 (2.05%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 113 euclidean7 (7.76%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 114 flatLocal7 (1.71%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 115 flatPolar7 (17.56%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 116 thomas7 (0.27%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 117 hubeny: <function flatLocal at 0x10210a680>
    test 118 haversine8 (0.00%): 6906867.946
    test 119 vincentys8 (0.00%): 6906867.946
    test 120 vincentys8 (0.00%): 6906867.946
    test 121 cosineAndoyerLambert8 (0.13%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 122 cosineForsytheAndoyerLambert8 (0.13%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 123 cosineLaw8 (0.00%): 6906867.946
    test 124 equirectangular8 (0.91%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 125 euclidean8 (6.54%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 126 flatLocal8 (1.04%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 127 flatPolar8 (23.23%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 128 thomas8 (0.13%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 129 hubeny: <function flatLocal at 0x10210a680>
    test 130 haversine9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 131 vincentys9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 132 cosineAndoyerLambert9 (0.07%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 133 cosineForsytheAndoyerLambert9 (0.07%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 134 cosineLaw9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 135 flatLocal9 (15.21%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 136 thomas9 (0.07%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 137 hubeny: <function flatLocal at 0x10210a680>

    test 138 intersections2: pygeodesy.formy
    test 139 intersection2 (None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 140 intersection2 (None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 141 intersection2 (None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 142 intersection2 (None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 143 intersection2 (None) 20: (22.494, 22.494), (-22.494, -22.494)
    test 144 intersection2 (None) 30: (38.7298, 38.7298), (-38.7298, -38.7298)
    test 145 intersection2 (None) 40: (62.0732, 62.0732), (-62.0732, -62.0732)
    test 146 intersection2 (R_M) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 147 intersection2 (R_M) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 148 intersection2 (R_M) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 149 intersection2 (R_M) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 150 intersection2 (R_M) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 151 intersection2 (R_M) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 152 intersection2 (R_M) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 153 intersection2 (WGS84) 1: (-1.0112, -0.998), (1.0112, 0.998)
    test 154 intersection2 (WGS84) 2: (-2.0224, -1.9979), (2.0224, 1.9979)
    test 155 intersection2 (WGS84) 5: (-5.0558, -5.0271), (5.0558, 5.0271)
    test 156 intersection2 (WGS84) 10: (-10.1081, -10.2901), (10.1081, 10.2901)
    test 157 intersection2 (WGS84) 20: (-20.1241, -22.6411), (20.1241, 22.6411)
    test 158 intersection2 (WGS84) 30: (-29.4898, -40.1785), (29.4898, 40.1785)
    test 159 intersection2 (WGS84) 40: (-35.8146, -68.7149), (35.8146, 68.7149)

    test 160 radical2: (0.26, 2.6)
    test 161 radical2: (0.74, 7.4)
    test 162 radical2: (0.5, 5.0)
    test 163 radical2: (0.5, 0.0)
    test 164 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 165 LimitError: delta exceeds limit: equirectangular_(0.0, 0.0, 60.0, 120.0, limit=45)  FAILED, KNOWN, expected delta exceeds ...

    65 of 165 testFormy.py tests (39.4%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 39.824 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testFrechet.py

    testing testFrechet.py 21.08.14
    test 1 FrechetDegrees_ (degrees): (178.5, 74, 56, 19, 5400)
    test 2 FrechetDegrees_ (degrees): (175.5, 74, 52.5, 29, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (3.11541, 74, 56, 19, 5400)
    test 6 FrechetRadians_ (radians): (3.06305, 74, 52.5, 29, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (2.63867, 0, 0, 149, 5400)
    test 18 FrechetCosineLaw (radians): (2.63867, 0, 0, 208, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.1331, 8, 3, 138, 5400)
    test 22 FrechetEquirectangular (radians2): (7.01295, 0, 0, 208, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.81124, 8, 3, 138, 5400)
    test 26 FrechetEuclidean (radians): (2.74296, 0, 0, 208, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.13778, 8, 3, 138, 5400)
    test 30 FrechetFlatLocal (radians2): (6.92262, 0, 0, 208, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.65039, 0, 0, 149, 5400)
    test 34 FrechetFlatPolar (radians): (2.65039, 0, 0, 208, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (2.63867, 0, 0, 149, 5400)
    test 38 FrechetHaversine (radians): (2.63867, 0, 0, 208, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.13778, 8, 3, 138, 5400)
    test 42 FrechetHubeny (radians2): (6.92262, 0, 0, 208, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (2.63187, 0, 0, 149, 5400)
    test 46 FrechetThomas (radians): (2.63187, 0, 0, 208, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (2.63867, 0, 0, 149, 5400)
    test 50 FrechetVincentys (radians): (2.63867, 0, 0, 208, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 53 FrechetKarney (degrees): (151.09508, 0, 0, 149, 5400)
    test 54 FrechetKarney (degrees): (151.09508, 0, 0, 208, 10710)
    test 55 copy(FrechetKarney): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
    test 56 FrechetKarney.copy(): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
    test 57 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 58 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalVincenty.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 59 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 60 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 61 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 62 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalKarney.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 63 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 64 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 65 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 66 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 67 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 68 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 69 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 70 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 71 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 72 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 73 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 74 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalTrigonometry.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 75 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 76 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 77 frechet_: (178.5, 74, 56, 19, 5400, 'test')
    test 78 [fi1]: 64.0°S, 096.0°E
    test 79 [fi2]: 41.0°S, 071.0°W
    test 80 [fi1]: LatLon_(64.0°S, 096.0°E)
    test 81 [fi2]: LatLon_(41.0°S, 071.0°W)

    5 of 81 testFrechet.py tests (6.2%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 9.741 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testFstats.py

    testing testFstats.py 22.01.14 (module pygeodesy.fstats 22.06.15)
    test 1 Fcook: 8
    test 2 Fcook: -0.218750
    test 3 Fcook: 4.562500
    test 4 Fcook: 5.0
    test 5 Fcook: 0.656250
    test 6 Fcook: 2.0
    test 7 Fcook: 4.0
    test 8 Fcook: 1.039635

    test 9 fcopy: fstats.Fcook 'fcopy'[8]  FAILED, KNOWN, expected fstats.Fcook 'Fcook'[8]
    test 10 fcopy: 5.0
    test 11 fcopy: 2.0
    test 12 Fcook: 8

    test 13 Doubled: 16
    test 14 Doubled: -0.218750
    test 15 Doubled: 4.5625
    test 16 Doubled: 5.0
    test 17 Doubled: 0.656250
    test 18 Doubled: 2.0
    test 19 Doubled: 4.0
    test 20 Doubled: 1.340453  FAILED, KNOWN, expected 1.039635

    test 21 Empty: fstats.Fcook 'Empty'[16]  FAILED, KNOWN, expected fstats.Fcook 'Doubled'[16]
    test 22 Empty: 18
    test 23 Empty: fstats.Fcook 'Empty'[18] += None: invalid other

    test 24 Excel: 8
    test 25 Excel: -1.114187
    test 26 Excel: -0.939792
    test 27 Excel: 2.735294
    test 28 Excel: 2.50
    test 29 Excel: -0.342403
    test 30 Excel: -0.427052
    test 31 Excel: 2.061553
    test 32 Excel: 4.2
    test 33 Excel: 0.470372

    test 34 Fwelford: 8
    test 35 Fwelford: 5.0
    test 36 Fwelford: 2.0
    test 37 Fwelford: 4.0

    test 38 fcopy: fstats.Fwelford 'fcopy'[8]  FAILED, KNOWN, expected fstats.Fwelford 'Fwelford'[8]
    test 39 fcopy: 5.0
    test 40 fcopy: 2.0
    test 41 fcopy: 4.0
    test 42 fcopy: 8
    test 43 __add__: 18
    test 44 __add__: fstats.Fwelford '__add__'[18] += None: invalid other

    test 45 Flinear: 9
    test 46 Flinear: 0.988288
    test 47 Flinear: 167.682949
    test 48 Flinear: 23.422786
    test 49 __add__: 10
    test 50 __add__: 21
    test 51 __add__: fstats.Flinear '__add__'[21] += None: invalid other
    test 52 __add__: fstats.Flinear '__add__'[21] += (1, 2, 3): isodd(len(other))

    4 of 52 testFstats.py tests (7.7%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 74.235 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testFsums.py

    testing testFsums.py 22.04.18 (module pygeodesy.fsums 22.06.07)
    test 1 sum1: 0.0  FAILED, KNOWN, expected 2.0
    test 2 fsum: 2.0
    test 3 Fsum: 2.0
    test 4 sum2: 0.0  FAILED, KNOWN, expected 4.0
    test 5 fsum: 4.0
    test 6 Fsum: 4.0
    test 7 sum3: 0.0  FAILED, KNOWN, expected 8.0
    test 8 fsum: 8.0
    test 9 Fsum: 8.0
    test 10 sum4: 0.0  FAILED, KNOWN, expected 16.0
    test 11 fsum: 16.0
    test 12 Fsum: 16.0
    test 13 sum5: 0.0  FAILED, KNOWN, expected 32.0
    test 14 fsum: 32.0
    test 15 Fsum: 32.0
    test 16 sum6: 0.0  FAILED, KNOWN, expected 64.0
    test 17 fsum: 64.0
    test 18 Fsum: 64.0
    test 19 sum7: 0.0  FAILED, KNOWN, expected 128.0
    test 20 fsum: 128.0
    test 21 Fsum: 128.0
    test 22 sum8: 0.0  FAILED, KNOWN, expected 256.0
    test 23 fsum: 256.0
    test 24 Fsum: 256.0
    test 25 sum9: 0.0  FAILED, KNOWN, expected 512.0
    test 26 fsum: 512.0
    test 27 Fsum: 512.0
    test 28 sum10: 0.0  FAILED, KNOWN, expected 1024.0
    test 29 fsum: 1024.0
    test 30 Fsum: 1024.0
    test 31 sum: 1.005000000001
    test 32 fsum: 1.005000000001
    test 33 Fsum: 1.005000000001
    test 34 fsum: 1.0000000000000002e+16
    test 35 Fsum: 1.0000000000000002e+16

    test 36 sum1: -3.885337784451458e+84  FAILED, KNOWN, expected 0.01040035014143013
    test 37 fsum: 0.01040035014143013
    test 38 pow(4): fsums.Fsum 'pow'[15] (1.17002e-08, -7.06474e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (1.17002e-08, -5.18053e-25)
    test 39 pow(1): fsums.Fsum 'pow'[1] (0.0104004, -4.40896e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0104004, -4.40896e-19)
    test 40 pow(0): fsums.Fsum[1] (1.0, 0)
    test 41 ceil: True
    test 42 floor: True
    test 43 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 44 residual: 0
    test 45 is_exact: True
    test 46 Fsum: 0.01040035014143013
    test 47 Fsum: 0.01040035014143013
    test 48 sum2: -3.885337784451458e+84  FAILED, KNOWN, expected -3.407207065062557e-08
    test 49 fsum: -3.407207065062557e-08
    test 50 pow(4): fsums.Fsum 'pow'[9] (1.3477e-30, 1.05617e-47)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[13] (1.3477e-30, -1.8129e-47)
    test 51 pow(1): fsums.Fsum 'pow'[1] (-3.40721e-08, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.40721e-08, 2.82734e-24)
    test 52 pow(0): fsums.Fsum[1] (1.0, 0)
    test 53 ceil: True
    test 54 floor: True
    test 55 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 56 residual: 0
    test 57 is_exact: True
    test 58 Fsum: -3.407207065062557e-08
    test 59 Fsum: -3.407207065062557e-08
    test 60 sum3: -3.885337784451458e+84  FAILED, KNOWN, expected -24.326221927731446
    test 61 fsum: -24.326221927731446
    test 62 pow(4): fsums.Fsum 'pow'[25] (350186.0, -7.79933e-12)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[66] (350186.0, 1.26891e-12)
    test 63 pow(1): fsums.Fsum 'pow'[1] (-24.3262, -1.19039e-15)  FAILED, KNOWN, expected fsums.Fsum[80] (-24.3262, -1.19039e-15)
    test 64 pow(0): fsums.Fsum[1] (1.0, 0)
    test 65 ceil: True
    test 66 floor: True
    test 67 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 68 residual: 0
    test 69 is_exact: True
    test 70 Fsum: -24.326221927731446
    test 71 Fsum: -24.326221927731446
    test 72 sum4: 3.885337784451458e+84  FAILED, KNOWN, expected 1.3857565059990274e-14
    test 73 fsum: 1.3857565059990274e-14
    test 74 pow(4): fsums.Fsum 'pow'[6] (3.68763e-56, 1.70009e-72)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (3.68763e-56, 1.92242e-72)
    test 75 pow(1): fsums.Fsum 'pow'[1] (1.38576e-14, -6.49255e-31)  FAILED, KNOWN, expected fsums.Fsum[80] (1.38576e-14, -6.49255e-31)
    test 76 pow(0): fsums.Fsum[1] (1.0, 0)
    test 77 ceil: True
    test 78 floor: True
    test 79 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 80 residual: 0
    test 81 is_exact: True
    test 82 Fsum: 1.3857565059990274e-14
    test 83 Fsum: 1.3857565059990274e-14
    test 84 sum5: 3.885337784451458e+84  FAILED, KNOWN, expected 1.2330799587724448e-10
    test 85 fsum: 1.2330799587724448e-10
    test 86 pow(4): fsums.Fsum 'pow'[13] (2.31188e-40, -1.83812e-56)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[25] (2.31188e-40, -1.34089e-56)
    test 87 pow(1): fsums.Fsum 'pow'[1] (1.23308e-10, 9.75125e-27)  FAILED, KNOWN, expected fsums.Fsum[80] (1.23308e-10, 9.75125e-27)
    test 88 pow(0): fsums.Fsum[1] (1.0, 0)
    test 89 ceil: True
    test 90 floor: True
    test 91 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 92 residual: 0
    test 93 is_exact: True
    test 94 Fsum: 1.2330799587724448e-10
    test 95 Fsum: 1.2330799587724448e-10
    test 96 sum6: 3.885337784451458e+84  FAILED, KNOWN, expected 2.5325296698309382e-08
    test 97 fsum: 2.5325296698309382e-08
    test 98 pow(4): fsums.Fsum 'pow'[8] (4.11356e-31, -3.12765e-47)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (4.11356e-31, -3.12765e-47)
    test 99 pow(1): fsums.Fsum 'pow'[1] (2.53253e-08, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (2.53253e-08, -4.81387e-25)
    test 100 pow(0): fsums.Fsum[1] (1.0, 0)
    test 101 ceil: True
    test 102 floor: True
    test 103 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 104 residual: 0
    test 105 is_exact: True
    test 106 Fsum: 2.5325296698309382e-08
    test 107 Fsum: 2.5325296698309382e-08
    test 108 sum7: 8e-20  FAILED, KNOWN, expected 0.00033480439130549535
    test 109 fsum: 0.00033480439130549535
    test 110 pow(4): fsums.Fsum 'pow'[18] (1.25651e-14, 6.83777e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[25] (1.25651e-14, 6.83777e-31)
    test 111 pow(1): fsums.Fsum 'pow'[1] (0.000334804, -5.95494e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000334804, -5.95494e-21)
    test 112 pow(0): fsums.Fsum[1] (1.0, 0)
    test 113 ceil: True
    test 114 floor: True
    test 115 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 116 residual: 0
    test 117 is_exact: True
    test 118 Fsum: 0.00033480439130549535
    test 119 Fsum: 0.00033480439130549535
    test 120 sum8: 6.999469819655922  FAILED, KNOWN, expected -0.0012475459949500074
    test 121 fsum: -0.0012475459949500074
    test 122 pow(4): fsums.Fsum 'pow'[6] (2.42229e-12, 1.24044e-28)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (2.42229e-12, 4.97217e-29)
    test 123 pow(1): fsums.Fsum 'pow'[1] (-0.00124755, -1.00841e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00124755, -1.00841e-19)
    test 124 pow(0): fsums.Fsum[1] (1.0, 0)
    test 125 ceil: True
    test 126 floor: True
    test 127 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 128 residual: 0
    test 129 is_exact: True
    test 130 Fsum: -0.0012475459949500074
    test 131 Fsum: -0.0012475459949500074
    test 132 sum9: 6.6593391450890795  FAILED, KNOWN, expected -10.426718737063023
    test 133 fsum: -10.426718737063023
    test 134 pow(4): fsums.Fsum 'pow'[23] (11819.3, 4.65197e-13)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[53] (11819.3, 1.91161e-13)
    test 135 pow(1): fsums.Fsum 'pow'[1] (-10.4267, -3.82891e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-10.4267, -3.82891e-16)
    test 136 pow(0): fsums.Fsum[1] (1.0, 0)
    test 137 ceil: True
    test 138 floor: True
    test 139 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 140 residual: 0
    test 141 is_exact: True
    test 142 Fsum: -10.426718737063023
    test 143 Fsum: -10.426718737063023
    test 144 sum10: 3.885337784451458e+84  FAILED, KNOWN, expected 1.8186613662406292e-05
    test 145 fsum: 1.8186613662406292e-05
    test 146 pow(4): fsums.Fsum 'pow'[18] (1.09397e-19, 1.00652e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[51] (1.09397e-19, -7.03434e-36)
    test 147 pow(1): fsums.Fsum 'pow'[1] (1.81866e-05, -1.00302e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (1.81866e-05, -1.00302e-21)
    test 148 pow(0): fsums.Fsum[1] (1.0, 0)
    test 149 ceil: True
    test 150 floor: True
    test 151 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 152 residual: 0
    test 153 is_exact: True
    test 154 Fsum: 1.8186613662406292e-05
    test 155 Fsum: 1.8186613662406292e-05
    test 156 sum11: 3.885337784451458e+84  FAILED, KNOWN, expected 11.264640202399647
    test 157 fsum: 11.264640202399647
    test 158 pow(4): fsums.Fsum 'pow'[15] (16101.6, -7.40028e-13)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (16101.6, -7.24284e-13)
    test 159 pow(1): fsums.Fsum 'pow'[1] (11.2646, -4.42063e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (11.2646, -4.42063e-16)
    test 160 pow(0): fsums.Fsum[1] (1.0, 0)
    test 161 ceil: True
    test 162 floor: True
    test 163 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 164 residual: 0
    test 165 is_exact: True
    test 166 Fsum: 11.264640202399647
    test 167 Fsum: 11.264640202399647
    test 168 sum12: 3.885337784451458e+84  FAILED, KNOWN, expected 1.732001466488327e-07
    test 169 fsum: 1.732001466488327e-07
    test 170 pow(4): fsums.Fsum 'pow'[15] (8.99897e-28, 5.876e-44)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (8.99897e-28, 5.876e-44)
    test 171 pow(1): fsums.Fsum 'pow'[1] (1.732e-07, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (1.732e-07, 2.82734e-24)
    test 172 pow(0): fsums.Fsum[1] (1.0, 0)
    test 173 ceil: True
    test 174 floor: True
    test 175 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 176 residual: 0
    test 177 is_exact: True
    test 178 Fsum: 1.732001466488327e-07
    test 179 Fsum: 1.732001466488327e-07
    test 180 sum13: 3.885337784451458e+84  FAILED, KNOWN, expected -0.001144362960009265
    test 181 fsum: -0.001144362960009265
    test 182 pow(4): fsums.Fsum 'pow'[6] (1.71496e-12, -9.48882e-29)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[13] (1.71496e-12, -9.48882e-29)
    test 183 pow(1): fsums.Fsum 'pow'[1] (-0.00114436, 1.58293e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00114436, 1.58293e-20)
    test 184 pow(0): fsums.Fsum[1] (1.0, 0)
    test 185 ceil: True
    test 186 floor: True
    test 187 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 188 residual: 0
    test 189 is_exact: True
    test 190 Fsum: -0.001144362960009265
    test 191 Fsum: -0.001144362960009265
    test 192 sum14: 3.885337784451458e+84  FAILED, KNOWN, expected 0.040390017789443865
    test 193 fsum: 0.040390017789443865
    test 194 pow(4): fsums.Fsum 'pow'[24] (2.66131e-06, 1.21656e-22)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[86] (2.66131e-06, 1.21656e-22)
    test 195 pow(1): fsums.Fsum 'pow'[1] (0.04039, 4.61583e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.04039, 4.61583e-19)
    test 196 pow(0): fsums.Fsum[1] (1.0, 0)
    test 197 ceil: True
    test 198 floor: True
    test 199 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 200 residual: 0
    test 201 is_exact: True
    test 202 Fsum: 0.040390017789443865
    test 203 Fsum: 0.040390017789443865
    test 204 sum15: -3.885337784451458e+84  FAILED, KNOWN, expected -0.001162310085497223
    test 205 fsum: -0.001162310085497223
    test 206 pow(4): fsums.Fsum 'pow'[19] (1.82511e-12, 3.93925e-29)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (1.82511e-12, 8.51103e-29)
    test 207 pow(1): fsums.Fsum 'pow'[1] (-0.00116231, -9.73654e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00116231, -9.73654e-20)
    test 208 pow(0): fsums.Fsum[1] (1.0, 0)
    test 209 ceil: True
    test 210 floor: True
    test 211 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 212 residual: 0
    test 213 is_exact: True
    test 214 Fsum: -0.001162310085497223
    test 215 Fsum: -0.001162310085497223
    test 216 sum16: -3.885337784451458e+84  FAILED, KNOWN, expected -2.2739203785828116e-06
    test 217 fsum: -2.2739203785828116e-06
    test 218 pow(4): fsums.Fsum 'pow'[6] (2.67363e-23, -1.53349e-39)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (2.67363e-23, -1.53349e-39)
    test 219 pow(1): fsums.Fsum 'pow'[1] (-2.27392e-06, 3.26058e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.27392e-06, 3.26058e-23)
    test 220 pow(0): fsums.Fsum[1] (1.0, 0)
    test 221 ceil: True
    test 222 floor: True
    test 223 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 224 residual: 0
    test 225 is_exact: True
    test 226 Fsum: -2.2739203785828116e-06
    test 227 Fsum: -2.2739203785828116e-06
    test 228 sum17: -3.885337784451458e+84  FAILED, KNOWN, expected 0.02061149064790177
    test 229 fsum: 0.02061149064790177
    test 230 pow(4): fsums.Fsum 'pow'[19] (1.80484e-07, -2.49299e-24)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (1.80484e-07, -5.9325e-24)
    test 231 pow(1): fsums.Fsum 'pow'[1] (0.0206115, 1.24387e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0206115, 1.24387e-18)
    test 232 pow(0): fsums.Fsum[1] (1.0, 0)
    test 233 ceil: True
    test 234 floor: True
    test 235 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 236 residual: 0
    test 237 is_exact: True
    test 238 Fsum: 0.02061149064790177
    test 239 Fsum: 0.02061149064790177
    test 240 sum18: -2.723080967029763e-05  FAILED, KNOWN, expected -0.1079374533205036
    test 241 fsum: -0.1079374533205036
    test 242 pow(4): fsums.Fsum 'pow'[26] (0.000135734, -3.61752e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[57] (0.000135734, -3.61752e-21)
    test 243 pow(1): fsums.Fsum 'pow'[1] (-0.107937, 7.19175e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.107937, 7.19175e-19)
    test 244 pow(0): fsums.Fsum[1] (1.0, 0)
    test 245 ceil: True
    test 246 floor: True
    test 247 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 248 residual: 0
    test 249 is_exact: True
    test 250 Fsum: -0.1079374533205036
    test 251 Fsum: -0.1079374533205036
    test 252 sum19: -3.885337784451458e+84  FAILED, KNOWN, expected -2.6659089570808614e-15
    test 253 fsum: -2.6659089570808614e-15
    test 254 pow(4): fsums.Fsum 'pow'[6] (5.05105e-59, 4.9448e-76)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[19] (5.05105e-59, -6.21211e-76)
    test 255 pow(1): fsums.Fsum 'pow'[1] (-2.66591e-15, 1.39606e-31)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.66591e-15, 1.39606e-31)
    test 256 pow(0): fsums.Fsum[1] (1.0, 0)
    test 257 ceil: True
    test 258 floor: True
    test 259 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 260 residual: 0
    test 261 is_exact: True
    test 262 Fsum: -2.6659089570808614e-15
    test 263 Fsum: -2.6659089570808614e-15
    test 264 sum20: 3.885337784451458e+84  FAILED, KNOWN, expected 0.010636113922921586
    test 265 fsum: 0.010636113922921586
    test 266 pow(4): fsums.Fsum 'pow'[22] (1.27977e-08, -5.09447e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[69] (1.27977e-08, 2.09682e-25)
    test 267 pow(1): fsums.Fsum 'pow'[1] (0.0106361, -7.42949e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0106361, -7.42949e-19)
    test 268 pow(0): fsums.Fsum[1] (1.0, 0)
    test 269 ceil: True
    test 270 floor: True
    test 271 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 272 residual: 0
    test 273 is_exact: True
    test 274 Fsum: 0.010636113922921586
    test 275 Fsum: 0.010636113922921586
    test 276 sum21: -7.00000006093784  FAILED, KNOWN, expected 0.13576270945667715
    test 277 fsum: 0.13576270945667715
    test 278 pow(4): fsums.Fsum 'pow'[23] (0.000339721, -3.88839e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[40] (0.000339721, 5.84866e-21)
    test 279 pow(1): fsums.Fsum 'pow'[1] (0.135763, 1.23891e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.135763, 1.23891e-17)
    test 280 pow(0): fsums.Fsum[1] (1.0, 0)
    test 281 ceil: True
    test 282 floor: True
    test 283 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 284 residual: 0
    test 285 is_exact: True
    test 286 Fsum: 0.13576270945667715
    test 287 Fsum: 0.13576270945667715
    test 288 sum22: -3.885337784451458e+84  FAILED, KNOWN, expected 0.11560773866113548
    test 289 fsum: 0.11560773866113548
    test 290 pow(4): fsums.Fsum 'pow'[13] (0.000178627, -9.45234e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (0.000178627, -9.45234e-21)
    test 291 pow(1): fsums.Fsum 'pow'[1] (0.115608, -1.52939e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.115608, -1.52939e-18)
    test 292 pow(0): fsums.Fsum[1] (1.0, 0)
    test 293 ceil: True
    test 294 floor: True
    test 295 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 296 residual: 0
    test 297 is_exact: True
    test 298 Fsum: 0.11560773866113548
    test 299 Fsum: 0.11560773866113548
    test 300 sum23: 3.885337784451458e+84  FAILED, KNOWN, expected 9.190451903820916e-06
    test 301 fsum: 9.190451903820916e-06
    test 302 pow(4): fsums.Fsum 'pow'[20] (7.13424e-21, -5.83757e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (7.13424e-21, 1.46277e-38)
    test 303 pow(1): fsums.Fsum 'pow'[1] (9.19045e-06, 2.96572e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (9.19045e-06, 2.96572e-22)
    test 304 pow(0): fsums.Fsum[1] (1.0, 0)
    test 305 ceil: True
    test 306 floor: True
    test 307 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 308 residual: 0
    test 309 is_exact: True
    test 310 Fsum: 9.190451903820916e-06
    test 311 Fsum: 9.190451903820916e-06
    test 312 sum24: 3.885337784451458e+84  FAILED, KNOWN, expected 1.011581815408039e-12
    test 313 fsum: 1.011581815408039e-12
    test 314 pow(4): fsums.Fsum 'pow'[7] (1.04714e-48, 1.50509e-65)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[22] (1.04714e-48, 5.10719e-65)
    test 315 pow(1): fsums.Fsum 'pow'[1] (1.01158e-12, 5.77265e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (1.01158e-12, 5.77265e-29)
    test 316 pow(0): fsums.Fsum[1] (1.0, 0)
    test 317 ceil: True
    test 318 floor: True
    test 319 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 320 residual: 0
    test 321 is_exact: True
    test 322 Fsum: 1.011581815408039e-12
    test 323 Fsum: 1.011581815408039e-12
    test 324 sum25: -3.885337784451458e+84  FAILED, KNOWN, expected 0.817622994184285
    test 325 fsum: 0.817622994184285
    test 326 pow(4): fsums.Fsum 'pow'[24] (0.446902, 2.74542e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[61] (0.446902, 2.74542e-17)
    test 327 pow(1): fsums.Fsum 'pow'[1] (0.817623, -1.28328e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.817623, -1.28328e-17)
    test 328 pow(0): fsums.Fsum[1] (1.0, 0)
    test 329 ceil: True
    test 330 floor: True
    test 331 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 332 residual: 0
    test 333 is_exact: True
    test 334 Fsum: 0.817622994184285
    test 335 Fsum: 0.817622994184285
    test 336 sum26: 6.999995001794417  FAILED, KNOWN, expected -1.89379676215571e-05
    test 337 fsum: -1.89379676215571e-05
    test 338 pow(4): fsums.Fsum 'pow'[24] (1.28627e-19, 1.00048e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[56] (1.28627e-19, -1.04671e-35)
    test 339 pow(1): fsums.Fsum 'pow'[1] (-1.8938e-05, 1.65493e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.8938e-05, 1.65493e-21)
    test 340 pow(0): fsums.Fsum[1] (1.0, 0)
    test 341 ceil: True
    test 342 floor: True
    test 343 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 344 residual: 0
    test 345 is_exact: True
    test 346 Fsum: -1.89379676215571e-05
    test 347 Fsum: -1.89379676215571e-05
    test 348 sum27: -3.885337784451458e+84  FAILED, KNOWN, expected -0.0004064999252182546
    test 349 fsum: -0.0004064999252182546
    test 350 pow(4): fsums.Fsum 'pow'[20] (2.7305e-14, -9.34716e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (2.7305e-14, 1.16373e-30)
    test 351 pow(1): fsums.Fsum 'pow'[1] (-0.0004065, 1.5223e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0004065, 1.5223e-20)
    test 352 pow(0): fsums.Fsum[1] (1.0, 0)
    test 353 ceil: True
    test 354 floor: True
    test 355 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 356 residual: 0
    test 357 is_exact: True
    test 358 Fsum: -0.0004064999252182546
    test 359 Fsum: -0.0004064999252182546
    test 360 sum28: -3.885337784451458e+84  FAILED, KNOWN, expected -0.6613967974502877
    test 361 fsum: -0.6613967974502877
    test 362 pow(4): fsums.Fsum 'pow'[16] (0.191359, -1.30568e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[37] (0.191359, -1.30568e-17)
    test 363 pow(1): fsums.Fsum 'pow'[1] (-0.661397, -1.27009e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.661397, -1.27009e-17)
    test 364 pow(0): fsums.Fsum[1] (1.0, 0)
    test 365 ceil: True
    test 366 floor: True
    test 367 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 368 residual: 0
    test 369 is_exact: True
    test 370 Fsum: -0.6613967974502877
    test 371 Fsum: -0.6613967974502877
    test 372 sum29: -3.885337784451458e+84  FAILED, KNOWN, expected -0.0015880466901018867
    test 373 fsum: -0.0015880466901018867
    test 374 pow(4): fsums.Fsum 'pow'[24] (6.35994e-12, 5.4229e-29)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (6.35994e-12, 3.14498e-28)
    test 375 pow(1): fsums.Fsum 'pow'[1] (-0.00158805, -8.63047e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00158805, -8.63047e-20)
    test 376 pow(0): fsums.Fsum[1] (1.0, 0)
    test 377 ceil: True
    test 378 floor: True
    test 379 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 380 residual: 0
    test 381 is_exact: True
    test 382 Fsum: -0.0015880466901018867
    test 383 Fsum: -0.0015880466901018867
    test 384 sum30: 0.0  FAILED, KNOWN, expected 6.630557945104504e-06
    test 385 fsum: 6.630557945104504e-06
    test 386 pow(4): fsums.Fsum 'pow'[7] (1.93286e-21, -1.87674e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (1.93286e-21, -1.87674e-37)
    test 387 pow(1): fsums.Fsum 'pow'[1] (6.63056e-06, 1.61646e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (6.63056e-06, 1.61646e-22)
    test 388 pow(0): fsums.Fsum[1] (1.0, 0)
    test 389 ceil: True
    test 390 floor: True
    test 391 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 392 residual: 0
    test 393 is_exact: True
    test 394 Fsum: 6.630557945104504e-06
    test 395 Fsum: 6.630557945104504e-06
    test 396 sum31: -8.038336071717804  FAILED, KNOWN, expected -0.0002985665890839744
    test 397 fsum: -0.0002985665890839744
    test 398 pow(4): fsums.Fsum 'pow'[15] (7.9463e-15, -4.60832e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (7.9463e-15, 1.52169e-31)
    test 399 pow(1): fsums.Fsum 'pow'[1] (-0.000298567, -1.04912e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000298567, -1.04912e-20)
    test 400 pow(0): fsums.Fsum[1] (1.0, 0)
    test 401 ceil: True
    test 402 floor: True
    test 403 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 404 residual: 0
    test 405 is_exact: True
    test 406 Fsum: -0.0002985665890839744
    test 407 Fsum: -0.0002985665890839744
    test 408 sum32: -3.885337784451458e+84  FAILED, KNOWN, expected 0.07064761694643854
    test 409 fsum: 0.07064761694643854
    test 410 pow(4): fsums.Fsum 'pow'[27] (2.49109e-05, 3.05187e-22)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[61] (2.49109e-05, 8.04449e-22)
    test 411 pow(1): fsums.Fsum 'pow'[1] (0.0706476, 6.35503e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0706476, 6.35503e-18)
    test 412 pow(0): fsums.Fsum[1] (1.0, 0)
    test 413 ceil: True
    test 414 floor: True
    test 415 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 416 residual: 0
    test 417 is_exact: True
    test 418 Fsum: 0.07064761694643854
    test 419 Fsum: 0.07064761694643854
    test 420 sum33: -3.885337784451458e+84  FAILED, KNOWN, expected -2.2624694409378287e-12
    test 421 fsum: -2.2624694409378287e-12
    test 422 pow(4): fsums.Fsum 'pow'[8] (2.62018e-47, 2.1876e-63)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[22] (2.62018e-47, 3.49391e-64)
    test 423 pow(1): fsums.Fsum 'pow'[1] (-2.26247e-12, 5.77265e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.26247e-12, 5.77265e-29)
    test 424 pow(0): fsums.Fsum[1] (1.0, 0)
    test 425 ceil: True
    test 426 floor: True
    test 427 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 428 residual: 0
    test 429 is_exact: True
    test 430 Fsum: -2.2624694409378287e-12
    test 431 Fsum: -2.2624694409378287e-12
    test 432 sum34: 0.0  FAILED, KNOWN, expected -2.4746535438414505e-11
    test 433 fsum: -2.4746535438414505e-11
    test 434 pow(4): fsums.Fsum 'pow'[7] (3.75023e-43, -2.60033e-59)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[22] (3.75023e-43, 3.15856e-59)
    test 435 pow(1): fsums.Fsum 'pow'[1] (-2.47465e-11, -1.47109e-27)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.47465e-11, -1.47109e-27)
    test 436 pow(0): fsums.Fsum[1] (1.0, 0)
    test 437 ceil: True
    test 438 floor: True
    test 439 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 440 residual: 0
    test 441 is_exact: True
    test 442 Fsum: -2.4746535438414505e-11
    test 443 Fsum: -2.4746535438414505e-11
    test 444 sum35: 3.885337784451458e+84  FAILED, KNOWN, expected 0.00030721800354113104
    test 445 fsum: 0.00030721800354113104
    test 446 pow(4): fsums.Fsum 'pow'[16] (8.90813e-15, -7.64137e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[41] (8.90813e-15, 4.85011e-31)
    test 447 pow(1): fsums.Fsum 'pow'[1] (0.000307218, 1.49516e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000307218, 1.49516e-20)
    test 448 pow(0): fsums.Fsum[1] (1.0, 0)
    test 449 ceil: True
    test 450 floor: True
    test 451 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 452 residual: 0
    test 453 is_exact: True
    test 454 Fsum: 0.00030721800354113104
    test 455 Fsum: 0.00030721800354113104
    test 456 sum36: -3.885337784451458e+84  FAILED, KNOWN, expected -0.00019205461990923035
    test 457 fsum: -0.00019205461990923035
    test 458 pow(4): fsums.Fsum 'pow'[17] (1.3605e-15, 7.62987e-32)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[33] (1.3605e-15, -7.40474e-32)
    test 459 pow(1): fsums.Fsum 'pow'[1] (-0.000192055, -1.29607e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000192055, -1.29607e-20)
    test 460 pow(0): fsums.Fsum[1] (1.0, 0)
    test 461 ceil: True
    test 462 floor: True
    test 463 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 464 residual: 0
    test 465 is_exact: True
    test 466 Fsum: -0.00019205461990923035
    test 467 Fsum: -0.00019205461990923035
    test 468 sum37: 3.885337784451458e+84  FAILED, KNOWN, expected 3.715214303407481e-07
    test 469 fsum: 3.715214303407481e-07
    test 470 pow(4): fsums.Fsum 'pow'[12] (1.90518e-26, -5.60577e-43)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (1.90518e-26, -1.17504e-42)
    test 471 pow(1): fsums.Fsum 'pow'[1] (3.71521e-07, -2.27151e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (3.71521e-07, -2.27151e-23)
    test 472 pow(0): fsums.Fsum[1] (1.0, 0)
    test 473 ceil: True
    test 474 floor: True
    test 475 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 476 residual: 0
    test 477 is_exact: True
    test 478 Fsum: 3.715214303407481e-07
    test 479 Fsum: 3.715214303407481e-07
    test 480 sum38: 3.885337784451458e+84  FAILED, KNOWN, expected 8.120434843475979e-08
    test 481 fsum: 8.120434843475979e-08
    test 482 pow(4): fsums.Fsum 'pow'[12] (4.34828e-29, 1.25732e-45)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[25] (4.34828e-29, 8.53986e-46)
    test 483 pow(1): fsums.Fsum 'pow'[1] (8.12043e-08, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (8.12043e-08, 2.82734e-24)
    test 484 pow(0): fsums.Fsum[1] (1.0, 0)
    test 485 ceil: True
    test 486 floor: True
    test 487 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 488 residual: 0
    test 489 is_exact: True
    test 490 Fsum: 8.120434843475979e-08
    test 491 Fsum: 8.120434843475979e-08
    test 492 sum39: -3.885337784451458e+84  FAILED, KNOWN, expected -2.892172529732061e-05
    test 493 fsum: -2.892172529732061e-05
    test 494 pow(4): fsums.Fsum 'pow'[16] (6.99676e-19, 1.38947e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[37] (6.99676e-19, 2.37027e-35)
    test 495 pow(1): fsums.Fsum 'pow'[1] (-2.89217e-05, 1.64395e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.89217e-05, 1.64395e-21)
    test 496 pow(0): fsums.Fsum[1] (1.0, 0)
    test 497 ceil: True
    test 498 floor: True
    test 499 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 500 residual: 0
    test 501 is_exact: True
    test 502 Fsum: -2.892172529732061e-05
    test 503 Fsum: -2.892172529732061e-05
    test 504 sum40: 3.885337784451458e+84  FAILED, KNOWN, expected 7.5877623806069736e-06
    test 505 fsum: 7.5877623806069736e-06
    test 506 pow(4): fsums.Fsum 'pow'[19] (3.31478e-21, -7.60043e-38)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[45] (3.31478e-21, -7.60043e-38)
    test 507 pow(1): fsums.Fsum 'pow'[1] (7.58776e-06, -4.34948e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (7.58776e-06, -4.34948e-23)
    test 508 pow(0): fsums.Fsum[1] (1.0, 0)
    test 509 ceil: True
    test 510 floor: True
    test 511 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 512 residual: 0
    test 513 is_exact: True
    test 514 Fsum: 7.5877623806069736e-06
    test 515 Fsum: 7.5877623806069736e-06
    test 516 sum41: -3.885337784451458e+84  FAILED, KNOWN, expected 4.233859634059223e-06
    test 517 fsum: 4.233859634059223e-06
    test 518 pow(4): fsums.Fsum 'pow'[12] (3.21326e-22, 6.30752e-39)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (3.21326e-22, -4.59333e-39)
    test 519 pow(1): fsums.Fsum 'pow'[1] (4.23386e-06, -2.05924e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (4.23386e-06, -2.05924e-22)
    test 520 pow(0): fsums.Fsum[1] (1.0, 0)
    test 521 ceil: True
    test 522 floor: True
    test 523 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 524 residual: 0
    test 525 is_exact: True
    test 526 Fsum: 4.233859634059223e-06
    test 527 Fsum: 4.233859634059223e-06
    test 528 sum42: -3.885337784451458e+84  FAILED, KNOWN, expected 9.705842035567322e-05
    test 529 fsum: 9.705842035567322e-05
    test 530 pow(4): fsums.Fsum 'pow'[15] (8.87427e-17, -4.57099e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (8.87427e-17, -4.57099e-33)
    test 531 pow(1): fsums.Fsum 'pow'[1] (9.70584e-05, 2.12041e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (9.70584e-05, 2.12041e-21)
    test 532 pow(0): fsums.Fsum[1] (1.0, 0)
    test 533 ceil: True
    test 534 floor: True
    test 535 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 536 residual: 0
    test 537 is_exact: True
    test 538 Fsum: 9.705842035567322e-05
    test 539 Fsum: 9.705842035567322e-05
    test 540 sum43: -3.885337784451458e+84  FAILED, KNOWN, expected -0.3180379038349366
    test 541 fsum: -0.3180379038349366
    test 542 pow(4): fsums.Fsum 'pow'[27] (0.0102309, 6.08371e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[91] (0.0102309, -1.94748e-19)
    test 543 pow(1): fsums.Fsum 'pow'[1] (-0.318038, -2.65458e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.318038, -2.65458e-17)
    test 544 pow(0): fsums.Fsum[1] (1.0, 0)
    test 545 ceil: True
    test 546 floor: True
    test 547 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 548 residual: 0
    test 549 is_exact: True
    test 550 Fsum: -0.3180379038349366
    test 551 Fsum: -0.3180379038349366
    test 552 sum44: 3.885337784451458e+84  FAILED, KNOWN, expected 0.0027095241660034294
    test 553 fsum: 0.0027095241660034294
    test 554 pow(4): fsums.Fsum 'pow'[7] (5.38979e-11, 2.52254e-27)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (5.38979e-11, 2.76638e-27)
    test 555 pow(1): fsums.Fsum 'pow'[1] (0.00270952, -1.24604e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00270952, -1.24604e-19)
    test 556 pow(0): fsums.Fsum[1] (1.0, 0)
    test 557 ceil: True
    test 558 floor: True
    test 559 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 560 residual: 0
    test 561 is_exact: True
    test 562 Fsum: 0.0027095241660034294
    test 563 Fsum: 0.0027095241660034294
    test 564 sum45: 3.885337784451458e+84  FAILED, KNOWN, expected -0.008979606218565816
    test 565 fsum: -0.008979606218565816
    test 566 pow(4): fsums.Fsum 'pow'[22] (6.50173e-09, 1.59482e-26)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (6.50173e-09, 1.57981e-25)
    test 567 pow(1): fsums.Fsum 'pow'[1] (-0.00897961, -7.60135e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00897961, -7.60135e-19)
    test 568 pow(0): fsums.Fsum[1] (1.0, 0)
    test 569 ceil: True
    test 570 floor: True
    test 571 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 572 residual: 0
    test 573 is_exact: True
    test 574 Fsum: -0.008979606218565816
    test 575 Fsum: -0.008979606218565816
    test 576 sum46: 0.0  FAILED, KNOWN, expected -2.00119662395995e-05
    test 577 fsum: -2.00119662395995e-05
    test 578 pow(4): fsums.Fsum 'pow'[6] (1.60383e-19, -4.8386e-36)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[13] (1.60383e-19, -1.46875e-36)
    test 579 pow(1): fsums.Fsum 'pow'[1] (-2.0012e-05, 1.44263e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.0012e-05, 1.44263e-21)
    test 580 pow(0): fsums.Fsum[1] (1.0, 0)
    test 581 ceil: True
    test 582 floor: True
    test 583 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 584 residual: 0
    test 585 is_exact: True
    test 586 Fsum: -2.00119662395995e-05
    test 587 Fsum: -2.00119662395995e-05
    test 588 sum47: 3.885337784451458e+84  FAILED, KNOWN, expected 3.3639451716850535
    test 589 fsum: 3.3639451716850535
    test 590 pow(4): fsums.Fsum 'pow'[24] (128.055, -9.07805e-15)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[76] (128.055, -5.27726e-15)
    test 591 pow(1): fsums.Fsum 'pow'[1] (3.36395, 1.20441e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (3.36395, 1.20441e-16)
    test 592 pow(0): fsums.Fsum[1] (1.0, 0)
    test 593 ceil: True
    test 594 floor: True
    test 595 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 596 residual: 0
    test 597 is_exact: True
    test 598 Fsum: 3.3639451716850535
    test 599 Fsum: 3.3639451716850535
    test 600 sum48: 3.885337784451458e+84  FAILED, KNOWN, expected -0.00035229307709336077
    test 601 fsum: -0.00035229307709336077
    test 602 pow(4): fsums.Fsum 'pow'[18] (1.54034e-14, -1.40452e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[25] (1.54034e-14, -1.40452e-31)
    test 603 pow(1): fsums.Fsum 'pow'[1] (-0.000352293, 8.03073e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000352293, 8.03073e-22)
    test 604 pow(0): fsums.Fsum[1] (1.0, 0)
    test 605 ceil: True
    test 606 floor: True
    test 607 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 608 residual: 0
    test 609 is_exact: True
    test 610 Fsum: -0.00035229307709336077
    test 611 Fsum: -0.00035229307709336077
    test 612 sum49: 3.885337784451458e+84  FAILED, KNOWN, expected 1.8363313052677253e-05
    test 613 fsum: 1.8363313052677253e-05
    test 614 pow(4): fsums.Fsum 'pow'[8] (1.13711e-19, 1.18968e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (1.13711e-19, 5.25609e-36)
    test 615 pow(1): fsums.Fsum 'pow'[1] (1.83633e-05, 9.16035e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (1.83633e-05, 9.16035e-22)
    test 616 pow(0): fsums.Fsum[1] (1.0, 0)
    test 617 ceil: True
    test 618 floor: True
    test 619 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 620 residual: 0
    test 621 is_exact: True
    test 622 Fsum: 1.8363313052677253e-05
    test 623 Fsum: 1.8363313052677253e-05
    test 624 sum50: 3.885337784451458e+84  FAILED, KNOWN, expected 0.0856392419490764
    test 625 fsum: 0.0856392419490764
    test 626 pow(4): fsums.Fsum 'pow'[19] (5.37887e-05, 2.22952e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (5.37887e-05, 2.22952e-21)
    test 627 pow(1): fsums.Fsum 'pow'[1] (0.0856392, -1.80976e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0856392, -1.80976e-18)
    test 628 pow(0): fsums.Fsum[1] (1.0, 0)
    test 629 ceil: True
    test 630 floor: True
    test 631 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 632 residual: 0
    test 633 is_exact: True
    test 634 Fsum: 0.0856392419490764
    test 635 Fsum: 0.0856392419490764
    test 636 sum51: -3.885337784451458e+84  FAILED, KNOWN, expected 0.2769807789154557
    test 637 fsum: 0.2769807789154557
    test 638 pow(4): fsums.Fsum 'pow'[24] (0.00588571, 1.90964e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[65] (0.00588571, -6.35519e-21)
    test 639 pow(1): fsums.Fsum 'pow'[1] (0.276981, -2.28052e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.276981, -2.28052e-17)
    test 640 pow(0): fsums.Fsum[1] (1.0, 0)
    test 641 ceil: True
    test 642 floor: True
    test 643 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 644 residual: 0
    test 645 is_exact: True
    test 646 Fsum: 0.2769807789154557
    test 647 Fsum: 0.2769807789154557
    test 648 sum52: -3.885337784451458e+84  FAILED, KNOWN, expected -5.892573806817699e-06
    test 649 fsum: -5.892573806817699e-06
    test 650 pow(4): fsums.Fsum 'pow'[16] (1.20565e-21, 9.0602e-38)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (1.20565e-21, 4.7786e-38)
    test 651 pow(1): fsums.Fsum 'pow'[1] (-5.89257e-06, 1.19104e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.89257e-06, 1.19104e-22)
    test 652 pow(0): fsums.Fsum[1] (1.0, 0)
    test 653 ceil: True
    test 654 floor: True
    test 655 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 656 residual: 0
    test 657 is_exact: True
    test 658 Fsum: -5.892573806817699e-06
    test 659 Fsum: -5.892573806817699e-06
    test 660 sum53: 3.885337784451458e+84  FAILED, KNOWN, expected -7.977908261725494e-07
    test 661 fsum: -7.977908261725494e-07
    test 662 pow(4): fsums.Fsum 'pow'[15] (4.05094e-25, 9.00893e-42)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[37] (4.05094e-25, 9.00893e-42)
    test 663 pow(1): fsums.Fsum 'pow'[1] (-7.97791e-07, -4.43554e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (-7.97791e-07, -4.43554e-24)
    test 664 pow(0): fsums.Fsum[1] (1.0, 0)
    test 665 ceil: True
    test 666 floor: True
    test 667 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 668 residual: 0
    test 669 is_exact: True
    test 670 Fsum: -7.977908261725494e-07
    test 671 Fsum: -7.977908261725494e-07
    test 672 sum54: -3.885337784451458e+84  FAILED, KNOWN, expected 0.011019927815405292
    test 673 fsum: 0.011019927815405292
    test 674 pow(4): fsums.Fsum 'pow'[17] (1.47474e-08, -5.53233e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (1.47474e-08, 1.34525e-25)
    test 675 pow(1): fsums.Fsum 'pow'[1] (0.0110199, -7.1826e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0110199, -7.1826e-19)
    test 676 pow(0): fsums.Fsum[1] (1.0, 0)
    test 677 ceil: True
    test 678 floor: True
    test 679 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 680 residual: 0
    test 681 is_exact: True
    test 682 Fsum: 0.011019927815405292
    test 683 Fsum: 0.011019927815405292
    test 684 sum55: -13.9952364665844  FAILED, KNOWN, expected -9.063488160115645e-12
    test 685 fsum: -9.063488160115645e-12
    test 686 pow(4): fsums.Fsum 'pow'[8] (6.7481e-45, -1.71918e-61)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (6.7481e-45, -1.71918e-61)
    test 687 pow(1): fsums.Fsum 'pow'[1] (-9.06349e-12, 5.77265e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (-9.06349e-12, 5.77265e-29)
    test 688 pow(0): fsums.Fsum[1] (1.0, 0)
    test 689 ceil: True
    test 690 floor: True
    test 691 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 692 residual: 0
    test 693 is_exact: True
    test 694 Fsum: -9.063488160115645e-12
    test 695 Fsum: -9.063488160115645e-12
    test 696 sum56: -3.885337784451458e+84  FAILED, KNOWN, expected 0.012230865144523848
    test 697 fsum: 0.012230865144523848
    test 698 pow(4): fsums.Fsum 'pow'[22] (2.23784e-08, -1.24758e-24)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[40] (2.23784e-08, -5.28845e-25)
    test 699 pow(1): fsums.Fsum 'pow'[1] (0.0122309, 2.81628e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0122309, 2.81628e-19)
    test 700 pow(0): fsums.Fsum[1] (1.0, 0)
    test 701 ceil: True
    test 702 floor: True
    test 703 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 704 residual: 0
    test 705 is_exact: True
    test 706 Fsum: 0.012230865144523848
    test 707 Fsum: 0.012230865144523848
    test 708 sum57: -3.885337784451458e+84  FAILED, KNOWN, expected 6.358139425205988e-09
    test 709 fsum: 6.358139425205988e-09
    test 710 pow(4): fsums.Fsum 'pow'[10] (1.63426e-33, -1.26143e-49)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[22] (1.63426e-33, -3.31737e-50)
    test 711 pow(1): fsums.Fsum 'pow'[1] (6.35814e-09, -2.74592e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (6.35814e-09, -2.74592e-25)
    test 712 pow(0): fsums.Fsum[1] (1.0, 0)
    test 713 ceil: True
    test 714 floor: True
    test 715 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 716 residual: 0
    test 717 is_exact: True
    test 718 Fsum: 6.358139425205988e-09
    test 719 Fsum: 6.358139425205988e-09
    test 720 sum58: -7.0  FAILED, KNOWN, expected 0.012653177721113558
    test 721 fsum: 0.012653177721113558
    test 722 pow(4): fsums.Fsum 'pow'[21] (2.56329e-08, -1.08642e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (2.56329e-08, -1.08642e-25)
    test 723 pow(1): fsums.Fsum 'pow'[1] (0.0126532, 3.94914e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0126532, 3.94914e-19)
    test 724 pow(0): fsums.Fsum[1] (1.0, 0)
    test 725 ceil: True
    test 726 floor: True
    test 727 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 728 residual: 0
    test 729 is_exact: True
    test 730 Fsum: 0.012653177721113558
    test 731 Fsum: 0.012653177721113558
    test 732 sum59: 0.0  FAILED, KNOWN, expected -5.1282936750388455e-05
    test 733 fsum: -5.1282936750388455e-05
    test 734 pow(4): fsums.Fsum 'pow'[20] (6.91658e-18, 1.51889e-34)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[41] (6.91658e-18, -1.65456e-34)
    test 735 pow(1): fsums.Fsum 'pow'[1] (-5.12829e-05, 2.32291e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.12829e-05, 2.32291e-21)
    test 736 pow(0): fsums.Fsum[1] (1.0, 0)
    test 737 ceil: True
    test 738 floor: True
    test 739 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 740 residual: 0
    test 741 is_exact: True
    test 742 Fsum: -5.1282936750388455e-05
    test 743 Fsum: -5.1282936750388455e-05
    test 744 sum60: 3.885337784451458e+84  FAILED, KNOWN, expected 1.6853399751454644e-11
    test 745 fsum: 1.6853399751454644e-11
    test 746 pow(4): fsums.Fsum 'pow'[8] (8.06771e-44, 9.4224e-61)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (8.06771e-44, -8.81556e-61)
    test 747 pow(1): fsums.Fsum 'pow'[1] (1.68534e-11, -1.34576e-27)  FAILED, KNOWN, expected fsums.Fsum[80] (1.68534e-11, -1.34576e-27)
    test 748 pow(0): fsums.Fsum[1] (1.0, 0)
    test 749 ceil: True
    test 750 floor: True
    test 751 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 752 residual: 0
    test 753 is_exact: True
    test 754 Fsum: 1.6853399751454644e-11
    test 755 Fsum: 1.6853399751454644e-11
    test 756 sum61: 3.885337784451458e+84  FAILED, KNOWN, expected -1.9100467165805504e-08
    test 757 fsum: -1.9100467165805504e-08
    test 758 pow(4): fsums.Fsum 'pow'[12] (1.33099e-31, -7.7518e-48)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[25] (1.33099e-31, -7.7518e-48)
    test 759 pow(1): fsums.Fsum 'pow'[1] (-1.91005e-08, -5.07416e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.91005e-08, -5.07416e-25)
    test 760 pow(0): fsums.Fsum[1] (1.0, 0)
    test 761 ceil: True
    test 762 floor: True
    test 763 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 764 residual: 0
    test 765 is_exact: True
    test 766 Fsum: -1.9100467165805504e-08
    test 767 Fsum: -1.9100467165805504e-08
    test 768 sum62: 3.885337784451458e+84  FAILED, KNOWN, expected 2.8403923082666448e-09
    test 769 fsum: 2.8403923082666448e-09
    test 770 pow(4): fsums.Fsum 'pow'[11] (6.50899e-35, -1.52238e-51)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (6.50899e-35, -3.26178e-51)
    test 771 pow(1): fsums.Fsum 'pow'[1] (2.84039e-09, -1.71195e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (2.84039e-09, -1.71195e-25)
    test 772 pow(0): fsums.Fsum[1] (1.0, 0)
    test 773 ceil: True
    test 774 floor: True
    test 775 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 776 residual: 0
    test 777 is_exact: True
    test 778 Fsum: 2.8403923082666448e-09
    test 779 Fsum: 2.8403923082666448e-09
    test 780 sum63: -3.885337784451458e+84  FAILED, KNOWN, expected -2.0195738583411897e-13
    test 781 fsum: -2.0195738583411897e-13
    test 782 pow(4): fsums.Fsum 'pow'[8] (1.66356e-51, -6.7055e-68)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (1.66356e-51, -4.42314e-69)
    test 783 pow(1): fsums.Fsum 'pow'[1] (-2.01957e-13, 7.23935e-30)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.01957e-13, 7.23935e-30)
    test 784 pow(0): fsums.Fsum[1] (1.0, 0)
    test 785 ceil: True
    test 786 floor: True
    test 787 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 788 residual: 0
    test 789 is_exact: True
    test 790 Fsum: -2.0195738583411897e-13
    test 791 Fsum: -2.0195738583411897e-13
    test 792 sum64: 0.0  FAILED, KNOWN, expected 0.30653444387265294
    test 793 fsum: 0.30653444387265294
    test 794 pow(4): fsums.Fsum 'pow'[19] (0.00882911, 5.65397e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[57] (0.00882911, 5.65397e-19)
    test 795 pow(1): fsums.Fsum 'pow'[1] (0.306534, 4.90745e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.306534, 4.90745e-18)
    test 796 pow(0): fsums.Fsum[1] (1.0, 0)
    test 797 ceil: True
    test 798 floor: True
    test 799 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 800 residual: 0
    test 801 is_exact: True
    test 802 Fsum: 0.30653444387265294
    test 803 Fsum: 0.30653444387265294
    test 804 sum65: -3.885337784451458e+84  FAILED, KNOWN, expected 0.0009397421273094034
    test 805 fsum: 0.0009397421273094034
    test 806 pow(4): fsums.Fsum 'pow'[17] (7.79893e-13, 3.50027e-29)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (7.79893e-13, 4.24734e-29)
    test 807 pow(1): fsums.Fsum 'pow'[1] (0.000939742, -4.57899e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000939742, -4.57899e-20)
    test 808 pow(0): fsums.Fsum[1] (1.0, 0)
    test 809 ceil: True
    test 810 floor: True
    test 811 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 812 residual: 0
    test 813 is_exact: True
    test 814 Fsum: 0.0009397421273094034
    test 815 Fsum: 0.0009397421273094034
    test 816 sum66: -3.885337784451458e+84  FAILED, KNOWN, expected -0.0030233437254849334
    test 817 fsum: -0.0030233437254849334
    test 818 pow(4): fsums.Fsum 'pow'[27] (8.35507e-11, 2.13783e-27)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[76] (8.35507e-11, 4.69792e-27)
    test 819 pow(1): fsums.Fsum 'pow'[1] (-0.00302334, -1.82582e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00302334, -1.82582e-19)
    test 820 pow(0): fsums.Fsum[1] (1.0, 0)
    test 821 ceil: True
    test 822 floor: True
    test 823 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 824 residual: 0
    test 825 is_exact: True
    test 826 Fsum: -0.0030233437254849334
    test 827 Fsum: -0.0030233437254849334
    test 828 sum67: -2.013923679616747  FAILED, KNOWN, expected -3.487429757935467e-12
    test 829 fsum: -3.487429757935467e-12
    test 830 pow(4): fsums.Fsum 'pow'[8] (1.47918e-46, 9.65312e-63)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[45] (1.47918e-46, 9.65312e-63)
    test 831 pow(1): fsums.Fsum 'pow'[1] (-3.48743e-12, 5.77265e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.48743e-12, 5.77265e-29)
    test 832 pow(0): fsums.Fsum[1] (1.0, 0)
    test 833 ceil: True
    test 834 floor: True
    test 835 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 836 residual: 0
    test 837 is_exact: True
    test 838 Fsum: -3.487429757935467e-12
    test 839 Fsum: -3.487429757935467e-12
    test 840 sum68: 3.885337784451458e+84  FAILED, KNOWN, expected 15.787822258933302
    test 841 fsum: 15.787822258933302
    test 842 pow(4): fsums.Fsum 'pow'[19] (62128.2, 1.57225e-12)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[40] (62128.2, 1.57225e-12)
    test 843 pow(1): fsums.Fsum 'pow'[1] (15.7878, 9.98836e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (15.7878, 9.98836e-17)
    test 844 pow(0): fsums.Fsum[1] (1.0, 0)
    test 845 ceil: True
    test 846 floor: True
    test 847 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 848 residual: 0
    test 849 is_exact: True
    test 850 Fsum: 15.787822258933302
    test 851 Fsum: 15.787822258933302
    test 852 sum69: 3.885337784451458e+84  FAILED, KNOWN, expected -0.6467066666107185
    test 853 fsum: -0.6467066666107185
    test 854 pow(4): fsums.Fsum 'pow'[16] (0.174916, -1.14192e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (0.174916, -1.14192e-17)
    test 855 pow(1): fsums.Fsum 'pow'[1] (-0.646707, -1.50999e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.646707, -1.50999e-17)
    test 856 pow(0): fsums.Fsum[1] (1.0, 0)
    test 857 ceil: True
    test 858 floor: True
    test 859 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 860 residual: 0
    test 861 is_exact: True
    test 862 Fsum: -0.6467066666107185
    test 863 Fsum: -0.6467066666107185
    test 864 sum70: 3.885337784451458e+84  FAILED, KNOWN, expected -1.198378686455721e-06
    test 865 fsum: -1.198378686455721e-06
    test 866 pow(4): fsums.Fsum 'pow'[8] (2.06242e-24, -1.68355e-40)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (2.06242e-24, -9.10329e-41)
    test 867 pow(1): fsums.Fsum 'pow'[1] (-1.19838e-06, 5.53533e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.19838e-06, 5.53533e-23)
    test 868 pow(0): fsums.Fsum[1] (1.0, 0)
    test 869 ceil: True
    test 870 floor: True
    test 871 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 872 residual: 0
    test 873 is_exact: True
    test 874 Fsum: -1.198378686455721e-06
    test 875 Fsum: -1.198378686455721e-06
    test 876 sum71: 3.885337784451458e+84  FAILED, KNOWN, expected -4.617219124252152e-08
    test 877 fsum: -4.617219124252152e-08
    test 878 pow(4): fsums.Fsum 'pow'[11] (4.54488e-30, 1.89538e-46)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (4.54488e-30, 1.89538e-46)
    test 879 pow(1): fsums.Fsum 'pow'[1] (-4.61722e-08, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-4.61722e-08, -4.81387e-25)
    test 880 pow(0): fsums.Fsum[1] (1.0, 0)
    test 881 ceil: True
    test 882 floor: True
    test 883 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 884 residual: 0
    test 885 is_exact: True
    test 886 Fsum: -4.617219124252152e-08
    test 887 Fsum: -4.617219124252152e-08
    test 888 sum72: -3.885337784451458e+84  FAILED, KNOWN, expected -1.438222800726873e-08
    test 889 fsum: -1.438222800726873e-08
    test 890 pow(4): fsums.Fsum 'pow'[11] (4.27863e-32, 1.0038e-48)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[22] (4.27863e-32, 6.29188e-49)
    test 891 pow(1): fsums.Fsum 'pow'[1] (-1.43822e-08, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.43822e-08, -4.81387e-25)
    test 892 pow(0): fsums.Fsum[1] (1.0, 0)
    test 893 ceil: True
    test 894 floor: True
    test 895 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 896 residual: 0
    test 897 is_exact: True
    test 898 Fsum: -1.438222800726873e-08
    test 899 Fsum: -1.438222800726873e-08
    test 900 sum73: 3.885337784451458e+84  FAILED, KNOWN, expected -18.58636682502674
    test 901 fsum: -18.58636682502674
    test 902 pow(4): fsums.Fsum 'pow'[14] (119338.0, 6.10311e-12)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (119338.0, 6.10311e-12)
    test 903 pow(1): fsums.Fsum 'pow'[1] (-18.5864, -2.37634e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-18.5864, -2.37634e-16)
    test 904 pow(0): fsums.Fsum[1] (1.0, 0)
    test 905 ceil: True
    test 906 floor: True
    test 907 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 908 residual: 0
    test 909 is_exact: True
    test 910 Fsum: -18.58636682502674
    test 911 Fsum: -18.58636682502674
    test 912 sum74: 3.885337784451458e+84  FAILED, KNOWN, expected 1.0575402039974096e-05
    test 913 fsum: 1.0575402039974096e-05
    test 914 pow(4): fsums.Fsum 'pow'[11] (1.2508e-20, -7.07634e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[76] (1.2508e-20, 7.37853e-37)
    test 915 pow(1): fsums.Fsum 'pow'[1] (1.05754e-05, 4.61499e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (1.05754e-05, 4.61499e-22)
    test 916 pow(0): fsums.Fsum[1] (1.0, 0)
    test 917 ceil: True
    test 918 floor: True
    test 919 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 920 residual: 0
    test 921 is_exact: True
    test 922 Fsum: 1.0575402039974096e-05
    test 923 Fsum: 1.0575402039974096e-05
    test 924 sum75: -3.885337784451458e+84  FAILED, KNOWN, expected 0.0033973389629324024
    test 925 fsum: 0.0033973389629324024
    test 926 pow(4): fsums.Fsum 'pow'[6] (1.33216e-10, -6.99575e-27)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (1.33216e-10, 1.2557e-26)
    test 927 pow(1): fsums.Fsum 'pow'[1] (0.00339734, 2.0472e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00339734, 2.0472e-19)
    test 928 pow(0): fsums.Fsum[1] (1.0, 0)
    test 929 ceil: True
    test 930 floor: True
    test 931 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 932 residual: 0
    test 933 is_exact: True
    test 934 Fsum: 0.0033973389629324024
    test 935 Fsum: 0.0033973389629324024
    test 936 sum76: 7.054427262798462  FAILED, KNOWN, expected -2.417733562211998e-07
    test 937 fsum: -2.417733562211998e-07
    test 938 pow(4): fsums.Fsum 'pow'[13] (3.41691e-27, -1.22059e-43)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (3.41691e-27, -1.32155e-43)
    test 939 pow(1): fsums.Fsum 'pow'[1] (-2.41773e-07, -1.05324e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.41773e-07, -1.05324e-23)
    test 940 pow(0): fsums.Fsum[1] (1.0, 0)
    test 941 ceil: True
    test 942 floor: True
    test 943 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 944 residual: 0
    test 945 is_exact: True
    test 946 Fsum: -2.417733562211998e-07
    test 947 Fsum: -2.417733562211998e-07
    test 948 sum77: 8e-20  FAILED, KNOWN, expected -0.00020572596279247487
    test 949 fsum: -0.00020572596279247487
    test 950 pow(4): fsums.Fsum 'pow'[17] (1.79125e-15, -1.75257e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (1.79125e-15, -1.75257e-31)
    test 951 pow(1): fsums.Fsum 'pow'[1] (-0.000205726, 5.03209e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000205726, 5.03209e-21)
    test 952 pow(0): fsums.Fsum[1] (1.0, 0)
    test 953 ceil: True
    test 954 floor: True
    test 955 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 956 residual: 0
    test 957 is_exact: True
    test 958 Fsum: -0.00020572596279247487
    test 959 Fsum: -0.00020572596279247487
    test 960 sum78: -3.885337784451458e+84  FAILED, KNOWN, expected -8.993446684077893e-07
    test 961 fsum: -8.993446684077893e-07
    test 962 pow(4): fsums.Fsum 'pow'[12] (6.54191e-25, -1.75318e-41)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (6.54191e-25, -2.76973e-41)
    test 963 pow(1): fsums.Fsum 'pow'[1] (-8.99345e-07, -5.01122e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-8.99345e-07, -5.01122e-23)
    test 964 pow(0): fsums.Fsum[1] (1.0, 0)
    test 965 ceil: True
    test 966 floor: True
    test 967 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 968 residual: 0
    test 969 is_exact: True
    test 970 Fsum: -8.993446684077893e-07
    test 971 Fsum: -8.993446684077893e-07
    test 972 sum79: -3.885337784451458e+84  FAILED, KNOWN, expected -5.2966739862495284e-14
    test 973 fsum: -5.2966739862495284e-14
    test 974 pow(4): fsums.Fsum 'pow'[6] (7.87069e-54, -5.51869e-70)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (7.87069e-54, -5.51869e-70)
    test 975 pow(1): fsums.Fsum 'pow'[1] (-5.29667e-14, 9.28467e-31)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.29667e-14, 9.28467e-31)
    test 976 pow(0): fsums.Fsum[1] (1.0, 0)
    test 977 ceil: True
    test 978 floor: True
    test 979 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 980 residual: 0
    test 981 is_exact: True
    test 982 Fsum: -5.2966739862495284e-14
    test 983 Fsum: -5.2966739862495284e-14
    test 984 sum80: 0.0  FAILED, KNOWN, expected 0.00019465295469601844
    test 985 fsum: 0.00019465295469601844
    test 986 pow(4): fsums.Fsum 'pow'[8] (1.43563e-15, -1.82177e-32)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (1.43563e-15, 3.53005e-32)
    test 987 pow(1): fsums.Fsum 'pow'[1] (0.000194653, 9.6956e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000194653, 9.6956e-21)
    test 988 pow(0): fsums.Fsum[1] (1.0, 0)
    test 989 ceil: True
    test 990 floor: True
    test 991 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 992 residual: 0
    test 993 is_exact: True
    test 994 Fsum: 0.00019465295469601844
    test 995 Fsum: 0.00019465295469601844
    test 996 sum81: -3.885337784451458e+84  FAILED, KNOWN, expected -14.370943903718809
    test 997 fsum: -14.370943903718809
    test 998 pow(4): fsums.Fsum 'pow'[26] (42652.2, 7.7081e-13)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[86] (42652.2, 2.177e-12)
    test 999 pow(1): fsums.Fsum 'pow'[1] (-14.3709, -8.52425e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-14.3709, -8.52425e-16)
    test 1000 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1001 ceil: True
    test 1002 floor: True
    test 1003 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1004 residual: 0
    test 1005 is_exact: True
    test 1006 Fsum: -14.370943903718809
    test 1007 Fsum: -14.370943903718809
    test 1008 sum82: 3.885337784451458e+84  FAILED, KNOWN, expected 0.004881740471475278
    test 1009 fsum: 0.004881740471475278
    test 1010 pow(4): fsums.Fsum 'pow'[20] (5.67935e-10, 1.87747e-26)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (5.67935e-10, 4.14283e-26)
    test 1011 pow(1): fsums.Fsum 'pow'[1] (0.00488174, -3.06676e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00488174, -3.06676e-19)
    test 1012 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1013 ceil: True
    test 1014 floor: True
    test 1015 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1016 residual: 0
    test 1017 is_exact: True
    test 1018 Fsum: 0.004881740471475278
    test 1019 Fsum: 0.004881740471475278
    test 1020 sum83: 3.885337784451458e+84  FAILED, KNOWN, expected 0.0062527079315600215
    test 1021 fsum: 0.0062527079315600215
    test 1022 pow(4): fsums.Fsum 'pow'[17] (1.52853e-09, 8.19484e-26)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[37] (1.52853e-09, 8.19484e-26)
    test 1023 pow(1): fsums.Fsum 'pow'[1] (0.00625271, 8.38061e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00625271, 8.38061e-20)
    test 1024 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1025 ceil: True
    test 1026 floor: True
    test 1027 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1028 residual: 0
    test 1029 is_exact: True
    test 1030 Fsum: 0.0062527079315600215
    test 1031 Fsum: 0.0062527079315600215
    test 1032 sum84: -3.885337784451458e+84  FAILED, KNOWN, expected 2.2259048628846993e-07
    test 1033 fsum: 2.2259048628846993e-07
    test 1034 pow(4): fsums.Fsum 'pow'[13] (2.45486e-27, 1.24726e-43)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (2.45486e-27, 1.24726e-43)
    test 1035 pow(1): fsums.Fsum 'pow'[1] (2.2259e-07, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (2.2259e-07, 2.82734e-24)
    test 1036 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1037 ceil: True
    test 1038 floor: True
    test 1039 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1040 residual: 0
    test 1041 is_exact: True
    test 1042 Fsum: 2.2259048628846993e-07
    test 1043 Fsum: 2.2259048628846993e-07
    test 1044 sum85: 0.0  FAILED, KNOWN, expected 0.010570005500886053
    test 1045 fsum: 0.010570005500886053
    test 1046 pow(4): fsums.Fsum 'pow'[29] (1.24825e-08, -3.91535e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[53] (1.24825e-08, -5.3174e-25)
    test 1047 pow(1): fsums.Fsum 'pow'[1] (0.01057, 5.58198e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.01057, 5.58198e-19)
    test 1048 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1049 ceil: True
    test 1050 floor: True
    test 1051 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1052 residual: 0
    test 1053 is_exact: True
    test 1054 Fsum: 0.010570005500886053
    test 1055 Fsum: 0.010570005500886053
    test 1056 sum86: -3.885337784451458e+84  FAILED, KNOWN, expected -5.0737477962506466e-05
    test 1057 fsum: -5.0737477962506466e-05
    test 1058 pow(4): fsums.Fsum 'pow'[17] (6.62698e-18, -8.85153e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[28] (6.62698e-18, -3.48465e-34)
    test 1059 pow(1): fsums.Fsum 'pow'[1] (-5.07375e-05, 1.64395e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.07375e-05, 1.64395e-21)
    test 1060 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1061 ceil: True
    test 1062 floor: True
    test 1063 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1064 residual: 0
    test 1065 is_exact: True
    test 1066 Fsum: -5.0737477962506466e-05
    test 1067 Fsum: -5.0737477962506466e-05
    test 1068 sum87: 0.0  FAILED, KNOWN, expected 0.014099588889561867
    test 1069 fsum: 0.014099588889561867
    test 1070 pow(4): fsums.Fsum 'pow'[16] (3.95208e-08, 3.25262e-24)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (3.95208e-08, 3.25262e-24)
    test 1071 pow(1): fsums.Fsum 'pow'[1] (0.0140996, -3.00112e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0140996, -3.00112e-19)
    test 1072 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1073 ceil: True
    test 1074 floor: True
    test 1075 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1076 residual: 0
    test 1077 is_exact: True
    test 1078 Fsum: 0.014099588889561867
    test 1079 Fsum: 0.014099588889561867
    test 1080 sum88: 3.885337784451458e+84  FAILED, KNOWN, expected 0.12014293361376206
    test 1081 fsum: 0.12014293361376206
    test 1082 pow(4): fsums.Fsum 'pow'[28] (0.00020835, -7.81509e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[57] (0.00020835, -6.76188e-21)
    test 1083 pow(1): fsums.Fsum 'pow'[1] (0.120143, 2.78085e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.120143, 2.78085e-18)
    test 1084 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1085 ceil: True
    test 1086 floor: True
    test 1087 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1088 residual: 0
    test 1089 is_exact: True
    test 1090 Fsum: 0.12014293361376206
    test 1091 Fsum: 0.12014293361376206
    test 1092 sum89: -3.885337784451458e+84  FAILED, KNOWN, expected -0.00027394397659386677
    test 1093 fsum: -0.00027394397659386677
    test 1094 pow(4): fsums.Fsum 'pow'[26] (5.6318e-15, 2.91841e-32)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[57] (5.6318e-15, 2.33539e-31)
    test 1095 pow(1): fsums.Fsum 'pow'[1] (-0.000273944, -1.49181e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000273944, -1.49181e-20)
    test 1096 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1097 ceil: True
    test 1098 floor: True
    test 1099 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1100 residual: 0
    test 1101 is_exact: True
    test 1102 Fsum: -0.00027394397659386677
    test 1103 Fsum: -0.00027394397659386677
    test 1104 sum90: 3.885337784451458e+84  FAILED, KNOWN, expected 1.4287464098830156e-07
    test 1105 fsum: 1.4287464098830156e-07
    test 1106 pow(4): fsums.Fsum 'pow'[13] (4.16697e-28, 4.42797e-45)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (4.16697e-28, 1.50971e-44)
    test 1107 pow(1): fsums.Fsum 'pow'[1] (1.42875e-07, 1.14223e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (1.42875e-07, 1.14223e-23)
    test 1108 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1109 ceil: True
    test 1110 floor: True
    test 1111 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1112 residual: 0
    test 1113 is_exact: True
    test 1114 Fsum: 1.4287464098830156e-07
    test 1115 Fsum: 1.4287464098830156e-07
    test 1116 sum91: -3.885337784451458e+84  FAILED, KNOWN, expected 1.0131169724682786e-05
    test 1117 fsum: 1.0131169724682786e-05
    test 1118 pow(4): fsums.Fsum 'pow'[16] (1.05351e-20, -1.132e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[45] (1.05351e-20, -2.91234e-37)
    test 1119 pow(1): fsums.Fsum 'pow'[1] (1.01312e-05, 6.10653e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (1.01312e-05, 6.10653e-22)
    test 1120 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1121 ceil: True
    test 1122 floor: True
    test 1123 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1124 residual: 0
    test 1125 is_exact: True
    test 1126 Fsum: 1.0131169724682786e-05
    test 1127 Fsum: 1.0131169724682786e-05
    test 1128 sum92: -3.885337784451458e+84  FAILED, KNOWN, expected -4.284454020574874e-09
    test 1129 fsum: -4.284454020574874e-09
    test 1130 pow(4): fsums.Fsum 'pow'[14] (3.36963e-34, 4.34743e-51)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[33] (3.36963e-34, -3.03493e-51)
    test 1131 pow(1): fsums.Fsum 'pow'[1] (-4.28445e-09, 3.45793e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-4.28445e-09, 3.45793e-25)
    test 1132 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1133 ceil: True
    test 1134 floor: True
    test 1135 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1136 residual: 0
    test 1137 is_exact: True
    test 1138 Fsum: -4.284454020574874e-09
    test 1139 Fsum: -4.284454020574874e-09
    test 1140 sum93: -3.885337784451458e+84  FAILED, KNOWN, expected 0.00027996253428085353
    test 1141 fsum: 0.00027996253428085353
    test 1142 pow(4): fsums.Fsum 'pow'[7] (6.14327e-15, 2.2091e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[11] (6.14327e-15, -2.7567e-32)
    test 1143 pow(1): fsums.Fsum 'pow'[1] (0.000279963, -2.11201e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000279963, -2.11201e-20)
    test 1144 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1145 ceil: True
    test 1146 floor: True
    test 1147 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1148 residual: 0
    test 1149 is_exact: True
    test 1150 Fsum: 0.00027996253428085353
    test 1151 Fsum: 0.00027996253428085353
    test 1152 sum94: -3.885337784451458e+84  FAILED, KNOWN, expected -2.0640678875295797
    test 1153 fsum: -2.0640678875295797
    test 1154 pow(4): fsums.Fsum 'pow'[18] (18.1508, 1.64357e-15)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[37] (18.1508, 1.76103e-15)
    test 1155 pow(1): fsums.Fsum 'pow'[1] (-2.06407, 1.82211e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.06407, 1.82211e-16)
    test 1156 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1157 ceil: True
    test 1158 floor: True
    test 1159 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1160 residual: 0
    test 1161 is_exact: True
    test 1162 Fsum: -2.0640678875295797
    test 1163 Fsum: -2.0640678875295797
    test 1164 sum95: 3.885337784451458e+84  FAILED, KNOWN, expected -2.1685234954517455e-12
    test 1165 fsum: -2.1685234954517455e-12
    test 1166 pow(4): fsums.Fsum 'pow'[8] (2.21135e-47, -2.35465e-63)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[9] (2.21135e-47, 5.43322e-64)
    test 1167 pow(1): fsums.Fsum 'pow'[1] (-2.16852e-12, 5.77265e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.16852e-12, 5.77265e-29)
    test 1168 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1169 ceil: True
    test 1170 floor: True
    test 1171 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1172 residual: 0
    test 1173 is_exact: True
    test 1174 Fsum: -2.1685234954517455e-12
    test 1175 Fsum: -2.1685234954517455e-12
    test 1176 sum96: -3.885337784451458e+84  FAILED, KNOWN, expected -5.237467794209228e-16
    test 1177 fsum: -5.237467794209228e-16
    test 1178 pow(4): fsums.Fsum 'pow'[7] (7.52464e-62, 4.46191e-79)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[19] (7.52464e-62, 2.27315e-78)
    test 1179 pow(1): fsums.Fsum 'pow'[1] (-5.23747e-16, 4.09982e-32)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.23747e-16, 4.09982e-32)
    test 1180 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1181 ceil: True
    test 1182 floor: True
    test 1183 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1184 residual: 0
    test 1185 is_exact: True
    test 1186 Fsum: -5.237467794209228e-16
    test 1187 Fsum: -5.237467794209228e-16
    test 1188 sum97: 3.885337784451458e+84  FAILED, KNOWN, expected -37.0856231081162
    test 1189 fsum: -37.0856231081162
    test 1190 pow(4): fsums.Fsum 'pow'[28] (1.89157e+06, -8.41503e-12)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[53] (1.89157e+06, -5.12985e-11)
    test 1191 pow(1): fsums.Fsum 'pow'[1] (-37.0856, 3.10677e-15)  FAILED, KNOWN, expected fsums.Fsum[80] (-37.0856, 3.10677e-15)
    test 1192 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1193 ceil: True
    test 1194 floor: True
    test 1195 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1196 residual: 0
    test 1197 is_exact: True
    test 1198 Fsum: -37.0856231081162
    test 1199 Fsum: -37.0856231081162
    test 1200 sum98: -3.885337784451458e+84  FAILED, KNOWN, expected -0.0005170393436734382
    test 1201 fsum: -0.0005170393436734382
    test 1202 pow(4): fsums.Fsum 'pow'[20] (7.14652e-14, -2.98832e-30)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[34] (7.14652e-14, -1.45778e-30)
    test 1203 pow(1): fsums.Fsum 'pow'[1] (-0.000517039, -4.57899e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000517039, -4.57899e-20)
    test 1204 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1205 ceil: True
    test 1206 floor: True
    test 1207 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1208 residual: 0
    test 1209 is_exact: True
    test 1210 Fsum: -0.0005170393436734382
    test 1211 Fsum: -0.0005170393436734382
    test 1212 sum99: 3.885337784451458e+84  FAILED, KNOWN, expected 7.944384957571543e-05
    test 1213 fsum: 7.944384957571543e-05
    test 1214 pow(4): fsums.Fsum 'pow'[15] (3.98328e-17, 2.94441e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[31] (3.98328e-17, 2.00204e-33)
    test 1215 pow(1): fsums.Fsum 'pow'[1] (7.94438e-05, 3.60127e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (7.94438e-05, 3.60127e-21)
    test 1216 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1217 ceil: True
    test 1218 floor: True
    test 1219 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1220 residual: 0
    test 1221 is_exact: True
    test 1222 Fsum: 7.944384957571543e-05
    test 1223 Fsum: 7.944384957571543e-05
    test 1224 sum100: 3.885337784451458e+84  FAILED, KNOWN, expected -8.167600559166851e-06
    test 1225 fsum: -8.167600559166851e-06
    test 1226 pow(4): fsums.Fsum 'pow'[15] (4.45018e-21, -4.0803e-38)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[33] (4.45018e-21, 6.90833e-38)
    test 1227 pow(1): fsums.Fsum 'pow'[1] (-8.1676e-06, -4.27307e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-8.1676e-06, -4.27307e-22)
    test 1228 pow(0): fsums.Fsum[1] (1.0, 0)
    test 1229 ceil: True
    test 1230 floor: True
    test 1231 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1232 residual: 0
    test 1233 is_exact: True
    test 1234 Fsum: -8.167600559166851e-06
    test 1235 Fsum: -8.167600559166851e-06
    test 1236 fmul: 0.66709699

    test 1237 len1: 4
    test 1238 FSum+: 4.0
    test 1239 FSum-: 2.0
    test 1240 FSum-: 0.0
    test 1241 FSum*: 4.0
    test 1242 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1243 ._fint2: (4, 0)
    test 1244 ._fprs: 4.0
    test 1245 ._fprs2: (4.0, 0)
    test 1246 ._n: 5
    test 1247 ._ps: [4.0]
    test 1248 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1249 ._fint2: (4, 0)
    test 1250 ._fprs: 4.0
    test 1251 ._fprs2: (4.0, 0)
    test 1252 ._n: 5
    test 1253 ._ps: [4.0]
    test 1254 len2: 8
    test 1255 FSum+: 8.0
    test 1256 FSum-: 4.0
    test 1257 FSum-: 0.0
    test 1258 FSum*: 8.0
    test 1259 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1260 ._fint2: (8, 0)
    test 1261 ._fprs: 8.0
    test 1262 ._fprs2: (8.0, 0)
    test 1263 ._n: 9
    test 1264 ._ps: [8.0]
    test 1265 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1266 ._fint2: (8, 0)
    test 1267 ._fprs: 8.0
    test 1268 ._fprs2: (8.0, 0)
    test 1269 ._n: 9
    test 1270 ._ps: [8.0]
    test 1271 len3: 16
    test 1272 FSum+: 16.0
    test 1273 FSum-: 8.0
    test 1274 FSum-: 0.0
    test 1275 FSum*: 16.0
    test 1276 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1277 ._fint2: (16, 0)
    test 1278 ._fprs: 16.0
    test 1279 ._fprs2: (16.0, 0)
    test 1280 ._n: 17
    test 1281 ._ps: [16.0]
    test 1282 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1283 ._fint2: (16, 0)
    test 1284 ._fprs: 16.0
    test 1285 ._fprs2: (16.0, 0)
    test 1286 ._n: 17
    test 1287 ._ps: [16.0]
    test 1288 len4: 32
    test 1289 FSum+: 32.0
    test 1290 FSum-: 16.0
    test 1291 FSum-: 0.0
    test 1292 FSum*: 32.0
    test 1293 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1294 ._fint2: (32, 0)
    test 1295 ._fprs: 32.0
    test 1296 ._fprs2: (32.0, 0)
    test 1297 ._n: 33
    test 1298 ._ps: [32.0]
    test 1299 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1300 ._fint2: (32, 0)
    test 1301 ._fprs: 32.0
    test 1302 ._fprs2: (32.0, 0)
    test 1303 ._n: 33
    test 1304 ._ps: [32.0]
    test 1305 len5: 64
    test 1306 FSum+: 64.0
    test 1307 FSum-: 32.0
    test 1308 FSum-: 0.0
    test 1309 FSum*: 64.0
    test 1310 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1311 ._fint2: (64, 0)
    test 1312 ._fprs: 64.0
    test 1313 ._fprs2: (64.0, 0)
    test 1314 ._n: 65
    test 1315 ._ps: [64.0]
    test 1316 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1317 ._fint2: (64, 0)
    test 1318 ._fprs: 64.0
    test 1319 ._fprs2: (64.0, 0)
    test 1320 ._n: 65
    test 1321 ._ps: [64.0]
    test 1322 len6: 128
    test 1323 FSum+: 128.0
    test 1324 FSum-: 64.0
    test 1325 FSum-: 0.0
    test 1326 FSum*: 128.0
    test 1327 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1328 ._fint2: (128, 0)
    test 1329 ._fprs: 128.0
    test 1330 ._fprs2: (128.0, 0)
    test 1331 ._n: 129
    test 1332 ._ps: [128.0]
    test 1333 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1334 ._fint2: (128, 0)
    test 1335 ._fprs: 128.0
    test 1336 ._fprs2: (128.0, 0)
    test 1337 ._n: 129
    test 1338 ._ps: [128.0]
    test 1339 len7: 256
    test 1340 FSum+: 256.0
    test 1341 FSum-: 128.0
    test 1342 FSum-: 0.0
    test 1343 FSum*: 256.0
    test 1344 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1345 ._fint2: (256, 0)
    test 1346 ._fprs: 256.0
    test 1347 ._fprs2: (256.0, 0)
    test 1348 ._n: 257
    test 1349 ._ps: [256.0]
    test 1350 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1351 ._fint2: (256, 0)
    test 1352 ._fprs: 256.0
    test 1353 ._fprs2: (256.0, 0)
    test 1354 ._n: 257
    test 1355 ._ps: [256.0]
    test 1356 len8: 512
    test 1357 FSum+: 512.0
    test 1358 FSum-: 256.0
    test 1359 FSum-: 0.0
    test 1360 FSum*: 512.0
    test 1361 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1362 ._fint2: (512, 0)
    test 1363 ._fprs: 512.0
    test 1364 ._fprs2: (512.0, 0)
    test 1365 ._n: 513
    test 1366 ._ps: [512.0]
    test 1367 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1368 ._fint2: (512, 0)
    test 1369 ._fprs: 512.0
    test 1370 ._fprs2: (512.0, 0)
    test 1371 ._n: 513
    test 1372 ._ps: [512.0]
    test 1373 len: 513
    test 1374 partials: (512.0,)

    test 1375 FSum0: 0.0
    test 1376 FSum0: 0.0
    test 1377 FSum0: 0.0
    test 1378 FSum0: 0.0
    test 1379 FSum0: 0.0
    test 1380 FSum0: 0.0
    test 1381 Fsum#: 514
    test 1382 Fsum#: 1
    test 1383 FSum.: fsums.Fsum[514] (0.0, 0)  FAILED, KNOWN, expected fsums.Fsum[4097] (0.0, 0)
    test 1384 FsumI: 0.0
    test 1385 FsumR: 0.0
    test 1386 radd: 514.0
    test 1387 rdiv: 3.91e-03
    test 1388 rmul: 1024.0
    test 1389 rpow: 1.0
    test 1390 rsub: -510.0
    test 1391 sizeof: 404  FAILED, KNOWN, expected 372
    test 1392 _2sum: OverflowError('_2sum(1.0e+308, inf): inf')
    test 1393 F(None): TypeError("type(xs) (None): float() argument must be a string or a real number, not 'NoneType'")

    test 1394 ints: 1
    test 1395 ints: 1
    test 1396 fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1397 fsum_: -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1398 Fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1399 sum  : -3.68934881e+19  FAILED, KNOWN, expected 1.0
    test 1400 F * 2: 4.0000
    test 1401 F / 2: 2.0000
    test 1402 F / F: True
    test 1403 F / F: 1.0
    test 1404 F / F: 2.0
    test 1405 abs  : fsums.Fsum '__abs__'[1] (2.0, 0)  FAILED, KNOWN, expected fsums.Fsum[4] (2.0, 0)
    test 1406 int  : 2
    test 1407 eq F: True
    test 1408 ge F: True
    test 1409 gt F: False
    test 1410 le F: True
    test 1411 lt F: False
    test 1412 ne F: False
    test 1413 if F: True
    test 1414 gt 0: True
    test 1415 lt 0: False
    test 1416 eq 0: False
    test 1417 lt 0: True
    test 1418 gt 0: True
    test 1419 gt 0: False
    test 1420 signOf: 1
    test 1421 signOf: -1
    test 1422 ceil : 3
    test 1423 floor: 2

    test 1424 divmod : (2, <fsums.Fsum '__divmod__'[2] (0.0, 0) at 0x104e5ee00>)
    test 1425 divmod : (2, <fsums.Fsum 'divmod'[2] (0.0, 0) at 0x104e5f040>)
    test 1426 rdivmod : (0, <fsums.Fsum '__rdivmod__'[1] (2.0, 0) at 0x104e5f040>)
    test 1427 divmod : (-2, <fsums.Fsum '__divmod__'[2] (1.0, 0) at 0x104e5ee00>)
    test 1428 imod: fsums.Fsum '__imod__'[2] (0.0, 0)
    test 1429 mod : fsums.Fsum '__mod__'[2] (0.0, 0)
    test 1430 rmod: fsums.Fsum '__rmod__'[1] (2.0, 0)
    test 1431 neg : fsums.Fsum[1] (-2, 0)
    test 1432 pos : fsums.Fsum[4] (2.0, 0)
    test 1433 is_int: True
    test 1434 float: 9e-102
    test 1435 is_int: False
    test 1436 F //: fsums.Fsum '__floordiv__'[1] (-1, 0)
    test 1437 // F: fsums.Fsum '__rfloordiv__'[1] (-2, 0)
    test 1438 F //=: fsums.Fsum[1] (-2, 0)
    test 1439 F / 0: ZeroDivisionError("fsums.Fsum '__truediv__'[1] (fsum=9.0e-102, residual=5.9483e-118) / 0: float division by zero")
    test 1440 pow(F, +): ResidualError("fsums.Fsum '__pow__'[1] (fsum=9.0e-102, residual=5.9483e-118) ** 2.1: non-zero residual (5.94830118e-118), fractional (2.1)")
    test 1441 pow(F, -): fsums.Fsum '__pow__'[1] (1.11111e+101, 0)
    test 1442 pow(-F, F): ValueError("fsums._Fsum '__pow__'[1] (fsum=-2, residual=0) ** <fsums.Fsum[4] (9.0e-102, 5.9483e-118) at 0x104e5ecb0>: complex (1+1.868713929222428e-117j) from 2-arg pow(-2, 5.9483e-118)")
    test 1443 pow(F, F): fsums.Fsum[1] (1.0, 0)
    test 1444 pow(F, f, i): ResidualError('fsums.Fsum[1] (fsum=9.0e-102, residual=5.9483e-118) ** 2.1: integer residual (9.0e-102), mod (2)')
    test 1445 pow(F, F, i): TypeError('fsums.Fsum[1] (fsum=-2, residual=0) ** <fsums.Fsum[1] (2.1, 0) at 0x104e5f190>: mod (2), pow() 3rd argument not allowed unless all arguments are integers')
    test 1446 pow(F, F, None): fsums.Fsum[1] (4, 0)
    test 1447 Z**-2: ZeroDivisionError("fsums._Fsum '__pow__'[1] (fsum=0.0, residual=0) ** -2: 0.0 cannot be raised to a negative power")
    test 1448 pow(0): 1.000
    test 1449 pow(1): -3.000
    test 1450 pow(2): 9.000
    test 1451 pow(21): -10460353203.000
    test 1452 **= 2: 9.000
    test 1453 F0**0: fsums.Fsum '__pow__'[1] (1.0, 0)
    test 1454 F0**0.: fsums.Fsum '__pow__'[1] (1.0, 0)
    test 1455 0**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1456 0.**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1457 F0**0: fsums.Fsum 'pow'[1] (1.0, 0)
    test 1458 F0**2: fsums.Fsum 'pow'[1] (0.0, 0)
    test 1459 F0**0.: fsums.Fsum 'pow'[1] (1.0, 0)
    test 1460 F0**3.: fsums.Fsum 'pow'[1] (0.0, 0)
    test 1461 F0**0.: fsums.Fsum 'pow'[1] (1, 0)
    test 1462 2**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1463 2.**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1464 F2**0: fsums.Fsum '__pow__'[1] (1.0, 0)
    test 1465 F2.**0: fsums.Fsum '__pow__'[1] (1.0, 0)
    test 1466 F2**F2: fsums.Fsum '__pow__'[1] (4, 0)
    test 1467 F2**F2: fsums.Fsum '__rpow__'[1] (4, 0)
    test 1468 F**2: 3125.000
    test 1469 F**-1: 0.200
    test 1470 F**-2: 0.040
    test 1471 F**-2.5: 0.018
    test 1472 F** 2.5: 55.902
    test 1473 pow(2): 25.000
    test 1474 pow(2.5): 55.902
    test 1475 pow(F): 3125.000
    test 1476 3pow(2, None): fsums.Fsum 'pow'[1] (25, 0)
    test 1477 3pow(2.5, None): fsums.Fsum 'pow'[1] (55.902, 0)
    test 1478 3pow(2, 20): fsums.Fsum 'pow'[1] (5, 0)
    test 1479 fsum(): 5.0
    test 1480 fsum(): True
    test 1481 fsum2(): (5.0, 0)
    test 1482 fsum2(): True
    test 1483 fsum2(): Fsum2Tuple(fsum=5.0, residual=0)
    test 1484 Fsum2Tuple: ('fsum', 5.0, <class 'pygeodesy.units.Float'>)
    test 1485 Fsum2Tuple: ('residual', 0, <class 'pygeodesy.units.Int'>)
    test 1486 fmul(x): 25.0
    test 1487 fmul(F): 62.5
    test 1488 fadd(F): 65.0
    test 1489 fsub(F): 62.5
    test 1490 Fsum(F): 125.0

    test 1491 ratio: (-27021597764141911, 9007199254740992)
    test 1492 ratio: fsums.Fsum[1] (-3, 0)  FAILED, KNOWN, expected fsums.Fsum[4] (-3, 8.80732e-17)
    test 1493 int_float: -3.000
    test 1494 fint: fsums.Fsum 'fint'[1] (-2, 0)
    test 1495 fint2: (-2, -1.0)
    test 1496 pow3: fsums.Fsum '__pow__'[1] (3, 0)
    test 1497 math_fsum: True
    test 1498 RESIDUAL: False
    test 1499 RESIDUAL: False
    test 1500 RESIDUAL: True

    418 of 1500 testFsums.py tests (27.9%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 250.316 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testGars.py

    testing testGars.py 22.01.20 (module pygeodesy.gars 22.05.14)
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'  FAILED, KNOWN, expected Garef('381NH45')
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    3 of 26 testGars.py tests (11.5%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 763.178 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testGeodesicx.py
./test/testGeodesicx.py:205: DeprecationWarning: property L{pygeodesy.geodesicx.gx.GeodesicExact.C4Order} has been DEPRECATED, use property C{C4order}.
  g.C4Order = nC4

    testing testGeodesicx.py 22.04.14 (module pygeodesy.geodesicx 22.05.14)

    testDirectX vs ...(pygeodesy.geodesicx, 22.05.14)
    test 1 C++X.a12: 49.4755274632515
    test 2 C++X.azi1: 51
    test 3 C++X.azi2: 107.189397162606
    test 4 C++X.lat1: 40.6
    test 5 C++X.lat2: 51.8845645056068
    test 6 C++X.lon1: -73.8
    test 7 C++X.lon2: -1.14117286120083
    test 8 C++X.M12: 0.650910566998086
    test 9 C++X.m12: 4844148.70310149
    test 10 C++X.M21: 0.651228658921966
    test 11 C++X.s12: 5500000
    test 12 C++X.S12: 39735075134877.1
    test 13 iteration: None

    test 14 Python.a12: 49.4755274632515
    test 15 Python.azi1: 51
    test 16 Python.azi2: 107.189397162606
    test 17 Python.lat1: 40.6
    test 18 Python.lat2: 51.8845645056068
    test 19 Python.lon1: -73.8
    test 20 Python.lon2: -1.14117286120083  FAILED, KNOWN, expected -1.14117286120084
    test 21 Python.M12: 0.650910566998086
    test 22 Python.m12: 4844148.70310149
    test 23 Python.M21: 0.651228658921966
    test 24 Python.s12: 5500000
    test 25 Python.S12: 39735075134877.1
    test 26 iteration: None

    test 27 _GeodesicLineExact: a13=49.475527, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=5500000.0
    test 28 GeodesicExact: GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)
    test 29 _GeodesicLineExact: Direct9Tuple(a12=49.475527, lat2=51.884565, lon2=-1.141173, azi2=107.189397, s12=5500000.0, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 30 GeodesicExact: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}
    test 31 GeodesicExact: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 32 GeodesicExact: {M12: NAN, M21: NAN, S12: NAN, a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, s12: 5500000.0}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}

    test 33 Geodesic: {M12: NAN, M21: NAN, S12: NAN, a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, s12: 5500000.0}
    test 34 Geodesic: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 35 Geodesic: {M12: NAN, M21: NAN, S12: NAN, a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, s12: 5500000.0}

    test 36 ArcDirect.a12: 49.8
    test 37 ArcDirect.azi1: 51
    test 38 ArcDirect.azi2: 107.582082475406  FAILED, KNOWN, expected 107.5820825
    test 39 ArcDirect.lat1: 40.6
    test 40 ArcDirect.lat2: 51.7876866587893  FAILED, KNOWN, expected 51.7876867
    test 41 ArcDirect.lon1: -73.8
    test 42 ArcDirect.lon2: -0.641731343091337  FAILED, KNOWN, expected -0.641731
    test 43 ArcDirect.s12: 5536073.73439267  FAILED, KNOWN, expected 5536073.734393
    test 44 iteration: None

    test 45 ArcDirectLine: a13=49.8, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=5536073.734393
    test 46 iteration: None

    test 47 GeodesicLineExact: a13=NAN, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=NAN
    test 48 iteration: None

    testInverseX vs ...(pygeodesy.geodesicx, 22.05.14)
    test 49 C++X.a12: 49.941310217899
    test 50 C++X.azi1: 51.1988828455798
    test 51 C++X.azi2: 107.821776735514
    test 52 C++X.lat1: 40.6
    test 53 C++X.lat2: 51.6
    test 54 C++X.lon1: -73.8
    test 55 C++X.lon2: -0.5
    test 56 C++X.M12: 0.644729692059482
    test 57 C++X.m12: 4877684.6027062
    test 58 C++X.M21: 0.645045678521344
    test 59 C++X.s12: 5551759.40031868
    test 60 C++X.S12: 40041368848742.5
    test 61 iteration: 3

    test 62 Python.a12: 49.941310217899
    test 63 Python.azi1: 51.1988828455798
    test 64 Python.azi2: 107.821776735514
    test 65 Python.lat1: 40.6
    test 66 Python.lat2: 51.6
    test 67 Python.lon1: -73.8
    test 68 Python.lon2: -0.5
    test 69 Python.M12: 0.644729692059482
    test 70 Python.m12: 4877684.6027062
    test 71 Python.M21: 0.645045678521344
    test 72 Python.s12: 5551759.40031868
    test 73 Python.S12: 40041368848742.5
    test 74 iteration: None

    test 75 _GeodesicLineExact: _GeodesicLineExact(a13=49.94131, azi1=51.198883, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), lat1=40.6, lon1=-73.8, s13=5551759.400319)
    test 76 GeodesicExact: C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)
    test 77 _GeodesicLineExact: Direct9Tuple(a12=49.94131, lat2=51.6, lon2=-0.5, azi2=107.821777, s12=5551759.400319, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 78 GeodesicExact: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, s12=5551759.400319)
    test 79 GeodesicExact: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 80 GeodesicExact: {M12: NAN, M21: NAN, S12: NAN, a12: 49.94131, azi1: NAN, azi2: NAN, calp1: NAN, calp2: NAN, m12: NAN, s12: 5551759.400319, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5551759.400319}

    test 81 Geodesic: GDict(M12=NAN, M21=NAN, S12=NAN, a12=49.94131, azi1=51.198883, azi2=107.821777, calp1=0.626619, calp2=-0.306057, lon1=-73.8, lon2=-0.5, m12=NAN, s12=5551759.400319, salp1=0.779326, salp2=0.952013)
    test 82 Geodesic: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=0.779326, calp1=0.626619, salp2=0.952013, calp2=-0.306057, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 83 Geodesic: {M12: NAN, M21: NAN, S12: NAN, a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, m12: NAN, s12: 5551759.400319, salp1: 0.779326, salp2: 0.952013}  FAILED, KNOWN, expected {M12: NAN, M21: NAN, S12: NAN, a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, lon1: -73.8, lon2: -0.5, m12: NAN, s12: 5551759.400319, salp1: 0.779326, salp2: 0.952013}

    test 84 Inverse: {a12: 49.647855, azi1: 51.139649, azi2: 107.74164, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5515844.227497}
    test 85 Inverse1: 49.647854761166144

    testPolygon24(pygeodesy.geodesicx, 22.05.14)
    test 86 Compute: (1, 0, 0)
    test 87 AddEdges: (4, 4000, 1000000)
    test 88 TestEdge: (5, 4000, 1000000)
    test 89 Clear: 0
    test 90 TestPoint: (1, 0, 0)
    test 91 AddPoints: (4, 29506941, 65690027591346)
    test 92 TestPoint: (5, 29506941, 65690027591346)
    test 93 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=24, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), num=4, perimeter=29506941.155178, polyline=False

    testPolygon27(pygeodesy.geodesicx, 22.05.14)
    test 94 Compute: (1, 0, 0)
    test 95 AddEdges: (4, 4000, 1000000)
    test 96 TestEdge: (5, 4000, 1000000)
    test 97 Clear: 0
    test 98 TestPoint: (1, 0, 0)
    test 99 AddPoints: (4, 29506941, 65690027591346)
    test 100 TestPoint: (5, 29506941, 65690027591346)
    test 101 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=27, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), num=4, perimeter=29506941.155178, polyline=False

    testPolygon30(pygeodesy.geodesicx, 22.05.14)
    test 102 Compute: (1, 0, 0)
    test 103 AddEdges: (4, 4000, 1000000)
    test 104 TestEdge: (5, 4000, 1000000)
    test 105 Clear: 0
    test 106 TestPoint: (1, 0, 0)
    test 107 AddPoints: (4, 29506941, 65690027591346)
    test 108 TestPoint: (5, 29506941, 65690027591346)
    test 109 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), num=4, perimeter=29506941.155178, polyline=False

    testPolygon(pygeodesy.karney, 22.07.03)
    test 110 Compute: (1, 0, 0)
    test 111 AddEdges: (4, 4000, 1000000)
    test 112 TestEdge: (5, 4000, 1000000)
    test 113 Clear: None  FAILED, KNOWN, expected 0
    test 114 TestPoint: (1, 0, 0)
    test 115 AddPoints: (4, 29506941, 65690027591346)
    test 116 TestPoint: (5, 29506941, 65690027591346)

    12 of 116 testGeodesicx.py tests (10.3%) FAILED, incl. 9 KNOWN plus 3 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 685.549 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testGeohash.py

    testing testGeohash.py 21.02.11 (module pygeodesy.geohash 22.05.14)
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 philam: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode2: (65.390646, -17.929709)
    test 18 decode_error: 2.145767e-05, 2.145767e-05
    test 19 distance1To: 2758.887
    test 20 distance2To: 682.760
    test 21 distance3To: 397.404
    test 22 sizes: 4.8, 4.8
    test 23 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 24 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 25 N: geehpbpbr
    test 26 NE: geek00002
    test 27 E: geek00000
    test 28 SE: gee7bpbpb
    test 29 S: gee5zzzzz
    test 30 SW: gee5zzzzy
    test 31 W: geehpbpbn
    test 32 NW: geehpbpbq
    test 33 N: geehpbpbr
    test 34 NE: geek00002
    test 35 E: geek00000
    test 36 SE: gee7bpbpb
    test 37 S: gee5zzzzz
    test 38 SW: gee5zzzzy
    test 39 W: geehpbpbn
    test 40 NW: geehpbpbq
    test 41 N: geehpbpbr
    test 42 NE: geek00002
    test 43 E: geek00000
    test 44 SE: gee7bpbpb
    test 45 S: gee5zzzzz
    test 46 SW: gee5zzzzy
    test 47 W: geehpbpbn
    test 48 NW: geehpbpbq
    test 49 N: geehpbpbr
    test 50 NE: geek00002
    test 51 E: geek00000
    test 52 SE: gee7bpbpb
    test 53 S: gee5zzzzz
    test 54 SW: gee5zzzzy
    test 55 W: geehpbpbn
    test 56 NW: geehpbpbq
    test 57 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 58 decode: 52.205, 0.1188
    test 59 encode-decode: u120fxw
    test 60 encode-decode: geek
    test 61 encode-decode: fur
    test 62 encode-decode: geehpbpbp
    test 63 encode-decode: u4pruydqqvj8
    test 64 encode-decode: bgr96qxvpd46
    test 65 encode-decode: 0123456789
    test 66 encode-decode: zzzzzz
    test 67 Geohash: u4pruydq
    test 68 N.E.S.W: True
    test 69 E.S.W.N: True
    test 70 S.W.N.E: True
    test 71 W.N.E.S: True
    test 72 N.E.S.S.W.W.N.N.E.S: True
    test 73 Geohash: u4pruydqq
    test 74 N.E.S.W: True
    test 75 E.S.W.N: True
    test 76 S.W.N.E: True
    test 77 W.N.E.S: True
    test 78 N.E.S.S.W.W.N.N.E.S: True
    test 79 Geohash: u4pruydqqv
    test 80 N.E.S.W: True
    test 81 E.S.W.N: True
    test 82 S.W.N.E: True
    test 83 W.N.E.S: True
    test 84 N.E.S.S.W.W.N.N.E.S: True
    test 85 Geohash: u4pruydqqvj
    test 86 N.E.S.W: True
    test 87 E.S.W.N: True
    test 88 S.W.N.E: True
    test 89 W.N.E.S: True
    test 90 N.E.S.S.W.W.N.N.E.S: True
    test 91 Geohash: u4pruydqqvj8
    test 92 N.E.S.W: True
    test 93 E.S.W.N: True
    test 94 S.W.N.E: True
    test 95 W.N.E.S: True
    test 96 N.E.S.S.W.W.N.N.E.S: True
    test 97 encode: u120fxw
    test 98 decode: ('52.205', '0.1188')
    test 99 decode2: (52.205, 0.1188)
    test 100 decode_error: 6.866455e-04, 6.866455e-04
    test 101 distance1: 486.710
    test 102 distance2: 3.374
    test 103 distance3: 2.798
    test 104 sizes: 153.0, 153.0
    test 105 Geohash: u336xv
    test 106 encode: u336xv
    test 107 equal: True
    test 108 sizes: 610.0, 1220.0
    test 109 encode: fur
    test 110 decode: ('69.6', '-45.7')
    test 111 decode: ('70.3', '-51')
    test 112 decode: ('68', '-68')
    test 113 decode_error: (0.703125, 0.703125)
    test 114 decode_error: (2.8125, 5.625)
    test 115 decode_error: (22.5, 22.5)
    test 116 encode: ezs42e44yx96
    test 117 decode: ('42.60000003', '-5.59999997')
    test 118 encode: ezs42
    test 119 decode: ('42.605', '-5.603')
    test 120 distance1: 503442.4
    test 121 distance2: 303317.6
    test 122 distance3: 179940.1
    test 123 precision: 0  FAILED, KNOWN, expected 1
    test 124 resolution: 360.0, 180.0
    test 125 precision: 1
    test 126 resolution: 45.0, 11.25
    test 127 precision: 2
    test 128 resolution: 11.25, 0.352
    test 129 precision: 3
    test 130 resolution: 1.4062, 0.011
    test 131 precision: 4
    test 132 resolution: 0.35156, 0.00034
    test 133 precision: 5
    test 134 resolution: 0.043945, 0.000011
    test 135 precision: 6
    test 136 resolution: 0.0109863, 0.0000003
    test 137 precision: 7
    test 138 resolution: 0.00137329, 0.00000001
    test 139 precision: 8
    test 140 resolution: 0.000343323, 0.0
    test 141 precision: 9
    test 142 resolution: 0.0000429153, 0.0
    test 143 precision: 10
    test 144 resolution: 0.00001072884, 0.0
    test 145 precision: 11
    test 146 resolution: 0.000001341105, 0.0
    test 147 precision: 12
    test 148 resolution: 0.0000003352761, 0.0
    test 149 precision: 13  FAILED, KNOWN, expected 12
    test 150 resolution: 0.00000033527613, 0.0

    2 of 150 testGeohash.py tests (1.3%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 33.652 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testGeoids.py

    testing testGeoids.py 22.01.11
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046496
    test 212 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.002766
    test 213 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.005116
    test 214 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 215 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 216 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 217 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 218 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 219 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 220 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 221 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 222 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 223 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 224 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 225 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 226 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 227 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 228 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 229 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 230 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 231 closed: True
    test 232 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 233 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 234 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 235 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 236 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 237 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 238 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 239 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 240 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 241 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 242 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 243 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 244 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 245 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 246 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 247 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 248 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 249 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 250 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 251 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 252 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 253 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 254 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 255 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 256 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 257 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 258 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 259 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 260 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 261 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 262 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 263 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 264 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 265 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 266 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 267 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 268 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 269 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 270 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 271 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 272 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 273 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 274 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 275 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 276 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 277 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 278 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 279 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 280 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 281 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 282 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 283 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 284 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 285 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 286 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 287 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 288 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 289 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 290 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 291 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 292 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 293 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 294 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 295 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 296 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 297 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 298 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 299 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 300 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 301 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 302 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 303 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 304 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 305 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 306 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 307 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 308 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 309 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 310 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 311 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 312 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 313 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 314 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 315 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 316 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 317 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 318 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 319 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 320 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 321 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 322 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 323 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 324 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 325 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 326 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 327 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 328 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 329 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 330 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 331 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 332 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 333 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 334 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 335 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 336 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 337 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 338 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 339 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 340 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 341 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 342 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 343 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 344 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 345 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 346 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 347 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 348 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 349 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 350 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 351 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 352 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 353 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 354 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 355 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 356 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 357 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 358 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 359 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 360 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 361 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 362 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 363 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 364 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 365 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 366 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 367 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 368 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 369 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 370 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 371 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 372 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 373 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 374 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 375 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 376 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 377 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 378 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 379 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 380 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 381 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 382 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 383 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 384 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 385 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 386 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 387 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 388 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 389 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 390 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 391 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 392 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 393 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 394 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 395 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 396 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 397 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 398 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 399 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 400 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 401 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 402 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 403 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 404 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 405 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 406 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 407 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 408 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 409 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 410 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 411 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 412 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 413 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 414 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 415 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 416 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 417 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 418 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 419 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 420 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 421 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 422 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 423 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 424 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 425 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 426 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 427 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 428 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 429 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 430 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 431 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 432 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 433 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 434 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 435 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 436 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 437 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 438 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 439 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 440 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 441 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 442 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 443 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 444 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001756
    test 445 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000524
    test 446 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000371
    test 447 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 448 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 449 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 450 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 451 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 452 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 453 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 454 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 455 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 456 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 457 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 458 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 459 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 460 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 461 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 462 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 463 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 464 closed: True
    test 465 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 466 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 467 GeoidPGM('egm96-5.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 11.423
    test 468 GeoidPGM('egm96-5.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.892
    test 469 GeoidPGM('egm96-5.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 65.226
    test 470 GeoidPGM('egm96-5.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 24.463
    test 471 GeoidPGM('egm96-5.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -29.682
    test 472 GeoidPGM('egm96-5.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 10.503
    test 473 GeoidPGM('egm96-5.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 29.326
    test 474 GeoidPGM('egm96-5.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 60.424
    test 475 GeoidPGM('egm96-5.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 68.996
    test 476 GeoidPGM('egm96-5.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 36.287
    test 477 GeoidPGM('egm96-5.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 6.626
    test 478 GeoidPGM('egm96-5.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.860
    test 479 GeoidPGM('egm96-5.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.267
    test 480 GeoidPGM('egm96-5.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -1.294
    test 481 GeoidPGM('egm96-5.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -2.322
    test 482 GeoidPGM('egm96-5.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -17.557
    test 483 GeoidPGM('egm96-5.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -16.594
    test 484 GeoidPGM('egm96-5.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 24.453
    test 485 GeoidPGM('egm96-5.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.592
    test 486 GeoidPGM('egm96-5.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 44.049
    test 487 GeoidPGM('egm96-5.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.581
    test 488 GeoidPGM('egm96-5.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.289
    test 489 GeoidPGM('egm96-5.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 49.816
    test 490 GeoidPGM('egm96-5.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -36.114
    test 491 GeoidPGM('egm96-5.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -41.048
    test 492 GeoidPGM('egm96-5.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 26.456
    test 493 GeoidPGM('egm96-5.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.317
    test 494 GeoidPGM('egm96-5.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 20.714
    test 495 GeoidPGM('egm96-5.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -7.362
    test 496 GeoidPGM('egm96-5.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -16.492
    test 497 GeoidPGM('egm96-5.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.110
    test 498 GeoidPGM('egm96-5.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 51.858
    test 499 GeoidPGM('egm96-5.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -38.981
    test 500 GeoidPGM('egm96-5.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.913
    test 501 GeoidPGM('egm96-5.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.828
    test 502 GeoidPGM('egm96-5.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -5.719
    test 503 GeoidPGM('egm96-5.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 22.426
    test 504 GeoidPGM('egm96-5.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 24.545
    test 505 GeoidPGM('egm96-5.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 40.652
    test 506 GeoidPGM('egm96-5.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 22.383
    test 507 GeoidPGM('egm96-5.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 22.182
    test 508 GeoidPGM('egm96-5.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.930
    test 509 GeoidPGM('egm96-5.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -47.094
    test 510 GeoidPGM('egm96-5.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -18.421
    test 511 GeoidPGM('egm96-5.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 10.055
    test 512 GeoidPGM('egm96-5.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 5.786
    test 513 GeoidPGM('egm96-5.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -22.838
    test 514 GeoidPGM('egm96-5.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 42.989
    test 515 GeoidPGM('egm96-5.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 15.353
    test 516 GeoidPGM('egm96-5.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -6.337
    test 517 GeoidPGM('egm96-5.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -25.555
    test 518 GeoidPGM('egm96-5.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -9.923
    test 519 GeoidPGM('egm96-5.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.852
    test 520 GeoidPGM('egm96-5.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected -0.135
    test 521 GeoidPGM('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 522 GeoidPGM('egm96-5.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.150
    test 523 GeoidPGM('egm96-5.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -17.657
    test 524 GeoidPGM('egm96-5.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 46.358
    test 525 GeoidPGM('egm96-5.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -14.404
    test 526 GeoidPGM('egm96-5.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.242
    test 527 GeoidPGM('egm96-5.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.237
    test 528 GeoidPGM('egm96-5.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.147
    test 529 GeoidPGM('egm96-5.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -33.396
    test 530 GeoidPGM('egm96-5.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 7.961
    test 531 GeoidPGM('egm96-5.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 7.229
    test 532 GeoidPGM('egm96-5.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -44.292
    test 533 GeoidPGM('egm96-5.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.875
    test 534 GeoidPGM('egm96-5.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 28.933
    test 535 GeoidPGM('egm96-5.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -41.238
    test 536 GeoidPGM('egm96-5.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.331
    test 537 GeoidPGM('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 538 GeoidPGM('egm96-5.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 60.117
    test 539 GeoidPGM('egm96-5.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 6.457
    test 540 GeoidPGM('egm96-5.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -31.961
    test 541 GeoidPGM('egm96-5.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.571
    test 542 GeoidPGM('egm96-5.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.760
    test 543 GeoidPGM('egm96-5.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 21.980
    test 544 GeoidPGM('egm96-5.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 16.849
    test 545 GeoidPGM('egm96-5.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.923
    test 546 GeoidPGM('egm96-5.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -42.749
    test 547 GeoidPGM('egm96-5.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -21.841
    test 548 GeoidPGM('egm96-5.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.482
    test 549 GeoidPGM('egm96-5.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.847
    test 550 GeoidPGM('egm96-5.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -19.604
    test 551 GeoidPGM('egm96-5.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 25.668
    test 552 GeoidPGM('egm96-5.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -3.772
    test 553 GeoidPGM('egm96-5.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 17.748
    test 554 GeoidPGM('egm96-5.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -17.839
    test 555 GeoidPGM('egm96-5.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.292
    test 556 GeoidPGM('egm96-5.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.529
    test 557 GeoidPGM('egm96-5.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -8.229
    test 558 GeoidPGM('egm96-5.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.830
    test 559 GeoidPGM('egm96-5.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.215
    test 560 GeoidPGM('egm96-5.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -2.960
    test 561 GeoidPGM('egm96-5.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -42.323
    test 562 GeoidPGM('egm96-5.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 38.356
    test 563 GeoidPGM('egm96-5.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 34.259
    test 564 GeoidPGM('egm96-5.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -37.397
    test 565 GeoidPGM('egm96-5.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -2.016
    test 566 GeoidPGM('egm96-5.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 33.912
    test 567 GeoidPGM('egm96-5.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.676
    test 568 GeoidPGM('egm96-5.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 15.692
    test 569 GeoidPGM('egm96-5.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -11.117
    test 570 GeoidPGM('egm96-5.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 27.437
    test 571 GeoidPGM('egm96-5.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -23.894
    test 572 GeoidPGM('egm96-5.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.766
    test 573 GeoidPGM('egm96-5.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -7.452
    test 574 GeoidPGM('egm96-5.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 30.143
    test 575 GeoidPGM('egm96-5.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -61.172
    test 576 GeoidPGM('egm96-5.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.890
    test 577 GeoidPGM('egm96-5.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 39.519
    test 578 GeoidPGM('egm96-5.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 19.419
    test 579 GeoidPGM('egm96-5.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 2.069
    test 580 GeoidPGM('egm96-5.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 25.048
    test 581 GeoidPGM('egm96-5.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 22.547
    test 582 GeoidPGM('egm96-5.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -34.359
    test 583 GeoidPGM('egm96-5.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -5.453
    test 584 GeoidPGM('egm96-5.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.804
    test 585 GeoidPGM('egm96-5.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -35.054
    test 586 GeoidPGM('egm96-5.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -15.418
    test 587 GeoidPGM('egm96-5.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.557
    test 588 GeoidPGM('egm96-5.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.894
    test 589 GeoidPGM('egm96-5.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.215
    test 590 GeoidPGM('egm96-5.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 3.523
    test 591 GeoidPGM('egm96-5.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 23.797
    test 592 GeoidPGM('egm96-5.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 51.586
    test 593 GeoidPGM('egm96-5.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.131
    test 594 GeoidPGM('egm96-5.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -51.848
    test 595 GeoidPGM('egm96-5.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 37.192
    test 596 GeoidPGM('egm96-5.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 63.597
    test 597 GeoidPGM('egm96-5.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -62.636
    test 598 GeoidPGM('egm96-5.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -8.717
    test 599 GeoidPGM('egm96-5.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 40.645
    test 600 GeoidPGM('egm96-5.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -60.729
    test 601 GeoidPGM('egm96-5.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 8.783
    test 602 GeoidPGM('egm96-5.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 31.523
    test 603 GeoidPGM('egm96-5.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -6.250
    test 604 GeoidPGM('egm96-5.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 32.599
    test 605 GeoidPGM('egm96-5.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -24.536
    test 606 GeoidPGM('egm96-5.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.869
    test 607 GeoidPGM('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.213
    test 608 GeoidPGM('egm96-5.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -11.824
    test 609 GeoidPGM('egm96-5.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.709
    test 610 GeoidPGM('egm96-5.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.379
    test 611 GeoidPGM('egm96-5.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.941
    test 612 GeoidPGM('egm96-5.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 19.394
    test 613 GeoidPGM('egm96-5.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.381
    test 614 GeoidPGM('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 615 GeoidPGM('egm96-5.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 24.468
    test 616 GeoidPGM('egm96-5.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.761
    test 617 GeoidPGM('egm96-5.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -18.798
    test 618 GeoidPGM('egm96-5.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 12.612
    test 619 GeoidPGM('egm96-5.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.706
    test 620 GeoidPGM('egm96-5.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 45.792
    test 621 GeoidPGM('egm96-5.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.406
    test 622 GeoidPGM('egm96-5.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -8.367
    test 623 GeoidPGM('egm96-5.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -2.025
    test 624 GeoidPGM('egm96-5.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.569
    test 625 GeoidPGM('egm96-5.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.435
    test 626 GeoidPGM('egm96-5.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -39.009
    test 627 GeoidPGM('egm96-5.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -6.921
    test 628 GeoidPGM('egm96-5.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 50.795
    test 629 GeoidPGM('egm96-5.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.070
    test 630 GeoidPGM('egm96-5.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -14.214
    test 631 GeoidPGM('egm96-5.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 17.600
    test 632 GeoidPGM('egm96-5.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 44.804
    test 633 GeoidPGM('egm96-5.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.922
    test 634 GeoidPGM('egm96-5.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 10.662
    test 635 GeoidPGM('egm96-5.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 7.670
    test 636 GeoidPGM('egm96-5.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 8.623
    test 637 GeoidPGM('egm96-5.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.723
    test 638 GeoidPGM('egm96-5.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 3.818
    test 639 GeoidPGM('egm96-5.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected -1.871
    test 640 GeoidPGM('egm96-5.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 30.633
    test 641 GeoidPGM('egm96-5.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.801
    test 642 GeoidPGM('egm96-5.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 19.859
    test 643 GeoidPGM('egm96-5.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.348
    test 644 GeoidPGM('egm96-5.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 9.941
    test 645 GeoidPGM('egm96-5.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.321
    test 646 GeoidPGM('egm96-5.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -24.135
    test 647 GeoidPGM('egm96-5.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.679
    test 648 GeoidPGM('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 649 GeoidPGM('egm96-5.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.158
    test 650 GeoidPGM('egm96-5.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.602
    test 651 GeoidPGM('egm96-5.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.055
    test 652 GeoidPGM('egm96-5.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 40.132
    test 653 GeoidPGM('egm96-5.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 43.263
    test 654 GeoidPGM('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 655 GeoidPGM('egm96-5.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.678
    test 656 GeoidPGM('egm96-5.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -8.529
    test 657 GeoidPGM('egm96-5.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.666
    test 658 GeoidPGM('egm96-5.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -12.796
    test 659 GeoidPGM('egm96-5.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 15.773
    test 660 GeoidPGM('egm96-5.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.954
    test 661 GeoidPGM('egm96-5.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.480
    test 662 GeoidPGM('egm96-5.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.429
    test 663 GeoidPGM('egm96-5.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 24.037
    test 664 GeoidPGM('egm96-5.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 4.520
    test 665 GeoidPGM('egm96-5.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.394
    test 666 GeoidPGM('egm96-5.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 5.679
    test 667 GeoidPGM('egm96-5.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 28.707
    test 668 GeoidPGM('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 669 GeoidPGM('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 670 GeoidPGM('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.636  FAILED, KNOWN, expected -18.635
    test 671 GeoidPGM('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 672 GeoidPGM('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 673 GeoidPGM('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 674 GeoidPGM('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.563  FAILED, KNOWN, expected -22.562
    test 675 GeoidPGM('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 676 GeoidPGM('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 677 GeoidPGM('egm96-5.pgm').height() kind 3, eps max (in 0 FAILED): 0.001116
    test 678 GeoidPGM('egm96-5.pgm').height() kind 3, eps mean (of 15 total): 0.000383
    test 679 GeoidPGM('egm96-5.pgm').height() kind 3, eps stdev (of 15 total): 0.000294
    test 680 GeoidPGM('egm96-5.pgm').highest(): 45.0, -110.083, -7.479
    test 681 GeoidPGM('egm96-5.pgm').lowerleft(): 25.0, -125.0, -45.543
    test 682 GeoidPGM('egm96-5.pgm').lowerright(): 25.0, -64.917, -51.106
    test 683 GeoidPGM('egm96-5.pgm').lowest(): 25.75, -69.583, -52.671
    test 684 GeoidPGM('egm96-5.pgm').upperleft(): 55.0, -125.0, -10.221
    test 685 GeoidPGM('egm96-5.pgm').upperright(): 55.0, -64.917, -16.097
    test 686 GeoidPGM('egm96-5.pgm').dtype: ("dtype('float64')",)
    test 687 GeoidPGM('egm96-5.pgm').knots: ('260281',)
    test 688 GeoidPGM('egm96-5.pgm').mean: ('-29.816',)
    test 689 GeoidPGM('egm96-5.pgm').nBytes: ('2082248',)
    test 690 GeoidPGM('egm96-5.pgm').smooth: ('0',)
    test 691 GeoidPGM('egm96-5.pgm').stdev: ('9.503',)
    test 692 GeoidPGM('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 693 GeoidPGM('egm96-5.pgm')._ll2g2(180, 360): (180, 720.0)
    test 694 GeoidPGM('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 695 GeoidPGM('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 696 GeoidPGM('egm96-5.pgm').toStr: GeoidPGM('egm96-5.pgm'): lowerleft(25.0, -125.0, -45.543), upperright(55.0, -64.917, -16.097), center(40.0, -94.958, -32.13), highest(45.0, -110.083, -7.479), lowest(25.75, -69.583, -52.671)

    test 697 closed: True
    test 698 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 699 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 700 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 701 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 702 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 703 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 704 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 705 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 706 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 707 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 708 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 709 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 710 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 711 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 712 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 713 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 714 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 715 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 716 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 717 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 718 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 719 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 720 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 721 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 722 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 723 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 724 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 725 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 726 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 727 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 728 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 729 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 730 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 731 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 732 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 733 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 734 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 735 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 736 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 737 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 738 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 739 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 740 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 741 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 742 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 743 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 744 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 745 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 746 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 747 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 748 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 749 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 750 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 751 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 752 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 753 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 754 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 755 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 756 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 757 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 758 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 759 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 760 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 761 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 762 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 763 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 764 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 765 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 766 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 767 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 768 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 769 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 770 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 771 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 772 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 773 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 774 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 775 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 776 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 777 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 778 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 779 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 780 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 781 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 782 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 783 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 784 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 785 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 786 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 787 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 788 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 789 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 790 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 791 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 792 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 793 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 794 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 795 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 796 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 797 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 798 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 799 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 800 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 801 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 802 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 803 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 804 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 805 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 806 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 807 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 808 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 809 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 810 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 811 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 812 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 813 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 814 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 815 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 816 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 817 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 818 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 819 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 820 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 821 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 822 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 823 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 824 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 825 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 826 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 827 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 828 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 829 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 830 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 831 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 832 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 833 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 834 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 835 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 836 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 837 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 838 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 839 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 840 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 841 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 842 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 843 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 844 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 845 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 846 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 847 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 848 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 849 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 850 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 851 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 852 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 853 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 854 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 855 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 856 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 857 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 858 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 859 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 860 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 861 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 862 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 863 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 864 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 865 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 866 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 867 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 868 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 869 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 870 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 871 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 872 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 873 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 874 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 875 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 876 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 877 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 878 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 879 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 880 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 881 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 882 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 883 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 884 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 885 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 886 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 887 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 888 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 889 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 890 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 891 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 892 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 893 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 894 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 895 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 896 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 897 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 898 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 899 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 900 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 901 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 902 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 903 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 904 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 905 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 906 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 907 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 908 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 909 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 910 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.002537
    test 911 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.000543
    test 912 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.000458
    test 913 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 914 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 915 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 916 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 917 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 918 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 919 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 920 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 921 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 922 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 923 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 924 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 925 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 926 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 927 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 928 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 929 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 930 closed: True
    test 931 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 932 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 933 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 934 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 935 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 936 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 937 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 938 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 939 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 940 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 941 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 942 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 943 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 944 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 945 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 946 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 947 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 948 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 949 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 950 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 951 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 952 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 953 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 954 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 955 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 956 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 957 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 958 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 959 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 960 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 961 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 962 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 963 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 964 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 965 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 966 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 967 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 968 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 969 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 970 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 971 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 972 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 973 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 974 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 975 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 976 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 977 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 978 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 979 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 980 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 981 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 982 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 983 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 984 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 985 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 986 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 987 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 988 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 989 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 990 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 991 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 992 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 993 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 994 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 995 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 996 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 997 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 998 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 999 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 1000 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 1001 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 1002 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 1003 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 1004 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 1005 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 1006 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 1007 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 1008 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 1009 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 1010 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 1011 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 1012 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 1013 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 1014 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 1015 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 1016 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 1017 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 1018 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 1019 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 1020 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 1021 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 1022 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 1023 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 1024 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 1025 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 1026 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 1027 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 1028 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 1029 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 1030 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 1031 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 1032 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 1033 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 1034 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 1035 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 1036 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 1037 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 1038 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 1039 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 1040 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 1041 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 1042 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 1043 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 1044 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 1045 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 1046 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 1047 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 1048 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 1049 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 1050 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 1051 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 1052 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 1053 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 1054 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 1055 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 1056 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 1057 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 1058 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 1059 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 1060 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 1061 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 1062 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 1063 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 1064 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 1065 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 1066 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 1067 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 1068 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 1069 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 1070 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 1071 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 1072 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 1073 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 1074 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 1075 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 1076 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 1077 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 1078 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 1079 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 1080 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 1081 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 1082 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 1083 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 1084 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 1085 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 1086 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 1087 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 1088 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 1089 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 1090 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 1091 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 1092 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 1093 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 1094 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 1095 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 1096 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 1097 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 1098 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 1099 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 1100 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 1101 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 1102 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 1103 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 1104 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 1105 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 1106 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 1107 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 1108 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 1109 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 1110 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 1111 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 1112 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 1113 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 1114 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 1115 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 1116 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 1117 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 1118 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 1119 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 1120 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 1121 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 1122 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 1123 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 1124 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 1125 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 1126 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 1127 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 1128 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 1129 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 1130 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 1131 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 1132 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 1133 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 1134 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 1135 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 1136 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 1137 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 1138 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 1139 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 1140 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 1141 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 1142 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 1143 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001323
    test 1144 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000468
    test 1145 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000333
    test 1146 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 1147 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 1148 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 1149 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 1150 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 1151 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 1152 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 1153 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 1154 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 1155 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 1156 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 1157 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 1158 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1159 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 1160 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1161 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1162 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 1163 closed: True
    test 1164 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1165 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1166 GeoidPGM('egm2008-1.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 12.636
    test 1167 GeoidPGM('egm2008-1.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.749
    test 1168 GeoidPGM('egm2008-1.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 65.109
    test 1169 GeoidPGM('egm2008-1.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 24.889
    test 1170 GeoidPGM('egm2008-1.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -29.557
    test 1171 GeoidPGM('egm2008-1.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 9.742
    test 1172 GeoidPGM('egm2008-1.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 30.059
    test 1173 GeoidPGM('egm2008-1.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 60.690
    test 1174 GeoidPGM('egm2008-1.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 69.133
    test 1175 GeoidPGM('egm2008-1.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 36.520
    test 1176 GeoidPGM('egm2008-1.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 6.801
    test 1177 GeoidPGM('egm2008-1.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.651
    test 1178 GeoidPGM('egm2008-1.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.040
    test 1179 GeoidPGM('egm2008-1.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -1.328
    test 1180 GeoidPGM('egm2008-1.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -2.172
    test 1181 GeoidPGM('egm2008-1.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -17.411
    test 1182 GeoidPGM('egm2008-1.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -16.425
    test 1183 GeoidPGM('egm2008-1.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 24.698
    test 1184 GeoidPGM('egm2008-1.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.329
    test 1185 GeoidPGM('egm2008-1.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 43.802
    test 1186 GeoidPGM('egm2008-1.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.716
    test 1187 GeoidPGM('egm2008-1.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.469
    test 1188 GeoidPGM('egm2008-1.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 49.944
    test 1189 GeoidPGM('egm2008-1.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -35.878
    test 1190 GeoidPGM('egm2008-1.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -40.777
    test 1191 GeoidPGM('egm2008-1.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 26.559
    test 1192 GeoidPGM('egm2008-1.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.361
    test 1193 GeoidPGM('egm2008-1.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 21.107
    test 1194 GeoidPGM('egm2008-1.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -7.202
    test 1195 GeoidPGM('egm2008-1.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -17.168
    test 1196 GeoidPGM('egm2008-1.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.359
    test 1197 GeoidPGM('egm2008-1.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 52.118
    test 1198 GeoidPGM('egm2008-1.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -38.950
    test 1199 GeoidPGM('egm2008-1.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.934
    test 1200 GeoidPGM('egm2008-1.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.879
    test 1201 GeoidPGM('egm2008-1.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -5.025
    test 1202 GeoidPGM('egm2008-1.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 24.296
    test 1203 GeoidPGM('egm2008-1.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 25.131
    test 1204 GeoidPGM('egm2008-1.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 40.721
    test 1205 GeoidPGM('egm2008-1.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 22.388
    test 1206 GeoidPGM('egm2008-1.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 22.486
    test 1207 GeoidPGM('egm2008-1.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.943
    test 1208 GeoidPGM('egm2008-1.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -47.387
    test 1209 GeoidPGM('egm2008-1.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -18.403
    test 1210 GeoidPGM('egm2008-1.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 10.185
    test 1211 GeoidPGM('egm2008-1.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 5.671
    test 1212 GeoidPGM('egm2008-1.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -24.577
    test 1213 GeoidPGM('egm2008-1.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 43.288
    test 1214 GeoidPGM('egm2008-1.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 13.748
    test 1215 GeoidPGM('egm2008-1.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -5.342
    test 1216 GeoidPGM('egm2008-1.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -25.579
    test 1217 GeoidPGM('egm2008-1.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -9.849
    test 1218 GeoidPGM('egm2008-1.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.491
    test 1219 GeoidPGM('egm2008-1.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected 0.244
    test 1220 GeoidPGM('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 1221 GeoidPGM('egm2008-1.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.401
    test 1222 GeoidPGM('egm2008-1.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -17.890
    test 1223 GeoidPGM('egm2008-1.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 46.421
    test 1224 GeoidPGM('egm2008-1.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -14.475
    test 1225 GeoidPGM('egm2008-1.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.118
    test 1226 GeoidPGM('egm2008-1.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.291
    test 1227 GeoidPGM('egm2008-1.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.326
    test 1228 GeoidPGM('egm2008-1.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -33.098
    test 1229 GeoidPGM('egm2008-1.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 9.430
    test 1230 GeoidPGM('egm2008-1.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 6.032
    test 1231 GeoidPGM('egm2008-1.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -44.330
    test 1232 GeoidPGM('egm2008-1.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.775
    test 1233 GeoidPGM('egm2008-1.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 29.243
    test 1234 GeoidPGM('egm2008-1.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -40.676
    test 1235 GeoidPGM('egm2008-1.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.353
    test 1236 GeoidPGM('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 1237 GeoidPGM('egm2008-1.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 60.629
    test 1238 GeoidPGM('egm2008-1.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 6.617
    test 1239 GeoidPGM('egm2008-1.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -31.887
    test 1240 GeoidPGM('egm2008-1.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.535
    test 1241 GeoidPGM('egm2008-1.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.630
    test 1242 GeoidPGM('egm2008-1.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 22.275
    test 1243 GeoidPGM('egm2008-1.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 17.094
    test 1244 GeoidPGM('egm2008-1.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.941
    test 1245 GeoidPGM('egm2008-1.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -42.740
    test 1246 GeoidPGM('egm2008-1.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -21.651
    test 1247 GeoidPGM('egm2008-1.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.240
    test 1248 GeoidPGM('egm2008-1.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.758
    test 1249 GeoidPGM('egm2008-1.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -19.607
    test 1250 GeoidPGM('egm2008-1.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 26.258
    test 1251 GeoidPGM('egm2008-1.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -3.824
    test 1252 GeoidPGM('egm2008-1.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 18.195
    test 1253 GeoidPGM('egm2008-1.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -17.725
    test 1254 GeoidPGM('egm2008-1.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.513
    test 1255 GeoidPGM('egm2008-1.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.809
    test 1256 GeoidPGM('egm2008-1.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -8.026
    test 1257 GeoidPGM('egm2008-1.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.688
    test 1258 GeoidPGM('egm2008-1.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.218
    test 1259 GeoidPGM('egm2008-1.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -2.724
    test 1260 GeoidPGM('egm2008-1.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -42.565
    test 1261 GeoidPGM('egm2008-1.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 38.341
    test 1262 GeoidPGM('egm2008-1.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 33.889
    test 1263 GeoidPGM('egm2008-1.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -37.380
    test 1264 GeoidPGM('egm2008-1.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -1.858
    test 1265 GeoidPGM('egm2008-1.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 34.195
    test 1266 GeoidPGM('egm2008-1.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.767
    test 1267 GeoidPGM('egm2008-1.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 15.612
    test 1268 GeoidPGM('egm2008-1.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -11.063
    test 1269 GeoidPGM('egm2008-1.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 27.387
    test 1270 GeoidPGM('egm2008-1.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -23.817
    test 1271 GeoidPGM('egm2008-1.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.712
    test 1272 GeoidPGM('egm2008-1.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -7.344
    test 1273 GeoidPGM('egm2008-1.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 29.998
    test 1274 GeoidPGM('egm2008-1.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -61.869
    test 1275 GeoidPGM('egm2008-1.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.937
    test 1276 GeoidPGM('egm2008-1.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 38.556
    test 1277 GeoidPGM('egm2008-1.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 19.671
    test 1278 GeoidPGM('egm2008-1.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 2.272
    test 1279 GeoidPGM('egm2008-1.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 24.863
    test 1280 GeoidPGM('egm2008-1.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 21.636
    test 1281 GeoidPGM('egm2008-1.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -33.851
    test 1282 GeoidPGM('egm2008-1.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -5.299
    test 1283 GeoidPGM('egm2008-1.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.789
    test 1284 GeoidPGM('egm2008-1.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -35.030
    test 1285 GeoidPGM('egm2008-1.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -15.338
    test 1286 GeoidPGM('egm2008-1.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.356
    test 1287 GeoidPGM('egm2008-1.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.650
    test 1288 GeoidPGM('egm2008-1.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.359
    test 1289 GeoidPGM('egm2008-1.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 3.615
    test 1290 GeoidPGM('egm2008-1.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 23.947
    test 1291 GeoidPGM('egm2008-1.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 51.495
    test 1292 GeoidPGM('egm2008-1.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.910
    test 1293 GeoidPGM('egm2008-1.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -52.131
    test 1294 GeoidPGM('egm2008-1.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 37.045
    test 1295 GeoidPGM('egm2008-1.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 64.180
    test 1296 GeoidPGM('egm2008-1.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -62.475
    test 1297 GeoidPGM('egm2008-1.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -8.454
    test 1298 GeoidPGM('egm2008-1.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 40.834
    test 1299 GeoidPGM('egm2008-1.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -60.455
    test 1300 GeoidPGM('egm2008-1.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 9.727
    test 1301 GeoidPGM('egm2008-1.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 32.142
    test 1302 GeoidPGM('egm2008-1.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -6.220
    test 1303 GeoidPGM('egm2008-1.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 32.489
    test 1304 GeoidPGM('egm2008-1.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -24.692
    test 1305 GeoidPGM('egm2008-1.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.749
    test 1306 GeoidPGM('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 1307 GeoidPGM('egm2008-1.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -13.455
    test 1308 GeoidPGM('egm2008-1.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.627
    test 1309 GeoidPGM('egm2008-1.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.221
    test 1310 GeoidPGM('egm2008-1.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.836
    test 1311 GeoidPGM('egm2008-1.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 19.571
    test 1312 GeoidPGM('egm2008-1.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.227
    test 1313 GeoidPGM('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 1314 GeoidPGM('egm2008-1.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 24.829
    test 1315 GeoidPGM('egm2008-1.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.705
    test 1316 GeoidPGM('egm2008-1.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -17.053
    test 1317 GeoidPGM('egm2008-1.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 11.716
    test 1318 GeoidPGM('egm2008-1.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.530
    test 1319 GeoidPGM('egm2008-1.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 45.929
    test 1320 GeoidPGM('egm2008-1.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.283
    test 1321 GeoidPGM('egm2008-1.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -8.467
    test 1322 GeoidPGM('egm2008-1.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -1.829
    test 1323 GeoidPGM('egm2008-1.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.506
    test 1324 GeoidPGM('egm2008-1.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.384
    test 1325 GeoidPGM('egm2008-1.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -38.963
    test 1326 GeoidPGM('egm2008-1.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -6.956
    test 1327 GeoidPGM('egm2008-1.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 51.005
    test 1328 GeoidPGM('egm2008-1.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.192
    test 1329 GeoidPGM('egm2008-1.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -15.038
    test 1330 GeoidPGM('egm2008-1.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 17.791
    test 1331 GeoidPGM('egm2008-1.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 44.652
    test 1332 GeoidPGM('egm2008-1.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.971
    test 1333 GeoidPGM('egm2008-1.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 11.631
    test 1334 GeoidPGM('egm2008-1.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 7.394
    test 1335 GeoidPGM('egm2008-1.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 7.932
    test 1336 GeoidPGM('egm2008-1.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.593
    test 1337 GeoidPGM('egm2008-1.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 4.384
    test 1338 GeoidPGM('egm2008-1.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected 1.297
    test 1339 GeoidPGM('egm2008-1.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 30.852
    test 1340 GeoidPGM('egm2008-1.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.704
    test 1341 GeoidPGM('egm2008-1.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 21.264
    test 1342 GeoidPGM('egm2008-1.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.443
    test 1343 GeoidPGM('egm2008-1.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 9.998
    test 1344 GeoidPGM('egm2008-1.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.428
    test 1345 GeoidPGM('egm2008-1.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -23.154
    test 1346 GeoidPGM('egm2008-1.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.662
    test 1347 GeoidPGM('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 1348 GeoidPGM('egm2008-1.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.221
    test 1349 GeoidPGM('egm2008-1.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.355
    test 1350 GeoidPGM('egm2008-1.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.147
    test 1351 GeoidPGM('egm2008-1.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 41.072
    test 1352 GeoidPGM('egm2008-1.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 42.982
    test 1353 GeoidPGM('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 1354 GeoidPGM('egm2008-1.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.662
    test 1355 GeoidPGM('egm2008-1.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -8.438
    test 1356 GeoidPGM('egm2008-1.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.712
    test 1357 GeoidPGM('egm2008-1.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -12.653
    test 1358 GeoidPGM('egm2008-1.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 17.166
    test 1359 GeoidPGM('egm2008-1.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.874
    test 1360 GeoidPGM('egm2008-1.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.124
    test 1361 GeoidPGM('egm2008-1.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.307
    test 1362 GeoidPGM('egm2008-1.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 23.434
    test 1363 GeoidPGM('egm2008-1.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 4.508
    test 1364 GeoidPGM('egm2008-1.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.549
    test 1365 GeoidPGM('egm2008-1.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 5.748
    test 1366 GeoidPGM('egm2008-1.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 28.788
    test 1367 GeoidPGM('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.588  FAILED, KNOWN, expected -30.589
    test 1368 GeoidPGM('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 1369 GeoidPGM('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 1370 GeoidPGM('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 1371 GeoidPGM('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 1372 GeoidPGM('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 1373 GeoidPGM('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 1374 GeoidPGM('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.066  FAILED, KNOWN, expected -30.067
    test 1375 GeoidPGM('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 1376 GeoidPGM('egm2008-1.pgm').height() kind 3, eps max (in 0 FAILED): 0.001386
    test 1377 GeoidPGM('egm2008-1.pgm').height() kind 3, eps mean (of 15 total): 0.000532
    test 1378 GeoidPGM('egm2008-1.pgm').height() kind 3, eps stdev (of 15 total): 0.000380
    test 1379 GeoidPGM('egm2008-1.pgm').highest(): 44.15, -109.817, -7.089
    test 1380 GeoidPGM('egm2008-1.pgm').lowerleft(): 25.0, -125.0, -45.45
    test 1381 GeoidPGM('egm2008-1.pgm').lowerright(): 25.0, -64.983, -50.831
    test 1382 GeoidPGM('egm2008-1.pgm').lowest(): 25.733, -69.767, -52.518
    test 1383 GeoidPGM('egm2008-1.pgm').upperleft(): 55.0, -125.0, -10.722
    test 1384 GeoidPGM('egm2008-1.pgm').upperright(): 55.0, -64.983, -16.223
    test 1385 GeoidPGM('egm2008-1.pgm').dtype: ("dtype('float64')",)
    test 1386 GeoidPGM('egm2008-1.pgm').knots: ('6485401',)
    test 1387 GeoidPGM('egm2008-1.pgm').mean: ('-29.707',)
    test 1388 GeoidPGM('egm2008-1.pgm').nBytes: ('51883208',)
    test 1389 GeoidPGM('egm2008-1.pgm').smooth: ('0',)
    test 1390 GeoidPGM('egm2008-1.pgm').stdev: ('9.505',)
    test 1391 GeoidPGM('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1392 GeoidPGM('egm2008-1.pgm')._ll2g2(180, 360): (180, 720.0)
    test 1393 GeoidPGM('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1394 GeoidPGM('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1395 GeoidPGM('egm2008-1.pgm').toStr: GeoidPGM('egm2008-1.pgm'): lowerleft(25.0, -125.0, -45.45), upperright(55.0, -64.983, -16.223), center(40.0, -94.992, -31.838), highest(44.15, -109.817, -7.089), lowest(25.733, -69.767, -52.518)

    test 1396 closed: True
    test 1397 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 1398 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 1399 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 1400 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 1401 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 1402 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 1403 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 1404 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 1405 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 1406 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 1407 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 1408 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 1409 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 1410 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 1411 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 1412 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 1413 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 1414 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 1415 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 1416 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 1417 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 1418 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 1419 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 1420 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 1421 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 1422 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 1423 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 1424 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 1425 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 1426 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 1427 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 1428 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 1429 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 1430 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 1431 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 1432 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 1433 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 1434 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 1435 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 1436 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 1437 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 1438 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 1439 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 1440 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 1441 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 1442 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 1443 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 1444 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 1445 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 1446 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 1447 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 1448 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 1449 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 1450 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 1451 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 1452 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 1453 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 1454 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 1455 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 1456 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 1457 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 1458 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 1459 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 1460 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 1461 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 1462 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 1463 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 1464 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 1465 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 1466 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 1467 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 1468 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 1469 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 1470 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 1471 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 1472 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 1473 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 1474 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 1475 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 1476 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 1477 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 1478 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 1479 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 1480 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 1481 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 1482 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 1483 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 1484 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 1485 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 1486 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 1487 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 1488 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 1489 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 1490 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 1491 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 1492 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 1493 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 1494 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 1495 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 1496 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 1497 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 1498 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 1499 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 1500 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 1501 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 1502 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 1503 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 1504 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 1505 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 1506 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 1507 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 1508 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 1509 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 1510 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 1511 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 1512 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 1513 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 1514 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 1515 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 1516 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 1517 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 1518 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 1519 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 1520 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 1521 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 1522 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 1523 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 1524 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 1525 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 1526 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 1527 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 1528 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 1529 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1530 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1531 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1532 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1533 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1534 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1535 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1536 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1537 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1538 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1539 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1540 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1541 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1542 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1543 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1544 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1545 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1546 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1547 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1548 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1549 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1550 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1551 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1552 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1553 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1554 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1555 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1556 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1557 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1558 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1559 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1560 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1561 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1562 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1563 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1564 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1565 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1566 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1567 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1568 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1569 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1570 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1571 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1572 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1573 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1574 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1575 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1576 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1577 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1578 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1579 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1580 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1581 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1582 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1583 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1584 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1585 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1586 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1587 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1588 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1589 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1590 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1591 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1592 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1593 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1594 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1595 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1596 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1597 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1598 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1599 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1600 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1601 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1602 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1603 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1604 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1605 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1606 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1607 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1608 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1609 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.115669
    test 1610 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.010307
    test 1611 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.015203
    test 1612 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1613 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1614 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1615 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1616 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1617 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1618 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1619 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1620 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1621 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1622 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1623 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1624 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1625 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1626 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1627 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1628 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1629 closed: True
    test 1630 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1631 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1632 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1633 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1634 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1635 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1636 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1637 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1638 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1639 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1640 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1641 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1642 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1643 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1644 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1645 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1646 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1647 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1648 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1649 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1650 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1651 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1652 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1653 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1654 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1655 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1656 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1657 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1658 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1659 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1660 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1661 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1662 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1663 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1664 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1665 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1666 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1667 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1668 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1669 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1670 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1671 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1672 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1673 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1674 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1675 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1676 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1677 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1678 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1679 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1680 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1681 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1682 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1683 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1684 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1685 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1686 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1687 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1688 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1689 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1690 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1691 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1692 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1693 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1694 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1695 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1696 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1697 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1698 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1699 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1700 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1701 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1702 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1703 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1704 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1705 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1706 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1707 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1708 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1709 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1710 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1711 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1712 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1713 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1714 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1715 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1716 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1717 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1718 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1719 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1720 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1721 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1722 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1723 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1724 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1725 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1726 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1727 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1728 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1729 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1730 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1731 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1732 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1733 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1734 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1735 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1736 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1737 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1738 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1739 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1740 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1741 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1742 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1743 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1744 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1745 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1746 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1747 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1748 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1749 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1750 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1751 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1752 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1753 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1754 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1755 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1756 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1757 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1758 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1759 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1760 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1761 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1762 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1763 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1764 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1765 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1766 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1767 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1768 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1769 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1770 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1771 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1772 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1773 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1774 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1775 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1776 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1777 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1778 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1779 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1780 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1781 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1782 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1783 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1784 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1785 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1786 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1787 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1788 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1789 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1790 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1791 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1792 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1793 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1794 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1795 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1796 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1797 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1798 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1799 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1800 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1801 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1802 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1803 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1804 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1805 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1806 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1807 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1808 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1809 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1810 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1811 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1812 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1813 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1814 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1815 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1816 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1817 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1818 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1819 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1820 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1821 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1822 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1823 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1824 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1825 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1826 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1827 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1828 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1829 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1830 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1831 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1832 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1833 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1834 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1835 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1836 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1837 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1838 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1839 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1840 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1841 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1842 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005459
    test 1843 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000736
    test 1844 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000728
    test 1845 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1846 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1847 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1848 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1849 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1850 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1851 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1852 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1853 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1854 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1855 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1856 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1857 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1858 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1859 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1860 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1861 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1862 closed: True
    test 1863 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1864 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1865 GeoidPGM('egm84-15.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 11.729
    test 1866 GeoidPGM('egm84-15.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.270
    test 1867 GeoidPGM('egm84-15.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 67.074
    test 1868 GeoidPGM('egm84-15.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 25.344
    test 1869 GeoidPGM('egm84-15.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -28.919
    test 1870 GeoidPGM('egm84-15.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 14.386
    test 1871 GeoidPGM('egm84-15.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 30.700
    test 1872 GeoidPGM('egm84-15.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 62.225
    test 1873 GeoidPGM('egm84-15.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 70.222
    test 1874 GeoidPGM('egm84-15.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 34.336
    test 1875 GeoidPGM('egm84-15.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 8.206
    test 1876 GeoidPGM('egm84-15.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.074
    test 1877 GeoidPGM('egm84-15.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.129
    test 1878 GeoidPGM('egm84-15.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -3.217
    test 1879 GeoidPGM('egm84-15.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -1.531
    test 1880 GeoidPGM('egm84-15.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -16.742
    test 1881 GeoidPGM('egm84-15.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -15.412
    test 1882 GeoidPGM('egm84-15.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 25.078
    test 1883 GeoidPGM('egm84-15.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.120
    test 1884 GeoidPGM('egm84-15.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 46.224
    test 1885 GeoidPGM('egm84-15.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.649
    test 1886 GeoidPGM('egm84-15.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.764
    test 1887 GeoidPGM('egm84-15.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 51.089
    test 1888 GeoidPGM('egm84-15.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -34.471
    test 1889 GeoidPGM('egm84-15.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -39.124
    test 1890 GeoidPGM('egm84-15.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 28.142
    test 1891 GeoidPGM('egm84-15.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.619
    test 1892 GeoidPGM('egm84-15.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 22.575
    test 1893 GeoidPGM('egm84-15.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -6.893
    test 1894 GeoidPGM('egm84-15.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -15.012
    test 1895 GeoidPGM('egm84-15.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.776
    test 1896 GeoidPGM('egm84-15.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 53.645
    test 1897 GeoidPGM('egm84-15.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -39.074
    test 1898 GeoidPGM('egm84-15.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.645
    test 1899 GeoidPGM('egm84-15.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.528
    test 1900 GeoidPGM('egm84-15.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -6.907
    test 1901 GeoidPGM('egm84-15.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 21.711
    test 1902 GeoidPGM('egm84-15.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 25.611
    test 1903 GeoidPGM('egm84-15.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 41.569
    test 1904 GeoidPGM('egm84-15.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 23.280
    test 1905 GeoidPGM('egm84-15.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 24.502
    test 1906 GeoidPGM('egm84-15.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.826
    test 1907 GeoidPGM('egm84-15.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -45.104
    test 1908 GeoidPGM('egm84-15.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -17.252
    test 1909 GeoidPGM('egm84-15.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 12.972
    test 1910 GeoidPGM('egm84-15.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 4.776
    test 1911 GeoidPGM('egm84-15.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -23.577
    test 1912 GeoidPGM('egm84-15.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 43.885
    test 1913 GeoidPGM('egm84-15.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 17.072
    test 1914 GeoidPGM('egm84-15.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -6.643
    test 1915 GeoidPGM('egm84-15.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -23.325
    test 1916 GeoidPGM('egm84-15.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -10.698
    test 1917 GeoidPGM('egm84-15.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.265
    test 1918 GeoidPGM('egm84-15.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected 0.689
    test 1919 GeoidPGM('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1920 GeoidPGM('egm84-15.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.554
    test 1921 GeoidPGM('egm84-15.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -16.936
    test 1922 GeoidPGM('egm84-15.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 45.295
    test 1923 GeoidPGM('egm84-15.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -13.586
    test 1924 GeoidPGM('egm84-15.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.468
    test 1925 GeoidPGM('egm84-15.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.092
    test 1926 GeoidPGM('egm84-15.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.830
    test 1927 GeoidPGM('egm84-15.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -32.302
    test 1928 GeoidPGM('egm84-15.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 9.228
    test 1929 GeoidPGM('egm84-15.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 5.965
    test 1930 GeoidPGM('egm84-15.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -45.013
    test 1931 GeoidPGM('egm84-15.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.118
    test 1932 GeoidPGM('egm84-15.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 30.497
    test 1933 GeoidPGM('egm84-15.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -40.396
    test 1934 GeoidPGM('egm84-15.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.704
    test 1935 GeoidPGM('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.277
    test 1936 GeoidPGM('egm84-15.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 61.024
    test 1937 GeoidPGM('egm84-15.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 4.994
    test 1938 GeoidPGM('egm84-15.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -30.237
    test 1939 GeoidPGM('egm84-15.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.006
    test 1940 GeoidPGM('egm84-15.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.283
    test 1941 GeoidPGM('egm84-15.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 22.394
    test 1942 GeoidPGM('egm84-15.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 17.550
    test 1943 GeoidPGM('egm84-15.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.622
    test 1944 GeoidPGM('egm84-15.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -41.484
    test 1945 GeoidPGM('egm84-15.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -20.968
    test 1946 GeoidPGM('egm84-15.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.568
    test 1947 GeoidPGM('egm84-15.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.581
    test 1948 GeoidPGM('egm84-15.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -18.329
    test 1949 GeoidPGM('egm84-15.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 25.001
    test 1950 GeoidPGM('egm84-15.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -2.940
    test 1951 GeoidPGM('egm84-15.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 18.228
    test 1952 GeoidPGM('egm84-15.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -16.507
    test 1953 GeoidPGM('egm84-15.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.275
    test 1954 GeoidPGM('egm84-15.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.852
    test 1955 GeoidPGM('egm84-15.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -6.872
    test 1956 GeoidPGM('egm84-15.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.006
    test 1957 GeoidPGM('egm84-15.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.296
    test 1958 GeoidPGM('egm84-15.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -1.481
    test 1959 GeoidPGM('egm84-15.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -40.915
    test 1960 GeoidPGM('egm84-15.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 37.495
    test 1961 GeoidPGM('egm84-15.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 32.258
    test 1962 GeoidPGM('egm84-15.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -41.529
    test 1963 GeoidPGM('egm84-15.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -1.377
    test 1964 GeoidPGM('egm84-15.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 35.280
    test 1965 GeoidPGM('egm84-15.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.958
    test 1966 GeoidPGM('egm84-15.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 18.307
    test 1967 GeoidPGM('egm84-15.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -10.400
    test 1968 GeoidPGM('egm84-15.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 28.638
    test 1969 GeoidPGM('egm84-15.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -24.059
    test 1970 GeoidPGM('egm84-15.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.806
    test 1971 GeoidPGM('egm84-15.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -6.820
    test 1972 GeoidPGM('egm84-15.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 31.486
    test 1973 GeoidPGM('egm84-15.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -62.024
    test 1974 GeoidPGM('egm84-15.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.248
    test 1975 GeoidPGM('egm84-15.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 43.255
    test 1976 GeoidPGM('egm84-15.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 18.498
    test 1977 GeoidPGM('egm84-15.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 4.067
    test 1978 GeoidPGM('egm84-15.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 25.454
    test 1979 GeoidPGM('egm84-15.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 26.657
    test 1980 GeoidPGM('egm84-15.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -31.966
    test 1981 GeoidPGM('egm84-15.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -4.415
    test 1982 GeoidPGM('egm84-15.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.741
    test 1983 GeoidPGM('egm84-15.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -34.900
    test 1984 GeoidPGM('egm84-15.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -14.223
    test 1985 GeoidPGM('egm84-15.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.317
    test 1986 GeoidPGM('egm84-15.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.163
    test 1987 GeoidPGM('egm84-15.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.287
    test 1988 GeoidPGM('egm84-15.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 4.068
    test 1989 GeoidPGM('egm84-15.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 24.407
    test 1990 GeoidPGM('egm84-15.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 53.054
    test 1991 GeoidPGM('egm84-15.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.622
    test 1992 GeoidPGM('egm84-15.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -53.540
    test 1993 GeoidPGM('egm84-15.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 36.262
    test 1994 GeoidPGM('egm84-15.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 64.369
    test 1995 GeoidPGM('egm84-15.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -61.300
    test 1996 GeoidPGM('egm84-15.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -7.999
    test 1997 GeoidPGM('egm84-15.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 41.477
    test 1998 GeoidPGM('egm84-15.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -59.876
    test 1999 GeoidPGM('egm84-15.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 8.404
    test 2000 GeoidPGM('egm84-15.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 39.152
    test 2001 GeoidPGM('egm84-15.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -7.076
    test 2002 GeoidPGM('egm84-15.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 33.178
    test 2003 GeoidPGM('egm84-15.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -23.832
    test 2004 GeoidPGM('egm84-15.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.206
    test 2005 GeoidPGM('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.143  FAILED, KNOWN, expected -22.142
    test 2006 GeoidPGM('egm84-15.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -13.765
    test 2007 GeoidPGM('egm84-15.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.898
    test 2008 GeoidPGM('egm84-15.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.474
    test 2009 GeoidPGM('egm84-15.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.718
    test 2010 GeoidPGM('egm84-15.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 16.635
    test 2011 GeoidPGM('egm84-15.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.012
    test 2012 GeoidPGM('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 2013 GeoidPGM('egm84-15.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 26.236
    test 2014 GeoidPGM('egm84-15.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.953
    test 2015 GeoidPGM('egm84-15.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -17.959
    test 2016 GeoidPGM('egm84-15.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 9.078
    test 2017 GeoidPGM('egm84-15.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.158
    test 2018 GeoidPGM('egm84-15.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 46.776
    test 2019 GeoidPGM('egm84-15.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.055
    test 2020 GeoidPGM('egm84-15.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -7.696
    test 2021 GeoidPGM('egm84-15.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -1.049
    test 2022 GeoidPGM('egm84-15.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.081
    test 2023 GeoidPGM('egm84-15.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.427
    test 2024 GeoidPGM('egm84-15.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -38.648
    test 2025 GeoidPGM('egm84-15.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -5.519
    test 2026 GeoidPGM('egm84-15.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 53.431
    test 2027 GeoidPGM('egm84-15.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.979
    test 2028 GeoidPGM('egm84-15.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -13.197
    test 2029 GeoidPGM('egm84-15.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 18.945
    test 2030 GeoidPGM('egm84-15.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 45.187
    test 2031 GeoidPGM('egm84-15.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.145
    test 2032 GeoidPGM('egm84-15.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 13.146
    test 2033 GeoidPGM('egm84-15.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 4.933
    test 2034 GeoidPGM('egm84-15.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 12.326
    test 2035 GeoidPGM('egm84-15.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.030
    test 2036 GeoidPGM('egm84-15.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 3.110
    test 2037 GeoidPGM('egm84-15.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected -2.741
    test 2038 GeoidPGM('egm84-15.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 32.085
    test 2039 GeoidPGM('egm84-15.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.060
    test 2040 GeoidPGM('egm84-15.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 22.916
    test 2041 GeoidPGM('egm84-15.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.519
    test 2042 GeoidPGM('egm84-15.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 11.020
    test 2043 GeoidPGM('egm84-15.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.171
    test 2044 GeoidPGM('egm84-15.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -22.944
    test 2045 GeoidPGM('egm84-15.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.580
    test 2046 GeoidPGM('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 2047 GeoidPGM('egm84-15.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.040
    test 2048 GeoidPGM('egm84-15.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.907
    test 2049 GeoidPGM('egm84-15.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.874
    test 2050 GeoidPGM('egm84-15.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 40.929
    test 2051 GeoidPGM('egm84-15.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 43.191
    test 2052 GeoidPGM('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.005  FAILED, KNOWN, expected -22.006
    test 2053 GeoidPGM('egm84-15.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.375
    test 2054 GeoidPGM('egm84-15.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -7.852
    test 2055 GeoidPGM('egm84-15.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.674
    test 2056 GeoidPGM('egm84-15.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -14.117
    test 2057 GeoidPGM('egm84-15.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 17.251
    test 2058 GeoidPGM('egm84-15.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.436
    test 2059 GeoidPGM('egm84-15.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.330
    test 2060 GeoidPGM('egm84-15.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.090
    test 2061 GeoidPGM('egm84-15.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 24.184
    test 2062 GeoidPGM('egm84-15.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 6.142
    test 2063 GeoidPGM('egm84-15.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.693
    test 2064 GeoidPGM('egm84-15.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 6.840
    test 2065 GeoidPGM('egm84-15.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 31.298
    test 2066 GeoidPGM('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.953  FAILED, KNOWN, expected -31.952
    test 2067 GeoidPGM('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 2068 GeoidPGM('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.031  FAILED, KNOWN, expected -17.032
    test 2069 GeoidPGM('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 2070 GeoidPGM('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.493  FAILED, KNOWN, expected -26.492
    test 2071 GeoidPGM('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 2072 GeoidPGM('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.557  FAILED, KNOWN, expected -22.556
    test 2073 GeoidPGM('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 2074 GeoidPGM('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 2075 GeoidPGM('egm84-15.pgm').height() kind 3, eps max (in 0 FAILED): 0.001055
    test 2076 GeoidPGM('egm84-15.pgm').height() kind 3, eps mean (of 15 total): 0.000534
    test 2077 GeoidPGM('egm84-15.pgm').height() kind 3, eps stdev (of 15 total): 0.000293
    test 2078 GeoidPGM('egm84-15.pgm').highest(): 44.0, -110.25, -6.927
    test 2079 GeoidPGM('egm84-15.pgm').lowerleft(): 25.0, -125.0, -45.237
    test 2080 GeoidPGM('egm84-15.pgm').lowerright(): 25.0, -64.75, -49.503
    test 2081 GeoidPGM('egm84-15.pgm').lowest(): 26.0, -69.5, -52.293
    test 2082 GeoidPGM('egm84-15.pgm').upperleft(): 55.0, -125.0, -11.157
    test 2083 GeoidPGM('egm84-15.pgm').upperright(): 55.0, -64.75, -15.43
    test 2084 GeoidPGM('egm84-15.pgm').dtype: ("dtype('float64')",)
    test 2085 GeoidPGM('egm84-15.pgm').knots: ('29161',)
    test 2086 GeoidPGM('egm84-15.pgm').mean: ('-29.223',)
    test 2087 GeoidPGM('egm84-15.pgm').nBytes: ('233288',)
    test 2088 GeoidPGM('egm84-15.pgm').smooth: ('0',)
    test 2089 GeoidPGM('egm84-15.pgm').stdev: ('9.692',)
    test 2090 GeoidPGM('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 2091 GeoidPGM('egm84-15.pgm')._ll2g2(180, 360): (180, 720.0)
    test 2092 GeoidPGM('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2093 GeoidPGM('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2094 GeoidPGM('egm84-15.pgm').toStr: GeoidPGM('egm84-15.pgm'): lowerleft(25.0, -125.0, -45.237), upperright(55.0, -64.75, -15.43), center(40.0, -94.875, -33.654), highest(44.0, -110.25, -6.927), lowest(26.0, -69.5, -52.293)

    test 2095 closed: True
    test 2096 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 2097 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 2098 GeoidG2012B('g2012bu0.bin').height(41.0, -95.0) kind 3: -30.312
    test 2099 GeoidG2012B('g2012bu0.bin').height(49.0, -120.5) kind 3: -16.112
    test 2100 GeoidG2012B('g2012bu0.bin').height(49.0, -103.5) kind 3: -18.955
    test 2101 GeoidG2012B('g2012bu0.bin').height(49.0, -86.5) kind 3: -37.584
    test 2102 GeoidG2012B('g2012bu0.bin').height(49.0, -69.5) kind 3: -25.867
    test 2103 GeoidG2012B('g2012bu0.bin').height(33.0, -120.5) kind 3: -39.554
    test 2104 GeoidG2012B('g2012bu0.bin').height(33.0, -103.5) kind 3: -21.917
    test 2105 GeoidG2012B('g2012bu0.bin').height(33.0, -86.5) kind 3: -29.001
    test 2106 GeoidG2012B('g2012bu0.bin').height(33.0, -69.5) kind 3: -46.725

    test 2107 GeoidG2012B('g2012bu0.bin').height() kind 3, eps max (in 0 FAILED): 0.000400
    test 2108 GeoidG2012B('g2012bu0.bin').height() kind 3, eps mean (of 9 total): 0.000222
    test 2109 GeoidG2012B('g2012bu0.bin').height() kind 3, eps stdev (of 9 total): 0.000139
    test 2110 GeoidG2012B('g2012bu0.bin').highest(): 58.0, -60.0, 3.31
    test 2111 GeoidG2012B('g2012bu0.bin').lowerleft(): 24.0, -130.0, -39.727
    test 2112 GeoidG2012B('g2012bu0.bin').lowerright(): 24.0, -59.983, -47.981
    test 2113 GeoidG2012B('g2012bu0.bin').lowest(): 25.9, -69.85, -50.709
    test 2114 GeoidG2012B('g2012bu0.bin').upperleft(): 58.0, -130.0, -1.095
    test 2115 GeoidG2012B('g2012bu0.bin').upperright(): 58.0, -59.983, 3.38
    test 2116 GeoidG2012B('g2012bu0.bin').dtype: ("dtype('>f4')",)
    test 2117 GeoidG2012B('g2012bu0.bin').knots: ('8574241',)
    test 2118 GeoidG2012B('g2012bu0.bin').mean: ('-29.481',)
    test 2119 GeoidG2012B('g2012bu0.bin').nBytes: ('34296964',)
    test 2120 GeoidG2012B('g2012bu0.bin').smooth: ('0',)
    test 2121 GeoidG2012B('g2012bu0.bin').stdev: ('10.063',)
    test 2122 GeoidG2012B('g2012bu0.bin')._g2ll2(180, 360): (180, 360)
    test 2123 GeoidG2012B('g2012bu0.bin')._ll2g2(180, 360): (180, 360)
    test 2124 GeoidG2012B('g2012bu0.bin')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2125 GeoidG2012B('g2012bu0.bin')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2126 GeoidG2012B('g2012bu0.bin').toStr: GeoidG2012B('g2012bu0.bin'): lowerleft(24.0, -130.0, -39.727), upperright(58.0, -59.983, 3.38), center(41.0, -94.992, -30.328), highest(58.0, -60.0, 3.31), lowest(25.9, -69.85, -50.709)

    test 2127 closed: True
    test 2128 copy(GeoidG2012B): (<class 'pygeodesy.geoids.GeoidG2012B'>, True)
    test 2129 GeoidG2012B.copy(): (<class 'pygeodesy.geoids.GeoidG2012B'>, True)

    1385 of 2129 testGeoids.py tests (65.1%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 88.501 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testGreatCircle.py

    testing testGreatCircle.py 20.09.09

    testGreatCircle(pygeodesy.sphericalNvector, 22.07.07)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 6.746 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testHausdorff.py

    testing testHausdorff.py 21.08.14
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (0, 1)
    test 4 randomrange[8]: (1, 4, 2, 6, 0, 3, 5, 7)
    test 5 randomrange[32]: (11, 6, 30, 28, 21, 9, 13, 26, 4, 29, 8, 27, 31, 15, 1, 24, 0, 25, 22, 2, 20, 17, 3, 23, 12, 19, 18, 14, 7, 10, 16, 5)
    test 6 randomrange[128]: (122, 62, 14, 24, 65, 57, 75, 84, 42, 32, 82, 43, 13, 34, 53, 104, 71, 22, 76, 15, 108, 113, 52, 79, 112, 54, 90, 106, 10, 87, 115, 123, 119, 120, 48, 61, 39, 19, 31, 94, 124, 98, 96, 3, 101, 25, 118, 30, 99, 105, 92, 66, 126, 114, 23, 117, 72, 67, 73, 64, 68, 50, 5, 74, 51, 9, 17, 21, 80, 95, 41, 37, 2, 11, 55, 127, 38, 85, 81, 109, 36, 121, 6, 102, 12, 1, 93, 91, 83, 16, 116, 103, 70, 56, 89, 35, 88, 86, 27, 20, 44, 110, 63, 28, 8, 4, 18, 45, 78, 100, 60, 125, 58, 33, 0, 7, 40, 59, 46, 69, 26, 77, 107, 47, 49, 97, 111, 29)
    test 7 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 8 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 9 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 10 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 11 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 12 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 13 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 14 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 18 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 19 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 20 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 21 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 22 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 23 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 24 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 28 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 29 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 30 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 31 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 32 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 33 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 34 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 38 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 39 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 40 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 41 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, 0.212)
    test 48 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, 0.20099)
    test 49 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, 0.212)
    test 50 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, 0.20099)
    test 51 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, None)
    test 52 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, None)
    test 53 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, None)
    test 54 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, 0.05965)
    test 58 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, 0.05532)
    test 59 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, 0.05965)
    test 60 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, 0.05532)
    test 61 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, None)
    test 62 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, None)
    test 63 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, None)
    test 64 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, 0.22571)
    test 68 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, 0.21579)
    test 69 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, 0.22571)
    test 70 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, 0.21579)
    test 71 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, None)
    test 72 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, None)
    test 73 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, None)
    test 74 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 78 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 79 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 80 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 81 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, 0.22286)
    test 88 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, 0.21318)
    test 89 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, 0.22286)
    test 90 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, 0.21318)
    test 91 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, None)
    test 92 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, None)
    test 93 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, None)
    test 94 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (radians): (0.50097, 35, 3, 90, 0.212)
    test 98 HausdorffHaversine (radians): (0.50097, 35, 3, 150, 0.20099)
    test 99 HausdorffHaversine (radians): (0.50097, 35, 3, 90, 0.212)
    test 100 HausdorffHaversine (radians): (0.50097, 35, 3, 150, 0.20099)
    test 101 HausdorffHaversine (radians): (0.50097, 35, 3, 90, None)
    test 102 HausdorffHaversine (radians): (0.50097, 35, 3, 150, None)
    test 103 HausdorffHaversine (radians): (0.50097, 35, 3, 90, None)
    test 104 HausdorffHaversine (radians): (0.50097, 35, 3, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 108 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 109 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 110 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 111 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 112 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 113 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 114 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (radians): (0.501, 35, 3, 90, 0.21184)
    test 118 HausdorffThomas (radians): (0.501, 35, 3, 150, 0.20084)
    test 119 HausdorffThomas (radians): (0.501, 35, 3, 90, 0.21184)
    test 120 HausdorffThomas (radians): (0.501, 35, 3, 150, 0.20084)
    test 121 HausdorffThomas (radians): (0.501, 35, 3, 90, None)
    test 122 HausdorffThomas (radians): (0.501, 35, 3, 150, None)
    test 123 HausdorffThomas (radians): (0.501, 35, 3, 90, None)
    test 124 HausdorffThomas (radians): (0.501, 35, 3, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (radians): (0.50097, 35, 3, 90, 0.212)
    test 128 HausdorffVincentys (radians): (0.50097, 35, 3, 150, 0.20099)
    test 129 HausdorffVincentys (radians): (0.50097, 35, 3, 90, 0.212)
    test 130 HausdorffVincentys (radians): (0.50097, 35, 3, 150, 0.20099)
    test 131 HausdorffVincentys (radians): (0.50097, 35, 3, 90, None)
    test 132 HausdorffVincentys (radians): (0.50097, 35, 3, 150, None)
    test 133 HausdorffVincentys (radians): (0.50097, 35, 3, 90, None)
    test 134 HausdorffVincentys (radians): (0.50097, 35, 3, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 137 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 138 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 139 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 140 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 141 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 142 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 143 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 144 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 145 copy(HausdorffKarney): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 146 HausdorffKarney.copy(): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 147 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 148 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 149 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 150 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 151 hausdorff_: (40.0, 22, 6, 90, None)
    test 152 hausdorff_: (48.0, 38, 36, 150, None)
    test 153 hausdorff_: (40.0, 22, 6, 90, None)
    test 154 hausdorff_: (48.0, 38, 36, 150, None)
    test 155 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 156 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 157 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 158 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 159 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 160 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 161 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 162 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 163 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 164 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 165 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 166 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 167 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 168 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 169 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 170 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 171 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 172 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 173 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 174 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 175 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 176 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 177 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 178 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 179 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 180 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 181 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 182 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 183 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 184 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 185 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 186 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 187 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 188 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 189 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 190 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 191 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 192 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 193 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 194 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 195 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 196 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 197 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 198 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 199 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 200 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 201 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 202 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 203 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 204 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)

    2 of 204 testHausdorff.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 28.021 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testHeights.py

    testing testHeights.py 21.09.30
    test 1 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 2 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 3 HeightIDWcosineAndoyerLambert(wrap=False): 6.108538037
    test 4 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 5 HeightIDWcosineAndoyerLambert(latlon): True
    test 6 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 7 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 8 HeightIDWcosineAndoyerLambert(latlon): True
    test 9 HeightIDWcosineAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 10 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 11 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 12 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 13 HeightIDWcosineAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 14 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 15 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 16 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 HeightIDWcosineAndoyerLambert.adjust: None
    test 19 HeightIDWcosineAndoyerLambert.kmin: 2
    test 20 HeightIDWcosineAndoyerLambert.wrap: False
    test 21 HeightIDWcosineAndoyerLambert.beta: 2
    test 22 HeightIDWcosineAndoyerLambert.adjust: None
    test 23 HeightIDWcosineAndoyerLambert.beta: 2
    test 24 HeightIDWcosineAndoyerLambert.kmin: 2
    test 25 HeightIDWcosineAndoyerLambert.wrap: False
    test 26 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 27 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 28 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.108538037
    test 29 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 30 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 31 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 32 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 33 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 34 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 35 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 36 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 37 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 38 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 39 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 40 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 41 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 42 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 43 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 44 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 45 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 46 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 47 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 48 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 49 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 50 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 51 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 52 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 53 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 54 HeightIDWcosineLaw(float): <class 'float'>
    test 55 HeightIDWcosineLaw(latlon): True
    test 56 HeightIDWcosineLaw(wrap=True): 5.0
    test 57 HeightIDWcosineLaw(float): <class 'float'>
    test 58 HeightIDWcosineLaw(latlon): True
    test 59 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 60 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 61 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 62 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 63 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 64 HeightIDWcosineLaw(list: <class 'list'>
    test 65 HeightIDWcosineLaw(list-float): <class 'float'>
    test 66 HeightIDWcosineLaw(list-float): <class 'float'>
    test 67 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 68 HeightIDWcosineLaw.adjust: None
    test 69 HeightIDWcosineLaw.kmin: 2
    test 70 HeightIDWcosineLaw.wrap: False
    test 71 HeightIDWcosineLaw.beta: 2
    test 72 HeightIDWcosineLaw.adjust: None
    test 73 HeightIDWcosineLaw.beta: 2
    test 74 HeightIDWcosineLaw.kmin: 2
    test 75 HeightIDWcosineLaw.wrap: False
    test 76 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 77 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 78 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 79 HeightIDWcosineLaw(float): <class 'float'>
    test 80 HeightIDWcosineLaw(latlon): True
    test 81 HeightIDWcosineLaw(wrap=False): 5.0
    test 82 HeightIDWcosineLaw(float): <class 'float'>
    test 83 HeightIDWcosineLaw(latlon): True
    test 84 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 85 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 86 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 87 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 88 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 89 HeightIDWcosineLaw(list: <class 'list'>
    test 90 HeightIDWcosineLaw(list-float): <class 'float'>
    test 91 HeightIDWcosineLaw(list-float): <class 'float'>
    test 92 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 93 HeightIDWcosineLaw.adjust: None
    test 94 HeightIDWcosineLaw.kmin: 2
    test 95 HeightIDWcosineLaw.wrap: False
    test 96 HeightIDWcosineLaw.beta: 2
    test 97 HeightIDWcosineLaw.adjust: None
    test 98 HeightIDWcosineLaw.beta: 2
    test 99 HeightIDWcosineLaw.kmin: 2
    test 100 HeightIDWcosineLaw.wrap: False
    test 101 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 102 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 103 HeightIDWdistanceTo(): 6.108538037
    test 104 HeightIDWdistanceTo(float): <class 'float'>
    test 105 HeightIDWdistanceTo(latlon): True
    test 106 HeightIDWdistanceTo(): 5.0
    test 107 HeightIDWdistanceTo(float): <class 'float'>
    test 108 HeightIDWdistanceTo(latlon): True
    test 109 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 110 HeightIDWdistanceTo(tuple): <class 'tuple'>
    test 111 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 112 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 113 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 114 HeightIDWdistanceTo(list: <class 'list'>
    test 115 HeightIDWdistanceTo(list-float): <class 'float'>
    test 116 HeightIDWdistanceTo(list-float): <class 'float'>
    test 117 HeightError: type(other) (9.0): incompatible with sphericalTrigonometry.LatLon.distanceTo(other), invalid
    test 118 HeightIDWdistanceTo.adjust: None
    test 119 HeightIDWdistanceTo.kmin: 2
    test 120 HeightIDWdistanceTo.wrap: None
    test 121 HeightIDWdistanceTo.beta: 2
    test 122 HeightIDWdistanceTo.adjust: None
    test 123 HeightIDWdistanceTo.beta: 2
    test 124 HeightIDWdistanceTo.kmin: 2
    test 125 HeightIDWdistanceTo.wrap: None
    test 126 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 127 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 128 HeightIDWeuclidean(adjust=False): 6.143010434
    test 129 HeightIDWeuclidean(float): <class 'float'>
    test 130 HeightIDWeuclidean(latlon): True
    test 131 HeightIDWeuclidean(adjust=False): 5.0
    test 132 HeightIDWeuclidean(float): <class 'float'>
    test 133 HeightIDWeuclidean(latlon): True
    test 134 HeightIDWeuclidean(adjust=False): (6.143010434, 5.0,)
    test 135 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 136 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 137 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 138 HeightIDWeuclidean(adjust=False): [6.143010434, 5.0]
    test 139 HeightIDWeuclidean(list: <class 'list'>
    test 140 HeightIDWeuclidean(list-float): <class 'float'>
    test 141 HeightIDWeuclidean(list-float): <class 'float'>
    test 142 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 143 HeightIDWeuclidean.adjust: True
    test 144 HeightIDWeuclidean.kmin: 2
    test 145 HeightIDWeuclidean.wrap: None
    test 146 HeightIDWeuclidean.beta: 2
    test 147 HeightIDWeuclidean.adjust: True
    test 148 HeightIDWeuclidean.beta: 2
    test 149 HeightIDWeuclidean.kmin: 2
    test 150 HeightIDWeuclidean.wrap: None
    test 151 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 152 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 153 HeightIDWequirectangular(adjust=True, wrap=True): 6.108538529
    test 154 HeightIDWequirectangular(float): <class 'float'>
    test 155 HeightIDWequirectangular(latlon): True
    test 156 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 157 HeightIDWequirectangular(float): <class 'float'>
    test 158 HeightIDWequirectangular(latlon): True
    test 159 HeightIDWequirectangular(adjust=True, wrap=True): (6.108538529, 5.0,)
    test 160 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 161 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 162 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 163 HeightIDWequirectangular(adjust=True, wrap=True): [6.108538529, 5.0]
    test 164 HeightIDWequirectangular(list: <class 'list'>
    test 165 HeightIDWequirectangular(list-float): <class 'float'>
    test 166 HeightIDWequirectangular(list-float): <class 'float'>
    test 167 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 168 HeightIDWequirectangular.adjust: True
    test 169 HeightIDWequirectangular.kmin: 2
    test 170 HeightIDWequirectangular.wrap: False
    test 171 HeightIDWequirectangular.beta: 1
    test 172 HeightIDWequirectangular.adjust: True
    test 173 HeightIDWequirectangular.beta: 1
    test 174 HeightIDWequirectangular.kmin: 2
    test 175 HeightIDWequirectangular.wrap: False
    test 176 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 177 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 178 HeightIDWequirectangular(adjust=False, wrap=True): 6.108614369
    test 179 HeightIDWequirectangular(float): <class 'float'>
    test 180 HeightIDWequirectangular(latlon): True
    test 181 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 182 HeightIDWequirectangular(float): <class 'float'>
    test 183 HeightIDWequirectangular(latlon): True
    test 184 HeightIDWequirectangular(adjust=False, wrap=True): (6.108614369, 5.0,)
    test 185 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 186 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 187 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 188 HeightIDWequirectangular(adjust=False, wrap=True): [6.108614369, 5.0]
    test 189 HeightIDWequirectangular(list: <class 'list'>
    test 190 HeightIDWequirectangular(list-float): <class 'float'>
    test 191 HeightIDWequirectangular(list-float): <class 'float'>
    test 192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 193 HeightIDWequirectangular.adjust: True
    test 194 HeightIDWequirectangular.kmin: 2
    test 195 HeightIDWequirectangular.wrap: False
    test 196 HeightIDWequirectangular.beta: 1
    test 197 HeightIDWequirectangular.adjust: True
    test 198 HeightIDWequirectangular.beta: 1
    test 199 HeightIDWequirectangular.kmin: 2
    test 200 HeightIDWequirectangular.wrap: False
    test 201 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 202 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 203 HeightIDWflatLocal(wrap=False): 6.860459007
    test 204 HeightIDWflatLocal(float): <class 'float'>
    test 205 HeightIDWflatLocal(latlon): True
    test 206 HeightIDWflatLocal(wrap=False): 5.0
    test 207 HeightIDWflatLocal(float): <class 'float'>
    test 208 HeightIDWflatLocal(latlon): True
    test 209 HeightIDWflatLocal(wrap=False): (6.860459007, 5.0,)
    test 210 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 211 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 212 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 213 HeightIDWflatLocal(wrap=False): [6.860459007, 5.0]
    test 214 HeightIDWflatLocal(list: <class 'list'>
    test 215 HeightIDWflatLocal(list-float): <class 'float'>
    test 216 HeightIDWflatLocal(list-float): <class 'float'>
    test 217 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 218 HeightIDWflatLocal.adjust: None
    test 219 HeightIDWflatLocal.kmin: 2
    test 220 HeightIDWflatLocal.wrap: False
    test 221 HeightIDWflatLocal.beta: 2
    test 222 HeightIDWflatLocal.adjust: None
    test 223 HeightIDWflatLocal.beta: 2
    test 224 HeightIDWflatLocal.kmin: 2
    test 225 HeightIDWflatLocal.wrap: False
    test 226 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 227 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 228 HeightIDWflatPolar(wrap=False): 6.261469975
    test 229 HeightIDWflatPolar(float): <class 'float'>
    test 230 HeightIDWflatPolar(latlon): True
    test 231 HeightIDWflatPolar(wrap=False): 5.0
    test 232 HeightIDWflatPolar(float): <class 'float'>
    test 233 HeightIDWflatPolar(latlon): True
    test 234 HeightIDWflatPolar(wrap=False): (6.261469975, 5.0,)
    test 235 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 236 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 237 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 238 HeightIDWflatPolar(wrap=False): [6.261469975, 5.0]
    test 239 HeightIDWflatPolar(list: <class 'list'>
    test 240 HeightIDWflatPolar(list-float): <class 'float'>
    test 241 HeightIDWflatPolar(list-float): <class 'float'>
    test 242 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 243 HeightIDWflatPolar.adjust: None
    test 244 HeightIDWflatPolar.kmin: 2
    test 245 HeightIDWflatPolar.wrap: False
    test 246 HeightIDWflatPolar.beta: 2
    test 247 HeightIDWflatPolar.adjust: None
    test 248 HeightIDWflatPolar.beta: 2
    test 249 HeightIDWflatPolar.kmin: 2
    test 250 HeightIDWflatPolar.wrap: False
    test 251 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 252 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 253 HeightIDWhaversine(wrap=False): 6.108538037
    test 254 HeightIDWhaversine(float): <class 'float'>
    test 255 HeightIDWhaversine(latlon): True
    test 256 HeightIDWhaversine(wrap=False): 5.0
    test 257 HeightIDWhaversine(float): <class 'float'>
    test 258 HeightIDWhaversine(latlon): True
    test 259 HeightIDWhaversine(wrap=False): (6.108538037, 5.0,)
    test 260 HeightIDWhaversine(tuple): <class 'tuple'>
    test 261 HeightIDWhaversine(tuple-float): <class 'float'>
    test 262 HeightIDWhaversine(tuple-float): <class 'float'>
    test 263 HeightIDWhaversine(wrap=False): [6.108538037, 5.0]
    test 264 HeightIDWhaversine(list: <class 'list'>
    test 265 HeightIDWhaversine(list-float): <class 'float'>
    test 266 HeightIDWhaversine(list-float): <class 'float'>
    test 267 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 268 HeightIDWhaversine.adjust: None
    test 269 HeightIDWhaversine.kmin: 2
    test 270 HeightIDWhaversine.wrap: False
    test 271 HeightIDWhaversine.beta: 2
    test 272 HeightIDWhaversine.adjust: None
    test 273 HeightIDWhaversine.beta: 2
    test 274 HeightIDWhaversine.kmin: 2
    test 275 HeightIDWhaversine.wrap: False
    test 276 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 277 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 278 HeightIDWhubeny(wrap=False): 6.860459007
    test 279 HeightIDWhubeny(float): <class 'float'>
    test 280 HeightIDWhubeny(latlon): True
    test 281 HeightIDWhubeny(wrap=False): 5.0
    test 282 HeightIDWhubeny(float): <class 'float'>
    test 283 HeightIDWhubeny(latlon): True
    test 284 HeightIDWhubeny(wrap=False): (6.860459007, 5.0,)
    test 285 HeightIDWhubeny(tuple): <class 'tuple'>
    test 286 HeightIDWhubeny(tuple-float): <class 'float'>
    test 287 HeightIDWhubeny(tuple-float): <class 'float'>
    test 288 HeightIDWhubeny(wrap=False): [6.860459007, 5.0]
    test 289 HeightIDWhubeny(list: <class 'list'>
    test 290 HeightIDWhubeny(list-float): <class 'float'>
    test 291 HeightIDWhubeny(list-float): <class 'float'>
    test 292 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 293 HeightIDWhubeny.adjust: None
    test 294 HeightIDWhubeny.kmin: 2
    test 295 HeightIDWhubeny.wrap: False
    test 296 HeightIDWhubeny.beta: 2
    test 297 HeightIDWhubeny.adjust: None
    test 298 HeightIDWhubeny.beta: 2
    test 299 HeightIDWhubeny.kmin: 2
    test 300 HeightIDWhubeny.wrap: False
    test 301 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 302 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 303 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 6.111158743
    test 304 HeightIDWkarney(float): <class 'float'>
    test 305 HeightIDWkarney(latlon): True
    test 306 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 5.0
    test 307 HeightIDWkarney(float): <class 'float'>
    test 308 HeightIDWkarney(latlon): True
    test 309 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (6.111158743, 5.0,)
    test 310 HeightIDWkarney(tuple): <class 'tuple'>
    test 311 HeightIDWkarney(tuple-float): <class 'float'>
    test 312 HeightIDWkarney(tuple-float): <class 'float'>
    test 313 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [6.111158743, 5.0]
    test 314 HeightIDWkarney(list: <class 'list'>
    test 315 HeightIDWkarney(list-float): <class 'float'>
    test 316 HeightIDWkarney(list-float): <class 'float'>
    test 317 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 318 HeightIDWkarney.adjust: None
    test 319 HeightIDWkarney.kmin: 2
    test 320 HeightIDWkarney.wrap: True
    test 321 HeightIDWkarney.beta: 2
    test 322 HeightIDWkarney.adjust: None
    test 323 HeightIDWkarney.beta: 2
    test 324 HeightIDWkarney.kmin: 2
    test 325 HeightIDWkarney.wrap: True
    test 326 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 327 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 328 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 6.111158743
    test 329 HeightIDWkarney(float): <class 'float'>
    test 330 HeightIDWkarney(latlon): True
    test 331 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 5.0
    test 332 HeightIDWkarney(float): <class 'float'>
    test 333 HeightIDWkarney(latlon): True
    test 334 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (6.111158743, 5.0,)
    test 335 HeightIDWkarney(tuple): <class 'tuple'>
    test 336 HeightIDWkarney(tuple-float): <class 'float'>
    test 337 HeightIDWkarney(tuple-float): <class 'float'>
    test 338 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [6.111158743, 5.0]
    test 339 HeightIDWkarney(list: <class 'list'>
    test 340 HeightIDWkarney(list-float): <class 'float'>
    test 341 HeightIDWkarney(list-float): <class 'float'>
    test 342 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 343 HeightIDWkarney.adjust: None
    test 344 HeightIDWkarney.kmin: 2
    test 345 HeightIDWkarney.wrap: False
    test 346 HeightIDWkarney.beta: 2
    test 347 HeightIDWkarney.adjust: None
    test 348 HeightIDWkarney.beta: 2
    test 349 HeightIDWkarney.kmin: 2
    test 350 HeightIDWkarney.wrap: False
    test 351 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 352 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 353 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 6.108538037
    test 354 HeightIDWkarney(float): <class 'float'>
    test 355 HeightIDWkarney(latlon): True
    test 356 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 5.0
    test 357 HeightIDWkarney(float): <class 'float'>
    test 358 HeightIDWkarney(latlon): True
    test 359 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (6.108538037, 5.0,)
    test 360 HeightIDWkarney(tuple): <class 'tuple'>
    test 361 HeightIDWkarney(tuple-float): <class 'float'>
    test 362 HeightIDWkarney(tuple-float): <class 'float'>
    test 363 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [6.108538037, 5.0]
    test 364 HeightIDWkarney(list: <class 'list'>
    test 365 HeightIDWkarney(list-float): <class 'float'>
    test 366 HeightIDWkarney(list-float): <class 'float'>
    test 367 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 368 HeightIDWkarney.adjust: None
    test 369 HeightIDWkarney.kmin: 2
    test 370 HeightIDWkarney.wrap: True
    test 371 HeightIDWkarney.beta: 2
    test 372 HeightIDWkarney.adjust: None
    test 373 HeightIDWkarney.beta: 2
    test 374 HeightIDWkarney.kmin: 2
    test 375 HeightIDWkarney.wrap: True
    test 376 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 377 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 378 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 6.108538037
    test 379 HeightIDWkarney(float): <class 'float'>
    test 380 HeightIDWkarney(latlon): True
    test 381 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 5.0
    test 382 HeightIDWkarney(float): <class 'float'>
    test 383 HeightIDWkarney(latlon): True
    test 384 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (6.108538037, 5.0,)
    test 385 HeightIDWkarney(tuple): <class 'tuple'>
    test 386 HeightIDWkarney(tuple-float): <class 'float'>
    test 387 HeightIDWkarney(tuple-float): <class 'float'>
    test 388 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [6.108538037, 5.0]
    test 389 HeightIDWkarney(list: <class 'list'>
    test 390 HeightIDWkarney(list-float): <class 'float'>
    test 391 HeightIDWkarney(list-float): <class 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 HeightIDWkarney.adjust: None
    test 394 HeightIDWkarney.kmin: 2
    test 395 HeightIDWkarney.wrap: False
    test 396 HeightIDWkarney.beta: 2
    test 397 HeightIDWkarney.adjust: None
    test 398 HeightIDWkarney.beta: 2
    test 399 HeightIDWkarney.kmin: 2
    test 400 HeightIDWkarney.wrap: False
    test 401 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 402 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 403 HeightIDWthomas(wrap=True): 6.108538037
    test 404 HeightIDWthomas(float): <class 'float'>
    test 405 HeightIDWthomas(latlon): True
    test 406 HeightIDWthomas(wrap=True): 5.0
    test 407 HeightIDWthomas(float): <class 'float'>
    test 408 HeightIDWthomas(latlon): True
    test 409 HeightIDWthomas(wrap=True): (6.108538037, 5.0,)
    test 410 HeightIDWthomas(tuple): <class 'tuple'>
    test 411 HeightIDWthomas(tuple-float): <class 'float'>
    test 412 HeightIDWthomas(tuple-float): <class 'float'>
    test 413 HeightIDWthomas(wrap=True): [6.108538037, 5.0]
    test 414 HeightIDWthomas(list: <class 'list'>
    test 415 HeightIDWthomas(list-float): <class 'float'>
    test 416 HeightIDWthomas(list-float): <class 'float'>
    test 417 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 418 HeightIDWthomas.adjust: None
    test 419 HeightIDWthomas.kmin: 2
    test 420 HeightIDWthomas.wrap: False
    test 421 HeightIDWthomas.beta: 2
    test 422 HeightIDWthomas.adjust: None
    test 423 HeightIDWthomas.beta: 2
    test 424 HeightIDWthomas.kmin: 2
    test 425 HeightIDWthomas.wrap: False
    test 426 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 427 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 428 HeightIDWthomas(wrap=False): 6.108538037
    test 429 HeightIDWthomas(float): <class 'float'>
    test 430 HeightIDWthomas(latlon): True
    test 431 HeightIDWthomas(wrap=False): 5.0
    test 432 HeightIDWthomas(float): <class 'float'>
    test 433 HeightIDWthomas(latlon): True
    test 434 HeightIDWthomas(wrap=False): (6.108538037, 5.0,)
    test 435 HeightIDWthomas(tuple): <class 'tuple'>
    test 436 HeightIDWthomas(tuple-float): <class 'float'>
    test 437 HeightIDWthomas(tuple-float): <class 'float'>
    test 438 HeightIDWthomas(wrap=False): [6.108538037, 5.0]
    test 439 HeightIDWthomas(list: <class 'list'>
    test 440 HeightIDWthomas(list-float): <class 'float'>
    test 441 HeightIDWthomas(list-float): <class 'float'>
    test 442 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 443 HeightIDWthomas.adjust: None
    test 444 HeightIDWthomas.kmin: 2
    test 445 HeightIDWthomas.wrap: False
    test 446 HeightIDWthomas.beta: 2
    test 447 HeightIDWthomas.adjust: None
    test 448 HeightIDWthomas.beta: 2
    test 449 HeightIDWthomas.kmin: 2
    test 450 HeightIDWthomas.wrap: False
    test 451 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 452 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 453 HeightIDWvincentys(wrap=True): 6.108538037
    test 454 HeightIDWvincentys(float): <class 'float'>
    test 455 HeightIDWvincentys(latlon): True
    test 456 HeightIDWvincentys(wrap=True): 5.0
    test 457 HeightIDWvincentys(float): <class 'float'>
    test 458 HeightIDWvincentys(latlon): True
    test 459 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 460 HeightIDWvincentys(tuple): <class 'tuple'>
    test 461 HeightIDWvincentys(tuple-float): <class 'float'>
    test 462 HeightIDWvincentys(tuple-float): <class 'float'>
    test 463 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 464 HeightIDWvincentys(list: <class 'list'>
    test 465 HeightIDWvincentys(list-float): <class 'float'>
    test 466 HeightIDWvincentys(list-float): <class 'float'>
    test 467 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 468 HeightIDWvincentys.adjust: None
    test 469 HeightIDWvincentys.kmin: 2
    test 470 HeightIDWvincentys.wrap: False
    test 471 HeightIDWvincentys.beta: 2
    test 472 HeightIDWvincentys.adjust: None
    test 473 HeightIDWvincentys.beta: 2
    test 474 HeightIDWvincentys.kmin: 2
    test 475 HeightIDWvincentys.wrap: False
    test 476 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 477 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 478 HeightIDWvincentys(wrap=False): 6.108538037
    test 479 HeightIDWvincentys(float): <class 'float'>
    test 480 HeightIDWvincentys(latlon): True
    test 481 HeightIDWvincentys(wrap=False): 5.0
    test 482 HeightIDWvincentys(float): <class 'float'>
    test 483 HeightIDWvincentys(latlon): True
    test 484 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 485 HeightIDWvincentys(tuple): <class 'tuple'>
    test 486 HeightIDWvincentys(tuple-float): <class 'float'>
    test 487 HeightIDWvincentys(tuple-float): <class 'float'>
    test 488 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 489 HeightIDWvincentys(list: <class 'list'>
    test 490 HeightIDWvincentys(list-float): <class 'float'>
    test 491 HeightIDWvincentys(list-float): <class 'float'>
    test 492 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 493 HeightIDWvincentys.adjust: None
    test 494 HeightIDWvincentys.kmin: 2
    test 495 HeightIDWvincentys.wrap: False
    test 496 HeightIDWvincentys.beta: 2
    test 497 HeightIDWvincentys.adjust: None
    test 498 HeightIDWvincentys.beta: 2
    test 499 HeightIDWvincentys.kmin: 2
    test 500 HeightIDWvincentys.wrap: False
    test 501 intersection: 02.64932°N, 002.550079°E, +2.50m
    test 502 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 503 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 504 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742938
    test 505 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 506 HeightIDWcosineAndoyerLambert(latlon): True
    test 507 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 508 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 509 HeightIDWcosineAndoyerLambert(latlon): True
    test 510 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 511 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 512 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 513 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 514 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 515 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 516 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 517 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 518 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 519 HeightIDWcosineAndoyerLambert.adjust: None
    test 520 HeightIDWcosineAndoyerLambert.kmin: 2
    test 521 HeightIDWcosineAndoyerLambert.wrap: False
    test 522 HeightIDWcosineAndoyerLambert.beta: 2
    test 523 HeightIDWcosineAndoyerLambert.adjust: None
    test 524 HeightIDWcosineAndoyerLambert.beta: 2
    test 525 HeightIDWcosineAndoyerLambert.kmin: 2
    test 526 HeightIDWcosineAndoyerLambert.wrap: False
    test 527 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 528 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 529 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742938
    test 530 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 531 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 532 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 533 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 534 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 535 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 536 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 537 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 538 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 539 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 540 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 541 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 542 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 543 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 544 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 545 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 546 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 547 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 548 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 549 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 550 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 551 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 552 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 553 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 554 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 555 HeightIDWcosineLaw(float): <class 'float'>
    test 556 HeightIDWcosineLaw(latlon): True
    test 557 HeightIDWcosineLaw(wrap=True): 3.0
    test 558 HeightIDWcosineLaw(float): <class 'float'>
    test 559 HeightIDWcosineLaw(latlon): True
    test 560 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 561 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 562 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 563 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 564 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 565 HeightIDWcosineLaw(list: <class 'list'>
    test 566 HeightIDWcosineLaw(list-float): <class 'float'>
    test 567 HeightIDWcosineLaw(list-float): <class 'float'>
    test 568 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 569 HeightIDWcosineLaw.adjust: None
    test 570 HeightIDWcosineLaw.kmin: 2
    test 571 HeightIDWcosineLaw.wrap: False
    test 572 HeightIDWcosineLaw.beta: 2
    test 573 HeightIDWcosineLaw.adjust: None
    test 574 HeightIDWcosineLaw.beta: 2
    test 575 HeightIDWcosineLaw.kmin: 2
    test 576 HeightIDWcosineLaw.wrap: False
    test 577 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 578 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 579 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 580 HeightIDWcosineLaw(float): <class 'float'>
    test 581 HeightIDWcosineLaw(latlon): True
    test 582 HeightIDWcosineLaw(wrap=False): 3.0
    test 583 HeightIDWcosineLaw(float): <class 'float'>
    test 584 HeightIDWcosineLaw(latlon): True
    test 585 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 586 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 587 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 588 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 589 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 590 HeightIDWcosineLaw(list: <class 'list'>
    test 591 HeightIDWcosineLaw(list-float): <class 'float'>
    test 592 HeightIDWcosineLaw(list-float): <class 'float'>
    test 593 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 594 HeightIDWcosineLaw.adjust: None
    test 595 HeightIDWcosineLaw.kmin: 2
    test 596 HeightIDWcosineLaw.wrap: False
    test 597 HeightIDWcosineLaw.beta: 2
    test 598 HeightIDWcosineLaw.adjust: None
    test 599 HeightIDWcosineLaw.beta: 2
    test 600 HeightIDWcosineLaw.kmin: 2
    test 601 HeightIDWcosineLaw.wrap: False
    test 602 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 603 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 604 HeightIDWeuclidean(adjust=False): 2.592735541
    test 605 HeightIDWeuclidean(float): <class 'float'>
    test 606 HeightIDWeuclidean(latlon): True
    test 607 HeightIDWeuclidean(adjust=False): 3.0
    test 608 HeightIDWeuclidean(float): <class 'float'>
    test 609 HeightIDWeuclidean(latlon): True
    test 610 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 611 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 612 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 613 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 614 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 615 HeightIDWeuclidean(list: <class 'list'>
    test 616 HeightIDWeuclidean(list-float): <class 'float'>
    test 617 HeightIDWeuclidean(list-float): <class 'float'>
    test 618 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 619 HeightIDWeuclidean.adjust: True
    test 620 HeightIDWeuclidean.kmin: 2
    test 621 HeightIDWeuclidean.wrap: None
    test 622 HeightIDWeuclidean.beta: 2
    test 623 HeightIDWeuclidean.adjust: True
    test 624 HeightIDWeuclidean.beta: 2
    test 625 HeightIDWeuclidean.kmin: 2
    test 626 HeightIDWeuclidean.wrap: None
    test 627 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 628 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 629 HeightIDWequirectangular(adjust=True, wrap=True): 2.592743455
    test 630 HeightIDWequirectangular(float): <class 'float'>
    test 631 HeightIDWequirectangular(latlon): True
    test 632 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 633 HeightIDWequirectangular(float): <class 'float'>
    test 634 HeightIDWequirectangular(latlon): True
    test 635 HeightIDWequirectangular(adjust=True, wrap=True): (2.592743455, 3.0,)
    test 636 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 637 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 638 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 639 HeightIDWequirectangular(adjust=True, wrap=True): [2.592743455, 3.0]
    test 640 HeightIDWequirectangular(list: <class 'list'>
    test 641 HeightIDWequirectangular(list-float): <class 'float'>
    test 642 HeightIDWequirectangular(list-float): <class 'float'>
    test 643 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 644 HeightIDWequirectangular.adjust: True
    test 645 HeightIDWequirectangular.kmin: 2
    test 646 HeightIDWequirectangular.wrap: False
    test 647 HeightIDWequirectangular.beta: 1
    test 648 HeightIDWequirectangular.adjust: True
    test 649 HeightIDWequirectangular.beta: 1
    test 650 HeightIDWequirectangular.kmin: 2
    test 651 HeightIDWequirectangular.wrap: False
    test 652 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 653 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 654 HeightIDWequirectangular(adjust=False, wrap=True): 2.592732915
    test 655 HeightIDWequirectangular(float): <class 'float'>
    test 656 HeightIDWequirectangular(latlon): True
    test 657 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 658 HeightIDWequirectangular(float): <class 'float'>
    test 659 HeightIDWequirectangular(latlon): True
    test 660 HeightIDWequirectangular(adjust=False, wrap=True): (2.592732915, 3.0,)
    test 661 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 662 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 663 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 664 HeightIDWequirectangular(adjust=False, wrap=True): [2.592732915, 3.0]
    test 665 HeightIDWequirectangular(list: <class 'list'>
    test 666 HeightIDWequirectangular(list-float): <class 'float'>
    test 667 HeightIDWequirectangular(list-float): <class 'float'>
    test 668 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 669 HeightIDWequirectangular.adjust: True
    test 670 HeightIDWequirectangular.kmin: 2
    test 671 HeightIDWequirectangular.wrap: False
    test 672 HeightIDWequirectangular.beta: 1
    test 673 HeightIDWequirectangular.adjust: True
    test 674 HeightIDWequirectangular.beta: 1
    test 675 HeightIDWequirectangular.kmin: 2
    test 676 HeightIDWequirectangular.wrap: False
    test 677 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 678 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 679 HeightIDWflatLocal(wrap=False): 2.689429914
    test 680 HeightIDWflatLocal(float): <class 'float'>
    test 681 HeightIDWflatLocal(latlon): True
    test 682 HeightIDWflatLocal(wrap=False): 3.0
    test 683 HeightIDWflatLocal(float): <class 'float'>
    test 684 HeightIDWflatLocal(latlon): True
    test 685 HeightIDWflatLocal(wrap=False): (2.689429914, 3.0,)
    test 686 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 687 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 688 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 689 HeightIDWflatLocal(wrap=False): [2.689429914, 3.0]
    test 690 HeightIDWflatLocal(list: <class 'list'>
    test 691 HeightIDWflatLocal(list-float): <class 'float'>
    test 692 HeightIDWflatLocal(list-float): <class 'float'>
    test 693 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 694 HeightIDWflatLocal.adjust: None
    test 695 HeightIDWflatLocal.kmin: 2
    test 696 HeightIDWflatLocal.wrap: False
    test 697 HeightIDWflatLocal.beta: 2
    test 698 HeightIDWflatLocal.adjust: None
    test 699 HeightIDWflatLocal.beta: 2
    test 700 HeightIDWflatLocal.kmin: 2
    test 701 HeightIDWflatLocal.wrap: False
    test 702 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 703 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 704 HeightIDWflatPolar(wrap=False): 2.592973059
    test 705 HeightIDWflatPolar(float): <class 'float'>
    test 706 HeightIDWflatPolar(latlon): True
    test 707 HeightIDWflatPolar(wrap=False): 3.0
    test 708 HeightIDWflatPolar(float): <class 'float'>
    test 709 HeightIDWflatPolar(latlon): True
    test 710 HeightIDWflatPolar(wrap=False): (2.592973059, 3.0,)
    test 711 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 712 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 713 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 714 HeightIDWflatPolar(wrap=False): [2.592973059, 3.0]
    test 715 HeightIDWflatPolar(list: <class 'list'>
    test 716 HeightIDWflatPolar(list-float): <class 'float'>
    test 717 HeightIDWflatPolar(list-float): <class 'float'>
    test 718 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 719 HeightIDWflatPolar.adjust: None
    test 720 HeightIDWflatPolar.kmin: 2
    test 721 HeightIDWflatPolar.wrap: False
    test 722 HeightIDWflatPolar.beta: 2
    test 723 HeightIDWflatPolar.adjust: None
    test 724 HeightIDWflatPolar.beta: 2
    test 725 HeightIDWflatPolar.kmin: 2
    test 726 HeightIDWflatPolar.wrap: False
    test 727 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 728 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 729 HeightIDWhaversine(wrap=False): 2.592742938
    test 730 HeightIDWhaversine(float): <class 'float'>
    test 731 HeightIDWhaversine(latlon): True
    test 732 HeightIDWhaversine(wrap=False): 3.0
    test 733 HeightIDWhaversine(float): <class 'float'>
    test 734 HeightIDWhaversine(latlon): True
    test 735 HeightIDWhaversine(wrap=False): (2.592742938, 3.0,)
    test 736 HeightIDWhaversine(tuple): <class 'tuple'>
    test 737 HeightIDWhaversine(tuple-float): <class 'float'>
    test 738 HeightIDWhaversine(tuple-float): <class 'float'>
    test 739 HeightIDWhaversine(wrap=False): [2.592742938, 3.0]
    test 740 HeightIDWhaversine(list: <class 'list'>
    test 741 HeightIDWhaversine(list-float): <class 'float'>
    test 742 HeightIDWhaversine(list-float): <class 'float'>
    test 743 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 744 HeightIDWhaversine.adjust: None
    test 745 HeightIDWhaversine.kmin: 2
    test 746 HeightIDWhaversine.wrap: False
    test 747 HeightIDWhaversine.beta: 2
    test 748 HeightIDWhaversine.adjust: None
    test 749 HeightIDWhaversine.beta: 2
    test 750 HeightIDWhaversine.kmin: 2
    test 751 HeightIDWhaversine.wrap: False
    test 752 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 753 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 754 HeightIDWhubeny(wrap=False): 2.689429914
    test 755 HeightIDWhubeny(float): <class 'float'>
    test 756 HeightIDWhubeny(latlon): True
    test 757 HeightIDWhubeny(wrap=False): 3.0
    test 758 HeightIDWhubeny(float): <class 'float'>
    test 759 HeightIDWhubeny(latlon): True
    test 760 HeightIDWhubeny(wrap=False): (2.689429914, 3.0,)
    test 761 HeightIDWhubeny(tuple): <class 'tuple'>
    test 762 HeightIDWhubeny(tuple-float): <class 'float'>
    test 763 HeightIDWhubeny(tuple-float): <class 'float'>
    test 764 HeightIDWhubeny(wrap=False): [2.689429914, 3.0]
    test 765 HeightIDWhubeny(list: <class 'list'>
    test 766 HeightIDWhubeny(list-float): <class 'float'>
    test 767 HeightIDWhubeny(list-float): <class 'float'>
    test 768 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 769 HeightIDWhubeny.adjust: None
    test 770 HeightIDWhubeny.kmin: 2
    test 771 HeightIDWhubeny.wrap: False
    test 772 HeightIDWhubeny.beta: 2
    test 773 HeightIDWhubeny.adjust: None
    test 774 HeightIDWhubeny.beta: 2
    test 775 HeightIDWhubeny.kmin: 2
    test 776 HeightIDWhubeny.wrap: False
    test 777 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 778 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 779 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 2.592742915
    test 780 HeightIDWkarney(float): <class 'float'>
    test 781 HeightIDWkarney(latlon): True
    test 782 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 3.0
    test 783 HeightIDWkarney(float): <class 'float'>
    test 784 HeightIDWkarney(latlon): True
    test 785 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (2.592742915, 3.0,)
    test 786 HeightIDWkarney(tuple): <class 'tuple'>
    test 787 HeightIDWkarney(tuple-float): <class 'float'>
    test 788 HeightIDWkarney(tuple-float): <class 'float'>
    test 789 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [2.592742915, 3.0]
    test 790 HeightIDWkarney(list: <class 'list'>
    test 791 HeightIDWkarney(list-float): <class 'float'>
    test 792 HeightIDWkarney(list-float): <class 'float'>
    test 793 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 794 HeightIDWkarney.adjust: None
    test 795 HeightIDWkarney.kmin: 2
    test 796 HeightIDWkarney.wrap: True
    test 797 HeightIDWkarney.beta: 2
    test 798 HeightIDWkarney.adjust: None
    test 799 HeightIDWkarney.beta: 2
    test 800 HeightIDWkarney.kmin: 2
    test 801 HeightIDWkarney.wrap: True
    test 802 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 803 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 804 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 2.592742915
    test 805 HeightIDWkarney(float): <class 'float'>
    test 806 HeightIDWkarney(latlon): True
    test 807 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 3.0
    test 808 HeightIDWkarney(float): <class 'float'>
    test 809 HeightIDWkarney(latlon): True
    test 810 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (2.592742915, 3.0,)
    test 811 HeightIDWkarney(tuple): <class 'tuple'>
    test 812 HeightIDWkarney(tuple-float): <class 'float'>
    test 813 HeightIDWkarney(tuple-float): <class 'float'>
    test 814 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [2.592742915, 3.0]
    test 815 HeightIDWkarney(list: <class 'list'>
    test 816 HeightIDWkarney(list-float): <class 'float'>
    test 817 HeightIDWkarney(list-float): <class 'float'>
    test 818 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 819 HeightIDWkarney.adjust: None
    test 820 HeightIDWkarney.kmin: 2
    test 821 HeightIDWkarney.wrap: False
    test 822 HeightIDWkarney.beta: 2
    test 823 HeightIDWkarney.adjust: None
    test 824 HeightIDWkarney.beta: 2
    test 825 HeightIDWkarney.kmin: 2
    test 826 HeightIDWkarney.wrap: False
    test 827 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 828 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 829 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 2.592742938
    test 830 HeightIDWkarney(float): <class 'float'>
    test 831 HeightIDWkarney(latlon): True
    test 832 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 3.0
    test 833 HeightIDWkarney(float): <class 'float'>
    test 834 HeightIDWkarney(latlon): True
    test 835 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (2.592742938, 3.0,)
    test 836 HeightIDWkarney(tuple): <class 'tuple'>
    test 837 HeightIDWkarney(tuple-float): <class 'float'>
    test 838 HeightIDWkarney(tuple-float): <class 'float'>
    test 839 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [2.592742938, 3.0]
    test 840 HeightIDWkarney(list: <class 'list'>
    test 841 HeightIDWkarney(list-float): <class 'float'>
    test 842 HeightIDWkarney(list-float): <class 'float'>
    test 843 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 844 HeightIDWkarney.adjust: None
    test 845 HeightIDWkarney.kmin: 2
    test 846 HeightIDWkarney.wrap: True
    test 847 HeightIDWkarney.beta: 2
    test 848 HeightIDWkarney.adjust: None
    test 849 HeightIDWkarney.beta: 2
    test 850 HeightIDWkarney.kmin: 2
    test 851 HeightIDWkarney.wrap: True
    test 852 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 853 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 854 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 2.592742938
    test 855 HeightIDWkarney(float): <class 'float'>
    test 856 HeightIDWkarney(latlon): True
    test 857 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 3.0
    test 858 HeightIDWkarney(float): <class 'float'>
    test 859 HeightIDWkarney(latlon): True
    test 860 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (2.592742938, 3.0,)
    test 861 HeightIDWkarney(tuple): <class 'tuple'>
    test 862 HeightIDWkarney(tuple-float): <class 'float'>
    test 863 HeightIDWkarney(tuple-float): <class 'float'>
    test 864 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [2.592742938, 3.0]
    test 865 HeightIDWkarney(list: <class 'list'>
    test 866 HeightIDWkarney(list-float): <class 'float'>
    test 867 HeightIDWkarney(list-float): <class 'float'>
    test 868 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 869 HeightIDWkarney.adjust: None
    test 870 HeightIDWkarney.kmin: 2
    test 871 HeightIDWkarney.wrap: False
    test 872 HeightIDWkarney.beta: 2
    test 873 HeightIDWkarney.adjust: None
    test 874 HeightIDWkarney.beta: 2
    test 875 HeightIDWkarney.kmin: 2
    test 876 HeightIDWkarney.wrap: False
    test 877 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 878 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 879 HeightIDWthomas(wrap=True): 2.592742938
    test 880 HeightIDWthomas(float): <class 'float'>
    test 881 HeightIDWthomas(latlon): True
    test 882 HeightIDWthomas(wrap=True): 3.0
    test 883 HeightIDWthomas(float): <class 'float'>
    test 884 HeightIDWthomas(latlon): True
    test 885 HeightIDWthomas(wrap=True): (2.592742938, 3.0,)
    test 886 HeightIDWthomas(tuple): <class 'tuple'>
    test 887 HeightIDWthomas(tuple-float): <class 'float'>
    test 888 HeightIDWthomas(tuple-float): <class 'float'>
    test 889 HeightIDWthomas(wrap=True): [2.592742938, 3.0]
    test 890 HeightIDWthomas(list: <class 'list'>
    test 891 HeightIDWthomas(list-float): <class 'float'>
    test 892 HeightIDWthomas(list-float): <class 'float'>
    test 893 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 894 HeightIDWthomas.adjust: None
    test 895 HeightIDWthomas.kmin: 2
    test 896 HeightIDWthomas.wrap: False
    test 897 HeightIDWthomas.beta: 2
    test 898 HeightIDWthomas.adjust: None
    test 899 HeightIDWthomas.beta: 2
    test 900 HeightIDWthomas.kmin: 2
    test 901 HeightIDWthomas.wrap: False
    test 902 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 903 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 904 HeightIDWthomas(wrap=False): 2.592742938
    test 905 HeightIDWthomas(float): <class 'float'>
    test 906 HeightIDWthomas(latlon): True
    test 907 HeightIDWthomas(wrap=False): 3.0
    test 908 HeightIDWthomas(float): <class 'float'>
    test 909 HeightIDWthomas(latlon): True
    test 910 HeightIDWthomas(wrap=False): (2.592742938, 3.0,)
    test 911 HeightIDWthomas(tuple): <class 'tuple'>
    test 912 HeightIDWthomas(tuple-float): <class 'float'>
    test 913 HeightIDWthomas(tuple-float): <class 'float'>
    test 914 HeightIDWthomas(wrap=False): [2.592742938, 3.0]
    test 915 HeightIDWthomas(list: <class 'list'>
    test 916 HeightIDWthomas(list-float): <class 'float'>
    test 917 HeightIDWthomas(list-float): <class 'float'>
    test 918 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 919 HeightIDWthomas.adjust: None
    test 920 HeightIDWthomas.kmin: 2
    test 921 HeightIDWthomas.wrap: False
    test 922 HeightIDWthomas.beta: 2
    test 923 HeightIDWthomas.adjust: None
    test 924 HeightIDWthomas.beta: 2
    test 925 HeightIDWthomas.kmin: 2
    test 926 HeightIDWthomas.wrap: False
    test 927 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 928 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 929 HeightIDWvincentys(wrap=True): 2.592742938
    test 930 HeightIDWvincentys(float): <class 'float'>
    test 931 HeightIDWvincentys(latlon): True
    test 932 HeightIDWvincentys(wrap=True): 3.0
    test 933 HeightIDWvincentys(float): <class 'float'>
    test 934 HeightIDWvincentys(latlon): True
    test 935 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 936 HeightIDWvincentys(tuple): <class 'tuple'>
    test 937 HeightIDWvincentys(tuple-float): <class 'float'>
    test 938 HeightIDWvincentys(tuple-float): <class 'float'>
    test 939 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 940 HeightIDWvincentys(list: <class 'list'>
    test 941 HeightIDWvincentys(list-float): <class 'float'>
    test 942 HeightIDWvincentys(list-float): <class 'float'>
    test 943 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 944 HeightIDWvincentys.adjust: None
    test 945 HeightIDWvincentys.kmin: 2
    test 946 HeightIDWvincentys.wrap: False
    test 947 HeightIDWvincentys.beta: 2
    test 948 HeightIDWvincentys.adjust: None
    test 949 HeightIDWvincentys.beta: 2
    test 950 HeightIDWvincentys.kmin: 2
    test 951 HeightIDWvincentys.wrap: False
    test 952 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 953 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 954 HeightIDWvincentys(wrap=False): 2.592742938
    test 955 HeightIDWvincentys(float): <class 'float'>
    test 956 HeightIDWvincentys(latlon): True
    test 957 HeightIDWvincentys(wrap=False): 3.0
    test 958 HeightIDWvincentys(float): <class 'float'>
    test 959 HeightIDWvincentys(latlon): True
    test 960 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 961 HeightIDWvincentys(tuple): <class 'tuple'>
    test 962 HeightIDWvincentys(tuple-float): <class 'float'>
    test 963 HeightIDWvincentys(tuple-float): <class 'float'>
    test 964 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 965 HeightIDWvincentys(list: <class 'list'>
    test 966 HeightIDWvincentys(list-float): <class 'float'>
    test 967 HeightIDWvincentys(list-float): <class 'float'>
    test 968 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 969 HeightIDWvincentys.adjust: None
    test 970 HeightIDWvincentys.kmin: 2
    test 971 HeightIDWvincentys.wrap: False
    test 972 HeightIDWvincentys.beta: 2
    test 973 HeightIDWvincentys.adjust: None
    test 974 HeightIDWvincentys.beta: 2
    test 975 HeightIDWvincentys.kmin: 2
    test 976 HeightIDWvincentys.wrap: False
    test 977 copy(HeightLinear): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 978 HeightLinear.copy(): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 979 HeightLinear: 2.536626441
    test 980 HeightLinear(float): <class 'float'>
    test 981 HeightLinear(latlon): True
    test 982 copy(HeightCubic): (<class 'pygeodesy.heights.HeightCubic'>, True)
    test 983 HeightCubic.copy(): (<class 'pygeodesy.heights.HeightCubic'>, True)
    test 984 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 985 HeightCubic.adjust: None
    test 986 HeightCubic.kmin: 16
    test 987 HeightCubic.wrap: None
    test 988 HeightCubic: 3.000000000
    test 989 HeightCubic(float): <class 'float'>
    test 990 HeightCubic(latlon): True
    test 991 HeightCubic(tuple): <class 'tuple'>
    test 992 HeightCubic(tuple-float): <class 'float'>
    test 993 HeightCubic(tuple-float): <class 'float'>
    test 994 HeightCubic(list): <class 'list'>
    test 995 HeightCubic(list-float): <class 'float'>
    test 996 HeightCubic(list-float): <class 'float'>
    test 997 HeightCubic(latlon): True
    test 998 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 999 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 1000 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1001 HeightIDWcosineAndoyerLambert.adjust: None
    test 1002 HeightIDWcosineAndoyerLambert.kmin: 2
    test 1003 HeightIDWcosineAndoyerLambert.wrap: False
    test 1004 HeightIDWcosineAndoyerLambert: 2.402157442
    test 1005 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 1006 HeightIDWcosineAndoyerLambert(latlon): True
    test 1007 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 1008 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 1009 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 1010 HeightIDWcosineAndoyerLambert(list): <class 'list'>
    test 1011 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 1012 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 1013 HeightIDWcosineAndoyerLambert(latlon): True
    test 1014 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 1015 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 1016 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1017 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 1018 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 1019 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 1020 HeightIDWcosineForsytheAndoyerLambert: 2.402157442
    test 1021 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 1022 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 1023 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 1024 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 1025 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 1026 HeightIDWcosineForsytheAndoyerLambert(list): <class 'list'>
    test 1027 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 1028 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 1029 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 1030 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 1031 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 1032 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1033 HeightIDWcosineLaw.adjust: None
    test 1034 HeightIDWcosineLaw.kmin: 2
    test 1035 HeightIDWcosineLaw.wrap: False
    test 1036 HeightIDWcosineLaw: 2.402157442
    test 1037 HeightIDWcosineLaw(float): <class 'float'>
    test 1038 HeightIDWcosineLaw(latlon): True
    test 1039 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 1040 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 1041 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 1042 HeightIDWcosineLaw(list): <class 'list'>
    test 1043 HeightIDWcosineLaw(list-float): <class 'float'>
    test 1044 HeightIDWcosineLaw(list-float): <class 'float'>
    test 1045 HeightIDWcosineLaw(latlon): True
    test 1046 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 1047 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 1048 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1049 HeightIDWeuclidean.adjust: True
    test 1050 HeightIDWeuclidean.kmin: 2
    test 1051 HeightIDWeuclidean.wrap: None
    test 1052 HeightIDWeuclidean: 2.409288552
    test 1053 HeightIDWeuclidean(float): <class 'float'>
    test 1054 HeightIDWeuclidean(latlon): True
    test 1055 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 1056 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 1057 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 1058 HeightIDWeuclidean(list): <class 'list'>
    test 1059 HeightIDWeuclidean(list-float): <class 'float'>
    test 1060 HeightIDWeuclidean(list-float): <class 'float'>
    test 1061 HeightIDWeuclidean(latlon): True
    test 1062 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 1063 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 1064 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1065 HeightIDWequirectangular.adjust: True
    test 1066 HeightIDWequirectangular.kmin: 2
    test 1067 HeightIDWequirectangular.wrap: False
    test 1068 HeightIDWequirectangular: 2.402157181
    test 1069 HeightIDWequirectangular(float): <class 'float'>
    test 1070 HeightIDWequirectangular(latlon): True
    test 1071 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 1072 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 1073 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 1074 HeightIDWequirectangular(list): <class 'list'>
    test 1075 HeightIDWequirectangular(list-float): <class 'float'>
    test 1076 HeightIDWequirectangular(list-float): <class 'float'>
    test 1077 HeightIDWequirectangular(latlon): True
    test 1078 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 1079 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 1080 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1081 HeightIDWflatLocal.adjust: None
    test 1082 HeightIDWflatLocal.kmin: 2
    test 1083 HeightIDWflatLocal.wrap: False
    test 1084 HeightIDWflatLocal: 2.469718302
    test 1085 HeightIDWflatLocal(float): <class 'float'>
    test 1086 HeightIDWflatLocal(latlon): True
    test 1087 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 1088 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 1089 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 1090 HeightIDWflatLocal(list): <class 'list'>
    test 1091 HeightIDWflatLocal(list-float): <class 'float'>
    test 1092 HeightIDWflatLocal(list-float): <class 'float'>
    test 1093 HeightIDWflatLocal(latlon): True
    test 1094 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 1095 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 1096 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1097 HeightIDWflatPolar.adjust: None
    test 1098 HeightIDWflatPolar.kmin: 2
    test 1099 HeightIDWflatPolar.wrap: False
    test 1100 HeightIDWflatPolar: 2.370266641
    test 1101 HeightIDWflatPolar(float): <class 'float'>
    test 1102 HeightIDWflatPolar(latlon): True
    test 1103 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 1104 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 1105 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 1106 HeightIDWflatPolar(list): <class 'list'>
    test 1107 HeightIDWflatPolar(list-float): <class 'float'>
    test 1108 HeightIDWflatPolar(list-float): <class 'float'>
    test 1109 HeightIDWflatPolar(latlon): True
    test 1110 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 1111 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 1112 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1113 HeightIDWhaversine.adjust: None
    test 1114 HeightIDWhaversine.kmin: 2
    test 1115 HeightIDWhaversine.wrap: False
    test 1116 HeightIDWhaversine: 2.402157442
    test 1117 HeightIDWhaversine(float): <class 'float'>
    test 1118 HeightIDWhaversine(latlon): True
    test 1119 HeightIDWhaversine(tuple): <class 'tuple'>
    test 1120 HeightIDWhaversine(tuple-float): <class 'float'>
    test 1121 HeightIDWhaversine(tuple-float): <class 'float'>
    test 1122 HeightIDWhaversine(list): <class 'list'>
    test 1123 HeightIDWhaversine(list-float): <class 'float'>
    test 1124 HeightIDWhaversine(list-float): <class 'float'>
    test 1125 HeightIDWhaversine(latlon): True
    test 1126 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 1127 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 1128 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1129 HeightIDWhubeny.adjust: None
    test 1130 HeightIDWhubeny.kmin: 2
    test 1131 HeightIDWhubeny.wrap: False
    test 1132 HeightIDWhubeny: 2.469718302
    test 1133 HeightIDWhubeny(float): <class 'float'>
    test 1134 HeightIDWhubeny(latlon): True
    test 1135 HeightIDWhubeny(tuple): <class 'tuple'>
    test 1136 HeightIDWhubeny(tuple-float): <class 'float'>
    test 1137 HeightIDWhubeny(tuple-float): <class 'float'>
    test 1138 HeightIDWhubeny(list): <class 'list'>
    test 1139 HeightIDWhubeny(list-float): <class 'float'>
    test 1140 HeightIDWhubeny(list-float): <class 'float'>
    test 1141 HeightIDWhubeny(latlon): True
    test 1142 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 1143 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 1144 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1145 HeightIDWkarney.adjust: None
    test 1146 HeightIDWkarney.kmin: 2
    test 1147 HeightIDWkarney.wrap: False
    test 1148 HeightIDWkarney: 2.402157442
    test 1149 HeightIDWkarney(float): <class 'float'>
    test 1150 HeightIDWkarney(latlon): True
    test 1151 HeightIDWkarney(tuple): <class 'tuple'>
    test 1152 HeightIDWkarney(tuple-float): <class 'float'>
    test 1153 HeightIDWkarney(tuple-float): <class 'float'>
    test 1154 HeightIDWkarney(list): <class 'list'>
    test 1155 HeightIDWkarney(list-float): <class 'float'>
    test 1156 HeightIDWkarney(list-float): <class 'float'>
    test 1157 HeightIDWkarney(latlon): True
    test 1158 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 1159 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 1160 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1161 HeightIDWthomas.adjust: None
    test 1162 HeightIDWthomas.kmin: 2
    test 1163 HeightIDWthomas.wrap: False
    test 1164 HeightIDWthomas: 2.402157442
    test 1165 HeightIDWthomas(float): <class 'float'>
    test 1166 HeightIDWthomas(latlon): True
    test 1167 HeightIDWthomas(tuple): <class 'tuple'>
    test 1168 HeightIDWthomas(tuple-float): <class 'float'>
    test 1169 HeightIDWthomas(tuple-float): <class 'float'>
    test 1170 HeightIDWthomas(list): <class 'list'>
    test 1171 HeightIDWthomas(list-float): <class 'float'>
    test 1172 HeightIDWthomas(list-float): <class 'float'>
    test 1173 HeightIDWthomas(latlon): True
    test 1174 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1175 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1176 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1177 HeightIDWvincentys.adjust: None
    test 1178 HeightIDWvincentys.kmin: 2
    test 1179 HeightIDWvincentys.wrap: False
    test 1180 HeightIDWvincentys: 2.402157442
    test 1181 HeightIDWvincentys(float): <class 'float'>
    test 1182 HeightIDWvincentys(latlon): True
    test 1183 HeightIDWvincentys(tuple): <class 'tuple'>
    test 1184 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1185 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1186 HeightIDWvincentys(list): <class 'list'>
    test 1187 HeightIDWvincentys(list-float): <class 'float'>
    test 1188 HeightIDWvincentys(list-float): <class 'float'>
    test 1189 HeightIDWvincentys(latlon): True
    test 1190 copy(HeightLinear): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 1191 HeightLinear.copy(): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 1192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1193 HeightLinear.adjust: None
    test 1194 HeightLinear.kmin: 2
    test 1195 HeightLinear.wrap: None
    test 1196 HeightLinear: 3.000000000
    test 1197 HeightLinear(float): <class 'float'>
    test 1198 HeightLinear(latlon): True
    test 1199 HeightLinear(tuple): <class 'tuple'>
    test 1200 HeightLinear(tuple-float): <class 'float'>
    test 1201 HeightLinear(tuple-float): <class 'float'>
    test 1202 HeightLinear(list): <class 'list'>
    test 1203 HeightLinear(list-float): <class 'float'>
    test 1204 HeightLinear(list-float): <class 'float'>
    test 1205 HeightLinear(latlon): True
    test 1206 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1207 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1208 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1209 HeightLSQBiSpline.adjust: None
    test 1210 HeightLSQBiSpline.kmin: 16
    test 1211 HeightLSQBiSpline.wrap: None
    test 1212 HeightLSQBiSpline: 6.419251669
    test 1213 HeightLSQBiSpline(float): <class 'float'>
    test 1214 HeightLSQBiSpline(latlon): True
    test 1215 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1216 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1217 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1218 HeightLSQBiSpline(list): <class 'list'>
    test 1219 HeightLSQBiSpline(list-float): <class 'float'>
    test 1220 HeightLSQBiSpline(list-float): <class 'float'>
    test 1221 HeightLSQBiSpline(latlon): True
    test 1222 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1223 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1224 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1225 HeightLSQBiSpline.adjust: None
    test 1226 HeightLSQBiSpline.kmin: 16
    test 1227 HeightLSQBiSpline.wrap: None
    test 1228 HeightLSQBiSpline: 6.419251669
    test 1229 HeightLSQBiSpline(float): <class 'float'>
    test 1230 HeightLSQBiSpline(latlon): True
    test 1231 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1232 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1233 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1234 HeightLSQBiSpline(list): <class 'list'>
    test 1235 HeightLSQBiSpline(list-float): <class 'float'>
    test 1236 HeightLSQBiSpline(list-float): <class 'float'>
    test 1237 HeightLSQBiSpline(latlon): True
    test 1238 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1239 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1240 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1241 HeightLSQBiSpline.adjust: None
    test 1242 HeightLSQBiSpline.kmin: 16
    test 1243 HeightLSQBiSpline.wrap: None
    test 1244 HeightLSQBiSpline: 6.419251669
    test 1245 HeightLSQBiSpline(float): <class 'float'>
    test 1246 HeightLSQBiSpline(latlon): True
    test 1247 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1248 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1249 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1250 HeightLSQBiSpline(list): <class 'list'>
    test 1251 HeightLSQBiSpline(list-float): <class 'float'>
    test 1252 HeightLSQBiSpline(list-float): <class 'float'>
    test 1253 HeightLSQBiSpline(latlon): True
    test 1254 copy(HeightSmoothBiSpline): (<class 'pygeodesy.heights.HeightSmoothBiSpline'>, True)
    test 1255 HeightSmoothBiSpline.copy(): (<class 'pygeodesy.heights.HeightSmoothBiSpline'>, True)
    test 1256 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1257 HeightSmoothBiSpline.adjust: None
    test 1258 HeightSmoothBiSpline.kmin: 16
    test 1259 HeightSmoothBiSpline.wrap: None
    test 1260 HeightSmoothBiSpline: 2.598922541
    test 1261 HeightSmoothBiSpline(float): <class 'float'>
    test 1262 HeightSmoothBiSpline(latlon): True
    test 1263 HeightSmoothBiSpline(tuple): <class 'tuple'>
    test 1264 HeightSmoothBiSpline(tuple-float): <class 'float'>
    test 1265 HeightSmoothBiSpline(tuple-float): <class 'float'>
    test 1266 HeightSmoothBiSpline(list): <class 'list'>
    test 1267 HeightSmoothBiSpline(list-float): <class 'float'>
    test 1268 HeightSmoothBiSpline(list-float): <class 'float'>
    test 1269 HeightSmoothBiSpline(latlon): True

    all 1269 testHeights.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 218.653 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testInterns.py

    testing testInterns.py 22.06.21 (module pygeodesy.interns 22.07.05)
    test 1 _0_ = '0': True
    test 2 _0_ = '0': 0
    test 3 _0_0 = 0.0: True
    test 4 _0_0 = 0.0: 0.0
    test 5 _0_0001 = 0.0001: True
    test 6 _0_0001 = 0.0001: 0.0001
    test 7 _0_001 = 0.001: True
    test 8 _0_001 = 0.001: 0.001
    test 9 _0_01 = 0.01: True
    test 10 _0_01 = 0.01: 0.01
    test 11 _0_1 = 0.1: True
    test 12 _0_1 = 0.1: 0.1
    test 13 _0_125 = 0.125: True
    test 14 _0_125 = 0.125: 0.125
    test 15 _0_25 = 0.25: True
    test 16 _0_25 = 0.25: 0.25
    test 17 _0_26 = 0.26: True
    test 18 _0_26 = 0.26: 0.26
    test 19 _0_5 = 0.5: True
    test 20 _0_5 = 0.5: 0.5
    test 21 _0to9_ = '0123456789': True
    test 22 _0to9_ = '0123456789': 0123456789  FAILED, KNOWN, expected 0to9
    test 23 _1000_0 = 1000.0: True
    test 24 _1000_0 = 1000.0: 1000.0
    test 25 _10_0 = 10.0: True
    test 26 _10_0 = 10.0: 10.0
    test 27 _120_0 = 120.0: True
    test 28 _120_0 = 120.0: 120.0
    test 29 _16_0 = 16.0: True
    test 30 _16_0 = 16.0: 16.0
    test 31 _180_0 = 180.0: True
    test 32 _180_0 = 180.0: 180.0
    test 33 _1_ = '1': True
    test 34 _1_ = '1': 1
    test 35 _1_0 = 1.0: True
    test 36 _1_0 = 1.0: 1.0
    test 37 _1_5 = 1.5: True
    test 38 _1_5 = 1.5: 1.5
    test 39 _1_75 = 1.75: True
    test 40 _1_75 = 1.75: 1.75
    test 41 _1__90 = 0.011111111111111112: True
    test 42 _1__90 = 0.011111111111111112: 0.011111111111111112  FAILED, KNOWN, expected 1..90
    test 43 _24_0 = 24.0: True
    test 44 _24_0 = 24.0: 24.0
    test 45 _270_0 = 270.0: True
    test 46 _270_0 = 270.0: 270.0
    test 47 _2_ = '2': True
    test 48 _2_ = '2': 2
    test 49 _2_0 = 2.0: True
    test 50 _2_0 = 2.0: 2.0
    test 51 _32_0 = 32.0: True
    test 52 _32_0 = 32.0: 32.0
    test 53 _3600_0 = 3600.0: True
    test 54 _3600_0 = 3600.0: 3600.0
    test 55 _360_0 = 360.0: True
    test 56 _360_0 = 360.0: 360.0
    test 57 _3_ = '3': True
    test 58 _3_ = '3': 3
    test 59 _3_0 = 3.0: True
    test 60 _3_0 = 3.0: 3.0
    test 61 _400_0 = 400.0: True
    test 62 _400_0 = 400.0: 400.0
    test 63 _4_ = '4': True
    test 64 _4_ = '4': 4
    test 65 _4_0 = 4.0: True
    test 66 _4_0 = 4.0: 4.0
    test 67 _5_0 = 5.0: True
    test 68 _5_0 = 5.0: 5.0
    test 69 _60_0 = 60.0: True
    test 70 _60_0 = 60.0: 60.0
    test 71 _6_0 = 6.0: True
    test 72 _6_0 = 6.0: 6.0
    test 73 _720_0 = 720.0: True
    test 74 _720_0 = 720.0: 720.0
    test 75 _8_0 = 8.0: True
    test 76 _8_0 = 8.0: 8.0
    test 77 _90_0 = 90.0: True
    test 78 _90_0 = 90.0: 90.0
    test 79 _90_EPS_2 = <function _90_EPS_2 at 0x1019dfe20>: True
    test 80 _9_0 = 9.0: True
    test 81 _9_0 = 9.0: 9.0
    test 82 __all__ = ('DIG', 'EPS', 'EPS0', 'E....r_', 'float_', 'machine'): False  FAILED, KNOWN, expected True
    test 83 __builtins__ = {'__name__': 'builtins', ....) for help about object.}: False  FAILED, KNOWN, expected True
    test 84 __cached__ = './pygeodesy/__pycache__/interns.cpython-310.pyc': True
    test 85 __doc__ = "Single-instance C{float}.... L{pygeodesy.machine}.\n": True
    test 86 __file__ = './pygeodesy/interns.py': True
    test 87 __loader__ = <_frozen_importlib_extern....er object at 0x101a80130>: False  FAILED, KNOWN, expected True
    test 88 __name__ = 'pygeodesy.interns': True
    test 89 __package__ = 'pygeodesy': True
    test 90 __spec__ = ModuleSpec(name='pygeodes....'./pygeodesy/interns.py'): False  FAILED, KNOWN, expected True
    test 91 __version__ = '22.07.05': True
    test 92 _a12_ = 'a12': True
    test 93 _a12_ = 'a12': a12
    test 94 _A_ = 'A': True
    test 95 _A_ = 'A': a
    test 96 _a_ = 'a': True
    test 97 _a_ = 'a': a
    test 98 _Airy1830_ = 'Airy1830': True
    test 99 _Airy1830_ = 'Airy1830': airy1830
    test 100 _AiryModified_ = 'AiryModified': True
    test 101 _AiryModified_ = 'AiryModified': airymodified
    test 102 _ambiguous_ = 'ambiguous': True
    test 103 _ambiguous_ = 'ambiguous': ambiguous
    test 104 _AMPERSAND_ = '&': True
    test 105 _AMPERSAND_ = '&': &  FAILED, KNOWN, expected ampersand
    test 106 _an_ = 'an': True
    test 107 _an_ = 'an': an
    test 108 _and_ = 'and': True
    test 109 _and_ = 'and': and
    test 110 _angle_ = 'angle': True
    test 111 _angle_ = 'angle': angle
    test 112 _antipodal_ = 'antipodal': True
    test 113 _antipodal_ = 'antipodal': antipodal
    test 114 _area_ = 'area': True
    test 115 _area_ = 'area': area
    test 116 _areaOf_ = 'areaOf': True
    test 117 _areaOf_ = 'areaOf': areaof
    test 118 _arg_ = 'arg': True
    test 119 _arg_ = 'arg': arg
    test 120 _AT_ = '@': True
    test 121 _AT_ = '@': @  FAILED, KNOWN, expected at
    test 122 _at_ = 'at': True
    test 123 _at_ = 'at': at
    test 124 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': True
    test 125 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': abcdefghjklmnpqrstuvwxyz  FAILED, KNOWN, expected atoznoio
    test 126 _attribute_ = 'attribute': True
    test 127 _attribute_ = 'attribute': attribute
    test 128 _azi12_ = 'azi12': True
    test 129 _azi12_ = 'azi12': azi12
    test 130 _azi1_ = 'azi1': True
    test 131 _azi1_ = 'azi1': azi1
    test 132 _azi2_ = 'azi2': True
    test 133 _azi2_ = 'azi2': azi2
    test 134 _azimuth_ = 'azimuth': True
    test 135 _azimuth_ = 'azimuth': azimuth
    test 136 _B_ = 'B': True
    test 137 _B_ = 'B': b
    test 138 _b_ = 'b': True
    test 139 _b_ = 'b': b
    test 140 _BACKSLASH_ = '\\': True
    test 141 _BACKSLASH_ = '\\': \  FAILED, KNOWN, expected backslash
    test 142 _band_ = 'band': True
    test 143 _band_ = 'band': band
    test 144 _BAR_ = '|': True
    test 145 _BAR_ = '|': |  FAILED, KNOWN, expected bar
    test 146 _bearing_ = 'bearing': True
    test 147 _bearing_ = 'bearing': bearing
    test 148 _Bessel1841_ = 'Bessel1841': True
    test 149 _Bessel1841_ = 'Bessel1841': bessel1841
    test 150 _by_ = 'by': True
    test 151 _by_ = 'by': by
    test 152 _C_ = 'C': True
    test 153 _C_ = 'C': c
    test 154 _c_ = 'c': True
    test 155 _c_ = 'c': c
    test 156 _cartesian_ = 'cartesian': True
    test 157 _cartesian_ = 'cartesian': cartesian
    test 158 _center_ = 'center': True
    test 159 _center_ = 'center': center
    test 160 _Clarke1866_ = 'Clarke1866': True
    test 161 _Clarke1866_ = 'Clarke1866': clarke1866
    test 162 _Clarke1880IGN_ = 'Clarke1880IGN': True
    test 163 _Clarke1880IGN_ = 'Clarke1880IGN': clarke1880ign
    test 164 _coincident_ = 'coincident': True
    test 165 _coincident_ = 'coincident': coincident
    test 166 _colinear_ = 'colinear': True
    test 167 _colinear_ = 'colinear': colinear
    test 168 _COLON_ = ':': True
    test 169 _COLON_ = ':': :  FAILED, KNOWN, expected colon
    test 170 _COLONSPACE_ = ': ': True
    test 171 _COLONSPACE_ = ': ': :   FAILED, KNOWN, expected colonspace
    test 172 _COMMA_ = ',': True
    test 173 _COMMA_ = ',': ,  FAILED, KNOWN, expected comma
    test 174 _COMMASPACE_ = ', ': True
    test 175 _COMMASPACE_ = ', ': ,   FAILED, KNOWN, expected commaspace
    test 176 _concentric_ = 'concentric': True
    test 177 _concentric_ = 'concentric': concentric
    test 178 _convergence_ = 'convergence': True
    test 179 _convergence_ = 'convergence': convergence
    test 180 _conversion_ = 'conversion': True
    test 181 _conversion_ = 'conversion': conversion
    test 182 _convex_ = 'convex': True
    test 183 _convex_ = 'convex': convex
    test 184 _cubic_ = 'cubic': True
    test 185 _cubic_ = 'cubic': cubic
    test 186 _D_ = 'D': True
    test 187 _D_ = 'D': d
    test 188 _d_ = 'd': True
    test 189 _d_ = 'd': d
    test 190 _DASH_ = '-': True
    test 191 _DASH_ = '-': -  FAILED, KNOWN, expected dash
    test 192 _datum_ = 'datum': True
    test 193 _datum_ = 'datum': datum
    test 194 _DDOT_ = '..': True
    test 195 _DDOT_ = '..': ..  FAILED, KNOWN, expected ddot
    test 196 _decode3_ = 'decode3': True
    test 197 _decode3_ = 'decode3': decode3
    test 198 _deg_ = 'deg': True
    test 199 _deg_ = 'deg': deg
    test 200 _degrees2_ = 'degrees2': True
    test 201 _degrees2_ = 'degrees2': degrees2
    test 202 _degrees_ = 'degrees': True
    test 203 _degrees_ = 'degrees': degrees
    test 204 _DEQUALSPACED_ = ' == ': True
    test 205 _DEQUALSPACED_ = ' == ':  ==   FAILED, KNOWN, expected dequalspaced
    test 206 _DIG_ = 'DIG': True
    test 207 _DIG_ = 'DIG': dig
    test 208 _distance_ = 'distance': True
    test 209 _distance_ = 'distance': distance
    test 210 _distanceTo_ = 'distanceTo': True
    test 211 _distanceTo_ = 'distanceTo': distanceto
    test 212 _distant_ = 'distant': True
    test 213 _distant_ = 'distant': distant
    test 214 _doesn_t_exist_ = "doesn't exist": True
    test 215 _doesn_t_exist_ = "doesn't exist": doesn't exist  FAILED, KNOWN, expected doesn_t_exist
    test 216 _DOT_ = '.': True
    test 217 _DOT_ = '.': .  FAILED, KNOWN, expected dot
    test 218 _down_ = 'down': True
    test 219 _down_ = 'down': down
    test 220 _DUNDER_ = '__': True
    test 221 _DUNDER_ = '__': __  FAILED, KNOWN, expected dunder
    test 222 _E_ = 'E': True
    test 223 _E_ = 'E': e
    test 224 _e_ = 'e': True
    test 225 _e_ = 'e': e
    test 226 _east_ = 'east': True
    test 227 _east_ = 'east': east
    test 228 _easting_ = 'easting': True
    test 229 _easting_ = 'easting': easting
    test 230 _ecef_ = 'ecef': True
    test 231 _ecef_ = 'ecef': ecef
    test 232 _edge_ = 'edge': True
    test 233 _edge_ = 'edge': edge
    test 234 _elevation_ = 'elevation': True
    test 235 _elevation_ = 'elevation': elevation
    test 236 _ELLIPSIS_ = '...': True
    test 237 _ELLIPSIS_ = '...': ...  FAILED, KNOWN, expected ellipsis
    test 238 _ellipsoid_ = 'ellipsoid': True
    test 239 _ellipsoid_ = 'ellipsoid': ellipsoid
    test 240 _ellipsoidal_ = 'ellipsoidal': True
    test 241 _ellipsoidal_ = 'ellipsoidal': ellipsoidal
    test 242 _enabled_ = 'enabled': True
    test 243 _enabled_ = 'enabled': enabled
    test 244 _encode_ = 'encode': True
    test 245 _encode_ = 'encode': encode
    test 246 _end_ = 'end': True
    test 247 _end_ = 'end': end
    test 248 _epoch_ = 'epoch': True
    test 249 _epoch_ = 'epoch': epoch
    test 250 _EPS02_ = 'EPS02': True
    test 251 _EPS02_ = 'EPS02': eps02
    test 252 _EPS0_ = 'EPS0': True
    test 253 _EPS0_ = 'EPS0': eps0
    test 254 _EPS1_ = 'EPS1': True
    test 255 _EPS1_ = 'EPS1': eps1
    test 256 _EPS2_ = 'EPS2': True
    test 257 _EPS2_ = 'EPS2': eps2
    test 258 _EPS4_ = 'EPS4': True
    test 259 _EPS4_ = 'EPS4': eps4
    test 260 _EPS4e8 = 8.881784197001252e-08: True
    test 261 _EPS4e8 = 8.881784197001252e-08: 8.881784197001252e-08  FAILED, KNOWN, expected EPS4e8
    test 262 _EPS_ = 'EPS': True
    test 263 _EPS_ = 'EPS': eps
    test 264 _EPS_2_ = 'EPS_2': True
    test 265 _EPS_2_ = 'EPS_2': eps_2
    test 266 _EQUAL_ = '=': True
    test 267 _EQUAL_ = '=': =  FAILED, KNOWN, expected equal
    test 268 _EQUALSPACED_ = ' = ': True
    test 269 _EQUALSPACED_ = ' = ':  =   FAILED, KNOWN, expected equalspaced
    test 270 _EW_ = 'EW': True
    test 271 _EW_ = 'EW': ew
    test 272 _exceed_PI_radians_ = 'exceed PI radians': True
    test 273 _exceed_PI_radians_ = 'exceed PI radians': exceed pi radians  FAILED, KNOWN, expected exceed_pi_radians
    test 274 _exceeds_ = 'exceeds': True
    test 275 _exceeds_ = 'exceeds': exceeds
    test 276 _exists_ = 'exists': True
    test 277 _exists_ = 'exists': exists
    test 278 _F_ = 'F': True
    test 279 _F_ = 'F': f
    test 280 _f_ = 'f': True
    test 281 _f_ = 'f': f
    test 282 _feet_ = 'feet': True
    test 283 _feet_ = 'feet': feet
    test 284 _few_ = 'few': True
    test 285 _few_ = 'few': few
    test 286 _fi_ = 'fi': True
    test 287 _fi_ = 'fi': fi
    test 288 _finite_ = 'finite': True
    test 289 _finite_ = 'finite': finite
    test 290 _float0 = <function _float0 at 0x1019dfbe0>: True
    test 291 _from_ = 'from': True
    test 292 _from_ = 'from': from
    test 293 _g_ = 'g': True
    test 294 _g_ = 'g': g
    test 295 _gamma_ = 'gamma': True
    test 296 _gamma_ = 'gamma': gamma
    test 297 _GRS80_ = 'GRS80': True
    test 298 _GRS80_ = 'GRS80': grs80
    test 299 _H_ = 'H': True
    test 300 _H_ = 'H': h
    test 301 _h_ = 'h': True
    test 302 _h_ = 'h': h
    test 303 _height_ = 'height': True
    test 304 _height_ = 'height': height
    test 305 _hemipole_ = 'hemipole': True
    test 306 _hemipole_ = 'hemipole': hemipole
    test 307 _I_ = 'I': True
    test 308 _I_ = 'I': i
    test 309 _i_ = 'i': True
    test 310 _i_ = 'i': i
    test 311 _iadd_ = '+=': True
    test 312 _iadd_ = '+=': +=  FAILED, KNOWN, expected iadd
    test 313 _immutable_ = 'immutable': True
    test 314 _immutable_ = 'immutable': immutable
    test 315 _in_ = 'in': True
    test 316 _in_ = 'in': in
    test 317 _incompatible_ = 'incompatible': True
    test 318 _incompatible_ = 'incompatible': incompatible
    test 319 _INF_ = 'INF': True
    test 320 _INF_ = 'INF': inf
    test 321 _infinite_ = 'infinite': True
    test 322 _infinite_ = 'infinite': infinite
    test 323 _initial_ = 'initial': True
    test 324 _initial_ = 'initial': initial
    test 325 _inside_ = 'inside': True
    test 326 _inside_ = 'inside': inside
    test 327 _INT0_ = 'INT0': True
    test 328 _INT0_ = 'INT0': int0
    test 329 _intersection_ = 'intersection': True
    test 330 _intersection_ = 'intersection': intersection
    test 331 _Intl1924_ = 'Intl1924': True
    test 332 _Intl1924_ = 'Intl1924': intl1924
    test 333 _invalid_ = 'invalid': True
    test 334 _invalid_ = 'invalid': invalid
    test 335 _isclockwise_ = 'isclockwise': True
    test 336 _isclockwise_ = 'isclockwise': isclockwise
    test 337 _ispolar_ = 'ispolar': True
    test 338 _ispolar_ = 'ispolar': ispolar
    test 339 _j_ = 'j': True
    test 340 _j_ = 'j': j
    test 341 _k0_ = 'k0': True
    test 342 _k0_ = 'k0': k0
    test 343 _kind_ = 'kind': True
    test 344 _kind_ = 'kind': kind
    test 345 _knots_ = 'knots': True
    test 346 _knots_ = 'knots': knots
    test 347 _Krassovski1940_ = 'Krassovski1940': True
    test 348 _Krassovski1940_ = 'Krassovski1940': krassovski1940
    test 349 _Krassowsky1940_ = 'Krassowsky1940': True
    test 350 _Krassowsky1940_ = 'Krassowsky1940': krassowsky1940
    test 351 _lam_ = 'lam': True
    test 352 _lam_ = 'lam': lam
    test 353 _lat0_ = 'lat0': True
    test 354 _lat0_ = 'lat0': lat0
    test 355 _lat1_ = 'lat1': True
    test 356 _lat1_ = 'lat1': lat1
    test 357 _lat2_ = 'lat2': True
    test 358 _lat2_ = 'lat2': lat2
    test 359 _lat_ = 'lat': True
    test 360 _lat_ = 'lat': lat
    test 361 _LatLon_ = 'LatLon': True
    test 362 _LatLon_ = 'LatLon': latlon
    test 363 _latlon_ = 'latlon': True
    test 364 _latlon_ = 'latlon': latlon
    test 365 _LCURLY_ = '{': True
    test 366 _LCURLY_ = '{': {  FAILED, KNOWN, expected lcurly
    test 367 _len_ = 'len': True
    test 368 _len_ = 'len': len
    test 369 _linear_ = 'linear': True
    test 370 _linear_ = 'linear': linear
    test 371 _lon0_ = 'lon0': True
    test 372 _lon0_ = 'lon0': lon0
    test 373 _lon1_ = 'lon1': True
    test 374 _lon1_ = 'lon1': lon1
    test 375 _lon2_ = 'lon2': True
    test 376 _lon2_ = 'lon2': lon2
    test 377 _lon_ = 'lon': True
    test 378 _lon_ = 'lon': lon
    test 379 _ltp_ = 'ltp': True
    test 380 _ltp_ = 'ltp': ltp
    test 381 _M12_ = 'M12': True
    test 382 _M12_ = 'M12': m12
    test 383 _m12_ = 'm12': True
    test 384 _m12_ = 'm12': m12
    test 385 _M21_ = 'M21': True
    test 386 _M21_ = 'M21': m21
    test 387 _M_ = 'M': True
    test 388 _M_ = 'M': m
    test 389 _m_ = 'm': True
    test 390 _m_ = 'm': m
    test 391 _MANT_DIG_ = 'MANT_DIG': True
    test 392 _MANT_DIG_ = 'MANT_DIG': mant_dig
    test 393 _MAX_ = 'MAX': True
    test 394 _MAX_ = 'MAX': max
    test 395 _mean_ = 'mean': True
    test 396 _mean_ = 'mean': mean
    test 397 _meanOf_ = 'meanOf': True
    test 398 _meanOf_ = 'meanOf': meanof
    test 399 _meridional_ = 'meridional': True
    test 400 _meridional_ = 'meridional': meridional
    test 401 _meter2_ = 'meter2': True
    test 402 _meter2_ = 'meter2': meter2
    test 403 _meter_ = 'meter': True
    test 404 _meter_ = 'meter': meter
    test 405 _MGRS_ = 'MGRS': True
    test 406 _MGRS_ = 'MGRS': mgrs
    test 407 _MIN_ = 'MIN': True
    test 408 _MIN_ = 'MIN': min
    test 409 _MINUS_ = '-': True
    test 410 _MINUS_ = '-': -  FAILED, KNOWN, expected minus
    test 411 _module_ = 'module': True
    test 412 _module_ = 'module': module
    test 413 _N_ = 'N': True
    test 414 _N_ = 'N': n
    test 415 _n_ = 'n': True
    test 416 _n_ = 'n': n
    test 417 _N_0_0 = -0.0: True
    test 418 _N_0_0 = -0.0: -0.0  FAILED, KNOWN, expected N.0.0
    test 419 _N_180_0 = -180.0: True
    test 420 _N_180_0 = -180.0: -180.0  FAILED, KNOWN, expected N.180.0
    test 421 _N_1_0 = -1.0: True
    test 422 _N_1_0 = -1.0: -1.0  FAILED, KNOWN, expected N.1.0
    test 423 _N_2_0 = -2.0: True
    test 424 _N_2_0 = -2.0: -2.0  FAILED, KNOWN, expected N.2.0
    test 425 _N_90_0 = -90.0: True
    test 426 _N_90_0 = -90.0: -90.0  FAILED, KNOWN, expected N.90.0
    test 427 _N_A_ = 'N/A': True
    test 428 _N_A_ = 'N/A': n/a  FAILED, KNOWN, expected n_a
    test 429 _n_a_ = 'n/a': True
    test 430 _n_a_ = 'n/a': n/a  FAILED, KNOWN, expected n_a
    test 431 _NAD27_ = 'NAD27': True
    test 432 _NAD27_ = 'NAD27': nad27
    test 433 _NAD83_ = 'NAD83': True
    test 434 _NAD83_ = 'NAD83': nad83
    test 435 _name_ = 'name': True
    test 436 _name_ = 'name': name
    test 437 _NAN_ = 'NAN': True
    test 438 _NAN_ = 'NAN': nan
    test 439 _NE_ = 'NE': True
    test 440 _NE_ = 'NE': ne
    test 441 _near_ = 'near': True
    test 442 _near_ = 'near': near
    test 443 _nearestOn2_ = 'nearestOn2': True
    test 444 _nearestOn2_ = 'nearestOn2': neareston2
    test 445 _NEG0_ = 'NEG0': True
    test 446 _NEG0_ = 'NEG0': neg0
    test 447 _negative_ = 'negative': True
    test 448 _negative_ = 'negative': negative
    test 449 _NINF_ = 'NINF': True
    test 450 _NINF_ = 'NINF': ninf
    test 451 _NL_ = '\n': True
    test 452 _NL_ = '\n': 
  FAILED, KNOWN, expected nl
    test 453 _NL_hash_ = '\n# ': True
    test 454 _NL_hash_ = '\n# ': 
#   FAILED, KNOWN, expected nl_hash
    test 455 _NL_NL_ = '\n\n': True
    test 456 _NL_NL_ = '\n\n': 

  FAILED, KNOWN, expected nl_nl
    test 457 _NL_var_ = '\n@var ': True
    test 458 _NL_var_ = '\n@var ': 
@var   FAILED, KNOWN, expected nl_var
    test 459 _NN_ = 'NN': True
    test 460 _NN_ = 'NN': nn
    test 461 _no_ = 'no': True
    test 462 _no_ = 'no': no
    test 463 _north_ = 'north': True
    test 464 _north_ = 'north': north
    test 465 _northing_ = 'northing': True
    test 466 _northing_ = 'northing': northing
    test 467 _NorthPole_ = 'NorthPole': True
    test 468 _NorthPole_ = 'NorthPole': northpole
    test 469 _not_ = 'not': True
    test 470 _not_ = 'not': not
    test 471 _not_finite_ = 'not finite': True
    test 472 _not_finite_ = 'not finite': not finite  FAILED, KNOWN, expected not_finite
    test 473 _not_scalar_ = 'not scalar': True
    test 474 _not_scalar_ = 'not scalar': not scalar  FAILED, KNOWN, expected not_scalar
    test 475 _NS_ = 'NS': True
    test 476 _NS_ = 'NS': ns
    test 477 _NSEW_ = 'NSEW': True
    test 478 _NSEW_ = 'NSEW': nsew
    test 479 _NTF_ = 'NTF': True
    test 480 _NTF_ = 'NTF': ntf
    test 481 _null_ = 'null': True
    test 482 _null_ = 'null': null
    test 483 _number_ = 'number': True
    test 484 _number_ = 'number': number
    test 485 _numpy_ = 'numpy': True
    test 486 _numpy_ = 'numpy': numpy
    test 487 _Nv00_ = 'Nv00': True
    test 488 _Nv00_ = 'Nv00': nv00
    test 489 _NW_ = 'NW': True
    test 490 _NW_ = 'NW': nw
    test 491 _O_ = 'O': True
    test 492 _O_ = 'O': o
    test 493 _on_ = 'on': True
    test 494 _on_ = 'on': on
    test 495 _opposite_ = 'opposite': True
    test 496 _opposite_ = 'opposite': opposite
    test 497 _or_ = 'or': True
    test 498 _or_ = 'or': or
    test 499 _other_ = 'other': True
    test 500 _other_ = 'other': other
    test 501 _outside_ = 'outside': True
    test 502 _outside_ = 'outside': outside
    test 503 _overlap_ = 'overlap': True
    test 504 _overlap_ = 'overlap': overlap
    test 505 _PERCENT_ = '%': True
    test 506 _PERCENT_ = '%': %  FAILED, KNOWN, expected percent
    test 507 _PERCENTDOTSTAR_ = '%.*': True
    test 508 _PERCENTDOTSTAR_ = '%.*': %.*  FAILED, KNOWN, expected percentdotstar
    test 509 _perimeterOf_ = 'perimeterOf': True
    test 510 _perimeterOf_ = 'perimeterOf': perimeterof
    test 511 _phi_ = 'phi': True
    test 512 _phi_ = 'phi': phi
    test 513 _PI2_ = 'PI2': True
    test 514 _PI2_ = 'PI2': pi2
    test 515 _PI3_ = 'PI3': True
    test 516 _PI3_ = 'PI3': pi3
    test 517 _PI3_2_ = 'PI3_2': True
    test 518 _PI3_2_ = 'PI3_2': pi3_2
    test 519 _PI4_ = 'PI4': True
    test 520 _PI4_ = 'PI4': pi4
    test 521 _PI_ = 'PI': True
    test 522 _PI_ = 'PI': pi
    test 523 _PI_2_ = 'PI_2': True
    test 524 _PI_2_ = 'PI_2': pi_2
    test 525 _PI_4_ = 'PI_4': True
    test 526 _PI_4_ = 'PI_4': pi_4
    test 527 _platform2 = <function _platform2 at 0x101a98040>: True
    test 528 _PLUS_ = '+': True
    test 529 _PLUS_ = '+': +  FAILED, KNOWN, expected plus
    test 530 _PLUSMINUS_ = '+-': True
    test 531 _PLUSMINUS_ = '+-': +-  FAILED, KNOWN, expected plusminus
    test 532 _point_ = 'point': True
    test 533 _point_ = 'point': point
    test 534 _points_ = 'points': True
    test 535 _points_ = 'points': points
    test 536 _pole_ = 'pole': True
    test 537 _pole_ = 'pole': pole
    test 538 _precision_ = 'precision': True
    test 539 _precision_ = 'precision': precision
    test 540 _prime_vertical_ = 'prime_vertical': True
    test 541 _prime_vertical_ = 'prime_vertical': prime_vertical
    test 542 _pygeodesy_abspath_ = 'pygeodesy_abspath': True
    test 543 _pygeodesy_abspath_ = 'pygeodesy_abspath': pygeodesy_abspath
    test 544 _PyPy__ = 'PyPy ': True
    test 545 _PyPy__ = 'PyPy ': pypy   FAILED, KNOWN, expected pypy
    test 546 _Python_ = 'Python': True
    test 547 _Python_ = 'Python': python
    test 548 _python_ = 'python': True
    test 549 _python_ = 'python': python
    test 550 _QUOTE1_ = "'": True
    test 551 _QUOTE1_ = "'": '  FAILED, KNOWN, expected quote1
    test 552 _QUOTE2_ = '"': True
    test 553 _QUOTE2_ = '"': "  FAILED, KNOWN, expected quote2
    test 554 _radians2_ = 'radians2': True
    test 555 _radians2_ = 'radians2': radians2
    test 556 _radians_ = 'radians': True
    test 557 _radians_ = 'radians': radians
    test 558 _radius1_ = 'radius1': True
    test 559 _radius1_ = 'radius1': radius1
    test 560 _radius2_ = 'radius2': True
    test 561 _radius2_ = 'radius2': radius2
    test 562 _radius_ = 'radius': True
    test 563 _radius_ = 'radius': radius
    test 564 _range_ = 'range': True
    test 565 _range_ = 'range': range
    test 566 _RCURLY_ = '}': True
    test 567 _RCURLY_ = '}': }  FAILED, KNOWN, expected rcurly
    test 568 _reciprocal_ = 'reciprocal': True
    test 569 _reciprocal_ = 'reciprocal': reciprocal
    test 570 _reframe_ = 'reframe': True
    test 571 _reframe_ = 'reframe': reframe
    test 572 _resolution_ = 'resolution': True
    test 573 _resolution_ = 'resolution': resolution
    test 574 _rIn_ = 'rIn': True
    test 575 _rIn_ = 'rIn': rin
    test 576 _S12_ = 'S12': True
    test 577 _S12_ = 'S12': s12
    test 578 _s12_ = 's12': True
    test 579 _s12_ = 's12': s12
    test 580 _S_ = 'S': True
    test 581 _S_ = 'S': s
    test 582 _s_ = 's': True
    test 583 _s_ = 's': s
    test 584 _scalar_ = 'scalar': True
    test 585 _scalar_ = 'scalar': scalar
    test 586 _scale_ = 'scale': True
    test 587 _scale_ = 'scale': scale
    test 588 _scipy_ = 'scipy': True
    test 589 _scipy_ = 'scipy': scipy
    test 590 _SE_ = 'SE': True
    test 591 _SE_ = 'SE': se
    test 592 _semi_circular_ = 'semi-circular': True
    test 593 _semi_circular_ = 'semi-circular': semi-circular  FAILED, KNOWN, expected semi_circular
    test 594 _sep_ = 'sep': True
    test 595 _sep_ = 'sep': sep
    test 596 _sets_ = 'sets': True
    test 597 _sets_ = 'sets': sets
    test 598 _singular_ = 'singular': True
    test 599 _singular_ = 'singular': singular
    test 600 _SLASH_ = '/': True
    test 601 _SLASH_ = '/': /  FAILED, KNOWN, expected slash
    test 602 _small_ = 'small': True
    test 603 _small_ = 'small': small
    test 604 _SouthPole_ = 'SouthPole': True
    test 605 _SouthPole_ = 'SouthPole': southpole
    test 606 _SPACE_ = ' ': True
    test 607 _SPACE_ = ' ':    FAILED, KNOWN, expected space
    test 608 _specified_ = 'specified': True
    test 609 _specified_ = 'specified': specified
    test 610 _Sphere_ = 'Sphere': True
    test 611 _Sphere_ = 'Sphere': sphere
    test 612 _spherical_ = 'spherical': True
    test 613 _spherical_ = 'spherical': spherical
    test 614 _SQRT2_2 = 0.7071067811865476: True
    test 615 _SQRT2_2 = 0.7071067811865476: 0.7071067811865476  FAILED, KNOWN, expected SQRT2.2
    test 616 _STAR_ = '*': True
    test 617 _STAR_ = '*': *  FAILED, KNOWN, expected star
    test 618 _start_ = 'start': True
    test 619 _start_ = 'start': start
    test 620 _std_ = 'std': True
    test 621 _std_ = 'std': std
    test 622 _stdev_ = 'stdev': True
    test 623 _stdev_ = 'stdev': stdev
    test 624 _supported_ = 'supported': True
    test 625 _supported_ = 'supported': supported
    test 626 _SW_ = 'SW': True
    test 627 _SW_ = 'SW': sw
    test 628 _sx_ = 'sx': True
    test 629 _sx_ = 'sx': sx
    test 630 _sy_ = 'sy': True
    test 631 _sy_ = 'sy': sy
    test 632 _sz_ = 'sz': True
    test 633 _sz_ = 'sz': sz
    test 634 _tbd_ = 'tbd': True
    test 635 _tbd_ = 'tbd': tbd
    test 636 _TILDE_ = '~': True
    test 637 _TILDE_ = '~': ~  FAILED, KNOWN, expected tilde
    test 638 _till_ = 'till': True
    test 639 _till_ = 'till': till
    test 640 _to_ = 'to': True
    test 641 _to_ = 'to': to
    test 642 _too_ = 'too': True
    test 643 _too_ = 'too': too
    test 644 _transform_ = 'transform': True
    test 645 _transform_ = 'transform': transform
    test 646 _tx_ = 'tx': True
    test 647 _tx_ = 'tx': tx
    test 648 _ty_ = 'ty': True
    test 649 _ty_ = 'ty': ty
    test 650 _tz_ = 'tz': True
    test 651 _tz_ = 'tz': tz
    test 652 _UNDER_ = '_': True
    test 653 _UNDER_ = '_': _  FAILED, KNOWN, expected under
    test 654 _units_ = 'units': True
    test 655 _units_ = 'units': units
    test 656 _up_ = 'up': True
    test 657 _up_ = 'up': up
    test 658 _UPS_ = 'UPS': True
    test 659 _UPS_ = 'UPS': ups
    test 660 _utf_8_ = 'utf-8': True
    test 661 _utf_8_ = 'utf-8': utf-8  FAILED, KNOWN, expected utf_8
    test 662 _UTM_ = 'UTM': True
    test 663 _UTM_ = 'UTM': utm
    test 664 _V_ = 'V': True
    test 665 _V_ = 'V': v
    test 666 _valid_ = 'valid': True
    test 667 _valid_ = 'valid': valid
    test 668 _value_ = 'value': True
    test 669 _value_ = 'value': value
    test 670 _version2 = <function _version2 at 0x101a983a0>: True
    test 671 _version_ = 'version': True
    test 672 _version_ = 'version': version
    test 673 _vs_ = 'vs': True
    test 674 _vs_ = 'vs': vs
    test 675 _W_ = 'W': True
    test 676 _W_ = 'W': w
    test 677 _WGS72_ = 'WGS72': True
    test 678 _WGS72_ = 'WGS72': wgs72
    test 679 _WGS84_ = 'WGS84': True
    test 680 _WGS84_ = 'WGS84': wgs84
    test 681 _width_ = 'width': True
    test 682 _width_ = 'width': width
    test 683 _X_ = 'X': True
    test 684 _X_ = 'X': x
    test 685 _x_ = 'x': True
    test 686 _x_ = 'x': x
    test 687 _xyz_ = 'xyz': True
    test 688 _xyz_ = 'xyz': xyz
    test 689 _y_ = 'y': True
    test 690 _y_ = 'y': y
    test 691 _z_ = 'z': True
    test 692 _z_ = 'z': z
    test 693 _zone_ = 'zone': True
    test 694 _zone_ = 'zone': zone
    test 695 EPS: True
    test 696 EPS+1: True
    test 697 EPS0: True
    test 698 EPS02: True
    test 699 EPS_2: True
    test 700 EPS_2: 1.1102230246251565e-16
    test 701 EPS1: True
    test 702 EPS1-1: True
    test 703 EPS2: True
    test 704 EPS4: True
    test 705 INF: True
    test 706 INF: False
    test 707 NINF: True
    test 708 NINF: -inf
    test 709 INT0: 0
    test 710 NAN: True
    test 711 NAN: False
    test 712 NAN: False
    test 713 NEG0: -0.0
    test 714 NEG0: True
    test 715 NEG0: False
    test 716 NEG0: 0.0
    test 717 .tillC: ABC
    test 718 .fromX: XYZ
    test 719 .fromH.tillJ: HJ
    test 720 .fromN.tillP: NP
    test 721 _90_EPS_2: True
    test 722 _90_EPS_2: True
    test 723 float_: (1.0, 2.0, 3.0)
    test 724 float_: True

    58 of 724 testInterns.py tests (8.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 4.223 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testIters.py

    testing testIters.py 21.09.30 (module pygeodesy.iters 21.09.26)
    test 1 i : 7
    test 2 dedup: False
    test 3 i : 0
    test 4 p0: True
    test 5 dedup: True
    test 6 copies: [0, 1, 2, 3, 4, 5, 6, 7]
    test 7 i : 0
    test 8 copies: 9
    test 9 p0: True
    test 10 copies: True
    test 11 copies: (0, 1, 2, 3, 4, 5, 6, 7)
    test 12 iter: 1
    test 13 iter: 2
    test 14 iter: 3
    test 15 re-iter: PointsError('points (0): too few')

    all 15 testIters.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 329.971 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testKarney.py

    testing testKarney.py 22.05.08 (module pygeodesy.karney 22.07.03)
    test 1 Geodesic: True

    testDirect(pygeodesy.karney, 22.07.03)
    test 2 Direct.lat2: -11.174909999999993  FAILED, KNOWN, expected -11.174910000000001
    test 3 Direct.lon2: -69.959210000000027  FAILED, KNOWN, expected -69.959209999999999
    test 4 Direct.azi2: 129.289270889708774
    test 5 Direct.a12: 80.507297142819738
    test 6 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 7 Direct.M12: 0.166063184473861
    test 8 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 9 Direct.S12: 12841384694976.431640625000000
    test 10 Direct.lat2: 77.031959999999998
    test 11 Direct.lon2: 197.182340000000011
    test 12 Direct.azi2: 109.112041110671512
    test 13 Direct.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 14 Direct.m12: 3828869.334438760299236  FAILED, KNOWN, expected 3828869.334438760764897
    test 15 Direct.M12: 0.800763496080926
    test 16 Direct.M21: 0.801010069842010
    test 17 Direct.S12: 61674961290615.609375000000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 18 Direct.lat2: 41.841380000000001
    test 19 Direct.lon2: 98.566350000000014  FAILED, KNOWN, expected 98.566350000000000
    test 20 Direct.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 21 Direct.a12: 75.629304910115223
    test 22 Direct.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 23 Direct.M12: 0.248163392339504
    test 24 Direct.M21: 0.249302512036279
    test 25 Direct.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 26 Direct.lat2: -12.706309999999982  FAILED, KNOWN, expected -12.706310000000000
    test 27 Direct.lon2: 285.903439999999989
    test 28 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 29 Direct.a12: 100.278634181155780  FAILED, KNOWN, expected 100.278634181155752
    test 30 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 31 Direct.M12: -0.171994902747004
    test 32 Direct.M21: -0.177225695263457
    test 33 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 34 Direct.lat2: -15.847839999999977  FAILED, KNOWN, expected -15.847840000000000
    test 35 Direct.lon2: 5.935569999999956  FAILED, KNOWN, expected 5.935570000000000
    test 36 Direct.azi2: -20.787484651536982  FAILED, KNOWN, expected -20.787484651536989
    test 37 Direct.a12: 144.640108810286279  FAILED, KNOWN, expected 144.640108810286250
    test 38 Direct.m12: 3732902.158387716859579  FAILED, KNOWN, expected 3732902.158387718722224
    test 39 Direct.M12: -0.812736387000705
    test 40 Direct.M21: -0.812998005191545
    test 41 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.karney, 22.07.03)
    test 42 Inverse.lat2: -11.174910000000001
    test 43 Inverse.lon2: -69.959209999999999
    test 44 Inverse.azi1: 111.098748429560331
    test 45 Inverse.azi2: 129.289270889708774
    test 46 Inverse.s12: 8935244.560481829568744
    test 47 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 48 Inverse.m12: 6273170.205530383624136
    test 49 Inverse.M12: 0.166063184473861
    test 50 Inverse.M21: 0.164791169456129
    test 51 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 52 Inverse.lat2: 77.031959999999998
    test 53 Inverse.lon2: 197.182340000000011
    test 54 Inverse.azi1: 22.020059880982803  FAILED, KNOWN, expected 22.020059880982799
    test 55 Inverse.azi2: 109.112041110671541  FAILED, KNOWN, expected 109.112041110671512
    test 56 Inverse.s12: 4105086.171392441727221  FAILED, KNOWN, expected 4105086.171392440795898
    test 57 Inverse.a12: 36.892740690445905  FAILED, KNOWN, expected 36.892740690445891
    test 58 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 59 Inverse.M12: 0.800763496080926
    test 60 Inverse.M21: 0.801010069842010
    test 61 Inverse.S12: 61674961290615.617187500000000
    test 62 Inverse.lat2: 41.841380000000001
    test 63 Inverse.lon2: 98.566350000000000
    test 64 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 65 Inverse.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 66 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 67 Inverse.a12: 75.629304910115223
    test 68 Inverse.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 69 Inverse.M12: 0.248163392339504
    test 70 Inverse.M21: 0.249302512036279
    test 71 Inverse.S12: -6637997720646.717773437500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 72 Inverse.lat2: -12.706310000000000
    test 73 Inverse.lon2: 285.903439999999989
    test 74 Inverse.azi1: 173.734912408784027
    test 75 Inverse.azi2: 2.512956620913672  FAILED, KNOWN, expected 2.512956620913668
    test 76 Inverse.s12: 11150344.231208024546504
    test 77 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 78 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 79 Inverse.M12: -0.171994902747004
    test 80 Inverse.M21: -0.177225695263457
    test 81 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 82 Inverse.lat2: -15.847840000000000
    test 83 Inverse.lon2: 5.935570000000000
    test 84 Inverse.azi1: -159.033557661192930
    test 85 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 86 Inverse.s12: 16076603.163118068128824
    test 87 Inverse.a12: 144.640108810286250
    test 88 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 89 Inverse.M12: -0.812736387000705
    test 90 Inverse.M21: -0.812998005191545
    test 91 Inverse.S12: 97825992354058.703125000000000

    testGeodCalc(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 92 area: 13662703680020
    test 93 perimeter: 16831067.892791

    testMask(pygeodesy.karney, 22.07.03)
    test 94 Geodesic.EMPTY: 0
    test 95 Geodesic.LATITUDE: 128
    test 96 Geodesic.LONGITUDE: 264
    test 97 Geodesic.AZIMUTH: 512
    test 98 Geodesic.DISTANCE: 1025
    test 99 Geodesic.STANDARD: 1929
    test 100 Geodesic.DISTANCE_IN: 2051
    test 101 Geodesic.REDUCEDLENGTH: 4101
    test 102 Geodesic.GEODESICSCALE: 8197
    test 103 Geodesic.AREA: 16400
    test 104 Geodesic.ALL: 32671
    test 105 Geodesic.LONG_UNROLL: 32768

    testDirect(pygeodesy.geodesicx, 22.05.14)
    test 106 Direct.lat2: -11.174909999999993  FAILED, KNOWN, expected -11.174910000000001
    test 107 Direct.lon2: -69.959209999999999
    test 108 Direct.azi2: 129.289270889708774
    test 109 Direct.a12: 80.507297142819738
    test 110 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 111 Direct.M12: 0.166063184473861
    test 112 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 113 Direct.S12: 12841384694976.431640625000000
    test 114 Direct.lat2: 77.031959999999998
    test 115 Direct.lon2: 197.182340000000011
    test 116 Direct.azi2: 109.112041110671512
    test 117 Direct.a12: 36.892740690445891
    test 118 Direct.m12: 3828869.334438760299236  FAILED, KNOWN, expected 3828869.334438760764897
    test 119 Direct.M12: 0.800763496080926
    test 120 Direct.M21: 0.801010069842010
    test 121 Direct.S12: 61674961290615.609375000000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 122 Direct.lat2: 41.841380000000001
    test 123 Direct.lon2: 98.566350000000000
    test 124 Direct.azi2: -41.843599514404673  FAILED, KNOWN, expected -41.843599514404659
    test 125 Direct.a12: 75.629304910115238  FAILED, KNOWN, expected 75.629304910115223
    test 126 Direct.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 127 Direct.M12: 0.248163392339504
    test 128 Direct.M21: 0.249302512036279
    test 129 Direct.S12: -6637997720646.717773437500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 130 Direct.lat2: -12.706309999999997  FAILED, KNOWN, expected -12.706310000000000
    test 131 Direct.lon2: 285.903439999999989
    test 132 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 133 Direct.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 134 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 135 Direct.M12: -0.171994902747004
    test 136 Direct.M21: -0.177225695263457
    test 137 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 138 Direct.lat2: -15.847839999999952  FAILED, KNOWN, expected -15.847840000000000
    test 139 Direct.lon2: 5.935569999999984  FAILED, KNOWN, expected 5.935570000000000
    test 140 Direct.azi2: -20.787484651536978  FAILED, KNOWN, expected -20.787484651536989
    test 141 Direct.a12: 144.640108810286307  FAILED, KNOWN, expected 144.640108810286250
    test 142 Direct.m12: 3732902.158387714996934  FAILED, KNOWN, expected 3732902.158387718722224
    test 143 Direct.M12: -0.812736387000705
    test 144 Direct.M21: -0.812998005191545
    test 145 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodesicx, 22.05.14)
    test 146 Inverse.lat2: -11.174910000000001
    test 147 Inverse.lon2: -69.959209999999999
    test 148 Inverse.azi1: 111.098748429560331
    test 149 Inverse.azi2: 129.289270889708774
    test 150 Inverse.s12: 8935244.560481829568744
    test 151 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 152 Inverse.m12: 6273170.205530383624136
    test 153 Inverse.M12: 0.166063184473861
    test 154 Inverse.M21: 0.164791169456129
    test 155 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 156 Inverse.lat2: 77.031959999999998
    test 157 Inverse.lon2: 197.182340000000011
    test 158 Inverse.azi1: 22.020059880982807  FAILED, KNOWN, expected 22.020059880982799
    test 159 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 160 Inverse.s12: 4105086.171392442658544  FAILED, KNOWN, expected 4105086.171392440795898
    test 161 Inverse.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 162 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 163 Inverse.M12: 0.800763496080926
    test 164 Inverse.M21: 0.801010069842010
    test 165 Inverse.S12: 61674961290615.617187500000000
    test 166 Inverse.lat2: 41.841380000000001
    test 167 Inverse.lon2: 98.566350000000000
    test 168 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 169 Inverse.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 170 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 171 Inverse.a12: 75.629304910115223
    test 172 Inverse.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 173 Inverse.M12: 0.248163392339504
    test 174 Inverse.M21: 0.249302512036279
    test 175 Inverse.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 176 Inverse.lat2: -12.706310000000000
    test 177 Inverse.lon2: 285.903439999999989
    test 178 Inverse.azi1: 173.734912408784027
    test 179 Inverse.azi2: 2.512956620913673  FAILED, KNOWN, expected 2.512956620913668
    test 180 Inverse.s12: 11150344.231208024546504
    test 181 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 182 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 183 Inverse.M12: -0.171994902747004
    test 184 Inverse.M21: -0.177225695263457
    test 185 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 186 Inverse.lat2: -15.847840000000000
    test 187 Inverse.lon2: 5.935570000000000
    test 188 Inverse.azi1: -159.033557661192930
    test 189 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 190 Inverse.s12: 16076603.163118060678244  FAILED, KNOWN, expected 16076603.163118068128824
    test 191 Inverse.a12: 144.640108810286250
    test 192 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 193 Inverse.M12: -0.812736387000705
    test 194 Inverse.M21: -0.812998005191545
    test 195 Inverse.S12: 97825992354058.703125000000000

    testGeodCalc(pygeodesy.ellipsoidalExact, 22.07.07)
    test 196 area: 13662703680020
    test 197 perimeter: 16830891.356049

    testMask(pygeodesy.geodesicx, 22.05.14)
    test 198 Geodesic.EMPTY: 0
    test 199 Geodesic.LATITUDE: 128
    test 200 Geodesic.LONGITUDE: 256
    test 201 Geodesic.AZIMUTH: 512
    test 202 Geodesic.DISTANCE: 1024
    test 203 Geodesic.STANDARD: 3968
    test 204 Geodesic.DISTANCE_IN: 2048
    test 205 Geodesic.REDUCEDLENGTH: 4096
    test 206 Geodesic.GEODESICSCALE: 8192
    test 207 Geodesic.AREA: 16384
    test 208 Geodesic.ALL: 32640
    test 209 Geodesic.LONG_UNROLL: 65536
    102 tests skipped (102): no GeodSolve

    testMath(pygeodesy.karney, 22.07.03)
    test 210 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 211 _diff182(-180, -90): 90.0
    test 212 _diff182(-180, 0): 180.0
    test 213 _diff182(-180, 90): -90.0
    test 214 _diff182(-180, 180): 0.0
    test 215 _diff182(-90, -180): -90.0
    test 216 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 217 _diff182(-90, 0): 90.0
    test 218 _diff182(-90, 90): 180.0
    test 219 _diff182(-90, 180): -90.0
    test 220 _diff182(0, -180): -180.0
    test 221 _diff182(0, -90): -90.0
    test 222 _diff182(0, 0): 0.0  FAILED, KNOWN, expected -0.0
    test 223 _diff182(0, 90): 90.0
    test 224 _diff182(0, 180): 180.0
    test 225 _diff182(90, -180): 90.0
    test 226 _diff182(90, -90): -180.0
    test 227 _diff182(90, 0): -90.0
    test 228 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 229 _diff182(90, 180): 90.0
    test 230 _diff182(180, -180): -0.0
    test 231 _diff182(180, -90): 90.0
    test 232 _diff182(180, 0): -180.0
    test 233 _diff182(180, 90): -90.0
    test 234 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 235 _norm180(-361): -1.0
    test 236  wrap180(-361): -1.0
    test 237 _norm180(-360): -0.0
    test 238  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 239 _norm180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 240  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 241 _norm180(-90): -90.0
    test 242  wrap180(-90): -90.0
    test 243 _norm180(0): 0.0
    test 244  wrap180(0): 0.0
    test 245 _norm180(0): 0.0
    test 246  wrap180(0): 0.0
    test 247 _norm180(90): 90.0
    test 248  wrap180(90): 90.0
    test 249 _norm180(180): 180.0
    test 250  wrap180(180): 180.0
    test 251 _norm180(360): 0.0
    test 252  wrap180(360): 0.0
    test 253 _norm180(361): 1.0
    test 254  wrap180(361): 1.0
    test 255 _fsum2_: 1.0e-20
    test 256 _fsum2_: 0.0
    test 257 _fsum2_: -8.0e-20  FAILED, KNOWN, expected 1.0e-20
    test 258 _fsum2_: 1.0e-20
    test 259 _fsum2_: -3.6893488147419103e+19  FAILED, KNOWN, expected 1.0
    test 260 _fsum2_: 1.002978273411373e+18
    test 261 unroll(-30, 0): (30.0, 0.0)
    test 262 unroll(-30, 30): (60.0, 30.0)
    test 263 unroll(-30, 60): (90.0, 60.0)
    test 264 unroll(-30, 90): (120.0, 90.0)
    test 265 unroll(-30, 120): (150.0, 120.0)
    test 266 unroll(-30, 150): (180.0, 150.0)
    test 267 unroll(-30, 180): (-150.0, -180.0)
    test 268 unroll(-30, 210): (-120.0, -150.0)
    test 269 unroll(-30, 240): (-90.0, -120.0)
    test 270 unroll(-30, 270): (-60.0, -90.0)
    test 271 unroll(-30, 300): (-30.0, -60.0)
    test 272 unroll(-30, 330): (0.0, -30.0)
    test 273 unroll(-30, 360): (30.0, 0.0)

    87 of 273 testKarney.py tests (31.9%) FAILED, ALL KNOWN, 102 skipped (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 751.124 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testKtm.py

    testing testKtm.py 22.06.15 (module pygeodesy.ktm 22.07.07)

    test 1 _TM: KTransverseMercator(TMorder=7, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 2 forward 0N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 3 reverse 0N (80.000, 0.000) -/-: 0.0
    test 4 forward 3N (79.890, 8.374) -/-: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 5 reverse 3N (79.890, 8.374) -/-: 1.7763568394002505e-15
    test 6 forward 6N (79.562, 16.725) -/-: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 7 reverse 6N (79.562, 16.725) -/-: 1.5888218580782548e-14
    test 8 forward 9N (79.015, 25.030) -/-: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 9 reverse 9N (79.015, 25.030) -/-: 2.1316282072803006e-14
    test 10 forward 12N (78.252, 33.266) -/-: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 11 reverse 12N (78.252, 33.266) -/-: 5.1728291973635394e-14
    test 12 forward 15N (77.274, 41.411) -/-: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 13 reverse 15N (77.274, 41.411) -/-: 0.0
    test 14 forward 18N (76.085, 49.443) -/-: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 15 reverse 18N (76.085, 49.443) -/-: 3.8263897345803626e-14
    test 16 forward 21N (74.686, 57.339) -/-: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 17 reverse 21N (74.686, 57.339) -/-: 5.859285502108464e-14
    test 18 forward 24N (73.084, 65.078) -/-: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 19 reverse 24N (73.084, 65.078) -/-: 1.4210854715202004e-14
    test 20 forward 27N (71.281, 72.638) -/-: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 21 reverse 27N (71.281, 72.638) -/-: 1.4210854715202004e-14
    test 22 forward 30N (69.282, 80.000) -/-: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 23 reverse 30N (69.282, 80.000) -/-: 1.4210854715202004e-14
    test 24 forward 33N (67.094, 87.142) -/-: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 25 reverse 33N (67.094, 87.142) -/-: 0.0
    test 26 forward 36N (64.721, 94.046) -/-: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 27 reverse 36N (64.721, 94.046) -/-: 0.0
    test 28 forward 39N (62.172, 100.691) -/-: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 29 reverse 39N (62.172, 100.691) -/-: 0.0
    test 30 forward 42N (59.452, 107.061) -/-: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 31 reverse 42N (59.452, 107.061) -/-: 1.4210854715202004e-14
    test 32 forward 45N (56.569, 113.137) -/-: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 33 reverse 45N (56.569, 113.137) -/-: 1.5888218580782548e-14
    test 34 forward 48N (53.530, 118.903) -/-: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 35 reverse 48N (53.530, 118.903) -/-: 1.4210854715202004e-14
    test 36 forward 51N (50.346, 124.343) -/-: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 37 reverse 51N (50.346, 124.343) -/-: 1.4210854715202004e-14
    test 38 forward 54N (47.023, 129.443) -/-: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 39 reverse 54N (47.023, 129.443) -/-: 2.842170943040401e-14
    test 40 forward 57N (43.571, 134.187) -/-: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 41 reverse 57N (43.571, 134.187) -/-: 0.0
    test 42 forward 60N (40.000, 138.564) -/-: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 43 reverse 60N (40.000, 138.564) -/-: 0.0
    test 44 forward 63N (36.319, 142.561) -/-: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 45 reverse 63N (36.319, 142.561) -/-: 7.105427357601002e-15
    test 46 forward 66N (32.539, 146.167) -/-: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 47 reverse 66N (32.539, 146.167) -/-: 7.105427357601002e-15
    test 48 forward 69N (28.669, 149.373) -/-: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 49 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 50 forward 72N (24.721, 152.169) -/-: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 51 reverse 72N (24.721, 152.169) -/-: 1.0658141036401503e-14
    test 52 forward 75N (20.706, 154.548) -/-: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 53 reverse 75N (20.706, 154.548) -/-: 1.7763568394002505e-14
    test 54 forward 78N (16.633, 156.504) -/-: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 55 reverse 78N (16.633, 156.504) -/-: 1.7763568394002505e-14
    test 56 forward 81N (12.515, 158.030) -/-: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 57 reverse 81N (12.515, 158.030) -/-: 1.2434497875801753e-14
    test 58 forward 84N (8.362, 159.124) -/-: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 59 reverse 84N (8.362, 159.124) -/-: 1.7763568394002505e-14
    test 60 forward 87N (4.187, 159.781) -/-: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 61 reverse 87N (4.187, 159.781) -/-: 8.881784197001252e-15
    test 62 forward 90N (0.000, 160.000) -/-: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 63 reverse 90N (0.000, 160.000) -/-: 2.402002211154445e-14
    test 64 forward 93N (-4.187, 159.781) -/-: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 65 reverse 93N (-4.187, 159.781) -/-: 6.217248937900877e-15
    test 66 forward 96N (-8.362, 159.124) -/-: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 67 reverse 96N (-8.362, 159.124) -/-: 1.5987211554602254e-14
    test 68 forward 99N (-12.515, 158.030) -/-: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 69 reverse 99N (-12.515, 158.030) -/-: 7.105427357601002e-15
    test 70 forward 102N (-16.633, 156.504) -/-: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 71 reverse 102N (-16.633, 156.504) -/-: 2.842170943040401e-14
    test 72 forward 105N (-20.706, 154.548) -/-: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 73 reverse 105N (-20.706, 154.548) -/-: 1.7763568394002505e-14
    test 74 forward 108N (-24.721, 152.169) -/-: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 75 reverse 108N (-24.721, 152.169) -/-: 7.105427357601002e-15
    test 76 forward 111N (-28.669, 149.373) -/-: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 77 reverse 111N (-28.669, 149.373) -/-: 7.105427357601002e-15
    test 78 forward 114N (-32.539, 146.167) -/-: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 79 reverse 114N (-32.539, 146.167) -/-: 7.105427357601002e-15
    test 80 forward 117N (-36.319, 142.561) -/-: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 81 reverse 117N (-36.319, 142.561) -/-: 7.105427357601002e-15
    test 82 forward 120N (-40.000, 138.564) -/-: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 83 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 84 forward 123N (-43.571, 134.187) -/-: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 85 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 86 forward 126N (-47.023, 129.443) -/-: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 87 reverse 126N (-47.023, 129.443) -/-: 2.842170943040401e-14
    test 88 forward 129N (-50.346, 124.343) -/-: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 89 reverse 129N (-50.346, 124.343) -/-: 1.4210854715202004e-14
    test 90 forward 132N (-53.530, 118.903) -/-: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 91 reverse 132N (-53.530, 118.903) -/-: 1.4210854715202004e-14
    test 92 forward 135N (-56.569, 113.137) -/-: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 93 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 94 forward 138N (-59.452, 107.061) -/-: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 95 reverse 138N (-59.452, 107.061) -/-: 1.4210854715202004e-14
    test 96 forward 141N (-62.172, 100.691) -/-: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 97 reverse 141N (-62.172, 100.691) -/-: 0.0
    test 98 forward 144N (-64.721, 94.046) -/-: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 99 reverse 144N (-64.721, 94.046) -/-: 0.0
    test 100 forward 147N (-67.094, 87.142) -/-: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 101 reverse 147N (-67.094, 87.142) -/-: 0.0
    test 102 forward 150N (-69.282, 80.000) -/-: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 103 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 104 forward 153N (-71.281, 72.638) -/-: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 105 reverse 153N (-71.281, 72.638) -/-: 1.4210854715202004e-14
    test 106 forward 156N (-73.084, 65.078) -/-: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 107 reverse 156N (-73.084, 65.078) -/-: 1.4210854715202004e-14
    test 108 forward 159N (-74.686, 57.339) -/-: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 109 reverse 159N (-74.686, 57.339) -/-: 1.4210854715202004e-14
    test 110 forward 162N (-76.085, 49.443) -/-: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 111 reverse 162N (-76.085, 49.443) -/-: 3.552713678800501e-14
    test 112 forward 165N (-77.274, 41.411) -/-: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 113 reverse 165N (-77.274, 41.411) -/-: 0.0
    test 114 forward 168N (-78.252, 33.266) -/-: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 115 reverse 168N (-78.252, 33.266) -/-: 2.5618982671915014e-14
    test 116 forward 171N (-79.015, 25.030) -/-: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 117 reverse 171N (-79.015, 25.030) -/-: 2.842170943040401e-14
    test 118 forward 174N (-79.562, 16.725) -/-: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 119 reverse 174N (-79.562, 16.725) -/-: 1.7763568394002505e-14
    test 120 forward 177N (-79.890, 8.374) -/-: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 121 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 122 forward 180N (-80.000, 0.000) -/-: 0.0, -8881585.815988, 0.0, 0.9996
    test 123 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 124 forward 183N (-79.890, -8.374) -/-: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 125 reverse 183N (-79.890, -8.374) -/-: 1.7763568394002505e-15
    test 126 forward 186N (-79.562, -16.725) -/-: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 127 reverse 186N (-79.562, -16.725) -/-: 1.5888218580782548e-14
    test 128 forward 189N (-79.015, -25.030) -/-: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 129 reverse 189N (-79.015, -25.030) -/-: 2.1316282072803006e-14
    test 130 forward 192N (-78.252, -33.266) -/-: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 131 reverse 192N (-78.252, -33.266) -/-: 5.1728291973635394e-14
    test 132 forward 195N (-77.274, -41.411) -/-: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 133 reverse 195N (-77.274, -41.411) -/-: 0.0
    test 134 forward 198N (-76.085, -49.443) -/-: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 135 reverse 198N (-76.085, -49.443) -/-: 3.8263897345803626e-14
    test 136 forward 201N (-74.686, -57.339) -/-: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 137 reverse 201N (-74.686, -57.339) -/-: 5.859285502108464e-14
    test 138 forward 204N (-73.084, -65.078) -/-: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 139 reverse 204N (-73.084, -65.078) -/-: 1.4210854715202004e-14
    test 140 forward 207N (-71.281, -72.638) -/-: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 141 reverse 207N (-71.281, -72.638) -/-: 1.4210854715202004e-14
    test 142 forward 210N (-69.282, -80.000) -/-: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 143 reverse 210N (-69.282, -80.000) -/-: 1.4210854715202004e-14
    test 144 forward 213N (-67.094, -87.142) -/-: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 145 reverse 213N (-67.094, -87.142) -/-: 0.0
    test 146 forward 216N (-64.721, -94.046) -/-: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 147 reverse 216N (-64.721, -94.046) -/-: 0.0
    test 148 forward 219N (-62.172, -100.691) -/-: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 149 reverse 219N (-62.172, -100.691) -/-: 0.0
    test 150 forward 222N (-59.452, -107.061) -/-: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 151 reverse 222N (-59.452, -107.061) -/-: 1.4210854715202004e-14
    test 152 forward 225N (-56.569, -113.137) -/-: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 153 reverse 225N (-56.569, -113.137) -/-: 1.5888218580782548e-14
    test 154 forward 228N (-53.530, -118.903) -/-: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 155 reverse 228N (-53.530, -118.903) -/-: 1.4210854715202004e-14
    test 156 forward 231N (-50.346, -124.343) -/-: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 157 reverse 231N (-50.346, -124.343) -/-: 1.4210854715202004e-14
    test 158 forward 234N (-47.023, -129.443) -/-: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 159 reverse 234N (-47.023, -129.443) -/-: 2.842170943040401e-14
    test 160 forward 237N (-43.571, -134.187) -/-: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 161 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 162 forward 240N (-40.000, -138.564) -/-: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 163 reverse 240N (-40.000, -138.564) -/-: 0.0
    test 164 forward 243N (-36.319, -142.561) -/-: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 165 reverse 243N (-36.319, -142.561) -/-: 7.105427357601002e-15
    test 166 forward 246N (-32.539, -146.167) -/-: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 167 reverse 246N (-32.539, -146.167) -/-: 7.105427357601002e-15
    test 168 forward 249N (-28.669, -149.373) -/-: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 169 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 170 forward 252N (-24.721, -152.169) -/-: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 171 reverse 252N (-24.721, -152.169) -/-: 1.0658141036401503e-14
    test 172 forward 255N (-20.706, -154.548) -/-: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 173 reverse 255N (-20.706, -154.548) -/-: 1.7763568394002505e-14
    test 174 forward 258N (-16.633, -156.504) -/-: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 175 reverse 258N (-16.633, -156.504) -/-: 1.7763568394002505e-14
    test 176 forward 261N (-12.515, -158.030) -/-: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 177 reverse 261N (-12.515, -158.030) -/-: 1.2434497875801753e-14
    test 178 forward 264N (-8.362, -159.124) -/-: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 179 reverse 264N (-8.362, -159.124) -/-: 1.7763568394002505e-14
    test 180 forward 267N (-4.187, -159.781) -/-: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 181 reverse 267N (-4.187, -159.781) -/-: 8.881784197001252e-15
    test 182 forward 270N (0.000, -160.000) -/-: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 183 reverse 270N (0.000, -160.000) -/-: 2.402002211154445e-14
    test 184 forward 273N (4.187, -159.781) -/-: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 185 reverse 273N (4.187, -159.781) -/-: 6.217248937900877e-15
    test 186 forward 276N (8.362, -159.124) -/-: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 187 reverse 276N (8.362, -159.124) -/-: 1.5987211554602254e-14
    test 188 forward 279N (12.515, -158.030) -/-: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 189 reverse 279N (12.515, -158.030) -/-: 7.105427357601002e-15
    test 190 forward 282N (16.633, -156.504) -/-: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 191 reverse 282N (16.633, -156.504) -/-: 2.842170943040401e-14
    test 192 forward 285N (20.706, -154.548) -/-: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 193 reverse 285N (20.706, -154.548) -/-: 1.7763568394002505e-14
    test 194 forward 288N (24.721, -152.169) -/-: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 195 reverse 288N (24.721, -152.169) -/-: 7.105427357601002e-15
    test 196 forward 291N (28.669, -149.373) -/-: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 197 reverse 291N (28.669, -149.373) -/-: 7.105427357601002e-15
    test 198 forward 294N (32.539, -146.167) -/-: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 199 reverse 294N (32.539, -146.167) -/-: 7.105427357601002e-15
    test 200 forward 297N (36.319, -142.561) -/-: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 201 reverse 297N (36.319, -142.561) -/-: 7.105427357601002e-15
    test 202 forward 300N (40.000, -138.564) -/-: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 203 reverse 300N (40.000, -138.564) -/-: 0.0
    test 204 forward 303N (43.571, -134.187) -/-: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 205 reverse 303N (43.571, -134.187) -/-: 0.0
    test 206 forward 306N (47.023, -129.443) -/-: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 207 reverse 306N (47.023, -129.443) -/-: 2.842170943040401e-14
    test 208 forward 309N (50.346, -124.343) -/-: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 209 reverse 309N (50.346, -124.343) -/-: 1.4210854715202004e-14
    test 210 forward 312N (53.530, -118.903) -/-: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 211 reverse 312N (53.530, -118.903) -/-: 1.4210854715202004e-14
    test 212 forward 315N (56.569, -113.137) -/-: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 213 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 214 forward 318N (59.452, -107.061) -/-: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 215 reverse 318N (59.452, -107.061) -/-: 1.4210854715202004e-14
    test 216 forward 321N (62.172, -100.691) -/-: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 217 reverse 321N (62.172, -100.691) -/-: 0.0
    test 218 forward 324N (64.721, -94.046) -/-: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 219 reverse 324N (64.721, -94.046) -/-: 0.0
    test 220 forward 327N (67.094, -87.142) -/-: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 221 reverse 327N (67.094, -87.142) -/-: 0.0
    test 222 forward 330N (69.282, -80.000) -/-: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 223 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 224 forward 333N (71.281, -72.638) -/-: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 225 reverse 333N (71.281, -72.638) -/-: 1.4210854715202004e-14
    test 226 forward 336N (73.084, -65.078) -/-: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 227 reverse 336N (73.084, -65.078) -/-: 1.4210854715202004e-14
    test 228 forward 339N (74.686, -57.339) -/-: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 229 reverse 339N (74.686, -57.339) -/-: 1.4210854715202004e-14
    test 230 forward 342N (76.085, -49.443) -/-: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 231 reverse 342N (76.085, -49.443) -/-: 3.552713678800501e-14
    test 232 forward 345N (77.274, -41.411) -/-: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 233 reverse 345N (77.274, -41.411) -/-: 0.0
    test 234 forward 348N (78.252, -33.266) -/-: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 235 reverse 348N (78.252, -33.266) -/-: 2.5618982671915014e-14
    test 236 forward 351N (79.015, -25.030) -/-: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 237 reverse 351N (79.015, -25.030) -/-: 2.842170943040401e-14
    test 238 forward 354N (79.562, -16.725) -/-: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 239 reverse 354N (79.562, -16.725) -/-: 1.7763568394002505e-14
    test 240 forward 357N (79.890, -8.374) -/-: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 241 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 242 forward 360N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 243 reverse 360N (80.000, 0.000) -/-: 0.0
    test 244 max: 5.859285502108464e-14  FAILED, KNOWN, expected 6e-14

    test 245 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 246 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    test 247 _TM: KTransverseMercator(TMorder=4, ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 248 forward 0N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 249 reverse 0N (80.000, 0.000) -/-: 0.0
    test 250 forward 3N (79.890, 8.374) -/-: 162830.781916, 8891598.152508, 8.245541, 0.999927
    test 251 reverse 3N (79.890, 8.374) -/-: 3.552713678800501e-15
    test 252 forward 6N (79.562, 16.725) -/-: 332334.438121, 8891401.702739, 16.462875, 1.000961
    test 253 reverse 6N (79.562, 16.725) -/-: 3.552713678800501e-15
    test 254 forward 9N (79.015, 25.030) -/-: 514536.969405, 8894816.626946, 24.625748, 1.002864
    test 255 reverse 9N (79.015, 25.030) -/-: 3.552713678800501e-15
    test 256 forward 12N (78.252, 33.266) -/-: 714245.109628, 8907114.580812, 32.711919, 1.005893
    test 257 reverse 12N (78.252, 33.266) -/-: 1.4210854715202004e-14
    test 258 forward 15N (77.274, 41.411) -/-: 934605.427053, 8935050.398758, 40.705275, 1.010384
    test 259 reverse 15N (77.274, 41.411) -/-: 2.1316282072803006e-14
    test 260 forward 18N (76.085, 49.443) -/-: 1176821.393989, 8986356.098856, 48.597784, 1.016715
    test 261 reverse 18N (76.085, 49.443) -/-: 7.105427357601002e-15
    test 262 forward 21N (74.686, 57.339) -/-: 1440020.023752, 9069222.197918, 56.390849, 1.025263
    test 263 reverse 21N (74.686, 57.339) -/-: 1.4210854715202004e-14
    test 264 forward 24N (73.084, 65.078) -/-: 1721232.03303, 9191807.409386, 64.095597, 1.036332
    test 265 reverse 24N (73.084, 65.078) -/-: 4.4938668397781776e-14
    test 266 forward 27N (71.281, 72.638) -/-: 2015439.94304, 9361783.139474, 71.731644, 1.050076
    test 267 reverse 27N (71.281, 72.638) -/-: 0.0
    test 268 forward 30N (69.282, 80.000) -/-: 2315663.380439, 9585883.63353, 79.324018, 1.066413
    test 269 reverse 30N (69.282, 80.000) -/-: 0.0
    test 270 forward 33N (67.094, 87.142) -/-: 2613089.50746, 9869411.258858, 86.898056, 1.084934
    test 271 reverse 33N (67.094, 87.142) -/-: 1.4210854715202004e-14
    test 272 forward 36N (64.721, 94.046) -/-: 2897310.302591, 10215654.794479, 94.472414, 1.104843
    test 273 reverse 36N (64.721, 94.046) -/-: 4.4938668397781776e-14
    test 274 forward 39N (62.172, 100.691) -/-: 3156777.9732, 10625229.653451, 102.050793, 1.12494
    test 275 reverse 39N (62.172, 100.691) -/-: 7.105427357601002e-15
    test 276 forward 42N (59.452, 107.061) -/-: 3379601.994821, 11095444.501021, 109.613799, 1.143688
    test 277 reverse 42N (59.452, 107.061) -/-: 2.0097183471152322e-14
    test 278 forward 45N (56.569, 113.137) -/-: 3554744.82183, 11619912.294696, 117.113212, 1.159405
    test 279 reverse 45N (56.569, 113.137) -/-: 0.0
    test 280 forward 48N (53.530, 118.903) -/-: 3673507.549162, 12188686.186502, 124.471401, 1.170561
    test 281 reverse 48N (53.530, 118.903) -/-: 2.1316282072803006e-14
    test 282 forward 51N (50.346, 124.343) -/-: 3730980.59573, 12789121.454112, 131.587794, 1.176106
    test 283 reverse 51N (50.346, 124.343) -/-: 1.5888218580782548e-14
    test 284 forward 54N (47.023, 129.443) -/-: 3727003.760242, 13407411.821957, 138.351947, 1.175719
    test 285 reverse 54N (47.023, 129.443) -/-: 0.0
    test 286 forward 57N (43.571, 134.187) -/-: 3666275.084648, 14030431.844036, 144.659906, 1.16987
    test 287 reverse 57N (43.571, 134.187) -/-: 0.0
    test 288 forward 60N (40.000, 138.564) -/-: 3557564.445775, 14647347.719581, 150.428973, 1.159665
    test 289 reverse 60N (40.000, 138.564) -/-: 7.105427357601002e-15
    test 290 forward 63N (36.319, 142.561) -/-: 3412334.48396, 15250567.642625, 155.606964, 1.146559
    test 291 reverse 63N (36.319, 142.561) -/-: 0.0
    test 292 forward 66N (32.539, 146.167) -/-: 3243229.892204, 15835907.12812, 160.174784, 1.132049
    test 293 reverse 66N (32.539, 146.167) -/-: 3.1776437161565096e-14
    test 294 forward 69N (28.669, 149.373) -/-: 3062811.744735, 16402134.803105, 164.143685, 1.117448
    test 295 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 296 forward 72N (24.721, 152.169) -/-: 2882703.816659, 16950195.447611, 167.549757, 1.103767
    test 297 reverse 72N (24.721, 152.169) -/-: 0.0
    test 298 forward 75N (20.706, 154.548) -/-: 2713130.658999, 17482381.525728, 170.447906, 1.091693
    test 299 reverse 75N (20.706, 154.548) -/-: 1.0658141036401503e-14
    test 300 forward 78N (16.633, 156.504) -/-: 2562732.651149, 18001625.534999, 172.906642, 1.081633
    test 301 reverse 78N (16.633, 156.504) -/-: 7.105427357601002e-15
    test 302 forward 81N (12.515, 158.030) -/-: 2438532.075646, 18510987.984533, 175.004113, 1.07378
    test 303 reverse 81N (12.515, 158.030) -/-: 3.552713678800501e-15
    test 304 forward 84N (8.362, 159.124) -/-: 2345956.628332, 19013350.872509, 176.82525, 1.068192
    test 305 reverse 84N (8.362, 159.124) -/-: 8.881784197001252e-15
    test 306 forward 87N (4.187, 159.781) -/-: 2288868.720832, 19511292.939628, 178.459673, 1.064859
    test 307 reverse 87N (4.187, 159.781) -/-: 1.9539925233402755e-14
    test 308 forward 90N (0.000, 160.000) -/-: 2269582.383311, -20007108.306493, -180.0, 1.063752
    test 309 reverse 90N (0.000, 160.000) -/-: 0.0
    test 310 forward 93N (-4.187, 159.781) -/-: 2288868.720832, -19511292.939628, -178.459673, 1.064859
    test 311 reverse 93N (-4.187, 159.781) -/-: 3.019806626980426e-14
    test 312 forward 96N (-8.362, 159.124) -/-: 2345956.628332, -19013350.872509, -176.82525, 1.068192
    test 313 reverse 96N (-8.362, 159.124) -/-: 1.0658141036401503e-14
    test 314 forward 99N (-12.515, 158.030) -/-: 2438532.075646, -18510987.984533, -175.004113, 1.07378
    test 315 reverse 99N (-12.515, 158.030) -/-: 8.881784197001252e-15
    test 316 forward 102N (-16.633, 156.504) -/-: 2562732.651149, -18001625.534999, -172.906642, 1.081633
    test 317 reverse 102N (-16.633, 156.504) -/-: 3.552713678800501e-15
    test 318 forward 105N (-20.706, 154.548) -/-: 2713130.658999, -17482381.525728, -170.447906, 1.091693
    test 319 reverse 105N (-20.706, 154.548) -/-: 1.0658141036401503e-14
    test 320 forward 108N (-24.721, 152.169) -/-: 2882703.816659, -16950195.447611, -167.549757, 1.103767
    test 321 reverse 108N (-24.721, 152.169) -/-: 3.552713678800501e-15
    test 322 forward 111N (-28.669, 149.373) -/-: 3062811.744735, -16402134.803105, -164.143685, 1.117448
    test 323 reverse 111N (-28.669, 149.373) -/-: 1.0658141036401503e-14
    test 324 forward 114N (-32.539, 146.167) -/-: 3243229.892204, -15835907.12812, -160.174784, 1.132049
    test 325 reverse 114N (-32.539, 146.167) -/-: 3.1776437161565096e-14
    test 326 forward 117N (-36.319, 142.561) -/-: 3412334.48396, -15250567.642625, -155.606964, 1.146559
    test 327 reverse 117N (-36.319, 142.561) -/-: 0.0
    test 328 forward 120N (-40.000, 138.564) -/-: 3557564.445775, -14647347.719581, -150.428973, 1.159665
    test 329 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 330 forward 123N (-43.571, 134.187) -/-: 3666275.084648, -14030431.844036, -144.659906, 1.16987
    test 331 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 332 forward 126N (-47.023, 129.443) -/-: 3727003.760242, -13407411.821957, -138.351947, 1.175719
    test 333 reverse 126N (-47.023, 129.443) -/-: 0.0
    test 334 forward 129N (-50.346, 124.343) -/-: 3730980.59573, -12789121.454112, -131.587794, 1.176106
    test 335 reverse 129N (-50.346, 124.343) -/-: 1.5888218580782548e-14
    test 336 forward 132N (-53.530, 118.903) -/-: 3673507.549162, -12188686.186502, -124.471401, 1.170561
    test 337 reverse 132N (-53.530, 118.903) -/-: 2.1316282072803006e-14
    test 338 forward 135N (-56.569, 113.137) -/-: 3554744.82183, -11619912.294696, -117.113212, 1.159405
    test 339 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 340 forward 138N (-59.452, 107.061) -/-: 3379601.994821, -11095444.501021, -109.613799, 1.143688
    test 341 reverse 138N (-59.452, 107.061) -/-: 2.0097183471152322e-14
    test 342 forward 141N (-62.172, 100.691) -/-: 3156777.9732, -10625229.653451, -102.050793, 1.12494
    test 343 reverse 141N (-62.172, 100.691) -/-: 7.105427357601002e-15
    test 344 forward 144N (-64.721, 94.046) -/-: 2897310.302591, -10215654.794479, -94.472414, 1.104843
    test 345 reverse 144N (-64.721, 94.046) -/-: 4.4938668397781776e-14
    test 346 forward 147N (-67.094, 87.142) -/-: 2613089.50746, -9869411.258858, -86.898056, 1.084934
    test 347 reverse 147N (-67.094, 87.142) -/-: 1.4210854715202004e-14
    test 348 forward 150N (-69.282, 80.000) -/-: 2315663.380439, -9585883.63353, -79.324018, 1.066413
    test 349 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 350 forward 153N (-71.281, 72.638) -/-: 2015439.94304, -9361783.139474, -71.731644, 1.050076
    test 351 reverse 153N (-71.281, 72.638) -/-: 0.0
    test 352 forward 156N (-73.084, 65.078) -/-: 1721232.03303, -9191807.409386, -64.095597, 1.036332
    test 353 reverse 156N (-73.084, 65.078) -/-: 4.4938668397781776e-14
    test 354 forward 159N (-74.686, 57.339) -/-: 1440020.023752, -9069222.197918, -56.390849, 1.025263
    test 355 reverse 159N (-74.686, 57.339) -/-: 1.5888218580782548e-14
    test 356 forward 162N (-76.085, 49.443) -/-: 1176821.393989, -8986356.098856, -48.597784, 1.016715
    test 357 reverse 162N (-76.085, 49.443) -/-: 7.105427357601002e-15
    test 358 forward 165N (-77.274, 41.411) -/-: 934605.427053, -8935050.398758, -40.705275, 1.010384
    test 359 reverse 165N (-77.274, 41.411) -/-: 2.1316282072803006e-14
    test 360 forward 168N (-78.252, 33.266) -/-: 714245.109628, -8907114.580812, -32.711919, 1.005893
    test 361 reverse 168N (-78.252, 33.266) -/-: 1.4210854715202004e-14
    test 362 forward 171N (-79.015, 25.030) -/-: 514536.969405, -8894816.626946, -24.625748, 1.002864
    test 363 reverse 171N (-79.015, 25.030) -/-: 3.552713678800501e-15
    test 364 forward 174N (-79.562, 16.725) -/-: 332334.438121, -8891401.702739, -16.462875, 1.000961
    test 365 reverse 174N (-79.562, 16.725) -/-: 3.552713678800501e-15
    test 366 forward 177N (-79.890, 8.374) -/-: 162830.781916, -8891598.152508, -8.245541, 0.999927
    test 367 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 368 forward 180N (-80.000, 0.000) -/-: 0.0, -8892048.136219, 0.0, 0.9996
    test 369 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 370 forward 183N (-79.890, -8.374) -/-: -162830.781916, -8891598.152508, 8.245541, 0.999927
    test 371 reverse 183N (-79.890, -8.374) -/-: 3.552713678800501e-15
    test 372 forward 186N (-79.562, -16.725) -/-: -332334.438121, -8891401.702739, 16.462875, 1.000961
    test 373 reverse 186N (-79.562, -16.725) -/-: 3.552713678800501e-15
    test 374 forward 189N (-79.015, -25.030) -/-: -514536.969405, -8894816.626946, 24.625748, 1.002864
    test 375 reverse 189N (-79.015, -25.030) -/-: 3.552713678800501e-15
    test 376 forward 192N (-78.252, -33.266) -/-: -714245.109628, -8907114.580812, 32.711919, 1.005893
    test 377 reverse 192N (-78.252, -33.266) -/-: 1.4210854715202004e-14
    test 378 forward 195N (-77.274, -41.411) -/-: -934605.427053, -8935050.398758, 40.705275, 1.010384
    test 379 reverse 195N (-77.274, -41.411) -/-: 2.1316282072803006e-14
    test 380 forward 198N (-76.085, -49.443) -/-: -1176821.393989, -8986356.098856, 48.597784, 1.016715
    test 381 reverse 198N (-76.085, -49.443) -/-: 7.105427357601002e-15
    test 382 forward 201N (-74.686, -57.339) -/-: -1440020.023752, -9069222.197918, 56.390849, 1.025263
    test 383 reverse 201N (-74.686, -57.339) -/-: 1.4210854715202004e-14
    test 384 forward 204N (-73.084, -65.078) -/-: -1721232.03303, -9191807.409386, 64.095597, 1.036332
    test 385 reverse 204N (-73.084, -65.078) -/-: 4.4938668397781776e-14
    test 386 forward 207N (-71.281, -72.638) -/-: -2015439.94304, -9361783.139474, 71.731644, 1.050076
    test 387 reverse 207N (-71.281, -72.638) -/-: 0.0
    test 388 forward 210N (-69.282, -80.000) -/-: -2315663.380439, -9585883.63353, 79.324018, 1.066413
    test 389 reverse 210N (-69.282, -80.000) -/-: 0.0
    test 390 forward 213N (-67.094, -87.142) -/-: -2613089.50746, -9869411.258858, 86.898056, 1.084934
    test 391 reverse 213N (-67.094, -87.142) -/-: 1.4210854715202004e-14
    test 392 forward 216N (-64.721, -94.046) -/-: -2897310.302591, -10215654.794479, 94.472414, 1.104843
    test 393 reverse 216N (-64.721, -94.046) -/-: 4.4938668397781776e-14
    test 394 forward 219N (-62.172, -100.691) -/-: -3156777.9732, -10625229.653451, 102.050793, 1.12494
    test 395 reverse 219N (-62.172, -100.691) -/-: 7.105427357601002e-15
    test 396 forward 222N (-59.452, -107.061) -/-: -3379601.994821, -11095444.501021, 109.613799, 1.143688
    test 397 reverse 222N (-59.452, -107.061) -/-: 2.0097183471152322e-14
    test 398 forward 225N (-56.569, -113.137) -/-: -3554744.82183, -11619912.294696, 117.113212, 1.159405
    test 399 reverse 225N (-56.569, -113.137) -/-: 0.0
    test 400 forward 228N (-53.530, -118.903) -/-: -3673507.549162, -12188686.186502, 124.471401, 1.170561
    test 401 reverse 228N (-53.530, -118.903) -/-: 2.1316282072803006e-14
    test 402 forward 231N (-50.346, -124.343) -/-: -3730980.59573, -12789121.454112, 131.587794, 1.176106
    test 403 reverse 231N (-50.346, -124.343) -/-: 1.5888218580782548e-14
    test 404 forward 234N (-47.023, -129.443) -/-: -3727003.760242, -13407411.821957, 138.351947, 1.175719
    test 405 reverse 234N (-47.023, -129.443) -/-: 0.0
    test 406 forward 237N (-43.571, -134.187) -/-: -3666275.084648, -14030431.844036, 144.659906, 1.16987
    test 407 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 408 forward 240N (-40.000, -138.564) -/-: -3557564.445775, -14647347.719581, 150.428973, 1.159665
    test 409 reverse 240N (-40.000, -138.564) -/-: 7.105427357601002e-15
    test 410 forward 243N (-36.319, -142.561) -/-: -3412334.48396, -15250567.642625, 155.606964, 1.146559
    test 411 reverse 243N (-36.319, -142.561) -/-: 0.0
    test 412 forward 246N (-32.539, -146.167) -/-: -3243229.892204, -15835907.12812, 160.174784, 1.132049
    test 413 reverse 246N (-32.539, -146.167) -/-: 3.1776437161565096e-14
    test 414 forward 249N (-28.669, -149.373) -/-: -3062811.744735, -16402134.803105, 164.143685, 1.117448
    test 415 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 416 forward 252N (-24.721, -152.169) -/-: -2882703.816659, -16950195.447611, 167.549757, 1.103767
    test 417 reverse 252N (-24.721, -152.169) -/-: 0.0
    test 418 forward 255N (-20.706, -154.548) -/-: -2713130.658999, -17482381.525728, 170.447906, 1.091693
    test 419 reverse 255N (-20.706, -154.548) -/-: 1.0658141036401503e-14
    test 420 forward 258N (-16.633, -156.504) -/-: -2562732.651149, -18001625.534999, 172.906642, 1.081633
    test 421 reverse 258N (-16.633, -156.504) -/-: 7.105427357601002e-15
    test 422 forward 261N (-12.515, -158.030) -/-: -2438532.075646, -18510987.984533, 175.004113, 1.07378
    test 423 reverse 261N (-12.515, -158.030) -/-: 3.552713678800501e-15
    test 424 forward 264N (-8.362, -159.124) -/-: -2345956.628332, -19013350.872509, 176.82525, 1.068192
    test 425 reverse 264N (-8.362, -159.124) -/-: 8.881784197001252e-15
    test 426 forward 267N (-4.187, -159.781) -/-: -2288868.720832, -19511292.939628, 178.459673, 1.064859
    test 427 reverse 267N (-4.187, -159.781) -/-: 1.9539925233402755e-14
    test 428 forward 270N (0.000, -160.000) -/-: -2269582.383311, -20007108.306493, 180.0, 1.063752
    test 429 reverse 270N (0.000, -160.000) -/-: 0.0
    test 430 forward 273N (4.187, -159.781) -/-: -2288868.720832, 19511292.939628, -178.459673, 1.064859
    test 431 reverse 273N (4.187, -159.781) -/-: 3.019806626980426e-14
    test 432 forward 276N (8.362, -159.124) -/-: -2345956.628332, 19013350.872509, -176.82525, 1.068192
    test 433 reverse 276N (8.362, -159.124) -/-: 1.0658141036401503e-14
    test 434 forward 279N (12.515, -158.030) -/-: -2438532.075646, 18510987.984533, -175.004113, 1.07378
    test 435 reverse 279N (12.515, -158.030) -/-: 8.881784197001252e-15
    test 436 forward 282N (16.633, -156.504) -/-: -2562732.651149, 18001625.534999, -172.906642, 1.081633
    test 437 reverse 282N (16.633, -156.504) -/-: 3.552713678800501e-15
    test 438 forward 285N (20.706, -154.548) -/-: -2713130.658999, 17482381.525728, -170.447906, 1.091693
    test 439 reverse 285N (20.706, -154.548) -/-: 1.0658141036401503e-14
    test 440 forward 288N (24.721, -152.169) -/-: -2882703.816659, 16950195.447611, -167.549757, 1.103767
    test 441 reverse 288N (24.721, -152.169) -/-: 3.552713678800501e-15
    test 442 forward 291N (28.669, -149.373) -/-: -3062811.744735, 16402134.803105, -164.143685, 1.117448
    test 443 reverse 291N (28.669, -149.373) -/-: 1.0658141036401503e-14
    test 444 forward 294N (32.539, -146.167) -/-: -3243229.892204, 15835907.12812, -160.174784, 1.132049
    test 445 reverse 294N (32.539, -146.167) -/-: 3.1776437161565096e-14
    test 446 forward 297N (36.319, -142.561) -/-: -3412334.48396, 15250567.642625, -155.606964, 1.146559
    test 447 reverse 297N (36.319, -142.561) -/-: 0.0
    test 448 forward 300N (40.000, -138.564) -/-: -3557564.445775, 14647347.719581, -150.428973, 1.159665
    test 449 reverse 300N (40.000, -138.564) -/-: 0.0
    test 450 forward 303N (43.571, -134.187) -/-: -3666275.084648, 14030431.844036, -144.659906, 1.16987
    test 451 reverse 303N (43.571, -134.187) -/-: 0.0
    test 452 forward 306N (47.023, -129.443) -/-: -3727003.760242, 13407411.821957, -138.351947, 1.175719
    test 453 reverse 306N (47.023, -129.443) -/-: 0.0
    test 454 forward 309N (50.346, -124.343) -/-: -3730980.59573, 12789121.454112, -131.587794, 1.176106
    test 455 reverse 309N (50.346, -124.343) -/-: 1.5888218580782548e-14
    test 456 forward 312N (53.530, -118.903) -/-: -3673507.549162, 12188686.186502, -124.471401, 1.170561
    test 457 reverse 312N (53.530, -118.903) -/-: 2.1316282072803006e-14
    test 458 forward 315N (56.569, -113.137) -/-: -3554744.82183, 11619912.294696, -117.113212, 1.159405
    test 459 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 460 forward 318N (59.452, -107.061) -/-: -3379601.994821, 11095444.501021, -109.613799, 1.143688
    test 461 reverse 318N (59.452, -107.061) -/-: 2.0097183471152322e-14
    test 462 forward 321N (62.172, -100.691) -/-: -3156777.9732, 10625229.653451, -102.050793, 1.12494
    test 463 reverse 321N (62.172, -100.691) -/-: 7.105427357601002e-15
    test 464 forward 324N (64.721, -94.046) -/-: -2897310.302591, 10215654.794479, -94.472414, 1.104843
    test 465 reverse 324N (64.721, -94.046) -/-: 4.4938668397781776e-14
    test 466 forward 327N (67.094, -87.142) -/-: -2613089.50746, 9869411.258858, -86.898056, 1.084934
    test 467 reverse 327N (67.094, -87.142) -/-: 1.4210854715202004e-14
    test 468 forward 330N (69.282, -80.000) -/-: -2315663.380439, 9585883.63353, -79.324018, 1.066413
    test 469 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 470 forward 333N (71.281, -72.638) -/-: -2015439.94304, 9361783.139474, -71.731644, 1.050076
    test 471 reverse 333N (71.281, -72.638) -/-: 0.0
    test 472 forward 336N (73.084, -65.078) -/-: -1721232.03303, 9191807.409386, -64.095597, 1.036332
    test 473 reverse 336N (73.084, -65.078) -/-: 4.4938668397781776e-14
    test 474 forward 339N (74.686, -57.339) -/-: -1440020.023752, 9069222.197918, -56.390849, 1.025263
    test 475 reverse 339N (74.686, -57.339) -/-: 1.5888218580782548e-14
    test 476 forward 342N (76.085, -49.443) -/-: -1176821.393989, 8986356.098856, -48.597784, 1.016715
    test 477 reverse 342N (76.085, -49.443) -/-: 7.105427357601002e-15
    test 478 forward 345N (77.274, -41.411) -/-: -934605.427053, 8935050.398758, -40.705275, 1.010384
    test 479 reverse 345N (77.274, -41.411) -/-: 2.1316282072803006e-14
    test 480 forward 348N (78.252, -33.266) -/-: -714245.109628, 8907114.580812, -32.711919, 1.005893
    test 481 reverse 348N (78.252, -33.266) -/-: 1.4210854715202004e-14
    test 482 forward 351N (79.015, -25.030) -/-: -514536.969405, 8894816.626946, -24.625748, 1.002864
    test 483 reverse 351N (79.015, -25.030) -/-: 3.552713678800501e-15
    test 484 forward 354N (79.562, -16.725) -/-: -332334.438121, 8891401.702739, -16.462875, 1.000961
    test 485 reverse 354N (79.562, -16.725) -/-: 3.552713678800501e-15
    test 486 forward 357N (79.890, -8.374) -/-: -162830.781916, 8891598.152508, -8.245541, 0.999927
    test 487 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 488 forward 360N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 489 reverse 360N (80.000, 0.000) -/-: 0.0
    test 490 max: 4.4938668397781776e-14  FAILED, KNOWN, expected 5e-14

    test 491 forward: 6196225.831883, 5458228.732328, 40.893395, 1.511253
    test 492 reverse: 30.172556, 60.208316, 41.279729, 1.511925

    test 493 _TM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 494 forward 0N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 495 reverse 0N (80.000, 0.000) 3/3: 0.0
    test 496 forward 3N (79.890, 8.374) 3/4: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 497 reverse 3N (79.890, 8.374) 3/3: 3.552713678800501e-15
    test 498 forward 6N (79.562, 16.725) 3/4: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 499 reverse 6N (79.562, 16.725) 3/3: 1.5888218580782548e-14
    test 500 forward 9N (79.015, 25.030) 3/4: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 501 reverse 9N (79.015, 25.030) 3/3: 2.0097183471152322e-14
    test 502 forward 12N (78.252, 33.266) 3/4: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 503 reverse 12N (78.252, 33.266) 3/3: 1.4210854715202004e-14
    test 504 forward 15N (77.274, 41.411) 3/4: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 505 reverse 15N (77.274, 41.411) 3/3: 4.4938668397781776e-14
    test 506 forward 18N (76.085, 49.443) 3/4: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 507 reverse 18N (76.085, 49.443) 3/3: 5.1728291973635394e-14
    test 508 forward 21N (74.686, 57.339) 3/4: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 509 reverse 21N (74.686, 57.339) 3/3: 2.0097183471152322e-14
    test 510 forward 24N (73.084, 65.078) 3/4: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 511 reverse 24N (73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 512 forward 27N (71.281, 72.638) 3/4: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 513 reverse 27N (71.281, 72.638) 3/3: 2.842170943040401e-14
    test 514 forward 30N (69.282, 80.000) 3/4: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 515 reverse 30N (69.282, 80.000) 3/4: 7.105427357601002e-14
    test 516 forward 33N (67.094, 87.142) 3/4: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 517 reverse 33N (67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 518 forward 36N (64.721, 94.046) 3/4: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 519 reverse 36N (64.721, 94.046) 3/4: 2.842170943040401e-14
    test 520 forward 39N (62.172, 100.691) 3/4: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 521 reverse 39N (62.172, 100.691) 3/4: 7.105427357601002e-15
    test 522 forward 42N (59.452, 107.061) 3/4: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 523 reverse 42N (59.452, 107.061) 3/4: 0.0
    test 524 forward 45N (56.569, 113.137) 3/4: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 525 reverse 45N (56.569, 113.137) 3/4: 1.5888218580782548e-14
    test 526 forward 48N (53.530, 118.903) 3/4: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 527 reverse 48N (53.530, 118.903) 3/4: 7.105427357601002e-15
    test 528 forward 51N (50.346, 124.343) 3/4: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 529 reverse 51N (50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 530 forward 54N (47.023, 129.443) 3/4: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 531 reverse 54N (47.023, 129.443) 3/4: 0.0
    test 532 forward 57N (43.571, 134.187) 3/4: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 533 reverse 57N (43.571, 134.187) 3/4: 7.105427357601002e-15
    test 534 forward 60N (40.000, 138.564) 3/4: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 535 reverse 60N (40.000, 138.564) 3/4: 2.929642751054232e-14
    test 536 forward 63N (36.319, 142.561) 3/4: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 537 reverse 63N (36.319, 142.561) 3/4: 1.4210854715202004e-14
    test 538 forward 66N (32.539, 146.167) 3/4: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 539 reverse 66N (32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 540 forward 69N (28.669, 149.373) 3/4: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 541 reverse 69N (28.669, 149.373) 3/4: 3.552713678800501e-15
    test 542 forward 72N (24.721, 152.169) 3/4: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 543 reverse 72N (24.721, 152.169) 3/4: 3.552713678800501e-15
    test 544 forward 75N (20.706, 154.548) 3/4: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 545 reverse 75N (20.706, 154.548) 3/4: 1.0658141036401503e-14
    test 546 forward 78N (16.633, 156.504) 3/4: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 547 reverse 78N (16.633, 156.504) 3/4: 3.552713678800501e-15
    test 548 forward 81N (12.515, 158.030) 3/4: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 549 reverse 81N (12.515, 158.030) 3/4: 5.329070518200751e-15
    test 550 forward 84N (8.362, 159.124) 3/4: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 551 reverse 84N (8.362, 159.124) 3/4: 8.881784197001252e-15
    test 552 forward 87N (4.187, 159.781) 3/4: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 553 reverse 87N (4.187, 159.781) 3/4: 9.769962616701378e-15
    test 554 forward 90N (0.000, 160.000) 3/4: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 555 reverse 90N (0.000, 160.000) 3/3: 0.0
    test 556 forward 93N (-4.187, 159.781) 3/4: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 557 reverse 93N (-4.187, 159.781) 3/4: 4.440892098500626e-15
    test 558 forward 96N (-8.362, 159.124) 3/4: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 559 reverse 96N (-8.362, 159.124) 3/4: 1.0658141036401503e-14
    test 560 forward 99N (-12.515, 158.030) 3/4: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 561 reverse 99N (-12.515, 158.030) 3/4: 1.4210854715202004e-14
    test 562 forward 102N (-16.633, 156.504) 3/4: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 563 reverse 102N (-16.633, 156.504) 3/4: 3.552713678800501e-15
    test 564 forward 105N (-20.706, 154.548) 3/4: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 565 reverse 105N (-20.706, 154.548) 3/4: 1.0658141036401503e-14
    test 566 forward 108N (-24.721, 152.169) 3/4: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 567 reverse 108N (-24.721, 152.169) 3/4: 1.7763568394002505e-14
    test 568 forward 111N (-28.669, 149.373) 3/4: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 569 reverse 111N (-28.669, 149.373) 3/4: 1.4210854715202004e-14
    test 570 forward 114N (-32.539, 146.167) 3/4: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 571 reverse 114N (-32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 572 forward 117N (-36.319, 142.561) 3/4: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 573 reverse 117N (-36.319, 142.561) 3/4: 1.4210854715202004e-14
    test 574 forward 120N (-40.000, 138.564) 3/4: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 575 reverse 120N (-40.000, 138.564) 3/4: 2.842170943040401e-14
    test 576 forward 123N (-43.571, 134.187) 3/4: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 577 reverse 123N (-43.571, 134.187) 3/4: 7.105427357601002e-15
    test 578 forward 126N (-47.023, 129.443) 3/4: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 579 reverse 126N (-47.023, 129.443) 3/4: 0.0
    test 580 forward 129N (-50.346, 124.343) 3/4: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 581 reverse 129N (-50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 582 forward 132N (-53.530, 118.903) 3/4: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 583 reverse 132N (-53.530, 118.903) 3/4: 7.105427357601002e-15
    test 584 forward 135N (-56.569, 113.137) 3/4: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 585 reverse 135N (-56.569, 113.137) 3/4: 3.552713678800501e-14
    test 586 forward 138N (-59.452, 107.061) 3/4: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 587 reverse 138N (-59.452, 107.061) 3/4: 0.0
    test 588 forward 141N (-62.172, 100.691) 3/4: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 589 reverse 141N (-62.172, 100.691) 3/4: 7.105427357601002e-15
    test 590 forward 144N (-64.721, 94.046) 3/4: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 591 reverse 144N (-64.721, 94.046) 3/4: 2.842170943040401e-14
    test 592 forward 147N (-67.094, 87.142) 3/4: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 593 reverse 147N (-67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 594 forward 150N (-69.282, 80.000) 3/4: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 595 reverse 150N (-69.282, 80.000) 3/4: 8.526512829121202e-14
    test 596 forward 153N (-71.281, 72.638) 3/4: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 597 reverse 153N (-71.281, 72.638) 3/3: 2.842170943040401e-14
    test 598 forward 156N (-73.084, 65.078) 3/4: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 599 reverse 156N (-73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 600 forward 159N (-74.686, 57.339) 3/4: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 601 reverse 159N (-74.686, 57.339) 3/3: 2.5618982671915014e-14
    test 602 forward 162N (-76.085, 49.443) 3/4: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 603 reverse 162N (-76.085, 49.443) 3/3: 4.4938668397781776e-14
    test 604 forward 165N (-77.274, 41.411) 3/4: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 605 reverse 165N (-77.274, 41.411) 3/3: 4.4938668397781776e-14
    test 606 forward 168N (-78.252, 33.266) 3/4: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 607 reverse 168N (-78.252, 33.266) 3/3: 7.105427357601002e-15
    test 608 forward 171N (-79.015, 25.030) 3/4: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 609 reverse 171N (-79.015, 25.030) 3/3: 1.4210854715202004e-14
    test 610 forward 174N (-79.562, 16.725) 3/4: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 611 reverse 174N (-79.562, 16.725) 3/3: 1.7763568394002505e-14
    test 612 forward 177N (-79.890, 8.374) 3/4: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 613 reverse 177N (-79.890, 8.374) 3/3: 1.7763568394002505e-15
    test 614 forward 180N (-80.000, 0.000) 3/3: 0.0, -8881585.815988, 0.0, 0.9996
    test 615 reverse 180N (-80.000, 0.000) 3/3: 0.0
    test 616 forward 183N (-79.890, -8.374) 3/4: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 617 reverse 183N (-79.890, -8.374) 3/3: 3.552713678800501e-15
    test 618 forward 186N (-79.562, -16.725) 3/4: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 619 reverse 186N (-79.562, -16.725) 3/3: 1.5888218580782548e-14
    test 620 forward 189N (-79.015, -25.030) 3/4: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 621 reverse 189N (-79.015, -25.030) 3/3: 2.0097183471152322e-14
    test 622 forward 192N (-78.252, -33.266) 3/4: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 623 reverse 192N (-78.252, -33.266) 3/3: 1.4210854715202004e-14
    test 624 forward 195N (-77.274, -41.411) 3/4: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 625 reverse 195N (-77.274, -41.411) 3/3: 4.4938668397781776e-14
    test 626 forward 198N (-76.085, -49.443) 3/4: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 627 reverse 198N (-76.085, -49.443) 3/3: 5.1728291973635394e-14
    test 628 forward 201N (-74.686, -57.339) 3/4: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 629 reverse 201N (-74.686, -57.339) 3/3: 2.0097183471152322e-14
    test 630 forward 204N (-73.084, -65.078) 3/4: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 631 reverse 204N (-73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 632 forward 207N (-71.281, -72.638) 3/4: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 633 reverse 207N (-71.281, -72.638) 3/3: 2.842170943040401e-14
    test 634 forward 210N (-69.282, -80.000) 3/4: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 635 reverse 210N (-69.282, -80.000) 3/4: 7.105427357601002e-14
    test 636 forward 213N (-67.094, -87.142) 3/4: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 637 reverse 213N (-67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 638 forward 216N (-64.721, -94.046) 3/4: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 639 reverse 216N (-64.721, -94.046) 3/4: 2.842170943040401e-14
    test 640 forward 219N (-62.172, -100.691) 3/4: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 641 reverse 219N (-62.172, -100.691) 3/4: 7.105427357601002e-15
    test 642 forward 222N (-59.452, -107.061) 3/4: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 643 reverse 222N (-59.452, -107.061) 3/4: 0.0
    test 644 forward 225N (-56.569, -113.137) 3/4: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 645 reverse 225N (-56.569, -113.137) 3/4: 1.5888218580782548e-14
    test 646 forward 228N (-53.530, -118.903) 3/4: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 647 reverse 228N (-53.530, -118.903) 3/4: 7.105427357601002e-15
    test 648 forward 231N (-50.346, -124.343) 3/4: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 649 reverse 231N (-50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 650 forward 234N (-47.023, -129.443) 3/4: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 651 reverse 234N (-47.023, -129.443) 3/4: 0.0
    test 652 forward 237N (-43.571, -134.187) 3/4: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 653 reverse 237N (-43.571, -134.187) 3/4: 7.105427357601002e-15
    test 654 forward 240N (-40.000, -138.564) 3/4: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 655 reverse 240N (-40.000, -138.564) 3/4: 2.929642751054232e-14
    test 656 forward 243N (-36.319, -142.561) 3/4: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 657 reverse 243N (-36.319, -142.561) 3/4: 1.4210854715202004e-14
    test 658 forward 246N (-32.539, -146.167) 3/4: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 659 reverse 246N (-32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 660 forward 249N (-28.669, -149.373) 3/4: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 661 reverse 249N (-28.669, -149.373) 3/4: 3.552713678800501e-15
    test 662 forward 252N (-24.721, -152.169) 3/4: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 663 reverse 252N (-24.721, -152.169) 3/4: 3.552713678800501e-15
    test 664 forward 255N (-20.706, -154.548) 3/4: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 665 reverse 255N (-20.706, -154.548) 3/4: 1.0658141036401503e-14
    test 666 forward 258N (-16.633, -156.504) 3/4: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 667 reverse 258N (-16.633, -156.504) 3/4: 3.552713678800501e-15
    test 668 forward 261N (-12.515, -158.030) 3/4: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 669 reverse 261N (-12.515, -158.030) 3/4: 5.329070518200751e-15
    test 670 forward 264N (-8.362, -159.124) 3/4: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 671 reverse 264N (-8.362, -159.124) 3/4: 8.881784197001252e-15
    test 672 forward 267N (-4.187, -159.781) 3/4: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 673 reverse 267N (-4.187, -159.781) 3/4: 9.769962616701378e-15
    test 674 forward 270N (0.000, -160.000) 3/4: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 675 reverse 270N (0.000, -160.000) 3/3: 0.0
    test 676 forward 273N (4.187, -159.781) 3/4: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 677 reverse 273N (4.187, -159.781) 3/4: 4.440892098500626e-15
    test 678 forward 276N (8.362, -159.124) 3/4: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 679 reverse 276N (8.362, -159.124) 3/4: 1.0658141036401503e-14
    test 680 forward 279N (12.515, -158.030) 3/4: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 681 reverse 279N (12.515, -158.030) 3/4: 1.4210854715202004e-14
    test 682 forward 282N (16.633, -156.504) 3/4: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 683 reverse 282N (16.633, -156.504) 3/4: 3.552713678800501e-15
    test 684 forward 285N (20.706, -154.548) 3/4: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 685 reverse 285N (20.706, -154.548) 3/4: 1.0658141036401503e-14
    test 686 forward 288N (24.721, -152.169) 3/4: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 687 reverse 288N (24.721, -152.169) 3/4: 1.7763568394002505e-14
    test 688 forward 291N (28.669, -149.373) 3/4: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 689 reverse 291N (28.669, -149.373) 3/4: 1.4210854715202004e-14
    test 690 forward 294N (32.539, -146.167) 3/4: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 691 reverse 294N (32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 692 forward 297N (36.319, -142.561) 3/4: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 693 reverse 297N (36.319, -142.561) 3/4: 1.4210854715202004e-14
    test 694 forward 300N (40.000, -138.564) 3/4: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 695 reverse 300N (40.000, -138.564) 3/4: 2.842170943040401e-14
    test 696 forward 303N (43.571, -134.187) 3/4: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 697 reverse 303N (43.571, -134.187) 3/4: 7.105427357601002e-15
    test 698 forward 306N (47.023, -129.443) 3/4: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 699 reverse 306N (47.023, -129.443) 3/4: 0.0
    test 700 forward 309N (50.346, -124.343) 3/4: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 701 reverse 309N (50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 702 forward 312N (53.530, -118.903) 3/4: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 703 reverse 312N (53.530, -118.903) 3/4: 7.105427357601002e-15
    test 704 forward 315N (56.569, -113.137) 3/4: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 705 reverse 315N (56.569, -113.137) 3/4: 3.552713678800501e-14
    test 706 forward 318N (59.452, -107.061) 3/4: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 707 reverse 318N (59.452, -107.061) 3/4: 0.0
    test 708 forward 321N (62.172, -100.691) 3/4: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 709 reverse 321N (62.172, -100.691) 3/4: 7.105427357601002e-15
    test 710 forward 324N (64.721, -94.046) 3/4: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 711 reverse 324N (64.721, -94.046) 3/4: 2.842170943040401e-14
    test 712 forward 327N (67.094, -87.142) 3/4: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 713 reverse 327N (67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 714 forward 330N (69.282, -80.000) 3/4: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 715 reverse 330N (69.282, -80.000) 3/4: 8.526512829121202e-14
    test 716 forward 333N (71.281, -72.638) 3/4: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 717 reverse 333N (71.281, -72.638) 3/3: 2.842170943040401e-14
    test 718 forward 336N (73.084, -65.078) 3/4: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 719 reverse 336N (73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 720 forward 339N (74.686, -57.339) 3/4: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 721 reverse 339N (74.686, -57.339) 3/3: 2.5618982671915014e-14
    test 722 forward 342N (76.085, -49.443) 3/4: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 723 reverse 342N (76.085, -49.443) 3/3: 4.4938668397781776e-14
    test 724 forward 345N (77.274, -41.411) 3/4: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 725 reverse 345N (77.274, -41.411) 3/3: 4.4938668397781776e-14
    test 726 forward 348N (78.252, -33.266) 3/4: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 727 reverse 348N (78.252, -33.266) 3/3: 7.105427357601002e-15
    test 728 forward 351N (79.015, -25.030) 3/4: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 729 reverse 351N (79.015, -25.030) 3/3: 1.4210854715202004e-14
    test 730 forward 354N (79.562, -16.725) 3/4: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 731 reverse 354N (79.562, -16.725) 3/3: 1.7763568394002505e-14
    test 732 forward 357N (79.890, -8.374) 3/4: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 733 reverse 357N (79.890, -8.374) 3/3: 1.7763568394002505e-15
    test 734 forward 360N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 735 reverse 360N (80.000, 0.000) 3/3: 0.0
    test 736 max: 8.526512829121202e-14  FAILED, KNOWN, expected 9e-14

    test 737 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 738 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    3 of 738 testKtm.py tests (0.4%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 594.942 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLatLon.py

    testing testLatLon.py 22.05.19

    testLatLon(pygeodesy.sphericalNvector, 22.07.07)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 isequalTo: False
    test 20 antipode1: 52.205°S, 179.881°W
    test 21 antipode2: True
    test 22 antipode3: 52.205°N, 000.119°E
    test 23 antipode4: True
    test 24 antipode5: 52.205°N, 000.119°E
    test 25 initialBearingTo: 156.1666
    test 26 initialBearingTo: 65.8921
    test 27 initialBearingTo: 0.0
    test 28 initialBearingTo: 180.0
    test 29 finalBearingTo: 157.8904
    test 30 finalBearingTo: 93.8581
    test 31 bearingTo2: 156.1666, 157.8904
    test 32 ispolar: True
    test 33 copy: True
    test 34 __eq__: True
    test 35 __ne__: False
    test 36 equirectangularTo: 404329.56
    test 37 distanceTo: 404279.720589
    test 38 distanceTo: 404279.720589
    test 39 distanceTo: 2145
    test 40 distanceTo: 18013602.92
    test 41 distanceTo: 20015114.35
    test 42 intermediateTo: 51.372084°N, 000.707337°E
    test 43 intermediateTo: True
    test 44 intermediateTo: 404279.721
    test 45 intermediateTo+5: 35.160975°N, 008.989542°E
    test 46 intermediateTo+5: 5.000
    test 47 intermediateTo-4: 64.911647°N, 013.726301°W
    test 48 intermediateTo-4: 4.000
    test 49 intermediateTo-h: 125.000
    test 50 intermediateChordTo: 51.372294°N, 000.707192°E
    test 51 intermediateChordTo: True
    test 52 intermediateChordTo-h: 125.000
    test 53 midpointTo: 50.536327°N, 001.274614°E
    test 54 destination: 51.513546°N, 000.098345°W
    test 55 destination: 51°30′49″N, 000°05′54″W
    test 56 destination: 34°37′N, 116°33′W
    test 57 destination: 34.613647°N, 116.55116°W
    test 58 destination: 0.604122N, 2.034201W
    test 59 destination: 31.96383509°N, 064.37329146°E
    test 60 alongTrackDistanceTo: can't multiply sequence by non-int of type 'float'  FAILED, KNOWN, expected incompatible ...
    test 61 alongTrackDistanceTo: 62331.58
    test 62 alongTrackDistanceTo: 99.588
    test 63 alongTrackDistanceTo: -7702.7
    test 64 alongTrackDistanceTo: 7587.6
    test 65 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 66 crossTrackDistanceTo: -307.55
    test 67 crossTrackDistanceTo: 7.4524
    test 68 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 69 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 70 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 71 chordTo: 124799.103
    test 72 cosineAndoyerLambertTo: 124801.098
    test 73 cosineAndoyerLambertTo: 124801.098
    test 74 cosineForsyheAndoyerLambertTo: 124801.098
    test 75 cosineForsyheAndoyerLambertTo: 124801.098
    test 76 cosineLawTo: 124801.098
    test 77 cosineLawTo: 124801.098
    test 78 equirectangularTo: 124804.754
    test 79 equirectangularTo: 124804.754
    test 80 euclideanTo: 130015.089
    test 81 euclideanTo: 130015.089
    test 82 flatLocalTo: 124804.754
    test 83 flatLocalTo: 124804.754
    test 84 flatPolarTo: 133663.257
    test 85 flatPolarTo: 133663.257
    test 86 hartzell: 53.3206°N, 001.7297°W
    test 87 hartzell: 53.3206°N, 001.7297°W
    test 88 height4: 0.0
    test 89 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 90 height4: 53°19′14.2″N, 001°43′46.9″W
    test 91 height4: 53°19′14.2″N, 001°43′46.9″W
    test 92 haversineTo: 124801.098
    test 93 haversineTo: 124801.098
    test 94 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 95 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 96 thomasTo: 124801.098
    test 97 thomasTo: 124801.098
    test 98 vincentysTo: 124801.098
    test 99 vincentysTo: 124801.098
    test 100 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 101 isclockwise: False
    test 102 isclockwise*: False
    test 103 isclockwise: True
    test 104 isclockwise*: True
    test 105 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 106 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 107 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 108 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 109 isconvex: False
    test 110 isconvex*: False
    test 111 isconvex: True
    test 112 isconvex*: True
    test 113 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 114 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 115 isenclosedBy1: True
    test 116 isenclosedBy1*: True
    test 117 isenclosedBy2: False
    test 118 isenclosedBy2*: False
    test 119 isenclosedBy3: False
    test 120 isenclosedBy3*: False
    test 121 isenclosedBy4: False
    test 122 isenclosedBy4*: False
    test 123 isenclosedBy5: False
    test 124 isenclosedBy5*: False
    test 125 isenclosedBy6: True
    test 126 isenclosedBy6*: True
    test 127 isenclosedBy7: True
    test 128 isenclosedBy7*: True
    test 129 isenclosedBy-CCW: True
    test 130 isenclosedBy-CW : True
    test 131 isenclosedBy-CCW: True
    test 132 initialBearingTo: 102.432182
    test 133 compassAngleTo: 100.017
    test 134 compassAngleTo: 105.599
    test 135 initialBearingTo: 288.715918
    test 136 compassAngleTo: 280.017
    test 137 compassAngleTo: 285.599
    test 138 equirectangularTo: 592.185
    test 139 distanceTo: 591.831
    test 140 compassAngleTo: 0.0
    test 141 compassAngleTo: 45.0
    test 142 compassAngleTo: 90.0
    test 143 compassAngleTo: 180.0
    test 144 compassAngleTo: 225.0
    test 145 compassAngleTo: 315.0
    test 146 compassAngleTo: 270.0
    test 147 compassAngleTo: 359.4
    test 148 latlon2: (53.0, 1.0)
    test 149 philam2: (0.93, 0.02)
    test 150 compassAngleTo: 31
    test 151 compassAngleTo: 45
    test 152 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 153 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 154 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 155 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 156 isequalTo: <class 'bool'>
    test 157 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 158 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 159 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 160 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 161 compassAngleTo: <class 'float'>
    test 162 cosineLawTo: <class 'float'>
    test 163 euclideanTo: <class 'float'>
    test 164 flatLocalTo: <class 'float'>
    test 165 flatPolarTo: <class 'float'>
    test 166 haversineTo: <class 'float'>
    test 167 hubenyTo: <class 'float'>
    test 168 vincentysTo: <class 'float'>
    test 169 toVector: (0.615661, 0.0, 0.788011)
    test 170 toVector3d: (0.61566, 0.0, 0.78801)
    test 171 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 172 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 173 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 174 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 175 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
    test 176 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)
    test 177 circum4 (pygeodesy.sphericalNvector) .radius: 3185505.323  FAILED, KNOWN, expected 3184256.748
    test 178 circum4 (pygeodesy.sphericalNvector) .center: 42.674561°N, 002.495395°E, -3185503.45m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 179 circum4 (pygeodesy.sphericalNvector) .rank: 3
    test 180 circum4 (pygeodesy.sphericalNvector) .residuals: ()
    test 181 circum4 (pygeodesy.sphericalNvector) .d1: 4886.695  FAILED, KNOWN, expected 57818.033
    test 182 circum4 (pygeodesy.sphericalNvector) .d2: 4886.695  FAILED, KNOWN, expected 57834.176
    test 183 circum4 (pygeodesy.sphericalNvector) .d3: 4886.695  FAILED, KNOWN, expected 57830.992
    test 184 circum4 (pygeodesy.sphericalNvector) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 185 circum4 (pygeodesy.sphericalNvector) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 186 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 187 circin6 (pygeodesy.sphericalNvector) .rB+rC: 1564564.352
    test 188 circin6 (pygeodesy.sphericalNvector) .rC+pA: 1110540.003
    test 189 circin6 (pygeodesy.sphericalNvector) .rA+rB: 1110540.003
    test 190 circin6 (pygeodesy.sphericalNvector) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 191 circin6 (pygeodesy.sphericalNvector) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 192 circin6 (pygeodesy.sphericalNvector) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 193 circin6 (pygeodesy.sphericalNvector) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 194 circin6 (pygeodesy.sphericalNvector) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 195 circin6 (pygeodesy.sphericalNvector) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 196 circin6 (pygeodesy.sphericalNvector) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 197 circin6 (pygeodesy.sphericalNvector) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 198 circin6 (pygeodesy.sphericalNvector) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    testLatLon(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 199 isEllipsoidal: False
    test 200 isSpherical: True
    test 201 lat/lonDMS: 52.20472°N, 000.14056°E
    test 202 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 203 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 204 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 205 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 206 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 207 isequalTo: True
    test 208 isequalTo: True
    test 209 latlon2: 52.20472, 0.14056
    test 210 latlon2: 52.2047, 0.1406
    test 211 latlon2: 52.205, 0.141
    test 212 latlon2: 52.2, 0.14
    test 213 latlon2: 52.2, 0.1
    test 214 latlon2: 52.0, 0.0
    test 215 chordTo: 12036677.26
    test 216 chordTo: 12036463.78
    test 217 isequalTo: False
    test 218 antipode1: 52.205°S, 179.881°W
    test 219 antipode2: True
    test 220 antipode3: 52.205°N, 000.119°E
    test 221 antipode4: True
    test 222 antipode5: 52.205°N, 000.119°E
    test 223 initialBearingTo: 156.1666
    test 224 initialBearingTo: 65.8921
    test 225 initialBearingTo: 0.0
    test 226 initialBearingTo: 180.0
    test 227 finalBearingTo: 157.8904
    test 228 finalBearingTo: 93.8581
    test 229 bearingTo2: 156.1666, 157.8904
    test 230 ispolar: True
    test 231 copy: True
    test 232 __eq__: True
    test 233 __ne__: False
    test 234 equirectangularTo: 404329.56
    test 235 distanceTo: 404279.720589
    test 236 distanceTo: 404279.720589
    test 237 distanceTo: 2145
    test 238 antipodal: False
    test 239 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 240 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 241 antipodal: False
    test 242 distanceTo dateline: 9491735
    test 243 distanceTo unrolled: 9491735
    test 244 distanceTo: 18013602.92
    test 245 distanceTo: 20015114.35
    test 246 intermediateTo: 51.372084°N, 000.707337°E
    test 247 intermediateTo: True
    test 248 intermediateTo: 404279.721
    test 249 intermediateTo+5: 35.160975°N, 008.989542°E
    test 250 intermediateTo+5: 5.000
    test 251 intermediateTo-4: 64.911647°N, 013.726301°W
    test 252 intermediateTo-4: 4.000
    test 253 intermediateTo-h: 125.000
    test 254 midpointTo: 50.536327°N, 001.274614°E
    test 255 destination: 51.513546°N, 000.098345°W
    test 256 destination: 51°30′49″N, 000°05′54″W
    test 257 destination: 34°37′N, 116°33′W
    test 258 destination: 34.613647°N, 116.55116°W
    test 259 destination: 0.604122N, 2.034201W
    test 260 destination: 31.96383509°N, 064.37329146°E
    test 261 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 262 alongTrackDistanceTo: 62331.58
    test 263 alongTrackDistanceTo: 99.588
    test 264 alongTrackDistanceTo: -7702.7
    test 265 alongTrackDistanceTo: 7587.6
    test 266 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 267 crossTrackDistanceTo: -307.55
    test 268 crossTrackDistanceTo: 7.4524
    test 269 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 270 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 271 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 272 chordTo: 124799.103
    test 273 cosineAndoyerLambertTo: 124801.098
    test 274 cosineAndoyerLambertTo: 124801.098
    test 275 cosineForsyheAndoyerLambertTo: 124801.098
    test 276 cosineForsyheAndoyerLambertTo: 124801.098
    test 277 cosineLawTo: 124801.098
    test 278 cosineLawTo: 124801.098
    test 279 equirectangularTo: 124804.754
    test 280 equirectangularTo: 124804.754
    test 281 euclideanTo: 130015.089
    test 282 euclideanTo: 130015.089
    test 283 flatLocalTo: 124804.754
    test 284 flatLocalTo: 124804.754
    test 285 flatPolarTo: 133663.257
    test 286 flatPolarTo: 133663.257
    test 287 hartzell: 53.3206°N, 001.7297°W
    test 288 hartzell: 53.3206°N, 001.7297°W
    test 289 height4: 0.0
    test 290 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 291 height4: 53°19′14.2″N, 001°43′46.9″W
    test 292 height4: 53°19′14.2″N, 001°43′46.9″W
    test 293 haversineTo: 124801.098
    test 294 haversineTo: 124801.098
    test 295 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 296 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 297 thomasTo: 124801.098
    test 298 thomasTo: 124801.098
    test 299 vincentysTo: 124801.098
    test 300 vincentysTo: 124801.098
    test 301 isclockwise: False
    test 302 isclockwise*: False
    test 303 isclockwise: True
    test 304 isclockwise*: True
    test 305 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 306 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 307 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 308 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 309 isconvex: False
    test 310 isconvex*: False
    test 311 isconvex: True
    test 312 isconvex*: True
    test 313 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 314 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 315 isenclosedBy1: True
    test 316 isenclosedBy1*: True
    test 317 isenclosedBy2: False
    test 318 isenclosedBy2*: False
    test 319 isenclosedBy3: False
    test 320 isenclosedBy3*: False
    test 321 isenclosedBy4: False
    test 322 isenclosedBy4*: False
    test 323 isenclosedBy5: False
    test 324 isenclosedBy5*: False
    test 325 isenclosedBy6: True
    test 326 isenclosedBy6*: True
    test 327 isenclosedBy7: True
    test 328 isenclosedBy7*: True
    test 329 isenclosedBy-CCW: True
    test 330 isenclosedBy-CW : True
    test 331 isenclosedBy-CCW: True
    test 332 initialBearingTo: 102.432182
    test 333 compassAngleTo: 100.017
    test 334 compassAngleTo: 105.599
    test 335 initialBearingTo: 288.715918
    test 336 compassAngleTo: 280.017
    test 337 compassAngleTo: 285.599
    test 338 equirectangularTo: 592.185
    test 339 distanceTo: 591.831
    test 340 bearingTo: 0.0
    test 341 compassAngleTo: 0.0
    test 342 bearingTo: 45.0
    test 343 compassAngleTo: 45.0
    test 344 bearingTo: 90.0
    test 345 compassAngleTo: 90.0
    test 346 bearingTo: 180.0
    test 347 compassAngleTo: 180.0
    test 348 bearingTo: 225.0
    test 349 compassAngleTo: 225.0
    test 350 bearingTo: 315.0
    test 351 compassAngleTo: 315.0
    test 352 bearingTo: 270.0
    test 353 compassAngleTo: 270.0
    test 354 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 355 compassAngleTo: 359.4
    test 356 latlon2: (53.0, 1.0)
    test 357 philam2: (0.93, 0.02)
    test 358 bearingTo: 31
    test 359 compassAngleTo: 31
    test 360 compassAngleTo: 45
    test 361 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 362 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 363 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 364 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 365 isequalTo: <class 'bool'>
    test 366 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 367 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 368 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 369 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 370 compassAngleTo: <class 'float'>
    test 371 cosineLawTo: <class 'float'>
    test 372 euclideanTo: <class 'float'>
    test 373 flatLocalTo: <class 'float'>
    test 374 flatPolarTo: <class 'float'>
    test 375 haversineTo: <class 'float'>
    test 376 hubenyTo: <class 'float'>
    test 377 vincentysTo: <class 'float'>
    test 378 toNvector: (0.61566, 0.0, 0.78801)
    test 379 toVector: (0.615661, 0.0, 0.788011)
    test 380 toVector3d: (0.61566, 0.0, 0.78801)
    test 381 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 382 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 383 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 384 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 385 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 386 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 387 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 388 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 389 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 390 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 391 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 392 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 393 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 394 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 395 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 396 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 397 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 398 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 399 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 400 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 401 circum3 (pygeodesy.sphericalTrigonometry) .radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 402 circum3 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 403 circum3 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 18.983)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 404 circum3 (pygeodesy.sphericalTrigonometry) .d1: 57691.282  FAILED, KNOWN, expected 57792.858
    test 405 circum3 (pygeodesy.sphericalTrigonometry) .d2: 57691.282  FAILED, KNOWN, expected 57792.859
    test 406 circum3 (pygeodesy.sphericalTrigonometry) .d3: 57691.282  FAILED, KNOWN, expected 57792.859
    test 407 circum3 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 408 circum3 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 409 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 410 circum4 (pygeodesy.sphericalTrigonometry) .radius: 3185634.993  FAILED, KNOWN, expected 3184256.748
    test 411 circum4 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -3185373.78m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 412 circum4 (pygeodesy.sphericalTrigonometry) .rank: 3
    test 413 circum4 (pygeodesy.sphericalTrigonometry) .residuals: ()
    test 414 circum4 (pygeodesy.sphericalTrigonometry) .d1: 57691.283  FAILED, KNOWN, expected 57818.033
    test 415 circum4 (pygeodesy.sphericalTrigonometry) .d2: 57691.283  FAILED, KNOWN, expected 57834.176
    test 416 circum4 (pygeodesy.sphericalTrigonometry) .d3: 57691.283  FAILED, KNOWN, expected 57830.992
    test 417 circum4 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 418 circum4 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 419 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 420 circin6 (pygeodesy.sphericalTrigonometry) .rB+rC: 1564564.352
    test 421 circin6 (pygeodesy.sphericalTrigonometry) .rC+pA: 1110540.003
    test 422 circin6 (pygeodesy.sphericalTrigonometry) .rA+rB: 1110540.003
    test 423 circin6 (pygeodesy.sphericalTrigonometry) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 424 circin6 (pygeodesy.sphericalTrigonometry) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 425 circin6 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 426 circin6 (pygeodesy.sphericalTrigonometry) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 427 circin6 (pygeodesy.sphericalTrigonometry) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 428 circin6 (pygeodesy.sphericalTrigonometry) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 429 circin6 (pygeodesy.sphericalTrigonometry) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 430 circin6 (pygeodesy.sphericalTrigonometry) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 431 circin6 (pygeodesy.sphericalTrigonometry) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    testLatLon(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 432 isEllipsoidal: True
    test 433 isSpherical: False
    test 434 lat/lonDMS: 52.20472°N, 000.14056°E
    test 435 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 436 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 437 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 438 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 439 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 440 isequalTo: True
    test 441 isequalTo: True
    test 442 latlon2: 52.20472, 0.14056
    test 443 latlon2: 52.2047, 0.1406
    test 444 latlon2: 52.205, 0.141
    test 445 latlon2: 52.2, 0.14
    test 446 latlon2: 52.2, 0.1
    test 447 latlon2: 52.0, 0.0
    test 448 chordTo: 12029263.15
    test 449 chordTo: 12029049.69
    test 450 isequalTo: False
    test 451 antipode1: 52.205°S, 179.881°W
    test 452 antipode2: True
    test 453 antipode3: 52.205°N, 000.119°E
    test 454 antipode4: True
    test 455 antipode5: 52.205°N, 000.119°E
    test 456 copy: True
    test 457 __eq__: True
    test 458 __ne__: False
    test 459 equirectangularTo: 404329.56
    test 460 distanceTo: 404279.720589
    test 461 distanceTo: 404279.720589
    test 462 distanceTo: 3972863
    test 463 distanceTo: 18013602.92
    test 464 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 465 intermediateTo: 51.372294°N, 000.707192°E
    test 466 intermediateTo: True
    test 467 intermediateTo: 404279.721
    test 468 intermediateTo+5: 35.560239°N, 008.833512°E
    test 469 intermediateTo+5: 4.885
    test 470 intermediateTo-4: 64.570387°N, 013.156352°W
    test 471 intermediateTo-4: 3.885
    test 472 intermediateTo-h: 125.000
    test 473 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 474 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 475 chordTo: 125203.963
    test 476 cosineAndoyerLambertTo: 125205.962
    test 477 cosineAndoyerLambertTo: 125205.962
    test 478 cosineForsyheAndoyerLambertTo: 125205.965
    test 479 cosineForsyheAndoyerLambertTo: 125205.965
    test 480 cosineLawTo: 124801.098
    test 481 cosineLawTo: 124801.098
    test 482 equirectangularTo: 124804.754
    test 483 equirectangularTo: 124804.754
    test 484 euclideanTo: 130015.089
    test 485 euclideanTo: 130015.089
    test 486 flatLocalTo: 125209.633
    test 487 flatLocalTo: 125209.633
    test 488 flatPolarTo: 133663.257
    test 489 flatPolarTo: 133663.257
    test 490 hartzell: 53.3206°N, 001.7297°W
    test 491 hartzell: 53.349541°N, 001.7297°W
    test 492 height4: 0.0
    test 493 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 494 height4: 53°19′14.2″N, 001°43′46.9″W
    test 495 height4: 53°19′14.2″N, 001°43′46.9″W
    test 496 haversineTo: 124801.098
    test 497 haversineTo: 124801.098
    test 498 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 499 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 500 thomasTo: 125206.188
    test 501 thomasTo: 125206.188
    test 502 vincentysTo: 124801.098
    test 503 vincentysTo: 124801.098
    test 504 isclockwise: False
    test 505 isclockwise*: False
    test 506 isclockwise: True
    test 507 isclockwise*: True
    test 508 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 509 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 510 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 511 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 512 isconvex: False
    test 513 isconvex*: False
    test 514 isconvex: True
    test 515 isconvex*: True
    test 516 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 517 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 518 isenclosedBy1: True
    test 519 isenclosedBy1*: True
    test 520 isenclosedBy2: False
    test 521 isenclosedBy2*: False
    test 522 isenclosedBy3: False
    test 523 isenclosedBy3*: False
    test 524 isenclosedBy4: False
    test 525 isenclosedBy4*: False
    test 526 isenclosedBy5: False
    test 527 isenclosedBy5*: False
    test 528 isenclosedBy6: True
    test 529 isenclosedBy6*: True
    test 530 isenclosedBy7: True
    test 531 isenclosedBy7*: True
    test 532 compassAngleTo: 100.017
    test 533 compassAngleTo: 105.599
    test 534 compassAngleTo: 280.017
    test 535 compassAngleTo: 285.599
    test 536 equirectangularTo: 592.185
    test 537 distanceTo: 591.831
    test 538 compassAngleTo: 0.0
    test 539 compassAngleTo: 45.0
    test 540 compassAngleTo: 90.0
    test 541 compassAngleTo: 180.0
    test 542 compassAngleTo: 225.0
    test 543 compassAngleTo: 315.0
    test 544 compassAngleTo: 270.0
    test 545 compassAngleTo: 359.4
    test 546 latlon2: (53.0, 1.0)
    test 547 philam2: (0.93, 0.02)
    test 548 compassAngleTo: 31
    test 549 compassAngleTo: 45
    test 550 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 551 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 552 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 553 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 554 isequalTo: <class 'bool'>
    test 555 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 556 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 557 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 558 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 559 compassAngleTo: <class 'float'>
    test 560 cosineLawTo: <class 'float'>
    test 561 euclideanTo: <class 'float'>
    test 562 flatLocalTo: <class 'float'>
    test 563 flatPolarTo: <class 'float'>
    test 564 haversineTo: <class 'float'>
    test 565 hubenyTo: <class 'float'>
    test 566 vincentysTo: <class 'float'>
    test 567 toVector: (0.615661, 0.0, 0.788011)
    test 568 toVector3d: (0.61566, 0.0, 0.78801)
    test 569 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 570 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 571 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 572 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 573 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
    test 574 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)
    test 575 circum4 (pygeodesy.ellipsoidalNvector) .radius: 3184196.839  FAILED, KNOWN, expected 3184256.748
    test 576 circum4 (pygeodesy.ellipsoidalNvector) .center: 42.674776°N, 002.495488°E, -3184194.95m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 577 circum4 (pygeodesy.ellipsoidalNvector) .rank: 3
    test 578 circum4 (pygeodesy.ellipsoidalNvector) .residuals: ()
    test 579 circum4 (pygeodesy.ellipsoidalNvector) .d1: 4886.122  FAILED, KNOWN, expected 57818.033
    test 580 circum4 (pygeodesy.ellipsoidalNvector) .d2: 4904.641  FAILED, KNOWN, expected 57834.176
    test 581 circum4 (pygeodesy.ellipsoidalNvector) .d3: 4909.920  FAILED, KNOWN, expected 57830.992
    test 582 circum4 (pygeodesy.ellipsoidalNvector) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 583 circum4 (pygeodesy.ellipsoidalNvector) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 584 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 585 circin6 (pygeodesy.ellipsoidalNvector) .rB+rC: 1561159.315
    test 586 circin6 (pygeodesy.ellipsoidalNvector) .rC+pA: 1111782.535
    test 587 circin6 (pygeodesy.ellipsoidalNvector) .rA+rB: 1104451.745
    test 588 circin6 (pygeodesy.ellipsoidalNvector) .radius: 325058.721
    test 589 circin6 (pygeodesy.ellipsoidalNvector) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 590 circin6 (pygeodesy.ellipsoidalNvector) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 591 circin6 (pygeodesy.ellipsoidalNvector) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 592 circin6 (pygeodesy.ellipsoidalNvector) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 593 circin6 (pygeodesy.ellipsoidalNvector) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 594 circin6 (pygeodesy.ellipsoidalNvector) .dA: 327992.318  FAILED, KNOWN, expected 327263.596
    test 595 circin6 (pygeodesy.ellipsoidalNvector) .dB: 327863.711  FAILED, KNOWN, expected 326036.153
    test 596 circin6 (pygeodesy.ellipsoidalNvector) .dC: 325653.216  FAILED, KNOWN, expected 326020.432

    testLatLon(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 597 isEllipsoidal: True
    test 598 isSpherical: False
    test 599 lat/lonDMS: 52.20472°N, 000.14056°E
    test 600 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 601 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 602 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 603 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 604 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 605 isequalTo: True
    test 606 isequalTo: True
    test 607 latlon2: 52.20472, 0.14056
    test 608 latlon2: 52.2047, 0.1406
    test 609 latlon2: 52.205, 0.141
    test 610 latlon2: 52.2, 0.14
    test 611 latlon2: 52.2, 0.1
    test 612 latlon2: 52.0, 0.0
    test 613 chordTo: 12029263.15
    test 614 chordTo: 12029049.69
    test 615 isequalTo: False
    test 616 antipode1: 52.205°S, 179.881°W
    test 617 antipode2: True
    test 618 antipode3: 52.205°N, 000.119°E
    test 619 antipode4: True
    test 620 antipode5: 52.205°N, 000.119°E
    test 621 initialBearingTo: 156.1106
    test 622 initialBearingTo: 65.9335
    test 623 initialBearingTo: 0.0
    test 624 initialBearingTo: 180.0
    test 625 finalBearingTo: 157.8345
    test 626 finalBearingTo: 93.9034
    test 627 bearingTo2: 156.1106, 157.8345
    test 628 ispolar: True
    test 629 copy: True
    test 630 __eq__: True
    test 631 __ne__: False
    test 632 equirectangularTo: 404329.56
    test 633 distanceTo: 404607.805988
    test 634 distanceTo: 404607.805988
    test 635 distanceTo: 3981601
    test 636 antipodal: False
    test 637 distanceTo dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 638 distanceTo unrolled: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 639 antipodal: False
    test 640 distanceTo dateline: 9513998
    test 641 distanceTo unrolled: 9513998
    test 642 distanceTo: 18012714.66
    test 643 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 644 distanceTo3 dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 645 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 646 distanceTo3 dateline: no convergence: epsilon (1e-12) and iterations (100), LatLon(41°19′12.0″S, 174°48′36.0″E) to LatLon(40°57′36.0″N, 005°30′00.0″W)  FAILED, KNOWN, expected no convergence ...
    test 647 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 648 intermediateTo: 51.372275°N, 000.707253°E
    test 649 intermediateTo: True
    test 650 intermediateTo: 404607.806
    test 651 intermediateTo+5: 35.139582°N, 008.994368°E
    test 652 intermediateTo+5: 5.000
    test 653 intermediateTo-4: 64.894124°N, 013.705689°W
    test 654 intermediateTo-4: 4.000
    test 655 intermediateTo-h: 125.000
    test 656 destination: 51.513526°N, 000.098038°W
    test 657 destination: 51°30′49″N, 000°05′53″W
    test 658 destination: 33°57′N, 118°24′W
    test 659 destination: 33.950367°N, 118.399012°W
    test 660 destination: 0.592546N, 2.066453W
    test 661 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 662 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 663 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 664 chordTo: 125203.963
    test 665 cosineAndoyerLambertTo: 125205.962
    test 666 cosineAndoyerLambertTo: 125205.962
    test 667 cosineForsyheAndoyerLambertTo: 125205.965
    test 668 cosineForsyheAndoyerLambertTo: 125205.965
    test 669 cosineLawTo: 124801.098
    test 670 cosineLawTo: 124801.098
    test 671 equirectangularTo: 124804.754
    test 672 equirectangularTo: 124804.754
    test 673 euclideanTo: 130015.089
    test 674 euclideanTo: 130015.089
    test 675 flatLocalTo: 125209.633
    test 676 flatLocalTo: 125209.633
    test 677 flatPolarTo: 133663.257
    test 678 flatPolarTo: 133663.257
    test 679 hartzell: 53.3206°N, 001.7297°W
    test 680 hartzell: 53.349541°N, 001.7297°W
    test 681 height4: 0.0
    test 682 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 683 height4: 53°19′14.2″N, 001°43′46.9″W
    test 684 height4: 53°19′14.2″N, 001°43′46.9″W
    test 685 haversineTo: 124801.098
    test 686 haversineTo: 124801.098
    test 687 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 688 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 689 thomasTo: 125206.188
    test 690 thomasTo: 125206.188
    test 691 vincentysTo: 124801.098
    test 692 vincentysTo: 124801.098
    test 693 isclockwise: False
    test 694 isclockwise*: False
    test 695 isclockwise: True
    test 696 isclockwise*: True
    test 697 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 698 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 699 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 700 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 701 isconvex: False
    test 702 isconvex*: False
    test 703 isconvex: True
    test 704 isconvex*: True
    test 705 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 706 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 707 isenclosedBy1: True
    test 708 isenclosedBy1*: True
    test 709 isenclosedBy2: False
    test 710 isenclosedBy2*: False
    test 711 isenclosedBy3: False
    test 712 isenclosedBy3*: False
    test 713 isenclosedBy4: False
    test 714 isenclosedBy4*: False
    test 715 isenclosedBy5: False
    test 716 isenclosedBy5*: False
    test 717 isenclosedBy6: True
    test 718 isenclosedBy6*: True
    test 719 isenclosedBy7: True
    test 720 isenclosedBy7*: True
    test 721 initialBearingTo: 102.392291
    test 722 compassAngleTo: 100.017
    test 723 compassAngleTo: 105.599
    test 724 initialBearingTo: 288.676039
    test 725 compassAngleTo: 280.017
    test 726 compassAngleTo: 285.599
    test 727 equirectangularTo: 592.185
    test 728 distanceTo: 593.571
    test 729 bearingTo: 0.0
    test 730 compassAngleTo: 0.0
    test 731 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 732 compassAngleTo: 45.0
    test 733 bearingTo: 90.0
    test 734 compassAngleTo: 90.0
    test 735 bearingTo: 180.0
    test 736 compassAngleTo: 180.0
    test 737 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 738 compassAngleTo: 225.0
    test 739 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 740 compassAngleTo: 315.0
    test 741 bearingTo: 270.0
    test 742 compassAngleTo: 270.0
    test 743 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 744 compassAngleTo: 359.4
    test 745 latlon2: (53.0, 1.0)
    test 746 philam2: (0.93, 0.02)
    test 747 bearingTo: 31
    test 748 compassAngleTo: 31
    test 749 compassAngleTo: 45
    test 750 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 751 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 752 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 753 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 754 isequalTo: <class 'bool'>
    test 755 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 756 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 757 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 758 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 759 compassAngleTo: <class 'float'>
    test 760 cosineLawTo: <class 'float'>
    test 761 euclideanTo: <class 'float'>
    test 762 flatLocalTo: <class 'float'>
    test 763 flatPolarTo: <class 'float'>
    test 764 haversineTo: <class 'float'>
    test 765 hubenyTo: <class 'float'>
    test 766 vincentysTo: <class 'float'>
    test 767 toNvector: (0.615661, 0.0, 0.788011)
    test 768 toVector: (0.615661, 0.0, 0.788011)
    test 769 toVector3d: (0.61566, 0.0, 0.78801)
    test 770 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 771 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 772 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 773 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 774 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 775 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 776 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 777 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 778 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 779 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 780 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 781 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 782 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 783 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 784 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 785 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 786 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 787 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 788 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 789 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 790 circum3 (pygeodesy.ellipsoidalVincenty) .radius: 57792.067
    test 791 circum3 (pygeodesy.ellipsoidalVincenty) .center: 43.053532°N, 002.943255°E, -261.66m
    test 792 circum3 (pygeodesy.ellipsoidalVincenty) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 793 circum3 (pygeodesy.ellipsoidalVincenty) .d1: 57792.858
    test 794 circum3 (pygeodesy.ellipsoidalVincenty) .d2: 57792.859
    test 795 circum3 (pygeodesy.ellipsoidalVincenty) .d3: 57792.859
    test 796 circum3 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 797 circum3 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 798 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 799 circum4 (pygeodesy.ellipsoidalVincenty) .radius: 3184256.748
    test 800 circum4 (pygeodesy.ellipsoidalVincenty) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 801 circum4 (pygeodesy.ellipsoidalVincenty) .rank: 3
    test 802 circum4 (pygeodesy.ellipsoidalVincenty) .residuals: ()
    test 803 circum4 (pygeodesy.ellipsoidalVincenty) .d1: 57818.033
    test 804 circum4 (pygeodesy.ellipsoidalVincenty) .d2: 57834.176
    test 805 circum4 (pygeodesy.ellipsoidalVincenty) .d3: 57830.992
    test 806 circum4 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 807 circum4 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 808 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 809 circin6 (pygeodesy.ellipsoidalVincenty) .rB+rC: 1561159.315
    test 810 circin6 (pygeodesy.ellipsoidalVincenty) .rC+pA: 1111782.535
    test 811 circin6 (pygeodesy.ellipsoidalVincenty) .rA+rB: 1104451.745
    test 812 circin6 (pygeodesy.ellipsoidalVincenty) .radius: 325058.721
    test 813 circin6 (pygeodesy.ellipsoidalVincenty) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 814 circin6 (pygeodesy.ellipsoidalVincenty) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 815 circin6 (pygeodesy.ellipsoidalVincenty) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 816 circin6 (pygeodesy.ellipsoidalVincenty) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 817 circin6 (pygeodesy.ellipsoidalVincenty) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 818 circin6 (pygeodesy.ellipsoidalVincenty) .dA: 327263.596
    test 819 circin6 (pygeodesy.ellipsoidalVincenty) .dB: 326036.153
    test 820 circin6 (pygeodesy.ellipsoidalVincenty) .dC: 326020.432

    testLatLon(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 821 isEllipsoidal: True
    test 822 isSpherical: False
    test 823 lat/lonDMS: 52.20472°N, 000.14056°E
    test 824 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 825 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 826 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 827 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 828 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 829 isequalTo: True
    test 830 isequalTo: True
    test 831 latlon2: 52.20472, 0.14056
    test 832 latlon2: 52.2047, 0.1406
    test 833 latlon2: 52.205, 0.141
    test 834 latlon2: 52.2, 0.14
    test 835 latlon2: 52.2, 0.1
    test 836 latlon2: 52.0, 0.0
    test 837 chordTo: 12029263.15
    test 838 chordTo: 12029049.69
    test 839 isequalTo: False
    test 840 antipode1: 52.205°S, 179.881°W
    test 841 antipode2: True
    test 842 antipode3: 52.205°N, 000.119°E
    test 843 antipode4: True
    test 844 antipode5: 52.205°N, 000.119°E
    test 845 initialBearingTo: 156.1106
    test 846 initialBearingTo: 65.9335
    test 847 initialBearingTo: 0.0
    test 848 initialBearingTo: 180.0
    test 849 finalBearingTo: 157.8345
    test 850 finalBearingTo: 93.9034
    test 851 bearingTo2: 156.1106, 157.8345
    test 852 ispolar: True
    test 853 copy: True
    test 854 __eq__: True
    test 855 __ne__: False
    test 856 equirectangularTo: 404329.56
    test 857 distanceTo: 404607.805988
    test 858 distanceTo: 404607.805988
    test 859 distanceTo: 3981601
    test 860 antipodal: False
    test 861 distanceTo dateline: 19959679.267
    test 862 distanceTo unrolled: 19959679.267
    test 863 antipodal: False
    test 864 distanceTo dateline: 9513998
    test 865 distanceTo unrolled: 9513998
    test 866 distanceTo: 18012714.66
    test 867 distanceTo: 20003931.46
    test 868 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 869 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 870 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 871 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 872 intermediateTo: 51.372275°N, 000.707253°E
    test 873 intermediateTo: True
    test 874 intermediateTo: 404607.806
    test 875 intermediateTo+5: 35.139582°N, 008.994368°E
    test 876 intermediateTo+5: 5.000
    test 877 intermediateTo-4: 64.894124°N, 013.705689°W
    test 878 intermediateTo-4: 4.000
    test 879 intermediateTo-h: 125.000
    test 880 destination: 51.513526°N, 000.098038°W
    test 881 destination: 51°30′49″N, 000°05′53″W
    test 882 destination: 33°57′N, 118°24′W
    test 883 destination: 33.950367°N, 118.399012°W
    test 884 destination: 0.592546N, 2.066453W
    test 885 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 886 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 887 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 888 chordTo: 125203.963
    test 889 cosineAndoyerLambertTo: 125205.962
    test 890 cosineAndoyerLambertTo: 125205.962
    test 891 cosineForsyheAndoyerLambertTo: 125205.965
    test 892 cosineForsyheAndoyerLambertTo: 125205.965
    test 893 cosineLawTo: 124801.098
    test 894 cosineLawTo: 124801.098
    test 895 equirectangularTo: 124804.754
    test 896 equirectangularTo: 124804.754
    test 897 euclideanTo: 130015.089
    test 898 euclideanTo: 130015.089
    test 899 flatLocalTo: 125209.633
    test 900 flatLocalTo: 125209.633
    test 901 flatPolarTo: 133663.257
    test 902 flatPolarTo: 133663.257
    test 903 hartzell: 53.3206°N, 001.7297°W
    test 904 hartzell: 53.349541°N, 001.7297°W
    test 905 height4: 0.0
    test 906 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 907 height4: 53°19′14.2″N, 001°43′46.9″W
    test 908 height4: 53°19′14.2″N, 001°43′46.9″W
    test 909 haversineTo: 124801.098
    test 910 haversineTo: 124801.098
    test 911 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 912 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 913 thomasTo: 125206.188
    test 914 thomasTo: 125206.188
    test 915 vincentysTo: 124801.098
    test 916 vincentysTo: 124801.098
    test 917 isclockwise: False
    test 918 isclockwise*: False
    test 919 isclockwise: True
    test 920 isclockwise*: True
    test 921 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 922 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 923 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 924 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 925 isconvex: False
    test 926 isconvex*: False
    test 927 isconvex: True
    test 928 isconvex*: True
    test 929 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 930 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 931 isenclosedBy1: True
    test 932 isenclosedBy1*: True
    test 933 isenclosedBy2: False
    test 934 isenclosedBy2*: False
    test 935 isenclosedBy3: False
    test 936 isenclosedBy3*: False
    test 937 isenclosedBy4: False
    test 938 isenclosedBy4*: False
    test 939 isenclosedBy5: False
    test 940 isenclosedBy5*: False
    test 941 isenclosedBy6: True
    test 942 isenclosedBy6*: True
    test 943 isenclosedBy7: True
    test 944 isenclosedBy7*: True
    test 945 initialBearingTo: 102.392291
    test 946 compassAngleTo: 100.017
    test 947 compassAngleTo: 105.599
    test 948 initialBearingTo: 288.676039
    test 949 compassAngleTo: 280.017
    test 950 compassAngleTo: 285.599
    test 951 equirectangularTo: 592.185
    test 952 distanceTo: 593.571
    test 953 bearingTo: 0.0
    test 954 compassAngleTo: 0.0
    test 955 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 956 compassAngleTo: 45.0
    test 957 bearingTo: 90.0
    test 958 compassAngleTo: 90.0
    test 959 bearingTo: 180.0
    test 960 compassAngleTo: 180.0
    test 961 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 962 compassAngleTo: 225.0
    test 963 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 964 compassAngleTo: 315.0
    test 965 bearingTo: 270.0
    test 966 compassAngleTo: 270.0
    test 967 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 968 compassAngleTo: 359.4
    test 969 latlon2: (53.0, 1.0)
    test 970 philam2: (0.93, 0.02)
    test 971 bearingTo: 31
    test 972 compassAngleTo: 31
    test 973 compassAngleTo: 45
    test 974 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 975 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 976 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 977 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 978 isequalTo: <class 'bool'>
    test 979 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 980 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 981 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 982 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 983 compassAngleTo: <class 'float'>
    test 984 cosineLawTo: <class 'float'>
    test 985 euclideanTo: <class 'float'>
    test 986 flatLocalTo: <class 'float'>
    test 987 flatPolarTo: <class 'float'>
    test 988 haversineTo: <class 'float'>
    test 989 hubenyTo: <class 'float'>
    test 990 vincentysTo: <class 'float'>
    test 991 toNvector: (0.615661, 0.0, 0.788011)
    test 992 toVector: (0.615661, 0.0, 0.788011)
    test 993 toVector3d: (0.61566, 0.0, 0.78801)
    test 994 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 995 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 996 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 997 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 998 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 999 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 1000 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 1001 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1002 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1003 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 1004 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 1005 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 1006 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 1007 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 1008 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 1009 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 1010 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 1011 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1012 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1013 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1014 circum3 (pygeodesy.ellipsoidalKarney) .radius: 57792.067
    test 1015 circum3 (pygeodesy.ellipsoidalKarney) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1016 circum3 (pygeodesy.ellipsoidalKarney) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1017 circum3 (pygeodesy.ellipsoidalKarney) .d1: 57792.858
    test 1018 circum3 (pygeodesy.ellipsoidalKarney) .d2: 57792.859
    test 1019 circum3 (pygeodesy.ellipsoidalKarney) .d3: 57792.859
    test 1020 circum3 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1021 circum3 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1022 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1023 circum4 (pygeodesy.ellipsoidalKarney) .radius: 3184256.748
    test 1024 circum4 (pygeodesy.ellipsoidalKarney) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1025 circum4 (pygeodesy.ellipsoidalKarney) .rank: 3
    test 1026 circum4 (pygeodesy.ellipsoidalKarney) .residuals: ()
    test 1027 circum4 (pygeodesy.ellipsoidalKarney) .d1: 57818.033
    test 1028 circum4 (pygeodesy.ellipsoidalKarney) .d2: 57834.176
    test 1029 circum4 (pygeodesy.ellipsoidalKarney) .d3: 57830.992
    test 1030 circum4 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1031 circum4 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1032 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1033 circin6 (pygeodesy.ellipsoidalKarney) .rB+rC: 1561159.315
    test 1034 circin6 (pygeodesy.ellipsoidalKarney) .rC+pA: 1111782.535
    test 1035 circin6 (pygeodesy.ellipsoidalKarney) .rA+rB: 1104451.745
    test 1036 circin6 (pygeodesy.ellipsoidalKarney) .radius: 325058.721
    test 1037 circin6 (pygeodesy.ellipsoidalKarney) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1038 circin6 (pygeodesy.ellipsoidalKarney) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1039 circin6 (pygeodesy.ellipsoidalKarney) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1040 circin6 (pygeodesy.ellipsoidalKarney) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1041 circin6 (pygeodesy.ellipsoidalKarney) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1042 circin6 (pygeodesy.ellipsoidalKarney) .dA: 327263.596
    test 1043 circin6 (pygeodesy.ellipsoidalKarney) .dB: 326036.153
    test 1044 circin6 (pygeodesy.ellipsoidalKarney) .dC: 326020.432

    testLatLon(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1045 isEllipsoidal: True
    test 1046 isSpherical: False
    test 1047 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1048 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1049 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1050 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1051 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1052 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1053 isequalTo: True
    test 1054 isequalTo: True
    test 1055 latlon2: 52.20472, 0.14056
    test 1056 latlon2: 52.2047, 0.1406
    test 1057 latlon2: 52.205, 0.141
    test 1058 latlon2: 52.2, 0.14
    test 1059 latlon2: 52.2, 0.1
    test 1060 latlon2: 52.0, 0.0
    test 1061 chordTo: 12029263.15
    test 1062 chordTo: 12029049.69
    test 1063 isequalTo: False
    test 1064 antipode1: 52.205°S, 179.881°W
    test 1065 antipode2: True
    test 1066 antipode3: 52.205°N, 000.119°E
    test 1067 antipode4: True
    test 1068 antipode5: 52.205°N, 000.119°E
    test 1069 initialBearingTo: 156.1106
    test 1070 initialBearingTo: 65.9335
    test 1071 initialBearingTo: 0.0
    test 1072 initialBearingTo: 180.0
    test 1073 finalBearingTo: 157.8345
    test 1074 finalBearingTo: 93.9034
    test 1075 bearingTo2: 156.1106, 157.8345
    test 1076 ispolar: True
    test 1077 copy: True
    test 1078 __eq__: True
    test 1079 __ne__: False
    test 1080 equirectangularTo: 404329.56
    test 1081 distanceTo: 404607.805988
    test 1082 distanceTo: 404607.805988
    test 1083 distanceTo: 3981601
    test 1084 antipodal: False
    test 1085 distanceTo dateline: 19959679.267
    test 1086 distanceTo unrolled: 19959679.267
    test 1087 antipodal: False
    test 1088 distanceTo dateline: 9513998
    test 1089 distanceTo unrolled: 9513998
    test 1090 distanceTo: 18003740.39
    test 1091 distanceTo: 19994797.60  FAILED, KNOWN, expected 20003931.46
    test 1092 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1093 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1094 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1095 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1096 intermediateTo: 51.372275°N, 000.707253°E
    test 1097 intermediateTo: True
    test 1098 intermediateTo: 404607.806
    test 1099 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1100 intermediateTo+5: 5.000
    test 1101 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1102 intermediateTo-4: 4.000
    test 1103 intermediateTo-h: 125.000
    test 1104 destination: 51.513526°N, 000.098038°W
    test 1105 destination: 51°30′49″N, 000°05′53″W
    test 1106 destination: 33°57′N, 118°24′W
    test 1107 destination: 33.950367°N, 118.399012°W
    test 1108 destination: 0.592546N, 2.066453W
    test 1109 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1110 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1111 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1112 chordTo: 125203.963
    test 1113 cosineAndoyerLambertTo: 125205.962
    test 1114 cosineAndoyerLambertTo: 125205.962
    test 1115 cosineForsyheAndoyerLambertTo: 125205.965
    test 1116 cosineForsyheAndoyerLambertTo: 125205.965
    test 1117 cosineLawTo: 124801.098
    test 1118 cosineLawTo: 124801.098
    test 1119 equirectangularTo: 124804.754
    test 1120 equirectangularTo: 124804.754
    test 1121 euclideanTo: 130015.089
    test 1122 euclideanTo: 130015.089
    test 1123 flatLocalTo: 125209.633
    test 1124 flatLocalTo: 125209.633
    test 1125 flatPolarTo: 133663.257
    test 1126 flatPolarTo: 133663.257
    test 1127 hartzell: 53.3206°N, 001.7297°W
    test 1128 hartzell: 53.349541°N, 001.7297°W
    test 1129 height4: 0.0
    test 1130 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1131 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1132 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1133 haversineTo: 124801.098
    test 1134 haversineTo: 124801.098
    test 1135 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1136 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1137 thomasTo: 125206.188
    test 1138 thomasTo: 125206.188
    test 1139 vincentysTo: 124801.098
    test 1140 vincentysTo: 124801.098
    test 1141 isclockwise: False
    test 1142 isclockwise*: False
    test 1143 isclockwise: True
    test 1144 isclockwise*: True
    test 1145 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1146 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1147 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1148 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1149 isconvex: False
    test 1150 isconvex*: False
    test 1151 isconvex: True
    test 1152 isconvex*: True
    test 1153 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1154 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1155 isenclosedBy1: True
    test 1156 isenclosedBy1*: True
    test 1157 isenclosedBy2: False
    test 1158 isenclosedBy2*: False
    test 1159 isenclosedBy3: False
    test 1160 isenclosedBy3*: False
    test 1161 isenclosedBy4: False
    test 1162 isenclosedBy4*: False
    test 1163 isenclosedBy5: False
    test 1164 isenclosedBy5*: False
    test 1165 isenclosedBy6: True
    test 1166 isenclosedBy6*: True
    test 1167 isenclosedBy7: True
    test 1168 isenclosedBy7*: True
    test 1169 initialBearingTo: 102.392291
    test 1170 compassAngleTo: 100.017
    test 1171 compassAngleTo: 105.599
    test 1172 initialBearingTo: 288.676039
    test 1173 compassAngleTo: 280.017
    test 1174 compassAngleTo: 285.599
    test 1175 equirectangularTo: 592.185
    test 1176 distanceTo: 593.571
    test 1177 bearingTo: 0.0
    test 1178 compassAngleTo: 0.0
    test 1179 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1180 compassAngleTo: 45.0
    test 1181 bearingTo: 90.0
    test 1182 compassAngleTo: 90.0
    test 1183 bearingTo: 180.0
    test 1184 compassAngleTo: 180.0
    test 1185 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1186 compassAngleTo: 225.0
    test 1187 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1188 compassAngleTo: 315.0
    test 1189 bearingTo: 270.0
    test 1190 compassAngleTo: 270.0
    test 1191 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1192 compassAngleTo: 359.4
    test 1193 latlon2: (53.0, 1.0)
    test 1194 philam2: (0.93, 0.02)
    test 1195 bearingTo: 31
    test 1196 compassAngleTo: 31
    test 1197 compassAngleTo: 45
    test 1198 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1199 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1200 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1201 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1202 isequalTo: <class 'bool'>
    test 1203 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1204 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1205 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1206 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1207 compassAngleTo: <class 'float'>
    test 1208 cosineLawTo: <class 'float'>
    test 1209 euclideanTo: <class 'float'>
    test 1210 flatLocalTo: <class 'float'>
    test 1211 flatPolarTo: <class 'float'>
    test 1212 haversineTo: <class 'float'>
    test 1213 hubenyTo: <class 'float'>
    test 1214 vincentysTo: <class 'float'>
    test 1215 toNvector: (0.615661, 0.0, 0.788011)
    test 1216 toVector: (0.615661, 0.0, 0.788011)
    test 1217 toVector3d: (0.61566, 0.0, 0.78801)
    test 1218 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 1219 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 1220 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 1221 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 1222 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1223 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 1224 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 1225 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1226 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1227 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 1228 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 1229 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 1230 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1231 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1232 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 1233 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 1234 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 1235 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1236 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1237 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1238 circum3 (pygeodesy.ellipsoidalExact) .radius: 57792.067
    test 1239 circum3 (pygeodesy.ellipsoidalExact) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1240 circum3 (pygeodesy.ellipsoidalExact) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1241 circum3 (pygeodesy.ellipsoidalExact) .d1: 57792.858
    test 1242 circum3 (pygeodesy.ellipsoidalExact) .d2: 57792.859
    test 1243 circum3 (pygeodesy.ellipsoidalExact) .d3: 57792.859
    test 1244 circum3 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1245 circum3 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1246 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1247 circum4 (pygeodesy.ellipsoidalExact) .radius: 3184256.748
    test 1248 circum4 (pygeodesy.ellipsoidalExact) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1249 circum4 (pygeodesy.ellipsoidalExact) .rank: 3
    test 1250 circum4 (pygeodesy.ellipsoidalExact) .residuals: ()
    test 1251 circum4 (pygeodesy.ellipsoidalExact) .d1: 57818.033
    test 1252 circum4 (pygeodesy.ellipsoidalExact) .d2: 57834.176
    test 1253 circum4 (pygeodesy.ellipsoidalExact) .d3: 57830.992
    test 1254 circum4 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1255 circum4 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1256 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1257 circin6 (pygeodesy.ellipsoidalExact) .rB+rC: 1561159.315
    test 1258 circin6 (pygeodesy.ellipsoidalExact) .rC+pA: 1111782.535
    test 1259 circin6 (pygeodesy.ellipsoidalExact) .rA+rB: 1104451.745
    test 1260 circin6 (pygeodesy.ellipsoidalExact) .radius: 325058.721
    test 1261 circin6 (pygeodesy.ellipsoidalExact) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1262 circin6 (pygeodesy.ellipsoidalExact) .deltas: (0.0, 0.0, 0.441894)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1263 circin6 (pygeodesy.ellipsoidalExact) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1264 circin6 (pygeodesy.ellipsoidalExact) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1265 circin6 (pygeodesy.ellipsoidalExact) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1266 circin6 (pygeodesy.ellipsoidalExact) .dA: 327263.596
    test 1267 circin6 (pygeodesy.ellipsoidalExact) .dB: 326036.153
    test 1268 circin6 (pygeodesy.ellipsoidalExact) .dC: 326020.432

    118 of 1268 testLatLon.py tests (9.3%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 3.193 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLatLonBase.py

    testing testLatLonBase.py 21.07.01

    testLatLon(pygeodesy.sphericalNvector, 22.07.07)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 toStr: 51°28′40″N, 000°00′06″W
    test 10 toStr: 51.4778°N, 000.0016°W
    test 11 precision: 0
    test 12 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 13 isequalTo: True
    test 14 isequalTo3: False
    test 15 latlon: (51.4778, -0.0016)
    test 16 phimlam: (0.898457, -0.000028)
    test 17 isequalTo: True
    test 18 isequalTo3: True
    test 19 latlon: (51.4778, -0.0016)
    test 20 latlonheight: (51.4778, -0.0016, 42.0)
    test 21 phimlam: (0.898457, -0.000028)
    test 22 phimlamheight: (0.898457, -0.000028, 42.0)
    test 23 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 24 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 25 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 26 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 27 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 28 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 29 rhumbAzimuthTo: 107.563
    test 30 rhumbDestination: 50.964155°N, 001.853°E
    test 31 rhumbDestination: True
    test 32 rhumbDistanceTo: 42186.1
    test 33 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 34 rhumbMidpointo: True
    test 35 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 36 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 37 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 38 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 39 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 40 lat, lon: 50.06632°N, 005.71475°W
    test 41 lat, lon: 50.066389°N, 005.714722°W
    test 42 isequalTo: True
    test 43 isequalTo3: True
    test 44 latlon: (52.205, 0.119)
    test 45 latlonheight: (52.205, 0.119, 0)
    test 46 phimlam: (0.911149, 0.002077)
    test 47 phimlamheight: (0.911149, 0.002077, 0)
    test 48 toStr: 51°28′40″N, 000°00′06″W
    test 49 toStr: 51.4778°N, 000.0016°W
    test 50 precision: 0
    test 51 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 52 isequalTo: True
    test 53 isequalTo3: False
    test 54 latlon: (51.4778, -0.0016)
    test 55 phimlam: (0.898457, -0.000028)
    test 56 isequalTo: True
    test 57 isequalTo3: True
    test 58 latlon: (51.4778, -0.0016)
    test 59 latlonheight: (51.4778, -0.0016, 42.0)
    test 60 phimlam: (0.898457, -0.000028)
    test 61 phimlamheight: (0.898457, -0.000028, 42.0)
    test 62 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 63 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 64 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 65 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 66 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 67 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 68 rhumbAzimuthTo: 107.563
    test 69 rhumbDestination: 50.964155°N, 001.853°E
    test 70 rhumbDestination: True
    test 71 rhumbDistanceTo: 42186.1
    test 72 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 73 rhumbMidpointo: True
    test 74 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 75 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 76 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 77 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 78 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 79 lat, lon: 50.06632°N, 005.71475°W
    test 80 lat, lon: 50.066389°N, 005.714722°W
    test 81 isequalTo: True
    test 82 isequalTo3: True
    test 83 latlon: (52.205, 0.119)
    test 84 latlonheight: (52.205, 0.119, 0)
    test 85 phimlam: (0.911149, 0.002077)
    test 86 phimlamheight: (0.911149, 0.002077, 0)
    test 87 toStr: 51°28′40″N, 000°00′06″W
    test 88 toStr: 51.4778°N, 000.0016°W
    test 89 precision: 0
    test 90 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 91 isequalTo: True
    test 92 isequalTo3: False
    test 93 latlon: (51.4778, -0.0016)
    test 94 phimlam: (0.898457, -0.000028)
    test 95 isequalTo: True
    test 96 isequalTo3: True
    test 97 latlon: (51.4778, -0.0016)
    test 98 latlonheight: (51.4778, -0.0016, 42.0)
    test 99 phimlam: (0.898457, -0.000028)
    test 100 phimlamheight: (0.898457, -0.000028, 42.0)
    test 101 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 102 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 103 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 104 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 105 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 106 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 107 rhumbAzimuthTo: 116.661
    test 108 rhumbDestination: 50.964234°N, 001.851383°E
    test 109 rhumbDestination: True
    test 110 rhumbDistanceTo: 40413.1
    test 111 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 112 rhumbMidpointo: True
    test 113 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 114 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 115 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 116 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 117 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 118 lat, lon: 50.06632°N, 005.71475°W
    test 119 lat, lon: 50.066389°N, 005.714722°W
    test 120 isequalTo: True
    test 121 isequalTo3: True
    test 122 latlon: (52.205, 0.119)
    test 123 latlonheight: (52.205, 0.119, 0)
    test 124 phimlam: (0.911149, 0.002077)
    test 125 phimlamheight: (0.911149, 0.002077, 0)
    test 126 toStr: 51°28′40″N, 000°00′06″W
    test 127 toStr: 51.4778°N, 000.0016°W
    test 128 precision: 0
    test 129 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 130 isequalTo: True
    test 131 isequalTo3: False
    test 132 latlon: (51.4778, -0.0016)
    test 133 phimlam: (0.898457, -0.000028)
    test 134 isequalTo: True
    test 135 isequalTo3: True
    test 136 latlon: (51.4778, -0.0016)
    test 137 latlonheight: (51.4778, -0.0016, 42.0)
    test 138 phimlam: (0.898457, -0.000028)
    test 139 phimlamheight: (0.898457, -0.000028, 42.0)
    test 140 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 141 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 142 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 143 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 144 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 145 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 146 rhumbAzimuthTo: 116.661
    test 147 rhumbDestination: 50.964234°N, 001.851383°E
    test 148 rhumbDestination: True
    test 149 rhumbDistanceTo: 40413.1
    test 150 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 151 rhumbMidpointo: True
    test 152 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 153 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 154 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 155 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 156 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 157 lat, lon: 50.06632°N, 005.71475°W
    test 158 lat, lon: 50.066389°N, 005.714722°W
    test 159 isequalTo: True
    test 160 isequalTo3: True
    test 161 latlon: (52.205, 0.119)
    test 162 latlonheight: (52.205, 0.119, 0)
    test 163 phimlam: (0.911149, 0.002077)
    test 164 phimlamheight: (0.911149, 0.002077, 0)
    test 165 toStr: 51°28′40″N, 000°00′06″W
    test 166 toStr: 51.4778°N, 000.0016°W
    test 167 precision: 0
    test 168 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 169 isequalTo: True
    test 170 isequalTo3: False
    test 171 latlon: (51.4778, -0.0016)
    test 172 phimlam: (0.898457, -0.000028)
    test 173 isequalTo: True
    test 174 isequalTo3: True
    test 175 latlon: (51.4778, -0.0016)
    test 176 latlonheight: (51.4778, -0.0016, 42.0)
    test 177 phimlam: (0.898457, -0.000028)
    test 178 phimlamheight: (0.898457, -0.000028, 42.0)
    test 179 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 180 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 181 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 182 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 183 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 184 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 185 rhumbAzimuthTo: 116.661
    test 186 rhumbDestination: 50.964234°N, 001.851383°E
    test 187 rhumbDestination: True
    test 188 rhumbDistanceTo: 40413.1
    test 189 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 190 rhumbMidpointo: True
    test 191 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 192 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 193 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 194 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 195 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalExact, 22.07.07)
    test 196 lat, lon: 50.06632°N, 005.71475°W
    test 197 lat, lon: 50.066389°N, 005.714722°W
    test 198 isequalTo: True
    test 199 isequalTo3: True
    test 200 latlon: (52.205, 0.119)
    test 201 latlonheight: (52.205, 0.119, 0)
    test 202 phimlam: (0.911149, 0.002077)
    test 203 phimlamheight: (0.911149, 0.002077, 0)
    test 204 toStr: 51°28′40″N, 000°00′06″W
    test 205 toStr: 51.4778°N, 000.0016°W
    test 206 precision: 0
    test 207 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 208 isequalTo: True
    test 209 isequalTo3: False
    test 210 latlon: (51.4778, -0.0016)
    test 211 phimlam: (0.898457, -0.000028)
    test 212 isequalTo: True
    test 213 isequalTo3: True
    test 214 latlon: (51.4778, -0.0016)
    test 215 latlonheight: (51.4778, -0.0016, 42.0)
    test 216 phimlam: (0.898457, -0.000028)
    test 217 phimlamheight: (0.898457, -0.000028, 42.0)
    test 218 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 219 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 220 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 221 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 222 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 223 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 224 rhumbAzimuthTo: 116.661
    test 225 rhumbDestination: 50.964234°N, 001.851383°E
    test 226 rhumbDestination: True
    test 227 rhumbDistanceTo: 40413.1
    test 228 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 229 rhumbMidpointo: True
    test 230 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 231 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 232 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 233 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 234 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 22.07.07)
    test 235 lat, lon: 50.06632°N, 005.71475°W
    test 236 lat, lon: 50.066389°N, 005.714722°W
    test 237 isequalTo: True
    test 238 isequalTo3: True
    test 239 latlon: (52.205, 0.119)
    test 240 latlonheight: (52.205, 0.119, 0)
    test 241 phimlam: (0.911149, 0.002077)
    test 242 phimlamheight: (0.911149, 0.002077, 0)
    test 243 toStr: 51°28′40″N, 000°00′06″W
    test 244 toStr: 51.4778°N, 000.0016°W
    test 245 precision: 0
    test 246 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 247 isequalTo: True
    test 248 isequalTo3: False
    test 249 latlon: (51.4778, -0.0016)
    test 250 phimlam: (0.898457, -0.000028)
    test 251 isequalTo: True
    test 252 isequalTo3: True
    test 253 latlon: (51.4778, -0.0016)
    test 254 latlonheight: (51.4778, -0.0016, 42.0)
    test 255 phimlam: (0.898457, -0.000028)
    test 256 phimlamheight: (0.898457, -0.000028, 42.0)
    test 257 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 258 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 259 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 260 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 261 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 262 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 263 rhumbAzimuthTo: 116.661
    test 264 rhumbDestination: 50.964234°N, 001.851383°E
    test 265 rhumbDestination: True
    test 266 rhumbDistanceTo: 40413.1
    test 267 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 268 rhumbMidpointo: True
    test 269 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 270 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 271 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 272 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 273 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBaseDI(pygeodesy.ellipsoidalBaseDI, 22.07.04)
    test 274 lat, lon: 50.06632°N, 005.71475°W
    test 275 lat, lon: 50.066389°N, 005.714722°W
    test 276 isequalTo: True
    test 277 isequalTo3: True
    test 278 latlon: (52.205, 0.119)
    test 279 latlonheight: (52.205, 0.119, 0)
    test 280 phimlam: (0.911149, 0.002077)
    test 281 phimlamheight: (0.911149, 0.002077, 0)
    test 282 toStr: 51°28′40″N, 000°00′06″W
    test 283 toStr: 51.4778°N, 000.0016°W
    test 284 precision: 0
    test 285 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 286 isequalTo: True
    test 287 isequalTo3: False
    test 288 latlon: (51.4778, -0.0016)
    test 289 phimlam: (0.898457, -0.000028)
    test 290 isequalTo: True
    test 291 isequalTo3: True
    test 292 latlon: (51.4778, -0.0016)
    test 293 latlonheight: (51.4778, -0.0016, 42.0)
    test 294 phimlam: (0.898457, -0.000028)
    test 295 phimlamheight: (0.898457, -0.000028, 42.0)
    test 296 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 297 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 298 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 299 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 300 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 301 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)
    test 302 rhumbAzimuthTo: 116.661
    test 303 rhumbDestination: 50.964234°N, 001.851383°E
    test 304 rhumbDestination: True
    test 305 rhumbDistanceTo: 40413.1
    test 306 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 307 rhumbMidpointo: True
    test 308 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 309 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 310 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 311 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 312 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonBase(pygeodesy.latlonBase, 22.07.03)
    test 313 lat, lon: 50.06632°N, 005.71475°W
    test 314 lat, lon: 50.066389°N, 005.714722°W
    test 315 isequalTo: True
    test 316 isequalTo3: True
    test 317 latlon: (52.205, 0.119)
    test 318 latlonheight: (52.205, 0.119, 0)
    test 319 phimlam: (0.911149, 0.002077)
    test 320 phimlamheight: (0.911149, 0.002077, 0)
    test 321 toStr: 51°28′40″N, 000°00′06″W
    test 322 toStr: 51.4778°N, 000.0016°W
    test 323 precision: 0
    test 324 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 325 isequalTo: True
    test 326 isequalTo3: False
    test 327 latlon: (51.4778, -0.0016)
    test 328 phimlam: (0.898457, -0.000028)
    test 329 isequalTo: True
    test 330 isequalTo3: True
    test 331 latlon: (51.4778, -0.0016)
    test 332 latlonheight: (51.4778, -0.0016, 42.0)
    test 333 phimlam: (0.898457, -0.000028)
    test 334 phimlamheight: (0.898457, -0.000028, 42.0)
    test 335 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 336 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 337 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 338 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonNvectorBase(pygeodesy.nvectorBase, 22.07.07)
    test 339 lat, lon: 50.06632°N, 005.71475°W
    test 340 lat, lon: 50.066389°N, 005.714722°W
    test 341 isequalTo: True
    test 342 isequalTo3: True
    test 343 latlon: (52.205, 0.119)
    test 344 latlonheight: (52.205, 0.119, 0)
    test 345 phimlam: (0.911149, 0.002077)
    test 346 phimlamheight: (0.911149, 0.002077, 0)
    test 347 toStr: 51°28′40″N, 000°00′06″W
    test 348 toStr: 51.4778°N, 000.0016°W
    test 349 precision: 0
    test 350 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 351 isequalTo: True
    test 352 isequalTo3: False
    test 353 latlon: (51.4778, -0.0016)
    test 354 phimlam: (0.898457, -0.000028)
    test 355 isequalTo: True
    test 356 isequalTo3: True
    test 357 latlon: (51.4778, -0.0016)
    test 358 latlonheight: (51.4778, -0.0016, 42.0)
    test 359 phimlam: (0.898457, -0.000028)
    test 360 phimlamheight: (0.898457, -0.000028, 42.0)
    test 361 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 362 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 363 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 364 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonSphericalBase(pygeodesy.sphericalBase, 22.07.03)
    test 365 lat, lon: 50.06632°N, 005.71475°W
    test 366 lat, lon: 50.066389°N, 005.714722°W
    test 367 isequalTo: True
    test 368 isequalTo3: True
    test 369 latlon: (52.205, 0.119)
    test 370 latlonheight: (52.205, 0.119, 0)
    test 371 phimlam: (0.911149, 0.002077)
    test 372 phimlamheight: (0.911149, 0.002077, 0)
    test 373 toStr: 51°28′40″N, 000°00′06″W
    test 374 toStr: 51.4778°N, 000.0016°W
    test 375 precision: 0
    test 376 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 377 isequalTo: True
    test 378 isequalTo3: False
    test 379 latlon: (51.4778, -0.0016)
    test 380 phimlam: (0.898457, -0.000028)
    test 381 isequalTo: True
    test 382 isequalTo3: True
    test 383 latlon: (51.4778, -0.0016)
    test 384 latlonheight: (51.4778, -0.0016, 42.0)
    test 385 phimlam: (0.898457, -0.000028)
    test 386 phimlamheight: (0.898457, -0.000028, 42.0)
    test 387 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 388 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 389 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 390 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 391 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 392 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....1008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)
    test 393 rhumbAzimuthTo: 107.563
    test 394 rhumbDestination: 50.964155°N, 001.853°E
    test 395 rhumbDestination: True
    test 396 rhumbDistanceTo: 42186.1
    test 397 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 398 rhumbMidpointo: True
    test 399 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 400 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 401 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 402 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 403 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    all 403 testLatLonBase.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 182.723 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLazily.py

    testing testLazily.py 22.06.27
    test 1 a_b2e: function
    test 2 a_b2e2: function
    test 3 a_b2e22: function
    test 4 a_b2e32: function
    test 5 a_b2f: function
    test 6 a_b2f2: function
    test 7 a_b2f_: function
    test 8 a_b2n: function
    test 9 a_f2b: function
    test 10 a_f2Tuple: class
    test 11 a_f_2b: function
    test 12 acos1: function
    test 13 acre2ha: function
    test 14 acre2m2: function
    test 15 Aer: class
    test 16 Aer4Tuple: class
    test 17 albers: module
    test 18 Albers7Tuple: class
    test 19 AlbersEqualArea: class
    test 20 AlbersEqualArea2: class
    test 21 AlbersEqualArea4: class
    test 22 AlbersEqualAreaCylindrical: class
    test 23 AlbersEqualAreaNorth: class
    test 24 AlbersEqualAreaSouth: class
    test 25 AlbersError: class
    test 26 anstr: function
    test 27 anStr: function
    test 28 antipode: function
    test 29 antipode_: function
    test 30 Area3Tuple: class
    test 31 areaof: function
    test 32 areaOf: function
    test 33 asin1: function
    test 34 atan2b: function
    test 35 atan2d: function
    test 36 atand: function
    test 37 Attitude: class
    test 38 Attitude4Tuple: class
    test 39 AttitudeError: class
    test 40 attrs: function
    test 41 azimuthal: module
    test 42 Azimuthal7Tuple: class
    test 43 AzimuthalError: class
    test 44 b_f2a: function
    test 45 b_f_2a: function
    test 46 Band: class
    test 47 bases: module
    test 48 basics: module
    test 49 Bearing: class
    test 50 bearing: function
    test 51 Bearing2Tuple: class
    test 52 Bearing_: class
    test 53 bearing_: function
    test 54 bearingDMS: function
    test 55 Bool: class
    test 56 bounds: function
    test 57 Bounds2Tuple: class
    test 58 Bounds4Tuple: class
    test 59 boundsOf: function
    test 60 callername: function
    test 61 Caps: class pygeodesy.karney.Caps
    test 62 cartesianBase: module
    test 63 cassini: function
    test 64 CassiniSoldner: class
    test 65 cbrt: function
    test 66 cbrt2: function
    test 67 centroidOf: function
    test 68 chain2m: function
    test 69 circin6: function
    test 70 Circin6Tuple: class
    test 71 circle4: function
    test 72 Circle4Tuple: class
    test 73 circum3: function
    test 74 Circum3Tuple: class
    test 75 circum4_: function
    test 76 Circum4Tuple: class
    test 77 classname: function
    test 78 classnaming: function
    test 79 clipCS3: function
    test 80 ClipCS3Tuple: class
    test 81 clipCS4: function
    test 82 ClipCS4Tuple: class
    test 83 clipDegrees: function
    test 84 clipDMS: function
    test 85 ClipError: class
    test 86 clipLB6: function
    test 87 ClipLB6Tuple: class
    test 88 clipRadians: function
    test 89 clips: function
    test 90 clipSH: function
    test 91 clipSH3: function
    test 92 ClipSH3Tuple: class
    test 93 clipStr: function
    test 94 clipy: module
    test 95 collins: function
    test 96 collins5: function
    test 97 Collins5Tuple: class
    test 98 compassAngle: function
    test 99 compassDMS: function
    test 100 compassPoint: function
    test 101 Conic: class
    test 102 Conics: class pygeodesy.lcc.Conics
    test 103 copysign0: function
    test 104 copytype: function
    test 105 cosineAndoyerLambert: function
    test 106 cosineAndoyerLambert_: function
    test 107 cosineForsytheAndoyerLambert: function
    test 108 cosineForsytheAndoyerLambert_: function
    test 109 cosineLaw: function
    test 110 cosineLaw_: function
    test 111 cot: function
    test 112 cot_: function
    test 113 cotd: function
    test 114 cotd_: function
    test 115 CrossError: class
    test 116 crosserrors: function
    test 117 Css: class
    test 118 css: module
    test 119 CSSError: class
    test 120 Curvature2Tuple: class
    test 121 date2epoch: function
    test 122 Datum: class
    test 123 datum: module
    test 124 Datums: class pygeodesy.datums.Datums
    test 125 datums: module
    test 126 decodeEPSG2: function
    test 127 degDMS: function
    test 128 degrees: class builtin_function_or_method
    test 129 Degrees: class
    test 130 degrees180: function
    test 131 Degrees2: class
    test 132 degrees2grades: function
    test 133 degrees2m: function
    test 134 degrees360: function
    test 135 degrees90: function
    test 136 Degrees_: class
    test 137 deprecated: module
    test 138 deprecated_class: function
    test 139 deprecated_function: function
    test 140 deprecated_method: function
    test 141 deprecated_Property_RO: function
    test 142 deprecated_property_RO: function
    test 143 DeprecationWarnings: function
    test 144 Destination2Tuple: class
    test 145 Destination3Tuple: class
    test 146 DIG: int
    test 147 Direct9Tuple: class
    test 148 Distance: class
    test 149 Distance2Tuple: class
    test 150 Distance3Tuple: class
    test 151 Distance4Tuple: class
    test 152 Distance_: class
    test 153 dms: module
    test 154 EasNor2Tuple: class
    test 155 EasNor3Tuple: class
    test 156 EasNorAziRk4Tuple: class
    test 157 EasNorAziRkEqu6Tuple: class
    test 158 EasNorExact4Tuple: class
    test 159 EasNorRadius3Tuple: class
    test 160 Easting: class
    test 161 ecef: module
    test 162 Ecef9Tuple: class
    test 163 EcefCartesian: function
    test 164 EcefError: class
    test 165 EcefFarrell21: class
    test 166 EcefFarrell22: class
    test 167 EcefKarney: class
    test 168 EcefMatrix: class
    test 169 EcefSudano: class
    test 170 EcefVeness: class
    test 171 EcefYou: class
    test 172 egmGeoidHeights: function
    test 173 elevation2: function
    test 174 Elevation2Tuple: class
    test 175 elevations: module
    test 176 Ellipsoid: class
    test 177 Ellipsoid2: class
    test 178 ellipsoidalBase: module
    test 179 ellipsoidalBaseDI: module
    test 180 ellipsoidalExact: module
    test 181 ellipsoidalGeodSolve: module
    test 182 ellipsoidalKarney: module
    test 183 ellipsoidalNvector: module
    test 184 ellipsoidalVincenty: module
    test 185 Ellipsoids: class pygeodesy.ellipsoids.Ellipsoids
    test 186 ellipsoids: module
    test 187 Elliptic: class
    test 188 elliptic: module
    test 189 Elliptic3Tuple: class
    test 190 EllipticError: class
    test 191 encodeEPSG: function
    test 192 enStr2: function
    test 193 enstr2: function
    test 194 Enu: class
    test 195 Enu4Tuple: class
    test 196 Epoch: class
    test 197 epoch2date: function
    test 198 EPS: float
    test 199 EPS0: float
    test 200 EPS02: float
    test 201 EPS1: float
    test 202 EPS1_2: float
    test 203 EPS2: float
    test 204 EPS4: float
    test 205 EPS_2: float
    test 206 Epsg: class
    test 207 epsg: module
    test 208 EPSGError: class
    test 209 Equidistant: class
    test 210 equidistant: function
    test 211 EquidistantExact: class
    test 212 EquidistantGeodSolve: class
    test 213 EquidistantKarney: class
    test 214 equirectangular: function
    test 215 equirectangular3: function
    test 216 equirectangular_: function
    test 217 errors: module
    test 218 etm: module
    test 219 Etm: class
    test 220 ETMError: class
    test 221 euclid: function
    test 222 euclid_: function
    test 223 euclidean: function
    test 224 euclidean_: function
    test 225 ExactTransverseMercator: class
    test 226 exception_chaining: function
    test 227 excessAbc: function
    test 228 excessGirard: function
    test 229 excessKarney: function
    test 230 excessKarney_: function
    test 231 excessLHuilier: function
    test 232 excessQuad: function
    test 233 excessQuad_: function
    test 234 f2e2: function
    test 235 f2e22: function
    test 236 f2e32: function
    test 237 f2f2: function
    test 238 f2f_: function
    test 239 f2n: function
    test 240 f_2f: function
    test 241 F__E: str
    test 242 F__E_: str
    test 243 F__E__: str
    test 244 F__F: str
    test 245 F__F_: str
    test 246 F__F__: str
    test 247 F__G: str
    test 248 F__G_: str
    test 249 F__G__: str
    test 250 F_D: str
    test 251 F_D60: str
    test 252 F_D60_: str
    test 253 F_D60__: str
    test 254 F_D_: str
    test 255 F_D__: str
    test 256 F_DEG: str
    test 257 F_DEG_: str
    test 258 F_DEG__: str
    test 259 F_DM: str
    test 260 F_DM_: str
    test 261 F_DM__: str
    test 262 F_DMS: str
    test 263 F_DMS_: str
    test 264 F_DMS__: str
    test 265 F_MIN: str
    test 266 F_MIN_: str
    test 267 F_MIN__: str
    test 268 F_RAD: str
    test 269 F_RAD_: str
    test 270 F_RAD__: str
    test 271 F_SEC: str
    test 272 F_SEC_: str
    test 273 F_SEC__: str
    test 274 facos1: function
    test 275 false2f: function
    test 276 falsed2f: function
    test 277 fasin1: function
    test 278 fatan: function
    test 279 fatan1: function
    test 280 fatan2: function
    test 281 fathom2m: function
    test 282 favg: function
    test 283 Fcook: class
    test 284 fdot: function
    test 285 Fdot: class
    test 286 fdot3: function
    test 287 Feet: class
    test 288 fhorner: function
    test 289 Fhorner: class
    test 290 fidw: function
    test 291 FIx: class
    test 292 flatLocal: function
    test 293 flatLocal_: function
    test 294 flatPolar: function
    test 295 flatPolar_: function
    test 296 Flinear: class
    test 297 Float: class
    test 298 Float_: class
    test 299 float_: function
    test 300 fmath: module
    test 301 fmean: function
    test 302 fmean_: function
    test 303 Footprint5Tuple: class
    test 304 formy: module
    test 305 Forward4Tuple: class
    test 306 Fpolynomial: class
    test 307 fpolynomial: function
    test 308 fpowers: function
    test 309 fprod: class builtin_function_or_method
    test 310 fractional: function
    test 311 frange: function
    test 312 Frechet: class
    test 313 frechet: module
    test 314 Frechet6Tuple: class
    test 315 frechet_: function
    test 316 FrechetCosineAndoyerLambert: class
    test 317 FrechetCosineForsytheAndoyerLambert: class
    test 318 FrechetCosineLaw: class
    test 319 FrechetDegrees: class
    test 320 FrechetDistanceTo: class
    test 321 FrechetEquirectangular: class
    test 322 FrechetError: class
    test 323 FrechetEuclidean: class
    test 324 FrechetExact: class
    test 325 FrechetFlatLocal: class
    test 326 FrechetFlatPolar: class
    test 327 FrechetHaversine: class
    test 328 FrechetHubeny: class
    test 329 FrechetKarney: class
    test 330 FrechetRadians: class
    test 331 FrechetThomas: class
    test 332 FrechetVincentys: class
    test 333 freduce: class builtin_function_or_method
    test 334 fremainder: function
    test 335 Frustum: class
    test 336 fstats: module
    test 337 fStr: function
    test 338 fstr: function
    test 339 fstrzs: function
    test 340 fStrzs: function
    test 341 fsum: function
    test 342 Fsum: class
    test 343 fsum1: function
    test 344 fsum1_: function
    test 345 Fsum2Tuple: class
    test 346 fsum_: function
    test 347 fsums: module
    test 348 ft2m: function
    test 349 furlong2m: function
    test 350 Fwelford: class
    test 351 Garef: class
    test 352 gars: module
    test 353 GARSError: class
    test 354 GDict: class
    test 355 GeodesicAreaExact: class
    test 356 GeodesicError: class
    test 357 GeodesicExact: class
    test 358 GeodesicLineExact: class
    test 359 GeodesicLineSolve: class
    test 360 GeodesicSolve: class
    test 361 geodesicx: module
    test 362 geodsolve: module
    test 363 GeodSolve12Tuple: class
    test 364 geohash: module
    test 365 Geohash: class
    test 366 GeohashError: class
    test 367 GeoidError: class
    test 368 GeoidG2012B: class
    test 369 geoidHeight2: function
    test 370 GeoidHeight2Tuple: class
    test 371 GeoidHeight5Tuple: class
    test 372 GeoidKarney: class
    test 373 GeoidPGM: class
    test 374 geoids: module
    test 375 Georef: class
    test 376 gnomonic: function
    test 377 Gnomonic: class
    test 378 GnomonicExact: class
    test 379 GnomonicGeodSolve: class
    test 380 GnomonicKarney: class
    test 381 grades: function
    test 382 grades2degrees: function
    test 383 grades2radians: function
    test 384 grades400: function
    test 385 gx: module
    test 386 gxarea: module
    test 387 gxline: module
    test 388 halfs2: function
    test 389 hartzell: function
    test 390 Hausdorff: class
    test 391 hausdorff: module
    test 392 Hausdorff6Tuple: class
    test 393 hausdorff_: function
    test 394 HausdorffCosineAndoyerLambert: class
    test 395 HausdorffCosineForsytheAndoyerLambert: class
    test 396 HausdorffCosineLaw: class
    test 397 HausdorffDegrees: class
    test 398 HausdorffDistanceTo: class
    test 399 HausdorffEquirectangular: class
    test 400 HausdorffError: class
    test 401 HausdorffEuclidean: class
    test 402 HausdorffExact: class
    test 403 HausdorffFlatLocal: class
    test 404 HausdorffFlatPolar: class
    test 405 HausdorffHaversine: class
    test 406 HausdorffHubeny: class
    test 407 HausdorffKarney: class
    test 408 HausdorffRadians: class
    test 409 HausdorffThomas: class
    test 410 HausdorffVincentys: class
    test 411 haversine: function
    test 412 haversine_: function
    test 413 Height: class
    test 414 HeightCubic: class
    test 415 HeightError: class
    test 416 HeightIDW: function
    test 417 HeightIDW2: function
    test 418 HeightIDW3: function
    test 419 HeightIDWcosineAndoyerLambert: class
    test 420 HeightIDWcosineForsytheAndoyerLambert: class
    test 421 HeightIDWcosineLaw: class
    test 422 HeightIDWdistanceTo: class
    test 423 HeightIDWequirectangular: class
    test 424 HeightIDWeuclidean: class
    test 425 HeightIDWflatLocal: class
    test 426 HeightIDWflatPolar: class
    test 427 HeightIDWhaversine: class
    test 428 HeightIDWhubeny: class
    test 429 HeightIDWkarney: class
    test 430 HeightIDWthomas: class
    test 431 HeightIDWvincentys: class
    test 432 HeightLinear: class
    test 433 HeightLSQBiSpline: class
    test 434 heightOf: function
    test 435 heights: module
    test 436 HeightSmoothBiSpline: class
    test 437 Helmert7Tuple: class
    test 438 horizon: function
    test 439 hstr: function
    test 440 hubeny: function
    test 441 hubeny_: function
    test 442 hypot: class builtin_function_or_method
    test 443 hypot1: function
    test 444 hypot2: function
    test 445 hypot2_: function
    test 446 hypot3: function
    test 447 hypot_: class builtin_function_or_method
    test 448 INF: float
    test 449 instr: function
    test 450 inStr: function
    test 451 Int: class
    test 452 INT0: int
    test 453 Int_: class
    test 454 interns: module
    test 455 intersection3d3: function
    test 456 Intersection3Tuple: class
    test 457 IntersectionError: class
    test 458 intersections2: function
    test 459 Inverse10Tuple: class
    test 460 isantipode: function
    test 461 isantipode_: function
    test 462 isbool: function
    test 463 isclass: function
    test 464 isclockwise: function
    test 465 isclose: function
    test 466 iscolinearWith: function
    test 467 iscomplex: function
    test 468 isconvex: function
    test 469 isconvex_: function
    test 470 isenclosedBy: function
    test 471 isenclosedby: function
    test 472 isfinite: function
    test 473 isidentifier: class method_descriptor
    test 474 isinf: class builtin_function_or_method
    test 475 isint: function
    test 476 isint0: function
    test 477 iskeyword: class builtin_function_or_method
    test 478 isLazy: int
    test 479 isnan: class builtin_function_or_method
    test 480 isnear0: function
    test 481 isnear1: function
    test 482 isneg0: function
    test 483 isninf: function
    test 484 isnon0: function
    test 485 isNumpy2: function
    test 486 isodd: function
    test 487 isPoints2: function
    test 488 ispolar: function
    test 489 isscalar: function
    test 490 issequence: function
    test 491 isstr: function
    test 492 issubclassof: function
    test 493 isTuple2: function
    test 494 istuplist: function
    test 495 iterNumpy2: function
    test 496 iterNumpy2over: function
    test 497 iters: module
    test 498 joined: function
    test 499 joined_: function
    test 500 karney: module
    test 501 ktm: module
    test 502 KTMError: class
    test 503 KTransverseMercator: class
    test 504 Lam: class
    test 505 Lam_: class
    test 506 LambertEqualArea: class
    test 507 Lat: class
    test 508 Lat_: class
    test 509 latDMS: function
    test 510 latlon2n_xyz: function
    test 511 LatLon2psxy: class
    test 512 LatLon2PsxyIter: class
    test 513 LatLon2Tuple: class
    test 514 LatLon3Tuple: class
    test 515 LatLon4Tuple: class
    test 516 LatLon_: class
    test 517 LatLonAziRk4Tuple: class
    test 518 latlonBase: module
    test 519 LatLonDatum3Tuple: class
    test 520 LatLonDatum5Tuple: class
    test 521 latlonDMS: function
    test 522 latlonDMS_: function
    test 523 LatLonExact4Tuple: class
    test 524 LatLonPrec3Tuple: class
    test 525 LatLonPrec5Tuple: class
    test 526 lazily: module
    test 527 LazyImportError: class
    test 528 Lcc: class
    test 529 lcc: module
    test 530 LCCError: class
    test 531 len2: function
    test 532 LenError: class
    test 533 LimitError: class
    test 534 limiterrors: function
    test 535 Local9Tuple: class
    test 536 LocalCartesian: class
    test 537 LocalError: class
    test 538 Lon: class
    test 539 Lon_: class
    test 540 lonDMS: function
    test 541 ltp: module
    test 542 Ltp: class
    test 543 ltpTuples: module
    test 544 luneOf: function
    test 545 m2chain: function
    test 546 m2degrees: function
    test 547 m2fathom: function
    test 548 m2ft: function
    test 549 m2furlong: function
    test 550 m2km: function
    test 551 m2NM: function
    test 552 m2radians: function
    test 553 m2SM: function
    test 554 m2toise: function
    test 555 m2yard: function
    test 556 machine: function
    test 557 MANT_DIG: int
    test 558 MANTIS: int
    test 559 map1: function
    test 560 map2: function
    test 561 MAX: float
    test 562 meeus2: function
    test 563 Meeus2Tuple: class
    test 564 Meter: class
    test 565 Meter2: class
    test 566 Meter3: class
    test 567 Meter_: class
    test 568 Mgrs: class
    test 569 mgrs: module
    test 570 Mgrs4Tuple: class
    test 571 Mgrs6Tuple: class
    test 572 MGRSError: class
    test 573 MIN: float
    test 574 modulename: function
    test 575 n2e2: function
    test 576 n2f: function
    test 577 n2f_: function
    test 578 n_xyz2latlon: function
    test 579 n_xyz2philam: function
    test 580 named: module
    test 581 namedTuples: module
    test 582 nameof: function
    test 583 NAN: float
    test 584 nearestOn: function
    test 585 NearestOn2Tuple: class
    test 586 nearestOn3: function
    test 587 NearestOn3Tuple: class
    test 588 nearestOn4: function
    test 589 NearestOn4Tuple: class
    test 590 nearestOn5: function
    test 591 NearestOn5Tuple: class
    test 592 nearestOn6: function
    test 593 NearestOn6Tuple: class
    test 594 NearestOn8Tuple: class
    test 595 Ned: class
    test 596 Ned3Tuple: class
    test 597 Ned4Tuple: class
    test 598 neg: function
    test 599 NEG0: float
    test 600 neg_: function
    test 601 Neighbors8Dict: class
    test 602 NINF: float
    test 603 NN: str
    test 604 norm2: function
    test 605 norm_: function
    test 606 normDMS: function
    test 607 Northing: class
    test 608 notImplemented: function
    test 609 notOverloaded: function
    test 610 Number_: class
    test 611 Numpy2LatLon: class
    test 612 NumPyError: class
    test 613 nvector: module
    test 614 nvectorBase: module
    test 615 OK: str
    test 616 opposing: function
    test 617 opposing_: function
    test 618 Orthographic: class
    test 619 Osgr: class
    test 620 osgr: module
    test 621 OSGRError: class
    test 622 pairs: function
    test 623 parse3d: function
    test 624 parse3llh: function
    test 625 parseDDDMMSS: function
    test 626 parseDMS: function
    test 627 parseDMS2: function
    test 628 ParseError: class
    test 629 parseETM5: function
    test 630 parseMGRS: function
    test 631 parseOSGR: function
    test 632 parseRad: function
    test 633 parseUPS5: function
    test 634 parseUTM: function
    test 635 parseUTM5: function
    test 636 parseUTMUPS5: function
    test 637 parseWM: function
    test 638 perimeterof: function
    test 639 perimeterOf: function
    test 640 PGMError: class
    test 641 Phi: class
    test 642 Phi_: class
    test 643 philam2n_xyz: function
    test 644 PhiLam2Tuple: class
    test 645 PhiLam3Tuple: class
    test 646 PhiLam4Tuple: class
    test 647 PI: float
    test 648 PI2: float
    test 649 PI3: float
    test 650 PI3_2: float
    test 651 PI4: float
    test 652 PI_2: float
    test 653 PI_4: float
    test 654 pierlot: function
    test 655 Point3Tuple: class
    test 656 points: module
    test 657 points2: function
    test 658 Points2Tuple: class
    test 659 PointsError: class
    test 660 PointsIter: class
    test 661 polygon: function
    test 662 PolygonArea: class
    test 663 precision: function
    test 664 Precision_: class
    test 665 print_: function
    test 666 printf: function
    test 667 Property: class
    test 668 property_doc_: function
    test 669 property_RO: class
    test 670 Property_RO: class
    test 671 props: module
    test 672 pygeodesy_abspath: str
    test 673 quadOf: function
    test 674 R_FM: float
    test 675 R_GM: float
    test 676 R_KM: float
    test 677 R_M: float
    test 678 R_MA: float
    test 679 R_MB: float
    test 680 R_NM: float
    test 681 R_SM: float
    test 682 R_VM: float
    test 683 Radians: class
    test 684 radians: class builtin_function_or_method
    test 685 Radians2: class
    test 686 radians2m: function
    test 687 Radians_: class
    test 688 radiansPI: function
    test 689 radiansPI2: function
    test 690 radiansPI_2: function
    test 691 radical2: function
    test 692 Radical2Tuple: class
    test 693 radii11: function
    test 694 Radii11Tuple: class
    test 695 Radius: class
    test 696 Radius_: class
    test 697 randomrangenerator: function
    test 698 RangeError: class
    test 699 rangerrors: function
    test 700 RefFrame: class
    test 701 RefFrameError: function
    test 702 RefFrames: class pygeodesy.trf.RefFrames
    test 703 remainder: class builtin_function_or_method
    test 704 reprs: function
    test 705 ResectionError: class
    test 706 resections: module
    test 707 ResidualError: class
    test 708 Resolutions2Tuple: class
    test 709 Reverse4Tuple: class
    test 710 Rhumb: class
    test 711 Rhumb7Tuple: class
    test 712 Rhumb8Tuple: class
    test 713 RhumbError: class
    test 714 RhumbLine: class
    test 715 RhumbLineSolve: class
    test 716 RhumbOrder2Tuple: class
    test 717 rhumbsolve: module
    test 718 RhumbSolve: class
    test 719 RhumbSolve7Tuple: class
    test 720 rhumbx: module
    test 721 S_DEG: str
    test 722 S_DMS: int
    test 723 S_MIN: str
    test 724 S_RAD: str
    test 725 S_SEC: str
    test 726 S_SEP: str
    test 727 Scalar: class
    test 728 scalar: function
    test 729 Scalar_: class
    test 730 SciPyError: class
    test 731 SciPyWarning: class
    test 732 Shape2Tuple: class
    test 733 signBit: function
    test 734 signOf: function
    test 735 simplify: module
    test 736 simplify1: function
    test 737 simplify2: function
    test 738 simplifyRDP: function
    test 739 simplifyRDPm: function
    test 740 simplifyRW: function
    test 741 simplifyVW: function
    test 742 simplifyVWm: function
    test 743 sincos2: function
    test 744 sincos2_: function
    test 745 sincos2d: function
    test 746 sincos2d_: function
    test 747 snellius3: function
    test 748 soddy4: function
    test 749 Soddy4Tuple: class
    test 750 solveBase: module
    test 751 sphericalBase: module
    test 752 sphericalNvector: module
    test 753 sphericalTrigonometry: module
    test 754 splice: function
    test 755 sqrt0: function
    test 756 sqrt3: function
    test 757 sqrt_a: function
    test 758 Stereographic: class
    test 759 Str: class
    test 760 Str_: class
    test 761 streprs: module
    test 762 strs: function
    test 763 Survey3Tuple: class
    test 764 tan_2: function
    test 765 tand: function
    test 766 tand_: function
    test 767 tanPI_2_2: function
    test 768 thomas: function
    test 769 thomas_: function
    test 770 tienstra: function
    test 771 tienstra7: function
    test 772 Tienstra7Tuple: class
    test 773 toCss: function
    test 774 toDMS: function
    test 775 toEtm8: function
    test 776 toise2m: function
    test 777 toLcc: function
    test 778 toMgrs: function
    test 779 toOsgr: function
    test 780 toUps8: function
    test 781 toUtm: function
    test 782 toUtm8: function
    test 783 toUtmUps8: function
    test 784 toWm: function
    test 785 Transform: class
    test 786 Transform7Tuple: class
    test 787 Transforms: class pygeodesy.datums.Transforms
    test 788 trf: module
    test 789 TRFError: class
    test 790 trfXform: function
    test 791 triAngle: function
    test 792 triAngle4: function
    test 793 TriAngle4Tuple: class
    test 794 Triangle7Tuple: class
    test 795 Triangle8Tuple: class
    test 796 TriangleError: class
    test 797 trilaterate2d2: function
    test 798 trilaterate3d2: function
    test 799 Trilaterate5Tuple: class
    test 800 triSide: function
    test 801 triSide2: function
    test 802 TriSide2Tuple: class
    test 803 triSide4: function
    test 804 TriSide4Tuple: class
    test 805 Tuple2LatLon: class
    test 806 tyr3d: function
    test 807 ub2str: function
    test 808 UnitError: class
    test 809 units: module
    test 810 unroll180: function
    test 811 unrollPI: function
    test 812 unsign0: function
    test 813 unsigned0: function
    test 814 unstr: function
    test 815 unStr: function
    test 816 Ups: class
    test 817 ups: module
    test 818 UPSError: class
    test 819 upsZoneBand5: function
    test 820 utily: module
    test 821 utm: module
    test 822 Utm: class
    test 823 UTMError: class
    test 824 utmups: module
    test 825 UtmUps: function
    test 826 UtmUps2Tuple: class
    test 827 UtmUps4Tuple: class
    test 828 UtmUps5Tuple: class
    test 829 UtmUps8Tuple: class
    test 830 utmupsBase: module
    test 831 UTMUPSError: class
    test 832 UtmUpsLatLon5Tuple: class
    test 833 utmupsValidate: function
    test 834 utmupsValidateOK: function
    test 835 utmupsZoneBand5: function
    test 836 utmZoneBand2: function
    test 837 utmZoneBand5: function
    test 838 vector2d: module
    test 839 Vector2Tuple: class
    test 840 vector3d: module
    test 841 Vector3d: class
    test 842 vector3dBase: module
    test 843 Vector3Tuple: class
    test 844 Vector4Tuple: class
    test 845 VectorError: class
    test 846 version: str
    test 847 VincentyError: class
    test 848 vincentys: function
    test 849 vincentys_: function
    test 850 webmercator: module
    test 851 WebMercatorError: class
    test 852 wgrs: module
    test 853 WGRSError: class
    test 854 wildberger3: function
    test 855 Wm: class
    test 856 wrap180: function
    test 857 wrap360: function
    test 858 wrap90: function
    test 859 wrapPI: function
    test 860 wrapPI2: function
    test 861 wrapPI_2: function
    test 862 Xyz4Tuple: class
    test 863 XyzLocal: class
    test 864 yard2m: function
    test 865 Zone: class
    test 866 isLazy: 0
    test 867 missing in lazily._all_imports: None
    test 868 missing in pygeodesy.__all__: None
    test 869 cmd: /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -c 'import pygeodesy, sys; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 870 PYGEODESY_LAZY_IMPORT=0: 0
    test 871 PYGEODESY_LAZY_IMPORT=1: 0
    test 872 PYGEODESY_LAZY_IMPORT=2: 0
    test 873 PYGEODESY_LAZY_IMPORT=3: 0
    test 874 PYGEODESY_LAZY_IMPORT=4: 0
    test 875 sys: <module 'sys' (built-in)>
    test 876 builtins: <module 'builtins' (built-in)>
    test 877 _frozen_importlib: <module '_frozen_importlib' (frozen)>
    test 878 _imp: <module '_imp' (built-in)>
    test 879 _thread: <module '_thread' (built-in)>
    test 880 _warnings: <module '_warnings' (built-in)>
    test 881 _weakref: <module '_weakref' (built-in)>
    test 882 _io: <module '_io' (built-in)>
    test 883 marshal: <module 'marshal' (built-in)>
    test 884 posix: <module 'posix' (built-in)>
    test 885 _frozen_importlib_external: <module '_frozen_importlib_external' (frozen)>
    test 886 time: <module 'time' (built-in)>
    test 887 zipimport: <module 'zipimport' (frozen)>
    test 888 _codecs: <module '_codecs' (built-in)>
    test 889 codecs: <module 'codecs' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/codecs.py'>
    test 890 encodings.aliases: <module 'encodings.aliases' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/aliases.py'>
    test 891 encodings: <module 'encodings' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/__init__.py'>
    test 892 encodings.utf_8: <module 'encodings.utf_8' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/utf_8.py'>
    test 893 _signal: <module '_signal' (built-in)>
    test 894 _abc: <module '_abc' (built-in)>
    test 895 abc: <module 'abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/abc.py'>
    test 896 io: <module 'io' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/io.py'>
    test 897 __main__: <module '__main__' from './test/testLazily.py'>
    test 898 warnings: <module 'warnings' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/warnings.py'>
    test 899 _stat: <module '_stat' (built-in)>
    test 900 stat: <module 'stat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/stat.py'>
    test 901 _collections_abc: <module '_collections_abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py'>
    test 902 genericpath: <module 'genericpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/genericpath.py'>
    test 903 posixpath: <module 'posixpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/posixpath.py'>
    test 904 os.path: <module 'posixpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/posixpath.py'>
    test 905 os: <module 'os' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/os.py'>
    test 906 _sitebuiltins: <module '_sitebuiltins' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_sitebuiltins.py'>
    test 907 site: <module 'site' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site.py'>
    test 908 importlib._bootstrap: <module '_frozen_importlib' (frozen)>
    test 909 importlib._bootstrap_external: <module '_frozen_importlib_external' (frozen)>
    test 910 importlib: <module 'importlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/__init__.py'>
    test 911 importlib.machinery: <module 'importlib.machinery' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/machinery.py'>
    test 912 importlib._abc: <module 'importlib._abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/_abc.py'>
    test 913 itertools: <module 'itertools' (built-in)>
    test 914 keyword: <module 'keyword' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/keyword.py'>
    test 915 _operator: <module '_operator' (built-in)>
    test 916 operator: <module 'operator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/operator.py'>
    test 917 reprlib: <module 'reprlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/reprlib.py'>
    test 918 _collections: <module '_collections' (built-in)>
    test 919 collections: <module 'collections' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/__init__.py'>
    test 920 types: <module 'types' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/types.py'>
    test 921 _functools: <module '_functools' (built-in)>
    test 922 functools: <module 'functools' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/functools.py'>
    test 923 contextlib: <module 'contextlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py'>
    test 924 importlib.util: <module 'importlib.util' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/util.py'>
    test 925 runpy: <module 'runpy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/runpy.py'>
    test 926 coverage.version: <module 'coverage.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/version.py'>
    test 927 atexit: <module 'atexit' (built-in)>
    test 928 _ast: <module '_ast' (built-in)>
    test 929 enum: <module 'enum' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/enum.py'>
    test 930 ast: <module 'ast' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ast.py'>
    test 931 _opcode: <module '_opcode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_opcode.cpython-310-darwin.so'>
    test 932 opcode: <module 'opcode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/opcode.py'>
    test 933 dis: <module 'dis' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/dis.py'>
    test 934 collections.abc: <module 'collections.abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/abc.py'>
    test 935 _sre: <module '_sre' (built-in)>
    test 936 sre_constants: <module 'sre_constants' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_constants.py'>
    test 937 sre_parse: <module 'sre_parse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_parse.py'>
    test 938 sre_compile: <module 'sre_compile' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_compile.py'>
    test 939 _locale: <module '_locale' (built-in)>
    test 940 copyreg: <module 'copyreg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copyreg.py'>
    test 941 re: <module 're' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/re.py'>
    test 942 token: <module 'token' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/token.py'>
    test 943 tokenize: <module 'tokenize' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/tokenize.py'>
    test 944 linecache: <module 'linecache' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/linecache.py'>
    test 945 inspect: <module 'inspect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/inspect.py'>
    test 946 errno: <module 'errno' (built-in)>
    test 947 signal: <module 'signal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/signal.py'>
    test 948 _weakrefset: <module '_weakrefset' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_weakrefset.py'>
    test 949 threading: <module 'threading' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py'>
    test 950 fcntl: <module 'fcntl' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/fcntl.cpython-310-darwin.so'>
    test 951 _posixsubprocess: <module '_posixsubprocess' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_posixsubprocess.cpython-310-darwin.so'>
    test 952 select: <module 'select' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/select.cpython-310-darwin.so'>
    test 953 math: <module 'math' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/math.cpython-310-darwin.so'>
    test 954 selectors: <module 'selectors' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/selectors.py'>
    test 955 subprocess: <module 'subprocess' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py'>
    test 956 platform: <module 'platform' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/platform.py'>
    test 957 traceback: <module 'traceback' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/traceback.py'>
    test 958 coverage.env: <module 'coverage.env' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/env.py'>
    test 959 _hashlib: <module '_hashlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_hashlib.cpython-310-darwin.so'>
    test 960 _blake2: <module '_blake2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_blake2.cpython-310-darwin.so'>
    test 961 hashlib: <module 'hashlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/hashlib.py'>
    test 962 fnmatch: <module 'fnmatch' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/fnmatch.py'>
    test 963 ntpath: <module 'ntpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ntpath.py'>
    test 964 configparser: <module 'configparser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/configparser.py'>
    test 965 _struct: <module '_struct' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_struct.cpython-310-darwin.so'>
    test 966 struct: <module 'struct' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/struct.py'>
    test 967 _compat_pickle: <module '_compat_pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_compat_pickle.py'>
    test 968 _pickle: <module '_pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_pickle.cpython-310-darwin.so'>
    test 969 pickle: <module 'pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/pickle.py'>
    test 970 shlex: <module 'shlex' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/shlex.py'>
    test 971 coverage.backward: <module 'coverage.backward' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/backward.py'>
    test 972 locale: <module 'locale' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/locale.py'>
    test 973 coverage.misc: <module 'coverage.misc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/misc.py'>
    test 974 coverage.files: <module 'coverage.files' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/files.py'>
    test 975 coverage.report: <module 'coverage.report' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/report.py'>
    test 976 coverage.annotate: <module 'coverage.annotate' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/annotate.py'>
    test 977 coverage.debug: <module 'coverage.debug' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/debug.py'>
    test 978 coverage.pytracer: <module 'coverage.pytracer' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/pytracer.py'>
    test 979 coverage.tracer: <module 'coverage.tracer' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/tracer.cpython-310-darwin.so'>
    test 980 coverage.collector: <module 'coverage.collector' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/collector.py'>
    test 981 coverage.config: <module 'coverage.config' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/config.py'>
    test 982 glob: <module 'glob' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/glob.py'>
    test 983 _json: <module '_json' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_json.cpython-310-darwin.so'>
    test 984 json.scanner: <module 'json.scanner' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/scanner.py'>
    test 985 json.decoder: <module 'json.decoder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py'>
    test 986 json.encoder: <module 'json.encoder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py'>
    test 987 json: <module 'json' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py'>
    test 988 textwrap: <module 'textwrap' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/textwrap.py'>
    test 989 gettext: <module 'gettext' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/gettext.py'>
    test 990 optparse: <module 'optparse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/optparse.py'>
    test 991 _bisect: <module '_bisect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_bisect.cpython-310-darwin.so'>
    test 992 bisect: <module 'bisect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bisect.py'>
    test 993 _random: <module '_random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_random.cpython-310-darwin.so'>
    test 994 _sha512: <module '_sha512' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_sha512.cpython-310-darwin.so'>
    test 995 random: <module 'random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/random.py'>
    test 996 _socket: <module '_socket' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_socket.cpython-310-darwin.so'>
    test 997 array: <module 'array' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/array.cpython-310-darwin.so'>
    test 998 socket: <module 'socket' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/socket.py'>
    test 999 coverage.data: <module 'coverage.data' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/data.py'>
    test 1000 _datetime: <module '_datetime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_datetime.cpython-310-darwin.so'>
    test 1001 datetime: <module 'datetime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/datetime.py'>
    test 1002 zlib: <module 'zlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/zlib.cpython-310-darwin.so'>
    test 1003 _compression: <module '_compression' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_compression.py'>
    test 1004 _bz2: <module '_bz2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_bz2.cpython-310-darwin.so'>
    test 1005 bz2: <module 'bz2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bz2.py'>
    test 1006 _lzma: <module '_lzma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_lzma.cpython-310-darwin.so'>
    test 1007 lzma: <module 'lzma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lzma.py'>
    test 1008 shutil: <module 'shutil' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/shutil.py'>
    test 1009 coverage.results: <module 'coverage.results' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/results.py'>
    test 1010 coverage.templite: <module 'coverage.templite' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/templite.py'>
    test 1011 coverage.html: <module 'coverage.html' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/html.py'>
    test 1012 coverage.plugin: <module 'coverage.plugin' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/plugin.py'>
    test 1013 coverage.plugin_support: <module 'coverage.plugin_support' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/plugin_support.py'>
    test 1014 coverage.bytecode: <module 'coverage.bytecode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/bytecode.py'>
    test 1015 coverage.phystokens: <module 'coverage.phystokens' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/phystokens.py'>
    test 1016 coverage.parser: <module 'coverage.parser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/parser.py'>
    test 1017 coverage.python: <module 'coverage.python' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/python.py'>
    test 1018 coverage.summary: <module 'coverage.summary' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/summary.py'>
    test 1019 xml: <module 'xml' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/__init__.py'>
    test 1020 xml.dom.domreg: <module 'xml.dom.domreg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/domreg.py'>
    test 1021 xml.dom: <module 'xml.dom' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/__init__.py'>
    test 1022 xml.dom.minicompat: <module 'xml.dom.minicompat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/minicompat.py'>
    test 1023 weakref: <module 'weakref' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/weakref.py'>
    test 1024 copy: <module 'copy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py'>
    test 1025 xml.dom.NodeFilter: <module 'xml.dom.NodeFilter' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/NodeFilter.py'>
    test 1026 xml.dom.xmlbuilder: <module 'xml.dom.xmlbuilder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/xmlbuilder.py'>
    test 1027 xml.dom.minidom: <module 'xml.dom.minidom' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/minidom.py'>
    test 1028 coverage.xmlreport: <module 'coverage.xmlreport' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/xmlreport.py'>
    test 1029 multiprocessing.process: <module 'multiprocessing.process' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/process.py'>
    test 1030 multiprocessing.reduction: <module 'multiprocessing.reduction' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/reduction.py'>
    test 1031 multiprocessing.context: <module 'multiprocessing.context' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/context.py'>
    test 1032 __mp_main__: <module 'coverage.__main__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/__main__.py'>
    test 1033 multiprocessing: <module 'multiprocessing' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/__init__.py'>
    test 1034 coverage.multiproc: <module 'coverage.multiproc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/multiproc.py'>
    test 1035 coverage.control: <module 'coverage.control' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/control.py'>
    test 1036 coverage: <module 'coverage' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/__init__.py'>
    test 1037 __future__: <module '__future__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/__future__.py'>
    test 1038 coverage.execfile: <module 'coverage.execfile' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/execfile.py'>
    test 1039 coverage.cmdline: <module 'coverage.cmdline' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage-4.5.4-py3.10-macosx-10.9-universal2.egg/coverage/cmdline.py'>
    test 1040 pygeodesy.interns: <module 'pygeodesy.interns' from './pygeodesy/interns.py'>
    test 1041 pygeodesy.lazily: <module 'pygeodesy.lazily' from './pygeodesy/lazily.py'>
    test 1042 pygeodesy.errors: <module 'pygeodesy.errors' from './pygeodesy/errors.py'>
    test 1043 numbers: <module 'numbers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/numbers.py'>
    test 1044 pygeodesy.basics: <module 'pygeodesy.basics' from './pygeodesy/basics.py'>
    test 1045 pygeodesy.props: <module 'pygeodesy.props' from './pygeodesy/props.py'>
    test 1046 pygeodesy.streprs: <module 'pygeodesy.streprs' from './pygeodesy/streprs.py'>
    test 1047 pygeodesy.named: <module 'pygeodesy.named' from './pygeodesy/named.py'>
    test 1048 _string: <module '_string' (built-in)>
    test 1049 string: <module 'string' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/string.py'>
    test 1050 pygeodesy.dms: <module 'pygeodesy.dms' from './pygeodesy/dms.py'>
    test 1051 pygeodesy.units: <module 'pygeodesy.units' from './pygeodesy/units.py'>
    test 1052 pygeodesy.fsums: <module 'pygeodesy.fsums' from './pygeodesy/fsums.py'>
    test 1053 pygeodesy.fmath: <module 'pygeodesy.fmath' from './pygeodesy/fmath.py'>
    test 1054 pygeodesy.namedTuples: <module 'pygeodesy.namedTuples' from './pygeodesy/namedTuples.py'>
    test 1055 pygeodesy.utily: <module 'pygeodesy.utily' from './pygeodesy/utily.py'>
    test 1056 pygeodesy.ellipsoids: <module 'pygeodesy.ellipsoids' from './pygeodesy/ellipsoids.py'>
    test 1057 pygeodesy.datums: <module 'pygeodesy.datums' from './pygeodesy/datums.py'>
    test 1058 pygeodesy.karney: <module 'pygeodesy.karney' from './pygeodesy/karney.py'>
    test 1059 pygeodesy.albers: <module 'pygeodesy.albers' from './pygeodesy/albers.py'>
    test 1060 pygeodesy.iters: <module 'pygeodesy.iters' from './pygeodesy/iters.py'>
    test 1061 pygeodesy.vector3dBase: <module 'pygeodesy.vector3dBase' from './pygeodesy/vector3dBase.py'>
    test 1062 pygeodesy.vector3d: <module 'pygeodesy.vector3d' from './pygeodesy/vector3d.py'>
    test 1063 pygeodesy.cartesianBase: <module 'pygeodesy.cartesianBase' from './pygeodesy/cartesianBase.py'>
    test 1064 pygeodesy.formy: <module 'pygeodesy.formy' from './pygeodesy/formy.py'>
    test 1065 pygeodesy.vector2d: <module 'pygeodesy.vector2d' from './pygeodesy/vector2d.py'>
    test 1066 pygeodesy.latlonBase: <module 'pygeodesy.latlonBase' from './pygeodesy/latlonBase.py'>
    test 1067 pygeodesy.ellipsoidalBase: <module 'pygeodesy.ellipsoidalBase' from './pygeodesy/ellipsoidalBase.py'>
    test 1068 pygeodesy.azimuthal: <module 'pygeodesy.azimuthal' from './pygeodesy/azimuthal.py'>
    test 1069 pygeodesy.deprecated: <module 'pygeodesy.deprecated' from './pygeodesy/deprecated/__init__.py'>
    test 1070 pygeodesy.deprecated.bases: <module 'pygeodesy.deprecated.bases' from './pygeodesy/deprecated/bases.py'>
    test 1071 pygeodesy.nvectorBase: <module 'pygeodesy.nvectorBase' from './pygeodesy/nvectorBase.py'>
    test 1072 pygeodesy.points: <module 'pygeodesy.points' from './pygeodesy/points.py'>
    test 1073 pygeodesy.clipy: <module 'pygeodesy.clipy' from './pygeodesy/clipy.py'>
    test 1074 pygeodesy.css: <module 'pygeodesy.css' from './pygeodesy/css.py'>
    test 1075 pygeodesy.deprecated.datum: <module 'pygeodesy.deprecated.datum' from './pygeodesy/deprecated/datum.py'>
    test 1076 pygeodesy.ecef: <module 'pygeodesy.ecef' from './pygeodesy/ecef.py'>
    test 1077 urllib: <module 'urllib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/__init__.py'>
    test 1078 binascii: <module 'binascii' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/binascii.cpython-310-darwin.so'>
    test 1079 base64: <module 'base64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/base64.py'>
    test 1080 email: <module 'email' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/__init__.py'>
    test 1081 http: <module 'http' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/http/__init__.py'>
    test 1082 email.errors: <module 'email.errors' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/errors.py'>
    test 1083 email.quoprimime: <module 'email.quoprimime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/quoprimime.py'>
    test 1084 email.base64mime: <module 'email.base64mime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/base64mime.py'>
    test 1085 quopri: <module 'quopri' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/quopri.py'>
    test 1086 email.encoders: <module 'email.encoders' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/encoders.py'>
    test 1087 email.charset: <module 'email.charset' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/charset.py'>
    test 1088 email.header: <module 'email.header' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/header.py'>
    test 1089 urllib.parse: <module 'urllib.parse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/parse.py'>
    test 1090 calendar: <module 'calendar' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/calendar.py'>
    test 1091 email._parseaddr: <module 'email._parseaddr' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/_parseaddr.py'>
    test 1092 email.utils: <module 'email.utils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/utils.py'>
    test 1093 email._policybase: <module 'email._policybase' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/_policybase.py'>
    test 1094 email.feedparser: <module 'email.feedparser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/feedparser.py'>
    test 1095 email.parser: <module 'email.parser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/parser.py'>
    test 1096 uu: <module 'uu' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/uu.py'>
    test 1097 email._encoded_words: <module 'email._encoded_words' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/_encoded_words.py'>
    test 1098 email.iterators: <module 'email.iterators' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/iterators.py'>
    test 1099 email.message: <module 'email.message' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/email/message.py'>
    test 1100 _ssl: <module '_ssl' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_ssl.cpython-310-darwin.so'>
    test 1101 ssl: <module 'ssl' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ssl.py'>
    test 1102 http.client: <module 'http.client' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/http/client.py'>
    test 1103 tempfile: <module 'tempfile' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/tempfile.py'>
    test 1104 urllib.response: <module 'urllib.response' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/response.py'>
    test 1105 urllib.error: <module 'urllib.error' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/error.py'>
    test 1106 _scproxy: <module '_scproxy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_scproxy.cpython-310-darwin.so'>
    test 1107 urllib.request: <module 'urllib.request' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/request.py'>
    test 1108 pygeodesy.elevations: <module 'pygeodesy.elevations' from './pygeodesy/elevations.py'>
    test 1109 pygeodesy.ellipsoidalBaseDI: <module 'pygeodesy.ellipsoidalBaseDI' from './pygeodesy/ellipsoidalBaseDI.py'>
    test 1110 pygeodesy.ellipsoidalExact: <module 'pygeodesy.ellipsoidalExact' from './pygeodesy/ellipsoidalExact.py'>
    test 1111 pygeodesy.ellipsoidalGeodSolve: <module 'pygeodesy.ellipsoidalGeodSolve' from './pygeodesy/ellipsoidalGeodSolve.py'>
    test 1112 pygeodesy.ellipsoidalKarney: <module 'pygeodesy.ellipsoidalKarney' from './pygeodesy/ellipsoidalKarney.py'>
    test 1113 pygeodesy.ltpTuples: <module 'pygeodesy.ltpTuples' from './pygeodesy/ltpTuples.py'>
    test 1114 pygeodesy.ellipsoidalNvector: <module 'pygeodesy.ellipsoidalNvector' from './pygeodesy/ellipsoidalNvector.py'>
    test 1115 pygeodesy.ellipsoidalVincenty: <module 'pygeodesy.ellipsoidalVincenty' from './pygeodesy/ellipsoidalVincenty.py'>
    test 1116 pygeodesy.elliptic: <module 'pygeodesy.elliptic' from './pygeodesy/elliptic.py'>
    test 1117 pygeodesy.utmupsBase: <module 'pygeodesy.utmupsBase' from './pygeodesy/utmupsBase.py'>
    test 1118 pygeodesy.ups: <module 'pygeodesy.ups' from './pygeodesy/ups.py'>
    test 1119 pygeodesy.utm: <module 'pygeodesy.utm' from './pygeodesy/utm.py'>
    test 1120 pygeodesy.epsg: <module 'pygeodesy.epsg' from './pygeodesy/epsg.py'>
    test 1121 pygeodesy.etm: <module 'pygeodesy.etm' from './pygeodesy/etm.py'>
    test 1122 pygeodesy.frechet: <module 'pygeodesy.frechet' from './pygeodesy/frechet.py'>
    test 1123 pygeodesy.fstats: <module 'pygeodesy.fstats' from './pygeodesy/fstats.py'>
    test 1124 pygeodesy.gars: <module 'pygeodesy.gars' from './pygeodesy/gars.py'>
    test 1125 pygeodesy.geodesicx.gxbases: <module 'pygeodesy.geodesicx.gxbases' from './pygeodesy/geodesicx/gxbases.py'>
    test 1126 pygeodesy.geodesicx.gxline: <module 'pygeodesy.geodesicx.gxline' from './pygeodesy/geodesicx/gxline.py'>
    test 1127 pygeodesy.geodesicx.gx: <module 'pygeodesy.geodesicx.gx' from './pygeodesy/geodesicx/gx.py'>
    test 1128 pygeodesy.geodesicx.gxarea: <module 'pygeodesy.geodesicx.gxarea' from './pygeodesy/geodesicx/gxarea.py'>
    test 1129 pygeodesy.geodesicx: <module 'pygeodesy.geodesicx' from './pygeodesy/geodesicx/__init__.py'>
    test 1130 pygeodesy.solveBase: <module 'pygeodesy.solveBase' from './pygeodesy/solveBase.py'>
    test 1131 pygeodesy.geodsolve: <module 'pygeodesy.geodsolve' from './pygeodesy/geodsolve.py'>
    test 1132 pygeodesy.geohash: <module 'pygeodesy.geohash' from './pygeodesy/geohash.py'>
    test 1133 pygeodesy.heights: <module 'pygeodesy.heights' from './pygeodesy/heights.py'>
    test 1134 pygeodesy.geoids: <module 'pygeodesy.geoids' from './pygeodesy/geoids.py'>
    test 1135 pygeodesy.hausdorff: <module 'pygeodesy.hausdorff' from './pygeodesy/hausdorff.py'>
    test 1136 cmath: <module 'cmath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/cmath.cpython-310-darwin.so'>
    test 1137 pygeodesy.ktm: <module 'pygeodesy.ktm' from './pygeodesy/ktm.py'>
    test 1138 pygeodesy.lcc: <module 'pygeodesy.lcc' from './pygeodesy/lcc.py'>
    test 1139 pygeodesy.ltp: <module 'pygeodesy.ltp' from './pygeodesy/ltp.py'>
    test 1140 pygeodesy.mgrs: <module 'pygeodesy.mgrs' from './pygeodesy/mgrs.py'>
    test 1141 pygeodesy.deprecated.nvector: <module 'pygeodesy.deprecated.nvector' from './pygeodesy/deprecated/nvector.py'>
    test 1142 pygeodesy.osgr: <module 'pygeodesy.osgr' from './pygeodesy/osgr.py'>
    test 1143 pygeodesy.resections: <module 'pygeodesy.resections' from './pygeodesy/resections.py'>
    test 1144 pygeodesy.rhumbx: <module 'pygeodesy.rhumbx' from './pygeodesy/rhumbx.py'>
    test 1145 pygeodesy.rhumbsolve: <module 'pygeodesy.rhumbsolve' from './pygeodesy/rhumbsolve.py'>
    test 1146 pygeodesy.simplify: <module 'pygeodesy.simplify' from './pygeodesy/simplify.py'>
    test 1147 pygeodesy.sphericalBase: <module 'pygeodesy.sphericalBase' from './pygeodesy/sphericalBase.py'>
    test 1148 pygeodesy.sphericalNvector: <module 'pygeodesy.sphericalNvector' from './pygeodesy/sphericalNvector.py'>
    test 1149 pygeodesy.sphericalTrigonometry: <module 'pygeodesy.sphericalTrigonometry' from './pygeodesy/sphericalTrigonometry.py'>
    test 1150 pygeodesy.trf: <module 'pygeodesy.trf' from './pygeodesy/trf.py'>
    test 1151 pygeodesy.utmups: <module 'pygeodesy.utmups' from './pygeodesy/utmups.py'>
    test 1152 pygeodesy.webmercator: <module 'pygeodesy.webmercator' from './pygeodesy/webmercator.py'>
    test 1153 pygeodesy.wgrs: <module 'pygeodesy.wgrs' from './pygeodesy/wgrs.py'>
    test 1154 pygeodesy: <module 'pygeodesy' from './pygeodesy/__init__.py'>
    test 1155 geographiclib: <module 'geographiclib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/__init__.py'>
    test 1156 numpy._globals: <module 'numpy._globals' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_globals.py'>
    test 1157 numpy.__config__: <module 'numpy.__config__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/__config__.py'>
    test 1158 numpy._distributor_init: <module 'numpy._distributor_init' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_distributor_init.py'>
    test 1159 numpy._version: <module 'numpy._version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_version.py'>
    test 1160 numpy.version: <module 'numpy.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/version.py'>
    test 1161 numpy.core._multiarray_umath: <module 'numpy.core._multiarray_umath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_multiarray_umath.cpython-310-darwin.so'>
    test 1162 numpy.compat._inspect: <module 'numpy.compat._inspect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/_inspect.py'>
    test 1163 pathlib: <module 'pathlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/pathlib.py'>
    test 1164 numpy.compat.py3k: <module 'numpy.compat.py3k' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/py3k.py'>
    test 1165 numpy.compat: <module 'numpy.compat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/__init__.py'>
    test 1166 numpy.core.overrides: <module 'numpy.core.overrides' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/overrides.py'>
    test 1167 numpy.core.multiarray: <module 'numpy.core.multiarray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/multiarray.py'>
    test 1168 numpy.core.umath: <module 'numpy.core.umath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/umath.py'>
    test 1169 numpy.core._string_helpers: <module 'numpy.core._string_helpers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_string_helpers.py'>
    test 1170 numpy.core._dtype: <module 'numpy.core._dtype' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_dtype.py'>
    test 1171 numpy.core._type_aliases: <module 'numpy.core._type_aliases' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_type_aliases.py'>
    test 1172 numpy.core.numerictypes: <module 'numpy.core.numerictypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/numerictypes.py'>
    test 1173 numpy.core._exceptions: <module 'numpy.core._exceptions' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_exceptions.py'>
    test 1174 numpy.core._methods: <module 'numpy.core._methods' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_methods.py'>
    test 1175 numpy.core.fromnumeric: <module 'numpy.core.fromnumeric' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/fromnumeric.py'>
    test 1176 numpy.core.shape_base: <module 'numpy.core.shape_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/shape_base.py'>
    test 1177 numpy.core._ufunc_config: <module 'numpy.core._ufunc_config' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_ufunc_config.py'>
    test 1178 numpy.core.arrayprint: <module 'numpy.core.arrayprint' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/arrayprint.py'>
    test 1179 numpy.core._asarray: <module 'numpy.core._asarray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_asarray.py'>
    test 1180 numpy.core.numeric: <module 'numpy.core.numeric' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/numeric.py'>
    test 1181 numpy.core.defchararray: <module 'numpy.core.defchararray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/defchararray.py'>
    test 1182 numpy.core.records: <module 'numpy.core.records' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/records.py'>
    test 1183 numpy.core.memmap: <module 'numpy.core.memmap' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/memmap.py'>
    test 1184 numpy.core.function_base: <module 'numpy.core.function_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/function_base.py'>
    test 1185 numpy.core._machar: <module 'numpy.core._machar' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_machar.py'>
    test 1186 numpy.core.getlimits: <module 'numpy.core.getlimits' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/getlimits.py'>
    test 1187 numpy.core.einsumfunc: <module 'numpy.core.einsumfunc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/einsumfunc.py'>
    test 1188 numpy.core._multiarray_tests: <module 'numpy.core._multiarray_tests' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_multiarray_tests.cpython-310-darwin.so'>
    test 1189 numpy.core._add_newdocs: <module 'numpy.core._add_newdocs' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_add_newdocs.py'>
    test 1190 numpy.core._add_newdocs_scalars: <module 'numpy.core._add_newdocs_scalars' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_add_newdocs_scalars.py'>
    test 1191 numpy.core._dtype_ctypes: <module 'numpy.core._dtype_ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_dtype_ctypes.py'>
    test 1192 _ctypes: <module '_ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_ctypes.cpython-310-darwin.so'>
    test 1193 ctypes._endian: <module 'ctypes._endian' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ctypes/_endian.py'>
    test 1194 ctypes: <module 'ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ctypes/__init__.py'>
    test 1195 numpy.core._internal: <module 'numpy.core._internal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_internal.py'>
    test 1196 numpy._pytesttester: <module 'numpy._pytesttester' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_pytesttester.py'>
    test 1197 numpy.core: <module 'numpy.core' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/__init__.py'>
    test 1198 numpy.lib.mixins: <module 'numpy.lib.mixins' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/mixins.py'>
    test 1199 numpy.lib.ufunclike: <module 'numpy.lib.ufunclike' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/ufunclike.py'>
    test 1200 numpy.lib.type_check: <module 'numpy.lib.type_check' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/type_check.py'>
    test 1201 numpy.lib.scimath: <module 'numpy.lib.scimath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/scimath.py'>
    test 1202 numpy.lib.stride_tricks: <module 'numpy.lib.stride_tricks' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/stride_tricks.py'>
    test 1203 numpy.lib.twodim_base: <module 'numpy.lib.twodim_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/twodim_base.py'>
    test 1204 numpy.linalg._umath_linalg: <module 'numpy.linalg._umath_linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/_umath_linalg.cpython-310-darwin.so'>
    test 1205 numpy.linalg.linalg: <module 'numpy.linalg.linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/linalg.py'>
    test 1206 numpy.linalg: <module 'numpy.linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/__init__.py'>
    test 1207 numpy.matrixlib.defmatrix: <module 'numpy.matrixlib.defmatrix' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/matrixlib/defmatrix.py'>
    test 1208 numpy.matrixlib: <module 'numpy.matrixlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/matrixlib/__init__.py'>
    test 1209 numpy.lib.histograms: <module 'numpy.lib.histograms' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/histograms.py'>
    test 1210 numpy.lib.function_base: <module 'numpy.lib.function_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/function_base.py'>
    test 1211 numpy.lib.index_tricks: <module 'numpy.lib.index_tricks' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/index_tricks.py'>
    test 1212 numpy.lib.nanfunctions: <module 'numpy.lib.nanfunctions' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/nanfunctions.py'>
    test 1213 numpy.lib.shape_base: <module 'numpy.lib.shape_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/shape_base.py'>
    test 1214 numpy.lib.polynomial: <module 'numpy.lib.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/polynomial.py'>
    test 1215 numpy.lib.utils: <module 'numpy.lib.utils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/utils.py'>
    test 1216 numpy.lib.arraysetops: <module 'numpy.lib.arraysetops' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arraysetops.py'>
    test 1217 numpy.lib.format: <module 'numpy.lib.format' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/format.py'>
    test 1218 numpy.lib._datasource: <module 'numpy.lib._datasource' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_datasource.py'>
    test 1219 numpy.lib._iotools: <module 'numpy.lib._iotools' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_iotools.py'>
    test 1220 numpy.lib.npyio: <module 'numpy.lib.npyio' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/npyio.py'>
    test 1221 numpy.lib.arrayterator: <module 'numpy.lib.arrayterator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arrayterator.py'>
    test 1222 numpy.lib.arraypad: <module 'numpy.lib.arraypad' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arraypad.py'>
    test 1223 numpy.lib._version: <module 'numpy.lib._version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_version.py'>
    test 1224 numpy.lib: <module 'numpy.lib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/__init__.py'>
    test 1225 numpy.fft._pocketfft_internal: <module 'numpy.fft._pocketfft_internal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/_pocketfft_internal.cpython-310-darwin.so'>
    test 1226 numpy.fft._pocketfft: <module 'numpy.fft._pocketfft' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/_pocketfft.py'>
    test 1227 numpy.fft.helper: <module 'numpy.fft.helper' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/helper.py'>
    test 1228 numpy.fft: <module 'numpy.fft' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/__init__.py'>
    test 1229 numpy.polynomial.polyutils: <module 'numpy.polynomial.polyutils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/polyutils.py'>
    test 1230 numpy.polynomial._polybase: <module 'numpy.polynomial._polybase' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/_polybase.py'>
    test 1231 numpy.polynomial.polynomial: <module 'numpy.polynomial.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/polynomial.py'>
    test 1232 numpy.polynomial.chebyshev: <module 'numpy.polynomial.chebyshev' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/chebyshev.py'>
    test 1233 numpy.polynomial.legendre: <module 'numpy.polynomial.legendre' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/legendre.py'>
    test 1234 numpy.polynomial.hermite: <module 'numpy.polynomial.hermite' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/hermite.py'>
    test 1235 numpy.polynomial.hermite_e: <module 'numpy.polynomial.hermite_e' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/hermite_e.py'>
    test 1236 numpy.polynomial.laguerre: <module 'numpy.polynomial.laguerre' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/laguerre.py'>
    test 1237 numpy.polynomial: <module 'numpy.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/__init__.py'>
    test 1238 cython_runtime: <module 'cython_runtime'>
    test 1239 _cython_0_29_30: <module '_cython_0_29_30'>
    test 1240 numpy.random._common: <module 'numpy.random._common' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_common.cpython-310-darwin.so'>
    test 1241 hmac: <module 'hmac' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/hmac.py'>
    test 1242 secrets: <module 'secrets' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/secrets.py'>
    test 1243 numpy.random.bit_generator: <module 'numpy.random.bit_generator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/bit_generator.cpython-310-darwin.so'>
    test 1244 numpy.random._bounded_integers: <module 'numpy.random._bounded_integers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_bounded_integers.cpython-310-darwin.so'>
    test 1245 numpy.random._mt19937: <module 'numpy.random._mt19937' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_mt19937.cpython-310-darwin.so'>
    test 1246 numpy.random.mtrand: <module 'numpy.random.mtrand' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/mtrand.cpython-310-darwin.so'>
    test 1247 numpy.random._philox: <module 'numpy.random._philox' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_philox.cpython-310-darwin.so'>
    test 1248 numpy.random._pcg64: <module 'numpy.random._pcg64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_pcg64.cpython-310-darwin.so'>
    test 1249 numpy.random._sfc64: <module 'numpy.random._sfc64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_sfc64.cpython-310-darwin.so'>
    test 1250 numpy.random._generator: <module 'numpy.random._generator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_generator.cpython-310-darwin.so'>
    test 1251 numpy.random._pickle: <module 'numpy.random._pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_pickle.py'>
    test 1252 numpy.random: <module 'numpy.random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/__init__.py'>
    test 1253 numpy.ctypeslib: <module 'numpy.ctypeslib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ctypeslib.py'>
    test 1254 numpy.ma.core: <module 'numpy.ma.core' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/core.py'>
    test 1255 numpy.ma.extras: <module 'numpy.ma.extras' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/extras.py'>
    test 1256 numpy.ma: <module 'numpy.ma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/__init__.py'>
    test 1257 numpy: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/__init__.py'>
    test 1258 scipy._lib._testutils: <module 'scipy._lib._testutils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_testutils.py'>
    test 1259 scipy._lib: <module 'scipy._lib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/__init__.py'>
    test 1260 scipy._lib.deprecation: <module 'scipy._lib.deprecation' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/deprecation.py'>
    test 1261 scipy.__config__: <module 'scipy.__config__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/__config__.py'>
    test 1262 scipy.version: <module 'scipy.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/version.py'>
    test 1263 scipy._distributor_init: <module 'scipy._distributor_init' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_distributor_init.py'>
    test 1264 scipy._lib._pep440: <module 'scipy._lib._pep440' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_pep440.py'>
    test 1265 scipy._lib._ccallback_c: <module 'scipy._lib._ccallback_c' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_ccallback_c.cpython-310-darwin.so'>
    test 1266 scipy._lib._ccallback: <module 'scipy._lib._ccallback' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_ccallback.py'>
    test 1267 scipy: <module 'scipy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/__init__.py'>
    test 1268 base: <module 'base' from './test/base.py'>
    test 1269 geographiclib.geomath: <module 'geographiclib.geomath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/geomath.py'>
    test 1270 geographiclib.constants: <module 'geographiclib.constants' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/constants.py'>
    test 1271 geographiclib.geodesiccapability: <module 'geographiclib.geodesiccapability' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/geodesiccapability.py'>
    test 1272 geographiclib.geodesic: <module 'geographiclib.geodesic' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/geodesic.py'>
    test 1273 geographiclib.geodesicline: <module 'geographiclib.geodesicline' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/geodesicline.py'>
    test 1274 xml.parsers: <module 'xml.parsers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/parsers/__init__.py'>
    test 1275 pyexpat.errors: <module 'pyexpat.errors'>
    test 1276 pyexpat.model: <module 'pyexpat.model'>
    test 1277 pyexpat: <module 'pyexpat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/pyexpat.cpython-310-darwin.so'>
    test 1278 xml.parsers.expat.model: <module 'pyexpat.model'>
    test 1279 xml.parsers.expat.errors: <module 'pyexpat.errors'>
    test 1280 xml.parsers.expat: <module 'xml.parsers.expat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/parsers/expat.py'>
    test 1281 plistlib: <module 'plistlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/plistlib.py'>

    all 1281 testLazily.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 260.917 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLcc.py

    testing testLcc.py 22.02.11 (module pygeodesy.lcc 22.06.24)

    testLcc(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27
    test 21 Fr93Lb: 49.0°N, 002.0°W
    test 22 Fr93Lb: WGS84
    test 23 Fr93Lb: 49.0°N, 003.0°E
    test 24 Fr93Lb: WGS84
    test 25 Fr93Lb: 49.0°N, 008.0°E
    test 26 Fr93Lb: WGS84
    test 27 Fr93Lb: 44.0°N, 002.0°W
    test 28 Fr93Lb: WGS84
    test 29 Fr93Lb: 44.0°N, 003.0°E
    test 30 Fr93Lb: WGS84
    test 31 Fr93Lb: 44.0°N, 008.0°E
    test 32 Fr93Lb: WGS84
    test 33 Snyder: 33.0°N, 108.0°W
    test 34 Snyder: NAD27
    test 35 Snyder: 33.0°N, 096.0°W
    test 36 Snyder: NAD27
    test 37 Snyder: 33.0°N, 084.0°W
    test 38 Snyder: NAD27
    test 39 Snyder: 45.0°N, 108.0°W
    test 40 Snyder: NAD27
    test 41 Snyder: 45.0°N, 096.0°W
    test 42 Snyder: NAD27
    test 43 Snyder: 45.0°N, 084.0°W
    test 44 Snyder: NAD27
    test 45 WRF_Lb: 33.0°N, 109.0°W
    test 46 WRF_Lb: WGS84
    test 47 WRF_Lb: 33.0°N, 097.0°W
    test 48 WRF_Lb: WGS84
    test 49 WRF_Lb: 33.0°N, 085.0°W
    test 50 WRF_Lb: WGS84
    test 51 WRF_Lb: 45.0°N, 109.0°W
    test 52 WRF_Lb: WGS84
    test 53 WRF_Lb: 45.0°N, 097.0°W
    test 54 WRF_Lb: WGS84
    test 55 WRF_Lb: 45.0°N, 085.0°W
    test 56 WRF_Lb: WGS84

    testLcc(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 57 lb1: 448251.0 5411932.0001
    test 58 lb1: 448251, 5411932
    test 59 lb1: [E:448251, N:5411932]
    test 60 lb1: WRF_Lb.WGS84
    test 61 lb1: lb1
    test 62 lb1: (81.929348, -79.558697)
    test 63 lb1: (1.429937, -1.388561)
    test 64 LatLon: 46.5°N, 003.0°E
    test 65 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 66 toLcc1: 700000 6600000
    test 67 toLcc1: 46.5°N, 003.0°E
    test 68 lb2: 1894411 1564650
    test 69 lb2: Clarke1866
    test 70 lb2: lb2
    test 71 toLatLon2: 35.0°N, 075.0°W
    test 72 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 73 toLatLon2: NAD27
    test 74 toLcc2: 1894410.9 1564649.5
    test 75 toLcc2: [E:1894411, N:1564649]
    test 76 toLcc2: Snyder.NAD27
    test 77 Fr93Lb: 49.0°N, 002.0°W
    test 78 Fr93Lb: WGS84
    test 79 Fr93Lb: 49.0°N, 003.0°E
    test 80 Fr93Lb: WGS84
    test 81 Fr93Lb: 49.0°N, 008.0°E
    test 82 Fr93Lb: WGS84
    test 83 Fr93Lb: 44.0°N, 002.0°W
    test 84 Fr93Lb: WGS84
    test 85 Fr93Lb: 44.0°N, 003.0°E
    test 86 Fr93Lb: WGS84
    test 87 Fr93Lb: 44.0°N, 008.0°E
    test 88 Fr93Lb: WGS84
    test 89 Snyder: 33.0°N, 108.0°W
    test 90 Snyder: NAD27
    test 91 Snyder: 33.0°N, 096.0°W
    test 92 Snyder: NAD27
    test 93 Snyder: 33.0°N, 084.0°W
    test 94 Snyder: NAD27
    test 95 Snyder: 45.0°N, 108.0°W
    test 96 Snyder: NAD27
    test 97 Snyder: 45.0°N, 096.0°W
    test 98 Snyder: NAD27
    test 99 Snyder: 45.0°N, 084.0°W
    test 100 Snyder: NAD27
    test 101 WRF_Lb: 33.0°N, 109.0°W
    test 102 WRF_Lb: WGS84
    test 103 WRF_Lb: 33.0°N, 097.0°W
    test 104 WRF_Lb: WGS84
    test 105 WRF_Lb: 33.0°N, 085.0°W
    test 106 WRF_Lb: WGS84
    test 107 WRF_Lb: 45.0°N, 109.0°W
    test 108 WRF_Lb: WGS84
    test 109 WRF_Lb: 45.0°N, 097.0°W
    test 110 WRF_Lb: WGS84
    test 111 WRF_Lb: 45.0°N, 085.0°W
    test 112 WRF_Lb: WGS84

    testConic(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 113 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 114 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 115 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 116 _SnyderN .auth: ''
    test 117 _SnyderN .opt3: 0.0
    test 118 _SnyderN .latlon0: (23.0, -96.0)
    test 119 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 120 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 121 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 122 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 123 _SnyderV .auth: ''
    test 124 _SnyderV .opt3: 0.0
    test 125 _SnyderV .latlon0: (23.0, -96.0)
    test 126 _SnyderV .philam0: (0.401426, -1.675516)

    all 126 testLcc.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 6.375 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLtp.py
./pygeodesy/deprecated/__init__.py:66: DeprecationWarning: class L{pygeodesy.deprecated.EcefCartesian} has been DEPRECATED, use class L{LocalCartesian}.
  deprecated_class(self.__class__)
./test/testLtp.py:36: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(33.3, 44.4, 6000)
./test/testLtp.py:40: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(37288.97, 33374.29, 5783.65)
./test/testLtp.py:49: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(LatLon_(50.9, 1.8, name='Calais'))  # Local9Tuple
./test/testLtp.py:53: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-37518.64, 229949.65, -4260.43)  # Local9Tuple
./test/testLtp.py:57: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-38e3, 230e3, -4e3)
./test/testLtp.py:61: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(50.9, 1.79, 264.92)  # Local9Tuple
./test/testLtp.py:69: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = Z.reverse(M).toLatLon(datum=None)  # Matterhorn Xyz to LatLon
./test/testLtp.py:71: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  self.test('xyz', Z.forward(t).xyz.toStr(prec=1), '(-7134.8, -4556.3, 2852.4)', known=Sudano)

    testing testLtp.py 21.12.30

    test 1 EcefCartesian: {}
    test 2 name: Test
    test 3 toStr: EcefCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected EcefCartesian
    test 4 copy(EcefCartesian): (<class 'pygeodesy.deprecated.EcefCartesian.<locals>.EcefCartesian'>, True)
    test 5 EcefCartesian.copy(): (<class 'pygeodesy.deprecated.EcefCartesian.<locals>.EcefCartesian'>, True)
    test 6 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 7 forward: 37288.97, 33374.29, 5783.65
    test 8 name: Test
    test 9 reverse: 33.3, 44.4, 6000.0
    test 10 name: Test
    test 11 name: Paris
    test 12 Paris: 48.833, 2.333, 0.0
    test 13 forward: -37518.64, 229949.65, -4260.43
    test 14 name: Calais
    test 15 reverse: 50.9, 1.8, -0.0
    test 16 name: Paris
    test 17 reverse: -38000.0, 230000.0, -4000.0
    test 18 reverse: 50.9, 1.79, 264.92
    test 19 forward: -38223.7, 229964.2, -4000.0

    test 20 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected EcefCartesian
    test 21 Matterhorn: (45.976, 7.658, 4531.01)
    test 22 xyz: (-7134.8, -4556.3, 2852.4)
    test 23 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 24 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 25 _local2ecef: Ecef9Tuple
    test 26 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, EcefCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 27 _ecef2local: Local9Tuple
    test 28 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 29 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 30 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 31 Ned: [-4556.3, -7134.8, -2852.4]
    test 32 Enu: [-7134.8, -4556.3, 2852.4]
    test 33 Ned: [-4556.3, -7134.8, -2852.4]

    test 34 Frustum: 90.0, 90.0
    test 35 hfov: 90.0
    test 36 vfov: 90.0
    test 37 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 38 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 39 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 40 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 41 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 42 alt: 0.0
    test 43 tilt: -10.0
    test 44 roll: -20.0
    test 45 yaw: 330.0
    test 46 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 47 rotate: (-0.005694, 1.334382, 1.104261)
    test 48 tyr3d: (0.0, 0.0, 0.0)
    test 49 tyr3d: (0.0, -2.0, 0.0)
    test 50 tyr3d: (0.0, -2.0, 0.0)
    test 51 tyr3d: (0.0, 0.0, -2.0)

    test 52 LocalCartesian: {}
    test 53 name: Test
    test 54 toStr: LocalCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected LocalCartesian
    test 55 copy(LocalCartesian): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 56 LocalCartesian.copy(): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 57 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 58 forward: 37288.97, 33374.29, 5783.65
    test 59 name: Test
    test 60 reverse: 33.3, 44.4, 6000.0
    test 61 name: Test
    test 62 name: Paris
    test 63 Paris: 48.833, 2.333, 0.0
    test 64 forward: -37518.64, 229949.65, -4260.43
    test 65 name: Calais
    test 66 reverse: 50.9, 1.8, -0.0
    test 67 name: Paris
    test 68 reverse: -38000.0, 230000.0, -4000.0
    test 69 reverse: 50.9, 1.79, 264.92
    test 70 forward: -38223.7, 229964.2, -4000.0

    test 71 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected LocalCartesian
    test 72 Matterhorn: (45.976, 7.658, 4531.01)
    test 73 xyz: (-7134.8, -4556.3, 2852.4)
    test 74 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 75 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 76 _local2ecef: Ecef9Tuple
    test 77 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, LocalCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 78 _ecef2local: Local9Tuple
    test 79 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 80 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 81 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 82 Ned: [-4556.3, -7134.8, -2852.4]
    test 83 Enu: [-7134.8, -4556.3, 2852.4]
    test 84 Ned: [-4556.3, -7134.8, -2852.4]

    test 85 Frustum: 90.0, 90.0
    test 86 hfov: 90.0
    test 87 vfov: 90.0
    test 88 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 89 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 90 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 91 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 92 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 93 alt: 0.0
    test 94 tilt: -10.0
    test 95 roll: -20.0
    test 96 yaw: 330.0
    test 97 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 98 rotate: (-0.005694, 1.334382, 1.104261)
    test 99 tyr3d: (0.0, 0.0, 0.0)
    test 100 tyr3d: (0.0, -2.0, 0.0)
    test 101 tyr3d: (0.0, -2.0, 0.0)
    test 102 tyr3d: (0.0, 0.0, -2.0)

    test 103 Ltp: {}
    test 104 name: Test
    test 105 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 106 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 107 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 108 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 109 forward: 37288.97, 33374.29, 5783.65
    test 110 name: Test
    test 111 reverse: 33.3, 44.4, 6000.0
    test 112 name: Test
    test 113 name: Paris
    test 114 Paris: 48.833, 2.333, 0.0
    test 115 forward: -37518.64, 229949.65, -4260.43
    test 116 name: Calais
    test 117 reverse: 50.9, 1.8, -0.0
    test 118 name: Paris
    test 119 reverse: -38000.0, 230000.0, -4000.0
    test 120 reverse: 50.9, 1.79, 264.92
    test 121 forward: -38223.7, 229964.2, -4000.0

    test 122 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 123 Matterhorn: (45.976, 7.658, 4531.01)
    test 124 xyz: (-7134.8, -4556.3, 2852.4)
    test 125 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 126 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 127 _local2ecef: Ecef9Tuple
    test 128 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 129 _ecef2local: Local9Tuple
    test 130 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 131 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 132 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 133 Ned: [-4556.3, -7134.8, -2852.4]
    test 134 Enu: [-7134.8, -4556.3, 2852.4]
    test 135 Ned: [-4556.3, -7134.8, -2852.4]

    test 136 Frustum: 90.0, 90.0
    test 137 hfov: 90.0
    test 138 vfov: 90.0
    test 139 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 140 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 141 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 142 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 143 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 144 alt: 0.0
    test 145 tilt: -10.0
    test 146 roll: -20.0
    test 147 yaw: 330.0
    test 148 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 149 rotate: (-0.005694, 1.334382, 1.104261)
    test 150 tyr3d: (0.0, 0.0, 0.0)
    test 151 tyr3d: (0.0, -2.0, 0.0)
    test 152 tyr3d: (0.0, -2.0, 0.0)
    test 153 tyr3d: (0.0, 0.0, -2.0)

    test 154 Ltp: {'ecef': EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 155 name: Test
    test 156 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 157 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 158 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 159 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 160 forward: 37288.97, 33374.29, 5783.65
    test 161 name: Test
    test 162 reverse: 33.3, 44.4, 6000.0
    test 163 name: Test
    test 164 name: Paris
    test 165 Paris: 48.833, 2.333, 0.0
    test 166 forward: -37518.64, 229949.65, -4260.43
    test 167 name: Calais
    test 168 reverse: 50.9, 1.8, -0.0
    test 169 name: Paris
    test 170 reverse: -38000.0, 230000.0, -4000.0
    test 171 reverse: 50.9, 1.79, 264.92
    test 172 forward: -38223.7, 229964.2, -4000.0

    test 173 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 174 Matterhorn: (45.976, 7.658, 4531.01)
    test 175 xyz: (-7134.8, -4556.3, 2852.4)
    test 176 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 177 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 178 _local2ecef: Ecef9Tuple
    test 179 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 180 _ecef2local: Local9Tuple
    test 181 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 182 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 183 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 184 Ned: [-4556.3, -7134.8, -2852.4]
    test 185 Enu: [-7134.8, -4556.3, 2852.4]
    test 186 Ned: [-4556.3, -7134.8, -2852.4]

    test 187 Frustum: 90.0, 90.0
    test 188 hfov: 90.0
    test 189 vfov: 90.0
    test 190 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 191 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 192 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 193 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 194 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 195 alt: 0.0
    test 196 tilt: -10.0
    test 197 roll: -20.0
    test 198 yaw: 330.0
    test 199 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 200 rotate: (-0.005694, 1.334382, 1.104261)
    test 201 tyr3d: (0.0, 0.0, 0.0)
    test 202 tyr3d: (0.0, -2.0, 0.0)
    test 203 tyr3d: (0.0, -2.0, 0.0)
    test 204 tyr3d: (0.0, 0.0, -2.0)

    test 205 Ltp: {'ecef': EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 206 name: Test
    test 207 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 208 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 209 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 210 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 211 forward: 37288.97, 33374.29, 5783.65
    test 212 name: Test
    test 213 reverse: 33.3, 44.4, 6000.0
    test 214 name: Test
    test 215 name: Paris
    test 216 Paris: 48.833, 2.333, 0.0
    test 217 forward: -37518.64, 229949.65, -4260.43
    test 218 name: Calais
    test 219 reverse: 50.9, 1.8, -0.0
    test 220 name: Paris
    test 221 reverse: -38000.0, 230000.0, -4000.0
    test 222 reverse: 50.9, 1.79, 264.92
    test 223 forward: -38223.7, 229964.2, -4000.0

    test 224 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 225 Matterhorn: (45.976, 7.658, 4531.01)
    test 226 xyz: (-7134.8, -4556.3, 2852.4)
    test 227 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 228 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 229 _local2ecef: Ecef9Tuple
    test 230 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 231 _ecef2local: Local9Tuple
    test 232 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 233 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 234 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 235 Ned: [-4556.3, -7134.8, -2852.4]
    test 236 Enu: [-7134.8, -4556.3, 2852.4]
    test 237 Ned: [-4556.3, -7134.8, -2852.4]

    test 238 Frustum: 90.0, 90.0
    test 239 hfov: 90.0
    test 240 vfov: 90.0
    test 241 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 242 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 243 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 244 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 245 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 246 alt: 0.0
    test 247 tilt: -10.0
    test 248 roll: -20.0
    test 249 yaw: 330.0
    test 250 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 251 rotate: (-0.005694, 1.334382, 1.104261)
    test 252 tyr3d: (0.0, 0.0, 0.0)
    test 253 tyr3d: (0.0, -2.0, 0.0)
    test 254 tyr3d: (0.0, -2.0, 0.0)
    test 255 tyr3d: (0.0, 0.0, -2.0)

    test 256 Ltp: {'ecef': EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 257 name: Test
    test 258 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 259 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 260 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 261 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 262 forward: 37288.97, 33374.29, 5783.65
    test 263 name: Test
    test 264 reverse: 33.3, 44.4, 6000.0
    test 265 name: Test
    test 266 name: Paris
    test 267 Paris: 48.833, 2.333, 0.0
    test 268 forward: -37518.64, 229949.65, -4260.43
    test 269 name: Calais
    test 270 reverse: 50.9, 1.8, -0.0
    test 271 name: Paris
    test 272 reverse: -38000.0, 230000.0, -4000.0
    test 273 reverse: 50.9, 1.79, 264.92
    test 274 forward: -38223.7, 229964.2, -4000.0

    test 275 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 276 Matterhorn: (45.976, 7.658, 4531.01)
    test 277 xyz: (-7134.8, -4556.3, 2852.4)
    test 278 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 279 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 280 _local2ecef: Ecef9Tuple
    test 281 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 282 _ecef2local: Local9Tuple
    test 283 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 284 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 285 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 286 Ned: [-4556.3, -7134.8, -2852.4]
    test 287 Enu: [-7134.8, -4556.3, 2852.4]
    test 288 Ned: [-4556.3, -7134.8, -2852.4]

    test 289 Frustum: 90.0, 90.0
    test 290 hfov: 90.0
    test 291 vfov: 90.0
    test 292 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 293 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 294 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 295 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 296 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 297 alt: 0.0
    test 298 tilt: -10.0
    test 299 roll: -20.0
    test 300 yaw: 330.0
    test 301 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 302 rotate: (-0.005694, 1.334382, 1.104261)
    test 303 tyr3d: (0.0, 0.0, 0.0)
    test 304 tyr3d: (0.0, -2.0, 0.0)
    test 305 tyr3d: (0.0, -2.0, 0.0)
    test 306 tyr3d: (0.0, 0.0, -2.0)

    test 307 Ltp: {'ecef': EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 308 name: Test
    test 309 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 310 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 311 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 312 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 313 forward: 37288.97, 33374.29, 5783.65
    test 314 name: Test
    test 315 reverse: 33.3, 44.4, 6000.0
    test 316 name: Test
    test 317 name: Paris
    test 318 Paris: 48.833, 2.333, 0.0
    test 319 forward: -37518.64, 229949.65, -4260.43
    test 320 name: Calais
    test 321 reverse: 50.9, 1.8, -0.0
    test 322 name: Paris
    test 323 reverse: -38000.0, 230000.0, -4000.0
    test 324 reverse: 50.9, 1.79, 264.92
    test 325 forward: -38223.7, 229964.2, -4000.0

    test 326 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 327 Matterhorn: (45.976, 7.658, 4531.01)
    test 328 xyz: (-7134.8, -4556.3, 2852.4)
    test 329 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 330 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 331 _local2ecef: Ecef9Tuple
    test 332 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 333 _ecef2local: Local9Tuple
    test 334 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 335 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 336 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 337 Ned: [-4556.3, -7134.8, -2852.4]
    test 338 Enu: [-7134.8, -4556.3, 2852.4]
    test 339 Ned: [-4556.3, -7134.8, -2852.4]

    test 340 Frustum: 90.0, 90.0
    test 341 hfov: 90.0
    test 342 vfov: 90.0
    test 343 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 344 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 345 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 346 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 347 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 348 alt: 0.0
    test 349 tilt: -10.0
    test 350 roll: -20.0
    test 351 yaw: 330.0
    test 352 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 353 rotate: (-0.005694, 1.334382, 1.104261)
    test 354 tyr3d: (0.0, 0.0, 0.0)
    test 355 tyr3d: (0.0, -2.0, 0.0)
    test 356 tyr3d: (0.0, -2.0, 0.0)
    test 357 tyr3d: (0.0, 0.0, -2.0)

    test 358 Ltp: {'ecef': EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 359 name: Test
    test 360 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 361 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 362 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 363 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 364 forward: 37288.97, 33374.29, 5783.65
    test 365 name: Test
    test 366 reverse: 33.3, 44.4, 6000.0
    test 367 name: Test
    test 368 name: Paris
    test 369 Paris: 48.833, 2.333, 0.0
    test 370 forward: -37518.64, 229949.65, -4260.43
    test 371 name: Calais
    test 372 reverse: 50.9, 1.8, -0.0
    test 373 name: Paris
    test 374 reverse: -38000.0, 230000.0, -4000.0
    test 375 reverse: 50.9, 1.79, 264.92
    test 376 forward: -38223.7, 229964.2, -4000.0

    test 377 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 378 Matterhorn: (45.976, 7.658, 4531.01)
    test 379 xyz: (-7134.8, -4556.3, 2852.4)
    test 380 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 381 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 382 _local2ecef: Ecef9Tuple
    test 383 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 384 _ecef2local: Local9Tuple
    test 385 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 386 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 387 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 388 Ned: [-4556.3, -7134.8, -2852.4]
    test 389 Enu: [-7134.8, -4556.3, 2852.4]
    test 390 Ned: [-4556.3, -7134.8, -2852.4]

    test 391 Frustum: 90.0, 90.0
    test 392 hfov: 90.0
    test 393 vfov: 90.0
    test 394 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 395 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 396 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 397 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 398 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 399 alt: 0.0
    test 400 tilt: -10.0
    test 401 roll: -20.0
    test 402 yaw: 330.0
    test 403 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 404 rotate: (-0.005694, 1.334382, 1.104261)
    test 405 tyr3d: (0.0, 0.0, 0.0)
    test 406 tyr3d: (0.0, -2.0, 0.0)
    test 407 tyr3d: (0.0, -2.0, 0.0)
    test 408 tyr3d: (0.0, 0.0, -2.0)

    test 409 Ltp: {'ecef': EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 410 name: Test
    test 411 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 412 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 413 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 414 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 415 forward: 37288.97, 33374.29, 5783.65
    test 416 name: Test
    test 417 reverse: 33.3, 44.4, 6000.0
    test 418 name: Test
    test 419 name: Paris
    test 420 Paris: 48.833, 2.333, 0.0
    test 421 forward: -37518.64, 229949.65, -4260.43
    test 422 name: Calais
    test 423 reverse: 50.9, 1.8, -0.0
    test 424 name: Paris
    test 425 reverse: -38000.0, 230000.0, -4000.0
    test 426 reverse: 50.9, 1.79, 264.92
    test 427 forward: -38223.7, 229964.2, -4000.0

    test 428 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 429 Matterhorn: (45.976, 7.658, 4531.01)
    test 430 xyz: (-7134.8, -4556.3, 2852.4)
    test 431 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 432 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 433 _local2ecef: Ecef9Tuple
    test 434 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 435 _ecef2local: Local9Tuple
    test 436 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 437 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 438 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 439 Ned: [-4556.3, -7134.8, -2852.4]
    test 440 Enu: [-7134.8, -4556.3, 2852.4]
    test 441 Ned: [-4556.3, -7134.8, -2852.4]

    test 442 Frustum: 90.0, 90.0
    test 443 hfov: 90.0
    test 444 vfov: 90.0
    test 445 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 446 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 447 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 448 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 449 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 450 alt: 0.0
    test 451 tilt: -10.0
    test 452 roll: -20.0
    test 453 yaw: 330.0
    test 454 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 455 rotate: (-0.005694, 1.334382, 1.104261)
    test 456 tyr3d: (0.0, 0.0, 0.0)
    test 457 tyr3d: (0.0, -2.0, 0.0)
    test 458 tyr3d: (0.0, -2.0, 0.0)
    test 459 tyr3d: (0.0, 0.0, -2.0)

    56 of 459 testLtp.py tests (12.2%) FAILED, incl. 45 KNOWN plus 11 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 29.802 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testLtpTuples.py

    testing testLtpTuples.py 22.05.27

    test 1 Aer.toRepr: [A:60.0°, E:40.0°, R:1000.0]
    test 2 Aer.toStr: [60.0, 40.0, 1000.0]
    test 3 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 4 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 5 Aer.xyzLocal.toEnu: [663.41, 383.02, 642.79]
    test 6 Enu.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 7 Aer.xyzLocal.toNed: [383.02, 663.41, -642.79]
    test 8 Ned.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 9 Aer.xyzLocal.toXyz: [663.41, 383.02, 642.79]
    test 10 Xyz.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 11 Aer.toCartesian: [4397663.96, 599165.33, 4568492.25]
    test 12 Cartesian.toLocal Aer: [60.0, 40.0, 1000.0]
    test 13 Aer.toLatLon: 46°01′13.6″N, 007°45′30.83″E, +2315.83m
    test 14 LatLon.toLocal Aer: [60.0, 40.0, 1000.0]
    test 15 Aer.azimuth: 60.0
    test 16 Aer.elevation: 40.0
    test 17 Aer.slantrange: 1000.0
    test 18 Aer.groundrange: 766.044
    test 19 Aer.east: 663.414
    test 20 Aer.north: 383.022
    test 21 Aer.up: 642.788
    test 22 Aer.down: -642.788
    test 23 Aer.x: 663.414
    test 24 Aer.y: 383.022
    test 25 Aer.z: 642.788
    test 26 Aer.xyz: 663.414, 383.022, 642.788

    test 27 Enu.toRepr: [E:100.0, N:200.0, U:1000.0]
    test 28 Enu.toStr: [100.0, 200.0, 1000.0]
    test 29 Enu.xyzLocal.toAer: [26.57, 77.4, 1024.7]
    test 30 Aer.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 31 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 32 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 33 Enu.xyzLocal.toNed: [200.0, 100.0, -1000.0]
    test 34 Ned.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 35 Enu.xyzLocal.toXyz: [100.0, 200.0, 1000.0]
    test 36 Xyz.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 37 Enu.toCartesian: [4398116.23, 598658.27, 4568622.18]
    test 38 Cartesian.toLocal Enu: [100.0, 200.0, 1000.0]
    test 39 Enu.toLatLon: 46°01′07.67″N, 007°45′04.65″E, +2673.00m
    test 40 LatLon.toLocal Enu: [100.0, 200.0, 1000.0]
    test 41 Enu.azimuth: 26.565
    test 42 Enu.elevation: 77.396
    test 43 Enu.slantrange: 1024.695
    test 44 Enu.groundrange: 223.607
    test 45 Enu.east: 100.0
    test 46 Enu.north: 200.0
    test 47 Enu.up: 1000.0
    test 48 Enu.down: -1000.0
    test 49 Enu.x: 100.0
    test 50 Enu.y: 200.0
    test 51 Enu.z: 1000.0
    test 52 Enu.xyz: 100.0, 200.0, 1000.0

    test 53 Ned.toRepr: [N:200.0, E:100.0, D:1000.0]
    test 54 Ned.toStr: [200.0, 100.0, 1000.0]
    test 55 Ned.xyzLocal.toAer: [26.57, -77.4, 1024.7]
    test 56 Aer.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 57 Ned.xyzLocal.toEnu: [100.0, 200.0, -1000.0]
    test 58 Enu.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 59 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 60 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 61 Ned.xyzLocal.toXyz: [100.0, 200.0, -1000.0]
    test 62 Xyz.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 63 Ned.toCartesian: [4396740.02, 598470.98, 4567183.09]
    test 64 Cartesian.toLocal Ned: [200.0, 100.0, 1000.0]
    test 65 Ned.toLatLon: 46°01′07.68″N, 007°45′04.65″E, +673.00m
    test 66 LatLon.toLocal Ned: [200.0, 100.0, 1000.0]
    test 67 Ned.azimuth: 26.565
    test 68 Ned.elevation: -77.396
    test 69 Ned.slantrange: 1024.695
    test 70 Ned.groundrange: 223.607
    test 71 Ned.east: 100.0
    test 72 Ned.north: 200.0
    test 73 Ned.up: -1000.0
    test 74 Ned.down: 1000.0
    test 75 Ned.x: 100.0
    test 76 Ned.y: 200.0
    test 77 Ned.z: -1000.0
    test 78 Ned.xyz: 100.0, 200.0, -1000.0

    test 79 Xyz.toRepr: [X:10.0, Y:20.0, Z:100.0]
    test 80 Xyz.toStr: [10.0, 20.0, 100.0]
    test 81 Xyz.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 82 Aer.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 83 Xyz.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 84 Enu.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 85 Xyz.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 86 Ned.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 87 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 88 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 89 Xyz.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 90 Cartesian.toLocal Xyz: [10.0, 20.0, 100.0]
    test 91 Xyz.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 92 LatLon.toLocal Xyz: [10.0, 20.0, 100.0]
    test 93 Xyz.azimuth: 26.565
    test 94 Xyz.elevation: 77.396
    test 95 Xyz.slantrange: 102.47
    test 96 Xyz.groundrange: 22.361
    test 97 Xyz.east: 10.0
    test 98 Xyz.north: 20.0
    test 99 Xyz.up: 100.0
    test 100 Xyz.down: -100.0
    test 101 Xyz.x: 10.0
    test 102 Xyz.y: 20.0
    test 103 Xyz.z: 100.0
    test 104 Xyz.xyz: 10.0, 20.0, 100.0

    test 105 Local9Tuple.toRepr: Local9Tuple(x=10.0, y=20.0, z=100.0, lat=46.02, lon=7.75, height=1773.0, ltp=Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transfo
    test 106 Local9Tuple.toStr: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 107 Local9Tuple.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 108 Aer.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 109 Local9Tuple.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 110 Enu.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 111 Local9Tuple.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 112 Ned.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 113 Local9Tuple.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 114 Xyz.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 115 Local9Tuple.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 116 Local9Tuple.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 117 Local9Tuple.azimuth: 26.565
    test 118 Local9Tuple.elevation: 77.396
    test 119 Local9Tuple.slantrange: 102.47
    test 120 Local9Tuple.groundrange: 22.361
    test 121 Local9Tuple.east: 10.0
    test 122 Local9Tuple.north: 20.0
    test 123 Local9Tuple.up: 100.0
    test 124 Local9Tuple.down: -100.0
    test 125 Local9Tuple.x: 10.0
    test 126 Local9Tuple.y: 20.0
    test 127 Local9Tuple.z: 100.0
    test 128 Local9Tuple.xyz: 10.0, 20.0, 100.0
    test 129 Local9Tuple.lat: 46.02
    test 130 Local9Tuple.lon: 7.75
    test 131 Local9Tuple.latlon: 46.02, 7.75
    test 132 Local9Tuple.latlonheight: 46.02, 7.75, 1773.0
    test 133 Local9Tuple.phi: 0.803
    test 134 Local9Tuple.lam: 0.135
    test 135 Local9Tuple.philam: 0.803, 0.135
    test 136 Local9Tuple.philamheight: 0.803, 0.135, 1773.0

    all 136 testLtpTuples.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 7.558 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testMgrs.py

    testing testMgrs.py 22.01.03 (module pygeodesy.mgrs 22.06.26)
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31 N 431000 4582000
    test 16 Mgrs8: (41.38657, 2.174726, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.54564, 0.999659)
    test 17 Mgrs8: 31 N 431500 4582500
    test 18 Mgrs8: 31T DF 31000 82000
    test 19 Mgrs8: 41.391116°N, 002.180649°E
    test 20 Mgrs8: 31T DF 31000 82000
    test 21 Mgrs9: 31U DQ 48251 11932
    test 22 Mgrs9: [Z:31U, G:DQ, E:48251, N:11932]
    test 23 toUtm1: 31 N 448251 5411932
    test 24 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 25 toMgrs1: 31U DQ 48251 11932
    test 26 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]
    test 27 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')  FAILED, KNOWN, expected (31, 'N', 448251.0, 5411932.0)
    test 28 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 29 easting: 48251.0
    test 30 northing: 11932.0
    test 31 en100k: DQ
    test 32 digraph: DQ
    test 33 zone: 31
    test 34 band: U
    test 35 bandLatitude: 48
    test 36 toMgrs: 31U DQ 48251 11932
    test 37 toMgrs(None): Mgrs6Tuple
    test 38 toUtm(60.0°N, 001.0°E).toMgrs: 31V CG 88455 53097
    test 39 toUtm(60.0°N, 003.0°E).toMgrs: 32V JM 65640 66593
    test 40 toUtm(60.0°N, 009.0°E).toMgrs: 32V NM 00000 51411
    test 41 toUtm(76.0°N, 001.0°E).toMgrs: 31X DE 45999 36099
    test 42 toUtm(76.0°N, 013.0°E).toMgrs: 33X VE 45999 36099
    test 43 toUtm(76.0°N, 025.0°E).toMgrs: 35X ME 45999 36099
    test 44 toUtm(76.0°N, 037.0°E).toMgrs: 37X DE 45999 36099

    1 of 44 testMgrs.py tests (2.3%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 4.986 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testModules.py

    testing testModules.py 21.05.28

    testModule(pygeodesy, 22.07.07)
    test 1 pygeodesy.Aer() class (pygeodesy.ltpTuples): True
    test 2 pygeodesy.Aer4Tuple() class (pygeodesy.ltpTuples): True
    test 3 pygeodesy.Albers7Tuple() class (pygeodesy.albers): True
    test 4 pygeodesy.AlbersEqualArea() class (pygeodesy.albers): True
    test 5 pygeodesy.AlbersEqualArea2() class (pygeodesy.albers): True
    test 6 pygeodesy.AlbersEqualArea4() class (pygeodesy.albers): True
    test 7 pygeodesy.AlbersEqualAreaCylindrical() class (pygeodesy.albers): True
    test 8 pygeodesy.AlbersEqualAreaNorth() class (pygeodesy.albers): True
    test 9 pygeodesy.AlbersEqualAreaSouth() class (pygeodesy.albers): True
    test 10 pygeodesy.AlbersError() class (pygeodesy.albers): True
    test 11 pygeodesy.Area3Tuple() class (pygeodesy.karney): True
    test 12 pygeodesy.Attitude() class (pygeodesy.ltp): True
    test 13 pygeodesy.Attitude4Tuple() class (pygeodesy.ltpTuples): True
    test 14 pygeodesy.AttitudeError() class (pygeodesy.ltp): True
    test 15 pygeodesy.Azimuthal7Tuple() class (pygeodesy.azimuthal): True
    test 16 pygeodesy.AzimuthalError() class (pygeodesy.azimuthal): True
    test 17 pygeodesy.Band() class (pygeodesy.units): True
    test 18 pygeodesy.Bearing() class (pygeodesy.units): True
    test 19 pygeodesy.Bearing2Tuple() class (pygeodesy.namedTuples): True
    test 20 pygeodesy.Bearing_() class (pygeodesy.units): True
    test 21 pygeodesy.Bool() class (pygeodesy.units): True
    test 22 pygeodesy.Bounds2Tuple() class (pygeodesy.namedTuples): True
    test 23 pygeodesy.Bounds4Tuple() class (pygeodesy.namedTuples): True
    test 24 pygeodesy.CSSError() class (pygeodesy.css): True
    test 25 pygeodesy.Caps class pygeodesy.karney.Caps (pygeodesy.karney): True
    test 26 pygeodesy.CassiniSoldner() class (pygeodesy.css): True
    test 27 pygeodesy.Circin6Tuple() class (pygeodesy.vector2d): True
    test 28 pygeodesy.Circle4Tuple() class (pygeodesy.ellipsoids): True
    test 29 pygeodesy.Circum3Tuple() class (pygeodesy.vector2d): True
    test 30 pygeodesy.Circum4Tuple() class (pygeodesy.vector2d): True
    test 31 pygeodesy.ClipCS3Tuple() class (pygeodesy.deprecated): True
    test 32 pygeodesy.ClipCS4Tuple() class (pygeodesy.clipy): True
    test 33 pygeodesy.ClipError() class (pygeodesy.clipy): True
    test 34 pygeodesy.ClipLB6Tuple() class (pygeodesy.clipy): True
    test 35 pygeodesy.ClipSH3Tuple() class (pygeodesy.clipy): True
    test 36 pygeodesy.Collins5Tuple() class (pygeodesy.resections): True
    test 37 pygeodesy.Conic() class (pygeodesy.lcc): True
    test 38 pygeodesy.Conics class pygeodesy.lcc.Conics (pygeodesy.lcc): True
    test 39 pygeodesy.CrossError() class (pygeodesy.errors): True
    test 40 pygeodesy.Css() class (pygeodesy.css): True
    test 41 pygeodesy.Curvature2Tuple() class (pygeodesy.ellipsoids): True
    test 42 pygeodesy.DIG int: True
    test 43 pygeodesy.Datum() class (pygeodesy.datums): True
    test 44 pygeodesy.Datums class pygeodesy.datums.Datums (pygeodesy.datums): True
    test 45 pygeodesy.Degrees() class (pygeodesy.units): True
    test 46 pygeodesy.Degrees2() class (pygeodesy.units): True
    test 47 pygeodesy.Degrees_() class (pygeodesy.units): True
    test 48 pygeodesy.DeprecationWarnings() function (pygeodesy.props): True
    test 49 pygeodesy.Destination2Tuple() class (pygeodesy.namedTuples): True
    test 50 pygeodesy.Destination3Tuple() class (pygeodesy.namedTuples): True
    test 51 pygeodesy.Direct9Tuple() class (pygeodesy.karney): True
    test 52 pygeodesy.Distance() class (pygeodesy.units): True
    test 53 pygeodesy.Distance2Tuple() class (pygeodesy.namedTuples): True
    test 54 pygeodesy.Distance3Tuple() class (pygeodesy.namedTuples): True
    test 55 pygeodesy.Distance4Tuple() class (pygeodesy.namedTuples): True
    test 56 pygeodesy.Distance_() class (pygeodesy.units): True
    test 57 pygeodesy.EPS float: True
    test 58 pygeodesy.EPS0 float: True
    test 59 pygeodesy.EPS02 float: True
    test 60 pygeodesy.EPS1 float: True
    test 61 pygeodesy.EPS1_2 float: True
    test 62 pygeodesy.EPS2 float: True
    test 63 pygeodesy.EPS4 float: True
    test 64 pygeodesy.EPSGError() class (pygeodesy.epsg): True
    test 65 pygeodesy.EPS_2 float: True
    test 66 pygeodesy.ETMError() class (pygeodesy.etm): True
    test 67 pygeodesy.EasNor2Tuple() class (pygeodesy.namedTuples): True
    test 68 pygeodesy.EasNor3Tuple() class (pygeodesy.namedTuples): True
    test 69 pygeodesy.EasNorAziRk4Tuple() class (pygeodesy.css): True
    test 70 pygeodesy.EasNorAziRkEqu6Tuple() class (pygeodesy.css): True
    test 71 pygeodesy.EasNorExact4Tuple() class (pygeodesy.deprecated): True
    test 72 pygeodesy.EasNorRadius3Tuple() class (pygeodesy.webmercator): True
    test 73 pygeodesy.Easting() class (pygeodesy.units): True
    test 74 pygeodesy.Ecef9Tuple() class (pygeodesy.ecef): True
    test 75 pygeodesy.EcefCartesian() function (pygeodesy.deprecated): True
    test 76 pygeodesy.EcefError() class (pygeodesy.ecef): True
    test 77 pygeodesy.EcefFarrell21() class (pygeodesy.ecef): True
    test 78 pygeodesy.EcefFarrell22() class (pygeodesy.ecef): True
    test 79 pygeodesy.EcefKarney() class (pygeodesy.ecef): True
    test 80 pygeodesy.EcefMatrix() class (pygeodesy.ecef): True
    test 81 pygeodesy.EcefSudano() class (pygeodesy.ecef): True
    test 82 pygeodesy.EcefVeness() class (pygeodesy.ecef): True
    test 83 pygeodesy.EcefYou() class (pygeodesy.ecef): True
    test 84 pygeodesy.Elevation2Tuple() class (pygeodesy.elevations): True
    test 85 pygeodesy.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 86 pygeodesy.Ellipsoid2() class (pygeodesy.ellipsoids): True
    test 87 pygeodesy.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids (pygeodesy.ellipsoids): True
    test 88 pygeodesy.Elliptic() class (pygeodesy.elliptic): True
    test 89 pygeodesy.Elliptic3Tuple() class (pygeodesy.elliptic): True
    test 90 pygeodesy.EllipticError() class (pygeodesy.elliptic): True
    test 91 pygeodesy.Enu() class (pygeodesy.ltpTuples): True
    test 92 pygeodesy.Enu4Tuple() class (pygeodesy.ltpTuples): True
    test 93 pygeodesy.Epoch() class (pygeodesy.units): True
    test 94 pygeodesy.Epsg() class (pygeodesy.epsg): True
    test 95 pygeodesy.Equidistant() class (pygeodesy.azimuthal): True
    test 96 pygeodesy.EquidistantExact() class (pygeodesy.azimuthal): True
    test 97 pygeodesy.EquidistantGeodSolve() class (pygeodesy.azimuthal): True
    test 98 pygeodesy.EquidistantKarney() class (pygeodesy.azimuthal): True
    test 99 pygeodesy.Etm() class (pygeodesy.etm): True
    test 100 pygeodesy.ExactTransverseMercator() class (pygeodesy.etm): True
    test 101 pygeodesy.FIx() class (pygeodesy.units): True
    test 102 pygeodesy.F_D str: True
    test 103 pygeodesy.F_D60 str: True
    test 104 pygeodesy.F_D60_ str (pygeodesy.interns): True
    test 105 pygeodesy.F_D60__ str (pygeodesy.interns): True
    test 106 pygeodesy.F_DEG str: True
    test 107 pygeodesy.F_DEG_ str (pygeodesy.interns): True
    test 108 pygeodesy.F_DEG__ str (pygeodesy.interns): True
    test 109 pygeodesy.F_DM str: True
    test 110 pygeodesy.F_DMS str: True
    test 111 pygeodesy.F_DMS_ str (pygeodesy.interns): True
    test 112 pygeodesy.F_DMS__ str (pygeodesy.interns): True
    test 113 pygeodesy.F_DM_ str (pygeodesy.interns): True
    test 114 pygeodesy.F_DM__ str (pygeodesy.interns): True
    test 115 pygeodesy.F_D_ str (pygeodesy.interns): True
    test 116 pygeodesy.F_D__ str (pygeodesy.interns): True
    test 117 pygeodesy.F_MIN str: True
    test 118 pygeodesy.F_MIN_ str (pygeodesy.interns): True
    test 119 pygeodesy.F_MIN__ str (pygeodesy.interns): True
    test 120 pygeodesy.F_RAD str: True
    test 121 pygeodesy.F_RAD_ str (pygeodesy.interns): True
    test 122 pygeodesy.F_RAD__ str (pygeodesy.interns): True
    test 123 pygeodesy.F_SEC str: True
    test 124 pygeodesy.F_SEC_ str (pygeodesy.interns): True
    test 125 pygeodesy.F_SEC__ str (pygeodesy.interns): True
    test 126 pygeodesy.F__E str: True
    test 127 pygeodesy.F__E_ str (pygeodesy.interns): True
    test 128 pygeodesy.F__E__ str (pygeodesy.interns): True
    test 129 pygeodesy.F__F str: True
    test 130 pygeodesy.F__F_ str (pygeodesy.interns): True
    test 131 pygeodesy.F__F__ str (pygeodesy.interns): True
    test 132 pygeodesy.F__G str: True
    test 133 pygeodesy.F__G_ str (pygeodesy.interns): True
    test 134 pygeodesy.F__G__ str (pygeodesy.interns): True
    test 135 pygeodesy.Fcook() class (pygeodesy.fstats): True
    test 136 pygeodesy.Fdot() class (pygeodesy.fmath): True
    test 137 pygeodesy.Feet() class (pygeodesy.units): True
    test 138 pygeodesy.Fhorner() class (pygeodesy.fmath): True
    test 139 pygeodesy.Flinear() class (pygeodesy.fstats): True
    test 140 pygeodesy.Float() class (pygeodesy.units): True
    test 141 pygeodesy.Float_() class (pygeodesy.units): True
    test 142 pygeodesy.Footprint5Tuple() class (pygeodesy.ltpTuples): True
    test 143 pygeodesy.Forward4Tuple() class (pygeodesy.namedTuples): True
    test 144 pygeodesy.Fpolynomial() class (pygeodesy.fmath): True
    test 145 pygeodesy.Frechet() class (pygeodesy.frechet): True
    test 146 pygeodesy.Frechet6Tuple() class (pygeodesy.frechet): True
    test 147 pygeodesy.FrechetCosineAndoyerLambert() class (pygeodesy.frechet): True
    test 148 pygeodesy.FrechetCosineForsytheAndoyerLambert() class (pygeodesy.frechet): True
    test 149 pygeodesy.FrechetCosineLaw() class (pygeodesy.frechet): True
    test 150 pygeodesy.FrechetDegrees() class (pygeodesy.frechet): True
    test 151 pygeodesy.FrechetDistanceTo() class (pygeodesy.frechet): True
    test 152 pygeodesy.FrechetEquirectangular() class (pygeodesy.frechet): True
    test 153 pygeodesy.FrechetError() class (pygeodesy.frechet): True
    test 154 pygeodesy.FrechetEuclidean() class (pygeodesy.frechet): True
    test 155 pygeodesy.FrechetExact() class (pygeodesy.frechet): True
    test 156 pygeodesy.FrechetFlatLocal() class (pygeodesy.frechet): True
    test 157 pygeodesy.FrechetFlatPolar() class (pygeodesy.frechet): True
    test 158 pygeodesy.FrechetHaversine() class (pygeodesy.frechet): True
    test 159 pygeodesy.FrechetHubeny() class (pygeodesy.frechet): True
    test 160 pygeodesy.FrechetKarney() class (pygeodesy.frechet): True
    test 161 pygeodesy.FrechetRadians() class (pygeodesy.frechet): True
    test 162 pygeodesy.FrechetThomas() class (pygeodesy.frechet): True
    test 163 pygeodesy.FrechetVincentys() class (pygeodesy.frechet): True
    test 164 pygeodesy.Frustum() class (pygeodesy.ltp): True
    test 165 pygeodesy.Fsum() class (pygeodesy.fsums): True
    test 166 pygeodesy.Fsum2Tuple() class (pygeodesy.fsums): True
    test 167 pygeodesy.Fwelford() class (pygeodesy.fstats): True
    test 168 pygeodesy.GARSError() class (pygeodesy.gars): True
    test 169 pygeodesy.GDict() class (pygeodesy.karney): True
    test 170 pygeodesy.Garef() class (pygeodesy.gars): True
    test 171 pygeodesy.GeodSolve12Tuple() class (pygeodesy.geodsolve): True
    test 172 pygeodesy.GeodesicAreaExact() class (pygeodesy.geodesicx.gxarea): True
    test 173 pygeodesy.GeodesicError() class (pygeodesy.karney): True
    test 174 pygeodesy.GeodesicExact() class (pygeodesy.geodesicx.gx): True
    test 175 pygeodesy.GeodesicLineExact() class (pygeodesy.geodesicx.gx): True
    test 176 pygeodesy.GeodesicLineSolve() class (pygeodesy.geodsolve): True
    test 177 pygeodesy.GeodesicSolve() class (pygeodesy.geodsolve): True
    test 178 pygeodesy.Geohash() class (pygeodesy.geohash): True
    test 179 pygeodesy.GeohashError() class (pygeodesy.geohash): True
    test 180 pygeodesy.GeoidError() class (pygeodesy.geoids): True
    test 181 pygeodesy.GeoidG2012B() class (pygeodesy.geoids): True
    test 182 pygeodesy.GeoidHeight2Tuple() class (pygeodesy.elevations): True
    test 183 pygeodesy.GeoidHeight5Tuple() class (pygeodesy.geoids): True
    test 184 pygeodesy.GeoidKarney() class (pygeodesy.geoids): True
    test 185 pygeodesy.GeoidPGM() class (pygeodesy.geoids): True
    test 186 pygeodesy.Georef() class (pygeodesy.wgrs): True
    test 187 pygeodesy.Gnomonic() class (pygeodesy.azimuthal): True
    test 188 pygeodesy.GnomonicExact() class (pygeodesy.azimuthal): True
    test 189 pygeodesy.GnomonicGeodSolve() class (pygeodesy.azimuthal): True
    test 190 pygeodesy.GnomonicKarney() class (pygeodesy.azimuthal): True
    test 191 pygeodesy.Hausdorff() class (pygeodesy.hausdorff): True
    test 192 pygeodesy.Hausdorff6Tuple() class (pygeodesy.hausdorff): True
    test 193 pygeodesy.HausdorffCosineAndoyerLambert() class (pygeodesy.hausdorff): True
    test 194 pygeodesy.HausdorffCosineForsytheAndoyerLambert() class (pygeodesy.hausdorff): True
    test 195 pygeodesy.HausdorffCosineLaw() class (pygeodesy.hausdorff): True
    test 196 pygeodesy.HausdorffDegrees() class (pygeodesy.hausdorff): True
    test 197 pygeodesy.HausdorffDistanceTo() class (pygeodesy.hausdorff): True
    test 198 pygeodesy.HausdorffEquirectangular() class (pygeodesy.hausdorff): True
    test 199 pygeodesy.HausdorffError() class (pygeodesy.hausdorff): True
    test 200 pygeodesy.HausdorffEuclidean() class (pygeodesy.hausdorff): True
    test 201 pygeodesy.HausdorffExact() class (pygeodesy.hausdorff): True
    test 202 pygeodesy.HausdorffFlatLocal() class (pygeodesy.hausdorff): True
    test 203 pygeodesy.HausdorffFlatPolar() class (pygeodesy.hausdorff): True
    test 204 pygeodesy.HausdorffHaversine() class (pygeodesy.hausdorff): True
    test 205 pygeodesy.HausdorffHubeny() class (pygeodesy.hausdorff): True
    test 206 pygeodesy.HausdorffKarney() class (pygeodesy.hausdorff): True
    test 207 pygeodesy.HausdorffRadians() class (pygeodesy.hausdorff): True
    test 208 pygeodesy.HausdorffThomas() class (pygeodesy.hausdorff): True
    test 209 pygeodesy.HausdorffVincentys() class (pygeodesy.hausdorff): True
    test 210 pygeodesy.Height() class (pygeodesy.units): True
    test 211 pygeodesy.HeightCubic() class (pygeodesy.heights): True
    test 212 pygeodesy.HeightError() class (pygeodesy.heights): True
    test 213 pygeodesy.HeightIDW() function (pygeodesy.deprecated): True
    test 214 pygeodesy.HeightIDW2() function (pygeodesy.deprecated): True
    test 215 pygeodesy.HeightIDW3() function (pygeodesy.deprecated): True
    test 216 pygeodesy.HeightIDWcosineAndoyerLambert() class (pygeodesy.heights): True
    test 217 pygeodesy.HeightIDWcosineForsytheAndoyerLambert() class (pygeodesy.heights): True
    test 218 pygeodesy.HeightIDWcosineLaw() class (pygeodesy.heights): True
    test 219 pygeodesy.HeightIDWdistanceTo() class (pygeodesy.heights): True
    test 220 pygeodesy.HeightIDWequirectangular() class (pygeodesy.heights): True
    test 221 pygeodesy.HeightIDWeuclidean() class (pygeodesy.heights): True
    test 222 pygeodesy.HeightIDWflatLocal() class (pygeodesy.heights): True
    test 223 pygeodesy.HeightIDWflatPolar() class (pygeodesy.heights): True
    test 224 pygeodesy.HeightIDWhaversine() class (pygeodesy.heights): True
    test 225 pygeodesy.HeightIDWhubeny() class (pygeodesy.heights): True
    test 226 pygeodesy.HeightIDWkarney() class (pygeodesy.heights): True
    test 227 pygeodesy.HeightIDWthomas() class (pygeodesy.heights): True
    test 228 pygeodesy.HeightIDWvincentys() class (pygeodesy.heights): True
    test 229 pygeodesy.HeightLSQBiSpline() class (pygeodesy.heights): True
    test 230 pygeodesy.HeightLinear() class (pygeodesy.heights): True
    test 231 pygeodesy.HeightSmoothBiSpline() class (pygeodesy.heights): True
    test 232 pygeodesy.Helmert7Tuple() class (pygeodesy.trf): True
    test 233 pygeodesy.INF float: True
    test 234 pygeodesy.INT0 int (pygeodesy.interns): True
    test 235 pygeodesy.Int() class (pygeodesy.units): True
    test 236 pygeodesy.Int_() class (pygeodesy.units): True
    test 237 pygeodesy.Intersection3Tuple() class (pygeodesy.namedTuples): True
    test 238 pygeodesy.IntersectionError() class (pygeodesy.errors): True
    test 239 pygeodesy.Inverse10Tuple() class (pygeodesy.karney): True
    test 240 pygeodesy.KTMError() class (pygeodesy.ktm): True
    test 241 pygeodesy.KTransverseMercator() class (pygeodesy.ktm): True
    test 242 pygeodesy.LCCError() class (pygeodesy.lcc): True
    test 243 pygeodesy.Lam() class (pygeodesy.units): True
    test 244 pygeodesy.Lam_() class (pygeodesy.units): True
    test 245 pygeodesy.LambertEqualArea() class (pygeodesy.azimuthal): True
    test 246 pygeodesy.Lat() class (pygeodesy.units): True
    test 247 pygeodesy.LatLon2PsxyIter() class (pygeodesy.iters): True
    test 248 pygeodesy.LatLon2Tuple() class (pygeodesy.namedTuples): True
    test 249 pygeodesy.LatLon2psxy() class (pygeodesy.points): True
    test 250 pygeodesy.LatLon3Tuple() class (pygeodesy.namedTuples): True
    test 251 pygeodesy.LatLon4Tuple() class (pygeodesy.namedTuples): True
    test 252 pygeodesy.LatLonAziRk4Tuple() class (pygeodesy.css): True
    test 253 pygeodesy.LatLonDatum3Tuple() class (pygeodesy.namedTuples): True
    test 254 pygeodesy.LatLonDatum5Tuple() class (pygeodesy.namedTuples): True
    test 255 pygeodesy.LatLonExact4Tuple() class (pygeodesy.deprecated): True
    test 256 pygeodesy.LatLonPrec3Tuple() class (pygeodesy.namedTuples): True
    test 257 pygeodesy.LatLonPrec5Tuple() class (pygeodesy.namedTuples): True
    test 258 pygeodesy.LatLon_() class (pygeodesy.points): True
    test 259 pygeodesy.Lat_() class (pygeodesy.units): True
    test 260 pygeodesy.LazyImportError() class (pygeodesy.lazily): True
    test 261 pygeodesy.Lcc() class (pygeodesy.lcc): True
    test 262 pygeodesy.LenError() class (pygeodesy.errors): True
    test 263 pygeodesy.LimitError() class (pygeodesy.errors): True
    test 264 pygeodesy.Local9Tuple() class (pygeodesy.ltpTuples): True
    test 265 pygeodesy.LocalCartesian() class (pygeodesy.ltp): True
    test 266 pygeodesy.LocalError() class (pygeodesy.ltp): True
    test 267 pygeodesy.Lon() class (pygeodesy.units): True
    test 268 pygeodesy.Lon_() class (pygeodesy.units): True
    test 269 pygeodesy.Ltp() class (pygeodesy.ltp): True
    test 270 pygeodesy.MANTIS int: True
    test 271 pygeodesy.MANT_DIG int: True
    test 272 pygeodesy.MAX float: True
    test 273 pygeodesy.MGRSError() class (pygeodesy.mgrs): True
    test 274 pygeodesy.MIN float: True
    test 275 pygeodesy.Meeus2Tuple() class (pygeodesy.vector2d): True
    test 276 pygeodesy.Meter() class (pygeodesy.units): True
    test 277 pygeodesy.Meter2() class (pygeodesy.units): True
    test 278 pygeodesy.Meter3() class (pygeodesy.units): True
    test 279 pygeodesy.Meter_() class (pygeodesy.units): True
    test 280 pygeodesy.Mgrs() class (pygeodesy.mgrs): True
    test 281 pygeodesy.Mgrs4Tuple() class (pygeodesy.mgrs): True
    test 282 pygeodesy.Mgrs6Tuple() class (pygeodesy.mgrs): True
    test 283 pygeodesy.NAN float: True
    test 284 pygeodesy.NEG0 float: True
    test 285 pygeodesy.NINF float: True
    test 286 pygeodesy.NN str (pygeodesy.interns): True
    test 287 pygeodesy.NearestOn2Tuple() class (pygeodesy.namedTuples): True
    test 288 pygeodesy.NearestOn3Tuple() class (pygeodesy.namedTuples): True
    test 289 pygeodesy.NearestOn4Tuple() class (pygeodesy.namedTuples): True
    test 290 pygeodesy.NearestOn5Tuple() class (pygeodesy.namedTuples): True
    test 291 pygeodesy.NearestOn6Tuple() class (pygeodesy.namedTuples): True
    test 292 pygeodesy.NearestOn8Tuple() class (pygeodesy.namedTuples): True
    test 293 pygeodesy.Ned() class (pygeodesy.ltpTuples): True
    test 294 pygeodesy.Ned3Tuple() class (pygeodesy.deprecated): True
    test 295 pygeodesy.Ned4Tuple() class (pygeodesy.ltpTuples): True
    test 296 pygeodesy.Neighbors8Dict() class (pygeodesy.geohash): True
    test 297 pygeodesy.Northing() class (pygeodesy.units): True
    test 298 pygeodesy.NumPyError() class (pygeodesy.errors): True
    test 299 pygeodesy.Number_() class (pygeodesy.units): True
    test 300 pygeodesy.Numpy2LatLon() class (pygeodesy.points): True
    test 301 pygeodesy.OK str: True
    test 302 pygeodesy.OSGRError() class (pygeodesy.osgr): True
    test 303 pygeodesy.Orthographic() class (pygeodesy.azimuthal): True
    test 304 pygeodesy.Osgr() class (pygeodesy.osgr): True
    test 305 pygeodesy.PGMError() class (pygeodesy.geoids): True
    test 306 pygeodesy.PI float: True
    test 307 pygeodesy.PI2 float: True
    test 308 pygeodesy.PI3 float: True
    test 309 pygeodesy.PI3_2 float: True
    test 310 pygeodesy.PI4 float: True
    test 311 pygeodesy.PI_2 float: True
    test 312 pygeodesy.PI_4 float: True
    test 313 pygeodesy.ParseError() class (pygeodesy.errors): True
    test 314 pygeodesy.Phi() class (pygeodesy.units): True
    test 315 pygeodesy.PhiLam2Tuple() class (pygeodesy.namedTuples): True
    test 316 pygeodesy.PhiLam3Tuple() class (pygeodesy.namedTuples): True
    test 317 pygeodesy.PhiLam4Tuple() class (pygeodesy.namedTuples): True
    test 318 pygeodesy.Phi_() class (pygeodesy.units): True
    test 319 pygeodesy.Point3Tuple() class (pygeodesy.namedTuples): True
    test 320 pygeodesy.Points2Tuple() class (pygeodesy.namedTuples): True
    test 321 pygeodesy.PointsError() class (pygeodesy.errors): True
    test 322 pygeodesy.PointsIter() class (pygeodesy.iters): True
    test 323 pygeodesy.PolygonArea() class (pygeodesy.geodesicx.gxarea): True
    test 324 pygeodesy.Precision_() class (pygeodesy.units): True
    test 325 pygeodesy.Property() class (pygeodesy.props): True
    test 326 pygeodesy.Property_RO() class (pygeodesy.props): True
    test 327 pygeodesy.R_FM float (pygeodesy.units): True
    test 328 pygeodesy.R_GM float (pygeodesy.units): True
    test 329 pygeodesy.R_KM float (pygeodesy.units): True
    test 330 pygeodesy.R_M float (pygeodesy.units): True
    test 331 pygeodesy.R_MA float (pygeodesy.units): True
    test 332 pygeodesy.R_MB float (pygeodesy.units): True
    test 333 pygeodesy.R_NM float (pygeodesy.units): True
    test 334 pygeodesy.R_SM float (pygeodesy.units): True
    test 335 pygeodesy.R_VM float (pygeodesy.units): True
    test 336 pygeodesy.Radians() class (pygeodesy.units): True
    test 337 pygeodesy.Radians2() class (pygeodesy.units): True
    test 338 pygeodesy.Radians_() class (pygeodesy.units): True
    test 339 pygeodesy.Radical2Tuple() class (pygeodesy.formy): True
    test 340 pygeodesy.Radii11Tuple() class (pygeodesy.vector2d): True
    test 341 pygeodesy.Radius() class (pygeodesy.units): True
    test 342 pygeodesy.Radius_() class (pygeodesy.units): True
    test 343 pygeodesy.RangeError() class (pygeodesy.errors): True
    test 344 pygeodesy.RefFrame() class (pygeodesy.trf): True
    test 345 pygeodesy.RefFrameError() function (pygeodesy.deprecated): True
    test 346 pygeodesy.RefFrames class pygeodesy.trf.RefFrames (pygeodesy.trf): True
    test 347 pygeodesy.ResectionError() class (pygeodesy.resections): True
    test 348 pygeodesy.ResidualError() class (pygeodesy.fsums): True
    test 349 pygeodesy.Resolutions2Tuple() class (pygeodesy.geohash): True
    test 350 pygeodesy.Reverse4Tuple() class (pygeodesy.namedTuples): True
    test 351 pygeodesy.Rhumb() class (pygeodesy.rhumbx): True
    test 352 pygeodesy.Rhumb7Tuple() class (pygeodesy.deprecated): True
    test 353 pygeodesy.Rhumb8Tuple() class (pygeodesy.rhumbx): True
    test 354 pygeodesy.RhumbError() class (pygeodesy.rhumbx): True
    test 355 pygeodesy.RhumbLine() class (pygeodesy.rhumbx): True
    test 356 pygeodesy.RhumbLineSolve() class (pygeodesy.rhumbsolve): True
    test 357 pygeodesy.RhumbOrder2Tuple() class (pygeodesy.rhumbx): True
    test 358 pygeodesy.RhumbSolve() class (pygeodesy.rhumbsolve): True
    test 359 pygeodesy.RhumbSolve7Tuple() class (pygeodesy.rhumbsolve): True
    test 360 pygeodesy.S_DEG str: True
    test 361 pygeodesy.S_DMS int: True
    test 362 pygeodesy.S_MIN str: True
    test 363 pygeodesy.S_RAD str (pygeodesy.interns): True
    test 364 pygeodesy.S_SEC str: True
    test 365 pygeodesy.S_SEP str (pygeodesy.interns): True
    test 366 pygeodesy.Scalar() class (pygeodesy.units): True
    test 367 pygeodesy.Scalar_() class (pygeodesy.units): True
    test 368 pygeodesy.SciPyError() class (pygeodesy.errors): True
    test 369 pygeodesy.SciPyWarning() class (pygeodesy.errors): True
    test 370 pygeodesy.Shape2Tuple() class (pygeodesy.points): True
    test 371 pygeodesy.Soddy4Tuple() class (pygeodesy.vector2d): True
    test 372 pygeodesy.Stereographic() class (pygeodesy.azimuthal): True
    test 373 pygeodesy.Str() class (pygeodesy.units): True
    test 374 pygeodesy.Str_() class (pygeodesy.interns): True
    test 375 pygeodesy.Survey3Tuple() class (pygeodesy.resections): True
    test 376 pygeodesy.TRFError() class (pygeodesy.errors): True
    test 377 pygeodesy.Tienstra7Tuple() class (pygeodesy.resections): True
    test 378 pygeodesy.Transform() class (pygeodesy.datums): True
    test 379 pygeodesy.Transform7Tuple() class (pygeodesy.deprecated): True
    test 380 pygeodesy.Transforms class pygeodesy.datums.Transforms (pygeodesy.datums): True
    test 381 pygeodesy.TriAngle4Tuple() class (pygeodesy.resections): True
    test 382 pygeodesy.TriSide2Tuple() class (pygeodesy.resections): True
    test 383 pygeodesy.TriSide4Tuple() class (pygeodesy.resections): True
    test 384 pygeodesy.Triangle7Tuple() class (pygeodesy.namedTuples): True
    test 385 pygeodesy.Triangle8Tuple() class (pygeodesy.namedTuples): True
    test 386 pygeodesy.TriangleError() class (pygeodesy.errors): True
    test 387 pygeodesy.Trilaterate5Tuple() class (pygeodesy.namedTuples): True
    test 388 pygeodesy.Tuple2LatLon() class (pygeodesy.points): True
    test 389 pygeodesy.UPSError() class (pygeodesy.ups): True
    test 390 pygeodesy.UTMError() class (pygeodesy.utm): True
    test 391 pygeodesy.UTMUPSError() class (pygeodesy.utmups): True
    test 392 pygeodesy.UnitError() class (pygeodesy.errors): True
    test 393 pygeodesy.Ups() class (pygeodesy.ups): True
    test 394 pygeodesy.Utm() class (pygeodesy.utm): True
    test 395 pygeodesy.UtmUps() function (pygeodesy.utmups): True
    test 396 pygeodesy.UtmUps2Tuple() class (pygeodesy.namedTuples): True
    test 397 pygeodesy.UtmUps4Tuple() class (pygeodesy.deprecated): True
    test 398 pygeodesy.UtmUps5Tuple() class (pygeodesy.namedTuples): True
    test 399 pygeodesy.UtmUps8Tuple() class (pygeodesy.namedTuples): True
    test 400 pygeodesy.UtmUpsLatLon5Tuple() class (pygeodesy.namedTuples): True
    test 401 pygeodesy.Vector2Tuple() class (pygeodesy.namedTuples): True
    test 402 pygeodesy.Vector3Tuple() class (pygeodesy.namedTuples): True
    test 403 pygeodesy.Vector3d() class (pygeodesy.vector3d): True
    test 404 pygeodesy.Vector4Tuple() class (pygeodesy.namedTuples): True
    test 405 pygeodesy.VectorError() class (pygeodesy.errors): True
    test 406 pygeodesy.VincentyError() class (pygeodesy.ellipsoidalVincenty): True
    test 407 pygeodesy.WGRSError() class (pygeodesy.wgrs): True
    test 408 pygeodesy.WebMercatorError() class (pygeodesy.webmercator): True
    test 409 pygeodesy.Wm() class (pygeodesy.webmercator): True
    test 410 pygeodesy.Xyz4Tuple() class (pygeodesy.ltpTuples): True
    test 411 pygeodesy.XyzLocal() class (pygeodesy.ltpTuples): True
    test 412 pygeodesy.Zone() class (pygeodesy.units): True
    test 413 pygeodesy.a_b2e() function (pygeodesy.ellipsoids): True
    test 414 pygeodesy.a_b2e2() function (pygeodesy.ellipsoids): True
    test 415 pygeodesy.a_b2e22() function (pygeodesy.ellipsoids): True
    test 416 pygeodesy.a_b2e32() function (pygeodesy.ellipsoids): True
    test 417 pygeodesy.a_b2f() function (pygeodesy.ellipsoids): True
    test 418 pygeodesy.a_b2f2() function (pygeodesy.ellipsoids): True
    test 419 pygeodesy.a_b2f_() function (pygeodesy.ellipsoids): True
    test 420 pygeodesy.a_b2n() function (pygeodesy.ellipsoids): True
    test 421 pygeodesy.a_f2Tuple() class (pygeodesy.ellipsoids): True
    test 422 pygeodesy.a_f2b() function (pygeodesy.ellipsoids): True
    test 423 pygeodesy.a_f_2b() function (pygeodesy.ellipsoids): True
    test 424 pygeodesy.acos1() function (pygeodesy.utily): True
    test 425 pygeodesy.acre2ha() function (pygeodesy.utily): True
    test 426 pygeodesy.acre2m2() function (pygeodesy.utily): True
    test 427 pygeodesy.albers module: True
    test 428 pygeodesy.anStr() function (pygeodesy.deprecated): True
    test 429 pygeodesy.anstr() function (pygeodesy.streprs): True
    test 430 pygeodesy.antipode() function (pygeodesy.formy): True
    test 431 pygeodesy.antipode_() function (pygeodesy.formy): True
    test 432 pygeodesy.areaOf() function (pygeodesy.points): True
    test 433 pygeodesy.areaof() function (pygeodesy.deprecated): True
    test 434 pygeodesy.asin1() function (pygeodesy.utily): True
    test 435 pygeodesy.atan2b() function (pygeodesy.utily): True
    test 436 pygeodesy.atan2d() function (pygeodesy.utily): True
    test 437 pygeodesy.atand() function (pygeodesy.utily): True
    test 438 pygeodesy.attrs() function (pygeodesy.streprs): True
    test 439 pygeodesy.azimuthal module: True
    test 440 pygeodesy.b_f2a() function (pygeodesy.ellipsoids): True
    test 441 pygeodesy.b_f_2a() function (pygeodesy.ellipsoids): True
    test 442 pygeodesy.bases module: True
    test 443 pygeodesy.basics module: True
    test 444 pygeodesy.bearing() function (pygeodesy.formy): True
    test 445 pygeodesy.bearingDMS() function (pygeodesy.dms): True
    test 446 pygeodesy.bearing_() function (pygeodesy.formy): True
    test 447 pygeodesy.bounds() function (pygeodesy.deprecated): True
    test 448 pygeodesy.boundsOf() function (pygeodesy.points): True
    test 449 pygeodesy.callername() function (pygeodesy.named): True
    test 450 pygeodesy.cartesianBase module: True
    test 451 pygeodesy.cassini() function (pygeodesy.resections): True
    test 452 pygeodesy.cbrt() function (pygeodesy.fmath): True
    test 453 pygeodesy.cbrt2() function (pygeodesy.fmath): True
    test 454 pygeodesy.centroidOf() function (pygeodesy.points): True
    test 455 pygeodesy.chain2m() function (pygeodesy.utily): True
    test 456 pygeodesy.circin6() function (pygeodesy.vector2d): True
    test 457 pygeodesy.circle4() function (pygeodesy.utily): True
    test 458 pygeodesy.circum3() function (pygeodesy.vector2d): True
    test 459 pygeodesy.circum4_() function (pygeodesy.vector2d): True
    test 460 pygeodesy.classname() function (pygeodesy.named): True
    test 461 pygeodesy.classnaming() function (pygeodesy.named): True
    test 462 pygeodesy.clipCS3() function (pygeodesy.deprecated): True
    test 463 pygeodesy.clipCS4() function (pygeodesy.clipy): True
    test 464 pygeodesy.clipDMS() function (pygeodesy.deprecated): True
    test 465 pygeodesy.clipDegrees() function (pygeodesy.dms): True
    test 466 pygeodesy.clipLB6() function (pygeodesy.clipy): True
    test 467 pygeodesy.clipRadians() function (pygeodesy.dms): True
    test 468 pygeodesy.clipSH() function (pygeodesy.clipy): True
    test 469 pygeodesy.clipSH3() function (pygeodesy.clipy): True
    test 470 pygeodesy.clipStr() function (pygeodesy.deprecated): True
    test 471 pygeodesy.clips() function (pygeodesy.basics): True
    test 472 pygeodesy.clipy module: True
    test 473 pygeodesy.collins() function (pygeodesy.deprecated): True
    test 474 pygeodesy.collins5() function (pygeodesy.resections): True
    test 475 pygeodesy.compassAngle() function (pygeodesy.formy): True
    test 476 pygeodesy.compassDMS() function (pygeodesy.dms): True
    test 477 pygeodesy.compassPoint() function (pygeodesy.dms): True
    test 478 pygeodesy.copysign0() function (pygeodesy.basics): True
    test 479 pygeodesy.copytype() function (pygeodesy.basics): True
    test 480 pygeodesy.cosineAndoyerLambert() function (pygeodesy.formy): True
    test 481 pygeodesy.cosineAndoyerLambert_() function (pygeodesy.formy): True
    test 482 pygeodesy.cosineForsytheAndoyerLambert() function (pygeodesy.formy): True
    test 483 pygeodesy.cosineForsytheAndoyerLambert_() function (pygeodesy.formy): True
    test 484 pygeodesy.cosineLaw() function (pygeodesy.formy): True
    test 485 pygeodesy.cosineLaw_() function (pygeodesy.formy): True
    test 486 pygeodesy.cot() function (pygeodesy.utily): True
    test 487 pygeodesy.cot_() function (pygeodesy.utily): True
    test 488 pygeodesy.cotd() function (pygeodesy.utily): True
    test 489 pygeodesy.cotd_() function (pygeodesy.utily): True
    test 490 pygeodesy.crosserrors() function (pygeodesy.errors): True
    test 491 pygeodesy.css module: True
    test 492 pygeodesy.date2epoch() function (pygeodesy.trf): True
    test 493 pygeodesy.datum module: True
    test 494 pygeodesy.datums module: True
    test 495 pygeodesy.decodeEPSG2() function (pygeodesy.deprecated): True
    test 496 pygeodesy.degDMS() function (pygeodesy.dms): True
    test 497 pygeodesy.degrees class builtin_function_or_method (math): True
    test 498 pygeodesy.degrees180() function (pygeodesy.utily): True
    test 499 pygeodesy.degrees2grades() function (pygeodesy.utily): True
    test 500 pygeodesy.degrees2m() function (pygeodesy.utily): True
    test 501 pygeodesy.degrees360() function (pygeodesy.utily): True
    test 502 pygeodesy.degrees90() function (pygeodesy.utily): True
    test 503 pygeodesy.deprecated module: True
    test 504 pygeodesy.deprecated_Property_RO() function (pygeodesy.props): True
    test 505 pygeodesy.deprecated_class() function (pygeodesy.props): True
    test 506 pygeodesy.deprecated_function() function (pygeodesy.props): True
    test 507 pygeodesy.deprecated_method() function (pygeodesy.props): True
    test 508 pygeodesy.deprecated_property_RO() function (pygeodesy.props): True
    test 509 pygeodesy.dms module: True
    test 510 pygeodesy.ecef module: True
    test 511 pygeodesy.egmGeoidHeights() function (pygeodesy.geoids): True
    test 512 pygeodesy.elevation2() function (pygeodesy.elevations): True
    test 513 pygeodesy.elevations module: True
    test 514 pygeodesy.ellipsoidalBase module: True
    test 515 pygeodesy.ellipsoidalBaseDI module: True
    test 516 pygeodesy.ellipsoidalExact module: True
    test 517 pygeodesy.ellipsoidalGeodSolve module: True
    test 518 pygeodesy.ellipsoidalKarney module: True
    test 519 pygeodesy.ellipsoidalNvector module: True
    test 520 pygeodesy.ellipsoidalVincenty module: True
    test 521 pygeodesy.ellipsoids module: True
    test 522 pygeodesy.elliptic module: True
    test 523 pygeodesy.enStr2() function (pygeodesy.deprecated): True
    test 524 pygeodesy.encodeEPSG() function (pygeodesy.deprecated): True
    test 525 pygeodesy.enstr2() function (pygeodesy.streprs): True
    test 526 pygeodesy.epoch2date() function (pygeodesy.trf): True
    test 527 pygeodesy.epsg module: True
    test 528 pygeodesy.equidistant() function (pygeodesy.azimuthal): True
    test 529 pygeodesy.equirectangular() function (pygeodesy.formy): True
    test 530 pygeodesy.equirectangular3() function (pygeodesy.deprecated): True
    test 531 pygeodesy.equirectangular_() function (pygeodesy.formy): True
    test 532 pygeodesy.errors module: True
    test 533 pygeodesy.etm module: True
    test 534 pygeodesy.euclid() function (pygeodesy.fmath): True
    test 535 pygeodesy.euclid_() function (pygeodesy.fmath): True
    test 536 pygeodesy.euclidean() function (pygeodesy.formy): True
    test 537 pygeodesy.euclidean_() function (pygeodesy.formy): True
    test 538 pygeodesy.exception_chaining() function (pygeodesy.errors): True
    test 539 pygeodesy.excessAbc() function (pygeodesy.formy): True
    test 540 pygeodesy.excessGirard() function (pygeodesy.formy): True
    test 541 pygeodesy.excessKarney() function (pygeodesy.formy): True
    test 542 pygeodesy.excessKarney_() function (pygeodesy.formy): True
    test 543 pygeodesy.excessLHuilier() function (pygeodesy.formy): True
    test 544 pygeodesy.excessQuad() function (pygeodesy.formy): True
    test 545 pygeodesy.excessQuad_() function (pygeodesy.formy): True
    test 546 pygeodesy.f2e2() function (pygeodesy.ellipsoids): True
    test 547 pygeodesy.f2e22() function (pygeodesy.ellipsoids): True
    test 548 pygeodesy.f2e32() function (pygeodesy.ellipsoids): True
    test 549 pygeodesy.f2f2() function (pygeodesy.ellipsoids): True
    test 550 pygeodesy.f2f_() function (pygeodesy.ellipsoids): True
    test 551 pygeodesy.f2n() function (pygeodesy.ellipsoids): True
    test 552 pygeodesy.fStr() function (pygeodesy.deprecated): True
    test 553 pygeodesy.fStrzs() function (pygeodesy.deprecated): True
    test 554 pygeodesy.f_2f() function (pygeodesy.ellipsoids): True
    test 555 pygeodesy.facos1() function (pygeodesy.fmath): True
    test 556 pygeodesy.false2f() function (pygeodesy.deprecated): True
    test 557 pygeodesy.falsed2f() function (pygeodesy.deprecated): True
    test 558 pygeodesy.fasin1() function (pygeodesy.fmath): True
    test 559 pygeodesy.fatan() function (pygeodesy.fmath): True
    test 560 pygeodesy.fatan1() function (pygeodesy.fmath): True
    test 561 pygeodesy.fatan2() function (pygeodesy.fmath): True
    test 562 pygeodesy.fathom2m() function (pygeodesy.utily): True
    test 563 pygeodesy.favg() function (pygeodesy.fmath): True
    test 564 pygeodesy.fdot() function (pygeodesy.fmath): True
    test 565 pygeodesy.fdot3() function (pygeodesy.fmath): True
    test 566 pygeodesy.fhorner() function (pygeodesy.fmath): True
    test 567 pygeodesy.fidw() function (pygeodesy.fmath): True
    test 568 pygeodesy.flatLocal() function (pygeodesy.formy): True
    test 569 pygeodesy.flatLocal_() function (pygeodesy.formy): True
    test 570 pygeodesy.flatPolar() function (pygeodesy.formy): True
    test 571 pygeodesy.flatPolar_() function (pygeodesy.formy): True
    test 572 pygeodesy.float_() function (pygeodesy.interns): True
    test 573 pygeodesy.fmath module: True
    test 574 pygeodesy.fmean() function (pygeodesy.fmath): True
    test 575 pygeodesy.fmean_() function (pygeodesy.fmath): True
    test 576 pygeodesy.formy module: True
    test 577 pygeodesy.fpolynomial() function (pygeodesy.fmath): True
    test 578 pygeodesy.fpowers() function (pygeodesy.fmath): True
    test 579 pygeodesy.fprod class builtin_function_or_method (math): True
    test 580 pygeodesy.fractional() function (pygeodesy.points): True
    test 581 pygeodesy.frange() function (pygeodesy.fmath): True
    test 582 pygeodesy.frechet module: True
    test 583 pygeodesy.frechet_() function (pygeodesy.frechet): True
    test 584 pygeodesy.freduce class builtin_function_or_method (_functools): True
    test 585 pygeodesy.fremainder() function (pygeodesy.fmath): True
    test 586 pygeodesy.fstats module: True
    test 587 pygeodesy.fstr() function (pygeodesy.streprs): True
    test 588 pygeodesy.fstrzs() function (pygeodesy.streprs): True
    test 589 pygeodesy.fsum() function (pygeodesy.fsums): True
    test 590 pygeodesy.fsum1() function (pygeodesy.fsums): True
    test 591 pygeodesy.fsum1_() function (pygeodesy.fsums): True
    test 592 pygeodesy.fsum_() function (pygeodesy.fsums): True
    test 593 pygeodesy.fsums module: True
    test 594 pygeodesy.ft2m() function (pygeodesy.utily): True
    test 595 pygeodesy.furlong2m() function (pygeodesy.utily): True
    test 596 pygeodesy.gars module: True
    test 597 pygeodesy.geodesicx module: True
    test 598 pygeodesy.geodsolve module: True
    test 599 pygeodesy.geohash module: True
    test 600 pygeodesy.geoidHeight2() function (pygeodesy.elevations): True
    test 601 pygeodesy.geoids module: True
    test 602 pygeodesy.gnomonic() function (pygeodesy.azimuthal): True
    test 603 pygeodesy.grades() function (pygeodesy.utily): True
    test 604 pygeodesy.grades2degrees() function (pygeodesy.utily): True
    test 605 pygeodesy.grades2radians() function (pygeodesy.utily): True
    test 606 pygeodesy.grades400() function (pygeodesy.utily): True
    test 607 pygeodesy.gx module: True
    test 608 pygeodesy.gxarea module: True
    test 609 pygeodesy.gxline module: True
    test 610 pygeodesy.halfs2() function (pygeodesy.basics): True
    test 611 pygeodesy.hartzell() function (pygeodesy.formy): True
    test 612 pygeodesy.hausdorff module: True
    test 613 pygeodesy.hausdorff_() function (pygeodesy.hausdorff): True
    test 614 pygeodesy.haversine() function (pygeodesy.formy): True
    test 615 pygeodesy.haversine_() function (pygeodesy.formy): True
    test 616 pygeodesy.heightOf() function (pygeodesy.formy): True
    test 617 pygeodesy.heights module: True
    test 618 pygeodesy.horizon() function (pygeodesy.formy): True
    test 619 pygeodesy.hstr() function (pygeodesy.streprs): True
    test 620 pygeodesy.hubeny() function (pygeodesy.formy): True
    test 621 pygeodesy.hubeny_() function (pygeodesy.formy): True
    test 622 pygeodesy.hypot class builtin_function_or_method (math): True
    test 623 pygeodesy.hypot1() function (pygeodesy.fmath): True
    test 624 pygeodesy.hypot2() function (pygeodesy.fmath): True
    test 625 pygeodesy.hypot2_() function (pygeodesy.fmath): True
    test 626 pygeodesy.hypot3() function (pygeodesy.deprecated): True
    test 627 pygeodesy.hypot_ class builtin_function_or_method (math): True
    test 628 pygeodesy.inStr() function (pygeodesy.deprecated): True
    test 629 pygeodesy.instr() function (pygeodesy.streprs): True
    test 630 pygeodesy.interns module: True
    test 631 pygeodesy.intersection3d3() function (pygeodesy.vector3d): True
    test 632 pygeodesy.intersections2() function (pygeodesy.formy): True
    test 633 pygeodesy.isLazy int: True
    test 634 pygeodesy.isNumpy2() function (pygeodesy.iters): True
    test 635 pygeodesy.isPoints2() function (pygeodesy.iters): True
    test 636 pygeodesy.isTuple2() function (pygeodesy.iters): True
    test 637 pygeodesy.isantipode() function (pygeodesy.formy): True
    test 638 pygeodesy.isantipode_() function (pygeodesy.formy): True
    test 639 pygeodesy.isbool() function (pygeodesy.basics): True
    test 640 pygeodesy.isclass() function (inspect): True
    test 641 pygeodesy.isclockwise() function (pygeodesy.points): True
    test 642 pygeodesy.isclose() function (pygeodesy.basics): True
    test 643 pygeodesy.iscolinearWith() function (pygeodesy.vector3d): True
    test 644 pygeodesy.iscomplex() function (pygeodesy.basics): True
    test 645 pygeodesy.isconvex() function (pygeodesy.points): True
    test 646 pygeodesy.isconvex_() function (pygeodesy.points): True
    test 647 pygeodesy.isenclosedBy() function (pygeodesy.points): True
    test 648 pygeodesy.isenclosedby() function (pygeodesy.deprecated): True
    test 649 pygeodesy.isfinite() function (pygeodesy.basics): True
    test 650 pygeodesy.isidentifier class method_descriptor: True
    test 651 pygeodesy.isinf class builtin_function_or_method (math): True
    test 652 pygeodesy.isint() function (pygeodesy.basics): True
    test 653 pygeodesy.isint0() function (pygeodesy.basics): True
    test 654 pygeodesy.iskeyword class builtin_function_or_method: True
    test 655 pygeodesy.isnan class builtin_function_or_method (math): True
    test 656 pygeodesy.isnear0() function (pygeodesy.basics): True
    test 657 pygeodesy.isnear1() function (pygeodesy.basics): True
    test 658 pygeodesy.isneg0() function (pygeodesy.basics): True
    test 659 pygeodesy.isninf() function (pygeodesy.basics): True
    test 660 pygeodesy.isnon0() function (pygeodesy.basics): True
    test 661 pygeodesy.isodd() function (pygeodesy.basics): True
    test 662 pygeodesy.ispolar() function (pygeodesy.points): True
    test 663 pygeodesy.isscalar() function (pygeodesy.basics): True
    test 664 pygeodesy.issequence() function (pygeodesy.basics): True
    test 665 pygeodesy.isstr() function (pygeodesy.basics): True
    test 666 pygeodesy.issubclassof() function (pygeodesy.basics): True
    test 667 pygeodesy.istuplist() function (pygeodesy.basics): True
    test 668 pygeodesy.iterNumpy2() function (pygeodesy.iters): True
    test 669 pygeodesy.iterNumpy2over() function (pygeodesy.iters): True
    test 670 pygeodesy.iters module: True
    test 671 pygeodesy.joined() function (pygeodesy.deprecated): True
    test 672 pygeodesy.joined_() function (pygeodesy.deprecated): True
    test 673 pygeodesy.karney module: True
    test 674 pygeodesy.ktm module: True
    test 675 pygeodesy.latDMS() function (pygeodesy.dms): True
    test 676 pygeodesy.latlon2n_xyz() function (pygeodesy.formy): True
    test 677 pygeodesy.latlonBase module: True
    test 678 pygeodesy.latlonDMS() function (pygeodesy.dms): True
    test 679 pygeodesy.latlonDMS_() function (pygeodesy.dms): True
    test 680 pygeodesy.lazily module: True
    test 681 pygeodesy.lcc module: True
    test 682 pygeodesy.len2() function (pygeodesy.basics): True
    test 683 pygeodesy.limiterrors() function (pygeodesy.errors): True
    test 684 pygeodesy.lonDMS() function (pygeodesy.dms): True
    test 685 pygeodesy.ltp module: True
    test 686 pygeodesy.ltpTuples module: True
    test 687 pygeodesy.luneOf() function (pygeodesy.points): True
    test 688 pygeodesy.m2NM() function (pygeodesy.utily): True
    test 689 pygeodesy.m2SM() function (pygeodesy.utily): True
    test 690 pygeodesy.m2chain() function (pygeodesy.utily): True
    test 691 pygeodesy.m2degrees() function (pygeodesy.utily): True
    test 692 pygeodesy.m2fathom() function (pygeodesy.utily): True
    test 693 pygeodesy.m2ft() function (pygeodesy.utily): True
    test 694 pygeodesy.m2furlong() function (pygeodesy.utily): True
    test 695 pygeodesy.m2km() function (pygeodesy.utily): True
    test 696 pygeodesy.m2radians() function (pygeodesy.utily): True
    test 697 pygeodesy.m2toise() function (pygeodesy.utily): True
    test 698 pygeodesy.m2yard() function (pygeodesy.utily): True
    test 699 pygeodesy.machine() function (pygeodesy.interns): True
    test 700 pygeodesy.map1() function (pygeodesy.basics): True
    test 701 pygeodesy.map2() function (pygeodesy.basics): True
    test 702 pygeodesy.meeus2() function (pygeodesy.vector2d): True
    test 703 pygeodesy.mgrs module: True
    test 704 pygeodesy.modulename() function (pygeodesy.named): True
    test 705 pygeodesy.n2e2() function (pygeodesy.ellipsoids): True
    test 706 pygeodesy.n2f() function (pygeodesy.ellipsoids): True
    test 707 pygeodesy.n2f_() function (pygeodesy.ellipsoids): True
    test 708 pygeodesy.n_xyz2latlon() function (pygeodesy.formy): True
    test 709 pygeodesy.n_xyz2philam() function (pygeodesy.formy): True
    test 710 pygeodesy.named module: True
    test 711 pygeodesy.namedTuples module: True
    test 712 pygeodesy.nameof() function (pygeodesy.named): True
    test 713 pygeodesy.nearestOn() function (pygeodesy.vector3d): True
    test 714 pygeodesy.nearestOn3() function (pygeodesy.deprecated): True
    test 715 pygeodesy.nearestOn4() function (pygeodesy.deprecated): True
    test 716 pygeodesy.nearestOn5() function (pygeodesy.points): True
    test 717 pygeodesy.nearestOn6() function (pygeodesy.vector3d): True
    test 718 pygeodesy.neg() function (pygeodesy.basics): True
    test 719 pygeodesy.neg_() function (pygeodesy.basics): True
    test 720 pygeodesy.norm2() function (pygeodesy.fmath): True
    test 721 pygeodesy.normDMS() function (pygeodesy.dms): True
    test 722 pygeodesy.norm_() function (pygeodesy.fmath): True
    test 723 pygeodesy.notImplemented() function (pygeodesy.named): True
    test 724 pygeodesy.notOverloaded() function (pygeodesy.named): True
    test 725 pygeodesy.nvector module: True
    test 726 pygeodesy.nvectorBase module: True
    test 727 pygeodesy.opposing() function (pygeodesy.formy): True
    test 728 pygeodesy.opposing_() function (pygeodesy.formy): True
    test 729 pygeodesy.osgr module: True
    test 730 pygeodesy.pairs() function (pygeodesy.streprs): True
    test 731 pygeodesy.parse3d() function (pygeodesy.vector3d): True
    test 732 pygeodesy.parse3llh() function (pygeodesy.dms): True
    test 733 pygeodesy.parseDDDMMSS() function (pygeodesy.dms): True
    test 734 pygeodesy.parseDMS() function (pygeodesy.dms): True
    test 735 pygeodesy.parseDMS2() function (pygeodesy.dms): True
    test 736 pygeodesy.parseETM5() function (pygeodesy.etm): True
    test 737 pygeodesy.parseMGRS() function (pygeodesy.mgrs): True
    test 738 pygeodesy.parseOSGR() function (pygeodesy.osgr): True
    test 739 pygeodesy.parseRad() function (pygeodesy.dms): True
    test 740 pygeodesy.parseUPS5() function (pygeodesy.ups): True
    test 741 pygeodesy.parseUTM() function (pygeodesy.deprecated): True
    test 742 pygeodesy.parseUTM5() function (pygeodesy.utm): True
    test 743 pygeodesy.parseUTMUPS5() function (pygeodesy.utmups): True
    test 744 pygeodesy.parseWM() function (pygeodesy.webmercator): True
    test 745 pygeodesy.perimeterOf() function (pygeodesy.points): True
    test 746 pygeodesy.perimeterof() function (pygeodesy.deprecated): True
    test 747 pygeodesy.philam2n_xyz() function (pygeodesy.formy): True
    test 748 pygeodesy.pierlot() function (pygeodesy.resections): True
    test 749 pygeodesy.points module: True
    test 750 pygeodesy.points2() function (pygeodesy.iters): True
    test 751 pygeodesy.polygon() function (pygeodesy.deprecated): True
    test 752 pygeodesy.precision() function (pygeodesy.dms): True
    test 753 pygeodesy.print_() function (pygeodesy.lazily): True
    test 754 pygeodesy.printf() function (pygeodesy.lazily): True
    test 755 pygeodesy.property_RO() class (pygeodesy.props): True
    test 756 pygeodesy.property_doc_() function (pygeodesy.props): True
    test 757 pygeodesy.props module: True
    test 758 pygeodesy.pygeodesy_abspath str: True
    test 759 pygeodesy.quadOf() function (pygeodesy.points): True
    test 760 pygeodesy.radians class builtin_function_or_method (math): True
    test 761 pygeodesy.radians2m() function (pygeodesy.utily): True
    test 762 pygeodesy.radiansPI() function (pygeodesy.utily): True
    test 763 pygeodesy.radiansPI2() function (pygeodesy.utily): True
    test 764 pygeodesy.radiansPI_2() function (pygeodesy.utily): True
    test 765 pygeodesy.radical2() function (pygeodesy.formy): True
    test 766 pygeodesy.radii11() function (pygeodesy.vector2d): True
    test 767 pygeodesy.randomrangenerator() function (pygeodesy.hausdorff): True
    test 768 pygeodesy.rangerrors() function (pygeodesy.errors): True
    test 769 pygeodesy.remainder class builtin_function_or_method (math): True
    test 770 pygeodesy.reprs() function (pygeodesy.streprs): True
    test 771 pygeodesy.resections module: True
    test 772 pygeodesy.rhumbsolve module: True
    test 773 pygeodesy.rhumbx module: True
    test 774 pygeodesy.scalar() function (pygeodesy.deprecated): True
    test 775 pygeodesy.signBit() function (pygeodesy.basics): True
    test 776 pygeodesy.signOf() function (pygeodesy.basics): True
    test 777 pygeodesy.simplify module: True
    test 778 pygeodesy.simplify1() function (pygeodesy.simplify): True
    test 779 pygeodesy.simplify2() function (pygeodesy.deprecated): True
    test 780 pygeodesy.simplifyRDP() function (pygeodesy.simplify): True
    test 781 pygeodesy.simplifyRDPm() function (pygeodesy.simplify): True
    test 782 pygeodesy.simplifyRW() function (pygeodesy.simplify): True
    test 783 pygeodesy.simplifyVW() function (pygeodesy.simplify): True
    test 784 pygeodesy.simplifyVWm() function (pygeodesy.simplify): True
    test 785 pygeodesy.sincos2() function (pygeodesy.utily): True
    test 786 pygeodesy.sincos2_() function (pygeodesy.utily): True
    test 787 pygeodesy.sincos2d() function (pygeodesy.utily): True
    test 788 pygeodesy.sincos2d_() function (pygeodesy.utily): True
    test 789 pygeodesy.snellius3() function (pygeodesy.resections): True
    test 790 pygeodesy.soddy4() function (pygeodesy.vector2d): True
    test 791 pygeodesy.solveBase module: True
    test 792 pygeodesy.sphericalBase module: True
    test 793 pygeodesy.sphericalNvector module: True
    test 794 pygeodesy.sphericalTrigonometry module: True
    test 795 pygeodesy.splice() function (pygeodesy.basics): True
    test 796 pygeodesy.sqrt0() function (pygeodesy.fmath): True
    test 797 pygeodesy.sqrt3() function (pygeodesy.fmath): True
    test 798 pygeodesy.sqrt_a() function (pygeodesy.fmath): True
    test 799 pygeodesy.streprs module: True
    test 800 pygeodesy.strs() function (pygeodesy.streprs): True
    test 801 pygeodesy.tanPI_2_2() function (pygeodesy.utily): True
    test 802 pygeodesy.tan_2() function (pygeodesy.utily): True
    test 803 pygeodesy.tand() function (pygeodesy.utily): True
    test 804 pygeodesy.tand_() function (pygeodesy.utily): True
    test 805 pygeodesy.thomas() function (pygeodesy.formy): True
    test 806 pygeodesy.thomas_() function (pygeodesy.formy): True
    test 807 pygeodesy.tienstra() function (pygeodesy.deprecated): True
    test 808 pygeodesy.tienstra7() function (pygeodesy.resections): True
    test 809 pygeodesy.toCss() function (pygeodesy.css): True
    test 810 pygeodesy.toDMS() function (pygeodesy.dms): True
    test 811 pygeodesy.toEtm8() function (pygeodesy.etm): True
    test 812 pygeodesy.toLcc() function (pygeodesy.lcc): True
    test 813 pygeodesy.toMgrs() function (pygeodesy.mgrs): True
    test 814 pygeodesy.toOsgr() function (pygeodesy.osgr): True
    test 815 pygeodesy.toUps8() function (pygeodesy.ups): True
    test 816 pygeodesy.toUtm() function (pygeodesy.deprecated): True
    test 817 pygeodesy.toUtm8() function (pygeodesy.utm): True
    test 818 pygeodesy.toUtmUps8() function (pygeodesy.utmups): True
    test 819 pygeodesy.toWm() function (pygeodesy.webmercator): True
    test 820 pygeodesy.toise2m() function (pygeodesy.utily): True
    test 821 pygeodesy.trf module: True
    test 822 pygeodesy.trfXform() function (pygeodesy.trf): True
    test 823 pygeodesy.triAngle() function (pygeodesy.resections): True
    test 824 pygeodesy.triAngle4() function (pygeodesy.resections): True
    test 825 pygeodesy.triSide() function (pygeodesy.resections): True
    test 826 pygeodesy.triSide2() function (pygeodesy.resections): True
    test 827 pygeodesy.triSide4() function (pygeodesy.resections): True
    test 828 pygeodesy.trilaterate2d2() function (pygeodesy.vector3d): True
    test 829 pygeodesy.trilaterate3d2() function (pygeodesy.vector3d): True
    test 830 pygeodesy.tyr3d() function (pygeodesy.ltp): True
    test 831 pygeodesy.ub2str() function (pygeodesy.basics): True
    test 832 pygeodesy.unStr() function (pygeodesy.deprecated): True
    test 833 pygeodesy.units module: True
    test 834 pygeodesy.unroll180() function (pygeodesy.utily): True
    test 835 pygeodesy.unrollPI() function (pygeodesy.utily): True
    test 836 pygeodesy.unsign0() function (pygeodesy.deprecated): True
    test 837 pygeodesy.unsigned0() function (pygeodesy.basics): True
    test 838 pygeodesy.unstr() function (pygeodesy.streprs): True
    test 839 pygeodesy.ups module: True
    test 840 pygeodesy.upsZoneBand5() function (pygeodesy.ups): True
    test 841 pygeodesy.utily module: True
    test 842 pygeodesy.utm module: True
    test 843 pygeodesy.utmZoneBand2() function (pygeodesy.deprecated): True
    test 844 pygeodesy.utmZoneBand5() function (pygeodesy.utm): True
    test 845 pygeodesy.utmups module: True
    test 846 pygeodesy.utmupsBase module: True
    test 847 pygeodesy.utmupsValidate() function (pygeodesy.utmups): True
    test 848 pygeodesy.utmupsValidateOK() function (pygeodesy.utmups): True
    test 849 pygeodesy.utmupsZoneBand5() function (pygeodesy.utmups): True
    test 850 pygeodesy.vector2d module: True
    test 851 pygeodesy.vector3d module: True
    test 852 pygeodesy.vector3dBase module: True
    test 853 pygeodesy.version str: True
    test 854 pygeodesy.vincentys() function (pygeodesy.formy): True
    test 855 pygeodesy.vincentys_() function (pygeodesy.formy): True
    test 856 pygeodesy.webmercator module: True
    test 857 pygeodesy.wgrs module: True
    test 858 pygeodesy.wildberger3() function (pygeodesy.resections): True
    test 859 pygeodesy.wrap180() function (pygeodesy.utily): True
    test 860 pygeodesy.wrap360() function (pygeodesy.utily): True
    test 861 pygeodesy.wrap90() function (pygeodesy.utily): True
    test 862 pygeodesy.wrapPI() function (pygeodesy.utily): True
    test 863 pygeodesy.wrapPI2() function (pygeodesy.utily): True
    test 864 pygeodesy.wrapPI_2() function (pygeodesy.utily): True
    test 865 pygeodesy.yard2m() function (pygeodesy.utily): True

    testModule(pygeodesy.albers, 22.07.07)
    test 866 albers.Albers7Tuple() class: True
    test 867 albers.AlbersEqualArea() class: True
    test 868 albers.AlbersEqualArea2() class: True
    test 869 albers.AlbersEqualArea4() class: True
    test 870 albers.AlbersEqualAreaCylindrical() class: True
    test 871 albers.AlbersEqualAreaNorth() class: True
    test 872 albers.AlbersEqualAreaSouth() class: True
    test 873 albers.AlbersError() class: True

    testModule(pygeodesy.azimuthal, 22.06.16)
    test 874 azimuthal.Azimuthal7Tuple() class: True
    test 875 azimuthal.AzimuthalError() class: True
    test 876 azimuthal.Equidistant() class: True
    test 877 azimuthal.EquidistantExact() class: True
    test 878 azimuthal.EquidistantGeodSolve() class: True
    test 879 azimuthal.EquidistantKarney() class: True
    test 880 azimuthal.Gnomonic() class: True
    test 881 azimuthal.GnomonicExact() class: True
    test 882 azimuthal.GnomonicGeodSolve() class: True
    test 883 azimuthal.GnomonicKarney() class: True
    test 884 azimuthal.LambertEqualArea() class: True
    test 885 azimuthal.Orthographic() class: True
    test 886 azimuthal.Stereographic() class: True
    test 887 azimuthal.equidistant() function: True
    test 888 azimuthal.gnomonic() function: True

    testModule(pygeodesy.deprecated.bases, 21.02.10)

    testModule(pygeodesy.basics, 22.07.04)
    test 889 basics.clips() function: True
    test 890 basics.copysign0() function: True
    test 891 basics.copytype() function: True
    test 892 basics.halfs2() function: True
    test 893 basics.isbool() function: True
    test 894 basics.isclass() function (inspect): True
    test 895 basics.isclose() function: True
    test 896 basics.iscomplex() function: True
    test 897 basics.isfinite() function: True
    test 898 basics.isidentifier class method_descriptor: True
    test 899 basics.isinf class builtin_function_or_method (math): True
    test 900 basics.isint() function: True
    test 901 basics.isint0() function: True
    test 902 basics.iskeyword class builtin_function_or_method: True
    test 903 basics.isnan class builtin_function_or_method (math): True
    test 904 basics.isnear0() function: True
    test 905 basics.isnear1() function: True
    test 906 basics.isneg0() function: True
    test 907 basics.isninf() function: True
    test 908 basics.isnon0() function: True
    test 909 basics.isodd() function: True
    test 910 basics.isscalar() function: True
    test 911 basics.issequence() function: True
    test 912 basics.isstr() function: True
    test 913 basics.issubclassof() function: True
    test 914 basics.istuplist() function: True
    test 915 basics.len2() function: True
    test 916 basics.map1() function: True
    test 917 basics.map2() function: True
    test 918 basics.neg() function: True
    test 919 basics.neg_() function: True
    test 920 basics.remainder class builtin_function_or_method (math): True
    test 921 basics.signBit() function: True
    test 922 basics.signOf() function: True
    test 923 basics.splice() function: True
    test 924 basics.ub2str() function: True
    test 925 basics.unsigned0() function: True

    testModule(pygeodesy.cartesianBase, 22.07.04)

    testModule(pygeodesy.clipy, 22.02.03)
    test 926 clipy.ClipCS4Tuple() class: True
    test 927 clipy.ClipError() class: True
    test 928 clipy.ClipLB6Tuple() class: True
    test 929 clipy.ClipSH3Tuple() class: True
    test 930 clipy.clipCS4() function: True
    test 931 clipy.clipLB6() function: True
    test 932 clipy.clipSH() function: True
    test 933 clipy.clipSH3() function: True

    testModule(pygeodesy.css, 22.07.04)
    test 934 css.CSSError() class: True
    test 935 css.CassiniSoldner() class: True
    test 936 css.Css() class: True
    test 937 css.EasNorAziRk4Tuple() class: True
    test 938 css.EasNorAziRkEqu6Tuple() class: True
    test 939 css.LatLonAziRk4Tuple() class: True
    test 940 css.toCss() function: True

    testModule(pygeodesy.deprecated.datum, 21.12.29)
    test 941 datum.Curvature2Tuple() class (pygeodesy.ellipsoids): True
    test 942 datum.Datum() class (pygeodesy.datums): True
    test 943 datum.Datums class pygeodesy.datums.Datums (pygeodesy.datums): True
    test 944 datum.Ellipsoid() class (pygeodesy.ellipsoids): True
    test 945 datum.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids (pygeodesy.ellipsoids): True
    test 946 datum.R_FM float (pygeodesy.units): True
    test 947 datum.R_KM float (pygeodesy.units): True
    test 948 datum.R_M float (pygeodesy.units): True
    test 949 datum.R_MA float (pygeodesy.units): True
    test 950 datum.R_MB float (pygeodesy.units): True
    test 951 datum.R_NM float (pygeodesy.units): True
    test 952 datum.R_SM float (pygeodesy.units): True
    test 953 datum.R_VM float (pygeodesy.units): True
    test 954 datum.Transform() class (pygeodesy.datums): True
    test 955 datum.Transforms class pygeodesy.datums.Transforms (pygeodesy.datums): True

    testModule(pygeodesy.datums, 22.07.05)
    test 956 datums.Datum() class: True
    test 957 datums.Datums class pygeodesy.datums.Datums: True
    test 958 datums.Transform() class: True
    test 959 datums.Transforms class pygeodesy.datums.Transforms: True

    testModule(pygeodesy.deprecated, 22.07.05)
    test 960 deprecated.ClipCS3Tuple() class: True
    test 961 deprecated.EPS1_2 float: True
    test 962 deprecated.EasNorExact4Tuple() class: True
    test 963 deprecated.EcefCartesian() function: True
    test 964 deprecated.HeightIDW() function: True
    test 965 deprecated.HeightIDW2() function: True
    test 966 deprecated.HeightIDW3() function: True
    test 967 deprecated.LatLonExact4Tuple() class: True
    test 968 deprecated.Ned3Tuple() class: True
    test 969 deprecated.OK str: True
    test 970 deprecated.RefFrameError() function: True
    test 971 deprecated.Rhumb7Tuple() class: True
    test 972 deprecated.Transform7Tuple() class: True
    test 973 deprecated.UtmUps4Tuple() class: True
    test 974 deprecated.anStr() function: True
    test 975 deprecated.areaof() function: True
    test 976 deprecated.bases module: True
    test 977 deprecated.bounds() function: True
    test 978 deprecated.clipCS3() function: True
    test 979 deprecated.clipDMS() function: True
    test 980 deprecated.clipStr() function: True
    test 981 deprecated.collins() function: True
    test 982 deprecated.datum module: True
    test 983 deprecated.decodeEPSG2() function: True
    test 984 deprecated.enStr2() function: True
    test 985 deprecated.encodeEPSG() function: True
    test 986 deprecated.equirectangular3() function: True
    test 987 deprecated.fStr() function: True
    test 988 deprecated.fStrzs() function: True
    test 989 deprecated.false2f() function: True
    test 990 deprecated.falsed2f() function: True
    test 991 deprecated.hypot3() function: True
    test 992 deprecated.inStr() function: True
    test 993 deprecated.isenclosedby() function: True
    test 994 deprecated.joined() function: True
    test 995 deprecated.joined_() function: True
    test 996 deprecated.nearestOn3() function: True
    test 997 deprecated.nearestOn4() function: True
    test 998 deprecated.nvector module: True
    test 999 deprecated.parseUTM() function: True
    test 1000 deprecated.perimeterof() function: True
    test 1001 deprecated.polygon() function: True
    test 1002 deprecated.scalar() function: True
    test 1003 deprecated.simplify2() function: True
    test 1004 deprecated.tienstra() function: True
    test 1005 deprecated.toUtm() function: True
    test 1006 deprecated.unStr() function: True
    test 1007 deprecated.unsign0() function: True
    test 1008 deprecated.utmZoneBand2() function: True

    testModule(pygeodesy.dms, 22.07.04)
    test 1009 dms.F_D str: True
    test 1010 dms.F_D60 str: True
    test 1011 dms.F_D60_ str (pygeodesy.interns): True
    test 1012 dms.F_D60__ str (pygeodesy.interns): True
    test 1013 dms.F_DEG str: True
    test 1014 dms.F_DEG_ str (pygeodesy.interns): True
    test 1015 dms.F_DEG__ str (pygeodesy.interns): True
    test 1016 dms.F_DM str: True
    test 1017 dms.F_DMS str: True
    test 1018 dms.F_DMS_ str (pygeodesy.interns): True
    test 1019 dms.F_DMS__ str (pygeodesy.interns): True
    test 1020 dms.F_DM_ str (pygeodesy.interns): True
    test 1021 dms.F_DM__ str (pygeodesy.interns): True
    test 1022 dms.F_D_ str (pygeodesy.interns): True
    test 1023 dms.F_D__ str (pygeodesy.interns): True
    test 1024 dms.F_MIN str: True
    test 1025 dms.F_MIN_ str (pygeodesy.interns): True
    test 1026 dms.F_MIN__ str (pygeodesy.interns): True
    test 1027 dms.F_RAD str: True
    test 1028 dms.F_RAD_ str (pygeodesy.interns): True
    test 1029 dms.F_RAD__ str (pygeodesy.interns): True
    test 1030 dms.F_SEC str: True
    test 1031 dms.F_SEC_ str (pygeodesy.interns): True
    test 1032 dms.F_SEC__ str (pygeodesy.interns): True
    test 1033 dms.F__E str: True
    test 1034 dms.F__E_ str (pygeodesy.interns): True
    test 1035 dms.F__E__ str (pygeodesy.interns): True
    test 1036 dms.F__F str: True
    test 1037 dms.F__F_ str (pygeodesy.interns): True
    test 1038 dms.F__F__ str (pygeodesy.interns): True
    test 1039 dms.F__G str: True
    test 1040 dms.F__G_ str (pygeodesy.interns): True
    test 1041 dms.F__G__ str (pygeodesy.interns): True
    test 1042 dms.S_DEG str: True
    test 1043 dms.S_DMS int: True
    test 1044 dms.S_MIN str: True
    test 1045 dms.S_RAD str (pygeodesy.interns): True
    test 1046 dms.S_SEC str: True
    test 1047 dms.S_SEP str (pygeodesy.interns): True
    test 1048 dms.bearingDMS() function: True
    test 1049 dms.clipDegrees() function: True
    test 1050 dms.clipRadians() function: True
    test 1051 dms.compassDMS() function: True
    test 1052 dms.compassPoint() function: True
    test 1053 dms.degDMS() function: True
    test 1054 dms.latDMS() function: True
    test 1055 dms.latlonDMS() function: True
    test 1056 dms.latlonDMS_() function: True
    test 1057 dms.lonDMS() function: True
    test 1058 dms.normDMS() function: True
    test 1059 dms.parse3llh() function: True
    test 1060 dms.parseDDDMMSS() function: True
    test 1061 dms.parseDMS() function: True
    test 1062 dms.parseDMS2() function: True
    test 1063 dms.parseRad() function: True
    test 1064 dms.precision() function: True
    test 1065 dms.toDMS() function: True

    testModule(pygeodesy.ecef, 22.07.04)
    test 1066 ecef.Ecef9Tuple() class: True
    test 1067 ecef.EcefError() class: True
    test 1068 ecef.EcefFarrell21() class: True
    test 1069 ecef.EcefFarrell22() class: True
    test 1070 ecef.EcefKarney() class: True
    test 1071 ecef.EcefMatrix() class: True
    test 1072 ecef.EcefSudano() class: True
    test 1073 ecef.EcefVeness() class: True
    test 1074 ecef.EcefYou() class: True

    testModule(pygeodesy.elevations, 22.02.25)
    test 1075 elevations.Elevation2Tuple() class: True
    test 1076 elevations.GeoidHeight2Tuple() class: True
    test 1077 elevations.elevation2() function: True
    test 1078 elevations.geoidHeight2() function: True

    testModule(pygeodesy.ellipsoidalBase, 22.07.07)

    testModule(pygeodesy.ellipsoidalBaseDI, 22.07.04)

    testModule(pygeodesy.ellipsoidalExact, 22.07.07)
    test 1079 ellipsoidalExact.Cartesian() class: True
    test 1080 ellipsoidalExact.LatLon() class: True
    test 1081 ellipsoidalExact.areaOf() function: True
    test 1082 ellipsoidalExact.intersection3() function: True
    test 1083 ellipsoidalExact.intersections2() function: True
    test 1084 ellipsoidalExact.isclockwise() function: True
    test 1085 ellipsoidalExact.ispolar() function (pygeodesy.points): True
    test 1086 ellipsoidalExact.nearestOn() function: True
    test 1087 ellipsoidalExact.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalGeodSolve, 22.07.07)
    test 1088 ellipsoidalGeodSolve.Cartesian() class: True
    test 1089 ellipsoidalGeodSolve.LatLon() class: True
    test 1090 ellipsoidalGeodSolve.areaOf() function: True
    test 1091 ellipsoidalGeodSolve.intersection3() function: True
    test 1092 ellipsoidalGeodSolve.intersections2() function: True
    test 1093 ellipsoidalGeodSolve.isclockwise() function: True
    test 1094 ellipsoidalGeodSolve.ispolar() function (pygeodesy.points): True
    test 1095 ellipsoidalGeodSolve.nearestOn() function: True
    test 1096 ellipsoidalGeodSolve.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 1097 ellipsoidalKarney.Cartesian() class: True
    test 1098 ellipsoidalKarney.LatLon() class: True
    test 1099 ellipsoidalKarney.areaOf() function: True
    test 1100 ellipsoidalKarney.intersection3() function: True
    test 1101 ellipsoidalKarney.intersections2() function: True
    test 1102 ellipsoidalKarney.isclockwise() function: True
    test 1103 ellipsoidalKarney.ispolar() function (pygeodesy.points): True
    test 1104 ellipsoidalKarney.nearestOn() function: True
    test 1105 ellipsoidalKarney.perimeterOf() function: True

    testModule(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1106 ellipsoidalNvector.Cartesian() class: True
    test 1107 ellipsoidalNvector.LatLon() class: True
    test 1108 ellipsoidalNvector.Ned() class: True
    test 1109 ellipsoidalNvector.Nvector() class: True
    test 1110 ellipsoidalNvector.meanOf() function: True
    test 1111 ellipsoidalNvector.sumOf() function: True
    test 1112 ellipsoidalNvector.toNed() function: True

    testModule(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 1113 ellipsoidalVincenty.Cartesian() class: True
    test 1114 ellipsoidalVincenty.LatLon() class: True
    test 1115 ellipsoidalVincenty.VincentyError() class: True
    test 1116 ellipsoidalVincenty.intersection3() function: True
    test 1117 ellipsoidalVincenty.intersections2() function: True
    test 1118 ellipsoidalVincenty.ispolar() function (pygeodesy.points): True
    test 1119 ellipsoidalVincenty.nearestOn() function: True

    testModule(pygeodesy.ellipsoids, 22.07.04)
    test 1120 ellipsoids.Circle4Tuple() class: True
    test 1121 ellipsoids.Curvature2Tuple() class: True
    test 1122 ellipsoids.Ellipsoid() class: True
    test 1123 ellipsoids.Ellipsoid2() class: True
    test 1124 ellipsoids.Ellipsoids class pygeodesy.ellipsoids.Ellipsoids: True
    test 1125 ellipsoids.R_FM float (pygeodesy.units): True
    test 1126 ellipsoids.R_GM float (pygeodesy.units): True
    test 1127 ellipsoids.R_KM float (pygeodesy.units): True
    test 1128 ellipsoids.R_M float (pygeodesy.units): True
    test 1129 ellipsoids.R_MA float (pygeodesy.units): True
    test 1130 ellipsoids.R_MB float (pygeodesy.units): True
    test 1131 ellipsoids.R_NM float (pygeodesy.units): True
    test 1132 ellipsoids.R_SM float (pygeodesy.units): True
    test 1133 ellipsoids.R_VM float (pygeodesy.units): True
    test 1134 ellipsoids.a_b2e() function: True
    test 1135 ellipsoids.a_b2e2() function: True
    test 1136 ellipsoids.a_b2e22() function: True
    test 1137 ellipsoids.a_b2e32() function: True
    test 1138 ellipsoids.a_b2f() function: True
    test 1139 ellipsoids.a_b2f2() function: True
    test 1140 ellipsoids.a_b2f_() function: True
    test 1141 ellipsoids.a_b2n() function: True
    test 1142 ellipsoids.a_f2Tuple() class: True
    test 1143 ellipsoids.a_f2b() function: True
    test 1144 ellipsoids.a_f_2b() function: True
    test 1145 ellipsoids.b_f2a() function: True
    test 1146 ellipsoids.b_f_2a() function: True
    test 1147 ellipsoids.f2e2() function: True
    test 1148 ellipsoids.f2e22() function: True
    test 1149 ellipsoids.f2e32() function: True
    test 1150 ellipsoids.f2f2() function: True
    test 1151 ellipsoids.f2f_() function: True
    test 1152 ellipsoids.f2n() function: True
    test 1153 ellipsoids.f_2f() function: True
    test 1154 ellipsoids.n2e2() function: True
    test 1155 ellipsoids.n2f() function: True
    test 1156 ellipsoids.n2f_() function: True

    testModule(pygeodesy.elliptic, 22.07.07)
    test 1157 elliptic.Elliptic() class: True
    test 1158 elliptic.Elliptic3Tuple() class: True
    test 1159 elliptic.EllipticError() class: True

    testModule(pygeodesy.epsg, 22.5.14)
    test 1160 epsg.EPSGError() class: True
    test 1161 epsg.Epsg() class: True
    test 1162 epsg.decode2() function: True
    test 1163 epsg.encode() function: True

    testModule(pygeodesy.errors, 22.07.03)
    test 1164 errors.CrossError() class: True
    test 1165 errors.IntersectionError() class: True
    test 1166 errors.LenError() class: True
    test 1167 errors.LimitError() class: True
    test 1168 errors.NumPyError() class: True
    test 1169 errors.ParseError() class: True
    test 1170 errors.PointsError() class: True
    test 1171 errors.RangeError() class: True
    test 1172 errors.SciPyError() class: True
    test 1173 errors.SciPyWarning() class: True
    test 1174 errors.TRFError() class: True
    test 1175 errors.TriangleError() class: True
    test 1176 errors.UnitError() class: True
    test 1177 errors.VectorError() class: True
    test 1178 errors.crosserrors() function: True
    test 1179 errors.exception_chaining() function: True
    test 1180 errors.limiterrors() function: True
    test 1181 errors.rangerrors() function: True

    testModule(pygeodesy.etm, 22.07.07)
    test 1182 etm.ETMError() class: True
    test 1183 etm.Etm() class: True
    test 1184 etm.ExactTransverseMercator() class: True
    test 1185 etm.parseETM5() function: True
    test 1186 etm.toEtm8() function: True

    testModule(pygeodesy.fmath, 22.07.07)
    test 1187 fmath.Fdot() class: True
    test 1188 fmath.Fhorner() class: True
    test 1189 fmath.Fpolynomial() class: True
    test 1190 fmath.cbrt() function: True
    test 1191 fmath.cbrt2() function: True
    test 1192 fmath.euclid() function: True
    test 1193 fmath.euclid_() function: True
    test 1194 fmath.facos1() function: True
    test 1195 fmath.fasin1() function: True
    test 1196 fmath.fatan() function: True
    test 1197 fmath.fatan1() function: True
    test 1198 fmath.fatan2() function: True
    test 1199 fmath.favg() function: True
    test 1200 fmath.fdot() function: True
    test 1201 fmath.fdot3() function: True
    test 1202 fmath.fhorner() function: True
    test 1203 fmath.fidw() function: True
    test 1204 fmath.fmean() function: True
    test 1205 fmath.fmean_() function: True
    test 1206 fmath.fpolynomial() function: True
    test 1207 fmath.fpowers() function: True
    test 1208 fmath.fprod class builtin_function_or_method (math): True
    test 1209 fmath.frange() function: True
    test 1210 fmath.freduce class builtin_function_or_method (_functools): True
    test 1211 fmath.fremainder() function: True
    test 1212 fmath.hypot class builtin_function_or_method (math): True
    test 1213 fmath.hypot1() function: True
    test 1214 fmath.hypot2() function: True
    test 1215 fmath.hypot2_() function: True
    test 1216 fmath.hypot_ class builtin_function_or_method (math): True
    test 1217 fmath.norm2() function: True
    test 1218 fmath.norm_() function: True
    test 1219 fmath.sqrt0() function: True
    test 1220 fmath.sqrt3() function: True
    test 1221 fmath.sqrt_a() function: True

    testModule(pygeodesy.formy, 22.07.07)
    test 1222 formy.Radical2Tuple() class: True
    test 1223 formy.antipode() function: True
    test 1224 formy.antipode_() function: True
    test 1225 formy.bearing() function: True
    test 1226 formy.bearing_() function: True
    test 1227 formy.compassAngle() function: True
    test 1228 formy.cosineAndoyerLambert() function: True
    test 1229 formy.cosineAndoyerLambert_() function: True
    test 1230 formy.cosineForsytheAndoyerLambert() function: True
    test 1231 formy.cosineForsytheAndoyerLambert_() function: True
    test 1232 formy.cosineLaw() function: True
    test 1233 formy.cosineLaw_() function: True
    test 1234 formy.equirectangular() function: True
    test 1235 formy.equirectangular_() function: True
    test 1236 formy.euclidean() function: True
    test 1237 formy.euclidean_() function: True
    test 1238 formy.excessAbc() function: True
    test 1239 formy.excessGirard() function: True
    test 1240 formy.excessKarney() function: True
    test 1241 formy.excessKarney_() function: True
    test 1242 formy.excessLHuilier() function: True
    test 1243 formy.excessQuad() function: True
    test 1244 formy.excessQuad_() function: True
    test 1245 formy.flatLocal() function: True
    test 1246 formy.flatLocal_() function: True
    test 1247 formy.flatPolar() function: True
    test 1248 formy.flatPolar_() function: True
    test 1249 formy.hartzell() function: True
    test 1250 formy.haversine() function: True
    test 1251 formy.haversine_() function: True
    test 1252 formy.heightOf() function: True
    test 1253 formy.horizon() function: True
    test 1254 formy.hubeny() function: True
    test 1255 formy.hubeny_() function: True
    test 1256 formy.intersections2() function: True
    test 1257 formy.isantipode() function: True
    test 1258 formy.isantipode_() function: True
    test 1259 formy.latlon2n_xyz() function: True
    test 1260 formy.n_xyz2latlon() function: True
    test 1261 formy.n_xyz2philam() function: True
    test 1262 formy.opposing() function: True
    test 1263 formy.opposing_() function: True
    test 1264 formy.philam2n_xyz() function: True
    test 1265 formy.radical2() function: True
    test 1266 formy.thomas() function: True
    test 1267 formy.thomas_() function: True
    test 1268 formy.vincentys() function: True
    test 1269 formy.vincentys_() function: True

    testModule(pygeodesy.frechet, 22.06.25)
    test 1270 frechet.Frechet() class: True
    test 1271 frechet.Frechet6Tuple() class: True
    test 1272 frechet.FrechetCosineAndoyerLambert() class: True
    test 1273 frechet.FrechetCosineForsytheAndoyerLambert() class: True
    test 1274 frechet.FrechetCosineLaw() class: True
    test 1275 frechet.FrechetDegrees() class: True
    test 1276 frechet.FrechetDistanceTo() class: True
    test 1277 frechet.FrechetEquirectangular() class: True
    test 1278 frechet.FrechetError() class: True
    test 1279 frechet.FrechetEuclidean() class: True
    test 1280 frechet.FrechetExact() class: True
    test 1281 frechet.FrechetFlatLocal() class: True
    test 1282 frechet.FrechetFlatPolar() class: True
    test 1283 frechet.FrechetHaversine() class: True
    test 1284 frechet.FrechetHubeny() class: True
    test 1285 frechet.FrechetKarney() class: True
    test 1286 frechet.FrechetRadians() class: True
    test 1287 frechet.FrechetThomas() class: True
    test 1288 frechet.FrechetVincentys() class: True
    test 1289 frechet.frechet_() function: True

    testModule(pygeodesy.fstats, 22.06.15)
    test 1290 fstats.Fcook() class: True
    test 1291 fstats.Flinear() class: True
    test 1292 fstats.Fwelford() class: True

    testModule(pygeodesy.fsums, 22.06.07)
    test 1293 fsums.Fsum() class: True
    test 1294 fsums.Fsum2Tuple() class: True
    test 1295 fsums.ResidualError() class: True
    test 1296 fsums.fsum() function: True
    test 1297 fsums.fsum1() function: True
    test 1298 fsums.fsum1_() function: True
    test 1299 fsums.fsum_() function: True

    testModule(pygeodesy.gars, 22.05.14)
    test 1300 gars.GARSError() class: True
    test 1301 gars.Garef() class: True
    test 1302 gars.decode3() function: True
    test 1303 gars.encode() function: True
    test 1304 gars.precision() function: True
    test 1305 gars.resolution() function: True

    testModule(pygeodesy.geodesicx, 22.05.14)
    test 1306 geodesicx.GeodesicAreaExact() class (pygeodesy.geodesicx.gxarea): True
    test 1307 geodesicx.GeodesicExact() class (pygeodesy.geodesicx.gx): True
    test 1308 geodesicx.GeodesicLineExact() class (pygeodesy.geodesicx.gx): True
    test 1309 geodesicx.PolygonArea() class (pygeodesy.geodesicx.gxarea): True
    test 1310 geodesicx.gx module: True
    test 1311 geodesicx.gxarea module: True
    test 1312 geodesicx.gxline module: True

    testModule(pygeodesy.geodsolve, 22.06.26)
    test 1313 geodsolve.GeodSolve12Tuple() class: True
    test 1314 geodsolve.GeodesicLineSolve() class: True
    test 1315 geodsolve.GeodesicSolve() class: True

    testModule(pygeodesy.geohash, 22.05.14)
    test 1316 geohash.Geohash() class: True
    test 1317 geohash.GeohashError() class: True
    test 1318 geohash.Neighbors8Dict() class: True
    test 1319 geohash.Resolutions2Tuple() class: True
    test 1320 geohash.bounds() function: True
    test 1321 geohash.decode() function: True
    test 1322 geohash.decode2() function: True
    test 1323 geohash.decode_error() function: True
    test 1324 geohash.distance_() function: True
    test 1325 geohash.encode() function: True
    test 1326 geohash.equirectangular_() function: True
    test 1327 geohash.haversine_() function: True
    test 1328 geohash.neighbors() function: True
    test 1329 geohash.precision() function: True
    test 1330 geohash.resolution2() function: True
    test 1331 geohash.sizes() function: True

    testModule(pygeodesy.geoids, 22.05.14)
    test 1332 geoids.GeoidError() class: True
    test 1333 geoids.GeoidG2012B() class: True
    test 1334 geoids.GeoidHeight5Tuple() class: True
    test 1335 geoids.GeoidKarney() class: True
    test 1336 geoids.GeoidPGM() class: True
    test 1337 geoids.PGMError() class: True
    test 1338 geoids.egmGeoidHeights() function: True

    testModule(pygeodesy.geodesicx.gx, 22.07.07)

    testModule(pygeodesy.geodesicx.gxarea, 22.06.24)

    testModule(pygeodesy.geodesicx.gxline, 22.05.23)

    testModule(pygeodesy.hausdorff, 22.06.25)
    test 1339 hausdorff.Hausdorff() class: True
    test 1340 hausdorff.Hausdorff6Tuple() class: True
    test 1341 hausdorff.HausdorffCosineAndoyerLambert() class: True
    test 1342 hausdorff.HausdorffCosineForsytheAndoyerLambert() class: True
    test 1343 hausdorff.HausdorffCosineLaw() class: True
    test 1344 hausdorff.HausdorffDegrees() class: True
    test 1345 hausdorff.HausdorffDistanceTo() class: True
    test 1346 hausdorff.HausdorffEquirectangular() class: True
    test 1347 hausdorff.HausdorffError() class: True
    test 1348 hausdorff.HausdorffEuclidean() class: True
    test 1349 hausdorff.HausdorffExact() class: True
    test 1350 hausdorff.HausdorffFlatLocal() class: True
    test 1351 hausdorff.HausdorffFlatPolar() class: True
    test 1352 hausdorff.HausdorffHaversine() class: True
    test 1353 hausdorff.HausdorffHubeny() class: True
    test 1354 hausdorff.HausdorffKarney() class: True
    test 1355 hausdorff.HausdorffRadians() class: True
    test 1356 hausdorff.HausdorffThomas() class: True
    test 1357 hausdorff.HausdorffVincentys() class: True
    test 1358 hausdorff.hausdorff_() function: True
    test 1359 hausdorff.randomrangenerator() function: True

    testModule(pygeodesy.heights, 22.06.24)
    test 1360 heights.HeightCubic() class: True
    test 1361 heights.HeightError() class: True
    test 1362 heights.HeightIDWcosineAndoyerLambert() class: True
    test 1363 heights.HeightIDWcosineForsytheAndoyerLambert() class: True
    test 1364 heights.HeightIDWcosineLaw() class: True
    test 1365 heights.HeightIDWdistanceTo() class: True
    test 1366 heights.HeightIDWequirectangular() class: True
    test 1367 heights.HeightIDWeuclidean() class: True
    test 1368 heights.HeightIDWflatLocal() class: True
    test 1369 heights.HeightIDWflatPolar() class: True
    test 1370 heights.HeightIDWhaversine() class: True
    test 1371 heights.HeightIDWhubeny() class: True
    test 1372 heights.HeightIDWkarney() class: True
    test 1373 heights.HeightIDWthomas() class: True
    test 1374 heights.HeightIDWvincentys() class: True
    test 1375 heights.HeightLSQBiSpline() class: True
    test 1376 heights.HeightLinear() class: True
    test 1377 heights.HeightSmoothBiSpline() class: True

    testModule(pygeodesy.interns, 22.07.05)
    test 1378 interns.DIG int: True
    test 1379 interns.EPS float: True
    test 1380 interns.EPS0 float: True
    test 1381 interns.EPS02 float: True
    test 1382 interns.EPS1 float: True
    test 1383 interns.EPS2 float: True
    test 1384 interns.EPS4 float: True
    test 1385 interns.EPS_2 float: True
    test 1386 interns.INF float: True
    test 1387 interns.INT0 int: True
    test 1388 interns.MANTIS int: True
    test 1389 interns.MANT_DIG int: True
    test 1390 interns.MAX float: True
    test 1391 interns.MIN float: True
    test 1392 interns.NAN float: True
    test 1393 interns.NEG0 float: True
    test 1394 interns.NINF float: True
    test 1395 interns.NN str: True
    test 1396 interns.PI float: True
    test 1397 interns.PI2 float: True
    test 1398 interns.PI3 float: True
    test 1399 interns.PI3_2 float: True
    test 1400 interns.PI4 float: True
    test 1401 interns.PI_2 float: True
    test 1402 interns.PI_4 float: True
    test 1403 interns.Str_() class: True
    test 1404 interns.float_() function: True
    test 1405 interns.machine() function: True

    testModule(pygeodesy.iters, 21.09.26)
    test 1406 iters.LatLon2PsxyIter() class: True
    test 1407 iters.PointsIter() class: True
    test 1408 iters.isNumpy2() function: True
    test 1409 iters.isPoints2() function: True
    test 1410 iters.isTuple2() function: True
    test 1411 iters.iterNumpy2() function: True
    test 1412 iters.iterNumpy2over() function: True
    test 1413 iters.points2() function: True

    testModule(pygeodesy.karney, 22.07.03)
    test 1414 karney.Area3Tuple() class: True
    test 1415 karney.Caps class pygeodesy.karney.Caps: True
    test 1416 karney.Direct9Tuple() class: True
    test 1417 karney.GDict() class: True
    test 1418 karney.GeodesicError() class: True
    test 1419 karney.Inverse10Tuple() class: True

    testModule(pygeodesy.ktm, 22.07.07)
    test 1420 ktm.KTMError() class: True
    test 1421 ktm.KTransverseMercator() class: True

    testModule(pygeodesy.latlonBase, 22.07.03)

    testModule(pygeodesy.lazily, 22.07.05)
    test 1422 lazily.LazyImportError() class: True
    test 1423 lazily.isLazy int: True
    test 1424 lazily.print_() function: True
    test 1425 lazily.printf() function: True

    testModule(pygeodesy.lcc, 22.06.24)
    test 1426 lcc.Conic() class: True
    test 1427 lcc.Conics class pygeodesy.lcc.Conics: True
    test 1428 lcc.LCCError() class: True
    test 1429 lcc.Lcc() class: True
    test 1430 lcc.toLcc() function: True

    testModule(pygeodesy.ltp, 22.06.24)
    test 1431 ltp.Attitude() class: True
    test 1432 ltp.AttitudeError() class: True
    test 1433 ltp.Frustum() class: True
    test 1434 ltp.LocalCartesian() class: True
    test 1435 ltp.LocalError() class: True
    test 1436 ltp.Ltp() class: True
    test 1437 ltp.tyr3d() function: True

    testModule(pygeodesy.ltpTuples, 22.06.20)
    test 1438 ltpTuples.Aer() class: True
    test 1439 ltpTuples.Aer4Tuple() class: True
    test 1440 ltpTuples.Attitude4Tuple() class: True
    test 1441 ltpTuples.Enu() class: True
    test 1442 ltpTuples.Enu4Tuple() class: True
    test 1443 ltpTuples.Footprint5Tuple() class: True
    test 1444 ltpTuples.Local9Tuple() class: True
    test 1445 ltpTuples.Ned() class: True
    test 1446 ltpTuples.Ned4Tuple() class: True
    test 1447 ltpTuples.Xyz4Tuple() class: True
    test 1448 ltpTuples.XyzLocal() class: True

    testModule(pygeodesy.mgrs, 22.06.26)
    test 1449 mgrs.MGRSError() class: True
    test 1450 mgrs.Mgrs() class: True
    test 1451 mgrs.Mgrs4Tuple() class: True
    test 1452 mgrs.Mgrs6Tuple() class: True
    test 1453 mgrs.parseMGRS() function: True
    test 1454 mgrs.toMgrs() function: True

    testModule(pygeodesy.named, 22.06.24)
    test 1455 named.callername() function: True
    test 1456 named.classname() function: True
    test 1457 named.classnaming() function: True
    test 1458 named.modulename() function: True
    test 1459 named.nameof() function: True
    test 1460 named.notImplemented() function: True
    test 1461 named.notOverloaded() function: True

    testModule(pygeodesy.namedTuples, 22.06.30)
    test 1462 namedTuples.Bearing2Tuple() class: True
    test 1463 namedTuples.Bounds2Tuple() class: True
    test 1464 namedTuples.Bounds4Tuple() class: True
    test 1465 namedTuples.Destination2Tuple() class: True
    test 1466 namedTuples.Destination3Tuple() class: True
    test 1467 namedTuples.Distance2Tuple() class: True
    test 1468 namedTuples.Distance3Tuple() class: True
    test 1469 namedTuples.Distance4Tuple() class: True
    test 1470 namedTuples.EasNor2Tuple() class: True
    test 1471 namedTuples.EasNor3Tuple() class: True
    test 1472 namedTuples.Forward4Tuple() class: True
    test 1473 namedTuples.Intersection3Tuple() class: True
    test 1474 namedTuples.LatLon2Tuple() class: True
    test 1475 namedTuples.LatLon3Tuple() class: True
    test 1476 namedTuples.LatLon4Tuple() class: True
    test 1477 namedTuples.LatLonDatum3Tuple() class: True
    test 1478 namedTuples.LatLonDatum5Tuple() class: True
    test 1479 namedTuples.LatLonPrec3Tuple() class: True
    test 1480 namedTuples.LatLonPrec5Tuple() class: True
    test 1481 namedTuples.NearestOn2Tuple() class: True
    test 1482 namedTuples.NearestOn3Tuple() class: True
    test 1483 namedTuples.NearestOn4Tuple() class: True
    test 1484 namedTuples.NearestOn5Tuple() class: True
    test 1485 namedTuples.NearestOn6Tuple() class: True
    test 1486 namedTuples.NearestOn8Tuple() class: True
    test 1487 namedTuples.PhiLam2Tuple() class: True
    test 1488 namedTuples.PhiLam3Tuple() class: True
    test 1489 namedTuples.PhiLam4Tuple() class: True
    test 1490 namedTuples.Point3Tuple() class: True
    test 1491 namedTuples.Points2Tuple() class: True
    test 1492 namedTuples.Reverse4Tuple() class: True
    test 1493 namedTuples.Triangle7Tuple() class: True
    test 1494 namedTuples.Triangle8Tuple() class: True
    test 1495 namedTuples.Trilaterate5Tuple() class: True
    test 1496 namedTuples.UtmUps2Tuple() class: True
    test 1497 namedTuples.UtmUps5Tuple() class: True
    test 1498 namedTuples.UtmUps8Tuple() class: True
    test 1499 namedTuples.UtmUpsLatLon5Tuple() class: True
    test 1500 namedTuples.Vector2Tuple() class: True
    test 1501 namedTuples.Vector3Tuple() class: True
    test 1502 namedTuples.Vector4Tuple() class: True

    testModule(pygeodesy.deprecated.nvector, 21.05.20)
    test 1503 nvector.NorthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True
    test 1504 nvector.SouthPole class pygeodesy.nvectorBase.NvectorBase (pygeodesy.nvectorBase): True

    testModule(pygeodesy.nvectorBase, 22.07.07)
    test 1505 nvectorBase.NorthPole class pygeodesy.nvectorBase.NvectorBase: True
    test 1506 nvectorBase.SouthPole class pygeodesy.nvectorBase.NvectorBase: True

    testModule(pygeodesy.osgr, 22.04.27)
    test 1507 osgr.OSGRError() class: True
    test 1508 osgr.Osgr() class: True
    test 1509 osgr.parseOSGR() function: True
    test 1510 osgr.toOsgr() function: True

    testModule(pygeodesy.points, 22.06.26)
    test 1511 points.LatLon2psxy() class: True
    test 1512 points.LatLon_() class: True
    test 1513 points.Numpy2LatLon() class: True
    test 1514 points.Shape2Tuple() class: True
    test 1515 points.Tuple2LatLon() class: True
    test 1516 points.areaOf() function: True
    test 1517 points.boundsOf() function: True
    test 1518 points.centroidOf() function: True
    test 1519 points.fractional() function: True
    test 1520 points.isclockwise() function: True
    test 1521 points.isconvex() function: True
    test 1522 points.isconvex_() function: True
    test 1523 points.isenclosedBy() function: True
    test 1524 points.ispolar() function: True
    test 1525 points.luneOf() function: True
    test 1526 points.nearestOn5() function: True
    test 1527 points.perimeterOf() function: True
    test 1528 points.quadOf() function: True

    testModule(pygeodesy.props, 22.06.28)
    test 1529 props.DeprecationWarnings() function: True
    test 1530 props.Property() class: True
    test 1531 props.Property_RO() class: True
    test 1532 props.deprecated_Property_RO() function: True
    test 1533 props.deprecated_class() function: True
    test 1534 props.deprecated_function() function: True
    test 1535 props.deprecated_method() function: True
    test 1536 props.deprecated_property_RO() function: True
    test 1537 props.property_RO() class: True
    test 1538 props.property_doc_() function: True

    testModule(pygeodesy.resections, 22.07.07)
    test 1539 resections.Collins5Tuple() class: True
    test 1540 resections.ResectionError() class: True
    test 1541 resections.Survey3Tuple() class: True
    test 1542 resections.Tienstra7Tuple() class: True
    test 1543 resections.TriAngle4Tuple() class: True
    test 1544 resections.TriSide2Tuple() class: True
    test 1545 resections.TriSide4Tuple() class: True
    test 1546 resections.cassini() function: True
    test 1547 resections.collins5() function: True
    test 1548 resections.pierlot() function: True
    test 1549 resections.snellius3() function: True
    test 1550 resections.tienstra7() function: True
    test 1551 resections.triAngle() function: True
    test 1552 resections.triAngle4() function: True
    test 1553 resections.triSide() function: True
    test 1554 resections.triSide2() function: True
    test 1555 resections.triSide4() function: True
    test 1556 resections.wildberger3() function: True

    testModule(pygeodesy.rhumbsolve, 22.06.26)
    test 1557 rhumbsolve.RhumbLineSolve() class: True
    test 1558 rhumbsolve.RhumbSolve() class: True
    test 1559 rhumbsolve.RhumbSolve7Tuple() class: True

    testModule(pygeodesy.rhumbx, 22.07.07)
    test 1560 rhumbx.Rhumb() class: True
    test 1561 rhumbx.Rhumb8Tuple() class: True
    test 1562 rhumbx.RhumbError() class: True
    test 1563 rhumbx.RhumbLine() class: True
    test 1564 rhumbx.RhumbOrder2Tuple() class: True

    testModule(pygeodesy.simplify, 22.01.17)
    test 1565 simplify.simplify1() function: True
    test 1566 simplify.simplifyRDP() function: True
    test 1567 simplify.simplifyRDPm() function: True
    test 1568 simplify.simplifyRW() function: True
    test 1569 simplify.simplifyVW() function: True
    test 1570 simplify.simplifyVWm() function: True

    testModule(pygeodesy.solveBase, 22.06.24)

    testModule(pygeodesy.sphericalBase, 22.07.03)

    testModule(pygeodesy.sphericalNvector, 22.07.07)
    test 1571 sphericalNvector.Cartesian() class: True
    test 1572 sphericalNvector.LatLon() class: True
    test 1573 sphericalNvector.Nvector() class: True
    test 1574 sphericalNvector.areaOf() function: True
    test 1575 sphericalNvector.intersection() function: True
    test 1576 sphericalNvector.ispolar() function (pygeodesy.points): True
    test 1577 sphericalNvector.meanOf() function: True
    test 1578 sphericalNvector.nearestOn2() function: True
    test 1579 sphericalNvector.nearestOn3() function: True
    test 1580 sphericalNvector.perimeterOf() function: True
    test 1581 sphericalNvector.sumOf() function: True
    test 1582 sphericalNvector.triangulate() function: True
    test 1583 sphericalNvector.trilaterate() function: True

    testModule(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 1584 sphericalTrigonometry.Cartesian() class: True
    test 1585 sphericalTrigonometry.LatLon() class: True
    test 1586 sphericalTrigonometry.areaOf() function: True
    test 1587 sphericalTrigonometry.intersection() function: True
    test 1588 sphericalTrigonometry.intersections2() function: True
    test 1589 sphericalTrigonometry.isPoleEnclosedBy() function: True
    test 1590 sphericalTrigonometry.ispolar() function (pygeodesy.points): True
    test 1591 sphericalTrigonometry.meanOf() function: True
    test 1592 sphericalTrigonometry.nearestOn2() function: True
    test 1593 sphericalTrigonometry.nearestOn3() function: True
    test 1594 sphericalTrigonometry.perimeterOf() function: True
    test 1595 sphericalTrigonometry.sumOf() function (pygeodesy.vector3d): True
    test 1596 sphericalTrigonometry.triangle7() function: True
    test 1597 sphericalTrigonometry.triangle8_() function: True

    testModule(pygeodesy.streprs, 22.06.15)
    test 1598 streprs.anstr() function: True
    test 1599 streprs.attrs() function: True
    test 1600 streprs.enstr2() function: True
    test 1601 streprs.fstr() function: True
    test 1602 streprs.fstrzs() function: True
    test 1603 streprs.hstr() function: True
    test 1604 streprs.instr() function: True
    test 1605 streprs.pairs() function: True
    test 1606 streprs.reprs() function: True
    test 1607 streprs.strs() function: True
    test 1608 streprs.unstr() function: True

    testModule(pygeodesy.trf, 22.07.05)
    test 1609 trf.Helmert7Tuple() class: True
    test 1610 trf.RefFrame() class: True
    test 1611 trf.RefFrames class pygeodesy.trf.RefFrames: True
    test 1612 trf.date2epoch() function: True
    test 1613 trf.epoch2date() function: True
    test 1614 trf.trfXform() function: True

    testModule(pygeodesy.units, 22.04.19)
    test 1615 units.Band() class: True
    test 1616 units.Bearing() class: True
    test 1617 units.Bearing_() class: True
    test 1618 units.Bool() class: True
    test 1619 units.Degrees() class: True
    test 1620 units.Degrees2() class: True
    test 1621 units.Degrees_() class: True
    test 1622 units.Distance() class: True
    test 1623 units.Distance_() class: True
    test 1624 units.Easting() class: True
    test 1625 units.Epoch() class: True
    test 1626 units.FIx() class: True
    test 1627 units.Feet() class: True
    test 1628 units.Float() class: True
    test 1629 units.Float_() class: True
    test 1630 units.Height() class: True
    test 1631 units.Int() class: True
    test 1632 units.Int_() class: True
    test 1633 units.Lam() class: True
    test 1634 units.Lam_() class: True
    test 1635 units.Lat() class: True
    test 1636 units.Lat_() class: True
    test 1637 units.Lon() class: True
    test 1638 units.Lon_() class: True
    test 1639 units.Meter() class: True
    test 1640 units.Meter2() class: True
    test 1641 units.Meter3() class: True
    test 1642 units.Meter_() class: True
    test 1643 units.Northing() class: True
    test 1644 units.Number_() class: True
    test 1645 units.Phi() class: True
    test 1646 units.Phi_() class: True
    test 1647 units.Precision_() class: True
    test 1648 units.Radians() class: True
    test 1649 units.Radians2() class: True
    test 1650 units.Radians_() class: True
    test 1651 units.Radius() class: True
    test 1652 units.Radius_() class: True
    test 1653 units.Scalar() class: True
    test 1654 units.Scalar_() class: True
    test 1655 units.Str() class: True
    test 1656 units.Zone() class: True

    testModule(pygeodesy.ups, 22.06.26)
    test 1657 ups.UPSError() class: True
    test 1658 ups.Ups() class: True
    test 1659 ups.parseUPS5() function: True
    test 1660 ups.toUps8() function: True
    test 1661 ups.upsZoneBand5() function: True

    testModule(pygeodesy.utily, 22.05.14)
    test 1662 utily.acos1() function: True
    test 1663 utily.acre2ha() function: True
    test 1664 utily.acre2m2() function: True
    test 1665 utily.asin1() function: True
    test 1666 utily.atan2b() function: True
    test 1667 utily.atan2d() function: True
    test 1668 utily.atand() function: True
    test 1669 utily.chain2m() function: True
    test 1670 utily.circle4() function: True
    test 1671 utily.cot() function: True
    test 1672 utily.cot_() function: True
    test 1673 utily.cotd() function: True
    test 1674 utily.cotd_() function: True
    test 1675 utily.degrees class builtin_function_or_method (math): True
    test 1676 utily.degrees180() function: True
    test 1677 utily.degrees2grades() function: True
    test 1678 utily.degrees2m() function: True
    test 1679 utily.degrees360() function: True
    test 1680 utily.degrees90() function: True
    test 1681 utily.fathom2m() function: True
    test 1682 utily.ft2m() function: True
    test 1683 utily.furlong2m() function: True
    test 1684 utily.grades() function: True
    test 1685 utily.grades2degrees() function: True
    test 1686 utily.grades2radians() function: True
    test 1687 utily.grades400() function: True
    test 1688 utily.m2NM() function: True
    test 1689 utily.m2SM() function: True
    test 1690 utily.m2chain() function: True
    test 1691 utily.m2degrees() function: True
    test 1692 utily.m2fathom() function: True
    test 1693 utily.m2ft() function: True
    test 1694 utily.m2furlong() function: True
    test 1695 utily.m2km() function: True
    test 1696 utily.m2radians() function: True
    test 1697 utily.m2toise() function: True
    test 1698 utily.m2yard() function: True
    test 1699 utily.radians class builtin_function_or_method (math): True
    test 1700 utily.radians2m() function: True
    test 1701 utily.radiansPI() function: True
    test 1702 utily.radiansPI2() function: True
    test 1703 utily.radiansPI_2() function: True
    test 1704 utily.sincos2() function: True
    test 1705 utily.sincos2_() function: True
    test 1706 utily.sincos2d() function: True
    test 1707 utily.sincos2d_() function: True
    test 1708 utily.tanPI_2_2() function: True
    test 1709 utily.tan_2() function: True
    test 1710 utily.tand() function: True
    test 1711 utily.tand_() function: True
    test 1712 utily.toise2m() function: True
    test 1713 utily.unroll180() function: True
    test 1714 utily.unrollPI() function: True
    test 1715 utily.wrap180() function: True
    test 1716 utily.wrap360() function: True
    test 1717 utily.wrap90() function: True
    test 1718 utily.wrapPI() function: True
    test 1719 utily.wrapPI2() function: True
    test 1720 utily.wrapPI_2() function: True
    test 1721 utily.yard2m() function: True

    testModule(pygeodesy.utm, 22.06.26)
    test 1722 utm.UTMError() class: True
    test 1723 utm.Utm() class: True
    test 1724 utm.parseUTM5() function: True
    test 1725 utm.toUtm8() function: True
    test 1726 utm.utmZoneBand5() function: True

    testModule(pygeodesy.utmups, 22.05.14)
    test 1727 utmups.UTMUPSError() class: True
    test 1728 utmups.UtmUps() function: True
    test 1729 utmups.parseUTMUPS5() function: True
    test 1730 utmups.toUtmUps8() function: True
    test 1731 utmups.utmupsValidate() function: True
    test 1732 utmups.utmupsValidateOK() function: True
    test 1733 utmups.utmupsZoneBand5() function: True

    testModule(pygeodesy.utmupsBase, 22.06.16)

    testModule(pygeodesy.vector2d, 22.07.07)
    test 1734 vector2d.Circin6Tuple() class: True
    test 1735 vector2d.Circum3Tuple() class: True
    test 1736 vector2d.Circum4Tuple() class: True
    test 1737 vector2d.Meeus2Tuple() class: True
    test 1738 vector2d.Radii11Tuple() class: True
    test 1739 vector2d.Soddy4Tuple() class: True
    test 1740 vector2d.circin6() function: True
    test 1741 vector2d.circum3() function: True
    test 1742 vector2d.circum4_() function: True
    test 1743 vector2d.meeus2() function: True
    test 1744 vector2d.radii11() function: True
    test 1745 vector2d.soddy4() function: True

    testModule(pygeodesy.vector3d, 22.07.03)
    test 1746 vector3d.Vector3d() class: True
    test 1747 vector3d.intersection3d3() function: True
    test 1748 vector3d.iscolinearWith() function: True
    test 1749 vector3d.nearestOn() function: True
    test 1750 vector3d.nearestOn6() function: True
    test 1751 vector3d.parse3d() function: True
    test 1752 vector3d.trilaterate2d2() function: True
    test 1753 vector3d.trilaterate3d2() function: True

    testModule(pygeodesy.vector3dBase, 22.06.16)

    testModule(pygeodesy.webmercator, 22.06.26)
    test 1754 webmercator.EasNorRadius3Tuple() class: True
    test 1755 webmercator.WebMercatorError() class: True
    test 1756 webmercator.Wm() class: True
    test 1757 webmercator.parseWM() function: True
    test 1758 webmercator.toWm() function: True

    testModule(pygeodesy.wgrs, 22.05.14)
    test 1759 wgrs.Georef() class: True
    test 1760 wgrs.WGRSError() class: True
    test 1761 wgrs.decode3() function: True
    test 1762 wgrs.decode5() function: True
    test 1763 wgrs.encode() function: True
    test 1764 wgrs.precision() function: True
    test 1765 wgrs.resolution() function: True

    testPublic(pygeodesy, 22.07.07)
    test 1766 Aer() class: True
    test 1767 Aer4Tuple() class: True
    test 1768 Albers7Tuple() class: True
    test 1769 AlbersEqualArea() class: True
    test 1770 AlbersEqualArea2() class: True
    test 1771 AlbersEqualArea4() class: True
    test 1772 AlbersEqualAreaCylindrical() class: True
    test 1773 AlbersEqualAreaNorth() class: True
    test 1774 AlbersEqualAreaSouth() class: True
    test 1775 AlbersError() class: True
    test 1776 Area3Tuple() class: True
    test 1777 Attitude() class: True
    test 1778 Attitude4Tuple() class: True
    test 1779 AttitudeError() class: True
    test 1780 Azimuthal7Tuple() class: True
    test 1781 AzimuthalError() class: True
    test 1782 Band() class: True
    test 1783 Bearing() class: True
    test 1784 Bearing2Tuple() class: True
    test 1785 Bearing_() class: True
    test 1786 Bool() class: True
    test 1787 Bounds2Tuple() class: True
    test 1788 Bounds4Tuple() class: True
    test 1789 CSSError() class: True
    test 1790 Caps class pygeodesy.karney.Caps: True
    test 1791 CassiniSoldner() class: True
    test 1792 Circin6Tuple() class: True
    test 1793 Circle4Tuple() class: True
    test 1794 Circum3Tuple() class: True
    test 1795 Circum4Tuple() class: True
    test 1796 ClipCS3Tuple() class: True
    test 1797 ClipCS4Tuple() class: True
    test 1798 ClipError() class: True
    test 1799 ClipLB6Tuple() class: True
    test 1800 ClipSH3Tuple() class: True
    test 1801 Collins5Tuple() class: True
    test 1802 Conic() class: True
    test 1803 Conics class pygeodesy.lcc.Conics: True
    test 1804 CrossError() class: True
    test 1805 Css() class: True
    test 1806 Curvature2Tuple() class: True
    test 1807 Datum() class: True
    test 1808 Datums class pygeodesy.datums.Datums: True
    test 1809 Degrees() class: True
    test 1810 Degrees2() class: True
    test 1811 Degrees_() class: True
    test 1812 DeprecationWarnings() function: True
    test 1813 Destination2Tuple() class: True
    test 1814 Destination3Tuple() class: True
    test 1815 Direct9Tuple() class: True
    test 1816 Distance() class: True
    test 1817 Distance2Tuple() class: True
    test 1818 Distance3Tuple() class: True
    test 1819 Distance4Tuple() class: True
    test 1820 Distance_() class: True
    test 1821 EPSGError() class: True
    test 1822 ETMError() class: True
    test 1823 EasNor2Tuple() class: True
    test 1824 EasNor3Tuple() class: True
    test 1825 EasNorAziRk4Tuple() class: True
    test 1826 EasNorAziRkEqu6Tuple() class: True
    test 1827 EasNorExact4Tuple() class: True
    test 1828 EasNorRadius3Tuple() class: True
    test 1829 Easting() class: True
    test 1830 Ecef9Tuple() class: True
    test 1831 EcefCartesian() function: True
    test 1832 EcefError() class: True
    test 1833 EcefFarrell21() class: True
    test 1834 EcefFarrell22() class: True
    test 1835 EcefKarney() class: True
    test 1836 EcefMatrix() class: True
    test 1837 EcefSudano() class: True
    test 1838 EcefVeness() class: True
    test 1839 EcefYou() class: True
    test 1840 Elevation2Tuple() class: True
    test 1841 Ellipsoid() class: True
    test 1842 Ellipsoid2() class: True
    test 1843 Ellipsoids class pygeodesy.ellipsoids.Ellipsoids: True
    test 1844 Elliptic() class: True
    test 1845 Elliptic3Tuple() class: True
    test 1846 EllipticError() class: True
    test 1847 Enu() class: True
    test 1848 Enu4Tuple() class: True
    test 1849 Epoch() class: True
    test 1850 Epsg() class: True
    test 1851 Equidistant() class: True
    test 1852 EquidistantExact() class: True
    test 1853 EquidistantGeodSolve() class: True
    test 1854 EquidistantKarney() class: True
    test 1855 Etm() class: True
    test 1856 ExactTransverseMercator() class: True
    test 1857 FIx() class: True
    test 1858 F_D60_ str: True
    test 1859 F_D60__ str: True
    test 1860 F_DEG_ str: True
    test 1861 F_DEG__ str: True
    test 1862 F_DMS_ str: True
    test 1863 F_DMS__ str: True
    test 1864 F_DM_ str: True
    test 1865 F_DM__ str: True
    test 1866 F_D_ str: True
    test 1867 F_D__ str: True
    test 1868 F_MIN_ str: True
    test 1869 F_MIN__ str: True
    test 1870 F_RAD_ str: True
    test 1871 F_RAD__ str: True
    test 1872 F_SEC_ str: True
    test 1873 F_SEC__ str: True
    test 1874 F__E_ str: True
    test 1875 F__E__ str: True
    test 1876 F__F_ str: True
    test 1877 F__F__ str: True
    test 1878 F__G_ str: True
    test 1879 F__G__ str: True
    test 1880 Fcook() class: True
    test 1881 Fdot() class: True
    test 1882 Feet() class: True
    test 1883 Fhorner() class: True
    test 1884 Flinear() class: True
    test 1885 Float() class: True
    test 1886 Float_() class: True
    test 1887 Footprint5Tuple() class: True
    test 1888 Forward4Tuple() class: True
    test 1889 Fpolynomial() class: True
    test 1890 Frechet() class: True
    test 1891 Frechet6Tuple() class: True
    test 1892 FrechetCosineAndoyerLambert() class: True
    test 1893 FrechetCosineForsytheAndoyerLambert() class: True
    test 1894 FrechetCosineLaw() class: True
    test 1895 FrechetDegrees() class: True
    test 1896 FrechetDistanceTo() class: True
    test 1897 FrechetEquirectangular() class: True
    test 1898 FrechetError() class: True
    test 1899 FrechetEuclidean() class: True
    test 1900 FrechetExact() class: True
    test 1901 FrechetFlatLocal() class: True
    test 1902 FrechetFlatPolar() class: True
    test 1903 FrechetHaversine() class: True
    test 1904 FrechetHubeny() class: True
    test 1905 FrechetKarney() class: True
    test 1906 FrechetRadians() class: True
    test 1907 FrechetThomas() class: True
    test 1908 FrechetVincentys() class: True
    test 1909 Frustum() class: True
    test 1910 Fsum() class: True
    test 1911 Fsum2Tuple() class: True
    test 1912 Fwelford() class: True
    test 1913 GARSError() class: True
    test 1914 GDict() class: True
    test 1915 Garef() class: True
    test 1916 GeodSolve12Tuple() class: True
    test 1917 GeodesicAreaExact() class: True
    test 1918 GeodesicError() class: True
    test 1919 GeodesicExact() class: True
    test 1920 GeodesicLineExact() class: True
    test 1921 GeodesicLineSolve() class: True
    test 1922 GeodesicSolve() class: True
    test 1923 Geohash() class: True
    test 1924 GeohashError() class: True
    test 1925 GeoidError() class: True
    test 1926 GeoidG2012B() class: True
    test 1927 GeoidHeight2Tuple() class: True
    test 1928 GeoidHeight5Tuple() class: True
    test 1929 GeoidKarney() class: True
    test 1930 GeoidPGM() class: True
    test 1931 Georef() class: True
    test 1932 Gnomonic() class: True
    test 1933 GnomonicExact() class: True
    test 1934 GnomonicGeodSolve() class: True
    test 1935 GnomonicKarney() class: True
    test 1936 Hausdorff() class: True
    test 1937 Hausdorff6Tuple() class: True
    test 1938 HausdorffCosineAndoyerLambert() class: True
    test 1939 HausdorffCosineForsytheAndoyerLambert() class: True
    test 1940 HausdorffCosineLaw() class: True
    test 1941 HausdorffDegrees() class: True
    test 1942 HausdorffDistanceTo() class: True
    test 1943 HausdorffEquirectangular() class: True
    test 1944 HausdorffError() class: True
    test 1945 HausdorffEuclidean() class: True
    test 1946 HausdorffExact() class: True
    test 1947 HausdorffFlatLocal() class: True
    test 1948 HausdorffFlatPolar() class: True
    test 1949 HausdorffHaversine() class: True
    test 1950 HausdorffHubeny() class: True
    test 1951 HausdorffKarney() class: True
    test 1952 HausdorffRadians() class: True
    test 1953 HausdorffThomas() class: True
    test 1954 HausdorffVincentys() class: True
    test 1955 Height() class: True
    test 1956 HeightCubic() class: True
    test 1957 HeightError() class: True
    test 1958 HeightIDW() function: True
    test 1959 HeightIDW2() function: True
    test 1960 HeightIDW3() function: True
    test 1961 HeightIDWcosineAndoyerLambert() class: True
    test 1962 HeightIDWcosineForsytheAndoyerLambert() class: True
    test 1963 HeightIDWcosineLaw() class: True
    test 1964 HeightIDWdistanceTo() class: True
    test 1965 HeightIDWequirectangular() class: True
    test 1966 HeightIDWeuclidean() class: True
    test 1967 HeightIDWflatLocal() class: True
    test 1968 HeightIDWflatPolar() class: True
    test 1969 HeightIDWhaversine() class: True
    test 1970 HeightIDWhubeny() class: True
    test 1971 HeightIDWkarney() class: True
    test 1972 HeightIDWthomas() class: True
    test 1973 HeightIDWvincentys() class: True
    test 1974 HeightLSQBiSpline() class: True
    test 1975 HeightLinear() class: True
    test 1976 HeightSmoothBiSpline() class: True
    test 1977 Helmert7Tuple() class: True
    test 1978 INT0 int: True
    test 1979 Int() class: True
    test 1980 Int_() class: True
    test 1981 Intersection3Tuple() class: True
    test 1982 IntersectionError() class: True
    test 1983 Inverse10Tuple() class: True
    test 1984 KTMError() class: True
    test 1985 KTransverseMercator() class: True
    test 1986 LCCError() class: True
    test 1987 Lam() class: True
    test 1988 Lam_() class: True
    test 1989 LambertEqualArea() class: True
    test 1990 Lat() class: True
    test 1991 LatLon2PsxyIter() class: True
    test 1992 LatLon2Tuple() class: True
    test 1993 LatLon2psxy() class: True
    test 1994 LatLon3Tuple() class: True
    test 1995 LatLon4Tuple() class: True
    test 1996 LatLonAziRk4Tuple() class: True
    test 1997 LatLonDatum3Tuple() class: True
    test 1998 LatLonDatum5Tuple() class: True
    test 1999 LatLonExact4Tuple() class: True
    test 2000 LatLonPrec3Tuple() class: True
    test 2001 LatLonPrec5Tuple() class: True
    test 2002 LatLon_() class: True
    test 2003 Lat_() class: True
    test 2004 LazyImportError() class: True
    test 2005 Lcc() class: True
    test 2006 LenError() class: True
    test 2007 LimitError() class: True
    test 2008 Local9Tuple() class: True
    test 2009 LocalCartesian() class: True
    test 2010 LocalError() class: True
    test 2011 Lon() class: True
    test 2012 Lon_() class: True
    test 2013 Ltp() class: True
    test 2014 MGRSError() class: True
    test 2015 Meeus2Tuple() class: True
    test 2016 Meter() class: True
    test 2017 Meter2() class: True
    test 2018 Meter3() class: True
    test 2019 Meter_() class: True
    test 2020 Mgrs() class: True
    test 2021 Mgrs4Tuple() class: True
    test 2022 Mgrs6Tuple() class: True
    test 2023 NN str: True
    test 2024 NearestOn2Tuple() class: True
    test 2025 NearestOn3Tuple() class: True
    test 2026 NearestOn4Tuple() class: True
    test 2027 NearestOn5Tuple() class: True
    test 2028 NearestOn6Tuple() class: True
    test 2029 NearestOn8Tuple() class: True
    test 2030 Ned() class: True
    test 2031 Ned3Tuple() class: True
    test 2032 Ned4Tuple() class: True
    test 2033 Neighbors8Dict() class: True
    test 2034 Northing() class: True
    test 2035 NumPyError() class: True
    test 2036 Number_() class: True
    test 2037 Numpy2LatLon() class: True
    test 2038 OSGRError() class: True
    test 2039 Orthographic() class: True
    test 2040 Osgr() class: True
    test 2041 PGMError() class: True
    test 2042 ParseError() class: True
    test 2043 Phi() class: True
    test 2044 PhiLam2Tuple() class: True
    test 2045 PhiLam3Tuple() class: True
    test 2046 PhiLam4Tuple() class: True
    test 2047 Phi_() class: True
    test 2048 Point3Tuple() class: True
    test 2049 Points2Tuple() class: True
    test 2050 PointsError() class: True
    test 2051 PointsIter() class: True
    test 2052 PolygonArea() class: True
    test 2053 Precision_() class: True
    test 2054 Property() class: True
    test 2055 Property_RO() class: True
    test 2056 R_FM float: True
    test 2057 R_GM float: True
    test 2058 R_KM float: True
    test 2059 R_M float: True
    test 2060 R_MA float: True
    test 2061 R_MB float: True
    test 2062 R_NM float: True
    test 2063 R_SM float: True
    test 2064 R_VM float: True
    test 2065 Radians() class: True
    test 2066 Radians2() class: True
    test 2067 Radians_() class: True
    test 2068 Radical2Tuple() class: True
    test 2069 Radii11Tuple() class: True
    test 2070 Radius() class: True
    test 2071 Radius_() class: True
    test 2072 RangeError() class: True
    test 2073 RefFrame() class: True
    test 2074 RefFrameError() function: True
    test 2075 RefFrames class pygeodesy.trf.RefFrames: True
    test 2076 ResectionError() class: True
    test 2077 ResidualError() class: True
    test 2078 Resolutions2Tuple() class: True
    test 2079 Reverse4Tuple() class: True
    test 2080 Rhumb() class: True
    test 2081 Rhumb7Tuple() class: True
    test 2082 Rhumb8Tuple() class: True
    test 2083 RhumbError() class: True
    test 2084 RhumbLine() class: True
    test 2085 RhumbLineSolve() class: True
    test 2086 RhumbOrder2Tuple() class: True
    test 2087 RhumbSolve() class: True
    test 2088 RhumbSolve7Tuple() class: True
    test 2089 S_RAD str: True
    test 2090 S_SEP str: True
    test 2091 Scalar() class: True
    test 2092 Scalar_() class: True
    test 2093 SciPyError() class: True
    test 2094 SciPyWarning() class: True
    test 2095 Shape2Tuple() class: True
    test 2096 Soddy4Tuple() class: True
    test 2097 Stereographic() class: True
    test 2098 Str() class: True
    test 2099 Str_() class: True
    test 2100 Survey3Tuple() class: True
    test 2101 TRFError() class: True
    test 2102 Tienstra7Tuple() class: True
    test 2103 Transform() class: True
    test 2104 Transform7Tuple() class: True
    test 2105 Transforms class pygeodesy.datums.Transforms: True
    test 2106 TriAngle4Tuple() class: True
    test 2107 TriSide2Tuple() class: True
    test 2108 TriSide4Tuple() class: True
    test 2109 Triangle7Tuple() class: True
    test 2110 Triangle8Tuple() class: True
    test 2111 TriangleError() class: True
    test 2112 Trilaterate5Tuple() class: True
    test 2113 Tuple2LatLon() class: True
    test 2114 UPSError() class: True
    test 2115 UTMError() class: True
    test 2116 UTMUPSError() class: True
    test 2117 UnitError() class: True
    test 2118 Ups() class: True
    test 2119 Utm() class: True
    test 2120 UtmUps() function: True
    test 2121 UtmUps2Tuple() class: True
    test 2122 UtmUps4Tuple() class: True
    test 2123 UtmUps5Tuple() class: True
    test 2124 UtmUps8Tuple() class: True
    test 2125 UtmUpsLatLon5Tuple() class: True
    test 2126 Vector2Tuple() class: True
    test 2127 Vector3Tuple() class: True
    test 2128 Vector3d() class: True
    test 2129 Vector4Tuple() class: True
    test 2130 VectorError() class: True
    test 2131 VincentyError() class: True
    test 2132 WGRSError() class: True
    test 2133 WebMercatorError() class: True
    test 2134 Wm() class: True
    test 2135 Xyz4Tuple() class: True
    test 2136 XyzLocal() class: True
    test 2137 Zone() class: True
    test 2138 a_b2e() function: True
    test 2139 a_b2e2() function: True
    test 2140 a_b2e22() function: True
    test 2141 a_b2e32() function: True
    test 2142 a_b2f() function: True
    test 2143 a_b2f2() function: True
    test 2144 a_b2f_() function: True
    test 2145 a_b2n() function: True
    test 2146 a_f2Tuple() class: True
    test 2147 a_f2b() function: True
    test 2148 a_f_2b() function: True
    test 2149 acos1() function: True
    test 2150 acre2ha() function: True
    test 2151 acre2m2() function: True
    test 2152 anStr() function: True
    test 2153 anstr() function: True
    test 2154 antipode() function: True
    test 2155 antipode_() function: True
    test 2156 areaOf() function: True
    test 2157 areaof() function: True
    test 2158 asin1() function: True
    test 2159 atan2b() function: True
    test 2160 atan2d() function: True
    test 2161 atand() function: True
    test 2162 attrs() function: True
    test 2163 b_f2a() function: True
    test 2164 b_f_2a() function: True
    test 2165 bearing() function: True
    test 2166 bearingDMS() function: True
    test 2167 bearing_() function: True
    test 2168 bounds() function: True
    test 2169 boundsOf() function: True
    test 2170 callername() function: True
    test 2171 cassini() function: True
    test 2172 cbrt() function: True
    test 2173 cbrt2() function: True
    test 2174 centroidOf() function: True
    test 2175 chain2m() function: True
    test 2176 circin6() function: True
    test 2177 circle4() function: True
    test 2178 circum3() function: True
    test 2179 circum4_() function: True
    test 2180 classname() function: True
    test 2181 classnaming() function: True
    test 2182 clipCS3() function: True
    test 2183 clipCS4() function: True
    test 2184 clipDMS() function: True
    test 2185 clipDegrees() function: True
    test 2186 clipLB6() function: True
    test 2187 clipRadians() function: True
    test 2188 clipSH() function: True
    test 2189 clipSH3() function: True
    test 2190 clipStr() function: True
    test 2191 clips() function: True
    test 2192 collins() function: True
    test 2193 collins5() function: True
    test 2194 compassAngle() function: True
    test 2195 compassDMS() function: True
    test 2196 compassPoint() function: True
    test 2197 copysign0() function: True
    test 2198 copytype() function: True
    test 2199 cosineAndoyerLambert() function: True
    test 2200 cosineAndoyerLambert_() function: True
    test 2201 cosineForsytheAndoyerLambert() function: True
    test 2202 cosineForsytheAndoyerLambert_() function: True
    test 2203 cosineLaw() function: True
    test 2204 cosineLaw_() function: True
    test 2205 cot() function: True
    test 2206 cot_() function: True
    test 2207 cotd() function: True
    test 2208 cotd_() function: True
    test 2209 crosserrors() function: True
    test 2210 date2epoch() function: True
    test 2211 decodeEPSG2() function: True
    test 2212 degDMS() function: True
    test 2213 degrees180() function: True
    test 2214 degrees2grades() function: True
    test 2215 degrees2m() function: True
    test 2216 degrees360() function: True
    test 2217 degrees90() function: True
    test 2218 deprecated_Property_RO() function: True
    test 2219 deprecated_class() function: True
    test 2220 deprecated_function() function: True
    test 2221 deprecated_method() function: True
    test 2222 deprecated_property_RO() function: True
    test 2223 egmGeoidHeights() function: True
    test 2224 elevation2() function: True
    test 2225 enStr2() function: True
    test 2226 encodeEPSG() function: True
    test 2227 enstr2() function: True
    test 2228 epoch2date() function: True
    test 2229 equidistant() function: True
    test 2230 equirectangular() function: True
    test 2231 equirectangular3() function: True
    test 2232 equirectangular_() function: True
    test 2233 euclid() function: True
    test 2234 euclid_() function: True
    test 2235 euclidean() function: True
    test 2236 euclidean_() function: True
    test 2237 exception_chaining() function: True
    test 2238 excessAbc() function: True
    test 2239 excessGirard() function: True
    test 2240 excessKarney() function: True
    test 2241 excessKarney_() function: True
    test 2242 excessLHuilier() function: True
    test 2243 excessQuad() function: True
    test 2244 excessQuad_() function: True
    test 2245 f2e2() function: True
    test 2246 f2e22() function: True
    test 2247 f2e32() function: True
    test 2248 f2f2() function: True
    test 2249 f2f_() function: True
    test 2250 f2n() function: True
    test 2251 fStr() function: True
    test 2252 fStrzs() function: True
    test 2253 f_2f() function: True
    test 2254 facos1() function: True
    test 2255 false2f() function: True
    test 2256 falsed2f() function: True
    test 2257 fasin1() function: True
    test 2258 fatan() function: True
    test 2259 fatan1() function: True
    test 2260 fatan2() function: True
    test 2261 fathom2m() function: True
    test 2262 favg() function: True
    test 2263 fdot() function: True
    test 2264 fdot3() function: True
    test 2265 fhorner() function: True
    test 2266 fidw() function: True
    test 2267 flatLocal() function: True
    test 2268 flatLocal_() function: True
    test 2269 flatPolar() function: True
    test 2270 flatPolar_() function: True
    test 2271 float_() function: True
    test 2272 fmean() function: True
    test 2273 fmean_() function: True
    test 2274 fpolynomial() function: True
    test 2275 fpowers() function: True
    test 2276 fractional() function: True
    test 2277 frange() function: True
    test 2278 frechet_() function: True
    test 2279 freduce class builtin_function_or_method: True
    test 2280 fremainder() function: True
    test 2281 fstr() function: True
    test 2282 fstrzs() function: True
    test 2283 fsum() function: True
    test 2284 fsum1() function: True
    test 2285 fsum1_() function: True
    test 2286 fsum_() function: True
    test 2287 ft2m() function: True
    test 2288 furlong2m() function: True
    test 2289 geoidHeight2() function: True
    test 2290 gnomonic() function: True
    test 2291 grades() function: True
    test 2292 grades2degrees() function: True
    test 2293 grades2radians() function: True
    test 2294 grades400() function: True
    test 2295 halfs2() function: True
    test 2296 hartzell() function: True
    test 2297 hausdorff_() function: True
    test 2298 haversine() function: True
    test 2299 haversine_() function: True
    test 2300 heightOf() function: True
    test 2301 horizon() function: True
    test 2302 hstr() function: True
    test 2303 hubeny() function: True
    test 2304 hubeny_() function: True
    test 2305 hypot1() function: True
    test 2306 hypot2() function: True
    test 2307 hypot2_() function: True
    test 2308 hypot3() function: True
    test 2309 inStr() function: True
    test 2310 instr() function: True
    test 2311 intersection3d3() function: True
    test 2312 intersections2() function: True
    test 2313 isNumpy2() function: True
    test 2314 isPoints2() function: True
    test 2315 isTuple2() function: True
    test 2316 isantipode() function: True
    test 2317 isantipode_() function: True
    test 2318 isbool() function: True
    test 2319 isclass() function: True
    test 2320 isclockwise() function: True
    test 2321 isclose() function: True
    test 2322 iscolinearWith() function: True
    test 2323 iscomplex() function: True
    test 2324 isconvex() function: True
    test 2325 isconvex_() function: True
    test 2326 isenclosedBy() function: True
    test 2327 isenclosedby() function: True
    test 2328 isfinite() function: True
    test 2329 isint() function: True
    test 2330 isint0() function: True
    test 2331 iskeyword class builtin_function_or_method: True
    test 2332 isnear0() function: True
    test 2333 isnear1() function: True
    test 2334 isneg0() function: True
    test 2335 isninf() function: True
    test 2336 isnon0() function: True
    test 2337 isodd() function: True
    test 2338 ispolar() function: True
    test 2339 isscalar() function: True
    test 2340 issequence() function: True
    test 2341 isstr() function: True
    test 2342 issubclassof() function: True
    test 2343 istuplist() function: True
    test 2344 iterNumpy2() function: True
    test 2345 iterNumpy2over() function: True
    test 2346 joined() function: True
    test 2347 joined_() function: True
    test 2348 latDMS() function: True
    test 2349 latlon2n_xyz() function: True
    test 2350 latlonDMS() function: True
    test 2351 latlonDMS_() function: True
    test 2352 len2() function: True
    test 2353 limiterrors() function: True
    test 2354 lonDMS() function: True
    test 2355 luneOf() function: True
    test 2356 m2NM() function: True
    test 2357 m2SM() function: True
    test 2358 m2chain() function: True
    test 2359 m2degrees() function: True
    test 2360 m2fathom() function: True
    test 2361 m2ft() function: True
    test 2362 m2furlong() function: True
    test 2363 m2km() function: True
    test 2364 m2radians() function: True
    test 2365 m2toise() function: True
    test 2366 m2yard() function: True
    test 2367 machine() function: True
    test 2368 map1() function: True
    test 2369 map2() function: True
    test 2370 meeus2() function: True
    test 2371 modulename() function: True
    test 2372 n2e2() function: True
    test 2373 n2f() function: True
    test 2374 n2f_() function: True
    test 2375 n_xyz2latlon() function: True
    test 2376 n_xyz2philam() function: True
    test 2377 nameof() function: True
    test 2378 nearestOn() function: True
    test 2379 nearestOn3() function: True
    test 2380 nearestOn4() function: True
    test 2381 nearestOn5() function: True
    test 2382 nearestOn6() function: True
    test 2383 neg() function: True
    test 2384 neg_() function: True
    test 2385 norm2() function: True
    test 2386 normDMS() function: True
    test 2387 norm_() function: True
    test 2388 notImplemented() function: True
    test 2389 notOverloaded() function: True
    test 2390 opposing() function: True
    test 2391 opposing_() function: True
    test 2392 pairs() function: True
    test 2393 parse3d() function: True
    test 2394 parse3llh() function: True
    test 2395 parseDDDMMSS() function: True
    test 2396 parseDMS() function: True
    test 2397 parseDMS2() function: True
    test 2398 parseETM5() function: True
    test 2399 parseMGRS() function: True
    test 2400 parseOSGR() function: True
    test 2401 parseRad() function: True
    test 2402 parseUPS5() function: True
    test 2403 parseUTM() function: True
    test 2404 parseUTM5() function: True
    test 2405 parseUTMUPS5() function: True
    test 2406 parseWM() function: True
    test 2407 perimeterOf() function: True
    test 2408 perimeterof() function: True
    test 2409 philam2n_xyz() function: True
    test 2410 pierlot() function: True
    test 2411 points2() function: True
    test 2412 polygon() function: True
    test 2413 precision() function: True
    test 2414 print_() function: True
    test 2415 printf() function: True
    test 2416 property_RO() class: True
    test 2417 property_doc_() function: True
    test 2418 quadOf() function: True
    test 2419 radians2m() function: True
    test 2420 radiansPI() function: True
    test 2421 radiansPI2() function: True
    test 2422 radiansPI_2() function: True
    test 2423 radical2() function: True
    test 2424 radii11() function: True
    test 2425 randomrangenerator() function: True
    test 2426 rangerrors() function: True
    test 2427 reprs() function: True
    test 2428 scalar() function: True
    test 2429 signBit() function: True
    test 2430 signOf() function: True
    test 2431 simplify1() function: True
    test 2432 simplify2() function: True
    test 2433 simplifyRDP() function: True
    test 2434 simplifyRDPm() function: True
    test 2435 simplifyRW() function: True
    test 2436 simplifyVW() function: True
    test 2437 simplifyVWm() function: True
    test 2438 sincos2() function: True
    test 2439 sincos2_() function: True
    test 2440 sincos2d() function: True
    test 2441 sincos2d_() function: True
    test 2442 snellius3() function: True
    test 2443 soddy4() function: True
    test 2444 splice() function: True
    test 2445 sqrt0() function: True
    test 2446 sqrt3() function: True
    test 2447 sqrt_a() function: True
    test 2448 strs() function: True
    test 2449 tanPI_2_2() function: True
    test 2450 tan_2() function: True
    test 2451 tand() function: True
    test 2452 tand_() function: True
    test 2453 thomas() function: True
    test 2454 thomas_() function: True
    test 2455 tienstra() function: True
    test 2456 tienstra7() function: True
    test 2457 toCss() function: True
    test 2458 toDMS() function: True
    test 2459 toEtm8() function: True
    test 2460 toLcc() function: True
    test 2461 toMgrs() function: True
    test 2462 toOsgr() function: True
    test 2463 toUps8() function: True
    test 2464 toUtm() function: True
    test 2465 toUtm8() function: True
    test 2466 toUtmUps8() function: True
    test 2467 toWm() function: True
    test 2468 toise2m() function: True
    test 2469 trfXform() function: True
    test 2470 triAngle() function: True
    test 2471 triAngle4() function: True
    test 2472 triSide() function: True
    test 2473 triSide2() function: True
    test 2474 triSide4() function: True
    test 2475 trilaterate2d2() function: True
    test 2476 trilaterate3d2() function: True
    test 2477 tyr3d() function: True
    test 2478 ub2str() function: True
    test 2479 unStr() function: True
    test 2480 unroll180() function: True
    test 2481 unrollPI() function: True
    test 2482 unsign0() function: True
    test 2483 unsigned0() function: True
    test 2484 unstr() function: True
    test 2485 upsZoneBand5() function: True
    test 2486 utmZoneBand2() function: True
    test 2487 utmZoneBand5() function: True
    test 2488 utmupsValidate() function: True
    test 2489 utmupsValidateOK() function: True
    test 2490 utmupsZoneBand5() function: True
    test 2491 vincentys() function: True
    test 2492 vincentys_() function: True
    test 2493 wildberger3() function: True
    test 2494 wrap180() function: True
    test 2495 wrap360() function: True
    test 2496 wrap90() function: True
    test 2497 wrapPI() function: True
    test 2498 wrapPI2() function: True
    test 2499 wrapPI_2() function: True
    test 2500 yard2m() function: True

    all 2500 testModules.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 16.431 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testNamed.py

    testing testNamed.py 22.06.20

    testing _Named() (pygeodesy.named, 22.06.24)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 named._Named 'Test': named._Named 'Test'
    test 7 pygeodesy.named._Named 'Test': pygeodesy.named._Named 'Test'
    test 8 Test: use _Named.rename('X'): not _Named.name = 'X' (was 'Test')
    test 9 Test: _Named 'Test'
    test 10 _Named 'Test': Test
    test 11 _Named 'Test': Test
    test 12 _Named 'Test': _Named 'Test'
    test 13 _Named 'Test': <_Named 'Test' at 0x103df7d30>  FAILED, KNOWN, expected _Named 'Test'
    test 14 _Named 'Test': ''

    testing _NamedBase() (pygeodesy.named, 22.06.24)
    test 15 _NamedBase: _NamedBase
    test 16 _NamedBase: True
    test 17 _NamedBase: ''
    test 18 Test: Test
    test 19 _NamedBase 'Test': _NamedBase 'Test'
    test 20 named._NamedBase 'Test': named._NamedBase 'Test'
    test 21 pygeodesy.named._NamedBase 'Test': pygeodesy.named._NamedBase 'Test'
    test 22 Test: use _NamedBase.rename('X'): not _NamedBase.name = 'X' (was 'Test')
    test 23 Test: named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 24 _NamedBase 'Test': Test
    test 25 _NamedBase 'Test': Test
    test 26 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 27 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 28 _NamedBase 'Test': ''

    testing _NamedDict() (pygeodesy.named, 22.06.24)
    test 29 _NamedDict: _NamedDict
    test 30 _NamedDict: True
    test 31 _NamedDict: ''
    test 32 Test: Test
    test 33 _NamedDict 'Test': _NamedDict 'Test'
    test 34 named._NamedDict 'Test': named._NamedDict 'Test'
    test 35 pygeodesy.named._NamedDict 'Test': pygeodesy.named._NamedDict 'Test'
    test 36 Test: use _NamedDict.rename('X'): not _NamedDict.name = 'X' (was 'Test')
    test 37 Test: {}
    test 38 _NamedDict 'Test': Test
    test 39 _NamedDict 'Test': Test
    test 40 _NamedDict 'Test': {}
    test 41 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 42 _NamedDict: ''

    testing _NamedEnum(<class 'pygeodesy.datums.Datum'>,) (pygeodesy.named, 22.06.24)
    test 43 Datums: _NamedEnum
    test 44 Datums: True
    test 45 Datums: 'Datums'  FAILED, KNOWN, expected ''
    test 46 Test: Test
    test 47 _NamedEnum 'Test': _NamedEnum 'Test'
    test 48 named._NamedEnum 'Test': named._NamedEnum 'Test'
    test 49 pygeodesy.named._NamedEnum 'Test': pygeodesy.named._NamedEnum 'Test'
    test 50 Test: use _NamedEnum.rename('X'): not _NamedEnum.name = 'X' (was 'Test')
    test 51 Test: Test.
    test 52 _NamedEnum 'Test': Test
    test 53 _NamedEnum 'Test': Test
    test 54 _NamedEnum 'Test': Test.
    test 55 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 56 _NamedEnum: ''

    testing _NamedEnumItem() (pygeodesy.named, 22.06.24)
    test 57 _NamedEnumItem: _NamedEnumItem
    test 58 _NamedEnumItem: True
    test 59 _NamedEnumItem: ''
    test 60 Test: Test
    test 61 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 62 named._NamedEnumItem 'Test': named._NamedEnumItem 'Test'
    test 63 pygeodesy.named._NamedEnumItem 'Test': pygeodesy.named._NamedEnumItem 'Test'
    test 64 _NamedEnumItem 'Test': Test
    test 65 _NamedEnumItem 'Test': Test
    test 66 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 67 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 68 _NamedEnumItem 'Test': ''

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 22.06.24)
    test 69 LatLon2Tuple: LatLon2Tuple
    test 70 LatLon2Tuple: True
    test 71 LatLon2Tuple: ''
    test 72 Test: Test
    test 73 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 74 namedTuples.LatLon2Tuple 'Test': namedTuples.LatLon2Tuple 'Test'
    test 75 pygeodesy.namedTuples.LatLon2Tuple 'Test': pygeodesy.namedTuples.LatLon2Tuple 'Test'
    test 76 Test: use LatLon2Tuple.rename('X'): not LatLon2Tuple.name = 'X' (was 'Test')
    test 77 Test: (0, 0)
    test 78 LatLon2Tuple 'Test': Test
    test 79 LatLon2Tuple 'Test': Test
    test 80 LatLon2Tuple 'Test': (0, 0)
    test 81 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 82 LatLon2Tuple 'Test': ''

    testing NamedDicts (pygeodesy.named, 22.06.24)
    test 83 Neighbors8Dict: Neighbors8Dict
    test 84 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 85 Neighbors8Dict: 8

    testing NamedTuples (pygeodesy.namedTuples, 22.06.30)
    test 86 Albers7Tuple: Albers7Tuple
    test 87 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 88 Albers7Tuple: 7
    test 89 Azimuthal7Tuple: Azimuthal7Tuple
    test 90 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 91 Azimuthal7Tuple: 7
    test 92 ClipCS4Tuple: ClipCS4Tuple
    test 93 ClipCS4Tuple: 4-Tuple C{(start, end, i, j)}
    test 94 ClipCS4Tuple: 4
    test 95 ClipLB6Tuple: ClipLB6Tuple
    test 96 ClipLB6Tuple: 6-Tuple C{(start, end, i, fi, fj, j)}
    test 97 ClipLB6Tuple: 6
    test 98 ClipSH3Tuple: ClipSH3Tuple
    test 99 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 100 ClipSH3Tuple: 3
    test 101 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 102 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 103 EasNorAziRk4Tuple: 4
    test 104 EasNorAziRkEqu6Tuple: EasNorAziRkEqu6Tuple
    test 105 EasNorAziRkEqu6Tuple: 6-Tuple C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 106 EasNorAziRkEqu6Tuple: 6
    test 107 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 108 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 109 LatLonAziRk4Tuple: 4
    test 110 Ecef9Tuple: Ecef9Tuple
    test 111 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 112 Ecef9Tuple: 9
    test 113 Elevation2Tuple: Elevation2Tuple
    test 114 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 115 Elevation2Tuple: 2
    test 116 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 117 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 118 GeoidHeight2Tuple: 2
    test 119 Circle4Tuple: Circle4Tuple
    test 120 Circle4Tuple: 4-Tuple C{(radius, height, lat, beta)}
    test 121 Circle4Tuple: 4
    test 122 Curvature2Tuple: Curvature2Tuple
    test 123 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 124 Curvature2Tuple: 2
    test 125 a_f2Tuple: a_f2Tuple
    test 126 a_f2Tuple: 2-Tuple C{(a, f)}
    test 127 a_f2Tuple: 2
    test 128 Elliptic3Tuple: Elliptic3Tuple
    test 129 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 130 Elliptic3Tuple: 3
    test 131 Radical2Tuple: Radical2Tuple
    test 132 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 133 Radical2Tuple: 2
    test 134 Frechet6Tuple: Frechet6Tuple
    test 135 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 136 Frechet6Tuple: 6
    test 137 Fsum2Tuple: Fsum2Tuple
    test 138 Fsum2Tuple: 2-Tuple C{(fsum, residual)}
    test 139 Fsum2Tuple: 2
    test 140 GeodSolve12Tuple: GeodSolve12Tuple
    test 141 GeodSolve12Tuple: 12-Tuple C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 142 GeodSolve12Tuple: 12
    test 143 Resolutions2Tuple: Resolutions2Tuple
    test 144 Resolutions2Tuple: 2-Tuple C{(res1, res2)}
    test 145 Resolutions2Tuple: 2
    test 146 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 147 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 148 GeoidHeight5Tuple: 5
    test 149 Hausdorff6Tuple: Hausdorff6Tuple
    test 150 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 151 Hausdorff6Tuple: 6
    test 152 Area3Tuple: Area3Tuple
    test 153 Area3Tuple: 3-Tuple C{(number, perimeter, area)}
    test 154 Area3Tuple: 3
    test 155 Direct9Tuple: Direct9Tuple
    test 156 Direct9Tuple: 9-Tuple C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 157 Direct9Tuple: 9
    test 158 Inverse10Tuple: Inverse10Tuple
    test 159 Inverse10Tuple: 10-Tuple C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 160 Inverse10Tuple: 10
    test 161 Aer4Tuple: Aer4Tuple
    test 162 Aer4Tuple: 4-Tuple C{(azimuth, elevation, slantrange, ltp)}
    test 163 Aer4Tuple: 4
    test 164 Attitude4Tuple: Attitude4Tuple
    test 165 Attitude4Tuple: 4-Tuple C{(alt, tilt, yaw, roll)}
    test 166 Attitude4Tuple: 4
    test 167 Enu4Tuple: Enu4Tuple
    test 168 Enu4Tuple: 4-Tuple C{(east, north, up, ltp)}
    test 169 Enu4Tuple: 4
    test 170 Footprint5Tuple: Footprint5Tuple
    test 171 Footprint5Tuple: 5-Tuple C{(center, upperleft, upperight, loweright, lowerleft)}
    test 172 Footprint5Tuple: 5
    test 173 Local9Tuple: Local9Tuple
    test 174 Local9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 175 Local9Tuple: 9
    test 176 Ned4Tuple: Ned4Tuple
    test 177 Ned4Tuple: 4-Tuple C{(north, east, down, ltp)}
    test 178 Ned4Tuple: 4
    test 179 Xyz4Tuple: Xyz4Tuple
    test 180 Xyz4Tuple: 4-Tuple C{(x, y, z, ltp)}
    test 181 Xyz4Tuple: 4
    test 182 Mgrs4Tuple: Mgrs4Tuple
    test 183 Mgrs4Tuple: 4-Tuple C{(zone, digraph, easting, northing)}
    test 184 Mgrs4Tuple: 4
    test 185 Mgrs6Tuple: Mgrs6Tuple
    test 186 Mgrs6Tuple: 6-Tuple C{(zone, digraph, easting, northing, band, datum)}
    test 187 Mgrs6Tuple: 6
    test 188 Bearing2Tuple: Bearing2Tuple
    test 189 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 190 Bearing2Tuple: 2
    test 191 Bounds2Tuple: Bounds2Tuple
    test 192 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 193 Bounds2Tuple: 2
    test 194 Bounds4Tuple: Bounds4Tuple
    test 195 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 196 Bounds4Tuple: 4
    test 197 Destination2Tuple: Destination2Tuple
    test 198 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 199 Destination2Tuple: 2
    test 200 Destination3Tuple: Destination3Tuple
    test 201 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 202 Destination3Tuple: 3
    test 203 Distance2Tuple: Distance2Tuple
    test 204 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 205 Distance2Tuple: 2
    test 206 Distance3Tuple: Distance3Tuple
    test 207 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 208 Distance3Tuple: 3
    test 209 Distance4Tuple: Distance4Tuple
    test 210 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 211 Distance4Tuple: 4
    test 212 EasNor2Tuple: EasNor2Tuple
    test 213 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 214 EasNor2Tuple: 2
    test 215 EasNor3Tuple: EasNor3Tuple
    test 216 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 217 EasNor3Tuple: 3
    test 218 Forward4Tuple: Forward4Tuple
    test 219 Forward4Tuple: 4-Tuple C{(easting, northing, convergence, scale)}
    test 220 Forward4Tuple: 4
    test 221 Intersection3Tuple: Intersection3Tuple
    test 222 Intersection3Tuple: 3-Tuple C{(point, outside1, outside2)}
    test 223 Intersection3Tuple: 3
    test 224 LatLon2Tuple: LatLon2Tuple
    test 225 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 226 LatLon2Tuple: 2
    test 227 LatLon3Tuple: LatLon3Tuple
    test 228 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 229 LatLon3Tuple: 3
    test 230 LatLon4Tuple: LatLon4Tuple
    test 231 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 232 LatLon4Tuple: 4
    test 233 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 234 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 235 LatLonDatum3Tuple: 3
    test 236 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 237 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, convergence, scale)}
    test 238 LatLonDatum5Tuple: 5
    test 239 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 240 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 241 LatLonPrec3Tuple: 3
    test 242 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 243 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 244 LatLonPrec5Tuple: 5
    test 245 NearestOn2Tuple: NearestOn2Tuple
    test 246 NearestOn2Tuple: 2-Tuple C{(closest, fraction)}
    test 247 NearestOn2Tuple: 2
    test 248 NearestOn3Tuple: NearestOn3Tuple
    test 249 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 250 NearestOn3Tuple: 3
    test 251 NearestOn4Tuple: NearestOn4Tuple
    test 252 NearestOn4Tuple: 4-Tuple C{(lat, lon, distance, normal)}
    test 253 NearestOn4Tuple: 4
    test 254 NearestOn5Tuple: NearestOn5Tuple
    test 255 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 256 NearestOn5Tuple: 5
    test 257 NearestOn6Tuple: NearestOn6Tuple
    test 258 NearestOn6Tuple: 6-Tuple C{(closest, distance, fi, j, start, end)}
    test 259 NearestOn6Tuple: 6
    test 260 NearestOn8Tuple: NearestOn8Tuple
    test 261 NearestOn8Tuple: 8-Tuple C{(closest, distance, fi, j, start, end, initial, final)}
    test 262 NearestOn8Tuple: 8
    test 263 PhiLam2Tuple: PhiLam2Tuple
    test 264 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 265 PhiLam2Tuple: 2
    test 266 PhiLam3Tuple: PhiLam3Tuple
    test 267 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 268 PhiLam3Tuple: 3
    test 269 PhiLam4Tuple: PhiLam4Tuple
    test 270 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 271 PhiLam4Tuple: 4
    test 272 Point3Tuple: Point3Tuple
    test 273 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 274 Point3Tuple: 3
    test 275 Points2Tuple: Points2Tuple
    test 276 Points2Tuple: 2-Tuple C{(number, points)}
    test 277 Points2Tuple: 2
    test 278 Reverse4Tuple: Reverse4Tuple
    test 279 Reverse4Tuple: 4-Tuple C{(lat, lon, convergence, scale)}
    test 280 Reverse4Tuple: 4
    test 281 Triangle7Tuple: Triangle7Tuple
    test 282 Triangle7Tuple: 7-Tuple C{(A, a, B, b, C, c, area)}
    test 283 Triangle7Tuple: 7
    test 284 Triangle8Tuple: Triangle8Tuple
    test 285 Triangle8Tuple: 8-Tuple C{(A, a, B, b, C, c, D, E)}
    test 286 Triangle8Tuple: 8
    test 287 Trilaterate5Tuple: Trilaterate5Tuple
    test 288 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 289 Trilaterate5Tuple: 5
    test 290 UtmUps2Tuple: UtmUps2Tuple
    test 291 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 292 UtmUps2Tuple: 2
    test 293 UtmUps5Tuple: UtmUps5Tuple
    test 294 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 295 UtmUps5Tuple: 5
    test 296 UtmUps8Tuple: UtmUps8Tuple
    test 297 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 298 UtmUps8Tuple: 8
    test 299 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 300 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 301 UtmUpsLatLon5Tuple: 5
    test 302 Vector2Tuple: Vector2Tuple
    test 303 Vector2Tuple: 2-Tuple C{(x, y)}
    test 304 Vector2Tuple: 2
    test 305 Vector3Tuple: Vector3Tuple
    test 306 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 307 Vector3Tuple: 3
    test 308 Vector4Tuple: Vector4Tuple
    test 309 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 310 Vector4Tuple: 4
    test 311 Shape2Tuple: Shape2Tuple
    test 312 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 313 Shape2Tuple: 2
    test 314 Collins5Tuple: Collins5Tuple
    test 315 Collins5Tuple: 5-Tuple C{(pointP, pointH, a, b, c)}
    test 316 Collins5Tuple: 5
    test 317 Survey3Tuple: Survey3Tuple
    test 318 Survey3Tuple: 3-Tuple C{(PA, PB, PC)}
    test 319 Survey3Tuple: 3
    test 320 Tienstra7Tuple: Tienstra7Tuple
    test 321 Tienstra7Tuple: 7-Tuple C{(pointP, A, B, C, a, b, c)}
    test 322 Tienstra7Tuple: 7
    test 323 TriAngle4Tuple: TriAngle4Tuple
    test 324 TriAngle4Tuple: 4-Tuple C{(radA, radB, radC, rIn)}
    test 325 TriAngle4Tuple: 4
    test 326 TriSide2Tuple: TriSide2Tuple
    test 327 TriSide2Tuple: 2-Tuple C{(a, radA)}
    test 328 TriSide2Tuple: 2
    test 329 TriSide4Tuple: TriSide4Tuple
    test 330 TriSide4Tuple: 4-Tuple C{(a, b, radC, d)}
    test 331 TriSide4Tuple: 4
    test 332 RhumbSolve7Tuple: RhumbSolve7Tuple
    test 333 RhumbSolve7Tuple: 7-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 334 RhumbSolve7Tuple: 7
    test 335 Rhumb8Tuple: Rhumb8Tuple
    test 336 Rhumb8Tuple: 8-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 337 Rhumb8Tuple: 8
    test 338 RhumbOrder2Tuple: RhumbOrder2Tuple
    test 339 RhumbOrder2Tuple: 2-Tuple C{(RAorder, TMorder)}
    test 340 RhumbOrder2Tuple: 2
    test 341 Helmert7Tuple: Helmert7Tuple
    test 342 Helmert7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 343 Helmert7Tuple: 7
    test 344 Helmert7Tuple: Helmert7Tuple
    test 345 Helmert7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 346 Helmert7Tuple: 7
    test 347 Circin6Tuple: Circin6Tuple
    test 348 Circin6Tuple: 6-Tuple C{(radius, center, deltas, cA, cB, cC)}
    test 349 Circin6Tuple: 6
    test 350 Circum3Tuple: Circum3Tuple
    test 351 Circum3Tuple: 3-Tuple C{(radius, center, deltas)}
    test 352 Circum3Tuple: 3
    test 353 Circum4Tuple: Circum4Tuple
    test 354 Circum4Tuple: 4-Tuple C{(radius, center, rank, residuals)}
    test 355 Circum4Tuple: 4
    test 356 Meeus2Tuple: Meeus2Tuple
    test 357 Meeus2Tuple: 2-Tuple C{(radius, Type)}
    test 358 Meeus2Tuple: 2
    test 359 Radii11Tuple: Radii11Tuple
    test 360 Radii11Tuple: 11-Tuple C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 361 Radii11Tuple: 11
    test 362 Soddy4Tuple: Soddy4Tuple
    test 363 Soddy4Tuple: 4-Tuple C{(radius, center, deltas, outer)}
    test 364 Soddy4Tuple: 4
    test 365 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 366 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 367 EasNorRadius3Tuple: 3

    testing albers.py (pygeodesy.named, 22.06.24)
    test 368 albers.py:339: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 369 albers.py:461: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 22.06.24)
    test 370 azimuthal.py:173: L{LatLon2Tuple}C{(lat, lon)}
    test 371 azimuthal.py:349: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 372 azimuthal.py:383: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 373 azimuthal.py:475: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 374 azimuthal.py:502: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 375 azimuthal.py:647: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 376 azimuthal.py:673: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 377 azimuthal.py:743: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 378 azimuthal.py:784: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 379 azimuthal.py:947: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 380 azimuthal.py:974: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 381 azimuthal.py:1004: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 382 azimuthal.py:1028: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 383 azimuthal.py:1060: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 384 azimuthal.py:1101: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 22.06.24)

    testing cartesianBase.py (pygeodesy.named, 22.06.24)
    test 385 cartesianBase.py:127: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 386 cartesianBase.py:177: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 387 cartesianBase.py:272: L{Vector4Tuple}C{(x, y, z, h)}
    test 388 cartesianBase.py:304: L{LatLon2Tuple}C{(lat, lon)}
    test 389 cartesianBase.py:310: L{LatLon3Tuple}C{(lat, lon, height)}
    test 390 cartesianBase.py:316: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 391 cartesianBase.py:379: L{PhiLam2Tuple}C{(phi, lam)}
    test 392 cartesianBase.py:385: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 393 cartesianBase.py:391: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 394 cartesianBase.py:451: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 395 cartesianBase.py:475: L{PhiLam2Tuple}C{(phi, lam)}
    test 396 cartesianBase.py:483: L{LatLon2Tuple}C{(lat, lon)}
    test 397 cartesianBase.py:491: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 398 cartesianBase.py:546: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 399 cartesianBase.py:566: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 400 cartesianBase.py:596: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 401 cartesianBase.py:624: L{Vector4Tuple}C{(x, y, z, h)}
    test 402 cartesianBase.py:685: L{Vector3Tuple}C{(x, y, z)}

    testing clipy.py (pygeodesy.named, 22.06.24)
    test 403 clipy.py:192: L{ClipCS4Tuple}C{(start, end, i, j)}
    test 404 clipy.py:258: L{ClipLB6Tuple}C{(start, end, i, fi, fj, j)}
    test 405 clipy.py:550: L{ClipSH3Tuple}C{(start, end, original)}

    testing css.py (pygeodesy.named, 22.06.24)
    test 406 css.py:139: L{EasNor2Tuple}C{(easting, northing)}
    test 407 css.py:157: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 408 css.py:177: L{EasNorAziRkEqu6Tuple}C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 409 css.py:265: L{LatLon2Tuple}C{(lat, lon)}
    test 410 css.py:331: L{LatLon2Tuple}C{(lat, lon)}
    test 411 css.py:358: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 412 css.py:527: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 413 css.py:622: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 22.06.24)
    test 414 datums.py:235: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 22.06.24)
    test 415 dms.py:783: L{LatLon2Tuple}C{(lat, lon)}
    test 416 dms.py:821: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 22.06.24)
    test 417 ecef.py:273: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 418 ecef.py:299: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 419 ecef.py:380: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 420 ecef.py:517: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 421 ecef.py:586: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 422 ecef.py:640: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 423 ecef.py:726: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 424 ecef.py:807: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 425 ecef.py:1066: L{LatLon2Tuple}C{(lat, lon)}
    test 426 ecef.py:1072: L{LatLon3Tuple}C{(lat, lon, height)}
    test 427 ecef.py:1078: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 428 ecef.py:1084: L{LatLon2Tuple}C{(lat, lon)}
    test 429 ecef.py:1115: L{PhiLam2Tuple}C{(phi, lam)}
    test 430 ecef.py:1121: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 431 ecef.py:1127: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 432 ecef.py:1133: L{PhiLam2Tuple}C{(phi, lam)}
    test 433 ecef.py:1151: L{Vector4Tuple}C{(x, y, z, h)}
    test 434 ecef.py:1191: L{LatLon3Tuple}C{(lat, lon, height)}
    test 435 ecef.py:1192: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 436 ecef.py:1220: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 437 ecef.py:1236: L{Vector3Tuple}C{(x, y, z)}
    test 438 ecef.py:1245: L{Vector3Tuple}C{(x, y, z)}
    test 439 ecef.py:1251: L{Vector4Tuple}C{(x, y, z, h)}

    testing elevations.py (pygeodesy.named, 22.06.24)
    test 440 elevations.py:145: L{Elevation2Tuple}C{(elevation, data_source)}
    test 441 elevations.py:202: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 22.06.24)
    test 442 ellipsoidalBase.py:287: L{Distance2Tuple}C{(distance, initial)}
    test 443 ellipsoidalBase.py:319: L{Elevation2Tuple}C{(elevation, data_source)}
    test 444 ellipsoidalBase.py:422: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 445 ellipsoidalBase.py:461: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 446 ellipsoidalBase.py:916: L{Vector3Tuple}C{(x, y, z)}
    test 447 ellipsoidalBase.py:943: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalBaseDI.py (pygeodesy.named, 22.06.24)
    test 448 ellipsoidalBaseDI.py:56: L{Bearing2Tuple}C{(initial, final)}
    test 449 ellipsoidalBaseDI.py:102: L{Destination2Tuple}C{(destination, final)}
    test 450 ellipsoidalBaseDI.py:110: L{Destination2Tuple}C{(destination, final)}
    test 451 ellipsoidalBaseDI.py:111: L{Destination3Tuple}C{(lat, lon, final)}
    test 452 ellipsoidalBaseDI.py:160: L{Distance3Tuple}C{(distance, initial, final)}
    test 453 ellipsoidalBaseDI.py:261: L{Distance3Tuple}C{(distance, initial, final)}
    test 454 ellipsoidalBaseDI.py:285: L{NearestOn8Tuple}C{(closest, distance, fi, j, start, end, initial, final)}

    testing ellipsoidalExact.py (pygeodesy.named, 22.06.24)
    test 455 ellipsoidalExact.py:40: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 456 ellipsoidalExact.py:80: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 457 ellipsoidalExact.py:144: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 458 ellipsoidalExact.py:145: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 459 ellipsoidalExact.py:195: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 460 ellipsoidalExact.py:270: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalGeodSolve.py (pygeodesy.named, 22.06.24)
    test 461 ellipsoidalGeodSolve.py:41: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 462 ellipsoidalGeodSolve.py:80: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 463 ellipsoidalGeodSolve.py:140: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 464 ellipsoidalGeodSolve.py:141: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 465 ellipsoidalGeodSolve.py:191: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 466 ellipsoidalGeodSolve.py:266: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalKarney.py (pygeodesy.named, 22.06.24)
    test 467 ellipsoidalKarney.py:60: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 468 ellipsoidalKarney.py:111: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 469 ellipsoidalKarney.py:182: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 470 ellipsoidalKarney.py:183: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 471 ellipsoidalKarney.py:233: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 472 ellipsoidalKarney.py:315: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 22.06.24)
    test 473 ellipsoidalNvector.py:70: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 474 ellipsoidalNvector.py:87: L{Vector4Tuple}C{(x, y, z, h)}
    test 475 ellipsoidalNvector.py:426: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 476 ellipsoidalNvector.py:443: L{Vector4Tuple}C{(x, y, z, h)}
    test 477 ellipsoidalNvector.py:544: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 478 ellipsoidalNvector.py:568: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 479 ellipsoidalNvector.py:609: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 480 ellipsoidalNvector.py:649: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 481 ellipsoidalNvector.py:705: L{Ned3Tuple}C{(north, east, down)}  FAILED, KNOWN, expected signature

    testing ellipsoidalVincenty.py (pygeodesy.named, 22.06.24)
    test 482 ellipsoidalVincenty.py:113: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 483 ellipsoidalVincenty.py:199: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 484 ellipsoidalVincenty.py:423: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 485 ellipsoidalVincenty.py:424: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 486 ellipsoidalVincenty.py:474: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 487 ellipsoidalVincenty.py:523: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 22.06.24)
    test 488 ellipsoids.py:148: L{a_f2Tuple}C{(a, f)}
    test 489 ellipsoids.py:659: L{Circle4Tuple}C{(radius, height, lat, beta)}
    test 490 ellipsoids.py:721: L{Distance2Tuple}C{(distance, initial)}
    test 491 ellipsoids.py:1041: L{Vector4Tuple}C{(x, y, z, h)}
    test 492 ellipsoids.py:1490: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 493 ellipsoids.py:1509: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 22.06.24)
    test 494 elliptic.py:693: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 22.06.24)
    test 495 epsg.py:147: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 22.06.24)

    testing etm.py (pygeodesy.named, 22.06.24)
    test 496 etm.py:220: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 497 etm.py:491: L{Forward4Tuple}C{(easting, northing, convergence, scale)}
    test 498 etm.py:710: L{Reverse4Tuple}C{(lat, lon, convergence, scale)}
    test 499 etm.py:1061: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 500 etm.py:1099: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}

    testing fmath.py (pygeodesy.named, 22.06.24)

    testing formy.py (pygeodesy.named, 22.06.24)
    test 501 formy.py:49: L{LatLon2Tuple}C{(lat, lon)}
    test 502 formy.py:63: L{PhiLam2Tuple}C{(phi, lam)}
    test 503 formy.py:444: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 504 formy.py:1086: L{LatLon2Tuple}C{(lat, lon)}
    test 505 formy.py:1180: L{Vector3Tuple}C{(x, y, z)}
    test 506 formy.py:1198: L{LatLon2Tuple}C{(lat, lon)}
    test 507 formy.py:1214: L{PhiLam2Tuple}C{(phi, lam)}
    test 508 formy.py:1267: L{Vector3Tuple}C{(x, y, z)}
    test 509 formy.py:1299: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 22.06.24)
    test 510 frechet.py:202: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 511 frechet.py:332: L{PhiLam2Tuple}C{(phi, lam)}
    test 512 frechet.py:977: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing fstats.py (pygeodesy.named, 22.06.24)

    testing fsums.py (pygeodesy.named, 22.06.24)
    test 513 fsums.py:710: L{Fsum2Tuple}C{(fsum, residual)}
    test 514 fsums.py:919: L{Fsum2Tuple}C{(fsum, residual)}
    test 515 fsums.py:1184: L{Fsum2Tuple}C{(fsum, residual)}

    testing gars.py (pygeodesy.named, 22.06.24)
    test 516 gars.py:211: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geodsolve.py (pygeodesy.named, 22.06.24)
    test 517 geodsolve.py:144: L{Destination3Tuple}C{(lat, lon, final)}
    test 518 geodsolve.py:154: L{Distance3Tuple}C{(distance, initial, final)}

    testing geohash.py (pygeodesy.named, 22.06.24)
    test 519 geohash.py:373: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 520 geohash.py:807: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 521 geohash.py:240: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 522 geohash.py:241: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 523 geohash.py:366: L{LatLon2Tuple}C{(lat, lon)}
    test 524 geohash.py:383: L{PhiLam2Tuple}C{(phi, lam)}
    test 525 geohash.py:396: L{LatLon2Tuple}C{(lat, lon)}
    test 526 geohash.py:412: L{LatLon2Tuple}C{(lat, lon)}
    test 527 geohash.py:524: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 528 geohash.py:525: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 529 geohash.py:614: L{LatLon2Tuple}C{(lat, lon)}
    test 530 geohash.py:633: L{LatLon2Tuple}C{(lat, lon)}
    test 531 geohash.py:867: L{Resolutions2Tuple}C{(res1, res2)}
    test 532 geohash.py:895: L{LatLon2Tuple}C{(lat, lon)}

    testing geoids.py (pygeodesy.named, 22.06.24)
    test 533 geoids.py:297: L{LatLon3Tuple}C{(lat, lon, height)}
    test 534 geoids.py:408: L{LatLon3Tuple}C{(lat, lon, height)}
    test 535 geoids.py:467: L{LatLon3Tuple}C{(lat, lon, height)}
    test 536 geoids.py:486: L{LatLon3Tuple}C{(lat, lon, height)}
    test 537 geoids.py:508: L{LatLon3Tuple}C{(lat, lon, height)}
    test 538 geoids.py:649: L{LatLon3Tuple}C{(lat, lon, height)}
    test 539 geoids.py:668: L{LatLon3Tuple}C{(lat, lon, height)}
    test 540 geoids.py:1100: L{LatLon3Tuple}C{(lat, lon, height)}
    test 541 geoids.py:1154: L{LatLon3Tuple}C{(lat, lon, height)}
    test 542 geoids.py:1640: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 22.06.24)
    test 543 hausdorff.py:171: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 544 hausdorff.py:228: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 545 hausdorff.py:287: L{PhiLam2Tuple}C{(phi, lam)}
    test 546 hausdorff.py:993: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 22.06.24)

    testing interns.py (pygeodesy.named, 22.06.24)

    testing iters.py (pygeodesy.named, 22.06.24)
    test 547 iters.py:348: L{Point3Tuple}C{(x, y, ll)}
    test 548 iters.py:473: L{Points2Tuple}C{(number, points)}

    testing karney.py (pygeodesy.named, 22.06.24)
    test 549 karney.py:372: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 550 karney.py:384: L{GeodSolve12Tuple}C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 551 karney.py:395: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 552 karney.py:413: L{Rhumb8Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 553 karney.py:423: L{RhumbSolve7Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 554 karney.py:530: L{Destination3Tuple}C{(lat, lon, final)}
    test 555 karney.py:589: L{Distance3Tuple}C{(distance, initial, final)}

    testing ktm.py (pygeodesy.named, 22.06.24)
    test 556 ktm.py:203: L{Forward4Tuple}C{(easting, northing, convergence, scale)}
    test 557 ktm.py:319: L{Reverse4Tuple}C{(lat, lon, convergence, scale)}

    testing latlonBase.py (pygeodesy.named, 22.06.24)
    test 558 latlonBase.py:123: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 559 latlonBase.py:169: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 560 latlonBase.py:186: L{LatLon3Tuple}C{(lat, lon, height)}
    test 561 latlonBase.py:212: L{Circum3Tuple}C{(radius, center, deltas)}
    test 562 latlonBase.py:215: L{LatLon3Tuple}C{(lat, lon, height)}
    test 563 latlonBase.py:232: L{LatLon3Tuple}C{(lat, lon, height)}
    test 564 latlonBase.py:251: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 565 latlonBase.py:388: L{LatLon3Tuple}C{(lat, lon, height)}
    test 566 latlonBase.py:389: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 567 latlonBase.py:651: L{Vector4Tuple}C{(x, y, z, h)}
    test 568 latlonBase.py:776: L{LatLon2Tuple}C{(lat, lon)}
    test 569 latlonBase.py:815: L{LatLon2Tuple}C{(lat, lon)}
    test 570 latlonBase.py:833: L{LatLon3Tuple}C{(lat, lon, height)}
    test 571 latlonBase.py:875: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 572 latlonBase.py:927: L{PhiLam2Tuple}C{(phi, lam)}
    test 573 latlonBase.py:937: L{PhiLam2Tuple}C{(phi, lam)}
    test 574 latlonBase.py:948: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 575 latlonBase.py:965: L{Points2Tuple}C{(number, points)}
    test 576 latlonBase.py:994: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 577 latlonBase.py:1202: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 578 latlonBase.py:1244: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 579 latlonBase.py:1269: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 580 latlonBase.py:1298: L{Vector4Tuple}C{(x, y, z, h)}
    test 581 latlonBase.py:1351: L{Vector3Tuple}C{(x, y, z)}
    test 582 latlonBase.py:1417: L{Vector3Tuple}C{(x, y, z)}
    test 583 latlonBase.py:1426: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 22.06.24)

    testing lcc.py (pygeodesy.named, 22.06.24)
    test 584 lcc.py:172: L{LatLon2Tuple}C{(lat, lon)}
    test 585 lcc.py:226: L{PhiLam2Tuple}C{(phi, lam)}
    test 586 lcc.py:492: L{LatLon3Tuple}C{(lat, lon, height)}
    test 587 lcc.py:498: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 588 lcc.py:517: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 589 lcc.py:523: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 590 lcc.py:534: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 591 lcc.py:561: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 592 lcc.py:641: L{EasNor3Tuple}C{(easting, northing, height)}

    testing ltp.py (pygeodesy.named, 22.06.24)
    test 593 ltp.py:162: L{Vector3Tuple}C{(x, y, z)}
    test 594 ltp.py:280: L{Footprint5Tuple}C{(center, upperleft, upperight, loweright, lowerleft)}
    test 595 ltp.py:470: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 596 ltp.py:500: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 597 ltp.py:538: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 598 ltp.py:595: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 599 ltp.py:688: L{Vector3Tuple}C{(x, y, z)}

    testing ltpTuples.py (pygeodesy.named, 22.06.24)
    test 600 ltpTuples.py:231: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 601 ltpTuples.py:251: L{Vector3Tuple}C{(x, y, z)}
    test 602 ltpTuples.py:495: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 603 ltpTuples.py:515: L{Vector3Tuple}C{(x, y, z)}
    test 604 ltpTuples.py:707: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 605 ltpTuples.py:724: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 606 ltpTuples.py:747: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 607 ltpTuples.py:762: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 608 ltpTuples.py:784: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 609 ltpTuples.py:801: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 610 ltpTuples.py:842: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 611 ltpTuples.py:860: L{Vector3Tuple}C{(x, y, z)}
    test 612 ltpTuples.py:1010: L{LatLon2Tuple}C{(lat, lon)}
    test 613 ltpTuples.py:1016: L{LatLon3Tuple}C{(lat, lon, height)}
    test 614 ltpTuples.py:1034: L{PhiLam2Tuple}C{(phi, lam)}
    test 615 ltpTuples.py:1040: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 616 ltpTuples.py:1058: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 617 ltpTuples.py:1071: L{Vector4Tuple}C{(x, y, z, h)}
    test 618 ltpTuples.py:1086: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 619 ltpTuples.py:1099: L{LatLon3Tuple}C{(lat, lon, height)}
    test 620 ltpTuples.py:1100: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 621 ltpTuples.py:1116: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 622 ltpTuples.py:1128: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 623 ltpTuples.py:1140: L{Vector3Tuple}C{(x, y, z)}

    testing mgrs.py (pygeodesy.named, 22.06.24)
    test 624 mgrs.py:183: L{EasNor2Tuple}C{(easting, northing)}
    test 625 mgrs.py:243: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 626 mgrs.py:299: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 627 mgrs.py:370: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}
    test 628 mgrs.py:396: L{Mgrs4Tuple}C{(zone, digraph, easting, northing)}
    test 629 mgrs.py:460: L{Mgrs6Tuple}C{(zone, digraph, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 22.06.24)

    testing namedTuples.py (pygeodesy.named, 22.06.24)
    test 630 namedTuples.py:198: L{LatLon3Tuple}C{(lat, lon, height)}
    test 631 namedTuples.py:210: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 632 namedTuples.py:231: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 633 namedTuples.py:297: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 634 namedTuples.py:328: L{LatLon3Tuple}C{(lat, lon, height)}
    test 635 namedTuples.py:400: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 636 namedTuples.py:412: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 637 namedTuples.py:438: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 638 namedTuples.py:602: L{Vector3Tuple}C{(x, y, z)}
    test 639 namedTuples.py:621: L{Vector4Tuple}C{(x, y, z, h)}
    test 640 namedTuples.py:644: L{Vector3Tuple}C{(x, y, z)}

    testing nvectorBase.py (pygeodesy.named, 22.06.24)
    test 641 nvectorBase.py:165: L{LatLon2Tuple}C{(lat, lon)}
    test 642 nvectorBase.py:171: L{LatLon3Tuple}C{(lat, lon, height)}
    test 643 nvectorBase.py:177: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 644 nvectorBase.py:195: L{PhiLam2Tuple}C{(phi, lam)}
    test 645 nvectorBase.py:201: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 646 nvectorBase.py:207: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 647 nvectorBase.py:215: L{PhiLam2Tuple}C{(phi, lam)}
    test 648 nvectorBase.py:226: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 649 nvectorBase.py:244: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 650 nvectorBase.py:283: L{LatLon2Tuple}C{(lat, lon)}
    test 651 nvectorBase.py:294: L{LatLon3Tuple}C{(lat, lon, height)}
    test 652 nvectorBase.py:313: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 653 nvectorBase.py:388: L{Vector4Tuple}C{(x, y, z, h)}
    test 654 nvectorBase.py:465: L{Vector4Tuple}C{(x, y, z, h)}
    test 655 nvectorBase.py:540: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 656 nvectorBase.py:582: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 22.06.24)
    test 657 osgr.py:198: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 658 osgr.py:368: L{EasNor2Tuple}C{(easting, northing)}
    test 659 osgr.py:452: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 22.06.24)
    test 660 points.py:242: L{LatLon2Tuple}C{(lat, lon)}
    test 661 points.py:248: L{LatLon3Tuple}C{(lat, lon, height)}
    test 662 points.py:278: L{PhiLam2Tuple}C{(phi, lam)}
    test 663 points.py:284: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 664 points.py:303: L{Points2Tuple}C{(number, points)}
    test 665 points.py:342: L{Vector4Tuple}C{(x, y, z, h)}
    test 666 points.py:785: L{Shape2Tuple}C{(nrows, ncols)}
    test 667 points.py:986: L{Point3Tuple}C{(x, y, ll)}
    test 668 points.py:1214: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 669 points.py:1216: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 670 points.py:1256: L{LatLon2Tuple}C{(lat, lon)}
    test 671 points.py:1323: L{LatLon2Tuple}C{(lat, lon)}
    test 672 points.py:1697: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 673 points.py:1699: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing props.py (pygeodesy.named, 22.06.24)

    testing resections.py (pygeodesy.named, 22.06.24)
    test 674 resections.py:212: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 675 resections.py:376: L{Survey3Tuple}C{(PA, PB, PC)}
    test 676 resections.py:443: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 677 resections.py:569: L{TriAngle4Tuple}C{(radA, radB, radC, rIn)}
    test 678 resections.py:670: L{TriSide2Tuple}C{(a, radA)}
    test 679 resections.py:717: L{TriSide4Tuple}C{(a, b, radC, d)}
    test 680 resections.py:758: L{Survey3Tuple}C{(PA, PB, PC)}

    testing rhumbsolve.py (pygeodesy.named, 22.06.24)
    test 681 rhumbsolve.py:128: L{Destination3Tuple}C{(lat, lon, final)}
    test 682 rhumbsolve.py:157: L{Distance3Tuple}C{(distance, initial, final)}

    testing rhumbx.py (pygeodesy.named, 22.06.24)
    test 683 rhumbx.py:348: L{Distance3Tuple}C{(distance, initial, final)}
    test 684 rhumbx.py:401: L{RhumbOrder2Tuple}C{(RAorder, TMorder)}
    test 685 rhumbx.py:540: L{Distance2Tuple}C{(distance, initial)}
    test 686 rhumbx.py:625: L{LatLon2Tuple}C{(lat, lon)}
    test 687 rhumbx.py:644: L{NearestOn4Tuple}C{(lat, lon, distance, normal)}
    test 688 rhumbx.py:850: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 689 rhumbx.py:867: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}

    testing simplify.py (pygeodesy.named, 22.06.24)

    testing solveBase.py (pygeodesy.named, 22.06.24)

    testing sphericalBase.py (pygeodesy.named, 22.06.24)
    test 690 sphericalBase.py:171: L{Bearing2Tuple}C{(initial, final)}
    test 691 sphericalBase.py:516: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 22.06.24)
    test 692 sphericalNvector.py:78: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 693 sphericalNvector.py:95: L{Vector4Tuple}C{(x, y, z, h)}
    test 694 sphericalNvector.py:665: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 695 sphericalNvector.py:701: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 696 sphericalNvector.py:718: L{Vector4Tuple}C{(x, y, z, h)}
    test 697 sphericalNvector.py:760: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 698 sphericalNvector.py:777: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 699 sphericalNvector.py:1012: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 22.06.24)
    test 700 sphericalTrigonometry.py:107: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 701 sphericalTrigonometry.py:686: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 702 sphericalTrigonometry.py:724: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 703 sphericalTrigonometry.py:756: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 704 sphericalTrigonometry.py:757: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 705 sphericalTrigonometry.py:791: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 706 sphericalTrigonometry.py:1026: L{LatLon3Tuple}C{(lat, lon, height)}
    test 707 sphericalTrigonometry.py:1079: L{LatLon3Tuple}C{(lat, lon, height)}
    test 708 sphericalTrigonometry.py:1193: L{LatLon3Tuple}C{(lat, lon, height)}
    test 709 sphericalTrigonometry.py:1218: L{LatLon2Tuple}C{(lat, lon)}
    test 710 sphericalTrigonometry.py:1243: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 711 sphericalTrigonometry.py:1244: L{LatLon3Tuple}C{(lat, lon, height)}
    test 712 sphericalTrigonometry.py:1326: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 713 sphericalTrigonometry.py:1331: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 714 sphericalTrigonometry.py:1357: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}

    testing streprs.py (pygeodesy.named, 22.06.24)

    testing trf.py (pygeodesy.named, 22.06.24)

    testing units.py (pygeodesy.named, 22.06.24)

    testing ups.py (pygeodesy.named, 22.06.24)
    test 715 ups.py:151: L{EasNor2Tuple}C{(easting, northing)}
    test 716 ups.py:221: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 717 ups.py:379: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 718 ups.py:417: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 719 ups.py:499: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 22.06.24)
    test 720 utily.py:141: L{Circle4Tuple}C{(radius, height, lat, beta)}

    testing utm.py (pygeodesy.named, 22.06.24)
    test 721 utm.py:357: L{EasNor2Tuple}C{(easting, northing)}
    test 722 utm.py:432: L{LatLonDatum5Tuple}C{(lat, lon, datum, convergence, scale)}
    test 723 utm.py:679: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 724 utm.py:723: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 725 utm.py:818: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 22.06.24)
    test 726 utmups.py:87: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 727 utmups.py:128: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, convergence, scale)}
    test 728 utmups.py:276: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 22.06.24)
    test 729 utmupsBase.py:237: L{EasNor2Tuple}C{(easting, northing)}
    test 730 utmupsBase.py:247: L{EasNor2Tuple}C{(easting, northing)}
    test 731 utmupsBase.py:332: L{EasNor2Tuple}C{(easting, northing)}

    testing vector2d.py (pygeodesy.named, 22.06.24)
    test 732 vector2d.py:133: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 733 vector2d.py:198: L{Circum3Tuple}C{(radius, center, deltas)}
    test 734 vector2d.py:246: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 735 vector2d.py:313: L{Meeus2Tuple}C{(radius, Type)}
    test 736 vector2d.py:427: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 737 vector2d.py:503: L{Soddy4Tuple}C{(radius, center, deltas, outer)}

    testing vector3d.py (pygeodesy.named, 22.06.24)
    test 738 vector3d.py:73: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 739 vector3d.py:107: L{Circum3Tuple}C{(radius, center, deltas)}
    test 740 vector3d.py:133: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 741 vector3d.py:180: L{Meeus2Tuple}C{(radius, Type)}
    test 742 vector3d.py:229: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 743 vector3d.py:265: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 744 vector3d.py:292: L{Soddy4Tuple}C{(radius, center, deltas, outer)}
    test 745 vector3d.py:506: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 746 vector3d.py:733: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 747 vector3d.py:805: L{Vector3Tuple}C{(x, y, z)}
    test 748 vector3d.py:829: L{Vector3Tuple}C{(x, y, z)}
    test 749 vector3d.py:864: L{Vector2Tuple}C{(x, y)}

    testing vector3dBase.py (pygeodesy.named, 22.06.24)
    test 750 vector3dBase.py:757: L{PhiLam2Tuple}C{(phi, lam)}
    test 751 vector3dBase.py:765: L{LatLon2Tuple}C{(lat, lon)}
    test 752 vector3dBase.py:831: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 22.06.24)
    test 753 webmercator.py:95: L{LatLon2Tuple}C{(lat, lon)}
    test 754 webmercator.py:106: L{LatLon2Tuple}C{(lat, lon)}
    test 755 webmercator.py:152: L{PhiLam2Tuple}C{(phi, lam)}
    test 756 webmercator.py:167: L{LatLon2Tuple}C{(lat, lon)}
    test 757 webmercator.py:279: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 758 webmercator.py:320: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 22.06.24)
    test 759 wgrs.py:220: L{LatLon3Tuple}C{(lat, lon, height)}
    test 760 wgrs.py:240: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 761 wgrs.py:293: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing xtend (pygeodesy.namedTuples, 22.06.30)
    test 762 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 763 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 764 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 765 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 766 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 767 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 768 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 769 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 770 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 771 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 22.06.24)
    test 772 nd.dict: test(1=1, 2=2)
    test 773 nd.name: test
    test 774 nd.dict: test(1=1, 2=2)
    test 775 nd.name: test
    test 776 nd.kwds: test(one=1, two=2)
    test 777 nd.name: test
    test 778 nd.dict: test(1=1, 2=2)
    test 779 nd.name: test
    test 780 nd.list: test(1=1, 2=2)
    test 781 nd.name: test
    test 782 nd.updated: test(1=1, 2=2, name='kwds')
    test 783 nd.name: test

    testing coverage (pygeodesy.named, 22.06.24)
    test 784 nd.name: name
    test 785 nd.named: name
    test 786 nd.named: Neighbors8Dict
    test 787 nd.name: test
    test 788 nd.test: test
    test 789 nd.test: None
    test 790 nd.classnaming: False
    test 791 nd.classname: Neighbors8Dict
    test 792 nd.named2: Neighbors8Dict 'test'
    test 793 nd.classnaming: True
    test 794 nd.classname: Neighbors8Dict
    test 795 nd.named2: Neighbors8Dict 'test'
    test 796 classnaming: False
    test 797 classnaming: True

    testing unregister (pygeodesy.named, 22.06.24)
    test 798 Conics: 1
    test 799 Conics: 8
    test 800 Conics.WRF_Lb.unregister: None
    test 801 Conics.Be08Lb.unregister: None
    test 802 Conics.Be72Lb.unregister: None
    test 803 Conics.Fr93Lb.unregister: None
    test 804 Conics.MaNLb.unregister: None
    test 805 Conics.MxLb.unregister: None
    test 806 Conics.PyT_Lb.unregister: None
    test 807 Conics.USA_Lb.unregister: None
    test 808 Conics: 0
    test 809 Datums: 6
    test 810 Datums: 18
    test 811 Datums.unregister(WGS84): None
    test 812 Datums.unregister(OSGB36): None
    test 813 Datums.unregister(Sphere): None
    test 814 Datums.unregister(GRS80): None
    test 815 Datums.unregister(NAD83): None
    test 816 Datums.unregister(NTF): None
    test 817 Datums.unregister(BD72): None
    test 818 Datums.unregister(DHDN): None
    test 819 Datums.unregister(ED50): None
    test 820 Datums.unregister(GDA2020): None
    test 821 Datums.unregister(Irl1975): None
    test 822 Datums.unregister(Krassovski1940): None
    test 823 Datums.unregister(Krassowsky1940): None
    test 824 Datums.unregister(MGI): None
    test 825 Datums.unregister(NAD27): None
    test 826 Datums.unregister(Potsdam): None
    test 827 Datums.unregister(TokyoJapan): None
    test 828 Datums.unregister(WGS72): None
    test 829 Datums: 0
    test 830 RefFrames: 0
    test 831 RefFrames: 15
    test 832 RefFrames.ETRF2000.unregister: None
    test 833 RefFrames.GDA2020.unregister: None
    test 834 RefFrames.GDA94.unregister: None
    test 835 RefFrames.ITRF2000.unregister: None
    test 836 RefFrames.ITRF2005.unregister: None
    test 837 RefFrames.ITRF2008.unregister: None
    test 838 RefFrames.ITRF2014.unregister: None
    test 839 RefFrames.ITRF90.unregister: None
    test 840 RefFrames.ITRF91.unregister: None
    test 841 RefFrames.ITRF93.unregister: None
    test 842 RefFrames.NAD83.unregister: None
    test 843 RefFrames.WGS84.unregister: None
    test 844 RefFrames.WGS84g1150.unregister: None
    test 845 RefFrames.WGS84g1674.unregister: None
    test 846 RefFrames.WGS84g1762.unregister: None
    test 847 RefFrames: 0
    test 848 Ellipsoids: 12
    test 849 Ellipsoids: 44
    test 850 Ellipsoids.WGS84.unregister: None
    test 851 Ellipsoids.Airy1830.unregister: None
    test 852 Ellipsoids.Sphere.unregister: None
    test 853 Ellipsoids.GRS80.unregister: None
    test 854 Ellipsoids.Clarke1880IGN.unregister: None
    test 855 Ellipsoids.Intl1924.unregister: None
    test 856 Ellipsoids.Bessel1841.unregister: None
    test 857 Ellipsoids.AiryModified.unregister: None
    test 858 Ellipsoids.Krassovski1940.unregister: None
    test 859 Ellipsoids.Krassowsky1940.unregister: None
    test 860 Ellipsoids.Clarke1866.unregister: None
    test 861 Ellipsoids.WGS72.unregister: None
    test 862 Ellipsoids.Australia1966.unregister: None
    test 863 Ellipsoids.ATS1977.unregister: None
    test 864 Ellipsoids.BesselModified.unregister: None
    test 865 Ellipsoids.Clarke1880.unregister: None
    test 866 Ellipsoids.Clarke1880Mod.unregister: None
    test 867 Ellipsoids.CPM1799.unregister: None
    test 868 Ellipsoids.Delambre1810.unregister: None
    test 869 Ellipsoids.Engelis1985.unregister: None
    test 870 Ellipsoids.Everest1969.unregister: None
    test 871 Ellipsoids.Everest1975.unregister: None
    test 872 Ellipsoids.Fisher1968.unregister: None
    test 873 Ellipsoids.GEM10C.unregister: None
    test 874 Ellipsoids.GRS67.unregister: None
    test 875 Ellipsoids.Helmert1906.unregister: None
    test 876 Ellipsoids.IERS1989.unregister: None
    test 877 Ellipsoids.IERS1992TOPEX.unregister: None
    test 878 Ellipsoids.IERS2003.unregister: None
    test 879 Ellipsoids.Intl1967.unregister: None
    test 880 Ellipsoids.Maupertuis1738.unregister: None
    test 881 Ellipsoids.Mercury1960.unregister: None
    test 882 Ellipsoids.Mercury1968Mod.unregister: None
    test 883 Ellipsoids.NWL1965.unregister: None
    test 884 Ellipsoids.OSU86F.unregister: None
    test 885 Ellipsoids.OSU91A.unregister: None
    test 886 Ellipsoids.Plessis1817.unregister: None
    test 887 Ellipsoids.SGS85.unregister: None
    test 888 Ellipsoids.SoAmerican1969.unregister: None
    test 889 Ellipsoids.Struve1860.unregister: None
    test 890 Ellipsoids.WGS60.unregister: None
    test 891 Ellipsoids.WGS66.unregister: None
    test 892 Ellipsoids.SphereAuthalic.unregister: None
    test 893 Ellipsoids.SpherePopular.unregister: None
    test 894 Ellipsoids: 0
    test 895 Transforms: 15
    test 896 Transforms: 18
    test 897 Transforms.WGS84.unregister: None
    test 898 Transforms.OSGB36.unregister: None
    test 899 Transforms.NAD83.unregister: None
    test 900 Transforms.NTF.unregister: None
    test 901 Transforms.BD72.unregister: None
    test 902 Transforms.DHDN.unregister: None
    test 903 Transforms.ED50.unregister: None
    test 904 Transforms.Irl1975.unregister: None
    test 905 Transforms.Krassovski1940.unregister: None
    test 906 Transforms.Krassowsky1940.unregister: None
    test 907 Transforms.MGI.unregister: None
    test 908 Transforms.NAD27.unregister: None
    test 909 Transforms.Bessel1841.unregister: None
    test 910 Transforms.TokyoJapan.unregister: None
    test 911 Transforms.WGS72.unregister: None
    test 912 Transforms.Clarke1866.unregister: None
    test 913 Transforms.Identity.unregister: None
    test 914 Transforms.Irl1965.unregister: None
    test 915 Transforms: 0
    test 916 nameof: KsOrder

    6 of 916 testNamed.py tests (0.7%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 29.933 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testNamedTuples.py

    testing testNamedTuples.py 22.05.27
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Pass, datum=_Pass)
    test 3 pygeodesy.albers.Albers7Tuple.x: 0.5
    test 4 pygeodesy.albers.Albers7Tuple.y: 0.5
    test 5 pygeodesy.albers.Albers7Tuple.lat: 0.5
    test 6 pygeodesy.albers.Albers7Tuple.lon: 0.5
    test 7 pygeodesy.albers.Albers7Tuple.gamma: 0.5
    test 8 pygeodesy.albers.Albers7Tuple.scale: 0.5
    test 9 pygeodesy.albers.Albers7Tuple.datum: 0.5
    test 10 pygeodesy.albers.Albers7Tuple._validated: True
    test 11 pygeodesy.albers.Albers7Tuple._validated: True
    test 12 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 13 pygeodesy.azimuthal: Azimuthal7Tuple(x=Easting, y=Northing, lat=Lat_, lon=Lon_, azimuth=Bearing, scale=Scalar, datum=_Pass)
    test 14 pygeodesy.azimuthal.Azimuthal7Tuple.x: 0.5
    test 15 pygeodesy.azimuthal.Azimuthal7Tuple.y: 0.5
    test 16 pygeodesy.azimuthal.Azimuthal7Tuple.lat: 0.5
    test 17 pygeodesy.azimuthal.Azimuthal7Tuple.lon: 0.5
    test 18 pygeodesy.azimuthal.Azimuthal7Tuple.azimuth: 0.5
    test 19 pygeodesy.azimuthal.Azimuthal7Tuple.scale: 0.5
    test 20 pygeodesy.azimuthal.Azimuthal7Tuple.datum: 0.5
    test 21 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
    test 22 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
    test 23 pygeodesy.clipy: ClipCS4Tuple(start=0.5, end=0.5, i=0, j=0)
    test 24 pygeodesy.clipy: ClipCS4Tuple(start=_Pass, end=_Pass, i=Number_, j=Number_)
    test 25 pygeodesy.clipy.ClipCS4Tuple.start: 0.5
    test 26 pygeodesy.clipy.ClipCS4Tuple.end: 0.5
    test 27 pygeodesy.clipy.ClipCS4Tuple.i: 0.5
    test 28 pygeodesy.clipy.ClipCS4Tuple.j: 0.5
    test 29 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 30 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 31 pygeodesy.clipy: ClipLB6Tuple(start=0.5, end=0.5, i=0, fi=0.5, fj=0.5, j=0)
    test 32 pygeodesy.clipy: ClipLB6Tuple(start=_Pass, end=_Pass, i=Number_, fi=_Pass, fj=_Pass, j=Number_)
    test 33 pygeodesy.clipy.ClipLB6Tuple.start: 0.5
    test 34 pygeodesy.clipy.ClipLB6Tuple.end: 0.5
    test 35 pygeodesy.clipy.ClipLB6Tuple.i: 0.5
    test 36 pygeodesy.clipy.ClipLB6Tuple.fi: 0.5
    test 37 pygeodesy.clipy.ClipLB6Tuple.fj: 0.5
    test 38 pygeodesy.clipy.ClipLB6Tuple.j: 0.5
    test 39 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 40 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 41 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 42 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 43 pygeodesy.clipy.ClipSH3Tuple.start: 0.5
    test 44 pygeodesy.clipy.ClipSH3Tuple.end: 0.5
    test 45 pygeodesy.clipy.ClipSH3Tuple.original: 0.5
    test 46 pygeodesy.clipy.ClipSH3Tuple._validated: True
    test 47 pygeodesy.clipy.ClipSH3Tuple._validated: True
    test 48 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 49 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar)
    test 50 pygeodesy.css.EasNorAziRk4Tuple.easting: 0.5
    test 51 pygeodesy.css.EasNorAziRk4Tuple.northing: 0.5
    test 52 pygeodesy.css.EasNorAziRk4Tuple.azimuth: 0.5
    test 53 pygeodesy.css.EasNorAziRk4Tuple.reciprocal: 0.5
    test 54 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 55 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 56 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5, equatorarc=0.5, equatorazimuth=0.5)
    test 57 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar, equatorarc=Degrees, equatorazimuth=Bearing)
    test 58 pygeodesy.css.EasNorAziRkEqu6Tuple.easting: 0.5
    test 59 pygeodesy.css.EasNorAziRkEqu6Tuple.northing: 0.5
    test 60 pygeodesy.css.EasNorAziRkEqu6Tuple.azimuth: 0.5
    test 61 pygeodesy.css.EasNorAziRkEqu6Tuple.reciprocal: 0.5
    test 62 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorarc: 0.5
    test 63 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorazimuth: 0.5
    test 64 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 65 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 66 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 67 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Bearing, reciprocal=Scalar)
    test 68 pygeodesy.css.LatLonAziRk4Tuple.lat: 0.5
    test 69 pygeodesy.css.LatLonAziRk4Tuple.lon: 0.5
    test 70 pygeodesy.css.LatLonAziRk4Tuple.azimuth: 0.5
    test 71 pygeodesy.css.LatLonAziRk4Tuple.reciprocal: 0.5
    test 72 pygeodesy.css.LatLonAziRk4Tuple._validated: True
    test 73 pygeodesy.css.LatLonAziRk4Tuple._validated: True
    test 74 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 75 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 76 pygeodesy.ecef.Ecef9Tuple.x: 0.5
    test 77 pygeodesy.ecef.Ecef9Tuple.y: 0.5
    test 78 pygeodesy.ecef.Ecef9Tuple.z: 0.5
    test 79 pygeodesy.ecef.Ecef9Tuple.lat: 0.5
    test 80 pygeodesy.ecef.Ecef9Tuple.lon: 0.5
    test 81 pygeodesy.ecef.Ecef9Tuple.height: 0.5
    test 82 pygeodesy.ecef.Ecef9Tuple.C: 0.5
    test 83 pygeodesy.ecef.Ecef9Tuple.M: 0.5
    test 84 pygeodesy.ecef.Ecef9Tuple.datum: 0.5
    test 85 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 86 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 87 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 88 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 89 pygeodesy.ecef.EcefMatrix._0_0_: 0.5
    test 90 pygeodesy.ecef.EcefMatrix._0_1_: 0.5
    test 91 pygeodesy.ecef.EcefMatrix._0_2_: 0.5
    test 92 pygeodesy.ecef.EcefMatrix._1_0_: 0.5
    test 93 pygeodesy.ecef.EcefMatrix._1_1_: 0.5
    test 94 pygeodesy.ecef.EcefMatrix._1_2_: 0.5
    test 95 pygeodesy.ecef.EcefMatrix._2_0_: 0.5
    test 96 pygeodesy.ecef.EcefMatrix._2_1_: 0.5
    test 97 pygeodesy.ecef.EcefMatrix._2_2_: 0.5
    test 98 pygeodesy.ecef.EcefMatrix._validated: True
    test 99 pygeodesy.ecef.EcefMatrix._validated: True
    test 100 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 101 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 102 pygeodesy.elevations.Elevation2Tuple.elevation: 0.5
    test 103 pygeodesy.elevations.Elevation2Tuple.data_source: 0.5
    test 104 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 105 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 106 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 107 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 108 pygeodesy.elevations.GeoidHeight2Tuple.height: 0.5
    test 109 pygeodesy.elevations.GeoidHeight2Tuple.model_name: 0.5
    test 110 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
    test 111 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
    test 112 pygeodesy.ellipsoids: Circle4Tuple(radius=0.5, height=0.5, lat=0.5, beta=0.5)
    test 113 pygeodesy.ellipsoids: Circle4Tuple(radius=Radius, height=Height, lat=Lat, beta=Lat)
    test 114 pygeodesy.ellipsoids.Circle4Tuple.radius: 0.5
    test 115 pygeodesy.ellipsoids.Circle4Tuple.height: 0.5
    test 116 pygeodesy.ellipsoids.Circle4Tuple.lat: 0.5
    test 117 pygeodesy.ellipsoids.Circle4Tuple.beta: 0.5
    test 118 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 119 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 120 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 121 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 122 pygeodesy.ellipsoids.Curvature2Tuple.meridional: 0.5
    test 123 pygeodesy.ellipsoids.Curvature2Tuple.prime_vertical: 0.5
    test 124 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 125 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 126 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 127 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 128 pygeodesy.ellipsoids.a_f2Tuple.a: 0.5
    test 129 pygeodesy.ellipsoids.a_f2Tuple.f: 0.5
    test 130 pygeodesy.ellipsoids.a_f2Tuple._validated: True
    test 131 pygeodesy.ellipsoids.a_f2Tuple._validated: True
    test 132 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 133 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 134 pygeodesy.elliptic.Elliptic3Tuple.sn: 0.5
    test 135 pygeodesy.elliptic.Elliptic3Tuple.cn: 0.5
    test 136 pygeodesy.elliptic.Elliptic3Tuple.dn: 0.5
    test 137 pygeodesy.elliptic.Elliptic3Tuple._validated: True
    test 138 pygeodesy.elliptic.Elliptic3Tuple._validated: True
    test 139 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 140 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 141 pygeodesy.formy.Radical2Tuple.ratio: 0.5
    test 142 pygeodesy.formy.Radical2Tuple.xline: 0.5
    test 143 pygeodesy.formy.Radical2Tuple._validated: True
    test 144 pygeodesy.formy.Radical2Tuple._validated: True
    test 145 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 146 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=FIx, fi2=FIx, r=Number_, n=Number_, units=_Pass)
    test 147 pygeodesy.frechet.Frechet6Tuple.fd: 0.5
    test 148 pygeodesy.frechet.Frechet6Tuple.fi1: 0.5
    test 149 pygeodesy.frechet.Frechet6Tuple.fi2: 0.5
    test 150 pygeodesy.frechet.Frechet6Tuple.r: 0.5
    test 151 pygeodesy.frechet.Frechet6Tuple.n: 0.5
    test 152 pygeodesy.frechet.Frechet6Tuple.units: <bound method _NamedTuple.units of Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0.5, n=0.5, units='test')>
    test 153 pygeodesy.frechet.Frechet6Tuple._validated: True
    test 154 pygeodesy.frechet.Frechet6Tuple._validated: True
    test 155 pygeodesy.fsums: Fsum2Tuple(fsum=0.5, residual=0.5)
    test 156 pygeodesy.fsums: Fsum2Tuple(fsum=_Float_Int, residual=_Float_Int)
    test 157 pygeodesy.fsums.Fsum2Tuple.fsum: 0.5
    test 158 pygeodesy.fsums.Fsum2Tuple.residual: 0.5
    test 159 pygeodesy.fsums.Fsum2Tuple._validated: True
    test 160 pygeodesy.fsums.Fsum2Tuple._validated: True
    test 161 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=0.5, lon1=0.5, azi1=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, a12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 162 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=_Lat, lon1=_Lon, azi1=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, a12=Degrees, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 163 pygeodesy.geodsolve.GeodSolve12Tuple.lat1: 0.5
    test 164 pygeodesy.geodsolve.GeodSolve12Tuple.lon1: 0.5
    test 165 pygeodesy.geodsolve.GeodSolve12Tuple.azi1: 0.5
    test 166 pygeodesy.geodsolve.GeodSolve12Tuple.lat2: 0.5
    test 167 pygeodesy.geodsolve.GeodSolve12Tuple.lon2: 0.5
    test 168 pygeodesy.geodsolve.GeodSolve12Tuple.azi2: 0.5
    test 169 pygeodesy.geodsolve.GeodSolve12Tuple.s12: 0.5
    test 170 pygeodesy.geodsolve.GeodSolve12Tuple.a12: 0.5
    test 171 pygeodesy.geodsolve.GeodSolve12Tuple.m12: 0.5
    test 172 pygeodesy.geodsolve.GeodSolve12Tuple.M12: 0.5
    test 173 pygeodesy.geodsolve.GeodSolve12Tuple.M21: 0.5
    test 174 pygeodesy.geodsolve.GeodSolve12Tuple.S12: 0.5
    test 175 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
    test 176 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
    test 177 pygeodesy.geohash: Resolutions2Tuple(res1=0.5, res2=0.5)
    test 178 pygeodesy.geohash: Resolutions2Tuple(res1=Degrees_, res2=Degrees_)
    test 179 pygeodesy.geohash.Resolutions2Tuple.res1: 0.5
    test 180 pygeodesy.geohash.Resolutions2Tuple.res2: 0.5
    test 181 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 182 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 183 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 184 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 185 pygeodesy.geoids.GeoidHeight5Tuple.lat: 0.5
    test 186 pygeodesy.geoids.GeoidHeight5Tuple.lon: 0.5
    test 187 pygeodesy.geoids.GeoidHeight5Tuple.egm84: 0.5
    test 188 pygeodesy.geoids.GeoidHeight5Tuple.egm96: 0.5
    test 189 pygeodesy.geoids.GeoidHeight5Tuple.egm2008: 0.5
    test 190 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 191 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 192 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 193 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 194 pygeodesy.hausdorff.Hausdorff6Tuple.hd: 0.5
    test 195 pygeodesy.hausdorff.Hausdorff6Tuple.i: 0.5
    test 196 pygeodesy.hausdorff.Hausdorff6Tuple.j: 0.5
    test 197 pygeodesy.hausdorff.Hausdorff6Tuple.mn: 0.5
    test 198 pygeodesy.hausdorff.Hausdorff6Tuple.md: 0.5
    test 199 pygeodesy.hausdorff.Hausdorff6Tuple.units: <bound method _NamedTuple.units of Hausdorff6Tuple(hd=0.5, i=0.5, j=0.5, mn=0.5, md=0.5, units='test')>
    test 200 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 201 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 202 pygeodesy.karney: Area3Tuple(number=0, perimeter=0.5, area=0.5)
    test 203 pygeodesy.karney: Area3Tuple(number=Number_, perimeter=Meter, area=Meter2)
    test 204 pygeodesy.karney.Area3Tuple.number: 0.5
    test 205 pygeodesy.karney.Area3Tuple.perimeter: 0.5
    test 206 pygeodesy.karney.Area3Tuple.area: 0.5
    test 207 pygeodesy.karney.Area3Tuple._validated: True
    test 208 pygeodesy.karney.Area3Tuple._validated: True
    test 209 pygeodesy.karney: Direct9Tuple(a12=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 210 pygeodesy.karney: Direct9Tuple(a12=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 211 pygeodesy.karney.Direct9Tuple.a12: 0.5
    test 212 pygeodesy.karney.Direct9Tuple.lat2: 0.5
    test 213 pygeodesy.karney.Direct9Tuple.lon2: 0.5
    test 214 pygeodesy.karney.Direct9Tuple.azi2: 0.5
    test 215 pygeodesy.karney.Direct9Tuple.s12: 0.5
    test 216 pygeodesy.karney.Direct9Tuple.m12: 0.5
    test 217 pygeodesy.karney.Direct9Tuple.M12: 0.5
    test 218 pygeodesy.karney.Direct9Tuple.M21: 0.5
    test 219 pygeodesy.karney.Direct9Tuple.S12: 0.5
    test 220 pygeodesy.karney.Direct9Tuple._validated: True
    test 221 pygeodesy.karney.Direct9Tuple._validated: True
    test 222 pygeodesy.karney: Inverse10Tuple(a12=0.5, s12=0.5, salp1=0.5, calp1=0.5, salp2=0.5, calp2=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 223 pygeodesy.karney: Inverse10Tuple(a12=Bearing, s12=Meter, salp1=_Pass, calp1=_Pass, salp2=_Pass, calp2=_Pass, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 224 pygeodesy.karney.Inverse10Tuple.a12: 0.5
    test 225 pygeodesy.karney.Inverse10Tuple.s12: 0.5
    test 226 pygeodesy.karney.Inverse10Tuple.salp1: 0.5
    test 227 pygeodesy.karney.Inverse10Tuple.calp1: 0.5
    test 228 pygeodesy.karney.Inverse10Tuple.salp2: 0.5
    test 229 pygeodesy.karney.Inverse10Tuple.calp2: 0.5
    test 230 pygeodesy.karney.Inverse10Tuple.m12: 0.5
    test 231 pygeodesy.karney.Inverse10Tuple.M12: 0.5
    test 232 pygeodesy.karney.Inverse10Tuple.M21: 0.5
    test 233 pygeodesy.karney.Inverse10Tuple.S12: 0.5
    test 234 pygeodesy.karney.Inverse10Tuple._validated: True
    test 235 pygeodesy.karney.Inverse10Tuple._validated: True
    test 236 pygeodesy.ltpTuples: Aer4Tuple(azimuth=0.5, elevation=0.5, slantrange=0.5, ltp=0.5)
    test 237 pygeodesy.ltpTuples: Aer4Tuple(azimuth=Meter, elevation=Meter, slantrange=Meter, ltp=_Pass)
    test 238 pygeodesy.ltpTuples.Aer4Tuple.azimuth: 0.5
    test 239 pygeodesy.ltpTuples.Aer4Tuple.elevation: 0.5
    test 240 pygeodesy.ltpTuples.Aer4Tuple.slantrange: 0.5
    test 241 pygeodesy.ltpTuples.Aer4Tuple.ltp: 0.5
    test 242 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 243 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 244 pygeodesy.ltpTuples: Attitude4Tuple(alt=0.5, tilt=0.5, yaw=0.5, roll=0.5)
    test 245 pygeodesy.ltpTuples: Attitude4Tuple(alt=Meter, tilt=Bearing, yaw=Degrees, roll=Degrees)
    test 246 pygeodesy.ltpTuples.Attitude4Tuple.alt: 0.5
    test 247 pygeodesy.ltpTuples.Attitude4Tuple.tilt: 0.5
    test 248 pygeodesy.ltpTuples.Attitude4Tuple.yaw: 0.5
    test 249 pygeodesy.ltpTuples.Attitude4Tuple.roll: 0.5
    test 250 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 251 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 252 pygeodesy.ltpTuples: Enu4Tuple(east=0.5, north=0.5, up=0.5, ltp=0.5)
    test 253 pygeodesy.ltpTuples: Enu4Tuple(east=Meter, north=Meter, up=Meter, ltp=_Pass)
    test 254 pygeodesy.ltpTuples.Enu4Tuple.east: 0.5
    test 255 pygeodesy.ltpTuples.Enu4Tuple.north: 0.5
    test 256 pygeodesy.ltpTuples.Enu4Tuple.up: 0.5
    test 257 pygeodesy.ltpTuples.Enu4Tuple.ltp: 0.5
    test 258 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 259 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 260 pygeodesy.ltpTuples: Footprint5Tuple(center=0.5, upperleft=0.5, upperight=0.5, loweright=0.5, lowerleft=0.5)
    test 261 pygeodesy.ltpTuples: Footprint5Tuple(center=_Pass, upperleft=_Pass, upperight=_Pass, loweright=_Pass, lowerleft=_Pass)
    test 262 pygeodesy.ltpTuples.Footprint5Tuple.center: 0.5
    test 263 pygeodesy.ltpTuples.Footprint5Tuple.upperleft: 0.5
    test 264 pygeodesy.ltpTuples.Footprint5Tuple.upperight: 0.5
    test 265 pygeodesy.ltpTuples.Footprint5Tuple.loweright: 0.5
    test 266 pygeodesy.ltpTuples.Footprint5Tuple.lowerleft: 0.5
    test 267 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 268 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 269 pygeodesy.ltpTuples: Local9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 270 pygeodesy.ltpTuples: Local9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 271 pygeodesy.ltpTuples.Local9Tuple.x: 0.5
    test 272 pygeodesy.ltpTuples.Local9Tuple.y: 0.5
    test 273 pygeodesy.ltpTuples.Local9Tuple.z: 0.5
    test 274 pygeodesy.ltpTuples.Local9Tuple.lat: 0.5
    test 275 pygeodesy.ltpTuples.Local9Tuple.lon: 0.5
    test 276 pygeodesy.ltpTuples.Local9Tuple.height: 0.5
    test 277 pygeodesy.ltpTuples.Local9Tuple.ltp: 0.5
    test 278 pygeodesy.ltpTuples.Local9Tuple.ecef: 0.5
    test 279 pygeodesy.ltpTuples.Local9Tuple.M: 0.5
    test 280 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 281 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 282 pygeodesy.ltpTuples: Ned4Tuple(north=0.5, east=0.5, down=0.5, ltp=0.5)
    test 283 pygeodesy.ltpTuples: Ned4Tuple(north=Meter, east=Meter, down=Meter, ltp=_Pass)
    test 284 pygeodesy.ltpTuples.Ned4Tuple.north: 0.5
    test 285 pygeodesy.ltpTuples.Ned4Tuple.east: 0.5
    test 286 pygeodesy.ltpTuples.Ned4Tuple.down: 0.5
    test 287 pygeodesy.ltpTuples.Ned4Tuple.ltp: 0.5
    test 288 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 289 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 290 pygeodesy.ltpTuples: Xyz4Tuple(x=0.5, y=0.5, z=0.5, ltp=0.5)
    test 291 pygeodesy.ltpTuples: Xyz4Tuple(x=Meter, y=Meter, z=Meter, ltp=_Pass)
    test 292 pygeodesy.ltpTuples.Xyz4Tuple.x: 0.5
    test 293 pygeodesy.ltpTuples.Xyz4Tuple.y: 0.5
    test 294 pygeodesy.ltpTuples.Xyz4Tuple.z: 0.5
    test 295 pygeodesy.ltpTuples.Xyz4Tuple.ltp: 0.5
    test 296 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
    test 297 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
    test 298 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5)
    test 299 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing)
    test 300 pygeodesy.mgrs.Mgrs4Tuple.zone: 0.5
    test 301 pygeodesy.mgrs.Mgrs4Tuple.digraph: 0.5
    test 302 pygeodesy.mgrs.Mgrs4Tuple.easting: 0.5
    test 303 pygeodesy.mgrs.Mgrs4Tuple.northing: 0.5
    test 304 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 305 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 306 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', digraph='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 307 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, digraph=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 308 pygeodesy.mgrs.Mgrs6Tuple.zone: 0.5
    test 309 pygeodesy.mgrs.Mgrs6Tuple.digraph: 0.5
    test 310 pygeodesy.mgrs.Mgrs6Tuple.easting: 0.5
    test 311 pygeodesy.mgrs.Mgrs6Tuple.northing: 0.5
    test 312 pygeodesy.mgrs.Mgrs6Tuple.band: 0.5
    test 313 pygeodesy.mgrs.Mgrs6Tuple.datum: 0.5
    test 314 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 315 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 316 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 317 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 318 pygeodesy.namedTuples.Bearing2Tuple.initial: 0.5
    test 319 pygeodesy.namedTuples.Bearing2Tuple.final: 0.5
    test 320 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 321 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 322 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 323 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 324 pygeodesy.namedTuples.Bounds2Tuple.latlonSW: 0.5
    test 325 pygeodesy.namedTuples.Bounds2Tuple.latlonNE: 0.5
    test 326 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 327 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 328 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 329 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 330 pygeodesy.namedTuples.Bounds4Tuple.latS: 0.5
    test 331 pygeodesy.namedTuples.Bounds4Tuple.lonW: 0.5
    test 332 pygeodesy.namedTuples.Bounds4Tuple.latN: 0.5
    test 333 pygeodesy.namedTuples.Bounds4Tuple.lonE: 0.5
    test 334 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 335 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 336 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 337 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 338 pygeodesy.namedTuples.Destination2Tuple.destination: 0.5
    test 339 pygeodesy.namedTuples.Destination2Tuple.final: 0.5
    test 340 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 341 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 342 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 343 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 344 pygeodesy.namedTuples.Destination3Tuple.lat: 0.5
    test 345 pygeodesy.namedTuples.Destination3Tuple.lon: 0.5
    test 346 pygeodesy.namedTuples.Destination3Tuple.final: 0.5
    test 347 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 348 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 349 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 350 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 351 pygeodesy.namedTuples.Distance2Tuple.distance: 0.5
    test 352 pygeodesy.namedTuples.Distance2Tuple.initial: 0.5
    test 353 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 354 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 355 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 356 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 357 pygeodesy.namedTuples.Distance3Tuple.distance: 0.5
    test 358 pygeodesy.namedTuples.Distance3Tuple.initial: 0.5
    test 359 pygeodesy.namedTuples.Distance3Tuple.final: 0.5
    test 360 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 361 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 362 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 363 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 364 pygeodesy.namedTuples.Distance4Tuple.distance2: 0.5
    test 365 pygeodesy.namedTuples.Distance4Tuple.delta_lat: 0.5
    test 366 pygeodesy.namedTuples.Distance4Tuple.delta_lon: 0.5
    test 367 pygeodesy.namedTuples.Distance4Tuple.unroll_lon2: 0.5
    test 368 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 369 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 370 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 371 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 372 pygeodesy.namedTuples.EasNor2Tuple.easting: 0.5
    test 373 pygeodesy.namedTuples.EasNor2Tuple.northing: 0.5
    test 374 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 375 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 376 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 377 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 378 pygeodesy.namedTuples.EasNor3Tuple.easting: 0.5
    test 379 pygeodesy.namedTuples.EasNor3Tuple.northing: 0.5
    test 380 pygeodesy.namedTuples.EasNor3Tuple.height: 0.5
    test 381 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 382 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 383 pygeodesy.namedTuples: Forward4Tuple(easting=0.5, northing=0.5, convergence=0.5, scale=0.5)
    test 384 pygeodesy.namedTuples: Forward4Tuple(easting=Easting, northing=Northing, convergence=Degrees, scale=Scalar)
    test 385 pygeodesy.namedTuples.Forward4Tuple.easting: 0.5
    test 386 pygeodesy.namedTuples.Forward4Tuple.northing: 0.5
    test 387 pygeodesy.namedTuples.Forward4Tuple.convergence: 0.5
    test 388 pygeodesy.namedTuples.Forward4Tuple.scale: 0.5
    test 389 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 390 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 391 pygeodesy.namedTuples: Intersection3Tuple(point=0.5, outside1=0, outside2=0)
    test 392 pygeodesy.namedTuples: Intersection3Tuple(point=_Pass, outside1=Int, outside2=Int)
    test 393 pygeodesy.namedTuples.Intersection3Tuple.point: 0.5
    test 394 pygeodesy.namedTuples.Intersection3Tuple.outside1: 0.5
    test 395 pygeodesy.namedTuples.Intersection3Tuple.outside2: 0.5
    test 396 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 397 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 398 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 399 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 400 pygeodesy.namedTuples.LatLon2Tuple.lat: 0.5
    test 401 pygeodesy.namedTuples.LatLon2Tuple.lon: 0.5
    test 402 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 403 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 404 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 405 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 406 pygeodesy.namedTuples.LatLon3Tuple.lat: 0.5
    test 407 pygeodesy.namedTuples.LatLon3Tuple.lon: 0.5
    test 408 pygeodesy.namedTuples.LatLon3Tuple.height: 0.5
    test 409 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 410 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 411 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 412 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 413 pygeodesy.namedTuples.LatLon4Tuple.lat: 0.5
    test 414 pygeodesy.namedTuples.LatLon4Tuple.lon: 0.5
    test 415 pygeodesy.namedTuples.LatLon4Tuple.height: 0.5
    test 416 pygeodesy.namedTuples.LatLon4Tuple.datum: 0.5
    test 417 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 418 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 419 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 420 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 421 pygeodesy.namedTuples.LatLonDatum3Tuple.lat: 0.5
    test 422 pygeodesy.namedTuples.LatLonDatum3Tuple.lon: 0.5
    test 423 pygeodesy.namedTuples.LatLonDatum3Tuple.datum: 0.5
    test 424 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 425 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 426 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, convergence=0.5, scale=0.5)
    test 427 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 428 pygeodesy.namedTuples.LatLonDatum5Tuple.lat: 0.5
    test 429 pygeodesy.namedTuples.LatLonDatum5Tuple.lon: 0.5
    test 430 pygeodesy.namedTuples.LatLonDatum5Tuple.datum: 0.5
    test 431 pygeodesy.namedTuples.LatLonDatum5Tuple.convergence: 0.5
    test 432 pygeodesy.namedTuples.LatLonDatum5Tuple.scale: 0.5
    test 433 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 434 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 435 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 436 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 437 pygeodesy.namedTuples.LatLonPrec3Tuple.lat: 0.5
    test 438 pygeodesy.namedTuples.LatLonPrec3Tuple.lon: 0.5
    test 439 pygeodesy.namedTuples.LatLonPrec3Tuple.precision: 0.5
    test 440 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 441 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 442 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 443 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 444 pygeodesy.namedTuples.LatLonPrec5Tuple.lat: 0.5
    test 445 pygeodesy.namedTuples.LatLonPrec5Tuple.lon: 0.5
    test 446 pygeodesy.namedTuples.LatLonPrec5Tuple.precision: 0.5
    test 447 pygeodesy.namedTuples.LatLonPrec5Tuple.height: 0.5
    test 448 pygeodesy.namedTuples.LatLonPrec5Tuple.radius: 0.5
    test 449 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 450 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 451 pygeodesy.namedTuples: NearestOn2Tuple(closest=0.5, fraction=0.5)
    test 452 pygeodesy.namedTuples: NearestOn2Tuple(closest=_Pass, fraction=_Pass)
    test 453 pygeodesy.namedTuples.NearestOn2Tuple.closest: 0.5
    test 454 pygeodesy.namedTuples.NearestOn2Tuple.fraction: 0.5
    test 455 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 456 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 457 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 458 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 459 pygeodesy.namedTuples.NearestOn3Tuple.closest: 0.5
    test 460 pygeodesy.namedTuples.NearestOn3Tuple.distance: 0.5
    test 461 pygeodesy.namedTuples.NearestOn3Tuple.angle: 0.5
    test 462 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 463 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 464 pygeodesy.namedTuples: NearestOn4Tuple(lat=0.5, lon=0.5, distance=0.5, normal=0.5)
    test 465 pygeodesy.namedTuples: NearestOn4Tuple(lat=Lat, lon=Lon, distance=Meter, normal=Bearing)
    test 466 pygeodesy.namedTuples.NearestOn4Tuple.lat: 0.5
    test 467 pygeodesy.namedTuples.NearestOn4Tuple.lon: 0.5
    test 468 pygeodesy.namedTuples.NearestOn4Tuple.distance: 0.5
    test 469 pygeodesy.namedTuples.NearestOn4Tuple.normal: 0.5
    test 470 pygeodesy.namedTuples.NearestOn4Tuple._validated: True
    test 471 pygeodesy.namedTuples.NearestOn4Tuple._validated: True
    test 472 pygeodesy.namedTuples: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 473 pygeodesy.namedTuples: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Meter)
    test 474 pygeodesy.namedTuples.NearestOn5Tuple.lat: 0.5
    test 475 pygeodesy.namedTuples.NearestOn5Tuple.lon: 0.5
    test 476 pygeodesy.namedTuples.NearestOn5Tuple.distance: 0.5
    test 477 pygeodesy.namedTuples.NearestOn5Tuple.angle: 0.5
    test 478 pygeodesy.namedTuples.NearestOn5Tuple.height: 0.5
    test 479 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 480 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 481 pygeodesy.namedTuples: NearestOn6Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5)
    test 482 pygeodesy.namedTuples: NearestOn6Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass)
    test 483 pygeodesy.namedTuples.NearestOn6Tuple.closest: 0.5
    test 484 pygeodesy.namedTuples.NearestOn6Tuple.distance: 0.5
    test 485 pygeodesy.namedTuples.NearestOn6Tuple.fi: 0.5
    test 486 pygeodesy.namedTuples.NearestOn6Tuple.j: 0.5
    test 487 pygeodesy.namedTuples.NearestOn6Tuple.start: 0.5
    test 488 pygeodesy.namedTuples.NearestOn6Tuple.end: 0.5
    test 489 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 490 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 491 pygeodesy.namedTuples: NearestOn8Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5, initial=0.5, final=0.5)
    test 492 pygeodesy.namedTuples: NearestOn8Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass, initial=Bearing, final=Bearing)
    test 493 pygeodesy.namedTuples.NearestOn8Tuple.closest: 0.5
    test 494 pygeodesy.namedTuples.NearestOn8Tuple.distance: 0.5
    test 495 pygeodesy.namedTuples.NearestOn8Tuple.fi: 0.5
    test 496 pygeodesy.namedTuples.NearestOn8Tuple.j: 0.5
    test 497 pygeodesy.namedTuples.NearestOn8Tuple.start: 0.5
    test 498 pygeodesy.namedTuples.NearestOn8Tuple.end: 0.5
    test 499 pygeodesy.namedTuples.NearestOn8Tuple.initial: 0.5
    test 500 pygeodesy.namedTuples.NearestOn8Tuple.final: 0.5
    test 501 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 502 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 503 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 504 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 505 pygeodesy.namedTuples.PhiLam2Tuple.phi: 0.5
    test 506 pygeodesy.namedTuples.PhiLam2Tuple.lam: 0.5
    test 507 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 508 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 509 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 510 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 511 pygeodesy.namedTuples.PhiLam3Tuple.phi: 0.5
    test 512 pygeodesy.namedTuples.PhiLam3Tuple.lam: 0.5
    test 513 pygeodesy.namedTuples.PhiLam3Tuple.height: 0.5
    test 514 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 515 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 516 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 517 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 518 pygeodesy.namedTuples.PhiLam4Tuple.phi: 0.5
    test 519 pygeodesy.namedTuples.PhiLam4Tuple.lam: 0.5
    test 520 pygeodesy.namedTuples.PhiLam4Tuple.height: 0.5
    test 521 pygeodesy.namedTuples.PhiLam4Tuple.datum: 0.5
    test 522 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 523 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 524 pygeodesy.namedTuples: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 525 pygeodesy.namedTuples: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 526 pygeodesy.namedTuples.Point3Tuple.x: 0.5
    test 527 pygeodesy.namedTuples.Point3Tuple.y: 0.5
    test 528 pygeodesy.namedTuples.Point3Tuple.ll: 0.5
    test 529 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 530 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 531 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 532 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 533 pygeodesy.namedTuples.Points2Tuple.number: 0.5
    test 534 pygeodesy.namedTuples.Points2Tuple.points: 0.5
    test 535 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 536 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 537 pygeodesy.namedTuples: Reverse4Tuple(lat=0.5, lon=0.5, convergence=0.5, scale=0.5)
    test 538 pygeodesy.namedTuples: Reverse4Tuple(lat=Lat, lon=Lon, convergence=Degrees, scale=Scalar)
    test 539 pygeodesy.namedTuples.Reverse4Tuple.lat: 0.5
    test 540 pygeodesy.namedTuples.Reverse4Tuple.lon: 0.5
    test 541 pygeodesy.namedTuples.Reverse4Tuple.convergence: 0.5
    test 542 pygeodesy.namedTuples.Reverse4Tuple.scale: 0.5
    test 543 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 544 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 545 pygeodesy.namedTuples: Triangle7Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, area=0.5)
    test 546 pygeodesy.namedTuples: Triangle7Tuple(A=Degrees, a=Meter, B=Degrees, b=Meter, C=Degrees, c=Meter, area=Meter2)
    test 547 pygeodesy.namedTuples.Triangle7Tuple.A: 0.5
    test 548 pygeodesy.namedTuples.Triangle7Tuple.a: 0.5
    test 549 pygeodesy.namedTuples.Triangle7Tuple.B: 0.5
    test 550 pygeodesy.namedTuples.Triangle7Tuple.b: 0.5
    test 551 pygeodesy.namedTuples.Triangle7Tuple.C: 0.5
    test 552 pygeodesy.namedTuples.Triangle7Tuple.c: 0.5
    test 553 pygeodesy.namedTuples.Triangle7Tuple.area: 0.5
    test 554 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 555 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 556 pygeodesy.namedTuples: Triangle8Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, D=0.5, E=0.5)
    test 557 pygeodesy.namedTuples: Triangle8Tuple(A=Radians, a=Radians, B=Radians, b=Radians, C=Radians, c=Radians, D=Radians, E=Radians)
    test 558 pygeodesy.namedTuples.Triangle8Tuple.A: 0.5
    test 559 pygeodesy.namedTuples.Triangle8Tuple.a: 0.5
    test 560 pygeodesy.namedTuples.Triangle8Tuple.B: 0.5
    test 561 pygeodesy.namedTuples.Triangle8Tuple.b: 0.5
    test 562 pygeodesy.namedTuples.Triangle8Tuple.C: 0.5
    test 563 pygeodesy.namedTuples.Triangle8Tuple.c: 0.5
    test 564 pygeodesy.namedTuples.Triangle8Tuple.D: 0.5
    test 565 pygeodesy.namedTuples.Triangle8Tuple.E: 0.5
    test 566 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 567 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 568 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 569 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 570 pygeodesy.namedTuples.Trilaterate5Tuple.min: 0.5
    test 571 pygeodesy.namedTuples.Trilaterate5Tuple.minPoint: 0.5
    test 572 pygeodesy.namedTuples.Trilaterate5Tuple.max: 0.5
    test 573 pygeodesy.namedTuples.Trilaterate5Tuple.maxPoint: 0.5
    test 574 pygeodesy.namedTuples.Trilaterate5Tuple.n: 0.5
    test 575 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 576 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 577 pygeodesy.namedTuples: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 578 pygeodesy.namedTuples: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 579 pygeodesy.namedTuples.UtmUps2Tuple.zone: 0.5
    test 580 pygeodesy.namedTuples.UtmUps2Tuple.hemipole: 0.5
    test 581 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 582 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 583 pygeodesy.namedTuples: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 584 pygeodesy.namedTuples: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 585 pygeodesy.namedTuples.UtmUps5Tuple.zone: 0.5
    test 586 pygeodesy.namedTuples.UtmUps5Tuple.hemipole: 0.5
    test 587 pygeodesy.namedTuples.UtmUps5Tuple.easting: 0.5
    test 588 pygeodesy.namedTuples.UtmUps5Tuple.northing: 0.5
    test 589 pygeodesy.namedTuples.UtmUps5Tuple.band: 0.5
    test 590 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 591 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 592 pygeodesy.namedTuples: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, convergence=0.5, scale=0.5)
    test 593 pygeodesy.namedTuples: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, convergence=Degrees, scale=Scalar)
    test 594 pygeodesy.namedTuples.UtmUps8Tuple.zone: 0.5
    test 595 pygeodesy.namedTuples.UtmUps8Tuple.hemipole: 0.5
    test 596 pygeodesy.namedTuples.UtmUps8Tuple.easting: 0.5
    test 597 pygeodesy.namedTuples.UtmUps8Tuple.northing: 0.5
    test 598 pygeodesy.namedTuples.UtmUps8Tuple.band: 0.5
    test 599 pygeodesy.namedTuples.UtmUps8Tuple.datum: 0.5
    test 600 pygeodesy.namedTuples.UtmUps8Tuple.convergence: 0.5
    test 601 pygeodesy.namedTuples.UtmUps8Tuple.scale: 0.5
    test 602 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 603 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 604 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 605 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 606 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.zone: 0.5
    test 607 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.band: 0.5
    test 608 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.hemipole: 0.5
    test 609 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lat: 0.5
    test 610 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lon: 0.5
    test 611 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 612 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 613 pygeodesy.namedTuples: Vector2Tuple(x=0.5, y=0.5)
    test 614 pygeodesy.namedTuples: Vector2Tuple(x=Scalar, y=Scalar)
    test 615 pygeodesy.namedTuples.Vector2Tuple.x: 0.5
    test 616 pygeodesy.namedTuples.Vector2Tuple.y: 0.5
    test 617 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 618 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 619 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 620 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 621 pygeodesy.namedTuples.Vector3Tuple.x: 0.5
    test 622 pygeodesy.namedTuples.Vector3Tuple.y: 0.5
    test 623 pygeodesy.namedTuples.Vector3Tuple.z: 0.5
    test 624 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 625 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 626 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 627 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 628 pygeodesy.namedTuples.Vector4Tuple.x: 0.5
    test 629 pygeodesy.namedTuples.Vector4Tuple.y: 0.5
    test 630 pygeodesy.namedTuples.Vector4Tuple.z: 0.5
    test 631 pygeodesy.namedTuples.Vector4Tuple.h: 0.5
    test 632 pygeodesy.namedTuples.Vector4Tuple._validated: True
    test 633 pygeodesy.namedTuples.Vector4Tuple._validated: True
    test 634 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 635 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 636 pygeodesy.points.Shape2Tuple.nrows: 0.5
    test 637 pygeodesy.points.Shape2Tuple.ncols: 0.5
    test 638 pygeodesy.points.Shape2Tuple._validated: True
    test 639 pygeodesy.points.Shape2Tuple._validated: True
    test 640 pygeodesy.resections: Collins5Tuple(pointP=0.5, pointH=0.5, a=0.5, b=0.5, c=0.5)
    test 641 pygeodesy.resections: Collins5Tuple(pointP=_Pass, pointH=_Pass, a=Distance, b=Distance, c=Distance)
    test 642 pygeodesy.resections.Collins5Tuple.pointP: 0.5
    test 643 pygeodesy.resections.Collins5Tuple.pointH: 0.5
    test 644 pygeodesy.resections.Collins5Tuple.a: 0.5
    test 645 pygeodesy.resections.Collins5Tuple.b: 0.5
    test 646 pygeodesy.resections.Collins5Tuple.c: 0.5
    test 647 pygeodesy.resections.Collins5Tuple._validated: True
    test 648 pygeodesy.resections.Collins5Tuple._validated: True
    test 649 pygeodesy.resections: Survey3Tuple(PA=0.5, PB=0.5, PC=0.5)
    test 650 pygeodesy.resections: Survey3Tuple(PA=Distance, PB=Distance, PC=Distance)
    test 651 pygeodesy.resections.Survey3Tuple.PA: 0.5
    test 652 pygeodesy.resections.Survey3Tuple.PB: 0.5
    test 653 pygeodesy.resections.Survey3Tuple.PC: 0.5
    test 654 pygeodesy.resections.Survey3Tuple._validated: True
    test 655 pygeodesy.resections.Survey3Tuple._validated: True
    test 656 pygeodesy.resections: Tienstra7Tuple(pointP=0.5, A=0.5, B=0.5, C=0.5, a=0.5, b=0.5, c=0.5)
    test 657 pygeodesy.resections: Tienstra7Tuple(pointP=_Pass, A=Degrees, B=Degrees, C=Degrees, a=Distance, b=Distance, c=Distance)
    test 658 pygeodesy.resections.Tienstra7Tuple.pointP: 0.5
    test 659 pygeodesy.resections.Tienstra7Tuple.A: 0.5
    test 660 pygeodesy.resections.Tienstra7Tuple.B: 0.5
    test 661 pygeodesy.resections.Tienstra7Tuple.C: 0.5
    test 662 pygeodesy.resections.Tienstra7Tuple.a: 0.5
    test 663 pygeodesy.resections.Tienstra7Tuple.b: 0.5
    test 664 pygeodesy.resections.Tienstra7Tuple.c: 0.5
    test 665 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 666 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 667 pygeodesy.resections: TriAngle4Tuple(radA=0.5, radB=0.5, radC=0.5, rIn=0.5)
    test 668 pygeodesy.resections: TriAngle4Tuple(radA=Radians, radB=Radians, radC=Radians, rIn=Distance)
    test 669 pygeodesy.resections.TriAngle4Tuple.radA: 0.5
    test 670 pygeodesy.resections.TriAngle4Tuple.radB: 0.5
    test 671 pygeodesy.resections.TriAngle4Tuple.radC: 0.5
    test 672 pygeodesy.resections.TriAngle4Tuple.rIn: 0.5
    test 673 pygeodesy.resections.TriAngle4Tuple._validated: True
    test 674 pygeodesy.resections.TriAngle4Tuple._validated: True
    test 675 pygeodesy.resections: TriSide2Tuple(a=0.5, radA=0.5)
    test 676 pygeodesy.resections: TriSide2Tuple(a=Distance, radA=Radians)
    test 677 pygeodesy.resections.TriSide2Tuple.a: 0.5
    test 678 pygeodesy.resections.TriSide2Tuple.radA: 0.5
    test 679 pygeodesy.resections.TriSide2Tuple._validated: True
    test 680 pygeodesy.resections.TriSide2Tuple._validated: True
    test 681 pygeodesy.resections: TriSide4Tuple(a=0.5, b=0.5, radC=0.5, d=0.5)
    test 682 pygeodesy.resections: TriSide4Tuple(a=Distance, b=Distance, radC=Radians, d=Distance)
    test 683 pygeodesy.resections.TriSide4Tuple.a: 0.5
    test 684 pygeodesy.resections.TriSide4Tuple.b: 0.5
    test 685 pygeodesy.resections.TriSide4Tuple.radC: 0.5
    test 686 pygeodesy.resections.TriSide4Tuple.d: 0.5
    test 687 pygeodesy.resections.TriSide4Tuple._validated: True
    test 688 pygeodesy.resections.TriSide4Tuple._validated: True
    test 689 pygeodesy.rhumbsolve: RhumbSolve7Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5)
    test 690 pygeodesy.rhumbsolve: RhumbSolve7Tuple(lat1=_Lat, lon1=_Lon, lat2=_Lat, lon2=_Lon, azi12=Bearing, s12=Meter, S12=Meter2)
    test 691 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lat1: 0.5
    test 692 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lon1: 0.5
    test 693 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lat2: 0.5
    test 694 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lon2: 0.5
    test 695 pygeodesy.rhumbsolve.RhumbSolve7Tuple.azi12: 0.5
    test 696 pygeodesy.rhumbsolve.RhumbSolve7Tuple.s12: 0.5
    test 697 pygeodesy.rhumbsolve.RhumbSolve7Tuple.S12: 0.5
    test 698 pygeodesy.rhumbsolve.RhumbSolve7Tuple._validated: True
    test 699 pygeodesy.rhumbsolve.RhumbSolve7Tuple._validated: True
    test 700 pygeodesy.rhumbx: Rhumb8Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5, a12=0.5)
    test 701 pygeodesy.rhumbx: Rhumb8Tuple(lat1=_Lat, lon1=_Lon, lat2=_Lat, lon2=_Lon, azi12=Bearing, s12=Meter, S12=Meter2, a12=Degrees)
    test 702 pygeodesy.rhumbx.Rhumb8Tuple.lat1: 0.5
    test 703 pygeodesy.rhumbx.Rhumb8Tuple.lon1: 0.5
    test 704 pygeodesy.rhumbx.Rhumb8Tuple.lat2: 0.5
    test 705 pygeodesy.rhumbx.Rhumb8Tuple.lon2: 0.5
    test 706 pygeodesy.rhumbx.Rhumb8Tuple.azi12: 0.5
    test 707 pygeodesy.rhumbx.Rhumb8Tuple.s12: 0.5
    test 708 pygeodesy.rhumbx.Rhumb8Tuple.S12: 0.5
    test 709 pygeodesy.rhumbx.Rhumb8Tuple.a12: 0.5
    test 710 pygeodesy.rhumbx.Rhumb8Tuple._validated: True
    test 711 pygeodesy.rhumbx.Rhumb8Tuple._validated: True
    test 712 pygeodesy.rhumbx: RhumbOrder2Tuple(RAorder=0, TMorder=0)
    test 713 pygeodesy.rhumbx: RhumbOrder2Tuple(RAorder=Int, TMorder=Int)
    test 714 pygeodesy.rhumbx.RhumbOrder2Tuple.RAorder: 0.5
    test 715 pygeodesy.rhumbx.RhumbOrder2Tuple.TMorder: 0.5
    test 716 pygeodesy.rhumbx.RhumbOrder2Tuple._validated: True
    test 717 pygeodesy.rhumbx.RhumbOrder2Tuple._validated: True
    test 718 pygeodesy.trf: Helmert7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 719 pygeodesy.trf: Helmert7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 720 pygeodesy.trf.Helmert7Tuple.tx: 0.5
    test 721 pygeodesy.trf.Helmert7Tuple.ty: 0.5
    test 722 pygeodesy.trf.Helmert7Tuple.tz: 0.5
    test 723 pygeodesy.trf.Helmert7Tuple.s: 0.5
    test 724 pygeodesy.trf.Helmert7Tuple.sx: 0.5
    test 725 pygeodesy.trf.Helmert7Tuple.sy: 0.5
    test 726 pygeodesy.trf.Helmert7Tuple.sz: 0.5
    test 727 pygeodesy.trf.Helmert7Tuple._validated: True
    test 728 pygeodesy.trf.Helmert7Tuple._validated: True
    test 729 pygeodesy.trf: Helmert7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 730 pygeodesy.trf: Helmert7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 731 pygeodesy.trf.Helmert7Tuple.tx: 0.5
    test 732 pygeodesy.trf.Helmert7Tuple.ty: 0.5
    test 733 pygeodesy.trf.Helmert7Tuple.tz: 0.5
    test 734 pygeodesy.trf.Helmert7Tuple.s: 0.5
    test 735 pygeodesy.trf.Helmert7Tuple.sx: 0.5
    test 736 pygeodesy.trf.Helmert7Tuple.sy: 0.5
    test 737 pygeodesy.trf.Helmert7Tuple.sz: 0.5
    test 738 pygeodesy.trf.Helmert7Tuple._validated: True
    test 739 pygeodesy.trf.Helmert7Tuple._validated: True
    test 740 pygeodesy.vector2d: Circin6Tuple(radius=0.5, center=0.5, deltas=0.5, cA=0.5, cB=0.5, cC=0.5)
    test 741 pygeodesy.vector2d: Circin6Tuple(radius=Radius, center=_Pass, deltas=_Pass, cA=_Pass, cB=_Pass, cC=_Pass)
    test 742 pygeodesy.vector2d.Circin6Tuple.radius: 0.5
    test 743 pygeodesy.vector2d.Circin6Tuple.center: 0.5
    test 744 pygeodesy.vector2d.Circin6Tuple.deltas: 0.5
    test 745 pygeodesy.vector2d.Circin6Tuple.cA: 0.5
    test 746 pygeodesy.vector2d.Circin6Tuple.cB: 0.5
    test 747 pygeodesy.vector2d.Circin6Tuple.cC: 0.5
    test 748 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 749 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 750 pygeodesy.vector2d: Circum3Tuple(radius=0.5, center=0.5, deltas=0.5)
    test 751 pygeodesy.vector2d: Circum3Tuple(radius=Radius, center=_Pass, deltas=_Pass)
    test 752 pygeodesy.vector2d.Circum3Tuple.radius: 0.5
    test 753 pygeodesy.vector2d.Circum3Tuple.center: 0.5
    test 754 pygeodesy.vector2d.Circum3Tuple.deltas: 0.5
    test 755 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 756 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 757 pygeodesy.vector2d: Circum4Tuple(radius=0.5, center=0.5, rank=0, residuals=0.5)
    test 758 pygeodesy.vector2d: Circum4Tuple(radius=Radius, center=_Pass, rank=Int, residuals=_Pass)
    test 759 pygeodesy.vector2d.Circum4Tuple.radius: 0.5
    test 760 pygeodesy.vector2d.Circum4Tuple.center: 0.5
    test 761 pygeodesy.vector2d.Circum4Tuple.rank: 0.5
    test 762 pygeodesy.vector2d.Circum4Tuple.residuals: 0.5
    test 763 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 764 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 765 pygeodesy.vector2d: Meeus2Tuple(radius=0.5, Type=0.5)
    test 766 pygeodesy.vector2d: Meeus2Tuple(radius=Radius, Type=_Pass)
    test 767 pygeodesy.vector2d.Meeus2Tuple.radius: 0.5
    test 768 pygeodesy.vector2d.Meeus2Tuple.Type: 0.5
    test 769 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 770 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 771 pygeodesy.vector2d: Radii11Tuple(rA=0.5, rB=0.5, rC=0.5, cR=0.5, rIn=0.5, riS=0.5, roS=0.5, a=0.5, b=0.5, c=0.5, s=0.5)
    test 772 pygeodesy.vector2d: Radii11Tuple(rA=Meter, rB=Meter, rC=Meter, cR=Meter, rIn=Meter, riS=Meter, roS=Meter, a=Meter, b=Meter, c=Meter, s=Meter)
    test 773 pygeodesy.vector2d.Radii11Tuple.rA: 0.5
    test 774 pygeodesy.vector2d.Radii11Tuple.rB: 0.5
    test 775 pygeodesy.vector2d.Radii11Tuple.rC: 0.5
    test 776 pygeodesy.vector2d.Radii11Tuple.cR: 0.5
    test 777 pygeodesy.vector2d.Radii11Tuple.rIn: 0.5
    test 778 pygeodesy.vector2d.Radii11Tuple.riS: 0.5
    test 779 pygeodesy.vector2d.Radii11Tuple.roS: 0.5
    test 780 pygeodesy.vector2d.Radii11Tuple.a: 0.5
    test 781 pygeodesy.vector2d.Radii11Tuple.b: 0.5
    test 782 pygeodesy.vector2d.Radii11Tuple.c: 0.5
    test 783 pygeodesy.vector2d.Radii11Tuple.s: 0.5
    test 784 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 785 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 786 pygeodesy.vector2d: Soddy4Tuple(radius=0.5, center=0.5, deltas=0.5, outer=0.5)
    test 787 pygeodesy.vector2d: Soddy4Tuple(radius=Radius, center=_Pass, deltas=_Pass, outer=Radius)
    test 788 pygeodesy.vector2d.Soddy4Tuple.radius: 0.5
    test 789 pygeodesy.vector2d.Soddy4Tuple.center: 0.5
    test 790 pygeodesy.vector2d.Soddy4Tuple.deltas: 0.5
    test 791 pygeodesy.vector2d.Soddy4Tuple.outer: 0.5
    test 792 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 793 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 794 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 795 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 796 pygeodesy.webmercator.EasNorRadius3Tuple.easting: 0.5
    test 797 pygeodesy.webmercator.EasNorRadius3Tuple.northing: 0.5
    test 798 pygeodesy.webmercator.EasNorRadius3Tuple.radius: 0.5
    test 799 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
    test 800 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
    test 801 pygeodesy.named._NamedTuple._validated: False

    all 801 testNamedTuples.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 17.695 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testNavlabExamples.py
./pygeodesy/ellipsoidalNvector.py:461: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use class L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:40: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(1, 'delta', delta.toRepr(prec=3), '[L:470357.384, B:45.109°, E:-2.12°]')  # DEPRECATED
./test/testNavlabExamples.py:42: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  t.test(1, 'bearing', delta.bearing, 45.109, fmt='%.3f')  # 45.109°
./test/testNavlabExamples.py:43: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  t.test(1, 'length', delta.length, 470357.384, fmt='%.3f')  # 470357.384 m
./test/testNavlabExamples.py:53: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:3606.938, B:33.69°, E:-1.589°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:247: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/deprecated/__init__.py:43: DeprecationWarning: class L{pygeodesy.deprecated.Ned3Tuple} has been DEPRECATED, use class L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
./test/testNavlabExamples.py:61: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:116807.681, B:222.493°, E:-0.524°]')  # DEPRECATED
./test/testNavlabExamples.py:133: DeprecationWarning: function L{pygeodesy.ellipsoidalNvector.toNed} has been DEPRECATED, use L{pygeodesy.Aer}C{(bearing, elevation, distance).xyzLocal.toNed(B{Ned}, name=B{name})} or L{XyzLocal}C{(pygeodesy.Aer(bearing, elevation, distance)).toNed(B{Ned}, name=B{name})}.
  d = ellipsoidalNvector.toNed(116809.178, 222.493, -0.5416)
./test/testNavlabExamples.py:135: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  TestsBase.test(t, 'bearing',   d.bearing, '227.507',  fmt='%.3f')  # '222.493'
./test/testNavlabExamples.py:137: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  TestsBase.test(t, 'length',    d.length, '116809.178',  fmt='%.3f')
./test/testNavlabExamples.py:138: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toVector3d} has been DEPRECATED, use property L{xyz}.
  v = d.toVector3d()

    testing testNavlabExamples.py 21.08.12
    test 1 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384
    test 6 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 7 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 8 Example 2 delta: [3000.0, 2000.0, 100.0]
    test 9 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
    test 10 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 11 Example 2 delta: [-86126, -78900, 1069]
    test 12 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 13 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E
    test 14 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m
    test 15 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]
    test 16 Example 5 distanceTo: 332457
    test 17 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 18 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 19 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 20 Example 6 intermediateTo: 51.372084°N, 000.707337°E
    test 21 Example 7 meanOf: 67.2362°N, 006.9175°W
    test 22 Example 8 destination(pygeodesy.sphericalNvector): 79.991549°N, 090.017698°W
    test 23 Example 8 destination(pygeodesy.sphericalTrigonometry): 79.991549°N, 090.017698°W
    test 24 Example 8 destination(pygeodesy.ellipsoidalVincenty): 79.991584°N, 090.017621°W
    test 25 Example 8 destination(pygeodesy.ellipsoidalKarney): 79.991584°N, 090.017621°W
    test 26 Example 8 destination(pygeodesy.ellipsoidalExact): 79.991584°N, 090.017621°W
    test 27 Example 9 intersection: 40.318643°N, 055.901868°E
    test 28 Example 10 crossTrackDistance: 11118
    test 29 toNed: [-78901.1, -86126.6, 1104.1]
    test 30 bearing: 227.507
    test 31 elevation: -0.5416
    test 32 length: 116809.178
    test 33 toVector3d: (-86126.6, -78901.1, -1104.1)

    19 of 33 testNavlabExamples.py tests (57.6%) FAILED, incl. 2 KNOWN plus 17 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 12.362 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testOsgr.py
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:24: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:26: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)

    testing testOsgr.py 22.01.03 (module pygeodesy.osgr 22.04.27)

    testOSgr(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: None
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 11 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 12 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 13 iteration: 4
    test 14 toOsgr2: 651409,313177
    test 15 toOsgr3: TG 51409 13177
    test 16 toOsgr4: TG 51409 13177
    test 17 OSGR1: TG 48251 11932
    test 18 OSGR1: [G:TG, E:48251, N:11932]
    test 19 OSGR2: TG 51409 13177
    test 20 OSGR2: [G:TG, E:51409, N:13177]
    test 21 OSGR3: TG 51409 13177
    test 22 OSGR3: [G:TG, E:51409, N:13177]
    test 23 OSGR4: TG 51409 13177
    test 24 OSGR4: [G:TG, E:51409, N:13177]
    test 25 OSGR5: 651409,313177
    test 26 OSGR5: [OSGR:651409.000,313177.000]
    test 27 OSGR5: [OSGR:651409.000,313177.000]
    test 28 OSGR6: 651409,313177
    test 29 OSGR6: (651409, 313177)
    test 30 OSGR6: 651409,313177
    test 31 issue: 38
    test 32 toOsgr: [G:TL, E:29158, N:35174]
    test 33 toOsgr: 529158.072, 235174.785
    test 34 toOsgr: OSGB36
    test 35 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 36 toLatLonOSGB36: OSGB36
    test 37 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 38 toLatLonWGS84 : WGS84
    test 39 Osgr: [G:TQ, E:32014, N:23971]
    test 40 Osgr: 532014.0, 123971.0
    test 41 Osgr: OSGB36
    test 42 toLatLonOSGB36: 50.999425N, 000.118417W
    test 43 toLatLonOSGB36: OSGB36
    test 44 toLatLonWGS84 : 50.999995N, 000.120004W
    test 45 toLatLonWGS84 : WGS84
    test 46 parseOSGR: [G:TQ, E:32014, N:23971]
    test 47 parseOSGR: 532014.0, 123971.0
    test 48 parseOSGR: OSGB36
    test 49 toLatLonOSGB36: 50.999425N, 000.118417W
    test 50 toLatLonOSGB36: OSGB36
    test 51 toLatLonWGS84: 50.999995N, 000.120004W
    test 52 toLatLonWGS84: WGS84
    test 53 toOsgr: [G:TQ, E:32013, N:23971]
    test 54 toOsgr: 532013.969, 123971.046
    test 55 toOsgr: OSGB36
    test 56 toLatLonOSGB36: 50.999426N, 000.118417W
    test 57 toLatLonOSGB36: OSGB36
    test 58 toLatLonWGS84 : 50.999995N, 000.120004W
    test 59 toLatLonWGS84 : WGS84
    test 60 toOsgr: [G:TQ, E:48853, N:24427]
    test 61 toOsgr: 548853.602, 124427.985
    test 62 toOsgr: OSGB36
    test 63 toLatLonOSGB36: 50.999422N, 000.121618E
    test 64 toLatLonOSGB36: OSGB36
    test 65 toLatLonWGS84 : 50.999995N, 000.120004E
    test 66 toLatLonWGS84 : WGS84
    test 67 toLatLon: 52.0N, 000.12W
    test 68 toLatLon: 52.0N, 000.12W
    test 69 toLatLon: 52.0N, 000.12W
    test 70 toLatLon: 52.0N, 000.12W
    test 71 toLatLon: 52.0N, 000.12W
    test 72 toLatLon: 52.0N, 000.12W
    test 73 toLatLon: 52.0N, 000.12W
    test 74 toLatLon: 52.0N, 000.12W
    test 75 LatLon: 49.926244°N, 006.297934°W
    test 76 datum: WGS84
    test 77 datum: OSGB36
    test 78 toOsgr: [G:SV, E:91645, N:11753]
    test 79 datum: OSGB36
    test 80 LatLon: 49.926244°N, 006.297934°W
    test 81 datum: WGS84
    test 82 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 83 WGS84: 51.4778°N, 000.0016°W
    test 84 OSGB36: 51.477284°N, 000.00002°E
    test 85 WGS84: 51.4778°N, 000.0016°W
    test 86 OSgr1: TG 51409 13177
    test 87 OSgr1: [G:TG, E:51409, N:13177]
    test 88 iteration: None
    test 89 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 90 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 91 iteration: 4
    test 92 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 93 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 94 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 95 iteration: 4
    test 96 toOsgr2: 651409,313177
    test 97 toOsgr3: TG 51409 13177
    test 98 toOsgr4: TG 51409 13177
    test 99 OSGR1: TG 48251 11932
    test 100 OSGR1: [G:TG, E:48251, N:11932]
    test 101 OSGR2: TG 51409 13177
    test 102 OSGR2: [G:TG, E:51409, N:13177]
    test 103 OSGR3: TG 51409 13177
    test 104 OSGR3: [G:TG, E:51409, N:13177]
    test 105 OSGR4: TG 51409 13177
    test 106 OSGR4: [G:TG, E:51409, N:13177]
    test 107 OSGR5: 651409,313177
    test 108 OSGR5: [OSGR:651409.000,313177.000]
    test 109 OSGR5: [OSGR:651409.000,313177.000]
    test 110 OSGR6: 651409,313177
    test 111 OSGR6: (651409, 313177)
    test 112 OSGR6: 651409,313177
    test 113 issue: 38
    test 114 toOsgr: [G:TL, E:29158, N:35174]
    test 115 toOsgr: 529158.072, 235174.785
    test 116 toOsgr: OSGB36
    test 117 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 118 toLatLonOSGB36: OSGB36
    test 119 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 120 toLatLonWGS84 : WGS84
    test 121 Osgr: [G:TQ, E:32014, N:23971]
    test 122 Osgr: 532014.0, 123971.0
    test 123 Osgr: OSGB36
    test 124 toLatLonOSGB36: 50.999425N, 000.118417W
    test 125 toLatLonOSGB36: OSGB36
    test 126 toLatLonWGS84 : 50.999995N, 000.120004W
    test 127 toLatLonWGS84 : WGS84
    test 128 parseOSGR: [G:TQ, E:32014, N:23971]
    test 129 parseOSGR: 532014.0, 123971.0
    test 130 parseOSGR: OSGB36
    test 131 toLatLonOSGB36: 50.999425N, 000.118417W
    test 132 toLatLonOSGB36: OSGB36
    test 133 toLatLonWGS84: 50.999995N, 000.120004W
    test 134 toLatLonWGS84: WGS84
    test 135 toOsgr: [G:TQ, E:32013, N:23971]
    test 136 toOsgr: 532013.969, 123971.046
    test 137 toOsgr: OSGB36
    test 138 toLatLonOSGB36: 50.999426N, 000.118417W
    test 139 toLatLonOSGB36: OSGB36
    test 140 toLatLonWGS84 : 50.999995N, 000.120004W
    test 141 toLatLonWGS84 : WGS84
    test 142 toOsgr: [G:TQ, E:48853, N:24427]
    test 143 toOsgr: 548853.602, 124427.985
    test 144 toOsgr: OSGB36
    test 145 toLatLonOSGB36: 50.999422N, 000.121618E
    test 146 toLatLonOSGB36: OSGB36
    test 147 toLatLonWGS84 : 50.999995N, 000.120004E
    test 148 toLatLonWGS84 : WGS84
    test 149 toLatLon: 52.0N, 000.12W
    test 150 toLatLon: 52.0N, 000.12W
    test 151 toLatLon: 52.0N, 000.12W
    test 152 toLatLon: 52.0N, 000.12W
    test 153 toLatLon: 52.0N, 000.12W
    test 154 toLatLon: 52.0N, 000.12W
    test 155 toLatLon: 52.0N, 000.12W
    test 156 toLatLon: 52.0N, 000.12W
    test 157 LatLon: 49.926244°N, 006.297934°W
    test 158 datum: WGS84
    test 159 datum: OSGB36
    test 160 toOsgr: [G:SV, E:91645, N:11753]
    test 161 datum: OSGB36
    test 162 LatLon: 49.926244°N, 006.297934°W
    test 163 datum: WGS84
    test 164 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 165 WGS84: 51.4778°N, 000.0016°W
    test 166 OSGB36: 51.477284°N, 000.00002°E
    test 167 WGS84: 51.4778°N, 000.0016°W
    test 168 OSgr1: TG 51409 13177
    test 169 OSgr1: [G:TG, E:51409, N:13177]
    test 170 iteration: None
    test 171 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 172 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 173 iteration: 4
    test 174 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 175 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 176 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 177 iteration: 4
    test 178 toOsgr2: 651409,313177
    test 179 toOsgr3: TG 51409 13177
    test 180 toOsgr4: TG 51409 13177
    test 181 OSGR1: TG 48251 11932
    test 182 OSGR1: [G:TG, E:48251, N:11932]
    test 183 OSGR2: TG 51409 13177
    test 184 OSGR2: [G:TG, E:51409, N:13177]
    test 185 OSGR3: TG 51409 13177
    test 186 OSGR3: [G:TG, E:51409, N:13177]
    test 187 OSGR4: TG 51409 13177
    test 188 OSGR4: [G:TG, E:51409, N:13177]
    test 189 OSGR5: 651409,313177
    test 190 OSGR5: [OSGR:651409.000,313177.000]
    test 191 OSGR5: [OSGR:651409.000,313177.000]
    test 192 OSGR6: 651409,313177
    test 193 OSGR6: (651409, 313177)
    test 194 OSGR6: 651409,313177
    test 195 issue: 38
    test 196 toOsgr: [G:TL, E:29158, N:35174]
    test 197 toOsgr: 529158.072, 235174.785
    test 198 toOsgr: OSGB36
    test 199 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 200 toLatLonOSGB36: OSGB36
    test 201 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 202 toLatLonWGS84 : WGS84
    test 203 Osgr: [G:TQ, E:32014, N:23971]
    test 204 Osgr: 532014.0, 123971.0
    test 205 Osgr: OSGB36
    test 206 toLatLonOSGB36: 50.999425N, 000.118417W
    test 207 toLatLonOSGB36: OSGB36
    test 208 toLatLonWGS84 : 50.999995N, 000.120004W
    test 209 toLatLonWGS84 : WGS84
    test 210 parseOSGR: [G:TQ, E:32014, N:23971]
    test 211 parseOSGR: 532014.0, 123971.0
    test 212 parseOSGR: OSGB36
    test 213 toLatLonOSGB36: 50.999425N, 000.118417W
    test 214 toLatLonOSGB36: OSGB36
    test 215 toLatLonWGS84: 50.999995N, 000.120004W
    test 216 toLatLonWGS84: WGS84
    test 217 toOsgr: [G:TQ, E:32013, N:23971]
    test 218 toOsgr: 532013.969, 123971.046
    test 219 toOsgr: OSGB36
    test 220 toLatLonOSGB36: 50.999426N, 000.118417W
    test 221 toLatLonOSGB36: OSGB36
    test 222 toLatLonWGS84 : 50.999995N, 000.120004W
    test 223 toLatLonWGS84 : WGS84
    test 224 toOsgr: [G:TQ, E:48853, N:24427]
    test 225 toOsgr: 548853.602, 124427.985
    test 226 toOsgr: OSGB36
    test 227 toLatLonOSGB36: 50.999422N, 000.121618E
    test 228 toLatLonOSGB36: OSGB36
    test 229 toLatLonWGS84 : 50.999995N, 000.120004E
    test 230 toLatLonWGS84 : WGS84
    test 231 toLatLon: 52.0N, 000.12W
    test 232 toLatLon: 52.0N, 000.12W
    test 233 toLatLon: 52.0N, 000.12W
    test 234 toLatLon: 52.0N, 000.12W
    test 235 toLatLon: 52.0N, 000.12W
    test 236 toLatLon: 52.0N, 000.12W
    test 237 toLatLon: 52.0N, 000.12W
    test 238 toLatLon: 52.0N, 000.12W
    test 239 LatLon: 49.926244°N, 006.297934°W
    test 240 datum: WGS84
    test 241 datum: OSGB36
    test 242 toOsgr: [G:SV, E:91645, N:11753]
    test 243 datum: OSGB36
    test 244 LatLon: 49.926244°N, 006.297934°W
    test 245 datum: WGS84
    test 246 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    testOSgr(pygeodesy.ellipsoidalExact, 22.07.07)
    test 247 WGS84: 51.4778°N, 000.0016°W
    test 248 OSGB36: 51.477284°N, 000.00002°E
    test 249 WGS84: 51.4778°N, 000.0016°W
    test 250 OSgr1: TG 51409 13177
    test 251 OSgr1: [G:TG, E:51409, N:13177]
    test 252 iteration: None
    test 253 toLatLon1: 52°39′28.72″N, 001°42′57.79″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 254 toLatLon1: 52.657979°N, 001.716052°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 255 iteration: 4
    test 256 toOsgr1: 651409.900,313177.270  FAILED, KNOWN, expected 651409.903,313177.270
    test 257 toLatLon2: 52°39′27.25″N, 001°43′04.52″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 258 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 259 iteration: 4
    test 260 toOsgr2: 651409,313177
    test 261 toOsgr3: TG 51409 13177
    test 262 toOsgr4: TG 51409 13177
    test 263 OSGR1: TG 48251 11932
    test 264 OSGR1: [G:TG, E:48251, N:11932]
    test 265 OSGR2: TG 51409 13177
    test 266 OSGR2: [G:TG, E:51409, N:13177]
    test 267 OSGR3: TG 51409 13177
    test 268 OSGR3: [G:TG, E:51409, N:13177]
    test 269 OSGR4: TG 51409 13177
    test 270 OSGR4: [G:TG, E:51409, N:13177]
    test 271 OSGR5: 651409,313177
    test 272 OSGR5: [OSGR:651409.000,313177.000]
    test 273 OSGR5: [OSGR:651409.000,313177.000]
    test 274 OSGR6: 651409,313177
    test 275 OSGR6: (651409, 313177)
    test 276 OSGR6: 651409,313177
    test 277 issue: 38
    test 278 toOsgr: [G:TL, E:29158, N:35174]
    test 279 toOsgr: 529158.072, 235174.785
    test 280 toOsgr: OSGB36
    test 281 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 282 toLatLonOSGB36: OSGB36
    test 283 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 284 toLatLonWGS84 : WGS84
    test 285 Osgr: [G:TQ, E:32014, N:23971]
    test 286 Osgr: 532014.0, 123971.0
    test 287 Osgr: OSGB36
    test 288 toLatLonOSGB36: 50.999425N, 000.118417W
    test 289 toLatLonOSGB36: OSGB36
    test 290 toLatLonWGS84 : 50.999995N, 000.120004W
    test 291 toLatLonWGS84 : WGS84
    test 292 parseOSGR: [G:TQ, E:32014, N:23971]
    test 293 parseOSGR: 532014.0, 123971.0
    test 294 parseOSGR: OSGB36
    test 295 toLatLonOSGB36: 50.999425N, 000.118417W
    test 296 toLatLonOSGB36: OSGB36
    test 297 toLatLonWGS84: 50.999995N, 000.120004W
    test 298 toLatLonWGS84: WGS84
    test 299 toOsgr: [G:TQ, E:32013, N:23971]
    test 300 toOsgr: 532013.969, 123971.046
    test 301 toOsgr: OSGB36
    test 302 toLatLonOSGB36: 50.999426N, 000.118417W
    test 303 toLatLonOSGB36: OSGB36
    test 304 toLatLonWGS84 : 50.999995N, 000.120004W
    test 305 toLatLonWGS84 : WGS84
    test 306 toOsgr: [G:TQ, E:48853, N:24427]
    test 307 toOsgr: 548853.602, 124427.985
    test 308 toOsgr: OSGB36
    test 309 toLatLonOSGB36: 50.999422N, 000.121618E
    test 310 toLatLonOSGB36: OSGB36
    test 311 toLatLonWGS84 : 50.999995N, 000.120004E
    test 312 toLatLonWGS84 : WGS84
    test 313 toLatLon: 52.0N, 000.12W
    test 314 toLatLon: 52.0N, 000.12W
    test 315 toLatLon: 52.0N, 000.12W
    test 316 toLatLon: 52.0N, 000.12W
    test 317 toLatLon: 52.0N, 000.12W
    test 318 toLatLon: 52.0N, 000.12W
    test 319 toLatLon: 52.0N, 000.12W
    test 320 toLatLon: 52.0N, 000.12W
    test 321 LatLon: 49.926244°N, 006.297934°W
    test 322 datum: WGS84
    test 323 datum: OSGB36
    test 324 toOsgr: [G:SV, E:91645, N:11753]
    test 325 datum: OSGB36
    test 326 LatLon: 49.926244°N, 006.297934°W
    test 327 datum: WGS84
    test 328 distanceTo: 0.0015  FAILED, KNOWN, expected 0.0050

    32 of 328 testOsgr.py tests (9.8%) FAILED, incl. 24 KNOWN plus 8 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 29.061 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testPoints.py

    testing testPoints.py 21.12.30 (module pygeodesy.points 22.06.26)
    test 1 sizeof(LatLon_.__dict__): 48
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.220446049250313e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489°N, 000.701206°W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 numpy.__version__: 1.22.4
    test 113 Numpy2LatLon.ABC: True
    test 114 Numpy2LatLon.epsilon: 2.220446049250313e-16
    test 115 Numpy2LatLon.epsilon: 0.0
    test 116 Numpy2LatLon.len: 69
    test 117 Numpy2LatLon.iter: 69
    test 118 Numpy2LatLon.shape: (69, 4)
    test 119 Numpy2LatLon.slice1: 11
    test 120 Numpy2LatLon.slice2: <class 'pygeodesy.points.Numpy2LatLon'>
    test 121 Numpy2LatLon.slice3: 52.220485°N, 000.701418°W
    test 122 Numpy2LatLon.str/repr: Numpy2LatLon('array([[-0.701206, 0. , 52.220489, 0. ]] ... )[69]', ilat=2, ilon=0)
    test 123 Numpy2LatLon.subset: <class 'numpy.ndarray'>
    test 124 Numpy2LatLon.count: 1
    test 125 Numpy2LatLon.index: 10
    test 126 Numpy2LatLon.rfind: 10
    test 127 Numpy2LatLon.in: True
    test 128 Numpy2LatLon.count: 0
    test 129 Numpy2LatLon.find: -1
    test 130 Numpy2LatLon.rfind: -1
    test 131 Numpy2LatLon.not in: True
    test 132 Numpy2LatLon.count: 1
    test 133 Numpy2LatLon.index: 20
    test 134 Numpy2LatLon.rfind: 20
    test 135 Numpy2LatLon.in: True
    test 136 Numpy2LatLon.count: 0
    test 137 Numpy2LatLon.find: -1
    test 138 Numpy2LatLon.rfind: -1
    test 139 Numpy2LatLon.not in: True
    test 140 Numpy2LatLon.count: 1
    test 141 Numpy2LatLon.index: 30
    test 142 Numpy2LatLon.rfind: 30
    test 143 Numpy2LatLon.in: True
    test 144 Numpy2LatLon.count: 0
    test 145 Numpy2LatLon.find: -1
    test 146 Numpy2LatLon.rfind: -1
    test 147 Numpy2LatLon.not in: True
    test 148 Numpy2LatLon.count: 1
    test 149 Numpy2LatLon.index: 40
    test 150 Numpy2LatLon.rfind: 40
    test 151 Numpy2LatLon.in: True
    test 152 Numpy2LatLon.count: 0
    test 153 Numpy2LatLon.find: -1
    test 154 Numpy2LatLon.rfind: -1
    test 155 Numpy2LatLon.not in: True
    test 156 Numpy2LatLon.count: 1
    test 157 Numpy2LatLon.index: 50
    test 158 Numpy2LatLon.rfind: 50
    test 159 Numpy2LatLon.in: True
    test 160 Numpy2LatLon.count: 0
    test 161 Numpy2LatLon.find: -1
    test 162 Numpy2LatLon.rfind: -1
    test 163 Numpy2LatLon.not in: True
    test 164 Numpy2LatLon.count: 1
    test 165 Numpy2LatLon.index: 60
    test 166 Numpy2LatLon.rfind: 60
    test 167 Numpy2LatLon.in: True
    test 168 Numpy2LatLon.count: 0
    test 169 Numpy2LatLon.find: -1
    test 170 Numpy2LatLon.rfind: -1
    test 171 Numpy2LatLon.not in: True
    test 172 Numpy2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 173 Numpy2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 174 Numpy2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 175 Numpy2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 176 Numpy2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 177 Numpy2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 178 Numpy2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 179 Numpy2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 180 Numpy2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 181 Numpy2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 182 Numpy2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 183 Numpy2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 184 Numpy2LatLon.enumerate[*]: 11
    test 185 Numpy2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 186 Numpy2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 187 Numpy2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 188 Numpy2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 189 Numpy2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 190 Numpy2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 191 Numpy2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 192 Numpy2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 193 Numpy2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 194 Numpy2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 195 Numpy2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 196 Numpy2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 197 Numpy2LatLon.findall[0]: (0,)
    test 198 Numpy2LatLon.findall[1]: (1,)
    test 199 Numpy2LatLon.findall[2]: (2,)
    test 200 Numpy2LatLon.findall[3]: (3,)
    test 201 Numpy2LatLon.findall[4]: (4,)
    test 202 Numpy2LatLon.findall[5]: (5,)
    test 203 Numpy2LatLon.findall[6]: (6,)
    test 204 Numpy2LatLon.findall[7]: (7,)
    test 205 Numpy2LatLon.findall[8]: (8,)
    test 206 Numpy2LatLon.findall[9]: (9,)
    test 207 Numpy2LatLon.findall[10]: (10,)
    test 208 Numpy2LatLon.findall[11]: (11,)
    test 209 Numpy2LatLon.findall[*]: 11
    test 210 Numpy2LatLon.isNumpy2: True
    test 211 Numpy2LatLon.isPoints2: False
    test 212 Numpy2LatLon.isTuple2: False
    test 213 Tuple2LatLon.ABC: True
    test 214 Tuple2LatLon.epsilon: 2.220446049250313e-16
    test 215 Tuple2LatLon.epsilon: 0.0
    test 216 Tuple2LatLon.len: 69
    test 217 Tuple2LatLon.iter: 69
    test 218 Tuple2LatLon.slice1: 11
    test 219 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 220 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 221 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 222 Tuple2LatLon.subset: <class 'list'>
    test 223 Tuple2LatLon.count: 1
    test 224 Tuple2LatLon.index: 10
    test 225 Tuple2LatLon.rfind: 10
    test 226 Tuple2LatLon.in: True
    test 227 Tuple2LatLon.count: 0
    test 228 Tuple2LatLon.find: -1
    test 229 Tuple2LatLon.rfind: -1
    test 230 Tuple2LatLon.not in: True
    test 231 Tuple2LatLon.count: 1
    test 232 Tuple2LatLon.index: 20
    test 233 Tuple2LatLon.rfind: 20
    test 234 Tuple2LatLon.in: True
    test 235 Tuple2LatLon.count: 0
    test 236 Tuple2LatLon.find: -1
    test 237 Tuple2LatLon.rfind: -1
    test 238 Tuple2LatLon.not in: True
    test 239 Tuple2LatLon.count: 1
    test 240 Tuple2LatLon.index: 30
    test 241 Tuple2LatLon.rfind: 30
    test 242 Tuple2LatLon.in: True
    test 243 Tuple2LatLon.count: 0
    test 244 Tuple2LatLon.find: -1
    test 245 Tuple2LatLon.rfind: -1
    test 246 Tuple2LatLon.not in: True
    test 247 Tuple2LatLon.count: 1
    test 248 Tuple2LatLon.index: 40
    test 249 Tuple2LatLon.rfind: 40
    test 250 Tuple2LatLon.in: True
    test 251 Tuple2LatLon.count: 0
    test 252 Tuple2LatLon.find: -1
    test 253 Tuple2LatLon.rfind: -1
    test 254 Tuple2LatLon.not in: True
    test 255 Tuple2LatLon.count: 1
    test 256 Tuple2LatLon.index: 50
    test 257 Tuple2LatLon.rfind: 50
    test 258 Tuple2LatLon.in: True
    test 259 Tuple2LatLon.count: 0
    test 260 Tuple2LatLon.find: -1
    test 261 Tuple2LatLon.rfind: -1
    test 262 Tuple2LatLon.not in: True
    test 263 Tuple2LatLon.count: 1
    test 264 Tuple2LatLon.index: 60
    test 265 Tuple2LatLon.rfind: 60
    test 266 Tuple2LatLon.in: True
    test 267 Tuple2LatLon.count: 0
    test 268 Tuple2LatLon.find: -1
    test 269 Tuple2LatLon.rfind: -1
    test 270 Tuple2LatLon.not in: True
    test 271 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 272 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 273 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 274 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 275 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 276 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 277 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 278 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 279 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 280 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 281 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 282 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 283 Tuple2LatLon.enumerate[*]: 11
    test 284 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 285 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 286 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 287 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 288 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 289 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 290 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 291 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 292 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 293 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 294 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 295 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 296 Tuple2LatLon.findall[0]: (0,)
    test 297 Tuple2LatLon.findall[1]: (1,)
    test 298 Tuple2LatLon.findall[2]: (2,)
    test 299 Tuple2LatLon.findall[3]: (3,)
    test 300 Tuple2LatLon.findall[4]: (4,)
    test 301 Tuple2LatLon.findall[5]: (5,)
    test 302 Tuple2LatLon.findall[6]: (6,)
    test 303 Tuple2LatLon.findall[7]: (7,)
    test 304 Tuple2LatLon.findall[8]: (8,)
    test 305 Tuple2LatLon.findall[9]: (9,)
    test 306 Tuple2LatLon.findall[10]: (10,)
    test 307 Tuple2LatLon.findall[11]: (11,)
    test 308 Tuple2LatLon.findall[*]: 11
    test 309 Tuple2LatLon.isNumpy2: False
    test 310 Tuple2LatLon.isPoints2: False
    test 311 Tuple2LatLon.isTuple2: True

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 312 areaOf: 8.811228e+09
    test 313 centroidOf: 45.5, 1.5
    test 314 perimeterOf: 2.673633e+05
    test 315 isclockwise: False
    test 316 isconvex: True
    test 317 ispolar: False
    test 318 areaOf: 7.086883e+09
    test 319 perimeterOf: 2.687460e+05
    test 320 centroidOf: 0.333333, 0.333333
    test 321 isclockwise: True
    test 322 isconvex: True
    test 323 ispolar: False
    test 324 areaOf: 2.827856e+10
    test 325 perimeterOf: 4.717039e+05
    test 326 centroidOf: 1.0, 1.0
    test 327 isclockwise: False
    test 328 isconvex: True
    test 329 ispolar: False
    test 330 areaOf: 2.747297e+13
    test 331 perimeterOf: 2.332643e+07
    test 332 centroidOf: 52.113, 102.123
    test 333 isclockwise: False
    test 334 isconvex: False
    test 335 ispolar: True
    test 336 areaOf: 8.482014e+10
    test 337 perimeterOf: 1.334104e+06
    test 338 centroidOf: 1.167, 1.667
    test 339 isclockwise: False
    test 340 isconvex: False
    test 341 ispolar: False
    test 342 areaOf: 5.151974e+13
    test 343 perimeterOf: 2.638608e+07
    test 344 centroidOf: -19.444, -133.333
    test 345 isclockwise: True
    test 346 isconvex: True
    test 347 ispolar: False
    test 348 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 349 perimeterOf: 1.562029e+07
    test 350 centroidOf: -71.443, -69.683
    test 351 isclockwise: True
    test 352 isconvex: False
    test 353 ispolar: True
    test 354 points2: 18
    test 355 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 356 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 357 isclockwise: True
    test 358 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 359 boundsOf: (-77.9, -163.0, -63.1, 172.0)
    test 360 quadOf: 77.9°S, 163.0°W, 63.1°S, 163.0°W, 63.1°S, 172.0°E, 77.9°S, 172.0°E
    test 361 intermediateTo: 51.368°N, 000.677°E, 'intermediateTo'
    test 362 intermediateTo: True
    test 363 intermediateTo: 51.368°N, 000.677°E
    test 364 intermediateTo: 52.205°N, 000.119°E
    test 365 intermediateTo: 48.857°N, 002.351°E
    test 366 _isLatLon_: _Array2LatLon('[ ... ][1]', ilat=0, ilon=1)
    test 367 latlon: (-66.6, -88.0)
    test 368 philam: (-1.162389, -1.53589)
    test 369 toStr: 66.6°S, 088.0°W, kwds='test'
    test 370 __ne__: False
    test 371 isequalTo: True
    test 372 isequalTo: True
    test 373 latlonheight: (-66.6, -88.0, 0)
    test 374 philamheight: (-1.162389, -1.53589, 0)
    test 375 _N_vector: (0.01386, -0.39691, -0.91775)
    test 376 toNvector: (0.01386, -0.39691, -0.91775)
    test 377 toNvector: (0.01386, -0.396906, -0.917755, 0)  FAILED, KNOWN, expected (0.01386, -0.396906, -0.917755)
    test 378 classof: 66.6°S, 088.0°W
    test 379 others: 66.6°S, 088.0°W
    test 380 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
    test 381 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 382 areaOf: 8.811228e+09
    test 383 centroidOf: 45.5, 1.5
    test 384 perimeterOf: 2.673633e+05
    test 385 isclockwise: False
    test 386 isconvex: True
    test 387 ispolar: False
    test 388 areaOf: 7.086883e+09
    test 389 perimeterOf: 2.687460e+05
    test 390 centroidOf: 0.333333, 0.333333
    test 391 isclockwise: True
    test 392 isconvex: True
    test 393 ispolar: False
    test 394 areaOf: 2.827856e+10
    test 395 perimeterOf: 4.717039e+05
    test 396 centroidOf: 1.0, 1.0
    test 397 isclockwise: False
    test 398 isconvex: True
    test 399 ispolar: False
    test 400 areaOf: 2.747297e+13
    test 401 perimeterOf: 2.332643e+07
    test 402 centroidOf: 52.113, 102.123
    test 403 isclockwise: False
    test 404 isconvex: False
    test 405 ispolar: True
    test 406 areaOf: 8.482014e+10
    test 407 perimeterOf: 1.334104e+06
    test 408 centroidOf: 1.167, 1.667
    test 409 isclockwise: False
    test 410 isconvex: False
    test 411 ispolar: False
    test 412 areaOf: 5.151974e+13
    test 413 perimeterOf: 2.638608e+07
    test 414 centroidOf: -19.444, -133.333
    test 415 isclockwise: True
    test 416 isconvex: True
    test 417 ispolar: False
    test 418 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 419 perimeterOf: 1.562029e+07
    test 420 centroidOf: -71.443, -69.683
    test 421 isclockwise: True
    test 422 isconvex: False
    test 423 ispolar: True
    test 424 points2: 18
    test 425 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 426 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 427 isclockwise: True
    test 428 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 429 latlon: (-66.6, -88.0)
    test 430 philam: (-1.162389, -1.53589)
    test 431 latlonheight: (-66.6, -88.0, 0)
    test 432 philamheight: (-1.162389, -1.53589, 0)
    test 433 _N_vector: (0.01386, -0.39691, -0.91775)
    test 434 toNvector: (0.01386, -0.39691, -0.91775)
    test 435 toNvector: (0.01386, -0.396906, -0.917755)
    test 436 classof: 66.6°S, 088.0°W
    test 437 others: 66.6°S, 088.0°W
    test 438 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 439 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 440 areaOf: 8.811228e+09
    test 441 centroidOf: 45.5, 1.5
    test 442 perimeterOf: 2.673633e+05
    test 443 isclockwise: False
    test 444 isconvex: True
    test 445 ispolar: False
    test 446 areaOf: 7.086883e+09
    test 447 perimeterOf: 2.687460e+05
    test 448 centroidOf: 0.333333, 0.333333
    test 449 isclockwise: True
    test 450 isconvex: True
    test 451 ispolar: False
    test 452 areaOf: 2.827856e+10
    test 453 perimeterOf: 4.717039e+05
    test 454 centroidOf: 1.0, 1.0
    test 455 isclockwise: False
    test 456 isconvex: True
    test 457 ispolar: False
    test 458 areaOf: 2.747297e+13
    test 459 perimeterOf: 2.332643e+07
    test 460 centroidOf: 52.113, 102.123
    test 461 isclockwise: False
    test 462 isconvex: False
    test 463 ispolar: True
    test 464 areaOf: 8.482014e+10
    test 465 perimeterOf: 1.334104e+06
    test 466 centroidOf: 1.167, 1.667
    test 467 isclockwise: False
    test 468 isconvex: False
    test 469 ispolar: False
    test 470 areaOf: 5.151974e+13
    test 471 perimeterOf: 2.638608e+07
    test 472 centroidOf: -19.444, -133.333
    test 473 isclockwise: True
    test 474 isconvex: True
    test 475 ispolar: False
    test 476 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 477 perimeterOf: 1.562029e+07
    test 478 centroidOf: -71.443, -69.683
    test 479 isclockwise: True
    test 480 isconvex: False
    test 481 ispolar: True
    test 482 points2: 18
    test 483 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 484 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 485 isclockwise: True
    test 486 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 487 latlon: (-66.6, -88.0)
    test 488 philam: (-1.162389, -1.53589)
    test 489 latlonheight: (-66.6, -88.0, 0)
    test 490 philamheight: (-1.162389, -1.53589, 0)
    test 491 _N_vector: (0.01386, -0.39691, -0.91775)
    test 492 toNvector: (0.01386, -0.39691, -0.91775)
    test 493 toNvector: (0.01386, -0.396906, -0.917755)
    test 494 classof: 66.6°S, 088.0°W
    test 495 others: 66.6°S, 088.0°W
    test 496 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 497 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 498 areaOf: 8.811228e+09
    test 499 centroidOf: 45.5, 1.5
    test 500 perimeterOf: 2.673633e+05
    test 501 isclockwise: False
    test 502 isconvex: True
    test 503 ispolar: False
    test 504 areaOf: 7.086883e+09
    test 505 perimeterOf: 2.687460e+05
    test 506 centroidOf: 0.333333, 0.333333
    test 507 isclockwise: True
    test 508 isconvex: True
    test 509 ispolar: False
    test 510 areaOf: 2.827856e+10
    test 511 perimeterOf: 4.717039e+05
    test 512 centroidOf: 1.0, 1.0
    test 513 isclockwise: False
    test 514 isconvex: True
    test 515 ispolar: False
    test 516 areaOf: 2.747297e+13
    test 517 perimeterOf: 2.332643e+07
    test 518 centroidOf: 52.113, 102.123
    test 519 isclockwise: False
    test 520 isconvex: False
    test 521 ispolar: True
    test 522 areaOf: 8.482014e+10
    test 523 perimeterOf: 1.334104e+06
    test 524 centroidOf: 1.167, 1.667
    test 525 isclockwise: False
    test 526 isconvex: False
    test 527 ispolar: False
    test 528 areaOf: 5.151974e+13
    test 529 perimeterOf: 2.638608e+07
    test 530 centroidOf: -19.444, -133.333
    test 531 isclockwise: True
    test 532 isconvex: True
    test 533 ispolar: False
    test 534 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 535 perimeterOf: 1.562029e+07
    test 536 centroidOf: -71.443, -69.683
    test 537 isclockwise: True
    test 538 isconvex: False
    test 539 ispolar: True
    test 540 points2: 18
    test 541 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 542 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 543 isclockwise: True
    test 544 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 545 latlon: (-66.6, -88.0)
    test 546 philam: (-1.162389, -1.53589)
    test 547 latlonheight: (-66.6, -88.0, 0)
    test 548 philamheight: (-1.162389, -1.53589, 0)
    test 549 _N_vector: (0.01386, -0.39691, -0.91775)
    test 550 toNvector: (0.01386, -0.39691, -0.91775)
    test 551 toNvector: (0.01386, -0.396906, -0.917755)
    test 552 classof: 66.6°S, 088.0°W
    test 553 others: 66.6°S, 088.0°W
    test 554 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 555 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 556 areaOf: 8.811228e+09
    test 557 centroidOf: 45.5, 1.5
    test 558 perimeterOf: 2.673633e+05
    test 559 isclockwise: False
    test 560 isconvex: True
    test 561 ispolar: False
    test 562 areaOf: 7.086883e+09
    test 563 perimeterOf: 2.687460e+05
    test 564 centroidOf: 0.333333, 0.333333
    test 565 isclockwise: True
    test 566 isconvex: True
    test 567 ispolar: False
    test 568 areaOf: 2.827856e+10
    test 569 perimeterOf: 4.717039e+05
    test 570 centroidOf: 1.0, 1.0
    test 571 isclockwise: False
    test 572 isconvex: True
    test 573 ispolar: False
    test 574 areaOf: 2.747297e+13
    test 575 perimeterOf: 2.332643e+07
    test 576 centroidOf: 52.113, 102.123
    test 577 isclockwise: False
    test 578 isconvex: False
    test 579 ispolar: True
    test 580 areaOf: 8.482014e+10
    test 581 perimeterOf: 1.334104e+06
    test 582 centroidOf: 1.167, 1.667
    test 583 isclockwise: False
    test 584 isconvex: False
    test 585 ispolar: False
    test 586 areaOf: 5.151974e+13
    test 587 perimeterOf: 2.638608e+07
    test 588 centroidOf: -19.444, -133.333
    test 589 isclockwise: True
    test 590 isconvex: True
    test 591 ispolar: False
    test 592 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 593 perimeterOf: 1.562029e+07
    test 594 centroidOf: -71.443, -69.683
    test 595 isclockwise: True
    test 596 isconvex: False
    test 597 ispolar: True
    test 598 points2: 18
    test 599 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 600 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 601 isclockwise: True
    test 602 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 603 latlon: (-66.6, -88.0)
    test 604 philam: (-1.162389, -1.53589)
    test 605 latlonheight: (-66.6, -88.0, 0)
    test 606 philamheight: (-1.162389, -1.53589, 0)
    test 607 _N_vector: (0.01386, -0.39691, -0.91775)
    test 608 toNvector: (0.01386, -0.39691, -0.91775)
    test 609 toNvector: (0.01386, -0.396906, -0.917755)
    test 610 classof: 66.6°S, 088.0°W
    test 611 others: 66.6°S, 088.0°W
    test 612 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 613 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 614 areaOf: 8.811228e+09
    test 615 centroidOf: 45.5, 1.5
    test 616 perimeterOf: 2.673633e+05
    test 617 isclockwise: False
    test 618 isconvex: True
    test 619 ispolar: False
    test 620 areaOf: 7.086883e+09
    test 621 perimeterOf: 2.687460e+05
    test 622 centroidOf: 0.333333, 0.333333
    test 623 isclockwise: True
    test 624 isconvex: True
    test 625 ispolar: False
    test 626 areaOf: 2.827856e+10
    test 627 perimeterOf: 4.717039e+05
    test 628 centroidOf: 1.0, 1.0
    test 629 isclockwise: False
    test 630 isconvex: True
    test 631 ispolar: False
    test 632 areaOf: 2.747297e+13
    test 633 perimeterOf: 2.332643e+07
    test 634 centroidOf: 52.113, 102.123
    test 635 isclockwise: False
    test 636 isconvex: False
    test 637 ispolar: True
    test 638 areaOf: 8.482014e+10
    test 639 perimeterOf: 1.334104e+06
    test 640 centroidOf: 1.167, 1.667
    test 641 isclockwise: False
    test 642 isconvex: False
    test 643 ispolar: False
    test 644 areaOf: 5.151974e+13
    test 645 perimeterOf: 2.638608e+07
    test 646 centroidOf: -19.444, -133.333
    test 647 isclockwise: True
    test 648 isconvex: True
    test 649 ispolar: False
    test 650 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 651 perimeterOf: 1.562029e+07
    test 652 centroidOf: -71.443, -69.683
    test 653 isclockwise: True
    test 654 isconvex: False
    test 655 ispolar: True
    test 656 points2: 18
    test 657 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 658 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 659 isclockwise: True
    test 660 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 661 latlon: (-66.6, -88.0)
    test 662 philam: (-1.162389, -1.53589)
    test 663 latlonheight: (-66.6, -88.0, 0)
    test 664 philamheight: (-1.162389, -1.53589, 0)
    test 665 _N_vector: (0.01386, -0.39691, -0.91775)
    test 666 toNvector: (0.01386, -0.39691, -0.91775)
    test 667 toNvector: (0.01386, -0.396906, -0.917755)
    test 668 classof: 66.6°S, 088.0°W
    test 669 others: 66.6°S, 088.0°W
    test 670 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 671 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 22.06.26, LatLon=<class 'pygeodesy.ellipsoidalExact.LatLon'>)
    test 672 areaOf: 8.811228e+09
    test 673 centroidOf: 45.5, 1.5
    test 674 perimeterOf: 2.673633e+05
    test 675 isclockwise: False
    test 676 isconvex: True
    test 677 ispolar: False
    test 678 areaOf: 7.086883e+09
    test 679 perimeterOf: 2.687460e+05
    test 680 centroidOf: 0.333333, 0.333333
    test 681 isclockwise: True
    test 682 isconvex: True
    test 683 ispolar: False
    test 684 areaOf: 2.827856e+10
    test 685 perimeterOf: 4.717039e+05
    test 686 centroidOf: 1.0, 1.0
    test 687 isclockwise: False
    test 688 isconvex: True
    test 689 ispolar: False
    test 690 areaOf: 2.747297e+13
    test 691 perimeterOf: 2.332643e+07
    test 692 centroidOf: 52.113, 102.123
    test 693 isclockwise: False
    test 694 isconvex: False
    test 695 ispolar: True
    test 696 areaOf: 8.482014e+10
    test 697 perimeterOf: 1.334104e+06
    test 698 centroidOf: 1.167, 1.667
    test 699 isclockwise: False
    test 700 isconvex: False
    test 701 ispolar: False
    test 702 areaOf: 5.151974e+13
    test 703 perimeterOf: 2.638608e+07
    test 704 centroidOf: -19.444, -133.333
    test 705 isclockwise: True
    test 706 isconvex: True
    test 707 ispolar: False
    test 708 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 709 perimeterOf: 1.562029e+07
    test 710 centroidOf: -71.443, -69.683
    test 711 isclockwise: True
    test 712 isconvex: False
    test 713 ispolar: True
    test 714 points2: 18
    test 715 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 716 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 717 isclockwise: True
    test 718 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2098430.887891
    test 719 latlon: (-66.6, -88.0)
    test 720 philam: (-1.162389, -1.53589)
    test 721 latlonheight: (-66.6, -88.0, 0)
    test 722 philamheight: (-1.162389, -1.53589, 0)
    test 723 _N_vector: (0.01386, -0.39691, -0.91775)
    test 724 toNvector: (0.01386, -0.39691, -0.91775)
    test 725 toNvector: (0.01386, -0.396906, -0.917755)
    test 726 classof: 66.6°S, 088.0°W
    test 727 others: 66.6°S, 088.0°W
    test 728 copy(LatLon): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)
    test 729 LatLon.copy(): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)

    testArea(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 730 luneOf: 1.27516405431022e+14

    testArea(pygeodesy.ellipsoidalExact, 22.07.07)
    test 731 luneOf: 1.27516405431022e+14

    22 of 731 testPoints.py tests (3.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 729.134 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testProps.py

    testing testProps.py 22.05.13

    test<class 'pygeodesy.named._NamedBase'>(pygeodesy.props, 22.06.28)
    test 1 P1: 1
    test 2 p1: 2
    test 3 P2: 1
    test 4 p2: 3
    test 5 q1: 1
    test 6 q2: 2
    test 7 q3: True
    test 8 u1: None
    test 9 u2: U
    test 10 P3: 4
    test 11 p3: 5
    test 12 q4: False
    test 13 q5: 2
    test 14 u3: None
    test 15 u4: U
    test 16 X1: immutable Property_RO: X.setter X
    test 17 X2: invalid Property_RO: X.deleter X
    test 18 y1: immutable property_RO: y.setter y
    test 19 y2: invalid property_RO: y.deleter y
    test 20 Z1: invalid Property: Z.deleter Z
    test 21 Z2: invalid Property: Z.getter Z

    test<class 'pygeodesy.ellipsoids.Ellipsoid'>(pygeodesy.props, 22.06.28)
    test 22 P1: 1
    test 23 p1: 2
    test 24 P2: 1
    test 25 p2: 3
    test 26 q1: 1
    test 27 q2: 2
    test 28 q3: True
    test 29 u1: None
    test 30 u2: U
    test 31 P3: 4
    test 32 p3: 5
    test 33 q4: False
    test 34 q5: 2
    test 35 u3: None
    test 36 u4: U
    test 37 X1: immutable Property_RO: X.setter X
    test 38 X2: invalid Property_RO: X.deleter X
    test 39 y1: immutable property_RO: y.setter y
    test 40 y2: invalid property_RO: y.deleter y
    test 41 Z1: invalid Property: Z.deleter Z
    test 42 Z2: invalid Property: Z.getter Z

    all 42 testProps.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 543.118 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testResections.py
./test/testResections.py:39: DeprecationWarning: method L{__main__.Cartesian_.collins} has been DEPRECATED, use method L{collins5}.
  self.test(collins.__name__, C_(A).collins(C, B, 109.5125, 115.0889), t)  # DEPRECATED
./test/testResections.py:55: DeprecationWarning: method L{__main__.Cartesian_.tienstra} has been DEPRECATED, use method L{tienstra7}.
  self.test(tienstra.__name__, C_(A).tienstra(B, C, 115.0889, None, 109.5125), t)  # DEPRECATED
./test/testResections.py:64: DeprecationWarning: function L{pygeodesy.deprecated.collins} has been DEPRECATED, use function L{pygeodesy.collins5}.
  self.test(collins.__name__, collins(A, C, B, 109.3, 115.1), t)  # DEPRECATED
./test/testResections.py:72: DeprecationWarning: function L{pygeodesy.deprecated.tienstra} has been DEPRECATED, use function L{pygeodesy.tienstra7}.
  self.test(tienstra.__name__, tienstra(A, B, C, 115.1, beta=135.6, gamma=109.3), t)  # DEPRECATED

    testing testResections.py 22.04.22
    test 1 cassini: (2128.3903, 5578.1443, 0)
    test 2 cassini: Cartesian_(2128.3903, 5578.1443, 0)
    test 3 collins5: (2128.3903, 5578.1443, 0)
    test 4 collins5: (1830.5948, 2576.2429, 0)
    test 5 collins5: 1581.1388, 1562.0499, 2121.3203
    test 6 collins5: Cartesian_(2128.3903, 5578.1443, 0)
    test 7 collins5: Cartesian_(1830.5948, 2576.2429, 0)
    test 8 collins5: 1581.1388, 1562.0499, 2121.3203
    test 9 collins5: 1581.1388, 1562.0499, 2121.3203
    test 10 collins: (Cartesian_(2128.39, 5578.144, 0), Cartesian_(1830.595, 2576.243, 0), 1581.13883, 1562.049935, 2121.320344)
    test 11 pierlot: (2128.3903, 5578.1443, 0)
    test 12 pierlot: Cartesian_(2128.3903, 5578.1443, 0)
    test 13 pierlot: Cartesian_(2128.3903, 5578.1443, 0.0)
    test 14 tienstra7: (2128.3903, 5578.1443, 0)
    test 15 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 16 tienstra7: Cartesian_(2128.3903, 5578.1443, 0)
    test 17 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 18 tienstra: (Cartesian_(2128.39, 5578.144, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)
    test 19 cassini: (2129.3018, 5575.8016, 0)
    test 20 collins5: (2129.3018, 5575.8016, 0)
    test 21 collins5: (1835.1911, 2563.0708, 0)
    test 22 collins5: 1581.1388, 1562.0499, 2121.3203
    test 23 collins: (Vector3d(2129.30185, 5575.80164, 0), Vector3d(1835.19112, 2563.07083, 0), 1581.13883, 1562.049935, 2121.320344)
    test 24 pierlot: (2129.3018, 5575.8016, 0)
    test 25 tienstra7: (2129.3018, 5575.8016, 0)
    test 26 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 27 tienstra: (Vector3d(2129.30185, 5575.80164, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 28 triSide4: (10.0, 30.0, 0.785398, 8.840862)
    test 29 snellius3: (17.54582, 38.564239, 46.317675)
    test 30 snellius3: (844.880591, 571.107418, 835.462796)
    test 31 snellius3: (128.557522, 100.0, 187.938524)
    test 32 snellius3: (567.480866, 847.344375, 832.446688)
    test 33 snellius3: (4064.197388, 3652.539386, 4988.197388)

    test 34 wildberger3: (17.54582, 38.56424, 46.317675)
    test 35 wildberger3: (844.880591, 571.107418, 835.462796)
    test 36 wildberger3: (128.557522, 100.0, 187.938524)
    test 37 wildberger3: (567.480866, 847.344375, 832.446688)
    test 38 wildberger3: (4064.197323, 3652.539342, 4988.197355)

    test 39 triAngle: 3.141592654
    test 40 triAngle4: (1.570796, 1.570796, 0.0, 0.0)
    test 41 triSide2: (2.0, 0.0)
    test 42 triSide2: (2.0, 3.141593)

    4 of 42 testResections.py tests (9.5%) FAILED, incl. 4 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 7.274 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testRhumbx.py
./test/testRhumbx.py:83: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb.Direct7} has been DEPRECATED, use method L{Rhumb.Direct8}.
  r = R.Direct7(40.6, -73.8, -92.38889, 12782581.068)  # coverage
./pygeodesy/rhumbx.py:175: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb8Tuple._to7Tuple} has been DEPRECATED, do not use!
  return self.Direct8(lat1, lon1, azi12, s12, outmask=outmask)._to7Tuple()
./pygeodesy/deprecated/__init__.py:43: DeprecationWarning: class L{pygeodesy.deprecated.Rhumb7Tuple} has been DEPRECATED, use class L{Rhumb8Tuple} ignoring item C{a12}.
  deprecated_class(cls)
./test/testRhumbx.py:86: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toDirect9Tuple} has been DEPRECATED.
  t = str(r.toDirect9Tuple())  # coverage
./pygeodesy/deprecated/__init__.py:184: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toRhumb8Tuple} has been DEPRECATED.
  return self.toRhumb8Tuple().toDirect9Tuple(self, **kwds)
./test/testRhumbx.py:180: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb.Inverse7} has been DEPRECATED, use method L{Rhumb.Inverse8}.
  r = P.Inverse7(40.6, -73.8, 51.6, -0.5)  # coverage
./pygeodesy/rhumbx.py:359: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb8Tuple._to7Tuple} has been DEPRECATED, do not use!
  return self.Inverse8(lat1, lon1, azi12, s12, outmask=outmask)._to7Tuple()
./test/testRhumbx.py:183: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toInverse10Tuple} has been DEPRECATED.
  t = str(r.toInverse10Tuple())
./pygeodesy/deprecated/__init__.py:192: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toRhumb8Tuple} has been DEPRECATED.
  return self.toRhumb8Tuple().toInverse10Tuple(self, **kwds)

    testing testRhumbx.py 22.06.08 (module pygeodesy.rhumbx 22.07.07)

    testDirectX vs ...(pygeodesy.rhumbx, 22.07.07)
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.79999
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.23651
    test 6 Direct.s12: 12782581.068

    test 7 GDict.azi12: 51
    test 8 GDict.lat1: 40.6
    test 9 GDict.lat2: 71.688899882813
    test 10 GDict.lon1: -73.8
    test 11 GDict.lon2: 0.255519824423345  FAILED, KNOWN, expected 0.255519824423359
    test 12 GDict.s12: 5500000
    test 13 GDict.S12: 44095641862956.1

    test 14 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 15 Rhumb: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True)

    test 16 Direct.azi12: -92.38889
    test 17 Direct.lat1: 40.6
    test 18 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 19 Direct.lon1: -73.8
    test 20 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 21 Direct.s12: 12782581.068
    test 22 Direct7: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.8125)
    test 23 toDirect9Tuple: (NAN, 35.799996, 140.300004, -92.38889, 12782581.068, 12782581.068, 1.0, 1.0, -63760638302268.8125)
    test 24 DirectLine: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.8125)

    test 25 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 26 DirectLine: TMorder=6, azi12=-51.0, exact=True, lat1=35.8, lon1=140.3, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)

    testInverseX vs ...(pygeodesy.rhumbx, 22.07.07)
    test 27 Inverse.azi12: -92.3888879816997  FAILED, KNOWN, expected -92.38889
    test 28 Inverse.lat1: 40.6
    test 29 Inverse.lat2: 35.8
    test 30 Inverse.lon1: -73.8
    test 31 Inverse.lon2: 140.3
    test 32 Inverse.S12: -63760642939072.5  FAILED, KNOWN, expected -63760642939073
    test 33 Inverse.s12: 12782581.0676842

    test 34 GDict.azi12: 77.7683897102557
    test 35 GDict.lat1: 40.6
    test 36 GDict.lat2: 51.6
    test 37 GDict.lon1: -73.8
    test 38 GDict.lon2: -0.5
    test 39 GDict.s12: 5771083.38332803
    test 40 GDict.S12: 37395209100030.4

    test 41 Inverse.azi12: 103.582833003411  FAILED, KNOWN, expected 103.582833333333
    test 42 Inverse.lat1: 40.6397222222222  FAILED, KNOWN, expected 40.639722
    test 43 Inverse.lat2: 1.35916666666667  FAILED, KNOWN, expected 1.359167
    test 44 Inverse.lon2: 103.989444444444  FAILED, KNOWN, expected 103.989444
    test 45 Inverse.s12: 18523563.0423774  FAILED, KNOWN, expected 18523563

    test 46 0,000 Km lat2: 40:38:23.0N
    test 47 0,000 Km lon2: 073:46:44.0W
    test 48 0,000 Km S12 : 0
    test 49 1,000 Km lat2: 36:24:30.3N
    test 50 1,000 Km lon2: 051:28:26.4W
    test 51 1,000 Km S12 : 9817078307820  FAILED, KNOWN, expected 9817078307821
    test 52 2,000 Km lat2: 32:10:26.8N
    test 53 2,000 Km lon2: 030:20:57.3W
    test 54 2,000 Km S12 : 18224745682004  FAILED, KNOWN, expected 18224745682005
    test 55 3,000 Km lat2: 27:56:13.2N
    test 56 3,000 Km lon2: 010:10:54.2W
    test 57 3,000 Km S12 : 25358020327741
    test 58 4,000 Km lat2: 23:41:50.1N
    test 59 4,000 Km lon2: 009:12:45.5E
    test 60 4,000 Km S12 : 31321269267101  FAILED, KNOWN, expected 31321269267102
    test 61 5,000 Km lat2: 19:27:18.7N
    test 62 5,000 Km lon2: 027:59:22.1E
    test 63 5,000 Km S12 : 36195163180159
    test 64 6,000 Km lat2: 15:12:40.2N
    test 65 6,000 Km lon2: 046:17:01.1E
    test 66 6,000 Km S12 : 40041499143669
    test 67 7,000 Km lat2: 10:57:55.9N
    test 68 7,000 Km lon2: 064:12:52.8E
    test 69 7,000 Km S12 : 42906570007050
    test 70 8,000 Km lat2: 06:43:07.3N
    test 71 8,000 Km lon2: 081:53:28.8E
    test 72 8,000 Km S12 : 44823504180199  FAILED, KNOWN, expected 44823504180200
    test 73 9,000 Km lat2: 02:28:16.2N
    test 74 9,000 Km lon2: 099:24:54.5E
    test 75 9,000 Km S12 : 45813843358737
    test 76 10,000 Km lat2: 01:46:36.0S
    test 77 10,000 Km lon2: 116:52:59.7E
    test 78 10,000 Km S12 : 45888525219677

    test 79 Inverse: {a12: 51.420061, azi12: 77.692032, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, name: '_Prolate', s12: 5733622.743165}
    test 80 Inverse7: (40.6, -73.8, 51.6, -0.5, 77.692032, 5733622.743165, 37469093881942.273438)
    test 81 toInverse10Tuple: (NAN, 5733622.743165, 0.977016, 0.213166, 0.977016, 0.213166, 5733622.743165, 1.0, 1.0, 37469093881942.273438)
    test 82 InverseLine: -102.23161028974432

    test 83 R.exact: True
    test 84 R.exact: False
    test 85 R: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=False)

    test 86 R.exact: True
    test 87 R.Line.exact: True
    test 88 R.Line: RhumbLine(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 89 orders: (6, 6)
    test 90 orders: (4, 8)

    test 91 at 0 nearestOn4: NearestOn4Tuple(lat=0.0, lon=0.0, distance=4452779.631731, normal=90.0)
    test 92 at 0 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 93 at 0 iteration: 2
    test 94 at 3 nearestOn4: NearestOn4Tuple(lat=1.78887, lon=-0.99811, distance=4567437.385459, normal=93.0)
    test 95 at 3 distance2: Distance2Tuple(distance=2017489.178337, initial=-176.913538)
    test 96 at 3 iteration: 18
    test 97 at 6 nearestOn4: NearestOn4Tuple(lat=3.621299, lon=-1.782857, distance=4665385.363707, normal=96.0)
    test 98 at 6 distance2: Distance2Tuple(distance=1822249.076337, initial=-173.902054)
    test 99 at 6 iteration: 19
    test 100 at 9 nearestOn4: NearestOn4Tuple(lat=5.484985, lon=-2.3602, distance=4747259.943739, normal=99.0)
    test 101 at 9 distance2: Distance2Tuple(distance=1626056.569178, initial=-170.957822)
    test 102 at 9 iteration: 20
    test 103 at 12 nearestOn4: NearestOn4Tuple(lat=7.370116, lon=-2.73481, distance=4813660.672246, normal=102.0)
    test 104 at 12 distance2: Distance2Tuple(distance=1428212.934231, initial=-168.072177)
    test 105 at 12 iteration: 20
    test 106 at 15 nearestOn4: NearestOn4Tuple(lat=9.268415, lon=-2.909634, distance=4865124.821218, normal=105.0)
    test 107 at 15 distance2: Distance2Tuple(distance=1227972.969826, initial=-165.235791)
    test 108 at 15 iteration: 20
    test 109 at 18 nearestOn4: NearestOn4Tuple(lat=11.172185, lon=-2.885742, distance=4902118.749304, normal=108.0)
    test 110 at 18 distance2: Distance2Tuple(distance=1024605.530336, initial=-162.438792)
    test 111 at 18 iteration: 20
    test 112 at 21 nearestOn4: NearestOn4Tuple(lat=13.073424, lon=-2.662411, distance=4925040.440464, normal=111.0)
    test 113 at 21 distance2: Distance2Tuple(distance=817449.876114, initial=-159.670792)
    test 114 at 21 iteration: 19
    test 115 at 24 nearestOn4: NearestOn4Tuple(lat=14.963037, lon=-2.237368, distance=4934228.141285, normal=114.0)
    test 116 at 24 distance2: Distance2Tuple(distance=605965.483538, initial=-156.920863)
    test 117 at 24 iteration: 18
    test 118 at 27 nearestOn4: NearestOn4Tuple(lat=16.830177, lon=-1.607176, distance=4929970.763676, normal=117.0)
    test 119 at 27 distance2: Distance2Tuple(distance=389772.69206, initial=-154.177522)
    test 120 at 27 iteration: 17
    test 121 at 30 nearestOn4: NearestOn4Tuple(lat=18.661739, lon=-0.767728, distance=4912516.651406, normal=120.0)
    test 122 at 30 distance2: Distance2Tuple(distance=168681.79275, initial=-151.428749)
    test 123 at 30 iteration: 15
    test 124 at 33 nearestOn4: NearestOn4Tuple(lat=20.442006, lon=0.285131, distance=4882078.472693, normal=123.0)
    test 125 at 33 distance2: Distance2Tuple(distance=57291.056741, initial=31.337909)
    test 126 at 33 iteration: 14
    test 127 at 36 nearestOn4: NearestOn4Tuple(lat=22.152468, lon=1.554872, distance=4838833.433767, normal=126.0)
    test 128 at 36 distance2: Distance2Tuple(distance=287921.351972, initial=34.135132)
    test 129 at 36 iteration: 13
    test 130 at 39 nearestOn4: NearestOn4Tuple(lat=23.77182, lon=3.04338, distance=4782919.681256, normal=129.0)
    test 131 at 39 distance2: Distance2Tuple(distance=522785.823462, initial=36.975477)
    test 132 at 39 iteration: 12
    test 133 at 42 nearestOn4: NearestOn4Tuple(lat=25.276135, lon=4.749884, distance=4714431.597517, normal=132.0)
    test 134 at 42 distance2: Distance2Tuple(distance=761281.13012, initial=39.870848)
    test 135 at 42 iteration: 12
    test 136 at 45 nearestOn4: NearestOn4Tuple(lat=26.639267, lon=6.669676, distance=4633418.568418, normal=135.0)
    test 137 at 45 distance2: Distance2Tuple(distance=1002647.475734, initial=42.831764)
    test 138 at 45 iteration: 12
    test 139 at 48 nearestOn4: NearestOn4Tuple(lat=27.833525, lon=8.792659, distance=4539893.426211, normal=138.0)
    test 140 at 48 distance2: Distance2Tuple(distance=1245992.475272, initial=45.866374)
    test 141 at 48 iteration: 12
    test 142 at 51 nearestOn4: NearestOn4Tuple(lat=28.830702, lon=11.101809, distance=4433857.579882, normal=141.0)
    test 143 at 51 distance2: Distance2Tuple(distance=1490310.992237, initial=48.979263)
    test 144 at 51 iteration: 12
    test 145 at 54 nearestOn4: NearestOn4Tuple(lat=29.60355, lon=13.571793, distance=4315348.787094, normal=144.0)
    test 146 at 54 distance2: Distance2Tuple(distance=1734498.226471, initial=52.17011)
    test 147 at 54 iteration: 12
    test 148 at 57 nearestOn4: NearestOn4Tuple(lat=30.12774, lon=16.16811, distance=4184513.198865, normal=147.0)
    test 149 at 57 distance2: Distance2Tuple(distance=1977356.104695, initial=55.432438)
    test 150 at 57 iteration: 12
    test 151 at 60 nearestOn4: NearestOn4Tuple(lat=30.384199, lon=18.847259, distance=4041694.757223, normal=150.0)
    test 152 at 60 distance2: Distance2Tuple(distance=2217596.775596, initial=58.752785)
    test 153 at 60 iteration: 13
    test 154 at 63 nearestOn4: NearestOn4Tuple(lat=30.361518, lon=21.558351, distance=3887523.410219, normal=153.0)
    test 155 at 63 distance2: Distance2Tuple(distance=2453850.681967, initial=62.110741)
    test 156 at 63 iteration: 13
    test 157 at 66 nearestOn4: NearestOn4Tuple(lat=30.057906, lon=24.246352, distance=3722973.817216, normal=156.0)
    test 158 at 66 distance2: Distance2Tuple(distance=2684688.240253, initial=65.480201)
    test 159 at 66 iteration: 13
    test 160 at 69 nearestOn4: NearestOn4Tuple(lat=29.482072, lon=26.856511, distance=3549365.860101, normal=159.0)
    test 161 at 69 distance2: Distance2Tuple(distance=2908661.404266, initial=68.831849)
    test 162 at 69 iteration: 13
    test 163 at 72 nearestOn4: NearestOn4Tuple(lat=28.652617, lon=29.339085, distance=3368292.365392, normal=162.0)
    test 164 at 72 distance2: Distance2Tuple(distance=3124363.961966, initial=72.136463)
    test 165 at 72 iteration: 14
    test 166 at 75 nearestOn4: NearestOn4Tuple(lat=27.595973, lon=31.653166, distance=3181483.93514, normal=165.0)
    test 167 at 75 distance2: Distance2Tuple(distance=3330500.367925, initial=75.368254)
    test 168 at 75 iteration: 14
    test 169 at 78 nearestOn4: NearestOn4Tuple(lat=26.34337, lon=33.768789, distance=2990642.863598, normal=168.0)
    test 170 at 78 distance2: Distance2Tuple(distance=3525947.426348, initial=78.507468)
    test 171 at 78 iteration: 15
    test 172 at 81 nearestOn4: NearestOn4Tuple(lat=24.927599, lon=35.667071, distance=2797285.607317, normal=171.0)
    test 173 at 81 distance2: Distance2Tuple(distance=3709794.568962, initial=81.541766)
    test 174 at 81 iteration: 15
    test 175 at 84 nearestOn4: NearestOn4Tuple(lat=23.380219, lon=37.338792, distance=2602624.246813, normal=174.0)
    test 176 at 84 distance2: Distance2Tuple(distance=3881355.597301, initial=84.466366)
    test 177 at 84 iteration: 16
    test 178 at 87 nearestOn4: NearestOn4Tuple(lat=21.729621, lon=38.782099, distance=2407500.005448, normal=177.0)
    test 179 at 87 distance2: Distance2Tuple(distance=4040153.204404, initial=87.283272)
    test 180 at 87 iteration: 16
    test 181 at 90 nearestOn4: NearestOn4Tuple(lat=20.0, lon=40.0, distance=2212366.254172, normal=180.0)
    test 182 at 90 distance2: Distance2Tuple(distance=4185883.452394, initial=90.0)
    test 183 at 90 iteration: 2
    test 184 at 93 nearestOn4: NearestOn4Tuple(lat=18.21113, lon=40.99811, distance=2017309.778494, normal=-177.0)
    test 185 at 93 distance2: Distance2Tuple(distance=4318369.394574, initial=92.628183)
    test 186 at 93 iteration: 18
    test 187 at 96 nearestOn4: NearestOn4Tuple(lat=16.378701, lon=41.782857, distance=1822097.141563, normal=-174.0)
    test 188 at 96 distance2: Distance2Tuple(distance=4437512.122777, initial=95.182272)
    test 189 at 96 iteration: 19
    test 190 at 99 nearestOn4: NearestOn4Tuple(lat=14.515015, lon=42.3602, distance=1626234.955125, normal=-171.0)
    test 191 at 99 distance2: Distance2Tuple(distance=4543245.293056, initial=97.678448)
    test 192 at 99 iteration: 20
    test 193 at 102 nearestOn4: NearestOn4Tuple(lat=12.629884, lon=42.73481, distance=1429036.030972, normal=-168.0)
    test 194 at 102 distance2: Distance2Tuple(distance=4635496.852428, initial=100.133763)
    test 195 at 102 iteration: 20
    test 196 at 105 nearestOn4: NearestOn4Tuple(lat=10.731585, lon=42.909634, distance=1229686.200109, normal=-165.0)
    test 197 at 105 distance2: Distance2Tuple(distance=4714159.823993, initial=102.565486)
    test 198 at 105 iteration: 20
    test 199 at 108 nearestOn4: NearestOn4Tuple(lat=8.827815, lon=42.885742, distance=1027308.413714, normal=-162.0)
    test 200 at 108 distance2: Distance2Tuple(distance=4779072.735062, initial=104.990626)
    test 201 at 108 iteration: 20
    test 202 at 111 nearestOn4: NearestOn4Tuple(lat=6.926576, lon=42.662411, distance=821021.78405, normal=-159.0)
    test 203 at 111 distance2: Distance2Tuple(distance=4830009.484467, initial=107.425584)
    test 204 at 111 iteration: 19
    test 205 at 114 nearestOn4: NearestOn4Tuple(lat=5.036963, lon=42.237368, distance=609993.754392, normal=-156.0)
    test 206 at 114 distance2: Distance2Tuple(distance=4866678.02413, initial=109.885922)
    test 207 at 114 iteration: 18
    test 208 at 117 nearestOn4: NearestOn4Tuple(lat=3.169823, lon=41.607176, distance=393484.06554, normal=-153.0)
    test 209 at 117 distance2: Distance2Tuple(distance=4888727.07477, initial=112.386218)
    test 210 at 117 iteration: 17
    test 211 at 120 nearestOn4: NearestOn4Tuple(lat=1.338261, lon=40.767728, distance=170879.9747, normal=-150.0)
    test 212 at 120 distance2: Distance2Tuple(distance=4895760.153166, initial=114.939984)
    test 213 at 120 iteration: 15
    test 214 at 123 nearestOn4: NearestOn4Tuple(lat=-0.442006, lon=39.714869, distance=58276.59935, normal=-147.0)
    test 215 at 123 distance2: Distance2Tuple(distance=4887356.42216, initial=117.559632)
    test 216 at 123 iteration: 14
    test 217 at 126 nearestOn4: NearestOn4Tuple(lat=-2.152468, lon=38.445128, distance=294267.652925, normal=-144.0)
    test 218 at 126 distance2: Distance2Tuple(distance=4863098.229148, initial=120.256447)
    test 219 at 126 iteration: 13
    test 220 at 129 nearestOn4: NearestOn4Tuple(lat=-3.77182, lon=36.95662, distance=537179.270746, normal=-141.0)
    test 221 at 129 distance2: Distance2Tuple(distance=4822605.581331, initial=123.040514)
    test 222 at 129 iteration: 12
    test 223 at 132 nearestOn4: NearestOn4Tuple(lat=-5.276135, lon=35.250116, distance=786877.93689, normal=-138.0)
    test 224 at 132 distance2: Distance2Tuple(distance=4765578.049049, initial=125.920549)
    test 225 at 132 iteration: 12
    test 226 at 135 nearestOn4: NearestOn4Tuple(lat=-6.639267, lon=33.330324, distance=1042977.288036, normal=-135.0)
    test 227 at 135 distance2: Distance2Tuple(distance=4691844.442335, initial=128.903552)
    test 228 at 135 iteration: 12
    test 229 at 138 nearestOn4: NearestOn4Tuple(lat=-7.833525, lon=31.207341, distance=1304791.465619, normal=-132.0)
    test 230 at 138 distance2: Distance2Tuple(distance=4601419.700187, initial=131.994235)
    test 231 at 138 iteration: 12
    test 232 at 141 nearestOn4: NearestOn4Tuple(lat=-8.830702, lon=28.898191, distance=1571275.925114, normal=-129.0)
    test 233 at 141 distance2: Distance2Tuple(distance=4494566.344609, initial=135.194197)
    test 234 at 141 iteration: 12
    test 235 at 144 nearestOn4: NearestOn4Tuple(lat=-9.60355, lon=26.428207, distance=1840964.643721, normal=-126.0)
    test 236 at 144 distance2: Distance2Tuple(distance=4371854.291284, initial=138.500907)
    test 237 at 144 iteration: 12
    test 238 at 147 nearestOn4: NearestOn4Tuple(lat=-10.12774, lon=23.83189, distance=2111923.120701, normal=-123.0)
    test 239 at 147 distance2: Distance2Tuple(distance=4234208.109837, initial=141.906658)
    test 240 at 147 iteration: 12
    test 241 at 150 nearestOn4: NearestOn4Tuple(lat=-10.384199, lon=21.152741, distance=2381745.725116, normal=-120.0)
    test 242 at 150 distance2: Distance2Tuple(distance=4082926.581705, initial=145.397815)
    test 243 at 150 iteration: 13
    test 244 at 153 nearestOn4: NearestOn4Tuple(lat=-10.361518, lon=18.441649, distance=2647627.022313, normal=-117.0)
    test 245 at 153 distance2: Distance2Tuple(distance=3919658.690883, initial=148.954759)
    test 246 at 153 iteration: 13
    test 247 at 156 nearestOn4: NearestOn4Tuple(lat=-10.057906, lon=15.753648, distance=2906522.653561, normal=-114.0)
    test 248 at 156 distance2: Distance2Tuple(distance=3746326.345058, initial=152.55284)
    test 249 at 156 iteration: 13
    test 250 at 159 nearestOn4: NearestOn4Tuple(lat=-9.482072, lon=13.143489, distance=3155385.639627, normal=-111.0)
    test 251 at 159 distance2: Distance2Tuple(distance=3564997.75099, initial=156.164419)
    test 252 at 159 iteration: 13
    test 253 at 162 nearestOn4: NearestOn4Tuple(lat=-8.652617, lon=10.660915, distance=3391430.460883, normal=-108.0)
    test 254 at 162 distance2: Distance2Tuple(distance=3377731.675499, initial=159.761632)
    test 255 at 162 iteration: 14
    test 256 at 165 nearestOn4: NearestOn4Tuple(lat=-7.595973, lon=8.346834, distance=3612359.931242, normal=-105.0)
    test 257 at 165 distance2: Distance2Tuple(distance=3186423.160726, initial=163.319215)
    test 258 at 165 iteration: 14
    test 259 at 168 nearestOn4: NearestOn4Tuple(lat=-6.34337, lon=6.231211, distance=3816501.539103, normal=-102.0)
    test 260 at 168 distance2: Distance2Tuple(distance=2992679.463282, initial=166.816688)
    test 261 at 168 iteration: 15
    test 262 at 171 nearestOn4: NearestOn4Tuple(lat=-4.927599, lon=4.332929, distance=4002834.001406, normal=-99.0)
    test 263 at 171 distance2: Distance2Tuple(distance=2797742.696107, initial=170.239499)
    test 264 at 171 iteration: 15
    test 265 at 174 nearestOn4: NearestOn4Tuple(lat=-3.380219, lon=2.661208, distance=4170920.680715, normal=-96.0)
    test 266 at 174 distance2: Distance2Tuple(distance=2602460.6285, initial=173.5791)
    test 267 at 174 iteration: 16
    test 268 at 177 nearestOn4: NearestOn4Tuple(lat=-1.729621, lon=1.217901, distance=4320786.90777, normal=-93.0)
    test 269 at 177 distance2: Distance2Tuple(distance=2407296.638562, initial=176.832261)
    test 270 at 177 iteration: 16
    test 271 at 180 nearestOn4: NearestOn4Tuple(lat=-0.0, lon=0.0, distance=4452779.631731, normal=-90.0)
    test 272 at 180 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 273 at 180 iteration: 2
    test 274 at 183 nearestOn4: NearestOn4Tuple(lat=1.78887, lon=-0.99811, distance=4567437.385459, normal=-87.0)
    test 275 at 183 distance2: Distance2Tuple(distance=2017489.178337, initial=-176.913538)
    test 276 at 183 iteration: 18
    test 277 at 186 nearestOn4: NearestOn4Tuple(lat=3.621299, lon=-1.782857, distance=4665385.363707, normal=-84.0)
    test 278 at 186 distance2: Distance2Tuple(distance=1822249.076337, initial=-173.902054)
    test 279 at 186 iteration: 19
    test 280 at 189 nearestOn4: NearestOn4Tuple(lat=5.484985, lon=-2.3602, distance=4747259.943739, normal=-81.0)
    test 281 at 189 distance2: Distance2Tuple(distance=1626056.569178, initial=-170.957822)
    test 282 at 189 iteration: 20
    test 283 at 192 nearestOn4: NearestOn4Tuple(lat=7.370116, lon=-2.73481, distance=4813660.672246, normal=-78.0)
    test 284 at 192 distance2: Distance2Tuple(distance=1428212.934231, initial=-168.072177)
    test 285 at 192 iteration: 20
    test 286 at 195 nearestOn4: NearestOn4Tuple(lat=9.268415, lon=-2.909634, distance=4865124.821218, normal=-75.0)
    test 287 at 195 distance2: Distance2Tuple(distance=1227972.969826, initial=-165.235791)
    test 288 at 195 iteration: 20
    test 289 at 198 nearestOn4: NearestOn4Tuple(lat=11.172185, lon=-2.885742, distance=4902118.749304, normal=-72.0)
    test 290 at 198 distance2: Distance2Tuple(distance=1024605.530336, initial=-162.438792)
    test 291 at 198 iteration: 20
    test 292 at 201 nearestOn4: NearestOn4Tuple(lat=13.073424, lon=-2.662411, distance=4925040.440464, normal=-69.0)
    test 293 at 201 distance2: Distance2Tuple(distance=817449.876114, initial=-159.670792)
    test 294 at 201 iteration: 19
    test 295 at 204 nearestOn4: NearestOn4Tuple(lat=14.963037, lon=-2.237368, distance=4934228.141285, normal=-66.0)
    test 296 at 204 distance2: Distance2Tuple(distance=605965.483538, initial=-156.920863)
    test 297 at 204 iteration: 18
    test 298 at 207 nearestOn4: NearestOn4Tuple(lat=16.830177, lon=-1.607176, distance=4929970.763676, normal=-63.0)
    test 299 at 207 distance2: Distance2Tuple(distance=389772.69206, initial=-154.177522)
    test 300 at 207 iteration: 17
    test 301 at 210 nearestOn4: NearestOn4Tuple(lat=18.661739, lon=-0.767728, distance=4912516.651406, normal=-60.0)
    test 302 at 210 distance2: Distance2Tuple(distance=168681.79275, initial=-151.428749)
    test 303 at 210 iteration: 15
    test 304 at 213 nearestOn4: NearestOn4Tuple(lat=20.442006, lon=0.285131, distance=4882078.472693, normal=-57.0)
    test 305 at 213 distance2: Distance2Tuple(distance=57291.056741, initial=31.337909)
    test 306 at 213 iteration: 14
    test 307 at 216 nearestOn4: NearestOn4Tuple(lat=22.152468, lon=1.554872, distance=4838833.433767, normal=-54.0)
    test 308 at 216 distance2: Distance2Tuple(distance=287921.351972, initial=34.135132)
    test 309 at 216 iteration: 13
    test 310 at 219 nearestOn4: NearestOn4Tuple(lat=23.77182, lon=3.04338, distance=4782919.681256, normal=-51.0)
    test 311 at 219 distance2: Distance2Tuple(distance=522785.823462, initial=36.975477)
    test 312 at 219 iteration: 12
    test 313 at 222 nearestOn4: NearestOn4Tuple(lat=25.276135, lon=4.749884, distance=4714431.597517, normal=-48.0)
    test 314 at 222 distance2: Distance2Tuple(distance=761281.13012, initial=39.870848)
    test 315 at 222 iteration: 12
    test 316 at 225 nearestOn4: NearestOn4Tuple(lat=26.639267, lon=6.669676, distance=4633418.568418, normal=-45.0)
    test 317 at 225 distance2: Distance2Tuple(distance=1002647.475734, initial=42.831764)
    test 318 at 225 iteration: 12
    test 319 at 228 nearestOn4: NearestOn4Tuple(lat=27.833525, lon=8.792659, distance=4539893.426211, normal=-42.0)
    test 320 at 228 distance2: Distance2Tuple(distance=1245992.475272, initial=45.866374)
    test 321 at 228 iteration: 12
    test 322 at 231 nearestOn4: NearestOn4Tuple(lat=28.830702, lon=11.101809, distance=4433857.579882, normal=-39.0)
    test 323 at 231 distance2: Distance2Tuple(distance=1490310.992237, initial=48.979263)
    test 324 at 231 iteration: 12
    test 325 at 234 nearestOn4: NearestOn4Tuple(lat=29.60355, lon=13.571793, distance=4315348.787094, normal=-36.0)
    test 326 at 234 distance2: Distance2Tuple(distance=1734498.226471, initial=52.17011)
    test 327 at 234 iteration: 12
    test 328 at 237 nearestOn4: NearestOn4Tuple(lat=30.12774, lon=16.16811, distance=4184513.198865, normal=-33.0)
    test 329 at 237 distance2: Distance2Tuple(distance=1977356.104695, initial=55.432438)
    test 330 at 237 iteration: 12
    test 331 at 240 nearestOn4: NearestOn4Tuple(lat=30.384199, lon=18.847259, distance=4041694.757223, normal=-30.0)
    test 332 at 240 distance2: Distance2Tuple(distance=2217596.775596, initial=58.752785)
    test 333 at 240 iteration: 13
    test 334 at 243 nearestOn4: NearestOn4Tuple(lat=30.361518, lon=21.558351, distance=3887523.410219, normal=-27.0)
    test 335 at 243 distance2: Distance2Tuple(distance=2453850.681967, initial=62.110741)
    test 336 at 243 iteration: 13
    test 337 at 246 nearestOn4: NearestOn4Tuple(lat=30.057906, lon=24.246352, distance=3722973.817216, normal=-24.0)
    test 338 at 246 distance2: Distance2Tuple(distance=2684688.240253, initial=65.480201)
    test 339 at 246 iteration: 13
    test 340 at 249 nearestOn4: NearestOn4Tuple(lat=29.482072, lon=26.856511, distance=3549365.860101, normal=-21.0)
    test 341 at 249 distance2: Distance2Tuple(distance=2908661.404266, initial=68.831849)
    test 342 at 249 iteration: 13
    test 343 at 252 nearestOn4: NearestOn4Tuple(lat=28.652617, lon=29.339085, distance=3368292.365392, normal=-18.0)
    test 344 at 252 distance2: Distance2Tuple(distance=3124363.961966, initial=72.136463)
    test 345 at 252 iteration: 14
    test 346 at 255 nearestOn4: NearestOn4Tuple(lat=27.595973, lon=31.653166, distance=3181483.93514, normal=-15.0)
    test 347 at 255 distance2: Distance2Tuple(distance=3330500.367925, initial=75.368254)
    test 348 at 255 iteration: 14
    test 349 at 258 nearestOn4: NearestOn4Tuple(lat=26.34337, lon=33.768789, distance=2990642.863598, normal=-12.0)
    test 350 at 258 distance2: Distance2Tuple(distance=3525947.426348, initial=78.507468)
    test 351 at 258 iteration: 15
    test 352 at 261 nearestOn4: NearestOn4Tuple(lat=24.927599, lon=35.667071, distance=2797285.607317, normal=-9.0)
    test 353 at 261 distance2: Distance2Tuple(distance=3709794.568962, initial=81.541766)
    test 354 at 261 iteration: 15
    test 355 at 264 nearestOn4: NearestOn4Tuple(lat=23.380219, lon=37.338792, distance=2602624.246813, normal=-6.0)
    test 356 at 264 distance2: Distance2Tuple(distance=3881355.597301, initial=84.466366)
    test 357 at 264 iteration: 16
    test 358 at 267 nearestOn4: NearestOn4Tuple(lat=21.729621, lon=38.782099, distance=2407500.005448, normal=-3.0)
    test 359 at 267 distance2: Distance2Tuple(distance=4040153.204404, initial=87.283272)
    test 360 at 267 iteration: 16
    test 361 at 270 nearestOn4: NearestOn4Tuple(lat=20.0, lon=40.0, distance=2212366.254172, normal=0.0)
    test 362 at 270 distance2: Distance2Tuple(distance=4185883.452394, initial=90.0)
    test 363 at 270 iteration: 2
    test 364 at 273 nearestOn4: NearestOn4Tuple(lat=18.21113, lon=40.99811, distance=2017309.778494, normal=3.0)
    test 365 at 273 distance2: Distance2Tuple(distance=4318369.394574, initial=92.628183)
    test 366 at 273 iteration: 18
    test 367 at 276 nearestOn4: NearestOn4Tuple(lat=16.378701, lon=41.782857, distance=1822097.141563, normal=6.0)
    test 368 at 276 distance2: Distance2Tuple(distance=4437512.122777, initial=95.182272)
    test 369 at 276 iteration: 19
    test 370 at 279 nearestOn4: NearestOn4Tuple(lat=14.515015, lon=42.3602, distance=1626234.955125, normal=9.0)
    test 371 at 279 distance2: Distance2Tuple(distance=4543245.293056, initial=97.678448)
    test 372 at 279 iteration: 20
    test 373 at 282 nearestOn4: NearestOn4Tuple(lat=12.629884, lon=42.73481, distance=1429036.030972, normal=12.0)
    test 374 at 282 distance2: Distance2Tuple(distance=4635496.852428, initial=100.133763)
    test 375 at 282 iteration: 20
    test 376 at 285 nearestOn4: NearestOn4Tuple(lat=10.731585, lon=42.909634, distance=1229686.200109, normal=15.0)
    test 377 at 285 distance2: Distance2Tuple(distance=4714159.823993, initial=102.565486)
    test 378 at 285 iteration: 20
    test 379 at 288 nearestOn4: NearestOn4Tuple(lat=8.827815, lon=42.885742, distance=1027308.413714, normal=18.0)
    test 380 at 288 distance2: Distance2Tuple(distance=4779072.735062, initial=104.990626)
    test 381 at 288 iteration: 20
    test 382 at 291 nearestOn4: NearestOn4Tuple(lat=6.926576, lon=42.662411, distance=821021.78405, normal=21.0)
    test 383 at 291 distance2: Distance2Tuple(distance=4830009.484467, initial=107.425584)
    test 384 at 291 iteration: 19
    test 385 at 294 nearestOn4: NearestOn4Tuple(lat=5.036963, lon=42.237368, distance=609993.754392, normal=24.0)
    test 386 at 294 distance2: Distance2Tuple(distance=4866678.02413, initial=109.885922)
    test 387 at 294 iteration: 18
    test 388 at 297 nearestOn4: NearestOn4Tuple(lat=3.169823, lon=41.607176, distance=393484.06554, normal=27.0)
    test 389 at 297 distance2: Distance2Tuple(distance=4888727.07477, initial=112.386218)
    test 390 at 297 iteration: 17
    test 391 at 300 nearestOn4: NearestOn4Tuple(lat=1.338261, lon=40.767728, distance=170879.9747, normal=30.0)
    test 392 at 300 distance2: Distance2Tuple(distance=4895760.153166, initial=114.939984)
    test 393 at 300 iteration: 15
    test 394 at 303 nearestOn4: NearestOn4Tuple(lat=-0.442006, lon=39.714869, distance=58276.59935, normal=33.0)
    test 395 at 303 distance2: Distance2Tuple(distance=4887356.42216, initial=117.559632)
    test 396 at 303 iteration: 14
    test 397 at 306 nearestOn4: NearestOn4Tuple(lat=-2.152468, lon=38.445128, distance=294267.652925, normal=36.0)
    test 398 at 306 distance2: Distance2Tuple(distance=4863098.229148, initial=120.256447)
    test 399 at 306 iteration: 13
    test 400 at 309 nearestOn4: NearestOn4Tuple(lat=-3.77182, lon=36.95662, distance=537179.270746, normal=39.0)
    test 401 at 309 distance2: Distance2Tuple(distance=4822605.581331, initial=123.040514)
    test 402 at 309 iteration: 12
    test 403 at 312 nearestOn4: NearestOn4Tuple(lat=-5.276135, lon=35.250116, distance=786877.93689, normal=42.0)
    test 404 at 312 distance2: Distance2Tuple(distance=4765578.049049, initial=125.920549)
    test 405 at 312 iteration: 12
    test 406 at 315 nearestOn4: NearestOn4Tuple(lat=-6.639267, lon=33.330324, distance=1042977.288036, normal=45.0)
    test 407 at 315 distance2: Distance2Tuple(distance=4691844.442335, initial=128.903552)
    test 408 at 315 iteration: 12
    test 409 at 318 nearestOn4: NearestOn4Tuple(lat=-7.833525, lon=31.207341, distance=1304791.465619, normal=48.0)
    test 410 at 318 distance2: Distance2Tuple(distance=4601419.700187, initial=131.994235)
    test 411 at 318 iteration: 12
    test 412 at 321 nearestOn4: NearestOn4Tuple(lat=-8.830702, lon=28.898191, distance=1571275.925114, normal=51.0)
    test 413 at 321 distance2: Distance2Tuple(distance=4494566.344609, initial=135.194197)
    test 414 at 321 iteration: 12
    test 415 at 324 nearestOn4: NearestOn4Tuple(lat=-9.60355, lon=26.428207, distance=1840964.643721, normal=54.0)
    test 416 at 324 distance2: Distance2Tuple(distance=4371854.291284, initial=138.500907)
    test 417 at 324 iteration: 12
    test 418 at 327 nearestOn4: NearestOn4Tuple(lat=-10.12774, lon=23.83189, distance=2111923.120701, normal=57.0)
    test 419 at 327 distance2: Distance2Tuple(distance=4234208.109837, initial=141.906658)
    test 420 at 327 iteration: 12
    test 421 at 330 nearestOn4: NearestOn4Tuple(lat=-10.384199, lon=21.152741, distance=2381745.725116, normal=60.0)
    test 422 at 330 distance2: Distance2Tuple(distance=4082926.581705, initial=145.397815)
    test 423 at 330 iteration: 13
    test 424 at 333 nearestOn4: NearestOn4Tuple(lat=-10.361518, lon=18.441649, distance=2647627.022313, normal=63.0)
    test 425 at 333 distance2: Distance2Tuple(distance=3919658.690883, initial=148.954759)
    test 426 at 333 iteration: 13
    test 427 at 336 nearestOn4: NearestOn4Tuple(lat=-10.057906, lon=15.753648, distance=2906522.653561, normal=66.0)
    test 428 at 336 distance2: Distance2Tuple(distance=3746326.345058, initial=152.55284)
    test 429 at 336 iteration: 13
    test 430 at 339 nearestOn4: NearestOn4Tuple(lat=-9.482072, lon=13.143489, distance=3155385.639627, normal=69.0)
    test 431 at 339 distance2: Distance2Tuple(distance=3564997.75099, initial=156.164419)
    test 432 at 339 iteration: 13
    test 433 at 342 nearestOn4: NearestOn4Tuple(lat=-8.652617, lon=10.660915, distance=3391430.460883, normal=72.0)
    test 434 at 342 distance2: Distance2Tuple(distance=3377731.675499, initial=159.761632)
    test 435 at 342 iteration: 14
    test 436 at 345 nearestOn4: NearestOn4Tuple(lat=-7.595973, lon=8.346834, distance=3612359.931242, normal=75.0)
    test 437 at 345 distance2: Distance2Tuple(distance=3186423.160726, initial=163.319215)
    test 438 at 345 iteration: 14
    test 439 at 348 nearestOn4: NearestOn4Tuple(lat=-6.34337, lon=6.231211, distance=3816501.539103, normal=78.0)
    test 440 at 348 distance2: Distance2Tuple(distance=2992679.463282, initial=166.816688)
    test 441 at 348 iteration: 15
    test 442 at 351 nearestOn4: NearestOn4Tuple(lat=-4.927599, lon=4.332929, distance=4002834.001406, normal=81.0)
    test 443 at 351 distance2: Distance2Tuple(distance=2797742.696107, initial=170.239499)
    test 444 at 351 iteration: 15
    test 445 at 354 nearestOn4: NearestOn4Tuple(lat=-3.380219, lon=2.661208, distance=4170920.680715, normal=84.0)
    test 446 at 354 distance2: Distance2Tuple(distance=2602460.6285, initial=173.5791)
    test 447 at 354 iteration: 16
    test 448 at 357 nearestOn4: NearestOn4Tuple(lat=-1.729621, lon=1.217901, distance=4320786.90777, normal=87.0)
    test 449 at 357 distance2: Distance2Tuple(distance=2407296.638562, initial=176.832261)
    test 450 at 357 iteration: 16
    test 451 at 360 nearestOn4: NearestOn4Tuple(lat=0.0, lon=0.0, distance=4452779.631731, normal=90.0)
    test 452 at 360 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 453 at 360 iteration: 2
    test 454 azi..: iteration=20, max=0.541766, mean=-2.031871, min=-6.096448, stdev=2.057729
    test 455 xTM: KTransverseMercator(TMorder=7, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996)

    test 456 intersection2: intersection2(lat=23.944114, lon=-45.833131)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 457 nearestOn4: NearestOn4Tuple(lat=23.944114, lon=-45.833131, distance=0.000043, normal=125.0)
    test 458 nearestOn4: NearestOn4Tuple(lat=23.944114, lon=-45.833131, distance=0.000246, normal=40.0)
    test 459 xTM: KTransverseMercator(TMorder=6, ellipsoid=Ellipsoid(name='_', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)

    test 460 intersection2: intersection2(lat=37.0, lon=-42.376015)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 461 nearestOn4: NearestOn4Tuple(lat=37.0, lon=-42.376015, distance=0.000129, normal=180.0)
    test 462 nearestOn4: NearestOn4Tuple(lat=37.0, lon=-42.376015, distance=0.000081, normal=45.0)
    test 463 xTM: KTransverseMercator(TMorder=6, ellipsoid=Ellipsoid(name='_', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996)

    28 of 463 testRhumbx.py tests (6.0%) FAILED, incl. 18 KNOWN plus 10 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 8.495 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testRoutes.py
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = f(pts, wrap=True, **kwds)
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  r = f(pts, wrap=True, **kwds)

    testing testRoutes.py 21.02.11
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.01, wrap=True): 1751693.701  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.01, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.01, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.01, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.01, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.01, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.01, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.01, wrap=True): 10446635.730  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.01, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.01, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.01, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.01, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.01, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.01, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.01, wrap=True): 13552524.810
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.01, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.01, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.01, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.01, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.01, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.01, wrap=True): 80211278.393
    test 22 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 23 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 24 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 25 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 26 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 27 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 28 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 29 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 30 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 31 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 32 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 33 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 34 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 35 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 36 points.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 37 points.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 38 points.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 39 points.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.129
    test 40 points.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672557.850
    test 41 points.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 42 points.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 43 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15470624.834
    test 44 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 45 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 46 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.116
    test 47 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672556.441
    test 48 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 15789078.314
    test 49 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26041264.665
    test 50 ellipsoidalVincenty.perimeterOf('Antarctica', closed=False, wrap=True): 15531947.149
    test 51 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=False, wrap=True): 3229.337
    test 52 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=False, wrap=True): 3190.602
    test 53 ellipsoidalVincenty.perimeterOf('Pts', closed=False, wrap=True): 2769709.679
    test 54 ellipsoidalVincenty.perimeterOf('VwPts', closed=False, wrap=True): 2679915.858
    test 55 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=False, wrap=True): 15766750.804
    test 56 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=False, wrap=True): 25981742.208
    test 57 ellipsoidalVincenty.perimeterOf('Antarctica', closed=True, wrap=True): 16831067.893
    test 58 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=True, wrap=True): 5491.045
    test 59 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=True, wrap=True): 5452.310
    test 60 ellipsoidalVincenty.perimeterOf('Pts', closed=True, wrap=True): 5259077.510
    test 61 ellipsoidalVincenty.perimeterOf('VwPts', closed=True, wrap=True): 5171947.931
    test 62 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=True, wrap=True): 23926469.479
    test 63 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=True, wrap=True): 31533501.608
    test 64 geographiclib.WNZ-SAL(WGS84): 19959679.267
    test 65 geographiclib.WNZ-SAL(WGS84): 354.50
    test 66 geographiclib.WNZ-SAL(Sphere): 19967403.498
    test 67 geographiclib.WNZ-SAL(Sphere): 354.50
    test 68 geographiclib.BJS-SFO(WGS84): 9513998.0
    test 69 geographiclib.BJS-SFO(WGS84): 237.6
    test 70 geographiclib.BJS-SFO(Sphere): 9491734.6
    test 71 geographiclib.BJS-SFO(Sphere): 237.6
    test 72 geographiclib.SW-Perth(WGS84): 32.11195529
    test 73 geographiclib.SW-Perth(WGS84): -63.95925278
    test 74 geographiclib.SW-Perth(Sphere): 31.96383509
    test 75 geographiclib.SW-Perth(Sphere): -64.14670854
    test 76 geographiclib.JFK-LHR(WGS84): 40041368848742.5
    test 77 geographiclib.JFK-LHR(WGS84): 5551759.4
    test 78 geographiclib.JFK-LHR(Sphere): 40105639196534.8
    test 79 geographiclib.JFK-LHR(Sphere): 5536892.0
    test 80 geographiclib.Antarctica Peri(WGS84): 16831067.893
    test 81 geographiclib.Antarctica Area(WGS84): 13662703680020.1
    test 82 geographiclib.Antarctica Peri(Sphere): 16765661.499
    test 83 geographiclib.Antarctica Area(Sphere): 13552524809674.8
    test 84 isclockwise('Antarctica', adjust=False, wrap=True): 1.000
    test 85 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 86 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 87 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 88 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 89 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 90 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    41 of 90 testRoutes.py tests (45.6%) FAILED, incl. 13 KNOWN plus 28 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 8.606 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testSimplify.py

    testing testSimplify.py 20.04.06 (module pygeodesy.simplify 22.01.17)
    test 1 simplify1(16614, adjust=True) 1m (75.490 ms): 16597
    test 2 simplifyRW(16614, adjust=True, shortest=False, indices=True) 1m (86.294 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (87.108 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (124.011 ms): 8302
    test 5 simplifyVWm(16614, adjust=True, indices=True) 1m (178.821 ms): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (173.995 ms): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (167.605 ms): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (183.877 ms): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (187.341 ms): 15867
    test 10 simplifyRDPgr(16614, adjust=True, shortest=True, modified=True) 1m (59.381 ms): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (166.897 ms): 15869
    test 12 simplifyRDPfw(16614, adjust=False, shortest=False, modified=True) 1m (48.102 ms): 15869
    test 13 simplifyRDP(16614, adjust=True, shortest=True, indices=True) 1m (1.286 sec): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (1.289 sec): 10960
    test 15 simplifyRDPgr(16614, adjust=True, shortest=True, modified=False) 1m (553.282 ms): 10960
    test 16 simplifyRDP(16614, adjust=False, shortest=False, indices=True) 1m (1.103 sec): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (1.102 sec): 11248
    test 18 simplifyRDPfw(16614, adjust=False, shortest=False, modified=False) 1m (305.341 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (23.562 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (19.423 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (94.688 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (99.733 ms): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (42.857 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (86.168 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (23.894 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (35.935 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (665.188 us): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (1.954 ms): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (555.038 us): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (798.225 us): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (945.091 us): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (55.075 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (47.922 us): 5
    test 34 numpy.__version__: 1.22.4
    test 35 simplify1(69, adjust=False) 1m (604.153 us): 69
    test 36 simplify1(69, adjust=False) result: <class 'numpy.ndarray'>
    test 37 simplifyRW(69, adjust=False) 1m (586.987 us): 33
    test 38 simplifyRW(69, adjust=False) result: <class 'numpy.ndarray'>
    test 39 simplifyRDP(69, adjust=False) 1m (3.252 ms): 50
    test 40 simplifyRDP(69, adjust=False) result: <class 'numpy.ndarray'>
    test 41 simplifyRDPm(69, adjust=False) 1m (1.108 ms): 67
    test 42 simplifyRDPm(69, adjust=False) result: <class 'numpy.ndarray'>
    test 43 simplifyRDPfw(69, adjust=False) 1m (1.807 ms): 50
    test 44 simplifyRDPgr(69, adjust=False) 1m (3.008 ms): 50
    test 45 simplifyVW(69, adjust=False) 1m (1.080 ms): 69
    test 46 simplifyVW(69, adjust=False) result: <class 'numpy.ndarray'>
    test 47 simplifyVWm(69, adjust=False) 1m (1.059 ms): 69
    test 48 simplifyVWm(69, adjust=False) result: <class 'numpy.ndarray'>
    test 49 simplify1(69, adjust=True) 1m (565.052 us): 69
    test 50 simplify1(69, adjust=True) result: <class 'numpy.ndarray'>
    test 51 simplifyRW(69, adjust=True) 1m (597.000 us): 31
    test 52 simplifyRW(69, adjust=True) result: <class 'numpy.ndarray'>
    test 53 simplifyRDP(69, adjust=True) 1m (3.411 ms): 45
    test 54 simplifyRDP(69, adjust=True) result: <class 'numpy.ndarray'>
    test 55 simplifyRDPm(69, adjust=True) 1m (1.158 ms): 67
    test 56 simplifyRDPm(69, adjust=True) result: <class 'numpy.ndarray'>
    test 57 simplifyRDPfw(69, adjust=True) 1m (1.834 ms): 45
    test 58 simplifyRDPgr(69, adjust=True) 1m (3.118 ms): 45
    test 59 simplifyVW(69, adjust=True) 1m (1.125 ms): 69
    test 60 simplifyVW(69, adjust=True) result: <class 'numpy.ndarray'>
    test 61 simplifyVWm(69, adjust=True) 1m (1.105 ms): 69
    test 62 simplifyVWm(69, adjust=True) result: <class 'numpy.ndarray'>
    test 63 simplify1(69, adjust=False, indices=True) 1m (468.969 us): 69
    test 64 simplify1(69, adjust=False, indices=True) result: <class 'list'>
    test 65 simplifyRW(69, adjust=False, indices=True) 1m (526.190 us): 33
    test 66 simplifyRW(69, adjust=False, indices=True) result: <class 'list'>
    test 67 simplifyRDP(69, adjust=False, indices=True) 1m (3.186 ms): 50
    test 68 simplifyRDP(69, adjust=False, indices=True) result: <class 'list'>
    test 69 simplifyRDPm(69, adjust=False, indices=True) 1m (1.043 ms): 67
    test 70 simplifyRDPm(69, adjust=False, indices=True) result: <class 'list'>
    test 71 simplifyRDPfw(69, adjust=True, indices=True) 1m (1.768 ms): 45
    test 72 simplifyRDPgr(69, adjust=True, indices=True) 1m (3.060 ms): 45
    test 73 simplifyVW(69, adjust=False, indices=True) 1m (1.043 ms): 69
    test 74 simplifyVW(69, adjust=False, indices=True) result: <class 'list'>
    test 75 simplifyVWm(69, adjust=False, indices=True) 1m (994.205 us): 69
    test 76 simplifyVWm(69, adjust=False, indices=True) result: <class 'list'>

    all 76 testSimplify.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 7.649 sec

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testSpherical.py
./test/testSpherical.py:271: DeprecationWarning: method L{pygeodesy.sphericalNvector.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo

    testing testSpherical.py 22.07.01

    testLatLon(pygeodesy.sphericalNvector, 22.07.07)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 isequalTo: False
    test 20 antipode1: 52.205°S, 179.881°W
    test 21 antipode2: True
    test 22 antipode3: 52.205°N, 000.119°E
    test 23 antipode4: True
    test 24 antipode5: 52.205°N, 000.119°E
    test 25 initialBearingTo: 156.1666
    test 26 initialBearingTo: 65.8921
    test 27 initialBearingTo: 0.0
    test 28 initialBearingTo: 180.0
    test 29 finalBearingTo: 157.8904
    test 30 finalBearingTo: 93.8581
    test 31 bearingTo2: 156.1666, 157.8904
    test 32 ispolar: True
    test 33 copy: True
    test 34 __eq__: True
    test 35 __ne__: False
    test 36 equirectangularTo: 404329.56
    test 37 distanceTo: 404279.720589
    test 38 distanceTo: 404279.720589
    test 39 distanceTo: 2145
    test 40 distanceTo: 18013602.92
    test 41 distanceTo: 20015114.35
    test 42 intermediateTo: 51.372084°N, 000.707337°E
    test 43 intermediateTo: True
    test 44 intermediateTo: 404279.721
    test 45 intermediateTo+5: 35.160975°N, 008.989542°E
    test 46 intermediateTo+5: 5.000
    test 47 intermediateTo-4: 64.911647°N, 013.726301°W
    test 48 intermediateTo-4: 4.000
    test 49 intermediateTo-h: 125.000
    test 50 intermediateChordTo: 51.372294°N, 000.707192°E
    test 51 intermediateChordTo: True
    test 52 intermediateChordTo-h: 125.000
    test 53 midpointTo: 50.536327°N, 001.274614°E
    test 54 destination: 51.513546°N, 000.098345°W
    test 55 destination: 51°30′49″N, 000°05′54″W
    test 56 destination: 34°37′N, 116°33′W
    test 57 destination: 34.613647°N, 116.55116°W
    test 58 destination: 0.604122N, 2.034201W
    test 59 destination: 31.96383509°N, 064.37329146°E
    test 60 alongTrackDistanceTo: can't multiply sequence by non-int of type 'float'  FAILED, KNOWN, expected incompatible ...
    test 61 alongTrackDistanceTo: 62331.58
    test 62 alongTrackDistanceTo: 99.588
    test 63 alongTrackDistanceTo: -7702.7
    test 64 alongTrackDistanceTo: 7587.6
    test 65 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 66 crossTrackDistanceTo: -307.55
    test 67 crossTrackDistanceTo: 7.4524
    test 68 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 69 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 70 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 71 chordTo: 124799.103
    test 72 cosineAndoyerLambertTo: 124801.098
    test 73 cosineAndoyerLambertTo: 124801.098
    test 74 cosineForsyheAndoyerLambertTo: 124801.098
    test 75 cosineForsyheAndoyerLambertTo: 124801.098
    test 76 cosineLawTo: 124801.098
    test 77 cosineLawTo: 124801.098
    test 78 equirectangularTo: 124804.754
    test 79 equirectangularTo: 124804.754
    test 80 euclideanTo: 130015.089
    test 81 euclideanTo: 130015.089
    test 82 flatLocalTo: 124804.754
    test 83 flatLocalTo: 124804.754
    test 84 flatPolarTo: 133663.257
    test 85 flatPolarTo: 133663.257
    test 86 hartzell: 53.3206°N, 001.7297°W
    test 87 hartzell: 53.3206°N, 001.7297°W
    test 88 height4: 0.0
    test 89 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 90 height4: 53°19′14.2″N, 001°43′46.9″W
    test 91 height4: 53°19′14.2″N, 001°43′46.9″W
    test 92 haversineTo: 124801.098
    test 93 haversineTo: 124801.098
    test 94 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 95 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 96 thomasTo: 124801.098
    test 97 thomasTo: 124801.098
    test 98 vincentysTo: 124801.098
    test 99 vincentysTo: 124801.098
    test 100 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 101 isclockwise: False
    test 102 isclockwise*: False
    test 103 isclockwise: True
    test 104 isclockwise*: True
    test 105 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 106 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 107 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 108 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 109 isconvex: False
    test 110 isconvex*: False
    test 111 isconvex: True
    test 112 isconvex*: True
    test 113 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 114 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 115 isenclosedBy1: True
    test 116 isenclosedBy1*: True
    test 117 isenclosedBy2: False
    test 118 isenclosedBy2*: False
    test 119 isenclosedBy3: False
    test 120 isenclosedBy3*: False
    test 121 isenclosedBy4: False
    test 122 isenclosedBy4*: False
    test 123 isenclosedBy5: False
    test 124 isenclosedBy5*: False
    test 125 isenclosedBy6: True
    test 126 isenclosedBy6*: True
    test 127 isenclosedBy7: True
    test 128 isenclosedBy7*: True
    test 129 isenclosedBy-CCW: True
    test 130 isenclosedBy-CW : True
    test 131 isenclosedBy-CCW: True
    test 132 initialBearingTo: 102.432182
    test 133 compassAngleTo: 100.017
    test 134 compassAngleTo: 105.599
    test 135 initialBearingTo: 288.715918
    test 136 compassAngleTo: 280.017
    test 137 compassAngleTo: 285.599
    test 138 equirectangularTo: 592.185
    test 139 distanceTo: 591.831
    test 140 compassAngleTo: 0.0
    test 141 compassAngleTo: 45.0
    test 142 compassAngleTo: 90.0
    test 143 compassAngleTo: 180.0
    test 144 compassAngleTo: 225.0
    test 145 compassAngleTo: 315.0
    test 146 compassAngleTo: 270.0
    test 147 compassAngleTo: 359.4
    test 148 latlon2: (53.0, 1.0)
    test 149 philam2: (0.93, 0.02)
    test 150 compassAngleTo: 31
    test 151 compassAngleTo: 45
    test 152 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 153 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 154 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 155 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 156 isequalTo: <class 'bool'>
    test 157 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 158 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 159 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 160 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 161 compassAngleTo: <class 'float'>
    test 162 cosineLawTo: <class 'float'>
    test 163 euclideanTo: <class 'float'>
    test 164 flatLocalTo: <class 'float'>
    test 165 flatPolarTo: <class 'float'>
    test 166 haversineTo: <class 'float'>
    test 167 hubenyTo: <class 'float'>
    test 168 vincentysTo: <class 'float'>
    test 169 toVector: (0.615661, 0.0, 0.788011)
    test 170 toVector3d: (0.61566, 0.0, 0.78801)
    test 171 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 172 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 173 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 174 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 175 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented
    test 176 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)
    test 177 circum4 (pygeodesy.sphericalNvector) .radius: 3185505.323  FAILED, KNOWN, expected 3184256.748
    test 178 circum4 (pygeodesy.sphericalNvector) .center: 42.674561°N, 002.495395°E, -3185503.45m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 179 circum4 (pygeodesy.sphericalNvector) .rank: 3
    test 180 circum4 (pygeodesy.sphericalNvector) .residuals: ()
    test 181 circum4 (pygeodesy.sphericalNvector) .d1: 4886.695  FAILED, KNOWN, expected 57818.033
    test 182 circum4 (pygeodesy.sphericalNvector) .d2: 4886.695  FAILED, KNOWN, expected 57834.176
    test 183 circum4 (pygeodesy.sphericalNvector) .d3: 4886.695  FAILED, KNOWN, expected 57830.992
    test 184 circum4 (pygeodesy.sphericalNvector) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 185 circum4 (pygeodesy.sphericalNvector) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 186 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 187 circin6 (pygeodesy.sphericalNvector) .rB+rC: 1564564.352
    test 188 circin6 (pygeodesy.sphericalNvector) .rC+pA: 1110540.003
    test 189 circin6 (pygeodesy.sphericalNvector) .rA+rB: 1110540.003
    test 190 circin6 (pygeodesy.sphericalNvector) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 191 circin6 (pygeodesy.sphericalNvector) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 192 circin6 (pygeodesy.sphericalNvector) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 193 circin6 (pygeodesy.sphericalNvector) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 194 circin6 (pygeodesy.sphericalNvector) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 195 circin6 (pygeodesy.sphericalNvector) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 196 circin6 (pygeodesy.sphericalNvector) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 197 circin6 (pygeodesy.sphericalNvector) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 198 circin6 (pygeodesy.sphericalNvector) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    testVectorial(pygeodesy.sphericalNvector, 22.07.07)
    test 199 crossTrackDistanceTo: -305.67
    test 200 crossTrackDistanceTo: -307.55
    test 201 toLatLon: 44.995674°N, 045.0°E
    test 202 toNvector: (0.50004, 0.50004, 0.70705)
    test 203 isequalTo: False
    test 204 isequalTo: True
    test 205 length: 0.99992449715
    test 206 euclid: 0.99995577
    test 207 length: 1.00
    test 208 euclid: 1.0000
    test 209 meanOf: 44.995674°N, 045.0°E
    test 210 meanOf: LatLon
    test 211 apply: (0.5, 0.5, 0.707)
    test 212 init: (0.5, 0.5, 0.707)
    test 213 i***: (0.5, 0.5, 0.707)
    test 214 abs: 0.99992449715
    test 215 sumOf: (52.70504, 0.61904, 0.70705)
    test 216 sumOf: Nv
    test 217 sumOf: sumOf
    test 218 length: 52.7134151513
    test 219 copy: True
    test 220 length: 52.2051356286
    test 221 length: 52.2051356286
    test 222 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 223 toLatLon: 44.995674°N, 045.0°E
    test 224 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 225 intersection: 02.499372°N, 002.5°E
    test 226 isenclosedBy: True
    test 227 isenclosedBy*: True
    test 228 isenclosedBy: True
    test 229 isenclosedBy*: True
    test 230 iswithin: False
    test 231 iswithin: True
    test 232 nearestOn: 51.0°N, 001.0°E
    test 233 nearestOn: 50.987°N, 000.298°W
    test 234 nearestOn: 51.0°N, 002.0°E
    test 235 nearestOn: 50.995°N, 002.655°E
    test 236 nearestOn: 51.0°N, 001.9°E
    test 237 nearestOn: True
    test 238 distanceTo: 42.712
    test 239 nearestOn: 51.0°N, 002.0°E
    test 240 nearestOn: True
    test 241 nearestOn: 00.0°N, 000.0°E
    test 242 nearestOn: True
    test 243 nearestOn: 00.0°N, 020.0°E
    test 244 nearestOn: True
    test 245 nearestOn: 02.0°N, 002.0°E
    test 246 nearestOn: 02.0°N, 002.0°E
    test 247 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 248 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 249 BasseC: 47.3038°N, 002.5721°W
    test 250 BasseH: 47.311067°N, 002.528617°W
    test 251 triangulate: 47.323667°N, 002.568501°W
    test 252 triangulate: True
    test 253 trilaterate: 37.419078°N, 121.960579°W
    test 254 trilaterate: True
    test 255 trilaterate: 08.068912°S, 034.888699°W
    test 256 trilaterate: True
    test 257 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 258 trilaterate: True
    test 259 trilaterate: 42.67456065°N, 002.49539502°E
    test 260 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 22.07.07)
    test 261 sumOf: Nvector
    test 262 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 263 ecef.lat, .lon: 44.995674, 45.0
    test 264 ecef.height: -0.0
    test 265 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 266 .isEllipsoidal: False
    test 267 .isSpherical: True
    test 268 .latlon: (44.995674, 45.0)
    test 269 .philam: (0.785323, 0.785398)
    test 270 .latlonheight: (44.995674, 45.0, 0.0)
    test 271 .philamheight: (0.785323, 0.785398, 0.0)
    test 272 parse: (0.5, 0.5, 0.707)
    test 273 cmp: 0
    test 274 eq: True
    test 275 ge: True
    test 276 gt: False
    test 277 le: True
    test 278 lt: False
    test 279 ne: False
    test 280 *: (1.0, 1.0, 1.414)
    test 281 +: (1.0, 1.0, 1.414)
    test 282 /: (0.5, 0.5, 0.707)
    test 283 -: (0.5, 0.5, 0.707)
    test 284 @: (0.0, 0.0, 0.0)
    test 285 @: (0.0, 0.0, 0.0)
    test 286 rotate: (0.26268, 0.26268, 0.37143)
    test 287 crosserrors: True
    test 288 0: divisor (0): float division by zero
    test 289 intersections2: (500.0, 0.0, 0.0)
    test 290 nearestOn: (0.0, 0.0, 0.0)
    test 291 nearestOn: True
    test 292 nearestOn: (100.0, 100.0, 100.0)
    test 293 nearestOn: True
    test 294 iscolinearWith: False
    test 295 iscolinearWith: True
    test 296 nearestOn: (0.0, 0.0, 0.0)
    test 297 nearestOn: True
    test 298 nearestOn: (100.0, 100.0, 100.0)
    test 299 nearestOn: True
    test 300 iscolinearWith: False
    test 301 iscolinearWith: True

    testSpherical(pygeodesy.sphericalNvector, 22.07.07)
    test 302 isSpherical: True
    test 303 isEllipsoidal: False
    test 304 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 305 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 306 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 307 isSpherical: True
    test 308 isEllipsoidal: False
    test 309 intersection1: 50.907608°N, 004.508575°E
    test 310 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 311 intersection1: True
    test 312 intersection2: True
    test 313 intersection2: 43.5719°N, 116.188757°W
    test 314 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 315 intersection3: 51.882166°N, 000.267801°E
    test 316 intersection4: 00.0°N, 026.565051°E
    test 317 intersection5: 26.565051°N, 000.0°W
    test 318 intersection6: 50.907809°N, 004.50841°E
    test 319 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 320 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 321 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 322 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 323 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 324 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 325 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 326 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 327 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 328 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 329 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 330 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 331 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 332 brng+end 1a: 01.000305°N, 002.0°E
    test 333 brng+end 1b: 01.000305°N, 002.0°E
    test 334 brng+end 2a: 01.000305°S, 178.0°W
    test 335 brng+end 2b: 01.000305°S, 178.0°W
    test 336 intersection7: 02.499372°N, 002.5°E
    test 337 maxLat0: 90.0
    test 338 maxLat1: 89.0
    test 339 maxLat90: 0.0
    test 340 minLat0: -90.0
    test 341 minLat1: -89.0
    test 342 minLat90: -0.0
    test 343 parse: 00.0°N, 000.0°E
    test 344 isenclosedBy: True
    test 345 isenclosedBy*: True
    test 346 isenclosedBy: True
    test 347 isenclosedBy*: True
    test 348 rhumbBearingTo: 116.722
    test 349 rhumbDestination: 50.964155°N, 001.853°E
    test 350 rhumbDestination: True
    test 351 rhumbDistanceTo: 40307.8
    test 352 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 353 rhumbMidpointo: True
    test 354 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 355 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 356 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 357 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 358 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 359 areaOf: 8.66605875e+09
    test 360 perimeterOf: 3.78258541e+05
    test 361 perimeterOf: 2.67063461e+05
    test 362 areaOf: 6.18e+09
    test 363 perimeterOf: 3.79639757e+05
    test 364 perimeterOf: 2.68444678e+05
    test 365 nearestOn3: 46.000996°N, 001.353049°E
    test 366 nearestOn3: 569987.49
    test 367 distanceTo: 569987.49
    test 368 nearestOn3: 46.0°N, 002.0°E
    test 369 nearestOn3: 134989.80
    test 370 distanceTo: 134989.80
    test 371 nearestOn3: 45.330691°N, 001.318551°E
    test 372 distance: 64856.28
    test 373 distanceTo: 64856.28
    test 374 compassAngleTo: 304.54
    test 375 difference: 1000.53
    test 376 ispolar: True
    test 377 ispolar*: True
    test 378 ispolar: False  FAILED, KNOWN, expected True
    test 379 ispolar*: False  FAILED, KNOWN, expected True
    test 380 ispolar: True
    test 381 ispolar*: True
    test 382 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 383 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 384 midpointTo: 01.5°N, 001.5°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 385 isEllipsoidal: False
    test 386 isSpherical: True
    test 387 lat/lonDMS: 52.20472°N, 000.14056°E
    test 388 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 389 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 390 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 391 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 392 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 393 isequalTo: True
    test 394 isequalTo: True
    test 395 latlon2: 52.20472, 0.14056
    test 396 latlon2: 52.2047, 0.1406
    test 397 latlon2: 52.205, 0.141
    test 398 latlon2: 52.2, 0.14
    test 399 latlon2: 52.2, 0.1
    test 400 latlon2: 52.0, 0.0
    test 401 chordTo: 12036677.26
    test 402 chordTo: 12036463.78
    test 403 isequalTo: False
    test 404 antipode1: 52.205°S, 179.881°W
    test 405 antipode2: True
    test 406 antipode3: 52.205°N, 000.119°E
    test 407 antipode4: True
    test 408 antipode5: 52.205°N, 000.119°E
    test 409 initialBearingTo: 156.1666
    test 410 initialBearingTo: 65.8921
    test 411 initialBearingTo: 0.0
    test 412 initialBearingTo: 180.0
    test 413 finalBearingTo: 157.8904
    test 414 finalBearingTo: 93.8581
    test 415 bearingTo2: 156.1666, 157.8904
    test 416 ispolar: True
    test 417 copy: True
    test 418 __eq__: True
    test 419 __ne__: False
    test 420 equirectangularTo: 404329.56
    test 421 distanceTo: 404279.720589
    test 422 distanceTo: 404279.720589
    test 423 distanceTo: 2145
    test 424 antipodal: False
    test 425 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 426 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 427 antipodal: False
    test 428 distanceTo dateline: 9491735
    test 429 distanceTo unrolled: 9491735
    test 430 distanceTo: 18013602.92
    test 431 distanceTo: 20015114.35
    test 432 intermediateTo: 51.372084°N, 000.707337°E
    test 433 intermediateTo: True
    test 434 intermediateTo: 404279.721
    test 435 intermediateTo+5: 35.160975°N, 008.989542°E
    test 436 intermediateTo+5: 5.000
    test 437 intermediateTo-4: 64.911647°N, 013.726301°W
    test 438 intermediateTo-4: 4.000
    test 439 intermediateTo-h: 125.000
    test 440 midpointTo: 50.536327°N, 001.274614°E
    test 441 destination: 51.513546°N, 000.098345°W
    test 442 destination: 51°30′49″N, 000°05′54″W
    test 443 destination: 34°37′N, 116°33′W
    test 444 destination: 34.613647°N, 116.55116°W
    test 445 destination: 0.604122N, 2.034201W
    test 446 destination: 31.96383509°N, 064.37329146°E
    test 447 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 448 alongTrackDistanceTo: 62331.58
    test 449 alongTrackDistanceTo: 99.588
    test 450 alongTrackDistanceTo: -7702.7
    test 451 alongTrackDistanceTo: 7587.6
    test 452 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 453 crossTrackDistanceTo: -307.55
    test 454 crossTrackDistanceTo: 7.4524
    test 455 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 456 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 457 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 458 chordTo: 124799.103
    test 459 cosineAndoyerLambertTo: 124801.098
    test 460 cosineAndoyerLambertTo: 124801.098
    test 461 cosineForsyheAndoyerLambertTo: 124801.098
    test 462 cosineForsyheAndoyerLambertTo: 124801.098
    test 463 cosineLawTo: 124801.098
    test 464 cosineLawTo: 124801.098
    test 465 equirectangularTo: 124804.754
    test 466 equirectangularTo: 124804.754
    test 467 euclideanTo: 130015.089
    test 468 euclideanTo: 130015.089
    test 469 flatLocalTo: 124804.754
    test 470 flatLocalTo: 124804.754
    test 471 flatPolarTo: 133663.257
    test 472 flatPolarTo: 133663.257
    test 473 hartzell: 53.3206°N, 001.7297°W
    test 474 hartzell: 53.3206°N, 001.7297°W
    test 475 height4: 0.0
    test 476 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 477 height4: 53°19′14.2″N, 001°43′46.9″W
    test 478 height4: 53°19′14.2″N, 001°43′46.9″W
    test 479 haversineTo: 124801.098
    test 480 haversineTo: 124801.098
    test 481 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 482 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 483 thomasTo: 124801.098
    test 484 thomasTo: 124801.098
    test 485 vincentysTo: 124801.098
    test 486 vincentysTo: 124801.098
    test 487 isclockwise: False
    test 488 isclockwise*: False
    test 489 isclockwise: True
    test 490 isclockwise*: True
    test 491 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 492 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 493 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 494 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 495 isconvex: False
    test 496 isconvex*: False
    test 497 isconvex: True
    test 498 isconvex*: True
    test 499 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 500 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 501 isenclosedBy1: True
    test 502 isenclosedBy1*: True
    test 503 isenclosedBy2: False
    test 504 isenclosedBy2*: False
    test 505 isenclosedBy3: False
    test 506 isenclosedBy3*: False
    test 507 isenclosedBy4: False
    test 508 isenclosedBy4*: False
    test 509 isenclosedBy5: False
    test 510 isenclosedBy5*: False
    test 511 isenclosedBy6: True
    test 512 isenclosedBy6*: True
    test 513 isenclosedBy7: True
    test 514 isenclosedBy7*: True
    test 515 isenclosedBy-CCW: True
    test 516 isenclosedBy-CW : True
    test 517 isenclosedBy-CCW: True
    test 518 initialBearingTo: 102.432182
    test 519 compassAngleTo: 100.017
    test 520 compassAngleTo: 105.599
    test 521 initialBearingTo: 288.715918
    test 522 compassAngleTo: 280.017
    test 523 compassAngleTo: 285.599
    test 524 equirectangularTo: 592.185
    test 525 distanceTo: 591.831
    test 526 bearingTo: 0.0
    test 527 compassAngleTo: 0.0
    test 528 bearingTo: 45.0
    test 529 compassAngleTo: 45.0
    test 530 bearingTo: 90.0
    test 531 compassAngleTo: 90.0
    test 532 bearingTo: 180.0
    test 533 compassAngleTo: 180.0
    test 534 bearingTo: 225.0
    test 535 compassAngleTo: 225.0
    test 536 bearingTo: 315.0
    test 537 compassAngleTo: 315.0
    test 538 bearingTo: 270.0
    test 539 compassAngleTo: 270.0
    test 540 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 541 compassAngleTo: 359.4
    test 542 latlon2: (53.0, 1.0)
    test 543 philam2: (0.93, 0.02)
    test 544 bearingTo: 31
    test 545 compassAngleTo: 31
    test 546 compassAngleTo: 45
    test 547 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 548 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 549 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 550 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 551 isequalTo: <class 'bool'>
    test 552 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 553 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 554 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 555 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 556 compassAngleTo: <class 'float'>
    test 557 cosineLawTo: <class 'float'>
    test 558 euclideanTo: <class 'float'>
    test 559 flatLocalTo: <class 'float'>
    test 560 flatPolarTo: <class 'float'>
    test 561 haversineTo: <class 'float'>
    test 562 hubenyTo: <class 'float'>
    test 563 vincentysTo: <class 'float'>
    test 564 toNvector: (0.61566, 0.0, 0.78801)
    test 565 toVector: (0.615661, 0.0, 0.788011)
    test 566 toVector3d: (0.61566, 0.0, 0.78801)
    test 567 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 568 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 569 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 570 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 571 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 572 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 573 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 574 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 575 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 576 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 577 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 578 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 579 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 580 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 581 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 582 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 583 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 584 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 585 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 586 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 587 circum3 (pygeodesy.sphericalTrigonometry) .radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 588 circum3 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 589 circum3 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 18.983)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 590 circum3 (pygeodesy.sphericalTrigonometry) .d1: 57691.282  FAILED, KNOWN, expected 57792.858
    test 591 circum3 (pygeodesy.sphericalTrigonometry) .d2: 57691.282  FAILED, KNOWN, expected 57792.859
    test 592 circum3 (pygeodesy.sphericalTrigonometry) .d3: 57691.282  FAILED, KNOWN, expected 57792.859
    test 593 circum3 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 594 circum3 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
./test/testSpherical.py:271: DeprecationWarning: method L{pygeodesy.sphericalTrigonometry.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 595 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 596 circum4 (pygeodesy.sphericalTrigonometry) .radius: 3185634.993  FAILED, KNOWN, expected 3184256.748
    test 597 circum4 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -3185373.78m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 598 circum4 (pygeodesy.sphericalTrigonometry) .rank: 3
    test 599 circum4 (pygeodesy.sphericalTrigonometry) .residuals: ()
    test 600 circum4 (pygeodesy.sphericalTrigonometry) .d1: 57691.283  FAILED, KNOWN, expected 57818.033
    test 601 circum4 (pygeodesy.sphericalTrigonometry) .d2: 57691.283  FAILED, KNOWN, expected 57834.176
    test 602 circum4 (pygeodesy.sphericalTrigonometry) .d3: 57691.283  FAILED, KNOWN, expected 57830.992
    test 603 circum4 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 604 circum4 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 605 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 606 circin6 (pygeodesy.sphericalTrigonometry) .rB+rC: 1564564.352
    test 607 circin6 (pygeodesy.sphericalTrigonometry) .rC+pA: 1110540.003
    test 608 circin6 (pygeodesy.sphericalTrigonometry) .rA+rB: 1110540.003
    test 609 circin6 (pygeodesy.sphericalTrigonometry) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 610 circin6 (pygeodesy.sphericalTrigonometry) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 611 circin6 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 612 circin6 (pygeodesy.sphericalTrigonometry) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 613 circin6 (pygeodesy.sphericalTrigonometry) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 614 circin6 (pygeodesy.sphericalTrigonometry) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 615 circin6 (pygeodesy.sphericalTrigonometry) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 616 circin6 (pygeodesy.sphericalTrigonometry) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 617 circin6 (pygeodesy.sphericalTrigonometry) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    testSpherical(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 618 isSpherical: True
    test 619 isEllipsoidal: False
    test 620 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 621 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 622 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 623 isSpherical: True
    test 624 isEllipsoidal: False
    test 625 intersection1: 50.907608°N, 004.508575°E
    test 626 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 627 intersection1: True
    test 628 intersection2: True
    test 629 intersection2: 43.5719°N, 116.188757°W
    test 630 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 631 intersection3: 51.882166°N, 000.267801°E
    test 632 intersection4: 00.0°N, 026.565051°E
    test 633 intersection5: 26.565051°N, 000.0°W
    test 634 intersection6: 50.907809°N, 004.50841°E
    test 635 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 636 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 637 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 638 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 639 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 640 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 641 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 642 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 643 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 644 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 645 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 646 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 647 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 648 brng+end 1a: 01.000305°N, 002.0°E
    test 649 brng+end 1b: 01.000305°N, 002.0°E
    test 650 brng+end 2a: 01.000305°S, 178.0°W
    test 651 brng+end 2b: 01.000305°S, 178.0°W
    test 652 intersection7: 02.499372°N, 002.5°E
    test 653 maxLat0: 90.0
    test 654 maxLat1: 89.0
    test 655 maxLat90: 0.0
    test 656 minLat0: -90.0
    test 657 minLat1: -89.0
    test 658 minLat90: -0.0
    test 659 parse: 00.0°N, 000.0°E
    test 660 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 661 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 662 intersections2 (pygeodesy.sphericalTrigonometry): 36.989310429, -088.151425243, 38.238379679, -092.390486808
    test 663 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 664 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 665 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 666 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 667 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 668 intersections2 (pygeodesy.sphericalTrigonometry) 5: 1.67511e-15 (% of radius)
    test 669 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 670 intersections2 (pygeodesy.sphericalTrigonometry) 10: 4.18779e-16 (% of radius)
    test 671 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 672 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 673 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 674 intersections2 (pygeodesy.sphericalTrigonometry) 20: 6.28168e-16 (% of radius)
    test 675 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 676 intersections2 (pygeodesy.sphericalTrigonometry) 25: 5.02534e-16 (% of radius)
    test 677 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 678 intersections2 (pygeodesy.sphericalTrigonometry) 30: 4.18779e-16 (% of radius)
    test 679 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 680 intersections2 (pygeodesy.sphericalTrigonometry) 35: 7.17906e-16 (% of radius)
    test 681 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 682 intersections2 (pygeodesy.sphericalTrigonometry) 40: 6.28168e-16 (% of radius)
    test 683 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 684 intersections2 (pygeodesy.sphericalTrigonometry) 45: 1.86124e-16 (% of radius)
    test 685 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 686 intersections2 (pygeodesy.sphericalTrigonometry) 50: 1.67511e-16 (% of radius)
    test 687 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 688 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 689 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 690 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 691 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 692 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 693 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W Random +/- 89
    test 694 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 57.801771°N, 137.559976°E  d 1.41465e-09 meter
    test 695 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 42.937682°S, 065.154646°E  d 2.44571e-09 meter
    test 696 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 25.966189°N, 107.707033°E  d 9.34961e-10 meter
    test 697 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 62.08118°S, 159.592617°W  d 4.41661e-09 meter
    test 698 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 30.35863°S, 122.685445°E  d 1.22286e-09 meter
    test 699 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 21.383405°S, 071.906895°W  d 0 meter
    test 700 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 47.466027°S, 144.625532°E  d 1.22286e-09 meter
    test 701 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 50.560205°N, 133.162011°E  d 7.15082e-09 meter
    test 702 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 29.259503°S, 091.928191°E  d 5.50285e-09 meter
    test 703 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 46.196916°S, 119.783584°W  d 3.73613e-09 meter
    test 704 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 36.975142°S, 029.743619°E  d 7.07324e-10 meter
    test 705 intersections2 (pygeodesy.sphericalTrigonometry): 30.183005°S, 034.829467°W, 33.011448°S, 035.599074°W  d 2.12377e-08 meter
    test 706 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 707 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 708 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 709 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 710 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 711 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 712 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 713 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 714 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 715 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 716 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 717 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 718 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 719 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection (min 1340.608)
    test 720 isenclosedBy: True
    test 721 isenclosedBy*: True
    test 722 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 723 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 724 rhumbBearingTo: 116.722
    test 725 rhumbDestination: 50.964155°N, 001.853°E
    test 726 rhumbDestination: True
    test 727 rhumbDistanceTo: 40307.8
    test 728 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 729 rhumbMidpointo: True
    test 730 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 731 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 732 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 733 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 734 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 735 areaOf: 8.66605875e+09
    test 736 perimeterOf: 3.78258541e+05
    test 737 perimeterOf: 2.67063461e+05
    test 738 areaOf: 6.18e+09
    test 739 perimeterOf: 3.79639757e+05
    test 740 perimeterOf: 2.68444678e+05
    test 741 nearestOn3: 46.0°N, 001.369324°E
    test 742 nearestOn3: 570101.83
    test 743 distanceTo: 570101.82
    test 744 nearestOn3: 46.0°N, 002.0°E
    test 745 nearestOn3: 134992.48
    test 746 distanceTo: 134989.80
    test 747 nearestOn3: 45.5°N, 001.5°E
    test 748 distance: 78626.79
    test 749 angle: 315.00
    test 750 compassAngleTo: 315.00
    test 751 nearestOn3: 45.331319°N, 001.331319°E
    test 752 distance: 64074.48
    test 753 angle: 305.10
    test 754 distanceTo: 64074.12
    test 755 compassAngleTo: 305.10
    test 756 difference: 1000.53
    test 757 nearestOn3: 00.5°N, 001.5°E
    test 758 distance: 235880.385
    test 759 angle: 135.00
    test 760 nearestOn3: 01.5°N, 002.5°E
    test 761 distance: 235880.385
    test 762 angle: 135.00
    test 763 nearestOn3: 02.5°N, 003.5°E
    test 764 distance: 235880.385
    test 765 angle: 135.00
    test 766 nearestOn3: 03.5°N, 004.5°E
    test 767 distance: 235880.385
    test 768 angle: 135.00
    test 769 nearestOn3: 04.5°N, 005.5°E
    test 770 distance: 235880.385
    test 771 angle: 135.00
    test 772 nearestOn3: 05.5°N, 006.5°E
    test 773 distance: 235880.385
    test 774 angle: 135.00
    test 775 nearestOn3: 06.5°N, 007.5°E
    test 776 distance: 235880.385
    test 777 angle: 135.00
    test 778 nearestOn3: 07.5°N, 008.5°E
    test 779 distance: 235880.385
    test 780 angle: 135.00
    test 781 meanOf: 04.004858°N, 004.990226°E
    test 782 nearestOn3: 07.5°N, 008.5°E
    test 783 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 784 ispolar: True
    test 785 ispolar*: True
    test 786 ispolar: False  FAILED, KNOWN, expected True
    test 787 ispolar*: False  FAILED, KNOWN, expected True
    test 788 ispolar: True
    test 789 ispolar*: True
    test 790 triangle7: (22.142114, 2189776.256122, 84.91384, 6998970.168483, 84.91384, 6998970.168483, 8479698853790.72168)
    test 791 triangle7: Triangle8Tuple(A=0.38645, a=0.34371, B=1.48203, b=1.09857, C=1.48203, c=1.09857, D=3.74234, E=0.20891)
    test 792 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 793 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 794 midpointTo: 01.5°N, 001.5°E, +150.00m

    64 of 794 testSpherical.py tests (8.1%) FAILED, incl. 62 KNOWN plus 2 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 110.611 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testStreprs.py

    testing testStreprs.py 21.02.11 (module pygeodesy.streprs 22.06.15)
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%[<flags>][<width>].*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)
    test 42 F: 0.001
    test 43 F: 0.001
    test 44 F: 0.001
    test 45 F: 0.001
    test 46 f: 0.001
    test 47 f: 0.001
    test 48 f: 0.001
    test 49 f: 0.001
    test 50 E: 1.0E-03
    test 51 E: 1.0E-03
    test 52 E: 1.0E-03
    test 53 E: 1.0E-03
    test 54 e: 1.0e-03
    test 55 e: 1.0e-03
    test 56 e: 1.0e-03
    test 57 e: 1.0e-03
    test 58 G: 0.001
    test 59 G: 0.001
    test 60 G: 0.001
    test 61 G: 0.001
    test 62 g: 0.001
    test 63 g: 0.001
    test 64 g: 0.001
    test 65 g: 0.001

    all 65 testStreprs.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 709.057 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testTMcoords.py

    testing testTMcoords.py 19.05.23
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 51.975 us

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testTrf.py
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:29: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:38: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:42: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:46: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:50: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:52: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:59: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:64: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:69: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:74: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:84: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:86: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:88: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:90: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:106: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:112: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:119: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:125: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')

    testing testTrf.py 22.05.12 (module pygeodesy.trf 22.07.05)

    testTrf(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 2 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 3 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 5 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 6 Nil: True
    test 7 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 8 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 Nil: True
    test 10 reframe: True
    test 11 Roundtrip: True
    test 12 reframe: True
    test 13 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 14 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 15 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 16 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 17 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 18 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 19 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 20 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 21 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 22 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 23 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 24 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 25 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 26 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 27 TRFError: epoch (1899): below 1900 limit
    test 28 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 29 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 30 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 31 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 32 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 33 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 34 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 35 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 36 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 37 Nil: True
    test 38 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 39 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 40 Nil: True
    test 41 reframe: True
    test 42 Roundtrip: True
    test 43 reframe: True
    test 44 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 45 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 46 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 47 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 48 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 49 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 50 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 51 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 52 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 53 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 54 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 55 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 56 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 57 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 58 TRFError: epoch (1899): below 1900 limit
    test 59 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 60 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 61 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 62 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 63 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 64 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 65 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 66 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 67 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 68 Nil: True
    test 69 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 70 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 71 Nil: True
    test 72 reframe: True
    test 73 Roundtrip: True
    test 74 reframe: True
    test 75 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 76 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 77 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 78 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 79 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 80 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 81 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 82 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 83 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 84 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 85 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 86 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 87 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 88 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 89 TRFError: epoch (1899): below 1900 limit
    test 90 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 91 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 92 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 93 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalExact, 22.07.07)
    test 94 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 95 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 96 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 97 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 98 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 99 Nil: True
    test 100 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 101 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 102 Nil: True
    test 103 reframe: True
    test 104 Roundtrip: True
    test 105 reframe: True
    test 106 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 107 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 108 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 109 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 110 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 111 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 112 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 113 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 114 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 115 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 116 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 117 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 118 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 119 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 120 TRFError: epoch (1899): below 1900 limit
    test 121 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 122 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 123 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 124 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 125 TRFError: day (2), month (1) or year (None): int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
    test 126 toStr: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 127 str: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 128 toStr2: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 129 repr: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 130 epoch: 2020.003
    test 131 y-m-d: (2020, 1, 1)
    test 132 epoch: 2020.251
    test 133 y-m-d: (2020, 4, 1)
    test 134 epoch: 2020.500
    test 135 y-m-d: (2020, 7, 1)
    test 136 epoch: 2020.751
    test 137 y-m-d: (2020, 10, 1)
    test 138 epoch: 2021.000
    test 139 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)
    test 140 Epoch (2020).std_repr: False
    test 141 Epoch (2020.001): (2020, 1, 1)
    test 142 Epoch (2020.086): (2020, 2, 1)
    test 143 Epoch (2020.165): (2020, 3, 1)
    test 144 Epoch (2020.250): (2020, 4, 1)
    test 145 Epoch (2020.332): (2020, 5, 1)
    test 146 Epoch (2020.416): (2020, 6, 1)
    test 147 Epoch (2020.498): (2020, 7, 1)
    test 148 Epoch (2020.583): (2020, 8, 1)
    test 149 Epoch (2020.668): (2020, 9, 1)
    test 150 Epoch (2020.750): (2020, 10, 1)
    test 151 Epoch (2020.834): (2020, 11, 1)
    test 152 Epoch (2020.916): (2020, 12, 1)
    test 153 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    78 of 153 testTrf.py tests (51.0%) FAILED, incl. 6 KNOWN plus 72 DeprecationWarnings (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 11.749 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUnits.py

    testing testUnits.py 22.01.03

    testing _Lat(1.0,) (pygeodesy.units, 22.04.19)
    test 1 .classname: _Lat
    test 2 isinstance: True
    test 3 .name: _lat
    test 4 .named: _lat
    test 5 .named2: _Lat '_lat'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: _lat (1.0)
    test 11 .units: _lat
    test 12 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 13 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 14 _lat: TypeError
    test 15 .named: Test
    test 16 .named2: _Lat 'Test'
    test 17 .str: 1.0
    test 18 .toStr: 1.0
    test 19 .repr: 1.0
    test 20 .toRepr: Test (1.0)
    test 21 .units: _lat
    test 22 .name: Test
    test 23 ._name: Test
    test 24 .str: 1.0
    test 25 .repr: 1.0
    test 26 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 22.04.19)
    test 27 .classname: _Lon
    test 28 isinstance: True
    test 29 .name: _lon
    test 30 .named: _lon
    test 31 .named2: _Lon '_lon'
    test 32 .str: 1.0
    test 33 .toStr: 1.0
    test 34 .std_repr: True
    test 35 .repr: 1.0
    test 36 .toRepr: _lon (1.0)
    test 37 .units: _lon
    test 38 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 39 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 40 _lon: TypeError
    test 41 .named: Test
    test 42 .named2: _Lon 'Test'
    test 43 .str: 1.0
    test 44 .toStr: 1.0
    test 45 .repr: 1.0
    test 46 .toRepr: Test (1.0)
    test 47 .units: _lon
    test 48 .name: Test
    test 49 ._name: Test
    test 50 .str: 1.0
    test 51 .repr: 1.0
    test 52 delattr: ''

    testing _Lat(1.0,) (pygeodesy.units, 22.04.19)
    test 53 .classname: _Lat
    test 54 isinstance: True
    test 55 .name: _lat
    test 56 .named: _lat
    test 57 .named2: _Lat '_lat'
    test 58 .str: 1.0
    test 59 .toStr: 1.0
    test 60 .std_repr: True
    test 61 .repr: 1.0
    test 62 .toRepr: _lat (1.0)
    test 63 .units: _lat
    test 64 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 65 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 66 _lat: TypeError
    test 67 .named: Test
    test 68 .named2: _Lat 'Test'
    test 69 .str: 1.0
    test 70 .toStr: 1.0
    test 71 .repr: 1.0
    test 72 .toRepr: Test (1.0)
    test 73 .units: _lat
    test 74 .name: Test
    test 75 ._name: Test
    test 76 .str: 1.0
    test 77 .repr: 1.0
    test 78 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 22.04.19)
    test 79 .classname: _Lon
    test 80 isinstance: True
    test 81 .name: _lon
    test 82 .named: _lon
    test 83 .named2: _Lon '_lon'
    test 84 .str: 1.0
    test 85 .toStr: 1.0
    test 86 .std_repr: True
    test 87 .repr: 1.0
    test 88 .toRepr: _lon (1.0)
    test 89 .units: _lon
    test 90 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 91 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 92 _lon: TypeError
    test 93 .named: Test
    test 94 .named2: _Lon 'Test'
    test 95 .str: 1.0
    test 96 .toStr: 1.0
    test 97 .repr: 1.0
    test 98 .toRepr: Test (1.0)
    test 99 .units: _lon
    test 100 .name: Test
    test 101 ._name: Test
    test 102 .str: 1.0
    test 103 .repr: 1.0
    test 104 delattr: ''

    testing Bearing(1.0,) (pygeodesy.units, 22.04.19)
    test 105 .classname: Bearing
    test 106 isinstance: True
    test 107 .name: bearing
    test 108 .named: bearing
    test 109 .named2: Bearing 'bearing'
    test 110 .str: 1.0
    test 111 .toStr: 1.0
    test 112 .std_repr: True
    test 113 .repr: 1.0
    test 114 .toRepr: bearing (1.0)
    test 115 .units: bearing
    test 116 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 117 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 118 bearing: TypeError
    test 119 .named: Test
    test 120 .named2: Bearing 'Test'
    test 121 .str: 1.0
    test 122 .toStr: 1.0
    test 123 .repr: 1.0
    test 124 .toRepr: Test (1.0)
    test 125 .units: bearing
    test 126 .name: Test
    test 127 ._name: Test
    test 128 .str: 1.0
    test 129 .repr: 1.0
    test 130 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 22.04.19)
    test 131 .classname: Degrees
    test 132 isinstance: True
    test 133 .name: degrees
    test 134 .named: degrees
    test 135 .named2: Degrees 'degrees'
    test 136 .str: 1.0
    test 137 .toStr: 1.0
    test 138 .std_repr: True
    test 139 .repr: 1.0
    test 140 .toRepr: degrees (1.0)
    test 141 .units: degrees
    test 142 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 143 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 144 degrees: TypeError
    test 145 .named: Test
    test 146 .named2: Degrees 'Test'
    test 147 .str: 1.0
    test 148 .toStr: 1.0
    test 149 .repr: 1.0
    test 150 .toRepr: Test (1.0)
    test 151 .units: degrees
    test 152 .name: Test
    test 153 ._name: Test
    test 154 .str: 1.0
    test 155 .repr: 1.0
    test 156 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 22.04.19)
    test 157 .classname: Degrees2
    test 158 isinstance: True
    test 159 .name: degrees2
    test 160 .named: degrees2
    test 161 .named2: Degrees2 'degrees2'
    test 162 .str: 1.0
    test 163 .toStr: 1.0
    test 164 .std_repr: True
    test 165 .repr: 1.0
    test 166 .toRepr: degrees2 (1.0)
    test 167 .units: degrees2
    test 168 degrees2: degrees2 ('X'): could not convert string to float: 'X'
    test 169 degrees2: U ('X'): could not convert string to float: 'X'
    test 170 degrees2: TypeError
    test 171 .named: Test
    test 172 .named2: Degrees2 'Test'
    test 173 .str: 1.0
    test 174 .toStr: 1.0
    test 175 .repr: 1.0
    test 176 .toRepr: Test (1.0)
    test 177 .units: degrees2
    test 178 .name: Test
    test 179 ._name: Test
    test 180 .str: 1.0
    test 181 .repr: 1.0
    test 182 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 22.04.19)
    test 183 .classname: Degrees_
    test 184 isinstance: True
    test 185 .name: degrees_
    test 186 .named: degrees_
    test 187 .named2: Degrees_ 'degrees_'
    test 188 .str: 1.0
    test 189 .toStr: 1.0
    test 190 .std_repr: True
    test 191 .repr: 1.0
    test 192 .toRepr: degrees_ (1.0)
    test 193 .units: degrees_
    test 194 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 195 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 196 degrees_: TypeError
    test 197 .named: Test
    test 198 .named2: Degrees_ 'Test'
    test 199 .str: 1.0
    test 200 .toStr: 1.0
    test 201 .repr: 1.0
    test 202 .toRepr: Test (1.0)
    test 203 .units: degrees_
    test 204 .name: Test
    test 205 ._name: Test
    test 206 .str: 1.0
    test 207 .repr: 1.0
    test 208 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 22.04.19)
    test 209 .classname: Distance
    test 210 isinstance: True
    test 211 .name: distance
    test 212 .named: distance
    test 213 .named2: Distance 'distance'
    test 214 .str: 1.0
    test 215 .toStr: 1.0
    test 216 .std_repr: True
    test 217 .repr: 1.0
    test 218 .toRepr: distance (1.0)
    test 219 .units: distance
    test 220 distance: distance ('X'): could not convert string to float: 'X'
    test 221 distance: U ('X'): could not convert string to float: 'X'
    test 222 distance: TypeError
    test 223 .named: Test
    test 224 .named2: Distance 'Test'
    test 225 .str: 1.0
    test 226 .toStr: 1.0
    test 227 .repr: 1.0
    test 228 .toRepr: Test (1.0)
    test 229 .units: distance
    test 230 .name: Test
    test 231 ._name: Test
    test 232 .str: 1.0
    test 233 .repr: 1.0
    test 234 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 22.04.19)
    test 235 .classname: Distance_
    test 236 isinstance: True
    test 237 .name: distance_
    test 238 .named: distance_
    test 239 .named2: Distance_ 'distance_'
    test 240 .str: 1.0
    test 241 .toStr: 1.0
    test 242 .std_repr: True
    test 243 .repr: 1.0
    test 244 .toRepr: distance_ (1.0)
    test 245 .units: distance_
    test 246 distance_: distance ('X'): could not convert string to float: 'X'
    test 247 distance_: U ('X'): could not convert string to float: 'X'
    test 248 distance_: TypeError
    test 249 .named: Test
    test 250 .named2: Distance_ 'Test'
    test 251 .str: 1.0
    test 252 .toStr: 1.0
    test 253 .repr: 1.0
    test 254 .toRepr: Test (1.0)
    test 255 .units: distance_
    test 256 .name: Test
    test 257 ._name: Test
    test 258 .str: 1.0
    test 259 .repr: 1.0
    test 260 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 22.04.19)
    test 261 .classname: Easting
    test 262 isinstance: True
    test 263 .name: easting
    test 264 .named: easting
    test 265 .named2: Easting 'easting'
    test 266 .str: 1.0
    test 267 .toStr: 1.0
    test 268 .std_repr: True
    test 269 .repr: 1.0
    test 270 .toRepr: easting (1.0)
    test 271 .units: easting
    test 272 easting: easting ('X'): could not convert string to float: 'X'
    test 273 easting: U ('X'): could not convert string to float: 'X'
    test 274 easting: TypeError
    test 275 .named: Test
    test 276 .named2: Easting 'Test'
    test 277 .str: 1.0
    test 278 .toStr: 1.0
    test 279 .repr: 1.0
    test 280 .toRepr: Test (1.0)
    test 281 .units: easting
    test 282 .name: Test
    test 283 ._name: Test
    test 284 .str: 1.0
    test 285 .repr: 1.0
    test 286 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 22.04.19)
    test 287 .classname: Feet
    test 288 isinstance: True
    test 289 .name: feet
    test 290 .named: feet
    test 291 .named2: Feet 'feet'
    test 292 .str: 1.0
    test 293 .toStr: 1.0
    test 294 .std_repr: True
    test 295 .repr: 1.0
    test 296 .toRepr: feet (1.0)
    test 297 .units: feet
    test 298 feet: feet ('X'): could not convert string to float: 'X'
    test 299 feet: U ('X'): could not convert string to float: 'X'
    test 300 feet: TypeError
    test 301 .named: Test
    test 302 .named2: Feet 'Test'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .repr: 1.0
    test 306 .toRepr: Test (1.0)
    test 307 .units: feet
    test 308 .name: Test
    test 309 ._name: Test
    test 310 .str: 1.0
    test 311 .repr: 1.0
    test 312 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 22.04.19)
    test 313 .classname: Float
    test 314 isinstance: True
    test 315 .name: float
    test 316 .named: float
    test 317 .named2: Float 'float'
    test 318 .str: 1.0
    test 319 .toStr: 1.0
    test 320 .std_repr: True
    test 321 .repr: 1.0
    test 322 .toRepr: float (1.0)
    test 323 .units: float
    test 324 float: Float ('X'): could not convert string to float: 'X'
    test 325 float: U ('X'): could not convert string to float: 'X'
    test 326 float: TypeError
    test 327 .named: Test
    test 328 .named2: Float 'Test'
    test 329 .str: 1.0
    test 330 .toStr: 1.0
    test 331 .repr: 1.0
    test 332 .toRepr: Test (1.0)
    test 333 .units: float
    test 334 .name: Test
    test 335 ._name: Test
    test 336 .str: 1.0
    test 337 .repr: 1.0
    test 338 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 22.04.19)
    test 339 .classname: Float_
    test 340 isinstance: True
    test 341 .name: float_
    test 342 .named: float_
    test 343 .named2: Float_ 'float_'
    test 344 .str: 1.0
    test 345 .toStr: 1.0
    test 346 .std_repr: True
    test 347 .repr: 1.0
    test 348 .toRepr: float_ (1.0)
    test 349 .units: float_
    test 350 float_: Float_ ('X'): could not convert string to float: 'X'
    test 351 float_: U ('X'): could not convert string to float: 'X'
    test 352 float_: TypeError
    test 353 .named: Test
    test 354 .named2: Float_ 'Test'
    test 355 .str: 1.0
    test 356 .toStr: 1.0
    test 357 .repr: 1.0
    test 358 .toRepr: Test (1.0)
    test 359 .units: float_
    test 360 .name: Test
    test 361 ._name: Test
    test 362 .str: 1.0
    test 363 .repr: 1.0
    test 364 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 22.04.19)
    test 365 .classname: Height
    test 366 isinstance: True
    test 367 .name: height
    test 368 .named: height
    test 369 .named2: Height 'height'
    test 370 .str: 1.0
    test 371 .toStr: 1.0
    test 372 .std_repr: True
    test 373 .repr: 1.0
    test 374 .toRepr: height (1.0)
    test 375 .units: height
    test 376 height: height ('X'): could not convert string to float: 'X'
    test 377 height: U ('X'): could not convert string to float: 'X'
    test 378 height: TypeError
    test 379 .named: Test
    test 380 .named2: Height 'Test'
    test 381 .str: 1.0
    test 382 .toStr: 1.0
    test 383 .repr: 1.0
    test 384 .toRepr: Test (1.0)
    test 385 .units: height
    test 386 .name: Test
    test 387 ._name: Test
    test 388 .str: 1.0
    test 389 .repr: 1.0
    test 390 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 22.04.19)
    test 391 .classname: Lam
    test 392 isinstance: True
    test 393 .name: lam
    test 394 .named: lam
    test 395 .named2: Lam 'lam'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .std_repr: True
    test 399 .repr: 1.0
    test 400 .toRepr: lam (1.0)
    test 401 .units: lam
    test 402 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 403 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 404 lam: TypeError
    test 405 .named: Test
    test 406 .named2: Lam 'Test'
    test 407 .str: 1.0
    test 408 .toStr: 1.0
    test 409 .repr: 1.0
    test 410 .toRepr: Test (1.0)
    test 411 .units: lam
    test 412 .name: Test
    test 413 ._name: Test
    test 414 .str: 1.0
    test 415 .repr: 1.0
    test 416 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 22.04.19)
    test 417 .classname: Lat
    test 418 isinstance: True
    test 419 .name: lat
    test 420 .named: lat
    test 421 .named2: Lat 'lat'
    test 422 .str: 1.0
    test 423 .toStr: 1.0
    test 424 .std_repr: True
    test 425 .repr: 1.0
    test 426 .toRepr: lat (1.0)
    test 427 .units: lat
    test 428 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 429 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 430 lat: TypeError
    test 431 .named: Test
    test 432 .named2: Lat 'Test'
    test 433 .str: 1.0
    test 434 .toStr: 1.0
    test 435 .repr: 1.0
    test 436 .toRepr: Test (1.0)
    test 437 .units: lat
    test 438 .name: Test
    test 439 ._name: Test
    test 440 .str: 1.0
    test 441 .repr: 1.0
    test 442 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 22.04.19)
    test 443 .classname: Lat_
    test 444 isinstance: True
    test 445 .name: lat_
    test 446 .named: lat_
    test 447 .named2: Lat_ 'lat_'
    test 448 .str: 1.0
    test 449 .toStr: 1.0
    test 450 .std_repr: True
    test 451 .repr: 1.0
    test 452 .toRepr: lat_ (1.0)
    test 453 .units: lat_
    test 454 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 455 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 456 lat_: TypeError
    test 457 .named: Test
    test 458 .named2: Lat_ 'Test'
    test 459 .str: 1.0
    test 460 .toStr: 1.0
    test 461 .repr: 1.0
    test 462 .toRepr: Test (1.0)
    test 463 .units: lat_
    test 464 .name: Test
    test 465 ._name: Test
    test 466 .str: 1.0
    test 467 .repr: 1.0
    test 468 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 22.04.19)
    test 469 .classname: Lon
    test 470 isinstance: True
    test 471 .name: lon
    test 472 .named: lon
    test 473 .named2: Lon 'lon'
    test 474 .str: 1.0
    test 475 .toStr: 1.0
    test 476 .std_repr: True
    test 477 .repr: 1.0
    test 478 .toRepr: lon (1.0)
    test 479 .units: lon
    test 480 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 481 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 482 lon: TypeError
    test 483 .named: Test
    test 484 .named2: Lon 'Test'
    test 485 .str: 1.0
    test 486 .toStr: 1.0
    test 487 .repr: 1.0
    test 488 .toRepr: Test (1.0)
    test 489 .units: lon
    test 490 .name: Test
    test 491 ._name: Test
    test 492 .str: 1.0
    test 493 .repr: 1.0
    test 494 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 22.04.19)
    test 495 .classname: Lon_
    test 496 isinstance: True
    test 497 .name: lon_
    test 498 .named: lon_
    test 499 .named2: Lon_ 'lon_'
    test 500 .str: 1.0
    test 501 .toStr: 1.0
    test 502 .std_repr: True
    test 503 .repr: 1.0
    test 504 .toRepr: lon_ (1.0)
    test 505 .units: lon_
    test 506 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 507 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 508 lon_: TypeError
    test 509 .named: Test
    test 510 .named2: Lon_ 'Test'
    test 511 .str: 1.0
    test 512 .toStr: 1.0
    test 513 .repr: 1.0
    test 514 .toRepr: Test (1.0)
    test 515 .units: lon_
    test 516 .name: Test
    test 517 ._name: Test
    test 518 .str: 1.0
    test 519 .repr: 1.0
    test 520 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 22.04.19)
    test 521 .classname: Meter
    test 522 isinstance: True
    test 523 .name: meter
    test 524 .named: meter
    test 525 .named2: Meter 'meter'
    test 526 .str: 1.0
    test 527 .toStr: 1.0
    test 528 .std_repr: True
    test 529 .repr: 1.0
    test 530 .toRepr: meter (1.0)
    test 531 .units: meter
    test 532 meter: meter ('X'): could not convert string to float: 'X'
    test 533 meter: U ('X'): could not convert string to float: 'X'
    test 534 meter: TypeError
    test 535 .named: Test
    test 536 .named2: Meter 'Test'
    test 537 .str: 1.0
    test 538 .toStr: 1.0
    test 539 .repr: 1.0
    test 540 .toRepr: Test (1.0)
    test 541 .units: meter
    test 542 .name: Test
    test 543 ._name: Test
    test 544 .str: 1.0
    test 545 .repr: 1.0
    test 546 delattr: ''

    testing Meter2(1.0,) (pygeodesy.units, 22.04.19)
    test 547 .classname: Meter2
    test 548 isinstance: True
    test 549 .name: meter2
    test 550 .named: meter2
    test 551 .named2: Meter2 'meter2'
    test 552 .str: 1.0
    test 553 .toStr: 1.0
    test 554 .std_repr: True
    test 555 .repr: 1.0
    test 556 .toRepr: meter2 (1.0)
    test 557 .units: meter2
    test 558 meter2: meter2 ('X'): could not convert string to float: 'X'
    test 559 meter2: U ('X'): could not convert string to float: 'X'
    test 560 meter2: TypeError
    test 561 .named: Test
    test 562 .named2: Meter2 'Test'
    test 563 .str: 1.0
    test 564 .toStr: 1.0
    test 565 .repr: 1.0
    test 566 .toRepr: Test (1.0)
    test 567 .units: meter2
    test 568 .name: Test
    test 569 ._name: Test
    test 570 .str: 1.0
    test 571 .repr: 1.0
    test 572 delattr: ''

    testing Meter3(1.0,) (pygeodesy.units, 22.04.19)
    test 573 .classname: Meter3
    test 574 isinstance: True
    test 575 .name: meter3
    test 576 .named: meter3
    test 577 .named2: Meter3 'meter3'
    test 578 .str: 1.0
    test 579 .toStr: 1.0
    test 580 .std_repr: True
    test 581 .repr: 1.0
    test 582 .toRepr: meter3 (1.0)
    test 583 .units: meter3
    test 584 meter3: meter3 ('X'): could not convert string to float: 'X'
    test 585 meter3: U ('X'): could not convert string to float: 'X'
    test 586 meter3: TypeError
    test 587 .named: Test
    test 588 .named2: Meter3 'Test'
    test 589 .str: 1.0
    test 590 .toStr: 1.0
    test 591 .repr: 1.0
    test 592 .toRepr: Test (1.0)
    test 593 .units: meter3
    test 594 .name: Test
    test 595 ._name: Test
    test 596 .str: 1.0
    test 597 .repr: 1.0
    test 598 delattr: ''

    testing Meter_(1.0,) (pygeodesy.units, 22.04.19)
    test 599 .classname: Meter_
    test 600 isinstance: True
    test 601 .name: meter_
    test 602 .named: meter_
    test 603 .named2: Meter_ 'meter_'
    test 604 .str: 1.0
    test 605 .toStr: 1.0
    test 606 .std_repr: True
    test 607 .repr: 1.0
    test 608 .toRepr: meter_ (1.0)
    test 609 .units: meter_
    test 610 meter_: meter ('X'): could not convert string to float: 'X'
    test 611 meter_: U ('X'): could not convert string to float: 'X'
    test 612 meter_: TypeError
    test 613 .named: Test
    test 614 .named2: Meter_ 'Test'
    test 615 .str: 1.0
    test 616 .toStr: 1.0
    test 617 .repr: 1.0
    test 618 .toRepr: Test (1.0)
    test 619 .units: meter_
    test 620 .name: Test
    test 621 ._name: Test
    test 622 .str: 1.0
    test 623 .repr: 1.0
    test 624 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 22.04.19)
    test 625 .classname: Northing
    test 626 isinstance: True
    test 627 .name: northing
    test 628 .named: northing
    test 629 .named2: Northing 'northing'
    test 630 .str: 1.0
    test 631 .toStr: 1.0
    test 632 .std_repr: True
    test 633 .repr: 1.0
    test 634 .toRepr: northing (1.0)
    test 635 .units: northing
    test 636 northing: northing ('X'): could not convert string to float: 'X'
    test 637 northing: U ('X'): could not convert string to float: 'X'
    test 638 northing: TypeError
    test 639 .named: Test
    test 640 .named2: Northing 'Test'
    test 641 .str: 1.0
    test 642 .toStr: 1.0
    test 643 .repr: 1.0
    test 644 .toRepr: Test (1.0)
    test 645 .units: northing
    test 646 .name: Test
    test 647 ._name: Test
    test 648 .str: 1.0
    test 649 .repr: 1.0
    test 650 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 22.04.19)
    test 651 .classname: Phi
    test 652 isinstance: True
    test 653 .name: phi
    test 654 .named: phi
    test 655 .named2: Phi 'phi'
    test 656 .str: 1.0
    test 657 .toStr: 1.0
    test 658 .std_repr: True
    test 659 .repr: 1.0
    test 660 .toRepr: phi (1.0)
    test 661 .units: phi
    test 662 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 663 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 664 phi: TypeError
    test 665 .named: Test
    test 666 .named2: Phi 'Test'
    test 667 .str: 1.0
    test 668 .toStr: 1.0
    test 669 .repr: 1.0
    test 670 .toRepr: Test (1.0)
    test 671 .units: phi
    test 672 .name: Test
    test 673 ._name: Test
    test 674 .str: 1.0
    test 675 .repr: 1.0
    test 676 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 22.04.19)
    test 677 .classname: Radians
    test 678 isinstance: True
    test 679 .name: radians
    test 680 .named: radians
    test 681 .named2: Radians 'radians'
    test 682 .str: 1.0
    test 683 .toStr: 1.0
    test 684 .std_repr: True
    test 685 .repr: 1.0
    test 686 .toRepr: radians (1.0)
    test 687 .units: radians
    test 688 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 689 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 690 radians: TypeError
    test 691 .named: Test
    test 692 .named2: Radians 'Test'
    test 693 .str: 1.0
    test 694 .toStr: 1.0
    test 695 .repr: 1.0
    test 696 .toRepr: Test (1.0)
    test 697 .units: radians
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: 1.0
    test 701 .repr: 1.0
    test 702 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 22.04.19)
    test 703 .classname: Radians2
    test 704 isinstance: True
    test 705 .name: radians2
    test 706 .named: radians2
    test 707 .named2: Radians2 'radians2'
    test 708 .str: 1.0
    test 709 .toStr: 1.0
    test 710 .std_repr: True
    test 711 .repr: 1.0
    test 712 .toRepr: radians2 (1.0)
    test 713 .units: radians2
    test 714 radians2: radians2 ('X'): could not convert string to float: 'X'
    test 715 radians2: U ('X'): could not convert string to float: 'X'
    test 716 radians2: TypeError
    test 717 .named: Test
    test 718 .named2: Radians2 'Test'
    test 719 .str: 1.0
    test 720 .toStr: 1.0
    test 721 .repr: 1.0
    test 722 .toRepr: Test (1.0)
    test 723 .units: radians2
    test 724 .name: Test
    test 725 ._name: Test
    test 726 .str: 1.0
    test 727 .repr: 1.0
    test 728 delattr: ''

    testing Radians_(1.0,) (pygeodesy.units, 22.04.19)
    test 729 .classname: Radians_
    test 730 isinstance: True
    test 731 .name: radians_
    test 732 .named: radians_
    test 733 .named2: Radians_ 'radians_'
    test 734 .str: 1.0
    test 735 .toStr: 1.0
    test 736 .std_repr: True
    test 737 .repr: 1.0
    test 738 .toRepr: radians_ (1.0)
    test 739 .units: radians_
    test 740 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 741 radians_: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 742 radians_: TypeError
    test 743 .named: Test
    test 744 .named2: Radians_ 'Test'
    test 745 .str: 1.0
    test 746 .toStr: 1.0
    test 747 .repr: 1.0
    test 748 .toRepr: Test (1.0)
    test 749 .units: radians_
    test 750 .name: Test
    test 751 ._name: Test
    test 752 .str: 1.0
    test 753 .repr: 1.0
    test 754 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 22.04.19)
    test 755 .classname: Radius
    test 756 isinstance: True
    test 757 .name: radius
    test 758 .named: radius
    test 759 .named2: Radius 'radius'
    test 760 .str: 1.0
    test 761 .toStr: 1.0
    test 762 .std_repr: True
    test 763 .repr: 1.0
    test 764 .toRepr: radius (1.0)
    test 765 .units: radius
    test 766 radius: radius ('X'): could not convert string to float: 'X'
    test 767 radius: U ('X'): could not convert string to float: 'X'
    test 768 radius: TypeError
    test 769 .named: Test
    test 770 .named2: Radius 'Test'
    test 771 .str: 1.0
    test 772 .toStr: 1.0
    test 773 .repr: 1.0
    test 774 .toRepr: Test (1.0)
    test 775 .units: radius
    test 776 .name: Test
    test 777 ._name: Test
    test 778 .str: 1.0
    test 779 .repr: 1.0
    test 780 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 22.04.19)
    test 781 .classname: Radius_
    test 782 isinstance: True
    test 783 .name: radius_
    test 784 .named: radius_
    test 785 .named2: Radius_ 'radius_'
    test 786 .str: 1.0
    test 787 .toStr: 1.0
    test 788 .std_repr: True
    test 789 .repr: 1.0
    test 790 .toRepr: radius_ (1.0)
    test 791 .units: radius_
    test 792 radius_: radius ('X'): could not convert string to float: 'X'
    test 793 radius_: U ('X'): could not convert string to float: 'X'
    test 794 radius_: TypeError
    test 795 .named: Test
    test 796 .named2: Radius_ 'Test'
    test 797 .str: 1.0
    test 798 .toStr: 1.0
    test 799 .repr: 1.0
    test 800 .toRepr: Test (1.0)
    test 801 .units: radius_
    test 802 .name: Test
    test 803 ._name: Test
    test 804 .str: 1.0
    test 805 .repr: 1.0
    test 806 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 22.04.19)
    test 807 .classname: Scalar
    test 808 isinstance: True
    test 809 .name: scalar
    test 810 .named: scalar
    test 811 .named2: Scalar 'scalar'
    test 812 .str: 1.0
    test 813 .toStr: 1.0
    test 814 .std_repr: True
    test 815 .repr: 1.0
    test 816 .toRepr: scalar (1.0)
    test 817 .units: scalar
    test 818 scalar: scalar ('X'): could not convert string to float: 'X'
    test 819 scalar: U ('X'): could not convert string to float: 'X'
    test 820 scalar: TypeError
    test 821 .named: Test
    test 822 .named2: Scalar 'Test'
    test 823 .str: 1.0
    test 824 .toStr: 1.0
    test 825 .repr: 1.0
    test 826 .toRepr: Test (1.0)
    test 827 .units: scalar
    test 828 .name: Test
    test 829 ._name: Test
    test 830 .str: 1.0
    test 831 .repr: 1.0
    test 832 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 22.04.19)
    test 833 .classname: Scalar_
    test 834 isinstance: True
    test 835 .name: scalar_
    test 836 .named: scalar_
    test 837 .named2: Scalar_ 'scalar_'
    test 838 .str: 1.0
    test 839 .toStr: 1.0
    test 840 .std_repr: True
    test 841 .repr: 1.0
    test 842 .toRepr: scalar_ (1.0)
    test 843 .units: scalar_
    test 844 scalar_: scalar ('X'): could not convert string to float: 'X'
    test 845 scalar_: U ('X'): could not convert string to float: 'X'
    test 846 scalar_: TypeError
    test 847 .named: Test
    test 848 .named2: Scalar_ 'Test'
    test 849 .str: 1.0
    test 850 .toStr: 1.0
    test 851 .repr: 1.0
    test 852 .toRepr: Test (1.0)
    test 853 .units: scalar_
    test 854 .name: Test
    test 855 ._name: Test
    test 856 .str: 1.0
    test 857 .repr: 1.0
    test 858 delattr: ''

    testing Band('U',) (pygeodesy.units, 22.04.19)
    test 859 .classname: Band
    test 860 isinstance: True
    test 861 .name: band
    test 862 .named: band
    test 863 .named2: Band 'band'
    test 864 .str: U
    test 865 .toStr: U
    test 866 .std_repr: True
    test 867 .repr: 'U'
    test 868 .toRepr: band ('U')
    test 869 .units: band
    test 870 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 871 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 872 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 873 .named: Test
    test 874 .named2: Band 'Test'
    test 875 .str: U
    test 876 .toStr: U
    test 877 .repr: 'U'
    test 878 .toRepr: Test ('U')
    test 879 .units: band
    test 880 .name: Test
    test 881 ._name: Test
    test 882 .str: U
    test 883 .repr: 'U'
    test 884 delattr: ''

    testing Str('U',) (pygeodesy.units, 22.04.19)
    test 885 .classname: Str
    test 886 isinstance: True
    test 887 .name: str
    test 888 .named: str
    test 889 .named2: Str 'str'
    test 890 .str: U
    test 891 .toStr: U
    test 892 .std_repr: True
    test 893 .repr: 'U'
    test 894 .toRepr: str ('U')
    test 895 .units: str
    test 896 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 897 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 898 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 899 .named: Test
    test 900 .named2: Str 'Test'
    test 901 .str: U
    test 902 .toStr: U
    test 903 .repr: 'U'
    test 904 .toRepr: Test ('U')
    test 905 .units: str
    test 906 .name: Test
    test 907 ._name: Test
    test 908 .str: U
    test 909 .repr: 'U'
    test 910 delattr: ''

    testing Bool(True,) (pygeodesy.units, 22.04.19)
    test 911 .classname: Bool
    test 912 isinstance: True
    test 913 .name: bool
    test 914 .named: bool
    test 915 .named2: Bool 'bool'
    test 916 .str: True
    test 917 .toStr: True
    test 918 .std_repr: True
    test 919 .repr: True
    test 920 .toRepr: bool (True)
    test 921 .units: bool
    test 922 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 923 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 924 Error: True  FAILED, KNOWN, expected <class 'TypeError'>
    test 925 .named: Test
    test 926 .named2: Bool 'Test'
    test 927 .str: True
    test 928 .toStr: True
    test 929 .repr: True
    test 930 .toRepr: Test (True)
    test 931 .units: bool
    test 932 .name: Test
    test 933 ._name: Test
    test 934 .str: True
    test 935 .repr: True
    test 936 delattr: ''

    testing Int(2,) (pygeodesy.units, 22.04.19)
    test 937 .classname: Int
    test 938 isinstance: True
    test 939 .name: int
    test 940 .named: int
    test 941 .named2: Int 'int'
    test 942 .str: 2
    test 943 .toStr: 2
    test 944 .std_repr: True
    test 945 .repr: 2
    test 946 .toRepr: int (2)
    test 947 .units: int
    test 948 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 949 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 950 int: TypeError
    test 951 .named: Test
    test 952 .named2: Int 'Test'
    test 953 .str: 2
    test 954 .toStr: 2
    test 955 .repr: 2
    test 956 .toRepr: Test (2)
    test 957 .units: int
    test 958 .name: Test
    test 959 ._name: Test
    test 960 .str: 2
    test 961 .repr: 2
    test 962 delattr: ''

    testing Int_(2,) (pygeodesy.units, 22.04.19)
    test 963 .classname: Int_
    test 964 isinstance: True
    test 965 .name: int_
    test 966 .named: int_
    test 967 .named2: Int_ 'int_'
    test 968 .str: 2
    test 969 .toStr: 2
    test 970 .std_repr: True
    test 971 .repr: 2
    test 972 .toRepr: int_ (2)
    test 973 .units: int_
    test 974 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 975 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 976 int_: TypeError
    test 977 .named: Test
    test 978 .named2: Int_ 'Test'
    test 979 .str: 2
    test 980 .toStr: 2
    test 981 .repr: 2
    test 982 .toRepr: Test (2)
    test 983 .units: int_
    test 984 .name: Test
    test 985 ._name: Test
    test 986 .str: 2
    test 987 .repr: 2
    test 988 delattr: ''

    testing Number_(2,) (pygeodesy.units, 22.04.19)
    test 989 .classname: Number_
    test 990 isinstance: True
    test 991 .name: number_
    test 992 .named: number_
    test 993 .named2: Number_ 'number_'
    test 994 .str: 2
    test 995 .toStr: 2
    test 996 .std_repr: True
    test 997 .repr: 2
    test 998 .toRepr: number_ (2)
    test 999 .units: number_
    test 1000 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 1001 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1002 number_: TypeError
    test 1003 .named: Test
    test 1004 .named2: Number_ 'Test'
    test 1005 .str: 2
    test 1006 .toStr: 2
    test 1007 .repr: 2
    test 1008 .toRepr: Test (2)
    test 1009 .units: number_
    test 1010 .name: Test
    test 1011 ._name: Test
    test 1012 .str: 2
    test 1013 .repr: 2
    test 1014 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 22.04.19)
    test 1015 .classname: Precision_
    test 1016 isinstance: True
    test 1017 .name: precision_
    test 1018 .named: precision_
    test 1019 .named2: Precision_ 'precision_'
    test 1020 .str: 2
    test 1021 .toStr: 2
    test 1022 .std_repr: True
    test 1023 .repr: 2
    test 1024 .toRepr: precision_ (2)
    test 1025 .units: precision_
    test 1026 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 1027 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1028 precision_: TypeError
    test 1029 .named: Test
    test 1030 .named2: Precision_ 'Test'
    test 1031 .str: 2
    test 1032 .toStr: 2
    test 1033 .repr: 2
    test 1034 .toRepr: Test (2)
    test 1035 .units: precision_
    test 1036 .name: Test
    test 1037 ._name: Test
    test 1038 .str: 2
    test 1039 .repr: 2
    test 1040 delattr: ''

    testing Zone(2,) (pygeodesy.units, 22.04.19)
    test 1041 .classname: Zone
    test 1042 isinstance: True
    test 1043 .name: zone
    test 1044 .named: zone
    test 1045 .named2: Zone 'zone'
    test 1046 .str: 2
    test 1047 .toStr: 2
    test 1048 .std_repr: True
    test 1049 .repr: 2
    test 1050 .toRepr: zone (2)
    test 1051 .units: zone
    test 1052 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 1053 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 1054 zone: TypeError
    test 1055 .named: Test
    test 1056 .named2: Zone 'Test'
    test 1057 .str: 2
    test 1058 .toStr: 2
    test 1059 .repr: 2
    test 1060 .toRepr: Test (2)
    test 1061 .units: zone
    test 1062 .name: Test
    test 1063 ._name: Test
    test 1064 .str: 2
    test 1065 .repr: 2
    test 1066 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 22.04.19)
    test 1067 .classname: Epoch
    test 1068 isinstance: True
    test 1069 .name: epoch
    test 1070 .named: epoch
    test 1071 .named2: Epoch 'epoch'
    test 1072 .str: 1901
    test 1073 .toStr: 1901
    test 1074 .std_repr: False
    test 1075 .repr: epoch (1901)
    test 1076 .toRepr: epoch (1901)
    test 1077 .units: epoch
    test 1078 epoch: epoch ('X'): could not convert string to float: 'X'
    test 1079 epoch: U ('X'): could not convert string to float: 'X'
    test 1080 epoch: TypeError
    test 1081 .named: Test
    test 1082 .named2: Epoch 'Test'
    test 1083 .str: 1901
    test 1084 .toStr: 1901
    test 1085 .repr: Test (1901)
    test 1086 .toRepr: Test (1901)
    test 1087 .units: epoch
    test 1088 .name: Test
    test 1089 ._name: Test
    test 1090 .str: 1901
    test 1091 .repr: Test (1901)
    test 1092 delattr: ''

    testing(pygeodesy.units, 22.04.19)
    test 1093 Bearing: 1.0
    test 1094 Bearing_: 0.01745
    test 1095 Lam_: 6.30
    test 1096 Phi_: 6.30
    test 1097 FIx: 1.0  FAILED, KNOWN, expected 1
    test 1098 FIx: 1.5

    10 of 1098 testUnits.py tests (0.9%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 14.325 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUps.py

    testing testUps.py 22.02.11 (module pygeodesy.ups 22.06.26)
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 Ups.toLatLon: 43.684097°N, 175.265195°E
    test 7 Ups.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 8 Ups.toMgrs: 60T UP 60176 38249
    test 9 Ups.toUps: 00 N 448252 5411933
    test 10 Ups.toUtm: 60 N 360177 4838249
    test 11 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 12 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 13 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 15 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 16 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 17 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 18 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 19 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 20 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 21 latlon: 84.0°N, 084.0°E
    test 22 toUps: 00 N 2663075 1930308
    test 23 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 24 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 25 .scale0: 0.994000
    test 26 rescale0: 0.997261
    test 27 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 28 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 29 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 30 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 31 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 32 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 33 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 34 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 35 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 36 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 37 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 38 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 39 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 40 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 41 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 42 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 43 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 44 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 45 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 46 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 47 NGA-10.3-1: -64.9164123332 -135.0
    test 48 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 49 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 50 NGA-10.3-4: -70.0552944014 153.4349488229
    test 51 NGA-10.3-5: -64.9164123332 135.0
    test 52 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 53 NGA-10.3-7: -77.3120791908 -135.0
    test 54 NGA-10.3-8: -81.0106632645 180.0
    test 55 NGA-10.3-9: -77.3120791908 135.0
    test 56 NGA-10.3-10: -70.0552944014 116.5650511771
    test 57 NGA-10.3-11: -72.1263610163 -90.0
    test 58 NGA-10.3-12: -81.0106632645 -90.0
    test 59 NGA-10.3-13: -90.0 0.0
    test 60 NGA-10.3-14: -81.0106632645 90.0
    test 61 NGA-10.3-15: -72.1263610163 90.0
    test 62 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 63 NGA-10.3-17: -77.3120791908 -45.0
    test 64 NGA-10.3-18: -81.0106632645 0.0
    test 65 NGA-10.3-19: -77.3120791908 45.0
    test 66 NGA-10.3-20: -70.0552944014 63.4349488229
    test 67 NGA-10.3-21: -64.9164123332 -45.0
    test 68 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 69 NGA-10.3-23: -72.1263610163 0.0
    test 70 NGA-10.3-24: -70.0552944014 26.5650511771
    test 71 NGA-10.3-25: -64.9164123332 45.0

    2 of 71 testUps.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 10.453 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUtily.py

    testing testUtily.py 22.05.12 (module pygeodesy.utily 22.05.14)
    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): -180.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): -180.0
    test 6 degrees90(-PI2): 0.0
    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0
    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0
    test 19 degrees2grades(90): 100.0
    test 20 degrees2grades(180): 200.0
    test 21 degrees2grades(360): 400.0
    test 22 degrees2grades(-90): -100.0
    test 23 degrees2grades(-180): -200.0
    test 24 degrees2grades(-360): -400.0
    test 25 grades400(PI_2): 100.0
    test 26 grades400(PI): 200.0
    test 27 grades400(PI2): 0.0
    test 28 grades400(-PI_2): 300.0
    test 29 grades400(-PI): 200.0
    test 30 grades400(-PI2): 0.0
    test 31 grades2degrees(100): 90.0
    test 32 grades2degrees(200): 180.0
    test 33 grades2degrees(400): 360.0
    test 34 grades2degrees(-100): -90.0
    test 35 grades2degrees(-200): -180.0
    test 36 grades2degrees(-400): -360.0
    test 37 grades2radians(100): 1.5707963267948966
    test 38 grades2radians(200): 3.141592653589793
    test 39 grades2radians(400): 6.283185307179586
    test 40 grades2radians(-100): -1.5707963267948966
    test 41 grades2radians(-200): -3.141592653589793
    test 42 grades2radians(-400): -6.283185307179586
    test 43 radiansPI_2(90): 1.5707963267948966
    test 44 radiansPI_2(180): -3.141592653589793
    test 45 radiansPI_2(360): 0.0
    test 46 radiansPI_2(-90): -1.5707963267948966
    test 47 radiansPI_2(-180): -3.141592653589793
    test 48 radiansPI_2(-360): 0.0
    test 49 radiansPI(90): 1.5707963267948966
    test 50 radiansPI(180): 3.141592653589793
    test 51 radiansPI(360): 0.0
    test 52 radiansPI(-90): -1.5707963267948966
    test 53 radiansPI(-180): -3.141592653589793
    test 54 radiansPI(-360): 0.0
    test 55 radiansPI2(90): 1.5707963267948966
    test 56 radiansPI2(180): 3.141592653589793
    test 57 radiansPI2(360): 0.0
    test 58 radiansPI2(-90): 4.71238898038469
    test 59 radiansPI2(-180): 3.141592653589793
    test 60 radiansPI2(-360): 0.0
    test 61 wrap90(90): 90.0
    test 62 wrap90(180): -180.0
    test 63 wrap90(360): 0.0
    test 64 wrap90(-90): -90.0
    test 65 wrap90(-180): -180.0
    test 66 wrap90(-360): 0.0
    test 67 wrap180(90): 90.0
    test 68 wrap180(180): 180.0
    test 69 wrap180(360): 0.0
    test 70 wrap180(-90): -90.0
    test 71 wrap180(-180): -180.0
    test 72 wrap180(-360): 0.0
    test 73 wrap360(90): 90.0
    test 74 wrap360(180): 180.0
    test 75 wrap360(360): 0.0
    test 76 wrap360(-90): 270.0
    test 77 wrap360(-180): 180.0
    test 78 wrap360(-360): 0.0
    test 79 wrapPI_2(PI_2): 1.5707963267948966
    test 80 wrapPI_2(PI): -3.141592653589793
    test 81 wrapPI_2(PI2): 0.0
    test 82 wrapPI_2(-PI_2): -1.5707963267948966
    test 83 wrapPI_2(-PI): -3.141592653589793
    test 84 wrapPI_2(-PI2): 0.0
    test 85 wrapPI(PI_2): 1.5707963267948966
    test 86 wrapPI(PI): 3.141592653589793
    test 87 wrapPI(PI2): 0.0
    test 88 wrapPI(-PI_2): -1.5707963267948966
    test 89 wrapPI(-PI): -3.141592653589793
    test 90 wrapPI(-PI2): 0.0
    test 91 wrapPI2(PI_2): 1.5707963267948966
    test 92 wrapPI2(PI): 3.141592653589793
    test 93 wrapPI2(PI2): 0.0
    test 94 wrapPI2(-PI_2): 4.71238898038469
    test 95 wrapPI2(-PI): 3.141592653589793
    test 96 wrapPI2(-PI2): 0.0
    test 97 unroll180: -160.0, -250.0
    test 98 unroll180: 200.0, 110.0
    test 99 unroll180: -160.0, -250.0
    test 100 unroll180: 920.0, 830.0
    test 101 unroll180: -160.0, -270.0
    test 102 unroll180: 200.0, 90.0
    test 103 unroll180: -160.0, -990.0
    test 104 unroll180: 920.0, 90.0
    test 105 cot_ : -0.345499391106
    test 106 cotd_: -0.345499391106
    test 107 sincos2: 3.885780586188048e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 108 sincos2d: 9.992007221626409e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 109 atand: 0  FAILED, KNOWN, expected 2.220446049250313e-16
    test 110 sincosd : 8.881784197001252e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 111 sincos*d: 1.6653345369377348e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 112 iFt2m: 187441
    test 113 iFt2m: 757050
    test 114 sFt2m: 187441
    test 115 sFt2m: 757050
    test 116 m2iFt: 614963.91
    test 117 m2iFt: 2483759.84
    test 118 m2sFt: 614962.68
    test 119 m2sFt: 2483754.88
    test 120 acre2ha: 0.404686
    test 121 acre2m2: 4046.856422
    test 122 chain2m: 20.116800
    test 123 fathom2m: 1.828800
    test 124 furlong2m: 201.168000
    test 125 toise2m: 1.949000
    test 126 yard2m: 0.914400
    test 127 m2chain: 0.049710
    test 128 m2fathom: 0.546807
    test 129 m2furlong: 0.004971
    test 130 m2toise: 0.513084
    test 131 m2yard: 1.093613
    test 132 degrees2m: 10007557.1761
    test 133 degrees2m: 8666798.7443
    test 134 m2degrees: 90.0
    test 135 degrees2m: 20015114.3522
    test 136 degrees2m: 19987684.3336
    test 137 m2degrees: 180.0
    test 138 m2degrees2m(45, lat=0): 45.00
    test 139 m2degrees2m(45, lat=7): 45.00
    test 140 m2degrees2m(45, lat=14): 45.00
    test 141 m2degrees2m(45, lat=21): 45.00
    test 142 m2degrees2m(45, lat=28): 45.00
    test 143 m2degrees2m(45, lat=35): 45.00
    test 144 m2degrees2m(45, lat=42): 45.00
    test 145 m2degrees2m(45, lat=49): 45.00
    test 146 m2degrees2m(45, lat=56): 45.00
    test 147 m2degrees2m(45, lat=63): 45.00
    test 148 m2degrees2m(45, lat=70): 45.00
    test 149 m2degrees2m(45, lat=77): 45.00
    test 150 m2degrees2m(45, lat=84): 45.00
    test 151 isPoints2: False
    test 152 tan_2_semi: PI[1] edge (3.141592): semi-circular

    5 of 152 testUtily.py tests (3.3%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 8.137 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUtm.py

    testing testUtm.py 22.01.03 (module pygeodesy.utm 22.06.26)
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 14 toEtm: 13 S 622698 8516965
    test 15 toMgrs1: 13L FF 22697 16965
    test 16 toMgrs2: 31U DQ 48251 11932
    test 17 toUps: 00 S -7702368 -395110
    test 18 toUtm14: 14 S -27436 8512042
    test 19 Utm8: 18 N 516620 4574500
    test 20 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 21 Utm8.toLatLon: 41.321801N, 074.801413W
    test 22 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 23 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 24 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 25 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 26 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 27 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 28 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 29 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 30 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 31 toUtm(80.5434°S, 170.654°W): lat ('-80.5434°'): outside UTM range [-80, 84)
    test 32 toUtm(90.0°N, 177.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 33 toUtm(90.0°S, 177.0°W): lat ('-90.0°'): outside UTM range [-80, 84)
    test 34 toUtm(90.0°N, 003.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 35 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 36 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 37 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454°'): outside UTM range [-80, 84)
    test 38 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 39 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 40 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 41 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 42 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 43 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 44 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 45 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 46 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 47 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 48 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 49 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 50 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 51 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 52 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 53 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 54 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 55 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 56 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 57 toUtm(84.0°N, 005.00601°W): lat ('84.0°'): outside UTM range [-80, 84)
    test 58 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 59 Utm9: 55 S 321441 5810117
    test 60 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 61 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 68 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 69 Utm10: 31 N 400000 5000000
    test 70 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 71 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 78 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 79 Utm111: 37 N 1399093 8314607
    test 80 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 81 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 88 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459
    test 89 CV#86: [Z:01, H:N, E:100000, N:0, C:n/a, S:n/a]
    test 90 CV#86: 00.0°N, 179.407673°E
    test 91 CV#86: [Z:60, H:N, E:767993, N:0, C:+0.0″, S:1.000489]  FAILED, KNOWN, expected [Z:01, H:N, E:100000, N:0, ...]
    test 92 #63: 32 N 280000 5653000
    test 93 toMgrs: 32U KB 80000 53000
    test 94 toLatLon: (50.986484, 5.865326, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.436605, 1.000194)
    test 95 band: U
    test 96 band: band ('?'): not 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W' or 'X'
    test 97 datum: Datum(name='_Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.Identity)  FAILED, KNOWN, expected same
    test 98 repr: [Z:32U, H:N, E:280000, N:5653000]
    test 99 E.N.: (280000.0, 5653000.0)

    2 of 99 testUtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 11.374 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUtmTMcoords.py

    testing testUtmTMcoords.py 19.05.23 (module pygeodesy.utm 22.06.26)
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.convergence: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.convergence: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.convergence: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.convergence: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.convergence: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.convergence: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.convergence: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.convergence: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.convergence: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.convergence: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.convergence: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105
    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.convergence: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179
    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.convergence: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.convergence: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395
    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.convergence: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.convergence: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.convergence: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.convergence: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.convergence: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.convergence: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507
    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.convergence: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.convergence: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.convergence: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.convergence: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.convergence: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.convergence: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.convergence: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.convergence: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.convergence: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.convergence: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.convergence: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.convergence: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.convergence: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824
    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.convergence: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.convergence: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.convergence: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.convergence: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.convergence: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.convergence: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.convergence: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.convergence: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.convergence: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.convergence: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.convergence: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948
    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.convergence: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823
    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.convergence: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.convergence: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350
    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.convergence: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.convergence: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.convergence: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.convergence: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.convergence: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.convergence: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.convergence: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.convergence: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.convergence: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.convergence: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918
    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.convergence: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.convergence: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.convergence: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.convergence: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804
    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.convergence: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.convergence: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541
    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.convergence: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.convergence: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.convergence: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153
    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.convergence: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.convergence: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.convergence: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.convergence: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.convergence: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.convergence: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.convergence: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.convergence: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.convergence: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.convergence: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.convergence: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687
    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.convergence: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.convergence: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.convergence: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.convergence: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.convergence: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.convergence: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.convergence: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.convergence: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.convergence: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.convergence: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.convergence: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.convergence: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657
    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.convergence: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.convergence: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.convergence: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.convergence: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.convergence: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.convergence: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.convergence: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.convergence: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.convergence: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.convergence: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.convergence: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.convergence: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.convergence: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391
    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.convergence: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.convergence: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.convergence: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.convergence: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.convergence: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.convergence: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.convergence: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.convergence: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.convergence: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.convergence: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.convergence: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.convergence: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.convergence: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.convergence: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.convergence: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.convergence: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.convergence: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.convergence: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.convergence: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.convergence: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.convergence: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.convergence: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.convergence: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176
    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.convergence: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904
    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.convergence: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.convergence: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.convergence: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.convergence: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.convergence: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.convergence: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.convergence: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.convergence: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871
    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.convergence: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255
    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.convergence: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.convergence: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.convergence: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798
    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.convergence: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056
    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.convergence: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.convergence: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593
    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.convergence: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.convergence: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365
    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.convergence: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.convergence: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.convergence: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.convergence: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.convergence: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.convergence: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.convergence: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.convergence: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.convergence: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.convergence: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.convergence: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.convergence: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.convergence: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.convergence: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.convergence: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.convergence: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.convergence: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.convergence: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.convergence: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.convergence: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.convergence: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.convergence: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.convergence: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.convergence: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.convergence: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.convergence: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.convergence: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.convergence: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.convergence: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523
    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.convergence: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.convergence: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.convergence: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.convergence: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.convergence: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.convergence: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.convergence: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.convergence: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.convergence: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.convergence: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336
    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.convergence: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.convergence: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.convergence: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.convergence: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322
    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.convergence: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.convergence: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.convergence: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118
    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.convergence: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.convergence: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.convergence: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.convergence: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.convergence: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214
    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.convergence: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.convergence: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351
    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.convergence: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.convergence: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.convergence: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.convergence: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.convergence: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.convergence: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.convergence: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.convergence: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.convergence: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.convergence: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.convergence: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513
    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.convergence: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.convergence: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.convergence: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.convergence: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.convergence: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.convergence: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996
    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.convergence: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.convergence: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.convergence: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.convergence: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.convergence: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.convergence: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 67.657 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUtmUps.py

    testing testUtmUps.py 22.01.03 (module pygeodesy.utmups 22.05.14)
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps.ValidateOK: True
    test 13 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 14 toUtmUps8ID1.ValidateOK: True
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 17 toUtmUps8ID2.ValidateOK: True
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 20 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 21 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 22 toUtmUps8ID3.ValidateOK: True
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 UtmUps.toLatLonID4.ValidateOK: True
    test 25 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 26 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 27 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 28 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 29 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 30 UtmUps.ValidateOK: True
    test 31 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 32 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 33 latlon1: 61.2°N, 149.9°W
    test 34 toUtmUps8: 06 N 344174 6788521
    test 35 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 36 toUtmUps8.ValidateOK: True
    test 37 toMgrs: 06V UN 44173 88521
    test 38 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 39 toUtmUps8: 25 N 504164 9286466
    test 40 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 41 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 42 toUtmUps8.ValidateOK: True
    test 43 toMgrs: 25X EN 04163 86465
    test 44 latlon3: 33.33°N, 044.44°E
    test 45 toUtmUps8: 38 N 447882 3688012
    test 46 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 47 toUtmUps8.ValidateOK: True
    test 48 toMgrs: 38S MB 47882 88011
    test 49 latlon4: 79.0°S, 079.0°W
    test 50 toUtmUps8: 17 S 542594 1229296
    test 51 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 52 toUtmUps8.ValidateOK: True
    test 53 toMgrs: 17C NN 42594 29296
    test 54 latlon5: 84.0°N, 084.0°E
    test 55 toUtmUps8: 00 N 2663075 1930308
    test 56 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 57 toUtmUps8.ValidateOK: True
    test 58 latlon6: 13.4125°N, 103.8667°E
    test 59 toUtmUps8: 48 N 377302 1483035
    test 60 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 61 toUtmUps8.ValidateOK: True
    test 62 toMgrs: 48P UV 77302 83034
    test 63 latlon7: 13.4125°S, 103.8667°W
    test 64 LL.toUtmUps: 13 S 622698 8516965
    test 65 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 66 LL.toUtmUps.ValidateOK: True
    test 67 toMgrs: 13L FF 22697 16965
    test 68 latlon8: 43.684097°N, 175.265195°E
    test 69 LL.toUtmUps: 60 N 360177 4838249
    test 70 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 71 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 72 LL.toUtmUps.ValidateOK: True
    test 73 toMgrs: 60T UP 60176 38249
    test 74 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 75 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 76 latlon9: 41.321801°N, 074.801413°W
    test 77 LL.toUtmUps: 18 N 516620 4574500
    test 78 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 79 LL.toUtmUps.ValidateOK: True
    test 80 toMgrs: 18T WL 16619 74500
    test 81 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 82 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 83 parseUTMUPS5: 18 N 516620 4574500
    test 84 parseUTMUPS5.ValidateOK: True
    test 85 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 86 UtmUps: 00A S 321441 5810117
    test 87 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000, 3200000]  FAILED, KNOWN, expected True
    test 88 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 89 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 90 LL.toUtmUps: 27 S 316807 4044745
    test 91 LL.toUtmUps.ValidateOK: True
    test 92 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 93 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 94 UtmUps: 00Z N 400000 5000000
    test 95 UtmUps.ValidateOK: True
    test 96 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 97 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 97 testUtmUps.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 6.969 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testUtmUpsTMcoords.py

    testing testUtmUpsTMcoords.py 19.05.23 (module pygeodesy.utmups 22.05.14)
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.convergence: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.convergence: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.convergence: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.convergence: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.convergence: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.convergence: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.convergence: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.convergence: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.convergence: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.convergence: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.convergence: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105
    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'
    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.convergence: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179
    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.convergence: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.convergence: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395
    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.convergence: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.convergence: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.convergence: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.convergence: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.convergence: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.convergence: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507
    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.convergence: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.convergence: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.convergence: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.convergence: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.convergence: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.convergence: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.convergence: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.convergence: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.convergence: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.convergence: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.convergence: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.convergence: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.convergence: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824
    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.convergence: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.convergence: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.convergence: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.convergence: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.convergence: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.convergence: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.convergence: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.convergence: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.convergence: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.convergence: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.convergence: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948
    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'
    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.convergence: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823
    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.convergence: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.convergence: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350
    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.convergence: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.convergence: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.convergence: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.convergence: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.convergence: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.convergence: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.convergence: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.convergence: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.convergence: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.convergence: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918
    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.convergence: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.convergence: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.convergence: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.convergence: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804
    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.convergence: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.convergence: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541
    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.convergence: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.convergence: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.convergence: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153
    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.convergence: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.convergence: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.convergence: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.convergence: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.convergence: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.convergence: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.convergence: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.convergence: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.convergence: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.convergence: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.convergence: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.convergence: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687
    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.convergence: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.convergence: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.convergence: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.convergence: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.convergence: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.convergence: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.convergence: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.convergence: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.convergence: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.convergence: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.convergence: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.convergence: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657
    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.convergence: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.convergence: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.convergence: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.convergence: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.convergence: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.convergence: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.convergence: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.convergence: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.convergence: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.convergence: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.convergence: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.convergence: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.convergence: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391
    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.convergence: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.convergence: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.convergence: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.convergence: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.convergence: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.convergence: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.convergence: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.convergence: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.convergence: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.convergence: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.convergence: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.convergence: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.convergence: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.convergence: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.convergence: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.convergence: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.convergence: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.convergence: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.convergence: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.convergence: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.convergence: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.convergence: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.convergence: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176
    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'
    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.convergence: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904
    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.convergence: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.convergence: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.convergence: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.convergence: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.convergence: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.convergence: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.convergence: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.convergence: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871
    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.convergence: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255
    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.convergence: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.convergence: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.convergence: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798
    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.convergence: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056
    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.convergence: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.convergence: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593
    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.convergence: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.convergence: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365
    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.convergence: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.convergence: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.convergence: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.convergence: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.convergence: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.convergence: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.convergence: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.convergence: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.convergence: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.convergence: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.convergence: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.convergence: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.convergence: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.convergence: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.convergence: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.convergence: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.convergence: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.convergence: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.convergence: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.convergence: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.convergence: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.convergence: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.convergence: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.convergence: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.convergence: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.convergence: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.convergence: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.convergence: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.convergence: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523
    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.convergence: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.convergence: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.convergence: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.convergence: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.convergence: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.convergence: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.convergence: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.convergence: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.convergence: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.convergence: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336
    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.convergence: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.convergence: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.convergence: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.convergence: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322
    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.convergence: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.convergence: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.convergence: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118
    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.convergence: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.convergence: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.convergence: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.convergence: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.convergence: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214
    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'
    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.convergence: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.convergence: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351
    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.convergence: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.convergence: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.convergence: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.convergence: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.convergence: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.convergence: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.convergence: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.convergence: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.convergence: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.convergence: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.convergence: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513
    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.convergence: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.convergence: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.convergence: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.convergence: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.convergence: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.convergence: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996
    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'
    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'
    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.convergence: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.convergence: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.convergence: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.convergence: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.convergence: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.convergence: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.convergence: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 75.545 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testVectorial.py

    testing testVectorial.py 22.05.30

    testVectorial(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 apply: (0.5, 0.5, 0.707)
    test 12 init: (0.5, 0.5, 0.707)
    test 13 i***: (0.5, 0.5, 0.707)
    test 14 abs: 0.99992449715
    test 15 sumOf: (52.70504, 0.61904, 0.70705)
    test 16 sumOf: Nv
    test 17 sumOf: sumOf
    test 18 length: 52.7134151513
    test 19 copy: True
    test 20 length: 52.2051356286
    test 21 length: 52.2051356286
    test 22 nearestOn: 51.0°N, 001.0°E
    test 23 nearestOn: 50.987°N, 000.298°W
    test 24 nearestOn: 51.0°N, 002.0°E
    test 25 nearestOn: 50.995°N, 002.655°E
    test 26 nearestOn: 51.0°N, 001.9°E
    test 27 nearestOn: True
    test 28 distanceTo: 42.826
    test 29 nearestOn: 51.0°N, 002.0°E
    test 30 nearestOn: True
    test 31 nearestOn: 00.0°N, 000.0°E
    test 32 nearestOn: True
    test 33 nearestOn: 00.0°N, 020.0°E
    test 34 nearestOn: True
    test 35 nearestOn: 02.0°N, 002.0°E
    test 36 nearestOn: 02.0°N, 002.0°E
    test 37 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 38 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 39 BasseC: 47.3038°N, 002.5721°W
    test 40 BasseH: 47.311067°N, 002.528617°W
    test 41 triangulate: 47.323667°N, 002.568501°W
    test 42 triangulate: True
    test 43 trilaterate: 37.419078°N, 121.960579°W
    test 44 trilaterate: True
    test 45 trilaterate: 08.068912°S, 034.888699°W
    test 46 trilaterate: True
    test 47 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 48 trilaterate: True
    test 49 trilaterate: 42.67456065°N, 002.49539502°E
    test 50 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 51 sumOf: Nvector
    test 52 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 53 ecef.lat, .lon: 44.995674, 45.0
    test 54 ecef.height: -0.0
    test 55 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 56 .isEllipsoidal: True
    test 57 .isSpherical: False
    test 58 .latlon: (44.995674, 45.0)
    test 59 .philam: (0.785323, 0.785398)
    test 60 .latlonheight: (44.995674, 45.0, 0.0)
    test 61 .philamheight: (0.785323, 0.785398, 0.0)
    test 62 parse: (0.5, 0.5, 0.707)
    test 63 cmp: 0
    test 64 eq: True
    test 65 ge: True
    test 66 gt: False
    test 67 le: True
    test 68 lt: False
    test 69 ne: False
    test 70 *: (1.0, 1.0, 1.414)
    test 71 +: (1.0, 1.0, 1.414)
    test 72 /: (0.5, 0.5, 0.707)
    test 73 -: (0.5, 0.5, 0.707)
    test 74 @: (0.0, 0.0, 0.0)
    test 75 @: (0.0, 0.0, 0.0)
    test 76 rotate: (0.26268, 0.26268, 0.37143)
    test 77 crosserrors: True
    test 78 0: divisor (0): float division by zero
    test 79 intersections2: (500.0, 0.0, 0.0)
    test 80 nearestOn: (0.0, 0.0, 0.0)
    test 81 nearestOn: True
    test 82 nearestOn: (100.0, 100.0, 100.0)
    test 83 nearestOn: True
    test 84 iscolinearWith: False
    test 85 iscolinearWith: True
    test 86 nearestOn: (0.0, 0.0, 0.0)
    test 87 nearestOn: True
    test 88 nearestOn: (100.0, 100.0, 100.0)
    test 89 nearestOn: True
    test 90 iscolinearWith: False
    test 91 iscolinearWith: True

    testVectorial(pygeodesy.sphericalNvector, 22.07.07)
    test 92 crossTrackDistanceTo: -305.67
    test 93 crossTrackDistanceTo: -307.55
    test 94 toLatLon: 44.995674°N, 045.0°E
    test 95 toNvector: (0.50004, 0.50004, 0.70705)
    test 96 isequalTo: False
    test 97 isequalTo: True
    test 98 length: 0.99992449715
    test 99 euclid: 0.99995577
    test 100 length: 1.00
    test 101 euclid: 1.0000
    test 102 meanOf: 44.995674°N, 045.0°E
    test 103 meanOf: LatLon
    test 104 apply: (0.5, 0.5, 0.707)
    test 105 init: (0.5, 0.5, 0.707)
    test 106 i***: (0.5, 0.5, 0.707)
    test 107 abs: 0.99992449715
    test 108 sumOf: (52.70504, 0.61904, 0.70705)
    test 109 sumOf: Nv
    test 110 sumOf: sumOf
    test 111 length: 52.7134151513
    test 112 copy: True
    test 113 length: 52.2051356286
    test 114 length: 52.2051356286
    test 115 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 116 toLatLon: 44.995674°N, 045.0°E
    test 117 toNvector: (0.50004, 0.50004, 0.70705, -0.00)
    test 118 intersection: 02.499372°N, 002.5°E
    test 119 isenclosedBy: True
    test 120 isenclosedBy*: True
    test 121 isenclosedBy: True
    test 122 isenclosedBy*: True
    test 123 iswithin: False
    test 124 iswithin: True
    test 125 nearestOn: 51.0°N, 001.0°E
    test 126 nearestOn: 50.987°N, 000.298°W
    test 127 nearestOn: 51.0°N, 002.0°E
    test 128 nearestOn: 50.995°N, 002.655°E
    test 129 nearestOn: 51.0°N, 001.9°E
    test 130 nearestOn: True
    test 131 distanceTo: 42.712
    test 132 nearestOn: 51.0°N, 002.0°E
    test 133 nearestOn: True
    test 134 nearestOn: 00.0°N, 000.0°E
    test 135 nearestOn: True
    test 136 nearestOn: 00.0°N, 020.0°E
    test 137 nearestOn: True
    test 138 nearestOn: 02.0°N, 002.0°E
    test 139 nearestOn: 02.0°N, 002.0°E
    test 140 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 141 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 142 BasseC: 47.3038°N, 002.5721°W
    test 143 BasseH: 47.311067°N, 002.528617°W
    test 144 triangulate: 47.323667°N, 002.568501°W
    test 145 triangulate: True
    test 146 trilaterate: 37.419078°N, 121.960579°W
    test 147 trilaterate: True
    test 148 trilaterate: 08.068912°S, 034.888699°W
    test 149 trilaterate: True
    test 150 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 151 trilaterate: True
    test 152 trilaterate: 42.67456065°N, 002.49539502°E
    test 153 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 22.07.07)
    test 154 sumOf: Nvector
    test 155 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 156 ecef.lat, .lon: 44.995674, 45.0
    test 157 ecef.height: -0.0
    test 158 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 159 .isEllipsoidal: False
    test 160 .isSpherical: True
    test 161 .latlon: (44.995674, 45.0)
    test 162 .philam: (0.785323, 0.785398)
    test 163 .latlonheight: (44.995674, 45.0, 0.0)
    test 164 .philamheight: (0.785323, 0.785398, 0.0)
    test 165 parse: (0.5, 0.5, 0.707)
    test 166 cmp: 0
    test 167 eq: True
    test 168 ge: True
    test 169 gt: False
    test 170 le: True
    test 171 lt: False
    test 172 ne: False
    test 173 *: (1.0, 1.0, 1.414)
    test 174 +: (1.0, 1.0, 1.414)
    test 175 /: (0.5, 0.5, 0.707)
    test 176 -: (0.5, 0.5, 0.707)
    test 177 @: (0.0, 0.0, 0.0)
    test 178 @: (0.0, 0.0, 0.0)
    test 179 rotate: (0.26268, 0.26268, 0.37143)
    test 180 crosserrors: True
    test 181 0: divisor (0): float division by zero
    test 182 intersections2: (500.0, 0.0, 0.0)
    test 183 nearestOn: (0.0, 0.0, 0.0)
    test 184 nearestOn: True
    test 185 nearestOn: (100.0, 100.0, 100.0)
    test 186 nearestOn: True
    test 187 iscolinearWith: False
    test 188 iscolinearWith: True
    test 189 nearestOn: (0.0, 0.0, 0.0)
    test 190 nearestOn: True
    test 191 nearestOn: (100.0, 100.0, 100.0)
    test 192 nearestOn: True
    test 193 iscolinearWith: False
    test 194 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 22.07.07)
    test 195 sumOf: Vector4Tuple
    test 196 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 197 ecef.lat, .lon: 44.995674, 45.0
    test 198 ecef.height: -0.0
    test 199 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 200 .isEllipsoidal: False
    test 201 .isSpherical: True
    test 202 .latlon: (44.995674, 45.0)
    test 203 .philam: (0.785323, 0.785398)
    test 204 .latlonheight: (44.995674, 45.0, 0.0)
    test 205 .philamheight: (0.785323, 0.785398, 0.0)
    test 206 parse: (0.5, 0.5, 0.707)
    test 207 cmp: 0
    test 208 eq: True
    test 209 ge: True
    test 210 gt: False
    test 211 le: True
    test 212 lt: False
    test 213 ne: False
    test 214 *: (1.0, 1.0, 1.414)
    test 215 +: (1.0, 1.0, 1.414)
    test 216 /: (0.5, 0.5, 0.707)
    test 217 -: (0.5, 0.5, 0.707)
    test 218 @: (0.0, 0.0, 0.0)
    test 219 @: (0.0, 0.0, 0.0)
    test 220 rotate: (0.26268, 0.26268, 0.37143)
    test 221 crosserrors: True
    test 222 0: divisor (0): float division by zero
    test 223 intersections2: (500.0, 0.0, 0.0)
    test 224 nearestOn: (0.0, 0.0, 0.0)
    test 225 nearestOn: True
    test 226 nearestOn: (100.0, 100.0, 100.0)
    test 227 nearestOn: True
    test 228 iscolinearWith: False
    test 229 iscolinearWith: True
    test 230 nearestOn: (0.0, 0.0, 0.0)
    test 231 nearestOn: True
    test 232 nearestOn: (100.0, 100.0, 100.0)
    test 233 nearestOn: True
    test 234 iscolinearWith: False
    test 235 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 22.07.07)
    test 236 sumOf: Vector4Tuple
    test 237 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 238 ecef.lat, .lon: 44.995674, 45.0
    test 239 ecef.height: -0.0
    test 240 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 241 .isEllipsoidal: True
    test 242 .isSpherical: False
    test 243 .latlon: (44.995674, 45.0)
    test 244 .philam: (0.785323, 0.785398)
    test 245 .latlonheight: (44.995674, 45.0, 0.0)
    test 246 .philamheight: (0.785323, 0.785398, 0.0)
    test 247 parse: (0.5, 0.5, 0.707)
    test 248 cmp: 0
    test 249 eq: True
    test 250 ge: True
    test 251 gt: False
    test 252 le: True
    test 253 lt: False
    test 254 ne: False
    test 255 *: (1.0, 1.0, 1.414)
    test 256 +: (1.0, 1.0, 1.414)
    test 257 /: (0.5, 0.5, 0.707)
    test 258 -: (0.5, 0.5, 0.707)
    test 259 @: (0.0, 0.0, 0.0)
    test 260 @: (0.0, 0.0, 0.0)
    test 261 rotate: (0.26268, 0.26268, 0.37143)
    test 262 crosserrors: True
    test 263 0: divisor (0): float division by zero
    test 264 intersections2: (500.0, 0.0, 0.0)
    test 265 nearestOn: (0.0, 0.0, 0.0)
    test 266 nearestOn: True
    test 267 nearestOn: (100.0, 100.0, 100.0)
    test 268 nearestOn: True
    test 269 iscolinearWith: False
    test 270 iscolinearWith: True
    test 271 nearestOn: (0.0, 0.0, 0.0)
    test 272 nearestOn: True
    test 273 nearestOn: (100.0, 100.0, 100.0)
    test 274 nearestOn: True
    test 275 iscolinearWith: False
    test 276 iscolinearWith: True

    testCartesian(pygeodesy.sphericalNvector, 22.07.07)
    test 277 sphericalNvector.Cartesian.trilaterate3d2: 2
    test 278 sphericalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 279 sphericalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 280 pygeodesy.vector3d.trilaterate3d2: 2
    test 281 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 282 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 283 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 284 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 285 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 286 Cartesian.trilaterate3d2: 2
    test 287 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 288 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 289 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 290 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 291 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.sphericalTrigonometry, 22.07.07)
    test 292 sphericalTrigonometry.Cartesian.trilaterate3d2: 2
    test 293 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 294 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 295 pygeodesy.vector3d.trilaterate3d2: 2
    test 296 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 297 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 298 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 299 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 300 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 301 Cartesian.trilaterate3d2: 2
    test 302 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 303 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 304 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 305 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 306 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalNvector, 22.06.26)
    test 307 ellipsoidalNvector.Cartesian.trilaterate3d2: 2
    test 308 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 309 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 310 pygeodesy.vector3d.trilaterate3d2: 2
    test 311 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 312 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 313 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 314 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 315 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 316 Cartesian.trilaterate3d2: 2
    test 317 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 318 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 319 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 320 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 321 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalVincenty, 22.07.07)
    test 322 ellipsoidalVincenty.Cartesian.trilaterate3d2: 2
    test 323 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 324 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 325 pygeodesy.vector3d.trilaterate3d2: 2
    test 326 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 327 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 328 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 329 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 330 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 331 Cartesian.trilaterate3d2: 2
    test 332 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 333 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 334 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 335 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 336 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalKarney, 22.07.07)
    test 337 ellipsoidalKarney.Cartesian.trilaterate3d2: 2
    test 338 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 339 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 340 pygeodesy.vector3d.trilaterate3d2: 2
    test 341 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 342 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 343 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 344 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 345 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 346 Cartesian.trilaterate3d2: 2
    test 347 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 348 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 349 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 350 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 351 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalExact, 22.07.07)
    test 352 ellipsoidalExact.Cartesian.trilaterate3d2: 2
    test 353 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 354 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 355 pygeodesy.vector3d.trilaterate3d2: 2
    test 356 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 357 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 358 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 359 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 360 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 361 Cartesian.trilaterate3d2: 2
    test 362 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 363 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 364 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 365 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 366 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesianBase(pygeodesy.cartesianBase, 22.07.04)
    test 367 cartesianBase.CartesianBase.trilaterate3d2: 2
    test 368 cartesianBase.CartesianBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 369 cartesianBase.CartesianBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 370 pygeodesy.vector3d.trilaterate3d2: 2
    test 371 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 372 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 373 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 374 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 375 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 376 CartesianBase.trilaterate3d2: 2
    test 377 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 378 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 379 CartesianBase.trilaterate3d2: center (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 380 CartesianBase.trilaterate3d2: center (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 381 CartesianBase.trilaterate3d2: center (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testNvectorBase(pygeodesy.nvectorBase, 22.07.07)
    test 382 nvectorBase.NvectorBase.trilaterate3d2: 2
    test 383 nvectorBase.NvectorBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 384 nvectorBase.NvectorBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 385 pygeodesy.vector3d.trilaterate3d2: 2
    test 386 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 387 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 388 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 389 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 390 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 391 NvectorBase.trilaterate3d2: 2
    test 392 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 393 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 394 NvectorBase.trilaterate3d2: center (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 395 NvectorBase.trilaterate3d2: center (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 396 NvectorBase.trilaterate3d2: center (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testVector3d(pygeodesy.vector2d, 22.07.07)
    test 397 vector3d.Vector3d.trilaterate3d2: 2
    test 398 vector3d.Vector3d 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 399 vector3d.Vector3d 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 400 pygeodesy.vector3d.trilaterate3d2: 2
    test 401 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 402 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 403 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 404 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 405 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(0.0, 0.0, 0.0)), center2 (Vector3d(0.0, 9.0, 0.0)), center3 (Vector3d(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 406 Vector3d.trilaterate3d2: 2
    test 407 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 408 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 409 Vector3d.trilaterate3d2: center (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 410 Vector3d.trilaterate3d2: center (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 411 Vector3d.trilaterate3d2: center (Vector3d(0.0, 0.0, 0.0)), center2 (Vector3d(0.0, 9.0, 0.0)), center3 (Vector3d(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testTrilaterate2d2(pygeodesy.vector2d, 22.07.07)
    test 412 trilaterate2d2: (2.0, 3.0)
    test 413 trilaterate2d2: delta (6.39335377017e-06), radius1 (1.0), distance (1.00000639335) and trilaterate2d2(x=1.999994, y=3.000006): exceeds eps (2.22045e-16)
    test 414 trilaterate2d2: (-500.0, 250.0)
    test 415 meeus2: 2.236, 3.0, 2.0, 0.0
    test 416 meeus2: (3.0, 2.0, 0)
    test 417 circum3: 2.2361
    test 418 circum3: (3.0, 2.0, 0)
    test 419 circum3: None
    test 420 circum4_: 2.2361
    test 421 circum4_: (3.0, 2.0, 0.0)  FAILED, KNOWN, expected (3.0, 2.0, 0)
    test 422 circum4_: 3
    test 423 circum4_: ()
    test 424 radii11: Radii11Tuple(rA=2.236068, rB=0.92621, rC=2.236068, cR=2.236068, rIn=0.92621, riS=0.24193, roS=INF, a=3.162278, b=4.472136, c=3.162278, s=5.398346)
    test 425 circin6: Circin6Tuple(radius=0.92621, center=Vector3d(2.58579, 2.82843, 0.0), deltas=None, cA=Vector3d(2.87868, 3.70711, 0.0), cB=Vector3d(3.0, 2.0, 0.0), cC=Vector3d(1.70711, 3.12132, 0.0))
    test 426 soddy4: Soddy4Tuple(radius=0.24193, center=Vector3d(2.52241, 2.95518, 0), deltas=None, outer=INF)

    testTrilaterate3d2(pygeodesy.vector2d, 22.07.07)
    test 427 pygeodesy.vector2d.trilaterate3d2: center1 (Vector3d(-500.0, -200.0, 0.0)), center2 (Vector3d(100.0, -100.0, 0.0)), center3 (Vector3d(500.0, 100.0, 0.0)), radius1 (450.0), radius2 (694.6221994724903) or radius3 (1011.1874208078342): no intersection
    test 428 pygeodesy.vector2d.trilaterate3d2: 2
    test 429 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, -0.01311  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 430 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, 0.01311  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 431 meeus2: 1.50
    test 432 meeus2: None
    test 433 meeus2: -0.000000026, 0.5, 0.000000026  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 434 meeus2: 0.000000026, 0.5, -0.000000026  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 435 circum3: 1.50
    test 436 circum3: 0.0, 0.5, -0.0  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 437 circum3: None
    test 438 circum4_: 1.50
    test 439 circum4_: 0.0, 0.5, 0.0
    test 440 circum4_: 3
    test 441 circum4_: ()
    test 442 radii11: Radii11Tuple(rA=1.414214, rB=1.035276, rC=1.414214, cR=1.5, rIn=0.732051, riS=0.195611, roS=INF, a=2.44949, b=2.828427, c=2.44949, s=3.863703)
    test 443 circin6: Circin6Tuple(radius=0.732051, center=Vector3d(-0.0, 0.73205, 0.0), deltas=None, cA=Vector3d(0.42265, 1.1547, 0.42265), cB=Vector3d(-0.0, 0.0, -0.0), cC=Vector3d(-0.42265, 1.1547, -0.42265))
    test 444 soddy4: Soddy4Tuple(radius=0.195611, center=Vector3d(0.0, 0.76911, -0.0), deltas=None, outer=INF)

    testIntersection3d3(pygeodesy.vector3d, 22.07.03)
    test 445 (30, 17): (Vector3d(30.30584, 16.75258, 0.0), 0, 0)
    test 446 (-1,  3): (Vector3d(-1.0429, 2.92225, 0.0), -1, -2)
    test 447 (65, 32): (Vector3d(64.86667, 32.0, 0.0), 1, -2)
    test 448 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 449 (49, 25): (Vector3d(49.0, 25.0, 0.0), 0, 0)

    test 450 at 0: (0.0, 50.0, 0.0)
    test 451 at 3: (2.6168, 49.93148, 0.0)
    test 452 at 6: (5.22642, 49.72609, 0.0)
    test 453 at 9: (7.82172, 49.38442, 0.0)
    test 454 at 12: (10.39558, 48.90738, 0.0)
    test 455 at 15: (12.94095, 48.29629, 0.0)
    test 456 at 18: (15.45085, 47.55283, 0.0)
    test 457 at 21: (17.9184, 46.67902, 0.0)
    test 458 at 24: (20.33683, 45.67727, 0.0)
    test 459 at 27: (22.69952, 44.55033, 0.0)
    test 460 at 30: (25.0, 43.30127, 0.0)
    test 461 at 33: (27.23195, 41.93353, 0.0)
    test 462 at 36: (29.38926, 40.45085, 0.0)
    test 463 at 39: (31.46602, 38.8573, 0.0)
    test 464 at 42: (33.45653, 37.15724, 0.0)
    test 465 at 45: (35.35534, 35.35534, 0.0)
    test 466 at 48: (37.15724, 33.45653, 0.0)
    test 467 at 51: (38.8573, 31.46602, 0.0)
    test 468 at 54: (40.45085, 29.38926, 0.0)
    test 469 at 57: (41.93353, 27.23195, 0.0)
    test 470 at 60: (43.30127, 25.0, 0.0)
    test 471 at 63: (44.55033, 22.69952, 0.0)
    test 472 at 66: (45.67727, 20.33683, 0.0)
    test 473 at 69: (46.67902, 17.9184, 0.0)
    test 474 at 72: (47.55283, 15.45085, 0.0)
    test 475 at 75: (48.29629, 12.94095, 0.0)
    test 476 at 78: (48.90738, 10.39558, 0.0)
    test 477 at 81: (49.38442, 7.82172, 0.0)
    test 478 at 84: (49.72609, 5.22642, 0.0)
    test 479 at 87: (49.93148, 2.6168, 0.0)
    test 480 at 90: (50.0, 0.0, 0.0)
    test 481 at 93: (49.93148, -2.6168, 0.0)
    test 482 at 96: (49.72609, -5.22642, 0.0)
    test 483 at 99: (49.38442, -7.82172, 0.0)
    test 484 at 102: (48.90738, -10.39558, 0.0)
    test 485 at 105: (48.29629, -12.94095, 0.0)
    test 486 at 108: (47.55283, -15.45085, 0.0)
    test 487 at 111: (46.67902, -17.9184, 0.0)
    test 488 at 114: (45.67727, -20.33683, 0.0)
    test 489 at 117: (44.55033, -22.69952, 0.0)
    test 490 at 120: (43.30127, -25.0, 0.0)
    test 491 at 123: (41.93353, -27.23195, 0.0)
    test 492 at 126: (40.45085, -29.38926, 0.0)
    test 493 at 129: (38.8573, -31.46602, 0.0)
    test 494 at 132: (37.15724, -33.45653, 0.0)
    test 495 at 135: (35.35534, -35.35534, 0.0)
    test 496 at 138: (33.45653, -37.15724, 0.0)
    test 497 at 141: (31.46602, -38.8573, 0.0)
    test 498 at 144: (29.38926, -40.45085, 0.0)
    test 499 at 147: (27.23195, -41.93353, 0.0)
    test 500 at 150: (25.0, -43.30127, 0.0)
    test 501 at 153: (22.69952, -44.55033, 0.0)
    test 502 at 156: (20.33683, -45.67727, 0.0)
    test 503 at 159: (17.9184, -46.67902, 0.0)
    test 504 at 162: (15.45085, -47.55283, 0.0)
    test 505 at 165: (12.94095, -48.29629, 0.0)
    test 506 at 168: (10.39558, -48.90738, 0.0)
    test 507 at 171: (7.82172, -49.38442, 0.0)
    test 508 at 174: (5.22642, -49.72609, 0.0)
    test 509 at 177: (2.6168, -49.93148, 0.0)
    test 510 at 180: (0.0, -50.0, 0.0)
    test 511 at 183: (-2.6168, -49.93148, 0.0)
    test 512 at 186: (-5.22642, -49.72609, 0.0)
    test 513 at 189: (-7.82172, -49.38442, 0.0)
    test 514 at 192: (-10.39558, -48.90738, 0.0)
    test 515 at 195: (-12.94095, -48.29629, 0.0)
    test 516 at 198: (-15.45085, -47.55283, 0.0)
    test 517 at 201: (-17.9184, -46.67902, 0.0)
    test 518 at 204: (-20.33683, -45.67727, 0.0)
    test 519 at 207: (-22.69952, -44.55033, 0.0)
    test 520 at 210: (-25.0, -43.30127, 0.0)
    test 521 at 213: (-27.23195, -41.93353, 0.0)
    test 522 at 216: (-29.38926, -40.45085, 0.0)
    test 523 at 219: (-31.46602, -38.8573, 0.0)
    test 524 at 222: (-33.45653, -37.15724, 0.0)
    test 525 at 225: (-35.35534, -35.35534, 0.0)
    test 526 at 228: (-37.15724, -33.45653, 0.0)
    test 527 at 231: (-38.8573, -31.46602, 0.0)
    test 528 at 234: (-40.45085, -29.38926, 0.0)
    test 529 at 237: (-41.93353, -27.23195, 0.0)
    test 530 at 240: (-43.30127, -25.0, 0.0)
    test 531 at 243: (-44.55033, -22.69952, 0.0)
    test 532 at 246: (-45.67727, -20.33683, 0.0)
    test 533 at 249: (-46.67902, -17.9184, 0.0)
    test 534 at 252: (-47.55283, -15.45085, 0.0)
    test 535 at 255: (-48.29629, -12.94095, 0.0)
    test 536 at 258: (-48.90738, -10.39558, 0.0)
    test 537 at 261: (-49.38442, -7.82172, 0.0)
    test 538 at 264: (-49.72609, -5.22642, 0.0)
    test 539 at 267: (-49.93148, -2.6168, 0.0)
    test 540 at 270: (-50.0, 0.0, 0.0)
    test 541 at 273: (-49.93148, 2.6168, 0.0)
    test 542 at 276: (-49.72609, 5.22642, 0.0)
    test 543 at 279: (-49.38442, 7.82172, 0.0)
    test 544 at 282: (-48.90738, 10.39558, 0.0)
    test 545 at 285: (-48.29629, 12.94095, 0.0)
    test 546 at 288: (-47.55283, 15.45085, 0.0)
    test 547 at 291: (-46.67902, 17.9184, 0.0)
    test 548 at 294: (-45.67727, 20.33683, 0.0)
    test 549 at 297: (-44.55033, 22.69952, 0.0)
    test 550 at 300: (-43.30127, 25.0, 0.0)
    test 551 at 303: (-41.93353, 27.23195, 0.0)
    test 552 at 306: (-40.45085, 29.38926, 0.0)
    test 553 at 309: (-38.8573, 31.46602, 0.0)
    test 554 at 312: (-37.15724, 33.45653, 0.0)
    test 555 at 315: (-35.35534, 35.35534, 0.0)
    test 556 at 318: (-33.45653, 37.15724, 0.0)
    test 557 at 321: (-31.46602, 38.8573, 0.0)
    test 558 at 324: (-29.38926, 40.45085, 0.0)
    test 559 at 327: (-27.23195, 41.93353, 0.0)
    test 560 at 330: (-25.0, 43.30127, 0.0)
    test 561 at 333: (-22.69952, 44.55033, 0.0)
    test 562 at 336: (-20.33683, 45.67727, 0.0)
    test 563 at 339: (-17.9184, 46.67902, 0.0)
    test 564 at 342: (-15.45085, 47.55283, 0.0)
    test 565 at 345: (-12.94095, 48.29629, 0.0)
    test 566 at 348: (-10.39558, 48.90738, 0.0)
    test 567 at 351: (-7.82172, 49.38442, 0.0)
    test 568 at 354: (-5.22642, 49.72609, 0.0)
    test 569 at 357: (-2.6168, 49.93148, 0.0)
    test 570 at 360: (0.0, 50.0, 0.0)
    test 571 max error: 2.3317285650e-13

    8 of 571 testVectorial.py tests (1.4%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 113.788 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testWebMercator.py

    testing testWebMercator.py 22.04.22 (module pygeodesy.webmercator 22.06.26)
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 12 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 13 toWm1: 448251.795 5411932.678
    test 14 toWm2: 448252 5411933
    test 15 toWm3: [x:448252, y:5411933, radius:6378137]
    test 16 copy: 448251.795 5411932.678
    test 17 parse: 448251.795 5411932.678
    test 18 parse: 448251.795 5411932.678
    test 19 parse: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 20 toWm4: 11562388 1506899
    test 21 toWm4: 11562388.154378 1506899.04498
    test 22 toWm4E: 11562388 1496994
    test 23 toWm4E: 11562388.154378 1496993.698095
    test 24 toWm5: -11169056 2800000
    test 25 toWm5: -11169055.576258 2800000.003136
    test 26 toWm5E: -11169056 2782367
    test 27 toWm5E: -11169055.576258 2782367.05923
    test 28 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 29 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 30 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 31 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 32 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 33 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 34 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 35 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 36 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 37 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 38 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 39 Wm8.toWm.x: -33878.893
    test 40 Wm8.toWm.y: 6693890.382
    test 41 Wm8.toWm.latlon: 51.408596, -0.304339
    test 42 Wm8.toWm.philam: 0.897249, -0.005312
    test 43 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 44 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 45 Wm9.toLatLon: TypeError
    test 46 Wm9.toLatLon: TypeError
    test 47 Wm9.toLatLon: TypeError
    test 48 Wm9.toLatLon: TypeError
    test 49 Wm9.toLatLon: TypeError
    test 50 toWm(LatLon(10.0000, 0)).y: 1118889.97
    test 51 toWm(LatLon(20.0000, 0)).y: 2273030.93
    test 52 toWm(LatLon(30.0000, 0)).y: 3503549.84
    test 53 toWm(LatLon(40.0000, 0)).y: 4865942.28
    test 54 toWm(LatLon(50.0000, 0)).y: 6446275.84
    test 55 toWm(LatLon(60.0000, 0)).y: 8399737.89
    test 56 toWm(LatLon(10.0003, 0)).y: 1118921.37
    test 57 toWm(LatLon(20.0003, 0)).y: 2273063.83
    test 58 toWm(LatLon(30.0003, 0)).y: 3503585.55
    test 59 toWm(LatLon(40.0003, 0)).y: 4865982.65
    test 60 toWm(LatLon(50.0003, 0)).y: 6446323.95
    test 61 toWm(LatLon(60.0003, 0)).y: 8399799.73
    test 62 toWm(LatLonE(10.0000, 0)).y: 1111475.10
    test 63 toWm(LatLonE(20.0000, 0)).y: 2258423.65
    test 64 toWm(LatLonE(30.0000, 0)).y: 3482189.09
    test 65 toWm(LatLonE(40.0000, 0)).y: 4838471.40
    test 66 toWm(LatLonE(50.0000, 0)).y: 6413524.59
    test 67 toWm(LatLonE(60.0000, 0)).y: 8362698.55
    test 68 toWm(LatLonE(10.0003, 0)).y: 1111506.30
    test 69 toWm(LatLonE(20.0003, 0)).y: 2258456.36
    test 70 toWm(LatLonE(30.0003, 0)).y: 3482224.61
    test 71 toWm(LatLonE(40.0003, 0)).y: 4838511.61
    test 72 toWm(LatLonE(50.0003, 0)).y: 6413572.57
    test 73 toWm(LatLonE(60.0003, 0)).y: 8362760.29

    all 73 testWebMercator.py tests passed (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 2.149 ms

running /Library/Framewo....n3.10 -W default ~/PyGeodesy/test/testWgrs.py

    testing testWgrs.py 21.01.10 (module pygeodesy.wgrs 22.05.14)
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W  default) 1.925 ms

test/run.py /Library/Framewo....n3.10 -W default: all 37839 tests OK (PyGeodesy 22.7.7 Python 3.10.5 64bit arm64 coverage 4.5.4 numpy 1.22.4 scipy 1.8.1 geographiclib 2.0 geoMath _K_2_0 macOS 12.4 isLazy 0 -B -W default) 3:56.939 (159.700 tps)
