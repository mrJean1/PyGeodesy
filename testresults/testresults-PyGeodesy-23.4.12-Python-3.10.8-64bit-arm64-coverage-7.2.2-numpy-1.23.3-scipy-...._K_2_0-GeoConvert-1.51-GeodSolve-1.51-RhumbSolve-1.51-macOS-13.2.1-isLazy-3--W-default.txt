test/run.py typical test results (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W default)

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testAlbers.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersError from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea2 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualArea4 from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaCylindrical from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaNorth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.AlbersEqualAreaSouth from .albers by testAlbers.py line 11
# lazily imported pygeodesy.Datums from .datums by testAlbers.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAlbers.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testAlbers.py line 11

    testing testAlbers.py 23.03.27 (module pygeodesy.albers 23.03.19) isLazy=3
    test 1 name: Karney_example
    test 2 datum: WGS84
    test 3 ellipsoid: WGS84
    test 4 lat0: 40.451991337063
    test 5 scale0: 0.999959500363
    test 6 equatoradius: 6378137.000000000000
    test 7 flattening: 0.003352810665
    test 8 _sign: 1.000000000000
    test 9 _m02: 0.580681094922
    test 10 _n0: 0.648810669236
    test 11 _txi0: 0.848822476849
    test 12 iteration: 3
    test 13 ispolar: False
    test 14 forward: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 15 reverse: -5675721.76113533, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745  FAILED, KNOWN, expected -5675721.76113534, 2516917.91242155, 39.95, -75.17, 311.23285234, 0.99999745
    test 16 forward: 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 17 reverse: 199089.12574012, -53115.52801838, 39.95, -75.17, 1.51160641, 0.99999745  FAILED, KNOWN, expected 199089.12574012, -53115.52801838, 39.95, 2.33, 1.51160641, 0.99999745
    test 18 reverse: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 19 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808
    test 20 reverse: 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808
    test 21 forward: 220000.0, -53000.0, 39.94581132, 2.57463362, 1.67031446, 0.99999808  FAILED, KNOWN, expected 220000.0, -53000.0, 39.94581132, -74.92536638, 1.67031446, 0.99999808

    testPage292(pygeodesy.albers, 23.03.19)
    test 22 name: Snyder_p292
    test 23 datum: NAD27
    test 24 ellipsoid: Clarke1866
    test 25 lat0: 37.934543880726
    test 26 scale0: 0.990309187872
    test 27 equatoradius: 6378206.400000000373
    test 28 flattening: 0.003390075304
    test 29 _sign: 1.000000000000
    test 30 _m02: 0.623664507732
    test 31 _n0: 0.614760830736
    test 32 _txi0: 0.775925617021
    test 33 iteration: 4
    test 34 ispolar: False
    test 35 forward: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 36 reverse: -6105839.22928149, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461  FAILED, KNOWN, expected -6105839.22928148, 2214046.74930274, 35.0, -75.0, 314.78223745, 0.99155461
    test 37 forward: 1885472.72581347, -119505.66687765, 35.0, 21.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 38 reverse: 1885472.72581347, -119505.66687765, 35.0, -75.0, 12.66097351, 0.99155461  FAILED, KNOWN, expected 1885472.72581347, -119505.66687766, 35.0, 21.0, 12.66097351, 0.99155461
    test 39 reverse: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 40 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109
    test 41 reverse: 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109
    test 42 forward: 1885427.7, 1535925.0, 49.40436665, 25.93001383, 15.63329611, 1.01436109  FAILED, KNOWN, expected 1885427.7, 1535925.0, 49.40436665, -70.06998617, 15.63329611, 1.01436109

    testTable15(pygeodesy.albers, 23.03.19)
    test 43 52 k: 1.02863
    test 44 50 k: 1.01727
    test 45 45.5 k: 1.00000
    test 46 45 k: 0.99869
    test 47 40 k: 0.99097
    test 48 35 k: 0.99155
    test 49 30 k: 0.99893
    test 50 29.5 k: 1.00000
    test 51 25 k: 1.01222
    test 52 22 k: 1.02283

    testLats(pygeodesy.albers, 23.03.19)
    test 53 AlbersEqualArea.lat0: 45.0
    test 54 AlbersEqualArea.lat1: 45.0
    test 55 AlbersEqualArea.lat2: 45.0
    test 56 AlbersEqualArea2.lat0: 40.0
    test 57 AlbersEqualArea2.lat1: 40.0
    test 58 AlbersEqualArea2.lat2: 40.0
    test 59 AlbersEqualArea4.lat0: 30.0
    test 60 AlbersEqualArea4.lat1: 30.0
    test 61 AlbersEqualArea4.lat2: 30.0
    test 62 AlbersEqualArea4.lat0: -30.0
    test 63 AlbersEqualArea4.lat1: -30.0
    test 64 AlbersEqualArea4.lat2: -30.0
    test 65 AlbersEqualAreaCylindrical.lat0: 0.0
    test 66 AlbersEqualAreaCylindrical.lat1: 0.0
    test 67 AlbersEqualAreaCylindrical.lat2: 0.0
    test 68 AlbersEqualAreaNorth.lat0: 90.0
    test 69 AlbersEqualAreaNorth.lat1: 90.0
    test 70 AlbersEqualAreaNorth.lat2: 90.0
    test 71 AlbersEqualAreaSouth.lat0: -90.0
    test 72 AlbersEqualAreaSouth.lat1: -90.0
    test 73 AlbersEqualAreaSouth.lat2: -90.0
    test 74 error: lat1 (150.0): above 90 limit
    test 75 error: slat1 (-0.5) or slat2 (0.5): invalid

    9 of 75 testAlbers.py tests (12.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 16.834 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testAzimuthal.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Equidistant from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Gnomonic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicExact from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicGeodSolve from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.GnomonicKarney from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.LambertEqualArea from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Orthographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.Stereographic from .azimuthal by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalKarney by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testAzimuthal.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testAzimuthal.py line 11
# lazily imported pygeodesy.F_D from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.fstr from .streprs by testAzimuthal.py line 11
# lazily imported pygeodesy.hypot from .fmath by testAzimuthal.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.latlonDMS_ from .dms by testAzimuthal.py line 11
# lazily imported pygeodesy.vincentys from .formy by testAzimuthal.py line 11
# lazily imported pygeodesy.Azimuthal7Tuple from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.equidistant from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.gnomonic from .azimuthal by testAzimuthal.py line 138
# lazily imported pygeodesy.NAN from .constants by testAzimuthal.py line 138

    testing testAzimuthal.py 23.03.27 (module pygeodesy.azimuthal 23.04.11) isLazy=3
    test 1 Equidistant(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 forward: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 3 reverse: -37467.812512, 230294.518853, 50.9, 1.8, 350.759218, 1.000223
    test 4 iteration: None
    test 5 copy(Equidistant): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 6 Equidistant.copy(): (<class 'pygeodesy.azimuthal.Equidistant'>, True)
    test 7 reverse: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 8 forward: -38000.0, 230000.0, 50.897321, 1.792455, 350.61849, 1.000222
    test 9 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 10 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 11 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 12 reverse: LatLon(50°53′50.36″N, 001°47′32.84″E)
    test 13 Equidistant(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 14 forward: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 15 reverse: 170420.92566, -293667.828613, 48.833333, 2.333333, 149.872606, 1.000472
    test 16 iteration: None
    test 17 hypot: 339535.102  FAILED, KNOWN, expected 338901.865
    test 18 antipodal: (170420.92566, -293667.828613, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 19 Gnomonic(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 20 forward: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000669
    test 21 reverse: -37484.520018, 230397.210923, 50.9, 1.8, 350.759218, 1.000223
    test 22 iteration: None
    test 23 copy(Gnomonic): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 24 Gnomonic.copy(): (<class 'pygeodesy.azimuthal.Gnomonic'>, True)
    test 25 reverse: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000222
    test 26 forward: -38000.0, 230000.0, 50.896405, 1.792706, 350.61849, 1.000667
    test 27 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 28 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 29 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 30 reverse: LatLon(50°53′47.06″N, 001°47′33.74″E)
    test 31 Gnomonic(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 32 forward: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.001416
    test 33 reverse: 170581.851218, -293945.134107, 48.833333, 2.333333, 149.872606, 1.000472
    test 34 iteration: None
    test 35 hypot: 339855.719  FAILED, KNOWN, expected 338901.865
    test 36 antipodal: (170581.851218, -293945.134107, -48.833333, -177.666667, 0.0, 1.000472, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 37 EquidistantExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 38 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 39 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 40 iteration: None
    test 41 copy(EquidistantExact): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 42 EquidistantExact.copy(): (<class 'pygeodesy.azimuthal.EquidistantExact'>, True)
    test 43 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 44 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 45 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 46 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 47 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 48 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 49 EquidistantExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 50 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 51 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 52 iteration: None
    test 53 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 54 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 55 GnomonicExact(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 56 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 57 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 58 iteration: 3
    test 59 copy(GnomonicExact): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 60 GnomonicExact.copy(): (<class 'pygeodesy.azimuthal.GnomonicExact'>, True)
    test 61 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 62 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 63 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 64 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 65 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 66 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 67 GnomonicExact(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 68 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 69 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 70 iteration: 3
    test 71 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 72 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 73 EquidistantGeodSolve(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 74 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 75 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 76 iteration: None
    test 77 copy(EquidistantGeodSolve): (<class 'pygeodesy.azimuthal.EquidistantGeodSolve'>, True)
    test 78 EquidistantGeodSolve.copy(): (<class 'pygeodesy.azimuthal.EquidistantGeodSolve'>, True)
    test 79 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 80 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 81 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 82 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 83 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 84 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 85 EquidistantGeodSolve(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 86 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 87 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 88 iteration: None
    test 89 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 90 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 91 GnomonicGeodSolve(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 92 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 93 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 94 iteration: 3
    test 95 copy(GnomonicGeodSolve): (<class 'pygeodesy.azimuthal.GnomonicGeodSolve'>, True)
    test 96 GnomonicGeodSolve.copy(): (<class 'pygeodesy.azimuthal.GnomonicGeodSolve'>, True)
    test 97 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 98 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 99 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 100 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 101 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 102 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 103 GnomonicGeodSolve(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 104 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 105 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 106 iteration: 3
    test 107 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 108 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 109 EquidistantKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 110 forward: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 111 reverse: -37526.978232, 230000.911579, 50.9, 1.8, 350.325442, 0.999778
    test 112 iteration: None
    test 113 copy(EquidistantKarney): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 114 EquidistantKarney.copy(): (<class 'pygeodesy.azimuthal.EquidistantKarney'>, True)
    test 115 reverse: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 116 forward: -38000.0, 230000.0, 50.899962, 1.793278, 350.205524, 0.999778
    test 117 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 118 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 119 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 120 reverse: LatLon(50°53′59.86″N, 001°47′35.8″E)
    test 121 EquidistantKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 122 forward: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 123 reverse: 170617.186469, -293210.754313, 48.833333, 2.333333, 151.589952, 0.999529
    test 124 iteration: None
    test 125 hypot: 339238.516  FAILED, KNOWN, expected 338901.865
    test 126 antipodal: (170617.186469, -293210.754313, -48.833333, -177.666667, 0.0, 0.999529, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 127 GnomonicKarney(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 128 forward: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 129 reverse: -37543.665895, 230103.189403, 50.9, 1.8, 350.325442, 0.999333
    test 130 iteration: 3
    test 131 copy(GnomonicKarney): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 132 GnomonicKarney.copy(): (<class 'pygeodesy.azimuthal.GnomonicKarney'>, True)
    test 133 reverse: -38000.0, 230000.0, 50.899044, 1.793528, 350.205718, 0.999333
    test 134 forward: -37999.995965, 229999.975581, 50.899044, 1.793528, 350.205718, 0.999334
    test 135 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 136 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 137 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 138 reverse: LatLon(50°53′56.56″N, 001°47′36.7″E)
    test 139 GnomonicKarney(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 140 forward: 170778.089295, -293487.270649, 48.833333, 2.333333, 151.589952, 0.998587
    test 141 reverse: 170778.089295, -293487.270649, 48.833333, 2.333334, 151.589953, 0.998588
    test 142 iteration: 3
    test 143 hypot: 339558.439  FAILED, KNOWN, expected 338901.963
    test 144 antipodal: (170778.089295, -293487.270649, -48.833333, -177.666666, 0.0, 0.998588, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 145 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E Random +/- 45
    test 146 pygeodesy.ellipsoidalExact: 31.498627°S, 010.381229°E, 22.662237°S, 022.618809°E  d 19145 meter  Spherical
    test 147 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 22.683632°S, 022.728592°E  d 5.19478e-09 meter  EquidistantExact
    test 148 pygeodesy.ellipsoidalExact: 31.519736°S, 010.382264°E, 22.678486°S, 022.685884°E  d 16877.1 meter  Equidistant
    test 149 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 4, 4, 8, 5, 5, °, S, ,,  , 0, 0, 0, ., 0, 5, 4, 6, 1, 2, °, E  00.457%, 000.523% of Random
    test 150 pygeodesy.ellipsoidalExact: 31.494454°S, 010.076349°E, 30.796136°S, 002.982612°W  d 39077 meter  Spherical
    test 151 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 30.919401°S, 003.360429°W  d 2.33021e-09 meter  EquidistantExact
    test 152 pygeodesy.ellipsoidalExact: 31.508411°S, 010.116172°E, 30.807477°S, 003.031088°W  d 35020.7 meter  Equidistant
    test 153 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 5, 6, 1, 8, 0, °, S, ,,  , 0, 0, 0, ., 3, 2, 0, 7, 0, 4, °, E  00.493%, 003.073% of Random
    test 154 pygeodesy.ellipsoidalExact: 31.406712°S, 010.715406°E, 00.822991°N, 040.390853°W  d 38951.6 meter  Spherical
    test 155 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 00.745991°N, 040.334458°W  d 4.71693e-09 meter  EquidistantExact
    test 156 pygeodesy.ellipsoidalExact: 31.430937°S, 010.686670°E, 00.646565°N, 040.443559°W  d 35125.2 meter  Equidistant
    test 157 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 3, 3, 6, 5, 4, °, S, ,,  , 0, 0, 0, ., 2, 4, 9, 7, 9, 4, °, W  00.738%, 002.393% of Random
    test 158 pygeodesy.ellipsoidalExact: 31.769468°S, 010.375891°E, 26.764856°S, 012.567193°E  d 12986.3 meter  Spherical
    test 159 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 26.893541°S, 012.501895°E  d 4.94762e-09 meter  EquidistantExact
    test 160 pygeodesy.ellipsoidalExact: 31.850415°S, 010.350411°E, 26.589844°S, 012.666858°E  d 22173.3 meter  Equidistant
    test 161 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 8, 5, 8, 2, 4, °, N, ,,  , 0, 0, 0, ., 0, 8, 6, 4, 6, 5, °, E  00.587%, 000.828% of Random
    test 162 pygeodesy.ellipsoidalExact: 31.422428°S, 010.796072°E, 15.734917°S, 026.397638°W  d 43409.3 meter  Spherical
    test 163 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 15.974049°S, 026.301202°W  d 8.8732e-09 meter  EquidistantExact
    test 164 pygeodesy.ellipsoidalExact: 31.443198°S, 010.774226°E, 15.850602°S, 026.409701°W  d 40355.4 meter  Equidistant
    test 165 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 2, 1, 3, 9, 4, °, S, ,,  , 0, 0, 0, ., 3, 3, 7, 3, 5, 0, °, W  00.699%, 003.232% of Random
    test 166 pygeodesy.ellipsoidalExact: 31.613317°S, 010.481628°E, 31.597496°S, 010.498401°E  d 7095.44 meter  Spherical
    test 167 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 31.553994°S, 010.552946°E  d 1.8155e-08 meter  EquidistantExact
    test 168 pygeodesy.ellipsoidalExact: 31.652550°S, 010.445684°E, 31.562606°S, 010.541171°E  d 1574.93 meter  Equidistant
    test 169 pygeodesy.ellipsoidalExact: 0, 0, ., 0, 1, 2, 0, 4, 1, °, S, ,,  , 0, 0, 0, ., 0, 0, 8, 8, 0, 8, °, W  00.038%, 000.084% of Random
    test 170 pygeodesy.ellipsoidalExact: 31.462830°S, 010.515409°E, 19.124076°N, 029.180656°W  d 23580.9 meter  Spherical
    test 171 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 19.327752°N, 029.114733°W  d 6.9974e-09 meter  EquidistantExact
    test 172 pygeodesy.ellipsoidalExact: 31.483155°S, 010.536314°E, 19.201120°N, 029.246274°W  d 22222.1 meter  Equidistant
    test 173 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 8, 1, 4, 3, 7, °, S, ,,  , 0, 0, 0, ., 0, 9, 9, 4, 3, 8, °, W  00.573%, 000.953% of Random
    test 174 pygeodesy.ellipsoidalExact: 32.232004°S, 012.866615°E, 30.527892°S, 007.825414°E  d 238176 meter  Spherical
    test 175 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 31.523989°S, 010.025705°E  d 6.54302e-08 meter  EquidistantExact
    test 176 pygeodesy.ellipsoidalExact: 32.218683°S, 012.767971°E, 30.599386°S, 007.948535°E  d 228809 meter  Equidistant
    test 177 pygeodesy.ellipsoidalExact: 0, 0, ., 5, 5, 4, 0, 9, 2, °, N, ,,  , 0, 0, 2, ., 3, 3, 1, 0, 9, 5, °, W  01.750%, 022.335% of Random
    test 178 pygeodesy.ellipsoidalExact: 30.874588°S, 011.367745°E, 36.871924°S, 002.400246°W  d 124623 meter  Spherical
    test 179 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 36.706310°S, 000.996820°W  d 6.4404e-09 meter  EquidistantExact
    test 180 pygeodesy.ellipsoidalExact: 30.977308°S, 011.260237°E, 36.877775°S, 002.462032°W  d 109309 meter  Equidistant
    test 181 pygeodesy.ellipsoidalExact: 0, 0, ., 6, 8, 7, 2, 8, 4, °, S, ,,  , 0, 0, 0, ., 8, 2, 3, 3, 6, 1, °, W  02.171%, 007.889% of Random
    test 182 pygeodesy.ellipsoidalExact: 32.024885°S, 008.743143°E, 30.886451°S, 011.954533°E  d 165216 meter  Spherical
    test 183 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 31.652012°S, 010.471966°E  d 2.61168e-07 meter  EquidistantExact
    test 184 pygeodesy.ellipsoidalExact: 32.019084°S, 008.817808°E, 30.940225°S, 011.879226°E  d 158212 meter  Equidistant
    test 185 pygeodesy.ellipsoidalExact: 0, 0, ., 3, 5, 4, 4, 9, 3, °, N, ,,  , 0, 0, 1, ., 6, 1, 9, 0, 6, 8, °, E  01.120%, 015.513% of Random
    test 186 pygeodesy.ellipsoidalExact: 31.472402°S, 010.490801°E, 43.590300°N, 016.864368°W  d 21916.1 meter  Spherical
    test 187 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 43.750678°N, 016.766344°W  d 6.73847e-10 meter  EquidistantExact
    test 188 pygeodesy.ellipsoidalExact: 31.493672°S, 010.483106°E, 43.565332°N, 016.803620°W  d 19452.9 meter  Equidistant
    test 189 pygeodesy.ellipsoidalExact: 0, 0, ., 1, 7, 0, 9, 1, 9, °, S, ,,  , 0, 0, 0, ., 0, 4, 6, 2, 3, 0, °, W  00.540%, 000.443% of Random
    test 190 pygeodesy.ellipsoidalExact: 31.373012°S, 010.253932°E, 14.848402°N, 076.910974°E  d 36703.7 meter  Spherical
    test 191 pygeodesy.ellipsoidalExact: 31.664591°S, 010.436876°E, 14.947292°N, 076.871139°E  d 5.01598e-09 meter  EquidistantExact
    test 192 pygeodesy.ellipsoidalExact: 31.398751°S, 010.252761°E, 14.800902°N, 077.013371°E  d 34272 meter  Equidistant
    test 193 pygeodesy.ellipsoidalExact: 0, 0, ., 2, 6, 5, 8, 4, 0, °, S, ,,  , 0, 0, 0, ., 1, 8, 4, 1, 1, 4, °, E  00.840%, 001.764% of Random
    test 194 pygeodesy.ellipsoidalExact: 0, 0, ., 6, 8, 7, 2, 8, 4, °, N, ,,  , 0, 0, 2, ., 3, 3, 1, 0, 9, 5, °, E  02.171%, 022.335% of Random, max

    test 195 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E Random +/- 45
    test 196 pygeodesy.ellipsoidalVincenty: 04.592410°S, 011.400326°E, 02.399079°S, 030.874871°E  d 20602 meter  Spherical
    test 197 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 02.512957°S, 030.991501°E  d 1.95923e-06 meter  EquidistantExact
    test 198 pygeodesy.ellipsoidalVincenty: 04.668619°S, 011.332259°E, 02.459303°S, 030.959142°E  d 10056 meter  Equidistant
    test 199 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 8, 9, 2, 8, 0, °, S, ,,  , 0, 0, 0, ., 0, 1, 7, 2, 2, 5, °, W  01.876%, 000.152% of Random
    test 200 pygeodesy.ellipsoidalVincenty: 04.689302°S, 011.289371°E, 26.504172°N, 012.408965°E  d 8102.36 meter  Spherical
    test 201 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 26.560558°N, 012.421373°E  d 5.69515e-07 meter  EquidistantExact
    test 202 pygeodesy.ellipsoidalVincenty: 04.753689°S, 011.250086°E, 26.531816°N, 012.393102°E  d 7220.31 meter  Equidistant
    test 203 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 0, 4, 2, 1, 0, °, S, ,,  , 0, 0, 0, ., 0, 6, 4, 9, 4, 8, °, E  00.088%, 000.574% of Random
    test 204 pygeodesy.ellipsoidalVincenty: 04.565367°S, 011.322328°E, 16.964415°N, 050.265434°E  d 21305.8 meter  Spherical
    test 205 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 17.072457°N, 050.333631°E  d 2.86221e-06 meter  EquidistantExact
    test 206 pygeodesy.ellipsoidalVincenty: 04.685323°S, 011.236010°E, 16.967586°N, 050.382835°E  d 11885.9 meter  Equidistant
    test 207 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 2, 5, 7, 6, °, S, ,,  , 0, 0, 0, ., 0, 7, 9, 0, 2, 4, °, E  01.525%, 000.698% of Random
    test 208 pygeodesy.ellipsoidalVincenty: 05.536421°S, 010.032193°E, 09.389747°S, 003.915273°E  d 166258 meter  Spherical
    test 209 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 10.264041°S, 002.675198°E  d 4.50299e-05 meter  EquidistantExact
    test 210 pygeodesy.ellipsoidalVincenty: 04.770218°S, 011.330415°E, 10.178168°S, 002.732889°E  d 2183.44 meter  Equidistant
    test 211 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 1, 2, 3, 1, 9, °, N, ,,  , 0, 0, 0, ., 0, 1, 5, 3, 8, 1, °, W  00.259%, 000.136% of Random
    test 212 pygeodesy.ellipsoidalVincenty: too distant (6.9e+06): invalid  FAILED, KNOWN, expected Spherical
    test 213 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 06.689207°S, 006.852596°E  d 1.42636e-05 meter  EquidistantExact
    test 214 pygeodesy.ellipsoidalVincenty: 04.969179°S, 010.758621°E, 06.405593°S, 007.394631°E  d 65992.3 meter  Equidistant
    test 215 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 1, 1, 2, 8, 0, °, N, ,,  , 0, 0, 0, ., 5, 5, 6, 4, 1, 3, °, E  04.441%, 004.917% of Random
    test 216 pygeodesy.ellipsoidalVincenty: 04.616390°S, 011.311922°E, 01.510356°S, 015.578296°E  d 15652.1 meter  Spherical
    test 217 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 01.529526°S, 015.694340°E  d 5.33667e-06 meter  EquidistantExact
    test 218 pygeodesy.ellipsoidalVincenty: 04.770332°S, 011.304137°E, 01.550935°S, 015.730011°E  d 1830.75 meter  Equidistant
    test 219 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 1, 2, 4, 3, 3, °, N, ,,  , 0, 0, 0, ., 0, 1, 0, 8, 9, 7, °, E  00.261%, 000.096% of Random
    test 220 pygeodesy.ellipsoidalVincenty: 04.907332°S, 011.405173°E, 33.497276°S, 037.559053°W  d 19314.2 meter  Spherical
    test 221 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 33.573705°S, 037.495197°W  d 3.52785e-06 meter  EquidistantExact
    test 222 pygeodesy.ellipsoidalVincenty: 04.842979°S, 011.422027°E, 33.495633°S, 037.566104°W  d 15145.5 meter  Equidistant
    test 223 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 8, 5, 0, 8, 0, °, N, ,,  , 0, 0, 0, ., 1, 0, 6, 9, 9, 3, °, W  01.788%, 000.946% of Random
    test 224 pygeodesy.ellipsoidalVincenty: 04.817919°S, 011.372014°E, 21.367851°N, 061.127633°W  d 9165.48 meter  Spherical
    test 225 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 21.673326°N, 060.953708°W  d 3.49116e-05 meter  EquidistantExact
    test 226 pygeodesy.ellipsoidalVincenty: 04.729803°S, 011.453039°E, 21.440434°N, 061.138384°W  d 15622.4 meter  Equidistant
    test 227 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 2, 8, 0, 9, 6, °, S, ,,  , 0, 0, 0, ., 1, 3, 8, 0, 0, 5, °, W  00.591%, 001.220% of Random
    test 228 pygeodesy.ellipsoidalVincenty: 04.843051°S, 011.355889°E, 15.024596°N, 032.795129°W  d 10450.2 meter  Spherical
    test 229 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 15.263697°N, 032.617347°W  d 1.70097e-05 meter  EquidistantExact
    test 230 pygeodesy.ellipsoidalVincenty: 04.734901°S, 011.404591°E, 15.113940°N, 032.757631°W  d 10255.8 meter  Equidistant
    test 231 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 2, 2, 9, 9, 8, °, S, ,,  , 0, 0, 0, ., 0, 8, 9, 5, 5, 7, °, W  00.483%, 000.791% of Random
    test 232 pygeodesy.ellipsoidalVincenty: 04.672969°S, 011.273877°E, 17.237969°N, 040.719628°W  d 10442.9 meter  Spherical
    test 233 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 17.444046°N, 040.715027°W  d 9.15555e-06 meter  EquidistantExact
    test 234 pygeodesy.ellipsoidalVincenty: 04.678496°S, 011.384467°E, 17.291159°N, 040.786191°W  d 11680.6 meter  Equidistant
    test 235 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 7, 9, 4, 0, 3, °, S, ,,  , 0, 0, 0, ., 0, 6, 9, 4, 3, 3, °, W  01.669%, 000.614% of Random
    test 236 pygeodesy.ellipsoidalVincenty: 04.834740°S, 011.290661°E, 34.863572°S, 025.789362°E  d 8917.03 meter  Spherical
    test 237 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 34.933284°S, 025.725322°E  d 1.09684e-06 meter  EquidistantExact
    test 238 pygeodesy.ellipsoidalVincenty: 04.777098°S, 011.305504°E, 34.864201°S, 025.790927°E  d 2371.79 meter  Equidistant
    test 239 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 1, 9, 1, 9, 9, °, N, ,,  , 0, 0, 0, ., 0, 0, 9, 5, 3, 0, °, E  00.404%, 000.084% of Random
    test 240 pygeodesy.ellipsoidalVincenty: 04.596075°S, 011.284734°E, 03.249933°S, 050.429187°E  d 18207.8 meter  Spherical
    test 241 pygeodesy.ellipsoidalVincenty: 04.757899°S, 011.315034°E, 03.395807°S, 050.409030°E  d 1.57578e-06 meter  EquidistantExact
    test 242 pygeodesy.ellipsoidalVincenty: 04.666824°S, 011.245064°E, 03.318588°S, 050.473834°E  d 12715.9 meter  Equidistant
    test 243 pygeodesy.ellipsoidalVincenty: 0, 0, ., 0, 9, 1, 0, 7, 5, °, S, ,,  , 0, 0, 0, ., 0, 6, 9, 9, 7, 1, °, E  01.914%, 000.618% of Random
    test 244 pygeodesy.ellipsoidalVincenty: 0, 0, ., 2, 1, 1, 2, 8, 0, °, N, ,,  , 0, 0, 0, ., 5, 5, 6, 4, 1, 3, °, E  04.441%, 004.917% of Random, max

    test 245 Equidistant(10, 80): 1.37704, 0.24656
    test 246 Equidistant(10, 80): 10.0, 80.0
    test 247 Gnomonic(10, 80): 5.67128, 1.01543
    test 248 Gnomonic(10, 80): 10.0, 80.0
    test 249 LambertEqualArea(10, 80): 1.26747, 0.22694
    test 250 LambertEqualArea(10, 80): 10.0, 80.0
    test 251 Orthographic(10, 80): 0.96985, 0.17365
    test 252 Orthographic(10, 80): 10.0, 80.0
    test 253 Stereographic(10, 80): 1.65643, 0.29658
    test 254 Stereographic(10, 80): 10.0, 80.0
    test 255 Equidistant(20, 20): 0.33454, 0.35601
    test 256 Equidistant(20, 20): 20.0, 20.0
    test 257 Gnomonic(20, 20): 0.36397, 0.38733
    test 258 Gnomonic(20, 20): 20.0, 20.0
    test 259 LambertEqualArea(20, 20): 0.33123, 0.35248
    test 260 LambertEqualArea(20, 20): 20.0, 20.0
    test 261 Orthographic(20, 20): 0.32139, 0.34202
    test 262 Orthographic(20, 20): 20.0, 20.0
    test 263 Stereographic(20, 20): 0.34136, 0.36327
    test 264 Stereographic(20, 20): 20.0, 20.0
    test 265 Equidistant(40, 40): 0.57386, 0.74912
    test 266 Equidistant(40, 40): 40.0, 40.0
    test 267 Gnomonic(40, 40): 0.8391, 1.09537
    test 268 Gnomonic(40, 40): 40.0, 40.0
    test 269 LambertEqualArea(40, 40): 0.55281, 0.72164
    test 270 LambertEqualArea(40, 40): 40.0, 40.0
    test 271 Orthographic(40, 40): 0.4924, 0.64279
    test 272 Orthographic(40, 40): 40.0, 40.0
    test 273 Stereographic(40, 40): 0.62062, 0.81016
    test 274 Stereographic(40, 40): 40.0, 40.0
    test 275 Equidistant(60, 60): 0.58948, 1.17896
    test 276 Equidistant(60, 60): 60.0, 60.0
    test 277 Gnomonic(60, 60): 1.73205, 3.4641
    test 278 Gnomonic(60, 60): 60.0, 60.0
    test 279 LambertEqualArea(60, 60): 0.54772, 1.09545
    test 280 LambertEqualArea(60, 60): 60.0, 60.0
    test 281 Orthographic(60, 60): 0.43301, 0.86603
    test 282 Orthographic(60, 60): 60.0, 60.0
    test 283 Stereographic(60, 60): 0.69282, 1.38564
    test 284 Stereographic(60, 60): 60.0, 60.0
    test 285 Equidistant(70, 80): 0.50997, 1.42273
    test 286 Equidistant(70, 80): 70.0, 80.0
    test 287 Gnomonic(70, 80): 5.67128, 15.82209
    test 288 Gnomonic(70, 80): 70.0, 80.0
    test 289 LambertEqualArea(70, 80): 0.4628, 1.29114
    test 290 LambertEqualArea(70, 80): 70.0, 80.0
    test 291 Orthographic(70, 80): 0.33682, 0.93969
    test 292 Orthographic(70, 80): 70.0, 80.0
    test 293 Stereographic(70, 80): 0.63588, 1.77402
    test 294 Stereographic(70, 80): 70.0, 80.0
    test 295 Equidistant(80, 80): 0.26358, 1.51792
    test 296 Equidistant(80, 80): 80.0, 80.0
    test 297 Gnomonic(80, 80): 5.67128, 32.65961
    test 298 Gnomonic(80, 80): 80.0, 80.0
    test 299 LambertEqualArea(80, 80): 0.23828, 1.37219
    test 300 LambertEqualArea(80, 80): 80.0, 80.0
    test 301 Orthographic(80, 80): 0.17101, 0.98481
    test 302 Orthographic(80, 80): 80.0, 80.0
    test 303 Stereographic(80, 80): 0.33201, 1.91196
    test 304 Stereographic(80, 80): 80.0, 80.0
    test 305 Equidistant(80, 10): 0.04281, 1.39829
    test 306 Equidistant(80, 10): 80.0, 10.0
    test 307 Gnomonic(80, 10): 0.17633, 5.75877
    test 308 Gnomonic(80, 10): 80.0, 10.0
    test 309 LambertEqualArea(80, 10): 0.03941, 1.28702
    test 310 LambertEqualArea(80, 10): 80.0, 10.0
    test 311 Orthographic(80, 10): 0.03015, 0.98481
    test 312 Orthographic(80, 10): 80.0, 10.0
    test 313 Stereographic(80, 10): 0.0515, 1.68198
    test 314 Stereographic(80, 10): 80.0, 10.0

    test 315 function: equidistant
    test 316 equatoradius: 1.0
    test 317 flattening: 0.0
    test 318 iteration: None
    test 319 latlon0: (0.0, 0.0)
    test 320 latlon0: (1.0, 2.0)
    test 321 name: coverage
    test 322 radius: 1.0

    test 323 function: gnomonic
    test 324 equatoradius: 1.0
    test 325 flattening: 0.0
    test 326 iteration: None
    test 327 latlon0: (0.0, 0.0)
    test 328 latlon0: (1.0, 2.0)
    test 329 name: coverage
    test 330 radius: 1.0
    test 331 NANing: (NAN, NAN, 0.0, 0.0, 0.0, 1.0, None)

    9 of 331 testAzimuthal.py tests (2.7%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 10.201 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testBasics.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testBasics.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.INF from .constants by testBasics.py line 11
# lazily imported pygeodesy.INT0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NAN from .constants by testBasics.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.NINF from .constants by testBasics.py line 11
# lazily imported pygeodesy.halfs2 from .basics by testBasics.py line 11
# lazily imported pygeodesy.isclose from .constants by testBasics.py line 11
# lazily imported pygeodesy.isfinite from .constants by testBasics.py line 11
# lazily imported pygeodesy.isint0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isneg0 from .constants by testBasics.py line 11
# lazily imported pygeodesy.isninf from .constants by testBasics.py line 11
# lazily imported pygeodesy.isscalar from .basics by testBasics.py line 11
# lazily imported pygeodesy.map1 from .basics by testBasics.py line 11
# lazily imported pygeodesy.remainder from .constants by testBasics.py line 11
# lazily imported pygeodesy.splice from .basics by testBasics.py line 11

    testing testBasics.py 23.03.27 (module pygeodesy.basics 23.03.29) isLazy=3
    test 1 clips: test/t....ics.py
    test 2 halfs2: ('test/test', 'Basics.py')

    test 3 isfinite(0): True
    test 4 isint(0): True
    test 5 isint(0+0.5): False
    test 6 isninf(0): False
    test 7 isscalar(0): True

    test 8 isfinite(0.0): True
    test 9 isint(0.0): True
    test 10 isint(0.0+0.5): False
    test 11 isninf(0.0): False
    test 12 isscalar(0.0): True

    test 13 isfinite(1): True
    test 14 isint(1): True
    test 15 isint(1+0.5): False
    test 16 isninf(1): False
    test 17 isscalar(1): True

    test 18 isfinite(1.0): True
    test 19 isint(1.0): True
    test 20 isint(1.0+0.5): False
    test 21 isninf(1.0): False
    test 22 isscalar(1.0): True

    test 23 isfinite(1e+300): True
    test 24 isint(1e+300): True
    test 25 isint(1e+300+0.5): True
    test 26 isninf(1e+300): False
    test 27 isscalar(1e+300): True

    test 28 isfinite(-1e+300): True
    test 29 isint(-1e+300): True
    test 30 isint(-1e+300+0.5): True
    test 31 isninf(-1e+300): False
    test 32 isscalar(-1e+300): True

    test 33 isfinite(inf): False
    test 34 isint(inf): False
    test 35 isint(inf+0.5): False
    test 36 isninf(inf): False
    test 37 isscalar(inf): True

    test 38 isfinite(inf): False
    test 39 isint(inf): False
    test 40 isint(inf+0.5): False
    test 41 isninf(inf): False
    test 42 isscalar(inf): True

    test 43 isfinite(nan): False
    test 44 isint(nan): False
    test 45 isint(nan+0.5): False
    test 46 isninf(nan): False
    test 47 isscalar(nan): True

    test 48 isfinite(-0.0): True
    test 49 isint(-0.0): True
    test 50 isint(-0.0+0.5): False
    test 51 isninf(-0.0): False
    test 52 isscalar(-0.0): True

    test 53 isfinite(-inf): False
    test 54 isint(-inf): False
    test 55 isint(-inf+0.5): False
    test 56 isninf(-inf): True
    test 57 isscalar(-inf): True

    test 58 isfinite(complex): True
    test 59 isfinite(complex): False

    test 60 isint0(INT0): True
    test 61 isint0(False): False
    test 62 isint0(None): False
    test 63 isint0(0): True
    test 64 isint0(0.): False
    test 65 isint0(0.0): True

    test 66 isneg0(NEG0): True
    test 67 isneg0(0.0): False
    test 68 isneg0(INF): False
    test 69 isneg0(NAN): False

    test 70 type(C.r_o): property_RO
    test 71 type(c.r_o): <class 'bool'>
    test 72 c.r_o: True
    test 73 c.r_o = False: immutable property_RO: C.r_o = False
    test 74 c.a, c.b: (None, None)
    test 75 d.a, d.b: (True, False)
    test 76 c.a, c.b: (None, None)
    test 77 splice: ((0, 2, 4, 6, 8), (1, 3, 5, 7, 9))
    test 78 splice: ((0, 3, 6, 9), (1, 4, 7), (2, 5, 8))
    test 79 splice: ((0, 3, 6, 9), (1, 4, 7, -1), (2, 5, 8, -1))
    test 80 splice: ((0, 5, 10), (1, 6, 11), (2, 7), (3, 8), (4, 9))

    test 81 remainder(181, 360): -179.0
    test 82 remainder(181, -360): -179.0
    test 83 remainder(181, inf): 181.0
    test 84 remainder(181, nan): nan
    test 85 remainder(181, -inf): 181.0
    test 86 remainder(-181, 360): 179.0
    test 87 remainder(-181, -360): 179.0
    test 88 remainder(-181, inf): -181.0
    test 89 remainder(-181, nan): nan
    test 90 remainder(-181, -inf): -181.0
    test 91 remainder(179, 360): 179.0
    test 92 remainder(179, -360): 179.0
    test 93 remainder(179, inf): 179.0
    test 94 remainder(179, nan): nan
    test 95 remainder(179, -inf): 179.0
    test 96 remainder(-179, 360): -179.0
    test 97 remainder(-179, -360): -179.0
    test 98 remainder(-179, inf): -179.0
    test 99 remainder(-179, nan): nan
    test 100 remainder(-179, -inf): -179.0
    test 101 remainder(inf, 360): math domain error
    test 102 remainder(inf, -360): math domain error
    test 103 remainder(inf, inf): math domain error
    test 104 remainder(inf, nan): nan
    test 105 remainder(inf, -inf): math domain error
    test 106 remainder(nan, 360): nan
    test 107 remainder(nan, -360): nan
    test 108 remainder(nan, inf): nan
    test 109 remainder(nan, nan): nan
    test 110 remainder(nan, -inf): nan
    test 111 remainder(-inf, 360): math domain error
    test 112 remainder(-inf, -360): math domain error
    test 113 remainder(-inf, inf): math domain error
    test 114 remainder(-inf, nan): nan
    test 115 remainder(-inf, -inf): math domain error
    test 116 isclose: True
    test 117 isclose: False

    all 117 testBasics.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 824.213 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testBooleans.py
./test/testBooleans.py:50: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./test/testBooleans.py:53: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
./test/testBooleans.py:82: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  self.test(areaOf.__name__, areaOf(b) == areaOf(t), True)
./test/testBooleans.py:85: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  self.test(periOf.__name__, periOf(b, closed=True) == periOf(t, closed=True), True)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.BooleanFHP from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.BooleanGH from .booleans by testBooleans.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testBooleans.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testBooleans.py line 95
# lazily imported pygeodesy.ellipsoidalVincenty by testBooleans.py line 95
# lazily imported pygeodesy.sphericalNvector by testBooleans.py line 95
# lazily imported pygeodesy.sphericalTrigonometry by testBooleans.py line 95

    testing testBooleans.py 23.03.31 isLazy=3

    testing(pygeodesy.ellipsoidalExact, 23.04.11)
    test 1 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 2 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 3 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 4 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 5 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 6 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 7 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 8 GH ==: True
    test 9 equalTo: True
    test 10 areaOf: True
    test 11 enclosed: True
    test 12 enclosed: False
    test 13 perimeterOf: True

    test 14 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 15 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 16 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 17 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 18 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 19 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 20 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 21 FHP ==: True
    test 22 equalTo: True
    test 23 areaOf: True
    test 24 enclosed: True
    test 25 enclosed: False
    test 26 perimeterOf: True

    test 27 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 28 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 29 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 30 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 31 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 32 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 33 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 34 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 35 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 36 GH ==: True
    test 37 equalTo: True
    test 38 areaOf: True
    test 39 enclosed: True
    test 40 enclosed: False
    test 41 perimeterOf: True

    test 42 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 43 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 44 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 45 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 46 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 47 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 48 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 49 FHP ==: True
    test 50 equalTo: True
    test 51 areaOf: True
    test 52 enclosed: True
    test 53 enclosed: False
    test 54 perimeterOf: True

    test 55 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 56 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalNvector, 23.04.11)
    test 57 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 58 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 59 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 60 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 61 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 62 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 63 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 64 GH ==: True
    test 65 equalTo: True
    test 66 areaOf: True
    test 67 enclosed: True
    test 68 enclosed: False
    test 69 perimeterOf: True

    test 70 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 71 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 72 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 73 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 74 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 75 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 76 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 77 FHP ==: True
    test 78 equalTo: True
    test 79 areaOf: True
    test 80 enclosed: True
    test 81 enclosed: False
    test 82 perimeterOf: True

    test 83 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 84 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    testing(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 85 and: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 86 or: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 87 minus: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 88 rev_d: BooleanGH[5]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=10.0, lon=0.0, height=1.0), (lat=10.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=7.0, lon=5.0, height=2.0))
    test 89 iand: BooleanGH[4]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0))
    test 90 ior: BooleanGH[6]((lat=5.0, lon=3.5714286, height=1.7142857), (lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0))
    test 91 sum: BooleanGH[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 92 GH ==: True
    test 93 equalTo: True
    test 94 areaOf: True
    test 95 enclosed: True
    test 96 enclosed: False
    test 97 perimeterOf: True

    test 98 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 99 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 100 and: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 101 or: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 102 iand: BooleanFHP[4]((lat=7.0, lon=5.0, height=2.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=3.0, lon=5.0, height=2.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 103 ior: BooleanFHP[6]((lat=0.0, lon=0.0, height=1.0), (lat=0.0, lon=10.0, height=3.0), (lat=5.0, lon=6.4285714, height=2.2857143), (lat=10.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0), (lat=5.0, lon=3.5714286, height=1.7142857))
    test 104 sum: BooleanFHP[2][6]((lat=0.0, lon=0.0, height=1.0), (lat=7.0, lon=5.0, height=2.0), (lat=0.0, lon=10.0, height=3.0), (lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    test 105 FHP ==: True
    test 106 equalTo: True
    test 107 areaOf: True
    test 108 enclosed: True
    test 109 enclosed: False
    test 110 perimeterOf: True

    test 111 toLatLon[0:3]: (LatLon(00°00′00.0″N, 000°00′00.0″E, +1.00m), LatLon(07°00′00.0″N, 005°00′00.0″E, +2.00m), LatLon(00°00′00.0″N, 010°00′00.0″E, +3.00m))
    test 112 toLatLon[-3:]: ((lat=10.0, lon=0.0, height=1.0, clipid=1), (lat=3.0, lon=5.0, height=2.0, clipid=1), (lat=10.0, lon=10.0, height=3.0, clipid=1))

    8 of 112 testBooleans.py tests (7.1%) FAILED, incl. 8 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 605.019 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testCartesian.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.R_M from .constants by testCartesian.py line 11
# lazily imported pygeodesy.classname from .named by testCartesian.py line 11
# lazily imported pygeodesy.Datums from .datums by testCartesian.py line 11
# lazily imported pygeodesy.degrees from .utily by testCartesian.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCartesian.py line 11
# lazily imported pygeodesy.Height from .units by testCartesian.py line 11
# lazily imported pygeodesy.modulename from .named by testCartesian.py line 11
# lazily imported pygeodesy.RefFrames from .trf by testCartesian.py line 11
# lazily imported pygeodesy.Transforms from .datums by testCartesian.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCartesian.py line 172
# lazily imported pygeodesy.ellipsoidalNvector by testCartesian.py line 172
# lazily imported pygeodesy.ellipsoidalVincenty by testCartesian.py line 172
# lazily imported pygeodesy.sphericalNvector by testCartesian.py line 172
# lazily imported pygeodesy.sphericalTrigonometry by testCartesian.py line 172

    testing testCartesian.py 23.03.27 isLazy=3

    testCartesian(pygeodesy.sphericalNvector, 23.04.11)
    test 1 Cartesian0: [3980581, 97, 4966825]
    test 2 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 3 isEllipsoidal: False
    test 4 isSpherical: True
    test 5 copy(Cartesian): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 6 Cartesian.copy(): (<class 'pygeodesy.sphericalNvector.Cartesian'>, True)
    test 7 height: -5918.380258
    test 8 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 9 height4: [3984282.2, 97.1, 4971443.2]
    test 10 Nvector: Nvector(0.62538, 0.00002, 0.78032, -5918.38)
    test 11 Nvector3: (0.625, 0.0, 0.78, -5918.38)
    test 12 Nvector6: (0.625377, 0.000015, 0.780323, -5918.38)
    test 13 LatLon: 50.0379°N, 008.5622°E
    test 14 LatLon: 51.47°N, 000.4543°E
    test 15 LatLon: 40.633365°N, 073.783328°W
    test 16 LatLon: 33.95°N, 118.4°W
    test 17 LatLon: 41.32°S, 174.81°E
    test 18 LatLon: 40.96°N, 005.5°E
    test 19 LatLon: 40.1°N, 116.6°E
    test 20 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 21 copy: True
    test 22 __eq__: True
    test 23 __ne__: False
    test 24 Cartesian: <class 'pygeodesy.sphericalNvector.Cartesian'>
    test 25 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 26 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 27 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 28 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 29 isequalTo: <class 'bool'>
    test 30 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 31 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 32 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 33 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 34 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 35 toLatLon: <class 'pygeodesy.sphericalNvector.LatLon'>
    test 36 toNvector: <class 'pygeodesy.sphericalNvector.Nvector'>
    test 37 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 38 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 39 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 40 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 41 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 42 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 43 isequalTo: <class 'bool'>
    test 44 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 45 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 46 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 47 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 48 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 49 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 50 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 51 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 52 sphericalNvector.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 53 sphericalNvector.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 54 sphericalNvector.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 55 sphericalNvector.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 56 sphericalNvector.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 57 sphericalNvector.Cartesian.intersections2: 36.987868°N, 088.151309°W
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testCartesian.py line 138
    test 58 vector3d.trilaterate3d2: [-0.032761, -0.784757, 0.618937]
    test 59 vector3d.trilaterate3d2: [0.025768, -0.798331, 0.601668]
    test 60 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 61 vector3d.intersections2: 0.0312613
    test 62 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 63 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 64 Cartesian0: [3980581, 97, 4966825]
    test 65 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 66 isEllipsoidal: False
    test 67 isSpherical: True
    test 68 copy(Cartesian): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 69 Cartesian.copy(): (<class 'pygeodesy.sphericalTrigonometry.Cartesian'>, True)
    test 70 height: -5918.380258
    test 71 height4: (3984282.2, 97.1, 4971443.2, -5918.4)
    test 72 height4: [3984282.2, 97.1, 4971443.2]
    test 73 Vector4Tuple: 0.625376979018, 1.52393750974e-05, 0.780322775447, -5918.38025833
    test 74 LatLon: 50.0379°N, 008.5622°E
    test 75 LatLon: 51.47°N, 000.4543°E
    test 76 LatLon: 40.633365°N, 073.783328°W
    test 77 LatLon: 33.95°N, 118.4°W
    test 78 LatLon: 41.32°S, 174.81°E
    test 79 LatLon: 40.96°N, 005.5°E
    test 80 LatLon: 40.1°N, 116.6°E
    test 81 LatLon: 37.6°N, 122.4°W, -0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 82 copy: True
    test 83 __eq__: True
    test 84 __ne__: False
    test 85 Cartesian: <class 'pygeodesy.sphericalTrigonometry.Cartesian'>
    test 86 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 87 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 88 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 89 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 90 isequalTo: <class 'bool'>
    test 91 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 92 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 93 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 94 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 95 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 96 toLatLon: <class 'pygeodesy.sphericalTrigonometry.LatLon'>
    test 97 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 98 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 99 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 100 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 101 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 102 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 103 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 104 isequalTo: <class 'bool'>
    test 105 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 106 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 107 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 108 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 109 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 110 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 111 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 112 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 113 sphericalTrigonometry.Cartesian.intersections2: 37.673442°N, 090.234036°W
    test 114 sphericalTrigonometry.Cartesian.intersections2: 36.109987°N, 090.95367°W
    test 115 sphericalTrigonometry.Cartesian.intersections2: [-0.032779, -0.784769, 0.61892]
    test 116 sphericalTrigonometry.Cartesian.intersections2: 38.237342°N, 092.391779°W
    test 117 sphericalTrigonometry.Cartesian.intersections2: [0.025768, -0.798347, 0.601646]
    test 118 sphericalTrigonometry.Cartesian.intersections2: 36.987868°N, 088.151309°W
    test 119 vector3d.trilaterate3d2: [-0.032761, -0.784757, 0.618937]
    test 120 vector3d.trilaterate3d2: [0.025768, -0.798331, 0.601668]
    test 121 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 122 vector3d.intersections2: 0.0312613
    test 123 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 124 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 125 Cartesian0: [3980581, 97, 4966825]
    test 126 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 127 isEllipsoidal: True
    test 128 isSpherical: False
    test 129 copy(Cartesian): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 130 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalNvector.Cartesian'>, True)
    test 131 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 132 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 133 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 134 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 135 height: 0.242887
    test 136 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 137 height4: [3980580.8, 97.0, 4966824.8]
    test 138 Nvector: Nvector(0.62282, 0.00002, 0.78237, +0.24)
    test 139 Nvector3: (0.623, 0.0, 0.782, +0.24)
    test 140 Nvector6: (0.622818, 0.000015, 0.782367, +0.24)
    test 141 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 142 LatLon: 51.47°N, 000.4543°E
    test 143 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 144 LatLon: 33.95°N, 118.4°W
    test 145 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 146 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 147 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 148 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 149 copy: True
    test 150 __eq__: True
    test 151 __ne__: False
    test 152 Cartesian: <class 'pygeodesy.ellipsoidalNvector.Cartesian'>
    test 153 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 154 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 155 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 156 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 157 isequalTo: <class 'bool'>
    test 158 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 159 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 160 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 161 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 162 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 163 toLatLon: <class 'pygeodesy.ellipsoidalNvector.LatLon'>
    test 164 toNvector: <class 'pygeodesy.ellipsoidalNvector.Nvector'>
    test 165 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 166 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 167 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 168 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 169 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 170 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 171 isequalTo: <class 'bool'>
    test 172 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 173 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 174 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 175 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 176 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 177 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 178 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 179 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 180 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 181 ellipsoidalNvector.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 182 ellipsoidalNvector.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 183 ellipsoidalNvector.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 184 ellipsoidalNvector.Cartesian.intersections2: 0.0312613
    test 185 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 186 vector3d.intersections2: 0.0312613
    test 187 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 188 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 189 Cartesian0: [3980581, 97, 4966825]
    test 190 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 191 isEllipsoidal: True
    test 192 isSpherical: False
    test 193 copy(Cartesian): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 194 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalVincenty.Cartesian'>, True)
    test 195 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 196 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 197 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 198 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 199 height: 0.242887
    test 200 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 201 height4: [3980580.8, 97.0, 4966824.8]
    test 202 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 203 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 204 LatLon: 51.47°N, 000.4543°E
    test 205 LatLon: 40.633365°N, 073.783328°W, +0.00m  FAILED, KNOWN, expected 40.633365°N, 073.783328°W
    test 206 LatLon: 33.95°N, 118.4°W
    test 207 LatLon: 41.32°S, 174.81°E, +0.00m  FAILED, KNOWN, expected 41.32°S, 174.81°E
    test 208 LatLon: 40.96°N, 005.5°E, -0.00m  FAILED, KNOWN, expected 40.96°N, 005.5°E
    test 209 LatLon: 40.1°N, 116.6°E, -0.00m  FAILED, KNOWN, expected 40.1°N, 116.6°E
    test 210 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 211 copy: True
    test 212 __eq__: True
    test 213 __ne__: False
    test 214 Cartesian: <class 'pygeodesy.ellipsoidalVincenty.Cartesian'>
    test 215 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 216 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 217 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 218 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 219 isequalTo: <class 'bool'>
    test 220 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 221 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 222 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 223 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 224 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 225 toLatLon: <class 'pygeodesy.ellipsoidalVincenty.LatLon'>
    test 226 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 227 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 228 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 229 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 230 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 231 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 232 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 233 isequalTo: <class 'bool'>
    test 234 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 235 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 236 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 237 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 238 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 239 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 240 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 241 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 242 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 243 ellipsoidalVincenty.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 244 ellipsoidalVincenty.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 245 ellipsoidalVincenty.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 246 ellipsoidalVincenty.Cartesian.intersections2: 0.0312613
    test 247 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 248 vector3d.intersections2: 0.0312613
    test 249 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 250 vector3d.intersections2: (0.027459, -0.797488, 0.0)
# lazily imported pygeodesy.ellipsoidalKarney by testCartesian.py line 184

    testCartesian(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 251 Cartesian0: [3980581, 97, 4966825]
    test 252 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 253 isEllipsoidal: True
    test 254 isSpherical: False
    test 255 copy(Cartesian): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 256 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalKarney.Cartesian'>, True)
    test 257 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 258 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 259 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 260 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 261 height: 0.242887
    test 262 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 263 height4: [3980580.8, 97.0, 4966824.8]
    test 264 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 265 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 266 LatLon: 51.47°N, 000.4543°E
    test 267 LatLon: 40.633365°N, 073.783328°W
    test 268 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 269 LatLon: 41.32°S, 174.81°E
    test 270 LatLon: 40.96°N, 005.5°E
    test 271 LatLon: 40.1°N, 116.6°E
    test 272 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 273 copy: True
    test 274 __eq__: True
    test 275 __ne__: False
    test 276 Cartesian: <class 'pygeodesy.ellipsoidalKarney.Cartesian'>
    test 277 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 278 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 279 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 280 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 281 isequalTo: <class 'bool'>
    test 282 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 283 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 284 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 285 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 286 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 287 toLatLon: <class 'pygeodesy.ellipsoidalKarney.LatLon'>
    test 288 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 289 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 290 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 291 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 292 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 293 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 294 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 295 isequalTo: <class 'bool'>
    test 296 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 297 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 298 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 299 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 300 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 301 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 302 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 303 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 304 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 305 ellipsoidalKarney.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 306 ellipsoidalKarney.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 307 ellipsoidalKarney.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 308 ellipsoidalKarney.Cartesian.intersections2: 0.0312613
    test 309 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 310 vector3d.intersections2: 0.0312613
    test 311 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 312 vector3d.intersections2: (0.027459, -0.797488, 0.0)
# lazily imported pygeodesy.ellipsoidalGeodSolve by testCartesian.py line 188

    testCartesian(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 313 Cartesian0: [3980581, 97, 4966825]
    test 314 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 315 isEllipsoidal: True
    test 316 isSpherical: False
    test 317 copy(Cartesian): (<class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>, True)
    test 318 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>, True)
    test 319 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 320 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 321 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 322 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 323 height: 0.242887
    test 324 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 325 height4: [3980580.8, 97.0, 4966824.8]
    test 326 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 327 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 328 LatLon: 51.47°N, 000.4543°E
    test 329 LatLon: 40.633365°N, 073.783328°W
    test 330 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 331 LatLon: 41.32°S, 174.81°E
    test 332 LatLon: 40.96°N, 005.5°E
    test 333 LatLon: 40.1°N, 116.6°E
    test 334 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 335 copy: True
    test 336 __eq__: True
    test 337 __ne__: False
    test 338 Cartesian: <class 'pygeodesy.ellipsoidalGeodSolve.Cartesian'>
    test 339 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 340 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 341 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 342 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 343 isequalTo: <class 'bool'>
    test 344 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 345 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 346 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 347 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 348 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 349 toLatLon: <class 'pygeodesy.ellipsoidalGeodSolve.LatLon'>
    test 350 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 351 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 352 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 353 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 354 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 355 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 356 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 357 isequalTo: <class 'bool'>
    test 358 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 359 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 360 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 361 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 362 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 363 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 364 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 365 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 366 ellipsoidalGeodSolve.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 367 ellipsoidalGeodSolve.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 368 ellipsoidalGeodSolve.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 369 ellipsoidalGeodSolve.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 370 ellipsoidalGeodSolve.Cartesian.intersections2: 0.0312613
    test 371 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 372 vector3d.intersections2: 0.0312613
    test 373 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 374 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    testCartesian(pygeodesy.ellipsoidalExact, 23.04.11)
    test 375 Cartesian0: [3980581, 97, 4966825]
    test 376 Cartesian4: [3980581.0, 97.0, 4966825.0]
    test 377 isEllipsoidal: True
    test 378 isSpherical: False
    test 379 copy(Cartesian): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 380 Cartesian.copy(): (<class 'pygeodesy.ellipsoidalExact.Cartesian'>, True)
    test 381 convertDatum: [3980581.0, 97.0, 4966825.0]
    test 382 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 383 __matmul__: [3980580.124, 107.691, 4966819.407]
    test 384 __matmul__: [3980580.998, 97.0, 4966824.998]
    test 385 height: 0.242887
    test 386 height4: (3980580.8, 97.0, 4966824.8, 0.2)
    test 387 height4: [3980580.8, 97.0, 4966824.8]
    test 388 Vector4Tuple: 0.622817764745, 1.51770113911e-05, 0.782366941842, 0.242886808051
    test 389 LatLon: 50.0379°N, 008.5622°E, +0.00m  FAILED, KNOWN, expected 50.0379°N, 008.5622°E
    test 390 LatLon: 51.47°N, 000.4543°E
    test 391 LatLon: 40.633365°N, 073.783328°W
    test 392 LatLon: 33.95°N, 118.4°W, +0.00m  FAILED, KNOWN, expected 33.95°N, 118.4°W
    test 393 LatLon: 41.32°S, 174.81°E
    test 394 LatLon: 40.96°N, 005.5°E
    test 395 LatLon: 40.1°N, 116.6°E
    test 396 LatLon: 37.6°N, 122.4°W, +0.00m  FAILED, KNOWN, expected 37.6°N, 122.4°W
    test 397 copy: True
    test 398 __eq__: True
    test 399 __ne__: False
    test 400 Cartesian: <class 'pygeodesy.ellipsoidalExact.Cartesian'>
    test 401 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 402 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 403 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 404 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 405 isequalTo: <class 'bool'>
    test 406 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 407 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 408 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 409 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 410 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 411 toLatLon: <class 'pygeodesy.ellipsoidalExact.LatLon'>
    test 412 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 413 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 414 Cartesian: <class 'pygeodesy.cartesianBase.CartesianBase'>
    test 415 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 416 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 417 latlonheightdatum: <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 418 height4: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 419 isequalTo: <class 'bool'>
    test 420 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 421 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 422 philamheightdatum: <class 'pygeodesy.namedTuples.PhiLam4Tuple'>
    test 423 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 424 toEcef: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 425 toLatLon: <class 'pygeodesy.ecef.Ecef9Tuple'>
    test 426 toNvector: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 427 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 428 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.234036°W
    test 429 ellipsoidalExact.Cartesian.intersections2: 89.99892°N, 090.95367°W
    test 430 ellipsoidalExact.Cartesian.intersections2: [-0.0035, -0.791926, 0.610589]
    test 431 ellipsoidalExact.Cartesian.intersections2: 89.998941°N, 090.253237°W
    test 432 ellipsoidalExact.Cartesian.intersections2: 0.0312613
    test 433 vector3d.intersections2: (-0.0035, -0.791926, 0.610589)
    test 434 vector3d.intersections2: 0.0312613
    test 435 vector3d.intersections2: (-0.021973, -0.766467, 0.0)
    test 436 vector3d.intersections2: (0.027459, -0.797488, 0.0)

    23 of 436 testCartesian.py tests (5.3%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 27.653 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testClasses.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.itemsorted from .errors by testClasses.py line 13
# lazily imported pygeodesy.Property from .props by testClasses.py line 13
# lazily imported pygeodesy.Property_RO from .props by testClasses.py line 13
# lazily imported pygeodesy.SciPyWarning from .errors by testClasses.py line 13
# lazily imported pygeodesy.Str_ from .interns by testClasses.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalKarney by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalNvector by testClasses.py line 78
# lazily imported pygeodesy.ellipsoidalVincenty by testClasses.py line 78
# lazily imported pygeodesy.sphericalNvector by testClasses.py line 78
# lazily imported pygeodesy.sphericalTrigonometry by testClasses.py line 78

    testing testClasses.py 23.03.27 isLazy=3
# lazily imported pygeodesy.ellipsoidalGeodSolve by testClasses.py line 90

    testCartesianAttrs(23.03.27)
    test 1 angleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 2 apply() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 3 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 4 bearing() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 5 cassini() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 6 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 7 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 8 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 9 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 10 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 11 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 12 cmp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 13 collins() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 14 collins5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 15 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 16 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 17 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 18 cross() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 19 crosserrors _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 20 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 21 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 22 dividedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 23 dot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 24 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 25 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 26 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 27 equirectangular() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 28 euclid Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 29 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 30 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 31 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 32 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 33 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 34 iscolinearWith() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 35 isconjugateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 36 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 37 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 38 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 39 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 40 latlon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 41 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 42 latlonheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 43 length Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 44 length2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 45 meeus2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 46 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 47 minus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 48 minus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 49 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 50 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 51 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 52 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 53 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 54 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 55 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 56 negate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 57 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 58 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 59 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 60 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 61 philamheightdatum Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 62 pierlot() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 63 plus() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 64 plus_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 65 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 66 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 67 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 68 rotate() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 69 rotateAround() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 70 soddy4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 71 sum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 72 tienstra() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 73 tienstra7() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 74 times() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 75 times_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 76 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 77 to2ll() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 78 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 79 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 80 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 81 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 82 toLatLon() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 83 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 84 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 85 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 86 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 87 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 88 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 89 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 90 toTransform() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 91 toTransforms_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 92 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 93 trilaterate2d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 94 trilaterate3d2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 95 unit() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 96 x Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 97 x2y2z2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 98 xyz Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 99 y Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 100 z Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testCartesianMro(23.03.27)
    test 101 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 102 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.Cartesian, pygeodesy.sphericalBase.CartesianSphericalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 103 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 104 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 105 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 106 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 107 pygeodesy.ellipsoidalGeodSolve: pygeodesy.ellipsoidalGeodSolve.Cartesian, pygeodesy.ellipsoidalBase.CartesianEllipsoidalBase, pygeodesy.cartesianBase.CartesianBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testLatLonAttrs(23.03.27)
    test 108 alongTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 109 antipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 110 attrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 111 bearingTo() method: pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 112 bearingTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 113 bounds() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 114 boundsOf() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 115 chordTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 116 circin6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 117 circum3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 118 circum4_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 119 classname Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 120 classnaming _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 121 classof() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 122 clipid property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 123 compassAngle() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 124 compassAngleTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 125 convergence _Deprecated_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 126 convertDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 127 convertRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 128 copy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 129 cosineAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 130 cosineForsytheAndoyerLambertTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 131 cosineLawTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 132 crossingParallels() method: pygeodesy.sphericalTrigonometry
    test 133 crossTrackDistanceTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 134 datum _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 135 deltaTo() method: pygeodesy.ellipsoidalNvector
    test 136 destination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 137 destination2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 138 destinationNed() method: pygeodesy.ellipsoidalNvector
    test 139 destinationXyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 140 distanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 141 distanceTo2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 142 distanceTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 143 dup() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 144 Ecef Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 145 elevation2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 146 ellipsoid() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 147 ellipsoids() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 148 epoch _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 149 epsilon _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 150 equals() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 151 equals3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 152 Equidistant Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 153 equirectangularTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 154 euclideanTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 155 finalBearingOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 156 finalBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 157 flatLocalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 158 flatPolarTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 159 gamma property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 160 geodesic Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 161 geodesicx Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve
    test 162 geoidHeight2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 163 greatCircle() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 164 greatCircleTo() method: pygeodesy.sphericalNvector
    test 165 hartzell() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 166 haversineTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 167 height Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 168 height4() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 169 heightStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 170 hubenyTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 171 initialBearingTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 172 intermediateChordTo() method: pygeodesy.sphericalNvector
    test 173 intermediateTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 174 intersecant2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 175 intersection() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 176 intersection3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 177 intersections2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 178 isantipode() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 179 isantipodeTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 180 isEllipsoidal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 181 isEllipsoidalLatLon Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 182 isEnclosedBy() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 183 isenclosedBy() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 184 isequalTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 185 isequalTo3() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 186 isnormal Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 187 isSpherical Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 188 isWithin() method: pygeodesy.sphericalNvector
    test 189 iswithin() method: pygeodesy.sphericalNvector
    test 190 iteration property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 191 iterations _NamedProperty: pygeodesy.ellipsoidalVincenty
    test 192 lam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 193 lat Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 194 latlon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 195 latlon2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 196 latlon2round() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 197 latlon_() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 198 latlonheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 199 lon Property: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 200 maxLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 201 methodname() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 202 midpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 203 minLat() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 204 name _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 205 named Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 206 named2 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 207 named3 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 208 named4 Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 209 nearestOn() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 210 nearestOn2() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 211 nearestOn3() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 212 nearestOn6() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 213 nearestOn8() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalVincenty
    test 214 normal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 215 others() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 216 parse() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 217 phi Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 218 philam Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 219 philam2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 220 philamheight Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 221 points() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 222 points2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 223 PointsIter() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 224 radii11() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 225 reframe _NamedProperty: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 226 rename() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 227 rhumbAzimuthTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 228 rhumbBearingTo() method: pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 229 rhumbDestination() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 230 rhumbDistanceTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 231 rhumbLine() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 232 rhumbMidpointTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 233 scale Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 234 thomasTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 235 to2ab() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 236 to3llh() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 237 to3xyz() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 238 toCartesian() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 239 toCss() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 240 toDatum() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 241 toEcef() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 242 toEtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 243 toLcc() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 244 toLocal() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 245 toLtp() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 246 toMgrs() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 247 toNvector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 248 toOsgr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 249 toRefFrame() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 250 toRepr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 251 toStr() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 252 toStr2() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 253 toUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 254 toUtm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 255 toUtmUps() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty
    test 256 toVector() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 257 toVector3d() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 258 toWm() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 259 triangle7() method: pygeodesy.sphericalTrigonometry
    test 260 triangulate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 261 trilaterate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 262 trilaterate5() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 263 vincentysTo() method: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 264 xyz Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry
    test 265 xyzh Property_RO: pygeodesy.ellipsoidalExact, pygeodesy.ellipsoidalGeodSolve, pygeodesy.ellipsoidalKarney, pygeodesy.ellipsoidalNvector, pygeodesy.ellipsoidalVincenty, pygeodesy.sphericalNvector, pygeodesy.sphericalTrigonometry

    testLatLonMro(23.03.27)
    test 266 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 267 pygeodesy.sphericalTrigonometry: pygeodesy.sphericalTrigonometry.LatLon, pygeodesy.sphericalBase.LatLonSphericalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 268 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.LatLon, pygeodesy.nvectorBase.LatLonNvectorBase, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 269 pygeodesy.ellipsoidalVincenty: pygeodesy.ellipsoidalVincenty.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 270 pygeodesy.ellipsoidalKarney: pygeodesy.ellipsoidalKarney.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 271 pygeodesy.ellipsoidalExact: pygeodesy.ellipsoidalExact.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 272 pygeodesy.ellipsoidalGeodSolve: pygeodesy.ellipsoidalGeodSolve.LatLon, pygeodesy.ellipsoidalBaseDI.LatLonEllipsoidalBaseDI, pygeodesy.ellipsoidalBase.LatLonEllipsoidalBase, pygeodesy.latlonBase.LatLonBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testNvectorAttrs(23.03.27)
    test 273 angleTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 274 apply() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 275 attrs() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 276 bearing() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 277 circin6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 278 circum3() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 279 circum4_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 280 classname Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 281 classnaming _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 282 classof() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 283 cmp() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 284 copy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 285 cross() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 286 crosserrors _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 287 datum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 288 dividedBy() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 289 dot() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 290 dup() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 291 Ecef Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 292 equals() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 293 equirectangular() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 294 euclid Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 295 greatCircle() method: pygeodesy.sphericalNvector
    test 296 H _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 297 h _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 298 hStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 299 intermediateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 300 iscolinearWith() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 301 isconjugateTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 302 isEllipsoidal Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 303 isequalTo() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 304 isSpherical Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 305 iteration property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 306 lam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 307 lat Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 308 latlon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 309 latlonheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 310 latlonheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 311 length Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 312 length2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 313 lon Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 314 meeus2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 315 methodname() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 316 minus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 317 minus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 318 name _NamedProperty: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 319 named Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 320 named2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 321 named3 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 322 named4 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 323 nearestOn() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 324 nearestOn6() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 325 negate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 326 others() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 327 parse() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 328 phi Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 329 philam Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 330 philamheight Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 331 philamheightdatum Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 332 plus() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 333 plus_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 334 radii11() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 335 rename() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 336 rotate() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 337 rotateAround() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 338 soddy4() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 339 sum() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 340 times() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 341 times_() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 342 to2ab() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 343 to2ll() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 344 to3abh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 345 to3llh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 346 to3xyz() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 347 to4xyzh() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 348 toCartesian() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 349 toLatLon() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 350 toRepr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 351 toStr() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 352 toStr2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 353 toVector3d() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 354 trilaterate2d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 355 trilaterate3d2() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 356 unit() method: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 357 x Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 358 x2y2z2 Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 359 xyz Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 360 xyzh Property_RO: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 361 y Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector
    test 362 z Property: pygeodesy.ellipsoidalNvector, pygeodesy.sphericalNvector

    testNvectorMro(23.03.27)
    test 363 pygeodesy.sphericalNvector: pygeodesy.sphericalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 364 pygeodesy.ellipsoidalNvector: pygeodesy.ellipsoidalNvector.Nvector, pygeodesy.nvectorBase.NvectorBase, pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testVector3dAttrs(23.03.27)
    test 365 angleTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 366 apply() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 367 attrs() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 368 bearing() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 369 circin6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 370 circum3() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 371 circum4_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 372 classname Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 373 classnaming _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 374 classof() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 375 cmp() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 376 copy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 377 cross() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 378 crosserrors _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 379 dividedBy() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 380 dot() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 381 dup() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 382 equals() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 383 equirectangular() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 384 euclid Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 385 intermediateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 386 iscolinearWith() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 387 isconjugateTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 388 isequalTo() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 389 iteration property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 390 length Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 391 length2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 392 meeus2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 393 methodname() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 394 minus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 395 minus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 396 name _NamedProperty: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 397 named Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 398 named2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 399 named3 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 400 named4 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 401 nearestOn() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 402 nearestOn6() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 403 negate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 404 others() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 405 parse() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 406 plus() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 407 plus_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 408 radii11() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 409 rename() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 410 rotate() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 411 rotateAround() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 412 soddy4() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 413 sum() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 414 times() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 415 times_() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 416 to3xyz() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 417 toRepr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 418 toStr() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 419 toStr2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 420 trilaterate2d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 421 trilaterate3d2() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 422 unit() method: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 423 x Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 424 x2y2z2 Property_RO: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 425 xyz Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 426 y Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d
    test 427 z Property: pygeodesy.nvectorBase, pygeodesy.sphericalTrigonometry, pygeodesy.vector3d

    testVector3dMro(23.03.27)
    test 428 pygeodesy.nvectorBase: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 429 pygeodesy.vector3d: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named
    test 430 pygeodesy.sphericalTrigonometry: pygeodesy.vector3d.Vector3d, pygeodesy.vector3dBase.Vector3dBase, pygeodesy.named._NamedBase, pygeodesy.named._Named

    testCopyAttr(23.03.27)

    all 430 testClasses.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 6.478 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testClipy.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testClipy.py line 11
# lazily imported pygeodesy.F__F_ from .dms by testClipy.py line 11
# lazily imported pygeodesy.boundsOf from .points by testClipy.py line 11
# lazily imported pygeodesy.clipCS4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipError from .errors by testClipy.py line 11
# lazily imported pygeodesy.clipFHP4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ClipFHP4Tuple from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipGH4 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipLB6 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH from .clipy by testClipy.py line 11
# lazily imported pygeodesy.clipSH3 from .clipy by testClipy.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testClipy.py line 288
# lazily imported pygeodesy.ellipsoidalVincenty by testClipy.py line 288
# lazily imported pygeodesy.sphericalNvector by testClipy.py line 288
# lazily imported pygeodesy.sphericalTrigonometry by testClipy.py line 288

    testing testClipy.py 23.03.27 isLazy=3

    testing(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 1 clipCS4.p1: 07.5°N, 010.0°E
    test 2 clipCS4.p2: 04.5°N, 000.0°E
    test 3 clipCS4.i: 3
    test 4 clipCS4.j: 0
    test 5 clipCS4.p1: 05.0°N, 005.0°E
    test 6 clipCS4.p2: 05.0°N, 005.0°E
    test 7 clipCS4.i: 1
    test 8 clipCS4.j: 2
    test 9 clipLB6.p1: 07.5°N, 010.0°E
    test 10 clipLB6.p2: 04.5°N, 000.0°E
    test 11 clipLB6.i: 3
    test 12 clipLB6.fi: 3.25
    test 13 clipLB6.fi: 07.5°N, 010.0°E
    test 14 clipLB6.fj: 3.75
    test 15 clipLB6.fj: 04.5°N, 000.0°E
    test 16 clipLB6.j: 0
    test 17 clipLB6.fin: 4
    test 18 clipLB6.p1: 05.0°N, 005.0°E
    test 19 clipLB6.p2: 05.0°N, 005.0°E
    test 20 clipLB6.i: 1
    test 21 clipLB6.fi: 1.00
    test 22 clipLB6.fi: 05.0°N, 005.0°E
    test 23 clipLB6.fj: 2.00
    test 24 clipLB6.fj: 05.0°N, 005.0°E
    test 25 clipLB6.j: 2
    test 26 clipLB6.fin: 4
    test 27 clipCS4.p1: 60.0°N, 123.333333°E
    test 28 clipCS4.p2: 62.857143°N, 130.0°E
    test 29 clipCS4.i: 0
    test 30 clipCS4.j: 1
    test 31 clipLB6.p1: 60.0°N, 123.333333°E
    test 32 clipLB6.p2: 62.857143°N, 130.0°E
    test 33 clipLB6.i: 0
    test 34 clipLB6.fi: 0.666667
    test 35 clipLB6.fi: 60.0°N, 123.333333°E
    test 36 clipLB6.fj: 0.714286
    test 37 clipLB6.fj: 62.857143°N, 130.0°E
    test 38 clipLB6.j: 1
    test 39 clipLB6.fin: 0
    test 40 clipCS4.p1: 17.5°N, 020.0°E
    test 41 clipCS4.p2: 16.25°N, 015.0°E
    test 42 clipCS4.i: 2
    test 43 clipCS4.j: 0
    test 44 clipLB6.p1: 17.5°N, 020.0°E
    test 45 clipLB6.p2: 16.25°N, 015.0°E
    test 46 clipLB6.i: 2
    test 47 clipLB6.fi: 2.500
    test 48 clipLB6.fi: 17.5°N, 020.0°E
    test 49 clipLB6.fj: 2.750
    test 50 clipLB6.fj: 16.25°N, 015.0°E
    test 51 clipLB6.j: 0
    test 52 clipLB6.fin: 3
    test 53 clipSH1.len: 4
    test 54 clipSH1.0: 20.0°N, 020.0°E
    test 55 clipSH1.LL: True
    test 56 clipSH1.1: 17.5°N, 020.0°E
    test 57 clipSH1.LL: True
    test 58 clipSH1.2: 16.25°N, 015.0°E
    test 59 clipSH1.LL: True
    test 60 clipSH1.3: 20.0°N, 015.0°E
    test 61 clipSH1.LL: True
    test 62 clipSH2.len: 5
    test 63 clipSH2.0: 18.571°N, 024.286°E
    test 64 clipSH2.LL: True
    test 65 clipSH2.1: 16.667°N, 016.667°E
    test 66 clipSH2.LL: True
    test 67 clipSH2.2: 20.0°N, 015.0°E
    test 68 clipSH2.LL: True
    test 69 clipSH2.3: 25.0°N, 020.0°E
    test 70 clipSH2.LL: True
    test 71 clipSH2.4: 22.0°N, 026.0°E
    test 72 clipSH2.LL: True
    test 73 clipSH3.len: 2
    test 74 clipSH3.0: 18.571°N, 024.286°E
    test 75 clipSH3.LL: True
    test 76 clipSH3.1: 16.667°N, 016.667°E
    test 77 clipSH3.LL: True
    test 78 clipSH3.edge.: True
    test 79 clipSH3.len: 2
    test 80 clipSH3.0: 16.667°N, 016.667°E
    test 81 clipSH3.LL: True
    test 82 clipSH3.1: 20.0°N, 015.0°E
    test 83 clipSH3.LL: True
    test 84 clipSH3.edge.: False
    test 85 clipSH3.len: 2
    test 86 clipSH3.0: 20.0°N, 015.0°E
    test 87 clipSH3.LL: True
    test 88 clipSH3.1: 25.0°N, 020.0°E
    test 89 clipSH3.LL: True
    test 90 clipSH3.edge.: True
    test 91 clipSH3.len: 2
    test 92 clipSH3.0: 25.0°N, 020.0°E
    test 93 clipSH3.LL: True
    test 94 clipSH3.1: 22.0°N, 026.0°E
    test 95 clipSH3.LL: True
    test 96 clipSH3.edge.: True
    test 97 clipSH3.len: 2
    test 98 clipSH3.0: 22.0°N, 026.0°E
    test 99 clipSH3.LL: True
    test 100 clipSH3.1: 18.571°N, 024.286°E
    test 101 clipSH3.LL: True
    test 102 clipSH3.edge.: False
    test 103 clipSH2.reversed.len: 5
    test 104 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 105 clipSH2.reversed.LL: True
    test 106 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 107 clipSH2.reversed.LL: True
    test 108 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 109 clipSH2.reversed.LL: True
    test 110 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 111 clipSH2.reversed.LL: True
    test 112 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 113 clipSH2.reversed.LL: True
    test 114 clipSH3.reversed.len: 2
    test 115 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 116 clipSH3.reversed.LL: True
    test 117 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 118 clipSH3.reversed.LL: True
    test 119 clipSH3.edge.reversed.: True
    test 120 clipSH3.reversed.len: 2
    test 121 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 122 clipSH3.reversed.LL: True
    test 123 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 124 clipSH3.reversed.LL: True
    test 125 clipSH3.edge.reversed.: False
    test 126 clipSH3.reversed.len: 2
    test 127 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 128 clipSH3.reversed.LL: True
    test 129 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 130 clipSH3.reversed.LL: True
    test 131 clipSH3.edge.reversed.: True
    test 132 clipSH3.reversed.len: 2
    test 133 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 134 clipSH3.reversed.LL: True
    test 135 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 136 clipSH3.reversed.LL: True
    test 137 clipSH3.edge.reversed.: True
    test 138 clipSH3.reversed.len: 2
    test 139 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 140 clipSH3.reversed.LL: True
    test 141 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 142 clipSH3.reversed.LL: True
    test 143 clipSH3.edge.reversed.: False
    test 144 clipSH.allout: ()
    test 145 clipSH3.allout: ()
    test 146 clipSH.allout.reversed: ()
    test 147 clipSH3.allout.reversed: ()
    test 148 clipSH.allin.len: 4
    test 149 clipSH.allin.0: 20.0°N, 030.0°E
    test 150 clipSH.allin.LL: True
    test 151 clipSH.allin.1: 15.0°N, 010.0°E
    test 152 clipSH.allin.LL: True
    test 153 clipSH.allin.2: 25.0°N, 020.0°E
    test 154 clipSH.allin.LL: True
    test 155 clipSH.allin.3: 20.0°N, 030.0°E
    test 156 clipSH.allin.LL: True
    test 157 clipSH3.allin.len: 2
    test 158 clipSH3.allin.0: 20.0°N, 030.0°E
    test 159 clipSH3.allin.LL: True
    test 160 clipSH3.allin.1: 15.0°N, 010.0°E
    test 161 clipSH3.allin.LL: True
    test 162 clipSH3.edge.: True
    test 163 clipSH3.allin.len: 2
    test 164 clipSH3.allin.0: 15.0°N, 010.0°E
    test 165 clipSH3.allin.LL: True
    test 166 clipSH3.allin.1: 25.0°N, 020.0°E
    test 167 clipSH3.allin.LL: True
    test 168 clipSH3.edge.: True
    test 169 clipSH.allin.reversed.len: 4
    test 170 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 171 clipSH.allin.reversed.LL: True
    test 172 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 173 clipSH.allin.reversed.LL: True
    test 174 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 175 clipSH.allin.reversed.LL: True
    test 176 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 177 clipSH.allin.reversed.LL: True
    test 178 clipSH3.allin.reversed.len: 2
    test 179 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 180 clipSH3.allin.reversed.LL: True
    test 181 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 182 clipSH3.allin.reversed.LL: True
    test 183 clipSH3.edge.reversed.: True
    test 184 clipSH3.allin.reversed.len: 2
    test 185 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 186 clipSH3.allin.reversed.LL: True
    test 187 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 188 clipSH3.allin.reversed.LL: True
    test 189 clipSH3.edge.reversed.: True
    test 190 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 191 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 192 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 193 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 194 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 195 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 196 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 197 overlap: (15.0, 10.0, 20.0, 20.0)
    test 198 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 199 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 200 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 201 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 202 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 203 clipSH9: None
    test 204 clipSH10: None
    test 205 clipSH11: None
    test 206 clipSH12: None

    test 207 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 208 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 209 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 210 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 211 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 212 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 213 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 214 clipCS4.p1: 07.5°N, 010.0°E
    test 215 clipCS4.p2: 04.5°N, 000.0°E
    test 216 clipCS4.i: 3
    test 217 clipCS4.j: 0
    test 218 clipCS4.p1: 05.0°N, 005.0°E
    test 219 clipCS4.p2: 05.0°N, 005.0°E
    test 220 clipCS4.i: 1
    test 221 clipCS4.j: 2
    test 222 clipLB6.p1: 07.5°N, 010.0°E
    test 223 clipLB6.p2: 04.5°N, 000.0°E
    test 224 clipLB6.i: 3
    test 225 clipLB6.fi: 3.25
    test 226 clipLB6.fi: 07.5°N, 010.0°E
    test 227 clipLB6.fj: 3.75
    test 228 clipLB6.fj: 04.5°N, 000.0°E
    test 229 clipLB6.j: 0
    test 230 clipLB6.fin: 4
    test 231 clipLB6.p1: 05.0°N, 005.0°E
    test 232 clipLB6.p2: 05.0°N, 005.0°E
    test 233 clipLB6.i: 1
    test 234 clipLB6.fi: 1.00
    test 235 clipLB6.fi: 05.0°N, 005.0°E
    test 236 clipLB6.fj: 2.00
    test 237 clipLB6.fj: 05.0°N, 005.0°E
    test 238 clipLB6.j: 2
    test 239 clipLB6.fin: 4
    test 240 clipCS4.p1: 60.0°N, 123.333333°E
    test 241 clipCS4.p2: 62.857143°N, 130.0°E
    test 242 clipCS4.i: 0
    test 243 clipCS4.j: 1
    test 244 clipLB6.p1: 60.0°N, 123.333333°E
    test 245 clipLB6.p2: 62.857143°N, 130.0°E
    test 246 clipLB6.i: 0
    test 247 clipLB6.fi: 0.666667
    test 248 clipLB6.fi: 60.0°N, 123.333333°E
    test 249 clipLB6.fj: 0.714286
    test 250 clipLB6.fj: 62.857143°N, 130.0°E
    test 251 clipLB6.j: 1
    test 252 clipLB6.fin: 0
    test 253 clipCS4.p1: 17.5°N, 020.0°E
    test 254 clipCS4.p2: 16.25°N, 015.0°E
    test 255 clipCS4.i: 2
    test 256 clipCS4.j: 0
    test 257 clipLB6.p1: 17.5°N, 020.0°E
    test 258 clipLB6.p2: 16.25°N, 015.0°E
    test 259 clipLB6.i: 2
    test 260 clipLB6.fi: 2.500
    test 261 clipLB6.fi: 17.5°N, 020.0°E
    test 262 clipLB6.fj: 2.750
    test 263 clipLB6.fj: 16.25°N, 015.0°E
    test 264 clipLB6.j: 0
    test 265 clipLB6.fin: 3
    test 266 clipSH1.len: 4
    test 267 clipSH1.0: 20.0°N, 020.0°E
    test 268 clipSH1.LL: True
    test 269 clipSH1.1: 17.5°N, 020.0°E
    test 270 clipSH1.LL: True
    test 271 clipSH1.2: 16.25°N, 015.0°E
    test 272 clipSH1.LL: True
    test 273 clipSH1.3: 20.0°N, 015.0°E
    test 274 clipSH1.LL: True
    test 275 clipSH2.len: 5
    test 276 clipSH2.0: 18.571°N, 024.286°E
    test 277 clipSH2.LL: True
    test 278 clipSH2.1: 16.667°N, 016.667°E
    test 279 clipSH2.LL: True
    test 280 clipSH2.2: 20.0°N, 015.0°E
    test 281 clipSH2.LL: True
    test 282 clipSH2.3: 25.0°N, 020.0°E
    test 283 clipSH2.LL: True
    test 284 clipSH2.4: 22.0°N, 026.0°E
    test 285 clipSH2.LL: True
    test 286 clipSH3.len: 2
    test 287 clipSH3.0: 18.571°N, 024.286°E
    test 288 clipSH3.LL: True
    test 289 clipSH3.1: 16.667°N, 016.667°E
    test 290 clipSH3.LL: True
    test 291 clipSH3.edge.: True
    test 292 clipSH3.len: 2
    test 293 clipSH3.0: 16.667°N, 016.667°E
    test 294 clipSH3.LL: True
    test 295 clipSH3.1: 20.0°N, 015.0°E
    test 296 clipSH3.LL: True
    test 297 clipSH3.edge.: False
    test 298 clipSH3.len: 2
    test 299 clipSH3.0: 20.0°N, 015.0°E
    test 300 clipSH3.LL: True
    test 301 clipSH3.1: 25.0°N, 020.0°E
    test 302 clipSH3.LL: True
    test 303 clipSH3.edge.: True
    test 304 clipSH3.len: 2
    test 305 clipSH3.0: 25.0°N, 020.0°E
    test 306 clipSH3.LL: True
    test 307 clipSH3.1: 22.0°N, 026.0°E
    test 308 clipSH3.LL: True
    test 309 clipSH3.edge.: True
    test 310 clipSH3.len: 2
    test 311 clipSH3.0: 22.0°N, 026.0°E
    test 312 clipSH3.LL: True
    test 313 clipSH3.1: 18.571°N, 024.286°E
    test 314 clipSH3.LL: True
    test 315 clipSH3.edge.: False
    test 316 clipSH2.reversed.len: 5
    test 317 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 318 clipSH2.reversed.LL: True
    test 319 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 320 clipSH2.reversed.LL: True
    test 321 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 322 clipSH2.reversed.LL: True
    test 323 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 324 clipSH2.reversed.LL: True
    test 325 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 326 clipSH2.reversed.LL: True
    test 327 clipSH3.reversed.len: 2
    test 328 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 329 clipSH3.reversed.LL: True
    test 330 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 331 clipSH3.reversed.LL: True
    test 332 clipSH3.edge.reversed.: True
    test 333 clipSH3.reversed.len: 2
    test 334 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 335 clipSH3.reversed.LL: True
    test 336 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 337 clipSH3.reversed.LL: True
    test 338 clipSH3.edge.reversed.: False
    test 339 clipSH3.reversed.len: 2
    test 340 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 341 clipSH3.reversed.LL: True
    test 342 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 343 clipSH3.reversed.LL: True
    test 344 clipSH3.edge.reversed.: True
    test 345 clipSH3.reversed.len: 2
    test 346 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 347 clipSH3.reversed.LL: True
    test 348 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 349 clipSH3.reversed.LL: True
    test 350 clipSH3.edge.reversed.: True
    test 351 clipSH3.reversed.len: 2
    test 352 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 353 clipSH3.reversed.LL: True
    test 354 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 355 clipSH3.reversed.LL: True
    test 356 clipSH3.edge.reversed.: False
    test 357 clipSH.allout: ()
    test 358 clipSH3.allout: ()
    test 359 clipSH.allout.reversed: ()
    test 360 clipSH3.allout.reversed: ()
    test 361 clipSH.allin.len: 4
    test 362 clipSH.allin.0: 20.0°N, 030.0°E
    test 363 clipSH.allin.LL: True
    test 364 clipSH.allin.1: 15.0°N, 010.0°E
    test 365 clipSH.allin.LL: True
    test 366 clipSH.allin.2: 25.0°N, 020.0°E
    test 367 clipSH.allin.LL: True
    test 368 clipSH.allin.3: 20.0°N, 030.0°E
    test 369 clipSH.allin.LL: True
    test 370 clipSH3.allin.len: 2
    test 371 clipSH3.allin.0: 20.0°N, 030.0°E
    test 372 clipSH3.allin.LL: True
    test 373 clipSH3.allin.1: 15.0°N, 010.0°E
    test 374 clipSH3.allin.LL: True
    test 375 clipSH3.edge.: True
    test 376 clipSH3.allin.len: 2
    test 377 clipSH3.allin.0: 15.0°N, 010.0°E
    test 378 clipSH3.allin.LL: True
    test 379 clipSH3.allin.1: 25.0°N, 020.0°E
    test 380 clipSH3.allin.LL: True
    test 381 clipSH3.edge.: True
    test 382 clipSH.allin.reversed.len: 4
    test 383 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 384 clipSH.allin.reversed.LL: True
    test 385 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 386 clipSH.allin.reversed.LL: True
    test 387 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 388 clipSH.allin.reversed.LL: True
    test 389 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 390 clipSH.allin.reversed.LL: True
    test 391 clipSH3.allin.reversed.len: 2
    test 392 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 393 clipSH3.allin.reversed.LL: True
    test 394 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 395 clipSH3.allin.reversed.LL: True
    test 396 clipSH3.edge.reversed.: True
    test 397 clipSH3.allin.reversed.len: 2
    test 398 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 399 clipSH3.allin.reversed.LL: True
    test 400 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 401 clipSH3.allin.reversed.LL: True
    test 402 clipSH3.edge.reversed.: True
    test 403 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 404 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 405 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 406 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 407 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 408 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 409 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 410 overlap: (15.0, 10.0, 20.0, 20.0)
    test 411 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 412 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 413 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 414 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 415 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 416 clipSH9: None
    test 417 clipSH10: None
    test 418 clipSH11: None
    test 419 clipSH12: None

    test 420 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 421 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 422 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 423 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 424 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 425 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 426 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalNvector, 23.04.11)
    test 427 clipCS4.p1: 07.5°N, 010.0°E
    test 428 clipCS4.p2: 04.5°N, 000.0°E
    test 429 clipCS4.i: 3
    test 430 clipCS4.j: 0
    test 431 clipCS4.p1: 05.0°N, 005.0°E
    test 432 clipCS4.p2: 05.0°N, 005.0°E
    test 433 clipCS4.i: 1
    test 434 clipCS4.j: 2
    test 435 clipLB6.p1: 07.5°N, 010.0°E
    test 436 clipLB6.p2: 04.5°N, 000.0°E
    test 437 clipLB6.i: 3
    test 438 clipLB6.fi: 3.25
    test 439 clipLB6.fi: 07.5°N, 010.0°E
    test 440 clipLB6.fj: 3.75
    test 441 clipLB6.fj: 04.5°N, 000.0°E
    test 442 clipLB6.j: 0
    test 443 clipLB6.fin: 4
    test 444 clipLB6.p1: 05.0°N, 005.0°E
    test 445 clipLB6.p2: 05.0°N, 005.0°E
    test 446 clipLB6.i: 1
    test 447 clipLB6.fi: 1.00
    test 448 clipLB6.fi: 05.0°N, 005.0°E
    test 449 clipLB6.fj: 2.00
    test 450 clipLB6.fj: 05.0°N, 005.0°E
    test 451 clipLB6.j: 2
    test 452 clipLB6.fin: 4
    test 453 clipCS4.p1: 60.0°N, 123.333333°E
    test 454 clipCS4.p2: 62.857143°N, 130.0°E
    test 455 clipCS4.i: 0
    test 456 clipCS4.j: 1
    test 457 clipLB6.p1: 60.0°N, 123.333333°E
    test 458 clipLB6.p2: 62.857143°N, 130.0°E
    test 459 clipLB6.i: 0
    test 460 clipLB6.fi: 0.666667
    test 461 clipLB6.fi: 60.0°N, 123.333333°E
    test 462 clipLB6.fj: 0.714286
    test 463 clipLB6.fj: 62.857143°N, 130.0°E
    test 464 clipLB6.j: 1
    test 465 clipLB6.fin: 0
    test 466 clipCS4.p1: 17.5°N, 020.0°E
    test 467 clipCS4.p2: 16.25°N, 015.0°E
    test 468 clipCS4.i: 2
    test 469 clipCS4.j: 0
    test 470 clipLB6.p1: 17.5°N, 020.0°E
    test 471 clipLB6.p2: 16.25°N, 015.0°E
    test 472 clipLB6.i: 2
    test 473 clipLB6.fi: 2.500
    test 474 clipLB6.fi: 17.5°N, 020.0°E
    test 475 clipLB6.fj: 2.750
    test 476 clipLB6.fj: 16.25°N, 015.0°E
    test 477 clipLB6.j: 0
    test 478 clipLB6.fin: 3
    test 479 clipSH1.len: 4
    test 480 clipSH1.0: 20.0°N, 020.0°E
    test 481 clipSH1.LL: True
    test 482 clipSH1.1: 17.5°N, 020.0°E
    test 483 clipSH1.LL: True
    test 484 clipSH1.2: 16.25°N, 015.0°E
    test 485 clipSH1.LL: True
    test 486 clipSH1.3: 20.0°N, 015.0°E
    test 487 clipSH1.LL: True
    test 488 clipSH2.len: 5
    test 489 clipSH2.0: 18.571°N, 024.286°E
    test 490 clipSH2.LL: True
    test 491 clipSH2.1: 16.667°N, 016.667°E
    test 492 clipSH2.LL: True
    test 493 clipSH2.2: 20.0°N, 015.0°E
    test 494 clipSH2.LL: True
    test 495 clipSH2.3: 25.0°N, 020.0°E
    test 496 clipSH2.LL: True
    test 497 clipSH2.4: 22.0°N, 026.0°E
    test 498 clipSH2.LL: True
    test 499 clipSH3.len: 2
    test 500 clipSH3.0: 18.571°N, 024.286°E
    test 501 clipSH3.LL: True
    test 502 clipSH3.1: 16.667°N, 016.667°E
    test 503 clipSH3.LL: True
    test 504 clipSH3.edge.: True
    test 505 clipSH3.len: 2
    test 506 clipSH3.0: 16.667°N, 016.667°E
    test 507 clipSH3.LL: True
    test 508 clipSH3.1: 20.0°N, 015.0°E
    test 509 clipSH3.LL: True
    test 510 clipSH3.edge.: False
    test 511 clipSH3.len: 2
    test 512 clipSH3.0: 20.0°N, 015.0°E
    test 513 clipSH3.LL: True
    test 514 clipSH3.1: 25.0°N, 020.0°E
    test 515 clipSH3.LL: True
    test 516 clipSH3.edge.: True
    test 517 clipSH3.len: 2
    test 518 clipSH3.0: 25.0°N, 020.0°E
    test 519 clipSH3.LL: True
    test 520 clipSH3.1: 22.0°N, 026.0°E
    test 521 clipSH3.LL: True
    test 522 clipSH3.edge.: True
    test 523 clipSH3.len: 2
    test 524 clipSH3.0: 22.0°N, 026.0°E
    test 525 clipSH3.LL: True
    test 526 clipSH3.1: 18.571°N, 024.286°E
    test 527 clipSH3.LL: True
    test 528 clipSH3.edge.: False
    test 529 clipSH2.reversed.len: 5
    test 530 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 531 clipSH2.reversed.LL: True
    test 532 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 533 clipSH2.reversed.LL: True
    test 534 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 535 clipSH2.reversed.LL: True
    test 536 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 537 clipSH2.reversed.LL: True
    test 538 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 539 clipSH2.reversed.LL: True
    test 540 clipSH3.reversed.len: 2
    test 541 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 542 clipSH3.reversed.LL: True
    test 543 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 544 clipSH3.reversed.LL: True
    test 545 clipSH3.edge.reversed.: True
    test 546 clipSH3.reversed.len: 2
    test 547 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 548 clipSH3.reversed.LL: True
    test 549 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 550 clipSH3.reversed.LL: True
    test 551 clipSH3.edge.reversed.: False
    test 552 clipSH3.reversed.len: 2
    test 553 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 554 clipSH3.reversed.LL: True
    test 555 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 556 clipSH3.reversed.LL: True
    test 557 clipSH3.edge.reversed.: True
    test 558 clipSH3.reversed.len: 2
    test 559 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 560 clipSH3.reversed.LL: True
    test 561 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 562 clipSH3.reversed.LL: True
    test 563 clipSH3.edge.reversed.: True
    test 564 clipSH3.reversed.len: 2
    test 565 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 566 clipSH3.reversed.LL: True
    test 567 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 568 clipSH3.reversed.LL: True
    test 569 clipSH3.edge.reversed.: False
    test 570 clipSH.allout: ()
    test 571 clipSH3.allout: ()
    test 572 clipSH.allout.reversed: ()
    test 573 clipSH3.allout.reversed: ()
    test 574 clipSH.allin.len: 4
    test 575 clipSH.allin.0: 20.0°N, 030.0°E
    test 576 clipSH.allin.LL: True
    test 577 clipSH.allin.1: 15.0°N, 010.0°E
    test 578 clipSH.allin.LL: True
    test 579 clipSH.allin.2: 25.0°N, 020.0°E
    test 580 clipSH.allin.LL: True
    test 581 clipSH.allin.3: 20.0°N, 030.0°E
    test 582 clipSH.allin.LL: True
    test 583 clipSH3.allin.len: 2
    test 584 clipSH3.allin.0: 20.0°N, 030.0°E
    test 585 clipSH3.allin.LL: True
    test 586 clipSH3.allin.1: 15.0°N, 010.0°E
    test 587 clipSH3.allin.LL: True
    test 588 clipSH3.edge.: True
    test 589 clipSH3.allin.len: 2
    test 590 clipSH3.allin.0: 15.0°N, 010.0°E
    test 591 clipSH3.allin.LL: True
    test 592 clipSH3.allin.1: 25.0°N, 020.0°E
    test 593 clipSH3.allin.LL: True
    test 594 clipSH3.edge.: True
    test 595 clipSH.allin.reversed.len: 4
    test 596 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 597 clipSH.allin.reversed.LL: True
    test 598 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 599 clipSH.allin.reversed.LL: True
    test 600 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 601 clipSH.allin.reversed.LL: True
    test 602 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 603 clipSH.allin.reversed.LL: True
    test 604 clipSH3.allin.reversed.len: 2
    test 605 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 606 clipSH3.allin.reversed.LL: True
    test 607 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 608 clipSH3.allin.reversed.LL: True
    test 609 clipSH3.edge.reversed.: True
    test 610 clipSH3.allin.reversed.len: 2
    test 611 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 612 clipSH3.allin.reversed.LL: True
    test 613 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 614 clipSH3.allin.reversed.LL: True
    test 615 clipSH3.edge.reversed.: True
    test 616 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 617 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 618 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 619 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 620 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 621 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 622 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 623 overlap: (15.0, 10.0, 20.0, 20.0)
    test 624 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 625 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 626 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 627 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 628 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 629 clipSH9: None
    test 630 clipSH10: None
    test 631 clipSH11: None
    test 632 clipSH12: None

    test 633 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 634 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 635 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 636 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 637 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 638 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 639 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    testing(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 640 clipCS4.p1: 07.5°N, 010.0°E
    test 641 clipCS4.p2: 04.5°N, 000.0°E
    test 642 clipCS4.i: 3
    test 643 clipCS4.j: 0
    test 644 clipCS4.p1: 05.0°N, 005.0°E
    test 645 clipCS4.p2: 05.0°N, 005.0°E
    test 646 clipCS4.i: 1
    test 647 clipCS4.j: 2
    test 648 clipLB6.p1: 07.5°N, 010.0°E
    test 649 clipLB6.p2: 04.5°N, 000.0°E
    test 650 clipLB6.i: 3
    test 651 clipLB6.fi: 3.25
    test 652 clipLB6.fi: 07.5°N, 010.0°E
    test 653 clipLB6.fj: 3.75
    test 654 clipLB6.fj: 04.5°N, 000.0°E
    test 655 clipLB6.j: 0
    test 656 clipLB6.fin: 4
    test 657 clipLB6.p1: 05.0°N, 005.0°E
    test 658 clipLB6.p2: 05.0°N, 005.0°E
    test 659 clipLB6.i: 1
    test 660 clipLB6.fi: 1.00
    test 661 clipLB6.fi: 05.0°N, 005.0°E
    test 662 clipLB6.fj: 2.00
    test 663 clipLB6.fj: 05.0°N, 005.0°E
    test 664 clipLB6.j: 2
    test 665 clipLB6.fin: 4
    test 666 clipCS4.p1: 60.0°N, 123.333333°E
    test 667 clipCS4.p2: 62.857143°N, 130.0°E
    test 668 clipCS4.i: 0
    test 669 clipCS4.j: 1
    test 670 clipLB6.p1: 60.0°N, 123.333333°E
    test 671 clipLB6.p2: 62.857143°N, 130.0°E
    test 672 clipLB6.i: 0
    test 673 clipLB6.fi: 0.666667
    test 674 clipLB6.fi: 60.0°N, 123.333333°E
    test 675 clipLB6.fj: 0.714286
    test 676 clipLB6.fj: 62.857143°N, 130.0°E
    test 677 clipLB6.j: 1
    test 678 clipLB6.fin: 0
    test 679 clipCS4.p1: 17.5°N, 020.0°E
    test 680 clipCS4.p2: 16.25°N, 015.0°E
    test 681 clipCS4.i: 2
    test 682 clipCS4.j: 0
    test 683 clipLB6.p1: 17.5°N, 020.0°E
    test 684 clipLB6.p2: 16.25°N, 015.0°E
    test 685 clipLB6.i: 2
    test 686 clipLB6.fi: 2.500
    test 687 clipLB6.fi: 17.5°N, 020.0°E
    test 688 clipLB6.fj: 2.750
    test 689 clipLB6.fj: 16.25°N, 015.0°E
    test 690 clipLB6.j: 0
    test 691 clipLB6.fin: 3
    test 692 clipSH1.len: 4
    test 693 clipSH1.0: 20.0°N, 020.0°E
    test 694 clipSH1.LL: True
    test 695 clipSH1.1: 17.5°N, 020.0°E
    test 696 clipSH1.LL: True
    test 697 clipSH1.2: 16.25°N, 015.0°E
    test 698 clipSH1.LL: True
    test 699 clipSH1.3: 20.0°N, 015.0°E
    test 700 clipSH1.LL: True
    test 701 clipSH2.len: 5
    test 702 clipSH2.0: 18.571°N, 024.286°E
    test 703 clipSH2.LL: True
    test 704 clipSH2.1: 16.667°N, 016.667°E
    test 705 clipSH2.LL: True
    test 706 clipSH2.2: 20.0°N, 015.0°E
    test 707 clipSH2.LL: True
    test 708 clipSH2.3: 25.0°N, 020.0°E
    test 709 clipSH2.LL: True
    test 710 clipSH2.4: 22.0°N, 026.0°E
    test 711 clipSH2.LL: True
    test 712 clipSH3.len: 2
    test 713 clipSH3.0: 18.571°N, 024.286°E
    test 714 clipSH3.LL: True
    test 715 clipSH3.1: 16.667°N, 016.667°E
    test 716 clipSH3.LL: True
    test 717 clipSH3.edge.: True
    test 718 clipSH3.len: 2
    test 719 clipSH3.0: 16.667°N, 016.667°E
    test 720 clipSH3.LL: True
    test 721 clipSH3.1: 20.0°N, 015.0°E
    test 722 clipSH3.LL: True
    test 723 clipSH3.edge.: False
    test 724 clipSH3.len: 2
    test 725 clipSH3.0: 20.0°N, 015.0°E
    test 726 clipSH3.LL: True
    test 727 clipSH3.1: 25.0°N, 020.0°E
    test 728 clipSH3.LL: True
    test 729 clipSH3.edge.: True
    test 730 clipSH3.len: 2
    test 731 clipSH3.0: 25.0°N, 020.0°E
    test 732 clipSH3.LL: True
    test 733 clipSH3.1: 22.0°N, 026.0°E
    test 734 clipSH3.LL: True
    test 735 clipSH3.edge.: True
    test 736 clipSH3.len: 2
    test 737 clipSH3.0: 22.0°N, 026.0°E
    test 738 clipSH3.LL: True
    test 739 clipSH3.1: 18.571°N, 024.286°E
    test 740 clipSH3.LL: True
    test 741 clipSH3.edge.: False
    test 742 clipSH2.reversed.len: 5
    test 743 clipSH2.reversed.0: 18.571°N, 024.286°E
    test 744 clipSH2.reversed.LL: True
    test 745 clipSH2.reversed.1: 16.667°N, 016.667°E
    test 746 clipSH2.reversed.LL: True
    test 747 clipSH2.reversed.2: 20.0°N, 015.0°E
    test 748 clipSH2.reversed.LL: True
    test 749 clipSH2.reversed.3: 25.0°N, 020.0°E
    test 750 clipSH2.reversed.LL: True
    test 751 clipSH2.reversed.4: 22.0°N, 026.0°E
    test 752 clipSH2.reversed.LL: True
    test 753 clipSH3.reversed.len: 2
    test 754 clipSH3.reversed.0: 18.571°N, 024.286°E
    test 755 clipSH3.reversed.LL: True
    test 756 clipSH3.reversed.1: 16.667°N, 016.667°E
    test 757 clipSH3.reversed.LL: True
    test 758 clipSH3.edge.reversed.: True
    test 759 clipSH3.reversed.len: 2
    test 760 clipSH3.reversed.0: 16.667°N, 016.667°E
    test 761 clipSH3.reversed.LL: True
    test 762 clipSH3.reversed.1: 20.0°N, 015.0°E
    test 763 clipSH3.reversed.LL: True
    test 764 clipSH3.edge.reversed.: False
    test 765 clipSH3.reversed.len: 2
    test 766 clipSH3.reversed.0: 20.0°N, 015.0°E
    test 767 clipSH3.reversed.LL: True
    test 768 clipSH3.reversed.1: 25.0°N, 020.0°E
    test 769 clipSH3.reversed.LL: True
    test 770 clipSH3.edge.reversed.: True
    test 771 clipSH3.reversed.len: 2
    test 772 clipSH3.reversed.0: 25.0°N, 020.0°E
    test 773 clipSH3.reversed.LL: True
    test 774 clipSH3.reversed.1: 22.0°N, 026.0°E
    test 775 clipSH3.reversed.LL: True
    test 776 clipSH3.edge.reversed.: True
    test 777 clipSH3.reversed.len: 2
    test 778 clipSH3.reversed.0: 22.0°N, 026.0°E
    test 779 clipSH3.reversed.LL: True
    test 780 clipSH3.reversed.1: 18.571°N, 024.286°E
    test 781 clipSH3.reversed.LL: True
    test 782 clipSH3.edge.reversed.: False
    test 783 clipSH.allout: ()
    test 784 clipSH3.allout: ()
    test 785 clipSH.allout.reversed: ()
    test 786 clipSH3.allout.reversed: ()
    test 787 clipSH.allin.len: 4
    test 788 clipSH.allin.0: 20.0°N, 030.0°E
    test 789 clipSH.allin.LL: True
    test 790 clipSH.allin.1: 15.0°N, 010.0°E
    test 791 clipSH.allin.LL: True
    test 792 clipSH.allin.2: 25.0°N, 020.0°E
    test 793 clipSH.allin.LL: True
    test 794 clipSH.allin.3: 20.0°N, 030.0°E
    test 795 clipSH.allin.LL: True
    test 796 clipSH3.allin.len: 2
    test 797 clipSH3.allin.0: 20.0°N, 030.0°E
    test 798 clipSH3.allin.LL: True
    test 799 clipSH3.allin.1: 15.0°N, 010.0°E
    test 800 clipSH3.allin.LL: True
    test 801 clipSH3.edge.: True
    test 802 clipSH3.allin.len: 2
    test 803 clipSH3.allin.0: 15.0°N, 010.0°E
    test 804 clipSH3.allin.LL: True
    test 805 clipSH3.allin.1: 25.0°N, 020.0°E
    test 806 clipSH3.allin.LL: True
    test 807 clipSH3.edge.: True
    test 808 clipSH.allin.reversed.len: 4
    test 809 clipSH.allin.reversed.0: 20.0°N, 030.0°E
    test 810 clipSH.allin.reversed.LL: True
    test 811 clipSH.allin.reversed.1: 15.0°N, 010.0°E
    test 812 clipSH.allin.reversed.LL: True
    test 813 clipSH.allin.reversed.2: 25.0°N, 020.0°E
    test 814 clipSH.allin.reversed.LL: True
    test 815 clipSH.allin.reversed.3: 20.0°N, 030.0°E
    test 816 clipSH.allin.reversed.LL: True
    test 817 clipSH3.allin.reversed.len: 2
    test 818 clipSH3.allin.reversed.0: 20.0°N, 030.0°E
    test 819 clipSH3.allin.reversed.LL: True
    test 820 clipSH3.allin.reversed.1: 15.0°N, 010.0°E
    test 821 clipSH3.allin.reversed.LL: True
    test 822 clipSH3.edge.reversed.: True
    test 823 clipSH3.allin.reversed.len: 2
    test 824 clipSH3.allin.reversed.0: 15.0°N, 010.0°E
    test 825 clipSH3.allin.reversed.LL: True
    test 826 clipSH3.allin.reversed.1: 25.0°N, 020.0°E
    test 827 clipSH3.allin.reversed.LL: True
    test 828 clipSH3.edge.reversed.: True
    test 829 clipSH.warped: clipSH clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 830 clipSH3.warped: clipSH3 clip region ((LatLon(10°00′00.0″N, 010°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 010°00′00.0″E))): not convex
    test 831 clipSH.warpedreversed.: clipSH clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 832 clipSH3.warpedreversed.: clipSH3 clip region ((LatLon(20°00′00.0″N, 010°00′00.0″E), LatLon(10°00′00.0″N, 020°00′00.0″E), LatLon(20°00′00.0″N, 020°00′00.0″E), LatLon(10°00′00.0″N, 010°00′00.0″E))): not convex
    test 833 boundsOf: (10.0, 10.0, 20.0, 20.0)
    test 834 boundsOf: (15.0, 10.0, 25.0, 30.0)
    test 835 enclosures: (5.0, 0.0, -5.0, -10.0)
    test 836 overlap: (15.0, 10.0, 20.0, 20.0)
    test 837 clipSH4: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 838 clipSH5: 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0
    test 839 clipSH6: 1.0, 0.5, 2.0, 1.0, 2.0, 0.5
    test 840 clipSH7: -0.2, 2.0, 0.2, 2.0, 0.5, 0.5, 2.0, 0.2, 2.0, -0.2, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -2.0, -0.2, -2.0, 0.2, -0.5, 0.5
    test 841 clipSH8: -0.33, 1.33, 0.0, 2.0, 0.33, 1.33, 0.5, 0.5, 0.78, 0.44, 1.18, -0.36, 0.5, -0.5, 0.2, -2.0, -0.2, -2.0, -0.5, -0.5, -1.18, -0.36, -0.78, 0.44, -0.5, 0.5
    test 842 clipSH9: None
    test 843 clipSH10: None
    test 844 clipSH11: None
    test 845 clipSH12: None

    test 846 clipGH4: (ClipGH4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0), ClipGH4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipGH4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipGH4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0))

    test 847 clipFHP4: (ClipFHP4Tuple(lat=7.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=6.428571, height=2.285714, clipid=0), ClipFHP4Tuple(lat=3.0, lon=5.0, height=2.0, clipid=0), ClipFHP4Tuple(lat=5.0, lon=3.571429, height=1.714286, clipid=0))

    test 848 Fig 8: (ClipFHP4Tuple(lat=4.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=-1.0, lon=12.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=3.0, lon=8.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=5.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=1.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=11.0, height=0.0, clipid=0))
    test 849 Fig 14: (ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=6.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=6.0, lon=6.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=9.0, lon=3.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=6.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=3.0, lon=3.0, height=0.0, clipid=1))
    test 850 Fig 15: (ClipFHP4Tuple(lat=1.0, lon=3.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=4.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=1), ClipFHP4Tuple(lat=1.0, lon=1.0, height=0.0, clipid=1))
    test 851 Fig 16: (ClipFHP4Tuple(lat=0.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=1.0, lon=0.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=2.0, lon=2.0, height=0.0, clipid=0), ClipFHP4Tuple(lat=0.0, lon=2.0, height=0.0, clipid=0))
    test 852 Fig 18: ((-10, -10, 0), (-10, -2, 0), (-8, -2, 0), (-8, -8, 0), (-2, -8, 0), (-2, -10, 0), (2, -10, 1), (2, -8, 1), (0, -8, 1), (0, -10, 1), (10, -6, 2), (8, -6, 2), (8, -8, 2), (10, -8, 2), (10, 8, 3), (8, 8, 3), (8, 6, 3), (10, 6, 3), (-6, 10, 4), (-6, 8, 4), (-4, 8, 4), (-4, 10, 4), (-10, 10, 5), (-10, 8, 5), (-8, 8, 5), (-8, 10, 5), (-10, 4, 6), (-8, 4, 6), (-8, 6, 6), (-10, 6, 6), (-10, 0, 7), (-8, 0, 7), (-8, 2, 7), (-10, 2, 7), (-6, 6, 8), (-4, 6, 8), (-4, 4, 8), (-6, 4, 8), (-6, 0, 9), (-4, 0, 9), (-4, 2, 9), (-6, 2, 9), (-6, -6, 10), (-2, -6, 10), (-2, -4, 10), (-4, -4, 10), (-4, -2, 10), (-6, -2, 10), (2, -6, 11), (2, -4, 11), (0, -4, 11), (0, -6, 11), (12, 8, 12), (20, 8, 12), (20, -8, 12), (12, -8, 12), (12, -6, 12), (18, -6, 12), (18, 6, 12), (12, 6, 12), (12, -4, 13), (14, -4, 13), (14, 4, 13), (12, 4, 13))

    all 852 testClipy.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 95.405 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testConstants.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Float from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.Radius from .unitsBase by testConstants.py line 11
# lazily imported pygeodesy.float_ from .constants by testConstants.py line 11
# lazily imported pygeodesy.isinf from .constants by testConstants.py line 11
# lazily imported pygeodesy.isint0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.isnan from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS02 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS1 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS_2 from .constants by testConstants.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testConstants.py line 11
# lazily imported pygeodesy.INF from .constants by testConstants.py line 11
# lazily imported pygeodesy.INT0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NAN from .constants by testConstants.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testConstants.py line 11
# lazily imported pygeodesy.NINF from .constants by testConstants.py line 11

    testing testConstants.py 23.03.27 (module pygeodesy.constants 23.03.19) isLazy=3
    test 1 _0_0: 0.0
    test 2 _0_0001: 0.0001
    test 3 _0_001: 0.001
    test 4 _0_01: 0.01
    test 5 _0_1: 0.1
    test 6 _0_125: 0.125
    test 7 _0_25: 0.25
    test 8 _0_26: 0.26
    test 9 _0_5: 0.5
    test 10 _1000_0: 1000.0
    test 11 _100_0: 100.0
    test 12 _10_0: 10.0
    test 13 _16_0: 16.0
    test 14 _180_0: 180.0
    test 15 _1_0: 1.0

    test 16 _1_16th: _1_16th (0.0625)
    test 17 _1_16th: _1_16th
    test 18 _1_16th: True

    test 19 _1_3rd: _1_3rd (0.333333333333)
    test 20 _1_3rd: _1_3rd
    test 21 _1_3rd: True
    test 22 _1_5: 1.5

    test 23 _1_64th: _1_64th (0.015625)
    test 24 _1_64th: _1_64th
    test 25 _1_64th: True
    test 26 _1_75: 1.75

    test 27 _1__90: _1__90 (0.0111111111111)
    test 28 _1__90: _1__90
    test 29 _1__90: True

    test 30 _1_EPS: _1_EPS (4.50359962737e+15)
    test 31 _1_EPS: _1_EPS
    test 32 _1_EPS: True
    test 33 _270_0: 270.0
    test 34 _2_0: 2.0

    test 35 _2_3rd: _2_3rd (0.666666666667)
    test 36 _2_3rd: _2_3rd
    test 37 _2_3rd: True

    test 38 _2__PI: _2__PI (0.636619772368)
    test 39 _2__PI: _2__PI
    test 40 _2__PI: True
    test 41 _32_0: 32.0
    test 42 _3600_0: 3600.0
    test 43 _360_0: 360.0
    test 44 _3_0: 3.0
    test 45 _400_0: 400.0
    test 46 _4_0: 4.0
    test 47 _5_0: 5.0
    test 48 _60_0: 60.0
    test 49 _6_0: 6.0
    test 50 _720_0: 720.0

    test 51 _89_999_: _89_999_ (90.0)
    test 52 _89_999_: _89_999_
    test 53 _89_999_: True
    test 54 _8_0: 8.0
    test 55 _90_0: 90.0
    test 56 _9_0: 9.0

    test 57 _EPS2e4: _EPS2e4 (4.4408920985e-12)
    test 58 _EPS2e4: _EPS2e4
    test 59 _EPS2e4: True

    test 60 _EPS4e8: _EPS4e8 (8.881784197e-08)
    test 61 _EPS4e8: _EPS4e8
    test 62 _EPS4e8: True

    test 63 _EPSmin: _EPSmin (1.49166814624e-154)
    test 64 _EPSmin: _EPSmin
    test 65 _EPSmin: True

    test 66 _EPSqrt: _EPSqrt (1.49011611938e-08)
    test 67 _EPSqrt: _EPSqrt
    test 68 _EPSqrt: True

    test 69 _EPStol: _EPStol (1.49011611938e-09)
    test 70 _EPStol: _EPStol
    test 71 _EPStol: True
    test 72 _inf: inf

    test 73 _K0_UTM: _K0_UTM (0.9996)
    test 74 _K0_UTM: _K0_UTM
    test 75 _K0_UTM: True
    test 76 _M_KM: 1000.0  FAILED, KNOWN, expected M.KM
    test 77 _M_NM: 1852.0  FAILED, KNOWN, expected M.NM
    test 78 _M_SM: 1609.344  FAILED, KNOWN, expected M.SM
    test 79 _N_0_0: -0.0  FAILED, KNOWN, expected N.0.0
    test 80 _N_0_5: -0.5  FAILED, KNOWN, expected N.0.5
    test 81 _N_180_0: -180.0  FAILED, KNOWN, expected N.180.0
    test 82 _N_1_0: -1.0  FAILED, KNOWN, expected N.1.0
    test 83 _N_2_0: -2.0  FAILED, KNOWN, expected N.2.0
    test 84 _N_90_0: -90.0  FAILED, KNOWN, expected N.90.0
    test 85 _nan: nan
    test 86 _pi: 3.141592653589793  FAILED, KNOWN, expected pi

    test 87 _SQRT2_2: _SQRT2_2 (0.707106781187)
    test 88 _SQRT2_2: _SQRT2_2
    test 89 _SQRT2_2: True

    test 90 DIG: DIG (15)
    test 91 DIG: DIG
    test 92 DIG: True
    test 93 DIG: True

    test 94 EPS: EPS (2.22044604925e-16)
    test 95 EPS: EPS
    test 96 EPS: True
    test 97 EPS: True

    test 98 EPS0: EPS0 (4.93038065763e-32)
    test 99 EPS0: EPS0
    test 100 EPS0: True
    test 101 EPS0: True

    test 102 EPS02: EPS02 (2.43086534291e-63)
    test 103 EPS02: EPS02
    test 104 EPS02: True
    test 105 EPS02: True

    test 106 EPS1: EPS1 (1.0)
    test 107 EPS1: EPS1
    test 108 EPS1: True
    test 109 EPS1: True

    test 110 EPS2: EPS2 (4.4408920985e-16)
    test 111 EPS2: EPS2
    test 112 EPS2: True
    test 113 EPS2: True

    test 114 EPS4: EPS4 (8.881784197e-16)
    test 115 EPS4: EPS4
    test 116 EPS4: True
    test 117 EPS4: True

    test 118 EPS_2: EPS_2 (1.11022302463e-16)
    test 119 EPS_2: EPS_2
    test 120 EPS_2: True
    test 121 EPS_2: True

    test 122 INF: INF (inf)
    test 123 INF: INF
    test 124 INF: True
    test 125 INF: True

    test 126 INT0: INT0 (0)
    test 127 INT0: INT0
    test 128 INT0: True
    test 129 INT0: True

    test 130 MANT_DIG: MANT_DIG (53)
    test 131 MANT_DIG: MANT_DIG
    test 132 MANT_DIG: True
    test 133 MANT_DIG: True

    test 134 MAX: MAX (1.79769313486e+308)
    test 135 MAX: MAX
    test 136 MAX: True
    test 137 MAX: True

    test 138 MIN: MIN (2.22507385851e-308)
    test 139 MIN: MIN
    test 140 MIN: True
    test 141 MIN: True

    test 142 NAN: NAN (nan)
    test 143 NAN: NAN
    test 144 NAN: True
    test 145 NAN: True

    test 146 NEG0: NEG0 (-0)
    test 147 NEG0: NEG0
    test 148 NEG0: True
    test 149 NEG0: True

    test 150 NINF: NINF (-inf)
    test 151 NINF: NINF
    test 152 NINF: True
    test 153 NINF: True

    test 154 PI: PI (3.14159265359)
    test 155 PI: PI
    test 156 PI: True
    test 157 PI: True

    test 158 PI2: PI2 (6.28318530718)
    test 159 PI2: PI2
    test 160 PI2: True
    test 161 PI2: True

    test 162 PI3: PI3 (9.42477796077)
    test 163 PI3: PI3
    test 164 PI3: True
    test 165 PI3: True

    test 166 PI3_2: PI3_2 (4.71238898038)
    test 167 PI3_2: PI3_2
    test 168 PI3_2: True
    test 169 PI3_2: True

    test 170 PI4: PI4 (12.5663706144)
    test 171 PI4: PI4
    test 172 PI4: True
    test 173 PI4: True

    test 174 PI_2: PI_2 (1.57079632679)
    test 175 PI_2: PI_2
    test 176 PI_2: True
    test 177 PI_2: True

    test 178 PI_3: PI_3 (1.0471975512)
    test 179 PI_3: PI_3
    test 180 PI_3: True
    test 181 PI_3: True

    test 182 PI_4: PI_4 (0.785398163397)
    test 183 PI_4: PI_4
    test 184 PI_4: True
    test 185 PI_4: True

    test 186 R_FM: R_FM (6371000.0)
    test 187 R_FM: R_FM
    test 188 R_FM: True
    test 189 R_FM: True

    test 190 R_GM: R_GM (6371230.0)
    test 191 R_GM: R_GM
    test 192 R_GM: True
    test 193 R_GM: True

    test 194 R_KM: R_KM (6371.00877141)
    test 195 R_KM: R_KM
    test 196 R_KM: True
    test 197 R_KM: True

    test 198 R_M: R_M (6371008.77141)
    test 199 R_M: R_M
    test 200 R_M: True
    test 201 R_M: True

    test 202 R_MA: R_MA (6378137.0)
    test 203 R_MA: R_MA
    test 204 R_MA: True
    test 205 R_MA: True

    test 206 R_MB: R_MB (6356752.3)
    test 207 R_MB: R_MB
    test 208 R_MB: True
    test 209 R_MB: True

    test 210 R_NM: R_NM (3440.069531)
    test 211 R_NM: R_NM
    test 212 R_NM: True
    test 213 R_NM: True

    test 214 R_QM: R_QM (6372797.56086)
    test 215 R_QM: R_QM
    test 216 R_QM: True
    test 217 R_QM: True

    test 218 R_SM: R_SM (3958.76131605)
    test 219 R_SM: R_SM
    test 220 R_SM: True
    test 221 R_SM: True

    test 222 R_VM: R_VM (6366707.01949)
    test 223 R_VM: R_VM
    test 224 R_VM: True
    test 225 R_VM: True

    test 226 EPS: True
    test 227 EPS+1: True
    test 228 EPS-1: True

    test 229 EPS0: True
    test 230 EPS02: True

    test 231 EPS_2: True
    test 232 EPS_2: 1.1102230246251565e-16

    test 233 EPS1: True
    test 234 EPS1+1: True
    test 235 EPS1-1: True

    test 236 EPS2: True
    test 237 EPS2: 4.440892098500626e-16

    test 238 EPS4: True
    test 239 EPS4: 8.881784197001252e-16

    test 240 INF: True
    test 241 INF: False
    test 242 NINF: True
    test 243 NINF: -inf

    test 244 INT0: 0
    test 245 INT0: True
    test 246 INT0: True
    test 247 INT0: False
    test 248 INT0: False
    test 249 INT0: False

    test 250 NAN: True
    test 251 NAN: False
    test 252 NAN: False

    test 253 NEG0: -0.0
    test 254 NEG0: True
    test 255 NEG0: False
    test 256 NEG0: 0.0

    test 257 _off90: True
    test 258 _off90: True
    test 259 float_: (1.0, 2.0, 3.0)
    test 260 float_: True

    test 261 _0_0: True

    test 262 _0_0s: 0
    test 263 _0_0s: 0
    test 264 _0_0s: 1
    test 265 _0_0s: 1
    test 266 _0_0s: 2
    test 267 _0_0s: 2
    test 268 _0_0s: 3
    test 269 _0_0s: 3
    test 270 _0_0s: 5
    test 271 _0_0s: 5
    test 272 _0_0s: 8
    test 273 _0_0s: 8
    test 274 _0_0s: 9
    test 275 _0_0s: 9
    test 276 _0_0s: 10
    test 277 _0_0s: 10
    test 278 _0_0s: 12
    test 279 _0_0s: 12
    test 280 _0_0s: 25
    test 281 _0_0s: 25
    test 282 _0_0s: 49
    test 283 _0_0s: 49
    test 284 _0_0s: 129
    test 285 _0_0s: 129
    test 286 _0_0s: 257
    test 287 _0_0s: 257

    10 of 287 testConstants.py tests (3.5%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.748 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testCss.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.CassiniSoldner from .css by testCss.py line 11
# lazily imported pygeodesy.Css from .css by testCss.py line 11
# lazily imported pygeodesy.CSSError from .css by testCss.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testCss.py line 11
# lazily imported pygeodesy.fstr from .streprs by testCss.py line 11
# lazily imported pygeodesy.haversine from .formy by testCss.py line 11
# lazily imported pygeodesy.hypot from .fmath by testCss.py line 11
# lazily imported pygeodesy.toCss from .css by testCss.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalNvector by testCss.py line 124
# lazily imported pygeodesy.ellipsoidalVincenty by testCss.py line 124

    testing testCss.py 23.03.27 (module pygeodesy.css 23.04.11) isLazy=3
# lazily imported pygeodesy.ellipsoidalKarney by testCss.py line 131
# lazily imported pygeodesy.ellipsoidalGeodSolve by testCss.py line 139
    test 1 CassiniSoldner(48.833333, 2.333333, name='Paris'): 48.833333 2.333333
    test 2 Exact: False
    test 3 forward: -37518.854545, 230003.561828
    test 4 reverse: 50.9, 1.8
    test 5 forward4: -37518.854545, 230003.561828, 89.586104, 0.999983
    test 6 equatorarc: 89.662511
    test 7 equatorazimuth: 39.192992
    test 8 copy(CassiniSoldner): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 9 CassiniSoldner.copy(): (<class 'pygeodesy.css.CassiniSoldner'>, True)
    test 10 reverse: 50.899937, 1.793161
    test 11 forward: -38000.0, 230000.0
    test 12 reverse4: 50.899937, 1.793161, 89.580797, 0.999982
    test 13 reverse(pygeodesy.ellipsoidalKarney): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 14 reverse(pygeodesy.ellipsoidalExact): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 15 reverse(pygeodesy.ellipsoidalNvector): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 16 reverse(pygeodesy.ellipsoidalVincenty): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 17 reverse(pygeodesy.ellipsoidalGeodSolve): LatLon(50°53′59.77″N, 001°47′35.38″E)
    test 18 CassiniSoldner(51.4934, 0.0098, name='Greenwich'): 51.4934 0.0098
    test 19 forward: 170557.151692, -293280.6051
    test 20 reverse: 48.833333, 2.333333
    test 21 hypot: 339268.707  FAILED, KNOWN, expected 338901.865
    test 22 toCss: -37518.854545 230003.561828 +1.00m
    test 23 toCss: [E:-37518.854545, N:230003.561828, H:+1.00m, name:'Calais', C:CassiniSoldner(48.833333, 2.333333, name='Paris')]
    test 24 Css.easting: -37518.854545
    test 25 Css.northing: 230003.561828
    test 26 Css.height: 1.0
    test 27 Css.azi: 89.586103815
    test 28 Css.rk: 0.999982722
    test 29 Css.name: Calais
    test 30 Css.cs0: 48.833333 2.333333
    test 31 Css.toLatLon: LatLon(50°54′00.0″N, 001°48′00.0″E, +1.00m)
    test 32 Css.toLatLon.height: 1.0
    test 33 Css.toLatLon.name: Calais
    test 34 Css.toLatLon.datum.name: WGS84
    test 35 Css.toLatLon.height: 1.0  FAILED, KNOWN, expected height(1.0)
    test 36 copy(Css): (<class 'pygeodesy.css.Css'>, True)
    test 37 Css.copy(): (<class 'pygeodesy.css.Css'>, True)
    test 38 cs0.name: Paris
    test 39 cs0.name: Default
    test 40 cs0.flattening: 0.003352811
    test 41 cs0.lat0: 0.0
    test 42 cs0.equatoradius: 6378137.0
    test 43 cs0.lat0: 0.0  FAILED, KNOWN, expected lat(0.0)
    test 44 classof.height: 1.0
    test 45 classof.azi: 89.586103815
    test 46 classof.rk: 0.999982722
    test 47 classof.name: Calais
    test 48 classof.cs0: 48.833333 2.333333
    test 49 cs0.latlon0: (48.833333, 2.333333)
    test 50 cs0.latlon0: (48.833333, 2.333333)
    test 51 cs0.latlon0: latlon0 (None): 'NoneType' object has no attribute 'lat'
    test 52 cs0.latlon0: (48.0, 2.0)
    test 53 datum: True
    test 54 datum: False
    test 55 forward6: (39142.269011, -229679.266845, 90.401497, 0.999981, 90.352206, 41.257592)

    3 of 55 testCss.py tests (5.5%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 7.431 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testDatums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Datum from .datums by testDatums.py line 11
# lazily imported pygeodesy.Datums from .datums by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testDatums.py line 11
# lazily imported pygeodesy.R_M from .constants by testDatums.py line 11
# lazily imported pygeodesy.Transform from .datums by testDatums.py line 11
# lazily imported pygeodesy.Transforms from .datums by testDatums.py line 11

    testing testDatums.py 23.03.27 (module pygeodesy.datums 23.03.29) isLazy=3
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 TestEllipsiod: name='TestEllipsiod', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000
    test 5 TestTransform: name='TestTransform', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0
    test 6 TestDatum: name='TestDatum', ellipsoid=Ellipsoids.TestEllipsiod, transform=Transforms.TestTransform
    test 7 ED50.inverse().inverse(): True
    test 8 Sphere: True

    test 9 BD72: name='BD72', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.BD72
    test 10 Intl1924: name='Intl1924', a=6378388, b=6356911.94612795, f_=297, f=0.003367, f2=0.00337838, n=0.00168634, e=0.08199189, e2=0.00672267, e22=0.00676817, e32=0.00337267, A=6367654.50005758, L=10002288.29898944, R1=6371229.31537598, R2=6371227.71133444, R3=6371221.26587487, Rbiaxial=6367659.02704315, Rtriaxial=6373025.77129687
    test 11 BD72: name='BD72', tx=106.86863, ty=-52.29778, tz=103.72389, rx=-0, ry=-0, rz=-0.00001, s=1.2727, s1=1, sx=-0.33657, sy=-0.45696, sz=-1.84218

    test 12 DHDN: name='DHDN', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.DHDN
    test 13 Bessel1841: name='Bessel1841', a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, A=6366742.52023395, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821523, Rbiaxial=6366746.98155108, Rtriaxial=6372074.29334012
    test 14 DHDN: name='DHDN', tx=-591.28, ty=-81.35, tz=-396.39, rx=0.00001, ry=-0, rz=-0.00001, s=-9.82, s1=0.99999, sx=1.477, sy=-0.0736, sz=-1.458

    test 15 ED50: name='ED50', ellipsoid=Ellipsoids.Intl1924, transform=Transforms.ED50
    test 16 Intl1924: name='Intl1924', a=6378388, b=6356911.94612795, f_=297, f=0.003367, f2=0.00337838, n=0.00168634, e=0.08199189, e2=0.00672267, e22=0.00676817, e32=0.00337267, A=6367654.50005758, L=10002288.29898944, R1=6371229.31537598, R2=6371227.71133444, R3=6371221.26587487, Rbiaxial=6367659.02704315, Rtriaxial=6373025.77129687
    test 17 ED50: name='ED50', tx=89.5, ty=93.8, tz=123.1, rx=0, ry=0, rz=0, s=-1.2, s1=1, sx=0, sy=0, sz=0.156

    test 18 GDA2020: name='GDA2020', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 19 GRS80: name='GRS80', a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 20 WGS84: name='WGS84', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 21 GRS80: name='GRS80', ellipsoid=Ellipsoids.GRS80, transform=Transforms.WGS84
    test 22 GRS80: name='GRS80', a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 23 WGS84: name='WGS84', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 24 Irl1975: name='Irl1975', ellipsoid=Ellipsoids.AiryModified, transform=Transforms.Irl1975
    test 25 AiryModified: name='AiryModified', a=6377340.189, b=6356034.44793853, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366691.77461988, L=10000776.05340819, R1=6370238.27531284, R2=6370236.69633043, R3=6370230.35179013, Rbiaxial=6366696.2307627, Rtriaxial=6372020.43236847
    test 26 Irl1975: name='Irl1975', tx=-482.53, ty=130.596, tz=-564.557, rx=-0.00001, ry=-0, rz=-0, s=-1.1, s1=1, sx=-1.042, sy=-0.214, sz=-0.631

    test 27 Krassovski1940: name='Krassovski1940', ellipsoid=Ellipsoids.Krassovski1940, transform=Transforms.Krassovski1940
    test 28 Krassovski1940: name='Krassovski1940', a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, A=6367558.49687498, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439, Rbiaxial=6367562.98435553, Rtriaxial=6372906.23027515
    test 29 Krassovski1940: name='Krassovski1940', tx=-24, ty=123, tz=94, rx=-0, ry=0, rz=0, s=-2.423, s1=1, sx=-0.02, sy=0.26, sz=0.13

    test 30 Krassowsky1940: name='Krassowsky1940', ellipsoid=Ellipsoids.Krassowsky1940, transform=Transforms.Krassowsky1940
    test 31 Krassowsky1940: name='Krassowsky1940', a=6378245, b=6356863.01877305, f_=298.3, f=0.00335233, f2=0.00336361, n=0.00167898, e=0.08181333, e2=0.00669342, e22=0.00673853, e32=0.00335795, A=6367558.49687498, L=10002137.49754285, R1=6371117.67292435, R2=6371116.08285656, R3=6371109.69367439, Rbiaxial=6367562.98435553, Rtriaxial=6372906.23027515
    test 32 Krassowsky1940: name='Krassowsky1940', tx=-24, ty=123, tz=94, rx=-0, ry=0, rz=0, s=-2.423, s1=1, sx=-0.02, sy=0.26, sz=0.13

    test 33 MGI: name='MGI', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.MGI
    test 34 Bessel1841: name='Bessel1841', a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, A=6366742.52023395, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821523, Rbiaxial=6366746.98155108, Rtriaxial=6372074.29334012
    test 35 MGI: name='MGI', tx=-577.326, ty=-90.129, tz=-463.92, rx=0.00002, ry=0.00001, rz=0.00003, s=-2.423, s1=1, sx=5.137, sy=1.474, sz=5.297

    test 36 NAD27: name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27
    test 37 Clarke1866: name='Clarke1866', a=6378206.4, b=6356583.8, f_=294.97869821, f=0.00339008, f2=0.00340161, n=0.00169792, e=0.08227185, e2=0.00676866, e22=0.00681478, e32=0.00339582, A=6367399.68916978, L=10001888.04298286, R1=6370998.86666667, R2=6370997.240633, R3=6370990.70659881, Rbiaxial=6367404.2783313, Rtriaxial=6372807.62791066
    test 38 NAD27: name='NAD27', tx=8, ty=-160, tz=-176, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 39 NAD83: name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83
    test 40 GRS80: name='GRS80', a=6378137, b=6356752.31414035, f_=298.2572221, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14577104, L=10001965.72923046, R1=6371008.77138012, R2=6371007.18088351, R3=6371000.78997414, Rbiaxial=6367453.634464, Rtriaxial=6372797.55593326
    test 41 NAD83: name='NAD83', tx=1.004, ty=-1.91, tz=-0.515, rx=0, ry=0, rz=0, s=-0.0015, s1=1, sx=0.0267, sy=0.00034, sz=0.011

    test 42 NTF: name='NTF', ellipsoid=Ellipsoids.Clarke1880IGN, transform=Transforms.NTF
    test 43 Clarke1880IGN: name='Clarke1880IGN', a=6378249.2, b=6356515, f_=293.46602129, f=0.00340755, f2=0.0034192, n=0.00170668, e=0.08248326, e2=0.00680349, e22=0.00685009, e32=0.00341336, A=6367386.73667336, L=10001867.69724907, R1=6371004.46666667, R2=6371002.82383112, R3=6370996.22212395, Rbiaxial=6367391.37333829, Rtriaxial=6372822.59907505
    test 44 NTF: name='NTF', tx=-168, ty=-60, tz=320, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 45 OSGB36: name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36
    test 46 Airy1830: name='Airy1830', a=6377563.396, b=6356256.90923729, f_=299.3249646, f=0.00334085, f2=0.00335205, n=0.00167322, e=0.08167337, e2=0.00667054, e22=0.00671533, e32=0.00334643, A=6366914.60892522, L=10001126.0807165, R1=6370461.23374576, R2=6370459.65470808, R3=6370453.30994572, Rbiaxial=6366919.065224, Rtriaxial=6372243.45317691
    test 47 OSGB36: name='OSGB36', tx=-446.448, ty=125.157, tz=-542.06, rx=-0, ry=-0, rz=-0, s=20.4894, s1=1.00002, sx=-0.1502, sy=-0.247, sz=-0.8421

    test 48 Potsdam: name='Potsdam', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.Bessel1841
    test 49 Bessel1841: name='Bessel1841', a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, A=6366742.52023395, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821523, Rbiaxial=6366746.98155108, Rtriaxial=6372074.29334012
    test 50 Bessel1841: name='Bessel1841', tx=-582, ty=-105, tz=-414, rx=-0.00001, ry=-0, rz=0.00001, s=-8.3, s1=0.99999, sx=-1.04, sy=-0.35, sz=3.08

    test 51 Sphere: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 52 Sphere: name='Sphere', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 53 WGS84: name='WGS84', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 54 TokyoJapan: name='TokyoJapan', ellipsoid=Ellipsoids.Bessel1841, transform=Transforms.TokyoJapan
    test 55 Bessel1841: name='Bessel1841', a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.00334277, f2=0.00335398, n=0.00167418, e=0.08169683, e2=0.00667437, e22=0.00671922, e32=0.00334836, A=6366742.52023395, L=10000855.76443237, R1=6370291.09093933, R2=6370289.51012659, R3=6370283.15821523, Rbiaxial=6366746.98155108, Rtriaxial=6372074.29334012
    test 56 TokyoJapan: name='TokyoJapan', tx=148, ty=-507, tz=-685, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 57 WGS72: name='WGS72', ellipsoid=Ellipsoids.WGS72, transform=Transforms.WGS72
    test 58 WGS72: name='WGS72', a=6378135, b=6356750.52001609, f_=298.26, f=0.00335278, f2=0.00336406, n=0.0016792, e=0.08181881, e2=0.00669432, e22=0.00673943, e32=0.0033584, A=6367447.24862383, L=10001962.74919858, R1=6371006.84000536, R2=6371005.24953886, R3=6370998.8587507, Rbiaxial=6367451.7372317, Rtriaxial=6372795.60727472
    test 59 WGS72: name='WGS72', tx=0, ty=0, tz=-4.5, rx=0, ry=0, rz=0, s=-0.22, s1=1, sx=0, sy=0, sz=0.554

    test 60 WGS84: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 61 WGS84: name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 62 WGS84: name='WGS84', tx=0, ty=0, tz=0, rx=0, ry=0, rz=0, s=0, s1=1, sx=0, sy=0, sz=0

    test 63 total: 18

    all 63 testDatums.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 12.508 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testDeprecated.py
./pygeodesy/deprecated/__init__.py:135: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW} has been DEPRECATED, use class L{HeightIDWeuclidean}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/__init__.py:149: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW2} has been DEPRECATED, use class L{HeightIDWequirectangular}.
  deprecated_class(self.__class__)
./pygeodesy/deprecated/__init__.py:164: DeprecationWarning: class L{pygeodesy.deprecated.HeightIDW3} has been DEPRECATED, use class L{HeightIDWhaversine}.
  deprecated_class(self.__class__)
./test/testDeprecated.py:38: DeprecationWarning: function L{pygeodesy.deprecated.areaof} has been DEPRECATED, use function L{pygeodesy.areaOf}.
  self.test('areaof', areaof(p, radius=R_MA), '7.086883e+09', fmt='%.6e')
./test/testDeprecated.py:41: DeprecationWarning: function L{pygeodesy.deprecated.bounds} has been DEPRECATED, use function L{pygeodesy.boundsOf}.
  b = map2(float, bounds(p))
./test/testDeprecated.py:44: DeprecationWarning: function L{pygeodesy.deprecated.anStr} has been DEPRECATED, use function L{pygeodesy.anstr}.
  self.test('anStr', anStr('a-b?_'), 'a-b__')
./test/testDeprecated.py:46: DeprecationWarning: function L{pygeodesy.deprecated.clipStr} has been DEPRECATED, use function L{pygeodesy.clips}.
  self.test('clipStr', clipStr('test/testBasics.py', limit=12), 'test/t....ics.py')
./test/testDeprecated.py:48: DeprecationWarning: function L{pygeodesy.deprecated.decodeEPSG2} has been DEPRECATED, use function L{epsg.decode2}.
  self.test('decodeEPSG2', decodeEPSG2(32712), "(12, 'S')")
./test/testDeprecated.py:49: DeprecationWarning: function L{pygeodesy.deprecated.encodeEPSG} has been DEPRECATED, use function L{epsg.encode}.
  self.test('encodeEPSG', encodeEPSG(12, hemipole='S'), '32712')
./test/testDeprecated.py:51: DeprecationWarning: function L{pygeodesy.deprecated.equirectangular3} has been DEPRECATED, use function C{equirectangular_}.
  t = equirectangular3(0, 2, 3, 4)
./test/testDeprecated.py:55: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-6), '0.123000')
./test/testDeprecated.py:56: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6), '0.123')
./test/testDeprecated.py:57: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr((0.123, 456.789), prec=+6), '0.123, 456.789')
./test/testDeprecated.py:58: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=-5, fmt='%.*e'), '1.23000e-01')
./test/testDeprecated.py:59: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+5, fmt='%.*e'), '1.23e-01')
./test/testDeprecated.py:60: DeprecationWarning: function L{pygeodesy.deprecated.fStr} has been DEPRECATED, use function L{fstr}.
  self.test('fStr', fStr(0.123, prec=+6, fmt='%.*f'), '0.123')
./test/testDeprecated.py:62: DeprecationWarning: function L{pygeodesy.deprecated.hypot3} has been DEPRECATED, use function L{pygeodesy.hypot_}.
  h = hypot3(3000, 200, 10)
./test/testDeprecated.py:67: DeprecationWarning: function L{pygeodesy.deprecated.isenclosedby} has been DEPRECATED, use function L{pygeodesy.isenclosedBy}.
  self.test('isenclosedby', isenclosedby(LatLon(45.5, 1.5), b), True)
./test/testDeprecated.py:71: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn3} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn3(p, b, adjust=False)
./test/testDeprecated.py:74: DeprecationWarning: function L{pygeodesy.deprecated.nearestOn4} has been DEPRECATED, use function L{pygeodesy.nearestOn5}.
  t = nearestOn4(p, b, adjust=False)
./test/testDeprecated.py:78: DeprecationWarning: function L{pygeodesy.deprecated.parseUTM} has been DEPRECATED, use function L{parseUTM5}.
  t = parseUTM('18 N 516620 4574500', Utm=None)  # Milford, PA
./test/testDeprecated.py:82: DeprecationWarning: function L{pygeodesy.deprecated.perimeterof} has been DEPRECATED, use function L{perimeterOf}.
  self.test('perimeterof', perimeterof(p, radius=R_MA), '2.687460e+05', fmt='%.6e')
./test/testDeprecated.py:85: DeprecationWarning: function L{pygeodesy.deprecated.polygon} has been DEPRECATED, use function L{points2}.
  self.test('polygon', polygon(p)[0], 3)
./test/testDeprecated.py:87: DeprecationWarning: function L{pygeodesy.deprecated.simplify2} has been DEPRECATED, use function L{pygeodesy.simplifyRW}.
  t = simplify2(RdpFFI, 16, adjust=True, shortest=False)
./test/testDeprecated.py:90: DeprecationWarning: function L{pygeodesy.deprecated.toUtm} has been DEPRECATED, use function L{pygeodesy.toUtm8}.
  t = toUtm('50°52′10″N', '115°39′03″W', Utm=None, name='Mt Assiniboine')
./test/testDeprecated.py:93: DeprecationWarning: function L{pygeodesy.deprecated.utmZoneBand2} has been DEPRECATED, use function L{pygeodesy.utmZoneBand5}.
  t = utmZoneBand2('50°52′10″N', '115°39′03″W')
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.R_MA from .constants by testDeprecated.py line 11
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241
# lazily imported pygeodesy.deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.isDEPRECATED from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDW from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDW2 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDW3 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testDeprecated.py line 11
# lazily imported pygeodesy.anStr from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.areaof from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.bounds from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.clipStr from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.decodeEPSG2 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.encodeEPSG from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.equirectangular3 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.fStr from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.hypot3 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.isenclosedby from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.nearestOn3 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.nearestOn4 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.parseUTM from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.perimeterof from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.polygon from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.simplify2 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.toUtm from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.utmZoneBand2 from .deprecated by testDeprecated.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testDeprecated.py 23.03.27 (module pygeodesy.deprecated 23.03.29) isLazy=3

    test 1 HeightIDW: True
    test 2 HeightIDW2: True
    test 3 HeightIDW3: True

    test 4 areaof: 7.086883e+09
    test 5 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 6 anStr: a-b__
    test 7 clipStr: test/t....ics.py
    test 8 decodeEPSG2: (12, 'S')
    test 9 encodeEPSG: 32712
    test 10 equirectangular3: 3
    test 11 equirectangular3: 12.997
    test 12 fStr: 0.123000
    test 13 fStr: 0.123
    test 14 fStr: 0.123, 456.789
    test 15 fStr: 1.23000e-01
    test 16 fStr: 1.23e-01
    test 17 fStr: 0.123
    test 18 hypot3: 3006.675905
    test 19 isenclosedby: True
    test 20 nearestOn3: 3
    test 21 nearestOn3: (45.5, 1.5)
    test 22 nearestOn4: 4
    test 23 nearestOn4: (45.5, 1.5)
    test 24 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 25 perimeterof: 2.687460e+05
    test 26 polygon: 3
    test 27 simplify2: 4
    test 28 toUtm: 6
    test 29 utmZoneBand2: (11, 'U')


    test 30 HeightIDW: True
    test 31 HeightIDW2: True
    test 32 HeightIDW3: True

    test 33 areaof: 7.086883e+09
    test 34 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 35 anStr: a-b__
    test 36 clipStr: test/t....ics.py
    test 37 decodeEPSG2: (12, 'S')
    test 38 encodeEPSG: 32712
    test 39 equirectangular3: 3
    test 40 equirectangular3: 12.997
    test 41 fStr: 0.123000
    test 42 fStr: 0.123
    test 43 fStr: 0.123, 456.789
    test 44 fStr: 1.23000e-01
    test 45 fStr: 1.23e-01
    test 46 fStr: 0.123
    test 47 hypot3: 3006.675905
    test 48 isenclosedby: True
    test 49 nearestOn3: 3
    test 50 nearestOn3: (45.5, 1.5)
    test 51 nearestOn4: 4
    test 52 nearestOn4: (45.5, 1.5)
    test 53 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 54 perimeterof: 2.687460e+05
    test 55 polygon: 3
    test 56 simplify2: 4
    test 57 toUtm: 6
    test 58 utmZoneBand2: (11, 'U')


    test 59 HeightIDW: True
    test 60 HeightIDW2: True
    test 61 HeightIDW3: True

    test 62 areaof: 7.086883e+09
    test 63 bounds: (-85.0, -180.0, 85.0, 90.0)
    test 64 anStr: a-b__
    test 65 clipStr: test/t....ics.py
    test 66 decodeEPSG2: (12, 'S')
    test 67 encodeEPSG: 32712
    test 68 equirectangular3: 3
    test 69 equirectangular3: 12.997
    test 70 fStr: 0.123000
    test 71 fStr: 0.123
    test 72 fStr: 0.123, 456.789
    test 73 fStr: 1.23000e-01
    test 74 fStr: 1.23e-01
    test 75 fStr: 0.123
    test 76 hypot3: 3006.675905
    test 77 isenclosedby: True
    test 78 nearestOn3: 3
    test 79 nearestOn3: (45.5, 1.5)
    test 80 nearestOn4: 4
    test 81 nearestOn4: (45.5, 1.5)
    test 82 parseUTM: (18, 'N', 516620.0, 4574500.0)
    test 83 perimeterof: 2.687460e+05
    test 84 polygon: 3
    test 85 simplify2: 4
    test 86 toUtm: 6
    test 87 utmZoneBand2: (11, 'U')

    test 88 isDEPRECATED(EPS1_2): True
    test 89 isDEPRECATED(MANTIS): True
    test 90 isDEPRECATED(OK): True
    test 91 isDEPRECATED(bases): True
    test 92 isDEPRECATED(datum): True
    test 93 isDEPRECATED(nvector): True
    test 94 isDEPRECATED(ClipCS3Tuple): True
    test 95 isDEPRECATED(EcefCartesian): True
    test 96 isDEPRECATED(EasNorExact4Tuple): True
    test 97 isDEPRECATED(HeightIDW): True
    test 98 isDEPRECATED(HeightIDW2): True
    test 99 isDEPRECATED(HeightIDW3): True
    test 100 isDEPRECATED(LatLonExact4Tuple): True
    test 101 isDEPRECATED(Ned3Tuple): True
    test 102 isDEPRECATED(RefFrameError): True
    test 103 isDEPRECATED(Rhumb7Tuple): True
    test 104 isDEPRECATED(Transform7Tuple): True
    test 105 isDEPRECATED(UtmUps4Tuple): True
    test 106 isDEPRECATED(anStr): True
    test 107 isDEPRECATED(areaof): True
    test 108 isDEPRECATED(bounds): True
    test 109 isDEPRECATED(clipCS3): True
    test 110 isDEPRECATED(clipDMS): True
    test 111 isDEPRECATED(clipStr): True
    test 112 isDEPRECATED(collins): True
    test 113 isDEPRECATED(decodeEPSG2): True
    test 114 isDEPRECATED(encodeEPSG): True
    test 115 isDEPRECATED(equirectangular3): True
    test 116 isDEPRECATED(enStr2): True
    test 117 isDEPRECATED(excessAbc): True
    test 118 isDEPRECATED(excessGirard): True
    test 119 isDEPRECATED(excessLHuilier): True
    test 120 isDEPRECATED(false2f): True
    test 121 isDEPRECATED(falsed2f): True
    test 122 isDEPRECATED(fStr): True
    test 123 isDEPRECATED(fStrzs): True
    test 124 isDEPRECATED(hypot3): True
    test 125 isDEPRECATED(inStr): True
    test 126 isDEPRECATED(isDEPRECATED): False  FAILED, KNOWN, expected True
    test 127 isDEPRECATED(isenclosedby): True
    test 128 isDEPRECATED(istuplist): True
    test 129 isDEPRECATED(joined): True
    test 130 isDEPRECATED(joined_): True
    test 131 isDEPRECATED(nearestOn3): True
    test 132 isDEPRECATED(nearestOn4): True
    test 133 isDEPRECATED(parseUTM): True
    test 134 isDEPRECATED(perimeterof): True
    test 135 isDEPRECATED(polygon): True
    test 136 isDEPRECATED(scalar): True
    test 137 isDEPRECATED(simplify2): True
    test 138 isDEPRECATED(tienstra): True
    test 139 isDEPRECATED(toUtm): True
    test 140 isDEPRECATED(unsign0): True
    test 141 isDEPRECATED(unStr): True
    test 142 isDEPRECATED(utmZoneBand2): True

    79 of 142 testDeprecated.py tests (55.6%) FAILED, incl. 1 KNOWN plus 78 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 14.596 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testDms.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60 from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60_ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DM__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DMS__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_DEG__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_MIN__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_SEC__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_RAD__ from .dms by testDms.py line 11
# lazily imported pygeodesy.F_D60__ from .dms by testDms.py line 11
# lazily imported pygeodesy.compassPoint from .dms by testDms.py line 11
# lazily imported pygeodesy.degDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.fstr from .streprs by testDms.py line 11
# lazily imported pygeodesy.parseDDDMMSS from .dms by testDms.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testDms.py line 11
# lazily imported pygeodesy.ParseError from .errors by testDms.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testDms.py line 11
# lazily imported pygeodesy.RangeError from .errors by testDms.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testDms.py line 11
# lazily imported pygeodesy.toDMS from .dms by testDms.py line 11

    testing testDms.py 23.03.27 (module pygeodesy.dms 23.03.19) isLazy=3
    test 1 parseDMS('0.0°'): 0.0
    test 2 parseDMS('0°'): 0.0
    test 3 parseDMS('000°00'00"'): 0.0
    test 4 parseDMS('000°00'00.0"'): 0.0
    test 5 parseDMS('000° 00'00"'): 0.0
    test 6 parseDMS('000°00 ' 00.0"'): 0.0
    test 7 parseDMS('000° 00' 00.0'): 0.0
    test 8 parseDMS('000°-00′-00.0"'): 0.0
    test 9 parseDDDMMSS(1): 1.0
    test 10 parseDMS(1): 1.0
    test 11 parseDDDMMSS(12): 12.0
    test 12 parseDMS(12): 12.0
    test 13 parseDDDMMSS(123): 123.0
    test 14 parseDMS(123): 123.0
    test 15 parseDDDMMSS(1234): 12.567
    test 16 parseDMS(1234): 1234.0
    test 17 parseDDDMMSS(12345): 123.75
    test 18 parseDMS(12345): 12345.0
    test 19 parseDDDMMSS(123456): 12.582
    test 20 parseDMS(123456): 123456.0
    test 21 parseDDDMMSS(1234567): 123.769
    test 22 parseDMS(1234567): 1234567.0
    test 23 parseDDDMMSS(12345678): 1234.955
    test 24 parseDMS(12345678): 12345678.0
    test 25 parseDDDMMSS(0.1): 0.1
    test 26 parseDMS(0.1): 0.1
    test 27 parseDDDMMSS(1.2): 1.2
    test 28 parseDMS(1.2): 1.2
    test 29 parseDDDMMSS(12.3): 12.3
    test 30 parseDMS(12.3): 12.3
    test 31 parseDDDMMSS(123.4): 123.4
    test 32 parseDMS(123.4): 123.4
    test 33 parseDDDMMSS(1234.5): 12.575
    test 34 parseDMS(1234.5): 1234.5
    test 35 parseDDDMMSS(12345.6): 123.76
    test 36 parseDMS(12345.6): 12345.6
    test 37 parseDDDMMSS(123456.7): 12.582
    test 38 parseDMS(123456.7): 123456.7
    test 39 parseDDDMMSS('1N'): 1.0
    test 40 parseDMS('1N'): 1.0
    test 41 parseDDDMMSS('12S'): -12.0
    test 42 parseDMS('12S'): -12.0
    test 43 parseDDDMMSS('012.3W'): -12.3
    test 44 parseDMS('012.3W'): -12.3
    test 45 parseDDDMMSS('123E'): 123.0
    test 46 parseDMS('123E'): 123.0
    test 47 parseDDDMMSS('1234N'): 12.567
    test 48 parseDMS('1234N'): 1234.0
    test 49 parseDDDMMSS('12345E'): 123.75
    test 50 parseDMS('12345E'): 12345.0
    test 51 parseDDDMMSS('1234.5S'): -12.575
    test 52 parseDMS('1234.5S'): -1234.5
    test 53 parseDDDMMSS('12345.6E'): 123.76
    test 54 parseDMS('12345.6E'): 12345.6
    test 55 parseDDDMMSS('123456.7S'): -12.582
    test 56 parseDMS('123456.7S'): -123456.7
    test 57 parseDDDMMSS('1234567.8W'): -123.769
    test 58 parseDMS('1234567.8W'): -1234567.8
    test 59 parseDDDMMSS('12345678E'): 12345678.0
    test 60 parseDMS('12345678E'): 12345678.0
    test 61 parseDDDMMSS(345.0, NS): 3.75
    test 62 parseDDDMMSS(345.0, EW): 345.0
    test 63 parseDDDMMSS(5430.0, NS): 54.5
    test 64 parseDDDMMSS(5430.0, EW): 54.5
    test 65 parseDDDMMSS(76.5432, sexagecimal=False): 76.5432
    test 66 parseDDDMMSS(76.5432, sexagecimal=True): 76.9089
    test 67 parseDDDMMSS(00.0102, sexagecimal=False): 0.0102
    test 68 parseDDDMMSS(00.0102, sexagecimal=True): 0.0172
    test 69 parseDDDMMSS('12E'): ParseError("sexagecimal (False), strDDDMMSS ('12E') or suffix ('NSEW'): form DD applies N-S: invalid")
    test 70 parseDMS('12E'): 12.0
    test 71 parseDDDMMSS('012.3S'): ParseError("sexagecimal (False), strDDDMMSS ('012.3S') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 72 parseDMS('012.3S'): -12.3
    test 73 parseDDDMMSS('123N'): ParseError("sexagecimal (False), strDDDMMSS ('123N') or suffix ('NSEW'): form DDD applies E-W: invalid")
    test 74 parseDMS('123N'): 123.0
    test 75 parseDDDMMSS('1234E'): ParseError("sexagecimal (False), strDDDMMSS ('1234E') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 76 parseDMS('1234E'): 1234.0
    test 77 parseDDDMMSS('12345N'): ParseError("sexagecimal (False), strDDDMMSS ('12345N') or suffix ('NSEW'): form DDDMM applies E-W: invalid")
    test 78 parseDMS('12345N'): 12345.0
    test 79 parseDDDMMSS('1234.5W'): ParseError("sexagecimal (False), strDDDMMSS ('1234.5W') or suffix ('NSEW'): form DDMM applies N-S: invalid")
    test 80 parseDMS('1234.5W'): -1234.5
    test 81 parseDDDMMSS('123456E'): ParseError("sexagecimal (False), strDDDMMSS ('123456E') or suffix ('NSEW'): form DDMMSS applies N-S: invalid")
    test 82 parseDMS('123456E'): 123456.0
    test 83 parseDDDMMSS('1234567S'): ParseError("sexagecimal (False), strDDDMMSS ('1234567S') or suffix ('NSEW'): form DDDMMSS applies E-W: invalid")
    test 84 parseDMS('1234567S'): -1234567.0
    test 85 parseDMS: strDMS (181) or suffix ('NSEW'): 181 beyond 180.0 degrees
    test 86 parseDMS: -90.0
    test 87 parse3llh: 51.477811, -0.001475, 0.0
    test 88 toDMS(dm): 46°00.0′
    test 89 toDMS(dm): 46°00.0′
    test 90 toDMS(dm): 45°59.99′
    test 91 toDMS(dm): 45°59.999′
    test 92 toDMS(dms): 46°00′00.0″
    test 93 toDMS(dms): 45°59′59.96″
    test 94 toDMS(dms): 45°59′59.964″
    test 95 toDMS(d60): 45.5959964
    test 96 toDMS(d60): 45°45′45.36″
    test 97 toDMS(d60): 45d45m45.36s
    test 98 normDMS: 45°45′45.36″
    test 99 parseDMS: 45.7626
    test 100 toDMS(d): 45.7626°
    test 101 toDMS(d): -45.7626°
    test 102 toDMS(dm): 45°45.756′
    test 103 toDMS(dm): -45°45.756′
    test 104 toDMS(dms): 45°45′45.36″
    test 105 toDMS(dms): -45°45′45.36″
    test 106 toDMS(deg): 45.7626
    test 107 toDMS(deg): -45.7626
    test 108 toDMS(min): 4545.756
    test 109 toDMS(min): -4545.756
    test 110 toDMS(sec): 454545.36
    test 111 toDMS(sec): -454545.36
    test 112 toDMS(rad): 0.79871
    test 113 toDMS(rad): -0.79871
    test 114 toDMS(d60): 45.4545
    test 115 toDMS(d60): -45.4545
    test 116 toDMS(d): 45.7626°
    test 117 toDMS(d): -45.7626°
    test 118 toDMS(dm): 45°45.7560′
    test 119 toDMS(dm): -45°45.7560′
    test 120 toDMS(dms): 45°45′45.36″
    test 121 toDMS(dms): -45°45′45.36″
    test 122 toDMS(deg): 45.762600
    test 123 toDMS(deg): -45.762600
    test 124 toDMS(min): 4545.75600
    test 125 toDMS(min): -4545.75600
    test 126 toDMS(sec): 454545.360
    test 127 toDMS(sec): -454545.360
    test 128 toDMS(rad): 0.798708
    test 129 toDMS(rad): -0.798708
    test 130 toDMS(d60): 45.4545360
    test 131 toDMS(d60): -45.4545360
    test 132 toDMS(-d): 45.7626°
    test 133 toDMS(-d): -45.7626°
    test 134 toDMS(-dm): 45°45.7560′
    test 135 toDMS(-dm): -45°45.7560′
    test 136 toDMS(-dms): 45°45′45.36″
    test 137 toDMS(-dms): -45°45′45.36″
    test 138 toDMS(-deg): 45.762600
    test 139 toDMS(-deg): -45.762600
    test 140 toDMS(-min): 4545.75600
    test 141 toDMS(-min): -4545.75600
    test 142 toDMS(-sec): 454545.360
    test 143 toDMS(-sec): -454545.360
    test 144 toDMS(-rad): 0.798708
    test 145 toDMS(-rad): -0.798708
    test 146 toDMS(-d60): 45.45453600
    test 147 toDMS(-d60): -45.45453600
    test 148 toDMS(+d): +45.7626°
    test 149 toDMS(+d): -45.7626°
    test 150 toDMS(+dm): +45°45.7560′
    test 151 toDMS(+dm): -45°45.7560′
    test 152 toDMS(+dms): +45°45′45.36″
    test 153 toDMS(+dms): -45°45′45.36″
    test 154 toDMS(+deg): +45.762600
    test 155 toDMS(+deg): -45.762600
    test 156 toDMS(+min): +4545.75600
    test 157 toDMS(+min): -4545.75600
    test 158 toDMS(+sec): +454545.360
    test 159 toDMS(+sec): -454545.360
    test 160 toDMS(+rad): +0.798708
    test 161 toDMS(+rad): -0.798708
    test 162 toDMS(+d60): +45.454536
    test 163 toDMS(+d60): -45.454536
    test 164 compassPoint(1,): N
    test 165 compassPoint(0,): N
    test 166 compassPoint(-1,): N
    test 167 compassPoint(359,): N
    test 168 compassPoint(24,): NNE
    test 169 compassPoint(24, 1): N
    test 170 compassPoint(24, 2): NE
    test 171 compassPoint(24, 3): NNE
    test 172 compassPoint(226,): SW
    test 173 compassPoint(226, 1): W
    test 174 compassPoint(226, 2): SW
    test 175 compassPoint(226, 3): SW
    test 176 compassPoint(237,): WSW
    test 177 compassPoint(237, 1): W
    test 178 compassPoint(237, 2): SW
    test 179 compassPoint(237, 3): WSW
    test 180 compassPoint(11.25,): NNE
    test 181 compassPoint(11.249,): N
    test 182 compassPoint(-11.25,): N
    test 183 compassPoint(348.749,): NNW
    test 184 compassPoint(45, 1): E
    test 185 compassPoint(44.99, 1): N
    test 186 compassPoint(45, 2): NE
    test 187 compassPoint(44.99, 2): NE
    test 188 compassPoint(45, 3): NE
    test 189 compassPoint(44.99, 3): NE
    test 190 compassPoint(45, 4): NE
    test 191 compassPoint(44.99, 4): NE
    test 192 compassPoint(22.5, 1): N
    test 193 compassPoint(22.49, 1): N
    test 194 compassPoint(22.5, 2): NE
    test 195 compassPoint(22.49, 2): N
    test 196 compassPoint(22.5, 3): NNE
    test 197 compassPoint(22.49, 3): NNE
    test 198 compassPoint(22.5, 4): NNE
    test 199 compassPoint(22.49, 4): NNE
    test 200 compassPoint(11.25, 1): N
    test 201 compassPoint(11.249, 1): N
    test 202 compassPoint(11.25, 2): N
    test 203 compassPoint(11.249, 2): N
    test 204 compassPoint(11.25, 3): NNE
    test 205 compassPoint(11.249, 3): N
    test 206 compassPoint(11.25, 4): NbE
    test 207 compassPoint(11.249, 4): NbE
    test 208 compassPoint(24, 1): N
    test 209 compassPoint(24, 2): NE
    test 210 compassPoint(24, 3): NNE
    test 211 compassPoint(24,): NNE
    test 212 compassPoint(18, 3): NNE
    test 213 compassPoint(11, 4): NbE
    test 214 compassPoint(30, 4): NEbN
    test 215 compassPoint(11.25): NbE
    test 216 compassPoint(33.75): NEbN
    test 217 compassPoint(56.25): NEbE
    test 218 compassPoint(78.75): EbN
    test 219 compassPoint(101.25): EbS
    test 220 compassPoint(123.75): SEbE
    test 221 compassPoint(146.25): SEbS
    test 222 compassPoint(168.75): SbE
    test 223 compassPoint(191.25): SbW
    test 224 compassPoint(213.75): SWbS
    test 225 compassPoint(236.25): SWbW
    test 226 compassPoint(258.75): WbS
    test 227 compassPoint(281.25): WbN
    test 228 compassPoint(303.75): NWbW
    test 229 compassPoint(326.25): NWbN
    test 230 compassPoint(348.75): NbW
    test 231 _DEG: +1.0101
    test 232 _MIN: +0.606′
    test 233 _SEC: +36.36″

    all 233 testDms.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 2.794 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEcef.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Datums from .datums by testEcef.py line 11
# lazily imported pygeodesy.EcefError from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefMatrix from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testEcef.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testEcef.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEcef.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEcef.py line 11
# lazily imported pygeodesy.latDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testEcef.py line 11
# lazily imported pygeodesy.parse3llh from .dms by testEcef.py line 11
# lazily imported pygeodesy.sphericalNvector by testEcef.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testEcef.py line 240
# lazily imported pygeodesy.ellipsoidalKarney by testEcef.py line 240
# lazily imported pygeodesy.ellipsoidalNvector by testEcef.py line 240
# lazily imported pygeodesy.ellipsoidalVincenty by testEcef.py line 240
# lazily imported pygeodesy.sphericalTrigonometry by testEcef.py line 240

    testing testEcef.py 23.03.27 isLazy=3

    test 1 EcefKarney: ...
    test 2 name: Test
    test 3 toStr: EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefKarney
    test 4 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefKarney
    test 5 copy(EcefKarney): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 6 EcefKarney.copy(): (<class 'pygeodesy.ecef.EcefKarney'>, True)
    test 7 forward: 27.99, 86.93, 8820.0
    test 8 forward: 302271.4, 5635928.4, 2979666.1
    test 9 name: Test
    test 10 reverse: 302271.4, 5635928.4, 2979666.1
    test 11 reverse: 27.99, 86.93, 8820.01
    test 12 case: 2
    test 13 iteration: None
    test 14 name: Test
    test 15 reverse: 302000.0, 5636000.0, 2980000.0
    test 16 reverse: 27.99, 86.93, 9027.03
    test 17 case: 2
    test 18 iteration: None
    test 19 forward: 27.99, 86.93, 8820.0
    test 20 forward: 302271.43, 5635928.37, 2979666.13
    test 21 forward: 33.3, 44.4, 6000.0
    test 22 forward: 3816209.6, 3737108.55, 3485109.57
    test 23 reverse: 3816209.6, 3737108.55, 3485109.57
    test 24 reverse: 33.3, 44.4, 5999.996
    test 25 case: 2
    test 26 iteration: None
    test 27 reverse: 30000.0, 30000.0, 0.0
    test 28 reverse: 6.483, 45.0, -6335709.726
    test 29 case: 3
    test 30 iteration: None
    test 31 forward: 6.483, 45.0, -6335709.726
    test 32 forward: 30000.0, 30000.0, -0.0
    test 33 Vermeille: -168.919
    test 34 Vermeille: 190.939
    test 35 Vermeille: (65.772506, 169.060801)
    test 36 Vermeille: (1.147947, 3.141593)
    test 37 reverse-1: 45.0, 120.0, 1000.0
    test 38 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 39 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 40 philam-1: 0.7854, 2.0944
    test 41 reverse-2: 45.0, 120.0, 2000.0
    test 42 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 43 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 44 philam-2: 0.7854, 2.0944
    test 45 reverse-3: 45.0, 120.0, 3000.0
    test 46 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 47 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 48 philam-3: 0.7854, 2.0944
    test 49 reverse-4: 45.0, 120.0, 4000.0
    test 50 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 51 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 52 philam-4: 0.7854, 2.0944
    test 53 reverse-5: 45.0, 120.0, 10000.0
    test 54 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 55 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 56 philam-5: 0.7854, 2.0944
    test 57 reverse-6: 45.0, 120.0, 20000.0
    test 58 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 59 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 60 philam-6: 0.7854, 2.0944
    test 61 reverse-7: 45.0, 120.0, 100000.0
    test 62 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 63 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 64 philam-7: 0.7854, 2.0944
    test 65 reverse-8: 45.0, 120.0, 800000.0
    test 66 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 67 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 68 philam-8: 0.7854, 2.0944
    test 69 reverse-9: 45.0, 120.0, 1000000.0
    test 70 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 71 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 72 philam-9: 0.7854, 2.0944
    test 73 sudano: 45.0, 0.0, 100000.0
    test 74 name: OS-UK
    test 75 forward: 53.61199036, -1.66444222, 299.8
    test 76 forward: 3790644.9, -110149.21, 5111482.97
    test 77 reverse: 3790644.9, -110149.21, 5111482.97
    test 78 reverse: 53.61199036, -1.66444223
    test 79 reverse.lat: 53°36′43.1653″N
    test 80 reverse.lon: 001°39′51.992″W
    test 81 reverse.height: 299.800
    test 82 case: 2
    test 83 iteration: None
    test 84 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 85 reverse: 34.0, -117.333569, 251.702
    test 86 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 87 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 88 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 89 EcefKarney: EcefKarney(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefKarney

    test 90 EcefFarrell21: ...
    test 91 name: Test
    test 92 toStr: EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell21
    test 93 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell21
    test 94 copy(EcefFarrell21): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 95 EcefFarrell21.copy(): (<class 'pygeodesy.ecef.EcefFarrell21'>, True)
    test 96 forward: 27.99, 86.93, 8820.0
    test 97 forward: 302271.4, 5635928.4, 2979666.1
    test 98 name: Test
    test 99 reverse: 302271.4, 5635928.4, 2979666.1
    test 100 reverse: 27.99, 86.93, 8820.01
    test 101 case: 1
    test 102 iteration: None
    test 103 name: Test
    test 104 reverse: 302000.0, 5636000.0, 2980000.0
    test 105 reverse: 27.99, 86.93, 9027.03
    test 106 case: 1
    test 107 iteration: None
    test 108 forward: 27.99, 86.93, 8820.0
    test 109 forward: 302271.43, 5635928.37, 2979666.13
    test 110 forward: 33.3, 44.4, 6000.0
    test 111 forward: 3816209.6, 3737108.55, 3485109.57
    test 112 reverse: 3816209.6, 3737108.55, 3485109.57
    test 113 reverse: 33.3, 44.4, 5999.996
    test 114 case: 1
    test 115 iteration: None
    test 116 reverse: 30000.0, 30000.0, 0.0
    test 117 reverse: 0.0, 45.0, -6335168.061  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 118 case: 1
    test 119 iteration: None
    test 120 forward: 6.483, 45.0, -6335709.726
    test 121 forward: 30000.0, 30000.0, -0.0
    test 122 Vermeille: -168.919
    test 123 Vermeille: 190.939
    test 124 Vermeille: (65.772506, 169.060801)
    test 125 Vermeille: (1.147947, 3.141593)
    test 126 reverse-1: 45.0, 120.0, 1000.0
    test 127 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 128 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 129 philam-1: 0.7854, 2.0944
    test 130 reverse-2: 45.0, 120.0, 2000.0
    test 131 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 132 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 133 philam-2: 0.7854, 2.0944
    test 134 reverse-3: 45.0, 120.0, 3000.0
    test 135 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 136 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 137 philam-3: 0.7854, 2.0944
    test 138 reverse-4: 45.0, 120.0, 4000.0
    test 139 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 140 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 141 philam-4: 0.7854, 2.0944
    test 142 reverse-5: 45.0, 120.0, 10000.0
    test 143 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 144 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 145 philam-5: 0.7854, 2.0944
    test 146 reverse-6: 45.0, 120.0, 20000.0
    test 147 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 148 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 149 philam-6: 0.7854, 2.0944
    test 150 reverse-7: 45.0, 120.0, 100000.0
    test 151 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 152 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 153 philam-7: 0.7854, 2.0944
    test 154 reverse-8: 45.0, 120.0, 800000.0
    test 155 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 156 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 157 philam-8: 0.7854, 2.0944
    test 158 reverse-9: 45.0, 120.0, 1000000.0
    test 159 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 160 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 161 philam-9: 0.7854, 2.0944
    test 162 sudano: 45.0, 0.0, 100000.0
    test 163 name: OS-UK
    test 164 forward: 53.61199036, -1.66444222, 299.8
    test 165 forward: 3790644.9, -110149.21, 5111482.97
    test 166 reverse: 3790644.9, -110149.21, 5111482.97
    test 167 reverse: 53.61199036, -1.66444223
    test 168 reverse.lat: 53°36′43.1653″N
    test 169 reverse.lon: 001°39′51.992″W
    test 170 reverse.height: 299.800
    test 171 case: 1
    test 172 iteration: None
    test 173 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 174 reverse: 34.0, -117.333569, 251.702
    test 175 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 176 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6292741.654168, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 177 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 178 EcefFarrell21: EcefFarrell21(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell21

    test 179 EcefFarrell22: ...
    test 180 name: Test
    test 181 toStr: EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefFarrell22
    test 182 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefFarrell22
    test 183 copy(EcefFarrell22): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 184 EcefFarrell22.copy(): (<class 'pygeodesy.ecef.EcefFarrell22'>, True)
    test 185 forward: 27.99, 86.93, 8820.0
    test 186 forward: 302271.4, 5635928.4, 2979666.1
    test 187 name: Test
    test 188 reverse: 302271.4, 5635928.4, 2979666.1
    test 189 reverse: 27.99, 86.93, 8820.01
    test 190 case: 1
    test 191 iteration: None
    test 192 name: Test
    test 193 reverse: 302000.0, 5636000.0, 2980000.0
    test 194 reverse: 27.99, 86.93, 9027.03
    test 195 case: 1
    test 196 iteration: None
    test 197 forward: 27.99, 86.93, 8820.0
    test 198 forward: 302271.43, 5635928.37, 2979666.13
    test 199 forward: 33.3, 44.4, 6000.0
    test 200 forward: 3816209.6, 3737108.55, 3485109.57
    test 201 reverse: 3816209.6, 3737108.55, 3485109.57
    test 202 reverse: 33.3, 44.4, 5999.996
    test 203 case: 1
    test 204 iteration: None
    test 205 reverse: 30000.0, 30000.0, 0.0
    test 206 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 207 case: 1
    test 208 iteration: None
    test 209 forward: 6.483, 45.0, -6335709.726
    test 210 forward: 30000.0, 30000.0, -0.0
    test 211 Vermeille: -168.919
    test 212 Vermeille: 190.939
    test 213 Vermeille: (65.772506, 169.060801)
    test 214 Vermeille: (1.147947, 3.141593)
    test 215 reverse-1: 45.0, 120.0, 1000.0
    test 216 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 217 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 218 philam-1: 0.7854, 2.0944
    test 219 reverse-2: 45.0, 120.0, 2000.0
    test 220 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 221 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 222 philam-2: 0.7854, 2.0944
    test 223 reverse-3: 45.0, 120.0, 3000.0
    test 224 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 225 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 226 philam-3: 0.7854, 2.0944
    test 227 reverse-4: 45.0, 120.0, 4000.0
    test 228 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 229 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 230 philam-4: 0.7854, 2.0944
    test 231 reverse-5: 45.0, 120.0, 10000.0
    test 232 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 233 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 234 philam-5: 0.7854, 2.0944
    test 235 reverse-6: 45.0, 120.0, 20000.0
    test 236 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 237 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 238 philam-6: 0.7854, 2.0944
    test 239 reverse-7: 45.0, 120.0, 100000.0
    test 240 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 241 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 242 philam-7: 0.7854, 2.0944
    test 243 reverse-8: 45.0, 120.0, 800000.005  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 244 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 245 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 246 philam-8: 0.7854, 2.0944
    test 247 reverse-9: 45.0, 120.0, 1000000.007  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 248 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 249 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 250 philam-9: 0.7854, 2.0944
    test 251 sudano: 45.0, 0.0, 100000.0
    test 252 name: OS-UK
    test 253 forward: 53.61199036, -1.66444222, 299.8
    test 254 forward: 3790644.9, -110149.21, 5111482.97
    test 255 reverse: 3790644.9, -110149.21, 5111482.97
    test 256 reverse: 53.61199036, -1.66444223
    test 257 reverse.lat: 53°36′43.1653″N
    test 258 reverse.lon: 001°39′51.992″W
    test 259 reverse.height: 299.800
    test 260 case: 1
    test 261 iteration: None
    test 262 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 263 reverse: 34.0, -117.333569, 251.702
    test 264 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 265 EcefError: (0.0, 0.0, 0.0, -180.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 266 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 267 EcefFarrell22: EcefFarrell22(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefFarrell22

    test 268 EcefVeness: ...
    test 269 name: Test
    test 270 toStr: EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefVeness
    test 271 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefVeness
    test 272 copy(EcefVeness): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 273 EcefVeness.copy(): (<class 'pygeodesy.ecef.EcefVeness'>, True)
    test 274 forward: 27.99, 86.93, 8820.0
    test 275 forward: 302271.4, 5635928.4, 2979666.1
    test 276 name: Test
    test 277 reverse: 302271.4, 5635928.4, 2979666.1
    test 278 reverse: 27.99, 86.93, 8820.01
    test 279 case: 1
    test 280 iteration: None
    test 281 name: Test
    test 282 reverse: 302000.0, 5636000.0, 2980000.0
    test 283 reverse: 27.99, 86.93, 9027.03
    test 284 case: 1
    test 285 iteration: None
    test 286 forward: 27.99, 86.93, 8820.0
    test 287 forward: 302271.43, 5635928.37, 2979666.13
    test 288 forward: 33.3, 44.4, 6000.0
    test 289 forward: 3816209.6, 3737108.55, 3485109.57
    test 290 reverse: 3816209.6, 3737108.55, 3485109.57
    test 291 reverse: 33.3, 44.4, 5999.996
    test 292 case: 1
    test 293 iteration: None
    test 294 reverse: 30000.0, 30000.0, 0.0
    test 295 reverse: -180.0, 45.0, -6420563.407  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 296 case: 1
    test 297 iteration: None
    test 298 forward: 6.483, 45.0, -6335709.726
    test 299 forward: 30000.0, 30000.0, -0.0
    test 300 Vermeille: -168.919
    test 301 Vermeille: 190.939
    test 302 Vermeille: (65.772506, 169.060801)
    test 303 Vermeille: (1.147947, 3.141593)
    test 304 reverse-1: 45.0, 120.0, 1000.0
    test 305 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 306 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 307 philam-1: 0.7854, 2.0944
    test 308 reverse-2: 45.0, 120.0, 2000.0
    test 309 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 310 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 311 philam-2: 0.7854, 2.0944
    test 312 reverse-3: 45.0, 120.0, 3000.0
    test 313 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 314 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 315 philam-3: 0.7854, 2.0944
    test 316 reverse-4: 45.0, 120.0, 4000.0
    test 317 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 318 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 319 philam-4: 0.7854, 2.0944
    test 320 reverse-5: 45.0, 120.0, 10000.0
    test 321 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 322 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 323 philam-5: 0.7854, 2.0944
    test 324 reverse-6: 45.0, 120.0, 20000.0
    test 325 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 326 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 327 philam-6: 0.7854, 2.0944
    test 328 reverse-7: 45.0, 120.0, 100000.0
    test 329 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 330 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 331 philam-7: 0.7854, 2.0944
    test 332 reverse-8: 45.0, 120.0, 800000.0
    test 333 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 334 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 335 philam-8: 0.7854, 2.0944
    test 336 reverse-9: 45.0, 120.0, 1000000.0
    test 337 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 338 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 339 philam-9: 0.7854, 2.0944
    test 340 sudano: 45.0, 0.0, 100000.0
    test 341 name: OS-UK
    test 342 forward: 53.61199036, -1.66444222, 299.8
    test 343 forward: 3790644.9, -110149.21, 5111482.97
    test 344 reverse: 3790644.9, -110149.21, 5111482.97
    test 345 reverse: 53.61199036, -1.66444223
    test 346 reverse.lat: 53°36′43.1653″N
    test 347 reverse.lon: 001°39′51.992″W
    test 348 reverse.height: 299.800
    test 349 case: 1
    test 350 iteration: None
    test 351 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 352 reverse: 34.0, -117.333569, 251.702
    test 353 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 354 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 3, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 355 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 356 EcefVeness: EcefVeness(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefVeness

    test 357 EcefSudano: ...
    test 358 name: Test
    test 359 toStr: EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefSudano
    test 360 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefSudano
    test 361 copy(EcefSudano): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 362 EcefSudano.copy(): (<class 'pygeodesy.ecef.EcefSudano'>, True)
    test 363 forward: 27.99, 86.93, 8820.0
    test 364 forward: 302271.4, 5635928.4, 2979666.1
    test 365 name: Test
    test 366 reverse: 302271.4, 5635928.4, 2979666.1
    test 367 reverse: 28.01, 86.93, 8819.58  FAILED, KNOWN, expected 27.99, 86.93, 8820.01
    test 368 case: 6
    test 369 iteration: 6
    test 370 name: Test
    test 371 reverse: 302000.0, 5636000.0, 2980000.0
    test 372 reverse: 28.01, 86.93, 9026.6  FAILED, KNOWN, expected 27.99, 86.93, 9027.03
    test 373 case: 6
    test 374 iteration: 6
    test 375 forward: 27.99, 86.93, 8820.0
    test 376 forward: 302271.43, 5635928.37, 2979666.13
    test 377 forward: 33.3, 44.4, 6000.0
    test 378 forward: 3816209.6, 3737108.55, 3485109.57
    test 379 reverse: 3816209.6, 3737108.55, 3485109.57
    test 380 reverse: 33.335, 44.4, 5998.836  FAILED, KNOWN, expected 33.3, 44.4, 5999.996
    test 381 case: 6
    test 382 iteration: 6
    test 383 reverse: 30000.0, 30000.0, 0.0
    test 384 reverse: 0.0, 45.0, -6335710.593  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 385 case: 1
    test 386 iteration: 1
    test 387 forward: 6.483, 45.0, -6335709.726
    test 388 forward: 30000.0, 30000.0, -0.0
    test 389 Vermeille: -168.919
    test 390 Vermeille: 190.939
    test 391 Vermeille: (65.979481, 169.060801)  FAILED, KNOWN, expected (65.772506, 169.060801)
    test 392 Vermeille: (1.151559, 3.141593)  FAILED, KNOWN, expected (1.147947, 3.141593)
    test 393 reverse-1: 45.08, 120.0, 993.852  FAILED, KNOWN, expected 45.0, 120.0, 1000.0
    test 394 forward-1: -2256016.0, 3907534.4, 4494304.0  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5
    test 395 xyzh-1: -2256016.0, 3907534.4, 4494304.0, 993.9  FAILED, KNOWN, expected -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 396 philam-1: 0.7868, 2.0944
    test 397 reverse-2: 45.08, 120.0, 1993.853  FAILED, KNOWN, expected 45.0, 120.0, 2000.0
    test 398 forward-2: -2256369.6, 3908146.8, 4495011.2  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6
    test 399 xyzh-2: -2256369.6, 3908146.8, 4495011.2, 1993.9  FAILED, KNOWN, expected -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 400 philam-2: 0.7868, 2.0944
    test 401 reverse-3: 45.08, 120.0, 2993.854  FAILED, KNOWN, expected 45.0, 120.0, 3000.0
    test 402 forward-3: -2256723.1, 3908759.1, 4495718.3  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7
    test 403 xyzh-3: -2256723.1, 3908759.1, 4495718.3, 2993.9  FAILED, KNOWN, expected -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 404 philam-3: 0.7868, 2.0944
    test 405 reverse-4: 45.08, 120.0, 3993.855  FAILED, KNOWN, expected 45.0, 120.0, 4000.0
    test 406 forward-4: -2257076.7, 3909371.5, 4496425.4  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8
    test 407 xyzh-4: -2257076.7, 3909371.5, 4496425.4, 3993.9  FAILED, KNOWN, expected -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 408 philam-4: 0.7868, 2.0944
    test 409 reverse-5: 45.08, 120.0, 9993.861  FAILED, KNOWN, expected 45.0, 120.0, 10000.0
    test 410 forward-5: -2259198.0, 3913045.8, 4500668.0  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5
    test 411 xyzh-5: -2259198.0, 3913045.8, 4500668.0, 9993.9  FAILED, KNOWN, expected -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 412 philam-5: 0.7868, 2.0944
    test 413 reverse-6: 45.079, 120.0, 19993.87  FAILED, KNOWN, expected 45.0, 120.0, 20000.0
    test 414 forward-6: -2262733.6, 3919169.6, 4507739.0  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5
    test 415 xyzh-6: -2262733.6, 3919169.6, 4507739.0, 19993.9  FAILED, KNOWN, expected -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 416 philam-6: 0.7868, 2.0944
    test 417 reverse-7: 45.078, 120.0, 99993.947  FAILED, KNOWN, expected 45.0, 120.0, 100000.0
    test 418 forward-7: -2291018.1, 3968159.8, 4564307.3  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1
    test 419 xyzh-7: -2291018.1, 3968159.8, 4564307.3, 99993.9  FAILED, KNOWN, expected -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 420 philam-7: 0.7868, 2.0944
    test 421 reverse-8: 45.071, 120.0, 799994.544  FAILED, KNOWN, expected 45.0, 120.0, 800000.0
    test 422 forward-8: -2538507.3, 4396823.7, 5059280.0  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8
    test 423 xyzh-8: -2538507.3, 4396823.7, 5059280.0, 799994.5  FAILED, KNOWN, expected -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 424 philam-8: 0.7866, 2.0944
    test 425 reverse-9: 45.069, 120.0, 999994.693  FAILED, KNOWN, expected 45.0, 120.0, 1000000.0
    test 426 forward-9: -2609218.5, 4519299.0, 5200700.9  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2
    test 427 xyzh-9: -2609218.5, 4519299.0, 5200700.9, 999994.7  FAILED, KNOWN, expected -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 428 philam-9: 0.7866, 2.0944
    test 429 sudano: 45.078, 0.0, 99993.947  FAILED, KNOWN, expected 45.0, 0.0, 100000.0
    test 430 name: OS-UK
    test 431 forward: 53.61199036, -1.66444222, 299.8
    test 432 forward: 3790644.9, -110149.21, 5111482.97
    test 433 reverse: 3790644.9, -110149.21, 5111482.97
    test 434 reverse: 53.73795244, -1.66444223  FAILED, KNOWN, expected 53.61199036, -1.66444223
    test 435 reverse.lat: 53°44′16.6288″N  FAILED, KNOWN, expected 53°36′43.1653″N
    test 436 reverse.lon: 001°39′51.992″W
    test 437 reverse.height: 284.389  FAILED, KNOWN, expected 299.800
    test 438 case: 7
    test 439 iteration: 7
    test 440 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 441 reverse: 34.036724, -117.333569, 250.396541  FAILED, KNOWN, expected 34.0, -117.333569, 251.702
    test 442 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 443 EcefError: (0.0, 0.0, 0.0, 0.0, 0.0, -6378137.0, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 444 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 445 EcefSudano: EcefSudano(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefSudano

    test 446 EcefYou: ...
    test 447 name: Test
    test 448 toStr: EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name='Test')  FAILED, KNOWN, expected EcefYou
    test 449 a, f: a=6378137.0, f=0.003352811, datum=Datum(name='_Test', ellipsoid=Ellipsoids._Test, transform=Transforms.Identity), name='Test'  FAILED, KNOWN, expected EcefYou
    test 450 copy(EcefYou): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 451 EcefYou.copy(): (<class 'pygeodesy.ecef.EcefYou'>, True)
    test 452 forward: 27.99, 86.93, 8820.0
    test 453 forward: 302271.4, 5635928.4, 2979666.1
    test 454 name: Test
    test 455 reverse: 302271.4, 5635928.4, 2979666.1
    test 456 reverse: 27.99, 86.93, 8820.01
    test 457 case: 1
    test 458 iteration: None
    test 459 name: Test
    test 460 reverse: 302000.0, 5636000.0, 2980000.0
    test 461 reverse: 27.99, 86.93, 9027.03
    test 462 case: 1
    test 463 iteration: None
    test 464 forward: 27.99, 86.93, 8820.0
    test 465 forward: 302271.43, 5635928.37, 2979666.13
    test 466 forward: 33.3, 44.4, 6000.0
    test 467 forward: 3816209.6, 3737108.55, 3485109.57
    test 468 reverse: 3816209.6, 3737108.55, 3485109.57
    test 469 reverse: 33.3, 44.4, 5999.996
    test 470 case: 1
    test 471 iteration: None
    test 472 reverse: 30000.0, 30000.0, 0.0
    test 473 reverse: 90.0, 45.0, -6356893.894  FAILED, KNOWN, expected 6.483, 45.0, -6335709.726
    test 474 case: 1
    test 475 iteration: None
    test 476 forward: 6.483, 45.0, -6335709.726
    test 477 forward: 30000.0, 30000.0, -0.0
    test 478 Vermeille: -168.919
    test 479 Vermeille: 190.939
    test 480 Vermeille: (65.772506, 169.060801)
    test 481 Vermeille: (1.147947, 3.141593)
    test 482 reverse-1: 45.0, 120.0, 1000.0
    test 483 forward-1: -2259149.0, 3912960.8, 4488055.5
    test 484 xyzh-1: -2259149.0, 3912960.8, 4488055.5, 1000.0
    test 485 philam-1: 0.7854, 2.0944
    test 486 reverse-2: 45.0, 120.0, 2000.0
    test 487 forward-2: -2259502.5, 3913573.2, 4488762.6
    test 488 xyzh-2: -2259502.5, 3913573.2, 4488762.6, 2000.0
    test 489 philam-2: 0.7854, 2.0944
    test 490 reverse-3: 45.0, 120.0, 3000.0
    test 491 forward-3: -2259856.1, 3914185.6, 4489469.7
    test 492 xyzh-3: -2259856.1, 3914185.6, 4489469.7, 3000.0
    test 493 philam-3: 0.7854, 2.0944
    test 494 reverse-4: 45.0, 120.0, 4000.0
    test 495 forward-4: -2260209.7, 3914798.0, 4490176.8
    test 496 xyzh-4: -2260209.7, 3914798.0, 4490176.8, 4000.0
    test 497 philam-4: 0.7854, 2.0944
    test 498 reverse-5: 45.0, 120.0, 10000.0
    test 499 forward-5: -2262331.0, 3918472.2, 4494419.5
    test 500 xyzh-5: -2262331.0, 3918472.2, 4494419.5, 10000.0
    test 501 philam-5: 0.7854, 2.0944
    test 502 reverse-6: 45.0, 120.0, 20000.0
    test 503 forward-6: -2265866.5, 3924595.9, 4501490.5
    test 504 xyzh-6: -2265866.5, 3924595.9, 4501490.5, 20000.0
    test 505 philam-6: 0.7854, 2.0944
    test 506 reverse-7: 45.0, 120.0, 100000.0
    test 507 forward-7: -2294150.8, 3973585.7, 4558059.1
    test 508 xyzh-7: -2294150.8, 3973585.7, 4558059.1, 100000.0
    test 509 philam-7: 0.7854, 2.0944
    test 510 reverse-8: 45.0, 120.0, 800000.0
    test 511 forward-8: -2541638.2, 4402246.4, 5053033.8
    test 512 xyzh-8: -2541638.2, 4402246.4, 5053033.8, 800000.0
    test 513 philam-8: 0.7854, 2.0944
    test 514 reverse-9: 45.0, 120.0, 1000000.0
    test 515 forward-9: -2612348.8, 4524720.9, 5194455.2
    test 516 xyzh-9: -2612348.8, 4524720.9, 5194455.2, 1000000.0
    test 517 philam-9: 0.7854, 2.0944
    test 518 sudano: 45.0, 0.0, 100000.0
    test 519 name: OS-UK
    test 520 forward: 53.61199036, -1.66444222, 299.8
    test 521 forward: 3790644.9, -110149.21, 5111482.97
    test 522 reverse: 3790644.9, -110149.21, 5111482.97
    test 523 reverse: 53.61199036, -1.66444223
    test 524 reverse.lat: 53°36′43.1653″N
    test 525 reverse.lon: 001°39′51.992″W
    test 526 reverse.height: 299.800
    test 527 case: 1
    test 528 iteration: None
    test 529 forward: -2430601.827685, -4702442.703125, 3546587.358103
    test 530 reverse: 34.0, -117.333569, 251.702
    test 531 forward_: -2430601.812953, -4702442.744488, 3546587.313654, 34.0, -117.333569, 251.702
    test 532 EcefError: (0.0, 0.0, 0.0, 90.0, 0.0, -6356752.31414, 1, None, Datum(name='Datum', ellipsoid=Ellipsoids.GRS80, transform=Transforms.Identity))  FAILED, KNOWN, expected (0.0, 0.0, ...)
    test 533 EcefError: height (None), lat (None) or lon (None)  FAILED, KNOWN, expected lat (None), lon (None) ...
    test 534 EcefYou: EcefYou(a=None, f=None) ellipsoid: type(earth) (None): not a Datum, Ellipsoid, Ellipsoid2 or a_f2Tuple  FAILED, KNOWN, expected EcefYou

    test 535 EcefMatrix: ...
    test 536 index: (0, 1, 2, 3, 4, 5, 6, 7, 8)
    test 537 matrix: 0, 1, 2, 3, 4, 5, 6, 7, 8
    test 538 multiply: 45, 54, 63, 54, 66, 78, 63, 78, 93
    test 539 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 540 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 541 matrix: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 542 multiply: 1, 0, 0, 0, 1, 0, 0, 0, 1
    test 543 copy(EcefMatrix): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 544 EcefMatrix.copy(): (<class 'pygeodesy.ecef.EcefMatrix'>, True)
    test 545 unrotate: (1.0, 1.0, 1.0)

    test 546 pygeodesy.sphericalNvector: Cartesian
    test 547 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 548 pygeodesy.sphericalNvector: LatLon
    test 549 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 550 forward: 48.833, 2.333, 0.0
    test 551 forward: 4190278.55, 170716.35, 4796058.21
    test 552 name: Paris
    test 553 reverse: 48.833, 2.333, 0.0
    test 554 name: Paris
    test 555 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 556 name: Paris
    test 557 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 558 to4Tuple: LatLon4Tuple
    test 559 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 560 to3Tuple: LatLon3Tuple
    test 561 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 562 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 563 name: Paris
    test 564 forward: [4190278.55, 170716.35, 4796058.21]
    test 565 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 566 pygeodesy.sphericalTrigonometry: Cartesian
    test 567 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 568 pygeodesy.sphericalTrigonometry: LatLon
    test 569 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 570 forward: 48.833, 2.333, 0.0
    test 571 forward: 4190278.55, 170716.35, 4796058.21
    test 572 name: Paris
    test 573 reverse: 48.833, 2.333, 0.0
    test 574 name: Paris
    test 575 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E)
    test 576 name: Paris
    test 577 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 578 to4Tuple: LatLon4Tuple
    test 579 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84))
    test 580 to3Tuple: LatLon3Tuple
    test 581 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 582 toVector: (4190278.55277, 170716.34863, 4796058.20898)
    test 583 name: Paris
    test 584 forward: [4190278.55, 170716.35, 4796058.21]
    test 585 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 586 pygeodesy.ellipsoidalNvector: Cartesian
    test 587 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 588 pygeodesy.ellipsoidalNvector: LatLon
    test 589 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 590 forward: 48.833, 2.333, 0.0
    test 591 forward: 4202946.8, 171232.47, 4778354.17
    test 592 name: Paris
    test 593 reverse: 48.833, 2.333, 0.0
    test 594 name: Paris
    test 595 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 596 name: Paris
    test 597 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 598 to4Tuple: LatLon4Tuple
    test 599 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 600 to3Tuple: LatLon3Tuple
    test 601 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 602 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 603 name: Paris
    test 604 forward: [4202946.8, 171232.47, 4778354.17]
    test 605 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 606 pygeodesy.ellipsoidalVincenty: Cartesian
    test 607 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 608 pygeodesy.ellipsoidalVincenty: LatLon
    test 609 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 610 forward: 48.833, 2.333, 0.0
    test 611 forward: 4202946.8, 171232.47, 4778354.17
    test 612 name: Paris
    test 613 reverse: 48.833, 2.333, 0.0
    test 614 name: Paris
    test 615 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 616 name: Paris
    test 617 Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 618 to4Tuple: LatLon4Tuple
    test 619 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 620 to3Tuple: LatLon3Tuple
    test 621 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 622 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 623 name: Paris
    test 624 forward: [4202946.8, 171232.47, 4778354.17]
    test 625 Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 626 pygeodesy.ellipsoidalKarney: Cartesian
    test 627 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 628 pygeodesy.ellipsoidalKarney: LatLon
    test 629 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 630 forward: 48.833, 2.333, 0.0
    test 631 forward: 4202946.8, 171232.47, 4778354.17
    test 632 name: Paris
    test 633 reverse: 48.833, 2.333, 0.0
    test 634 name: Paris
    test 635 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 636 name: Paris
    test 637 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 638 to4Tuple: LatLon4Tuple
    test 639 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 640 to3Tuple: LatLon3Tuple
    test 641 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 642 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 643 name: Paris
    test 644 forward: [4202946.8, 171232.47, 4778354.17]
    test 645 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 646 pygeodesy.ellipsoidalExact: Cartesian
    test 647 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 648 pygeodesy.ellipsoidalExact: LatLon
    test 649 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 650 forward: 48.833, 2.333, 0.0
    test 651 forward: 4202946.8, 171232.47, 4778354.17
    test 652 name: Paris
    test 653 reverse: 48.833, 2.333, 0.0
    test 654 name: Paris
    test 655 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 656 name: Paris
    test 657 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 658 to4Tuple: LatLon4Tuple
    test 659 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 660 to3Tuple: LatLon3Tuple
    test 661 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 662 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 663 name: Paris
    test 664 forward: [4202946.8, 171232.47, 4778354.17]
    test 665 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
# lazily imported pygeodesy.ellipsoidalGeodSolve by testEcef.py line 260

    test 666 pygeodesy.ellipsoidalGeodSolve: Cartesian
    test 667 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 668 pygeodesy.ellipsoidalGeodSolve: LatLon
    test 669 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 670 forward: 48.833, 2.333, 0.0
    test 671 forward: 4202946.8, 171232.47, 4778354.17
    test 672 name: Paris
    test 673 reverse: 48.833, 2.333, 0.0
    test 674 name: Paris
    test 675 toLatLon: LatLon(48°49′58.8″N, 002°19′58.8″E, +0.00m)
    test 676 name: Paris
    test 677 Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 678 to4Tuple: LatLon4Tuple
    test 679 to4Tuple: Paris(lat=48.833, lon=2.333, height=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 680 to3Tuple: LatLon3Tuple
    test 681 to3Tuple: Paris(lat=48.833, lon=2.333, height=0.0)
    test 682 toVector: (4202946.79528, 171232.46613, 4778354.17)
    test 683 name: Paris
    test 684 forward: [4202946.8, 171232.47, 4778354.17]
    test 685 Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    74 of 685 testEcef.py tests (10.8%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 22.109 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testElevations.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.elevation2 from .elevations by testElevations.py line 11
# lazily imported pygeodesy.Datums from .datums by testElevations.py line 11
# lazily imported pygeodesy.geoidHeight2 from .elevations by testElevations.py line 11

    testing testElevations.py 23.03.27 isLazy=3
# lazily imported pygeodesy.ellipsoidalVincenty by testElevations.py line 78
    test 1 elevation2: elevation2(37.8816, -121.9142): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 1173.79
    test 2 geoidHeight2: -31.699
    test 3 elevation2: elevation2(37.8816, -121.9142): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 1173.79
    test 4 geodHeight2: -31.699
    test 5 elevation2: elevation2(42.354117, -71.069351): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 2.03
    test 6 geodHeight2: -27.773
    test 7 elevation2: elevation2(41.499498, -81.695391): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 199.18
    test 8 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 9 elevation2: elevation2(41.49008, -71.312796): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 8.52
    test 10 geodHeight2: -30.000
    test 11 elevation2: elevation2(40.779147, -73.96808): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 32.79
    test 12 geodHeight2: -31.666
    test 13 elevation2: (None, "<HTTPError 404: 'Not Found'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 14 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 15 elevation2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 16 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 17 elevation2: elevation2(37.8816, -121.9142): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 1173.79
    test 18 geoidHeight2: -31.699
    test 19 elevation2: elevation2(37.8816, -121.9142): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 1173.79
    test 20 geodHeight2: -31.699
    test 21 elevation2: elevation2(42.354117, -71.069351): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 2.03
    test 22 geodHeight2: -27.773
    test 23 elevation2: elevation2(41.499498, -81.695391): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 199.18
    test 24 geodHeight2: -34.337  FAILED, KNOWN, expected -27.077
    test 25 elevation2: elevation2(41.49008, -71.312796): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 8.52
    test 26 geodHeight2: -30.000
    test 27 elevation2: elevation2(40.779147, -73.96808): <HTTPError 404: 'Not Found'>  FAILED, KNOWN, expected 32.79
    test 28 geodHeight2: -31.666
    test 29 elevation2: (None, "<HTTPError 404: 'Not Found'>")  FAILED, KNOWN, expected (None, 'non-CONUS -1000000.00')
    test 30 geoidHeight2: (None, 'no JSON "{}"')  FAILED, KNOWN, expected (None, "<HTTPError 403: 'Forbidden'>")
    test 31 elevation2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")
    test 32 geodHeight2: (None, "URLError(TimeoutError('timed out'))")  FAILED, KNOWN, expected (None, "URLError(timeout('timed out'))")

    22 of 32 testElevations.py tests (68.8%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 14.164 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEllipsoidal.py
./pygeodesy/ellipsoidalNvector.py:282: DeprecationWarning: Property_RO L{pygeodesy.ltpTuples.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/deprecated/__init__.py:64: DeprecationWarning: class L{pygeodesy.deprecated.Ned3Tuple} has been DEPRECATED, use class L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 11
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 11
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 11
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 11
# lazily imported pygeodesy.Height from .units by testLatLon.py line 11
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 11
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 11
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 11
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 11
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 11
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 11
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_D__ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.bearingDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.compassDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.Datums from .datums by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.latlonDMS_ from .dms by testEllipsoidal.py line 13
# lazily imported pygeodesy.m2SM from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testEllipsoidal.py line 13
# lazily imported pygeodesy.RefFrames from .trf by testEllipsoidal.py line 13
# lazily imported pygeodesy.wrap360 from .utily by testEllipsoidal.py line 13
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidal.py line 711
# lazily imported pygeodesy.ellipsoidalNvector by testEllipsoidal.py line 711
# lazily imported pygeodesy.Equidistant from .azimuthal by testEllipsoidal.py line 711
# lazily imported pygeodesy.EquidistantExact from .azimuthal by testEllipsoidal.py line 711
# lazily imported pygeodesy.EquidistantGeodSolve from .azimuthal by testEllipsoidal.py line 711
# lazily imported pygeodesy.EquidistantKarney from .azimuthal by testEllipsoidal.py line 711

    testing testEllipsoidal.py 23.03.27 isLazy=3

    testEllipsoidal(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 1 isEllipsoidal: True
    test 2 isSpherical: False
    test 3 isEllipsoidal: True
    test 4 isSpherical: False
    test 5 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 6 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 7 toDatum: 51.4778°N, 000.0016°W
    test 8 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 9 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 10 parse: 51.477284°N, 000.00002°E, -45.91m
    test 11 reframe: None
    test 12 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 13 toCss: -111.158797 5705242.333679
    test 14 toCss: -111.158797 5705242.333679
    test 15 toEcef: 3980581.21, -111.159, 4966824.522
    test 16 toEtm: 30 N 916396 5720041
    test 17 toEtm: 30 N 916396 5720041
    test 18 toLcc: 5639901 4612638
    test 19 toLcc: 5639901 4612638
    test 20 toOsgr: TQ 38876 77320
    test 21 toOsgr: TQ 38876 77320
    test 22 toOsgrTM: TQ 38876 77320
    test 23 toUtmUps: 30 N 708207 5707224
    test 24 toUtm: 30 N 708207 5707224
    test 25 toUtm: 30 N 708207 5707224
    test 26 toWm: -178.111 6672799.209
    test 27 toWm: -178.111 6672799.209
    test 28 elevation2: None
    test 29 geoidHeight2: None
    test 30 toUtmUps: 30 N 708207 5707224
    test 31 toUtm: 30 N 708207 5707224
    test 32 toUtm: 30 N 708207 5707224
    test 33 toUtmUps: 00 N 2000000 1333272
    test 34 toUps: 00 N 2000000 1333272
    test 35 toUps: 00 N 0 -666728
    test 36 toUps: 00 N 2000000 1555732
    test 37 toUtm: 31 N 459200 9217519
    test 38 nearestOn: 32.81°N, 031.42°E
    test 39 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 40 toNvector: True
    test 41 toCartesian: [3980581, 97, 4966825]
    test 42 toCartesian: True
    test 43 toVector3D: (0.6228, 0.0, 0.7824)
    test 44 Nvector: (0.5, 0.5, 0.7071)
    test 45 toVector3D: (0.5, 0.5, 0.7071)
    test 46 philamheight: 0.7854, 0.7854, 0.0
    test 47 latlonheight: 45.0, 45.0, 0.0
    test 48 xyzh: 0.5, 0.5, 0.7, 0.0
    test 49 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 50 toCartesian: True
    test 51 toLatLon: 45.0°N, 045.0°E
    test 52 toLatLon: True
    test 53 Nvector: (0.51, 0.512, 0.707, +1.00)
    test 54 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 55 dop: 51.998889°N, 004.373333°E, +134.64m
    test 56 distance: 3806542.943645769  FAILED, KNOWN, expected 3806542.943647

    testLatLon(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 57 isEllipsoidal: True
    test 58 isSpherical: False
    test 59 lat/lonDMS: 52.20472°N, 000.14056°E
    test 60 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 61 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 62 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 63 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 64 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 65 isequalTo: True
    test 66 isequalTo: True
    test 67 latlon2: 52.20472, 0.14056
    test 68 latlon2: 52.2047, 0.1406
    test 69 latlon2: 52.205, 0.141
    test 70 latlon2: 52.2, 0.14
    test 71 latlon2: 52.2, 0.1
    test 72 latlon2: 52.0, 0.0
    test 73 chordTo: 12029263.15
    test 74 chordTo: 12029049.69
    test 75 copy: True
    test 76 __eq__: True
    test 77 __ne__: False
    test 78 equirectangularTo: 404329.56
    test 79 distanceTo: 404279.720589
    test 80 distanceTo: 404279.720589
    test 81 distanceTo: 3972863
    test 82 distanceTo: 18013602.92
    test 83 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 84 intermediateTo: 51.372294°N, 000.707192°E
    test 85 intermediateTo: True
    test 86 intermediateTo: 404279.721
    test 87 intermediateTo+5: 35.560239°N, 008.833512°E
    test 88 intermediateTo+5: 4.885
    test 89 intermediateTo-4: 64.570387°N, 013.156352°W
    test 90 intermediateTo-4: 3.885
    test 91 intermediateTo-h: 125.000
    test 92 midpointTo: 50.536327°N, 001.274614°E
    test 93 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 94 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 95 chordTo: 125203.963
    test 96 cosineAndoyerLambertTo: 125205.962
    test 97 cosineAndoyerLambertTo: 125205.962
    test 98 cosineForsyheAndoyerLambertTo: 125205.965
    test 99 cosineForsyheAndoyerLambertTo: 125205.965
    test 100 cosineLawTo: 124801.098
    test 101 cosineLawTo: 124801.098
    test 102 equirectangularTo: 124804.754
    test 103 equirectangularTo: 124804.754
    test 104 euclideanTo: 130015.089
    test 105 euclideanTo: 130015.089
    test 106 flatLocalTo: 125209.633
    test 107 flatLocalTo: 125209.633
    test 108 flatPolarTo: 133663.257
    test 109 flatPolarTo: 133663.257
    test 110 hartzell: 53.3206°N, 001.7297°W
    test 111 hartzell: 53.349541°N, 001.7297°W
    test 112 height4: 0.0
    test 113 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 114 height4: 53°19′14.2″N, 001°43′46.9″W
    test 115 height4: 53°19′14.2″N, 001°43′46.9″W
    test 116 haversineTo: 124801.098
    test 117 haversineTo: 124801.098
    test 118 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 119 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 120 thomasTo: 125206.188
    test 121 thomasTo: 125206.188
    test 122 vincentysTo: 124801.098
    test 123 vincentysTo: 124801.098
    test 124 isclockwise: False
    test 125 isclockwise*: False
    test 126 isclockwise: True
    test 127 isclockwise*: True
    test 128 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 129 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 130 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 131 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 132 isconvex: False
    test 133 isconvex*: False
    test 134 isconvex: True
    test 135 isconvex*: True
    test 136 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 137 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 138 isenclosedBy1: True
    test 139 isenclosedBy1*: True
    test 140 isenclosedBy2: False
    test 141 isenclosedBy2*: False
    test 142 isenclosedBy3: False
    test 143 isenclosedBy3*: False
    test 144 isenclosedBy4: False
    test 145 isenclosedBy4*: False
    test 146 isenclosedBy5: False
    test 147 isenclosedBy5*: False
    test 148 isenclosedBy6: True
    test 149 isenclosedBy6*: True
    test 150 isenclosedBy7: True
    test 151 isenclosedBy7*: True
    test 152 isenclosedBy-CCW: True
    test 153 isenclosedBy-CW : True
    test 154 isenclosedBy-CCW: True
    test 155 compassAngleTo: 100.017
    test 156 compassAngleTo: 105.599
    test 157 compassAngleTo: 280.017
    test 158 compassAngleTo: 285.599
    test 159 equirectangularTo: 592.185
    test 160 distanceTo: 591.831
    test 161 compassAngleTo: 0.0
    test 162 compassAngleTo: 45.0
    test 163 compassAngleTo: 90.0
    test 164 compassAngleTo: 180.0
    test 165 compassAngleTo: 225.0
    test 166 compassAngleTo: 315.0
    test 167 compassAngleTo: 270.0
    test 168 compassAngleTo: 359.4
    test 169 latlon2: (53.0, 1.0)
    test 170 philam2: (0.93, 0.02)
    test 171 compassAngleTo: 31
    test 172 compassAngleTo: 45

    test 173 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 174 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 175 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 176 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 177 isequalTo: <class 'bool'>
    test 178 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 179 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 180 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 181 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 182 compassAngleTo: <class 'float'>
    test 183 cosineLawTo: <class 'float'>
    test 184 euclideanTo: <class 'float'>
    test 185 flatLocalTo: <class 'float'>
    test 186 flatPolarTo: <class 'float'>
    test 187 haversineTo: <class 'float'>
    test 188 hubenyTo: <class 'float'>
    test 189 vincentysTo: <class 'float'>
    test 190 toVector: (0.615661, 0.0, 0.788011)
    test 191 toVector3d: (0.61566, 0.0, 0.78801)
    test 192 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 193 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 194 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 195 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 196 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 197 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)
    test 198 circum4 (pygeodesy.ellipsoidalNvector) .radius: 3184196.839  FAILED, KNOWN, expected 3184256.748
    test 199 circum4 (pygeodesy.ellipsoidalNvector) .center: 42.674776°N, 002.495488°E, -3184194.95m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 200 circum4 (pygeodesy.ellipsoidalNvector) .rank: 3
    test 201 circum4 (pygeodesy.ellipsoidalNvector) .residuals: ()
    test 202 circum4 (pygeodesy.ellipsoidalNvector) .d1: 4886.122  FAILED, KNOWN, expected 57818.033
    test 203 circum4 (pygeodesy.ellipsoidalNvector) .d2: 4904.641  FAILED, KNOWN, expected 57834.176
    test 204 circum4 (pygeodesy.ellipsoidalNvector) .d3: 4909.920  FAILED, KNOWN, expected 57830.992
    test 205 circum4 (pygeodesy.ellipsoidalNvector) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 206 circum4 (pygeodesy.ellipsoidalNvector) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 207 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 208 circin6 (pygeodesy.ellipsoidalNvector) .rB+rC: 1561159.315
    test 209 circin6 (pygeodesy.ellipsoidalNvector) .rC+pA: 1111782.535
    test 210 circin6 (pygeodesy.ellipsoidalNvector) .rA+rB: 1104451.745
    test 211 circin6 (pygeodesy.ellipsoidalNvector) .radius: 325058.721
    test 212 circin6 (pygeodesy.ellipsoidalNvector) .center: 02.948531°N, 002.932537°E, -40041.19m
./test/testLatLon.py:617: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./test/testLatLon.py:618: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
    test 213 circin6 (pygeodesy.ellipsoidalNvector) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 214 circin6 (pygeodesy.ellipsoidalNvector) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 215 circin6 (pygeodesy.ellipsoidalNvector) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 216 circin6 (pygeodesy.ellipsoidalNvector) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 217 circin6 (pygeodesy.ellipsoidalNvector) .dA: 327992.318  FAILED, KNOWN, expected 327263.596
    test 218 circin6 (pygeodesy.ellipsoidalNvector) .dB: 327863.711  FAILED, KNOWN, expected 326036.153
    test 219 circin6 (pygeodesy.ellipsoidalNvector) .dC: 325653.216  FAILED, KNOWN, expected 326020.432

    testVectorial(pygeodesy.ellipsoidalNvector, 23.04.11)

    test 220 toLatLon: 44.995674°N, 045.0°E
    test 221 toNvector: (0.50004, 0.50004, 0.70705)
    test 222 isequalTo: False
    test 223 isequalTo: True
    test 224 length: 0.99992449715
    test 225 euclid: 0.99995577
    test 226 length: 1.00
    test 227 euclid: 1.0000
    test 228 meanOf: 44.995674°N, 045.0°E
    test 229 meanOf: LatLon
    test 230 apply: (0.5, 0.5, 0.707)
    test 231 init: (0.5, 0.5, 0.707)
    test 232 i***: (0.5, 0.5, 0.707)
    test 233 abs: 0.99992449715
    test 234 sumOf: (52.70504, 0.61904, 0.70705)
    test 235 sumOf: Nv
    test 236 sumOf: sumOf
    test 237 length: 52.7134151513
    test 238 sizeof: 120  FAILED, KNOWN, expected 72
    test 239 copy: True
    test 240 length: 52.2051356286
    test 241 length: 52.2051356286
    test 242 sizeof: 120
    test 243 isenclosedBy: True
    test 244 isenclosedBy*: True
    test 245 isenclosedBy: True
    test 246 isenclosedBy*: True

    test 247 nearestOn: 51.0°N, 001.0°E
    test 248 nearestOn: 50.987°N, 000.298°W
    test 249 nearestOn: 51.0°N, 002.0°E
    test 250 nearestOn: 50.995°N, 002.655°E
    test 251 nearestOn: 51.0°N, 001.9°E
    test 252 nearestOn: True
    test 253 distanceTo: 42.826
    test 254 nearestOn: 51.0°N, 002.0°E
    test 255 nearestOn: True
    test 256 nearestOn: 00.0°N, 000.0°E
    test 257 nearestOn: True
    test 258 nearestOn: 00.0°N, 020.0°E
    test 259 nearestOn: True
    test 260 nearestOn: 02.0°N, 002.0°E
    test 261 nearestOn: 02.0°N, 002.0°E

    test 262 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 263 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 264 BasseC: 47.3038°N, 002.5721°W
    test 265 BasseH: 47.311067°N, 002.528617°W
    test 266 triangulate: 47.323667°N, 002.568501°W
    test 267 triangulate: True

    test 268 trilaterate: 37.419078°N, 121.960579°W
    test 269 trilaterate: True
    test 270 trilaterate: 08.068912°S, 034.888699°W
    test 271 trilaterate: True
    test 272 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 273 trilaterate: True
    test 274 trilaterate: 42.67456065°N, 002.49539502°E
    test 275 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 362
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241

    test 276 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 277 sumOf: Nvector
    test 278 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 279 ecef.lat, .lon: 44.995674, 45.0
    test 280 ecef.height: -0.0
    test 281 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 282 .isEllipsoidal: True
    test 283 .isSpherical: False
    test 284 .latlon: (44.995674, 45.0)
    test 285 .philam: (0.785323, 0.785398)
    test 286 .latlonheight: (44.995674, 45.0, 0.0)
    test 287 .philamheight: (0.785323, 0.785398, 0.0)
    test 288 parse: (0.5, 0.5, 0.707)
    test 289 cmp: 0
    test 290 eq: True
    test 291 ge: True
    test 292 gt: False
    test 293 le: True
    test 294 lt: False
    test 295 ne: False
    test 296 *: (1.0, 1.0, 1.414)
    test 297 +: (1.0, 1.0, 1.414)
    test 298 /: (0.5, 0.5, 0.707)
    test 299 -: (0.5, 0.5, 0.707)
    test 300 @: (0.0, 0.0, 0.0)
    test 301 @: (0.0, 0.0, 0.0)
    test 302 rotate: (0.26268, 0.26268, 0.37143)
    test 303 crosserrors: True
    test 304 0: divisor (0): float division by zero
    test 305 intersections2: (500.0, 0.0, 0.0)
    test 306 nearestOn: (0.0, 0.0, 0.0)
    test 307 nearestOn: True
    test 308 nearestOn: (100.0, 100.0, 100.0)
    test 309 nearestOn: True
    test 310 iscolinearWith: False
    test 311 iscolinearWith: True
    test 312 nearestOn: (0.0, 0.0, 0.0)
    test 313 nearestOn: True
    test 314 nearestOn: (100.0, 100.0, 100.0)
    test 315 nearestOn: True
    test 316 iscolinearWith: False
    test 317 iscolinearWith: True

    testEllipsoidal(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 318 isEllipsoidal: True
    test 319 isSpherical: False
    test 320 isEllipsoidal: True
    test 321 isSpherical: False
    test 322 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 323 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 324 toDatum: 51.4778°N, 000.0016°W
    test 325 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 326 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 327 parse: 51.477284°N, 000.00002°E, -45.91m
    test 328 reframe: None
    test 329 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 330 toCss: -111.158797 5705242.333679
    test 331 toCss: -111.158797 5705242.333679
    test 332 toEcef: 3980581.21, -111.159, 4966824.522
    test 333 toEtm: 30 N 916396 5720041
    test 334 toEtm: 30 N 916396 5720041
    test 335 toLcc: 5639901 4612638
    test 336 toLcc: 5639901 4612638
    test 337 toOsgr: TQ 38876 77320
    test 338 toOsgr: TQ 38876 77320
    test 339 toOsgrTM: TQ 38876 77320
    test 340 toUtmUps: 30 N 708207 5707224
    test 341 toUtm: 30 N 708207 5707224
    test 342 toUtm: 30 N 708207 5707224
    test 343 toWm: -178.111 6672799.209
    test 344 toWm: -178.111 6672799.209
    test 345 elevation2: None
    test 346 geoidHeight2: None
    test 347 toUtmUps: 30 N 708207 5707224
    test 348 toUtm: 30 N 708207 5707224
    test 349 toUtm: 30 N 708207 5707224
    test 350 toUtmUps: 00 N 2000000 1333272
    test 351 toUps: 00 N 2000000 1333272
    test 352 toUps: 00 N 0 -666728
    test 353 toUps: 00 N 2000000 1555732
    test 354 toUtm: 31 N 459200 9217519
    test 355 nearestOn: 32.81°N, 031.42°E
    test 356 sat: 82.545852°N, 059.719736°E, -6353121.71m
    test 357 dop: 51.998889°N, 004.373333°E, +134.64m
    test 358 distance: 3817991.0740122627  FAILED, KNOWN, expected 3817991.074015
    test 359 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 360 iteration: 0
    test 361 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 362 iteration: 1

    testLatLon(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 363 isEllipsoidal: True
    test 364 isSpherical: False
    test 365 lat/lonDMS: 52.20472°N, 000.14056°E
    test 366 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 367 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 368 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 369 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 370 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 371 isequalTo: True
    test 372 isequalTo: True
    test 373 latlon2: 52.20472, 0.14056
    test 374 latlon2: 52.2047, 0.1406
    test 375 latlon2: 52.205, 0.141
    test 376 latlon2: 52.2, 0.14
    test 377 latlon2: 52.2, 0.1
    test 378 latlon2: 52.0, 0.0
    test 379 chordTo: 12029263.15
    test 380 chordTo: 12029049.69
    test 381 initialBearingTo: 156.1106
    test 382 initialBearingTo: 65.9335
    test 383 initialBearingTo: 0.0
    test 384 initialBearingTo: 180.0
    test 385 finalBearingTo: 157.8345
    test 386 finalBearingTo: 93.9034
    test 387 bearingTo2: 156.1106, 157.8345
    test 388 ispolar: True
    test 389 copy: True
    test 390 __eq__: True
    test 391 __ne__: False
    test 392 equirectangularTo: 404329.56
    test 393 distanceTo: 404607.805988
    test 394 distanceTo: 404607.805988
    test 395 distanceTo: 3981601
    test 396 antipodal: False
    test 397 distanceTo dateline: 19959679.267
    test 398 distanceTo unrolled: 19959679.267
    test 399 antipodal: False
    test 400 distanceTo dateline: 9513998
    test 401 distanceTo unrolled: 9513998
    test 402 distanceTo: 18012714.66
    test 403 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 404 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 405 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 406 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 407 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 408 intermediateTo: 51.372275°N, 000.707253°E
    test 409 intermediateTo: True
    test 410 intermediateTo: 404607.806
    test 411 intermediateTo+5: 35.139582°N, 008.994368°E
    test 412 intermediateTo+5: 5.000
    test 413 intermediateTo-4: 64.894124°N, 013.705689°W
    test 414 intermediateTo-4: 4.000
    test 415 intermediateTo-h: 125.000
    test 416 midpointTo: 50.536583°N, 001.274507°E
    test 417 destination: 51.513526°N, 000.098038°W
    test 418 destination: 51°30′49″N, 000°05′53″W
    test 419 destination: 33°57′N, 118°24′W
    test 420 destination: 33.950367°N, 118.399012°W
    test 421 destination: 0.592546N, 2.066453W
    test 422 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 423 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 424 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 425 chordTo: 125203.963
    test 426 cosineAndoyerLambertTo: 125205.962
    test 427 cosineAndoyerLambertTo: 125205.962
    test 428 cosineForsyheAndoyerLambertTo: 125205.965
    test 429 cosineForsyheAndoyerLambertTo: 125205.965
    test 430 cosineLawTo: 124801.098
    test 431 cosineLawTo: 124801.098
    test 432 equirectangularTo: 124804.754
    test 433 equirectangularTo: 124804.754
    test 434 euclideanTo: 130015.089
    test 435 euclideanTo: 130015.089
    test 436 flatLocalTo: 125209.633
    test 437 flatLocalTo: 125209.633
    test 438 flatPolarTo: 133663.257
    test 439 flatPolarTo: 133663.257
    test 440 hartzell: 53.3206°N, 001.7297°W
    test 441 hartzell: 53.349541°N, 001.7297°W
    test 442 height4: 0.0
    test 443 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 444 height4: 53°19′14.2″N, 001°43′46.9″W
    test 445 height4: 53°19′14.2″N, 001°43′46.9″W
    test 446 haversineTo: 124801.098
    test 447 haversineTo: 124801.098
    test 448 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 449 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 450 thomasTo: 125206.188
    test 451 thomasTo: 125206.188
    test 452 vincentysTo: 124801.098
    test 453 vincentysTo: 124801.098
    test 454 isclockwise: False
    test 455 isclockwise*: False
    test 456 isclockwise: True
    test 457 isclockwise*: True
    test 458 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 459 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 460 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 461 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 462 isconvex: False
    test 463 isconvex*: False
    test 464 isconvex: True
    test 465 isconvex*: True
    test 466 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 467 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 468 isenclosedBy1: True
    test 469 isenclosedBy1*: True
    test 470 isenclosedBy2: False
    test 471 isenclosedBy2*: False
    test 472 isenclosedBy3: False
    test 473 isenclosedBy3*: False
    test 474 isenclosedBy4: False
    test 475 isenclosedBy4*: False
    test 476 isenclosedBy5: False
    test 477 isenclosedBy5*: False
    test 478 isenclosedBy6: True
    test 479 isenclosedBy6*: True
    test 480 isenclosedBy7: True
    test 481 isenclosedBy7*: True
    test 482 isenclosedBy-CCW: True
    test 483 isenclosedBy-CW : True
    test 484 isenclosedBy-CCW: True
    test 485 initialBearingTo: 102.392291
    test 486 compassAngleTo: 100.017
    test 487 compassAngleTo: 105.599
    test 488 initialBearingTo: 288.676039
    test 489 compassAngleTo: 280.017
    test 490 compassAngleTo: 285.599
    test 491 equirectangularTo: 592.185
    test 492 distanceTo: 593.571
    test 493 bearingTo: 0.0
    test 494 compassAngleTo: 0.0
    test 495 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 496 compassAngleTo: 45.0
    test 497 bearingTo: 90.0
    test 498 compassAngleTo: 90.0
    test 499 bearingTo: 180.0
    test 500 compassAngleTo: 180.0
    test 501 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 502 compassAngleTo: 225.0
    test 503 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 504 compassAngleTo: 315.0
    test 505 bearingTo: 270.0
    test 506 compassAngleTo: 270.0
    test 507 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 508 compassAngleTo: 359.4
    test 509 latlon2: (53.0, 1.0)
    test 510 philam2: (0.93, 0.02)
    test 511 bearingTo: 31
    test 512 compassAngleTo: 31
    test 513 compassAngleTo: 45

    test 514 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 515 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 516 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 517 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 518 isequalTo: <class 'bool'>
    test 519 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 520 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 521 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 522 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 523 compassAngleTo: <class 'float'>
    test 524 cosineLawTo: <class 'float'>
    test 525 euclideanTo: <class 'float'>
    test 526 flatLocalTo: <class 'float'>
    test 527 flatPolarTo: <class 'float'>
    test 528 haversineTo: <class 'float'>
    test 529 hubenyTo: <class 'float'>
    test 530 vincentysTo: <class 'float'>
    test 531 toNvector: (0.615661, 0.0, 0.788011)
    test 532 toVector: (0.615661, 0.0, 0.788011)
    test 533 toVector3d: (0.61566, 0.0, 0.78801)

    test 534 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 535 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 536 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 537 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 538 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 539 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 540 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 541 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 542 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 543 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 544 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 545 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 546 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 547 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 548 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 549 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 550 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 551 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 552 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 553 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 554 circum3 (pygeodesy.ellipsoidalVincenty) .radius: 57792.067
    test 555 circum3 (pygeodesy.ellipsoidalVincenty) .center: 43.053532°N, 002.943255°E, -261.66m
    test 556 circum3 (pygeodesy.ellipsoidalVincenty) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 557 circum3 (pygeodesy.ellipsoidalVincenty) .d1: 57792.858
    test 558 circum3 (pygeodesy.ellipsoidalVincenty) .d2: 57792.859
    test 559 circum3 (pygeodesy.ellipsoidalVincenty) .d3: 57792.859
    test 560 circum3 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 561 circum3 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 562 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 563 circum4 (pygeodesy.ellipsoidalVincenty) .radius: 3184256.748
    test 564 circum4 (pygeodesy.ellipsoidalVincenty) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 565 circum4 (pygeodesy.ellipsoidalVincenty) .rank: 3
    test 566 circum4 (pygeodesy.ellipsoidalVincenty) .residuals: ()
    test 567 circum4 (pygeodesy.ellipsoidalVincenty) .d1: 57818.033
    test 568 circum4 (pygeodesy.ellipsoidalVincenty) .d2: 57834.176
    test 569 circum4 (pygeodesy.ellipsoidalVincenty) .d3: 57830.992
    test 570 circum4 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 571 circum4 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 572 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 573 circin6 (pygeodesy.ellipsoidalVincenty) .rB+rC: 1561159.315
    test 574 circin6 (pygeodesy.ellipsoidalVincenty) .rC+pA: 1111782.535
    test 575 circin6 (pygeodesy.ellipsoidalVincenty) .rA+rB: 1104451.745
    test 576 circin6 (pygeodesy.ellipsoidalVincenty) .radius: 325058.721
    test 577 circin6 (pygeodesy.ellipsoidalVincenty) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 578 circin6 (pygeodesy.ellipsoidalVincenty) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 579 circin6 (pygeodesy.ellipsoidalVincenty) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 580 circin6 (pygeodesy.ellipsoidalVincenty) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 581 circin6 (pygeodesy.ellipsoidalVincenty) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 582 circin6 (pygeodesy.ellipsoidalVincenty) .dA: 327263.596
    test 583 circin6 (pygeodesy.ellipsoidalVincenty) .dB: 326036.153
    test 584 circin6 (pygeodesy.ellipsoidalVincenty) .dC: 326020.432

    test 585 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 586 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 587 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 588 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 589 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 590 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 591 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 592 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 593 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 594 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 595 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 596 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 597 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 598 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 599 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 600 Equidistant: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W  FAILED, KNOWN, expected 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 601 Equidistant: 36.9892°N, 088.152°W, 38.2377°N, 092.39°W
    test 602 Equidistant: 00.0°N, 035.4073°W, 00.0°N, 035.4073°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 603 Equidistant: 1.63814 (% of radius)
    test 604 Equidistant: 22.756°N, 000.0°E, 22.756°S, 000.0°E  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 605 Equidistant: 1.30784 (% of radius)
    test 606 Equidistant: 29.2359°N, 040.2625°W, 29.2359°S, 040.2625°E
    test 607 Equidistant: 1.31348 (% of radius)
    test 608 Equidistant: 01.1557°S, 045.0894°E, 01.1557°N, 045.0894°E
    test 609 Equidistant: 1.81093 (% of radius)
    test 610 Equidistant 5: 05.0218°S, 005.0605°W, 05.0218°N, 005.0605°E
    test 611 Equidistant 5: 0.00337268 (% of radius)
    test 612 Equidistant 10: 10.0378°S, 010.3545°W, 10.0378°N, 010.3545°E
    test 613 Equidistant 10: 0.00344677 (% of radius)
    test 614 Equidistant 15: 15.0326°S, 016.1429°W, 15.0326°N, 016.1429°E
    test 615 Equidistant 15: 0.00356146 (% of radius)
    test 616 Equidistant 20: 19.9682°S, 022.7468°W, 19.9682°N, 022.7468°E
    test 617 Equidistant 20: 0.00370135 (% of radius)
    test 618 Equidistant 25: 24.7603°S, 030.5908°W, 24.7603°N, 030.5908°E
    test 619 Equidistant 25: 0.00383987 (% of radius)
    test 620 Equidistant 30: 29.2359°S, 040.2625°W, 29.2359°N, 040.2625°E
    test 621 Equidistant 30: 0.00393258 (% of radius)
    test 622 Equidistant 35: 33.0487°S, 052.585°W, 33.0487°N, 052.585°E
    test 623 Equidistant 35: 0.00390516 (% of radius)
    test 624 Equidistant 40: 35.5123°S, 068.6794°W, 35.5123°N, 068.6794°E
    test 625 Equidistant 40: 0.0036308 (% of radius)
    test 626 Equidistant 45: 35.2644°S, 090.0019°W, 35.2644°N, 090.0019°E
    test 627 Equidistant 45: 0.00288386 (% of radius)
    test 628 Equidistant 50: 29.3392°S, 119.0221°W, 29.3392°N, 119.0221°E
    test 629 Equidistant 50: 0.00271777 (% of radius)
    test 630 Equidistant: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (222847): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 631 Equidistant: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.02385e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 632 Equidistant: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55077e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 633 Equidistant: 31.664591°S, 010.436876°E Random +/- 45
    test 634 Equidistant: 31.519736°S, 010.382264°E, 22.678486°S, 022.685884°E  d 16877.1 meter (iteration 4)
    test 635 Equidistant: 31.508411°S, 010.116172°E, 30.807477°S, 003.031088°W  d 35020.7 meter (iteration 4)
    test 636 Equidistant: 31.430937°S, 010.68667°E, 00.646565°N, 040.443559°W  d 35125.2 meter (iteration 5)
    test 637 Equidistant: 31.850415°S, 010.350411°E, 26.589844°S, 012.666858°E  d 22173.3 meter (iteration 6)
    test 638 Equidistant: 31.443198°S, 010.774226°E, 15.850602°S, 026.409701°W  d 40355.4 meter (iteration 5)
    test 639 Equidistant: 31.65255°S, 010.445684°E, 31.562606°S, 010.541171°E  d 1574.93 meter (iteration 4)
    test 640 Equidistant: 31.483155°S, 010.536314°E, 19.20112°N, 029.246274°W  d 22222.1 meter (iteration 5)
    test 641 Equidistant: 32.218683°S, 012.767971°E, 30.599386°S, 007.948535°E  d 228809 meter (iteration 4)
    test 642 Equidistant: d (228809): over  FAILED, KNOWN, expected d < 99999 m
    test 643 Equidistant: 30.977308°S, 011.260237°E, 36.877775°S, 002.462032°W  d 109309 meter (iteration 6)
    test 644 Equidistant: d (109309): over  FAILED, KNOWN, expected d < 99999 m
    test 645 Equidistant: 32.019084°S, 008.817808°E, 30.940225°S, 011.879226°E  d 158212 meter (iteration 4)
    test 646 Equidistant: d (158212): over  FAILED, KNOWN, expected d < 99999 m
    test 647 Equidistant: 31.493672°S, 010.483106°E, 43.565332°N, 016.80362°W  d 19452.9 meter (iteration 5)
    test 648 Equidistant: 31.398751°S, 010.252761°E, 14.800902°N, 077.013371°E  d 34272 meter (iteration 5)

    testVincenty(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='WGS84')
    test 649 distanceTo: 866455.43292
    test 650 toDatum: OSGB36
    test 651 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 652 isEllipsoidal: True
    test 653 isSpherical: False
    test 654 epsilon: 1e-12
    test 655 iterations: 200
    test 656 copy: True
    test 657 isEllipsoidal: True
    test 658 isSpherical: False
    test 659 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 660 epsilon: 2.220446049250e-16
    test 661 iterations: 400
    test 662 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='WGS84')
    test 663 coincident: 0.0
    test 664 coincident: 0.0, 0.0, 0.0
    test 665 destination: 37.6528°S, 143.9265°E
    test 666 destination: True
    test 667 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 668 destination2: True
    test 669 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 670 distanceTo: 969954.166
    test 671 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 672 distanceTo2: 972708.16174, 11.22502
    test 673 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 674 destination: 58.64402°N, 003.07009°W
    test 675 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 676 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 677 distanceTo: 404607.806
    test 678 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 679 distanceTo2: 402574.597287, 157.726344
    test 680 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 681 destination: 48.857°N, 002.351°E
    test 682 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 683 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 684 distanceTo: 54973.295
    test 685 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 686 distanceTo2: 54903.41209, 232.9209
    test 687 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 688 destination: 37.6528°N, 143.9265°E
    test 689 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 690 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 691 distanceToMP: 298396.057
    test 692 distanceToSM: 185.415
    test 693 distanceToMP: 111319.491
    test 694 distanceToMP: 110574.389
    test 695 distanceToKW: 222638.982
    test 696 distanceToKW: 111319.491
    test 697 distanceTo3: 54972.271
    test 698 distanceTo3: 306°52′05.37″
    test 699 distanceTo3: 307°10′25.07″
    test 700 distanceTo2: 54902.390
    test 701 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='WGS84')
    test 702 distanceTo/antipodal (182): 19936288.579
    test 703 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 704 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 705 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 706 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 707 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 708 distanceTo/coincident (5): 111319.491
    test 709 distanceTo/meridional (1): 10001965.729
    test 710 initialBearingTo/meridional (1): 180.0
    test 711 distanceTo/coincident (1): 0.0
    test 712 initialBearingTo/coincident (1): 0.0
    test 713 finalBearingTo/coincident (1): 0.0
    test 714 destination/coincident (1): 50.06632°N, 005.71475°W
    test 715 distanceTo/anti-meridian (4): 10825924.1
    test 716 distanceTo/quadrants (5): 4015703.02
    test 717 distanceTo/quadrants (5): 4015703.02
    test 718 distanceTo/quadrants (5): 4015703.02
    test 719 distanceTo/quadrants (5): 4015703.02
    test 720 distanceTo/quadrants (5): 4015703.02
    test 721 distanceTo/quadrants (5): 4015703.02
    test 722 distanceTo/quadrants (5): 4015703.02
    test 723 distanceTo/quadrants (5): 4015703.02
    test 724 distanceTo/quadrants (5): 4015703.02
    test 725 distanceTo/quadrants (5): 4015703.02
    test 726 distanceTo/quadrants (5): 4015703.02
    test 727 distanceTo/quadrants (5): 4015703.02
    test 728 distanceTo/quadrants (5): 4015703.02
    test 729 distanceTo/quadrants (5): 4015703.02
    test 730 distanceTo/quadrants (5): 4015703.02
    test 731 distanceTo/quadrants (5): 4015703.02

    testVincenty(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='NAD83')
    test 732 distanceTo: 866455.43292
    test 733 toDatum: OSGB36
    test 734 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 735 isEllipsoidal: True
    test 736 isSpherical: False
    test 737 epsilon: 1e-12
    test 738 iterations: 200
    test 739 copy: True
    test 740 isEllipsoidal: True
    test 741 isSpherical: False
    test 742 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 743 epsilon: 2.220446049250e-16
    test 744 iterations: 400
    test 745 iteration: None

    testKarneyVincenty(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='NAD83')
    test 746 coincident: 0.0
    test 747 coincident: 0.0, 0.0, 0.0
    test 748 destination: 37.6528°S, 143.9265°E
    test 749 destination: True
    test 750 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 751 destination2: True
    test 752 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 753 distanceTo: 969954.166
    test 754 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 755 distanceTo2: 972708.16174, 11.22502
    test 756 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 757 destination: 58.64402°N, 003.07009°W
    test 758 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 759 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 760 distanceTo: 404607.806
    test 761 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 762 distanceTo2: 402574.597287, 157.726344
    test 763 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 764 destination: 48.857°N, 002.351°E
    test 765 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 766 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 767 distanceTo: 54973.295
    test 768 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 769 distanceTo2: 54903.41209, 232.9209
    test 770 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 771 destination: 37.6528°N, 143.9265°E
    test 772 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 773 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 774 distanceToMP: 298396.057
    test 775 distanceToSM: 185.415
    test 776 distanceToMP: 111319.491
    test 777 distanceToMP: 110574.389
    test 778 distanceToKW: 222638.982
    test 779 distanceToKW: 111319.491
    test 780 distanceTo3: 54972.271
    test 781 distanceTo3: 306°52′05.37″
    test 782 distanceTo3: 307°10′25.07″
    test 783 distanceTo2: 54902.390
    test 784 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalVincenty, 23.04.11, datum='NAD83')
    test 785 distanceTo/antipodal (182): 19936288.579
    test 786 distanceTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 787 initialBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 788 finalBearingTo/VincentyError (182): no convergence (0.00746541): epsilon (1e-12) and iterations (200), LatLon(00°00′00.0″N, 000°00′00.0″E) to LatLon(00°30′00.0″N, 179°42′00.0″E)  FAILED, KNOWN, expected no convergence: ...
    test 789 distanceTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 790 initialBearingTo/equatorial (182): ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, ...
    test 791 distanceTo/coincident (5): 111319.491
    test 792 distanceTo/meridional (1): 10001965.729
    test 793 initialBearingTo/meridional (1): 180.0
    test 794 distanceTo/coincident (1): 0.0
    test 795 initialBearingTo/coincident (1): 0.0
    test 796 finalBearingTo/coincident (1): 0.0
    test 797 destination/coincident (1): 50.06632°N, 005.71475°W
    test 798 distanceTo/anti-meridian (4): 10825924.1
    test 799 distanceTo/quadrants (5): 4015703.02
    test 800 distanceTo/quadrants (5): 4015703.02
    test 801 distanceTo/quadrants (5): 4015703.02
    test 802 distanceTo/quadrants (5): 4015703.02
    test 803 distanceTo/quadrants (5): 4015703.02
    test 804 distanceTo/quadrants (5): 4015703.02
    test 805 distanceTo/quadrants (5): 4015703.02
    test 806 distanceTo/quadrants (5): 4015703.02
    test 807 distanceTo/quadrants (5): 4015703.02
    test 808 distanceTo/quadrants (5): 4015703.02
    test 809 distanceTo/quadrants (5): 4015703.02
    test 810 distanceTo/quadrants (5): 4015703.02
    test 811 distanceTo/quadrants (5): 4015703.02
    test 812 distanceTo/quadrants (5): 4015703.02
    test 813 distanceTo/quadrants (5): 4015703.02
    test 814 distanceTo/quadrants (5): 4015703.02

    testEllipsoidal(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 815 isEllipsoidal: True
    test 816 isSpherical: False
    test 817 isEllipsoidal: True
    test 818 isSpherical: False
    test 819 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 820 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 821 toDatum: 51.4778°N, 000.0016°W
    test 822 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 823 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 824 parse: 51.477284°N, 000.00002°E, -45.91m
    test 825 reframe: None
    test 826 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 827 toCss: -111.158797 5705242.333679
    test 828 toCss: -111.158797 5705242.333679
    test 829 toEcef: 3980581.21, -111.159, 4966824.522
    test 830 toEtm: 30 N 916396 5720041
    test 831 toEtm: 30 N 916396 5720041
    test 832 toLcc: 5639901 4612638
    test 833 toLcc: 5639901 4612638
    test 834 toOsgr: TQ 38876 77320
    test 835 toOsgr: TQ 38876 77320
    test 836 toOsgrTM: TQ 38876 77320
    test 837 toUtmUps: 30 N 708207 5707224
    test 838 toUtm: 30 N 708207 5707224
    test 839 toUtm: 30 N 708207 5707224
    test 840 toWm: -178.111 6672799.209
    test 841 toWm: -178.111 6672799.209
    test 842 elevation2: None
    test 843 geoidHeight2: None
    test 844 toUtmUps: 30 N 708207 5707224
    test 845 toUtm: 30 N 708207 5707224
    test 846 toUtm: 30 N 708207 5707224
    test 847 toUtmUps: 00 N 2000000 1333272
    test 848 toUps: 00 N 2000000 1333272
    test 849 toUps: 00 N 0 -666728
    test 850 toUps: 00 N 2000000 1555732
    test 851 toUtm: 31 N 459200 9217519
    test 852 nearestOn: 32.81°N, 031.42°E
    test 853 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 854 dop: 51.998889°N, 004.373333°E, +134.64m
    test 855 distance: 3802238.504988623  FAILED, KNOWN, expected 3802238.504989
    test 856 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 857 iteration: 0
    test 858 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 859 iteration: 1

    testLatLon(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 860 isEllipsoidal: True
    test 861 isSpherical: False
    test 862 lat/lonDMS: 52.20472°N, 000.14056°E
    test 863 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 864 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 865 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 866 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 867 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 868 isequalTo: True
    test 869 isequalTo: True
    test 870 latlon2: 52.20472, 0.14056
    test 871 latlon2: 52.2047, 0.1406
    test 872 latlon2: 52.205, 0.141
    test 873 latlon2: 52.2, 0.14
    test 874 latlon2: 52.2, 0.1
    test 875 latlon2: 52.0, 0.0
    test 876 chordTo: 12029263.15
    test 877 chordTo: 12029049.69
    test 878 initialBearingTo: 156.1106
    test 879 initialBearingTo: 65.9335
    test 880 initialBearingTo: 0.0
    test 881 initialBearingTo: 180.0
    test 882 finalBearingTo: 157.8345
    test 883 finalBearingTo: 93.9034
    test 884 bearingTo2: 156.1106, 157.8345
    test 885 ispolar: True
    test 886 copy: True
    test 887 __eq__: True
    test 888 __ne__: False
    test 889 equirectangularTo: 404329.56
    test 890 distanceTo: 404607.805988
    test 891 distanceTo: 404607.805988
    test 892 distanceTo: 3981601
    test 893 antipodal: False
    test 894 distanceTo dateline: 19959679.267
    test 895 distanceTo unrolled: 19959679.267
    test 896 antipodal: False
    test 897 distanceTo dateline: 9513998
    test 898 distanceTo unrolled: 9513998
    test 899 distanceTo: 18012714.66
    test 900 distanceTo: 20003931.46
    test 901 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 902 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 903 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 904 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 905 intermediateTo: 51.372275°N, 000.707253°E
    test 906 intermediateTo: True
    test 907 intermediateTo: 404607.806
    test 908 intermediateTo+5: 35.139582°N, 008.994368°E
    test 909 intermediateTo+5: 5.000
    test 910 intermediateTo-4: 64.894124°N, 013.705689°W
    test 911 intermediateTo-4: 4.000
    test 912 intermediateTo-h: 125.000
    test 913 midpointTo: 50.536583°N, 001.274507°E
    test 914 destination: 51.513526°N, 000.098038°W
    test 915 destination: 51°30′49″N, 000°05′53″W
    test 916 destination: 33°57′N, 118°24′W
    test 917 destination: 33.950367°N, 118.399012°W
    test 918 destination: 0.592546N, 2.066453W
    test 919 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 920 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 921 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 922 chordTo: 125203.963
    test 923 cosineAndoyerLambertTo: 125205.962
    test 924 cosineAndoyerLambertTo: 125205.962
    test 925 cosineForsyheAndoyerLambertTo: 125205.965
    test 926 cosineForsyheAndoyerLambertTo: 125205.965
    test 927 cosineLawTo: 124801.098
    test 928 cosineLawTo: 124801.098
    test 929 equirectangularTo: 124804.754
    test 930 equirectangularTo: 124804.754
    test 931 euclideanTo: 130015.089
    test 932 euclideanTo: 130015.089
    test 933 flatLocalTo: 125209.633
    test 934 flatLocalTo: 125209.633
    test 935 flatPolarTo: 133663.257
    test 936 flatPolarTo: 133663.257
    test 937 hartzell: 53.3206°N, 001.7297°W
    test 938 hartzell: 53.349541°N, 001.7297°W
    test 939 height4: 0.0
    test 940 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 941 height4: 53°19′14.2″N, 001°43′46.9″W
    test 942 height4: 53°19′14.2″N, 001°43′46.9″W
    test 943 haversineTo: 124801.098
    test 944 haversineTo: 124801.098
    test 945 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 946 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 947 thomasTo: 125206.188
    test 948 thomasTo: 125206.188
    test 949 vincentysTo: 124801.098
    test 950 vincentysTo: 124801.098
    test 951 isclockwise: False
    test 952 isclockwise*: False
    test 953 isclockwise: True
    test 954 isclockwise*: True
    test 955 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 956 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 957 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 958 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 959 isconvex: False
    test 960 isconvex*: False
    test 961 isconvex: True
    test 962 isconvex*: True
    test 963 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 964 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 965 isenclosedBy1: True
    test 966 isenclosedBy1*: True
    test 967 isenclosedBy2: False
    test 968 isenclosedBy2*: False
    test 969 isenclosedBy3: False
    test 970 isenclosedBy3*: False
    test 971 isenclosedBy4: False
    test 972 isenclosedBy4*: False
    test 973 isenclosedBy5: False
    test 974 isenclosedBy5*: False
    test 975 isenclosedBy6: True
    test 976 isenclosedBy6*: True
    test 977 isenclosedBy7: True
    test 978 isenclosedBy7*: True
    test 979 isenclosedBy-CCW: True
    test 980 isenclosedBy-CW : True
    test 981 isenclosedBy-CCW: True
    test 982 initialBearingTo: 102.392291
    test 983 compassAngleTo: 100.017
    test 984 compassAngleTo: 105.599
    test 985 initialBearingTo: 288.676039
    test 986 compassAngleTo: 280.017
    test 987 compassAngleTo: 285.599
    test 988 equirectangularTo: 592.185
    test 989 distanceTo: 593.571
    test 990 bearingTo: 0.0
    test 991 compassAngleTo: 0.0
    test 992 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 993 compassAngleTo: 45.0
    test 994 bearingTo: 90.0
    test 995 compassAngleTo: 90.0
    test 996 bearingTo: 180.0
    test 997 compassAngleTo: 180.0
    test 998 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 999 compassAngleTo: 225.0
    test 1000 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1001 compassAngleTo: 315.0
    test 1002 bearingTo: 270.0
    test 1003 compassAngleTo: 270.0
    test 1004 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1005 compassAngleTo: 359.4
    test 1006 latlon2: (53.0, 1.0)
    test 1007 philam2: (0.93, 0.02)
    test 1008 bearingTo: 31
    test 1009 compassAngleTo: 31
    test 1010 compassAngleTo: 45

    test 1011 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1012 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1013 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1014 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1015 isequalTo: <class 'bool'>
    test 1016 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1017 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1018 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1019 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1020 compassAngleTo: <class 'float'>
    test 1021 cosineLawTo: <class 'float'>
    test 1022 euclideanTo: <class 'float'>
    test 1023 flatLocalTo: <class 'float'>
    test 1024 flatPolarTo: <class 'float'>
    test 1025 haversineTo: <class 'float'>
    test 1026 hubenyTo: <class 'float'>
    test 1027 vincentysTo: <class 'float'>
    test 1028 toNvector: (0.615661, 0.0, 0.788011)
    test 1029 toVector: (0.615661, 0.0, 0.788011)
    test 1030 toVector3d: (0.61566, 0.0, 0.78801)

    test 1031 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 1032 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 1033 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 1034 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 1035 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 1036 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 1037 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 1038 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1039 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1040 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 1041 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 1042 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 1043 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 1044 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 1045 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 1046 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 1047 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 1048 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 1049 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 1050 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1051 circum3 (pygeodesy.ellipsoidalKarney) .radius: 57792.067
    test 1052 circum3 (pygeodesy.ellipsoidalKarney) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1053 circum3 (pygeodesy.ellipsoidalKarney) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1054 circum3 (pygeodesy.ellipsoidalKarney) .d1: 57792.858
    test 1055 circum3 (pygeodesy.ellipsoidalKarney) .d2: 57792.859
    test 1056 circum3 (pygeodesy.ellipsoidalKarney) .d3: 57792.859
    test 1057 circum3 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1058 circum3 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 1059 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1060 circum4 (pygeodesy.ellipsoidalKarney) .radius: 3184256.748
    test 1061 circum4 (pygeodesy.ellipsoidalKarney) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1062 circum4 (pygeodesy.ellipsoidalKarney) .rank: 3
    test 1063 circum4 (pygeodesy.ellipsoidalKarney) .residuals: ()
    test 1064 circum4 (pygeodesy.ellipsoidalKarney) .d1: 57818.033
    test 1065 circum4 (pygeodesy.ellipsoidalKarney) .d2: 57834.176
    test 1066 circum4 (pygeodesy.ellipsoidalKarney) .d3: 57830.992
    test 1067 circum4 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1068 circum4 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1069 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1070 circin6 (pygeodesy.ellipsoidalKarney) .rB+rC: 1561159.315
    test 1071 circin6 (pygeodesy.ellipsoidalKarney) .rC+pA: 1111782.535
    test 1072 circin6 (pygeodesy.ellipsoidalKarney) .rA+rB: 1104451.745
    test 1073 circin6 (pygeodesy.ellipsoidalKarney) .radius: 325058.721
    test 1074 circin6 (pygeodesy.ellipsoidalKarney) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1075 circin6 (pygeodesy.ellipsoidalKarney) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1076 circin6 (pygeodesy.ellipsoidalKarney) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1077 circin6 (pygeodesy.ellipsoidalKarney) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1078 circin6 (pygeodesy.ellipsoidalKarney) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1079 circin6 (pygeodesy.ellipsoidalKarney) .dA: 327263.596
    test 1080 circin6 (pygeodesy.ellipsoidalKarney) .dB: 326036.153
    test 1081 circin6 (pygeodesy.ellipsoidalKarney) .dC: 326020.432

    test 1082 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 1083 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1084 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1085 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1086 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 1087 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1088 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1089 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1090 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1091 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1092 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1093 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1094 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1095 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1096 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 1097 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1098 EquidistantKarney: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1099 EquidistantKarney: 00.0°S, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 1100 EquidistantKarney: 1.63715 (% of radius)
    test 1101 EquidistantKarney: 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 1102 EquidistantKarney: 1.30663 (% of radius)
    test 1103 EquidistantKarney: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1104 EquidistantKarney: 1.31396 (% of radius)
    test 1105 EquidistantKarney: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1106 EquidistantKarney: 1.83268 (% of radius)
    test 1107 EquidistantKarney 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1108 EquidistantKarney 5: 4.18779e-16 (% of radius)
    test 1109 EquidistantKarney 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1110 EquidistantKarney 10: 4.18779e-16 (% of radius)
    test 1111 EquidistantKarney 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 1112 EquidistantKarney 15: 6.97964e-16 (% of radius)
    test 1113 EquidistantKarney 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 1114 EquidistantKarney 20: 2.09389e-16 (% of radius)
    test 1115 EquidistantKarney 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 1116 EquidistantKarney 25: 1.67511e-16 (% of radius)
    test 1117 EquidistantKarney 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 1118 EquidistantKarney 30: 4.18779e-16 (% of radius)
    test 1119 EquidistantKarney 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 1120 EquidistantKarney 35: 2.39302e-16 (% of radius)
    test 1121 EquidistantKarney 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 1122 EquidistantKarney 40: 4.18779e-16 (% of radius)
    test 1123 EquidistantKarney 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 1124 EquidistantKarney 45: 1.86124e-16 (% of radius)
    test 1125 EquidistantKarney 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 1126 EquidistantKarney 50: 1.67511e-16 (% of radius)
    test 1127 EquidistantKarney: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1128 EquidistantKarney: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1129 EquidistantKarney: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1130 EquidistantKarney: 04.757899°S, 011.315034°E Random +/- 45
    test 1131 EquidistantKarney: 04.757899°S, 011.315034°E, 02.512957°S, 030.991501°E  d 2.8709e-09 meter (iteration 3)
    test 1132 EquidistantKarney: 04.757899°S, 011.315034°E, 26.560558°N, 012.421373°E  d 4.31823e-10 meter (iteration 3)
    test 1133 EquidistantKarney: 04.757899°S, 011.315034°E, 17.072457°N, 050.333631°E  d 1.21166e-09 meter (iteration 3)
    test 1134 EquidistantKarney: 04.757899°S, 011.315034°E, 10.264041°S, 002.675198°E  d 2.37374e-08 meter (iteration 3)
    test 1135 EquidistantKarney: 04.757899°S, 011.315034°E, 06.689207°S, 006.852596°E  d 1.95765e-08 meter (iteration 4)
    test 1136 EquidistantKarney: 04.757899°S, 011.315034°E, 01.529526°S, 015.69434°E  d 2.44033e-09 meter (iteration 3)
    test 1137 EquidistantKarney: 04.757899°S, 011.315034°E, 33.573705°S, 037.495197°W  d 8.31508e-10 meter (iteration 3)
    test 1138 EquidistantKarney: 04.757899°S, 011.315034°E, 21.673326°N, 060.953708°W  d 1.02274e-08 meter (iteration 3)
    test 1139 EquidistantKarney: 04.757899°S, 011.315034°E, 15.263697°N, 032.617347°W  d 7.3762e-10 meter (iteration 3)
    test 1140 EquidistantKarney: 04.757899°S, 011.315034°E, 17.444046°N, 040.715027°W  d 1.68772e-09 meter (iteration 3)
    test 1141 EquidistantKarney: 04.757899°S, 011.315034°E, 34.933284°S, 025.725322°E  d 4.03885e-10 meter (iteration 3)
    test 1142 EquidistantKarney: 04.757899°S, 011.315034°E, 03.395807°S, 050.40903°E  d 2.56473e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalKarney, 23.04.11, datum='WGS84')
    test 1143 distanceTo: 866455.4329
    test 1144 coincident: 0.0
    test 1145 toDatum: OSGB36
    test 1146 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1147 isEllipsoidal: True
    test 1148 copy: True
    test 1149 isEllipsoidal: True
    test 1150 isSpherical: False
    test 1151 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 23.04.11, datum='WGS84')
    test 1152 coincident: 0.0
    test 1153 coincident: 0.0, 0.0, 0.0
    test 1154 destination: 37.6528°S, 143.9265°E
    test 1155 destination: True
    test 1156 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1157 destination2: True
    test 1158 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1159 distanceTo: 969954.166
    test 1160 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1161 distanceTo2: 972708.16174, 11.22502
    test 1162 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1163 destination: 58.64402°N, 003.07009°W
    test 1164 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1165 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1166 distanceTo: 404607.806
    test 1167 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1168 distanceTo2: 402574.597287, 157.726344
    test 1169 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1170 destination: 48.857°N, 002.351°E
    test 1171 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1172 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1173 distanceTo: 54973.295
    test 1174 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1175 distanceTo2: 54903.41209, 232.9209
    test 1176 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1177 destination: 37.6528°N, 143.9265°E
    test 1178 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1179 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1180 distanceToMP: 298396.057
    test 1181 distanceToSM: 185.415
    test 1182 distanceToMP: 111319.491
    test 1183 distanceToMP: 110574.389
    test 1184 distanceToKW: 222638.982
    test 1185 distanceToKW: 111319.491
    test 1186 distanceTo3: 54972.271
    test 1187 distanceTo3: 306°52′05.37″
    test 1188 distanceTo3: 307°10′25.07″
    test 1189 distanceTo2: 54902.390
    test 1190 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 23.04.11, datum='WGS84')
    test 1191 distanceTo/antipodal (None): 19936288.579
    test 1192 distanceTo/VincentyError (None): 19944127.421
    test 1193 initialBearingTo/VincentyError (None): 15.556883
    test 1194 finalBearingTo/VincentyError (None): 164.442514
    test 1195 distanceTo/equatorial (None): 20003931.46
    test 1196 initialBearingTo/equatorial (None): 0.0
    test 1197 distanceTo/coincident (None): 111319.491
    test 1198 distanceTo/meridional (None): 10001965.729
    test 1199 initialBearingTo/meridional (None): 180.0
    test 1200 distanceTo/coincident (None): 0.0
    test 1201 initialBearingTo/coincident (None): 180.0
    test 1202 finalBearingTo/coincident (None): 180.0
    test 1203 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1204 distanceTo/anti-meridian (None): 10825924.1
    test 1205 distanceTo/quadrants (None): 4015703.02
    test 1206 distanceTo/quadrants (None): 4015703.02
    test 1207 distanceTo/quadrants (None): 4015703.02
    test 1208 distanceTo/quadrants (None): 4015703.02
    test 1209 distanceTo/quadrants (None): 4015703.02
    test 1210 distanceTo/quadrants (None): 4015703.02
    test 1211 distanceTo/quadrants (None): 4015703.02
    test 1212 distanceTo/quadrants (None): 4015703.02
    test 1213 distanceTo/quadrants (None): 4015703.02
    test 1214 distanceTo/quadrants (None): 4015703.02
    test 1215 distanceTo/quadrants (None): 4015703.02
    test 1216 distanceTo/quadrants (None): 4015703.02
    test 1217 distanceTo/quadrants (None): 4015703.02
    test 1218 distanceTo/quadrants (None): 4015703.02
    test 1219 distanceTo/quadrants (None): 4015703.02
    test 1220 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalKarney, 23.04.11, datum='NAD83')
    test 1221 distanceTo: 866455.4329
    test 1222 coincident: 0.0
    test 1223 toDatum: OSGB36
    test 1224 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1225 isEllipsoidal: True
    test 1226 copy: True
    test 1227 isEllipsoidal: True
    test 1228 isSpherical: False
    test 1229 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalKarney, 23.04.11, datum='NAD83')
    test 1230 coincident: 0.0
    test 1231 coincident: 0.0, 0.0, 0.0
    test 1232 destination: 37.6528°S, 143.9265°E
    test 1233 destination: True
    test 1234 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1235 destination2: True
    test 1236 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1237 distanceTo: 969954.166
    test 1238 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1239 distanceTo2: 972708.16174, 11.22502
    test 1240 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1241 destination: 58.64402°N, 003.07009°W
    test 1242 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1243 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1244 distanceTo: 404607.806
    test 1245 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1246 distanceTo2: 402574.597287, 157.726344
    test 1247 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1248 destination: 48.857°N, 002.351°E
    test 1249 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1250 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1251 distanceTo: 54973.295
    test 1252 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1253 distanceTo2: 54903.41209, 232.9209
    test 1254 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1255 destination: 37.6528°N, 143.9265°E
    test 1256 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1257 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1258 distanceToMP: 298396.057
    test 1259 distanceToSM: 185.415
    test 1260 distanceToMP: 111319.491
    test 1261 distanceToMP: 110574.389
    test 1262 distanceToKW: 222638.982
    test 1263 distanceToKW: 111319.491
    test 1264 distanceTo3: 54972.271
    test 1265 distanceTo3: 306°52′05.37″
    test 1266 distanceTo3: 307°10′25.07″
    test 1267 distanceTo2: 54902.390
    test 1268 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalKarney, 23.04.11, datum='NAD83')
    test 1269 distanceTo/antipodal (None): 19936288.579
    test 1270 distanceTo/VincentyError (None): 19944127.421
    test 1271 initialBearingTo/VincentyError (None): 15.556883
    test 1272 finalBearingTo/VincentyError (None): 164.442514
    test 1273 distanceTo/equatorial (None): 20003931.46
    test 1274 initialBearingTo/equatorial (None): 0.0
    test 1275 distanceTo/coincident (None): 111319.491
    test 1276 distanceTo/meridional (None): 10001965.729
    test 1277 initialBearingTo/meridional (None): 180.0
    test 1278 distanceTo/coincident (None): 0.0
    test 1279 initialBearingTo/coincident (None): 180.0
    test 1280 finalBearingTo/coincident (None): 180.0
    test 1281 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1282 distanceTo/anti-meridian (None): 10825924.1
    test 1283 distanceTo/quadrants (None): 4015703.02
    test 1284 distanceTo/quadrants (None): 4015703.02
    test 1285 distanceTo/quadrants (None): 4015703.02
    test 1286 distanceTo/quadrants (None): 4015703.02
    test 1287 distanceTo/quadrants (None): 4015703.02
    test 1288 distanceTo/quadrants (None): 4015703.02
    test 1289 distanceTo/quadrants (None): 4015703.02
    test 1290 distanceTo/quadrants (None): 4015703.02
    test 1291 distanceTo/quadrants (None): 4015703.02
    test 1292 distanceTo/quadrants (None): 4015703.02
    test 1293 distanceTo/quadrants (None): 4015703.02
    test 1294 distanceTo/quadrants (None): 4015703.02
    test 1295 distanceTo/quadrants (None): 4015703.02
    test 1296 distanceTo/quadrants (None): 4015703.02
    test 1297 distanceTo/quadrants (None): 4015703.02
    test 1298 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 1299 .lat1: -41.320
    test 1300 .lon1: 174.810
    test 1301 .azi1: 161.067669986160
    test 1302 .lat2: 40.960
    test 1303 .lon2: -5.500
    test 1304 .azi2: 18.825195123247
    test 1305 .s12: 19959679.267353821546
    test 1306 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1307 destination2: 40.96, -5.5, 18.825195123247
    test 1308 areaOf: 1.366270368e+13
    test 1309 perimeterOf: 1.683106789e+07
    test 1310 isclockwise: False
    test 1311 isclockwise: True
    test 1312 areaCO: 2.69154549884e+11
    test 1313 isclockwise: True
    test 1314 perimeterCO: 2099854.381923
# lazily imported pygeodesy.ellipsoidalGeodSolve by testEllipsoidal.py line 743

    testEllipsoidal(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1315 isEllipsoidal: True
    test 1316 isSpherical: False
    test 1317 isEllipsoidal: True
    test 1318 isSpherical: False
    test 1319 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 1320 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 1321 toDatum: 51.4778°N, 000.0016°W
    test 1322 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1323 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1324 parse: 51.477284°N, 000.00002°E, -45.91m
    test 1325 reframe: None
    test 1326 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 1327 toCss: -111.158797 5705242.333679
    test 1328 toCss: -111.158797 5705242.333679
    test 1329 toEcef: 3980581.21, -111.159, 4966824.522
    test 1330 toEtm: 30 N 916396 5720041
    test 1331 toEtm: 30 N 916396 5720041
    test 1332 toLcc: 5639901 4612638
    test 1333 toLcc: 5639901 4612638
    test 1334 toOsgr: TQ 38876 77320
    test 1335 toOsgr: TQ 38876 77320
    test 1336 toOsgrTM: TQ 38876 77320
    test 1337 toUtmUps: 30 N 708207 5707224
    test 1338 toUtm: 30 N 708207 5707224
    test 1339 toUtm: 30 N 708207 5707224
    test 1340 toWm: -178.111 6672799.209
    test 1341 toWm: -178.111 6672799.209
    test 1342 elevation2: None
    test 1343 geoidHeight2: None
    test 1344 toUtmUps: 30 N 708207 5707224
    test 1345 toUtm: 30 N 708207 5707224
    test 1346 toUtm: 30 N 708207 5707224
    test 1347 toUtmUps: 00 N 2000000 1333272
    test 1348 toUps: 00 N 2000000 1333272
    test 1349 toUps: 00 N 0 -666728
    test 1350 toUps: 00 N 2000000 1555732
    test 1351 toUtm: 31 N 459200 9217519
    test 1352 nearestOn: 32.81°N, 031.42°E
    test 1353 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 1354 dop: 51.998889°N, 004.373333°E, +134.64m
    test 1355 distance: 3802238.5049886256  FAILED, KNOWN, expected 3802238.504989
    test 1356 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4874369.98942, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E), 0.0, 0.0)
    test 1357 iteration: 0
    test 1358 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 1359 iteration: 1

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1360 isEllipsoidal: True
    test 1361 isSpherical: False
    test 1362 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1363 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1364 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1365 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1366 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1367 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1368 isequalTo: True
    test 1369 isequalTo: True
    test 1370 latlon2: 52.20472, 0.14056
    test 1371 latlon2: 52.2047, 0.1406
    test 1372 latlon2: 52.205, 0.141
    test 1373 latlon2: 52.2, 0.14
    test 1374 latlon2: 52.2, 0.1
    test 1375 latlon2: 52.0, 0.0
    test 1376 chordTo: 12029263.15
    test 1377 chordTo: 12029049.69
    test 1378 initialBearingTo: 156.1106
    test 1379 initialBearingTo: 65.9335
    test 1380 initialBearingTo: 0.0
    test 1381 initialBearingTo: 180.0
    test 1382 finalBearingTo: 157.8345
    test 1383 finalBearingTo: 93.9034
    test 1384 bearingTo2: 156.1106, 157.8345
    test 1385 ispolar: True
    test 1386 copy: True
    test 1387 __eq__: True
    test 1388 __ne__: False
    test 1389 equirectangularTo: 404329.56
    test 1390 distanceTo: 404607.805988
    test 1391 distanceTo: 404607.805988
    test 1392 distanceTo: 3981601
    test 1393 antipodal: False
    test 1394 distanceTo dateline: 19959679.267
    test 1395 distanceTo unrolled: 19959679.267
    test 1396 antipodal: False
    test 1397 distanceTo dateline: 9513998
    test 1398 distanceTo unrolled: 9513998
    test 1399 distanceTo: 18012714.66
    test 1400 distanceTo: 20003931.46
    test 1401 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1402 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1403 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1404 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1405 intermediateTo: 51.372275°N, 000.707253°E
    test 1406 intermediateTo: True
    test 1407 intermediateTo: 404607.806
    test 1408 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1409 intermediateTo+5: 5.000
    test 1410 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1411 intermediateTo-4: 4.000
    test 1412 intermediateTo-h: 125.000
    test 1413 midpointTo: 50.536583°N, 001.274507°E
    test 1414 destination: 51.513526°N, 000.098038°W
    test 1415 destination: 51°30′49″N, 000°05′53″W
    test 1416 destination: 33°57′N, 118°24′W
    test 1417 destination: 33.950367°N, 118.399012°W
    test 1418 destination: 0.592546N, 2.066453W
    test 1419 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1420 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1421 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1422 chordTo: 125203.963
    test 1423 cosineAndoyerLambertTo: 125205.962
    test 1424 cosineAndoyerLambertTo: 125205.962
    test 1425 cosineForsyheAndoyerLambertTo: 125205.965
    test 1426 cosineForsyheAndoyerLambertTo: 125205.965
    test 1427 cosineLawTo: 124801.098
    test 1428 cosineLawTo: 124801.098
    test 1429 equirectangularTo: 124804.754
    test 1430 equirectangularTo: 124804.754
    test 1431 euclideanTo: 130015.089
    test 1432 euclideanTo: 130015.089
    test 1433 flatLocalTo: 125209.633
    test 1434 flatLocalTo: 125209.633
    test 1435 flatPolarTo: 133663.257
    test 1436 flatPolarTo: 133663.257
    test 1437 hartzell: 53.3206°N, 001.7297°W
    test 1438 hartzell: 53.349541°N, 001.7297°W
    test 1439 height4: 0.0
    test 1440 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1441 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1442 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1443 haversineTo: 124801.098
    test 1444 haversineTo: 124801.098
    test 1445 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1446 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1447 thomasTo: 125206.188
    test 1448 thomasTo: 125206.188
    test 1449 vincentysTo: 124801.098
    test 1450 vincentysTo: 124801.098
    test 1451 isclockwise: False
    test 1452 isclockwise*: False
    test 1453 isclockwise: True
    test 1454 isclockwise*: True
    test 1455 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1456 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1457 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1458 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1459 isconvex: False
    test 1460 isconvex*: False
    test 1461 isconvex: True
    test 1462 isconvex*: True
    test 1463 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1464 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1465 isenclosedBy1: True
    test 1466 isenclosedBy1*: True
    test 1467 isenclosedBy2: False
    test 1468 isenclosedBy2*: False
    test 1469 isenclosedBy3: False
    test 1470 isenclosedBy3*: False
    test 1471 isenclosedBy4: False
    test 1472 isenclosedBy4*: False
    test 1473 isenclosedBy5: False
    test 1474 isenclosedBy5*: False
    test 1475 isenclosedBy6: True
    test 1476 isenclosedBy6*: True
    test 1477 isenclosedBy7: True
    test 1478 isenclosedBy7*: True
    test 1479 isenclosedBy-CCW: True
    test 1480 isenclosedBy-CW : True
    test 1481 isenclosedBy-CCW: True
    test 1482 initialBearingTo: 102.392291
    test 1483 compassAngleTo: 100.017
    test 1484 compassAngleTo: 105.599
    test 1485 initialBearingTo: 288.676039
    test 1486 compassAngleTo: 280.017
    test 1487 compassAngleTo: 285.599
    test 1488 equirectangularTo: 592.185
    test 1489 distanceTo: 593.571
    test 1490 bearingTo: 0.0
    test 1491 compassAngleTo: 0.0
    test 1492 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1493 compassAngleTo: 45.0
    test 1494 bearingTo: 90.0
    test 1495 compassAngleTo: 90.0
    test 1496 bearingTo: 180.0
    test 1497 compassAngleTo: 180.0
    test 1498 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1499 compassAngleTo: 225.0
    test 1500 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1501 compassAngleTo: 315.0
    test 1502 bearingTo: 270.0
    test 1503 compassAngleTo: 270.0
    test 1504 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1505 compassAngleTo: 359.4
    test 1506 latlon2: (53.0, 1.0)
    test 1507 philam2: (0.93, 0.02)
    test 1508 bearingTo: 31
    test 1509 compassAngleTo: 31
    test 1510 compassAngleTo: 45

    test 1511 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1512 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1513 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1514 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1515 isequalTo: <class 'bool'>
    test 1516 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1517 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1518 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1519 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1520 compassAngleTo: <class 'float'>
    test 1521 cosineLawTo: <class 'float'>
    test 1522 euclideanTo: <class 'float'>
    test 1523 flatLocalTo: <class 'float'>
    test 1524 flatPolarTo: <class 'float'>
    test 1525 haversineTo: <class 'float'>
    test 1526 hubenyTo: <class 'float'>
    test 1527 vincentysTo: <class 'float'>
    test 1528 toNvector: (0.615661, 0.0, 0.788011)
    test 1529 toVector: (0.615661, 0.0, 0.788011)
    test 1530 toVector3d: (0.61566, 0.0, 0.78801)

    test 1531 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 305.091
    test 1532 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66933643°N, 002.48620262°E
    test 1533 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1592.545
    test 1534 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.65141232°N, 002.46816989°E
    test 1535 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 3
    test 1536 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 127.229
    test 1537 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 152.612
    test 1538 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E
    test 1539 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 1540 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 2400.293
    test 1541 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 2400.293
    test 1542 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66128984°N, 002.47973818°E
    test 1543 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min- is .maxPoint: True
    test 1544 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 1
    test 1545 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 1343.743
    test 1546 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.69131964°N, 002.50112167°E
    test 1547 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1445.554
    test 1548 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E
    test 1549 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 1550 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1551 circum3 (pygeodesy.ellipsoidalGeodSolve) .radius: 57792.067
    test 1552 circum3 (pygeodesy.ellipsoidalGeodSolve) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1553 circum3 (pygeodesy.ellipsoidalGeodSolve) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1554 circum3 (pygeodesy.ellipsoidalGeodSolve) .d1: 57792.858
    test 1555 circum3 (pygeodesy.ellipsoidalGeodSolve) .d2: 57792.859
    test 1556 circum3 (pygeodesy.ellipsoidalGeodSolve) .d3: 57792.859
    test 1557 circum3 (pygeodesy.ellipsoidalGeodSolve) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1558 circum3 (pygeodesy.ellipsoidalGeodSolve) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 1559 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1560 circum4 (pygeodesy.ellipsoidalGeodSolve) .radius: 3184256.748
    test 1561 circum4 (pygeodesy.ellipsoidalGeodSolve) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1562 circum4 (pygeodesy.ellipsoidalGeodSolve) .rank: 3
    test 1563 circum4 (pygeodesy.ellipsoidalGeodSolve) .residuals: ()
    test 1564 circum4 (pygeodesy.ellipsoidalGeodSolve) .d1: 57818.033
    test 1565 circum4 (pygeodesy.ellipsoidalGeodSolve) .d2: 57834.176
    test 1566 circum4 (pygeodesy.ellipsoidalGeodSolve) .d3: 57830.992
    test 1567 circum4 (pygeodesy.ellipsoidalGeodSolve) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1568 circum4 (pygeodesy.ellipsoidalGeodSolve) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1569 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1570 circin6 (pygeodesy.ellipsoidalGeodSolve) .rB+rC: 1561159.315
    test 1571 circin6 (pygeodesy.ellipsoidalGeodSolve) .rC+pA: 1111782.535
    test 1572 circin6 (pygeodesy.ellipsoidalGeodSolve) .rA+rB: 1104451.745
    test 1573 circin6 (pygeodesy.ellipsoidalGeodSolve) .radius: 325058.721
    test 1574 circin6 (pygeodesy.ellipsoidalGeodSolve) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1575 circin6 (pygeodesy.ellipsoidalGeodSolve) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1576 circin6 (pygeodesy.ellipsoidalGeodSolve) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1577 circin6 (pygeodesy.ellipsoidalGeodSolve) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1578 circin6 (pygeodesy.ellipsoidalGeodSolve) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1579 circin6 (pygeodesy.ellipsoidalGeodSolve) .dA: 327263.596
    test 1580 circin6 (pygeodesy.ellipsoidalGeodSolve) .dB: 326036.153
    test 1581 circin6 (pygeodesy.ellipsoidalGeodSolve) .dC: 326020.432

    test 1582 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1583 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 1584 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 1585 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 1586 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1587 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 1588 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 1589 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 1590 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 1591 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 1592 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 1593 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 1594 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 1595 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 1596 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1597 EquidistantGeodSolve: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1598 EquidistantGeodSolve: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 1599 EquidistantGeodSolve: 00.0°S, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°S, 035.4073°W, 00.0°S, 035.4073°E
    test 1600 EquidistantGeodSolve: 1.63715 (% of radius)
    test 1601 EquidistantGeodSolve: 22.657°N, 000.0°E, 22.657°S, 000.0°E  FAILED, KNOWN, expected 22.756°N, 000.0°W, 22.756°S, 000.0°W
    test 1602 EquidistantGeodSolve: 1.30663 (% of radius)
    test 1603 EquidistantGeodSolve: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 1604 EquidistantGeodSolve: 1.31396 (% of radius)
    test 1605 EquidistantGeodSolve: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 1606 EquidistantGeodSolve: 1.83268 (% of radius)
    test 1607 EquidistantGeodSolve 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 1608 EquidistantGeodSolve 5: 1.25634e-15 (% of radius)
    test 1609 EquidistantGeodSolve 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 1610 EquidistantGeodSolve 10: 1.8845e-15 (% of radius)
    test 1611 EquidistantGeodSolve 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 1612 EquidistantGeodSolve 15: 2.51267e-15 (% of radius)
    test 1613 EquidistantGeodSolve 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 1614 EquidistantGeodSolve 20: 1.25634e-15 (% of radius)
    test 1615 EquidistantGeodSolve 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 1616 EquidistantGeodSolve 25: 1.5076e-15 (% of radius)
    test 1617 EquidistantGeodSolve 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 1618 EquidistantGeodSolve 30: 1.39593e-15 (% of radius)
    test 1619 EquidistantGeodSolve 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 1620 EquidistantGeodSolve 35: 4.78604e-16 (% of radius)
    test 1621 EquidistantGeodSolve 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 1622 EquidistantGeodSolve 40: 2.09389e-15 (% of radius)
    test 1623 EquidistantGeodSolve 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 1624 EquidistantGeodSolve 45: 3.72248e-16 (% of radius)
    test 1625 EquidistantGeodSolve 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 1626 EquidistantGeodSolve 50: 6.70046e-16 (% of radius)
    test 1627 EquidistantGeodSolve: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1628 EquidistantGeodSolve: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1629 EquidistantGeodSolve: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 1630 EquidistantGeodSolve: 12.813233°N, 024.583598°W Random +/- 45
    test 1631 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 07.417255°N, 005.336696°W  d 6e-09 meter (iteration 3)
    test 1632 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 52.623051°N, 043.041188°W  d 1.3e-08 meter (iteration 3)
    test 1633 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 55.630635°S, 074.136186°E  d 3.4e-09 meter (iteration 3)
    test 1634 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 04.231802°S, 018.868112°W  d 1.295e-07 meter (iteration 4)
    test 1635 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 34.19063°N, 000.27996°E  d 5.8e-09 meter (iteration 3)
    test 1636 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 54.825789°N, 024.141577°W  d 1.4e-09 meter (iteration 3)
    test 1637 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 58.236643°S, 066.76572°W  d 4.3e-09 meter (iteration 3)
    test 1638 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 13.827216°S, 001.863702°W  d 2e-09 meter (iteration 3)
    test 1639 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 08.830594°N, 016.486223°W  d 9e-10 meter (iteration 3)
    test 1640 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 28.177078°S, 072.158964°W  d 1.3e-09 meter (iteration 3)
    test 1641 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 17.872521°N, 027.892754°E  d 2e-09 meter (iteration 3)
    test 1642 EquidistantGeodSolve: 12.813233°N, 024.583598°W, 65.31233°N, 006.668972°W  d 2.9e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='WGS84')
    test 1643 distanceTo: 866455.4329
    test 1644 coincident: 0.0
    test 1645 toDatum: OSGB36
    test 1646 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 1647 isEllipsoidal: True
    test 1648 copy: True
    test 1649 isEllipsoidal: True
    test 1650 isSpherical: False
    test 1651 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='WGS84')
    test 1652 coincident: 0.0
    test 1653 coincident: 0.0, 0.0, 0.0
    test 1654 destination: 37.6528°S, 143.9265°E
    test 1655 destination: True
    test 1656 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1657 destination2: True
    test 1658 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1659 distanceTo: 969954.166
    test 1660 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1661 distanceTo2: 972708.16174, 11.22502
    test 1662 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1663 destination: 58.64402°N, 003.07009°W
    test 1664 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1665 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1666 distanceTo: 404607.806
    test 1667 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1668 distanceTo2: 402574.597287, 157.726344
    test 1669 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1670 destination: 48.857°N, 002.351°E
    test 1671 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1672 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1673 distanceTo: 54973.295
    test 1674 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1675 distanceTo2: 54903.41209, 232.9209
    test 1676 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1677 destination: 37.6528°N, 143.9265°E
    test 1678 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1679 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1680 distanceToMP: 298396.057
    test 1681 distanceToSM: 185.415
    test 1682 distanceToMP: 111319.491
    test 1683 distanceToMP: 110574.389
    test 1684 distanceToKW: 222638.982
    test 1685 distanceToKW: 111319.491
    test 1686 distanceTo3: 54972.271
    test 1687 distanceTo3: 306°52′05.37″
    test 1688 distanceTo3: 307°10′25.07″
    test 1689 distanceTo2: 54902.390
    test 1690 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='WGS84')
    test 1691 distanceTo/antipodal (None): 19936288.579
    test 1692 distanceTo/VincentyError (None): 19944127.421
    test 1693 initialBearingTo/VincentyError (None): 15.556883
    test 1694 finalBearingTo/VincentyError (None): 164.442514
    test 1695 distanceTo/equatorial (None): 20003931.46
    test 1696 initialBearingTo/equatorial (None): 0.0
    test 1697 distanceTo/coincident (None): 111319.491
    test 1698 distanceTo/meridional (None): 10001965.729
    test 1699 initialBearingTo/meridional (None): 180.0
    test 1700 distanceTo/coincident (None): 0.0
    test 1701 initialBearingTo/coincident (None): 180.0
    test 1702 finalBearingTo/coincident (None): 180.0
    test 1703 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1704 distanceTo/anti-meridian (None): 10825924.1
    test 1705 distanceTo/quadrants (None): 4015703.02
    test 1706 distanceTo/quadrants (None): 4015703.02
    test 1707 distanceTo/quadrants (None): 4015703.02
    test 1708 distanceTo/quadrants (None): 4015703.02
    test 1709 distanceTo/quadrants (None): 4015703.02
    test 1710 distanceTo/quadrants (None): 4015703.02
    test 1711 distanceTo/quadrants (None): 4015703.02
    test 1712 distanceTo/quadrants (None): 4015703.02
    test 1713 distanceTo/quadrants (None): 4015703.02
    test 1714 distanceTo/quadrants (None): 4015703.02
    test 1715 distanceTo/quadrants (None): 4015703.02
    test 1716 distanceTo/quadrants (None): 4015703.02
    test 1717 distanceTo/quadrants (None): 4015703.02
    test 1718 distanceTo/quadrants (None): 4015703.02
    test 1719 distanceTo/quadrants (None): 4015703.02
    test 1720 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='NAD83')
    test 1721 distanceTo: 866455.4329
    test 1722 coincident: 0.0
    test 1723 toDatum: OSGB36
    test 1724 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 1725 isEllipsoidal: True
    test 1726 copy: True
    test 1727 isEllipsoidal: True
    test 1728 isSpherical: False
    test 1729 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='NAD83')
    test 1730 coincident: 0.0
    test 1731 coincident: 0.0, 0.0, 0.0
    test 1732 destination: 37.6528°S, 143.9265°E
    test 1733 destination: True
    test 1734 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 1735 destination2: True
    test 1736 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 1737 distanceTo: 969954.166
    test 1738 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 1739 distanceTo2: 972708.16174, 11.22502
    test 1740 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 1741 destination: 58.64402°N, 003.07009°W
    test 1742 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 1743 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 1744 distanceTo: 404607.806
    test 1745 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 1746 distanceTo2: 402574.597287, 157.726344
    test 1747 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 1748 destination: 48.857°N, 002.351°E
    test 1749 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 1750 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 1751 distanceTo: 54973.295
    test 1752 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 1753 distanceTo2: 54903.41209, 232.9209
    test 1754 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 1755 destination: 37.6528°N, 143.9265°E
    test 1756 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 1757 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 1758 distanceToMP: 298396.057
    test 1759 distanceToSM: 185.415
    test 1760 distanceToMP: 111319.491
    test 1761 distanceToMP: 110574.389
    test 1762 distanceToKW: 222638.982
    test 1763 distanceToKW: 111319.491
    test 1764 distanceTo3: 54972.271
    test 1765 distanceTo3: 306°52′05.37″
    test 1766 distanceTo3: 307°10′25.07″
    test 1767 distanceTo2: 54902.390
    test 1768 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalGeodSolve, 23.04.11, datum='NAD83')
    test 1769 distanceTo/antipodal (None): 19936288.579
    test 1770 distanceTo/VincentyError (None): 19944127.421
    test 1771 initialBearingTo/VincentyError (None): 15.556883
    test 1772 finalBearingTo/VincentyError (None): 164.442514
    test 1773 distanceTo/equatorial (None): 20003931.46
    test 1774 initialBearingTo/equatorial (None): 0.0
    test 1775 distanceTo/coincident (None): 111319.491
    test 1776 distanceTo/meridional (None): 10001965.729
    test 1777 initialBearingTo/meridional (None): 180.0
    test 1778 distanceTo/coincident (None): 0.0
    test 1779 initialBearingTo/coincident (None): 180.0
    test 1780 finalBearingTo/coincident (None): 180.0
    test 1781 destination/coincident (None): 50.06632°N, 005.71475°W
    test 1782 distanceTo/anti-meridian (None): 10825924.1
    test 1783 distanceTo/quadrants (None): 4015703.02
    test 1784 distanceTo/quadrants (None): 4015703.02
    test 1785 distanceTo/quadrants (None): 4015703.02
    test 1786 distanceTo/quadrants (None): 4015703.02
    test 1787 distanceTo/quadrants (None): 4015703.02
    test 1788 distanceTo/quadrants (None): 4015703.02
    test 1789 distanceTo/quadrants (None): 4015703.02
    test 1790 distanceTo/quadrants (None): 4015703.02
    test 1791 distanceTo/quadrants (None): 4015703.02
    test 1792 distanceTo/quadrants (None): 4015703.02
    test 1793 distanceTo/quadrants (None): 4015703.02
    test 1794 distanceTo/quadrants (None): 4015703.02
    test 1795 distanceTo/quadrants (None): 4015703.02
    test 1796 distanceTo/quadrants (None): 4015703.02
    test 1797 distanceTo/quadrants (None): 4015703.02
    test 1798 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1799 .lat1: -41.320
    test 1800 .lon1: 174.810
    test 1801 .azi1: 161.067669986160
    test 1802 .lat2: 40.960
    test 1803 .lon2: -5.500
    test 1804 .azi2: 18.825195123247
    test 1805 .s12: 19959679.267353821546
    test 1806 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 1807 destination2: 40.96, -5.5, 18.825195123247
    test 1808 areaOf: 1.366270368e+13
    test 1809 perimeterOf: 1.683106789e+07
    test 1810 isclockwise: False
    test 1811 isclockwise: True
    test 1812 areaCO: 2.69154549884e+11
    test 1813 isclockwise: True
    test 1814 perimeterCO: 2099854.381923

    testEllipsoidal(pygeodesy.ellipsoidalExact, 23.04.11)
    test 1815 isEllipsoidal: True
    test 1816 isSpherical: False
    test 1817 isEllipsoidal: True
    test 1818 isSpherical: False
    test 1819 toDatum: 51.477284°N, 000.00002°E, -45.91m
    test 1820 toDatum: 51.4773°N, 000.0°E, -45.91m
    test 1821 toDatum: 51.4778°N, 000.0016°W
    test 1822 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1823 __matmul__: 51.477284°N, 000.00002°E, -45.91m
    test 1824 parse: 51.477284°N, 000.00002°E, -45.91m
    test 1825 reframe: None
    test 1826 toCartesian: [3980581.21, -111.159, 4966824.522]
    test 1827 toCss: -111.158797 5705242.333679
    test 1828 toCss: -111.158797 5705242.333679
    test 1829 toEcef: 3980581.21, -111.159, 4966824.522
    test 1830 toEtm: 30 N 916396 5720041
    test 1831 toEtm: 30 N 916396 5720041
    test 1832 toLcc: 5639901 4612638
    test 1833 toLcc: 5639901 4612638
    test 1834 toOsgr: TQ 38876 77320
    test 1835 toOsgr: TQ 38876 77320
    test 1836 toOsgrTM: TQ 38876 77320
    test 1837 toUtmUps: 30 N 708207 5707224
    test 1838 toUtm: 30 N 708207 5707224
    test 1839 toUtm: 30 N 708207 5707224
    test 1840 toWm: -178.111 6672799.209
    test 1841 toWm: -178.111 6672799.209
    test 1842 elevation2: None
    test 1843 geoidHeight2: None
    test 1844 toUtmUps: 30 N 708207 5707224
    test 1845 toUtm: 30 N 708207 5707224
    test 1846 toUtm: 30 N 708207 5707224
    test 1847 toUtmUps: 00 N 2000000 1333272
    test 1848 toUps: 00 N 2000000 1333272
    test 1849 toUps: 00 N 0 -666728
    test 1850 toUps: 00 N 2000000 1555732
    test 1851 toUtm: 31 N 459200 9217519
    test 1852 nearestOn: 32.81°N, 031.42°E
    test 1853 sat: 82.219069°N, 059.719736°E, -6353120.97m
    test 1854 dop: 51.998889°N, 004.373333°E, +134.64m
    test 1855 distance: 3802238.504988627  FAILED, KNOWN, expected 3802238.504989
    test 1856 neareston8: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4871366.31512, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 020°00′00.0″E), 0.0, 0.0)
    test 1857 iteration: 1
    test 1858 neareston8: (LatLon(45°30′03.93″N, 020°00′00.0″E), 39078.779519, 1.501069, 2, LatLon(45°00′00.0″N, 020°00′00.0″E), LatLon(46°00′00.0″N, 020°00′00.0″E), 270.356041, 269.999412)
    test 1859 iteration: 1

    testLatLon(pygeodesy.ellipsoidalExact, 23.04.11)
    test 1860 isEllipsoidal: True
    test 1861 isSpherical: False
    test 1862 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1863 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1864 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1865 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1866 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1867 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1868 isequalTo: True
    test 1869 isequalTo: True
    test 1870 latlon2: 52.20472, 0.14056
    test 1871 latlon2: 52.2047, 0.1406
    test 1872 latlon2: 52.205, 0.141
    test 1873 latlon2: 52.2, 0.14
    test 1874 latlon2: 52.2, 0.1
    test 1875 latlon2: 52.0, 0.0
    test 1876 chordTo: 12029263.15
    test 1877 chordTo: 12029049.69
    test 1878 initialBearingTo: 156.1106
    test 1879 initialBearingTo: 65.9335
    test 1880 initialBearingTo: 0.0
    test 1881 initialBearingTo: 180.0
    test 1882 finalBearingTo: 157.8345
    test 1883 finalBearingTo: 93.9034
    test 1884 bearingTo2: 156.1106, 157.8345
    test 1885 ispolar: True
    test 1886 copy: True
    test 1887 __eq__: True
    test 1888 __ne__: False
    test 1889 equirectangularTo: 404329.56
    test 1890 distanceTo: 404607.805988
    test 1891 distanceTo: 404607.805988
    test 1892 distanceTo: 3981601
    test 1893 antipodal: False
    test 1894 distanceTo dateline: 19959679.267
    test 1895 distanceTo unrolled: 19959679.267
    test 1896 antipodal: False
    test 1897 distanceTo dateline: 9513998
    test 1898 distanceTo unrolled: 9513998
    test 1899 distanceTo: 18003740.39
    test 1900 distanceTo: 19994797.60  FAILED, KNOWN, expected 20003931.46
    test 1901 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1902 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1903 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1904 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1905 intermediateTo: 51.372275°N, 000.707253°E
    test 1906 intermediateTo: True
    test 1907 intermediateTo: 404607.806
    test 1908 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1909 intermediateTo+5: 5.000
    test 1910 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1911 intermediateTo-4: 4.000
    test 1912 intermediateTo-h: 125.000
    test 1913 midpointTo: 50.536583°N, 001.274507°E
    test 1914 destination: 51.513526°N, 000.098038°W
    test 1915 destination: 51°30′49″N, 000°05′53″W
    test 1916 destination: 33°57′N, 118°24′W
    test 1917 destination: 33.950367°N, 118.399012°W
    test 1918 destination: 0.592546N, 2.066453W
    test 1919 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1920 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1921 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1922 chordTo: 125203.963
    test 1923 cosineAndoyerLambertTo: 125205.962
    test 1924 cosineAndoyerLambertTo: 125205.962
    test 1925 cosineForsyheAndoyerLambertTo: 125205.965
    test 1926 cosineForsyheAndoyerLambertTo: 125205.965
    test 1927 cosineLawTo: 124801.098
    test 1928 cosineLawTo: 124801.098
    test 1929 equirectangularTo: 124804.754
    test 1930 equirectangularTo: 124804.754
    test 1931 euclideanTo: 130015.089
    test 1932 euclideanTo: 130015.089
    test 1933 flatLocalTo: 125209.633
    test 1934 flatLocalTo: 125209.633
    test 1935 flatPolarTo: 133663.257
    test 1936 flatPolarTo: 133663.257
    test 1937 hartzell: 53.3206°N, 001.7297°W
    test 1938 hartzell: 53.349541°N, 001.7297°W
    test 1939 height4: 0.0
    test 1940 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1941 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1942 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1943 haversineTo: 124801.098
    test 1944 haversineTo: 124801.098
    test 1945 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1946 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1947 thomasTo: 125206.188
    test 1948 thomasTo: 125206.188
    test 1949 vincentysTo: 124801.098
    test 1950 vincentysTo: 124801.098
    test 1951 isclockwise: False
    test 1952 isclockwise*: False
    test 1953 isclockwise: True
    test 1954 isclockwise*: True
    test 1955 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1956 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1957 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1958 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1959 isconvex: False
    test 1960 isconvex*: False
    test 1961 isconvex: True
    test 1962 isconvex*: True
    test 1963 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1964 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1965 isenclosedBy1: True
    test 1966 isenclosedBy1*: True
    test 1967 isenclosedBy2: False
    test 1968 isenclosedBy2*: False
    test 1969 isenclosedBy3: False
    test 1970 isenclosedBy3*: False
    test 1971 isenclosedBy4: False
    test 1972 isenclosedBy4*: False
    test 1973 isenclosedBy5: False
    test 1974 isenclosedBy5*: False
    test 1975 isenclosedBy6: True
    test 1976 isenclosedBy6*: True
    test 1977 isenclosedBy7: True
    test 1978 isenclosedBy7*: True
    test 1979 isenclosedBy-CCW: True
    test 1980 isenclosedBy-CW : True
    test 1981 isenclosedBy-CCW: True
    test 1982 initialBearingTo: 102.392291
    test 1983 compassAngleTo: 100.017
    test 1984 compassAngleTo: 105.599
    test 1985 initialBearingTo: 288.676039
    test 1986 compassAngleTo: 280.017
    test 1987 compassAngleTo: 285.599
    test 1988 equirectangularTo: 592.185
    test 1989 distanceTo: 593.571
    test 1990 bearingTo: 0.0
    test 1991 compassAngleTo: 0.0
    test 1992 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1993 compassAngleTo: 45.0
    test 1994 bearingTo: 90.0
    test 1995 compassAngleTo: 90.0
    test 1996 bearingTo: 180.0
    test 1997 compassAngleTo: 180.0
    test 1998 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1999 compassAngleTo: 225.0
    test 2000 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 2001 compassAngleTo: 315.0
    test 2002 bearingTo: 270.0
    test 2003 compassAngleTo: 270.0
    test 2004 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 2005 compassAngleTo: 359.4
    test 2006 latlon2: (53.0, 1.0)
    test 2007 philam2: (0.93, 0.02)
    test 2008 bearingTo: 31
    test 2009 compassAngleTo: 31
    test 2010 compassAngleTo: 45

    test 2011 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 2012 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 2013 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 2014 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 2015 isequalTo: <class 'bool'>
    test 2016 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 2017 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 2018 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 2019 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 2020 compassAngleTo: <class 'float'>
    test 2021 cosineLawTo: <class 'float'>
    test 2022 euclideanTo: <class 'float'>
    test 2023 flatLocalTo: <class 'float'>
    test 2024 flatPolarTo: <class 'float'>
    test 2025 haversineTo: <class 'float'>
    test 2026 hubenyTo: <class 'float'>
    test 2027 vincentysTo: <class 'float'>
    test 2028 toNvector: (0.615661, 0.0, 0.788011)
    test 2029 toVector: (0.615661, 0.0, 0.788011)
    test 2030 toVector3d: (0.61566, 0.0, 0.78801)

    test 2031 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 2032 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 2033 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 2034 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 2035 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 2036 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 2037 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 2038 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 2039 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 2040 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 2041 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 2042 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 2043 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 2044 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 2045 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 2046 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 2047 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 2048 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 2049 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 2050 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 2051 circum3 (pygeodesy.ellipsoidalExact) .radius: 57792.067
    test 2052 circum3 (pygeodesy.ellipsoidalExact) .center: 43.053532°N, 002.943255°E, -261.66m
    test 2053 circum3 (pygeodesy.ellipsoidalExact) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 2054 circum3 (pygeodesy.ellipsoidalExact) .d1: 57792.858
    test 2055 circum3 (pygeodesy.ellipsoidalExact) .d2: 57792.859
    test 2056 circum3 (pygeodesy.ellipsoidalExact) .d3: 57792.859
    test 2057 circum3 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 2058 circum3 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 2059 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 2060 circum4 (pygeodesy.ellipsoidalExact) .radius: 3184256.748
    test 2061 circum4 (pygeodesy.ellipsoidalExact) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 2062 circum4 (pygeodesy.ellipsoidalExact) .rank: 3
    test 2063 circum4 (pygeodesy.ellipsoidalExact) .residuals: ()
    test 2064 circum4 (pygeodesy.ellipsoidalExact) .d1: 57818.033
    test 2065 circum4 (pygeodesy.ellipsoidalExact) .d2: 57834.176
    test 2066 circum4 (pygeodesy.ellipsoidalExact) .d3: 57830.992
    test 2067 circum4 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 2068 circum4 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 2069 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 2070 circin6 (pygeodesy.ellipsoidalExact) .rB+rC: 1561159.315
    test 2071 circin6 (pygeodesy.ellipsoidalExact) .rC+pA: 1111782.535
    test 2072 circin6 (pygeodesy.ellipsoidalExact) .rA+rB: 1104451.745
    test 2073 circin6 (pygeodesy.ellipsoidalExact) .radius: 325058.721
    test 2074 circin6 (pygeodesy.ellipsoidalExact) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 2075 circin6 (pygeodesy.ellipsoidalExact) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 2076 circin6 (pygeodesy.ellipsoidalExact) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 2077 circin6 (pygeodesy.ellipsoidalExact) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 2078 circin6 (pygeodesy.ellipsoidalExact) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 2079 circin6 (pygeodesy.ellipsoidalExact) .dA: 327263.596
    test 2080 circin6 (pygeodesy.ellipsoidalExact) .dB: 326036.153
    test 2081 circin6 (pygeodesy.ellipsoidalExact) .dC: 326020.432

    test 2082 area cw/ccw: 1.0

    testNOAA(pygeodesy.ellipsoidalExact, 23.04.11)
    test 2083 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 2084 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 2085 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 2086 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566

    testIntersection3(pygeodesy.ellipsoidalExact, 23.04.11)
    test 2087 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), 0, 0)
    test 2088 (30, 17): (LatLon(30°52′03.1″N, 015°30′38.41″E), -1, 0)
    test 2089 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, -2)
    test 2090 (-1,  3): (LatLon(01°34′52.49″N, 006°00′51.83″E), -1, 2)
    test 2091 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 0)
    test 2092 (65, 32): (LatLon(56°58′26.51″N, 032°00′00.0″E), 1, 2)
    test 2093 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 2094 (49, 25): (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, -2)  FAILED, KNOWN, expected (LatLon(49°00′00.0″N, 025°00′00.0″E), 0, 0)
    test 2095 #58: (LatLon(01°54′25.65″S, 005°37′48.76″E), 1, -2)
    test 2096 #58: <class 'pygeodesy.errors.IntersectionError'>

    testIntersections2(pygeodesy.ellipsoidalExact, 23.04.11)
    test 2097 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 2098 EquidistantExact: 36.9879°N, 088.1564°W, 38.2441°N, 092.3835°W
    test 2099 EquidistantExact: 00.0°N, 035.3478°W, 00.0°N, 035.3478°E  FAILED, KNOWN, expected 00.0°N, 035.3478°W, 00.0°S, 035.3478°E
    test 2100 EquidistantExact: 1.63715 (% of radius)
    test 2101 EquidistantExact: 22.657°N, 000.0°W, 22.657°S, 000.0°W  FAILED, KNOWN, expected 22.657°N, 000.0°E, 22.657°S, 000.0°E
    test 2102 EquidistantExact: 1.30663 (% of radius)
    test 2103 EquidistantExact: 29.4898°N, 040.1785°W, 29.4898°S, 040.1785°E
    test 2104 EquidistantExact: 1.31396 (% of radius)
    test 2105 EquidistantExact: 02.7402°S, 044.885°E, 02.7402°N, 044.885°E
    test 2106 EquidistantExact: 1.83268 (% of radius)
    test 2107 EquidistantExact 5: 05.0558°S, 005.0271°W, 05.0558°N, 005.0271°E
    test 2108 EquidistantExact 5: 1.67511e-15 (% of radius)
    test 2109 EquidistantExact 10: 10.1081°S, 010.2901°W, 10.1081°N, 010.2901°E
    test 2110 EquidistantExact 10: 2.51267e-15 (% of radius)
    test 2111 EquidistantExact 15: 15.1433°S, 016.0531°W, 15.1433°N, 016.0531°E
    test 2112 EquidistantExact 15: 2.93145e-15 (% of radius)
    test 2113 EquidistantExact 20: 20.1241°S, 022.6411°W, 20.1241°N, 022.6411°E
    test 2114 EquidistantExact 20: 1.8845e-15 (% of radius)
    test 2115 EquidistantExact 25: 24.9655°S, 030.4846°W, 24.9655°N, 030.4846°E
    test 2116 EquidistantExact 25: 1.84263e-15 (% of radius)
    test 2117 EquidistantExact 30: 29.4898°S, 040.1785°W, 29.4898°N, 040.1785°E
    test 2118 EquidistantExact 30: 9.7715e-16 (% of radius)
    test 2119 EquidistantExact 35: 33.3405°S, 052.5516°W, 33.3405°N, 052.5516°E
    test 2120 EquidistantExact 35: 8.37557e-16 (% of radius)
    test 2121 EquidistantExact 40: 35.8146°S, 068.7149°W, 35.8146°N, 068.7149°E
    test 2122 EquidistantExact 40: 1.46573e-15 (% of radius)
    test 2123 EquidistantExact 45: 35.5368°S, 090.0616°W, 35.5368°N, 090.0616°E
    test 2124 EquidistantExact 45: 3.72248e-16 (% of radius)
    test 2125 EquidistantExact 50: 29.5972°S, 118.8695°W, 29.5972°N, 118.8695°E
    test 2126 EquidistantExact 50: 1.67511e-16 (% of radius)
    test 2127 EquidistantExact: center1 (LatLon(55°00′00.0″N, 055°00′00.0″W)), center2 (LatLon(55°00′00.0″S, 055°00′00.0″E)), radius1 (12231458.77080936) or radius2 (12231458.77080936): no convergence (188568): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 2128 EquidistantExact: center1 (LatLon(60°00′00.0″N, 060°00′00.0″W)), center2 (LatLon(60°00′00.0″S, 060°00′00.0″E)), radius1 (13343409.568155663) or radius2 (13343409.568155663): no convergence (1.01348e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 2129 EquidistantExact: center1 (LatLon(65°00′00.0″N, 065°00′00.0″W)), center2 (LatLon(65°00′00.0″S, 065°00′00.0″E)), radius1 (14455360.36550197) or radius2 (14455360.36550197): no convergence (1.55092e+06): tolerance (0.001) too low, antipodal or near-polar?  FAILED, KNOWN, expected 2-tuple
    test 2130 EquidistantExact: 41.294004°N, 042.213881°W Random +/- 45
    test 2131 EquidistantExact: 41.294004°N, 042.213881°W, 37.576984°N, 044.829769°W  d 1.5953e-07 meter (iteration 4)
    test 2132 EquidistantExact: 41.294004°N, 042.213881°W, 71.007191°N, 074.815795°E  d 5.49037e-09 meter (iteration 3)
    test 2133 EquidistantExact: 41.294004°N, 042.213881°W, 52.770113°N, 054.386126°E  d 1.04156e-08 meter (iteration 3)
    test 2134 EquidistantExact: 41.294004°N, 042.213881°W, 26.650416°N, 056.395521°W  d 2.13046e-09 meter (iteration 3)
    test 2135 EquidistantExact: 41.294004°N, 042.213881°W, 45.783594°S, 135.280139°W  d 6.26727e-09 meter (iteration 3)
    test 2136 EquidistantExact: 41.294004°N, 042.213881°W, 59.014763°S, 141.080993°W  d 6.07894e-09 meter (iteration 3)
    test 2137 EquidistantExact: 41.294004°N, 042.213881°W, 48.52785°N, 005.776292°W  d 2.96468e-09 meter (iteration 3)
    test 2138 EquidistantExact: 41.294004°N, 042.213881°W, 10.253748°N, 070.077763°W  d 3.58363e-09 meter (iteration 3)
    test 2139 EquidistantExact: 41.294004°N, 042.213881°W, 15.295777°N, 062.205155°W  d 1.78546e-09 meter (iteration 3)
    test 2140 EquidistantExact: 41.294004°N, 042.213881°W, 43.25273°N, 039.155107°W  d 2.38061e-09 meter (iteration 4)
    test 2141 EquidistantExact: 41.294004°N, 042.213881°W, 42.758373°N, 131.070112°E  d 2.08837e-08 meter (iteration 3)
    test 2142 EquidistantExact: 41.294004°N, 042.213881°W, 36.953371°S, 123.298391°E  d 3.58363e-09 meter (iteration 3)

    testKarney(pygeodesy.ellipsoidalExact, 23.04.11, datum='WGS84')
    test 2143 distanceTo: 866455.4329
    test 2144 coincident: 0.0
    test 2145 toDatum: OSGB36
    test 2146 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'WGS84'
    test 2147 isEllipsoidal: True
    test 2148 copy: True
    test 2149 isEllipsoidal: True
    test 2150 isSpherical: False
    test 2151 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 23.04.11, datum='WGS84')
    test 2152 coincident: 0.0
    test 2153 coincident: 0.0, 0.0, 0.0
    test 2154 destination: 37.6528°S, 143.9265°E
    test 2155 destination: True
    test 2156 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 2157 destination2: True
    test 2158 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 2159 distanceTo: 969954.166
    test 2160 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 2161 distanceTo2: 972708.16174, 11.22502
    test 2162 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 2163 destination: 58.64402°N, 003.07009°W
    test 2164 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 2165 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 2166 distanceTo: 404607.806
    test 2167 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 2168 distanceTo2: 402574.597287, 157.726344
    test 2169 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 2170 destination: 48.857°N, 002.351°E
    test 2171 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 2172 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 2173 distanceTo: 54973.295
    test 2174 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 2175 distanceTo2: 54903.41209, 232.9209
    test 2176 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 2177 destination: 37.6528°N, 143.9265°E
    test 2178 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 2179 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 2180 distanceToMP: 298396.057
    test 2181 distanceToSM: 185.415
    test 2182 distanceToMP: 111319.491
    test 2183 distanceToMP: 110574.361
    test 2184 distanceToKW: 222638.982
    test 2185 distanceToKW: 111319.491
    test 2186 distanceTo3: 54972.271
    test 2187 distanceTo3: 306°52′05.37″
    test 2188 distanceTo3: 307°10′25.07″
    test 2189 distanceTo2: 54902.390
    test 2190 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 23.04.11, datum='WGS84')
    test 2191 distanceTo/antipodal (None): 19936288.579
    test 2192 distanceTo/VincentyError (None): 19944127.421
    test 2193 initialBearingTo/VincentyError (None): 15.556883
    test 2194 finalBearingTo/VincentyError (None): 164.442514
    test 2195 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 2196 initialBearingTo/equatorial (None): 0.0
    test 2197 distanceTo/coincident (None): 111319.491
    test 2198 distanceTo/meridional (None): 9999551.606
    test 2199 initialBearingTo/meridional (None): 180.0
    test 2200 distanceTo/coincident (None): 0.0
    test 2201 initialBearingTo/coincident (None): 180.0
    test 2202 finalBearingTo/coincident (None): 180.0
    test 2203 destination/coincident (None): 50.06632°N, 005.71475°W
    test 2204 distanceTo/anti-meridian (None): 10825924.1
    test 2205 distanceTo/quadrants (None): 4015703.02
    test 2206 distanceTo/quadrants (None): 4015703.02
    test 2207 distanceTo/quadrants (None): 4015703.02
    test 2208 distanceTo/quadrants (None): 4015703.02
    test 2209 distanceTo/quadrants (None): 4015703.02
    test 2210 distanceTo/quadrants (None): 4015703.02
    test 2211 distanceTo/quadrants (None): 4015703.02
    test 2212 distanceTo/quadrants (None): 4015703.02
    test 2213 distanceTo/quadrants (None): 4015703.02
    test 2214 distanceTo/quadrants (None): 4015703.02
    test 2215 distanceTo/quadrants (None): 4015703.02
    test 2216 distanceTo/quadrants (None): 4015703.02
    test 2217 distanceTo/quadrants (None): 4015703.02
    test 2218 distanceTo/quadrants (None): 4015703.02
    test 2219 distanceTo/quadrants (None): 4015703.02
    test 2220 distanceTo/quadrants (None): 4015703.02

    testKarney(pygeodesy.ellipsoidalExact, 23.04.11, datum='NAD83')
    test 2221 distanceTo: 866455.4329
    test 2222 coincident: 0.0
    test 2223 toDatum: OSGB36
    test 2224 ValueError2: Ellipsoid 'Airy1830': incompatible with Ellipsoid 'GRS80'
    test 2225 isEllipsoidal: True
    test 2226 copy: True
    test 2227 isEllipsoidal: True
    test 2228 isSpherical: False
    test 2229 copy: 37°57′03.7203″S, 144°25′29.5244″E

    testKarneyVincenty(pygeodesy.ellipsoidalExact, 23.04.11, datum='NAD83')
    test 2230 coincident: 0.0
    test 2231 coincident: 0.0, 0.0, 0.0
    test 2232 destination: 37.6528°S, 143.9265°E
    test 2233 destination: True
    test 2234 destination2: 37.652821°S, 143.926496°E, 307.1736°NW
    test 2235 destination2: True
    test 2236 finalBearingOn: 307.1736°, 307°10′25.07″NW
    test 2237 distanceTo: 969954.166
    test 2238 distanceTo3: 969954.166314, 9.141877, 11.29722
    test 2239 distanceTo2: 972708.16174, 11.22502
    test 2240 initialBearingTo: 9.1419°, 9°08′30.76″N
    test 2241 destination: 58.64402°N, 003.07009°W
    test 2242 finalBearingTo: 11.2972°, 11°17′49.99″NNE
    test 2243 finalBearingOn: 11.2972°, 11°17′49.99″NNE
    test 2244 distanceTo: 404607.806
    test 2245 distanceTo3: 404607.805988, 156.11064, 157.8345
    test 2246 distanceTo2: 402574.597287, 157.726344
    test 2247 initialBearingTo: 156.1106°, 156°06′38.31″SSE
    test 2248 destination: 48.857°N, 002.351°E
    test 2249 finalBearingTo: 157.8345°, 157°50′04.2″SSE
    test 2250 finalBearingOn: 157.8345°, 157°50′04.2″SSE
    test 2251 distanceTo: 54973.295
    test 2252 distanceTo3: 54973.29527, 233.13008, 232.82461
    test 2253 distanceTo2: 54903.41209, 232.9209
    test 2254 initialBearingTo: 233.1301°, 233°07′48.28″SW
    test 2255 destination: 37.6528°N, 143.9265°E
    test 2256 finalBearingTo: 232.8246°, 232°49′28.59″SW
    test 2257 finalBearingOn: 232.8246°, 232°49′28.59″SW
    test 2258 distanceToMP: 298396.057
    test 2259 distanceToSM: 185.415
    test 2260 distanceToMP: 111319.491
    test 2261 distanceToMP: 110574.361
    test 2262 distanceToKW: 222638.982
    test 2263 distanceToKW: 111319.491
    test 2264 distanceTo3: 54972.271
    test 2265 distanceTo3: 306°52′05.37″
    test 2266 distanceTo3: 307°10′25.07″
    test 2267 distanceTo2: 54902.390
    test 2268 distanceTo2: 307°04′38.41″

    testKarneyVincentyError(pygeodesy.ellipsoidalExact, 23.04.11, datum='NAD83')
    test 2269 distanceTo/antipodal (None): 19936288.579
    test 2270 distanceTo/VincentyError (None): 19944127.421
    test 2271 initialBearingTo/VincentyError (None): 15.556883
    test 2272 finalBearingTo/VincentyError (None): 164.442514
    test 2273 distanceTo/equatorial (None): 20001517.12  FAILED, KNOWN, expected 20003931.46
    test 2274 initialBearingTo/equatorial (None): 0.0
    test 2275 distanceTo/coincident (None): 111319.491
    test 2276 distanceTo/meridional (None): 9999551.606
    test 2277 initialBearingTo/meridional (None): 180.0
    test 2278 distanceTo/coincident (None): 0.0
    test 2279 initialBearingTo/coincident (None): 180.0
    test 2280 finalBearingTo/coincident (None): 180.0
    test 2281 destination/coincident (None): 50.06632°N, 005.71475°W
    test 2282 distanceTo/anti-meridian (None): 10825924.1
    test 2283 distanceTo/quadrants (None): 4015703.02
    test 2284 distanceTo/quadrants (None): 4015703.02
    test 2285 distanceTo/quadrants (None): 4015703.02
    test 2286 distanceTo/quadrants (None): 4015703.02
    test 2287 distanceTo/quadrants (None): 4015703.02
    test 2288 distanceTo/quadrants (None): 4015703.02
    test 2289 distanceTo/quadrants (None): 4015703.02
    test 2290 distanceTo/quadrants (None): 4015703.02
    test 2291 distanceTo/quadrants (None): 4015703.02
    test 2292 distanceTo/quadrants (None): 4015703.02
    test 2293 distanceTo/quadrants (None): 4015703.02
    test 2294 distanceTo/quadrants (None): 4015703.02
    test 2295 distanceTo/quadrants (None): 4015703.02
    test 2296 distanceTo/quadrants (None): 4015703.02
    test 2297 distanceTo/quadrants (None): 4015703.02
    test 2298 distanceTo/quadrants (None): 4015703.02

    testKarney_s(pygeodesy.ellipsoidalExact, 23.04.11)
    test 2299 .lat1: -41.320
    test 2300 .lon1: 174.810
    test 2301 .azi1: 161.067669986160
    test 2302 .lat2: 40.960
    test 2303 .lon2: -5.500
    test 2304 .azi2: 18.825195123247
    test 2305 .s12: 19959679.267353817821  FAILED, KNOWN, expected 19959679.267353821546
    test 2306 distanceTo3: 19959679.267354, 161.067670, 18.825195
    test 2307 destination2: 40.96, -5.5, 18.825195123247
    test 2308 areaOf: 1.366270368e+13
    test 2309 perimeterOf: 1.683089136e+07
    test 2310 isclockwise: False
    test 2311 isclockwise: True
    test 2312 areaCO: 2.69154549884e+11
    test 2313 isclockwise: True
    test 2314 perimeterCO: 2098430.887891

    121 of 2314 testEllipsoidal.py tests (5.2%) FAILED, incl. 117 KNOWN plus 4 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 54.572 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEllipsoidalGeodTest.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.ellipsoidalExact by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalKarney by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoidalGeodTest.py line 15
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testEllipsoidalGeodTest.py line 15

    testing testEllipsoidalGeodTest.py 23.03.27 (module pygeodesy.ellipsoidalKarney 23.04.11) isLazy=3
    test 1 line 1 lat: -48.164271
    test 2 line 1 lon: 5.762345
    test 3 line 1 fb: 175.334308
    test 4 line 1 lat2: -48.164270779098
    test 5 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 6 line 1 azi2: 175.334308316285
    test 7 line 1 lat2: -48.164270779098
    test 8 line 1 lon2: 5.762344694676  FAILED, KNOWN, expected 5.762344694677
    test 9 line 1 azi2: 175.334308316285
    test 10 line 2 lat: -23.186513
    test 11 line 2 lon: 68.567247
    test 12 line 2 fb: 154.287114
    test 13 line 2 lat2: -23.186512533703
    test 14 line 2 lon2: 68.567247430960
    test 15 line 2 azi2: 154.287114123872
    test 16 line 2 lat2: -23.186512533703
    test 17 line 2 lon2: 68.567247430960
    test 18 line 2 azi2: 154.287114123872
    test 19 line 3 lat: 53.997072
    test 20 line 3 lon: 44.520619
    test 21 line 3 fb: 52.159487
    test 22 line 3 lat2: 53.997072295385
    test 23 line 3 lon2: 44.520619105668
    test 24 line 3 azi2: 52.159486739948
    test 25 line 3 lat2: 53.997072295385
    test 26 line 3 lon2: 44.520619105668
    test 27 line 3 azi2: 52.159486739948
    test 28 line 4 lat: -49.416672
    test 29 line 4 lon: 166.828083
    test 30 line 4 fb: 22.033031
    test 31 line 4 lat2: -49.416672064706
    test 32 line 4 lon2: 166.828083210689
    test 33 line 4 azi2: 22.033030848249
    test 34 line 4 lat2: -49.416672064706
    test 35 line 4 lon2: 166.828083210689
    test 36 line 4 azi2: 22.033030848249
    test 37 line 5 lat: -60.405136
    test 38 line 5 lon: 110.581140
    test 39 line 5 fb: 75.518296
    test 40 line 5 lat2: -60.405136414530
    test 41 line 5 lon2: 110.581139538777
    test 42 line 5 azi2: 75.518295964649
    test 43 line 5 lat2: -60.405136414530
    test 44 line 5 lon2: 110.581139538777
    test 45 line 5 azi2: 75.518295964649
    test 46 line 6 lat: -11.212600
    test 47 line 6 lon: 144.177077
    test 48 line 6 fb: 133.027766
    test 49 line 6 lat2: -11.212600121556
    test 50 line 6 lon2: 144.177076511360
    test 51 line 6 azi2: 133.027766301029
    test 52 line 6 lat2: -11.212600121556
    test 53 line 6 lon2: 144.177076511360
    test 54 line 6 azi2: 133.027766301029
    test 55 line 7 lat: -6.529067
    test 56 line 7 lon: 2.895924
    test 57 line 7 fb: 178.740350
    test 58 line 7 lat2: -6.529066987956
    test 59 line 7 lon2: 2.895923948125
    test 60 line 7 azi2: 178.740350145954
    test 61 line 7 lat2: -6.529066987956
    test 62 line 7 lon2: 2.895923948125
    test 63 line 7 azi2: 178.740350145954
    test 64 line 8 lat: -8.855512
    test 65 line 8 lon: 112.749196
    test 66 line 8 fb: 119.512004
    test 67 line 8 lat2: -8.855512357257
    test 68 line 8 lon2: 112.749196494485
    test 69 line 8 azi2: 119.512003891282
    test 70 line 8 lat2: -8.855512357257
    test 71 line 8 lon2: 112.749196494485
    test 72 line 8 azi2: 119.512003891282
    test 73 line 9 lat: 29.866967
    test 74 line 9 lon: 171.726893
    test 75 line 9 fb: 171.662245
    test 76 line 9 lat2: 29.866967483293
    test 77 line 9 lon2: 171.726892560963
    test 78 line 9 azi2: 171.662244609397
    test 79 line 9 lat2: 29.866967483293
    test 80 line 9 lon2: 171.726892560963
    test 81 line 9 azi2: 171.662244609397
    test 82 line 10 lat: -29.238404
    test 83 line 10 lon: 133.459814
    test 84 line 10 fb: 69.814124
    test 85 line 10 lat2: -29.238404337998
    test 86 line 10 lon2: 133.459813533284
    test 87 line 10 azi2: 69.814124320813
    test 88 line 10 lat2: -29.238404337998
    test 89 line 10 lon2: 133.459813533284
    test 90 line 10 azi2: 69.814124320813
    test 91 line 11 lat: 55.600487
    test 92 line 11 lon: 75.128743
    test 93 line 11 fb: 153.896689
    test 94 line 11 lat2: 55.600487151983
    test 95 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 96 line 11 azi2: 153.896688535572
    test 97 line 11 lat2: 55.600487151982  FAILED, KNOWN, expected 55.600487151983
    test 98 line 11 lon2: 75.128743229496  FAILED, KNOWN, expected 75.128743229495
    test 99 line 11 azi2: 153.896688535572
    test 100 line 12 lat: -22.858435
    test 101 line 12 lon: 67.207513
    test 102 line 12 fb: 142.939529
    test 103 line 12 lat2: -22.858434825399
    test 104 line 12 lon2: 67.207513019332
    test 105 line 12 azi2: 142.939529056687
    test 106 line 12 lat2: -22.858434825399
    test 107 line 12 lon2: 67.207513019332
    test 108 line 12 azi2: 142.939529056687
    test 109 line 13 lat: -32.634475
    test 110 line 13 lon: 22.238523
    test 111 line 13 fb: 172.112993
    test 112 line 13 lat2: -32.634475461067
    test 113 line 13 lon2: 22.238523021935
    test 114 line 13 azi2: 172.112992582333
    test 115 line 13 lat2: -32.634475461067
    test 116 line 13 lon2: 22.238523021935
    test 117 line 13 azi2: 172.112992582333
    test 118 line 14 lat: 62.224985
    test 119 line 14 lon: 47.119133
    test 120 line 14 fb: 54.318105
    test 121 line 14 lat2: 62.224984867045
    test 122 line 14 lon2: 47.119133304525
    test 123 line 14 azi2: 54.318105291965
    test 124 line 14 lat2: 62.224984867045
    test 125 line 14 lon2: 47.119133304525
    test 126 line 14 azi2: 54.318105291965
    test 127 line 15 lat: 33.069613
    test 128 line 15 lon: 5.796996
    test 129 line 15 fb: 17.403845
    test 130 line 15 lat2: 33.069613195450
    test 131 line 15 lon2: 5.796995960186
    test 132 line 15 azi2: 17.403844642346
    test 133 line 15 lat2: 33.069613195450
    test 134 line 15 lon2: 5.796995960186
    test 135 line 15 azi2: 17.403844642346
    test 136 line 16 lat: 53.760900
    test 137 line 16 lon: 119.204306
    test 138 line 16 fb: 141.069793
    test 139 line 16 lat2: 53.760899500985
    test 140 line 16 lon2: 119.204305898518
    test 141 line 16 azi2: 141.069793254983
    test 142 line 16 lat2: 53.760899500985
    test 143 line 16 lon2: 119.204305898518
    test 144 line 16 azi2: 141.069793254983
    test 145 line 17 lat: -3.225632
    test 146 line 17 lon: 103.742354
    test 147 line 17 fb: 127.880328
    test 148 line 17 lat2: -3.225632004245
    test 149 line 17 lon2: 103.742354347526
    test 150 line 17 azi2: 127.880328388524
    test 151 line 17 lat2: -3.225632004245
    test 152 line 17 lon2: 103.742354347526
    test 153 line 17 azi2: 127.880328388524
    test 154 line 18 lat: 47.108712
    test 155 line 18 lon: 99.934107
    test 156 line 18 fb: 104.103491
    test 157 line 18 lat2: 47.108712008353
    test 158 line 18 lon2: 99.934107358387
    test 159 line 18 azi2: 104.103491123038
    test 160 line 18 lat2: 47.108712008353
    test 161 line 18 lon2: 99.934107358387
    test 162 line 18 azi2: 104.103491123038
    test 163 line 19 lat: 5.399363
    test 164 line 19 lon: 135.250064
    test 165 line 19 fb: 102.177018
    test 166 line 19 lat2: 5.399363208349
    test 167 line 19 lon2: 135.250063670790
    test 168 line 19 azi2: 102.177017677370
    test 169 line 19 lat2: 5.399363208349
    test 170 line 19 lon2: 135.250063670790
    test 171 line 19 azi2: 102.177017677370
    test 172 line 20 lat: -58.669225
    test 173 line 20 lon: 54.875015
    test 174 line 20 fb: 131.345308
    test 175 line 20 lat2: -58.669224697403
    test 176 line 20 lon2: 54.875014559502
    test 177 line 20 azi2: 131.345308028428
    test 178 line 20 lat2: -58.669224697403
    test 179 line 20 lon2: 54.875014559502
    test 180 line 20 azi2: 131.345308028428
    test 181 line 21 lat: 9.184229
    test 182 line 21 lon: 151.302637
    test 183 line 21 fb: 128.175105
    test 184 line 21 lat2: 9.184228666560
    test 185 line 21 lon2: 151.302636871911
    test 186 line 21 azi2: 128.175105446048
    test 187 line 21 lat2: 9.184228666560
    test 188 line 21 lon2: 151.302636871911
    test 189 line 21 azi2: 128.175105446048
    test 190 line 22 lat: 53.467940
    test 191 line 22 lon: 67.724192
    test 192 line 22 fb: 78.863492
    test 193 line 22 lat2: 53.467939714247
    test 194 line 22 lon2: 67.724192258333
    test 195 line 22 azi2: 78.863492168727
    test 196 line 22 lat2: 53.467939714247
    test 197 line 22 lon2: 67.724192258333
    test 198 line 22 azi2: 78.863492168727
    test 199 line 23 lat: 39.699456
    test 200 line 23 lon: 67.156325
    test 201 line 23 fb: 85.276830
    test 202 line 23 lat2: 39.699455912449
    test 203 line 23 lon2: 67.156324625647
    test 204 line 23 azi2: 85.276829539878
    test 205 line 23 lat2: 39.699455912449
    test 206 line 23 lon2: 67.156324625647
    test 207 line 23 azi2: 85.276829539878
    test 208 line 24 lat: 70.942602
    test 209 line 24 lon: 17.379214
    test 210 line 24 fb: 21.869008
    test 211 line 24 lat2: 70.942602144324
    test 212 line 24 lon2: 17.379213644124
    test 213 line 24 azi2: 21.869008256312
    test 214 line 24 lat2: 70.942602144324
    test 215 line 24 lon2: 17.379213644124
    test 216 line 24 azi2: 21.869008256312
    test 217 line 25 lat: 69.633349
    test 218 line 25 lon: 110.601933
    test 219 line 25 fb: 138.575193
    test 220 line 25 lat2: 69.633349004538
    test 221 line 25 lon2: 110.601933261211
    test 222 line 25 azi2: 138.575192608514
    test 223 line 25 lat2: 69.633349004538
    test 224 line 25 lon2: 110.601933261211
    test 225 line 25 azi2: 138.575192608514
    test 226 line 26 lat: 16.190815
    test 227 line 26 lon: 87.606993
    test 228 line 26 fb: 131.929410
    test 229 line 26 lat2: 16.190814826165
    test 230 line 26 lon2: 87.606993293114
    test 231 line 26 azi2: 131.929409507039
    test 232 line 26 lat2: 16.190814826165
    test 233 line 26 lon2: 87.606993293114
    test 234 line 26 azi2: 131.929409507039
    test 235 line 27 lat: 54.774905
    test 236 line 27 lon: 52.952507
    test 237 line 27 fb: 85.904051
    test 238 line 27 lat2: 54.774904542264
    test 239 line 27 lon2: 52.952506835523
    test 240 line 27 azi2: 85.904050867676
    test 241 line 27 lat2: 54.774904542264
    test 242 line 27 lon2: 52.952506835523
    test 243 line 27 azi2: 85.904050867676
    test 244 line 28 lat: -62.008569
    test 245 line 28 lon: 172.274877
    test 246 line 28 fb: 21.992601
    test 247 line 28 lat2: -62.008568677307
    test 248 line 28 lon2: 172.274876714260
    test 249 line 28 azi2: 21.992601380429
    test 250 line 28 lat2: -62.008568677307
    test 251 line 28 lon2: 172.274876714260
    test 252 line 28 azi2: 21.992601380429
    test 253 line 29 lat: 27.303730
    test 254 line 29 lon: 159.184451
    test 255 line 29 fb: 150.697920
    test 256 line 29 lat2: 27.303729660018
    test 257 line 29 lon2: 159.184451093393
    test 258 line 29 azi2: 150.697920369703
    test 259 line 29 lat2: 27.303729660018
    test 260 line 29 lon2: 159.184451093393
    test 261 line 29 azi2: 150.697920369703
    test 262 line 30 lat: 31.979897
    test 263 line 30 lon: 55.946759
    test 264 line 30 fb: 87.398293
    test 265 line 30 lat2: 31.979897342658
    test 266 line 30 lon2: 55.946758945497
    test 267 line 30 azi2: 87.398292964767
    test 268 line 30 lat2: 31.979897342658
    test 269 line 30 lon2: 55.946758945497
    test 270 line 30 azi2: 87.398292964767
    test 271 line 31 lat: 49.991468
    test 272 line 31 lon: 133.962411
    test 273 line 31 fb: 142.016540
    test 274 line 31 lat2: 49.991467522545
    test 275 line 31 lon2: 133.962411191467
    test 276 line 31 azi2: 142.016540226251
    test 277 line 31 lat2: 49.991467522545
    test 278 line 31 lon2: 133.962411191467
    test 279 line 31 azi2: 142.016540226251
    test 280 line 32 lat: 2.818559
    test 281 line 32 lon: 7.234774
    test 282 line 32 fb: 168.804029
    test 283 line 32 lat2: 2.818558842278
    test 284 line 32 lon2: 7.234774421859
    test 285 line 32 azi2: 168.804029404993
    test 286 line 32 lat2: 2.818558842278
    test 287 line 32 lon2: 7.234774421859
    test 288 line 32 azi2: 168.804029404993
    test 289 line 33 lat: -38.118071
    test 290 line 33 lon: 93.395971
    test 291 line 33 fb: 117.017377
    test 292 line 33 lat2: -38.118070550305
    test 293 line 33 lon2: 93.395971367720
    test 294 line 33 azi2: 117.017376985228
    test 295 line 33 lat2: -38.118070550305
    test 296 line 33 lon2: 93.395971367720
    test 297 line 33 azi2: 117.017376985228
    test 298 line 34 lat: 3.377824
    test 299 line 34 lon: 65.294746
    test 300 line 34 fb: 138.982544
    test 301 line 34 lat2: 3.377824468035
    test 302 line 34 lon2: 65.294745963255
    test 303 line 34 azi2: 138.982543784560
    test 304 line 34 lat2: 3.377824468035
    test 305 line 34 lon2: 65.294745963255
    test 306 line 34 azi2: 138.982543784560
    test 307 line 35 lat: 4.631157
    test 308 line 35 lon: 84.335045
    test 309 line 35 fb: 132.120804
    test 310 line 35 lat2: 4.631157299024
    test 311 line 35 lon2: 84.335044694540
    test 312 line 35 azi2: 132.120804319474
    test 313 line 35 lat2: 4.631157299024
    test 314 line 35 lon2: 84.335044694540
    test 315 line 35 azi2: 132.120804319474
    test 316 line 36 lat: 38.952215
    test 317 line 36 lon: 133.416463
    test 318 line 36 fb: 160.690586
    test 319 line 36 lat2: 38.952215219507
    test 320 line 36 lon2: 133.416463103113
    test 321 line 36 azi2: 160.690585690749
    test 322 line 36 lat2: 38.952215219507
    test 323 line 36 lon2: 133.416463103113
    test 324 line 36 azi2: 160.690585690749
    test 325 line 37 lat: -39.013297
    test 326 line 37 lon: 160.302849
    test 327 line 37 fb: 115.363715
    test 328 line 37 lat2: -39.013296805131
    test 329 line 37 lon2: 160.302849365986
    test 330 line 37 azi2: 115.363714797610
    test 331 line 37 lat2: -39.013296805131
    test 332 line 37 lon2: 160.302849365986
    test 333 line 37 azi2: 115.363714797610
    test 334 line 38 lat: -48.456093
    test 335 line 38 lon: 38.613822
    test 336 line 38 fb: 137.651668
    test 337 line 38 lat2: -48.456093143589
    test 338 line 38 lon2: 38.613821719886
    test 339 line 38 azi2: 137.651668464815
    test 340 line 38 lat2: -48.456093143589
    test 341 line 38 lon2: 38.613821719886
    test 342 line 38 azi2: 137.651668464815
    test 343 line 39 lat: -13.861956
    test 344 line 39 lon: 74.250572
    test 345 line 39 fb: 143.968262
    test 346 line 39 lat2: -13.861956131519
    test 347 line 39 lon2: 74.250571564776
    test 348 line 39 azi2: 143.968262419705
    test 349 line 39 lat2: -13.861956131520  FAILED, KNOWN, expected -13.861956131519
    test 350 line 39 lon2: 74.250571564776
    test 351 line 39 azi2: 143.968262419705
    test 352 line 40 lat: 25.289202
    test 353 line 40 lon: 47.063579
    test 354 line 40 fb: 78.672533
    test 355 line 40 lat2: 25.289201968371
    test 356 line 40 lon2: 47.063578519727
    test 357 line 40 azi2: 78.672532588106
    test 358 line 40 lat2: 25.289201968371
    test 359 line 40 lon2: 47.063578519727
    test 360 line 40 azi2: 78.672532588106
    test 361 line 41 lat: 49.498121
    test 362 line 41 lon: 131.993365
    test 363 line 41 fb: 157.425605
    test 364 line 41 lat2: 49.498121110507
    test 365 line 41 lon2: 131.993365399320
    test 366 line 41 azi2: 157.425605424890
    test 367 line 41 lat2: 49.498121110507
    test 368 line 41 lon2: 131.993365399320
    test 369 line 41 azi2: 157.425605424890
    test 370 line 42 lat: -2.104242
    test 371 line 42 lon: 56.532079
    test 372 line 42 fb: 129.406955
    test 373 line 42 lat2: -2.104241718494
    test 374 line 42 lon2: 56.532079408825
    test 375 line 42 azi2: 129.406954892035
    test 376 line 42 lat2: -2.104241718494
    test 377 line 42 lon2: 56.532079408825
    test 378 line 42 azi2: 129.406954892035
    test 379 line 43 lat: -39.997315
    test 380 line 43 lon: 49.004259
    test 381 line 43 fb: 135.432995
    test 382 line 43 lat2: -39.997315471629
    test 383 line 43 lon2: 49.004258662721
    test 384 line 43 azi2: 135.432994751523
    test 385 line 43 lat2: -39.997315471629
    test 386 line 43 lon2: 49.004258662721
    test 387 line 43 azi2: 135.432994751523
    test 388 line 44 lat: 9.333272
    test 389 line 44 lon: 98.670857
    test 390 line 44 fb: 120.694280
    test 391 line 44 lat2: 9.333271992381
    test 392 line 44 lon2: 98.670857333200
    test 393 line 44 azi2: 120.694280236304
    test 394 line 44 lat2: 9.333271992381
    test 395 line 44 lon2: 98.670857333200
    test 396 line 44 azi2: 120.694280236304
    test 397 line 45 lat: 38.653646
    test 398 line 45 lon: 136.060468
    test 399 line 45 fb: 152.489416
    test 400 line 45 lat2: 38.653646179484
    test 401 line 45 lon2: 136.060467518677
    test 402 line 45 azi2: 152.489415748331
    test 403 line 45 lat2: 38.653646179484
    test 404 line 45 lon2: 136.060467518677
    test 405 line 45 azi2: 152.489415748331
    test 406 line 46 lat: -4.564995
    test 407 line 46 lon: 166.894968
    test 408 line 46 fb: 127.520036
    test 409 line 46 lat2: -4.564994956240
    test 410 line 46 lon2: 166.894968092836
    test 411 line 46 azi2: 127.520036113641
    test 412 line 46 lat2: -4.564994956240
    test 413 line 46 lon2: 166.894968092836
    test 414 line 46 azi2: 127.520036113641
    test 415 line 47 lat: -38.522500
    test 416 line 47 lon: 178.679307
    test 417 line 47 fb: 176.468685
    test 418 line 47 lat2: -38.522500159620
    test 419 line 47 lon2: 178.679306959466
    test 420 line 47 azi2: 176.468684587438
    test 421 line 47 lat2: -38.522500159620
    test 422 line 47 lon2: 178.679306959466
    test 423 line 47 azi2: 176.468684587438
    test 424 line 48 lat: 45.529796
    test 425 line 48 lon: 145.048738
    test 426 line 48 fb: 160.706227
    test 427 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 428 line 48 lon2: 145.048737846273
    test 429 line 48 azi2: 160.706226714169
    test 430 line 48 lat2: 45.529795503687  FAILED, KNOWN, expected 45.529795503688
    test 431 line 48 lon2: 145.048737846273
    test 432 line 48 azi2: 160.706226714169
    test 433 line 49 lat: -2.968925
    test 434 line 49 lon: 5.044083
    test 435 line 49 fb: 174.913528
    test 436 line 49 lat2: -2.968924563433
    test 437 line 49 lon2: 5.044082955485
    test 438 line 49 azi2: 174.913527615338
    test 439 line 49 lat2: -2.968924563433
    test 440 line 49 lon2: 5.044082955485
    test 441 line 49 azi2: 174.913527615338
    test 442 line 50 lat: 1.618184
    test 443 line 50 lon: 163.262955
    test 444 line 50 fb: 161.097730
    test 445 line 50 lat2: 1.618184178387
    test 446 line 50 lon2: 163.262955108028
    test 447 line 50 azi2: 161.097729713868
    test 448 line 50 lat2: 1.618184178387
    test 449 line 50 lon2: 163.262955108028
    test 450 line 50 azi2: 161.097729713868
    test 451 line 51 lat: 25.179740
    test 452 line 51 lon: 107.504992
    test 453 line 51 fb: 154.055552
    test 454 line 51 lat2: 25.179740339437
    test 455 line 51 lon2: 107.504991932892
    test 456 line 51 azi2: 154.055552232572
    test 457 line 51 lat2: 25.179740339437
    test 458 line 51 lon2: 107.504991932892
    test 459 line 51 azi2: 154.055552232572
    test 460 line 52 lat: 57.391251
    test 461 line 52 lon: 89.082271
    test 462 line 52 fb: 101.276115
    test 463 line 52 lat2: 57.391251345244
    test 464 line 52 lon2: 89.082271206722
    test 465 line 52 azi2: 101.276114553753
    test 466 line 52 lat2: 57.391251345244
    test 467 line 52 lon2: 89.082271206722
    test 468 line 52 azi2: 101.276114553753
    test 469 line 53 lat: -11.470673
    test 470 line 53 lon: 48.285095
    test 471 line 53 fb: 148.389696
    test 472 line 53 lat2: -11.470672507979
    test 473 line 53 lon2: 48.285094684225
    test 474 line 53 azi2: 148.389695684750
    test 475 line 53 lat2: -11.470672507979
    test 476 line 53 lon2: 48.285094684225
    test 477 line 53 azi2: 148.389695684750
    test 478 line 54 lat: 27.356639
    test 479 line 54 lon: 84.391682
    test 480 line 54 fb: 104.661818
    test 481 line 54 lat2: 27.356639349123
    test 482 line 54 lon2: 84.391681754671
    test 483 line 54 azi2: 104.661818309238
    test 484 line 54 lat2: 27.356639349123
    test 485 line 54 lon2: 84.391681754671
    test 486 line 54 azi2: 104.661818309238
    test 487 line 55 lat: -40.533598
    test 488 line 55 lon: 103.488381
    test 489 line 55 fb: 132.398259
    test 490 line 55 lat2: -40.533597900971
    test 491 line 55 lon2: 103.488381204009
    test 492 line 55 azi2: 132.398259207371
    test 493 line 55 lat2: -40.533597900971
    test 494 line 55 lon2: 103.488381204009
    test 495 line 55 azi2: 132.398259207371
    test 496 line 56 lat: 52.337949
    test 497 line 56 lon: 149.908279
    test 498 line 56 fb: 162.333474
    test 499 line 56 lat2: 52.337949466457
    test 500 line 56 lon2: 149.908278798430
    test 501 line 56 azi2: 162.333474334205
    test 502 line 56 lat2: 52.337949466457
    test 503 line 56 lon2: 149.908278798430
    test 504 line 56 azi2: 162.333474334205
    test 505 line 57 lat: -58.474076
    test 506 line 57 lon: 78.718606
    test 507 line 57 fb: 117.457565
    test 508 line 57 lat2: -58.474075605820
    test 509 line 57 lon2: 78.718605560533
    test 510 line 57 azi2: 117.457565115569
    test 511 line 57 lat2: -58.474075605820
    test 512 line 57 lon2: 78.718605560533
    test 513 line 57 azi2: 117.457565115569
    test 514 line 58 lat: -35.840568
    test 515 line 58 lon: 4.157534
    test 516 line 58 fb: 174.451067
    test 517 line 58 lat2: -35.840568348239
    test 518 line 58 lon2: 4.157534199470
    test 519 line 58 azi2: 174.451066901814
    test 520 line 58 lat2: -35.840568348239
    test 521 line 58 lon2: 4.157534199470
    test 522 line 58 azi2: 174.451066901814
    test 523 line 59 lat: 15.629163
    test 524 line 59 lon: 102.677417
    test 525 line 59 fb: 103.482103
    test 526 line 59 lat2: 15.629163409998
    test 527 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 528 line 59 azi2: 103.482102722183
    test 529 line 59 lat2: 15.629163409998
    test 530 line 59 lon2: 102.677417064290  FAILED, KNOWN, expected 102.677417064289
    test 531 line 59 azi2: 103.482102722183
    test 532 line 60 lat: -1.256180
    test 533 line 60 lon: 133.625255
    test 534 line 60 fb: 104.470489
    test 535 line 60 lat2: -1.256179633151
    test 536 line 60 lon2: 133.625254783633
    test 537 line 60 azi2: 104.470489013739
    test 538 line 60 lat2: -1.256179633151
    test 539 line 60 lon2: 133.625254783633
    test 540 line 60 azi2: 104.470489013739
    test 541 line 61 lat: -40.558253
    test 542 line 61 lon: 112.897054
    test 543 line 61 fb: 90.226134
    test 544 line 61 lat2: -40.558252601871
    test 545 line 61 lon2: 112.897053867085
    test 546 line 61 azi2: 90.226134266467
    test 547 line 61 lat2: -40.558252601871
    test 548 line 61 lon2: 112.897053867085
    test 549 line 61 azi2: 90.226134266467
    test 550 line 62 lat: 86.193596
    test 551 line 62 lon: 116.956880
    test 552 line 62 fb: 117.618329
    test 553 line 62 lat2: 86.193595821107
    test 554 line 62 lon2: 116.956880430711
    test 555 line 62 azi2: 117.618329340274
    test 556 line 62 lat2: 86.193595821107
    test 557 line 62 lon2: 116.956880430711
    test 558 line 62 azi2: 117.618329340274
    test 559 line 63 lat: 6.874181
    test 560 line 63 lon: 54.891199
    test 561 line 63 fb: 90.820790
    test 562 line 63 lat2: 6.874181093562
    test 563 line 63 lon2: 54.891198619261
    test 564 line 63 azi2: 90.820789878786
    test 565 line 63 lat2: 6.874181093562
    test 566 line 63 lon2: 54.891198619261
    test 567 line 63 azi2: 90.820789878786
    test 568 line 64 lat: -2.554657
    test 569 line 64 lon: 71.539549
    test 570 line 64 fb: 105.722921
    test 571 line 64 lat2: -2.554657243385
    test 572 line 64 lon2: 71.539549368441
    test 573 line 64 azi2: 105.722921401613
    test 574 line 64 lat2: -2.554657243385
    test 575 line 64 lon2: 71.539549368441
    test 576 line 64 azi2: 105.722921401613
    test 577 line 65 lat: 1.329645
    test 578 line 65 lon: 138.134969
    test 579 line 65 fb: 150.465118
    test 580 line 65 lat2: 1.329645321136
    test 581 line 65 lon2: 138.134968538140
    test 582 line 65 azi2: 150.465118219879
    test 583 line 65 lat2: 1.329645321136
    test 584 line 65 lon2: 138.134968538140
    test 585 line 65 azi2: 150.465118219879
    test 586 line 66 lat: -44.026427
    test 587 line 66 lon: 121.367591
    test 588 line 66 fb: 123.975227
    test 589 line 66 lat2: -44.026426573446
    test 590 line 66 lon2: 121.367591215510
    test 591 line 66 azi2: 123.975227063718
    test 592 line 66 lat2: -44.026426573446
    test 593 line 66 lon2: 121.367591215510
    test 594 line 66 azi2: 123.975227063718
    test 595 line 67 lat: -3.399081
    test 596 line 67 lon: 138.655764
    test 597 line 67 fb: 98.994343
    test 598 line 67 lat2: -3.399080708673
    test 599 line 67 lon2: 138.655764270175
    test 600 line 67 azi2: 98.994343217447
    test 601 line 67 lat2: -3.399080708673
    test 602 line 67 lon2: 138.655764270175
    test 603 line 67 azi2: 98.994343217447
    test 604 line 68 lat: -26.776985
    test 605 line 68 lon: 67.020055
    test 606 line 68 fb: 119.394665
    test 607 line 68 lat2: -26.776984673364
    test 608 line 68 lon2: 67.020054548341
    test 609 line 68 azi2: 119.394664651636
    test 610 line 68 lat2: -26.776984673364
    test 611 line 68 lon2: 67.020054548341
    test 612 line 68 azi2: 119.394664651636
    test 613 line 69 lat: 52.057239
    test 614 line 69 lon: 151.887270
    test 615 line 69 fb: 161.537826
    test 616 line 69 lat2: 52.057239269050
    test 617 line 69 lon2: 151.887270484247
    test 618 line 69 azi2: 161.537826425477
    test 619 line 69 lat2: 52.057239269050
    test 620 line 69 lon2: 151.887270484247
    test 621 line 69 azi2: 161.537826425477
    test 622 line 70 lat: 3.784724
    test 623 line 70 lon: 102.727745
    test 624 line 70 fb: 116.453155
    test 625 line 70 lat2: 3.784724165483
    test 626 line 70 lon2: 102.727744934481
    test 627 line 70 azi2: 116.453155405439
    test 628 line 70 lat2: 3.784724165483
    test 629 line 70 lon2: 102.727744934481
    test 630 line 70 azi2: 116.453155405439
    test 631 line 71 lat: -40.409299
    test 632 line 71 lon: 86.033195
    test 633 line 71 fb: 121.080298
    test 634 line 71 lat2: -40.409298772797
    test 635 line 71 lon2: 86.033195335657
    test 636 line 71 azi2: 121.080297615268
    test 637 line 71 lat2: -40.409298772797
    test 638 line 71 lon2: 86.033195335657
    test 639 line 71 azi2: 121.080297615268
    test 640 line 72 lat: 73.013460
    test 641 line 72 lon: 76.188125
    test 642 line 72 fb: 78.877769
    test 643 line 72 lat2: 73.013460186926
    test 644 line 72 lon2: 76.188125151657
    test 645 line 72 azi2: 78.877769459629
    test 646 line 72 lat2: 73.013460186926
    test 647 line 72 lon2: 76.188125151657
    test 648 line 72 azi2: 78.877769459629
    test 649 line 73 lat: 52.870132
    test 650 line 73 lon: 51.020900
    test 651 line 73 fb: 102.113351
    test 652 line 73 lat2: 52.870131799667
    test 653 line 73 lon2: 51.020900069545
    test 654 line 73 azi2: 102.113351369331
    test 655 line 73 lat2: 52.870131799667
    test 656 line 73 lon2: 51.020900069545
    test 657 line 73 azi2: 102.113351369331
    test 658 line 74 lat: 28.909632
    test 659 line 74 lon: 17.071526
    test 660 line 74 fb: 103.660711
    test 661 line 74 lat2: 28.909631785857
    test 662 line 74 lon2: 17.071526465331
    test 663 line 74 azi2: 103.660711362255
    test 664 line 74 lat2: 28.909631785857
    test 665 line 74 lon2: 17.071526465331
    test 666 line 74 azi2: 103.660711362255
    test 667 line 75 lat: -58.257855
    test 668 line 75 lon: 15.812862
    test 669 line 75 fb: 169.606337
    test 670 line 75 lat2: -58.257854831091
    test 671 line 75 lon2: 15.812862089412
    test 672 line 75 azi2: 169.606337169070
    test 673 line 75 lat2: -58.257854831091
    test 674 line 75 lon2: 15.812862089412
    test 675 line 75 azi2: 169.606337169070
    test 676 line 76 lat: -58.869445
    test 677 line 76 lon: 132.036795
    test 678 line 76 fb: 53.946549
    test 679 line 76 lat2: -58.869445004289
    test 680 line 76 lon2: 132.036794965086
    test 681 line 76 azi2: 53.946549037654
    test 682 line 76 lat2: -58.869445004289
    test 683 line 76 lon2: 132.036794965086
    test 684 line 76 azi2: 53.946549037654
    test 685 line 77 lat: -45.547043
    test 686 line 77 lon: 77.540664
    test 687 line 77 fb: 126.917177
    test 688 line 77 lat2: -45.547042598505
    test 689 line 77 lon2: 77.540663933413
    test 690 line 77 azi2: 126.917177154676
    test 691 line 77 lat2: -45.547042598505
    test 692 line 77 lon2: 77.540663933413
    test 693 line 77 azi2: 126.917177154676
    test 694 line 78 lat: 45.046385
    test 695 line 78 lon: 149.382429
    test 696 line 78 fb: 162.117474
    test 697 line 78 lat2: 45.046384823604
    test 698 line 78 lon2: 149.382428769460
    test 699 line 78 azi2: 162.117474447248
    test 700 line 78 lat2: 45.046384823604
    test 701 line 78 lon2: 149.382428769460
    test 702 line 78 azi2: 162.117474447248
    test 703 line 79 lat: -74.853338
    test 704 line 79 lon: 96.072097
    test 705 line 79 fb: 85.425493
    test 706 line 79 lat2: -74.853338324199
    test 707 line 79 lon2: 96.072096720955
    test 708 line 79 azi2: 85.425493305289
    test 709 line 79 lat2: -74.853338324199
    test 710 line 79 lon2: 96.072096720956  FAILED, KNOWN, expected 96.072096720955
    test 711 line 79 azi2: 85.425493305289
    test 712 line 80 lat: -13.205775
    test 713 line 80 lon: 57.532285
    test 714 line 80 fb: 122.358040
    test 715 line 80 lat2: -13.205775181752
    test 716 line 80 lon2: 57.532285422140
    test 717 line 80 azi2: 122.358040028964
    test 718 line 80 lat2: -13.205775181752
    test 719 line 80 lon2: 57.532285422140
    test 720 line 80 azi2: 122.358040028964
    test 721 line 81 lat: -5.135864
    test 722 line 81 lon: 115.048833
    test 723 line 81 fb: 93.168400
    test 724 line 81 lat2: -5.135863872649
    test 725 line 81 lon2: 115.048832990097
    test 726 line 81 azi2: 93.168399576996
    test 727 line 81 lat2: -5.135863872649
    test 728 line 81 lon2: 115.048832990097
    test 729 line 81 azi2: 93.168399576996
    test 730 line 82 lat: 13.355453
    test 731 line 82 lon: 19.253946
    test 732 line 82 fb: 143.568719
    test 733 line 82 lat2: 13.355452912310
    test 734 line 82 lon2: 19.253945880531
    test 735 line 82 azi2: 143.568718864193
    test 736 line 82 lat2: 13.355452912310
    test 737 line 82 lon2: 19.253945880531
    test 738 line 82 azi2: 143.568718864193
    test 739 line 83 lat: 0.766426
    test 740 line 83 lon: 147.485817
    test 741 line 83 fb: 144.982274
    test 742 line 83 lat2: 0.766426443892
    test 743 line 83 lon2: 147.485816830606
    test 744 line 83 azi2: 144.982273873382
    test 745 line 83 lat2: 0.766426443892
    test 746 line 83 lon2: 147.485816830606
    test 747 line 83 azi2: 144.982273873382
    test 748 line 84 lat: 10.228416
    test 749 line 84 lon: 159.204118
    test 750 line 84 fb: 173.111973
    test 751 line 84 lat2: 10.228416314659
    test 752 line 84 lon2: 159.204118025562
    test 753 line 84 azi2: 173.111973027488
    test 754 line 84 lat2: 10.228416314659
    test 755 line 84 lon2: 159.204118025562
    test 756 line 84 azi2: 173.111973027488
    test 757 line 85 lat: 73.178089
    test 758 line 85 lon: 131.762700
    test 759 line 85 fb: 135.271161
    test 760 line 85 lat2: 73.178089048974
    test 761 line 85 lon2: 131.762699581940
    test 762 line 85 azi2: 135.271161440271
    test 763 line 85 lat2: 73.178089048974
    test 764 line 85 lon2: 131.762699581941  FAILED, KNOWN, expected 131.762699581940
    test 765 line 85 azi2: 135.271161440271
    test 766 line 86 lat: -16.908717
    test 767 line 86 lon: 149.240494
    test 768 line 86 fb: 90.725082
    test 769 line 86 lat2: -16.908717231321
    test 770 line 86 lon2: 149.240493850337
    test 771 line 86 azi2: 90.725082091932
    test 772 line 86 lat2: -16.908717231321
    test 773 line 86 lon2: 149.240493850337
    test 774 line 86 azi2: 90.725082091932
    test 775 line 87 lat: -23.440025
    test 776 line 87 lon: 98.819595
    test 777 line 87 fb: 154.388320
    test 778 line 87 lat2: -23.440025289757
    test 779 line 87 lon2: 98.819595131759
    test 780 line 87 azi2: 154.388319751570
    test 781 line 87 lat2: -23.440025289757
    test 782 line 87 lon2: 98.819595131759
    test 783 line 87 azi2: 154.388319751570
    test 784 line 88 lat: -51.344465
    test 785 line 88 lon: 54.299399
    test 786 line 88 fb: 139.903236
    test 787 line 88 lat2: -51.344465279371
    test 788 line 88 lon2: 54.299399477396
    test 789 line 88 azi2: 139.903236261795
    test 790 line 88 lat2: -51.344465279371
    test 791 line 88 lon2: 54.299399477396
    test 792 line 88 azi2: 139.903236261795
    test 793 line 89 lat: 33.922320
    test 794 line 89 lon: 143.463070
    test 795 line 89 fb: 132.788230
    test 796 line 89 lat2: 33.922319712554
    test 797 line 89 lon2: 143.463070326988
    test 798 line 89 azi2: 132.788229856713
    test 799 line 89 lat2: 33.922319712554
    test 800 line 89 lon2: 143.463070326988
    test 801 line 89 azi2: 132.788229856713
    test 802 line 90 lat: -83.333068
    test 803 line 90 lon: 177.611925
    test 804 line 90 fb: 2.633769
    test 805 line 90 lat2: -83.333068057524
    test 806 line 90 lon2: 177.611924577958
    test 807 line 90 azi2: 2.633768744582
    test 808 line 90 lat2: -83.333068057524
    test 809 line 90 lon2: 177.611924577958
    test 810 line 90 azi2: 2.633768744582
    test 811 line 91 lat: 20.587333
    test 812 line 91 lon: 164.201962
    test 813 line 91 fb: 166.991083
    test 814 line 91 lat2: 20.587333492522
    test 815 line 91 lon2: 164.201962479604
    test 816 line 91 azi2: 166.991083245940
    test 817 line 91 lat2: 20.587333492522
    test 818 line 91 lon2: 164.201962479604
    test 819 line 91 azi2: 166.991083245940
    test 820 line 92 lat: 52.612815
    test 821 line 92 lon: 110.766184
    test 822 line 92 fb: 168.281486
    test 823 line 92 lat2: 52.612815386144
    test 824 line 92 lon2: 110.766184475279
    test 825 line 92 azi2: 168.281485715811
    test 826 line 92 lat2: 52.612815386144
    test 827 line 92 lon2: 110.766184475279
    test 828 line 92 azi2: 168.281485715811
    test 829 line 93 lat: -41.681373
    test 830 line 93 lon: 82.150183
    test 831 line 93 fb: 107.012959
    test 832 line 93 lat2: -41.681372899642
    test 833 line 93 lon2: 82.150183233451
    test 834 line 93 azi2: 107.012959072514
    test 835 line 93 lat2: -41.681372899642
    test 836 line 93 lon2: 82.150183233451
    test 837 line 93 azi2: 107.012959072514
    test 838 line 94 lat: 27.082807
    test 839 line 94 lon: 171.332531
    test 840 line 94 fb: 174.934340
    test 841 line 94 lat2: 27.082807052702
    test 842 line 94 lon2: 171.332530862401
    test 843 line 94 azi2: 174.934339881142
    test 844 line 94 lat2: 27.082807052702
    test 845 line 94 lon2: 171.332530862401
    test 846 line 94 azi2: 174.934339881142
    test 847 line 95 lat: 57.992299
    test 848 line 95 lon: 15.128357
    test 849 line 95 fb: 62.342982
    test 850 line 95 lat2: 57.992299464191
    test 851 line 95 lon2: 15.128356773547
    test 852 line 95 azi2: 62.342982084737
    test 853 line 95 lat2: 57.992299464191
    test 854 line 95 lon2: 15.128356773547
    test 855 line 95 azi2: 62.342982084737
    test 856 line 96 lat: -10.526000
    test 857 line 96 lon: 33.778702
    test 858 line 96 fb: 165.687804
    test 859 line 96 lat2: -10.526000344959
    test 860 line 96 lon2: 33.778701722506
    test 861 line 96 azi2: 165.687803859941
    test 862 line 96 lat2: -10.526000344959
    test 863 line 96 lon2: 33.778701722506
    test 864 line 96 azi2: 165.687803859941
    test 865 line 97 lat: 25.802395
    test 866 line 97 lon: 98.502531
    test 867 line 97 fb: 97.837271
    test 868 line 97 lat2: 25.802394934787
    test 869 line 97 lon2: 98.502531199301
    test 870 line 97 azi2: 97.837270592496
    test 871 line 97 lat2: 25.802394934787
    test 872 line 97 lon2: 98.502531199301
    test 873 line 97 azi2: 97.837270592496
    test 874 line 98 lat: 47.163255
    test 875 line 98 lon: 156.720176
    test 876 line 98 fb: 160.291022
    test 877 line 98 lat2: 47.163255465769
    test 878 line 98 lon2: 156.720176105542
    test 879 line 98 azi2: 160.291021678921
    test 880 line 98 lat2: 47.163255465769
    test 881 line 98 lon2: 156.720176105542
    test 882 line 98 azi2: 160.291021678921
    test 883 line 99 lat: 47.932063
    test 884 line 99 lon: 35.094714
    test 885 line 99 fb: 137.545065
    test 886 line 99 lat2: 47.932062978964
    test 887 line 99 lon2: 35.094714092217
    test 888 line 99 azi2: 137.545065115425
    test 889 line 99 lat2: 47.932062978964
    test 890 line 99 lon2: 35.094714092217
    test 891 line 99 azi2: 137.545065115425
    test 892 line 100 lat: -60.204340
    test 893 line 100 lon: 117.726218
    test 894 line 100 fb: 72.585011
    test 895 line 100 lat2: -60.204339807984
    test 896 line 100 lon2: 117.726217548610
    test 897 line 100 azi2: 72.585010656772
    test 898 line 100 lat2: -60.204339807984
    test 899 line 100 lon2: 117.726217548610
    test 900 line 100 azi2: 72.585010656772
    test 901 line 101 lat: 35.247411
    test 902 line 101 lon: 59.471562
    test 903 line 101 fb: 81.179468
    test 904 line 101 lat2: 35.247410984329
    test 905 line 101 lon2: 59.471562388985
    test 906 line 101 azi2: 81.179468094302
    test 907 line 101 lat2: 35.247410984329
    test 908 line 101 lon2: 59.471562388985
    test 909 line 101 azi2: 81.179468094302
    test 910 line 102 lat: 19.218268
    test 911 line 102 lon: 165.507915
    test 912 line 102 fb: 167.452074
    test 913 line 102 lat2: 19.218268047706
    test 914 line 102 lon2: 165.507915017643
    test 915 line 102 azi2: 167.452074301867
    test 916 line 102 lat2: 19.218268047706
    test 917 line 102 lon2: 165.507915017643
    test 918 line 102 azi2: 167.452074301867
    test 919 line 103 lat: 55.428809
    test 920 line 103 lon: 121.956541
    test 921 line 103 fb: 154.501481
    test 922 line 103 lat2: 55.428809300888
    test 923 line 103 lon2: 121.956541206929
    test 924 line 103 azi2: 154.501481394521
    test 925 line 103 lat2: 55.428809300888
    test 926 line 103 lon2: 121.956541206929
    test 927 line 103 azi2: 154.501481394521
    test 928 line 104 lat: 49.294374
    test 929 line 104 lon: 119.661420
    test 930 line 104 fb: 157.209489
    test 931 line 104 lat2: 49.294374468687
    test 932 line 104 lon2: 119.661419832789
    test 933 line 104 azi2: 157.209488754087
    test 934 line 104 lat2: 49.294374468687
    test 935 line 104 lon2: 119.661419832789
    test 936 line 104 azi2: 157.209488754087
    test 937 line 105 lat: -32.534872
    test 938 line 105 lon: 152.280610
    test 939 line 105 fb: 45.281812
    test 940 line 105 lat2: -32.534872085863
    test 941 line 105 lon2: 152.280609797481
    test 942 line 105 azi2: 45.281812386148
    test 943 line 105 lat2: -32.534872085863
    test 944 line 105 lon2: 152.280609797481
    test 945 line 105 azi2: 45.281812386148
    test 946 line 106 lat: -1.097899
    test 947 line 106 lon: 104.697360
    test 948 line 106 fb: 126.298489
    test 949 line 106 lat2: -1.097899218947
    test 950 line 106 lon2: 104.697359959629
    test 951 line 106 azi2: 126.298488917783
    test 952 line 106 lat2: -1.097899218947
    test 953 line 106 lon2: 104.697359959629
    test 954 line 106 azi2: 126.298488917783
    test 955 line 107 lat: -18.034366
    test 956 line 107 lon: 28.460388
    test 957 line 107 fb: 129.520364
    test 958 line 107 lat2: -18.034366293950
    test 959 line 107 lon2: 28.460387638999
    test 960 line 107 azi2: 129.520363751001
    test 961 line 107 lat2: -18.034366293950
    test 962 line 107 lon2: 28.460387638999
    test 963 line 107 azi2: 129.520363751001
    test 964 line 108 lat: 76.310833
    test 965 line 108 lon: 80.110525
    test 966 line 108 fb: 106.655922
    test 967 line 108 lat2: 76.310832995825
    test 968 line 108 lon2: 80.110524683625
    test 969 line 108 azi2: 106.655921818336
    test 970 line 108 lat2: 76.310832995825
    test 971 line 108 lon2: 80.110524683625
    test 972 line 108 azi2: 106.655921818336
    test 973 line 109 lat: 39.838034
    test 974 line 109 lon: 42.989610
    test 975 line 109 fb: 69.695281
    test 976 line 109 lat2: 39.838033717901
    test 977 line 109 lon2: 42.989610477861
    test 978 line 109 azi2: 69.695281464222
    test 979 line 109 lat2: 39.838033717901
    test 980 line 109 lon2: 42.989610477861
    test 981 line 109 azi2: 69.695281464222
    test 982 line 110 lat: -56.710166
    test 983 line 110 lon: 125.242287
    test 984 line 110 fb: 60.118756
    test 985 line 110 lat2: -56.710165877845
    test 986 line 110 lon2: 125.242287231675
    test 987 line 110 azi2: 60.118756013168
    test 988 line 110 lat2: -56.710165877845
    test 989 line 110 lon2: 125.242287231675
    test 990 line 110 azi2: 60.118756013168
    test 991 line 111 lat: 55.796062
    test 992 line 111 lon: 59.736599
    test 993 line 111 fb: 73.536728
    test 994 line 111 lat2: 55.796061639165
    test 995 line 111 lon2: 59.736598787303
    test 996 line 111 azi2: 73.536727826063
    test 997 line 111 lat2: 55.796061639165
    test 998 line 111 lon2: 59.736598787303
    test 999 line 111 azi2: 73.536727826063
    test 1000 line 112 lat: -36.553675
    test 1001 line 112 lon: 38.656806
    test 1002 line 112 fb: 134.414837
    test 1003 line 112 lat2: -36.553675319553
    test 1004 line 112 lon2: 38.656806212281
    test 1005 line 112 azi2: 134.414836606696
    test 1006 line 112 lat2: -36.553675319553
    test 1007 line 112 lon2: 38.656806212281
    test 1008 line 112 azi2: 134.414836606696
    test 1009 line 113 lat: -36.798456
    test 1010 line 113 lon: 163.588375
    test 1011 line 113 fb: 147.324204
    test 1012 line 113 lat2: -36.798455994877
    test 1013 line 113 lon2: 163.588375017283
    test 1014 line 113 azi2: 147.324204021436
    test 1015 line 113 lat2: -36.798455994877
    test 1016 line 113 lon2: 163.588375017283
    test 1017 line 113 azi2: 147.324204021436
    test 1018 line 114 lat: -15.952937
    test 1019 line 114 lon: 55.126807
    test 1020 line 114 fb: 134.743426
    test 1021 line 114 lat2: -15.952937085211
    test 1022 line 114 lon2: 55.126807113658
    test 1023 line 114 azi2: 134.743426025963
    test 1024 line 114 lat2: -15.952937085211
    test 1025 line 114 lon2: 55.126807113658
    test 1026 line 114 azi2: 134.743426025963
    test 1027 line 115 lat: -34.573087
    test 1028 line 115 lon: 69.304064
    test 1029 line 115 fb: 111.515973
    test 1030 line 115 lat2: -34.573086586710
    test 1031 line 115 lon2: 69.304064202466
    test 1032 line 115 azi2: 111.515973223076
    test 1033 line 115 lat2: -34.573086586710
    test 1034 line 115 lon2: 69.304064202466
    test 1035 line 115 azi2: 111.515973223076
    test 1036 line 116 lat: 26.643499
    test 1037 line 116 lon: 1.500481
    test 1038 line 116 fb: 7.958966
    test 1039 line 116 lat2: 26.643498959841
    test 1040 line 116 lon2: 1.500480924882
    test 1041 line 116 azi2: 7.958966071178
    test 1042 line 116 lat2: 26.643498959841
    test 1043 line 116 lon2: 1.500480924882
    test 1044 line 116 azi2: 7.958966071178
    test 1045 line 117 lat: 60.891878
    test 1046 line 117 lon: 91.543410
    test 1047 line 117 fb: 92.273095
    test 1048 line 117 lat2: 60.891878271763
    test 1049 line 117 lon2: 91.543409983653
    test 1050 line 117 azi2: 92.273095036246
    test 1051 line 117 lat2: 60.891878271763
    test 1052 line 117 lon2: 91.543409983653
    test 1053 line 117 azi2: 92.273095036246
    test 1054 line 118 lat: 64.148187
    test 1055 line 118 lon: 136.552579
    test 1056 line 118 fb: 147.193229
    test 1057 line 118 lat2: 64.148186913822
    test 1058 line 118 lon2: 136.552579389353
    test 1059 line 118 azi2: 147.193228706030
    test 1060 line 118 lat2: 64.148186913822
    test 1061 line 118 lon2: 136.552579389353
    test 1062 line 118 azi2: 147.193228706030
    test 1063 line 119 lat: 62.311678
    test 1064 line 119 lon: 39.238630
    test 1065 line 119 fb: 53.785893
    test 1066 line 119 lat2: 62.311677748693
    test 1067 line 119 lon2: 39.238629619778
    test 1068 line 119 azi2: 53.785893324444
    test 1069 line 119 lat2: 62.311677748693
    test 1070 line 119 lon2: 39.238629619778
    test 1071 line 119 azi2: 53.785893324444
    test 1072 line 120 lat: 27.239733
    test 1073 line 120 lon: 136.649227
    test 1074 line 120 fb: 162.935700
    test 1075 line 120 lat2: 27.239733033115
    test 1076 line 120 lon2: 136.649227320518
    test 1077 line 120 azi2: 162.935700444146
    test 1078 line 120 lat2: 27.239733033115
    test 1079 line 120 lon2: 136.649227320518
    test 1080 line 120 azi2: 162.935700444146
    test 1081 line 121 lat: 6.562844
    test 1082 line 121 lon: 170.159007
    test 1083 line 121 fb: 174.851345
    test 1084 line 121 lat2: 6.562844367534
    test 1085 line 121 lon2: 170.159007094343
    test 1086 line 121 azi2: 174.851345174583
    test 1087 line 121 lat2: 6.562844367534
    test 1088 line 121 lon2: 170.159007094343
    test 1089 line 121 azi2: 174.851345174583
    test 1090 line 122 lat: -29.537259
    test 1091 line 122 lon: 105.350044
    test 1092 line 122 fb: 141.393876
    test 1093 line 122 lat2: -29.537259231420
    test 1094 line 122 lon2: 105.350044044462
    test 1095 line 122 azi2: 141.393876478962
    test 1096 line 122 lat2: -29.537259231420
    test 1097 line 122 lon2: 105.350044044462
    test 1098 line 122 azi2: 141.393876478962
    test 1099 line 123 lat: -66.447700
    test 1100 line 123 lon: 83.741961
    test 1101 line 123 fb: 129.422490
    test 1102 line 123 lat2: -66.447699831143
    test 1103 line 123 lon2: 83.741960628420
    test 1104 line 123 azi2: 129.422490051758
    test 1105 line 123 lat2: -66.447699831143
    test 1106 line 123 lon2: 83.741960628420
    test 1107 line 123 azi2: 129.422490051758
    test 1108 line 124 lat: 56.926818
    test 1109 line 124 lon: 20.197117
    test 1110 line 124 fb: 37.960006
    test 1111 line 124 lat2: 56.926817599968
    test 1112 line 124 lon2: 20.197117058896
    test 1113 line 124 azi2: 37.960006049295
    test 1114 line 124 lat2: 56.926817599968
    test 1115 line 124 lon2: 20.197117058896
    test 1116 line 124 azi2: 37.960006049295
    test 1117 line 125 lat: 55.018266
    test 1118 line 125 lon: 83.735441
    test 1119 line 125 fb: 130.766515
    test 1120 line 125 lat2: 55.018265995959
    test 1121 line 125 lon2: 83.735441278691
    test 1122 line 125 azi2: 130.766514657995
    test 1123 line 125 lat2: 55.018265995959
    test 1124 line 125 lon2: 83.735441278691
    test 1125 line 125 azi2: 130.766514657995
    test 1126 line 126 lat: -78.131054
    test 1127 line 126 lon: 56.098176
    test 1128 line 126 fb: 127.132203
    test 1129 line 126 lat2: -78.131053729786
    test 1130 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1131 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1132 line 126 lat2: -78.131053729786
    test 1133 line 126 lon2: 56.098176359327  FAILED, KNOWN, expected 56.098176359326
    test 1134 line 126 azi2: 127.132203471256  FAILED, KNOWN, expected 127.132203471257
    test 1135 line 127 lat: -18.223027
    test 1136 line 127 lon: 86.221345
    test 1137 line 127 fb: 114.875019
    test 1138 line 127 lat2: -18.223027345294
    test 1139 line 127 lon2: 86.221345156045
    test 1140 line 127 azi2: 114.875019395396
    test 1141 line 127 lat2: -18.223027345294
    test 1142 line 127 lon2: 86.221345156045
    test 1143 line 127 azi2: 114.875019395396
    test 1144 line 128 lat: -16.100413
    test 1145 line 128 lon: 54.195260
    test 1146 line 128 fb: 126.748474
    test 1147 line 128 lat2: -16.100412777565
    test 1148 line 128 lon2: 54.195259657284
    test 1149 line 128 azi2: 126.748473963924
    test 1150 line 128 lat2: -16.100412777565
    test 1151 line 128 lon2: 54.195259657284
    test 1152 line 128 azi2: 126.748473963924
    test 1153 line 129 lat: -15.192944
    test 1154 line 129 lon: 85.057605
    test 1155 line 129 fb: 133.468781
    test 1156 line 129 lat2: -15.192944143354
    test 1157 line 129 lon2: 85.057605312625
    test 1158 line 129 azi2: 133.468780913302
    test 1159 line 129 lat2: -15.192944143354
    test 1160 line 129 lon2: 85.057605312625
    test 1161 line 129 azi2: 133.468780913302
    test 1162 line 130 lat: -1.279757
    test 1163 line 130 lon: 93.430943
    test 1164 line 130 fb: 128.545662
    test 1165 line 130 lat2: -1.279756550061
    test 1166 line 130 lon2: 93.430943123745
    test 1167 line 130 azi2: 128.545661704820
    test 1168 line 130 lat2: -1.279756550061
    test 1169 line 130 lon2: 93.430943123745
    test 1170 line 130 azi2: 128.545661704820
    test 1171 line 131 lat: -29.465713
    test 1172 line 131 lon: 79.050046
    test 1173 line 131 fb: 109.482097
    test 1174 line 131 lat2: -29.465712645249
    test 1175 line 131 lon2: 79.050045796725
    test 1176 line 131 azi2: 109.482097420926
    test 1177 line 131 lat2: -29.465712645249
    test 1178 line 131 lon2: 79.050045796725
    test 1179 line 131 azi2: 109.482097420926
    test 1180 line 132 lat: 31.819596
    test 1181 line 132 lon: 88.251997
    test 1182 line 132 fb: 91.173935
    test 1183 line 132 lat2: 31.819596255581
    test 1184 line 132 lon2: 88.251997328019
    test 1185 line 132 azi2: 91.173935030538
    test 1186 line 132 lat2: 31.819596255581
    test 1187 line 132 lon2: 88.251997328019
    test 1188 line 132 azi2: 91.173935030538
    test 1189 line 133 lat: -63.260477
    test 1190 line 133 lon: 96.535465
    test 1191 line 133 fb: 84.208873
    test 1192 line 133 lat2: -63.260477387265
    test 1193 line 133 lon2: 96.535465277415
    test 1194 line 133 azi2: 84.208873088521
    test 1195 line 133 lat2: -63.260477387265
    test 1196 line 133 lon2: 96.535465277415
    test 1197 line 133 azi2: 84.208873088521
    test 1198 line 134 lat: 12.908849
    test 1199 line 134 lon: 116.734308
    test 1200 line 134 fb: 110.313866
    test 1201 line 134 lat2: 12.908849199388
    test 1202 line 134 lon2: 116.734308245854
    test 1203 line 134 azi2: 110.313865884978
    test 1204 line 134 lat2: 12.908849199388
    test 1205 line 134 lon2: 116.734308245854
    test 1206 line 134 azi2: 110.313865884978
    test 1207 line 135 lat: -73.345839
    test 1208 line 135 lon: 99.753937
    test 1209 line 135 fb: 89.074642
    test 1210 line 135 lat2: -73.345839080078
    test 1211 line 135 lon2: 99.753937450114
    test 1212 line 135 azi2: 89.074641755279
    test 1213 line 135 lat2: -73.345839080078
    test 1214 line 135 lon2: 99.753937450114
    test 1215 line 135 azi2: 89.074641755279
    test 1216 line 136 lat: -58.777033
    test 1217 line 136 lon: 161.963990
    test 1218 line 136 fb: 21.998889
    test 1219 line 136 lat2: -58.777033293076
    test 1220 line 136 lon2: 161.963989905489
    test 1221 line 136 azi2: 21.998888971548
    test 1222 line 136 lat2: -58.777033293076
    test 1223 line 136 lon2: 161.963989905489
    test 1224 line 136 azi2: 21.998888971548
    test 1225 line 137 lat: 5.093069
    test 1226 line 137 lon: 53.687921
    test 1227 line 137 fb: 124.015842
    test 1228 line 137 lat2: 5.093068996651
    test 1229 line 137 lon2: 53.687921438754
    test 1230 line 137 azi2: 124.015842231205
    test 1231 line 137 lat2: 5.093068996651
    test 1232 line 137 lon2: 53.687921438754
    test 1233 line 137 azi2: 124.015842231205
    test 1234 line 138 lat: 35.659489
    test 1235 line 138 lon: 111.729315
    test 1236 line 138 fb: 133.697281
    test 1237 line 138 lat2: 35.659488664161
    test 1238 line 138 lon2: 111.729315023485
    test 1239 line 138 azi2: 133.697281357224
    test 1240 line 138 lat2: 35.659488664161
    test 1241 line 138 lon2: 111.729315023485
    test 1242 line 138 azi2: 133.697281357224
    test 1243 line 139 lat: -24.330784
    test 1244 line 139 lon: 71.666568
    test 1245 line 139 fb: 106.278062
    test 1246 line 139 lat2: -24.330783755994
    test 1247 line 139 lon2: 71.666567863169  FAILED, KNOWN, expected 71.666567863170
    test 1248 line 139 azi2: 106.278062394907
    test 1249 line 139 lat2: -24.330783755994
    test 1250 line 139 lon2: 71.666567863170
    test 1251 line 139 azi2: 106.278062394907
    test 1252 line 140 lat: -46.218742
    test 1253 line 140 lon: 91.580078
    test 1254 line 140 fb: 106.279111
    test 1255 line 140 lat2: -46.218742288678
    test 1256 line 140 lon2: 91.580077788700
    test 1257 line 140 azi2: 106.279110700398
    test 1258 line 140 lat2: -46.218742288678
    test 1259 line 140 lon2: 91.580077788700
    test 1260 line 140 azi2: 106.279110700398
    test 1261 line 141 lat: 50.143353
    test 1262 line 141 lon: 101.322503
    test 1263 line 141 fb: 154.314496
    test 1264 line 141 lat2: 50.143352562968
    test 1265 line 141 lon2: 101.322502529615
    test 1266 line 141 azi2: 154.314496467352
    test 1267 line 141 lat2: 50.143352562968
    test 1268 line 141 lon2: 101.322502529615
    test 1269 line 141 azi2: 154.314496467352
    test 1270 line 142 lat: -16.604376
    test 1271 line 142 lon: 134.279201
    test 1272 line 142 fb: 106.895990
    test 1273 line 142 lat2: -16.604375537699
    test 1274 line 142 lon2: 134.279201209117
    test 1275 line 142 azi2: 106.895989785632
    test 1276 line 142 lat2: -16.604375537699
    test 1277 line 142 lon2: 134.279201209117
    test 1278 line 142 azi2: 106.895989785632
    test 1279 line 143 lat: 54.031290
    test 1280 line 143 lon: 144.862702
    test 1281 line 143 fb: 152.937010
    test 1282 line 143 lat2: 54.031289901242
    test 1283 line 143 lon2: 144.862701667601
    test 1284 line 143 azi2: 152.937009701639
    test 1285 line 143 lat2: 54.031289901242
    test 1286 line 143 lon2: 144.862701667602  FAILED, KNOWN, expected 144.862701667601
    test 1287 line 143 azi2: 152.937009701639
    test 1288 line 144 lat: 0.616911
    test 1289 line 144 lon: 110.974662
    test 1290 line 144 fb: 115.206118
    test 1291 line 144 lat2: 0.616910921892
    test 1292 line 144 lon2: 110.974662272005
    test 1293 line 144 azi2: 115.206118431862
    test 1294 line 144 lat2: 0.616910921892
    test 1295 line 144 lon2: 110.974662272005
    test 1296 line 144 azi2: 115.206118431862
    test 1297 line 145 lat: -6.243779
    test 1298 line 145 lon: 175.658895
    test 1299 line 145 fb: 177.520147
    test 1300 line 145 lat2: -6.243779047728
    test 1301 line 145 lon2: 175.658894820006
    test 1302 line 145 azi2: 177.520147377315
    test 1303 line 145 lat2: -6.243779047728
    test 1304 line 145 lon2: 175.658894820006
    test 1305 line 145 azi2: 177.520147377315
    test 1306 line 146 lat: -70.416699
    test 1307 line 146 lon: 169.642468
    test 1308 line 146 fb: 11.978943
    test 1309 line 146 lat2: -70.416698815769
    test 1310 line 146 lon2: 169.642468357274
    test 1311 line 146 azi2: 11.978943348082
    test 1312 line 146 lat2: -70.416698815769
    test 1313 line 146 lon2: 169.642468357274
    test 1314 line 146 azi2: 11.978943348082
    test 1315 line 147 lat: 19.558617
    test 1316 line 147 lon: 88.645709
    test 1317 line 147 fb: 113.578814
    test 1318 line 147 lat2: 19.558616692495
    test 1319 line 147 lon2: 88.645708539223
    test 1320 line 147 azi2: 113.578814362497
    test 1321 line 147 lat2: 19.558616692495
    test 1322 line 147 lon2: 88.645708539223
    test 1323 line 147 azi2: 113.578814362497
    test 1324 line 148 lat: -23.555114
    test 1325 line 148 lon: 162.457529
    test 1326 line 148 fb: 147.104331
    test 1327 line 148 lat2: -23.555114207892
    test 1328 line 148 lon2: 162.457529431664
    test 1329 line 148 azi2: 147.104330772141
    test 1330 line 148 lat2: -23.555114207892
    test 1331 line 148 lon2: 162.457529431664
    test 1332 line 148 azi2: 147.104330772141
    test 1333 line 149 lat: -51.275738
    test 1334 line 149 lon: 103.747943
    test 1335 line 149 fb: 115.235374
    test 1336 line 149 lat2: -51.275737933996
    test 1337 line 149 lon2: 103.747943009536
    test 1338 line 149 azi2: 115.235373813929
    test 1339 line 149 lat2: -51.275737933996
    test 1340 line 149 lon2: 103.747943009536
    test 1341 line 149 azi2: 115.235373813929
    test 1342 line 150 lat: 25.374602
    test 1343 line 150 lon: 143.135783
    test 1344 line 150 fb: 126.548735
    test 1345 line 150 lat2: 25.374601552526
    test 1346 line 150 lon2: 143.135783283239
    test 1347 line 150 azi2: 126.548735117003
    test 1348 line 150 lat2: 25.374601552526
    test 1349 line 150 lon2: 143.135783283239
    test 1350 line 150 azi2: 126.548735117003
    test 1351 line 151 lat: 23.967825
    test 1352 line 151 lon: 153.611116
    test 1353 line 151 fb: 149.714116
    test 1354 line 151 lat2: 23.967824782385
    test 1355 line 151 lon2: 153.611115762587
    test 1356 line 151 azi2: 149.714116426025
    test 1357 line 151 lat2: 23.967824782385
    test 1358 line 151 lon2: 153.611115762587
    test 1359 line 151 azi2: 149.714116426025
    test 1360 line 152 lat: -22.787507
    test 1361 line 152 lon: 111.258647
    test 1362 line 152 fb: 86.335100
    test 1363 line 152 lat2: -22.787506689568
    test 1364 line 152 lon2: 111.258646767306
    test 1365 line 152 azi2: 86.335099650483
    test 1366 line 152 lat2: -22.787506689568
    test 1367 line 152 lon2: 111.258646767306
    test 1368 line 152 azi2: 86.335099650483
    test 1369 line 153 lat: -59.789842
    test 1370 line 153 lon: 114.054983
    test 1371 line 153 fb: 75.612605
    test 1372 line 153 lat2: -59.789841532294
    test 1373 line 153 lon2: 114.054983422255
    test 1374 line 153 azi2: 75.612605242726
    test 1375 line 153 lat2: -59.789841532294
    test 1376 line 153 lon2: 114.054983422255
    test 1377 line 153 azi2: 75.612605242726
    test 1378 line 154 lat: -2.802505
    test 1379 line 154 lon: 126.245955
    test 1380 line 154 fb: 150.100576
    test 1381 line 154 lat2: -2.802505438545
    test 1382 line 154 lon2: 126.245955176418
    test 1383 line 154 azi2: 150.100575968176
    test 1384 line 154 lat2: -2.802505438545
    test 1385 line 154 lon2: 126.245955176418
    test 1386 line 154 azi2: 150.100575968176
    test 1387 line 155 lat: 35.735653
    test 1388 line 155 lon: 102.768725
    test 1389 line 155 fb: 99.024702
    test 1390 line 155 lat2: 35.735653026165
    test 1391 line 155 lon2: 102.768725495110
    test 1392 line 155 azi2: 99.024701978369
    test 1393 line 155 lat2: 35.735653026165
    test 1394 line 155 lon2: 102.768725495110
    test 1395 line 155 azi2: 99.024701978369
    test 1396 line 156 lat: 15.906682
    test 1397 line 156 lon: 117.446654
    test 1398 line 156 fb: 130.449965
    test 1399 line 156 lat2: 15.906681603252
    test 1400 line 156 lon2: 117.446653873860
    test 1401 line 156 azi2: 130.449965412147
    test 1402 line 156 lat2: 15.906681603252
    test 1403 line 156 lon2: 117.446653873860
    test 1404 line 156 azi2: 130.449965412147
    test 1405 line 157 lat: -54.375988
    test 1406 line 157 lon: 33.243363
    test 1407 line 157 fb: 144.361175
    test 1408 line 157 lat2: -54.375987804166
    test 1409 line 157 lon2: 33.243362594038
    test 1410 line 157 azi2: 144.361175098783
    test 1411 line 157 lat2: -54.375987804166
    test 1412 line 157 lon2: 33.243362594038
    test 1413 line 157 azi2: 144.361175098783
    test 1414 line 158 lat: 3.588251
    test 1415 line 158 lon: 156.659583
    test 1416 line 158 fb: 112.153293
    test 1417 line 158 lat2: 3.588250783960
    test 1418 line 158 lon2: 156.659583234995
    test 1419 line 158 azi2: 112.153293017228
    test 1420 line 158 lat2: 3.588250783960
    test 1421 line 158 lon2: 156.659583234995
    test 1422 line 158 azi2: 112.153293017228
    test 1423 line 159 lat: -51.719977
    test 1424 line 159 lon: 134.141061
    test 1425 line 159 fb: 129.170451
    test 1426 line 159 lat2: -51.719977004790
    test 1427 line 159 lon2: 134.141060992499
    test 1428 line 159 azi2: 129.170451102958
    test 1429 line 159 lat2: -51.719977004790
    test 1430 line 159 lon2: 134.141060992499
    test 1431 line 159 azi2: 129.170451102958
    test 1432 line 160 lat: 22.935153
    test 1433 line 160 lon: 109.461291
    test 1434 line 160 fb: 120.676556
    test 1435 line 160 lat2: 22.935153219965
    test 1436 line 160 lon2: 109.461291078917
    test 1437 line 160 azi2: 120.676555897336
    test 1438 line 160 lat2: 22.935153219965
    test 1439 line 160 lon2: 109.461291078917
    test 1440 line 160 azi2: 120.676555897336
    test 1441 line 161 lat: -5.314690
    test 1442 line 161 lon: 70.995225
    test 1443 line 161 fb: 129.681273
    test 1444 line 161 lat2: -5.314689990173
    test 1445 line 161 lon2: 70.995224692450
    test 1446 line 161 azi2: 129.681272635794
    test 1447 line 161 lat2: -5.314689990173
    test 1448 line 161 lon2: 70.995224692450
    test 1449 line 161 azi2: 129.681272635794
    test 1450 line 162 lat: 49.147134
    test 1451 line 162 lon: 16.182514
    test 1452 line 162 fb: 38.926644
    test 1453 line 162 lat2: 49.147133873971
    test 1454 line 162 lon2: 16.182514450690
    test 1455 line 162 azi2: 38.926644196248
    test 1456 line 162 lat2: 49.147133873971
    test 1457 line 162 lon2: 16.182514450690
    test 1458 line 162 azi2: 38.926644196248
    test 1459 line 163 lat: -55.079363
    test 1460 line 163 lon: 93.170898
    test 1461 line 163 fb: 97.017492
    test 1462 line 163 lat2: -55.079363368717
    test 1463 line 163 lon2: 93.170898482121
    test 1464 line 163 azi2: 97.017491592293
    test 1465 line 163 lat2: -55.079363368717
    test 1466 line 163 lon2: 93.170898482121
    test 1467 line 163 azi2: 97.017491592293
    test 1468 line 164 lat: 26.410771
    test 1469 line 164 lon: 109.934003
    test 1470 line 164 fb: 103.660846
    test 1471 line 164 lat2: 26.410770923895
    test 1472 line 164 lon2: 109.934003168641
    test 1473 line 164 azi2: 103.660846029906
    test 1474 line 164 lat2: 26.410770923895
    test 1475 line 164 lon2: 109.934003168641
    test 1476 line 164 azi2: 103.660846029906
    test 1477 line 165 lat: -2.539670
    test 1478 line 165 lon: 138.682325
    test 1479 line 165 fb: 100.016568
    test 1480 line 165 lat2: -2.539669792389
    test 1481 line 165 lon2: 138.682325493918
    test 1482 line 165 azi2: 100.016568432752
    test 1483 line 165 lat2: -2.539669792389
    test 1484 line 165 lon2: 138.682325493918
    test 1485 line 165 azi2: 100.016568432752
    test 1486 line 166 lat: 10.563299
    test 1487 line 166 lon: 50.532119
    test 1488 line 166 fb: 126.356066
    test 1489 line 166 lat2: 10.563299452649
    test 1490 line 166 lon2: 50.532119480076
    test 1491 line 166 azi2: 126.356065708364
    test 1492 line 166 lat2: 10.563299452649
    test 1493 line 166 lon2: 50.532119480076
    test 1494 line 166 azi2: 126.356065708364
    test 1495 line 167 lat: 51.443871
    test 1496 line 167 lon: 88.799162
    test 1497 line 167 fb: 145.239198
    test 1498 line 167 lat2: 51.443871023711
    test 1499 line 167 lon2: 88.799161779253
    test 1500 line 167 azi2: 145.239198135633
    test 1501 line 167 lat2: 51.443871023711
    test 1502 line 167 lon2: 88.799161779253
    test 1503 line 167 azi2: 145.239198135633
    test 1504 line 168 lat: -80.240756
    test 1505 line 168 lon: 170.591261
    test 1506 line 168 fb: 19.402427
    test 1507 line 168 lat2: -80.240756380896
    test 1508 line 168 lon2: 170.591260542730
    test 1509 line 168 azi2: 19.402427357239
    test 1510 line 168 lat2: -80.240756380896
    test 1511 line 168 lon2: 170.591260542730
    test 1512 line 168 azi2: 19.402427357239
    test 1513 line 169 lat: 51.976040
    test 1514 line 169 lon: 165.045244
    test 1515 line 169 fb: 167.962110
    test 1516 line 169 lat2: 51.976039799074
    test 1517 line 169 lon2: 165.045244285456
    test 1518 line 169 azi2: 167.962110268433
    test 1519 line 169 lat2: 51.976039799074
    test 1520 line 169 lon2: 165.045244285456
    test 1521 line 169 azi2: 167.962110268433
    test 1522 line 170 lat: 29.365655
    test 1523 line 170 lon: 91.354349
    test 1524 line 170 fb: 135.101279
    test 1525 line 170 lat2: 29.365654873524
    test 1526 line 170 lon2: 91.354349089561
    test 1527 line 170 azi2: 135.101278715212
    test 1528 line 170 lat2: 29.365654873524
    test 1529 line 170 lon2: 91.354349089561
    test 1530 line 170 azi2: 135.101278715212
    test 1531 line 171 lat: 61.745486
    test 1532 line 171 lon: 142.333199
    test 1533 line 171 fb: 139.666209
    test 1534 line 171 lat2: 61.745485817368
    test 1535 line 171 lon2: 142.333198773096
    test 1536 line 171 azi2: 139.666208757008
    test 1537 line 171 lat2: 61.745485817368
    test 1538 line 171 lon2: 142.333198773096
    test 1539 line 171 azi2: 139.666208757008
    test 1540 line 172 lat: 13.414523
    test 1541 line 172 lon: 39.322993
    test 1542 line 172 fb: 144.276516
    test 1543 line 172 lat2: 13.414522997032
    test 1544 line 172 lon2: 39.322992706733
    test 1545 line 172 azi2: 144.276515542083
    test 1546 line 172 lat2: 13.414522997032
    test 1547 line 172 lon2: 39.322992706733
    test 1548 line 172 azi2: 144.276515542083
    test 1549 line 173 lat: -49.831353
    test 1550 line 173 lon: 72.426738
    test 1551 line 173 fb: 126.251620
    test 1552 line 173 lat2: -49.831353332108
    test 1553 line 173 lon2: 72.426737728887
    test 1554 line 173 azi2: 126.251620412456
    test 1555 line 173 lat2: -49.831353332108
    test 1556 line 173 lon2: 72.426737728887
    test 1557 line 173 azi2: 126.251620412456
    test 1558 line 174 lat: 1.822589
    test 1559 line 174 lon: 53.589208
    test 1560 line 174 fb: 97.925176
    test 1561 line 174 lat2: 1.822589208021
    test 1562 line 174 lon2: 53.589207810481
    test 1563 line 174 azi2: 97.925176229124
    test 1564 line 174 lat2: 1.822589208021
    test 1565 line 174 lon2: 53.589207810481
    test 1566 line 174 azi2: 97.925176229124
    test 1567 line 175 lat: -7.987194
    test 1568 line 175 lon: 49.318809
    test 1569 line 175 fb: 128.386595
    test 1570 line 175 lat2: -7.987193900849
    test 1571 line 175 lon2: 49.318809304076
    test 1572 line 175 azi2: 128.386594768748
    test 1573 line 175 lat2: -7.987193900849
    test 1574 line 175 lon2: 49.318809304076
    test 1575 line 175 azi2: 128.386594768748
    test 1576 line 176 lat: -56.807375
    test 1577 line 176 lon: 4.521802
    test 1578 line 176 fb: 176.806063
    test 1579 line 176 lat2: -56.807375049864
    test 1580 line 176 lon2: 4.521801986353
    test 1581 line 176 azi2: 176.806062785470
    test 1582 line 176 lat2: -56.807375049864
    test 1583 line 176 lon2: 4.521801986353
    test 1584 line 176 azi2: 176.806062785470
    test 1585 line 177 lat: -25.969834
    test 1586 line 177 lon: 64.903749
    test 1587 line 177 fb: 124.103844
    test 1588 line 177 lat2: -25.969833883721
    test 1589 line 177 lon2: 64.903749477059
    test 1590 line 177 azi2: 124.103844353942
    test 1591 line 177 lat2: -25.969833883721
    test 1592 line 177 lon2: 64.903749477059
    test 1593 line 177 azi2: 124.103844353942
    test 1594 line 178 lat: 32.807360
    test 1595 line 178 lon: 65.107962
    test 1596 line 178 fb: 124.577990
    test 1597 line 178 lat2: 32.807359742667
    test 1598 line 178 lon2: 65.107961864983
    test 1599 line 178 azi2: 124.577990419073
    test 1600 line 178 lat2: 32.807359742667
    test 1601 line 178 lon2: 65.107961864983
    test 1602 line 178 azi2: 124.577990419073
    test 1603 line 179 lat: -21.552138
    test 1604 line 179 lon: 102.466022
    test 1605 line 179 fb: 109.640197
    test 1606 line 179 lat2: -21.552137872353
    test 1607 line 179 lon2: 102.466021945025
    test 1608 line 179 azi2: 109.640197455958
    test 1609 line 179 lat2: -21.552137872353
    test 1610 line 179 lon2: 102.466021945025
    test 1611 line 179 azi2: 109.640197455958
    test 1612 line 180 lat: -26.271741
    test 1613 line 180 lon: 158.321581
    test 1614 line 180 fb: 165.993649
    test 1615 line 180 lat2: -26.271741383677
    test 1616 line 180 lon2: 158.321581345077
    test 1617 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1618 line 180 lat2: -26.271741383677
    test 1619 line 180 lon2: 158.321581345077
    test 1620 line 180 azi2: 165.993649158304  FAILED, KNOWN, expected 165.993649158305
    test 1621 line 181 lat: 41.023069
    test 1622 line 181 lon: 155.562542
    test 1623 line 181 fb: 153.407414
    test 1624 line 181 lat2: 41.023069113496
    test 1625 line 181 lon2: 155.562542134179
    test 1626 line 181 azi2: 153.407413608014
    test 1627 line 181 lat2: 41.023069113496
    test 1628 line 181 lon2: 155.562542134179
    test 1629 line 181 azi2: 153.407413608014
    test 1630 line 182 lat: 16.445471
    test 1631 line 182 lon: 165.261461
    test 1632 line 182 fb: 165.424806
    test 1633 line 182 lat2: 16.445470954340
    test 1634 line 182 lon2: 165.261461448873
    test 1635 line 182 azi2: 165.424806257119
    test 1636 line 182 lat2: 16.445470954340
    test 1637 line 182 lon2: 165.261461448873
    test 1638 line 182 azi2: 165.424806257119
    test 1639 line 183 lat: -3.222107
    test 1640 line 183 lon: 84.129727
    test 1641 line 183 fb: 154.083851
    test 1642 line 183 lat2: -3.222107095788
    test 1643 line 183 lon2: 84.129726900596
    test 1644 line 183 azi2: 154.083851495688
    test 1645 line 183 lat2: -3.222107095788
    test 1646 line 183 lon2: 84.129726900596
    test 1647 line 183 azi2: 154.083851495688
    test 1648 line 184 lat: 7.811710
    test 1649 line 184 lon: 123.143308
    test 1650 line 184 fb: 123.998106
    test 1651 line 184 lat2: 7.811709739638
    test 1652 line 184 lon2: 123.143308309660
    test 1653 line 184 azi2: 123.998105582525
    test 1654 line 184 lat2: 7.811709739638
    test 1655 line 184 lon2: 123.143308309660
    test 1656 line 184 azi2: 123.998105582525
    test 1657 line 185 lat: -45.235922
    test 1658 line 185 lon: 129.419283
    test 1659 line 185 fb: 91.493406
    test 1660 line 185 lat2: -45.235922276879
    test 1661 line 185 lon2: 129.419282696458
    test 1662 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1663 line 185 lat2: -45.235922276879
    test 1664 line 185 lon2: 129.419282696458
    test 1665 line 185 azi2: 91.493405946969  FAILED, KNOWN, expected 91.493405946970
    test 1666 line 186 lat: -43.047563
    test 1667 line 186 lon: 121.565541
    test 1668 line 186 fb: 99.850543
    test 1669 line 186 lat2: -43.047563118772
    test 1670 line 186 lon2: 121.565540573788
    test 1671 line 186 azi2: 99.850542926816
    test 1672 line 186 lat2: -43.047563118772
    test 1673 line 186 lon2: 121.565540573788
    test 1674 line 186 azi2: 99.850542926816
    test 1675 line 187 lat: -22.881002
    test 1676 line 187 lon: 159.765030
    test 1677 line 187 fb: 60.474878
    test 1678 line 187 lat2: -22.881001889671
    test 1679 line 187 lon2: 159.765030106650
    test 1680 line 187 azi2: 60.474878214384
    test 1681 line 187 lat2: -22.881001889671
    test 1682 line 187 lon2: 159.765030106650
    test 1683 line 187 azi2: 60.474878214384
    test 1684 line 188 lat: -15.011946
    test 1685 line 188 lon: 55.594746
    test 1686 line 188 fb: 121.838839
    test 1687 line 188 lat2: -15.011946251300
    test 1688 line 188 lon2: 55.594746074667
    test 1689 line 188 azi2: 121.838839080255
    test 1690 line 188 lat2: -15.011946251300
    test 1691 line 188 lon2: 55.594746074667
    test 1692 line 188 azi2: 121.838839080255
    test 1693 line 189 lat: -29.011142
    test 1694 line 189 lon: 0.856639
    test 1695 line 189 fb: 178.744943
    test 1696 line 189 lat2: -29.011142183887
    test 1697 line 189 lon2: 0.856639457160
    test 1698 line 189 azi2: 178.744943180805
    test 1699 line 189 lat2: -29.011142183887
    test 1700 line 189 lon2: 0.856639457160
    test 1701 line 189 azi2: 178.744943180805
    test 1702 line 190 lat: -0.353001
    test 1703 line 190 lon: 48.401255
    test 1704 line 190 fb: 95.612551
    test 1705 line 190 lat2: -0.353000909367
    test 1706 line 190 lon2: 48.401254652488  FAILED, KNOWN, expected 48.401254652487
    test 1707 line 190 azi2: 95.612551044908
    test 1708 line 190 lat2: -0.353000909367
    test 1709 line 190 lon2: 48.401254652487
    test 1710 line 190 azi2: 95.612551044908
    test 1711 line 191 lat: 18.843341
    test 1712 line 191 lon: 105.405456
    test 1713 line 191 fb: 145.215722
    test 1714 line 191 lat2: 18.843340962664
    test 1715 line 191 lon2: 105.405456105476
    test 1716 line 191 azi2: 145.215722323742
    test 1717 line 191 lat2: 18.843340962664
    test 1718 line 191 lon2: 105.405456105476
    test 1719 line 191 azi2: 145.215722323742
    test 1720 line 192 lat: 19.672225
    test 1721 line 192 lon: 64.132980
    test 1722 line 192 fb: 131.894863
    test 1723 line 192 lat2: 19.672224913225
    test 1724 line 192 lon2: 64.132979510420
    test 1725 line 192 azi2: 131.894863434272
    test 1726 line 192 lat2: 19.672224913225
    test 1727 line 192 lon2: 64.132979510420
    test 1728 line 192 azi2: 131.894863434272
    test 1729 line 193 lat: -44.315074
    test 1730 line 193 lon: 132.711860
    test 1731 line 193 fb: 57.236875
    test 1732 line 193 lat2: -44.315073617889
    test 1733 line 193 lon2: 132.711860436437
    test 1734 line 193 azi2: 57.236875169148
    test 1735 line 193 lat2: -44.315073617889
    test 1736 line 193 lon2: 132.711860436437
    test 1737 line 193 azi2: 57.236875169148
    test 1738 line 194 lat: 71.956294
    test 1739 line 194 lon: 23.707587
    test 1740 line 194 fb: 28.235947
    test 1741 line 194 lat2: 71.956293555096
    test 1742 line 194 lon2: 23.707587498943
    test 1743 line 194 azi2: 28.235946630177
    test 1744 line 194 lat2: 71.956293555096
    test 1745 line 194 lon2: 23.707587498943
    test 1746 line 194 azi2: 28.235946630177
    test 1747 line 195 lat: -1.372652
    test 1748 line 195 lon: 37.704231
    test 1749 line 195 fb: 92.737862
    test 1750 line 195 lat2: -1.372652195171
    test 1751 line 195 lon2: 37.704230798676
    test 1752 line 195 azi2: 92.737862264368
    test 1753 line 195 lat2: -1.372652195171
    test 1754 line 195 lon2: 37.704230798676
    test 1755 line 195 azi2: 92.737862264368
    test 1756 line 196 lat: 32.377148
    test 1757 line 196 lon: 148.638709
    test 1758 line 196 fb: 164.415210
    test 1759 line 196 lat2: 32.377147634362
    test 1760 line 196 lon2: 148.638709383249
    test 1761 line 196 azi2: 164.415210005459
    test 1762 line 196 lat2: 32.377147634362
    test 1763 line 196 lon2: 148.638709383249
    test 1764 line 196 azi2: 164.415210005459
    test 1765 line 197 lat: 77.876832
    test 1766 line 197 lon: 86.074591
    test 1767 line 197 fb: 93.017705
    test 1768 line 197 lat2: 77.876831887051
    test 1769 line 197 lon2: 86.074590642864
    test 1770 line 197 azi2: 93.017704501543
    test 1771 line 197 lat2: 77.876831887051
    test 1772 line 197 lon2: 86.074590642864
    test 1773 line 197 azi2: 93.017704501543
    test 1774 line 198 lat: -7.405195
    test 1775 line 198 lon: 11.962469
    test 1776 line 198 fb: 123.788484
    test 1777 line 198 lat2: -7.405194804958
    test 1778 line 198 lon2: 11.962468510681
    test 1779 line 198 azi2: 123.788484407208
    test 1780 line 198 lat2: -7.405194804958
    test 1781 line 198 lon2: 11.962468510681
    test 1782 line 198 azi2: 123.788484407208
    test 1783 line 199 lat: -75.001311
    test 1784 line 199 lon: 173.334144
    test 1785 line 199 fb: 8.916523
    test 1786 line 199 lat2: -75.001310556015
    test 1787 line 199 lon2: 173.334144385512
    test 1788 line 199 azi2: 8.916523271572
    test 1789 line 199 lat2: -75.001310556015
    test 1790 line 199 lon2: 173.334144385512
    test 1791 line 199 azi2: 8.916523271572
    test 1792 line 200 lat: -33.145967
    test 1793 line 200 lon: 32.349241
    test 1794 line 200 fb: 154.035798
    test 1795 line 200 lat2: -33.145966631435
    test 1796 line 200 lon2: 32.349240627001
    test 1797 line 200 azi2: 154.035798269631
    test 1798 line 200 lat2: -33.145966631435
    test 1799 line 200 lon2: 32.349240627001
    test 1800 line 200 azi2: 154.035798269631
    test 1801 line 201 lat: 32.938605
    test 1802 line 201 lon: 98.042857
    test 1803 line 201 fb: 124.954750
    test 1804 line 201 lat2: 32.938605083648
    test 1805 line 201 lon2: 98.042857137838
    test 1806 line 201 azi2: 124.954750401990
    test 1807 line 201 lat2: 32.938605083648
    test 1808 line 201 lon2: 98.042857137838
    test 1809 line 201 azi2: 124.954750401990
    test 1810 line 202 lat: 18.924315
    test 1811 line 202 lon: 20.712136
    test 1812 line 202 fb: 118.058457
    test 1813 line 202 lat2: 18.924314631117
    test 1814 line 202 lon2: 20.712135699713
    test 1815 line 202 azi2: 118.058457437327
    test 1816 line 202 lat2: 18.924314631117
    test 1817 line 202 lon2: 20.712135699713
    test 1818 line 202 azi2: 118.058457437327
    test 1819 line 203 lat: 34.281652
    test 1820 line 203 lon: 66.815398
    test 1821 line 203 fb: 147.693080
    test 1822 line 203 lat2: 34.281652047931
    test 1823 line 203 lon2: 66.815398066147
    test 1824 line 203 azi2: 147.693079659533
    test 1825 line 203 lat2: 34.281652047931
    test 1826 line 203 lon2: 66.815398066147
    test 1827 line 203 azi2: 147.693079659533
    test 1828 line 204 lat: -56.830635
    test 1829 line 204 lon: 2.137046
    test 1830 line 204 fb: 178.041562
    test 1831 line 204 lat2: -56.830634769513
    test 1832 line 204 lon2: 2.137046322217
    test 1833 line 204 azi2: 178.041562126305
    test 1834 line 204 lat2: -56.830634769513
    test 1835 line 204 lon2: 2.137046322217
    test 1836 line 204 azi2: 178.041562126305
    test 1837 line 205 lat: -68.481893
    test 1838 line 205 lon: 107.036720
    test 1839 line 205 fb: 152.384477
    test 1840 line 205 lat2: -68.481892540174
    test 1841 line 205 lon2: 107.036720123074
    test 1842 line 205 azi2: 152.384476595412
    test 1843 line 205 lat2: -68.481892540174
    test 1844 line 205 lon2: 107.036720123074
    test 1845 line 205 azi2: 152.384476595412
    test 1846 line 206 lat: -22.502042
    test 1847 line 206 lon: 171.827566
    test 1848 line 206 fb: 158.834328
    test 1849 line 206 lat2: -22.502042312255
    test 1850 line 206 lon2: 171.827566033608
    test 1851 line 206 azi2: 158.834327972407
    test 1852 line 206 lat2: -22.502042312255
    test 1853 line 206 lon2: 171.827566033608
    test 1854 line 206 azi2: 158.834327972407
    test 1855 line 207 lat: -4.504199
    test 1856 line 207 lon: 138.544338
    test 1857 line 207 fb: 123.633526
    test 1858 line 207 lat2: -4.504199404775
    test 1859 line 207 lon2: 138.544338028736
    test 1860 line 207 azi2: 123.633526406205
    test 1861 line 207 lat2: -4.504199404775
    test 1862 line 207 lon2: 138.544338028736
    test 1863 line 207 azi2: 123.633526406205
    test 1864 line 208 lat: -9.226343
    test 1865 line 208 lon: 120.310050
    test 1866 line 208 fb: 142.789186
    test 1867 line 208 lat2: -9.226343110712
    test 1868 line 208 lon2: 120.310050148004
    test 1869 line 208 azi2: 142.789186422068
    test 1870 line 208 lat2: -9.226343110712
    test 1871 line 208 lon2: 120.310050148004
    test 1872 line 208 azi2: 142.789186422068
    test 1873 line 209 lat: -51.684044
    test 1874 line 209 lon: 137.764140
    test 1875 line 209 fb: 56.844891
    test 1876 line 209 lat2: -51.684044075582
    test 1877 line 209 lon2: 137.764139808689
    test 1878 line 209 azi2: 56.844890846790
    test 1879 line 209 lat2: -51.684044075582
    test 1880 line 209 lon2: 137.764139808689
    test 1881 line 209 azi2: 56.844890846790
    test 1882 line 210 lat: 19.467357
    test 1883 line 210 lon: 93.870087
    test 1884 line 210 fb: 129.125491
    test 1885 line 210 lat2: 19.467357090193
    test 1886 line 210 lon2: 93.870087361293
    test 1887 line 210 azi2: 129.125490840370
    test 1888 line 210 lat2: 19.467357090193
    test 1889 line 210 lon2: 93.870087361293
    test 1890 line 210 azi2: 129.125490840370
    test 1891 line 211 lat: 33.594608
    test 1892 line 211 lon: 58.324143
    test 1893 line 211 fb: 101.975372
    test 1894 line 211 lat2: 33.594607695347
    test 1895 line 211 lon2: 58.324143410893
    test 1896 line 211 azi2: 101.975372004111
    test 1897 line 211 lat2: 33.594607695347
    test 1898 line 211 lon2: 58.324143410893
    test 1899 line 211 azi2: 101.975372004111
    test 1900 line 212 lat: -1.184701
    test 1901 line 212 lon: 92.834285
    test 1902 line 212 fb: 134.201097
    test 1903 line 212 lat2: -1.184701423910
    test 1904 line 212 lon2: 92.834285031504
    test 1905 line 212 azi2: 134.201097217000
    test 1906 line 212 lat2: -1.184701423910
    test 1907 line 212 lon2: 92.834285031504
    test 1908 line 212 azi2: 134.201097217000
    test 1909 line 213 lat: 5.878639
    test 1910 line 213 lon: 90.756173
    test 1911 line 213 fb: 156.936699
    test 1912 line 213 lat2: 5.878638801092
    test 1913 line 213 lon2: 90.756172727682
    test 1914 line 213 azi2: 156.936698928215
    test 1915 line 213 lat2: 5.878638801092
    test 1916 line 213 lon2: 90.756172727682
    test 1917 line 213 azi2: 156.936698928215
    test 1918 line 214 lat: 47.611646
    test 1919 line 214 lon: 131.482218
    test 1920 line 214 fb: 152.077667
    test 1921 line 214 lat2: 47.611646039058
    test 1922 line 214 lon2: 131.482217984255
    test 1923 line 214 azi2: 152.077667341138
    test 1924 line 214 lat2: 47.611646039058
    test 1925 line 214 lon2: 131.482217984255
    test 1926 line 214 azi2: 152.077667341138
    test 1927 line 215 lat: 13.906234
    test 1928 line 215 lon: 115.526238
    test 1929 line 215 fb: 130.769627
    test 1930 line 215 lat2: 13.906233945801
    test 1931 line 215 lon2: 115.526238064488
    test 1932 line 215 azi2: 130.769627488545
    test 1933 line 215 lat2: 13.906233945801
    test 1934 line 215 lon2: 115.526238064488
    test 1935 line 215 azi2: 130.769627488545
    test 1936 line 216 lat: 3.675485
    test 1937 line 216 lon: 80.781862
    test 1938 line 216 fb: 94.188426
    test 1939 line 216 lat2: 3.675485213596
    test 1940 line 216 lon2: 80.781861923838
    test 1941 line 216 azi2: 94.188426367881
    test 1942 line 216 lat2: 3.675485213596
    test 1943 line 216 lon2: 80.781861923838
    test 1944 line 216 azi2: 94.188426367881
    test 1945 line 217 lat: 68.665600
    test 1946 line 217 lon: 21.503123
    test 1947 line 217 fb: 107.667810
    test 1948 line 217 lat2: 68.665599857810
    test 1949 line 217 lon2: 21.503123449290
    test 1950 line 217 azi2: 107.667809564608
    test 1951 line 217 lat2: 68.665599857810
    test 1952 line 217 lon2: 21.503123449290
    test 1953 line 217 azi2: 107.667809564608
    test 1954 line 218 lat: -60.791732
    test 1955 line 218 lon: 82.476063
    test 1956 line 218 fb: 117.665953
    test 1957 line 218 lat2: -60.791732218314
    test 1958 line 218 lon2: 82.476062801971
    test 1959 line 218 azi2: 117.665952598924
    test 1960 line 218 lat2: -60.791732218314
    test 1961 line 218 lon2: 82.476062801971
    test 1962 line 218 azi2: 117.665952598924
    test 1963 line 219 lat: -33.122376
    test 1964 line 219 lon: 89.871476
    test 1965 line 219 fb: 124.068098
    test 1966 line 219 lat2: -33.122375734012
    test 1967 line 219 lon2: 89.871476211443
    test 1968 line 219 azi2: 124.068098444465
    test 1969 line 219 lat2: -33.122375734012
    test 1970 line 219 lon2: 89.871476211443
    test 1971 line 219 azi2: 124.068098444465
    test 1972 line 220 lat: -34.085934
    test 1973 line 220 lon: 117.886549
    test 1974 line 220 fb: 93.366647
    test 1975 line 220 lat2: -34.085934037207
    test 1976 line 220 lon2: 117.886548615401
    test 1977 line 220 azi2: 93.366647127153
    test 1978 line 220 lat2: -34.085934037207
    test 1979 line 220 lon2: 117.886548615401
    test 1980 line 220 azi2: 93.366647127153
    test 1981 line 221 lat: -43.746811
    test 1982 line 221 lon: 107.199939
    test 1983 line 221 fb: 101.218435
    test 1984 line 221 lat2: -43.746811413059
    test 1985 line 221 lon2: 107.199938541143
    test 1986 line 221 azi2: 101.218434581373
    test 1987 line 221 lat2: -43.746811413059
    test 1988 line 221 lon2: 107.199938541143
    test 1989 line 221 azi2: 101.218434581373
    test 1990 line 222 lat: -44.514857
    test 1991 line 222 lon: 19.560361
    test 1992 line 222 fb: 166.449925
    test 1993 line 222 lat2: -44.514857277517
    test 1994 line 222 lon2: 19.560360617266
    test 1995 line 222 azi2: 166.449925135617
    test 1996 line 222 lat2: -44.514857277517
    test 1997 line 222 lon2: 19.560360617266
    test 1998 line 222 azi2: 166.449925135617
    test 1999 line 223 lat: -18.049262
    test 2000 line 223 lon: 42.099193
    test 2001 line 223 fb: 158.127141
    test 2002 line 223 lat2: -18.049261796697
    test 2003 line 223 lon2: 42.099193394607
    test 2004 line 223 azi2: 158.127140901909
    test 2005 line 223 lat2: -18.049261796697
    test 2006 line 223 lon2: 42.099193394607
    test 2007 line 223 azi2: 158.127140901909
    test 2008 line 224 lat: 9.832902
    test 2009 line 224 lon: 51.448057
    test 2010 line 224 fb: 114.348703
    test 2011 line 224 lat2: 9.832901687662
    test 2012 line 224 lon2: 51.448057387281
    test 2013 line 224 azi2: 114.348702917675
    test 2014 line 224 lat2: 9.832901687662
    test 2015 line 224 lon2: 51.448057387281
    test 2016 line 224 azi2: 114.348702917675
    test 2017 line 225 lat: -57.516443
    test 2018 line 225 lon: 64.700933
    test 2019 line 225 fb: 137.459801
    test 2020 line 225 lat2: -57.516443280706
    test 2021 line 225 lon2: 64.700933124813
    test 2022 line 225 azi2: 137.459801078685
    test 2023 line 225 lat2: -57.516443280706
    test 2024 line 225 lon2: 64.700933124813
    test 2025 line 225 azi2: 137.459801078685
    test 2026 line 226 lat: -23.072600
    test 2027 line 226 lon: 95.392602
    test 2028 line 226 fb: 140.119143
    test 2029 line 226 lat2: -23.072599811854
    test 2030 line 226 lon2: 95.392601883769
    test 2031 line 226 azi2: 140.119143469104
    test 2032 line 226 lat2: -23.072599811854
    test 2033 line 226 lon2: 95.392601883769
    test 2034 line 226 azi2: 140.119143469104
    test 2035 line 227 lat: -45.117254
    test 2036 line 227 lon: 97.361647
    test 2037 line 227 fb: 97.339041
    test 2038 line 227 lat2: -45.117253614100
    test 2039 line 227 lon2: 97.361647352714
    test 2040 line 227 azi2: 97.339040559115
    test 2041 line 227 lat2: -45.117253614100
    test 2042 line 227 lon2: 97.361647352714
    test 2043 line 227 azi2: 97.339040559115
    test 2044 line 228 lat: -11.277328
    test 2045 line 228 lon: 19.602358
    test 2046 line 228 fb: 156.779730
    test 2047 line 228 lat2: -11.277328262947
    test 2048 line 228 lon2: 19.602358024471
    test 2049 line 228 azi2: 156.779729902321
    test 2050 line 228 lat2: -11.277328262947
    test 2051 line 228 lon2: 19.602358024471
    test 2052 line 228 azi2: 156.779729902321
    test 2053 line 229 lat: -4.823524
    test 2054 line 229 lon: 164.626842
    test 2055 line 229 fb: 151.314797
    test 2056 line 229 lat2: -4.823524348693
    test 2057 line 229 lon2: 164.626841855534
    test 2058 line 229 azi2: 151.314796841238
    test 2059 line 229 lat2: -4.823524348693
    test 2060 line 229 lon2: 164.626841855534
    test 2061 line 229 azi2: 151.314796841238
    test 2062 line 230 lat: 36.317088
    test 2063 line 230 lon: 89.326155
    test 2064 line 230 fb: 94.589052
    test 2065 line 230 lat2: 36.317087922282
    test 2066 line 230 lon2: 89.326155365943
    test 2067 line 230 azi2: 94.589051951235
    test 2068 line 230 lat2: 36.317087922282
    test 2069 line 230 lon2: 89.326155365943
    test 2070 line 230 azi2: 94.589051951235
    test 2071 line 231 lat: 3.975433
    test 2072 line 231 lon: 105.460359
    test 2073 line 231 fb: 126.257925
    test 2074 line 231 lat2: 3.975432760073
    test 2075 line 231 lon2: 105.460358584149
    test 2076 line 231 azi2: 126.257925455058
    test 2077 line 231 lat2: 3.975432760073
    test 2078 line 231 lon2: 105.460358584149
    test 2079 line 231 azi2: 126.257925455058
    test 2080 line 232 lat: 28.815984
    test 2081 line 232 lon: 89.807394
    test 2082 line 232 fb: 116.984375
    test 2083 line 232 lat2: 28.815983592511
    test 2084 line 232 lon2: 89.807393686834
    test 2085 line 232 azi2: 116.984374981602
    test 2086 line 232 lat2: 28.815983592511
    test 2087 line 232 lon2: 89.807393686834
    test 2088 line 232 azi2: 116.984374981602
    test 2089 line 233 lat: 66.161717
    test 2090 line 233 lon: 63.218655
    test 2091 line 233 fb: 88.869959
    test 2092 line 233 lat2: 66.161716765270
    test 2093 line 233 lon2: 63.218655052918
    test 2094 line 233 azi2: 88.869959091488
    test 2095 line 233 lat2: 66.161716765270
    test 2096 line 233 lon2: 63.218655052918
    test 2097 line 233 azi2: 88.869959091488
    test 2098 line 234 lat: 74.859972
    test 2099 line 234 lon: 53.523361
    test 2100 line 234 fb: 58.125008
    test 2101 line 234 lat2: 74.859971601090
    test 2102 line 234 lon2: 53.523360738831
    test 2103 line 234 azi2: 58.125008091802
    test 2104 line 234 lat2: 74.859971601090
    test 2105 line 234 lon2: 53.523360738831
    test 2106 line 234 azi2: 58.125008091802
    test 2107 line 235 lat: -0.265481
    test 2108 line 235 lon: 79.537677
    test 2109 line 235 fb: 112.945830
    test 2110 line 235 lat2: -0.265481234322
    test 2111 line 235 lon2: 79.537677388981
    test 2112 line 235 azi2: 112.945829781102
    test 2113 line 235 lat2: -0.265481234322
    test 2114 line 235 lon2: 79.537677388981
    test 2115 line 235 azi2: 112.945829781102
    test 2116 line 236 lat: -12.099598
    test 2117 line 236 lon: 155.371356
    test 2118 line 236 fb: 76.454292
    test 2119 line 236 lat2: -12.099598021004
    test 2120 line 236 lon2: 155.371356164845
    test 2121 line 236 azi2: 76.454291606612
    test 2122 line 236 lat2: -12.099598021004
    test 2123 line 236 lon2: 155.371356164845
    test 2124 line 236 azi2: 76.454291606612
    test 2125 line 237 lat: -6.746465
    test 2126 line 237 lon: 19.102484
    test 2127 line 237 fb: 149.342236
    test 2128 line 237 lat2: -6.746464854112
    test 2129 line 237 lon2: 19.102484309526
    test 2130 line 237 azi2: 149.342236428405
    test 2131 line 237 lat2: -6.746464854112
    test 2132 line 237 lon2: 19.102484309526
    test 2133 line 237 azi2: 149.342236428405
    test 2134 line 238 lat: 0.663830
    test 2135 line 238 lon: 101.295721
    test 2136 line 238 fb: 133.862626
    test 2137 line 238 lat2: 0.663830251510
    test 2138 line 238 lon2: 101.295720736944
    test 2139 line 238 azi2: 133.862626019473
    test 2140 line 238 lat2: 0.663830251510
    test 2141 line 238 lon2: 101.295720736944
    test 2142 line 238 azi2: 133.862626019473
    test 2143 line 239 lat: -61.764624
    test 2144 line 239 lon: 148.537522
    test 2145 line 239 fb: 149.298772
    test 2146 line 239 lat2: -61.764623993813
    test 2147 line 239 lon2: 148.537521922087
    test 2148 line 239 azi2: 149.298771734214
    test 2149 line 239 lat2: -61.764623993813
    test 2150 line 239 lon2: 148.537521922087
    test 2151 line 239 azi2: 149.298771734214
    test 2152 line 240 lat: 14.505122
    test 2153 line 240 lon: 111.665519
    test 2154 line 240 fb: 97.740222
    test 2155 line 240 lat2: 14.505121777043
    test 2156 line 240 lon2: 111.665518774379
    test 2157 line 240 azi2: 97.740221959573
    test 2158 line 240 lat2: 14.505121777043
    test 2159 line 240 lon2: 111.665518774379
    test 2160 line 240 azi2: 97.740221959573
    test 2161 line 241 lat: -24.713205
    test 2162 line 241 lon: 34.159384
    test 2163 line 241 fb: 125.866132
    test 2164 line 241 lat2: -24.713205327375
    test 2165 line 241 lon2: 34.159384140577
    test 2166 line 241 azi2: 125.866132443875
    test 2167 line 241 lat2: -24.713205327375
    test 2168 line 241 lon2: 34.159384140577
    test 2169 line 241 azi2: 125.866132443875
    test 2170 line 242 lat: 50.480262
    test 2171 line 242 lon: 42.263850
    test 2172 line 242 fb: 153.395659
    test 2173 line 242 lat2: 50.480261762893
    test 2174 line 242 lon2: 42.263849601327
    test 2175 line 242 azi2: 153.395658919028
    test 2176 line 242 lat2: 50.480261762893
    test 2177 line 242 lon2: 42.263849601327
    test 2178 line 242 azi2: 153.395658919028
    test 2179 line 243 lat: 11.787247
    test 2180 line 243 lon: 49.506460
    test 2181 line 243 fb: 120.836778
    test 2182 line 243 lat2: 11.787247309610
    test 2183 line 243 lon2: 49.506459509702
    test 2184 line 243 azi2: 120.836778496206
    test 2185 line 243 lat2: 11.787247309610
    test 2186 line 243 lon2: 49.506459509702
    test 2187 line 243 azi2: 120.836778496206
    test 2188 line 244 lat: -19.956674
    test 2189 line 244 lon: 14.599479
    test 2190 line 244 fb: 177.883855
    test 2191 line 244 lat2: -19.956673621927
    test 2192 line 244 lon2: 14.599479227718
    test 2193 line 244 azi2: 177.883855088778
    test 2194 line 244 lat2: -19.956673621927
    test 2195 line 244 lon2: 14.599479227718
    test 2196 line 244 azi2: 177.883855088778
    test 2197 line 245 lat: 0.738566
    test 2198 line 245 lon: 12.600972
    test 2199 line 245 fb: 176.085445
    test 2200 line 245 lat2: 0.738565517815
    test 2201 line 245 lon2: 12.600972006927
    test 2202 line 245 azi2: 176.085445031797
    test 2203 line 245 lat2: 0.738565517815
    test 2204 line 245 lon2: 12.600972006927
    test 2205 line 245 azi2: 176.085445031797
    test 2206 line 246 lat: 25.799128
    test 2207 line 246 lon: 9.800259
    test 2208 line 246 fb: 166.282764
    test 2209 line 246 lat2: 25.799128425384
    test 2210 line 246 lon2: 9.800259258495
    test 2211 line 246 azi2: 166.282764024264
    test 2212 line 246 lat2: 25.799128425384
    test 2213 line 246 lon2: 9.800259258495
    test 2214 line 246 azi2: 166.282764024264
    test 2215 line 247 lat: -3.897277
    test 2216 line 247 lon: 16.693319
    test 2217 line 247 fb: 168.780736
    test 2218 line 247 lat2: -3.897277132184
    test 2219 line 247 lon2: 16.693318601970
    test 2220 line 247 azi2: 168.780736094343
    test 2221 line 247 lat2: -3.897277132184
    test 2222 line 247 lon2: 16.693318601970
    test 2223 line 247 azi2: 168.780736094343
    test 2224 line 248 lat: 2.479585
    test 2225 line 248 lon: 72.317321
    test 2226 line 248 fb: 126.935932
    test 2227 line 248 lat2: 2.479585385319
    test 2228 line 248 lon2: 72.317321261259
    test 2229 line 248 azi2: 126.935932221711
    test 2230 line 248 lat2: 2.479585385319
    test 2231 line 248 lon2: 72.317321261259
    test 2232 line 248 azi2: 126.935932221711
    test 2233 line 249 lat: -0.836621
    test 2234 line 249 lon: 2.490193
    test 2235 line 249 fb: 150.640498
    test 2236 line 249 lat2: -0.836621274662
    test 2237 line 249 lon2: 2.490192836679
    test 2238 line 249 azi2: 150.640498065221
    test 2239 line 249 lat2: -0.836621274662
    test 2240 line 249 lon2: 2.490192836679
    test 2241 line 249 azi2: 150.640498065221
    test 2242 line 250 lat: -69.098227
    test 2243 line 250 lon: 43.929874
    test 2244 line 250 fb: 143.378404
    test 2245 line 250 lat2: -69.098226894675
    test 2246 line 250 lon2: 43.929873562507
    test 2247 line 250 azi2: 143.378403982035
    test 2248 line 250 lat2: -69.098226894675
    test 2249 line 250 lon2: 43.929873562507
    test 2250 line 250 azi2: 143.378403982035
    test 2251 line 251 lat: 19.156121
    test 2252 line 251 lon: 130.658473
    test 2253 line 251 fb: 136.204475
    test 2254 line 251 lat2: 19.156121137418
    test 2255 line 251 lon2: 130.658473280949
    test 2256 line 251 azi2: 136.204475163250
    test 2257 line 251 lat2: 19.156121137418
    test 2258 line 251 lon2: 130.658473280949
    test 2259 line 251 azi2: 136.204475163250
    test 2260 line 252 lat: 68.881949
    test 2261 line 252 lon: 79.375865
    test 2262 line 252 fb: 99.052732
    test 2263 line 252 lat2: 68.881948915820
    test 2264 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2265 line 252 azi2: 99.052731550675
    test 2266 line 252 lat2: 68.881948915820
    test 2267 line 252 lon2: 79.375865154434  FAILED, KNOWN, expected 79.375865154433
    test 2268 line 252 azi2: 99.052731550675
    test 2269 line 253 lat: -23.509016
    test 2270 line 253 lon: 122.232226
    test 2271 line 253 fb: 90.354604
    test 2272 line 253 lat2: -23.509015988874
    test 2273 line 253 lon2: 122.232226283491
    test 2274 line 253 azi2: 90.354603607380
    test 2275 line 253 lat2: -23.509015988874
    test 2276 line 253 lon2: 122.232226283491
    test 2277 line 253 azi2: 90.354603607380
    test 2278 line 254 lat: -64.950636
    test 2279 line 254 lon: 70.184354
    test 2280 line 254 fb: 122.478937
    test 2281 line 254 lat2: -64.950635804577
    test 2282 line 254 lon2: 70.184354384370
    test 2283 line 254 azi2: 122.478937039089
    test 2284 line 254 lat2: -64.950635804577
    test 2285 line 254 lon2: 70.184354384370
    test 2286 line 254 azi2: 122.478937039089
    test 2287 line 255 lat: 4.931109
    test 2288 line 255 lon: 176.100221
    test 2289 line 255 fb: 175.754221
    test 2290 line 255 lat2: 4.931108669549
    test 2291 line 255 lon2: 176.100220910178
    test 2292 line 255 azi2: 175.754221027085
    test 2293 line 255 lat2: 4.931108669549
    test 2294 line 255 lon2: 176.100220910178
    test 2295 line 255 azi2: 175.754221027085
    test 2296 line 256 lat: -35.503236
    test 2297 line 256 lon: 122.767107
    test 2298 line 256 fb: 94.201020
    test 2299 line 256 lat2: -35.503236005727
    test 2300 line 256 lon2: 122.767107174014
    test 2301 line 256 azi2: 94.201020059324
    test 2302 line 256 lat2: -35.503236005727
    test 2303 line 256 lon2: 122.767107174014
    test 2304 line 256 azi2: 94.201020059324
    test 2305 line 257 lat: 58.728016
    test 2306 line 257 lon: 76.607531
    test 2307 line 257 fb: 114.353509
    test 2308 line 257 lat2: 58.728016150448
    test 2309 line 257 lon2: 76.607530844045
    test 2310 line 257 azi2: 114.353508957613
    test 2311 line 257 lat2: 58.728016150448
    test 2312 line 257 lon2: 76.607530844045
    test 2313 line 257 azi2: 114.353508957613
    test 2314 line 258 lat: 13.725793
    test 2315 line 258 lon: 60.384503
    test 2316 line 258 fb: 102.783242
    test 2317 line 258 lat2: 13.725792757601
    test 2318 line 258 lon2: 60.384502867486
    test 2319 line 258 azi2: 102.783241874789
    test 2320 line 258 lat2: 13.725792757601
    test 2321 line 258 lon2: 60.384502867486
    test 2322 line 258 azi2: 102.783241874789
    test 2323 line 259 lat: 40.298524
    test 2324 line 259 lon: 59.957993
    test 2325 line 259 fb: 90.056366
    test 2326 line 259 lat2: 40.298523592677
    test 2327 line 259 lon2: 59.957993458231
    test 2328 line 259 azi2: 90.056365696933
    test 2329 line 259 lat2: 40.298523592677
    test 2330 line 259 lon2: 59.957993458231
    test 2331 line 259 azi2: 90.056365696933
    test 2332 line 260 lat: 21.526222
    test 2333 line 260 lon: 19.836420
    test 2334 line 260 fb: 89.081274
    test 2335 line 260 lat2: 21.526221960544
    test 2336 line 260 lon2: 19.836419824899
    test 2337 line 260 azi2: 89.081274273400
    test 2338 line 260 lat2: 21.526221960544
    test 2339 line 260 lon2: 19.836419824899
    test 2340 line 260 azi2: 89.081274273400
    test 2341 line 261 lat: -65.269872
    test 2342 line 261 lon: 134.049515
    test 2343 line 261 fb: 54.613515
    test 2344 line 261 lat2: -65.269872123888
    test 2345 line 261 lon2: 134.049514626723
    test 2346 line 261 azi2: 54.613514542799
    test 2347 line 261 lat2: -65.269872123888
    test 2348 line 261 lon2: 134.049514626723
    test 2349 line 261 azi2: 54.613514542799
    test 2350 line 262 lat: -47.687068
    test 2351 line 262 lon: 86.855941
    test 2352 line 262 fb: 115.133532
    test 2353 line 262 lat2: -47.687068378110
    test 2354 line 262 lon2: 86.855941174728
    test 2355 line 262 azi2: 115.133531572693
    test 2356 line 262 lat2: -47.687068378110
    test 2357 line 262 lon2: 86.855941174728
    test 2358 line 262 azi2: 115.133531572693
    test 2359 line 263 lat: -56.637273
    test 2360 line 263 lon: 158.001121
    test 2361 line 263 fb: 35.013276
    test 2362 line 263 lat2: -56.637272907294
    test 2363 line 263 lon2: 158.001120751267
    test 2364 line 263 azi2: 35.013276119319
    test 2365 line 263 lat2: -56.637272907294
    test 2366 line 263 lon2: 158.001120751267
    test 2367 line 263 azi2: 35.013276119319
    test 2368 line 264 lat: 6.880772
    test 2369 line 264 lon: 36.289125
    test 2370 line 264 fb: 144.499557
    test 2371 line 264 lat2: 6.880771895178
    test 2372 line 264 lon2: 36.289124705135
    test 2373 line 264 azi2: 144.499557452454
    test 2374 line 264 lat2: 6.880771895178
    test 2375 line 264 lon2: 36.289124705135
    test 2376 line 264 azi2: 144.499557452454
    test 2377 line 265 lat: 59.205527
    test 2378 line 265 lon: 115.787268
    test 2379 line 265 fb: 116.793619
    test 2380 line 265 lat2: 59.205526512430
    test 2381 line 265 lon2: 115.787267608171
    test 2382 line 265 azi2: 116.793618855456
    test 2383 line 265 lat2: 59.205526512430
    test 2384 line 265 lon2: 115.787267608171
    test 2385 line 265 azi2: 116.793618855456
    test 2386 line 266 lat: 29.463206
    test 2387 line 266 lon: 68.742710
    test 2388 line 266 fb: 113.906069
    test 2389 line 266 lat2: 29.463206450868
    test 2390 line 266 lon2: 68.742710218988
    test 2391 line 266 azi2: 113.906069374400
    test 2392 line 266 lat2: 29.463206450868
    test 2393 line 266 lon2: 68.742710218988
    test 2394 line 266 azi2: 113.906069374400
    test 2395 line 267 lat: 5.507960
    test 2396 line 267 lon: 2.913367
    test 2397 line 267 fb: 175.225892
    test 2398 line 267 lat2: 5.507959555355
    test 2399 line 267 lon2: 2.913367209347
    test 2400 line 267 azi2: 175.225891805562
    test 2401 line 267 lat2: 5.507959555355
    test 2402 line 267 lon2: 2.913367209347
    test 2403 line 267 azi2: 175.225891805562
    test 2404 line 268 lat: 32.568215
    test 2405 line 268 lon: 107.814340
    test 2406 line 268 fb: 126.321687
    test 2407 line 268 lat2: 32.568215067951
    test 2408 line 268 lon2: 107.814340389788
    test 2409 line 268 azi2: 126.321687264203
    test 2410 line 268 lat2: 32.568215067951
    test 2411 line 268 lon2: 107.814340389788
    test 2412 line 268 azi2: 126.321687264203
    test 2413 line 269 lat: 48.941036
    test 2414 line 269 lon: 170.309380
    test 2415 line 269 fb: 170.816057
    test 2416 line 269 lat2: 48.941036400994
    test 2417 line 269 lon2: 170.309379989564
    test 2418 line 269 azi2: 170.816056872564
    test 2419 line 269 lat2: 48.941036400994
    test 2420 line 269 lon2: 170.309379989564
    test 2421 line 269 azi2: 170.816056872564
    test 2422 line 270 lat: 32.657811
    test 2423 line 270 lon: 174.401372
    test 2424 line 270 fb: 173.967029
    test 2425 line 270 lat2: 32.657810935795
    test 2426 line 270 lon2: 174.401372292954
    test 2427 line 270 azi2: 173.967029189838
    test 2428 line 270 lat2: 32.657810935795
    test 2429 line 270 lon2: 174.401372292954
    test 2430 line 270 azi2: 173.967029189838
    test 2431 line 271 lat: -30.959342
    test 2432 line 271 lon: 144.596945
    test 2433 line 271 fb: 157.635539
    test 2434 line 271 lat2: -30.959341511189
    test 2435 line 271 lon2: 144.596944855700
    test 2436 line 271 azi2: 157.635538872114
    test 2437 line 271 lat2: -30.959341511189
    test 2438 line 271 lon2: 144.596944855700
    test 2439 line 271 azi2: 157.635538872114
    test 2440 line 272 lat: 52.180060
    test 2441 line 272 lon: 68.363538
    test 2442 line 272 fb: 82.619820
    test 2443 line 272 lat2: 52.180060488771
    test 2444 line 272 lon2: 68.363538073511
    test 2445 line 272 azi2: 82.619819936898
    test 2446 line 272 lat2: 52.180060488771
    test 2447 line 272 lon2: 68.363538073511
    test 2448 line 272 azi2: 82.619819936898
    test 2449 line 273 lat: -49.230655
    test 2450 line 273 lon: 119.085123
    test 2451 line 273 fb: 81.553785
    test 2452 line 273 lat2: -49.230654785601
    test 2453 line 273 lon2: 119.085122995371
    test 2454 line 273 azi2: 81.553785297210
    test 2455 line 273 lat2: -49.230654785601
    test 2456 line 273 lon2: 119.085122995371
    test 2457 line 273 azi2: 81.553785297210
    test 2458 line 274 lat: 12.315309
    test 2459 line 274 lon: 21.800337
    test 2460 line 274 fb: 86.572317
    test 2461 line 274 lat2: 12.315308710130
    test 2462 line 274 lon2: 21.800336803956
    test 2463 line 274 azi2: 86.572316548512
    test 2464 line 274 lat2: 12.315308710130
    test 2465 line 274 lon2: 21.800336803956
    test 2466 line 274 azi2: 86.572316548512
    test 2467 line 275 lat: 0.074875
    test 2468 line 275 lon: 122.092567
    test 2469 line 275 fb: 93.940324
    test 2470 line 275 lat2: 0.074874782626
    test 2471 line 275 lon2: 122.092567299352
    test 2472 line 275 azi2: 93.940323652996
    test 2473 line 275 lat2: 0.074874782626
    test 2474 line 275 lon2: 122.092567299352
    test 2475 line 275 azi2: 93.940323652996
    test 2476 line 276 lat: -32.420609
    test 2477 line 276 lon: 80.147417
    test 2478 line 276 fb: 123.183256
    test 2479 line 276 lat2: -32.420609134175
    test 2480 line 276 lon2: 80.147416945184
    test 2481 line 276 azi2: 123.183256201588
    test 2482 line 276 lat2: -32.420609134175
    test 2483 line 276 lon2: 80.147416945184
    test 2484 line 276 azi2: 123.183256201588
    test 2485 line 277 lat: 82.600418
    test 2486 line 277 lon: 34.418367
    test 2487 line 277 fb: 35.057122
    test 2488 line 277 lat2: 82.600418456713
    test 2489 line 277 lon2: 34.418367124569
    test 2490 line 277 azi2: 35.057122384192
    test 2491 line 277 lat2: 82.600418456713
    test 2492 line 277 lon2: 34.418367124569
    test 2493 line 277 azi2: 35.057122384192
    test 2494 line 278 lat: 26.274633
    test 2495 line 278 lon: 93.043032
    test 2496 line 278 fb: 114.480069
    test 2497 line 278 lat2: 26.274632977288
    test 2498 line 278 lon2: 93.043031668414
    test 2499 line 278 azi2: 114.480069066657
    test 2500 line 278 lat2: 26.274632977288
    test 2501 line 278 lon2: 93.043031668414
    test 2502 line 278 azi2: 114.480069066657
    test 2503 line 279 lat: 28.433986
    test 2504 line 279 lon: 132.962042
    test 2505 line 279 fb: 118.817242
    test 2506 line 279 lat2: 28.433985598740
    test 2507 line 279 lon2: 132.962041543078
    test 2508 line 279 azi2: 118.817241997246
    test 2509 line 279 lat2: 28.433985598740
    test 2510 line 279 lon2: 132.962041543078
    test 2511 line 279 azi2: 118.817241997246
    test 2512 line 280 lat: 32.426459
    test 2513 line 280 lon: 65.171889
    test 2514 line 280 fb: 113.230923
    test 2515 line 280 lat2: 32.426458512822
    test 2516 line 280 lon2: 65.171889395963
    test 2517 line 280 azi2: 113.230923394172
    test 2518 line 280 lat2: 32.426458512822
    test 2519 line 280 lon2: 65.171889395963
    test 2520 line 280 azi2: 113.230923394172
    test 2521 line 281 lat: 8.427284
    test 2522 line 281 lon: 20.342496
    test 2523 line 281 fb: 140.993359
    test 2524 line 281 lat2: 8.427284359102
    test 2525 line 281 lon2: 20.342496251702
    test 2526 line 281 azi2: 140.993359066103
    test 2527 line 281 lat2: 8.427284359102
    test 2528 line 281 lon2: 20.342496251702
    test 2529 line 281 azi2: 140.993359066103
    test 2530 line 282 lat: -16.412702
    test 2531 line 282 lon: 47.392542
    test 2532 line 282 fb: 167.389705
    test 2533 line 282 lat2: -16.412702228950
    test 2534 line 282 lon2: 47.392541669265
    test 2535 line 282 azi2: 167.389704666322
    test 2536 line 282 lat2: -16.412702228950
    test 2537 line 282 lon2: 47.392541669265
    test 2538 line 282 azi2: 167.389704666322
    test 2539 line 283 lat: -54.082376
    test 2540 line 283 lon: 159.985466
    test 2541 line 283 fb: 56.023710
    test 2542 line 283 lat2: -54.082375801659
    test 2543 line 283 lon2: 159.985465829683
    test 2544 line 283 azi2: 56.023710499162
    test 2545 line 283 lat2: -54.082375801659
    test 2546 line 283 lon2: 159.985465829683
    test 2547 line 283 azi2: 56.023710499162
    test 2548 line 284 lat: 38.704319
    test 2549 line 284 lon: 78.307551
    test 2550 line 284 fb: 106.582126
    test 2551 line 284 lat2: 38.704318557557
    test 2552 line 284 lon2: 78.307550831333
    test 2553 line 284 azi2: 106.582125725743
    test 2554 line 284 lat2: 38.704318557557
    test 2555 line 284 lon2: 78.307550831333
    test 2556 line 284 azi2: 106.582125725743
    test 2557 line 285 lat: 15.206275
    test 2558 line 285 lon: 59.878378
    test 2559 line 285 fb: 114.460428
    test 2560 line 285 lat2: 15.206274688849
    test 2561 line 285 lon2: 59.878378252292
    test 2562 line 285 azi2: 114.460428216582
    test 2563 line 285 lat2: 15.206274688849
    test 2564 line 285 lon2: 59.878378252292
    test 2565 line 285 azi2: 114.460428216582
    test 2566 line 286 lat: -62.789550
    test 2567 line 286 lon: 66.649185
    test 2568 line 286 fb: 119.232672
    test 2569 line 286 lat2: -62.789549909136
    test 2570 line 286 lon2: 66.649184622337
    test 2571 line 286 azi2: 119.232671643971
    test 2572 line 286 lat2: -62.789549909136
    test 2573 line 286 lon2: 66.649184622337
    test 2574 line 286 azi2: 119.232671643971
    test 2575 line 287 lat: 31.235252
    test 2576 line 287 lon: 19.933468
    test 2577 line 287 fb: 145.488470
    test 2578 line 287 lat2: 31.235252170087
    test 2579 line 287 lon2: 19.933467970517
    test 2580 line 287 azi2: 145.488469796544
    test 2581 line 287 lat2: 31.235252170087
    test 2582 line 287 lon2: 19.933467970517
    test 2583 line 287 azi2: 145.488469796544
    test 2584 line 288 lat: 11.983236
    test 2585 line 288 lon: 145.307369
    test 2586 line 288 fb: 151.192641
    test 2587 line 288 lat2: 11.983236088753
    test 2588 line 288 lon2: 145.307368849730
    test 2589 line 288 azi2: 151.192640854621
    test 2590 line 288 lat2: 11.983236088753
    test 2591 line 288 lon2: 145.307368849730
    test 2592 line 288 azi2: 151.192640854621
    test 2593 line 289 lat: 27.629694
    test 2594 line 289 lon: 16.148459
    test 2595 line 289 fb: 63.008012
    test 2596 line 289 lat2: 27.629693628283
    test 2597 line 289 lon2: 16.148459400244
    test 2598 line 289 azi2: 63.008012267521
    test 2599 line 289 lat2: 27.629693628283
    test 2600 line 289 lon2: 16.148459400244
    test 2601 line 289 azi2: 63.008012267521
    test 2602 line 290 lat: 34.077784
    test 2603 line 290 lon: 115.693210
    test 2604 line 290 fb: 112.252264
    test 2605 line 290 lat2: 34.077783768135
    test 2606 line 290 lon2: 115.693209573427
    test 2607 line 290 azi2: 112.252263721679
    test 2608 line 290 lat2: 34.077783768135
    test 2609 line 290 lon2: 115.693209573427
    test 2610 line 290 azi2: 112.252263721679
    test 2611 line 291 lat: 17.100340
    test 2612 line 291 lon: 26.538643
    test 2613 line 291 fb: 131.391925
    test 2614 line 291 lat2: 17.100339523444
    test 2615 line 291 lon2: 26.538642768875
    test 2616 line 291 azi2: 131.391925094902
    test 2617 line 291 lat2: 17.100339523444
    test 2618 line 291 lon2: 26.538642768875
    test 2619 line 291 azi2: 131.391925094902
    test 2620 line 292 lat: -8.128040
    test 2621 line 292 lon: 28.609615
    test 2622 line 292 fb: 144.189095
    test 2623 line 292 lat2: -8.128039572354
    test 2624 line 292 lon2: 28.609615412806
    test 2625 line 292 azi2: 144.189095481788
    test 2626 line 292 lat2: -8.128039572354
    test 2627 line 292 lon2: 28.609615412806
    test 2628 line 292 azi2: 144.189095481788
    test 2629 line 293 lat: 17.307082
    test 2630 line 293 lon: 150.748550
    test 2631 line 293 fb: 172.334611
    test 2632 line 293 lat2: 17.307081581668
    test 2633 line 293 lon2: 150.748549863580
    test 2634 line 293 azi2: 172.334611079260
    test 2635 line 293 lat2: 17.307081581668
    test 2636 line 293 lon2: 150.748549863580
    test 2637 line 293 azi2: 172.334611079260
    test 2638 line 294 lat: 4.135230
    test 2639 line 294 lon: 142.094814
    test 2640 line 294 fb: 170.513214
    test 2641 line 294 lat2: 4.135229575811
    test 2642 line 294 lon2: 142.094814225629
    test 2643 line 294 azi2: 170.513213518678
    test 2644 line 294 lat2: 4.135229575811
    test 2645 line 294 lon2: 142.094814225629
    test 2646 line 294 azi2: 170.513213518678
    test 2647 line 295 lat: -61.544041
    test 2648 line 295 lon: 167.154866
    test 2649 line 295 fb: 51.415676
    test 2650 line 295 lat2: -61.544040804472
    test 2651 line 295 lon2: 167.154866481811
    test 2652 line 295 azi2: 51.415675504866
    test 2653 line 295 lat2: -61.544040804472
    test 2654 line 295 lon2: 167.154866481812  FAILED, KNOWN, expected 167.154866481811
    test 2655 line 295 azi2: 51.415675504865  FAILED, KNOWN, expected 51.415675504866
    test 2656 line 296 lat: 27.782466
    test 2657 line 296 lon: 53.844550
    test 2658 line 296 fb: 78.357665
    test 2659 line 296 lat2: 27.782465760718
    test 2660 line 296 lon2: 53.844549799795
    test 2661 line 296 azi2: 78.357665271795
    test 2662 line 296 lat2: 27.782465760718
    test 2663 line 296 lon2: 53.844549799795
    test 2664 line 296 azi2: 78.357665271795
    test 2665 line 297 lat: -30.157337
    test 2666 line 297 lon: 14.759636
    test 2667 line 297 fb: 157.487063
    test 2668 line 297 lat2: -30.157336788088
    test 2669 line 297 lon2: 14.759635614931
    test 2670 line 297 azi2: 157.487063280783
    test 2671 line 297 lat2: -30.157336788088
    test 2672 line 297 lon2: 14.759635614931
    test 2673 line 297 azi2: 157.487063280783
    test 2674 line 298 lat: -16.819268
    test 2675 line 298 lon: 22.734618
    test 2676 line 298 fb: 167.761663
    test 2677 line 298 lat2: -16.819268371139
    test 2678 line 298 lon2: 22.734618221531
    test 2679 line 298 azi2: 167.761663436059
    test 2680 line 298 lat2: -16.819268371139
    test 2681 line 298 lon2: 22.734618221531
    test 2682 line 298 azi2: 167.761663436059
    test 2683 line 299 lat: 58.190743
    test 2684 line 299 lon: 15.576363
    test 2685 line 299 fb: 71.213972
    test 2686 line 299 lat2: 58.190742593673
    test 2687 line 299 lon2: 15.576363250416
    test 2688 line 299 azi2: 71.213972172079
    test 2689 line 299 lat2: 58.190742593673
    test 2690 line 299 lon2: 15.576363250416
    test 2691 line 299 azi2: 71.213972172079
    test 2692 line 300 lat: 57.214981
    test 2693 line 300 lon: 163.530752
    test 2694 line 300 fb: 162.056064
    test 2695 line 300 lat2: 57.214981133823
    test 2696 line 300 lon2: 163.530751680014
    test 2697 line 300 azi2: 162.056064225923
    test 2698 line 300 lat2: 57.214981133823
    test 2699 line 300 lon2: 163.530751680014
    test 2700 line 300 azi2: 162.056064225923
    test 2701 line 301 lat: 31.811818
    test 2702 line 301 lon: 81.663494
    test 2703 line 301 fb: 112.546404
    test 2704 line 301 lat2: 31.811817748936
    test 2705 line 301 lon2: 81.663494432962
    test 2706 line 301 azi2: 112.546403824977
    test 2707 line 301 lat2: 31.811817748936
    test 2708 line 301 lon2: 81.663494432962
    test 2709 line 301 azi2: 112.546403824977
    test 2710 line 302 lat: -11.315727
    test 2711 line 302 lon: 48.409490
    test 2712 line 302 fb: 121.434574
    test 2713 line 302 lat2: -11.315726799012
    test 2714 line 302 lon2: 48.409489590525
    test 2715 line 302 azi2: 121.434573764585
    test 2716 line 302 lat2: -11.315726799012
    test 2717 line 302 lon2: 48.409489590525
    test 2718 line 302 azi2: 121.434573764585
    test 2719 line 303 lat: 6.119956
    test 2720 line 303 lon: 5.687908
    test 2721 line 303 fb: 94.977171
    test 2722 line 303 lat2: 6.119956010623
    test 2723 line 303 lon2: 5.687908365969
    test 2724 line 303 azi2: 94.977170961146
    test 2725 line 303 lat2: 6.119956010623
    test 2726 line 303 lon2: 5.687908365969
    test 2727 line 303 azi2: 94.977170961146
    test 2728 line 304 lat: -13.455263
    test 2729 line 304 lon: 92.797729
    test 2730 line 304 fb: 125.067595
    test 2731 line 304 lat2: -13.455262906771
    test 2732 line 304 lon2: 92.797729354548
    test 2733 line 304 azi2: 125.067595131171
    test 2734 line 304 lat2: -13.455262906771
    test 2735 line 304 lon2: 92.797729354548
    test 2736 line 304 azi2: 125.067595131171
    test 2737 line 305 lat: -61.258454
    test 2738 line 305 lon: 32.464613
    test 2739 line 305 fb: 153.578300
    test 2740 line 305 lat2: -61.258454070259
    test 2741 line 305 lon2: 32.464613321886
    test 2742 line 305 azi2: 153.578299580216
    test 2743 line 305 lat2: -61.258454070259
    test 2744 line 305 lon2: 32.464613321886
    test 2745 line 305 azi2: 153.578299580216
    test 2746 line 306 lat: 76.656194
    test 2747 line 306 lon: 147.658262
    test 2748 line 306 fb: 154.870277
    test 2749 line 306 lat2: 76.656194303754
    test 2750 line 306 lon2: 147.658261698859
    test 2751 line 306 azi2: 154.870276891567
    test 2752 line 306 lat2: 76.656194303754
    test 2753 line 306 lon2: 147.658261698859
    test 2754 line 306 azi2: 154.870276891567
    test 2755 line 307 lat: 38.020470
    test 2756 line 307 lon: 22.502210
    test 2757 line 307 fb: 164.603876
    test 2758 line 307 lat2: 38.020470355438
    test 2759 line 307 lon2: 22.502210018002
    test 2760 line 307 azi2: 164.603876406614
    test 2761 line 307 lat2: 38.020470355438
    test 2762 line 307 lon2: 22.502210018002
    test 2763 line 307 azi2: 164.603876406614
    test 2764 line 308 lat: -28.475186
    test 2765 line 308 lon: 125.031589
    test 2766 line 308 fb: 71.946314
    test 2767 line 308 lat2: -28.475185707347
    test 2768 line 308 lon2: 125.031589334958
    test 2769 line 308 azi2: 71.946313988393
    test 2770 line 308 lat2: -28.475185707347
    test 2771 line 308 lon2: 125.031589334958
    test 2772 line 308 azi2: 71.946313988393
    test 2773 line 309 lat: 33.123700
    test 2774 line 309 lon: 47.796870
    test 2775 line 309 fb: 66.233041
    test 2776 line 309 lat2: 33.123699771125
    test 2777 line 309 lon2: 47.796870281285
    test 2778 line 309 azi2: 66.233040505915
    test 2779 line 309 lat2: 33.123699771125
    test 2780 line 309 lon2: 47.796870281285
    test 2781 line 309 azi2: 66.233040505915
    test 2782 line 310 lat: 36.967606
    test 2783 line 310 lon: 91.462107
    test 2784 line 310 fb: 113.555931
    test 2785 line 310 lat2: 36.967605507925
    test 2786 line 310 lon2: 91.462107367844
    test 2787 line 310 azi2: 113.555931272414
    test 2788 line 310 lat2: 36.967605507925
    test 2789 line 310 lon2: 91.462107367844
    test 2790 line 310 azi2: 113.555931272414
    test 2791 line 311 lat: -3.784112
    test 2792 line 311 lon: 75.465096
    test 2793 line 311 fb: 146.940895
    test 2794 line 311 lat2: -3.784112064078
    test 2795 line 311 lon2: 75.465096433718
    test 2796 line 311 azi2: 146.940895363525
    test 2797 line 311 lat2: -3.784112064078
    test 2798 line 311 lon2: 75.465096433718
    test 2799 line 311 azi2: 146.940895363525
    test 2800 line 312 lat: 10.772454
    test 2801 line 312 lon: 162.137695
    test 2802 line 312 fb: 176.774643
    test 2803 line 312 lat2: 10.772454234710
    test 2804 line 312 lon2: 162.137694811372
    test 2805 line 312 azi2: 176.774642770857
    test 2806 line 312 lat2: 10.772454234711  FAILED, KNOWN, expected 10.772454234710
    test 2807 line 312 lon2: 162.137694811372
    test 2808 line 312 azi2: 176.774642770857
    test 2809 line 313 lat: 23.928740
    test 2810 line 313 lon: 28.953169
    test 2811 line 313 fb: 143.614710
    test 2812 line 313 lat2: 23.928739648982
    test 2813 line 313 lon2: 28.953169497861
    test 2814 line 313 azi2: 143.614709768381
    test 2815 line 313 lat2: 23.928739648982
    test 2816 line 313 lon2: 28.953169497861
    test 2817 line 313 azi2: 143.614709768381
    test 2818 line 314 lat: 5.199377
    test 2819 line 314 lon: 162.802668
    test 2820 line 314 fb: 146.857520
    test 2821 line 314 lat2: 5.199376594428
    test 2822 line 314 lon2: 162.802668362269
    test 2823 line 314 azi2: 146.857519761344
    test 2824 line 314 lat2: 5.199376594428
    test 2825 line 314 lon2: 162.802668362269
    test 2826 line 314 azi2: 146.857519761344
    test 2827 line 315 lat: 6.285334
    test 2828 line 315 lon: 164.204548
    test 2829 line 315 fb: 159.451359
    test 2830 line 315 lat2: 6.285334322282
    test 2831 line 315 lon2: 164.204548022855
    test 2832 line 315 azi2: 159.451359223111
    test 2833 line 315 lat2: 6.285334322282
    test 2834 line 315 lon2: 164.204548022855
    test 2835 line 315 azi2: 159.451359223111
    test 2836 line 316 lat: -8.151874
    test 2837 line 316 lon: 43.923539
    test 2838 line 316 fb: 121.501273
    test 2839 line 316 lat2: -8.151873580306
    test 2840 line 316 lon2: 43.923539410568
    test 2841 line 316 azi2: 121.501272690158
    test 2842 line 316 lat2: -8.151873580306
    test 2843 line 316 lon2: 43.923539410568
    test 2844 line 316 azi2: 121.501272690158
    test 2845 line 317 lat: 20.145480
    test 2846 line 317 lon: 92.310645
    test 2847 line 317 fb: 97.369333
    test 2848 line 317 lat2: 20.145480383316
    test 2849 line 317 lon2: 92.310644735772
    test 2850 line 317 azi2: 97.369333245027
    test 2851 line 317 lat2: 20.145480383316
    test 2852 line 317 lon2: 92.310644735772
    test 2853 line 317 azi2: 97.369333245027
    test 2854 line 318 lat: 38.715579
    test 2855 line 318 lon: 89.141427
    test 2856 line 318 fb: 100.831087
    test 2857 line 318 lat2: 38.715578802658
    test 2858 line 318 lon2: 89.141426830360
    test 2859 line 318 azi2: 100.831086703170
    test 2860 line 318 lat2: 38.715578802658
    test 2861 line 318 lon2: 89.141426830360
    test 2862 line 318 azi2: 100.831086703170
    test 2863 line 319 lat: -25.760685
    test 2864 line 319 lon: 145.864001
    test 2865 line 319 fb: 142.714674
    test 2866 line 319 lat2: -25.760685020607
    test 2867 line 319 lon2: 145.864001048187
    test 2868 line 319 azi2: 142.714673928912
    test 2869 line 319 lat2: -25.760685020607
    test 2870 line 319 lon2: 145.864001048187
    test 2871 line 319 azi2: 142.714673928912
    test 2872 line 320 lat: 49.387283
    test 2873 line 320 lon: 28.917044
    test 2874 line 320 fb: 61.545235
    test 2875 line 320 lat2: 49.387283074155
    test 2876 line 320 lon2: 28.917043656754
    test 2877 line 320 azi2: 61.545235148403
    test 2878 line 320 lat2: 49.387283074155
    test 2879 line 320 lon2: 28.917043656753  FAILED, KNOWN, expected 28.917043656754
    test 2880 line 320 azi2: 61.545235148403
    test 2881 line 321 lat: 10.120685
    test 2882 line 321 lon: 2.869738
    test 2883 line 321 fb: 176.526916
    test 2884 line 321 lat2: 10.120685293027
    test 2885 line 321 lon2: 2.869737593886
    test 2886 line 321 azi2: 176.526915822865
    test 2887 line 321 lat2: 10.120685293027
    test 2888 line 321 lon2: 2.869737593886
    test 2889 line 321 azi2: 176.526915822865
    test 2890 line 322 lat: 2.463216
    test 2891 line 322 lon: 102.917600
    test 2892 line 322 fb: 170.609004
    test 2893 line 322 lat2: 2.463216066166
    test 2894 line 322 lon2: 102.917599852201
    test 2895 line 322 azi2: 170.609003610639
    test 2896 line 322 lat2: 2.463216066166
    test 2897 line 322 lon2: 102.917599852201
    test 2898 line 322 azi2: 170.609003610639
    test 2899 line 323 lat: 58.201294
    test 2900 line 323 lon: 155.022079
    test 2901 line 323 fb: 153.181269
    test 2902 line 323 lat2: 58.201293688923
    test 2903 line 323 lon2: 155.022079105501
    test 2904 line 323 azi2: 153.181268692773
    test 2905 line 323 lat2: 58.201293688923
    test 2906 line 323 lon2: 155.022079105501
    test 2907 line 323 azi2: 153.181268692773
    test 2908 line 324 lat: 3.089608
    test 2909 line 324 lon: 20.686800
    test 2910 line 324 fb: 144.857820
    test 2911 line 324 lat2: 3.089607756265
    test 2912 line 324 lon2: 20.686800266169
    test 2913 line 324 azi2: 144.857820265585
    test 2914 line 324 lat2: 3.089607756265
    test 2915 line 324 lon2: 20.686800266169
    test 2916 line 324 azi2: 144.857820265585
    test 2917 line 325 lat: 48.232274
    test 2918 line 325 lon: 18.567244
    test 2919 line 325 fb: 24.556438
    test 2920 line 325 lat2: 48.232274219515
    test 2921 line 325 lon2: 18.567244222293
    test 2922 line 325 azi2: 24.556437713520
    test 2923 line 325 lat2: 48.232274219515
    test 2924 line 325 lon2: 18.567244222293
    test 2925 line 325 azi2: 24.556437713520
    test 2926 line 326 lat: 30.265261
    test 2927 line 326 lon: 7.440738
    test 2928 line 326 fb: 142.022972
    test 2929 line 326 lat2: 30.265261486767
    test 2930 line 326 lon2: 7.440737656545
    test 2931 line 326 azi2: 142.022971576270
    test 2932 line 326 lat2: 30.265261486767
    test 2933 line 326 lon2: 7.440737656545
    test 2934 line 326 azi2: 142.022971576270
    test 2935 line 327 lat: -11.166197
    test 2936 line 327 lon: 176.728934
    test 2937 line 327 fb: 24.287273
    test 2938 line 327 lat2: -11.166197413148
    test 2939 line 327 lon2: 176.728933575636
    test 2940 line 327 azi2: 24.287272842989
    test 2941 line 327 lat2: -11.166197413148
    test 2942 line 327 lon2: 176.728933575636
    test 2943 line 327 azi2: 24.287272842989
    test 2944 line 328 lat: 84.645539
    test 2945 line 328 lon: 90.023922
    test 2946 line 328 fb: 92.786262
    test 2947 line 328 lat2: 84.645539196082
    test 2948 line 328 lon2: 90.023922499395
    test 2949 line 328 azi2: 92.786261566827
    test 2950 line 328 lat2: 84.645539196082
    test 2951 line 328 lon2: 90.023922499395
    test 2952 line 328 azi2: 92.786261566828  FAILED, KNOWN, expected 92.786261566827
    test 2953 line 329 lat: 61.618717
    test 2954 line 329 lon: 162.510959
    test 2955 line 329 fb: 160.923940
    test 2956 line 329 lat2: 61.618716728051
    test 2957 line 329 lon2: 162.510958917359
    test 2958 line 329 azi2: 160.923939760553
    test 2959 line 329 lat2: 61.618716728051
    test 2960 line 329 lon2: 162.510958917359
    test 2961 line 329 azi2: 160.923939760553
    test 2962 line 330 lat: 27.643242
    test 2963 line 330 lon: 45.376215
    test 2964 line 330 fb: 147.964522
    test 2965 line 330 lat2: 27.643242341173
    test 2966 line 330 lon2: 45.376215094118
    test 2967 line 330 azi2: 147.964522484664
    test 2968 line 330 lat2: 27.643242341173
    test 2969 line 330 lon2: 45.376215094118
    test 2970 line 330 azi2: 147.964522484664
    test 2971 line 331 lat: 2.218750
    test 2972 line 331 lon: 170.358342
    test 2973 line 331 fb: 141.658474
    test 2974 line 331 lat2: 2.218749985364
    test 2975 line 331 lon2: 170.358342078292
    test 2976 line 331 azi2: 141.658474129787
    test 2977 line 331 lat2: 2.218749985364
    test 2978 line 331 lon2: 170.358342078292
    test 2979 line 331 azi2: 141.658474129787
    test 2980 line 332 lat: 26.019142
    test 2981 line 332 lon: 32.534760
    test 2982 line 332 fb: 128.159784
    test 2983 line 332 lat2: 26.019142329663
    test 2984 line 332 lon2: 32.534760195963
    test 2985 line 332 azi2: 128.159784291645
    test 2986 line 332 lat2: 26.019142329663
    test 2987 line 332 lon2: 32.534760195963
    test 2988 line 332 azi2: 128.159784291645
    test 2989 line 333 lat: 10.049636
    test 2990 line 333 lon: 72.205347
    test 2991 line 333 fb: 143.602160
    test 2992 line 333 lat2: 10.049636247749
    test 2993 line 333 lon2: 72.205346955818
    test 2994 line 333 azi2: 143.602159725306
    test 2995 line 333 lat2: 10.049636247749
    test 2996 line 333 lon2: 72.205346955818
    test 2997 line 333 azi2: 143.602159725306
    test 2998 line 334 lat: -31.030497
    test 2999 line 334 lon: 91.539195
    test 3000 line 334 fb: 109.891398
    test 3001 line 334 lat2: -31.030496743715
    test 3002 line 334 lon2: 91.539195292896
    test 3003 line 334 azi2: 109.891398221790
    test 3004 line 334 lat2: -31.030496743715
    test 3005 line 334 lon2: 91.539195292896
    test 3006 line 334 azi2: 109.891398221790
    test 3007 line 335 lat: 30.113796
    test 3008 line 335 lon: 109.096982
    test 3009 line 335 fb: 146.779343
    test 3010 line 335 lat2: 30.113795853671
    test 3011 line 335 lon2: 109.096981631502
    test 3012 line 335 azi2: 146.779343066541
    test 3013 line 335 lat2: 30.113795853671
    test 3014 line 335 lon2: 109.096981631502
    test 3015 line 335 azi2: 146.779343066541
    test 3016 line 336 lat: -73.967996
    test 3017 line 336 lon: 65.944243
    test 3018 line 336 fb: 120.592999
    test 3019 line 336 lat2: -73.967996185770
    test 3020 line 336 lon2: 65.944242524678
    test 3021 line 336 azi2: 120.592998665529
    test 3022 line 336 lat2: -73.967996185770
    test 3023 line 336 lon2: 65.944242524678
    test 3024 line 336 azi2: 120.592998665529
    test 3025 line 337 lat: 52.211150
    test 3026 line 337 lon: 168.054185
    test 3027 line 337 fb: 172.425992
    test 3028 line 337 lat2: 52.211149755494
    test 3029 line 337 lon2: 168.054184827868
    test 3030 line 337 azi2: 172.425991612467
    test 3031 line 337 lat2: 52.211149755494
    test 3032 line 337 lon2: 168.054184827868
    test 3033 line 337 azi2: 172.425991612467
    test 3034 line 338 lat: -64.497146
    test 3035 line 338 lon: 72.073419
    test 3036 line 338 fb: 114.249129
    test 3037 line 338 lat2: -64.497146189688
    test 3038 line 338 lon2: 72.073418936581
    test 3039 line 338 azi2: 114.249128850219
    test 3040 line 338 lat2: -64.497146189688
    test 3041 line 338 lon2: 72.073418936581
    test 3042 line 338 azi2: 114.249128850219
    test 3043 line 339 lat: -25.711399
    test 3044 line 339 lon: 6.036423
    test 3045 line 339 fb: 169.464098
    test 3046 line 339 lat2: -25.711398997503
    test 3047 line 339 lon2: 6.036423474639
    test 3048 line 339 azi2: 169.464098294263
    test 3049 line 339 lat2: -25.711398997503
    test 3050 line 339 lon2: 6.036423474639
    test 3051 line 339 azi2: 169.464098294263
    test 3052 line 340 lat: 33.904613
    test 3053 line 340 lon: 30.989094
    test 3054 line 340 fb: 124.896016
    test 3055 line 340 lat2: 33.904613360449
    test 3056 line 340 lon2: 30.989094387217
    test 3057 line 340 azi2: 124.896016003640
    test 3058 line 340 lat2: 33.904613360449
    test 3059 line 340 lon2: 30.989094387217
    test 3060 line 340 azi2: 124.896016003640
    test 3061 line 341 lat: -25.053080
    test 3062 line 341 lon: 137.078639
    test 3063 line 341 fb: 115.960750
    test 3064 line 341 lat2: -25.053079543516
    test 3065 line 341 lon2: 137.078638665495
    test 3066 line 341 azi2: 115.960750169086
    test 3067 line 341 lat2: -25.053079543516
    test 3068 line 341 lon2: 137.078638665495
    test 3069 line 341 azi2: 115.960750169086
    test 3070 line 342 lat: 10.298031
    test 3071 line 342 lon: 27.737374
    test 3072 line 342 fb: 142.265457
    test 3073 line 342 lat2: 10.298031202629
    test 3074 line 342 lon2: 27.737373649973
    test 3075 line 342 azi2: 142.265457288483
    test 3076 line 342 lat2: 10.298031202629
    test 3077 line 342 lon2: 27.737373649973
    test 3078 line 342 azi2: 142.265457288483
    test 3079 line 343 lat: -0.738692
    test 3080 line 343 lon: 150.933627
    test 3081 line 343 fb: 174.004688
    test 3082 line 343 lat2: -0.738692377457
    test 3083 line 343 lon2: 150.933627031610
    test 3084 line 343 azi2: 174.004687728765
    test 3085 line 343 lat2: -0.738692377457
    test 3086 line 343 lon2: 150.933627031610
    test 3087 line 343 azi2: 174.004687728765
    test 3088 line 344 lat: 50.619289
    test 3089 line 344 lon: 67.178203
    test 3090 line 344 fb: 105.177353
    test 3091 line 344 lat2: 50.619289349009
    test 3092 line 344 lon2: 67.178203328135
    test 3093 line 344 azi2: 105.177353051107
    test 3094 line 344 lat2: 50.619289349009
    test 3095 line 344 lon2: 67.178203328135
    test 3096 line 344 azi2: 105.177353051107
    test 3097 line 345 lat: -2.127739
    test 3098 line 345 lon: 38.604245
    test 3099 line 345 fb: 118.657849
    test 3100 line 345 lat2: -2.127739360728
    test 3101 line 345 lon2: 38.604245449983
    test 3102 line 345 azi2: 118.657849063154
    test 3103 line 345 lat2: -2.127739360728
    test 3104 line 345 lon2: 38.604245449983
    test 3105 line 345 azi2: 118.657849063154
    test 3106 line 346 lat: 37.188367
    test 3107 line 346 lon: 90.865255
    test 3108 line 346 fb: 104.826548
    test 3109 line 346 lat2: 37.188366752551
    test 3110 line 346 lon2: 90.865255121714
    test 3111 line 346 azi2: 104.826548310924
    test 3112 line 346 lat2: 37.188366752551
    test 3113 line 346 lon2: 90.865255121714
    test 3114 line 346 azi2: 104.826548310924
    test 3115 line 347 lat: 46.019257
    test 3116 line 347 lon: 20.402591
    test 3117 line 347 fb: 31.068588
    test 3118 line 347 lat2: 46.019256998097
    test 3119 line 347 lon2: 20.402590686048
    test 3120 line 347 azi2: 31.068587858373
    test 3121 line 347 lat2: 46.019256998097
    test 3122 line 347 lon2: 20.402590686048
    test 3123 line 347 azi2: 31.068587858373
    test 3124 line 348 lat: 9.023356
    test 3125 line 348 lon: 106.678645
    test 3126 line 348 fb: 141.375490
    test 3127 line 348 lat2: 9.023355647006
    test 3128 line 348 lon2: 106.678645473545
    test 3129 line 348 azi2: 141.375490245645
    test 3130 line 348 lat2: 9.023355647007  FAILED, KNOWN, expected 9.023355647006
    test 3131 line 348 lon2: 106.678645473545
    test 3132 line 348 azi2: 141.375490245645
    test 3133 line 349 lat: -1.321473
    test 3134 line 349 lon: 67.418879
    test 3135 line 349 fb: 105.590913
    test 3136 line 349 lat2: -1.321473235187
    test 3137 line 349 lon2: 67.418878731595
    test 3138 line 349 azi2: 105.590912857546
    test 3139 line 349 lat2: -1.321473235187
    test 3140 line 349 lon2: 67.418878731595
    test 3141 line 349 azi2: 105.590912857546
    test 3142 line 350 lat: 7.459339
    test 3143 line 350 lon: 30.150648
    test 3144 line 350 fb: 109.667752
    test 3145 line 350 lat2: 7.459338626177
    test 3146 line 350 lon2: 30.150648477470
    test 3147 line 350 azi2: 109.667751753912
    test 3148 line 350 lat2: 7.459338626177
    test 3149 line 350 lon2: 30.150648477470
    test 3150 line 350 azi2: 109.667751753912
    test 3151 line 351 lat: 16.344755
    test 3152 line 351 lon: 146.829160
    test 3153 line 351 fb: 128.666192
    test 3154 line 351 lat2: 16.344755038185
    test 3155 line 351 lon2: 146.829159972334
    test 3156 line 351 azi2: 128.666191953616
    test 3157 line 351 lat2: 16.344755038185
    test 3158 line 351 lon2: 146.829159972334
    test 3159 line 351 azi2: 128.666191953616
    test 3160 line 352 lat: -55.785670
    test 3161 line 352 lon: 158.086173
    test 3162 line 352 fb: 33.903277
    test 3163 line 352 lat2: -55.785670347270
    test 3164 line 352 lon2: 158.086173376809
    test 3165 line 352 azi2: 33.903276835071
    test 3166 line 352 lat2: -55.785670347270
    test 3167 line 352 lon2: 158.086173376809
    test 3168 line 352 azi2: 33.903276835071
    test 3169 line 353 lat: -74.409604
    test 3170 line 353 lon: 111.280935
    test 3171 line 353 fb: 78.510830
    test 3172 line 353 lat2: -74.409603561050
    test 3173 line 353 lon2: 111.280934985965
    test 3174 line 353 azi2: 78.510830028461
    test 3175 line 353 lat2: -74.409603561050
    test 3176 line 353 lon2: 111.280934985965
    test 3177 line 353 azi2: 78.510830028461
    test 3178 line 354 lat: 9.922204
    test 3179 line 354 lon: 138.538334
    test 3180 line 354 fb: 125.268473
    test 3181 line 354 lat2: 9.922203731557
    test 3182 line 354 lon2: 138.538333703571
    test 3183 line 354 azi2: 125.268473410634
    test 3184 line 354 lat2: 9.922203731557
    test 3185 line 354 lon2: 138.538333703571
    test 3186 line 354 azi2: 125.268473410634
    test 3187 line 355 lat: -27.082389
    test 3188 line 355 lon: 91.425844
    test 3189 line 355 fb: 153.267616
    test 3190 line 355 lat2: -27.082389068807
    test 3191 line 355 lon2: 91.425843733185
    test 3192 line 355 azi2: 153.267616113653
    test 3193 line 355 lat2: -27.082389068808  FAILED, KNOWN, expected -27.082389068807
    test 3194 line 355 lon2: 91.425843733185
    test 3195 line 355 azi2: 153.267616113653
    test 3196 line 356 lat: 14.627508
    test 3197 line 356 lon: 74.629605
    test 3198 line 356 fb: 159.825211
    test 3199 line 356 lat2: 14.627507744773
    test 3200 line 356 lon2: 74.629604673488
    test 3201 line 356 azi2: 159.825210987464
    test 3202 line 356 lat2: 14.627507744773
    test 3203 line 356 lon2: 74.629604673488
    test 3204 line 356 azi2: 159.825210987464
    test 3205 line 357 lat: 46.941087
    test 3206 line 357 lon: 18.833436
    test 3207 line 357 fb: 63.924917
    test 3208 line 357 lat2: 46.941086934169
    test 3209 line 357 lon2: 18.833435620675
    test 3210 line 357 azi2: 63.924916745148
    test 3211 line 357 lat2: 46.941086934168  FAILED, KNOWN, expected 46.941086934169
    test 3212 line 357 lon2: 18.833435620675
    test 3213 line 357 azi2: 63.924916745148
    test 3214 line 358 lat: 42.371666
    test 3215 line 358 lon: 126.270074
    test 3216 line 358 fb: 117.352107
    test 3217 line 358 lat2: 42.371665615782
    test 3218 line 358 lon2: 126.270074354353
    test 3219 line 358 azi2: 117.352106840236
    test 3220 line 358 lat2: 42.371665615782
    test 3221 line 358 lon2: 126.270074354353
    test 3222 line 358 azi2: 117.352106840236
    test 3223 line 359 lat: 60.888684
    test 3224 line 359 lon: 106.363657
    test 3225 line 359 fb: 108.973271
    test 3226 line 359 lat2: 60.888683732870
    test 3227 line 359 lon2: 106.363656697522
    test 3228 line 359 azi2: 108.973271101790
    test 3229 line 359 lat2: 60.888683732870
    test 3230 line 359 lon2: 106.363656697522
    test 3231 line 359 azi2: 108.973271101790
    test 3232 line 360 lat: 53.972090
    test 3233 line 360 lon: 136.000658
    test 3234 line 360 fb: 138.361589
    test 3235 line 360 lat2: 53.972089572795
    test 3236 line 360 lon2: 136.000657911062
    test 3237 line 360 azi2: 138.361588598638
    test 3238 line 360 lat2: 53.972089572795
    test 3239 line 360 lon2: 136.000657911062
    test 3240 line 360 azi2: 138.361588598638
    test 3241 line 361 lat: 47.850867
    test 3242 line 361 lon: 25.277934
    test 3243 line 361 fb: 71.284668
    test 3244 line 361 lat2: 47.850866585267
    test 3245 line 361 lon2: 25.277933660114
    test 3246 line 361 azi2: 71.284667717290
    test 3247 line 361 lat2: 47.850866585267
    test 3248 line 361 lon2: 25.277933660114
    test 3249 line 361 azi2: 71.284667717290
    test 3250 line 362 lat: 64.280614
    test 3251 line 362 lon: 16.447697
    test 3252 line 362 fb: 35.692750
    test 3253 line 362 lat2: 64.280614171157
    test 3254 line 362 lon2: 16.447696559380
    test 3255 line 362 azi2: 35.692750218622
    test 3256 line 362 lat2: 64.280614171157
    test 3257 line 362 lon2: 16.447696559380
    test 3258 line 362 azi2: 35.692750218622
    test 3259 line 363 lat: -3.339044
    test 3260 line 363 lon: 91.646260
    test 3261 line 363 fb: 95.928001
    test 3262 line 363 lat2: -3.339044133285
    test 3263 line 363 lon2: 91.646260438368
    test 3264 line 363 azi2: 95.928000721064
    test 3265 line 363 lat2: -3.339044133285
    test 3266 line 363 lon2: 91.646260438368
    test 3267 line 363 azi2: 95.928000721064
    test 3268 line 364 lat: -46.029875
    test 3269 line 364 lon: 30.599197
    test 3270 line 364 fb: 146.810525
    test 3271 line 364 lat2: -46.029874698950
    test 3272 line 364 lon2: 30.599196661458
    test 3273 line 364 azi2: 146.810525207719
    test 3274 line 364 lat2: -46.029874698950
    test 3275 line 364 lon2: 30.599196661458
    test 3276 line 364 azi2: 146.810525207719
    test 3277 line 365 lat: 25.605076
    test 3278 line 365 lon: 14.382003
    test 3279 line 365 fb: 116.566847
    test 3280 line 365 lat2: 25.605076391429
    test 3281 line 365 lon2: 14.382002787798
    test 3282 line 365 azi2: 116.566847403824
    test 3283 line 365 lat2: 25.605076391429
    test 3284 line 365 lon2: 14.382002787798
    test 3285 line 365 azi2: 116.566847403824
    test 3286 line 366 lat: -15.052413
    test 3287 line 366 lon: 150.673460
    test 3288 line 366 fb: 64.906721
    test 3289 line 366 lat2: -15.052412502534
    test 3290 line 366 lon2: 150.673460237577
    test 3291 line 366 azi2: 64.906720897603
    test 3292 line 366 lat2: -15.052412502534
    test 3293 line 366 lon2: 150.673460237577
    test 3294 line 366 azi2: 64.906720897603
    test 3295 line 367 lat: -24.631882
    test 3296 line 367 lon: 170.403348
    test 3297 line 367 fb: 38.497784
    test 3298 line 367 lat2: -24.631881773331
    test 3299 line 367 lon2: 170.403348095216
    test 3300 line 367 azi2: 38.497783925432
    test 3301 line 367 lat2: -24.631881773331
    test 3302 line 367 lon2: 170.403348095216
    test 3303 line 367 azi2: 38.497783925432
    test 3304 line 368 lat: 84.347730
    test 3305 line 368 lon: 37.352130
    test 3306 line 368 fb: 38.599794
    test 3307 line 368 lat2: 84.347730272741
    test 3308 line 368 lon2: 37.352130023033
    test 3309 line 368 azi2: 38.599794179850
    test 3310 line 368 lat2: 84.347730272741
    test 3311 line 368 lon2: 37.352130023033
    test 3312 line 368 azi2: 38.599794179850
    test 3313 line 369 lat: 11.680773
    test 3314 line 369 lon: 170.552617
    test 3315 line 369 fb: 174.460436
    test 3316 line 369 lat2: 11.680772997529
    test 3317 line 369 lon2: 170.552617119135
    test 3318 line 369 azi2: 174.460435573783
    test 3319 line 369 lat2: 11.680772997529
    test 3320 line 369 lon2: 170.552617119135
    test 3321 line 369 azi2: 174.460435573783
    test 3322 line 370 lat: -4.129058
    test 3323 line 370 lon: 136.743627
    test 3324 line 370 fb: 142.147604
    test 3325 line 370 lat2: -4.129057873299
    test 3326 line 370 lon2: 136.743626644380
    test 3327 line 370 azi2: 142.147603954035
    test 3328 line 370 lat2: -4.129057873299
    test 3329 line 370 lon2: 136.743626644380
    test 3330 line 370 azi2: 142.147603954035
    test 3331 line 371 lat: 22.191782
    test 3332 line 371 lon: 164.962392
    test 3333 line 371 fb: 163.266967
    test 3334 line 371 lat2: 22.191782097783
    test 3335 line 371 lon2: 164.962391587580
    test 3336 line 371 azi2: 163.266967353376
    test 3337 line 371 lat2: 22.191782097783
    test 3338 line 371 lon2: 164.962391587580
    test 3339 line 371 azi2: 163.266967353376
    test 3340 line 372 lat: -20.517212
    test 3341 line 372 lon: 128.116444
    test 3342 line 372 fb: 110.769757
    test 3343 line 372 lat2: -20.517212185628
    test 3344 line 372 lon2: 128.116443546305
    test 3345 line 372 azi2: 110.769757212730
    test 3346 line 372 lat2: -20.517212185628
    test 3347 line 372 lon2: 128.116443546305
    test 3348 line 372 azi2: 110.769757212730
    test 3349 line 373 lat: -71.269219
    test 3350 line 373 lon: 117.744329
    test 3351 line 373 fb: 81.341006
    test 3352 line 373 lat2: -71.269218648518
    test 3353 line 373 lon2: 117.744328537214
    test 3354 line 373 azi2: 81.341005509003
    test 3355 line 373 lat2: -71.269218648518
    test 3356 line 373 lon2: 117.744328537214
    test 3357 line 373 azi2: 81.341005509003
    test 3358 line 374 lat: -28.381893
    test 3359 line 374 lon: 4.526029
    test 3360 line 374 fb: 176.348678
    test 3361 line 374 lat2: -28.381892766057
    test 3362 line 374 lon2: 4.526028955177
    test 3363 line 374 azi2: 176.348678015377
    test 3364 line 374 lat2: -28.381892766057
    test 3365 line 374 lon2: 4.526028955177
    test 3366 line 374 azi2: 176.348678015377
    test 3367 line 375 lat: -28.786090
    test 3368 line 375 lon: 25.937634
    test 3369 line 375 fb: 147.973102
    test 3370 line 375 lat2: -28.786089606638
    test 3371 line 375 lon2: 25.937634058027
    test 3372 line 375 azi2: 147.973102126478
    test 3373 line 375 lat2: -28.786089606638
    test 3374 line 375 lon2: 25.937634058027
    test 3375 line 375 azi2: 147.973102126478
    test 3376 line 376 lat: -37.872672
    test 3377 line 376 lon: 116.904193
    test 3378 line 376 fb: 88.568636
    test 3379 line 376 lat2: -37.872671755645
    test 3380 line 376 lon2: 116.904192578457
    test 3381 line 376 azi2: 88.568636418662
    test 3382 line 376 lat2: -37.872671755645
    test 3383 line 376 lon2: 116.904192578457
    test 3384 line 376 azi2: 88.568636418662
    test 3385 line 377 lat: -26.321447
    test 3386 line 377 lon: 85.206987
    test 3387 line 377 fb: 112.408109
    test 3388 line 377 lat2: -26.321446841940
    test 3389 line 377 lon2: 85.206986852002  FAILED, KNOWN, expected 85.206986852001
    test 3390 line 377 azi2: 112.408108683681
    test 3391 line 377 lat2: -26.321446841940
    test 3392 line 377 lon2: 85.206986852001
    test 3393 line 377 azi2: 112.408108683681
    test 3394 line 378 lat: -54.824260
    test 3395 line 378 lon: 156.561574
    test 3396 line 378 fb: 45.534810
    test 3397 line 378 lat2: -54.824260467184
    test 3398 line 378 lon2: 156.561573965853
    test 3399 line 378 azi2: 45.534810497878
    test 3400 line 378 lat2: -54.824260467184
    test 3401 line 378 lon2: 156.561573965853
    test 3402 line 378 azi2: 45.534810497879  FAILED, KNOWN, expected 45.534810497878
    test 3403 line 379 lat: -16.423550
    test 3404 line 379 lon: 36.685134
    test 3405 line 379 fb: 149.426790
    test 3406 line 379 lat2: -16.423550298805
    test 3407 line 379 lon2: 36.685133578511
    test 3408 line 379 azi2: 149.426789575292
    test 3409 line 379 lat2: -16.423550298805
    test 3410 line 379 lon2: 36.685133578511
    test 3411 line 379 azi2: 149.426789575292
    test 3412 line 380 lat: -16.806591
    test 3413 line 380 lon: 149.738610
    test 3414 line 380 fb: 108.898472
    test 3415 line 380 lat2: -16.806590952462
    test 3416 line 380 lon2: 149.738610286185
    test 3417 line 380 azi2: 108.898472198507
    test 3418 line 380 lat2: -16.806590952462
    test 3419 line 380 lon2: 149.738610286185
    test 3420 line 380 azi2: 108.898472198507
    test 3421 line 381 lat: 61.200095
    test 3422 line 381 lon: 179.666196
    test 3423 line 381 fb: 179.746894
    test 3424 line 381 lat2: 61.200095175201
    test 3425 line 381 lon2: 179.666196014679
    test 3426 line 381 azi2: 179.746893753530
    test 3427 line 381 lat2: 61.200095175201
    test 3428 line 381 lon2: 179.666196014679
    test 3429 line 381 azi2: 179.746893753530
    test 3430 line 382 lat: 66.474418
    test 3431 line 382 lon: 1.552183
    test 3432 line 382 fb: 2.088868
    test 3433 line 382 lat2: 66.474418401288
    test 3434 line 382 lon2: 1.552183188407
    test 3435 line 382 azi2: 2.088868324926
    test 3436 line 382 lat2: 66.474418401288
    test 3437 line 382 lon2: 1.552183188407
    test 3438 line 382 azi2: 2.088868324926
    test 3439 line 383 lat: -75.177220
    test 3440 line 383 lon: 158.741597
    test 3441 line 383 fb: 24.127094
    test 3442 line 383 lat2: -75.177219719926
    test 3443 line 383 lon2: 158.741596988185
    test 3444 line 383 azi2: 24.127093846134
    test 3445 line 383 lat2: -75.177219719926
    test 3446 line 383 lon2: 158.741596988185
    test 3447 line 383 azi2: 24.127093846134
    test 3448 line 384 lat: 43.592977
    test 3449 line 384 lon: 90.684526
    test 3450 line 384 fb: 91.539242
    test 3451 line 384 lat2: 43.592976578444
    test 3452 line 384 lon2: 90.684525887486
    test 3453 line 384 azi2: 91.539242394540
    test 3454 line 384 lat2: 43.592976578444
    test 3455 line 384 lon2: 90.684525887486
    test 3456 line 384 azi2: 91.539242394540
    test 3457 line 385 lat: -5.075415
    test 3458 line 385 lon: 101.127103
    test 3459 line 385 fb: 107.948022
    test 3460 line 385 lat2: -5.075415464229
    test 3461 line 385 lon2: 101.127103351067
    test 3462 line 385 azi2: 107.948021613622
    test 3463 line 385 lat2: -5.075415464229
    test 3464 line 385 lon2: 101.127103351067
    test 3465 line 385 azi2: 107.948021613622
    test 3466 line 386 lat: 50.406166
    test 3467 line 386 lon: 135.501939
    test 3468 line 386 fb: 162.003144
    test 3469 line 386 lat2: 50.406165949083
    test 3470 line 386 lon2: 135.501938931444
    test 3471 line 386 azi2: 162.003144394969
    test 3472 line 386 lat2: 50.406165949083
    test 3473 line 386 lon2: 135.501938931444
    test 3474 line 386 azi2: 162.003144394969
    test 3475 line 387 lat: -17.207733
    test 3476 line 387 lon: 43.634692
    test 3477 line 387 fb: 136.506793
    test 3478 line 387 lat2: -17.207732564306
    test 3479 line 387 lon2: 43.634692466982
    test 3480 line 387 azi2: 136.506792603897
    test 3481 line 387 lat2: -17.207732564306
    test 3482 line 387 lon2: 43.634692466982
    test 3483 line 387 azi2: 136.506792603897
    test 3484 line 388 lat: -28.917723
    test 3485 line 388 lon: 163.486470
    test 3486 line 388 fb: 38.990274
    test 3487 line 388 lat2: -28.917723347931
    test 3488 line 388 lon2: 163.486470248682
    test 3489 line 388 azi2: 38.990273918754
    test 3490 line 388 lat2: -28.917723347931
    test 3491 line 388 lon2: 163.486470248682
    test 3492 line 388 azi2: 38.990273918754
    test 3493 line 389 lat: -32.592414
    test 3494 line 389 lon: 76.048812
    test 3495 line 389 fb: 98.024249
    test 3496 line 389 lat2: -32.592414472935
    test 3497 line 389 lon2: 76.048812057267
    test 3498 line 389 azi2: 98.024248734062
    test 3499 line 389 lat2: -32.592414472935
    test 3500 line 389 lon2: 76.048812057267
    test 3501 line 389 azi2: 98.024248734062
    test 3502 line 390 lat: 50.602735
    test 3503 line 390 lon: 49.792893
    test 3504 line 390 fb: 110.500761
    test 3505 line 390 lat2: 50.602735331532
    test 3506 line 390 lon2: 49.792893095354
    test 3507 line 390 azi2: 110.500760610103
    test 3508 line 390 lat2: 50.602735331532
    test 3509 line 390 lon2: 49.792893095354
    test 3510 line 390 azi2: 110.500760610103
    test 3511 line 391 lat: -4.912232
    test 3512 line 391 lon: 142.681744
    test 3513 line 391 fb: 119.428358
    test 3514 line 391 lat2: -4.912231564840
    test 3515 line 391 lon2: 142.681743549937
    test 3516 line 391 azi2: 119.428358444443
    test 3517 line 391 lat2: -4.912231564840
    test 3518 line 391 lon2: 142.681743549937
    test 3519 line 391 azi2: 119.428358444443
    test 3520 line 392 lat: -45.213515
    test 3521 line 392 lon: 131.987859
    test 3522 line 392 fb: 96.014100
    test 3523 line 392 lat2: -45.213514932524
    test 3524 line 392 lon2: 131.987859404857
    test 3525 line 392 azi2: 96.014100177112
    test 3526 line 392 lat2: -45.213514932524
    test 3527 line 392 lon2: 131.987859404857
    test 3528 line 392 azi2: 96.014100177112
    test 3529 line 393 lat: -27.151096
    test 3530 line 393 lon: 127.729463
    test 3531 line 393 fb: 85.960623
    test 3532 line 393 lat2: -27.151095883523
    test 3533 line 393 lon2: 127.729463064736
    test 3534 line 393 azi2: 85.960623495334
    test 3535 line 393 lat2: -27.151095883523
    test 3536 line 393 lon2: 127.729463064736
    test 3537 line 393 azi2: 85.960623495334
    test 3538 line 394 lat: 8.000358
    test 3539 line 394 lon: 144.233747
    test 3540 line 394 fb: 142.364017
    test 3541 line 394 lat2: 8.000357843774
    test 3542 line 394 lon2: 144.233746766535
    test 3543 line 394 azi2: 142.364016793767
    test 3544 line 394 lat2: 8.000357843774
    test 3545 line 394 lon2: 144.233746766535
    test 3546 line 394 azi2: 142.364016793767
    test 3547 line 395 lat: -6.431774
    test 3548 line 395 lon: 170.549196
    test 3549 line 395 fb: 122.180851
    test 3550 line 395 lat2: -6.431773707290
    test 3551 line 395 lon2: 170.549196384306
    test 3552 line 395 azi2: 122.180850600243
    test 3553 line 395 lat2: -6.431773707290
    test 3554 line 395 lon2: 170.549196384306
    test 3555 line 395 azi2: 122.180850600243
    test 3556 line 396 lat: 62.834146
    test 3557 line 396 lon: 171.218298
    test 3558 line 396 fb: 175.117433
    test 3559 line 396 lat2: 62.834146216572
    test 3560 line 396 lon2: 171.218297548713
    test 3561 line 396 azi2: 175.117432600362
    test 3562 line 396 lat2: 62.834146216572
    test 3563 line 396 lon2: 171.218297548713
    test 3564 line 396 azi2: 175.117432600362
    test 3565 line 397 lat: 22.902814
    test 3566 line 397 lon: 70.233438
    test 3567 line 397 fb: 120.935912
    test 3568 line 397 lat2: 22.902813652262
    test 3569 line 397 lon2: 70.233438162142
    test 3570 line 397 azi2: 120.935911762169
    test 3571 line 397 lat2: 22.902813652262
    test 3572 line 397 lon2: 70.233438162142
    test 3573 line 397 azi2: 120.935911762169
    test 3574 line 398 lat: 22.584853
    test 3575 line 398 lon: 31.616865
    test 3576 line 398 fb: 107.124038
    test 3577 line 398 lat2: 22.584853282541
    test 3578 line 398 lon2: 31.616864803984
    test 3579 line 398 azi2: 107.124038156545
    test 3580 line 398 lat2: 22.584853282541
    test 3581 line 398 lon2: 31.616864803984
    test 3582 line 398 azi2: 107.124038156545
    test 3583 line 399 lat: 31.269173
    test 3584 line 399 lon: 65.399306
    test 3585 line 399 fb: 151.892600
    test 3586 line 399 lat2: 31.269173344204
    test 3587 line 399 lon2: 65.399305777763
    test 3588 line 399 azi2: 151.892599739667
    test 3589 line 399 lat2: 31.269173344204
    test 3590 line 399 lon2: 65.399305777763
    test 3591 line 399 azi2: 151.892599739667
    test 3592 line 400 lat: 35.519614
    test 3593 line 400 lon: 143.165122
    test 3594 line 400 fb: 161.479891
    test 3595 line 400 lat2: 35.519613515115
    test 3596 line 400 lon2: 143.165121509798
    test 3597 line 400 azi2: 161.479891246031
    test 3598 line 400 lat2: 35.519613515115
    test 3599 line 400 lon2: 143.165121509798
    test 3600 line 400 azi2: 161.479891246031
    test 3601 line 401 lat: -53.741922
    test 3602 line 401 lon: 67.121402
    test 3603 line 401 fb: 130.871188
    test 3604 line 401 lat2: -53.741921506580
    test 3605 line 401 lon2: 67.121402135047
    test 3606 line 401 azi2: 130.871188003209
    test 3607 line 401 lat2: -53.741921506580
    test 3608 line 401 lon2: 67.121402135047
    test 3609 line 401 azi2: 130.871188003209
    test 3610 line 402 lat: 9.046227
    test 3611 line 402 lon: 35.933737
    test 3612 line 402 fb: 175.770789
    test 3613 line 402 lat2: 9.046227267580
    test 3614 line 402 lon2: 35.933736921417
    test 3615 line 402 azi2: 175.770788535406
    test 3616 line 402 lat2: 9.046227267580
    test 3617 line 402 lon2: 35.933736921417
    test 3618 line 402 azi2: 175.770788535406
    test 3619 line 403 lat: 75.917034
    test 3620 line 403 lon: 125.150808
    test 3621 line 403 fb: 135.354467
    test 3622 line 403 lat2: 75.917034235438
    test 3623 line 403 lon2: 125.150808062636
    test 3624 line 403 azi2: 135.354466840051
    test 3625 line 403 lat2: 75.917034235438
    test 3626 line 403 lon2: 125.150808062636
    test 3627 line 403 azi2: 135.354466840051
    test 3628 line 404 lat: -39.724826
    test 3629 line 404 lon: 77.372087
    test 3630 line 404 fb: 111.852577
    test 3631 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3632 line 404 lon2: 77.372086855267
    test 3633 line 404 azi2: 111.852577362108
    test 3634 line 404 lat2: -39.724825618504  FAILED, KNOWN, expected -39.724825618503
    test 3635 line 404 lon2: 77.372086855267
    test 3636 line 404 azi2: 111.852577362108
    test 3637 line 405 lat: 3.917212
    test 3638 line 405 lon: 142.621752
    test 3639 line 405 fb: 124.176952
    test 3640 line 405 lat2: 3.917212154431
    test 3641 line 405 lon2: 142.621751764236
    test 3642 line 405 azi2: 124.176952499321
    test 3643 line 405 lat2: 3.917212154431
    test 3644 line 405 lon2: 142.621751764236
    test 3645 line 405 azi2: 124.176952499321
    test 3646 line 406 lat: 60.230364
    test 3647 line 406 lon: 26.245689
    test 3648 line 406 fb: 48.509486
    test 3649 line 406 lat2: 60.230364486607
    test 3650 line 406 lon2: 26.245688508507
    test 3651 line 406 azi2: 48.509486474608
    test 3652 line 406 lat2: 60.230364486607
    test 3653 line 406 lon2: 26.245688508507
    test 3654 line 406 azi2: 48.509486474608
    test 3655 line 407 lat: 29.597322
    test 3656 line 407 lon: 29.129808
    test 3657 line 407 fb: 79.288539
    test 3658 line 407 lat2: 29.597322070518
    test 3659 line 407 lon2: 29.129807944898
    test 3660 line 407 azi2: 79.288538667829
    test 3661 line 407 lat2: 29.597322070518
    test 3662 line 407 lon2: 29.129807944898
    test 3663 line 407 azi2: 79.288538667829
    test 3664 line 408 lat: -62.913760
    test 3665 line 408 lon: 14.845859
    test 3666 line 408 fb: 165.794536
    test 3667 line 408 lat2: -62.913759669564
    test 3668 line 408 lon2: 14.845859018930
    test 3669 line 408 azi2: 165.794535940950
    test 3670 line 408 lat2: -62.913759669564
    test 3671 line 408 lon2: 14.845859018930
    test 3672 line 408 azi2: 165.794535940950
    test 3673 line 409 lat: 15.360446
    test 3674 line 409 lon: 161.450680
    test 3675 line 409 fb: 164.457024
    test 3676 line 409 lat2: 15.360445685187
    test 3677 line 409 lon2: 161.450680426049
    test 3678 line 409 azi2: 164.457024354600
    test 3679 line 409 lat2: 15.360445685187
    test 3680 line 409 lon2: 161.450680426049
    test 3681 line 409 azi2: 164.457024354600
    test 3682 line 410 lat: -58.330109
    test 3683 line 410 lon: 17.628134
    test 3684 line 410 fb: 161.349788
    test 3685 line 410 lat2: -58.330108507597
    test 3686 line 410 lon2: 17.628133627705
    test 3687 line 410 azi2: 161.349788081184
    test 3688 line 410 lat2: -58.330108507597
    test 3689 line 410 lon2: 17.628133627705
    test 3690 line 410 azi2: 161.349788081184
    test 3691 line 411 lat: -68.514277
    test 3692 line 411 lon: 19.958792
    test 3693 line 411 fb: 162.262811
    test 3694 line 411 lat2: -68.514276940652
    test 3695 line 411 lon2: 19.958792438281
    test 3696 line 411 azi2: 162.262811488702
    test 3697 line 411 lat2: -68.514276940652
    test 3698 line 411 lon2: 19.958792438281
    test 3699 line 411 azi2: 162.262811488702
    test 3700 line 412 lat: -23.686766
    test 3701 line 412 lon: 77.544158
    test 3702 line 412 fb: 97.517041
    test 3703 line 412 lat2: -23.686765736999
    test 3704 line 412 lon2: 77.544158137101
    test 3705 line 412 azi2: 97.517041033585
    test 3706 line 412 lat2: -23.686765736999
    test 3707 line 412 lon2: 77.544158137101
    test 3708 line 412 azi2: 97.517041033585
    test 3709 line 413 lat: -50.843575
    test 3710 line 413 lon: 118.404202
    test 3711 line 413 fb: 75.928950
    test 3712 line 413 lat2: -50.843574559525
    test 3713 line 413 lon2: 118.404202153051
    test 3714 line 413 azi2: 75.928950296488
    test 3715 line 413 lat2: -50.843574559525
    test 3716 line 413 lon2: 118.404202153051
    test 3717 line 413 azi2: 75.928950296488
    test 3718 line 414 lat: 44.438742
    test 3719 line 414 lon: 152.028260
    test 3720 line 414 fb: 156.092336
    test 3721 line 414 lat2: 44.438741945021
    test 3722 line 414 lon2: 152.028260148130
    test 3723 line 414 azi2: 156.092336139519
    test 3724 line 414 lat2: 44.438741945021
    test 3725 line 414 lon2: 152.028260148130
    test 3726 line 414 azi2: 156.092336139519
    test 3727 line 415 lat: 33.820395
    test 3728 line 415 lon: 178.008342
    test 3729 line 415 fb: 177.679586
    test 3730 line 415 lat2: 33.820395378014
    test 3731 line 415 lon2: 178.008341908011
    test 3732 line 415 azi2: 177.679585823345
    test 3733 line 415 lat2: 33.820395378014
    test 3734 line 415 lon2: 178.008341908011
    test 3735 line 415 azi2: 177.679585823345
    test 3736 line 416 lat: 27.506735
    test 3737 line 416 lon: 153.242452
    test 3738 line 416 fb: 150.262824
    test 3739 line 416 lat2: 27.506735286152
    test 3740 line 416 lon2: 153.242452449881
    test 3741 line 416 azi2: 150.262824421351
    test 3742 line 416 lat2: 27.506735286152
    test 3743 line 416 lon2: 153.242452449881
    test 3744 line 416 azi2: 150.262824421351
    test 3745 line 417 lat: -31.250437
    test 3746 line 417 lon: 179.014499
    test 3747 line 417 fb: 178.103046
    test 3748 line 417 lat2: -31.250436707468
    test 3749 line 417 lon2: 179.014498940190
    test 3750 line 417 azi2: 178.103045898455
    test 3751 line 417 lat2: -31.250436707468
    test 3752 line 417 lon2: 179.014498940190
    test 3753 line 417 azi2: 178.103045898455
    test 3754 line 418 lat: 40.341542
    test 3755 line 418 lon: 109.605984
    test 3756 line 418 fb: 105.401958
    test 3757 line 418 lat2: 40.341542234586
    test 3758 line 418 lon2: 109.605984313079
    test 3759 line 418 azi2: 105.401958406556
    test 3760 line 418 lat2: 40.341542234586
    test 3761 line 418 lon2: 109.605984313079
    test 3762 line 418 azi2: 105.401958406556
    test 3763 line 419 lat: 48.318632
    test 3764 line 419 lon: 92.282799
    test 3765 line 419 fb: 111.987482
    test 3766 line 419 lat2: 48.318632112439
    test 3767 line 419 lon2: 92.282799489208
    test 3768 line 419 azi2: 111.987482299261
    test 3769 line 419 lat2: 48.318632112439
    test 3770 line 419 lon2: 92.282799489208
    test 3771 line 419 azi2: 111.987482299261
    test 3772 line 420 lat: 0.675299
    test 3773 line 420 lon: 6.789301
    test 3774 line 420 fb: 164.921926
    test 3775 line 420 lat2: 0.675299289459
    test 3776 line 420 lon2: 6.789300798072
    test 3777 line 420 azi2: 164.921926385405
    test 3778 line 420 lat2: 0.675299289459
    test 3779 line 420 lon2: 6.789300798072
    test 3780 line 420 azi2: 164.921926385405
    test 3781 line 421 lat: 33.232812
    test 3782 line 421 lon: 170.163205
    test 3783 line 421 fb: 175.445424
    test 3784 line 421 lat2: 33.232811536179
    test 3785 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3786 line 421 azi2: 175.445424087910
    test 3787 line 421 lat2: 33.232811536179
    test 3788 line 421 lon2: 170.163205247232  FAILED, KNOWN, expected 170.163205247231
    test 3789 line 421 azi2: 175.445424087910
    test 3790 line 422 lat: 51.425532
    test 3791 line 422 lon: 167.128188
    test 3792 line 422 fb: 169.431307
    test 3793 line 422 lat2: 51.425532151818
    test 3794 line 422 lon2: 167.128188073883
    test 3795 line 422 azi2: 169.431306547043
    test 3796 line 422 lat2: 51.425532151818
    test 3797 line 422 lon2: 167.128188073883
    test 3798 line 422 azi2: 169.431306547043
    test 3799 line 423 lat: 72.043795
    test 3800 line 423 lon: 23.320161
    test 3801 line 423 fb: 85.002463
    test 3802 line 423 lat2: 72.043794732818
    test 3803 line 423 lon2: 23.320160820556
    test 3804 line 423 azi2: 85.002463342037
    test 3805 line 423 lat2: 72.043794732818
    test 3806 line 423 lon2: 23.320160820556
    test 3807 line 423 azi2: 85.002463342037
    test 3808 line 424 lat: 55.279253
    test 3809 line 424 lon: 148.483684
    test 3810 line 424 fb: 155.614243
    test 3811 line 424 lat2: 55.279252586695
    test 3812 line 424 lon2: 148.483684405588
    test 3813 line 424 azi2: 155.614243012977
    test 3814 line 424 lat2: 55.279252586695
    test 3815 line 424 lon2: 148.483684405588
    test 3816 line 424 azi2: 155.614243012977
    test 3817 line 425 lat: 50.054601
    test 3818 line 425 lon: 43.609545
    test 3819 line 425 fb: 100.758451
    test 3820 line 425 lat2: 50.054601019930
    test 3821 line 425 lon2: 43.609545475731
    test 3822 line 425 azi2: 100.758450815354
    test 3823 line 425 lat2: 50.054601019930
    test 3824 line 425 lon2: 43.609545475731
    test 3825 line 425 azi2: 100.758450815354
    test 3826 line 426 lat: 31.194436
    test 3827 line 426 lon: 31.458476
    test 3828 line 426 fb: 92.204244
    test 3829 line 426 lat2: 31.194436445411
    test 3830 line 426 lon2: 31.458476146984
    test 3831 line 426 azi2: 92.204244235305
    test 3832 line 426 lat2: 31.194436445411
    test 3833 line 426 lon2: 31.458476146984
    test 3834 line 426 azi2: 92.204244235305
    test 3835 line 427 lat: 57.758262
    test 3836 line 427 lon: 164.499274
    test 3837 line 427 fb: 162.877999
    test 3838 line 427 lat2: 57.758262113137
    test 3839 line 427 lon2: 164.499274258053
    test 3840 line 427 azi2: 162.877999232894
    test 3841 line 427 lat2: 57.758262113137
    test 3842 line 427 lon2: 164.499274258053
    test 3843 line 427 azi2: 162.877999232894
    test 3844 line 428 lat: 27.006898
    test 3845 line 428 lon: 173.173812
    test 3846 line 428 fb: 177.878074
    test 3847 line 428 lat2: 27.006897756516
    test 3848 line 428 lon2: 173.173811781657
    test 3849 line 428 azi2: 177.878073603766
    test 3850 line 428 lat2: 27.006897756516
    test 3851 line 428 lon2: 173.173811781657
    test 3852 line 428 azi2: 177.878073603766
    test 3853 line 429 lat: -62.917581
    test 3854 line 429 lon: 18.990464
    test 3855 line 429 fb: 169.629168
    test 3856 line 429 lat2: -62.917580953804
    test 3857 line 429 lon2: 18.990464058493
    test 3858 line 429 azi2: 169.629168390979
    test 3859 line 429 lat2: -62.917580953804
    test 3860 line 429 lon2: 18.990464058493
    test 3861 line 429 azi2: 169.629168390979
    test 3862 line 430 lat: -43.128167
    test 3863 line 430 lon: 61.680974
    test 3864 line 430 fb: 135.269008
    test 3865 line 430 lat2: -43.128166633902
    test 3866 line 430 lon2: 61.680974170546
    test 3867 line 430 azi2: 135.269008366092
    test 3868 line 430 lat2: -43.128166633902
    test 3869 line 430 lon2: 61.680974170546
    test 3870 line 430 azi2: 135.269008366092
    test 3871 line 431 lat: -49.314417
    test 3872 line 431 lon: 55.826072
    test 3873 line 431 fb: 131.974574
    test 3874 line 431 lat2: -49.314417365795
    test 3875 line 431 lon2: 55.826071541563
    test 3876 line 431 azi2: 131.974573587520
    test 3877 line 431 lat2: -49.314417365795
    test 3878 line 431 lon2: 55.826071541563
    test 3879 line 431 azi2: 131.974573587520
    test 3880 line 432 lat: -24.322411
    test 3881 line 432 lon: 103.867391
    test 3882 line 432 fb: 139.458674
    test 3883 line 432 lat2: -24.322411486444
    test 3884 line 432 lon2: 103.867391100271
    test 3885 line 432 azi2: 139.458674175181
    test 3886 line 432 lat2: -24.322411486444
    test 3887 line 432 lon2: 103.867391100271
    test 3888 line 432 azi2: 139.458674175181
    test 3889 line 433 lat: -19.557319
    test 3890 line 433 lon: 81.358495
    test 3891 line 433 fb: 134.029610
    test 3892 line 433 lat2: -19.557318635270
    test 3893 line 433 lon2: 81.358494523202
    test 3894 line 433 azi2: 134.029609915778
    test 3895 line 433 lat2: -19.557318635270
    test 3896 line 433 lon2: 81.358494523202
    test 3897 line 433 azi2: 134.029609915778
    test 3898 line 434 lat: 7.830115
    test 3899 line 434 lon: 5.114172
    test 3900 line 434 fb: 175.025641
    test 3901 line 434 lat2: 7.830115253087
    test 3902 line 434 lon2: 5.114172330857
    test 3903 line 434 azi2: 175.025640902819
    test 3904 line 434 lat2: 7.830115253087
    test 3905 line 434 lon2: 5.114172330857
    test 3906 line 434 azi2: 175.025640902819
    test 3907 line 435 lat: -65.834623
    test 3908 line 435 lon: 41.772796
    test 3909 line 435 fb: 143.178050
    test 3910 line 435 lat2: -65.834622858584
    test 3911 line 435 lon2: 41.772796000787
    test 3912 line 435 azi2: 143.178050120951
    test 3913 line 435 lat2: -65.834622858584
    test 3914 line 435 lon2: 41.772796000787
    test 3915 line 435 azi2: 143.178050120951
    test 3916 line 436 lat: -7.997604
    test 3917 line 436 lon: 31.723397
    test 3918 line 436 fb: 153.896388
    test 3919 line 436 lat2: -7.997604143032
    test 3920 line 436 lon2: 31.723396618974
    test 3921 line 436 azi2: 153.896387549518
    test 3922 line 436 lat2: -7.997604143032
    test 3923 line 436 lon2: 31.723396618974
    test 3924 line 436 azi2: 153.896387549518
    test 3925 line 437 lat: -22.173130
    test 3926 line 437 lon: 164.896770
    test 3927 line 437 fb: 152.675597
    test 3928 line 437 lat2: -22.173129586699
    test 3929 line 437 lon2: 164.896770399383
    test 3930 line 437 azi2: 152.675596916021
    test 3931 line 437 lat2: -22.173129586699
    test 3932 line 437 lon2: 164.896770399383
    test 3933 line 437 azi2: 152.675596916021
    test 3934 line 438 lat: 35.085786
    test 3935 line 438 lon: 173.892271
    test 3936 line 438 fb: 171.931231
    test 3937 line 438 lat2: 35.085785799083
    test 3938 line 438 lon2: 173.892270533009
    test 3939 line 438 azi2: 171.931230872910
    test 3940 line 438 lat2: 35.085785799083
    test 3941 line 438 lon2: 173.892270533009
    test 3942 line 438 azi2: 171.931230872910
    test 3943 line 439 lat: -25.378865
    test 3944 line 439 lon: 2.197740
    test 3945 line 439 fb: 178.756775
    test 3946 line 439 lat2: -25.378865450268
    test 3947 line 439 lon2: 2.197739985587
    test 3948 line 439 azi2: 178.756775063163
    test 3949 line 439 lat2: -25.378865450268
    test 3950 line 439 lon2: 2.197739985587
    test 3951 line 439 azi2: 178.756775063163
    test 3952 line 440 lat: -13.782608
    test 3953 line 440 lon: 143.084799
    test 3954 line 440 fb: 141.818572
    test 3955 line 440 lat2: -13.782608118540
    test 3956 line 440 lon2: 143.084798779239
    test 3957 line 440 azi2: 141.818572490275
    test 3958 line 440 lat2: -13.782608118540
    test 3959 line 440 lon2: 143.084798779239
    test 3960 line 440 azi2: 141.818572490275
    test 3961 line 441 lat: -16.657589
    test 3962 line 441 lon: 100.829440
    test 3963 line 441 fb: 94.804409
    test 3964 line 441 lat2: -16.657588778768
    test 3965 line 441 lon2: 100.829440071396
    test 3966 line 441 azi2: 94.804408628371
    test 3967 line 441 lat2: -16.657588778768
    test 3968 line 441 lon2: 100.829440071396
    test 3969 line 441 azi2: 94.804408628371
    test 3970 line 442 lat: 23.629666
    test 3971 line 442 lon: 148.675531
    test 3972 line 442 fb: 169.091767
    test 3973 line 442 lat2: 23.629665922502
    test 3974 line 442 lon2: 148.675530832608
    test 3975 line 442 azi2: 169.091766635020
    test 3976 line 442 lat2: 23.629665922502
    test 3977 line 442 lon2: 148.675530832608
    test 3978 line 442 azi2: 169.091766635020
    test 3979 line 443 lat: 4.022724
    test 3980 line 443 lon: 161.803702
    test 3981 line 443 fb: 141.272785
    test 3982 line 443 lat2: 4.022724409294
    test 3983 line 443 lon2: 161.803702045621
    test 3984 line 443 azi2: 141.272784545678
    test 3985 line 443 lat2: 4.022724409294
    test 3986 line 443 lon2: 161.803702045621
    test 3987 line 443 azi2: 141.272784545678
    test 3988 line 444 lat: 13.280168
    test 3989 line 444 lon: 20.120413
    test 3990 line 444 fb: 158.170551
    test 3991 line 444 lat2: 13.280167579164
    test 3992 line 444 lon2: 20.120413486875
    test 3993 line 444 azi2: 158.170551379189
    test 3994 line 444 lat2: 13.280167579164
    test 3995 line 444 lon2: 20.120413486875
    test 3996 line 444 azi2: 158.170551379189
    test 3997 line 445 lat: -47.521450
    test 3998 line 445 lon: 150.549196
    test 3999 line 445 fb: 44.718791
    test 4000 line 445 lat2: -47.521449956879
    test 4001 line 445 lon2: 150.549196046351
    test 4002 line 445 azi2: 44.718791294775
    test 4003 line 445 lat2: -47.521449956879
    test 4004 line 445 lon2: 150.549196046351
    test 4005 line 445 azi2: 44.718791294775
    test 4006 line 446 lat: 17.790615
    test 4007 line 446 lon: 141.461006
    test 4008 line 446 fb: 115.746784
    test 4009 line 446 lat2: 17.790615163216
    test 4010 line 446 lon2: 141.461005551791
    test 4011 line 446 azi2: 115.746784352318
    test 4012 line 446 lat2: 17.790615163216
    test 4013 line 446 lon2: 141.461005551791
    test 4014 line 446 azi2: 115.746784352318
    test 4015 line 447 lat: -26.519374
    test 4016 line 447 lon: 98.067906
    test 4017 line 447 fb: 113.253929
    test 4018 line 447 lat2: -26.519374288386
    test 4019 line 447 lon2: 98.067906321718
    test 4020 line 447 azi2: 113.253928642653
    test 4021 line 447 lat2: -26.519374288386
    test 4022 line 447 lon2: 98.067906321718
    test 4023 line 447 azi2: 113.253928642653
    test 4024 line 448 lat: -12.401139
    test 4025 line 448 lon: 73.327970
    test 4026 line 448 fb: 124.879499
    test 4027 line 448 lat2: -12.401138571717
    test 4028 line 448 lon2: 73.327969848986
    test 4029 line 448 azi2: 124.879499241464
    test 4030 line 448 lat2: -12.401138571717
    test 4031 line 448 lon2: 73.327969848986
    test 4032 line 448 azi2: 124.879499241464
    test 4033 line 449 lat: 61.619396
    test 4034 line 449 lon: 99.785406
    test 4035 line 449 fb: 107.998380
    test 4036 line 449 lat2: 61.619396375102
    test 4037 line 449 lon2: 99.785406498835
    test 4038 line 449 azi2: 107.998379654880
    test 4039 line 449 lat2: 61.619396375102
    test 4040 line 449 lon2: 99.785406498835
    test 4041 line 449 azi2: 107.998379654880
    test 4042 line 450 lat: 36.997252
    test 4043 line 450 lon: 56.015643
    test 4044 line 450 fb: 103.921663
    test 4045 line 450 lat2: 36.997252125041
    test 4046 line 450 lon2: 56.015642631106
    test 4047 line 450 azi2: 103.921662760483
    test 4048 line 450 lat2: 36.997252125041
    test 4049 line 450 lon2: 56.015642631106
    test 4050 line 450 azi2: 103.921662760483
    test 4051 line 451 lat: 37.824447
    test 4052 line 451 lon: 83.438440
    test 4053 line 451 fb: 89.229164
    test 4054 line 451 lat2: 37.824446788544
    test 4055 line 451 lon2: 83.438439603294
    test 4056 line 451 azi2: 89.229164462127
    test 4057 line 451 lat2: 37.824446788544
    test 4058 line 451 lon2: 83.438439603294
    test 4059 line 451 azi2: 89.229164462127
    test 4060 line 452 lat: 78.387864
    test 4061 line 452 lon: 118.814812
    test 4062 line 452 fb: 133.706108
    test 4063 line 452 lat2: 78.387863550790
    test 4064 line 452 lon2: 118.814812128945
    test 4065 line 452 azi2: 133.706108131229
    test 4066 line 452 lat2: 78.387863550790
    test 4067 line 452 lon2: 118.814812128945
    test 4068 line 452 azi2: 133.706108131229
    test 4069 line 453 lat: -21.219381
    test 4070 line 453 lon: 53.544400
    test 4071 line 453 fb: 108.462517
    test 4072 line 453 lat2: -21.219381398156
    test 4073 line 453 lon2: 53.544399883561
    test 4074 line 453 azi2: 108.462517491505
    test 4075 line 453 lat2: -21.219381398156
    test 4076 line 453 lon2: 53.544399883561
    test 4077 line 453 azi2: 108.462517491505
    test 4078 line 454 lat: 63.304502
    test 4079 line 454 lon: 132.034926
    test 4080 line 454 fb: 139.912627
    test 4081 line 454 lat2: 63.304502042590
    test 4082 line 454 lon2: 132.034925840674
    test 4083 line 454 azi2: 139.912627269623
    test 4084 line 454 lat2: 63.304502042590
    test 4085 line 454 lon2: 132.034925840674
    test 4086 line 454 azi2: 139.912627269623
    test 4087 line 455 lat: 13.515663
    test 4088 line 455 lon: 8.989766
    test 4089 line 455 fb: 35.949535
    test 4090 line 455 lat2: 13.515662875313
    test 4091 line 455 lon2: 8.989765670730
    test 4092 line 455 azi2: 35.949534634702
    test 4093 line 455 lat2: 13.515662875313
    test 4094 line 455 lon2: 8.989765670730
    test 4095 line 455 azi2: 35.949534634702
    test 4096 line 456 lat: -6.742624
    test 4097 line 456 lon: 4.531931
    test 4098 line 456 fb: 171.306863
    test 4099 line 456 lat2: -6.742624347861
    test 4100 line 456 lon2: 4.531931315168
    test 4101 line 456 azi2: 171.306863155411
    test 4102 line 456 lat2: -6.742624347861
    test 4103 line 456 lon2: 4.531931315168
    test 4104 line 456 azi2: 171.306863155411
    test 4105 line 457 lat: -24.910509
    test 4106 line 457 lon: 128.137682
    test 4107 line 457 fb: 121.711631
    test 4108 line 457 lat2: -24.910509138681
    test 4109 line 457 lon2: 128.137681811633
    test 4110 line 457 azi2: 121.711631340407
    test 4111 line 457 lat2: -24.910509138681
    test 4112 line 457 lon2: 128.137681811633
    test 4113 line 457 azi2: 121.711631340407
    test 4114 line 458 lat: -40.687591
    test 4115 line 458 lon: 76.389897
    test 4116 line 458 fb: 116.394433
    test 4117 line 458 lat2: -40.687590598372
    test 4118 line 458 lon2: 76.389897347637
    test 4119 line 458 azi2: 116.394432846311
    test 4120 line 458 lat2: -40.687590598372
    test 4121 line 458 lon2: 76.389897347637
    test 4122 line 458 azi2: 116.394432846311
    test 4123 line 459 lat: 50.593808
    test 4124 line 459 lon: 155.175630
    test 4125 line 459 fb: 149.533910
    test 4126 line 459 lat2: 50.593807692461
    test 4127 line 459 lon2: 155.175629862288
    test 4128 line 459 azi2: 149.533910451363
    test 4129 line 459 lat2: 50.593807692461
    test 4130 line 459 lon2: 155.175629862288
    test 4131 line 459 azi2: 149.533910451363
    test 4132 line 460 lat: 12.198222
    test 4133 line 460 lon: 165.839456
    test 4134 line 460 fb: 172.783459
    test 4135 line 460 lat2: 12.198221826512
    test 4136 line 460 lon2: 165.839456381799
    test 4137 line 460 azi2: 172.783459292833
    test 4138 line 460 lat2: 12.198221826512
    test 4139 line 460 lon2: 165.839456381799
    test 4140 line 460 azi2: 172.783459292833
    test 4141 line 461 lat: 34.436568
    test 4142 line 461 lon: 7.117338
    test 4143 line 461 fb: 169.786492
    test 4144 line 461 lat2: 34.436568298724
    test 4145 line 461 lon2: 7.117337693395
    test 4146 line 461 azi2: 169.786491850891
    test 4147 line 461 lat2: 34.436568298724
    test 4148 line 461 lon2: 7.117337693395
    test 4149 line 461 azi2: 169.786491850891
    test 4150 line 462 lat: -3.145255
    test 4151 line 462 lon: 30.502293
    test 4152 line 462 fb: 103.563749
    test 4153 line 462 lat2: -3.145254788627
    test 4154 line 462 lon2: 30.502293345016
    test 4155 line 462 azi2: 103.563748974525
    test 4156 line 462 lat2: -3.145254788627
    test 4157 line 462 lon2: 30.502293345016
    test 4158 line 462 azi2: 103.563748974525
    test 4159 line 463 lat: 16.264722
    test 4160 line 463 lon: 85.497207
    test 4161 line 463 fb: 116.933863
    test 4162 line 463 lat2: 16.264722156696
    test 4163 line 463 lon2: 85.497207496626
    test 4164 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4165 line 463 lat2: 16.264722156696
    test 4166 line 463 lon2: 85.497207496626
    test 4167 line 463 azi2: 116.933862512764  FAILED, KNOWN, expected 116.933862512763
    test 4168 line 464 lat: 1.433605
    test 4169 line 464 lon: 4.165940
    test 4170 line 464 fb: 170.272462
    test 4171 line 464 lat2: 1.433605151882
    test 4172 line 464 lon2: 4.165940219923
    test 4173 line 464 azi2: 170.272462365963
    test 4174 line 464 lat2: 1.433605151882
    test 4175 line 464 lon2: 4.165940219923
    test 4176 line 464 azi2: 170.272462365963
    test 4177 line 465 lat: -43.326676
    test 4178 line 465 lon: 153.148367
    test 4179 line 465 fb: 42.921394
    test 4180 line 465 lat2: -43.326676023438
    test 4181 line 465 lon2: 153.148366512832
    test 4182 line 465 azi2: 42.921393854868
    test 4183 line 465 lat2: -43.326676023438
    test 4184 line 465 lon2: 153.148366512832
    test 4185 line 465 azi2: 42.921393854868
    test 4186 line 466 lat: 20.405242
    test 4187 line 466 lon: 178.247549
    test 4188 line 466 fb: 178.801033
    test 4189 line 466 lat2: 20.405242225208
    test 4190 line 466 lon2: 178.247549230810
    test 4191 line 466 azi2: 178.801032702563
    test 4192 line 466 lat2: 20.405242225208
    test 4193 line 466 lon2: 178.247549230810
    test 4194 line 466 azi2: 178.801032702563
    test 4195 line 467 lat: -22.482832
    test 4196 line 467 lon: 140.761211
    test 4197 line 467 fb: 82.371737
    test 4198 line 467 lat2: -22.482831544520
    test 4199 line 467 lon2: 140.761210729739
    test 4200 line 467 azi2: 82.371736722715
    test 4201 line 467 lat2: -22.482831544520
    test 4202 line 467 lon2: 140.761210729739
    test 4203 line 467 azi2: 82.371736722715
    test 4204 line 468 lat: -41.151672
    test 4205 line 468 lon: 38.419124
    test 4206 line 468 fb: 148.221356
    test 4207 line 468 lat2: -41.151672070525
    test 4208 line 468 lon2: 38.419124284860
    test 4209 line 468 azi2: 148.221356053664
    test 4210 line 468 lat2: -41.151672070525
    test 4211 line 468 lon2: 38.419124284860
    test 4212 line 468 azi2: 148.221356053664
    test 4213 line 469 lat: -63.212817
    test 4214 line 469 lon: 15.714998
    test 4215 line 469 fb: 166.777356
    test 4216 line 469 lat2: -63.212816746477
    test 4217 line 469 lon2: 15.714998156904
    test 4218 line 469 azi2: 166.777356149473
    test 4219 line 469 lat2: -63.212816746477
    test 4220 line 469 lon2: 15.714998156904
    test 4221 line 469 azi2: 166.777356149473
    test 4222 line 470 lat: -33.892681
    test 4223 line 470 lon: 120.971496
    test 4224 line 470 fb: 170.404814
    test 4225 line 470 lat2: -33.892680517408
    test 4226 line 470 lon2: 120.971495805190
    test 4227 line 470 azi2: 170.404813772447
    test 4228 line 470 lat2: -33.892680517408
    test 4229 line 470 lon2: 120.971495805190
    test 4230 line 470 azi2: 170.404813772447
    test 4231 line 471 lat: -17.570093
    test 4232 line 471 lon: 137.259693
    test 4233 line 471 fb: 175.973637
    test 4234 line 471 lat2: -17.570092516031
    test 4235 line 471 lon2: 137.259693182063
    test 4236 line 471 azi2: 175.973637230107
    test 4237 line 471 lat2: -17.570092516031
    test 4238 line 471 lon2: 137.259693182063
    test 4239 line 471 azi2: 175.973637230107
    test 4240 line 472 lat: -24.221028
    test 4241 line 472 lon: 33.960052
    test 4242 line 472 fb: 130.753279
    test 4243 line 472 lat2: -24.221027716300
    test 4244 line 472 lon2: 33.960051796001
    test 4245 line 472 azi2: 130.753279335550
    test 4246 line 472 lat2: -24.221027716300
    test 4247 line 472 lon2: 33.960051796001
    test 4248 line 472 azi2: 130.753279335550
    test 4249 line 473 lat: -48.849133
    test 4250 line 473 lon: 176.601435
    test 4251 line 473 fb: 5.037779
    test 4252 line 473 lat2: -48.849132604777
    test 4253 line 473 lon2: 176.601435366477
    test 4254 line 473 azi2: 5.037779120578
    test 4255 line 473 lat2: -48.849132604777
    test 4256 line 473 lon2: 176.601435366477
    test 4257 line 473 azi2: 5.037779120578
    test 4258 line 474 lat: -50.620233
    test 4259 line 474 lon: 22.061011
    test 4260 line 474 fb: 159.730881
    test 4261 line 474 lat2: -50.620232529081
    test 4262 line 474 lon2: 22.061010504617
    test 4263 line 474 azi2: 159.730880799186
    test 4264 line 474 lat2: -50.620232529081
    test 4265 line 474 lon2: 22.061010504617
    test 4266 line 474 azi2: 159.730880799186
    test 4267 line 475 lat: -11.354875
    test 4268 line 475 lon: 76.258812
    test 4269 line 475 fb: 104.014357
    test 4270 line 475 lat2: -11.354875472483
    test 4271 line 475 lon2: 76.258812283705
    test 4272 line 475 azi2: 104.014356938495
    test 4273 line 475 lat2: -11.354875472483
    test 4274 line 475 lon2: 76.258812283705
    test 4275 line 475 azi2: 104.014356938495
    test 4276 line 476 lat: -19.640051
    test 4277 line 476 lon: 105.698979
    test 4278 line 476 fb: 156.650619
    test 4279 line 476 lat2: -19.640050782646
    test 4280 line 476 lon2: 105.698978700604
    test 4281 line 476 azi2: 156.650619021389
    test 4282 line 476 lat2: -19.640050782646
    test 4283 line 476 lon2: 105.698978700604
    test 4284 line 476 azi2: 156.650619021389
    test 4285 line 477 lat: 83.855267
    test 4286 line 477 lon: 112.674858
    test 4287 line 477 fb: 122.383784
    test 4288 line 477 lat2: 83.855266840098
    test 4289 line 477 lon2: 112.674858066810
    test 4290 line 477 azi2: 122.383784147681
    test 4291 line 477 lat2: 83.855266840098
    test 4292 line 477 lon2: 112.674858066810
    test 4293 line 477 azi2: 122.383784147681
    test 4294 line 478 lat: 48.296558
    test 4295 line 478 lon: 34.072463
    test 4296 line 478 fb: 61.415867
    test 4297 line 478 lat2: 48.296557545891
    test 4298 line 478 lon2: 34.072462542900
    test 4299 line 478 azi2: 61.415867309157
    test 4300 line 478 lat2: 48.296557545891
    test 4301 line 478 lon2: 34.072462542900
    test 4302 line 478 azi2: 61.415867309157
    test 4303 line 479 lat: 20.173772
    test 4304 line 479 lon: 12.682422
    test 4305 line 479 fb: 165.220898
    test 4306 line 479 lat2: 20.173772376863
    test 4307 line 479 lon2: 12.682422408956
    test 4308 line 479 azi2: 165.220897942891
    test 4309 line 479 lat2: 20.173772376863
    test 4310 line 479 lon2: 12.682422408956
    test 4311 line 479 azi2: 165.220897942891
    test 4312 line 480 lat: 47.501521
    test 4313 line 480 lon: 54.338775
    test 4314 line 480 fb: 80.572388
    test 4315 line 480 lat2: 47.501521345953
    test 4316 line 480 lon2: 54.338775236773
    test 4317 line 480 azi2: 80.572387690286
    test 4318 line 480 lat2: 47.501521345953
    test 4319 line 480 lon2: 54.338775236773
    test 4320 line 480 azi2: 80.572387690286
    test 4321 line 481 lat: -34.023172
    test 4322 line 481 lon: 174.310259
    test 4323 line 481 fb: 123.138509
    test 4324 line 481 lat2: -34.023171607796
    test 4325 line 481 lon2: 174.310258612178
    test 4326 line 481 azi2: 123.138509441522
    test 4327 line 481 lat2: -34.023171607796
    test 4328 line 481 lon2: 174.310258612178
    test 4329 line 481 azi2: 123.138509441522
    test 4330 line 482 lat: -31.540913
    test 4331 line 482 lon: 52.441924
    test 4332 line 482 fb: 155.194513
    test 4333 line 482 lat2: -31.540912691186
    test 4334 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4335 line 482 azi2: 155.194512958367
    test 4336 line 482 lat2: -31.540912691186
    test 4337 line 482 lon2: 52.441923606881  FAILED, KNOWN, expected 52.441923606882
    test 4338 line 482 azi2: 155.194512958367
    test 4339 line 483 lat: 64.121649
    test 4340 line 483 lon: 21.295234
    test 4341 line 483 fb: 51.966943
    test 4342 line 483 lat2: 64.121648788158
    test 4343 line 483 lon2: 21.295234110583
    test 4344 line 483 azi2: 51.966943039534
    test 4345 line 483 lat2: 64.121648788158
    test 4346 line 483 lon2: 21.295234110583
    test 4347 line 483 azi2: 51.966943039534
    test 4348 line 484 lat: -4.599613
    test 4349 line 484 lon: 107.727091
    test 4350 line 484 fb: 109.270070
    test 4351 line 484 lat2: -4.599612537190
    test 4352 line 484 lon2: 107.727090701893
    test 4353 line 484 azi2: 109.270070124629
    test 4354 line 484 lat2: -4.599612537190
    test 4355 line 484 lon2: 107.727090701893
    test 4356 line 484 azi2: 109.270070124629
    test 4357 line 485 lat: -16.799515
    test 4358 line 485 lon: 43.675397
    test 4359 line 485 fb: 144.940350
    test 4360 line 485 lat2: -16.799514501718
    test 4361 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4362 line 485 azi2: 144.940350340820
    test 4363 line 485 lat2: -16.799514501718
    test 4364 line 485 lon2: 43.675397103786  FAILED, KNOWN, expected 43.675397103785
    test 4365 line 485 azi2: 144.940350340820
    test 4366 line 486 lat: -16.337411
    test 4367 line 486 lon: 13.110283
    test 4368 line 486 fb: 167.467077
    test 4369 line 486 lat2: -16.337410785184
    test 4370 line 486 lon2: 13.110282576579
    test 4371 line 486 azi2: 167.467077049713
    test 4372 line 486 lat2: -16.337410785184
    test 4373 line 486 lon2: 13.110282576579
    test 4374 line 486 azi2: 167.467077049713
    test 4375 line 487 lat: -26.145379
    test 4376 line 487 lon: 9.977868
    test 4377 line 487 fb: 171.929335
    test 4378 line 487 lat2: -26.145378737931
    test 4379 line 487 lon2: 9.977868070750
    test 4380 line 487 azi2: 171.929335050809
    test 4381 line 487 lat2: -26.145378737931
    test 4382 line 487 lon2: 9.977868070750
    test 4383 line 487 azi2: 171.929335050809
    test 4384 line 488 lat: -3.245748
    test 4385 line 488 lon: 71.931981
    test 4386 line 488 fb: 124.120047
    test 4387 line 488 lat2: -3.245748416402
    test 4388 line 488 lon2: 71.931980979620
    test 4389 line 488 azi2: 124.120046609527
    test 4390 line 488 lat2: -3.245748416402
    test 4391 line 488 lon2: 71.931980979620
    test 4392 line 488 azi2: 124.120046609527
    test 4393 line 489 lat: 72.975644
    test 4394 line 489 lon: 36.459313
    test 4395 line 489 fb: 49.411324
    test 4396 line 489 lat2: 72.975644407376
    test 4397 line 489 lon2: 36.459312843012
    test 4398 line 489 azi2: 49.411324496539
    test 4399 line 489 lat2: 72.975644407376
    test 4400 line 489 lon2: 36.459312843012
    test 4401 line 489 azi2: 49.411324496539
    test 4402 line 490 lat: 50.342418
    test 4403 line 490 lon: 35.445910
    test 4404 line 490 fb: 43.087650
    test 4405 line 490 lat2: 50.342417843481
    test 4406 line 490 lon2: 35.445910446930
    test 4407 line 490 azi2: 43.087650398316
    test 4408 line 490 lat2: 50.342417843481
    test 4409 line 490 lon2: 35.445910446930
    test 4410 line 490 azi2: 43.087650398316
    test 4411 line 491 lat: -22.878804
    test 4412 line 491 lon: 69.376306
    test 4413 line 491 fb: 102.211558
    test 4414 line 491 lat2: -22.878804028267
    test 4415 line 491 lon2: 69.376306288000
    test 4416 line 491 azi2: 102.211557813582
    test 4417 line 491 lat2: -22.878804028267
    test 4418 line 491 lon2: 69.376306288000
    test 4419 line 491 azi2: 102.211557813582
    test 4420 line 492 lat: 21.254912
    test 4421 line 492 lon: 21.899215
    test 4422 line 492 fb: 92.966926
    test 4423 line 492 lat2: 21.254912121078
    test 4424 line 492 lon2: 21.899214754868
    test 4425 line 492 azi2: 92.966926161390
    test 4426 line 492 lat2: 21.254912121078
    test 4427 line 492 lon2: 21.899214754868
    test 4428 line 492 azi2: 92.966926161390
    test 4429 line 493 lat: 26.486641
    test 4430 line 493 lon: 19.097603
    test 4431 line 493 fb: 158.053447
    test 4432 line 493 lat2: 26.486640906235
    test 4433 line 493 lon2: 19.097602913800
    test 4434 line 493 azi2: 158.053446850267
    test 4435 line 493 lat2: 26.486640906235
    test 4436 line 493 lon2: 19.097602913800
    test 4437 line 493 azi2: 158.053446850267
    test 4438 line 494 lat: 43.041538
    test 4439 line 494 lon: 114.186950
    test 4440 line 494 fb: 155.795323
    test 4441 line 494 lat2: 43.041538374784
    test 4442 line 494 lon2: 114.186949886941
    test 4443 line 494 azi2: 155.795322500736
    test 4444 line 494 lat2: 43.041538374784
    test 4445 line 494 lon2: 114.186949886941
    test 4446 line 494 azi2: 155.795322500736
    test 4447 line 495 lat: -10.570764
    test 4448 line 495 lon: 107.625834
    test 4449 line 495 fb: 98.142401
    test 4450 line 495 lat2: -10.570763915882
    test 4451 line 495 lon2: 107.625834147204
    test 4452 line 495 azi2: 98.142400502747
    test 4453 line 495 lat2: -10.570763915882
    test 4454 line 495 lon2: 107.625834147204
    test 4455 line 495 azi2: 98.142400502747
    test 4456 line 496 lat: 12.624313
    test 4457 line 496 lon: 139.841077
    test 4458 line 496 fb: 148.385662
    test 4459 line 496 lat2: 12.624313141297
    test 4460 line 496 lon2: 139.841076840613
    test 4461 line 496 azi2: 148.385661923898
    test 4462 line 496 lat2: 12.624313141297
    test 4463 line 496 lon2: 139.841076840613
    test 4464 line 496 azi2: 148.385661923898
    test 4465 line 497 lat: -25.169999
    test 4466 line 497 lon: 33.175749
    test 4467 line 497 fb: 169.905377
    test 4468 line 497 lat2: -25.169998746665
    test 4469 line 497 lon2: 33.175749310362
    test 4470 line 497 azi2: 169.905376778384
    test 4471 line 497 lat2: -25.169998746665
    test 4472 line 497 lon2: 33.175749310362
    test 4473 line 497 azi2: 169.905376778384
    test 4474 line 498 lat: -41.360282
    test 4475 line 498 lon: 147.341948
    test 4476 line 498 fb: 136.551910
    test 4477 line 498 lat2: -41.360281944908
    test 4478 line 498 lon2: 147.341948469937
    test 4479 line 498 azi2: 136.551910060918
    test 4480 line 498 lat2: -41.360281944908
    test 4481 line 498 lon2: 147.341948469937
    test 4482 line 498 azi2: 136.551910060918
    test 4483 line 499 lat: 39.182099
    test 4484 line 499 lon: 150.590705
    test 4485 line 499 fb: 165.522951
    test 4486 line 499 lat2: 39.182099298590
    test 4487 line 499 lon2: 150.590705311219
    test 4488 line 499 azi2: 165.522950851635
    test 4489 line 499 lat2: 39.182099298590
    test 4490 line 499 lon2: 150.590705311219
    test 4491 line 499 azi2: 165.522950851635
    test 4492 line 500 lat: -57.494441
    test 4493 line 500 lon: 113.054057
    test 4494 line 500 fb: 130.988277
    test 4495 line 500 lat2: -57.494440629886
    test 4496 line 500 lon2: 113.054056725195
    test 4497 line 500 azi2: 130.988276746436
    test 4498 line 500 lat2: -57.494440629886
    test 4499 line 500 lon2: 113.054056725195
    test 4500 line 500 azi2: 130.988276746436
    test 4501 WGS84.KsOrder: 8

    45 of 4501 testEllipsoidalGeodTest.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 2.966 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEllipsoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EcefKarney from .ecef by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoid2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f_ from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2f2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_b2n from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.a_f2Tuple from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.b_f_2a from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.circle4 from .utily by testEllipsoids.py line 11
# lazily imported pygeodesy.e2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.f_2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.fstr from .streprs by testEllipsoids.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testEllipsoids.py line 11
# lazily imported pygeodesy.n2e2 from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.n2f from .ellipsoids by testEllipsoids.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.R_M from .constants by testEllipsoids.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testEllipsoids.py line 11

    testing testEllipsoids.py 23.03.27 (module pygeodesy.ellipsoids 23.04.11) isLazy=3
    test 1 ellipsoid: True
    test 2 TestEllipsoid: name='TestEllipsoid', a=1000, b=1000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=1000, L=1570.79632679, R1=1000, R2=1000, R3=1000, Rbiaxial=1000, Rtriaxial=1000

    testWGS84(pygeodesy.ellipsoids, 23.04.11)
    test 3 R1: 6371008.7714
    test 4 R2: 6371007.2
    test 5 R3: 6371000.8
    test 6 A: 6367449.1
    test 7 L: 10001965.7
    test 8 Rrectifying: 6367449.1
    test 9 Rgeometric: 6367435.7
    test 10 Rgeocentric: 6378137.000
    test 11 Rgeocentric: 6367489.544
    test 12 Rgeocentric: 6356752.314
    test 13 Rlat: 6378137.000
    test 14 Rlat: 6367444.657
    test 15 Rlat: 6356752.314
    test 16 circle4.radius: 6378137.000
    test 17 circle4.radius: 4517590.879
    test 18 circle4.radius: 0.000
    test 19 distance2: 156903.472, 45.192
    test 20 distance2: 1569034.719, 45.192
    test 21 distance2: 1400742.676, 37.563
    test 22 distance2: 1179164.848, 18.896
    test 23 roc2: 6335439.327, 6378137.0
    test 24 roc2: 6367381.816, 6388838.29
    test 25 roc2: 6399593.626, 6399593.626
    test 26 rocBearing: 6335439.327
    test 27 rocBearing: 6378092.008
    test 28 rocBearing: 6399593.626
    test 29 rocGauss: 6356752.314
    test 30 rocGauss: 6378101.030
    test 31 rocGauss: 6399593.626
    test 32 rocMean: 6356716.465
    test 33 rocMean: 6378092.008
    test 34 rocMean: 6399593.626
    test 35 rocMeridional: 6335439.327
    test 36 rocMeridional: 6367381.816
    test 37 rocMeridional: 6399593.626
    test 38 rocPrimeVertical: 6378137.0
    test 39 rocPrimeVertical: 6388838.29
    test 40 rocPrimeVertical: 6399593.626

    testGRS80(pygeodesy.ellipsoids, 23.04.11)
    test 41 R1: 6371008.7714
    test 42 R2: 6371007.2
    test 43 R3: 6371000.8
    test 44 A: 6367449.1
    test 45 L: 10001965.7
    test 46 Rrectifying: 6367449.1
    test 47 Rgeometric: 6367435.7
    test 48 Rgeocentric: 6378137.000
    test 49 Rgeocentric: 6367489.544
    test 50 Rgeocentric: 6356752.314
    test 51 Rlat: 6378137.000
    test 52 Rlat: 6367444.657
    test 53 Rlat: 6356752.314
    test 54 circle4.radius: 6378137.000
    test 55 circle4.radius: 4517590.879
    test 56 circle4.radius: 0.000
    test 57 distance2: 156903.472, 45.192
    test 58 distance2: 1569034.719, 45.192
    test 59 distance2: 1400742.676, 37.563
    test 60 distance2: 1179164.848, 18.896
    test 61 roc2: 6335439.327, 6378137.0
    test 62 roc2: 6367381.816, 6388838.29
    test 63 roc2: 6399593.626, 6399593.626
    test 64 rocBearing: 6335439.327
    test 65 rocBearing: 6378092.008
    test 66 rocBearing: 6399593.626
    test 67 rocGauss: 6356752.314
    test 68 rocGauss: 6378101.030
    test 69 rocGauss: 6399593.626
    test 70 rocMean: 6356716.465
    test 71 rocMean: 6378092.008
    test 72 rocMean: 6399593.626
    test 73 rocMeridional: 6335439.327
    test 74 rocMeridional: 6367381.816
    test 75 rocMeridional: 6399593.626
    test 76 rocPrimeVertical: 6378137.0
    test 77 rocPrimeVertical: 6388838.29
    test 78 rocPrimeVertical: 6399593.626

    test<function Ellipsoid.__init__ at 0x107280160>(pygeodesy.ellipsoids, 23.04.11)
    test 79 a, b, None: 2.0
    test 80 a, None, f_: 500.0

    testWGS84(pygeodesy.ellipsoids, 23.04.11)
    test 81 WGS84.copy: True
    test 82 WGS84.copy: True
    test 83 WGS84.find: None
    test 84 WGS84.a2_b: 6399593.625758
    test 85 WGS84.b2_a: 6335439.327293
    test 86 WGS84.R2: 6371007.180918
    test 87 WGS84.c2: 40589732499315
    test 88 WGS84.es: 0.081819
    test 89 WGS84.f2: 0.003364
    test 90 WGS84.m2degrees: 90
    test 91 WGS84.degrees2m: 10018754
    test 92 WGS84.area: 5.101e+14
    test 93 WGS84.volume: 1.083e+21
    test 94 WGS84.ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 95 WGS84.ecef: WGS84
    test 96 WGS84: name='WGS84', a=6378137, b=6356752.3142451793, f_=298.257223563, f=0.0033528107, f2=0.0033640898, n=0.0016792204, e=0.0818191908, e2=0.00669438, e22=0.0067394967, e32=0.0033584313, A=6367449.1458234144, L=10001965.7293127216, R1=6371008.7714150595, R2=6371007.1809184738, R3=6371000.7900091587, Rbiaxial=6367453.6345163295, Rtriaxial=6372797.5559594007
    test 97 WGS84.: A=6367449.1458234144, e=0.0818191908, f_=298.2572235630, n=0.0016792204 (1.5612511284e-17)

    testKruegers(pygeodesy.ellipsoids, 23.04.11)
    test 98 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503242e-09, 2.429170680397e-12, 5.711818370428e-15, 1.47999793138e-17, 4.107624109371e-20, 1.210785038923e-22
    test 99 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665344e-10, 2.164798110491e-13, 3.787930968626e-16, 7.236769021816e-19, 1.493479824778e-21, 3.259522545838e-24
    test 100 WGS84.AlphaKs: 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17
    test 101 WGS84.BetaKs : 8.377321640579e-04, 5.90587015222e-08, 1.673482665284e-10, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19
    test 102 WGS84.AlphaKs: 8.377318206304e-04, 7.608527714249e-07, 1.197638001561e-09, 2.443376194522e-12
    test 103 WGS84.BetaKs : 8.377321640601e-04, 5.905869567934e-08, 1.673488880355e-10, 2.167737763022e-13

    testProlate(pygeodesy.ellipsoids, 23.04.11)
    test 104 a [Radius_]: 6356752.314
    test 105 b [Radius_]: 6378137.000
    test 106 n [Float]: -0.002
    test 107 R1 [Radius]: 6363880.543
    test 108 R2 [Radius]: 6363878.941
    test 109 R3 [Radius]: 6363872.564
    test 110 Rbiaxial [Radius]: 6367453.635
    test 111 Rgeometric [Radius]: 6367435.680
    test 112 c2 [Meter2]: 40498955180263.188
    test 113 area [Meter2]: 508924880289508.500
    test 114 volume [Meter3]: 1079575530747445379072.000

    testAuxiliaryLats WGS84(pygeodesy.ellipsoids, 23.04.11)
    test 115 isEllipsoidal: True
    test 116 isOblate: True
    test 117 isProlate: False
    test 118 isSpherical: False
    test 119 auxAuthalic(-90): -90.0
    test 120 name: auxAuthalic
    test 121 inverse: lat (-90.0)
    test 122 auxConformal(-90): -90.0
    test 123 name: auxConformal
    test 124 inverse: lat (-90.0)
    test 125 auxGeocentric(-90): -90.0
    test 126 name: auxGeocentric
    test 127 inverse: lat (-90.0)
    test 128 auxIsometric(-90): -2178.287790219
    test 129 name: auxIsometric
    test 130 inverse: lat (-90.0)
    test 131 auxParametric(-90): -90.0
    test 132 name: auxParametric
    test 133 inverse: lat (-90.0)
    test 134 auxRectifying(-90): -90.0
    test 135 name: auxRectifying
    test 136 inverse: lat (-90.0)
    test 137 auxAuthalic(-60): -59.88878557
    test 138 name: auxAuthalic
    test 139 inverse: lat (-60.0)
    test 140 auxConformal(-60): -59.833216158
    test 141 name: auxConformal
    test 142 inverse: lat (-60.0)
    test 143 auxGeocentric(-60): -59.83307615
    test 144 name: auxGeocentric
    test 145 inverse: lat (-60.0)
    test 146 auxIsometric(-60): -75.123399226
    test 147 name: auxIsometric
    test 148 inverse: lat (-60.0)
    test 149 auxParametric(-60): -59.916607797
    test 150 name: auxParametric
    test 151 inverse: lat (-60.0)
    test 152 auxRectifying(-60): -59.874885594
    test 153 name: auxRectifying
    test 154 inverse: lat (-60.0)
    test 155 auxAuthalic(-30): -29.888997034
    test 156 name: auxAuthalic
    test 157 inverse: lat (-30.0)
    test 158 auxConformal(-30): -29.833682042
    test 159 name: auxConformal
    test 160 inverse: lat (-30.0)
    test 161 auxGeocentric(-30): -29.83363581
    test 162 name: auxGeocentric
    test 163 inverse: lat (-30.0)
    test 164 auxIsometric(-30): -31.281036776
    test 165 name: auxIsometric
    test 166 inverse: lat (-30.0)
    test 167 auxParametric(-30): -29.916747713
    test 168 name: auxParametric
    test 169 inverse: lat (-30.0)
    test 170 auxRectifying(-30): -29.875147936
    test 171 name: auxRectifying
    test 172 inverse: lat (-30.0)
    test 173 auxAuthalic(0): 0.0
    test 174 name: auxAuthalic
    test 175 inverse: lat (0.0)
    test 176 auxConformal(0): 0.0
    test 177 name: auxConformal
    test 178 inverse: lat (0.0)
    test 179 auxGeocentric(0): 0.0
    test 180 name: auxGeocentric
    test 181 inverse: lat (0.0)
    test 182 auxIsometric(0): 0.0
    test 183 name: auxIsometric
    test 184 inverse: lat (0.0)
    test 185 auxParametric(0): 0.0
    test 186 name: auxParametric
    test 187 inverse: lat (0.0)
    test 188 auxRectifying(0): 0.0
    test 189 name: auxRectifying
    test 190 inverse: lat (0.0)
    test 191 auxAuthalic(30): 29.888997034
    test 192 name: auxAuthalic
    test 193 inverse: lat (30.0)
    test 194 auxConformal(30): 29.833682042
    test 195 name: auxConformal
    test 196 inverse: lat (30.0)
    test 197 auxGeocentric(30): 29.83363581
    test 198 name: auxGeocentric
    test 199 inverse: lat (30.0)
    test 200 auxIsometric(30): 31.281036776
    test 201 name: auxIsometric
    test 202 inverse: lat (30.0)
    test 203 auxParametric(30): 29.916747713
    test 204 name: auxParametric
    test 205 inverse: lat (30.0)
    test 206 auxRectifying(30): 29.875147936
    test 207 name: auxRectifying
    test 208 inverse: lat (30.0)
    test 209 auxAuthalic(60): 59.88878557
    test 210 name: auxAuthalic
    test 211 inverse: lat (60.0)
    test 212 auxConformal(60): 59.833216158
    test 213 name: auxConformal
    test 214 inverse: lat (60.0)
    test 215 auxGeocentric(60): 59.83307615
    test 216 name: auxGeocentric
    test 217 inverse: lat (60.0)
    test 218 auxIsometric(60): 75.123399226
    test 219 name: auxIsometric
    test 220 inverse: lat (60.0)
    test 221 auxParametric(60): 59.916607797
    test 222 name: auxParametric
    test 223 inverse: lat (60.0)
    test 224 auxRectifying(60): 59.874885594
    test 225 name: auxRectifying
    test 226 inverse: lat (60.0)
    test 227 auxAuthalic(90): 90.0
    test 228 name: auxAuthalic
    test 229 inverse: lat (90.0)
    test 230 auxConformal(90): 90.0
    test 231 name: auxConformal
    test 232 inverse: lat (90.0)
    test 233 auxGeocentric(90): 90.0
    test 234 name: auxGeocentric
    test 235 inverse: lat (90.0)
    test 236 auxIsometric(90): 2178.287790219
    test 237 name: auxIsometric
    test 238 inverse: lat (90.0)
    test 239 auxParametric(90): 90.0
    test 240 name: auxParametric
    test 241 inverse: lat (90.0)
    test 242 auxRectifying(90): 90.0
    test 243 name: auxRectifying
    test 244 inverse: lat (90.0)

    testAuxiliaryLats Prolate(pygeodesy.ellipsoids, 23.04.11)
    test 245 isEllipsoidal: True
    test 246 isOblate: False
    test 247 isProlate: True
    test 248 isSpherical: False
    test 249 auxAuthalic(-90): -90.0
    test 250 name: auxAuthalic
    test 251 inverse: lat (-90.0)
    test 252 auxConformal(-90): -90.0
    test 253 name: auxConformal
    test 254 inverse: lat (-90.0)
    test 255 auxGeocentric(-90): -90.0
    test 256 name: auxGeocentric
    test 257 inverse: lat (-90.0)
    test 258 auxIsometric(-90): -2179.057490028
    test 259 name: auxIsometric
    test 260 inverse: lat (-90.0)
    test 261 auxParametric(-90): -90.0
    test 262 name: auxParametric
    test 263 inverse: lat (-90.0)
    test 264 auxRectifying(-90): -90.0
    test 265 name: auxRectifying
    test 266 inverse: lat (-90.0)
    test 267 auxAuthalic(-60): -60.110978127
    test 268 name: auxAuthalic
    test 269 inverse: lat (-60.0)
    test 270 auxConformal(-60): -60.16650401
    test 271 name: auxConformal
    test 272 inverse: lat (-60.0)
    test 273 auxGeocentric(-60): -60.16636419
    test 274 name: auxGeocentric
    test 275 inverse: lat (-60.0)
    test 276 auxIsometric(-60): -75.789978689
    test 277 name: auxIsometric
    test 278 inverse: lat (-60.0)
    test 279 auxParametric(-60): -60.083252287
    test 280 name: auxParametric
    test 281 inverse: lat (-60.0)
    test 282 auxRectifying(-60): -60.041947439
    test 283 name: auxRectifying
    test 284 inverse: lat (-60.0)
    test 285 auxAuthalic(-30): -30.11118952
    test 286 name: auxAuthalic
    test 287 inverse: lat (-30.0)
    test 288 auxConformal(-30): -30.166970897
    test 289 name: auxConformal
    test 290 inverse: lat (-30.0)
    test 291 auxGeocentric(-30): -30.16692385
    test 292 name: auxGeocentric
    test 293 inverse: lat (-30.0)
    test 294 auxIsometric(-30): -31.665887766
    test 295 name: auxIsometric
    test 296 inverse: lat (-30.0)
    test 297 auxParametric(-30): -30.083392203
    test 298 name: auxParametric
    test 299 inverse: lat (-30.0)
    test 300 auxRectifying(-30): -30.041931117
    test 301 name: auxRectifying
    test 302 inverse: lat (-30.0)
    test 303 auxAuthalic(0): 0.0
    test 304 name: auxAuthalic
    test 305 inverse: lat (0.0)
    test 306 auxConformal(0): 0.0
    test 307 name: auxConformal
    test 308 inverse: lat (0.0)
    test 309 auxGeocentric(0): 0.0
    test 310 name: auxGeocentric
    test 311 inverse: lat (0.0)
    test 312 auxIsometric(0): 0.0
    test 313 name: auxIsometric
    test 314 inverse: lat (0.0)
    test 315 auxParametric(0): 0.0
    test 316 name: auxParametric
    test 317 inverse: lat (0.0)
    test 318 auxRectifying(0): 0.0
    test 319 name: auxRectifying
    test 320 inverse: lat (0.0)
    test 321 auxAuthalic(30): 30.11118952
    test 322 name: auxAuthalic
    test 323 inverse: lat (30.0)
    test 324 auxConformal(30): 30.166970897
    test 325 name: auxConformal
    test 326 inverse: lat (30.0)
    test 327 auxGeocentric(30): 30.16692385
    test 328 name: auxGeocentric
    test 329 inverse: lat (30.0)
    test 330 auxIsometric(30): 31.665887766
    test 331 name: auxIsometric
    test 332 inverse: lat (30.0)
    test 333 auxParametric(30): 30.083392203
    test 334 name: auxParametric
    test 335 inverse: lat (30.0)
    test 336 auxRectifying(30): 30.041931117
    test 337 name: auxRectifying
    test 338 inverse: lat (30.0)
    test 339 auxAuthalic(60): 60.110978127
    test 340 name: auxAuthalic
    test 341 inverse: lat (60.0)
    test 342 auxConformal(60): 60.16650401
    test 343 name: auxConformal
    test 344 inverse: lat (60.0)
    test 345 auxGeocentric(60): 60.16636419
    test 346 name: auxGeocentric
    test 347 inverse: lat (60.0)
    test 348 auxIsometric(60): 75.789978689
    test 349 name: auxIsometric
    test 350 inverse: lat (60.0)
    test 351 auxParametric(60): 60.083252287
    test 352 name: auxParametric
    test 353 inverse: lat (60.0)
    test 354 auxRectifying(60): 60.041947439
    test 355 name: auxRectifying
    test 356 inverse: lat (60.0)
    test 357 auxAuthalic(90): 90.0
    test 358 name: auxAuthalic
    test 359 inverse: lat (90.0)
    test 360 auxConformal(90): 90.0
    test 361 name: auxConformal
    test 362 inverse: lat (90.0)
    test 363 auxGeocentric(90): 90.0
    test 364 name: auxGeocentric
    test 365 inverse: lat (90.0)
    test 366 auxIsometric(90): 2179.057490028
    test 367 name: auxIsometric
    test 368 inverse: lat (90.0)
    test 369 auxParametric(90): 90.0
    test 370 name: auxParametric
    test 371 inverse: lat (90.0)
    test 372 auxRectifying(90): 90.0
    test 373 name: auxRectifying
    test 374 inverse: lat (90.0)

    testAuxiliaryLats Sphere(pygeodesy.ellipsoids, 23.04.11)
    test 375 isEllipsoidal: False
    test 376 isOblate: False
    test 377 isProlate: False
    test 378 isSpherical: True
    test 379 auxAuthalic(-90): -90.0
    test 380 name: auxAuthalic
    test 381 inverse: lat (-90.0)
    test 382 auxConformal(-90): -90.0
    test 383 name: auxConformal
    test 384 inverse: lat (-90.0)
    test 385 auxGeocentric(-90): -90.0
    test 386 name: auxGeocentric
    test 387 inverse: lat (-90.0)
    test 388 auxIsometric(-90): -90.0
    test 389 name: auxIsometric
    test 390 inverse: lat (-90.0)
    test 391 auxParametric(-90): -90.0
    test 392 name: auxParametric
    test 393 inverse: lat (-90.0)
    test 394 auxRectifying(-90): -90.0
    test 395 name: auxRectifying
    test 396 inverse: lat (-90.0)
    test 397 auxAuthalic(-60): -60.0
    test 398 name: auxAuthalic
    test 399 inverse: lat (-60.0)
    test 400 auxConformal(-60): -60.0
    test 401 name: auxConformal
    test 402 inverse: lat (-60.0)
    test 403 auxGeocentric(-60): -60.0
    test 404 name: auxGeocentric
    test 405 inverse: lat (-60.0)
    test 406 auxIsometric(-60): -60.0
    test 407 name: auxIsometric
    test 408 inverse: lat (-60.0)
    test 409 auxParametric(-60): -60.0
    test 410 name: auxParametric
    test 411 inverse: lat (-60.0)
    test 412 auxRectifying(-60): -60.0
    test 413 name: auxRectifying
    test 414 inverse: lat (-60.0)
    test 415 auxAuthalic(-30): -30.0
    test 416 name: auxAuthalic
    test 417 inverse: lat (-30.0)
    test 418 auxConformal(-30): -30.0
    test 419 name: auxConformal
    test 420 inverse: lat (-30.0)
    test 421 auxGeocentric(-30): -30.0
    test 422 name: auxGeocentric
    test 423 inverse: lat (-30.0)
    test 424 auxIsometric(-30): -30.0
    test 425 name: auxIsometric
    test 426 inverse: lat (-30.0)
    test 427 auxParametric(-30): -30.0
    test 428 name: auxParametric
    test 429 inverse: lat (-30.0)
    test 430 auxRectifying(-30): -30.0
    test 431 name: auxRectifying
    test 432 inverse: lat (-30.0)
    test 433 auxAuthalic(0): 0.0
    test 434 name: auxAuthalic
    test 435 inverse: lat (0.0)
    test 436 auxConformal(0): 0.0
    test 437 name: auxConformal
    test 438 inverse: lat (0.0)
    test 439 auxGeocentric(0): 0.0
    test 440 name: auxGeocentric
    test 441 inverse: lat (0.0)
    test 442 auxIsometric(0): 0.0
    test 443 name: auxIsometric
    test 444 inverse: lat (0.0)
    test 445 auxParametric(0): 0.0
    test 446 name: auxParametric
    test 447 inverse: lat (0.0)
    test 448 auxRectifying(0): 0.0
    test 449 name: auxRectifying
    test 450 inverse: lat (0.0)
    test 451 auxAuthalic(30): 30.0
    test 452 name: auxAuthalic
    test 453 inverse: lat (30.0)
    test 454 auxConformal(30): 30.0
    test 455 name: auxConformal
    test 456 inverse: lat (30.0)
    test 457 auxGeocentric(30): 30.0
    test 458 name: auxGeocentric
    test 459 inverse: lat (30.0)
    test 460 auxIsometric(30): 30.0
    test 461 name: auxIsometric
    test 462 inverse: lat (30.0)
    test 463 auxParametric(30): 30.0
    test 464 name: auxParametric
    test 465 inverse: lat (30.0)
    test 466 auxRectifying(30): 30.0
    test 467 name: auxRectifying
    test 468 inverse: lat (30.0)
    test 469 auxAuthalic(60): 60.0
    test 470 name: auxAuthalic
    test 471 inverse: lat (60.0)
    test 472 auxConformal(60): 60.0
    test 473 name: auxConformal
    test 474 inverse: lat (60.0)
    test 475 auxGeocentric(60): 60.0
    test 476 name: auxGeocentric
    test 477 inverse: lat (60.0)
    test 478 auxIsometric(60): 60.0
    test 479 name: auxIsometric
    test 480 inverse: lat (60.0)
    test 481 auxParametric(60): 60.0
    test 482 name: auxParametric
    test 483 inverse: lat (60.0)
    test 484 auxRectifying(60): 60.0
    test 485 name: auxRectifying
    test 486 inverse: lat (60.0)
    test 487 auxAuthalic(90): 90.0
    test 488 name: auxAuthalic
    test 489 inverse: lat (90.0)
    test 490 auxConformal(90): 90.0
    test 491 name: auxConformal
    test 492 inverse: lat (90.0)
    test 493 auxGeocentric(90): 90.0
    test 494 name: auxGeocentric
    test 495 inverse: lat (90.0)
    test 496 auxIsometric(90): 90.0
    test 497 name: auxIsometric
    test 498 inverse: lat (90.0)
    test 499 auxParametric(90): 90.0
    test 500 name: auxParametric
    test 501 inverse: lat (90.0)
    test 502 auxRectifying(90): 90.0
    test 503 name: auxRectifying
    test 504 inverse: lat (90.0)

    testFlattenings(pygeodesy.ellipsoids, 23.04.11)
    test 505 _TOL: 1.4901161193847657e-09

    test 506 Airy1830.f_ - 1 / .f: 0.0
    test 507 Airy1830.f - 1 / .f_: 0.0

    test 508 AiryModified.f_ - 1 / .f: 0.0
    test 509 AiryModified.f - 1 / .f_: 0.0

    test 510 ATS1977.f_ - 1 / .f: 0.0
    test 511 ATS1977.f - 1 / .f_: 0.0

    test 512 Australia1966.f_ - 1 / .f: 0.0
    test 513 Australia1966.f - 1 / .f_: 0.0

    test 514 Bessel1841.f_ - 1 / .f: -3.6334313335828483e-10
    test 515 Bessel1841.f - 1 / .f_: -4.060120295523717e-15

    test 516 BesselModified.f_ - 1 / .f: 0.0
    test 517 BesselModified.f - 1 / .f_: 0.0

    test 518 CGCS2000.f_ - 1 / .f: 0.0
    test 519 CGCS2000.f - 1 / .f_: 0.0

    test 520 Clarke1866.f_ - 1 / .f: 1.0180656317970715e-10
    test 521 Clarke1866.f - 1 / .f_: 1.1700709845463564e-15

    test 522 Clarke1880.f_ - 1 / .f: -6.275513442233205e-11
    test 523 Clarke1880.f - 1 / .f_: -7.28583859910259e-16

    test 524 Clarke1880IGN.f_ - 1 / .f: 3.73063357983483e-10
    test 525 Clarke1880IGN.f - 1 / .f_: 4.3320382003830815e-15

    test 526 Clarke1880Mod.f_ - 1 / .f: 6.866684998385608e-11
    test 527 Clarke1880Mod.f - 1 / .f_: 7.971054372113429e-16

    test 528 CPM1799.f_ - 1 / .f: -4.774847184307873e-11
    test 529 CPM1799.f - 1 / .f_: -4.2674197509029455e-16

    test 530 Delambre1810.f_ - 1 / .f: 6.008349373587407e-11
    test 531 Delambre1810.f - 1 / .f_: 6.192962809237201e-16

    test 532 Engelis1985.f_ - 1 / .f: 3.171862772433087e-11
    test 533 Engelis1985.f - 1 / .f_: 3.5691935518222806e-16

    test 534 Everest1969.f_ - 1 / .f: -1.0334133548894897e-10
    test 535 Everest1969.f - 1 / .f_: -1.1418817280617333e-15

    test 536 Everest1975.f_ - 1 / .f: 2.1088908397359774e-11
    test 537 Everest1975.f - 1 / .f_: 2.3288662664988635e-16

    test 538 Fisher1968.f_ - 1 / .f: 6.394884621840902e-11
    test 539 Fisher1968.f - 1 / .f_: 7.186091999233923e-16

    test 540 GEM10C.f_ - 1 / .f: 3.501554601825774e-11
    test 541 GEM10C.f - 1 / .f_: 3.937822290467352e-16

    test 542 GRS67.f_ - 1 / .f: 0.0
    test 543 GRS67.f - 1 / .f_: 0.0

    test 544 GRS80.f_ - 1 / .f: 1.2579448593896814e-10
    test 545 GRS80.f - 1 / .f_: 1.4137996329210978e-15

    test 546 Helmert1906.f_ - 1 / .f: 1.944044925039634e-11
    test 547 Helmert1906.f - 1 / .f_: 2.185751579730777e-16

    test 548 IAU76.f_ - 1 / .f: 0.0
    test 549 IAU76.f - 1 / .f_: 0.0

    test 550 IERS1989.f_ - 1 / .f: 0.0
    test 551 IERS1989.f - 1 / .f_: 0.0

    test 552 IERS1992TOPEX.f_ - 1 / .f: -4.746425474877469e-11
    test 553 IERS1992TOPEX.f - 1 / .f_: -5.334274688628682e-16

    test 554 IERS2003.f_ - 1 / .f: -3.6777692002942786e-11
    test 555 IERS2003.f - 1 / .f_: -4.137315490204685e-16

    test 556 Intl1924.f_ - 1 / .f: 0.0
    test 557 Intl1924.f - 1 / .f_: 0.0

    test 558 Intl1967.f_ - 1 / .f: -1.3528733688872308e-11
    test 559 Intl1967.f - 1 / .f_: -1.5222198501696482e-16

    test 560 Krassovski1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 561 Krassovski1940.f - 1 / .f_: -4.358492733391728e-16

    test 562 Krassowsky1940.f_ - 1 / .f: -3.8767211663071066e-11
    test 563 Krassowsky1940.f - 1 / .f_: -4.358492733391728e-16

    test 564 Maupertuis1738.f_ - 1 / .f: 1.5347723092418164e-11
    test 565 Maupertuis1738.f - 1 / .f_: 4.206704429243757e-16

    test 566 Mercury1960.f_ - 1 / .f: -4.803268893738277e-11
    test 567 Mercury1960.f - 1 / .f_: -5.39499001028787e-16

    test 568 Mercury1968Mod.f_ - 1 / .f: 6.394884621840902e-11
    test 569 Mercury1968Mod.f - 1 / .f_: 7.186091999233923e-16

    test 570 NWL1965.f_ - 1 / .f: 5.32054400537163e-11
    test 571 NWL1965.f - 1 / .f_: 5.980459183430042e-16

    test 572 OSU86F.f_ - 1 / .f: 1.460875864722766e-11
    test 573 OSU86F.f - 1 / .f_: 1.6436504934880247e-16

    test 574 OSU91A.f_ - 1 / .f: -2.2737367544323206e-12
    test 575 OSU91A.f - 1 / .f_: -2.5587171270657905e-17

    test 576 Plessis1817.f_ - 1 / .f: 4.2234660213580355e-11
    test 577 Plessis1817.f - 1 / .f_: 4.432218481120742e-16

    test 578 Prolate.f_ - 1 / .f: 0.0
    test 579 Prolate.f - 1 / .f_: 0.0

    test 580 PZ90.f_ - 1 / .f: 0.0
    test 581 PZ90.f - 1 / .f_: 0.0

    test 582 SGS85.f_ - 1 / .f: 1.659827830735594e-11
    test 583 SGS85.f - 1 / .f_: 1.8691645453650096e-16

    test 584 SoAmerican1969.f_ - 1 / .f: -5.6843418860808015e-11
    test 585 SoAmerican1969.f - 1 / .f_: -6.388119200284592e-16

    test 586 Struve1860.f_ - 1 / .f: 1.9042545318370685e-11
    test 587 Struve1860.f - 1 / .f_: 2.194425197110661e-16

    test 588 WGS60.f_ - 1 / .f: -5.076117304270156e-11
    test 589 WGS60.f - 1 / .f_: -5.702903427273753e-16

    test 590 WGS66.f_ - 1 / .f: 5.32054400537163e-11
    test 591 WGS66.f - 1 / .f_: 5.980459183430042e-16

    test 592 WGS72.f_ - 1 / .f: 0.0
    test 593 WGS72.f - 1 / .f_: 0.0

    test 594 WGS84.f_ - 1 / .f: 0.0
    test 595 WGS84.f - 1 / .f_: 0.0

    testEllipsoid2(pygeodesy.ellipsoids, 23.04.11)
    test 596 _2_Airy1830: a=6377563.396, b=6356256.9092373, f_=299.3249646, f=0.0033409, f2=0.003352, n=0.0016732, e=0.0816734, e2=0.0066705, e22=0.0067153, e32=0.0033464, A=6366914.6089252, L=10001126.0807165, R1=6370461.2337458, R2=6370459.6547081, R3=6370453.3099457, Rbiaxial=6366919.065224, Rtriaxial=6372243.4531769
    test 597 _2_AiryModified: a=6377340.189, b=6356034.4479385, f_=299.3249646, f=0.0033409, f2=0.003352, n=0.0016732, e=0.0816734, e2=0.0066705, e22=0.0067153, e32=0.0033464, A=6366691.7746199, L=10000776.0534082, R1=6370238.2753128, R2=6370236.6963304, R3=6370230.3517901, Rbiaxial=6366696.2307627, Rtriaxial=6372020.4323685
    test 598 _2_ATS1977: a=6378135, b=6356750.3049216, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367447.1411669, L=10001962.5804057, R1=6371006.7683072, R2=6371005.1778087, R3=6370998.7868918, Rbiaxial=6367451.6298652, Rtriaxial=6372795.5536365
    test 599 _2_Australia1966: a=6378160, b=6356774.7191953, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367471.8485323, L=10002001.3906444, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.5912434, Rbiaxial=6367476.337459, Rtriaxial=6372820.4075472
    test 600 _2_Bessel1841: a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.0033428, f2=0.003354, n=0.0016742, e=0.0816968, e2=0.0066744, e22=0.0067192, e32=0.0033484, A=6366742.5202339, L=10000855.7644324, R1=6370291.0909393, R2=6370289.5101266, R3=6370283.1582152, Rbiaxial=6366746.9815511, Rtriaxial=6372074.2933401
    test 601 _2_BesselModified: a=6377492.018, b=6356173.5087127, f_=299.1528128, f=0.0033428, f2=0.003354, n=0.0016742, e=0.0816968, e2=0.0066744, e22=0.0067192, e32=0.0033484, A=6366837.2247477, L=10001004.5259346, R1=6370385.8482376, R2=6370384.2674013, R3=6370377.9153955, Rbiaxial=6366841.6861312, Rtriaxial=6372169.0771633
    test 602 _2_CGCS2000: a=6378137, b=6356752.3141404, f_=298.2572221, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.145771, L=10001965.7292305, R1=6371008.7713801, R2=6371007.1808835, R3=6371000.7899741, Rbiaxial=6367453.634464, Rtriaxial=6372797.5559333
    test 603 _2_Clarke1866: a=6378206.4, b=6356583.8, f_=294.9786982, f=0.0033901, f2=0.0034016, n=0.0016979, e=0.0822719, e2=0.0067687, e22=0.0068148, e32=0.0033958, A=6367399.6891698, L=10001888.0429829, R1=6370998.8666667, R2=6370997.240633, R3=6370990.7065988, Rbiaxial=6367404.2783313, Rtriaxial=6372807.6279107
    test 604 _2_Clarke1880: a=6378249.145, b=6356514.8695498, f_=293.465, f=0.0034076, f2=0.0034192, n=0.0017067, e=0.0824834, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.6439805, L=10001867.5516475, R1=6371004.3865166, R2=6371002.7436696, R3=6370996.1419165, Rbiaxial=6367391.2806777, Rtriaxial=6372822.5252608
    test 605 _2_Clarke1880IGN: a=6378249.2, b=6356515, f_=293.4660213, f=0.0034075, f2=0.0034192, n=0.0017067, e=0.0824833, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.7366734, L=10001867.6972491, R1=6371004.4666667, R2=6371002.8238311, R3=6370996.2221239, Rbiaxial=6367391.3733383, Rtriaxial=6372822.5990751
    test 606 _2_Clarke1880Mod: a=6378249.145, b=6356514.9663955, f_=293.4663077, f=0.0034075, f2=0.0034192, n=0.0017067, e=0.0824832, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.692362, L=10001867.627645, R1=6371004.4187985, R2=6371002.7759662, R3=6370996.174272, Rbiaxial=6367391.3290178, Rtriaxial=6372822.5494103
    test 607 _2_CPM1799: a=6375738.7, b=6356671.9255749, f_=334.39, f=0.0029905, f2=0.0029995, n=0.0014975, e=0.0772793, e2=0.0059721, e22=0.006008, e32=0.002995, A=6366208.8818478, L=10000017.5272156, R1=6369383.108525, R2=6369381.8434158, R3=6369376.7624702, Rbiaxial=6366212.4509032, Rtriaxial=6370977.3559758
    test 608 _2_Delambre1810: a=6376428, b=6355957.9261637, f_=311.5, f=0.0032103, f2=0.0032206, n=0.0016077, e=0.080064, e2=0.0064102, e22=0.0064516, e32=0.0032154, A=6366197.0768433, L=9999998.9839579, R1=6369604.6420546, R2=6369603.1841975, R3=6369597.3273907, Rbiaxial=6366201.1905982, Rtriaxial=6371316.6472228
    test 609 _2_Engelis1985: a=6378136.05, b=6356751.3227215, f_=298.2566, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818193, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1750797, L=10001964.2044721, R1=6371007.8075738, R2=6371006.2170709, R3=6370999.8261357, Rbiaxial=6367452.6637907, Rtriaxial=6372796.5956056
    test 610 _2_Everest1969: a=6377295.664, b=6356094.667915, f_=300.8017, f=0.0033244, f2=0.0033355, n=0.001665, e=0.081473, e2=0.0066378, e22=0.0066822, e32=0.00333, A=6366699.578395, L=10000788.3115495, R1=6370228.665305, R2=6370227.1017854, R3=6370220.8195162, Rbiaxial=6366703.9908249, Rtriaxial=6372002.028125
    test 611 _2_Everest1975: a=6377299.151, b=6356098.1451201, f_=300.8017255, f=0.0033244, f2=0.0033355, n=0.001665, e=0.081473, e2=0.0066378, e22=0.0066822, e32=0.00333, A=6366703.0604992, L=10000793.781226, R1=6370232.14904, R2=6370230.5855198, R3=6370224.3032483, Rbiaxial=6366707.4729308, Rtriaxial=6372005.5126788
    test 612 _2_Fisher1968: a=6378150, b=6356768.3372444, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367463.6560438, L=10001988.5219136, R1=6371022.7790815, R2=6371021.1890374, R3=6371014.7999503, Rbiaxial=6367468.1434575, Rtriaxial=6372811.3097928
    test 613 _2_GEM10C: a=6378137, b=6356752.3142478, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.1458247, L=10001965.7293148, R1=6371008.7714159, R2=6371007.1809194, R3=6371000.79001, Rbiaxial=6367453.6345177, Rtriaxial=6372797.5559601
    test 614 _2_GPES: a=6378135, b=6378135, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6378135, L=10018751.029802, R1=6378135, R2=6378135, R3=6378135, Rbiaxial=6378135, Rtriaxial=6378135
    test 615 _2_GRS67: a=6378160, b=6356774.5160907, f_=298.2471674, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818206, e2=0.0066946, e22=0.0067397, e32=0.0033585, A=6367471.7470653, L=10002001.2312605, R1=6371031.5053636, R2=6371029.9147541, R3=6371023.5233901, Rbiaxial=6367476.2360774, Rtriaxial=6372820.3568989
    test 616 _2_GRS80: a=6378137, b=6356752.3141403, f_=298.2572221, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.145771, L=10001965.7292305, R1=6371008.7713801, R2=6371007.1808835, R3=6371000.7899741, Rbiaxial=6367453.634464, Rtriaxial=6372797.5559333
    test 617 _2_Helmert1906: a=6378200, b=6356818.1696279, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367513.5722707, L=10002066.9301395, R1=6371072.7232093, R2=6371071.1331527, R3=6371064.7440156, Rbiaxial=6367518.0597196, Rtriaxial=6372861.2679414
    test 618 _2_IAU76: a=6378140, b=6356755.2881575, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367452.1327884, L=10001970.4212264, R1=6371011.7627192, R2=6371010.1722195, R3=6371003.7812975, Rbiaxial=6367456.6214902, Rtriaxial=6372800.5494507
    test 619 _2_IERS1989: a=6378136, b=6356751.3015688, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1394912, L=10001964.1485699, R1=6371007.7671896, R2=6371006.1766909, R3=6370999.785773, Rbiaxial=6367452.6281902, Rtriaxial=6372796.5527993
    test 620 _2_IERS1992TOPEX: a=6378136.3, b=6356751.6165922, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.4469964, L=10001964.6315978, R1=6371008.0721974, R2=6371006.481701, R3=6371000.0907924, Rbiaxial=6367452.9356888, Rtriaxial=6372796.8565454
    test 621 _2_IERS2003: a=6378136.6, b=6356751.8579716, f_=298.25642, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818193, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.7177106, L=10001965.0568346, R1=6371008.3526572, R2=6371006.7621522, R3=6371000.3712088, Rbiaxial=6367453.2064274, Rtriaxial=6372797.1419269
    test 622 _2_Intl1924: a=6378388, b=6356911.9461279, f_=297, f=0.003367, f2=0.0033784, n=0.0016863, e=0.0819919, e2=0.0067227, e22=0.0067682, e32=0.0033727, A=6367654.5000576, L=10002288.2989894, R1=6371229.315376, R2=6371227.7113344, R3=6371221.2658749, Rbiaxial=6367659.0270431, Rtriaxial=6373025.7712969
    test 623 _2_Intl1967: a=6378157.5, b=6356772.2, f_=298.2496154, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066946, e22=0.0067397, e32=0.0033585, A=6367469.3389445, L=10001997.4485931, R1=6371029.0666667, R2=6371027.4760839, R3=6371021.0848275, Rbiaxial=6367473.827881, Rtriaxial=6372817.9027631
    test 624 _2_Krassovski1940: a=6378245, b=6356863.0187731, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367558.496875, L=10002137.4975429, R1=6371117.6729243, R2=6371116.0828566, R3=6371109.6936744, Rbiaxial=6367562.9843555, Rtriaxial=6372906.2302752
    test 625 _2_Krassowsky1940: a=6378245, b=6356863.0187731, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367558.496875, L=10002137.4975429, R1=6371117.6729243, R2=6371116.0828566, R3=6371109.6936744, Rbiaxial=6367562.9843555, Rtriaxial=6372906.2302752
    test 626 _2_Maupertuis1738: a=6397300, b=6363806.2827225, f_=191, f=0.0052356, f2=0.0052632, n=0.0026247, e=0.1021949, e2=0.0104438, e22=0.010554, e32=0.0052493, A=6380564.1301184, L=10022566.6984692, R1=6386135.4275742, R2=6386131.5414485, R3=6386115.8862823, Rbiaxial=6380575.1188282, Rtriaxial=6388943.032185
    test 627 _2_Mercury1960: a=6378166, b=6356784.2836071, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367479.6292364, L=10002013.6125459, R1=6371038.7612024, R2=6371037.1711543, R3=6371030.7820512, Rbiaxial=6367484.1166614, Rtriaxial=6372827.2964004
    test 628 _2_Mercury1968Mod: a=6378150, b=6356768.3372444, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367463.6560438, L=10001988.5219136, R1=6371022.7790815, R2=6371021.1890374, R3=6371014.7999503, Rbiaxial=6367468.1434575, Rtriaxial=6372811.3097928
    test 629 _2_NWL1965: a=6378145, b=6356759.7694887, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367456.8736684, L=10001977.8681833, R1=6371016.5898296, R2=6371014.999254, R3=6371008.6080267, Rbiaxial=6367461.3625846, Rtriaxial=6372805.4201047
    test 630 _2_OSU86F: a=6378136.2, b=6356751.5169301, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.3471653, L=10001964.4747835, R1=6371007.97231, R2=6371006.3818136, R3=6370999.9909051, Rbiaxial=6367452.8358577, Rtriaxial=6372796.7566298
    test 631 _2_OSU91A: a=6378136.3, b=6356751.6165948, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.4469977, L=10001964.6315999, R1=6371008.0721983, R2=6371006.4817019, R3=6371000.0907932, Rbiaxial=6367452.9356902, Rtriaxial=6372796.8565461
    test 632 _2_Plessis1817: a=6376523, b=6355862.9332556, f_=308.64, f=0.00324, f2=0.0032506, n=0.0016226, e=0.0804335, e2=0.0064695, e22=0.0065117, e32=0.0032453, A=6366197.1571074, L=9999999.1100364, R1=6369636.3110852, R2=6369634.8260858, R3=6369628.8599967, Rbiaxial=6366201.3475801, Rtriaxial=6371364.2639336
    test 633 _2_Prolate: a=6356752.3142452, b=6378137, f_=-297.2572236, f=-0.0033641, f2=-0.0033528, n=-0.0016792, e=0.0820944, e2=-0.0067395, e22=-0.0066944, e32=-0.0033584, A=6367449.1458234, L=10035500.52045, R1=6363880.5428301, R2=6363878.9413583, R3=6363872.564402, Rbiaxial=6367453.6345163, Rtriaxial=6362105.2243883
    test 634 _2_PZ90: a=6378136, b=6356751.3617457, f_=298.2578393, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818191, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1695544, L=10001964.195793, R1=6371007.7872486, R2=6371006.1967588, R3=6370999.8058769, Rbiaxial=6367452.6582281, Rtriaxial=6372796.5678057
    test 635 _2_SGS85: a=6378136, b=6356751.3015688, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1394912, L=10001964.1485699, R1=6371007.7671896, R2=6371006.1766909, R3=6370999.785773, Rbiaxial=6367452.6281902, Rtriaxial=6372796.5527993
    test 636 _2_SoAmerican1969: a=6378160, b=6356774.7191953, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367471.8485323, L=10002001.3906444, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.5912434, Rbiaxial=6367476.337459, Rtriaxial=6372820.4075472
    test 637 _2_Sphere: a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.1761167, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 638 _2_SphereAuthalic: a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.3980103, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 639 _2_SpherePopular: a=6378137, b=6378137, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6378137, L=10018754.1713946, R1=6378137, R2=6378137, R3=6378137, Rbiaxial=6378137, Rtriaxial=6378137
    test 640 _2_Struve1860: a=6378298.3, b=6356657.1426696, f_=294.73, f=0.0033929, f2=0.0034045, n=0.0016994, e=0.0823065, e2=0.0067744, e22=0.0068206, e32=0.0033987, A=6367482.3183255, L=10002017.8365571, R1=6371084.5808899, R2=6371082.9520899, R3=6371076.4069142, Rbiaxial=6367486.9153079, Rtriaxial=6372894.9002945
    test 641 _2_WGS60: a=6378165, b=6356783.2869594, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367478.6309119, L=10002012.0443814, R1=6371037.7623198, R2=6371036.172272, R3=6371029.7831699, Rbiaxial=6367483.1183362, Rtriaxial=6372826.2972374
    test 642 _2_WGS66: a=6378145, b=6356759.7694887, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367456.8736684, L=10001977.8681833, R1=6371016.5898296, R2=6371014.999254, R3=6371008.6080267, Rbiaxial=6367461.3625846, Rtriaxial=6372805.4201047
    test 643 _2_WGS72: a=6378135, b=6356750.5200161, f_=298.26, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818188, e2=0.0066943, e22=0.0067394, e32=0.0033584, A=6367447.2486238, L=10001962.7491986, R1=6371006.8400054, R2=6371005.2495389, R3=6370998.8587507, Rbiaxial=6367451.7372317, Rtriaxial=6372795.6072747
    test 644 _2_WGS84: a=6378137, b=6356752.3142452, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.1458234, L=10001965.7293127, R1=6371008.7714151, R2=6371007.1809185, R3=6371000.7900092, Rbiaxial=6367453.6345163, Rtriaxial=6372797.5559594

    testa_f2Tuple(pygeodesy.ellipsoids, 23.04.11)
    test 645 a_b_Airy1830: a=6377563.396, b=6356256.9092373, f_=299.3249646, f=0.0033409, f2=0.003352, n=0.0016732, e=0.0816734, e2=0.0066705, e22=0.0067153, e32=0.0033464, A=6366914.6089252, L=10001126.0807165, R1=6370461.2337458, R2=6370459.6547081, R3=6370453.3099457, Rbiaxial=6366919.065224, Rtriaxial=6372243.4531769
    test 646 a_b_AiryModified: a=6377340.189, b=6356034.4479385, f_=299.3249646, f=0.0033409, f2=0.003352, n=0.0016732, e=0.0816734, e2=0.0066705, e22=0.0067153, e32=0.0033464, A=6366691.7746199, L=10000776.0534082, R1=6370238.2753128, R2=6370236.6963304, R3=6370230.3517901, Rbiaxial=6366696.2307627, Rtriaxial=6372020.4323685
    test 647 a_b_ATS1977: a=6378135, b=6356750.3049216, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367447.1411669, L=10001962.5804057, R1=6371006.7683072, R2=6371005.1778087, R3=6370998.7868918, Rbiaxial=6367451.6298652, Rtriaxial=6372795.5536365
    test 648 a_b_Australia1966: a=6378160, b=6356774.7191953, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367471.8485323, L=10002001.3906444, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.5912434, Rbiaxial=6367476.337459, Rtriaxial=6372820.4075472
    test 649 a_b_Bessel1841: a=6377397.155, b=6356078.962818, f_=299.1528128, f=0.0033428, f2=0.003354, n=0.0016742, e=0.0816968, e2=0.0066744, e22=0.0067192, e32=0.0033484, A=6366742.5202339, L=10000855.7644324, R1=6370291.0909393, R2=6370289.5101266, R3=6370283.1582152, Rbiaxial=6366746.9815511, Rtriaxial=6372074.2933401
    test 650 a_b_BesselModified: a=6377492.018, b=6356173.5087127, f_=299.1528128, f=0.0033428, f2=0.003354, n=0.0016742, e=0.0816968, e2=0.0066744, e22=0.0067192, e32=0.0033484, A=6366837.2247477, L=10001004.5259346, R1=6370385.8482376, R2=6370384.2674013, R3=6370377.9153955, Rbiaxial=6366841.6861312, Rtriaxial=6372169.0771633
    test 651 a_b_CGCS2000: a=6378137, b=6356752.3141404, f_=298.2572221, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.145771, L=10001965.7292305, R1=6371008.7713801, R2=6371007.1808835, R3=6371000.7899741, Rbiaxial=6367453.634464, Rtriaxial=6372797.5559333
    test 652 a_b_Clarke1866: a=6378206.4, b=6356583.8, f_=294.9786982, f=0.0033901, f2=0.0034016, n=0.0016979, e=0.0822719, e2=0.0067687, e22=0.0068148, e32=0.0033958, A=6367399.6891698, L=10001888.0429829, R1=6370998.8666667, R2=6370997.240633, R3=6370990.7065988, Rbiaxial=6367404.2783313, Rtriaxial=6372807.6279107
    test 653 a_b_Clarke1880: a=6378249.145, b=6356514.8695498, f_=293.465, f=0.0034076, f2=0.0034192, n=0.0017067, e=0.0824834, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.6439805, L=10001867.5516475, R1=6371004.3865166, R2=6371002.7436696, R3=6370996.1419165, Rbiaxial=6367391.2806777, Rtriaxial=6372822.5252608
    test 654 a_b_Clarke1880IGN: a=6378249.2, b=6356515, f_=293.4660213, f=0.0034075, f2=0.0034192, n=0.0017067, e=0.0824833, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.7366734, L=10001867.6972491, R1=6371004.4666667, R2=6371002.8238311, R3=6370996.2221239, Rbiaxial=6367391.3733383, Rtriaxial=6372822.5990751
    test 655 a_b_Clarke1880Mod: a=6378249.145, b=6356514.9663955, f_=293.4663077, f=0.0034075, f2=0.0034192, n=0.0017067, e=0.0824832, e2=0.0068035, e22=0.0068501, e32=0.0034134, A=6367386.692362, L=10001867.627645, R1=6371004.4187985, R2=6371002.7759662, R3=6370996.174272, Rbiaxial=6367391.3290178, Rtriaxial=6372822.5494103
    test 656 a_b_CPM1799: a=6375738.7, b=6356671.9255749, f_=334.39, f=0.0029905, f2=0.0029995, n=0.0014975, e=0.0772793, e2=0.0059721, e22=0.006008, e32=0.002995, A=6366208.8818478, L=10000017.5272156, R1=6369383.108525, R2=6369381.8434158, R3=6369376.7624702, Rbiaxial=6366212.4509032, Rtriaxial=6370977.3559758
    test 657 a_b_Delambre1810: a=6376428, b=6355957.9261637, f_=311.5, f=0.0032103, f2=0.0032206, n=0.0016077, e=0.080064, e2=0.0064102, e22=0.0064516, e32=0.0032154, A=6366197.0768433, L=9999998.9839579, R1=6369604.6420546, R2=6369603.1841975, R3=6369597.3273907, Rbiaxial=6366201.1905982, Rtriaxial=6371316.6472228
    test 658 a_b_Engelis1985: a=6378136.05, b=6356751.3227215, f_=298.2566, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818193, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1750797, L=10001964.2044721, R1=6371007.8075738, R2=6371006.2170709, R3=6370999.8261357, Rbiaxial=6367452.6637907, Rtriaxial=6372796.5956056
    test 659 a_b_Everest1969: a=6377295.664, b=6356094.667915, f_=300.8017, f=0.0033244, f2=0.0033355, n=0.001665, e=0.081473, e2=0.0066378, e22=0.0066822, e32=0.00333, A=6366699.578395, L=10000788.3115495, R1=6370228.665305, R2=6370227.1017854, R3=6370220.8195162, Rbiaxial=6366703.9908249, Rtriaxial=6372002.028125
    test 660 a_b_Everest1975: a=6377299.151, b=6356098.1451201, f_=300.8017255, f=0.0033244, f2=0.0033355, n=0.001665, e=0.081473, e2=0.0066378, e22=0.0066822, e32=0.00333, A=6366703.0604992, L=10000793.781226, R1=6370232.14904, R2=6370230.5855198, R3=6370224.3032483, Rbiaxial=6366707.4729308, Rtriaxial=6372005.5126788
    test 661 a_b_Fisher1968: a=6378150, b=6356768.3372444, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367463.6560438, L=10001988.5219136, R1=6371022.7790815, R2=6371021.1890374, R3=6371014.7999503, Rbiaxial=6367468.1434575, Rtriaxial=6372811.3097928
    test 662 a_b_GEM10C: a=6378137, b=6356752.3142478, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.1458247, L=10001965.7293148, R1=6371008.7714159, R2=6371007.1809194, R3=6371000.79001, Rbiaxial=6367453.6345177, Rtriaxial=6372797.5559601
    test 663 a_b_GPES: a=6378135, b=6378135, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6378135, L=10018751.029802, R1=6378135, R2=6378135, R3=6378135, Rbiaxial=6378135, Rtriaxial=6378135
    test 664 a_b_GRS67: a=6378160, b=6356774.5160907, f_=298.2471674, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818206, e2=0.0066946, e22=0.0067397, e32=0.0033585, A=6367471.7470653, L=10002001.2312605, R1=6371031.5053636, R2=6371029.9147541, R3=6371023.5233901, Rbiaxial=6367476.2360774, Rtriaxial=6372820.3568989
    test 665 a_b_GRS80: a=6378137, b=6356752.3141403, f_=298.2572221, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.145771, L=10001965.7292305, R1=6371008.7713801, R2=6371007.1808835, R3=6371000.7899741, Rbiaxial=6367453.634464, Rtriaxial=6372797.5559333
    test 666 a_b_Helmert1906: a=6378200, b=6356818.1696279, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367513.5722707, L=10002066.9301395, R1=6371072.7232093, R2=6371071.1331527, R3=6371064.7440156, Rbiaxial=6367518.0597196, Rtriaxial=6372861.2679414
    test 667 a_b_IAU76: a=6378140, b=6356755.2881575, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367452.1327884, L=10001970.4212264, R1=6371011.7627192, R2=6371010.1722195, R3=6371003.7812975, Rbiaxial=6367456.6214902, Rtriaxial=6372800.5494507
    test 668 a_b_IERS1989: a=6378136, b=6356751.3015688, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1394912, L=10001964.1485699, R1=6371007.7671896, R2=6371006.1766909, R3=6370999.785773, Rbiaxial=6367452.6281902, Rtriaxial=6372796.5527993
    test 669 a_b_IERS1992TOPEX: a=6378136.3, b=6356751.6165922, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.4469964, L=10001964.6315978, R1=6371008.0721974, R2=6371006.481701, R3=6371000.0907924, Rbiaxial=6367452.9356888, Rtriaxial=6372796.8565454
    test 670 a_b_IERS2003: a=6378136.6, b=6356751.8579716, f_=298.25642, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818193, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.7177106, L=10001965.0568346, R1=6371008.3526572, R2=6371006.7621522, R3=6371000.3712088, Rbiaxial=6367453.2064274, Rtriaxial=6372797.1419269
    test 671 a_b_Intl1924: a=6378388, b=6356911.9461279, f_=297, f=0.003367, f2=0.0033784, n=0.0016863, e=0.0819919, e2=0.0067227, e22=0.0067682, e32=0.0033727, A=6367654.5000576, L=10002288.2989894, R1=6371229.315376, R2=6371227.7113344, R3=6371221.2658749, Rbiaxial=6367659.0270431, Rtriaxial=6373025.7712969
    test 672 a_b_Intl1967: a=6378157.5, b=6356772.2, f_=298.2496154, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066946, e22=0.0067397, e32=0.0033585, A=6367469.3389445, L=10001997.4485931, R1=6371029.0666667, R2=6371027.4760839, R3=6371021.0848275, Rbiaxial=6367473.827881, Rtriaxial=6372817.9027631
    test 673 a_b_Krassovski1940: a=6378245, b=6356863.0187731, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367558.496875, L=10002137.4975429, R1=6371117.6729243, R2=6371116.0828566, R3=6371109.6936744, Rbiaxial=6367562.9843555, Rtriaxial=6372906.2302752
    test 674 a_b_Krassowsky1940: a=6378245, b=6356863.0187731, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367558.496875, L=10002137.4975429, R1=6371117.6729243, R2=6371116.0828566, R3=6371109.6936744, Rbiaxial=6367562.9843555, Rtriaxial=6372906.2302752
    test 675 a_b_Maupertuis1738: a=6397300, b=6363806.2827225, f_=191, f=0.0052356, f2=0.0052632, n=0.0026247, e=0.1021949, e2=0.0104438, e22=0.010554, e32=0.0052493, A=6380564.1301184, L=10022566.6984692, R1=6386135.4275742, R2=6386131.5414485, R3=6386115.8862823, Rbiaxial=6380575.1188282, Rtriaxial=6388943.032185
    test 676 a_b_Mercury1960: a=6378166, b=6356784.2836071, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367479.6292364, L=10002013.6125459, R1=6371038.7612024, R2=6371037.1711543, R3=6371030.7820512, Rbiaxial=6367484.1166614, Rtriaxial=6372827.2964004
    test 677 a_b_Mercury1968Mod: a=6378150, b=6356768.3372444, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367463.6560438, L=10001988.5219136, R1=6371022.7790815, R2=6371021.1890374, R3=6371014.7999503, Rbiaxial=6367468.1434575, Rtriaxial=6372811.3097928
    test 678 a_b_NWL1965: a=6378145, b=6356759.7694887, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367456.8736684, L=10001977.8681833, R1=6371016.5898296, R2=6371014.999254, R3=6371008.6080267, Rbiaxial=6367461.3625846, Rtriaxial=6372805.4201047
    test 679 a_b_OSU86F: a=6378136.2, b=6356751.5169301, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.3471653, L=10001964.4747835, R1=6371007.97231, R2=6371006.3818136, R3=6370999.9909051, Rbiaxial=6367452.8358577, Rtriaxial=6372796.7566298
    test 680 a_b_OSU91A: a=6378136.3, b=6356751.6165948, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.4469977, L=10001964.6315999, R1=6371008.0721983, R2=6371006.4817019, R3=6371000.0907932, Rbiaxial=6367452.9356902, Rtriaxial=6372796.8565461
    test 681 a_b_Plessis1817: a=6376523, b=6355862.9332556, f_=308.64, f=0.00324, f2=0.0032506, n=0.0016226, e=0.0804335, e2=0.0064695, e22=0.0065117, e32=0.0032453, A=6366197.1571074, L=9999999.1100364, R1=6369636.3110852, R2=6369634.8260858, R3=6369628.8599967, Rbiaxial=6366201.3475801, Rtriaxial=6371364.2639336
    test 682 a_b_Prolate: a=6356752.3142452, b=6378137, f_=-297.2572236, f=-0.0033641, f2=-0.0033528, n=-0.0016792, e=0.0820944, e2=-0.0067395, e22=-0.0066944, e32=-0.0033584, A=6367449.1458234, L=10035500.52045, R1=6363880.5428301, R2=6363878.9413583, R3=6363872.564402, Rbiaxial=6367453.6345163, Rtriaxial=6362105.2243883
    test 683 a_b_PZ90: a=6378136, b=6356751.3617457, f_=298.2578393, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818191, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1695544, L=10001964.195793, R1=6371007.7872486, R2=6371006.1967588, R3=6370999.8058769, Rbiaxial=6367452.6582281, Rtriaxial=6372796.5678057
    test 684 a_b_SGS85: a=6378136, b=6356751.3015688, f_=298.257, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367448.1394912, L=10001964.1485699, R1=6371007.7671896, R2=6371006.1766909, R3=6370999.785773, Rbiaxial=6367452.6281902, Rtriaxial=6372796.5527993
    test 685 a_b_SoAmerican1969: a=6378160, b=6356774.7191953, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367471.8485323, L=10002001.3906444, R1=6371031.5730651, R2=6371029.9824858, R3=6371023.5912434, Rbiaxial=6367476.337459, Rtriaxial=6372820.4075472
    test 686 a_b_Sphere: a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.1761167, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415
    test 687 a_b_SphereAuthalic: a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.3980103, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 688 a_b_SpherePopular: a=6378137, b=6378137, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6378137, L=10018754.1713946, R1=6378137, R2=6378137, R3=6378137, Rbiaxial=6378137, Rtriaxial=6378137
    test 689 a_b_Struve1860: a=6378298.3, b=6356657.1426696, f_=294.73, f=0.0033929, f2=0.0034045, n=0.0016994, e=0.0823065, e2=0.0067744, e22=0.0068206, e32=0.0033987, A=6367482.3183255, L=10002017.8365571, R1=6371084.5808899, R2=6371082.9520899, R3=6371076.4069142, Rbiaxial=6367486.9153079, Rtriaxial=6372894.9002945
    test 690 a_b_WGS60: a=6378165, b=6356783.2869594, f_=298.3, f=0.0033523, f2=0.0033636, n=0.001679, e=0.0818133, e2=0.0066934, e22=0.0067385, e32=0.0033579, A=6367478.6309119, L=10002012.0443814, R1=6371037.7623198, R2=6371036.172272, R3=6371029.7831699, Rbiaxial=6367483.1183362, Rtriaxial=6372826.2972374
    test 691 a_b_WGS66: a=6378145, b=6356759.7694887, f_=298.25, f=0.0033529, f2=0.0033642, n=0.0016793, e=0.0818202, e2=0.0066945, e22=0.0067397, e32=0.0033585, A=6367456.8736684, L=10001977.8681833, R1=6371016.5898296, R2=6371014.999254, R3=6371008.6080267, Rbiaxial=6367461.3625846, Rtriaxial=6372805.4201047
    test 692 a_b_WGS72: a=6378135, b=6356750.5200161, f_=298.26, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818188, e2=0.0066943, e22=0.0067394, e32=0.0033584, A=6367447.2486238, L=10001962.7491986, R1=6371006.8400054, R2=6371005.2495389, R3=6370998.8587507, Rbiaxial=6367451.7372317, Rtriaxial=6372795.6072747
    test 693 a_b_WGS84: a=6378137, b=6356752.3142452, f_=298.2572236, f=0.0033528, f2=0.0033641, n=0.0016792, e=0.0818192, e2=0.0066944, e22=0.0067395, e32=0.0033584, A=6367449.1458234, L=10001965.7293127, R1=6371008.7714151, R2=6371007.1809185, R3=6371000.7900092, Rbiaxial=6367453.6345163, Rtriaxial=6372797.5559594
    test 694 _a_f_ellipsoid: a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 695 _toEllipsoid2: a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594

    testFunctions(pygeodesy.ellipsoids, 23.04.11)

    test 696 a_b2f_(Airy1830): 299.32496460
    test 697 a_b2f2(Airy1830): 0.00335205
    test 698 a_b2n(Airy1830): 0.00167322
    test 699 b_f2a(Airy1830): 6377563.396
    test 700 b_f_2a(Airy1830): 6377563.396
    test 701 f_2f(Airy1830): 0.00334085
    test 702 e2f(Airy1830): 0.00334085
    test 703 n2e2(Airy1830): 0.00667054
    test 704 n2f(Airy1830): 0.00334085

    test 705 a_b2f_(AiryModified): 299.32496460
    test 706 a_b2f2(AiryModified): 0.00335205
    test 707 a_b2n(AiryModified): 0.00167322
    test 708 b_f2a(AiryModified): 6377340.189
    test 709 b_f_2a(AiryModified): 6377340.189
    test 710 f_2f(AiryModified): 0.00334085
    test 711 e2f(AiryModified): 0.00334085
    test 712 n2e2(AiryModified): 0.00667054
    test 713 n2f(AiryModified): 0.00334085

    test 714 a_b2f_(ATS1977): 298.25700000
    test 715 a_b2f2(ATS1977): 0.00336409
    test 716 a_b2n(ATS1977): 0.00167922
    test 717 b_f2a(ATS1977): 6378135.000
    test 718 b_f_2a(ATS1977): 6378135.000
    test 719 f_2f(ATS1977): 0.00335281
    test 720 e2f(ATS1977): 0.00335281
    test 721 n2e2(ATS1977): 0.00669438
    test 722 n2f(ATS1977): 0.00335281

    test 723 a_b2f_(Australia1966): 298.25000000
    test 724 a_b2f2(Australia1966): 0.00336417
    test 725 a_b2n(Australia1966): 0.00167926
    test 726 b_f2a(Australia1966): 6378160.000
    test 727 b_f_2a(Australia1966): 6378160.000
    test 728 f_2f(Australia1966): 0.00335289
    test 729 e2f(Australia1966): 0.00335289
    test 730 n2e2(Australia1966): 0.00669454
    test 731 n2f(Australia1966): 0.00335289

    test 732 a_b2f_(Bessel1841): 299.15281280
    test 733 a_b2f2(Bessel1841): 0.00335398
    test 734 a_b2n(Bessel1841): 0.00167418
    test 735 b_f2a(Bessel1841): 6377397.155
    test 736 b_f_2a(Bessel1841): 6377397.155
    test 737 f_2f(Bessel1841): 0.00334277
    test 738 e2f(Bessel1841): 0.00334277
    test 739 n2e2(Bessel1841): 0.00667437
    test 740 n2f(Bessel1841): 0.00334277

    test 741 a_b2f_(BesselModified): 299.15281280
    test 742 a_b2f2(BesselModified): 0.00335398
    test 743 a_b2n(BesselModified): 0.00167418
    test 744 b_f2a(BesselModified): 6377492.018
    test 745 b_f_2a(BesselModified): 6377492.018
    test 746 f_2f(BesselModified): 0.00334277
    test 747 e2f(BesselModified): 0.00334277
    test 748 n2e2(BesselModified): 0.00667437
    test 749 n2f(BesselModified): 0.00334277

    test 750 a_b2f_(CGCS2000): 298.25722210
    test 751 a_b2f2(CGCS2000): 0.00336409
    test 752 a_b2n(CGCS2000): 0.00167922
    test 753 b_f2a(CGCS2000): 6378137.000
    test 754 b_f_2a(CGCS2000): 6378137.000
    test 755 f_2f(CGCS2000): 0.00335281
    test 756 e2f(CGCS2000): 0.00335281
    test 757 n2e2(CGCS2000): 0.00669438
    test 758 n2f(CGCS2000): 0.00335281

    test 759 a_b2f_(Clarke1866): 294.97869821
    test 760 a_b2f2(Clarke1866): 0.00340161
    test 761 a_b2n(Clarke1866): 0.00169792
    test 762 b_f2a(Clarke1866): 6378206.400
    test 763 b_f_2a(Clarke1866): 6378206.400
    test 764 f_2f(Clarke1866): 0.00339008
    test 765 e2f(Clarke1866): 0.00339008
    test 766 n2e2(Clarke1866): 0.00676866
    test 767 n2f(Clarke1866): 0.00339008

    test 768 a_b2f_(Clarke1880): 293.46500000
    test 769 a_b2f2(Clarke1880): 0.00341921
    test 770 a_b2n(Clarke1880): 0.00170669
    test 771 b_f2a(Clarke1880): 6378249.145
    test 772 b_f_2a(Clarke1880): 6378249.145
    test 773 f_2f(Clarke1880): 0.00340756
    test 774 e2f(Clarke1880): 0.00340756
    test 775 n2e2(Clarke1880): 0.00680351
    test 776 n2f(Clarke1880): 0.00340756

    test 777 a_b2f_(Clarke1880IGN): 293.46602129
    test 778 a_b2f2(Clarke1880IGN): 0.00341920
    test 779 a_b2n(Clarke1880IGN): 0.00170668
    test 780 b_f2a(Clarke1880IGN): 6378249.200
    test 781 b_f_2a(Clarke1880IGN): 6378249.200
    test 782 f_2f(Clarke1880IGN): 0.00340755
    test 783 e2f(Clarke1880IGN): 0.00340755
    test 784 n2e2(Clarke1880IGN): 0.00680349
    test 785 n2f(Clarke1880IGN): 0.00340755

    test 786 a_b2f_(Clarke1880Mod): 293.46630766
    test 787 a_b2f2(Clarke1880Mod): 0.00341920
    test 788 a_b2n(Clarke1880Mod): 0.00170668
    test 789 b_f2a(Clarke1880Mod): 6378249.145
    test 790 b_f_2a(Clarke1880Mod): 6378249.145
    test 791 f_2f(Clarke1880Mod): 0.00340755
    test 792 e2f(Clarke1880Mod): 0.00340755
    test 793 n2e2(Clarke1880Mod): 0.00680348
    test 794 n2f(Clarke1880Mod): 0.00340755

    test 795 a_b2f_(CPM1799): 334.39000000
    test 796 a_b2f2(CPM1799): 0.00299949
    test 797 a_b2n(CPM1799): 0.00149750
    test 798 b_f2a(CPM1799): 6375738.700
    test 799 b_f_2a(CPM1799): 6375738.700
    test 800 f_2f(CPM1799): 0.00299052
    test 801 e2f(CPM1799): 0.00299052
    test 802 n2e2(CPM1799): 0.00597210
    test 803 n2f(CPM1799): 0.00299052

    test 804 a_b2f_(Delambre1810): 311.50000000
    test 805 a_b2f2(Delambre1810): 0.00322061
    test 806 a_b2n(Delambre1810): 0.00160772
    test 807 b_f2a(Delambre1810): 6376428.000
    test 808 b_f_2a(Delambre1810): 6376428.000
    test 809 f_2f(Delambre1810): 0.00321027
    test 810 e2f(Delambre1810): 0.00321027
    test 811 n2e2(Delambre1810): 0.00641024
    test 812 n2f(Delambre1810): 0.00321027

    test 813 a_b2f_(Engelis1985): 298.25660000
    test 814 a_b2f2(Engelis1985): 0.00336410
    test 815 a_b2n(Engelis1985): 0.00167922
    test 816 b_f2a(Engelis1985): 6378136.050
    test 817 b_f_2a(Engelis1985): 6378136.050
    test 818 f_2f(Engelis1985): 0.00335282
    test 819 e2f(Engelis1985): 0.00335282
    test 820 n2e2(Engelis1985): 0.00669439
    test 821 n2f(Engelis1985): 0.00335282

    test 822 a_b2f_(Everest1969): 300.80170000
    test 823 a_b2f2(Everest1969): 0.00333554
    test 824 a_b2n(Everest1969): 0.00166499
    test 825 b_f2a(Everest1969): 6377295.664
    test 826 b_f_2a(Everest1969): 6377295.664
    test 827 f_2f(Everest1969): 0.00332445
    test 828 e2f(Everest1969): 0.00332445
    test 829 n2e2(Everest1969): 0.00663785
    test 830 n2f(Everest1969): 0.00332445

    test 831 a_b2f_(Everest1975): 300.80172550
    test 832 a_b2f2(Everest1975): 0.00333554
    test 833 a_b2n(Everest1975): 0.00166499
    test 834 b_f2a(Everest1975): 6377299.151
    test 835 b_f_2a(Everest1975): 6377299.151
    test 836 f_2f(Everest1975): 0.00332445
    test 837 e2f(Everest1975): 0.00332445
    test 838 n2e2(Everest1975): 0.00663785
    test 839 n2f(Everest1975): 0.00332445

    test 840 a_b2f_(Fisher1968): 298.30000000
    test 841 a_b2f2(Fisher1968): 0.00336361
    test 842 a_b2n(Fisher1968): 0.00167898
    test 843 b_f2a(Fisher1968): 6378150.000
    test 844 b_f_2a(Fisher1968): 6378150.000
    test 845 f_2f(Fisher1968): 0.00335233
    test 846 e2f(Fisher1968): 0.00335233
    test 847 n2e2(Fisher1968): 0.00669342
    test 848 n2f(Fisher1968): 0.00335233

    test 849 a_b2f_(GEM10C): 298.25722360
    test 850 a_b2f2(GEM10C): 0.00336409
    test 851 a_b2n(GEM10C): 0.00167922
    test 852 b_f2a(GEM10C): 6378137.000
    test 853 b_f_2a(GEM10C): 6378137.000
    test 854 f_2f(GEM10C): 0.00335281
    test 855 e2f(GEM10C): 0.00335281
    test 856 n2e2(GEM10C): 0.00669438
    test 857 n2f(GEM10C): 0.00335281

    test 858 a_b2f_(GPES): 0.00000000
    test 859 a_b2f2(GPES): 0.00000000
    test 860 a_b2n(GPES): 0.00000000
    test 861 b_f2a(GPES): 6378135.000
    test 862 b_f_2a(GPES): 6378135.000
    test 863 f_2f(GPES): 0.00000000
    test 864 e2f(GPES): 0.00000000
    test 865 n2e2(GPES): 0.00000000
    test 866 n2f(GPES): 0.00000000

    test 867 a_b2f_(GRS67): 298.24716743
    test 868 a_b2f2(GRS67): 0.00336420
    test 869 a_b2n(GRS67): 0.00167928
    test 870 b_f2a(GRS67): 6378160.000
    test 871 b_f_2a(GRS67): 6378160.000
    test 872 f_2f(GRS67): 0.00335292
    test 873 e2f(GRS67): 0.00335292
    test 874 n2e2(GRS67): 0.00669461
    test 875 n2f(GRS67): 0.00335292

    test 876 a_b2f_(GRS80): 298.25722210
    test 877 a_b2f2(GRS80): 0.00336409
    test 878 a_b2n(GRS80): 0.00167922
    test 879 b_f2a(GRS80): 6378137.000
    test 880 b_f_2a(GRS80): 6378137.000
    test 881 f_2f(GRS80): 0.00335281
    test 882 e2f(GRS80): 0.00335281
    test 883 n2e2(GRS80): 0.00669438
    test 884 n2f(GRS80): 0.00335281

    test 885 a_b2f_(Helmert1906): 298.30000000
    test 886 a_b2f2(Helmert1906): 0.00336361
    test 887 a_b2n(Helmert1906): 0.00167898
    test 888 b_f2a(Helmert1906): 6378200.000
    test 889 b_f_2a(Helmert1906): 6378200.000
    test 890 f_2f(Helmert1906): 0.00335233
    test 891 e2f(Helmert1906): 0.00335233
    test 892 n2e2(Helmert1906): 0.00669342
    test 893 n2f(Helmert1906): 0.00335233

    test 894 a_b2f_(IAU76): 298.25700000
    test 895 a_b2f2(IAU76): 0.00336409
    test 896 a_b2n(IAU76): 0.00167922
    test 897 b_f2a(IAU76): 6378140.000
    test 898 b_f_2a(IAU76): 6378140.000
    test 899 f_2f(IAU76): 0.00335281
    test 900 e2f(IAU76): 0.00335281
    test 901 n2e2(IAU76): 0.00669438
    test 902 n2f(IAU76): 0.00335281

    test 903 a_b2f_(IERS1989): 298.25700000
    test 904 a_b2f2(IERS1989): 0.00336409
    test 905 a_b2n(IERS1989): 0.00167922
    test 906 b_f2a(IERS1989): 6378136.000
    test 907 b_f_2a(IERS1989): 6378136.000
    test 908 f_2f(IERS1989): 0.00335281
    test 909 e2f(IERS1989): 0.00335281
    test 910 n2e2(IERS1989): 0.00669438
    test 911 n2f(IERS1989): 0.00335281

    test 912 a_b2f_(IERS1992TOPEX): 298.25722356
    test 913 a_b2f2(IERS1992TOPEX): 0.00336409
    test 914 a_b2n(IERS1992TOPEX): 0.00167922
    test 915 b_f2a(IERS1992TOPEX): 6378136.300
    test 916 b_f_2a(IERS1992TOPEX): 6378136.300
    test 917 f_2f(IERS1992TOPEX): 0.00335281
    test 918 e2f(IERS1992TOPEX): 0.00335281
    test 919 n2e2(IERS1992TOPEX): 0.00669438
    test 920 n2f(IERS1992TOPEX): 0.00335281

    test 921 a_b2f_(IERS2003): 298.25642000
    test 922 a_b2f2(IERS2003): 0.00336410
    test 923 a_b2n(IERS2003): 0.00167922
    test 924 b_f2a(IERS2003): 6378136.600
    test 925 b_f_2a(IERS2003): 6378136.600
    test 926 f_2f(IERS2003): 0.00335282
    test 927 e2f(IERS2003): 0.00335282
    test 928 n2e2(IERS2003): 0.00669440
    test 929 n2f(IERS2003): 0.00335282

    test 930 a_b2f_(Intl1924): 297.00000000
    test 931 a_b2f2(Intl1924): 0.00337838
    test 932 a_b2n(Intl1924): 0.00168634
    test 933 b_f2a(Intl1924): 6378388.000
    test 934 b_f_2a(Intl1924): 6378388.000
    test 935 f_2f(Intl1924): 0.00336700
    test 936 e2f(Intl1924): 0.00336700
    test 937 n2e2(Intl1924): 0.00672267
    test 938 n2f(Intl1924): 0.00336700

    test 939 a_b2f_(Intl1967): 298.24961539
    test 940 a_b2f2(Intl1967): 0.00336418
    test 941 a_b2n(Intl1967): 0.00167926
    test 942 b_f2a(Intl1967): 6378157.500
    test 943 b_f_2a(Intl1967): 6378157.500
    test 944 f_2f(Intl1967): 0.00335290
    test 945 e2f(Intl1967): 0.00335290
    test 946 n2e2(Intl1967): 0.00669455
    test 947 n2f(Intl1967): 0.00335290

    test 948 a_b2f_(Krassovski1940): 298.30000000
    test 949 a_b2f2(Krassovski1940): 0.00336361
    test 950 a_b2n(Krassovski1940): 0.00167898
    test 951 b_f2a(Krassovski1940): 6378245.000
    test 952 b_f_2a(Krassovski1940): 6378245.000
    test 953 f_2f(Krassovski1940): 0.00335233
    test 954 e2f(Krassovski1940): 0.00335233
    test 955 n2e2(Krassovski1940): 0.00669342
    test 956 n2f(Krassovski1940): 0.00335233

    test 957 a_b2f_(Krassowsky1940): 298.30000000
    test 958 a_b2f2(Krassowsky1940): 0.00336361
    test 959 a_b2n(Krassowsky1940): 0.00167898
    test 960 b_f2a(Krassowsky1940): 6378245.000
    test 961 b_f_2a(Krassowsky1940): 6378245.000
    test 962 f_2f(Krassowsky1940): 0.00335233
    test 963 e2f(Krassowsky1940): 0.00335233
    test 964 n2e2(Krassowsky1940): 0.00669342
    test 965 n2f(Krassowsky1940): 0.00335233

    test 966 a_b2f_(Maupertuis1738): 191.00000000
    test 967 a_b2f2(Maupertuis1738): 0.00526316
    test 968 a_b2n(Maupertuis1738): 0.00262467
    test 969 b_f2a(Maupertuis1738): 6397300.000
    test 970 b_f_2a(Maupertuis1738): 6397300.000
    test 971 f_2f(Maupertuis1738): 0.00523560
    test 972 e2f(Maupertuis1738): 0.00523560
    test 973 n2e2(Maupertuis1738): 0.01044379
    test 974 n2f(Maupertuis1738): 0.00523560

    test 975 a_b2f_(Mercury1960): 298.30000000
    test 976 a_b2f2(Mercury1960): 0.00336361
    test 977 a_b2n(Mercury1960): 0.00167898
    test 978 b_f2a(Mercury1960): 6378166.000
    test 979 b_f_2a(Mercury1960): 6378166.000
    test 980 f_2f(Mercury1960): 0.00335233
    test 981 e2f(Mercury1960): 0.00335233
    test 982 n2e2(Mercury1960): 0.00669342
    test 983 n2f(Mercury1960): 0.00335233

    test 984 a_b2f_(Mercury1968Mod): 298.30000000
    test 985 a_b2f2(Mercury1968Mod): 0.00336361
    test 986 a_b2n(Mercury1968Mod): 0.00167898
    test 987 b_f2a(Mercury1968Mod): 6378150.000
    test 988 b_f_2a(Mercury1968Mod): 6378150.000
    test 989 f_2f(Mercury1968Mod): 0.00335233
    test 990 e2f(Mercury1968Mod): 0.00335233
    test 991 n2e2(Mercury1968Mod): 0.00669342
    test 992 n2f(Mercury1968Mod): 0.00335233

    test 993 a_b2f_(NWL1965): 298.25000000
    test 994 a_b2f2(NWL1965): 0.00336417
    test 995 a_b2n(NWL1965): 0.00167926
    test 996 b_f2a(NWL1965): 6378145.000
    test 997 b_f_2a(NWL1965): 6378145.000
    test 998 f_2f(NWL1965): 0.00335289
    test 999 e2f(NWL1965): 0.00335289
    test 1000 n2e2(NWL1965): 0.00669454
    test 1001 n2f(NWL1965): 0.00335289

    test 1002 a_b2f_(OSU86F): 298.25722360
    test 1003 a_b2f2(OSU86F): 0.00336409
    test 1004 a_b2n(OSU86F): 0.00167922
    test 1005 b_f2a(OSU86F): 6378136.200
    test 1006 b_f_2a(OSU86F): 6378136.200
    test 1007 f_2f(OSU86F): 0.00335281
    test 1008 e2f(OSU86F): 0.00335281
    test 1009 n2e2(OSU86F): 0.00669438
    test 1010 n2f(OSU86F): 0.00335281

    test 1011 a_b2f_(OSU91A): 298.25722360
    test 1012 a_b2f2(OSU91A): 0.00336409
    test 1013 a_b2n(OSU91A): 0.00167922
    test 1014 b_f2a(OSU91A): 6378136.300
    test 1015 b_f_2a(OSU91A): 6378136.300
    test 1016 f_2f(OSU91A): 0.00335281
    test 1017 e2f(OSU91A): 0.00335281
    test 1018 n2e2(OSU91A): 0.00669438
    test 1019 n2f(OSU91A): 0.00335281

    test 1020 a_b2f_(Plessis1817): 308.64000000
    test 1021 a_b2f2(Plessis1817): 0.00325055
    test 1022 a_b2n(Plessis1817): 0.00162264
    test 1023 b_f2a(Plessis1817): 6376523.000
    test 1024 b_f_2a(Plessis1817): 6376523.000
    test 1025 f_2f(Plessis1817): 0.00324002
    test 1026 e2f(Plessis1817): 0.00324002
    test 1027 n2e2(Plessis1817): 0.00646954
    test 1028 n2f(Plessis1817): 0.00324002

    test 1029 a_b2f_(Prolate): -297.25722356
    test 1030 a_b2f2(Prolate): -0.00335281
    test 1031 a_b2n(Prolate): -0.00167922
    test 1032 b_f2a(Prolate): 6356752.314
    test 1033 b_f_2a(Prolate): 6356752.314
    test 1034 f_2f(Prolate): -0.00336409
    test 1035 e2f(Prolate): 0.00337545  FAILED, KNOWN, expected -0.00336409
    test 1036 n2e2(Prolate): -0.00673950
    test 1037 n2f(Prolate): -0.00336409

    test 1038 a_b2f_(PZ90): 298.25783930
    test 1039 a_b2f2(PZ90): 0.00336408
    test 1040 a_b2n(PZ90): 0.00167922
    test 1041 b_f2a(PZ90): 6378136.000
    test 1042 b_f_2a(PZ90): 6378136.000
    test 1043 f_2f(PZ90): 0.00335280
    test 1044 e2f(PZ90): 0.00335280
    test 1045 n2e2(PZ90): 0.00669437
    test 1046 n2f(PZ90): 0.00335280

    test 1047 a_b2f_(SGS85): 298.25700000
    test 1048 a_b2f2(SGS85): 0.00336409
    test 1049 a_b2n(SGS85): 0.00167922
    test 1050 b_f2a(SGS85): 6378136.000
    test 1051 b_f_2a(SGS85): 6378136.000
    test 1052 f_2f(SGS85): 0.00335281
    test 1053 e2f(SGS85): 0.00335281
    test 1054 n2e2(SGS85): 0.00669438
    test 1055 n2f(SGS85): 0.00335281

    test 1056 a_b2f_(SoAmerican1969): 298.25000000
    test 1057 a_b2f2(SoAmerican1969): 0.00336417
    test 1058 a_b2n(SoAmerican1969): 0.00167926
    test 1059 b_f2a(SoAmerican1969): 6378160.000
    test 1060 b_f_2a(SoAmerican1969): 6378160.000
    test 1061 f_2f(SoAmerican1969): 0.00335289
    test 1062 e2f(SoAmerican1969): 0.00335289
    test 1063 n2e2(SoAmerican1969): 0.00669454
    test 1064 n2f(SoAmerican1969): 0.00335289

    test 1065 a_b2f_(Sphere): 0.00000000
    test 1066 a_b2f2(Sphere): 0.00000000
    test 1067 a_b2n(Sphere): 0.00000000
    test 1068 b_f2a(Sphere): 6371008.771
    test 1069 b_f_2a(Sphere): 6371008.771
    test 1070 f_2f(Sphere): 0.00000000
    test 1071 e2f(Sphere): 0.00000000
    test 1072 n2e2(Sphere): 0.00000000
    test 1073 n2f(Sphere): 0.00000000

    test 1074 a_b2f_(SphereAuthalic): 0.00000000
    test 1075 a_b2f2(SphereAuthalic): 0.00000000
    test 1076 a_b2n(SphereAuthalic): 0.00000000
    test 1077 b_f2a(SphereAuthalic): 6371000.000
    test 1078 b_f_2a(SphereAuthalic): 6371000.000
    test 1079 f_2f(SphereAuthalic): 0.00000000
    test 1080 e2f(SphereAuthalic): 0.00000000
    test 1081 n2e2(SphereAuthalic): 0.00000000
    test 1082 n2f(SphereAuthalic): 0.00000000

    test 1083 a_b2f_(SpherePopular): 0.00000000
    test 1084 a_b2f2(SpherePopular): 0.00000000
    test 1085 a_b2n(SpherePopular): 0.00000000
    test 1086 b_f2a(SpherePopular): 6378137.000
    test 1087 b_f_2a(SpherePopular): 6378137.000
    test 1088 f_2f(SpherePopular): 0.00000000
    test 1089 e2f(SpherePopular): 0.00000000
    test 1090 n2e2(SpherePopular): 0.00000000
    test 1091 n2f(SpherePopular): 0.00000000

    test 1092 a_b2f_(Struve1860): 294.73000000
    test 1093 a_b2f2(Struve1860): 0.00340449
    test 1094 a_b2n(Struve1860): 0.00169935
    test 1095 b_f2a(Struve1860): 6378298.300
    test 1096 b_f_2a(Struve1860): 6378298.300
    test 1097 f_2f(Struve1860): 0.00339294
    test 1098 e2f(Struve1860): 0.00339294
    test 1099 n2e2(Struve1860): 0.00677436
    test 1100 n2f(Struve1860): 0.00339294

    test 1101 a_b2f_(WGS60): 298.30000000
    test 1102 a_b2f2(WGS60): 0.00336361
    test 1103 a_b2n(WGS60): 0.00167898
    test 1104 b_f2a(WGS60): 6378165.000
    test 1105 b_f_2a(WGS60): 6378165.000
    test 1106 f_2f(WGS60): 0.00335233
    test 1107 e2f(WGS60): 0.00335233
    test 1108 n2e2(WGS60): 0.00669342
    test 1109 n2f(WGS60): 0.00335233

    test 1110 a_b2f_(WGS66): 298.25000000
    test 1111 a_b2f2(WGS66): 0.00336417
    test 1112 a_b2n(WGS66): 0.00167926
    test 1113 b_f2a(WGS66): 6378145.000
    test 1114 b_f_2a(WGS66): 6378145.000
    test 1115 f_2f(WGS66): 0.00335289
    test 1116 e2f(WGS66): 0.00335289
    test 1117 n2e2(WGS66): 0.00669454
    test 1118 n2f(WGS66): 0.00335289

    test 1119 a_b2f_(WGS72): 298.26000000
    test 1120 a_b2f2(WGS72): 0.00336406
    test 1121 a_b2n(WGS72): 0.00167920
    test 1122 b_f2a(WGS72): 6378135.000
    test 1123 b_f_2a(WGS72): 6378135.000
    test 1124 f_2f(WGS72): 0.00335278
    test 1125 e2f(WGS72): 0.00335278
    test 1126 n2e2(WGS72): 0.00669432
    test 1127 n2f(WGS72): 0.00335278

    test 1128 a_b2f_(WGS84): 298.25722356
    test 1129 a_b2f2(WGS84): 0.00336409
    test 1130 a_b2n(WGS84): 0.00167922
    test 1131 b_f2a(WGS84): 6378137.000
    test 1132 b_f_2a(WGS84): 6378137.000
    test 1133 f_2f(WGS84): 0.00335281
    test 1134 e2f(WGS84): 0.00335281
    test 1135 n2e2(WGS84): 0.00669438
    test 1136 n2f(WGS84): 0.00335281

    test 1137 total: 49

    testWGS84(pygeodesy.ellipsoids, 23.04.11)
    test 1138 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1139 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1140 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1141 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1142 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1143 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1144 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1145 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1146 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1147 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1148 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1149 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1150 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1151 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1152 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1153 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1154 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1155 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1156 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1157 roc1_ 45: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1158 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1159 roc1_ 50: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1160 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1161 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1162 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1163 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1164 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1165 roc1_ 65: 9.313225746154785e-10  FAILED, KNOWN, expected 1.863e-09
    test 1166 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1167 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1168 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1169 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1170 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1171 roc1_ 80: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1172 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1173 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1174 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1175 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testProlate(pygeodesy.ellipsoids, 23.04.11)
    test 1176 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1177 roc1_ 0: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1178 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1179 roc1_ 5: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1180 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1181 roc1_ 10: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1182 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1183 roc1_ 15: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1184 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1185 roc1_ 20: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1186 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1187 roc1_ 25: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1188 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1189 roc1_ 30: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1190 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1191 roc1_ 35: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1192 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1193 roc1_ 40: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1194 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1195 roc1_ 45: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1196 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1197 roc1_ 50: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1198 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1199 roc1_ 55: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1200 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1201 roc1_ 60: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1202 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1203 roc1_ 65: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1204 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1205 roc1_ 70: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1206 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1207 roc1_ 75: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1208 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1209 roc1_ 80: 1.862645149230957e-09  FAILED, KNOWN, expected 1.863e-09
    test 1210 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1211 roc1_ 85: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1212 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09
    test 1213 roc1_ 90: 0.0  FAILED, KNOWN, expected 1.863e-09

    testSphereAuthalic(pygeodesy.ellipsoids, 23.04.11)
    test 1214 roc1_ 0: 0.0
    test 1215 roc1_ 0: 0.0
    test 1216 roc1_ 5: 0.0
    test 1217 roc1_ 5: 0.0
    test 1218 roc1_ 10: 0.0
    test 1219 roc1_ 10: 0.0
    test 1220 roc1_ 15: 0.0
    test 1221 roc1_ 15: 0.0
    test 1222 roc1_ 20: 0.0
    test 1223 roc1_ 20: 0.0
    test 1224 roc1_ 25: 0.0
    test 1225 roc1_ 25: 0.0
    test 1226 roc1_ 30: 0.0
    test 1227 roc1_ 30: 0.0
    test 1228 roc1_ 35: 0.0
    test 1229 roc1_ 35: 0.0
    test 1230 roc1_ 40: 0.0
    test 1231 roc1_ 40: 0.0
    test 1232 roc1_ 45: 0.0
    test 1233 roc1_ 45: 0.0
    test 1234 roc1_ 50: 0.0
    test 1235 roc1_ 50: 0.0
    test 1236 roc1_ 55: 0.0
    test 1237 roc1_ 55: 0.0
    test 1238 roc1_ 60: 0.0
    test 1239 roc1_ 60: 0.0
    test 1240 roc1_ 65: 0.0
    test 1241 roc1_ 65: 0.0
    test 1242 roc1_ 70: 0.0
    test 1243 roc1_ 70: 0.0
    test 1244 roc1_ 75: 0.0
    test 1245 roc1_ 75: 0.0
    test 1246 roc1_ 80: 0.0
    test 1247 roc1_ 80: 0.0
    test 1248 roc1_ 85: 0.0
    test 1249 roc1_ 85: 0.0
    test 1250 roc1_ 90: 0.0
    test 1251 roc1_ 90: 0.0

    testcircle4(pygeodesy.ellipsoids, 23.04.11)

    testWGS84(pygeodesy.ellipsoids, 23.04.11)
    test 1252 circle4 0: 6378137.000000
    test 1253 circle4 0: 6378137.000000
    test 1254 circle4 10: 6377497.402124
    test 1255 circle4 10: 6377497.402124
    test 1256 circle4 20: 6375653.951276
    test 1257 circle4 20: 6375653.951276
    test 1258 circle4 30: 6372824.420294
    test 1259 circle4 30: 6372824.420294
    test 1260 circle4 40: 6369344.863240
    test 1261 circle4 40: 6369344.863240
    test 1262 circle4 50: 6365631.517537
    test 1263 circle4 50: 6365631.517537
    test 1264 circle4 60: 6362132.224397
    test 1265 circle4 60: 6362132.224397
    test 1266 circle4 70: 6359272.455642
    test 1267 circle4 70: 6359272.455642
    test 1268 circle4 80: 6357402.413808
    test 1269 circle4 80: 6357402.413808
    test 1270 circle4 90: 6356752.314245
    test 1271 circle4 90: 6356752.314245

    testSphere(pygeodesy.ellipsoids, 23.04.11)
    test 1272 circle4 0: 6371008.771415
    test 1273 circle4 0: 6371008.771415
    test 1274 circle4 10: 6371008.771415
    test 1275 circle4 10: 6371008.771415
    test 1276 circle4 20: 6371008.771415
    test 1277 circle4 20: 6371008.771415
    test 1278 circle4 30: 6371008.771415
    test 1279 circle4 30: 6371008.771415
    test 1280 circle4 40: 6371008.771415
    test 1281 circle4 40: 6371008.771415
    test 1282 circle4 50: 6371008.771415
    test 1283 circle4 50: 6371008.771415
    test 1284 circle4 60: 6371008.771415
    test 1285 circle4 60: 6371008.771415
    test 1286 circle4 70: 6371008.771415
    test 1287 circle4 70: 6371008.771415
    test 1288 circle4 80: 6371008.771415
    test 1289 circle4 80: 6371008.771415
    test 1290 circle4 90: 6371008.771415
    test 1291 circle4 90: 6371008.771415

    77 of 1291 testEllipsoids.py tests (6.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 120.483 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testElliptic.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Elliptic from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EllipticError from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.Elliptic3Tuple from .elliptic by testElliptic.py line 11
# lazily imported pygeodesy.EPS from .constants by testElliptic.py line 11
# lazily imported pygeodesy.fstr from .streprs by testElliptic.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testElliptic.py line 11
# lazily imported pygeodesy.radians from .utily by testElliptic.py line 11
# lazily imported pygeodesy.Scalar from .units by testElliptic.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testElliptic.py line 11

    testing testElliptic.py 23.03.27 isLazy=3
    test 1 eps4: 8.881784197e-16
    test 2 RC, RF(0.020, ...): 3.914361830671
    test 3 RC, RF(0.030, ...): 6.584789484624
    test 4 RC, RF(0.040, ...): 5.493061443341
    test 5 RC, RF(0.050, ...): 4.812118250596
    test 6 RC, RF(0.060, ...): 4.335073632453
    test 7 RC, RF(0.070, ...): 3.976827306120
    test 8 RC, RF(0.080, ...): 3.694989719259
    test 9 RC, RF(0.090, ...): 3.465735902800
    test 10 RC, RF(0.100, ...): 3.274501502373
    test 11 RC, RF(0.110, ...): 3.111812518574
    test 12 RC, RF(0.120, ...): 2.971203516685
    test 13 RC, RF(0.130, ...): 2.848090500183
    test 14 RC, RF(0.140, ...): 2.739120555165
    test 15 RC, RF(0.150, ...): 2.641776814832
    test 16 RC, RF(0.160, ...): 2.554128118830
    test 17 RC, RF(0.170, ...): 2.474664615473
    test 18 RC, RF(0.180, ...): 2.402186472893
    test 19 RC, RF(0.190, ...): 2.335726540516
    test 20 RC, RF(0.200, ...): 2.274495360058
    test 21 RC, RF(0.210, ...): 2.217841271926
    test 22 RC, RF(0.220, ...): 2.165220951174
    test 23 RC, RF(0.230, ...): 2.116177296054
    test 24 RC, RF(0.240, ...): 2.070322594382
    test 25 RC, RF(0.250, ...): 2.027325540541
    test 26 RC, RF(0.260, ...): 1.986901103492
    test 27 RC, RF(0.270, ...): 1.948802534199
    test 28 RC, RF(0.280, ...): 1.912814998209
    test 29 RC, RF(0.290, ...): 1.878750456745
    test 30 RC, RF(0.300, ...): 1.846443516895
    test 31 RC, RF(0.310, ...): 1.815748041271
    test 32 RC, RF(0.320, ...): 1.786534358134
    test 33 RC, RF(0.330, ...): 1.758686950216
    test 34 RC, RF(0.340, ...): 1.732102528083
    test 35 RC, RF(0.350, ...): 1.706688414643
    test 36 RC, RF(0.360, ...): 1.682361183106
    test 37 RC, RF(0.370, ...): 1.659045502693
    test 38 RC, RF(0.380, ...): 1.636673155658
    test 39 RC, RF(0.390, ...): 1.615182196359
    test 40 RC, RF(0.400, ...): 1.594516228743
    test 41 RC, RF(0.410, ...): 1.574623783019
    test 42 RC, RF(0.420, ...): 1.555457775830
    test 43 RC, RF(0.430, ...): 1.536975041007
    test 44 RC, RF(0.440, ...): 1.519135920258
    test 45 RC, RF(0.450, ...): 1.501903904951
    test 46 RC, RF(0.460, ...): 1.485245321610
    test 47 RC, RF(0.470, ...): 1.469129054970
    test 48 RC, RF(0.480, ...): 1.453526303390
    test 49 RC, RF(0.490, ...): 1.438410362259
    test 50 RC, RF(0.500, ...): 1.423756431678
    test 51 RC, RF(0.510, ...): 1.409541445271
    test 52 RC, RF(0.520, ...): 1.395743917431
    test 53 RC, RF(0.530, ...): 1.382343806706
    test 54 RC, RF(0.540, ...): 1.369322393343
    test 55 RC, RF(0.550, ...): 1.356662169284
    test 56 RC, RF(0.560, ...): 1.344346739158
    test 57 RC, RF(0.570, ...): 1.332360730978
    test 58 RC, RF(0.580, ...): 1.320689715446
    test 59 RC, RF(0.590, ...): 1.309320132904
    test 60 RC, RF(0.600, ...): 1.298239227085
    test 61 RC, RF(0.610, ...): 1.287434984930
    test 62 RC, RF(0.620, ...): 1.276896081822
    test 63 RC, RF(0.630, ...): 1.266611831682
    test 64 RC, RF(0.640, ...): 1.256572141405
    test 65 RC, RF(0.650, ...): 1.246767469214
    test 66 RC, RF(0.660, ...): 1.237188786540
    test 67 RC, RF(0.670, ...): 1.227827543058
    test 68 RC, RF(0.680, ...): 1.218675634611
    test 69 RC, RF(0.690, ...): 1.209725373708
    test 70 RC, RF(0.700, ...): 1.200969462383
    test 71 RC, RF(0.710, ...): 1.192400967179
    test 72 RC, RF(0.720, ...): 1.184013296070
    test 73 RC, RF(0.730, ...): 1.175800177139
    test 74 RC, RF(0.740, ...): 1.167755638871
    test 75 RC, RF(0.750, ...): 1.159873991901
    test 76 RC, RF(0.760, ...): 1.152149812097
    test 77 RC, RF(0.770, ...): 1.144577924881
    test 78 RC, RF(0.780, ...): 1.137153390647
    test 79 RC, RF(0.790, ...): 1.129871491226
    test 80 RC, RF(0.800, ...): 1.122727717281
    test 81 RC, RF(0.810, ...): 1.115717756571
    test 82 RC, RF(0.820, ...): 1.108837483013
    test 83 RC, RF(0.830, ...): 1.102082946473
    test 84 RC, RF(0.840, ...): 1.095450363236
    test 85 RC, RF(0.850, ...): 1.088936107101
    test 86 RC, RF(0.860, ...): 1.082536701044
    test 87 RC, RF(0.870, ...): 1.076248809425
    test 88 RC, RF(0.880, ...): 1.070069230678
    test 89 RC, RF(0.890, ...): 1.063994890459
    test 90 RC, RF(0.900, ...): 1.058022835225
    test 91 RC, RF(0.910, ...): 1.052150226192
    test 92 RC, RF(0.920, ...): 1.046374333669
    test 93 RC, RF(0.930, ...): 1.040692531726
    test 94 RC, RF(0.940, ...): 1.035102293176
    test 95 RC, RF(0.950, ...): 1.029601184852
    test 96 RC, RF(0.960, ...): 1.024186863158
    test 97 RC, RF(0.970, ...): 1.018857069872
    test 98 RC, RF(0.980, ...): 1.013609628192
    test 99 RC, RF(0.990, ...): 1.008442438994
    test 100 RD, RJ(0.010, ...): 8.120132781711
    test 101 RD, RJ(0.020, ...): 7.119021204087
    test 102 RD, RJ(0.030, ...): 6.544107485563
    test 103 RD, RJ(0.040, ...): 6.142532079666
    test 104 RD, RJ(0.050, ...): 5.835358486352
    test 105 RD, RJ(0.060, ...): 5.587552234737
    test 106 RD, RJ(0.070, ...): 5.380489023690
    test 107 RD, RJ(0.080, ...): 5.203088814832
    test 108 RD, RJ(0.090, ...): 5.048227960523
    test 109 RD, RJ(0.100, ...): 4.911057935480
    test 110 RD, RJ(0.110, ...): 4.788131254930
    test 111 RD, RJ(0.120, ...): 4.676910208210
    test 112 RD, RJ(0.130, ...): 4.575473423301
    test 113 RD, RJ(0.140, ...): 4.482331804788
    test 114 RD, RJ(0.150, ...): 4.396308333326
    test 115 RD, RJ(0.160, ...): 4.316456874863
    test 116 RD, RJ(0.170, ...): 4.242005741804
    test 117 RD, RJ(0.180, ...): 4.172317477477
    test 118 RD, RJ(0.190, ...): 4.106859576449
    test 119 RD, RJ(0.200, ...): 4.045182759349
    test 120 RD, RJ(0.210, ...): 3.986904580308
    test 121 RD, RJ(0.220, ...): 3.931696871490
    test 122 RD, RJ(0.230, ...): 3.879275996390
    test 123 RD, RJ(0.240, ...): 3.829395191121
    test 124 RD, RJ(0.250, ...): 3.781838479725
    test 125 RD, RJ(0.260, ...): 3.736415791191
    test 126 RD, RJ(0.270, ...): 3.692959004641
    test 127 RD, RJ(0.280, ...): 3.651318719062
    test 128 RD, RJ(0.290, ...): 3.611361594199
    test 129 RD, RJ(0.300, ...): 3.572968145771
    test 130 RD, RJ(0.310, ...): 3.536030905108
    test 131 RD, RJ(0.320, ...): 3.500452873386
    test 132 RD, RJ(0.330, ...): 3.466146215741
    test 133 RD, RJ(0.340, ...): 3.433031152013
    test 134 RD, RJ(0.350, ...): 3.401035009727
    test 135 RD, RJ(0.360, ...): 3.370091411694
    test 136 RD, RJ(0.370, ...): 3.340139575961
    test 137 RD, RJ(0.380, ...): 3.311123710009
    test 138 RD, RJ(0.390, ...): 3.282992484411
    test 139 RD, RJ(0.400, ...): 3.255698573796
    test 140 RD, RJ(0.410, ...): 3.229198255060
    test 141 RD, RJ(0.420, ...): 3.203451054514
    test 142 RD, RJ(0.430, ...): 3.178419436977
    test 143 RD, RJ(0.440, ...): 3.154068531006
    test 144 RD, RJ(0.450, ...): 3.130365885345
    test 145 RD, RJ(0.460, ...): 3.107281252437
    test 146 RD, RJ(0.470, ...): 3.084786395490
    test 147 RD, RJ(0.480, ...): 3.062854916088
    test 148 RD, RJ(0.490, ...): 3.041462099793
    test 149 RD, RJ(0.500, ...): 3.020584777522
    test 150 RD, RJ(0.510, ...): 3.000201200833
    test 151 RD, RJ(0.520, ...): 2.980290929460
    test 152 RD, RJ(0.530, ...): 2.960834729701
    test 153 RD, RJ(0.540, ...): 2.941814482427
    test 154 RD, RJ(0.550, ...): 2.923213099639
    test 155 RD, RJ(0.560, ...): 2.905014448642
    test 156 RD, RJ(0.570, ...): 2.887203283023
    test 157 RD, RJ(0.580, ...): 2.869765179714
    test 158 RD, RJ(0.590, ...): 2.852686481504
    test 159 RD, RJ(0.600, ...): 2.835954244454
    test 160 RD, RJ(0.610, ...): 2.819556189720
    test 161 RD, RJ(0.620, ...): 2.803480659351
    test 162 RD, RJ(0.630, ...): 2.787716575666
    test 163 RD, RJ(0.640, ...): 2.772253403892
    test 164 RD, RJ(0.650, ...): 2.757081117726
    test 165 RD, RJ(0.660, ...): 2.742190167580
    test 166 RD, RJ(0.670, ...): 2.727571451237
    test 167 RD, RJ(0.680, ...): 2.713216286727
    test 168 RD, RJ(0.690, ...): 2.699116387203
    test 169 RD, RJ(0.700, ...): 2.685263837661
    test 170 RD, RJ(0.710, ...): 2.671651073335
    test 171 RD, RJ(0.720, ...): 2.658270859623
    test 172 RD, RJ(0.730, ...): 2.645116273430
    test 173 RD, RJ(0.740, ...): 2.632180685789
    test 174 RD, RJ(0.750, ...): 2.619457745678
    test 175 RD, RJ(0.760, ...): 2.606941364924
    test 176 RD, RJ(0.770, ...): 2.594625704104
    test 177 RD, RJ(0.780, ...): 2.582505159384
    test 178 RD, RJ(0.790, ...): 2.570574350197
    test 179 RD, RJ(0.800, ...): 2.558828107720
    test 180 RD, RJ(0.810, ...): 2.547261464073
    test 181 RD, RJ(0.820, ...): 2.535869642198
    test 182 RD, RJ(0.830, ...): 2.524648046356
    test 183 RD, RJ(0.840, ...): 2.513592253209
    test 184 RD, RJ(0.850, ...): 2.502698003435
    test 185 RD, RJ(0.860, ...): 2.491961193848
    test 186 RD, RJ(0.870, ...): 2.481377869975
    test 187 RD, RJ(0.880, ...): 2.470944219069
    test 188 RD, RJ(0.890, ...): 2.460656563526
    test 189 RD, RJ(0.900, ...): 2.450511354674
    test 190 RD, RJ(0.910, ...): 2.440505166909
    test 191 RD, RJ(0.920, ...): 2.430634692166
    test 192 RD, RJ(0.930, ...): 2.420896734686
    test 193 RD, RJ(0.940, ...): 2.411288206073
    test 194 RD, RJ(0.950, ...): 2.401806120619
    test 195 RD, RJ(0.960, ...): 2.392447590873
    test 196 RD, RJ(0.970, ...): 2.383209823448
    test 197 RD, RJ(0.980, ...): 2.374090115050
    test 198 RD, RJ(0.990, ...): 2.365085848706

    test 199 eps4: 8.881784197e-16
    test 200 k2: 0.1000000
    test 201 kp2: 0.9000000
    test 202 eps: 0.0263340
    test 203 cD: 0.816837118
    test 204 cE: 1.530757637
    test 205 cG: 1.530757637
    test 206 cH: 0.795604230
    test 207 cK: 1.612441349
    test 208 cKE: 0.081683712
    test 209 cPi: 1.612441349
    test 210 fE(phi): 0.348372822
    test 211 fDelta(sn, cn): 0.994133906
    test 212 fD(sn, cn, dn): 0.013885234
    test 213 fE(sn, cn, dn): 0.348372822
    test 214 fEd(PI_2): 0.027415224
    test 215 fEinv(PI_2): 1.612999420
    test 216 fF(sn, cn, dn): 0.349761345
    test 217 fG(sn, cn, dn): 0.348372822
    test 218 fH(sn, cn, dn): 0.335876111
    test 219 fPi(sn, cn, dn): 0.349761345
    test 220 fPi(sn, None, dn): invokation Elliptic.fPi(0, None, 1): invalid
    test 221 fPi(sn, dn, None): invokation Elliptic.fH(0, 1, None): invalid

    test 222 deltaD(sn, cn, dn): -0.3223642
    test 223 deltaE(sn, cn, dn): 0.0084191
    test 224 deltaEinv(sn, cn): -0.0082518
    test 225 deltaF(sn, cn, dn): -0.0083379
    test 226 deltaG(sn, cn, dn): 0.0084191
    test 227 deltaH(sn, cn, dn): 0.3140691
    test 228 deltaPi(sn, cn, dn): -0.0083379
    test 229 deltaPi(sn, None, dn): invokation Elliptic.deltaPi(0, None, 1): invalid
    test 230 deltaPi(sn, dn, None): invokation Elliptic.deltaPi(0, 1, None): invalid

    test 231 RF(1,   2, 0): 1.3110287771461
    test 232 RF(0.5, 1, 0): 1.8540746773014
    test 233 RF(2,   3, 4): 0.58408284167715

    test 234 RC(0,  1/4): 3.1415926535898
    test 235 RC(9/4,  2): 0.69314718055995
    test 236 RC(1/4, -2): 0.23104906018665

    test 237 RJ(0, 1, 2, 3): 0.77688623778582
    test 238 RJ(2, 3, 4, 5): 0.14297579667157

    test 239 RD(0, 2, 1): 1.7972103521034
    test 240 RD(2, 3, 4): 0.16510527294261

    test 241 RG(0, 16, 16): 3.1415926535898
    test 242 RG(2,  3,  4): 1.7255030280692
    test 243 RG(0,  0.0796, 4): 1.0284758090288

    test 244 reset: 4
    test 245 sncndn(x): 0.0, 1.0, 1.0
    test 246 sncndn(x): 1.0, 0.0, 1.0
    test 247 sncndn(x): 0.0, 1.0, 1.0
    test 248 sncndn(x): 0.917152336, 0.398536815, 0.398536815
    test 249 sncndn(x): <class 'pygeodesy.elliptic.Elliptic3Tuple'>

    test 250 copy(Elliptic): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 251 Elliptic.copy(): (<class 'pygeodesy.elliptic.Elliptic'>, True)
    test 252 k2 alpha2 kp2 alphap2: (0.0, 0.0, 0.0, 0.0)
    test 253 k2 alpha2 kp2 alphap2: (0.25, 0.25, 0.25, 0.25)
    test 254 k2 alpha2 kp2 alphap2: (0.5, 0.5, 0.5, 0.5)
    test 255 k2 alpha2 kp2 alphap2: (0.75, 0.75, 0.75, 0.75)

    all 255 testElliptic.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 158.747 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEpsg.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Epsg from .epsg by testEpsg.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testEpsg.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testEpsg.py 23.03.27 isLazy=3
    test 1 Epsg: Epsg(32661)
    test 2 0 N: (0, 'N')
    test 3 1 N: (1, 'N')
    test 4 2 N: (2, 'N')
    test 5 3 N: (3, 'N')
    test 6 4 N: (4, 'N')
    test 7 5 N: (5, 'N')
    test 8 6 N: (6, 'N')
    test 9 7 N: (7, 'N')
    test 10 8 N: (8, 'N')
    test 11 9 N: (9, 'N')
    test 12 10 N: (10, 'N')
    test 13 11 N: (11, 'N')
    test 14 12 N: (12, 'N')
    test 15 13 N: (13, 'N')
    test 16 14 N: (14, 'N')
    test 17 15 N: (15, 'N')
    test 18 16 N: (16, 'N')
    test 19 17 N: (17, 'N')
    test 20 18 N: (18, 'N')
    test 21 19 N: (19, 'N')
    test 22 20 N: (20, 'N')
    test 23 21 N: (21, 'N')
    test 24 22 N: (22, 'N')
    test 25 23 N: (23, 'N')
    test 26 24 N: (24, 'N')
    test 27 25 N: (25, 'N')
    test 28 26 N: (26, 'N')
    test 29 27 N: (27, 'N')
    test 30 28 N: (28, 'N')
    test 31 29 N: (29, 'N')
    test 32 30 N: (30, 'N')
    test 33 31 N: (31, 'N')
    test 34 32 N: (32, 'N')
    test 35 33 N: (33, 'N')
    test 36 34 N: (34, 'N')
    test 37 35 N: (35, 'N')
    test 38 36 N: (36, 'N')
    test 39 37 N: (37, 'N')
    test 40 38 N: (38, 'N')
    test 41 39 N: (39, 'N')
    test 42 40 N: (40, 'N')
    test 43 41 N: (41, 'N')
    test 44 42 N: (42, 'N')
    test 45 43 N: (43, 'N')
    test 46 44 N: (44, 'N')
    test 47 45 N: (45, 'N')
    test 48 46 N: (46, 'N')
    test 49 47 N: (47, 'N')
    test 50 48 N: (48, 'N')
    test 51 49 N: (49, 'N')
    test 52 50 N: (50, 'N')
    test 53 51 N: (51, 'N')
    test 54 52 N: (52, 'N')
    test 55 53 N: (53, 'N')
    test 56 54 N: (54, 'N')
    test 57 55 N: (55, 'N')
    test 58 56 N: (56, 'N')
    test 59 57 N: (57, 'N')
    test 60 58 N: (58, 'N')
    test 61 59 N: (59, 'N')
    test 62 60 N: (60, 'N')
    test 63 Epsg: Epsg(32761)
    test 64 0 S: (0, 'S')
    test 65 1 S: (1, 'S')
    test 66 2 S: (2, 'S')
    test 67 3 S: (3, 'S')
    test 68 4 S: (4, 'S')
    test 69 5 S: (5, 'S')
    test 70 6 S: (6, 'S')
    test 71 7 S: (7, 'S')
    test 72 8 S: (8, 'S')
    test 73 9 S: (9, 'S')
    test 74 10 S: (10, 'S')
    test 75 11 S: (11, 'S')
    test 76 12 S: (12, 'S')
    test 77 13 S: (13, 'S')
    test 78 14 S: (14, 'S')
    test 79 15 S: (15, 'S')
    test 80 16 S: (16, 'S')
    test 81 17 S: (17, 'S')
    test 82 18 S: (18, 'S')
    test 83 19 S: (19, 'S')
    test 84 20 S: (20, 'S')
    test 85 21 S: (21, 'S')
    test 86 22 S: (22, 'S')
    test 87 23 S: (23, 'S')
    test 88 24 S: (24, 'S')
    test 89 25 S: (25, 'S')
    test 90 26 S: (26, 'S')
    test 91 27 S: (27, 'S')
    test 92 28 S: (28, 'S')
    test 93 29 S: (29, 'S')
    test 94 30 S: (30, 'S')
    test 95 31 S: (31, 'S')
    test 96 32 S: (32, 'S')
    test 97 33 S: (33, 'S')
    test 98 34 S: (34, 'S')
    test 99 35 S: (35, 'S')
    test 100 36 S: (36, 'S')
    test 101 37 S: (37, 'S')
    test 102 38 S: (38, 'S')
    test 103 39 S: (39, 'S')
    test 104 40 S: (40, 'S')
    test 105 41 S: (41, 'S')
    test 106 42 S: (42, 'S')
    test 107 43 S: (43, 'S')
    test 108 44 S: (44, 'S')
    test 109 45 S: (45, 'S')
    test 110 46 S: (46, 'S')
    test 111 47 S: (47, 'S')
    test 112 48 S: (48, 'S')
    test 113 49 S: (49, 'S')
    test 114 50 S: (50, 'S')
    test 115 51 S: (51, 'S')
    test 116 52 S: (52, 'S')
    test 117 53 S: (53, 'S')
    test 118 54 S: (54, 'S')
    test 119 55 S: (55, 'S')
    test 120 56 S: (56, 'S')
    test 121 57 S: (57, 'S')
    test 122 58 S: (58, 'S')
    test 123 59 S: (59, 'S')
    test 124 60 S: (60, 'S')
    test 125 Ups: Epsg(32761)
    test 126 Ups: 00A S
    test 127 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 128 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 129 Ups: Epsg(32761)
    test 130 Ups: 00B S
    test 131 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 132 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 133 Ups: Epsg(32661)
    test 134 Ups: 00Y N
    test 135 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 136 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 137 Ups: Epsg(32661)
    test 138 Ups: 00Z N
    test 139 copy(Epsg): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 140 Epsg.copy(): (<class 'pygeodesy.epsg.Epsg'>, True)
    test 141 TMcoord 1: 38W N
    test 142 TMcoord 2: 34P N
    test 143 TMcoord 3: 43Q N
    test 144 TMcoord 4: 35Q N
    test 145 TMcoord 5: 37N N
    test 146 TMcoord 6: 34W N
    test 147 TMcoord 7: 40V N
    test 148 TMcoord 8: 34P N
    test 149 TMcoord 9: 41S N
    test 150 TMcoord 10: 41X N
    test 151 TMcoord 11: 43X N
    test 152 TMcoord 12: 44Q N
    test 153 TMcoord 13: 44R N
    test 154 TMcoord 14: 39U N
    test 155 TMcoord 15: 44P N
    test 156 TMcoord 16: 39R N
    test 157 TMcoord 17: 41W N
    test 158 TMcoord 18: 45U N
    test 159 TMcoord 19: 32R N
    test 160 TMcoord 20: 44X N
    test 161 TMcoord 21: 35T N
    test 162 TMcoord 22: 32T N
    test 163 TMcoord 23: 31T N
    test 164 TMcoord 24: 35N N
    test 165 TMcoord 25: 45P N
    test 166 TMcoord 26: 33V N
    test 167 TMcoord 27: 41Q N
    test 168 TMcoord 28: 40X N
    test 169 TMcoord 29: 33P N
    test 170 TMcoord 30: 40S N
    test 171 TMcoord 31: 37T N
    test 172 TMcoord 32: 33X N
    test 173 TMcoord 33: 41U N
    test 174 TMcoord 34: 43Q N
    test 175 TMcoord 35: 42S N
    test 176 TMcoord 36: 33S N
    test 177 TMcoord 37: 35X N
    test 178 TMcoord 38: 38N N
    test 179 TMcoord 39: 44P N
    test 180 TMcoord 40: 33U N
    test 181 TMcoord 41: 37W N
    test 182 TMcoord 42: 36T N
    test 183 TMcoord 43: 36Q N
    test 184 TMcoord 44: 34S N
    test 185 TMcoord 45: 37S N
    test 186 TMcoord 46: 34N N
    test 187 TMcoord 47: 34T N
    test 188 TMcoord 48: 43Q N
    test 189 TMcoord 49: 32N N
    test 190 TMcoord 50: 31Q N
    test 191 TMcoord 51: 45R N
    test 192 TMcoord 52: 45R N
    test 193 TMcoord 53: 34W N
    test 194 TMcoord 54: 44V N
    test 195 TMcoord 55: 44S N
    test 196 TMcoord 56: 39R N
    test 197 TMcoord 57: 00Z N
    test 198 TMcoord 58: 36R N
    test 199 TMcoord 59: 41V N
    test 200 TMcoord 60: 42N N
    test 201 TMcoord 61: 43S N
    test 202 TMcoord 62: 34N N
    test 203 TMcoord 63: 34U N
    test 204 TMcoord 64: 38V N
    test 205 TMcoord 65: 34Q N
    test 206 TMcoord 66: 38P N
    test 207 TMcoord 67: 42S N
    test 208 TMcoord 68: 44S N
    test 209 TMcoord 69: 31Q N
    test 210 TMcoord 70: 40W N
    test 211 TMcoord 71: 35X N
    test 212 TMcoord 72: 32T N
    test 213 TMcoord 73: 45U N
    test 214 TMcoord 74: 40Q N
    test 215 TMcoord 75: 31T N
    test 216 TMcoord 76: 44R N
    test 217 TMcoord 77: 34U N
    test 218 TMcoord 78: 38P N
    test 219 TMcoord 79: 38Q N
    test 220 TMcoord 80: 45N N
    test 221 TMcoord 81: 31S N
    test 222 TMcoord 82: 41U N
    test 223 TMcoord 83: 40V N
    test 224 TMcoord 84: 43X N
    test 225 TMcoord 85: 35N N
    test 226 TMcoord 86: 44P N
    test 227 TMcoord 87: 41N N
    test 228 TMcoord 88: 38Q N
    test 229 TMcoord 89: 43X N
    test 230 TMcoord 90: 36V N
    test 231 TMcoord 91: 34Q N
    test 232 TMcoord 92: 35W N
    test 233 TMcoord 93: 45U N
    test 234 TMcoord 94: 40R N
    test 235 TMcoord 95: 36R N
    test 236 TMcoord 96: 35S N
    test 237 TMcoord 97: 41R N
    test 238 TMcoord 98: 39Q N
    test 239 TMcoord 99: 37T N
    test 240 TMcoord 100: 42P N
    test 241 TMcoord 101: 35T N
    test 242 TMcoord 102: 34Q N
    test 243 TMcoord 103: 41T N
    test 244 TMcoord 104: 43R N
    test 245 TMcoord 105: 34Q N
    test 246 TMcoord 106: 45P N
    test 247 TMcoord 107: 31P N
    test 248 TMcoord 108: 44V N
    test 249 TMcoord 109: 42X N
    test 250 TMcoord 110: 33R N
    test 251 TMcoord 111: 37W N
    test 252 TMcoord 112: 31S N
    test 253 TMcoord 113: 42N N
    test 254 TMcoord 114: 39N N
    test 255 TMcoord 115: 39T N
    test 256 TMcoord 116: 39P N
    test 257 TMcoord 117: 34U N
    test 258 TMcoord 118: 41P N
    test 259 TMcoord 119: 37R N
    test 260 TMcoord 120: 44Q N
    test 261 TMcoord 121: 32V N
    test 262 TMcoord 122: 41R N
    test 263 TMcoord 123: 36T N
    test 264 TMcoord 124: 42U N
    test 265 TMcoord 125: 42U N
    test 266 TMcoord 126: 39T N
    test 267 TMcoord 127: 32T N
    test 268 TMcoord 128: 32Q N
    test 269 TMcoord 129: 38P N
    test 270 TMcoord 130: 34Q N
    test 271 TMcoord 131: 36V N
    test 272 TMcoord 132: 36T N
    test 273 TMcoord 133: 43T N
    test 274 TMcoord 134: 41W N
    test 275 TMcoord 135: 32V N
    test 276 TMcoord 136: 39X N
    test 277 TMcoord 137: 32U N
    test 278 TMcoord 138: 37X N
    test 279 TMcoord 139: 35N N
    test 280 TMcoord 140: 36P N
    test 281 TMcoord 141: 31S N
    test 282 TMcoord 142: 36N N
    test 283 TMcoord 143: 42S N
    test 284 TMcoord 144: 44N N
    test 285 TMcoord 145: 44P N
    test 286 TMcoord 146: 39U N
    test 287 TMcoord 147: 45Q N
    test 288 TMcoord 148: 41W N
    test 289 TMcoord 149: 41N N
    test 290 TMcoord 150: 32S N
    test 291 TMcoord 151: 32N N
    test 292 TMcoord 152: 32T N
    test 293 TMcoord 153: 38R N
    test 294 TMcoord 154: 32V N
    test 295 TMcoord 155: 37Q N
    test 296 TMcoord 156: 44N N
    test 297 TMcoord 157: 34W N
    test 298 TMcoord 158: 45N N
    test 299 TMcoord 159: 42S N
    test 300 TMcoord 160: 40T N
    test 301 TMcoord 161: 31U N
    test 302 TMcoord 162: 45Q N
    test 303 TMcoord 163: 40U N
    test 304 TMcoord 164: 45T N
    test 305 TMcoord 165: 40R N
    test 306 TMcoord 166: 31V N
    test 307 TMcoord 167: 45P N
    test 308 TMcoord 168: 43W N
    test 309 TMcoord 169: 43U N
    test 310 TMcoord 170: 44V N
    test 311 TMcoord 171: 40P N
    test 312 TMcoord 172: 36Q N
    test 313 TMcoord 173: 42Q N
    test 314 TMcoord 174: 41Q N
    test 315 TMcoord 175: 32S N
    test 316 TMcoord 176: 39P N
    test 317 TMcoord 177: 39Q N
    test 318 TMcoord 178: 39T N
    test 319 TMcoord 179: 34U N
    test 320 TMcoord 180: 32W N
    test 321 TMcoord 181: 41U N
    test 322 TMcoord 182: 31Q N
    test 323 TMcoord 183: 40N N
    test 324 TMcoord 184: 40T N
    test 325 TMcoord 185: 38P N
    test 326 TMcoord 186: 44P N
    test 327 TMcoord 187: 40N N
    test 328 TMcoord 188: 44V N
    test 329 TMcoord 189: 41V N
    test 330 TMcoord 190: 43Q N
    test 331 TMcoord 191: 43X N
    test 332 TMcoord 192: 39N N
    test 333 TMcoord 193: 38T N
    test 334 TMcoord 194: 32R N
    test 335 TMcoord 195: 37S N
    test 336 TMcoord 196: 44W N
    test 337 TMcoord 197: 43V N
    test 338 TMcoord 198: 35T N
    test 339 TMcoord 199: 44W N
    test 340 TMcoord 200: 44X N
    test 341 TMcoord 201: 33Q N
    test 342 TMcoord 202: 40W N
    test 343 TMcoord 203: 43S N
    test 344 TMcoord 204: 32U N
    test 345 TMcoord 205: 33V N
    test 346 TMcoord 206: 34R N
    test 347 TMcoord 207: 39S N
    test 348 TMcoord 208: 43W N
    test 349 TMcoord 209: 39T N
    test 350 TMcoord 210: 31W N
    test 351 TMcoord 211: 45R N
    test 352 TMcoord 212: 34W N
    test 353 TMcoord 213: 32T N
    test 354 TMcoord 214: 31P N
    test 355 TMcoord 215: 44V N
    test 356 TMcoord 216: 45U N
    test 357 TMcoord 217: 43R N
    test 358 TMcoord 218: 31N N
    test 359 TMcoord 219: 43T N
    test 360 TMcoord 220: 45R N
    test 361 TMcoord 221: 39N N
    test 362 TMcoord 222: 37S N
    test 363 TMcoord 223: 31R N
    test 364 TMcoord 224: 38Q N
    test 365 TMcoord 225: 40V N
    test 366 TMcoord 226: 45N N
    test 367 TMcoord 227: 44R N
    test 368 TMcoord 228: 43P N
    test 369 TMcoord 229: 42P N
    test 370 TMcoord 230: 45S N
    test 371 TMcoord 231: 42N N
    test 372 TMcoord 232: 38S N
    test 373 TMcoord 233: 32T N
    test 374 TMcoord 234: 41T N
    test 375 TMcoord 235: 34S N
    test 376 TMcoord 236: 40R N
    test 377 TMcoord 237: 35V N
    test 378 TMcoord 238: 38N N
    test 379 TMcoord 239: 40V N
    test 380 TMcoord 240: 36R N
    test 381 TMcoord 241: 37W N
    test 382 TMcoord 242: 45R N
    test 383 TMcoord 243: 37V N
    test 384 TMcoord 244: 33P N
    test 385 TMcoord 245: 32U N
    test 386 TMcoord 246: 38T N
    test 387 TMcoord 247: 37N N
    test 388 TMcoord 248: 36R N
    test 389 TMcoord 249: 44R N
    test 390 TMcoord 250: 44Q N
    test 391 TMcoord 251: 45R N
    test 392 TMcoord 252: 34N N
    test 393 TMcoord 253: 43S N
    test 394 TMcoord 254: 40Q N
    test 395 TMcoord 255: 33T N
    test 396 TMcoord 256: 44P N
    test 397 TMcoord 257: 39N N
    test 398 TMcoord 258: 40Q N

    all 398 testEpsg.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 49.310 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testErrors.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.crosserrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.exception_chaining from .errors by testErrors.py line 11
# lazily imported pygeodesy.LenError from .errors by testErrors.py line 11
# lazily imported pygeodesy.LimitError from .errors by testErrors.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.RangeError from .errors by testErrors.py line 11
# lazily imported pygeodesy.rangerrors from .errors by testErrors.py line 11
# lazily imported pygeodesy.ClipError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CrossError from .errors by testErrors.py line 93
# lazily imported pygeodesy.CSSError from .css by testErrors.py line 93
# lazily imported pygeodesy.EcefError from .ecef by testErrors.py line 93
# lazily imported pygeodesy.EllipticError from .elliptic by testErrors.py line 93
# lazily imported pygeodesy.EPSGError from .epsg by testErrors.py line 93
# lazily imported pygeodesy.ETMError from .etm by testErrors.py line 93
# lazily imported pygeodesy.FrechetError from .frechet by testErrors.py line 93
# lazily imported pygeodesy.GARSError from .gars by testErrors.py line 93
# lazily imported pygeodesy.GeohashError from .geohash by testErrors.py line 93
# lazily imported pygeodesy.GeoidError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.HausdorffError from .hausdorff by testErrors.py line 93
# lazily imported pygeodesy.HeightError from .heights by testErrors.py line 93
# lazily imported pygeodesy.LCCError from .lcc by testErrors.py line 93
# lazily imported pygeodesy.MGRSError from .errors by testErrors.py line 93
# lazily imported pygeodesy.OSGRError from .osgr by testErrors.py line 93
# lazily imported pygeodesy.PGMError from .geoids by testErrors.py line 93
# lazily imported pygeodesy.PointsError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyError from .errors by testErrors.py line 93
# lazily imported pygeodesy.SciPyWarning from .errors by testErrors.py line 93
# lazily imported pygeodesy.TRFError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UnitError from .errors by testErrors.py line 93
# lazily imported pygeodesy.UPSError from .ups by testErrors.py line 93
# lazily imported pygeodesy.UTMError from .utm by testErrors.py line 93
# lazily imported pygeodesy.UTMUPSError from .utmups by testErrors.py line 93
# lazily imported pygeodesy.VectorError from .errors by testErrors.py line 93
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testErrors.py line 93
# lazily imported pygeodesy.WebMercatorError from .webmercator by testErrors.py line 93
# lazily imported pygeodesy.WGRSError from .wgrs by testErrors.py line 93

    testing testErrors.py 23.03.27 (module pygeodesy.errors 23.04.11) isLazy=3
    test 1 AssertionError: name ('value'): test1 txt
    test 2 AssertionError: 'name=value' MISSING: test2 txt
    test 3 AttributeError: name ('value'): test1 txt
    test 4 AttributeError: 'name=value' MISSING: test2 txt
    test 5 IndexError: name ('value'): test1 txt
    test 6 IndexError: 'name=value' MISSING: test2 txt
    test 7 LimitError: name ('value'): test1 txt
    test 8 LimitError: 'name=value' MISSING: test2 txt
    test 9 NameError: name ('value'): test1 txt
    test 10 NameError: 'name=value' MISSING: test2 txt
    test 11 ParseError: name ('value'): test1 txt
    test 12 ParseError: 'name=value' MISSING: test2 txt
    test 13 TypeError: type(name) ('value'): test1 txt
    test 14 TypeError: 'name=value' MISSING: test2 txt
    test 15 ClipError: name ('value'): test1 txt
    test 16 ClipError: 'name=value' MISSING: test2 txt
    test 17 CrossError: name ('value'): test1 txt
    test 18 CrossError: 'name=value' MISSING: test2 txt
    test 19 CSSError: name ('value'): test1 txt
    test 20 CSSError: 'name=value' MISSING: test2 txt
    test 21 EcefError: name ('value'): test1 txt
    test 22 EcefError: 'name=value' MISSING: test2 txt
    test 23 EllipticError: name ('value'): test1 txt
    test 24 EllipticError: 'name=value' MISSING: test2 txt
    test 25 EPSGError: name ('value'): test1 txt
    test 26 EPSGError: 'name=value' MISSING: test2 txt
    test 27 ETMError: name ('value'): test1 txt
    test 28 ETMError: 'name=value' MISSING: test2 txt
    test 29 FrechetError: name ('value'): test1 txt
    test 30 FrechetError: 'name=value' MISSING: test2 txt
    test 31 GARSError: name ('value'): test1 txt
    test 32 GARSError: 'name=value' MISSING: test2 txt
    test 33 GeohashError: name ('value'): test1 txt
    test 34 GeohashError: 'name=value' MISSING: test2 txt
    test 35 GeoidError: name ('value'): test1 txt
    test 36 GeoidError: 'name=value' MISSING: test2 txt
    test 37 HausdorffError: name ('value'): test1 txt
    test 38 HausdorffError: 'name=value' MISSING: test2 txt
    test 39 HeightError: name ('value'): test1 txt
    test 40 HeightError: 'name=value' MISSING: test2 txt
    test 41 LazyImportError: name ('value'): test1 txt
    test 42 LazyImportError: 'name=value' MISSING: test2 txt
    test 43 LCCError: name ('value'): test1 txt
    test 44 LCCError: 'name=value' MISSING: test2 txt
    test 45 MGRSError: name ('value'): test1 txt
    test 46 MGRSError: 'name=value' MISSING: test2 txt
    test 47 OSGRError: name ('value'): test1 txt
    test 48 OSGRError: 'name=value' MISSING: test2 txt
    test 49 PGMError: name ('value'): test1 txt
    test 50 PGMError: 'name=value' MISSING: test2 txt
    test 51 PointsError: name ('value'): test1 txt
    test 52 PointsError: 'name=value' MISSING: test2 txt
    test 53 SciPyError: name ('value'): test1 txt
    test 54 SciPyError: 'name=value' MISSING: test2 txt
    test 55 SciPyWarning: name ('value'): test1 txt
    test 56 SciPyWarning: 'name=value' MISSING: test2 txt
    test 57 TRFError: name ('value'): test1 txt
    test 58 TRFError: 'name=value' MISSING: test2 txt
    test 59 UnitError: name ('value'): test1 txt
    test 60 UnitError: 'name=value' MISSING: test2 txt
    test 61 UPSError: name ('value'): test1 txt
    test 62 UPSError: 'name=value' MISSING: test2 txt
    test 63 UTMError: name ('value'): test1 txt
    test 64 UTMError: 'name=value' MISSING: test2 txt
    test 65 UTMUPSError: name ('value'): test1 txt
    test 66 UTMUPSError: 'name=value' MISSING: test2 txt
    test 67 VectorError: name ('value'): test1 txt
    test 68 VectorError: 'name=value' MISSING: test2 txt
    test 69 VincentyError: name ('value'): test1 txt
    test 70 VincentyError: 'name=value' MISSING: test2 txt
    test 71 WebMercatorError: name ('value'): test1 txt
    test 72 WebMercatorError: 'name=value' MISSING: test2 txt
    test 73 WGRSError: name ('value'): test1 txt
    test 74 WGRSError: 'name=value' MISSING: test2 txt
    test 75 _InvalidError: zero (1): invalid
    test 76 _InvalidError: ValueError('zero (1): invalid')
    test 77 _InvalidError: one (2) or zero (1): outside
    test 78 _InvalidError: ValueError('one (2) or zero (1): outside')
    test 79 _InvalidError: one (2) or zero (1): outside
    test 80 _InvalidError: RangeError('one (2) or zero (1): outside')
    test 81 _IsnotError: _None (None): not an int or float
    test 82 _IsnotError: TypeError('_None (None): not an int or float')
    test 83 _IsnotError: _None (None): not a scalar
    test 84 _IsnotError: TypeError('_None (None): not a scalar')
    test 85 _IsnotError: _None (None): not a scalar
    test 86 _IsnotError: LimitError('_None (None): not a scalar')
    test 87 LenError: LenError(a, b, c, d) len 1 vs 2 vs 3 vs 4: invalid
    test 88 crosserrors: True
    test 89 crosserrors: False
    test 90 limiterrors: True
    test 91 limiterrors: False
    test 92 rangerrors: True
    test 93 rangerrors: False
    test 94 exception_chaining: False
    test 95 exception_chaining: None
    test 96 exception_chaining: None
    test 97 _xkwds_get: test1
    test 98 _xkwds_get: test2
    test 99 _xkwds_get: _xkwds_get(): no name=default kwargs
    test 100 _xkwds_get: _xkwds_get(n1='d1', n2='d2'): multiple name=default kwargs
    test 101 _xkwds_pop: test1
    test 102 _xkwds_pop: test2
    test 103 _xkwds_pop: _xkwds_pop(): no name=default kwargs
    test 104 _xkwds_pop: _xkwds_pop(n1='d1', n2='d2'): multiple name=default kwargs

    all 104 testErrors.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 936.747 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.etm by testEtm.py line 11
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testEtm.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testEtm.py line 115
# lazily imported pygeodesy.ellipsoidalVincenty by testEtm.py line 115

    testing testEtm.py 23.03.27 (module pygeodesy.etm 22.10.12) isLazy=3

    testExactTransverseMercator(pygeodesy.etm, 22.10.12)
    test 1 name: test
    test 2 toStr: datum='WGS84', extendp=True, k0=0.9996, lon0=0.0, name='test'
    test 3 easting: -59401.921148
    test 4 northing: 4472390.031129
    test 5 gamma: -0.453697
    test 6 scale: 0.999643
    test 7 lat: 40.400000
    test 8 lon: -3.700000
    test 9 gamma: -0.453697
    test 10 scale: 0.999643
    test 11 easting: -59401.921148
    test 12 northing: 4472390.031129
    test 13 gamma: -0.453697
    test 14 scale: 0.999643
    test 15 easting: 25495.511523
    test 16 northing: 4461098.320889
    test 17 gamma: 0.194038
    test 18 scale: 0.999608
    test 19 lat: 40.300000
    test 20 lon: -74.700000
    test 21 gamma: 0.194038
    test 22 scale: 0.999608
    test 23 easting: 25495.511523
    test 24 northing: 4461098.320889
    test 25 gamma: 0.194038
    test 26 scale: 0.999608
    test 27 lat: -2.00000000
    test 28 lon: 88.00000000
    test 29 gamma: 67.63332900
    test 30 scale: 26.33699547
    test 31 easting: 29735142.37835701  FAILED, KNOWN, expected 29735142.37835703
    test 32 northing: 4235043.60793303  FAILED, KNOWN, expected 4235043.60793304
    test 33 gamma: 67.63332900
    test 34 scale: 26.33699547
    test 35 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 36 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testExactTransverseMercator(pygeodesy.etm, 22.10.12)
    test 37 name: test
    test 38 toStr: datum='WGS84', extendp=False, k0=0.9996, lon0=0.0, name='test'
    test 39 easting: -59401.921148
    test 40 northing: 4472390.031129
    test 41 gamma: -0.453697
    test 42 scale: 0.999643
    test 43 lat: 40.400000
    test 44 lon: -3.700000
    test 45 gamma: -0.453697
    test 46 scale: 0.999643
    test 47 easting: -59401.921148
    test 48 northing: 4472390.031129
    test 49 gamma: -0.453697
    test 50 scale: 0.999643
    test 51 easting: 25495.511523
    test 52 northing: 4461098.320889
    test 53 gamma: 0.194038
    test 54 scale: 0.999608
    test 55 lat: 40.300000
    test 56 lon: -74.700000
    test 57 gamma: 0.194038
    test 58 scale: 0.999608
    test 59 easting: 25495.511523
    test 60 northing: 4461098.320889
    test 61 gamma: 0.194038
    test 62 scale: 0.999608
    test 63 lat: -2.00000000
    test 64 lon: 88.00000000
    test 65 gamma: 67.63332900
    test 66 scale: 26.33699547
    test 67 easting: 0.000
    test 68 northing: -9997964.943
    test 69 gamma: 120.000
    test 70 scale: 1.000
    test 71 lat: -90.000
    test 72 lon: 0.000
    test 73 gamma: 0.000
    test 74 scale: 1.000
    test 75 copy(ExactTransverseMercator): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)
    test 76 ExactTransverseMercator.copy(): (<class 'pygeodesy.etm.ExactTransverseMercator'>, True)

    testLatLon(pygeodesy.etm, 22.10.12)
    test 77 toEtm8: 45 S -20297797 5336899
    test 78 name: test
    test 79 toUtm: 45 S -20297797 5336899
    test 80 name: test
    test 81 toETM5: 45 S -20297797 5336899
    test 82 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 83 .name: test
    test 84 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 85 .name: test
    test 86 parse: 31 N 448251 5411932
    test 87 name: parse
    test 88 parse: 31 N 448251 5411932
    test 89 name: parse

    testLatLon(pygeodesy.etm, 22.10.12)
    test 90 toEtm8: 45 S -20297797 5336899
    test 91 name: test
    test 92 toUtm: 45 S -20297797 5336899
    test 93 name: test
    test 94 toETM5: 45 S -20297797 5336899
    test 95 copy(Etm): (<class 'pygeodesy.etm.Etm'>, True)
    test 96 .name: test
    test 97 Etm.copy(): (<class 'pygeodesy.etm.Etm'>, True)
    test 98 .name: test
    test 99 parse: 31 N 448251 5411932
    test 100 name: parse
    test 101 parse: 31 N 448251 5411932
    test 102 name: parse

    2 of 102 testEtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 58.364 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testEtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.Etm from .etm by testEtmTMcoords.py line 17
# lazily imported pygeodesy.toEtm8 from .etm by testEtmTMcoords.py line 17

    testing testEtmTMcoords.py 23.03.27 (module pygeodesy.etm 22.10.12) isLazy=3
    test 1 line 1 toEtm8.easting: 1548706.791619
    test 2 line 1 toEtm8.northing: 8451449.198772
    test 3 line 1 toEtm8.gamma: 43.922790
    test 4 line 1 toEtm8.scale: 1.029060
    test 5 line 1 toEtm8.lat: 70.579277
    test 6 line 1 toEtm8.lon: 45.599420
    test 7 line 2 toEtm8.easting: 2624150.740929
    test 8 line 2 toEtm8.northing: 1204434.041605
    test 9 line 2 toEtm8.gamma: 4.292619
    test 10 line 2 toEtm8.scale: 1.086051
    test 11 line 2 toEtm8.lat: 10.018894
    test 12 line 2 toEtm8.lon: 23.313324
    test 13 line 3 toEtm8.easting: 9855841.232935
    test 14 line 3 toEtm8.northing: 6145496.115155
    test 15 line 3 toEtm8.gamma: 53.348315
    test 16 line 3 toEtm8.scale: 2.445098
    test 17 line 3 toEtm8.lat: 19.479896
    test 18 line 3 toEtm8.lon: 75.662049
    test 19 line 4 toEtm8.easting: 3206390.691996
    test 20 line 4 toEtm8.northing: 2650745.400406
    test 21 line 4 toEtm8.gamma: 11.666950
    test 22 line 4 toEtm8.scale: 1.129359
    test 23 line 4 toEtm8.lat: 21.072465
    test 24 line 4 toEtm8.lon: 29.828684
    test 25 line 5 toEtm8.easting: 4328154.083501
    test 26 line 5 toEtm8.northing: 749647.623690
    test 27 line 5 toEtm8.gamma: 4.024317
    test 28 line 5 toEtm8.scale: 1.240829
    test 29 line 5 toEtm8.lat: 5.458957
    test 30 line 5 toEtm8.lon: 36.385237
    test 31 line 6 toEtm8.easting: 847598.266514
    test 32 line 6 toEtm8.northing: 7947180.962440
    test 33 line 6 toEtm8.gamma: 21.639091
    test 34 line 6 toEtm8.scale: 1.008399
    test 35 line 6 toEtm8.lat: 70.175454
    test 36 line 6 toEtm8.lon: 22.865350
    test 37 line 7 toEtm8.easting: 2727657.337974
    test 38 line 7 toEtm8.northing: 8283916.696410
    test 39 line 7 toEtm8.gamma: 55.690909
    test 40 line 7 toEtm8.scale: 1.091942
    test 41 line 7 toEtm8.lat: 61.965605
    test 42 line 7 toEtm8.lon: 58.931371
    test 43 line 8 toEtm8.easting: 2331001.751890
    test 44 line 8 toEtm8.northing: 1313608.224751
    test 45 line 8 toEtm8.gamma: 4.214690
    test 46 line 8 toEtm8.scale: 1.067599
    test 47 line 8 toEtm8.lat: 11.116050
    test 48 line 8 toEtm8.lon: 20.901069
    test 49 line 9 toEtm8.easting: 6035557.239480
    test 50 line 9 toEtm8.northing: 5791770.791879
    test 51 line 9 toEtm8.gamma: 43.698170
    test 52 line 9 toEtm8.scale: 1.481260
    test 53 line 9 toEtm8.lat: 32.210543
    test 54 line 9 toEtm8.lon: 60.705849
    test 55 line 10 toEtm8.easting: 1064553.125852
    test 56 line 10 toEtm8.northing: 9417273.737208
    test 57 line 10 toEtm8.gamma: 61.100380
    test 58 line 10 toEtm8.scale: 1.013475
    test 59 line 10 toEtm8.lat: 79.187451
    test 60 line 10 toEtm8.lon: 61.532382
    test 61 line 11 toEtm8.easting: 1400137.116164
    test 62 line 11 toEtm8.northing: 9616907.017686
    test 63 line 11 toEtm8.gamma: 74.527087
    test 64 line 11 toEtm8.scale: 1.023640
    test 65 line 11 toEtm8.lat: 77.103759
    test 66 line 11 toEtm8.lon: 74.899105
    test 67 line 12 toEtm8.easting: 9860691.016626
    test 68 line 12 toEtm8.northing: 7433039.143328
    test 69 line 12 toEtm8.gamma: 65.357693
    test 70 line 12 toEtm8.scale: 2.438973
    test 71 line 12 toEtm8.lat: 21.889514
    test 72 line 12 toEtm8.lon: 80.019886
    test 73 line 13 toEtm8.easting: 8076501.833695
    test 74 line 13 toEtm8.northing: 8561614.174782
    test 75 line 13 toEtm8.gamma: 75.073393
    test 76 line 13 toEtm8.scale: 1.906202
    test 77 line 13 toEtm8.lat: 30.536296
    test 78 line 13 toEtm8.lon: 82.186178
    test 79 line 14 toEtm8.easting: 3335099.866623
    test 80 line 14 toEtm8.northing: 6740519.084015
    test 81 line 14 toEtm8.gamma: 40.611821
    test 82 line 14 toEtm8.scale: 1.139021
    test 83 line 14 toEtm8.lat: 49.990485
    test 84 line 14 toEtm8.lon: 48.203179
    test 85 line 15 toEtm8.easting: 12051574.928500
    test 86 line 15 toEtm8.northing: 6587213.051951
    test 87 line 15 toEtm8.gamma: 59.033237
    test 88 line 15 toEtm8.scale: 3.357469
    test 89 line 15 toEtm8.lat: 14.486312
    test 90 line 15 toEtm8.lon: 80.905137
    test 91 line 16 toEtm8.easting: 5387578.735298
    test 92 line 16 toEtm8.northing: 4111216.907168
    test 93 line 16 toEtm8.gamma: 27.574337
    test 94 line 16 toEtm8.scale: 1.379357
    test 95 line 16 toEtm8.lat: 25.936824
    test 96 line 16 toEtm8.lon: 49.913598
    test 97 line 17 toEtm8.easting: 2622214.380233
    test 98 line 17 toEtm8.northing: 8678923.984567
    test 99 line 17 toEtm8.gamma: 61.697275
    test 100 line 17 toEtm8.scale: 1.084810
    test 101 line 17 toEtm8.lat: 64.402196
    test 102 line 17 toEtm8.lon: 64.091395
    test 103 line 18 toEtm8.easting: 5068474.169633
    test 104 line 18 toEtm8.northing: 9492066.993709
    test 105 line 18 toEtm8.gamma: 83.156740
    test 106 line 18 toEtm8.scale: 1.329990
    test 107 line 18 toEtm8.lat: 48.451354
    test 108 line 18 toEtm8.lon: 84.856198
    test 109 line 19 toEtm8.easting: 738062.047779
    test 110 line 19 toEtm8.northing: 3031007.074116
    test 111 line 19 toEtm8.gamma: 3.416802
    test 112 line 19 toEtm8.scale: 1.006332
    test 113 line 19 toEtm8.lat: 27.203895
    test 114 line 19 toEtm8.lon: 7.440229
    test 115 line 20 toEtm8.easting: 1944413.834565
    test 116 line 20 toEtm8.northing: 9613299.224493
    test 117 line 20 toEtm8.gamma: 78.462831
    test 118 line 20 toEtm8.scale: 1.046134
    test 119 line 20 toEtm8.lat: 72.509000
    test 120 line 20 toEtm8.lon: 78.982283
    test 121 line 21 toEtm8.easting: 2114521.418406
    test 122 line 21 toEtm8.northing: 4954077.440098
    test 123 line 21 toEtm8.gamma: 17.571878
    test 124 line 21 toEtm8.scale: 1.055093
    test 125 line 21 toEtm8.lat: 41.824954
    test 126 line 21 toEtm8.lon: 25.392744
    test 127 line 22 toEtm8.easting: 620365.905090
    test 128 line 22 toEtm8.northing: 4755542.026562
    test 129 line 22 toEtm8.gamma: 5.152022
    test 130 line 22 toEtm8.scale: 1.004338
    test 131 line 22 toEtm8.lat: 42.701376
    test 132 line 22 toEtm8.lon: 7.572738
    test 133 line 23 toEtm8.easting: 263004.770989
    test 134 line 23 toEtm8.northing: 4493669.762451
    test 135 line 23 toEtm8.gamma: 2.020523
    test 136 line 23 toEtm8.scale: 1.000452
    test 137 line 23 toEtm8.lat: 40.552052
    test 138 line 23 toEtm8.lon: 3.106056
    test 139 line 24 toEtm8.easting: 3217221.739462
    test 140 line 24 toEtm8.northing: 437776.119161
    test 141 line 24 toEtm8.gamma: 1.848169
    test 142 line 24 toEtm8.scale: 1.130558
    test 143 line 24 toEtm8.lat: 3.501242
    test 144 line 24 toEtm8.lon: 27.806507
    test 145 line 25 toEtm8.easting: 14661142.444961
    test 146 line 25 toEtm8.northing: 7476100.824185
    test 147 line 25 toEtm8.gamma: 68.376669
    test 148 line 25 toEtm8.scale: 4.896650
    test 149 line 25 toEtm8.lat: 10.148715
    test 150 line 25 toEtm8.lon: 85.373768
    test 151 line 26 toEtm8.easting: 967777.158554
    test 152 line 26 toEtm8.northing: 6615684.266592
    test 153 line 26 toEtm8.gamma: 14.410044
    test 154 line 26 toEtm8.scale: 1.011100
    test 155 line 26 toEtm8.lat: 58.582623
    test 156 line 26 toEtm8.lon: 16.755558
    test 157 line 27 toEtm8.easting: 7558840.728461
    test 158 line 27 toEtm8.northing: 4144728.130764
    test 159 line 27 toEtm8.gamma: 32.557264
    test 160 line 27 toEtm8.scale: 1.791490
    test 161 line 27 toEtm8.lat: 19.793004
    test 162 line 27 toEtm8.lon: 61.746763
    test 163 line 28 toEtm8.easting: 1056008.314161
    test 164 line 28 toEtm8.northing: 9290799.692669
    test 165 line 28 toEtm8.gamma: 55.843278
    test 166 line 28 toEtm8.scale: 1.013253
    test 167 line 28 toEtm8.lat: 78.666776
    test 168 line 28 toEtm8.lon: 56.365355
    test 169 line 29 toEtm8.easting: 1943965.134687
    test 170 line 29 toEtm8.northing: 1389972.228690
    test 171 line 29 toEtm8.gamma: 3.774869
    test 172 line 29 toEtm8.scale: 1.046724
    test 173 line 29 toEtm8.lat: 11.998788
    test 174 line 29 toEtm8.lon: 17.597873
    test 175 line 30 toEtm8.easting: 5803077.072902
    test 176 line 30 toEtm8.northing: 5649957.943659
    test 177 line 30 toEtm8.gamma: 41.717943
    test 178 line 30 toEtm8.scale: 1.442572
    test 179 line 30 toEtm8.lat: 32.540378
    test 180 line 30 toEtm8.lon: 58.764613
    test 181 line 31 toEtm8.easting: 2928716.986009
    test 182 line 31 toEtm8.northing: 5731835.058317
    test 183 line 31 toEtm8.gamma: 28.538550
    test 184 line 31 toEtm8.scale: 1.106780
    test 185 line 31 toEtm8.lat: 45.160356
    test 186 line 31 toEtm8.lon: 37.465285
    test 187 line 32 toEtm8.easting: 326141.975756
    test 188 line 32 toEtm8.northing: 8881325.164543
    test 189 line 32 toEtm8.gamma: 16.111415
    test 190 line 32 toEtm8.scale: 1.000900
    test 191 line 32 toEtm8.lat: 79.584190
    test 192 line 32 toEtm8.lon: 16.367006
    test 193 line 33 toEtm8.easting: 3933015.267450
    test 194 line 33 toEtm8.northing: 7932373.909512
    test 195 line 33 toEtm8.gamma: 58.577424
    test 196 line 33 toEtm8.scale: 1.194811
    test 197 line 33 toEtm8.lat: 52.470664
    test 198 line 33 toEtm8.lon: 64.125580
    test 199 line 34 toEtm8.easting: 8598926.983213
    test 200 line 34 toEtm8.northing: 6214135.167503
    test 201 line 34 toEtm8.gamma: 52.612878
    test 202 line 34 toEtm8.scale: 2.051367
    test 203 line 34 toEtm8.lat: 23.702673
    test 204 line 34 toEtm8.lon: 72.630363
    test 205 line 35 toEtm8.easting: 6620553.333772
    test 206 line 35 toEtm8.northing: 6540527.122948
    test 207 line 35 toEtm8.gamma: 52.350140
    test 208 line 35 toEtm8.scale: 1.586614
    test 209 line 35 toEtm8.lat: 32.603520
    test 210 line 35 toEtm8.lon: 67.280123
    test 211 line 36 toEtm8.easting: 1515136.758292
    test 212 line 36 toEtm8.northing: 3858996.087537
    test 213 line 36 toEtm8.gamma: 9.225127
    test 214 line 36 toEtm8.scale: 1.028029
    test 215 line 36 toEtm8.lat: 33.776224
    test 216 line 36 toEtm8.lon: 16.280993
    test 217 line 37 toEtm8.easting: 479854.373445
    test 218 line 37 toEtm8.northing: 8980501.389896
    test 219 line 37 toEtm8.gamma: 25.021222
    test 220 line 37 toEtm8.scale: 1.002415
    test 221 line 37 toEtm8.lat: 79.932747
    test 222 line 37 toEtm8.lon: 25.363622
    test 223 line 38 toEtm8.easting: 5243446.564940
    test 224 line 38 toEtm8.northing: 140657.213960
    test 225 line 38 toEtm8.gamma: 0.862817
    test 226 line 38 toEtm8.scale: 1.360358
    test 227 line 38 toEtm8.lat: 0.935056
    test 228 line 38 toEtm8.lon: 42.538824
    test 229 line 39 toEtm8.easting: 12806457.923218
    test 230 line 39 toEtm8.northing: 7170118.684675
    test 231 line 39 toEtm8.gamma: 64.708921
    test 232 line 39 toEtm8.scale: 3.740588
    test 233 line 39 toEtm8.lat: 13.490862
    test 234 line 39 toEtm8.lon: 83.178380
    test 235 line 40 toEtm8.easting: 1202993.459158
    test 236 line 40 toEtm8.northing: 5557316.053599
    test 237 line 40 toEtm8.gamma: 12.579061
    test 238 line 40 toEtm8.scale: 1.017426
    test 239 line 40 toEtm8.lat: 48.979057
    test 240 line 40 toEtm8.lon: 16.474542
    test 241 line 41 toEtm8.easting: 1729088.710196
    test 242 line 41 toEtm8.northing: 7770874.289954
    test 243 line 41 toEtm8.gamma: 36.021783
    test 244 line 41 toEtm8.scale: 1.036397
    test 245 line 41 toEtm8.lat: 65.036016
    test 246 line 41 toEtm8.lon: 38.729091
    test 247 line 42 toEtm8.easting: 2437301.517425
    test 248 line 42 toEtm8.northing: 5539327.748318
    test 249 line 42 toEtm8.gamma: 23.461879
    test 250 line 42 toEtm8.scale: 1.073459
    test 251 line 42 toEtm8.lat: 45.510091
    test 252 line 42 toEtm8.lon: 31.303729
    test 253 line 43 toEtm8.easting: 3647186.135066
    test 254 line 43 toEtm8.northing: 2086412.330983
    test 255 line 43 toEtm8.gamma: 10.023991
    test 256 line 43 toEtm8.scale: 1.168707
    test 257 line 43 toEtm8.lat: 16.058010
    test 258 line 43 toEtm8.lon: 32.520026
    test 259 line 44 toEtm8.easting: 1818497.243556
    test 260 line 44 toEtm8.northing: 4275471.745057
    test 261 line 44 toEtm8.gamma: 12.499656
    test 262 line 44 toEtm8.scale: 1.040604
    test 263 line 44 toEtm8.lat: 36.845200
    test 264 line 44 toEtm8.lon: 20.282283
    test 265 line 45 toEtm8.easting: 3751304.113783
    test 266 line 45 toEtm8.northing: 5130454.001592
    test 267 line 45 toEtm8.gamma: 28.959707
    test 268 line 45 toEtm8.scale: 1.177681
    test 269 line 45 toEtm8.lat: 37.865481
    test 270 line 45 toEtm8.lon: 41.990402
    test 271 line 46 toEtm8.easting: 2616733.138544
    test 272 line 46 toEtm8.northing: 394644.463815
    test 273 line 46 toEtm8.gamma: 1.390425
    test 274 line 46 toEtm8.scale: 1.085595
    test 275 line 46 toEtm8.lat: 3.287272
    test 276 line 46 toEtm8.lon: 22.917604
    test 277 line 47 toEtm8.easting: 1756506.573942
    test 278 line 47 toEtm8.northing: 5570393.986394
    test 279 line 47 toEtm8.gamma: 17.897894
    test 280 line 47 toEtm8.scale: 1.037732
    test 281 line 47 toEtm8.lat: 47.813686
    test 282 line 47 toEtm8.lon: 23.545092
    test 283 line 48 toEtm8.easting: 8752461.894711
    test 284 line 48 toEtm8.northing: 6087728.152284
    test 285 line 48 toEtm8.gamma: 51.628465
    test 286 line 48 toEtm8.scale: 2.095465
    test 287 line 48 toEtm8.lat: 22.836853
    test 288 line 48 toEtm8.lon: 72.604385
    test 289 line 49 toEtm8.easting: 1309272.216432
    test 290 line 49 toEtm8.northing: 59520.028899
    test 291 line 49 toEtm8.gamma: 0.109069
    test 292 line 49 toEtm8.scale: 1.020897
    test 293 line 49 toEtm8.lat: 0.527262
    test 294 line 49 toEtm8.lon: 11.684209
    test 295 line 50 toEtm8.easting: 328652.277129
    test 296 line 50 toEtm8.northing: 2233043.958874
    test 297 line 50 toEtm8.gamma: 1.084863
    test 298 line 50 toEtm8.scale: 1.000935
    test 299 line 50 toEtm8.lat: 20.166742
    test 300 line 50 toEtm8.lon: 3.143948
    test 301 line 51 toEtm8.easting: 8637959.716447
    test 302 line 51 toEtm8.northing: 9190635.156031
    test 303 line 51 toEtm8.gamma: 81.802563
    test 304 line 51 toEtm8.scale: 2.054329
    test 305 line 51 toEtm8.lat: 28.604629
    test 306 line 51 toEtm8.lon: 85.988721
    test 307 line 52 toEtm8.easting: 8548521.455147
    test 308 line 52 toEtm8.northing: 9172410.943282
    test 309 line 52 toEtm8.gamma: 81.583928
    test 310 line 52 toEtm8.scale: 2.029641
    test 311 line 52 toEtm8.lat: 28.984048
    test 312 line 52 toEtm8.lon: 85.833448
    test 313 line 53 toEtm8.easting: 796987.281104
    test 314 line 53 toEtm8.northing: 7677446.357675
    test 315 line 53 toEtm8.gamma: 18.084472
    test 316 line 53 toEtm8.scale: 1.007381
    test 317 line 53 toEtm8.lat: 68.071020
    test 318 line 53 toEtm8.lon: 19.392823
    test 319 line 54 toEtm8.easting: 3291036.496762
    test 320 line 54 toEtm8.northing: 9513199.600666
    test 321 line 54 toEtm8.gamma: 80.890254
    test 322 line 54 toEtm8.scale: 1.134826
    test 323 line 54 toEtm8.lat: 61.416576
    test 324 line 54 toEtm8.lon: 81.981611
    test 325 line 55 toEtm8.easting: 7087225.330906
    test 326 line 55 toEtm8.northing: 8382823.855822
    test 327 line 55 toEtm8.gamma: 72.253756
    test 328 line 55 toEtm8.scale: 1.678070
    test 329 line 55 toEtm8.lat: 35.074753
    test 330 line 55 toEtm8.lon: 79.496003
    test 331 line 56 toEtm8.easting: 5090358.125724
    test 332 line 56 toEtm8.northing: 4318294.133489
    test 333 line 56 toEtm8.gamma: 28.266280
    test 334 line 56 toEtm8.scale: 1.336264
    test 335 line 56 toEtm8.lat: 28.078790
    test 336 line 56 toEtm8.lon: 48.684350

    test skipped (1): line 57 toEtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 toEtm8.easting: 3447670.550785
    test 338 line 58 toEtm8.northing: 3680238.888223
    test 339 line 58 toEtm8.gamma: 17.934948
    test 340 line 58 toEtm8.scale: 1.149831
    test 341 line 58 toEtm8.lat: 28.473948
    test 342 line 58 toEtm8.lon: 34.127306
    test 343 line 59 toEtm8.easting: 3396522.906798
    test 344 line 59 toEtm8.northing: 8093659.687593
    test 345 line 59 toEtm8.gamma: 57.747117
    test 346 line 59 toEtm8.scale: 1.144006
    test 347 line 59 toEtm8.lat: 56.629354
    test 348 line 59 toEtm8.lon: 62.196474
    test 349 line 60 toEtm8.easting: 11249894.100784
    test 350 line 60 toEtm8.northing: 1619226.506299
    test 351 line 60 toEtm8.gamma: 14.210358
    test 352 line 60 toEtm8.scale: 3.048347
    test 353 line 60 toEtm8.lat: 4.747762
    test 354 line 60 toEtm8.lon: 70.932555
    test 355 line 61 toEtm8.easting: 6808805.230950
    test 356 line 61 toEtm8.northing: 8044779.777369
    test 357 line 61 toEtm8.gamma: 68.242008
    test 358 line 61 toEtm8.scale: 1.621464
    test 359 line 61 toEtm8.lat: 35.882113
    test 360 line 61 toEtm8.lon: 76.741849
    test 361 line 62 toEtm8.easting: 2306021.556506
    test 362 line 62 toEtm8.northing: 757191.592866
    test 363 line 62 toEtm8.gamma: 2.385686
    test 364 line 62 toEtm8.scale: 1.066159
    test 365 line 62 toEtm8.lat: 6.420705
    test 366 line 62 toEtm8.lon: 20.416028
    test 367 line 63 toEtm8.easting: 1547406.313862
    test 368 line 63 toEtm8.northing: 6048712.751824
    test 369 line 63 toEtm8.gamma: 18.474372
    test 370 line 63 toEtm8.scale: 1.029123
    test 371 line 63 toEtm8.lat: 52.335248
    test 372 line 63 toEtm8.lon: 22.879294
    test 373 line 64 toEtm8.easting: 2430467.650383
    test 374 line 64 toEtm8.northing: 7557167.613972
    test 375 line 64 toEtm8.gamma: 42.110021
    test 376 line 64 toEtm8.scale: 1.072759
    test 377 line 64 toEtm8.lat: 59.846391
    test 378 line 64 toEtm8.lon: 46.262536
    test 379 line 65 toEtm8.easting: 2334053.905830
    test 380 line 65 toEtm8.northing: 1948076.966582
    test 381 line 65 toEtm8.gamma: 6.353185
    test 382 line 65 toEtm8.scale: 1.067733
    test 383 line 65 toEtm8.lat: 16.461790
    test 384 line 65 toEtm8.lon: 21.433269
    test 385 line 66 toEtm8.easting: 5564175.186737
    test 386 line 66 toEtm8.northing: 1836851.660412
    test 387 line 66 toEtm8.gamma: 11.870682
    test 388 line 66 toEtm8.scale: 1.408265
    test 389 line 66 toEtm8.lat: 11.707905
    test 390 line 66 toEtm8.lon: 45.827075
    test 391 line 67 toEtm8.easting: 6118505.590359
    test 392 line 67 toEtm8.northing: 7631684.552421
    test 393 line 67 toEtm8.gamma: 62.477323
    test 394 line 67 toEtm8.scale: 1.493420
    test 395 line 67 toEtm8.lat: 38.519075
    test 396 line 67 toEtm8.lon: 71.935918
    test 397 line 68 toEtm8.easting: 7365359.294665
    test 398 line 68 toEtm8.northing: 8818194.451531
    test 399 line 68 toEtm8.gamma: 77.207042
    test 400 line 68 toEtm8.scale: 1.737639
    test 401 line 68 toEtm8.lat: 34.264007
    test 402 line 68 toEtm8.lon: 82.647878
    test 403 line 69 toEtm8.easting: 36187.342415
    test 404 line 69 toEtm8.northing: 2142565.324802
    test 405 line 69 toEtm8.gamma: 0.114334
    test 406 line 69 toEtm8.scale: 0.999616
    test 407 line 69 toEtm8.lat: 19.376880
    test 408 line 69 toEtm8.lon: 0.344605
    test 409 line 70 toEtm8.easting: 2380328.546851
    test 410 line 70 toEtm8.northing: 8440109.872384
    test 411 line 70 toEtm8.gamma: 55.076067
    test 412 line 70 toEtm8.scale: 1.069658
    test 413 line 70 toEtm8.lat: 65.075805
    test 414 line 70 toEtm8.lon: 57.653438
    test 415 line 71 toEtm8.easting: 582511.608826
    test 416 line 71 toEtm8.northing: 8876047.217071
    test 417 line 71 toEtm8.gamma: 27.133300
    test 418 line 71 toEtm8.scale: 1.003749
    test 419 line 71 toEtm8.lat: 78.691870
    test 420 line 71 toEtm8.lon: 27.591736
    test 421 line 72 toEtm8.easting: 899441.350477
    test 422 line 72 toEtm8.northing: 4582046.430516
    test 423 line 72 toEtm8.gamma: 7.031211
    test 424 line 72 toEtm8.scale: 1.009573
    test 425 line 72 toEtm8.lat: 40.893022
    test 426 line 72 toEtm8.lon: 10.668804
    test 427 line 73 toEtm8.easting: 5022485.124337
    test 428 line 73 toEtm8.northing: 9741774.933721
    test 429 line 73 toEtm8.gamma: 86.505947
    test 430 line 73 toEtm8.scale: 1.323700
    test 431 line 73 toEtm8.lat: 48.914279
    test 432 line 73 toEtm8.lon: 87.359268
    test 433 line 74 toEtm8.easting: 6701004.587204
    test 434 line 74 toEtm8.northing: 2954368.258231
    test 435 line 74 toEtm8.gamma: 21.560153
    test 436 line 74 toEtm8.scale: 1.608554
    test 437 line 74 toEtm8.lat: 16.208377
    test 438 line 74 toEtm8.lon: 54.494282
    test 439 line 75 toEtm8.easting: 454986.218897
    test 440 line 75 toEtm8.northing: 4885087.887884
    test 441 line 75 toEtm8.gamma: 3.945648
    test 442 line 75 toEtm8.scale: 1.002147
    test 443 line 75 toEtm8.lat: 43.977936
    test 444 line 75 toEtm8.lon: 5.672541
    test 445 line 76 toEtm8.easting: 8903956.140311
    test 446 line 76 toEtm8.northing: 8470608.577482
    test 447 line 76 toEtm8.gamma: 74.723116
    test 448 line 76 toEtm8.scale: 2.131311
    test 449 line 76 toEtm8.lat: 26.850861
    test 450 line 76 toEtm8.lon: 82.834480
    test 451 line 77 toEtm8.easting: 1547627.594741
    test 452 line 77 toEtm8.northing: 6036584.538347
    test 453 line 77 toEtm8.gamma: 18.407629
    test 454 line 77 toEtm8.scale: 1.029132
    test 455 line 77 toEtm8.lat: 52.234165
    test 456 line 77 toEtm8.lon: 22.827655
    test 457 line 78 toEtm8.easting: 5221488.778597
    test 458 line 78 toEtm8.northing: 1762592.044392
    test 459 line 78 toEtm8.gamma: 10.927880
    test 460 line 78 toEtm8.scale: 1.356721
    test 461 line 78 toEtm8.lat: 11.674646
    test 462 line 78 toEtm8.lon: 43.500147
    test 463 line 79 toEtm8.easting: 4880570.297161
    test 464 line 79 toEtm8.northing: 3325433.988867
    test 465 line 79 toEtm8.gamma: 20.469862
    test 466 line 79 toEtm8.scale: 1.308476
    test 467 line 79 toEtm8.lat: 22.492753
    test 468 line 79 toEtm8.lon: 44.179153
    test 469 line 80 toEtm8.easting: 23930680.082694
    test 470 line 80 toEtm8.northing: 7491462.099038
    test 471 line 80 toEtm8.gamma: 75.937628
    test 472 line 80 toEtm8.scale: 15.556365
    test 473 line 80 toEtm8.lat: 0.910999
    test 474 line 80 toEtm8.lon: 88.548823
    test 475 line 81 toEtm8.easting: 71519.450458
    test 476 line 81 toEtm8.northing: 3654740.444852
    test 477 line 81 toEtm8.gamma: 0.417448
    test 478 line 81 toEtm8.scale: 0.999663
    test 479 line 81 toEtm8.lat: 33.028802
    test 480 line 81 toEtm8.lon: 0.765843
    test 481 line 82 toEtm8.easting: 4152797.795220
    test 482 line 82 toEtm8.northing: 7823098.502751
    test 483 line 82 toEtm8.gamma: 58.238901
    test 484 line 82 toEtm8.scale: 1.218052
    test 485 line 82 toEtm8.lat: 50.649195
    test 486 line 82 toEtm8.lon: 64.389076
    test 487 line 83 toEtm8.easting: 2926725.707639
    test 488 line 83 toEtm8.northing: 7904918.072844
    test 489 line 83 toEtm8.gamma: 51.592748
    test 490 line 83 toEtm8.scale: 1.106206
    test 491 line 83 toEtm8.lat: 58.820640
    test 492 line 83 toEtm8.lon: 55.841048
    test 493 line 84 toEtm8.easting: 1325509.113869
    test 494 line 84 toEtm8.northing: 9675214.948213
    test 495 line 84 toEtm8.gamma: 76.116213
    test 496 line 84 toEtm8.scale: 1.021136
    test 497 line 84 toEtm8.lat: 77.865762
    test 498 line 84 toEtm8.lon: 76.414618
    test 499 line 85 toEtm8.easting: 3045296.448926
    test 500 line 85 toEtm8.northing: 542153.443280
    test 501 line 85 toEtm8.gamma: 2.185095
    test 502 line 85 toEtm8.scale: 1.116664
    test 503 line 85 toEtm8.lat: 4.389639
    test 504 line 85 toEtm8.lon: 26.458976
    test 505 line 86 toEtm8.easting: 11843870.887518
    test 506 line 86 toEtm8.northing: 5912803.073343
    test 507 line 86 toEtm8.gamma: 52.814259
    test 508 line 86 toEtm8.scale: 3.267256
    test 509 line 86 toEtm8.lat: 13.924448
    test 510 line 86 toEtm8.lon: 79.017873
    test 511 line 87 toEtm8.easting: 8891099.704936
    test 512 line 87 toEtm8.northing: 162160.142227
    test 513 line 87 toEtm8.gamma: 1.312094
    test 514 line 87 toEtm8.scale: 2.157363
    test 515 line 87 toEtm8.lat: 0.679713
    test 516 line 87 toEtm8.lon: 62.036792
    test 517 line 88 toEtm8.easting: 4784814.214449
    test 518 line 88 toEtm8.northing: 2984497.432580
    test 519 line 88 toEtm8.gamma: 17.946545
    test 520 line 88 toEtm8.scale: 1.296116
    test 521 line 88 toEtm8.lat: 20.478281
    test 522 line 88 toEtm8.lon: 42.678234
    test 523 line 89 toEtm8.easting: 1772074.682154
    test 524 line 89 toEtm8.northing: 9491552.560143
    test 525 line 89 toEtm8.gamma: 73.634830
    test 526 line 89 toEtm8.scale: 1.038202
    test 527 line 89 toEtm8.lat: 73.695703
    test 528 line 89 toEtm8.lon: 74.259097
    test 529 line 90 toEtm8.easting: 1907649.782106
    test 530 line 90 toEtm8.northing: 6994232.429379
    test 531 line 90 toEtm8.gamma: 29.718929
    test 532 line 90 toEtm8.scale: 1.044503
    test 533 line 90 toEtm8.lat: 58.569370
    test 534 line 90 toEtm8.lon: 33.777549
    test 535 line 91 toEtm8.easting: 2084423.818962
    test 536 line 91 toEtm8.northing: 2211816.035619
    test 537 line 91 toEtm8.gamma: 6.556448
    test 538 line 91 toEtm8.scale: 1.053793
    test 539 line 91 toEtm8.lat: 18.933881
    test 540 line 91 toEtm8.lon: 19.492695
    test 541 line 92 toEtm8.easting: 1064373.671729
    test 542 line 92 toEtm8.northing: 7812482.547461
    test 543 line 92 toEtm8.gamma: 24.874124
    test 544 line 92 toEtm8.scale: 1.013490
    test 545 line 92 toEtm8.lat: 68.317934
    test 546 line 92 toEtm8.lon: 26.515687
    test 547 line 93 toEtm8.easting: 4770385.479297
    test 548 line 93 toEtm8.northing: 9734318.902980
    test 549 line 93 toEtm8.gamma: 86.273119
    test 550 line 93 toEtm8.scale: 1.290553
    test 551 line 93 toEtm8.lat: 50.641941
    test 552 line 93 toEtm8.lon: 87.111557
    test 553 line 94 toEtm8.easting: 6398096.677297
    test 554 line 94 toEtm8.northing: 4410894.752104
    test 555 line 94 toEtm8.gamma: 32.558023
    test 556 line 94 toEtm8.scale: 1.548004
    test 557 line 94 toEtm8.lat: 24.411298
    test 558 line 94 toEtm8.lon: 56.881823
    test 559 line 95 toEtm8.easting: 3138623.300415
    test 560 line 95 toEtm8.northing: 3082960.600798
    test 561 line 95 toEtm8.gamma: 13.557672
    test 562 line 95 toEtm8.scale: 1.123724
    test 563 line 95 toEtm8.lat: 24.571871
    test 564 line 95 toEtm8.lon: 30.073097
    test 565 line 96 toEtm8.easting: 2748325.794651
    test 566 line 96 toEtm8.northing: 4202811.912668
    test 567 line 96 toEtm8.gamma: 17.578706
    test 568 line 96 toEtm8.scale: 1.094102
    test 569 line 96 toEtm8.lat: 34.202576
    test 570 line 96 toEtm8.lon: 29.383166
    test 571 line 97 toEtm8.easting: 6677830.630367
    test 572 line 97 toEtm8.northing: 5350071.837395
    test 573 line 97 toEtm8.gamma: 41.306641
    test 574 line 97 toEtm8.scale: 1.599774
    test 575 line 97 toEtm8.lat: 27.756285
    test 576 line 97 toEtm8.lon: 61.881905
    test 577 line 98 toEtm8.easting: 5941536.667431
    test 578 line 98 toEtm8.northing: 3293112.175140
    test 579 line 98 toEtm8.gamma: 22.752845
    test 580 line 98 toEtm8.scale: 1.468473
    test 581 line 98 toEtm8.lat: 19.742270
    test 582 line 98 toEtm8.lon: 50.957821
    test 583 line 99 toEtm8.easting: 3152481.792567
    test 584 line 99 toEtm8.northing: 5903048.837978
    test 585 line 99 toEtm8.gamma: 31.494606
    test 586 line 99 toEtm8.scale: 1.124085
    test 587 line 99 toEtm8.lat: 45.453582
    test 588 line 99 toEtm8.lon: 40.659833
    test 589 line 100 toEtm8.easting: 10460475.897730
    test 590 line 100 toEtm8.northing: 2553463.624391
    test 591 line 100 toEtm8.gamma: 21.965869
    test 592 line 100 toEtm8.scale: 2.700296
    test 593 line 100 toEtm8.lat: 8.322144
    test 594 line 100 toEtm8.lon: 69.488157
    test 595 line 101 toEtm8.easting: 1964010.778021
    test 596 line 101 toEtm8.northing: 5634042.923056
    test 597 line 101 toEtm8.gamma: 20.117800
    test 598 line 101 toEtm8.scale: 1.047344
    test 599 line 101 toEtm8.lat: 47.749831
    test 600 line 101 toEtm8.lon: 26.322002
    test 601 line 102 toEtm8.easting: 2065306.424934
    test 602 line 102 toEtm8.northing: 2135008.468651
    test 603 line 102 toEtm8.gamma: 6.258981
    test 604 line 102 toEtm8.scale: 1.052800
    test 605 line 102 toEtm8.lat: 18.297493
    test 606 line 102 toEtm8.lon: 19.244669
    test 607 line 103 toEtm8.easting: 5127738.132976
    test 608 line 103 toEtm8.northing: 6793804.304411
    test 609 line 103 toEtm8.gamma: 50.557915
    test 610 line 103 toEtm8.scale: 1.339412
    test 611 line 103 toEtm8.lat: 40.834541
    test 612 line 103 toEtm8.lon: 61.650750
    test 613 line 104 toEtm8.easting: 8385525.148166
    test 614 line 104 toEtm8.northing: 6924932.344306
    test 615 line 104 toEtm8.gamma: 59.087561
    test 616 line 104 toEtm8.scale: 1.990364
    test 617 line 104 toEtm8.lat: 26.273247
    test 618 line 104 toEtm8.lon: 74.926694
    test 619 line 105 toEtm8.easting: 2297510.791909
    test 620 line 105 toEtm8.northing: 2805666.962834
    test 621 line 105 toEtm8.gamma: 9.301553
    test 622 line 105 toEtm8.scale: 1.065508
    test 623 line 105 toEtm8.lat: 23.698347
    test 624 line 105 toEtm8.lon: 22.155657
    test 625 line 106 toEtm8.easting: 13749544.917635
    test 626 line 106 toEtm8.northing: 8288728.384650
    test 627 line 106 toEtm8.gamma: 75.033970
    test 628 line 106 toEtm8.scale: 4.270588
    test 629 line 106 toEtm8.lat: 12.364113
    test 630 line 106 toEtm8.lon: 86.348578
    test 631 line 107 toEtm8.easting: 317518.455546
    test 632 line 107 toEtm8.northing: 1097517.583745
    test 633 line 107 toEtm8.gamma: 0.499004
    test 634 line 107 toEtm8.scale: 1.000848
    test 635 line 107 toEtm8.lat: 9.916091
    test 636 line 107 toEtm8.lon: 2.895277
    test 637 line 108 toEtm8.easting: 3856035.184888
    test 638 line 108 toEtm8.northing: 9141364.450290
    test 639 line 108 toEtm8.gamma: 75.972763
    test 640 line 108 toEtm8.scale: 1.186786
    test 641 line 108 toEtm8.lat: 56.553876
    test 642 line 108 toEtm8.lon: 78.215077
    test 643 line 109 toEtm8.easting: 1457484.942823
    test 644 line 109 toEtm8.northing: 9385297.101973
    test 645 line 109 toEtm8.gamma: 66.784662
    test 646 line 109 toEtm8.scale: 1.025660
    test 647 line 109 toEtm8.lat: 75.957631
    test 648 line 109 toEtm8.lon: 67.407383
    test 649 line 110 toEtm8.easting: 1304934.901841
    test 650 line 110 toEtm8.northing: 3604655.155715
    test 651 line 110 toEtm8.gamma: 7.343989
    test 652 line 110 toEtm8.scale: 1.020672
    test 653 line 110 toEtm8.lat: 31.826531
    test 654 line 110 toEtm8.lon: 13.731050
    test 655 line 111 toEtm8.easting: 1399093.491792
    test 656 line 111 toEtm8.northing: 8314607.120342
    test 657 line 111 toEtm8.gamma: 38.630161
    test 658 line 111 toEtm8.scale: 1.023625
    test 659 line 111 toEtm8.lat: 70.542985
    test 660 line 111 toEtm8.lon: 40.282055
    test 661 line 112 toEtm8.easting: 356983.618540
    test 662 line 112 toEtm8.northing: 4282309.048994
    test 663 line 112 toEtm8.gamma: 2.561485
    test 664 line 112 toEtm8.scale: 1.001170
    test 665 line 112 toEtm8.lat: 38.617487
    test 666 line 112 toEtm8.lon: 4.099838
    test 667 line 113 toEtm8.easting: 9952911.325091
    test 668 line 113 toEtm8.northing: 1510288.212229
    test 669 line 113 toEtm8.gamma: 12.752154
    test 670 line 113 toEtm8.scale: 2.511357
    test 671 line 113 toEtm8.lat: 5.389447
    test 672 line 113 toEtm8.lon: 66.729612
    test 673 line 114 toEtm8.easting: 6367592.504007
    test 674 line 114 toEtm8.northing: 1200437.077672
    test 675 line 114 toEtm8.gamma: 8.338041
    test 676 line 114 toEtm8.scale: 1.546210
    test 677 line 114 toEtm8.lat: 6.995168
    test 678 line 114 toEtm8.lon: 50.014763
    test 679 line 115 toEtm8.easting: 4391263.676460
    test 680 line 115 toEtm8.northing: 6325455.989408
    test 681 line 115 toEtm8.gamma: 42.653541
    test 682 line 115 toEtm8.scale: 1.245560
    test 683 line 115 toEtm8.lat: 42.321894
    test 684 line 115 toEtm8.lon: 53.784040
    test 685 line 116 toEtm8.easting: 6209880.527527
    test 686 line 116 toEtm8.northing: 2154754.449747
    test 687 line 116 toEtm8.gamma: 14.919512
    test 688 line 116 toEtm8.scale: 1.516560
    test 689 line 116 toEtm8.lat: 12.698515
    test 690 line 116 toEtm8.lon: 50.242047
    test 691 line 117 toEtm8.easting: 1507053.688772
    test 692 line 117 toEtm8.northing: 6261383.513280
    test 693 line 117 toEtm8.gamma: 19.280373
    test 694 line 117 toEtm8.scale: 1.027584
    test 695 line 117 toEtm8.lat: 54.207636
    test 696 line 117 toEtm8.lon: 23.325731
    test 697 line 118 toEtm8.easting: 8332725.003777
    test 698 line 118 toEtm8.northing: 3002712.329753
    test 699 line 118 toEtm8.gamma: 24.059212
    test 700 line 118 toEtm8.scale: 1.990450
    test 701 line 118 toEtm8.lat: 13.224787
    test 702 line 118 toEtm8.lon: 62.426698
    test 703 line 119 toEtm8.easting: 3958910.085235
    test 704 line 119 toEtm8.northing: 3462284.926102
    test 705 line 119 toEtm8.gamma: 18.546398
    test 706 line 119 toEtm8.scale: 1.199351
    test 707 line 119 toEtm8.lat: 25.650282
    test 708 line 119 toEtm8.lon: 37.710391
    test 709 line 120 toEtm8.easting: 10452892.282083
    test 710 line 120 toEtm8.northing: 8000059.605114
    test 711 line 120 toEtm8.gamma: 71.075240
    test 712 line 120 toEtm8.scale: 2.650111
    test 713 line 120 toEtm8.lat: 20.684773
    test 714 line 120 toEtm8.lon: 82.849734
    test 715 line 121 toEtm8.easting: 496148.253731
    test 716 line 121 toEtm8.northing: 6388503.365043
    test 717 line 121 toEtm8.gamma: 6.970955
    test 718 line 121 toEtm8.scale: 1.002620
    test 719 line 121 toEtm8.lat: 57.367533
    test 720 line 121 toEtm8.lon: 8.260866
    test 721 line 122 toEtm8.easting: 7375792.085850
    test 722 line 122 toEtm8.northing: 5544624.072155
    test 723 line 122 toEtm8.gamma: 44.510851
    test 724 line 122 toEtm8.scale: 1.745898
    test 725 line 122 toEtm8.lat: 25.958757
    test 726 line 122 toEtm8.lon: 65.760477
    test 727 line 123 toEtm8.easting: 2826258.041979
    test 728 line 123 toEtm8.northing: 5167759.816959
    test 729 line 123 toEtm8.gamma: 23.783897
    test 730 line 123 toEtm8.scale: 1.099415
    test 731 line 123 toEtm8.lat: 41.395848
    test 732 line 123 toEtm8.lon: 33.661790
    test 733 line 124 toEtm8.easting: 3958563.378851
    test 734 line 124 toEtm8.northing: 8499923.231243
    test 735 line 124 toEtm8.gamma: 66.570945
    test 736 line 124 toEtm8.scale: 1.197296
    test 737 line 124 toEtm8.lat: 54.266617
    test 738 line 124 toEtm8.lon: 70.602199
    test 739 line 125 toEtm8.easting: 4408189.533462
    test 740 line 125 toEtm8.northing: 8046312.003642
    test 741 line 125 toEtm8.gamma: 62.216959
    test 742 line 125 toEtm8.scale: 1.246750
    test 743 line 125 toEtm8.lat: 49.840393
    test 744 line 125 toEtm8.lon: 68.036728
    test 745 line 126 toEtm8.easting: 3629225.627512
    test 746 line 126 toEtm8.northing: 6371258.454645
    test 747 line 126 toEtm8.gamma: 38.881675
    test 748 line 126 toEtm8.scale: 1.165511
    test 749 line 126 toEtm8.lat: 46.306035
    test 750 line 126 toEtm8.lon: 48.085828
    test 751 line 127 toEtm8.easting: 602838.450710
    test 752 line 127 toEtm8.northing: 4851370.637205
    test 753 line 127 toEtm8.gamma: 5.160395
    test 754 line 127 toEtm8.scale: 1.004073
    test 755 line 127 toEtm8.lat: 43.570988
    test 756 line 127 toEtm8.lon: 7.464494
    test 757 line 128 toEtm8.easting: 764616.665051
    test 758 line 128 toEtm8.northing: 2164299.337945
    test 759 line 128 toEtm8.gamma: 2.429300
    test 760 line 128 toEtm8.scale: 1.006835
    test 761 line 128 toEtm8.lat: 19.427290
    test 762 line 128 toEtm8.lon: 7.268247
    test 763 line 129 toEtm8.easting: 5048953.021931
    test 764 line 129 toEtm8.northing: 1885974.057398
    test 765 line 129 toEtm8.gamma: 11.459804
    test 766 line 129 toEtm8.scale: 1.332207
    test 767 line 129 toEtm8.lat: 12.713794
    test 768 line 129 toEtm8.lon: 42.507018
    test 769 line 130 toEtm8.easting: 2293996.601155
    test 770 line 130 toEtm8.northing: 2392408.644221
    test 771 line 130 toEtm8.gamma: 7.791838
    test 772 line 130 toEtm8.scale: 1.065348
    test 773 line 130 toEtm8.lat: 20.238782
    test 774 line 130 toEtm8.lon: 21.566068
    test 775 line 131 toEtm8.easting: 1530603.839418
    test 776 line 131 toEtm8.northing: 7287841.459898
    test 777 line 131 toEtm8.gamma: 27.502921
    test 778 line 131 toEtm8.scale: 1.028416
    test 779 line 131 toEtm8.lat: 62.367847
    test 780 line 131 toEtm8.lon: 30.438849
    test 781 line 132 toEtm8.easting: 2660000.093152
    test 782 line 132 toEtm8.northing: 5161982.213248
    test 783 line 132 toEtm8.gamma: 22.629836
    test 784 line 132 toEtm8.scale: 1.087851
    test 785 line 132 toEtm8.lat: 41.891569
    test 786 line 132 toEtm8.lon: 31.959547
    test 787 line 133 toEtm8.easting: 5037478.329414
    test 788 line 133 toEtm8.northing: 8768172.379908
    test 789 line 133 toEtm8.gamma: 73.511182
    test 790 line 133 toEtm8.scale: 1.325919
    test 791 line 133 toEtm8.lat: 47.664248
    test 792 line 133 toEtm8.lon: 77.630062
    test 793 line 134 toEtm8.easting: 2289650.957799
    test 794 line 134 toEtm8.northing: 8784328.593607
    test 795 line 134 toEtm8.gamma: 60.786067
    test 796 line 134 toEtm8.scale: 1.064346
    test 797 line 134 toEtm8.lat: 67.259559
    test 798 line 134 toEtm8.lon: 62.715293
    test 799 line 135 toEtm8.easting: 647913.889744
    test 800 line 135 toEtm8.northing: 6742382.228217
    test 801 line 135 toEtm8.gamma: 10.252667
    test 802 line 135 toEtm8.scale: 1.004748
    test 803 line 135 toEtm8.lat: 60.295381
    test 804 line 135 toEtm8.lon: 11.763097
    test 805 line 136 toEtm8.easting: 1118372.698566
    test 806 line 136 toEtm8.northing: 9040627.942263
    test 807 line 136 toEtm8.gamma: 48.936803
    test 808 line 136 toEtm8.scale: 1.014920
    test 809 line 136 toEtm8.lat: 76.878914
    test 810 line 136 toEtm8.lon: 49.685773
    test 811 line 137 toEtm8.easting: 440696.510070
    test 812 line 137 toEtm8.northing: 5500355.826297
    test 813 line 137 toEtm8.gamma: 4.636104
    test 814 line 137 toEtm8.scale: 1.001986
    test 815 line 137 toEtm8.lat: 49.495349
    test 816 line 137 toEtm8.lon: 6.087551
    test 817 line 138 toEtm8.easting: 601728.149727
    test 818 line 138 toEtm8.northing: 9095352.048149
    test 819 line 138 toEtm8.gamma: 33.435771
    test 820 line 138 toEtm8.scale: 1.004027
    test 821 line 138 toEtm8.lat: 80.297265
    test 822 line 138 toEtm8.lon: 33.816372
    test 823 line 139 toEtm8.easting: 3481444.777827
    test 824 line 139 toEtm8.northing: 291665.708749
    test 825 line 139 toEtm8.gamma: 1.314726
    test 826 line 139 toEtm8.scale: 1.153534
    test 827 line 139 toEtm8.lat: 2.286437
    test 828 line 139 toEtm8.lon: 29.855149
    test 829 line 140 toEtm8.easting: 3515304.901524
    test 830 line 140 toEtm8.northing: 1443981.882918
    test 831 line 140 toEtm8.gamma: 6.641638
    test 832 line 140 toEtm8.scale: 1.156509
    test 833 line 140 toEtm8.lat: 11.264457
    test 834 line 140 toEtm8.lon: 30.743907
    test 835 line 141 toEtm8.easting: 160012.186959
    test 836 line 141 toEtm8.northing: 3922609.253231
    test 837 line 141 toEtm8.gamma: 1.022225
    test 838 line 141 toEtm8.scale: 0.999916
    test 839 line 141 toEtm8.lat: 35.434073
    test 840 line 141 toEtm8.lon: 1.762795
    test 841 line 142 toEtm8.easting: 4163744.245622
    test 842 line 142 toEtm8.northing: 936884.674804
    test 843 line 142 toEtm8.gamma: 4.892559
    test 844 line 142 toEtm8.scale: 1.222164
    test 845 line 142 toEtm8.lat: 6.923695
    test 846 line 142 toEtm8.lon: 35.289456
    test 847 line 143 toEtm8.easting: 6155200.017926
    test 848 line 143 toEtm8.northing: 6926306.628390
    test 849 line 143 toEtm8.gamma: 55.103258
    test 850 line 143 toEtm8.scale: 1.500556
    test 851 line 143 toEtm8.lat: 36.129672
    test 852 line 143 toEtm8.lon: 67.533176
    test 853 line 144 toEtm8.easting: 16263383.285440
    test 854 line 144 toEtm8.northing: 3591296.731341
    test 855 line 144 toEtm8.gamma: 36.040254
    test 856 line 144 toEtm8.scale: 6.589288
    test 857 line 144 toEtm8.lat: 4.406529
    test 858 line 144 toEtm8.lon: 81.965734
    test 859 line 145 toEtm8.easting: 14220995.515398
    test 860 line 145 toEtm8.northing: 5100587.457503
    test 861 line 145 toEtm8.gamma: 47.314258
    test 862 line 145 toEtm8.scale: 4.693202
    test 863 line 145 toEtm8.lat: 8.474589
    test 864 line 145 toEtm8.lon: 81.129945
    test 865 line 146 toEtm8.easting: 3173034.802372
    test 866 line 146 toEtm8.northing: 7263421.942957
    test 867 line 146 toEtm8.gamma: 45.215808
    test 868 line 146 toEtm8.scale: 1.125410
    test 869 line 146 toEtm8.lat: 53.907276
    test 870 line 146 toEtm8.lon: 51.252904
    test 871 line 147 toEtm8.easting: 10253274.092204
    test 872 line 147 toEtm8.northing: 8867574.299792
    test 873 line 147 toEtm8.gamma: 79.198250
    test 874 line 147 toEtm8.scale: 2.572372
    test 875 line 147 toEtm8.lat: 22.120545
    test 876 line 147 toEtm8.lon: 85.756782
    test 877 line 148 toEtm8.easting: 2415561.483230
    test 878 line 148 toEtm8.northing: 8813225.217097
    test 879 line 148 toEtm8.gamma: 62.548978
    test 880 line 148 toEtm8.scale: 1.071748
    test 881 line 148 toEtm8.lat: 66.444100
    test 882 line 148 toEtm8.lon: 64.532960
    test 883 line 149 toEtm8.easting: 9589179.293295
    test 884 line 149 toEtm8.northing: 1777680.784143
    test 885 line 149 toEtm8.gamma: 14.838483
    test 886 line 149 toEtm8.scale: 2.380716
    test 887 line 149 toEtm8.lat: 6.670965
    test 888 line 149 toEtm8.lon: 65.660408
    test 889 line 150 toEtm8.easting: 727939.438391
    test 890 line 150 toEtm8.northing: 3684363.236810
    test 891 line 150 toEtm8.gamma: 4.266227
    test 892 line 150 toEtm8.scale: 1.006140
    test 893 line 150 toEtm8.lat: 33.054057
    test 894 line 150 toEtm8.lon: 7.787458
    test 895 line 151 toEtm8.easting: 1250765.991085
    test 896 line 151 toEtm8.northing: 792869.242719
    test 897 line 151 toEtm8.gamma: 1.396497
    test 898 line 151 toEtm8.scale: 1.019026
    test 899 line 151 toEtm8.lat: 7.035525
    test 900 line 151 toEtm8.lon: 11.253707
    test 901 line 152 toEtm8.easting: 710421.705887
    test 902 line 152 toEtm8.northing: 5019406.075928
    test 903 line 152 toEtm8.gamma: 6.393949
    test 904 line 152 toEtm8.scale: 1.005812
    test 905 line 152 toEtm8.lat: 44.971340
    test 906 line 152 toEtm8.lon: 9.009304
    test 907 line 153 toEtm8.easting: 4600995.074643
    test 908 line 153 toEtm8.northing: 4505712.084593
    test 909 line 153 toEtm8.gamma: 27.997458
    test 910 line 153 toEtm8.scale: 1.271841
    test 911 line 153 toEtm8.lat: 30.821397
    test 912 line 153 toEtm8.lon: 45.970577
    test 913 line 154 toEtm8.easting: 557642.627782
    test 914 line 154 toEtm8.northing: 7006911.251644
    test 915 line 154 toEtm8.gamma: 9.769903
    test 916 line 154 toEtm8.scale: 1.003411
    test 917 line 154 toEtm8.lat: 62.763886
    test 918 line 154 toEtm8.lon: 10.960144
    test 919 line 155 toEtm8.easting: 4635062.294291
    test 920 line 155 toEtm8.northing: 2702556.153311
    test 921 line 155 toEtm8.gamma: 15.779547
    test 922 line 155 toEtm8.scale: 1.277178
    test 923 line 155 toEtm8.lat: 18.888611
    test 924 line 155 toEtm8.lon: 41.009871
    test 925 line 156 toEtm8.easting: 14554962.255919
    test 926 line 156 toEtm8.northing: 4716639.908572
    test 927 line 156 toEtm8.gamma: 44.192751
    test 928 line 156 toEtm8.scale: 4.960020
    test 929 line 156 toEtm8.lat: 7.524119
    test 930 line 156 toEtm8.lon: 81.050715
    test 931 line 157 toEtm8.easting: 882126.661736
    test 932 line 157 toEtm8.northing: 7947612.369506
    test 933 line 157 toEtm8.gamma: 22.429487
    test 934 line 157 toEtm8.scale: 1.009132
    test 935 line 157 toEtm8.lat: 70.063902
    test 936 line 157 toEtm8.lon: 23.705255
    test 937 line 158 toEtm8.easting: 20262021.645983
    test 938 line 158 toEtm8.northing: 8113827.820796
    test 939 line 158 toEtm8.gamma: 76.936057
    test 940 line 158 toEtm8.scale: 10.349092
    test 941 line 158 toEtm8.lat: 3.556526
    test 942 line 158 toEtm8.lon: 88.363529
    test 943 line 159 toEtm8.easting: 6500508.399850
    test 944 line 159 toEtm8.northing: 6956476.342368
    test 945 line 159 toEtm8.gamma: 56.237116
    test 946 line 159 toEtm8.scale: 1.563162
    test 947 line 159 toEtm8.lat: 34.551257
    test 948 line 159 toEtm8.lon: 69.111091
    test 949 line 160 toEtm8.easting: 3884036.641314
    test 950 line 160 toEtm8.northing: 6890167.411733
    test 951 line 160 toEtm8.gamma: 45.760130
    test 952 line 160 toEtm8.scale: 1.190167
    test 953 line 160 toEtm8.lat: 47.929051
    test 954 line 160 toEtm8.lon: 54.103418
    test 955 line 161 toEtm8.easting: 217855.546078
    test 956 line 161 toEtm8.northing: 6184108.122568
    test 957 line 161 toEtm8.gamma: 2.870993
    test 958 line 161 toEtm8.scale: 1.000182
    test 959 line 161 toEtm8.lat: 55.753536
    test 960 line 161 toEtm8.lon: 3.471798
    test 961 line 162 toEtm8.easting: 11384139.290402
    test 962 line 162 toEtm8.northing: 8893889.949556
    test 963 line 162 toEtm8.gamma: 79.774854
    test 964 line 162 toEtm8.scale: 3.024672
    test 965 line 162 toEtm8.lat: 18.530847
    test 966 line 162 toEtm8.lon: 86.555312
    test 967 line 163 toEtm8.easting: 3469855.989805
    test 968 line 163 toEtm8.northing: 7723193.799228
    test 969 line 163 toEtm8.gamma: 53.114700
    test 970 line 163 toEtm8.scale: 1.150540
    test 971 line 163 toEtm8.lat: 54.510125
    test 972 line 163 toEtm8.lon: 58.556056
    test 973 line 164 toEtm8.easting: 5926165.994939
    test 974 line 164 toEtm8.northing: 9385463.732747
    test 975 line 164 toEtm8.gamma: 82.506981
    test 976 line 164 toEtm8.scale: 1.459758
    test 977 line 164 toEtm8.lat: 42.864162
    test 978 line 164 toEtm8.lon: 84.866326
    test 979 line 165 toEtm8.easting: 5798639.662224
    test 980 line 165 toEtm8.northing: 5305387.640916
    test 981 line 165 toEtm8.gamma: 38.617257
    test 982 line 165 toEtm8.scale: 1.442263
    test 983 line 165 toEtm8.lat: 30.911943
    test 984 line 165 toEtm8.lon: 57.114102
    test 985 line 166 toEtm8.easting: 9464.934388
    test 986 line 166 toEtm8.northing: 6489121.624944
    test 987 line 166 toEtm8.gamma: 0.138696
    test 988 line 166 toEtm8.scale: 0.999601
    test 989 line 166 toEtm8.lat: 58.542493
    test 990 line 166 toEtm8.lon: 0.162593
    test 991 line 167 toEtm8.easting: 12575834.275614
    test 992 line 167 toEtm8.northing: 8356610.895486
    test 993 line 167 toEtm8.gamma: 75.235223
    test 994 line 167 toEtm8.scale: 3.599442
    test 995 line 167 toEtm8.lat: 15.022689
    test 996 line 167 toEtm8.lon: 85.792615
    test 997 line 168 toEtm8.easting: 2719653.543469
    test 998 line 168 toEtm8.northing: 9362389.163495
    test 999 line 168 toEtm8.gamma: 76.049670
    test 1000 line 168 toEtm8.scale: 1.091315
    test 1001 line 168 toEtm8.lat: 65.692275
    test 1002 line 168 toEtm8.lon: 77.241377
    test 1003 line 169 toEtm8.easting: 4845341.924698
    test 1004 line 169 toEtm8.northing: 8710522.326901
    test 1005 line 169 toEtm8.gamma: 72.320942
    test 1006 line 169 toEtm8.scale: 1.300382
    test 1007 line 169 toEtm8.lat: 48.806211
    test 1008 line 169 toEtm8.lon: 76.486365
    test 1009 line 170 toEtm8.easting: 3935261.522763
    test 1010 line 170 toEtm8.northing: 9454271.649062
    test 1011 line 170 toEtm8.gamma: 81.162334
    test 1012 line 170 toEtm8.scale: 1.194767
    test 1013 line 170 toEtm8.lat: 56.436025
    test 1014 line 170 toEtm8.lon: 82.611568
    test 1015 line 171 toEtm8.easting: 7074299.823000
    test 1016 line 171 toEtm8.northing: 1648736.065055
    test 1017 line 171 toEtm8.gamma: 12.145925
    test 1018 line 171 toEtm8.scale: 1.687551
    test 1019 line 171 toEtm8.lat: 8.766053
    test 1020 line 171 toEtm8.lon: 54.367539
    test 1021 line 172 toEtm8.easting: 3689072.579308
    test 1022 line 172 toEtm8.northing: 2230802.665211
    test 1023 line 172 toEtm8.gamma: 10.856248
    test 1024 line 172 toEtm8.scale: 1.172689
    test 1025 line 172 toEtm8.lat: 17.095495
    test 1026 line 172 toEtm8.lon: 33.059128
    test 1027 line 173 toEtm8.easting: 8102565.885587
    test 1028 line 173 toEtm8.northing: 5167396.617580
    test 1029 line 173 toEtm8.gamma: 42.324886
    test 1030 line 173 toEtm8.scale: 1.921927
    test 1031 line 173 toEtm8.lat: 22.142861
    test 1032 line 173 toEtm8.lon: 67.200684
    test 1033 line 174 toEtm8.easting: 8181271.353564
    test 1034 line 174 toEtm8.northing: 4425436.547185
    test 1035 line 174 toEtm8.gamma: 35.900845
    test 1036 line 174 toEtm8.scale: 1.945017
    test 1037 line 174 toEtm8.lat: 19.222623
    test 1038 line 174 toEtm8.lon: 65.180785
    test 1039 line 175 toEtm8.easting: 767067.394003
    test 1040 line 175 toEtm8.northing: 3701745.857296
    test 1041 line 175 toEtm8.gamma: 4.519201
    test 1042 line 175 toEtm8.scale: 1.006863
    test 1043 line 175 toEtm8.lat: 33.182474
    test 1044 line 175 toEtm8.lon: 8.216952
    test 1045 line 176 toEtm8.easting: 6688114.168572
    test 1046 line 176 toEtm8.northing: 2052857.299639
    test 1047 line 176 toEtm8.gamma: 14.766191
    test 1048 line 176 toEtm8.scale: 1.607200
    test 1049 line 176 toEtm8.lat: 11.417963
    test 1050 line 176 toEtm8.lon: 52.808691
    test 1051 line 177 toEtm8.easting: 5608408.773761
    test 1052 line 177 toEtm8.northing: 3859055.659110
    test 1053 line 177 toEtm8.gamma: 26.244151
    test 1054 line 177 toEtm8.scale: 1.413463
    test 1055 line 177 toEtm8.lat: 23.836688
    test 1056 line 177 toEtm8.lon: 50.500180
    test 1057 line 178 toEtm8.easting: 3836942.765275
    test 1058 line 178 toEtm8.northing: 6415467.634326
    test 1059 line 178 toEtm8.gamma: 40.575885
    test 1060 line 178 toEtm8.scale: 1.185615
    test 1061 line 178 toEtm8.lat: 45.550020
    test 1062 line 178 toEtm8.lon: 50.148036
    test 1063 line 179 toEtm8.easting: 1298730.366025
    test 1064 line 179 toEtm8.northing: 6021453.000792
    test 1065 line 179 toEtm8.gamma: 15.613320
    test 1066 line 179 toEtm8.scale: 1.020367
    test 1067 line 179 toEtm8.lat: 52.746079
    test 1068 line 179 toEtm8.lon: 19.343926
    test 1069 line 180 toEtm8.easting: 416934.289208
    test 1070 line 180 toEtm8.northing: 7295683.451705
    test 1071 line 180 toEtm8.gamma: 8.238232
    test 1072 line 180 toEtm8.scale: 1.001729
    test 1073 line 180 toEtm8.lat: 65.513348
    test 1074 line 180 toEtm8.lon: 9.039529
    test 1075 line 181 toEtm8.easting: 4336076.850889
    test 1076 line 181 toEtm8.northing: 7617975.722779
    test 1077 line 181 toEtm8.gamma: 56.537088
    test 1078 line 181 toEtm8.scale: 1.238582
    test 1079 line 181 toEtm8.lat: 48.709795
    test 1080 line 181 toEtm8.lon: 63.554005
    test 1081 line 182 toEtm8.easting: 168047.336980
    test 1082 line 182 toEtm8.northing: 2185000.046530
    test 1083 line 182 toEtm8.gamma: 0.542187
    test 1084 line 182 toEtm8.scale: 0.999949
    test 1085 line 182 toEtm8.lat: 19.753509
    test 1086 line 182 toEtm8.lon: 1.603846
    test 1087 line 183 toEtm8.easting: 8276281.328790
    test 1088 line 183 toEtm8.northing: 263444.350545
    test 1089 line 183 toEtm8.gamma: 2.071435
    test 1090 line 183 toEtm8.scale: 1.980314
    test 1091 line 183 toEtm8.lat: 1.202816
    test 1092 line 183 toEtm8.lon: 59.377276
    test 1093 line 184 toEtm8.easting: 4772573.810710
    test 1094 line 184 toEtm8.northing: 6765710.336002
    test 1095 line 184 toEtm8.gamma: 48.857561
    test 1096 line 184 toEtm8.scale: 1.291911
    test 1097 line 184 toEtm8.lat: 42.564975
    test 1098 line 184 toEtm8.lon: 59.356947
    test 1099 line 185 toEtm8.easting: 5427755.074639
    test 1100 line 185 toEtm8.northing: 1556055.820924
    test 1101 line 185 toEtm8.gamma: 9.862178
    test 1102 line 185 toEtm8.scale: 1.387394
    test 1103 line 185 toEtm8.lat: 10.090572
    test 1104 line 185 toEtm8.lon: 44.604132
    test 1105 line 186 toEtm8.easting: 11588458.616041
    test 1106 line 186 toEtm8.northing: 5707993.922613
    test 1107 line 186 toEtm8.gamma: 50.784827
    test 1108 line 186 toEtm8.scale: 3.149567
    test 1109 line 186 toEtm8.lat: 14.133028
    test 1110 line 186 toEtm8.lon: 78.097533
    test 1111 line 187 toEtm8.easting: 7152433.802688
    test 1112 line 187 toEtm8.northing: 761390.695844
    test 1113 line 187 toEtm8.gamma: 5.607350
    test 1114 line 187 toEtm8.scale: 1.705261
    test 1115 line 187 toEtm8.lat: 4.031123
    test 1116 line 187 toEtm8.lon: 54.048782
    test 1117 line 188 toEtm8.easting: 3105651.390901
    test 1118 line 188 toEtm8.northing: 9426026.169064
    test 1119 line 188 toEtm8.gamma: 78.750206
    test 1120 line 188 toEtm8.scale: 1.119737
    test 1121 line 188 toEtm8.lat: 62.746603
    test 1122 line 188 toEtm8.lon: 79.968641
    test 1123 line 189 toEtm8.easting: 2959009.639022
    test 1124 line 189 toEtm8.northing: 8339242.269282
    test 1125 line 189 toEtm8.gamma: 58.460865
    test 1126 line 189 toEtm8.scale: 1.108554
    test 1127 line 189 toEtm8.lat: 60.626429
    test 1128 line 189 toEtm8.lon: 61.851551
    test 1129 line 190 toEtm8.easting: 8640472.267145
    test 1130 line 190 toEtm8.northing: 6230320.417931
    test 1131 line 190 toEtm8.gamma: 52.816810
    test 1132 line 190 toEtm8.scale: 2.062973
    test 1133 line 190 toEtm8.lat: 23.600626
    test 1134 line 190 toEtm8.lon: 72.811634
    test 1135 line 191 toEtm8.easting: 811352.108932
    test 1136 line 191 toEtm8.northing: 9816129.813481
    test 1137 line 191 toEtm8.gamma: 77.299184
    test 1138 line 191 toEtm8.scale: 1.007651
    test 1139 line 191 toEtm8.lat: 82.572236
    test 1140 line 191 toEtm8.lon: 77.402323
    test 1141 line 192 toEtm8.easting: 6521874.973458
    test 1142 line 192 toEtm8.northing: 1053612.479744
    test 1143 line 192 toEtm8.gamma: 7.407328
    test 1144 line 192 toEtm8.scale: 1.575529
    test 1145 line 192 toEtm8.lat: 6.030051
    test 1146 line 192 toEtm8.lon: 50.783505
    test 1147 line 193 toEtm8.easting: 3477983.997875
    test 1148 line 193 toEtm8.northing: 5651613.325947
    test 1149 line 193 toEtm8.gamma: 31.530673
    test 1150 line 193 toEtm8.scale: 1.151875
    test 1151 line 193 toEtm8.lat: 42.411523
    test 1152 line 193 toEtm8.lon: 42.258009
    test 1153 line 194 toEtm8.easting: 629892.822243
    test 1154 line 194 toEtm8.northing: 3283914.910451
    test 1155 line 194 toEtm8.gamma: 3.210482
    test 1156 line 194 toEtm8.scale: 1.004499
    test 1157 line 194 toEtm8.lat: 29.526120
    test 1158 line 194 toEtm8.lon: 6.493069
    test 1159 line 195 toEtm8.easting: 3381879.687227
    test 1160 line 195 toEtm8.northing: 5103629.325665
    test 1161 line 195 toEtm8.gamma: 26.748108
    test 1162 line 195 toEtm8.scale: 1.143559
    test 1163 line 195 toEtm8.lat: 39.021853
    test 1164 line 195 toEtm8.lon: 38.641779
    test 1165 line 196 toEtm8.easting: 2815986.534177
    test 1166 line 196 toEtm8.northing: 9387029.120718
    test 1167 line 196 toEtm8.gamma: 76.967262
    test 1168 line 196 toEtm8.scale: 1.098032
    test 1169 line 196 toEtm8.lat: 64.971850
    test 1170 line 196 toEtm8.lon: 78.151893
    test 1171 line 197 toEtm8.easting: 3398195.889603
    test 1172 line 197 toEtm8.northing: 9138936.031490
    test 1173 line 197 toEtm8.gamma: 74.477499
    test 1174 line 197 toEtm8.scale: 1.144009
    test 1175 line 197 toEtm8.lat: 59.961819
    test 1176 line 197 toEtm8.lon: 76.473422
    test 1177 line 198 toEtm8.easting: 2421734.754637
    test 1178 line 198 toEtm8.northing: 5002372.094991
    test 1179 line 198 toEtm8.gamma: 20.017082
    test 1180 line 198 toEtm8.scale: 1.072592
    test 1181 line 198 toEtm8.lat: 41.374040
    test 1182 line 198 toEtm8.lon: 28.848343
    test 1183 line 199 toEtm8.easting: 2360869.895525
    test 1184 line 199 toEtm8.northing: 9553298.449536
    test 1185 line 199 toEtm8.gamma: 78.848205
    test 1186 line 199 toEtm8.scale: 1.068453
    test 1187 line 199 toEtm8.lat: 68.946087
    test 1188 line 199 toEtm8.lon: 79.574523
    test 1189 line 200 toEtm8.easting: 1196539.972194
    test 1190 line 200 toEtm8.northing: 9861920.836230
    test 1191 line 200 toEtm8.gamma: 83.437668
    test 1192 line 200 toEtm8.scale: 1.017137
    test 1193 line 200 toEtm8.lat: 79.275096
    test 1194 line 200 toEtm8.lon: 83.551272
    test 1195 line 201 toEtm8.easting: 1327758.704795
    test 1196 line 201 toEtm8.northing: 2375509.241683
    test 1197 line 201 toEtm8.gamma: 4.617572
    test 1198 line 201 toEtm8.scale: 1.021465
    test 1199 line 201 toEtm8.lat: 21.000252
    test 1200 line 201 toEtm8.lon: 12.697444
    test 1201 line 202 toEtm8.easting: 2070860.327644
    test 1202 line 202 toEtm8.northing: 8604500.719581
    test 1203 line 202 toEtm8.gamma: 54.722761
    test 1204 line 202 toEtm8.scale: 1.052469
    test 1205 line 202 toEtm8.lat: 68.015227
    test 1206 line 202 toEtm8.lon: 56.732419
    test 1207 line 203 toEtm8.easting: 6564776.654864
    test 1208 line 203 toEtm8.northing: 8171207.177379
    test 1209 line 203 toEtm8.gamma: 69.237523
    test 1210 line 203 toEtm8.scale: 1.573894
    test 1211 line 203 toEtm8.lat: 37.423675
    test 1212 line 203 toEtm8.lon: 76.947359
    test 1213 line 204 toEtm8.easting: 592653.553821
    test 1214 line 204 toEtm8.northing: 6125529.810052
    test 1215 line 204 toEtm8.gamma: 7.600785
    test 1216 line 204 toEtm8.scale: 1.003912
    test 1217 line 204 toEtm8.lat: 54.922707
    test 1218 line 204 toEtm8.lon: 9.260818
    test 1219 line 205 toEtm8.easting: 693459.671821
    test 1220 line 205 toEtm8.northing: 6943779.991032
    test 1221 line 205 toEtm8.gamma: 11.787587
    test 1222 line 205 toEtm8.scale: 1.005496
    test 1223 line 205 toEtm8.lat: 61.982810
    test 1224 line 205 toEtm8.lon: 13.299659
    test 1225 line 206 toEtm8.easting: 1838956.187625
    test 1226 line 206 toEtm8.northing: 3511959.612381
    test 1227 line 206 toEtm8.gamma: 9.844313
    test 1228 line 206 toEtm8.scale: 1.041603
    test 1229 line 206 toEtm8.lat: 30.324214
    test 1230 line 206 toEtm8.lon: 18.959769
    test 1231 line 207 toEtm8.easting: 4460690.884597
    test 1232 line 207 toEtm8.northing: 5541873.235403
    test 1233 line 207 toEtm8.gamma: 35.768613
    test 1234 line 207 toEtm8.scale: 1.254179
    test 1235 line 207 toEtm8.lat: 37.629667
    test 1236 line 207 toEtm8.lon: 49.649131
    test 1237 line 208 toEtm8.easting: 2311168.998941
    test 1238 line 208 toEtm8.northing: 9480561.869119
    test 1239 line 208 toEtm8.gamma: 76.828257
    test 1240 line 208 toEtm8.scale: 1.065556
    test 1241 line 208 toEtm8.lat: 69.225574
    test 1242 line 208 toEtm8.lon: 77.656135
    test 1243 line 209 toEtm8.easting: 4111775.114451
    test 1244 line 209 toEtm8.northing: 6509014.348792
    test 1245 line 209 toEtm8.gamma: 43.052130
    test 1246 line 209 toEtm8.scale: 1.214125
    test 1247 line 209 toEtm8.lat: 44.698478
    test 1248 line 209 toEtm8.lon: 52.979304
    test 1249 line 210 toEtm8.easting: 75358.261962
    test 1250 line 210 toEtm8.northing: 7711258.662251
    test 1251 line 210 toEtm8.gamma: 1.806297
    test 1252 line 210 toEtm8.scale: 0.999669
    test 1253 line 210 toEtm8.lat: 69.499594
    test 1254 line 210 toEtm8.lon: 1.928336
    test 1255 line 211 toEtm8.easting: 8781885.229116
    test 1256 line 211 toEtm8.northing: 9184776.452211
    test 1257 line 211 toEtm8.gamma: 81.795539
    test 1258 line 211 toEtm8.scale: 2.094908
    test 1259 line 211 toEtm8.lat: 27.981364
    test 1260 line 211 toEtm8.lon: 86.061113
    test 1261 line 212 toEtm8.easting: 954378.415174
    test 1262 line 212 toEtm8.northing: 7449110.669807
    test 1263 line 212 toEtm8.gamma: 19.380657
    test 1264 line 212 toEtm8.scale: 1.010768
    test 1265 line 212 toEtm8.lat: 65.699839
    test 1266 line 212 toEtm8.lon: 21.104725
    test 1267 line 213 toEtm8.easting: 720971.793706
    test 1268 line 213 toEtm8.northing: 5265195.121555
    test 1269 line 213 toEtm8.gamma: 7.002995
    test 1270 line 213 toEtm8.scale: 1.005995
    test 1271 line 213 toEtm8.lat: 47.143648
    test 1272 line 213 toEtm8.lon: 9.512189
    test 1273 line 214 toEtm8.easting: 561561.493937
    test 1274 line 214 toEtm8.northing: 989910.236221
    test 1275 line 214 toEtm8.gamma: 0.793118
    test 1276 line 214 toEtm8.scale: 1.003505
    test 1277 line 214 toEtm8.lat: 8.920167
    test 1278 line 214 toEtm8.lon: 5.101513
    test 1279 line 215 toEtm8.easting: 3446829.634468
    test 1280 line 215 toEtm8.northing: 9232868.155664
    test 1281 line 215 toEtm8.gamma: 76.279075
    test 1282 line 215 toEtm8.scale: 1.148263
    test 1283 line 215 toEtm8.lat: 59.778971
    test 1284 line 215 toEtm8.lon: 78.080322
    test 1285 line 216 toEtm8.easting: 4048307.545909
    test 1286 line 216 toEtm8.northing: 9800416.422998
    test 1287 line 216 toEtm8.gamma: 86.843918
    test 1288 line 216 toEtm8.scale: 1.206495
    test 1289 line 216 toEtm8.lat: 55.865310
    test 1290 line 216 toEtm8.lon: 87.384288
    test 1291 line 217 toEtm8.easting: 8973188.480293
    test 1292 line 217 toEtm8.northing: 7042230.087021
    test 1293 line 217 toEtm8.gamma: 60.872456
    test 1294 line 217 toEtm8.scale: 2.156098
    test 1295 line 217 toEtm8.lat: 24.310973
    test 1296 line 217 toEtm8.lon: 76.823777
    test 1297 line 218 toEtm8.easting: 126314.191618
    test 1298 line 218 toEtm8.northing: 396006.687921
    test 1299 line 218 toEtm8.gamma: 0.071065
    test 1300 line 218 toEtm8.scale: 0.999798
    test 1301 line 218 toEtm8.lat: 3.582041
    test 1302 line 218 toEtm8.lon: 1.137286
    test 1303 line 219 toEtm8.easting: 5247652.345647
    test 1304 line 219 toEtm8.northing: 8670513.359752
    test 1305 line 219 toEtm8.gamma: 72.700498
    test 1306 line 219 toEtm8.scale: 1.355272
    test 1307 line 219 toEtm8.lat: 46.124233
    test 1308 line 219 toEtm8.lon: 77.313118
    test 1309 line 220 toEtm8.easting: 8103656.838119
    test 1310 line 220 toEtm8.northing: 9469794.014737
    test 1311 line 220 toEtm8.gamma: 84.490673
    test 1312 line 220 toEtm8.scale: 1.912164
    test 1313 line 220 toEtm8.lat: 31.171391
    test 1314 line 220 toEtm8.lon: 87.104504
    test 1315 line 221 toEtm8.easting: 6300112.758236
    test 1316 line 221 toEtm8.northing: 93835.917364
    test 1317 line 221 toEtm8.gamma: 0.644805
    test 1318 line 221 toEtm8.scale: 1.534073
    test 1319 line 221 toEtm8.lat: 0.553171
    test 1320 line 221 toEtm8.lon: 49.117104
    test 1321 line 222 toEtm8.easting: 3894813.593782
    test 1322 line 222 toEtm8.northing: 4833832.341027
    test 1323 line 222 toEtm8.gamma: 27.453298
    test 1324 line 222 toEtm8.scale: 1.192135
    test 1325 line 222 toEtm8.lat: 35.361587
    test 1326 line 222 toEtm8.lon: 41.860599
    test 1327 line 223 toEtm8.easting: 402511.346712
    test 1328 line 223 toEtm8.northing: 3520621.561911
    test 1329 line 223 toEtm8.gamma: 2.238474
    test 1330 line 223 toEtm8.scale: 1.001599
    test 1331 line 223 toEtm8.lat: 31.750314
    test 1332 line 223 toEtm8.lon: 4.248167
    test 1333 line 224 toEtm8.easting: 5357378.503148
    test 1334 line 224 toEtm8.northing: 2772997.602234
    test 1335 line 224 toEtm8.gamma: 17.823560
    test 1336 line 224 toEtm8.scale: 1.376031
    test 1337 line 224 toEtm8.lat: 17.924336
    test 1338 line 224 toEtm8.lon: 46.096402
    test 1339 line 225 toEtm8.easting: 2807553.985866
    test 1340 line 225 toEtm8.northing: 8177847.980275
    test 1341 line 225 toEtm8.gamma: 54.680045
    test 1342 line 225 toEtm8.scale: 1.097531
    test 1343 line 225 toEtm8.lat: 60.931488
    test 1344 line 225 toEtm8.lon: 58.221214
    test 1345 line 226 toEtm8.easting: 18289045.166501
    test 1346 line 226 toEtm8.northing: 7792942.339604
    test 1347 line 226 toEtm8.gamma: 73.216494
    test 1348 line 226 toEtm8.scale: 8.098009
    test 1349 line 226 toEtm8.lat: 5.358151
    test 1350 line 226 toEtm8.lon: 87.556213
    test 1351 line 227 toEtm8.easting: 8376822.459538
    test 1352 line 227 toEtm8.northing: 8128174.623878
    test 1353 line 227 toEtm8.gamma: 70.920117
    test 1354 line 227 toEtm8.scale: 1.984873
    test 1355 line 227 toEtm8.lat: 28.616673
    test 1356 line 227 toEtm8.lon: 80.452426
    test 1357 line 228 toEtm8.easting: 11898068.353272
    test 1358 line 228 toEtm8.northing: 4772439.493697
    test 1359 line 228 toEtm8.gamma: 42.613968
    test 1360 line 228 toEtm8.scale: 3.314412
    test 1361 line 228 toEtm8.lat: 11.709763
    test 1362 line 228 toEtm8.lon: 76.760295
    test 1363 line 229 toEtm8.easting: 10550946.939050
    test 1364 line 229 toEtm8.northing: 3851968.815295
    test 1365 line 229 toEtm8.gamma: 33.383025
    test 1366 line 229 toEtm8.scale: 2.724754
    test 1367 line 229 toEtm8.lat: 12.009498
    test 1368 line 229 toEtm8.lon: 71.782351
    test 1369 line 230 toEtm8.easting: 6828299.123607
    test 1370 line 230 toEtm8.northing: 9394803.227463
    test 1371 line 230 toEtm8.gamma: 83.181386
    test 1372 line 230 toEtm8.scale: 1.624359
    test 1373 line 230 toEtm8.lat: 37.629784
    test 1374 line 230 toEtm8.lon: 85.795687
    test 1375 line 231 toEtm8.easting: 11162550.334022
    test 1376 line 231 toEtm8.northing: 2640267.279593
    test 1377 line 231 toEtm8.gamma: 23.145404
    test 1378 line 231 toEtm8.scale: 2.998408
    test 1379 line 231 toEtm8.lat: 7.721128
    test 1380 line 231 toEtm8.lon: 71.662731
    test 1381 line 232 toEtm8.easting: 4411584.447941
    test 1382 line 232 toEtm8.northing: 4956173.694407
    test 1383 line 232 toEtm8.gamma: 30.713919
    test 1384 line 232 toEtm8.scale: 1.248736
    test 1385 line 232 toEtm8.lat: 34.295026
    test 1386 line 232 toEtm8.lon: 46.442191
    test 1387 line 233 toEtm8.easting: 672108.897905
    test 1388 line 233 toEtm8.northing: 4751554.657054
    test 1389 line 233 toEtm8.gamma: 5.569178
    test 1390 line 233 toEtm8.scale: 1.005162
    test 1391 line 233 toEtm8.lat: 42.622496
    test 1392 line 233 toEtm8.lon: 8.193605
    test 1393 line 234 toEtm8.easting: 5022964.290579
    test 1394 line 234 toEtm8.northing: 6860418.199502
    test 1395 line 234 toEtm8.gamma: 50.862230
    test 1396 line 234 toEtm8.scale: 1.324925
    test 1397 line 234 toEtm8.lat: 41.667780
    test 1398 line 234 toEtm8.lon: 61.518288
    test 1399 line 235 toEtm8.easting: 1669655.595207
    test 1400 line 235 toEtm8.northing: 4152086.537021
    test 1401 line 235 toEtm8.gamma: 11.110237
    test 1402 line 235 toEtm8.scale: 1.034138
    test 1403 line 235 toEtm8.lat: 36.060369
    test 1404 line 235 toEtm8.lon: 18.444112
    test 1405 line 236 toEtm8.easting: 6055876.729655
    test 1406 line 236 toEtm8.northing: 4896837.552619
    test 1407 line 236 toEtm8.gamma: 35.799747
    test 1408 line 236 toEtm8.scale: 1.485967
    test 1409 line 236 toEtm8.lat: 27.948091
    test 1410 line 236 toEtm8.lon: 56.816429
    test 1411 line 237 toEtm8.easting: 1209214.164379
    test 1412 line 237 toEtm8.northing: 7266409.859178
    test 1413 line 237 toEtm8.gamma: 22.319633
    test 1414 line 237 toEtm8.scale: 1.017554
    test 1415 line 237 toEtm8.lat: 63.386030
    test 1416 line 237 toEtm8.lon: 24.662716
    test 1417 line 238 toEtm8.easting: 5154564.559584
    test 1418 line 238 toEtm8.northing: 698118.349975
    test 1419 line 238 toEtm8.gamma: 4.242360
    test 1420 line 238 toEtm8.scale: 1.347481
    test 1421 line 238 toEtm8.lat: 4.680922
    test 1422 line 238 toEtm8.lon: 42.114426
    test 1423 line 239 toEtm8.easting: 2695149.806543
    test 1424 line 239 toEtm8.northing: 8208197.765605
    test 1425 line 239 toEtm8.gamma: 54.178615
    test 1426 line 239 toEtm8.scale: 1.089730
    test 1427 line 239 toEtm8.lat: 61.826625
    test 1428 line 239 toEtm8.lon: 57.525096
    test 1429 line 240 toEtm8.easting: 3394792.327820
    test 1430 line 240 toEtm8.northing: 3217583.415552
    test 1431 line 240 toEtm8.gamma: 15.165863
    test 1432 line 240 toEtm8.scale: 1.145285
    test 1433 line 240 toEtm8.lat: 25.104353
    test 1434 line 240 toEtm8.lon: 32.528660
    test 1435 line 241 toEtm8.easting: 1429160.966985
    test 1436 line 241 toEtm8.northing: 8212685.362032
    test 1437 line 241 toEtm8.gamma: 37.484904
    test 1438 line 241 toEtm8.scale: 1.024676
    test 1439 line 241 toEtm8.lat: 69.678351
    test 1440 line 241 toEtm8.lon: 39.275513
    test 1441 line 242 toEtm8.easting: 8343387.998065
    test 1442 line 242 toEtm8.northing: 8885196.954578
    test 1443 line 242 toEtm8.gamma: 78.561937
    test 1444 line 242 toEtm8.scale: 1.974733
    test 1445 line 242 toEtm8.lat: 29.671384
    test 1446 line 242 toEtm8.lon: 84.196595
    test 1447 line 243 toEtm8.easting: 1990722.928606
    test 1448 line 243 toEtm8.northing: 7569202.065162
    test 1449 line 243 toEtm8.gamma: 37.075276
    test 1450 line 243 toEtm8.scale: 1.048486
    test 1451 line 243 toEtm8.lat: 62.300208
    test 1452 line 243 toEtm8.lon: 40.474051
    test 1453 line 244 toEtm8.easting: 1554980.099559
    test 1454 line 244 toEtm8.northing: 1449423.919586
    test 1455 line 244 toEtm8.gamma: 3.188328
    test 1456 line 244 toEtm8.scale: 1.029664
    test 1457 line 244 toEtm8.lat: 12.721776
    test 1458 line 244 toEtm8.lon: 14.190003
    test 1459 line 245 toEtm8.easting: 785205.450196
    test 1460 line 245 toEtm8.northing: 5575158.423096
    test 1461 line 245 toEtm8.gamma: 8.388417
    test 1462 line 245 toEtm8.scale: 1.007181
    test 1463 line 245 toEtm8.lat: 49.811296
    test 1464 line 245 toEtm8.lon: 10.925011
    test 1465 line 246 toEtm8.easting: 3310405.988313
    test 1466 line 246 toEtm8.northing: 5955022.233881
    test 1467 line 246 toEtm8.gamma: 33.007587
    test 1468 line 246 toEtm8.scale: 1.137141
    test 1469 line 246 toEtm8.lat: 45.132680
    test 1470 line 246 toEtm8.lon: 42.478624
    test 1471 line 247 toEtm8.easting: 4733460.960666
    test 1472 line 247 toEtm8.northing: 129034.889816
    test 1473 line 247 toEtm8.gamma: 0.737551
    test 1474 line 247 toEtm8.scale: 1.290439
    test 1475 line 247 toEtm8.lat: 0.904279
    test 1476 line 247 toEtm8.lon: 39.078412
    test 1477 line 248 toEtm8.easting: 3322708.343909
    test 1478 line 248 toEtm8.northing: 3864738.078742
    test 1479 line 248 toEtm8.gamma: 18.472566
    test 1480 line 248 toEtm8.scale: 1.138838
    test 1481 line 248 toEtm8.lat: 30.163605
    test 1482 line 248 toEtm8.lon: 33.577996
    test 1483 line 249 toEtm8.easting: 8672864.417204
    test 1484 line 249 toEtm8.northing: 8333465.983444
    test 1485 line 249 toEtm8.gamma: 73.206273
    test 1486 line 249 toEtm8.scale: 2.065441
    test 1487 line 249 toEtm8.lat: 27.643244
    test 1488 line 249 toEtm8.lon: 81.892859
    test 1489 line 250 toEtm8.easting: 11126818.231196
    test 1490 line 250 toEtm8.northing: 7618712.174991
    test 1491 line 250 toEtm8.gamma: 67.887173
    test 1492 line 250 toEtm8.scale: 2.922417
    test 1493 line 250 toEtm8.lat: 18.201208
    test 1494 line 250 toEtm8.lon: 82.434618
    test 1495 line 251 toEtm8.easting: 8650100.981797
    test 1496 line 251 toEtm8.northing: 9975084.168997
    test 1497 line 251 toEtm8.gamma: 89.767446
    test 1498 line 251 toEtm8.scale: 2.057289
    test 1499 line 251 toEtm8.lat: 28.804576
    test 1500 line 251 toEtm8.lon: 89.886072
    test 1501 line 252 toEtm8.easting: 2212701.180192
    test 1502 line 252 toEtm8.northing: 650348.100229
    test 1503 line 252 toEtm8.gamma: 1.970441
    test 1504 line 252 toEtm8.scale: 1.060830
    test 1505 line 252 toEtm8.lat: 5.542998
    test 1506 line 252 toEtm8.lon: 19.589578
    test 1507 line 253 toEtm8.easting: 6890222.326618
    test 1508 line 253 toEtm8.northing: 7506813.499547
    test 1509 line 253 toEtm8.gamma: 62.684825
    test 1510 line 253 toEtm8.scale: 1.638488
    test 1511 line 253 toEtm8.lat: 34.237147
    test 1512 line 253 toEtm8.lon: 73.678164
    test 1513 line 254 toEtm8.easting: 6692260.067325
    test 1514 line 254 toEtm8.northing: 4244174.008110
    test 1515 line 254 toEtm8.gamma: 31.812920
    test 1516 line 254 toEtm8.scale: 1.604640
    test 1517 line 254 toEtm8.lat: 22.704949
    test 1518 line 254 toEtm8.lon: 57.877010
    test 1519 line 255 toEtm8.easting: 1225564.137190
    test 1520 line 255 toEtm8.northing: 4778923.924144
    test 1521 line 255 toEtm8.gamma: 10.083419
    test 1522 line 255 toEtm8.scale: 1.018134
    test 1523 line 255 toEtm8.lat: 42.192424
    test 1524 line 255 toEtm8.lon: 14.828196
    test 1525 line 256 toEtm8.easting: 12341116.154950
    test 1526 line 256 toEtm8.northing: 5081855.521966
    test 1527 line 256 toEtm8.gamma: 45.712546
    test 1528 line 256 toEtm8.scale: 3.535170
    test 1529 line 256 toEtm8.lat: 11.481151
    test 1530 line 256 toEtm8.lon: 78.189236
    test 1531 line 257 toEtm8.easting: 6673845.021771
    test 1532 line 257 toEtm8.northing: 1177587.190565
    test 1533 line 257 toEtm8.gamma: 8.389141
    test 1534 line 257 toEtm8.scale: 1.605171
    test 1535 line 257 toEtm8.lat: 6.609626
    test 1536 line 257 toEtm8.lon: 51.735783
    test 1537 line 258 toEtm8.easting: 6966354.690417
    test 1538 line 258 toEtm8.northing: 3641802.005093
    test 1539 line 258 toEtm8.gamma: 27.409636
    test 1540 line 258 toEtm8.scale: 1.661469
    test 1541 line 258 toEtm8.lat: 19.059369
    test 1542 line 258 toEtm8.lon: 57.526439
    test 1543 max forward error: 3.166497e-08
    test 1544 max reverse error: 1.278977e-13
    test 1545 Etm.scale0: 0.9996
    test 1546 Etm.datum: WGS84
    test 1547 Etm.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testEtmTMcoords.py tests passed, 1 skipped (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.184 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testExactTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testExactTMcoords.py line 14
# lazily imported pygeodesy.LatLon_ from .points by testExactTMcoords.py line 14

    testing testExactTMcoords.py 23.03.27 (module pygeodesy.etm 22.10.12) isLazy=3
    test 1 line 1 _ExactTM.easting: 1548706.791619
    test 2 line 1 _ExactTM.northing: 8451449.198772
    test 3 line 1 _ExactTM.gamma: 43.922790
    test 4 line 1 _ExactTM.scale: 1.029060
    test 5 line 1 _ExactTM.lat: 70.579277
    test 6 line 1 _ExactTM.lon: 45.599420
    test 7 line 2 _ExactTM.easting: 2624150.740929
    test 8 line 2 _ExactTM.northing: 1204434.041605
    test 9 line 2 _ExactTM.gamma: 4.292619
    test 10 line 2 _ExactTM.scale: 1.086051
    test 11 line 2 _ExactTM.lat: 10.018894
    test 12 line 2 _ExactTM.lon: 23.313324
    test 13 line 3 _ExactTM.easting: 9855841.232935
    test 14 line 3 _ExactTM.northing: 6145496.115155
    test 15 line 3 _ExactTM.gamma: 53.348315
    test 16 line 3 _ExactTM.scale: 2.445098
    test 17 line 3 _ExactTM.lat: 19.479896
    test 18 line 3 _ExactTM.lon: 75.662049
    test 19 line 4 _ExactTM.easting: 3206390.691996
    test 20 line 4 _ExactTM.northing: 2650745.400406
    test 21 line 4 _ExactTM.gamma: 11.666950
    test 22 line 4 _ExactTM.scale: 1.129359
    test 23 line 4 _ExactTM.lat: 21.072465
    test 24 line 4 _ExactTM.lon: 29.828684
    test 25 line 5 _ExactTM.easting: 4328154.083501
    test 26 line 5 _ExactTM.northing: 749647.623690
    test 27 line 5 _ExactTM.gamma: 4.024317
    test 28 line 5 _ExactTM.scale: 1.240829
    test 29 line 5 _ExactTM.lat: 5.458957
    test 30 line 5 _ExactTM.lon: 36.385237
    test 31 line 6 _ExactTM.easting: 847598.266514
    test 32 line 6 _ExactTM.northing: 7947180.962440
    test 33 line 6 _ExactTM.gamma: 21.639091
    test 34 line 6 _ExactTM.scale: 1.008399
    test 35 line 6 _ExactTM.lat: 70.175454
    test 36 line 6 _ExactTM.lon: 22.865350
    test 37 line 7 _ExactTM.easting: 2727657.337974
    test 38 line 7 _ExactTM.northing: 8283916.696410
    test 39 line 7 _ExactTM.gamma: 55.690909
    test 40 line 7 _ExactTM.scale: 1.091942
    test 41 line 7 _ExactTM.lat: 61.965605
    test 42 line 7 _ExactTM.lon: 58.931371
    test 43 line 8 _ExactTM.easting: 2331001.751890
    test 44 line 8 _ExactTM.northing: 1313608.224751
    test 45 line 8 _ExactTM.gamma: 4.214690
    test 46 line 8 _ExactTM.scale: 1.067599
    test 47 line 8 _ExactTM.lat: 11.116050
    test 48 line 8 _ExactTM.lon: 20.901069
    test 49 line 9 _ExactTM.easting: 6035557.239480
    test 50 line 9 _ExactTM.northing: 5791770.791879
    test 51 line 9 _ExactTM.gamma: 43.698170
    test 52 line 9 _ExactTM.scale: 1.481260
    test 53 line 9 _ExactTM.lat: 32.210543
    test 54 line 9 _ExactTM.lon: 60.705849
    test 55 line 10 _ExactTM.easting: 1064553.125852
    test 56 line 10 _ExactTM.northing: 9417273.737208
    test 57 line 10 _ExactTM.gamma: 61.100380
    test 58 line 10 _ExactTM.scale: 1.013475
    test 59 line 10 _ExactTM.lat: 79.187451
    test 60 line 10 _ExactTM.lon: 61.532382
    test 61 line 11 _ExactTM.easting: 1400137.116164
    test 62 line 11 _ExactTM.northing: 9616907.017686
    test 63 line 11 _ExactTM.gamma: 74.527087
    test 64 line 11 _ExactTM.scale: 1.023640
    test 65 line 11 _ExactTM.lat: 77.103759
    test 66 line 11 _ExactTM.lon: 74.899105
    test 67 line 12 _ExactTM.easting: 9860691.016626
    test 68 line 12 _ExactTM.northing: 7433039.143328
    test 69 line 12 _ExactTM.gamma: 65.357693
    test 70 line 12 _ExactTM.scale: 2.438973
    test 71 line 12 _ExactTM.lat: 21.889514
    test 72 line 12 _ExactTM.lon: 80.019886
    test 73 line 13 _ExactTM.easting: 8076501.833695
    test 74 line 13 _ExactTM.northing: 8561614.174782
    test 75 line 13 _ExactTM.gamma: 75.073393
    test 76 line 13 _ExactTM.scale: 1.906202
    test 77 line 13 _ExactTM.lat: 30.536296
    test 78 line 13 _ExactTM.lon: 82.186178
    test 79 line 14 _ExactTM.easting: 3335099.866623
    test 80 line 14 _ExactTM.northing: 6740519.084015
    test 81 line 14 _ExactTM.gamma: 40.611821
    test 82 line 14 _ExactTM.scale: 1.139021
    test 83 line 14 _ExactTM.lat: 49.990485
    test 84 line 14 _ExactTM.lon: 48.203179
    test 85 line 15 _ExactTM.easting: 12051574.928500
    test 86 line 15 _ExactTM.northing: 6587213.051951
    test 87 line 15 _ExactTM.gamma: 59.033237
    test 88 line 15 _ExactTM.scale: 3.357469
    test 89 line 15 _ExactTM.lat: 14.486312
    test 90 line 15 _ExactTM.lon: 80.905137
    test 91 line 16 _ExactTM.easting: 5387578.735298
    test 92 line 16 _ExactTM.northing: 4111216.907168
    test 93 line 16 _ExactTM.gamma: 27.574337
    test 94 line 16 _ExactTM.scale: 1.379357
    test 95 line 16 _ExactTM.lat: 25.936824
    test 96 line 16 _ExactTM.lon: 49.913598
    test 97 line 17 _ExactTM.easting: 2622214.380233
    test 98 line 17 _ExactTM.northing: 8678923.984567
    test 99 line 17 _ExactTM.gamma: 61.697275
    test 100 line 17 _ExactTM.scale: 1.084810
    test 101 line 17 _ExactTM.lat: 64.402196
    test 102 line 17 _ExactTM.lon: 64.091395
    test 103 line 18 _ExactTM.easting: 5068474.169633
    test 104 line 18 _ExactTM.northing: 9492066.993709
    test 105 line 18 _ExactTM.gamma: 83.156740
    test 106 line 18 _ExactTM.scale: 1.329990
    test 107 line 18 _ExactTM.lat: 48.451354
    test 108 line 18 _ExactTM.lon: 84.856198
    test 109 line 19 _ExactTM.easting: 738062.047779
    test 110 line 19 _ExactTM.northing: 3031007.074116
    test 111 line 19 _ExactTM.gamma: 3.416802
    test 112 line 19 _ExactTM.scale: 1.006332
    test 113 line 19 _ExactTM.lat: 27.203895
    test 114 line 19 _ExactTM.lon: 7.440229
    test 115 line 20 _ExactTM.easting: 1944413.834565
    test 116 line 20 _ExactTM.northing: 9613299.224493
    test 117 line 20 _ExactTM.gamma: 78.462831
    test 118 line 20 _ExactTM.scale: 1.046134
    test 119 line 20 _ExactTM.lat: 72.509000
    test 120 line 20 _ExactTM.lon: 78.982283
    test 121 line 21 _ExactTM.easting: 2114521.418406
    test 122 line 21 _ExactTM.northing: 4954077.440098
    test 123 line 21 _ExactTM.gamma: 17.571878
    test 124 line 21 _ExactTM.scale: 1.055093
    test 125 line 21 _ExactTM.lat: 41.824954
    test 126 line 21 _ExactTM.lon: 25.392744
    test 127 line 22 _ExactTM.easting: 620365.905090
    test 128 line 22 _ExactTM.northing: 4755542.026562
    test 129 line 22 _ExactTM.gamma: 5.152022
    test 130 line 22 _ExactTM.scale: 1.004338
    test 131 line 22 _ExactTM.lat: 42.701376
    test 132 line 22 _ExactTM.lon: 7.572738
    test 133 line 23 _ExactTM.easting: 263004.770989
    test 134 line 23 _ExactTM.northing: 4493669.762451
    test 135 line 23 _ExactTM.gamma: 2.020523
    test 136 line 23 _ExactTM.scale: 1.000452
    test 137 line 23 _ExactTM.lat: 40.552052
    test 138 line 23 _ExactTM.lon: 3.106056
    test 139 line 24 _ExactTM.easting: 3217221.739462
    test 140 line 24 _ExactTM.northing: 437776.119161
    test 141 line 24 _ExactTM.gamma: 1.848169
    test 142 line 24 _ExactTM.scale: 1.130558
    test 143 line 24 _ExactTM.lat: 3.501242
    test 144 line 24 _ExactTM.lon: 27.806507
    test 145 line 25 _ExactTM.easting: 14661142.444961
    test 146 line 25 _ExactTM.northing: 7476100.824185
    test 147 line 25 _ExactTM.gamma: 68.376669
    test 148 line 25 _ExactTM.scale: 4.896650
    test 149 line 25 _ExactTM.lat: 10.148715
    test 150 line 25 _ExactTM.lon: 85.373768
    test 151 line 26 _ExactTM.easting: 967777.158554
    test 152 line 26 _ExactTM.northing: 6615684.266592
    test 153 line 26 _ExactTM.gamma: 14.410044
    test 154 line 26 _ExactTM.scale: 1.011100
    test 155 line 26 _ExactTM.lat: 58.582623
    test 156 line 26 _ExactTM.lon: 16.755558
    test 157 line 27 _ExactTM.easting: 7558840.728461
    test 158 line 27 _ExactTM.northing: 4144728.130764
    test 159 line 27 _ExactTM.gamma: 32.557264
    test 160 line 27 _ExactTM.scale: 1.791490
    test 161 line 27 _ExactTM.lat: 19.793004
    test 162 line 27 _ExactTM.lon: 61.746763
    test 163 line 28 _ExactTM.easting: 1056008.314161
    test 164 line 28 _ExactTM.northing: 9290799.692669
    test 165 line 28 _ExactTM.gamma: 55.843278
    test 166 line 28 _ExactTM.scale: 1.013253
    test 167 line 28 _ExactTM.lat: 78.666776
    test 168 line 28 _ExactTM.lon: 56.365355
    test 169 line 29 _ExactTM.easting: 1943965.134687
    test 170 line 29 _ExactTM.northing: 1389972.228690
    test 171 line 29 _ExactTM.gamma: 3.774869
    test 172 line 29 _ExactTM.scale: 1.046724
    test 173 line 29 _ExactTM.lat: 11.998788
    test 174 line 29 _ExactTM.lon: 17.597873
    test 175 line 30 _ExactTM.easting: 5803077.072902
    test 176 line 30 _ExactTM.northing: 5649957.943659
    test 177 line 30 _ExactTM.gamma: 41.717943
    test 178 line 30 _ExactTM.scale: 1.442572
    test 179 line 30 _ExactTM.lat: 32.540378
    test 180 line 30 _ExactTM.lon: 58.764613
    test 181 line 31 _ExactTM.easting: 2928716.986009
    test 182 line 31 _ExactTM.northing: 5731835.058317
    test 183 line 31 _ExactTM.gamma: 28.538550
    test 184 line 31 _ExactTM.scale: 1.106780
    test 185 line 31 _ExactTM.lat: 45.160356
    test 186 line 31 _ExactTM.lon: 37.465285
    test 187 line 32 _ExactTM.easting: 326141.975756
    test 188 line 32 _ExactTM.northing: 8881325.164543
    test 189 line 32 _ExactTM.gamma: 16.111415
    test 190 line 32 _ExactTM.scale: 1.000900
    test 191 line 32 _ExactTM.lat: 79.584190
    test 192 line 32 _ExactTM.lon: 16.367006
    test 193 line 33 _ExactTM.easting: 3933015.267450
    test 194 line 33 _ExactTM.northing: 7932373.909512
    test 195 line 33 _ExactTM.gamma: 58.577424
    test 196 line 33 _ExactTM.scale: 1.194811
    test 197 line 33 _ExactTM.lat: 52.470664
    test 198 line 33 _ExactTM.lon: 64.125580
    test 199 line 34 _ExactTM.easting: 8598926.983213
    test 200 line 34 _ExactTM.northing: 6214135.167503
    test 201 line 34 _ExactTM.gamma: 52.612878
    test 202 line 34 _ExactTM.scale: 2.051367
    test 203 line 34 _ExactTM.lat: 23.702673
    test 204 line 34 _ExactTM.lon: 72.630363
    test 205 line 35 _ExactTM.easting: 6620553.333772
    test 206 line 35 _ExactTM.northing: 6540527.122948
    test 207 line 35 _ExactTM.gamma: 52.350140
    test 208 line 35 _ExactTM.scale: 1.586614
    test 209 line 35 _ExactTM.lat: 32.603520
    test 210 line 35 _ExactTM.lon: 67.280123
    test 211 line 36 _ExactTM.easting: 1515136.758292
    test 212 line 36 _ExactTM.northing: 3858996.087537
    test 213 line 36 _ExactTM.gamma: 9.225127
    test 214 line 36 _ExactTM.scale: 1.028029
    test 215 line 36 _ExactTM.lat: 33.776224
    test 216 line 36 _ExactTM.lon: 16.280993
    test 217 line 37 _ExactTM.easting: 479854.373445
    test 218 line 37 _ExactTM.northing: 8980501.389896
    test 219 line 37 _ExactTM.gamma: 25.021222
    test 220 line 37 _ExactTM.scale: 1.002415
    test 221 line 37 _ExactTM.lat: 79.932747
    test 222 line 37 _ExactTM.lon: 25.363622
    test 223 line 38 _ExactTM.easting: 5243446.564940
    test 224 line 38 _ExactTM.northing: 140657.213960
    test 225 line 38 _ExactTM.gamma: 0.862817
    test 226 line 38 _ExactTM.scale: 1.360358
    test 227 line 38 _ExactTM.lat: 0.935056
    test 228 line 38 _ExactTM.lon: 42.538824
    test 229 line 39 _ExactTM.easting: 12806457.923218
    test 230 line 39 _ExactTM.northing: 7170118.684675
    test 231 line 39 _ExactTM.gamma: 64.708921
    test 232 line 39 _ExactTM.scale: 3.740588
    test 233 line 39 _ExactTM.lat: 13.490862
    test 234 line 39 _ExactTM.lon: 83.178380
    test 235 line 40 _ExactTM.easting: 1202993.459158
    test 236 line 40 _ExactTM.northing: 5557316.053599
    test 237 line 40 _ExactTM.gamma: 12.579061
    test 238 line 40 _ExactTM.scale: 1.017426
    test 239 line 40 _ExactTM.lat: 48.979057
    test 240 line 40 _ExactTM.lon: 16.474542
    test 241 line 41 _ExactTM.easting: 1729088.710196
    test 242 line 41 _ExactTM.northing: 7770874.289954
    test 243 line 41 _ExactTM.gamma: 36.021783
    test 244 line 41 _ExactTM.scale: 1.036397
    test 245 line 41 _ExactTM.lat: 65.036016
    test 246 line 41 _ExactTM.lon: 38.729091
    test 247 line 42 _ExactTM.easting: 2437301.517425
    test 248 line 42 _ExactTM.northing: 5539327.748318
    test 249 line 42 _ExactTM.gamma: 23.461879
    test 250 line 42 _ExactTM.scale: 1.073459
    test 251 line 42 _ExactTM.lat: 45.510091
    test 252 line 42 _ExactTM.lon: 31.303729
    test 253 line 43 _ExactTM.easting: 3647186.135066
    test 254 line 43 _ExactTM.northing: 2086412.330983
    test 255 line 43 _ExactTM.gamma: 10.023991
    test 256 line 43 _ExactTM.scale: 1.168707
    test 257 line 43 _ExactTM.lat: 16.058010
    test 258 line 43 _ExactTM.lon: 32.520026
    test 259 line 44 _ExactTM.easting: 1818497.243556
    test 260 line 44 _ExactTM.northing: 4275471.745057
    test 261 line 44 _ExactTM.gamma: 12.499656
    test 262 line 44 _ExactTM.scale: 1.040604
    test 263 line 44 _ExactTM.lat: 36.845200
    test 264 line 44 _ExactTM.lon: 20.282283
    test 265 line 45 _ExactTM.easting: 3751304.113783
    test 266 line 45 _ExactTM.northing: 5130454.001592
    test 267 line 45 _ExactTM.gamma: 28.959707
    test 268 line 45 _ExactTM.scale: 1.177681
    test 269 line 45 _ExactTM.lat: 37.865481
    test 270 line 45 _ExactTM.lon: 41.990402
    test 271 line 46 _ExactTM.easting: 2616733.138544
    test 272 line 46 _ExactTM.northing: 394644.463815
    test 273 line 46 _ExactTM.gamma: 1.390425
    test 274 line 46 _ExactTM.scale: 1.085595
    test 275 line 46 _ExactTM.lat: 3.287272
    test 276 line 46 _ExactTM.lon: 22.917604
    test 277 line 47 _ExactTM.easting: 1756506.573942
    test 278 line 47 _ExactTM.northing: 5570393.986394
    test 279 line 47 _ExactTM.gamma: 17.897894
    test 280 line 47 _ExactTM.scale: 1.037732
    test 281 line 47 _ExactTM.lat: 47.813686
    test 282 line 47 _ExactTM.lon: 23.545092
    test 283 line 48 _ExactTM.easting: 8752461.894711
    test 284 line 48 _ExactTM.northing: 6087728.152284
    test 285 line 48 _ExactTM.gamma: 51.628465
    test 286 line 48 _ExactTM.scale: 2.095465
    test 287 line 48 _ExactTM.lat: 22.836853
    test 288 line 48 _ExactTM.lon: 72.604385
    test 289 line 49 _ExactTM.easting: 1309272.216432
    test 290 line 49 _ExactTM.northing: 59520.028899
    test 291 line 49 _ExactTM.gamma: 0.109069
    test 292 line 49 _ExactTM.scale: 1.020897
    test 293 line 49 _ExactTM.lat: 0.527262
    test 294 line 49 _ExactTM.lon: 11.684209
    test 295 line 50 _ExactTM.easting: 328652.277129
    test 296 line 50 _ExactTM.northing: 2233043.958874
    test 297 line 50 _ExactTM.gamma: 1.084863
    test 298 line 50 _ExactTM.scale: 1.000935
    test 299 line 50 _ExactTM.lat: 20.166742
    test 300 line 50 _ExactTM.lon: 3.143948
    test 301 line 51 _ExactTM.easting: 8637959.716447
    test 302 line 51 _ExactTM.northing: 9190635.156031
    test 303 line 51 _ExactTM.gamma: 81.802563
    test 304 line 51 _ExactTM.scale: 2.054329
    test 305 line 51 _ExactTM.lat: 28.604629
    test 306 line 51 _ExactTM.lon: 85.988721
    test 307 line 52 _ExactTM.easting: 8548521.455147
    test 308 line 52 _ExactTM.northing: 9172410.943282
    test 309 line 52 _ExactTM.gamma: 81.583928
    test 310 line 52 _ExactTM.scale: 2.029641
    test 311 line 52 _ExactTM.lat: 28.984048
    test 312 line 52 _ExactTM.lon: 85.833448
    test 313 line 53 _ExactTM.easting: 796987.281104
    test 314 line 53 _ExactTM.northing: 7677446.357675
    test 315 line 53 _ExactTM.gamma: 18.084472
    test 316 line 53 _ExactTM.scale: 1.007381
    test 317 line 53 _ExactTM.lat: 68.071020
    test 318 line 53 _ExactTM.lon: 19.392823
    test 319 line 54 _ExactTM.easting: 3291036.496762
    test 320 line 54 _ExactTM.northing: 9513199.600666
    test 321 line 54 _ExactTM.gamma: 80.890254
    test 322 line 54 _ExactTM.scale: 1.134826
    test 323 line 54 _ExactTM.lat: 61.416576
    test 324 line 54 _ExactTM.lon: 81.981611
    test 325 line 55 _ExactTM.easting: 7087225.330906
    test 326 line 55 _ExactTM.northing: 8382823.855822
    test 327 line 55 _ExactTM.gamma: 72.253756
    test 328 line 55 _ExactTM.scale: 1.678070
    test 329 line 55 _ExactTM.lat: 35.074753
    test 330 line 55 _ExactTM.lon: 79.496003
    test 331 line 56 _ExactTM.easting: 5090358.125724
    test 332 line 56 _ExactTM.northing: 4318294.133489
    test 333 line 56 _ExactTM.gamma: 28.266280
    test 334 line 56 _ExactTM.scale: 1.336264
    test 335 line 56 _ExactTM.lat: 28.078790
    test 336 line 56 _ExactTM.lon: 48.684350

    test skipped (1): line 57 _ExactTM.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 337 line 58 _ExactTM.easting: 3447670.550785
    test 338 line 58 _ExactTM.northing: 3680238.888223
    test 339 line 58 _ExactTM.gamma: 17.934948
    test 340 line 58 _ExactTM.scale: 1.149831
    test 341 line 58 _ExactTM.lat: 28.473948
    test 342 line 58 _ExactTM.lon: 34.127306
    test 343 line 59 _ExactTM.easting: 3396522.906798
    test 344 line 59 _ExactTM.northing: 8093659.687593
    test 345 line 59 _ExactTM.gamma: 57.747117
    test 346 line 59 _ExactTM.scale: 1.144006
    test 347 line 59 _ExactTM.lat: 56.629354
    test 348 line 59 _ExactTM.lon: 62.196474
    test 349 line 60 _ExactTM.easting: 11249894.100784
    test 350 line 60 _ExactTM.northing: 1619226.506299
    test 351 line 60 _ExactTM.gamma: 14.210358
    test 352 line 60 _ExactTM.scale: 3.048347
    test 353 line 60 _ExactTM.lat: 4.747762
    test 354 line 60 _ExactTM.lon: 70.932555
    test 355 line 61 _ExactTM.easting: 6808805.230950
    test 356 line 61 _ExactTM.northing: 8044779.777369
    test 357 line 61 _ExactTM.gamma: 68.242008
    test 358 line 61 _ExactTM.scale: 1.621464
    test 359 line 61 _ExactTM.lat: 35.882113
    test 360 line 61 _ExactTM.lon: 76.741849
    test 361 line 62 _ExactTM.easting: 2306021.556506
    test 362 line 62 _ExactTM.northing: 757191.592866
    test 363 line 62 _ExactTM.gamma: 2.385686
    test 364 line 62 _ExactTM.scale: 1.066159
    test 365 line 62 _ExactTM.lat: 6.420705
    test 366 line 62 _ExactTM.lon: 20.416028
    test 367 line 63 _ExactTM.easting: 1547406.313862
    test 368 line 63 _ExactTM.northing: 6048712.751824
    test 369 line 63 _ExactTM.gamma: 18.474372
    test 370 line 63 _ExactTM.scale: 1.029123
    test 371 line 63 _ExactTM.lat: 52.335248
    test 372 line 63 _ExactTM.lon: 22.879294
    test 373 line 64 _ExactTM.easting: 2430467.650383
    test 374 line 64 _ExactTM.northing: 7557167.613972
    test 375 line 64 _ExactTM.gamma: 42.110021
    test 376 line 64 _ExactTM.scale: 1.072759
    test 377 line 64 _ExactTM.lat: 59.846391
    test 378 line 64 _ExactTM.lon: 46.262536
    test 379 line 65 _ExactTM.easting: 2334053.905830
    test 380 line 65 _ExactTM.northing: 1948076.966582
    test 381 line 65 _ExactTM.gamma: 6.353185
    test 382 line 65 _ExactTM.scale: 1.067733
    test 383 line 65 _ExactTM.lat: 16.461790
    test 384 line 65 _ExactTM.lon: 21.433269
    test 385 line 66 _ExactTM.easting: 5564175.186737
    test 386 line 66 _ExactTM.northing: 1836851.660412
    test 387 line 66 _ExactTM.gamma: 11.870682
    test 388 line 66 _ExactTM.scale: 1.408265
    test 389 line 66 _ExactTM.lat: 11.707905
    test 390 line 66 _ExactTM.lon: 45.827075
    test 391 line 67 _ExactTM.easting: 6118505.590359
    test 392 line 67 _ExactTM.northing: 7631684.552421
    test 393 line 67 _ExactTM.gamma: 62.477323
    test 394 line 67 _ExactTM.scale: 1.493420
    test 395 line 67 _ExactTM.lat: 38.519075
    test 396 line 67 _ExactTM.lon: 71.935918
    test 397 line 68 _ExactTM.easting: 7365359.294665
    test 398 line 68 _ExactTM.northing: 8818194.451531
    test 399 line 68 _ExactTM.gamma: 77.207042
    test 400 line 68 _ExactTM.scale: 1.737639
    test 401 line 68 _ExactTM.lat: 34.264007
    test 402 line 68 _ExactTM.lon: 82.647878
    test 403 line 69 _ExactTM.easting: 36187.342415
    test 404 line 69 _ExactTM.northing: 2142565.324802
    test 405 line 69 _ExactTM.gamma: 0.114334
    test 406 line 69 _ExactTM.scale: 0.999616
    test 407 line 69 _ExactTM.lat: 19.376880
    test 408 line 69 _ExactTM.lon: 0.344605
    test 409 line 70 _ExactTM.easting: 2380328.546851
    test 410 line 70 _ExactTM.northing: 8440109.872384
    test 411 line 70 _ExactTM.gamma: 55.076067
    test 412 line 70 _ExactTM.scale: 1.069658
    test 413 line 70 _ExactTM.lat: 65.075805
    test 414 line 70 _ExactTM.lon: 57.653438
    test 415 line 71 _ExactTM.easting: 582511.608826
    test 416 line 71 _ExactTM.northing: 8876047.217071
    test 417 line 71 _ExactTM.gamma: 27.133300
    test 418 line 71 _ExactTM.scale: 1.003749
    test 419 line 71 _ExactTM.lat: 78.691870
    test 420 line 71 _ExactTM.lon: 27.591736
    test 421 line 72 _ExactTM.easting: 899441.350477
    test 422 line 72 _ExactTM.northing: 4582046.430516
    test 423 line 72 _ExactTM.gamma: 7.031211
    test 424 line 72 _ExactTM.scale: 1.009573
    test 425 line 72 _ExactTM.lat: 40.893022
    test 426 line 72 _ExactTM.lon: 10.668804
    test 427 line 73 _ExactTM.easting: 5022485.124337
    test 428 line 73 _ExactTM.northing: 9741774.933721
    test 429 line 73 _ExactTM.gamma: 86.505947
    test 430 line 73 _ExactTM.scale: 1.323700
    test 431 line 73 _ExactTM.lat: 48.914279
    test 432 line 73 _ExactTM.lon: 87.359268
    test 433 line 74 _ExactTM.easting: 6701004.587204
    test 434 line 74 _ExactTM.northing: 2954368.258231
    test 435 line 74 _ExactTM.gamma: 21.560153
    test 436 line 74 _ExactTM.scale: 1.608554
    test 437 line 74 _ExactTM.lat: 16.208377
    test 438 line 74 _ExactTM.lon: 54.494282
    test 439 line 75 _ExactTM.easting: 454986.218897
    test 440 line 75 _ExactTM.northing: 4885087.887884
    test 441 line 75 _ExactTM.gamma: 3.945648
    test 442 line 75 _ExactTM.scale: 1.002147
    test 443 line 75 _ExactTM.lat: 43.977936
    test 444 line 75 _ExactTM.lon: 5.672541
    test 445 line 76 _ExactTM.easting: 8903956.140311
    test 446 line 76 _ExactTM.northing: 8470608.577482
    test 447 line 76 _ExactTM.gamma: 74.723116
    test 448 line 76 _ExactTM.scale: 2.131311
    test 449 line 76 _ExactTM.lat: 26.850861
    test 450 line 76 _ExactTM.lon: 82.834480
    test 451 line 77 _ExactTM.easting: 1547627.594741
    test 452 line 77 _ExactTM.northing: 6036584.538347
    test 453 line 77 _ExactTM.gamma: 18.407629
    test 454 line 77 _ExactTM.scale: 1.029132
    test 455 line 77 _ExactTM.lat: 52.234165
    test 456 line 77 _ExactTM.lon: 22.827655
    test 457 line 78 _ExactTM.easting: 5221488.778597
    test 458 line 78 _ExactTM.northing: 1762592.044392
    test 459 line 78 _ExactTM.gamma: 10.927880
    test 460 line 78 _ExactTM.scale: 1.356721
    test 461 line 78 _ExactTM.lat: 11.674646
    test 462 line 78 _ExactTM.lon: 43.500147
    test 463 line 79 _ExactTM.easting: 4880570.297161
    test 464 line 79 _ExactTM.northing: 3325433.988867
    test 465 line 79 _ExactTM.gamma: 20.469862
    test 466 line 79 _ExactTM.scale: 1.308476
    test 467 line 79 _ExactTM.lat: 22.492753
    test 468 line 79 _ExactTM.lon: 44.179153
    test 469 line 80 _ExactTM.easting: 23930680.082694
    test 470 line 80 _ExactTM.northing: 7491462.099038
    test 471 line 80 _ExactTM.gamma: 75.937628
    test 472 line 80 _ExactTM.scale: 15.556365
    test 473 line 80 _ExactTM.lat: 0.910999
    test 474 line 80 _ExactTM.lon: 88.548823
    test 475 line 81 _ExactTM.easting: 71519.450458
    test 476 line 81 _ExactTM.northing: 3654740.444852
    test 477 line 81 _ExactTM.gamma: 0.417448
    test 478 line 81 _ExactTM.scale: 0.999663
    test 479 line 81 _ExactTM.lat: 33.028802
    test 480 line 81 _ExactTM.lon: 0.765843
    test 481 line 82 _ExactTM.easting: 4152797.795220
    test 482 line 82 _ExactTM.northing: 7823098.502751
    test 483 line 82 _ExactTM.gamma: 58.238901
    test 484 line 82 _ExactTM.scale: 1.218052
    test 485 line 82 _ExactTM.lat: 50.649195
    test 486 line 82 _ExactTM.lon: 64.389076
    test 487 line 83 _ExactTM.easting: 2926725.707639
    test 488 line 83 _ExactTM.northing: 7904918.072844
    test 489 line 83 _ExactTM.gamma: 51.592748
    test 490 line 83 _ExactTM.scale: 1.106206
    test 491 line 83 _ExactTM.lat: 58.820640
    test 492 line 83 _ExactTM.lon: 55.841048
    test 493 line 84 _ExactTM.easting: 1325509.113869
    test 494 line 84 _ExactTM.northing: 9675214.948213
    test 495 line 84 _ExactTM.gamma: 76.116213
    test 496 line 84 _ExactTM.scale: 1.021136
    test 497 line 84 _ExactTM.lat: 77.865762
    test 498 line 84 _ExactTM.lon: 76.414618
    test 499 line 85 _ExactTM.easting: 3045296.448926
    test 500 line 85 _ExactTM.northing: 542153.443280
    test 501 line 85 _ExactTM.gamma: 2.185095
    test 502 line 85 _ExactTM.scale: 1.116664
    test 503 line 85 _ExactTM.lat: 4.389639
    test 504 line 85 _ExactTM.lon: 26.458976
    test 505 line 86 _ExactTM.easting: 11843870.887518
    test 506 line 86 _ExactTM.northing: 5912803.073343
    test 507 line 86 _ExactTM.gamma: 52.814259
    test 508 line 86 _ExactTM.scale: 3.267256
    test 509 line 86 _ExactTM.lat: 13.924448
    test 510 line 86 _ExactTM.lon: 79.017873
    test 511 line 87 _ExactTM.easting: 8891099.704936
    test 512 line 87 _ExactTM.northing: 162160.142227
    test 513 line 87 _ExactTM.gamma: 1.312094
    test 514 line 87 _ExactTM.scale: 2.157363
    test 515 line 87 _ExactTM.lat: 0.679713
    test 516 line 87 _ExactTM.lon: 62.036792
    test 517 line 88 _ExactTM.easting: 4784814.214449
    test 518 line 88 _ExactTM.northing: 2984497.432580
    test 519 line 88 _ExactTM.gamma: 17.946545
    test 520 line 88 _ExactTM.scale: 1.296116
    test 521 line 88 _ExactTM.lat: 20.478281
    test 522 line 88 _ExactTM.lon: 42.678234
    test 523 line 89 _ExactTM.easting: 1772074.682154
    test 524 line 89 _ExactTM.northing: 9491552.560143
    test 525 line 89 _ExactTM.gamma: 73.634830
    test 526 line 89 _ExactTM.scale: 1.038202
    test 527 line 89 _ExactTM.lat: 73.695703
    test 528 line 89 _ExactTM.lon: 74.259097
    test 529 line 90 _ExactTM.easting: 1907649.782106
    test 530 line 90 _ExactTM.northing: 6994232.429379
    test 531 line 90 _ExactTM.gamma: 29.718929
    test 532 line 90 _ExactTM.scale: 1.044503
    test 533 line 90 _ExactTM.lat: 58.569370
    test 534 line 90 _ExactTM.lon: 33.777549
    test 535 line 91 _ExactTM.easting: 2084423.818962
    test 536 line 91 _ExactTM.northing: 2211816.035619
    test 537 line 91 _ExactTM.gamma: 6.556448
    test 538 line 91 _ExactTM.scale: 1.053793
    test 539 line 91 _ExactTM.lat: 18.933881
    test 540 line 91 _ExactTM.lon: 19.492695
    test 541 line 92 _ExactTM.easting: 1064373.671729
    test 542 line 92 _ExactTM.northing: 7812482.547461
    test 543 line 92 _ExactTM.gamma: 24.874124
    test 544 line 92 _ExactTM.scale: 1.013490
    test 545 line 92 _ExactTM.lat: 68.317934
    test 546 line 92 _ExactTM.lon: 26.515687
    test 547 line 93 _ExactTM.easting: 4770385.479297
    test 548 line 93 _ExactTM.northing: 9734318.902980
    test 549 line 93 _ExactTM.gamma: 86.273119
    test 550 line 93 _ExactTM.scale: 1.290553
    test 551 line 93 _ExactTM.lat: 50.641941
    test 552 line 93 _ExactTM.lon: 87.111557
    test 553 line 94 _ExactTM.easting: 6398096.677297
    test 554 line 94 _ExactTM.northing: 4410894.752104
    test 555 line 94 _ExactTM.gamma: 32.558023
    test 556 line 94 _ExactTM.scale: 1.548004
    test 557 line 94 _ExactTM.lat: 24.411298
    test 558 line 94 _ExactTM.lon: 56.881823
    test 559 line 95 _ExactTM.easting: 3138623.300415
    test 560 line 95 _ExactTM.northing: 3082960.600798
    test 561 line 95 _ExactTM.gamma: 13.557672
    test 562 line 95 _ExactTM.scale: 1.123724
    test 563 line 95 _ExactTM.lat: 24.571871
    test 564 line 95 _ExactTM.lon: 30.073097
    test 565 line 96 _ExactTM.easting: 2748325.794651
    test 566 line 96 _ExactTM.northing: 4202811.912668
    test 567 line 96 _ExactTM.gamma: 17.578706
    test 568 line 96 _ExactTM.scale: 1.094102
    test 569 line 96 _ExactTM.lat: 34.202576
    test 570 line 96 _ExactTM.lon: 29.383166
    test 571 line 97 _ExactTM.easting: 6677830.630367
    test 572 line 97 _ExactTM.northing: 5350071.837395
    test 573 line 97 _ExactTM.gamma: 41.306641
    test 574 line 97 _ExactTM.scale: 1.599774
    test 575 line 97 _ExactTM.lat: 27.756285
    test 576 line 97 _ExactTM.lon: 61.881905
    test 577 line 98 _ExactTM.easting: 5941536.667431
    test 578 line 98 _ExactTM.northing: 3293112.175140
    test 579 line 98 _ExactTM.gamma: 22.752845
    test 580 line 98 _ExactTM.scale: 1.468473
    test 581 line 98 _ExactTM.lat: 19.742270
    test 582 line 98 _ExactTM.lon: 50.957821
    test 583 line 99 _ExactTM.easting: 3152481.792567
    test 584 line 99 _ExactTM.northing: 5903048.837978
    test 585 line 99 _ExactTM.gamma: 31.494606
    test 586 line 99 _ExactTM.scale: 1.124085
    test 587 line 99 _ExactTM.lat: 45.453582
    test 588 line 99 _ExactTM.lon: 40.659833
    test 589 line 100 _ExactTM.easting: 10460475.897730
    test 590 line 100 _ExactTM.northing: 2553463.624391
    test 591 line 100 _ExactTM.gamma: 21.965869
    test 592 line 100 _ExactTM.scale: 2.700296
    test 593 line 100 _ExactTM.lat: 8.322144
    test 594 line 100 _ExactTM.lon: 69.488157
    test 595 line 101 _ExactTM.easting: 1964010.778021
    test 596 line 101 _ExactTM.northing: 5634042.923056
    test 597 line 101 _ExactTM.gamma: 20.117800
    test 598 line 101 _ExactTM.scale: 1.047344
    test 599 line 101 _ExactTM.lat: 47.749831
    test 600 line 101 _ExactTM.lon: 26.322002
    test 601 line 102 _ExactTM.easting: 2065306.424934
    test 602 line 102 _ExactTM.northing: 2135008.468651
    test 603 line 102 _ExactTM.gamma: 6.258981
    test 604 line 102 _ExactTM.scale: 1.052800
    test 605 line 102 _ExactTM.lat: 18.297493
    test 606 line 102 _ExactTM.lon: 19.244669
    test 607 line 103 _ExactTM.easting: 5127738.132976
    test 608 line 103 _ExactTM.northing: 6793804.304411
    test 609 line 103 _ExactTM.gamma: 50.557915
    test 610 line 103 _ExactTM.scale: 1.339412
    test 611 line 103 _ExactTM.lat: 40.834541
    test 612 line 103 _ExactTM.lon: 61.650750
    test 613 line 104 _ExactTM.easting: 8385525.148166
    test 614 line 104 _ExactTM.northing: 6924932.344306
    test 615 line 104 _ExactTM.gamma: 59.087561
    test 616 line 104 _ExactTM.scale: 1.990364
    test 617 line 104 _ExactTM.lat: 26.273247
    test 618 line 104 _ExactTM.lon: 74.926694
    test 619 line 105 _ExactTM.easting: 2297510.791909
    test 620 line 105 _ExactTM.northing: 2805666.962834
    test 621 line 105 _ExactTM.gamma: 9.301553
    test 622 line 105 _ExactTM.scale: 1.065508
    test 623 line 105 _ExactTM.lat: 23.698347
    test 624 line 105 _ExactTM.lon: 22.155657
    test 625 line 106 _ExactTM.easting: 13749544.917635
    test 626 line 106 _ExactTM.northing: 8288728.384650
    test 627 line 106 _ExactTM.gamma: 75.033970
    test 628 line 106 _ExactTM.scale: 4.270588
    test 629 line 106 _ExactTM.lat: 12.364113
    test 630 line 106 _ExactTM.lon: 86.348578
    test 631 line 107 _ExactTM.easting: 317518.455546
    test 632 line 107 _ExactTM.northing: 1097517.583745
    test 633 line 107 _ExactTM.gamma: 0.499004
    test 634 line 107 _ExactTM.scale: 1.000848
    test 635 line 107 _ExactTM.lat: 9.916091
    test 636 line 107 _ExactTM.lon: 2.895277
    test 637 line 108 _ExactTM.easting: 3856035.184888
    test 638 line 108 _ExactTM.northing: 9141364.450290
    test 639 line 108 _ExactTM.gamma: 75.972763
    test 640 line 108 _ExactTM.scale: 1.186786
    test 641 line 108 _ExactTM.lat: 56.553876
    test 642 line 108 _ExactTM.lon: 78.215077
    test 643 line 109 _ExactTM.easting: 1457484.942823
    test 644 line 109 _ExactTM.northing: 9385297.101973
    test 645 line 109 _ExactTM.gamma: 66.784662
    test 646 line 109 _ExactTM.scale: 1.025660
    test 647 line 109 _ExactTM.lat: 75.957631
    test 648 line 109 _ExactTM.lon: 67.407383
    test 649 line 110 _ExactTM.easting: 1304934.901841
    test 650 line 110 _ExactTM.northing: 3604655.155715
    test 651 line 110 _ExactTM.gamma: 7.343989
    test 652 line 110 _ExactTM.scale: 1.020672
    test 653 line 110 _ExactTM.lat: 31.826531
    test 654 line 110 _ExactTM.lon: 13.731050
    test 655 line 111 _ExactTM.easting: 1399093.491792
    test 656 line 111 _ExactTM.northing: 8314607.120342
    test 657 line 111 _ExactTM.gamma: 38.630161
    test 658 line 111 _ExactTM.scale: 1.023625
    test 659 line 111 _ExactTM.lat: 70.542985
    test 660 line 111 _ExactTM.lon: 40.282055
    test 661 line 112 _ExactTM.easting: 356983.618540
    test 662 line 112 _ExactTM.northing: 4282309.048994
    test 663 line 112 _ExactTM.gamma: 2.561485
    test 664 line 112 _ExactTM.scale: 1.001170
    test 665 line 112 _ExactTM.lat: 38.617487
    test 666 line 112 _ExactTM.lon: 4.099838
    test 667 line 113 _ExactTM.easting: 9952911.325091
    test 668 line 113 _ExactTM.northing: 1510288.212229
    test 669 line 113 _ExactTM.gamma: 12.752154
    test 670 line 113 _ExactTM.scale: 2.511357
    test 671 line 113 _ExactTM.lat: 5.389447
    test 672 line 113 _ExactTM.lon: 66.729612
    test 673 line 114 _ExactTM.easting: 6367592.504007
    test 674 line 114 _ExactTM.northing: 1200437.077672
    test 675 line 114 _ExactTM.gamma: 8.338041
    test 676 line 114 _ExactTM.scale: 1.546210
    test 677 line 114 _ExactTM.lat: 6.995168
    test 678 line 114 _ExactTM.lon: 50.014763
    test 679 line 115 _ExactTM.easting: 4391263.676460
    test 680 line 115 _ExactTM.northing: 6325455.989408
    test 681 line 115 _ExactTM.gamma: 42.653541
    test 682 line 115 _ExactTM.scale: 1.245560
    test 683 line 115 _ExactTM.lat: 42.321894
    test 684 line 115 _ExactTM.lon: 53.784040
    test 685 line 116 _ExactTM.easting: 6209880.527527
    test 686 line 116 _ExactTM.northing: 2154754.449747
    test 687 line 116 _ExactTM.gamma: 14.919512
    test 688 line 116 _ExactTM.scale: 1.516560
    test 689 line 116 _ExactTM.lat: 12.698515
    test 690 line 116 _ExactTM.lon: 50.242047
    test 691 line 117 _ExactTM.easting: 1507053.688772
    test 692 line 117 _ExactTM.northing: 6261383.513280
    test 693 line 117 _ExactTM.gamma: 19.280373
    test 694 line 117 _ExactTM.scale: 1.027584
    test 695 line 117 _ExactTM.lat: 54.207636
    test 696 line 117 _ExactTM.lon: 23.325731
    test 697 line 118 _ExactTM.easting: 8332725.003777
    test 698 line 118 _ExactTM.northing: 3002712.329753
    test 699 line 118 _ExactTM.gamma: 24.059212
    test 700 line 118 _ExactTM.scale: 1.990450
    test 701 line 118 _ExactTM.lat: 13.224787
    test 702 line 118 _ExactTM.lon: 62.426698
    test 703 line 119 _ExactTM.easting: 3958910.085235
    test 704 line 119 _ExactTM.northing: 3462284.926102
    test 705 line 119 _ExactTM.gamma: 18.546398
    test 706 line 119 _ExactTM.scale: 1.199351
    test 707 line 119 _ExactTM.lat: 25.650282
    test 708 line 119 _ExactTM.lon: 37.710391
    test 709 line 120 _ExactTM.easting: 10452892.282083
    test 710 line 120 _ExactTM.northing: 8000059.605114
    test 711 line 120 _ExactTM.gamma: 71.075240
    test 712 line 120 _ExactTM.scale: 2.650111
    test 713 line 120 _ExactTM.lat: 20.684773
    test 714 line 120 _ExactTM.lon: 82.849734
    test 715 line 121 _ExactTM.easting: 496148.253731
    test 716 line 121 _ExactTM.northing: 6388503.365043
    test 717 line 121 _ExactTM.gamma: 6.970955
    test 718 line 121 _ExactTM.scale: 1.002620
    test 719 line 121 _ExactTM.lat: 57.367533
    test 720 line 121 _ExactTM.lon: 8.260866
    test 721 line 122 _ExactTM.easting: 7375792.085850
    test 722 line 122 _ExactTM.northing: 5544624.072155
    test 723 line 122 _ExactTM.gamma: 44.510851
    test 724 line 122 _ExactTM.scale: 1.745898
    test 725 line 122 _ExactTM.lat: 25.958757
    test 726 line 122 _ExactTM.lon: 65.760477
    test 727 line 123 _ExactTM.easting: 2826258.041979
    test 728 line 123 _ExactTM.northing: 5167759.816959
    test 729 line 123 _ExactTM.gamma: 23.783897
    test 730 line 123 _ExactTM.scale: 1.099415
    test 731 line 123 _ExactTM.lat: 41.395848
    test 732 line 123 _ExactTM.lon: 33.661790
    test 733 line 124 _ExactTM.easting: 3958563.378851
    test 734 line 124 _ExactTM.northing: 8499923.231243
    test 735 line 124 _ExactTM.gamma: 66.570945
    test 736 line 124 _ExactTM.scale: 1.197296
    test 737 line 124 _ExactTM.lat: 54.266617
    test 738 line 124 _ExactTM.lon: 70.602199
    test 739 line 125 _ExactTM.easting: 4408189.533462
    test 740 line 125 _ExactTM.northing: 8046312.003642
    test 741 line 125 _ExactTM.gamma: 62.216959
    test 742 line 125 _ExactTM.scale: 1.246750
    test 743 line 125 _ExactTM.lat: 49.840393
    test 744 line 125 _ExactTM.lon: 68.036728
    test 745 line 126 _ExactTM.easting: 3629225.627512
    test 746 line 126 _ExactTM.northing: 6371258.454645
    test 747 line 126 _ExactTM.gamma: 38.881675
    test 748 line 126 _ExactTM.scale: 1.165511
    test 749 line 126 _ExactTM.lat: 46.306035
    test 750 line 126 _ExactTM.lon: 48.085828
    test 751 line 127 _ExactTM.easting: 602838.450710
    test 752 line 127 _ExactTM.northing: 4851370.637205
    test 753 line 127 _ExactTM.gamma: 5.160395
    test 754 line 127 _ExactTM.scale: 1.004073
    test 755 line 127 _ExactTM.lat: 43.570988
    test 756 line 127 _ExactTM.lon: 7.464494
    test 757 line 128 _ExactTM.easting: 764616.665051
    test 758 line 128 _ExactTM.northing: 2164299.337945
    test 759 line 128 _ExactTM.gamma: 2.429300
    test 760 line 128 _ExactTM.scale: 1.006835
    test 761 line 128 _ExactTM.lat: 19.427290
    test 762 line 128 _ExactTM.lon: 7.268247
    test 763 line 129 _ExactTM.easting: 5048953.021931
    test 764 line 129 _ExactTM.northing: 1885974.057398
    test 765 line 129 _ExactTM.gamma: 11.459804
    test 766 line 129 _ExactTM.scale: 1.332207
    test 767 line 129 _ExactTM.lat: 12.713794
    test 768 line 129 _ExactTM.lon: 42.507018
    test 769 line 130 _ExactTM.easting: 2293996.601155
    test 770 line 130 _ExactTM.northing: 2392408.644221
    test 771 line 130 _ExactTM.gamma: 7.791838
    test 772 line 130 _ExactTM.scale: 1.065348
    test 773 line 130 _ExactTM.lat: 20.238782
    test 774 line 130 _ExactTM.lon: 21.566068
    test 775 line 131 _ExactTM.easting: 1530603.839418
    test 776 line 131 _ExactTM.northing: 7287841.459898
    test 777 line 131 _ExactTM.gamma: 27.502921
    test 778 line 131 _ExactTM.scale: 1.028416
    test 779 line 131 _ExactTM.lat: 62.367847
    test 780 line 131 _ExactTM.lon: 30.438849
    test 781 line 132 _ExactTM.easting: 2660000.093152
    test 782 line 132 _ExactTM.northing: 5161982.213248
    test 783 line 132 _ExactTM.gamma: 22.629836
    test 784 line 132 _ExactTM.scale: 1.087851
    test 785 line 132 _ExactTM.lat: 41.891569
    test 786 line 132 _ExactTM.lon: 31.959547
    test 787 line 133 _ExactTM.easting: 5037478.329414
    test 788 line 133 _ExactTM.northing: 8768172.379908
    test 789 line 133 _ExactTM.gamma: 73.511182
    test 790 line 133 _ExactTM.scale: 1.325919
    test 791 line 133 _ExactTM.lat: 47.664248
    test 792 line 133 _ExactTM.lon: 77.630062
    test 793 line 134 _ExactTM.easting: 2289650.957799
    test 794 line 134 _ExactTM.northing: 8784328.593607
    test 795 line 134 _ExactTM.gamma: 60.786067
    test 796 line 134 _ExactTM.scale: 1.064346
    test 797 line 134 _ExactTM.lat: 67.259559
    test 798 line 134 _ExactTM.lon: 62.715293
    test 799 line 135 _ExactTM.easting: 647913.889744
    test 800 line 135 _ExactTM.northing: 6742382.228217
    test 801 line 135 _ExactTM.gamma: 10.252667
    test 802 line 135 _ExactTM.scale: 1.004748
    test 803 line 135 _ExactTM.lat: 60.295381
    test 804 line 135 _ExactTM.lon: 11.763097
    test 805 line 136 _ExactTM.easting: 1118372.698566
    test 806 line 136 _ExactTM.northing: 9040627.942263
    test 807 line 136 _ExactTM.gamma: 48.936803
    test 808 line 136 _ExactTM.scale: 1.014920
    test 809 line 136 _ExactTM.lat: 76.878914
    test 810 line 136 _ExactTM.lon: 49.685773
    test 811 line 137 _ExactTM.easting: 440696.510070
    test 812 line 137 _ExactTM.northing: 5500355.826297
    test 813 line 137 _ExactTM.gamma: 4.636104
    test 814 line 137 _ExactTM.scale: 1.001986
    test 815 line 137 _ExactTM.lat: 49.495349
    test 816 line 137 _ExactTM.lon: 6.087551
    test 817 line 138 _ExactTM.easting: 601728.149727
    test 818 line 138 _ExactTM.northing: 9095352.048149
    test 819 line 138 _ExactTM.gamma: 33.435771
    test 820 line 138 _ExactTM.scale: 1.004027
    test 821 line 138 _ExactTM.lat: 80.297265
    test 822 line 138 _ExactTM.lon: 33.816372
    test 823 line 139 _ExactTM.easting: 3481444.777827
    test 824 line 139 _ExactTM.northing: 291665.708749
    test 825 line 139 _ExactTM.gamma: 1.314726
    test 826 line 139 _ExactTM.scale: 1.153534
    test 827 line 139 _ExactTM.lat: 2.286437
    test 828 line 139 _ExactTM.lon: 29.855149
    test 829 line 140 _ExactTM.easting: 3515304.901524
    test 830 line 140 _ExactTM.northing: 1443981.882918
    test 831 line 140 _ExactTM.gamma: 6.641638
    test 832 line 140 _ExactTM.scale: 1.156509
    test 833 line 140 _ExactTM.lat: 11.264457
    test 834 line 140 _ExactTM.lon: 30.743907
    test 835 line 141 _ExactTM.easting: 160012.186959
    test 836 line 141 _ExactTM.northing: 3922609.253231
    test 837 line 141 _ExactTM.gamma: 1.022225
    test 838 line 141 _ExactTM.scale: 0.999916
    test 839 line 141 _ExactTM.lat: 35.434073
    test 840 line 141 _ExactTM.lon: 1.762795
    test 841 line 142 _ExactTM.easting: 4163744.245622
    test 842 line 142 _ExactTM.northing: 936884.674804
    test 843 line 142 _ExactTM.gamma: 4.892559
    test 844 line 142 _ExactTM.scale: 1.222164
    test 845 line 142 _ExactTM.lat: 6.923695
    test 846 line 142 _ExactTM.lon: 35.289456
    test 847 line 143 _ExactTM.easting: 6155200.017926
    test 848 line 143 _ExactTM.northing: 6926306.628390
    test 849 line 143 _ExactTM.gamma: 55.103258
    test 850 line 143 _ExactTM.scale: 1.500556
    test 851 line 143 _ExactTM.lat: 36.129672
    test 852 line 143 _ExactTM.lon: 67.533176
    test 853 line 144 _ExactTM.easting: 16263383.285440
    test 854 line 144 _ExactTM.northing: 3591296.731341
    test 855 line 144 _ExactTM.gamma: 36.040254
    test 856 line 144 _ExactTM.scale: 6.589288
    test 857 line 144 _ExactTM.lat: 4.406529
    test 858 line 144 _ExactTM.lon: 81.965734
    test 859 line 145 _ExactTM.easting: 14220995.515398
    test 860 line 145 _ExactTM.northing: 5100587.457503
    test 861 line 145 _ExactTM.gamma: 47.314258
    test 862 line 145 _ExactTM.scale: 4.693202
    test 863 line 145 _ExactTM.lat: 8.474589
    test 864 line 145 _ExactTM.lon: 81.129945
    test 865 line 146 _ExactTM.easting: 3173034.802372
    test 866 line 146 _ExactTM.northing: 7263421.942957
    test 867 line 146 _ExactTM.gamma: 45.215808
    test 868 line 146 _ExactTM.scale: 1.125410
    test 869 line 146 _ExactTM.lat: 53.907276
    test 870 line 146 _ExactTM.lon: 51.252904
    test 871 line 147 _ExactTM.easting: 10253274.092204
    test 872 line 147 _ExactTM.northing: 8867574.299792
    test 873 line 147 _ExactTM.gamma: 79.198250
    test 874 line 147 _ExactTM.scale: 2.572372
    test 875 line 147 _ExactTM.lat: 22.120545
    test 876 line 147 _ExactTM.lon: 85.756782
    test 877 line 148 _ExactTM.easting: 2415561.483230
    test 878 line 148 _ExactTM.northing: 8813225.217097
    test 879 line 148 _ExactTM.gamma: 62.548978
    test 880 line 148 _ExactTM.scale: 1.071748
    test 881 line 148 _ExactTM.lat: 66.444100
    test 882 line 148 _ExactTM.lon: 64.532960
    test 883 line 149 _ExactTM.easting: 9589179.293295
    test 884 line 149 _ExactTM.northing: 1777680.784143
    test 885 line 149 _ExactTM.gamma: 14.838483
    test 886 line 149 _ExactTM.scale: 2.380716
    test 887 line 149 _ExactTM.lat: 6.670965
    test 888 line 149 _ExactTM.lon: 65.660408
    test 889 line 150 _ExactTM.easting: 727939.438391
    test 890 line 150 _ExactTM.northing: 3684363.236810
    test 891 line 150 _ExactTM.gamma: 4.266227
    test 892 line 150 _ExactTM.scale: 1.006140
    test 893 line 150 _ExactTM.lat: 33.054057
    test 894 line 150 _ExactTM.lon: 7.787458
    test 895 line 151 _ExactTM.easting: 1250765.991085
    test 896 line 151 _ExactTM.northing: 792869.242719
    test 897 line 151 _ExactTM.gamma: 1.396497
    test 898 line 151 _ExactTM.scale: 1.019026
    test 899 line 151 _ExactTM.lat: 7.035525
    test 900 line 151 _ExactTM.lon: 11.253707
    test 901 line 152 _ExactTM.easting: 710421.705887
    test 902 line 152 _ExactTM.northing: 5019406.075928
    test 903 line 152 _ExactTM.gamma: 6.393949
    test 904 line 152 _ExactTM.scale: 1.005812
    test 905 line 152 _ExactTM.lat: 44.971340
    test 906 line 152 _ExactTM.lon: 9.009304
    test 907 line 153 _ExactTM.easting: 4600995.074643
    test 908 line 153 _ExactTM.northing: 4505712.084593
    test 909 line 153 _ExactTM.gamma: 27.997458
    test 910 line 153 _ExactTM.scale: 1.271841
    test 911 line 153 _ExactTM.lat: 30.821397
    test 912 line 153 _ExactTM.lon: 45.970577
    test 913 line 154 _ExactTM.easting: 557642.627782
    test 914 line 154 _ExactTM.northing: 7006911.251644
    test 915 line 154 _ExactTM.gamma: 9.769903
    test 916 line 154 _ExactTM.scale: 1.003411
    test 917 line 154 _ExactTM.lat: 62.763886
    test 918 line 154 _ExactTM.lon: 10.960144
    test 919 line 155 _ExactTM.easting: 4635062.294291
    test 920 line 155 _ExactTM.northing: 2702556.153311
    test 921 line 155 _ExactTM.gamma: 15.779547
    test 922 line 155 _ExactTM.scale: 1.277178
    test 923 line 155 _ExactTM.lat: 18.888611
    test 924 line 155 _ExactTM.lon: 41.009871
    test 925 line 156 _ExactTM.easting: 14554962.255919
    test 926 line 156 _ExactTM.northing: 4716639.908572
    test 927 line 156 _ExactTM.gamma: 44.192751
    test 928 line 156 _ExactTM.scale: 4.960020
    test 929 line 156 _ExactTM.lat: 7.524119
    test 930 line 156 _ExactTM.lon: 81.050715
    test 931 line 157 _ExactTM.easting: 882126.661736
    test 932 line 157 _ExactTM.northing: 7947612.369506
    test 933 line 157 _ExactTM.gamma: 22.429487
    test 934 line 157 _ExactTM.scale: 1.009132
    test 935 line 157 _ExactTM.lat: 70.063902
    test 936 line 157 _ExactTM.lon: 23.705255
    test 937 line 158 _ExactTM.easting: 20262021.645983
    test 938 line 158 _ExactTM.northing: 8113827.820796
    test 939 line 158 _ExactTM.gamma: 76.936057
    test 940 line 158 _ExactTM.scale: 10.349092
    test 941 line 158 _ExactTM.lat: 3.556526
    test 942 line 158 _ExactTM.lon: 88.363529
    test 943 line 159 _ExactTM.easting: 6500508.399850
    test 944 line 159 _ExactTM.northing: 6956476.342368
    test 945 line 159 _ExactTM.gamma: 56.237116
    test 946 line 159 _ExactTM.scale: 1.563162
    test 947 line 159 _ExactTM.lat: 34.551257
    test 948 line 159 _ExactTM.lon: 69.111091
    test 949 line 160 _ExactTM.easting: 3884036.641314
    test 950 line 160 _ExactTM.northing: 6890167.411733
    test 951 line 160 _ExactTM.gamma: 45.760130
    test 952 line 160 _ExactTM.scale: 1.190167
    test 953 line 160 _ExactTM.lat: 47.929051
    test 954 line 160 _ExactTM.lon: 54.103418
    test 955 line 161 _ExactTM.easting: 217855.546078
    test 956 line 161 _ExactTM.northing: 6184108.122568
    test 957 line 161 _ExactTM.gamma: 2.870993
    test 958 line 161 _ExactTM.scale: 1.000182
    test 959 line 161 _ExactTM.lat: 55.753536
    test 960 line 161 _ExactTM.lon: 3.471798
    test 961 line 162 _ExactTM.easting: 11384139.290402
    test 962 line 162 _ExactTM.northing: 8893889.949556
    test 963 line 162 _ExactTM.gamma: 79.774854
    test 964 line 162 _ExactTM.scale: 3.024672
    test 965 line 162 _ExactTM.lat: 18.530847
    test 966 line 162 _ExactTM.lon: 86.555312
    test 967 line 163 _ExactTM.easting: 3469855.989805
    test 968 line 163 _ExactTM.northing: 7723193.799228
    test 969 line 163 _ExactTM.gamma: 53.114700
    test 970 line 163 _ExactTM.scale: 1.150540
    test 971 line 163 _ExactTM.lat: 54.510125
    test 972 line 163 _ExactTM.lon: 58.556056
    test 973 line 164 _ExactTM.easting: 5926165.994939
    test 974 line 164 _ExactTM.northing: 9385463.732747
    test 975 line 164 _ExactTM.gamma: 82.506981
    test 976 line 164 _ExactTM.scale: 1.459758
    test 977 line 164 _ExactTM.lat: 42.864162
    test 978 line 164 _ExactTM.lon: 84.866326
    test 979 line 165 _ExactTM.easting: 5798639.662224
    test 980 line 165 _ExactTM.northing: 5305387.640916
    test 981 line 165 _ExactTM.gamma: 38.617257
    test 982 line 165 _ExactTM.scale: 1.442263
    test 983 line 165 _ExactTM.lat: 30.911943
    test 984 line 165 _ExactTM.lon: 57.114102
    test 985 line 166 _ExactTM.easting: 9464.934388
    test 986 line 166 _ExactTM.northing: 6489121.624944
    test 987 line 166 _ExactTM.gamma: 0.138696
    test 988 line 166 _ExactTM.scale: 0.999601
    test 989 line 166 _ExactTM.lat: 58.542493
    test 990 line 166 _ExactTM.lon: 0.162593
    test 991 line 167 _ExactTM.easting: 12575834.275614
    test 992 line 167 _ExactTM.northing: 8356610.895486
    test 993 line 167 _ExactTM.gamma: 75.235223
    test 994 line 167 _ExactTM.scale: 3.599442
    test 995 line 167 _ExactTM.lat: 15.022689
    test 996 line 167 _ExactTM.lon: 85.792615
    test 997 line 168 _ExactTM.easting: 2719653.543469
    test 998 line 168 _ExactTM.northing: 9362389.163495
    test 999 line 168 _ExactTM.gamma: 76.049670
    test 1000 line 168 _ExactTM.scale: 1.091315
    test 1001 line 168 _ExactTM.lat: 65.692275
    test 1002 line 168 _ExactTM.lon: 77.241377
    test 1003 line 169 _ExactTM.easting: 4845341.924698
    test 1004 line 169 _ExactTM.northing: 8710522.326901
    test 1005 line 169 _ExactTM.gamma: 72.320942
    test 1006 line 169 _ExactTM.scale: 1.300382
    test 1007 line 169 _ExactTM.lat: 48.806211
    test 1008 line 169 _ExactTM.lon: 76.486365
    test 1009 line 170 _ExactTM.easting: 3935261.522763
    test 1010 line 170 _ExactTM.northing: 9454271.649062
    test 1011 line 170 _ExactTM.gamma: 81.162334
    test 1012 line 170 _ExactTM.scale: 1.194767
    test 1013 line 170 _ExactTM.lat: 56.436025
    test 1014 line 170 _ExactTM.lon: 82.611568
    test 1015 line 171 _ExactTM.easting: 7074299.823000
    test 1016 line 171 _ExactTM.northing: 1648736.065055
    test 1017 line 171 _ExactTM.gamma: 12.145925
    test 1018 line 171 _ExactTM.scale: 1.687551
    test 1019 line 171 _ExactTM.lat: 8.766053
    test 1020 line 171 _ExactTM.lon: 54.367539
    test 1021 line 172 _ExactTM.easting: 3689072.579308
    test 1022 line 172 _ExactTM.northing: 2230802.665211
    test 1023 line 172 _ExactTM.gamma: 10.856248
    test 1024 line 172 _ExactTM.scale: 1.172689
    test 1025 line 172 _ExactTM.lat: 17.095495
    test 1026 line 172 _ExactTM.lon: 33.059128
    test 1027 line 173 _ExactTM.easting: 8102565.885587
    test 1028 line 173 _ExactTM.northing: 5167396.617580
    test 1029 line 173 _ExactTM.gamma: 42.324886
    test 1030 line 173 _ExactTM.scale: 1.921927
    test 1031 line 173 _ExactTM.lat: 22.142861
    test 1032 line 173 _ExactTM.lon: 67.200684
    test 1033 line 174 _ExactTM.easting: 8181271.353564
    test 1034 line 174 _ExactTM.northing: 4425436.547185
    test 1035 line 174 _ExactTM.gamma: 35.900845
    test 1036 line 174 _ExactTM.scale: 1.945017
    test 1037 line 174 _ExactTM.lat: 19.222623
    test 1038 line 174 _ExactTM.lon: 65.180785
    test 1039 line 175 _ExactTM.easting: 767067.394003
    test 1040 line 175 _ExactTM.northing: 3701745.857296
    test 1041 line 175 _ExactTM.gamma: 4.519201
    test 1042 line 175 _ExactTM.scale: 1.006863
    test 1043 line 175 _ExactTM.lat: 33.182474
    test 1044 line 175 _ExactTM.lon: 8.216952
    test 1045 line 176 _ExactTM.easting: 6688114.168572
    test 1046 line 176 _ExactTM.northing: 2052857.299639
    test 1047 line 176 _ExactTM.gamma: 14.766191
    test 1048 line 176 _ExactTM.scale: 1.607200
    test 1049 line 176 _ExactTM.lat: 11.417963
    test 1050 line 176 _ExactTM.lon: 52.808691
    test 1051 line 177 _ExactTM.easting: 5608408.773761
    test 1052 line 177 _ExactTM.northing: 3859055.659110
    test 1053 line 177 _ExactTM.gamma: 26.244151
    test 1054 line 177 _ExactTM.scale: 1.413463
    test 1055 line 177 _ExactTM.lat: 23.836688
    test 1056 line 177 _ExactTM.lon: 50.500180
    test 1057 line 178 _ExactTM.easting: 3836942.765275
    test 1058 line 178 _ExactTM.northing: 6415467.634326
    test 1059 line 178 _ExactTM.gamma: 40.575885
    test 1060 line 178 _ExactTM.scale: 1.185615
    test 1061 line 178 _ExactTM.lat: 45.550020
    test 1062 line 178 _ExactTM.lon: 50.148036
    test 1063 line 179 _ExactTM.easting: 1298730.366025
    test 1064 line 179 _ExactTM.northing: 6021453.000792
    test 1065 line 179 _ExactTM.gamma: 15.613320
    test 1066 line 179 _ExactTM.scale: 1.020367
    test 1067 line 179 _ExactTM.lat: 52.746079
    test 1068 line 179 _ExactTM.lon: 19.343926
    test 1069 line 180 _ExactTM.easting: 416934.289208
    test 1070 line 180 _ExactTM.northing: 7295683.451705
    test 1071 line 180 _ExactTM.gamma: 8.238232
    test 1072 line 180 _ExactTM.scale: 1.001729
    test 1073 line 180 _ExactTM.lat: 65.513348
    test 1074 line 180 _ExactTM.lon: 9.039529
    test 1075 line 181 _ExactTM.easting: 4336076.850889
    test 1076 line 181 _ExactTM.northing: 7617975.722779
    test 1077 line 181 _ExactTM.gamma: 56.537088
    test 1078 line 181 _ExactTM.scale: 1.238582
    test 1079 line 181 _ExactTM.lat: 48.709795
    test 1080 line 181 _ExactTM.lon: 63.554005
    test 1081 line 182 _ExactTM.easting: 168047.336980
    test 1082 line 182 _ExactTM.northing: 2185000.046530
    test 1083 line 182 _ExactTM.gamma: 0.542187
    test 1084 line 182 _ExactTM.scale: 0.999949
    test 1085 line 182 _ExactTM.lat: 19.753509
    test 1086 line 182 _ExactTM.lon: 1.603846
    test 1087 line 183 _ExactTM.easting: 8276281.328790
    test 1088 line 183 _ExactTM.northing: 263444.350545
    test 1089 line 183 _ExactTM.gamma: 2.071435
    test 1090 line 183 _ExactTM.scale: 1.980314
    test 1091 line 183 _ExactTM.lat: 1.202816
    test 1092 line 183 _ExactTM.lon: 59.377276
    test 1093 line 184 _ExactTM.easting: 4772573.810710
    test 1094 line 184 _ExactTM.northing: 6765710.336002
    test 1095 line 184 _ExactTM.gamma: 48.857561
    test 1096 line 184 _ExactTM.scale: 1.291911
    test 1097 line 184 _ExactTM.lat: 42.564975
    test 1098 line 184 _ExactTM.lon: 59.356947
    test 1099 line 185 _ExactTM.easting: 5427755.074639
    test 1100 line 185 _ExactTM.northing: 1556055.820924
    test 1101 line 185 _ExactTM.gamma: 9.862178
    test 1102 line 185 _ExactTM.scale: 1.387394
    test 1103 line 185 _ExactTM.lat: 10.090572
    test 1104 line 185 _ExactTM.lon: 44.604132
    test 1105 line 186 _ExactTM.easting: 11588458.616041
    test 1106 line 186 _ExactTM.northing: 5707993.922613
    test 1107 line 186 _ExactTM.gamma: 50.784827
    test 1108 line 186 _ExactTM.scale: 3.149567
    test 1109 line 186 _ExactTM.lat: 14.133028
    test 1110 line 186 _ExactTM.lon: 78.097533
    test 1111 line 187 _ExactTM.easting: 7152433.802688
    test 1112 line 187 _ExactTM.northing: 761390.695844
    test 1113 line 187 _ExactTM.gamma: 5.607350
    test 1114 line 187 _ExactTM.scale: 1.705261
    test 1115 line 187 _ExactTM.lat: 4.031123
    test 1116 line 187 _ExactTM.lon: 54.048782
    test 1117 line 188 _ExactTM.easting: 3105651.390901
    test 1118 line 188 _ExactTM.northing: 9426026.169064
    test 1119 line 188 _ExactTM.gamma: 78.750206
    test 1120 line 188 _ExactTM.scale: 1.119737
    test 1121 line 188 _ExactTM.lat: 62.746603
    test 1122 line 188 _ExactTM.lon: 79.968641
    test 1123 line 189 _ExactTM.easting: 2959009.639022
    test 1124 line 189 _ExactTM.northing: 8339242.269282
    test 1125 line 189 _ExactTM.gamma: 58.460865
    test 1126 line 189 _ExactTM.scale: 1.108554
    test 1127 line 189 _ExactTM.lat: 60.626429
    test 1128 line 189 _ExactTM.lon: 61.851551
    test 1129 line 190 _ExactTM.easting: 8640472.267145
    test 1130 line 190 _ExactTM.northing: 6230320.417931
    test 1131 line 190 _ExactTM.gamma: 52.816810
    test 1132 line 190 _ExactTM.scale: 2.062973
    test 1133 line 190 _ExactTM.lat: 23.600626
    test 1134 line 190 _ExactTM.lon: 72.811634
    test 1135 line 191 _ExactTM.easting: 811352.108932
    test 1136 line 191 _ExactTM.northing: 9816129.813481
    test 1137 line 191 _ExactTM.gamma: 77.299184
    test 1138 line 191 _ExactTM.scale: 1.007651
    test 1139 line 191 _ExactTM.lat: 82.572236
    test 1140 line 191 _ExactTM.lon: 77.402323
    test 1141 line 192 _ExactTM.easting: 6521874.973458
    test 1142 line 192 _ExactTM.northing: 1053612.479744
    test 1143 line 192 _ExactTM.gamma: 7.407328
    test 1144 line 192 _ExactTM.scale: 1.575529
    test 1145 line 192 _ExactTM.lat: 6.030051
    test 1146 line 192 _ExactTM.lon: 50.783505
    test 1147 line 193 _ExactTM.easting: 3477983.997875
    test 1148 line 193 _ExactTM.northing: 5651613.325947
    test 1149 line 193 _ExactTM.gamma: 31.530673
    test 1150 line 193 _ExactTM.scale: 1.151875
    test 1151 line 193 _ExactTM.lat: 42.411523
    test 1152 line 193 _ExactTM.lon: 42.258009
    test 1153 line 194 _ExactTM.easting: 629892.822243
    test 1154 line 194 _ExactTM.northing: 3283914.910451
    test 1155 line 194 _ExactTM.gamma: 3.210482
    test 1156 line 194 _ExactTM.scale: 1.004499
    test 1157 line 194 _ExactTM.lat: 29.526120
    test 1158 line 194 _ExactTM.lon: 6.493069
    test 1159 line 195 _ExactTM.easting: 3381879.687227
    test 1160 line 195 _ExactTM.northing: 5103629.325665
    test 1161 line 195 _ExactTM.gamma: 26.748108
    test 1162 line 195 _ExactTM.scale: 1.143559
    test 1163 line 195 _ExactTM.lat: 39.021853
    test 1164 line 195 _ExactTM.lon: 38.641779
    test 1165 line 196 _ExactTM.easting: 2815986.534177
    test 1166 line 196 _ExactTM.northing: 9387029.120718
    test 1167 line 196 _ExactTM.gamma: 76.967262
    test 1168 line 196 _ExactTM.scale: 1.098032
    test 1169 line 196 _ExactTM.lat: 64.971850
    test 1170 line 196 _ExactTM.lon: 78.151893
    test 1171 line 197 _ExactTM.easting: 3398195.889603
    test 1172 line 197 _ExactTM.northing: 9138936.031490
    test 1173 line 197 _ExactTM.gamma: 74.477499
    test 1174 line 197 _ExactTM.scale: 1.144009
    test 1175 line 197 _ExactTM.lat: 59.961819
    test 1176 line 197 _ExactTM.lon: 76.473422
    test 1177 line 198 _ExactTM.easting: 2421734.754637
    test 1178 line 198 _ExactTM.northing: 5002372.094991
    test 1179 line 198 _ExactTM.gamma: 20.017082
    test 1180 line 198 _ExactTM.scale: 1.072592
    test 1181 line 198 _ExactTM.lat: 41.374040
    test 1182 line 198 _ExactTM.lon: 28.848343
    test 1183 line 199 _ExactTM.easting: 2360869.895525
    test 1184 line 199 _ExactTM.northing: 9553298.449536
    test 1185 line 199 _ExactTM.gamma: 78.848205
    test 1186 line 199 _ExactTM.scale: 1.068453
    test 1187 line 199 _ExactTM.lat: 68.946087
    test 1188 line 199 _ExactTM.lon: 79.574523
    test 1189 line 200 _ExactTM.easting: 1196539.972194
    test 1190 line 200 _ExactTM.northing: 9861920.836230
    test 1191 line 200 _ExactTM.gamma: 83.437668
    test 1192 line 200 _ExactTM.scale: 1.017137
    test 1193 line 200 _ExactTM.lat: 79.275096
    test 1194 line 200 _ExactTM.lon: 83.551272
    test 1195 line 201 _ExactTM.easting: 1327758.704795
    test 1196 line 201 _ExactTM.northing: 2375509.241683
    test 1197 line 201 _ExactTM.gamma: 4.617572
    test 1198 line 201 _ExactTM.scale: 1.021465
    test 1199 line 201 _ExactTM.lat: 21.000252
    test 1200 line 201 _ExactTM.lon: 12.697444
    test 1201 line 202 _ExactTM.easting: 2070860.327644
    test 1202 line 202 _ExactTM.northing: 8604500.719581
    test 1203 line 202 _ExactTM.gamma: 54.722761
    test 1204 line 202 _ExactTM.scale: 1.052469
    test 1205 line 202 _ExactTM.lat: 68.015227
    test 1206 line 202 _ExactTM.lon: 56.732419
    test 1207 line 203 _ExactTM.easting: 6564776.654864
    test 1208 line 203 _ExactTM.northing: 8171207.177379
    test 1209 line 203 _ExactTM.gamma: 69.237523
    test 1210 line 203 _ExactTM.scale: 1.573894
    test 1211 line 203 _ExactTM.lat: 37.423675
    test 1212 line 203 _ExactTM.lon: 76.947359
    test 1213 line 204 _ExactTM.easting: 592653.553821
    test 1214 line 204 _ExactTM.northing: 6125529.810052
    test 1215 line 204 _ExactTM.gamma: 7.600785
    test 1216 line 204 _ExactTM.scale: 1.003912
    test 1217 line 204 _ExactTM.lat: 54.922707
    test 1218 line 204 _ExactTM.lon: 9.260818
    test 1219 line 205 _ExactTM.easting: 693459.671821
    test 1220 line 205 _ExactTM.northing: 6943779.991032
    test 1221 line 205 _ExactTM.gamma: 11.787587
    test 1222 line 205 _ExactTM.scale: 1.005496
    test 1223 line 205 _ExactTM.lat: 61.982810
    test 1224 line 205 _ExactTM.lon: 13.299659
    test 1225 line 206 _ExactTM.easting: 1838956.187625
    test 1226 line 206 _ExactTM.northing: 3511959.612381
    test 1227 line 206 _ExactTM.gamma: 9.844313
    test 1228 line 206 _ExactTM.scale: 1.041603
    test 1229 line 206 _ExactTM.lat: 30.324214
    test 1230 line 206 _ExactTM.lon: 18.959769
    test 1231 line 207 _ExactTM.easting: 4460690.884597
    test 1232 line 207 _ExactTM.northing: 5541873.235403
    test 1233 line 207 _ExactTM.gamma: 35.768613
    test 1234 line 207 _ExactTM.scale: 1.254179
    test 1235 line 207 _ExactTM.lat: 37.629667
    test 1236 line 207 _ExactTM.lon: 49.649131
    test 1237 line 208 _ExactTM.easting: 2311168.998941
    test 1238 line 208 _ExactTM.northing: 9480561.869119
    test 1239 line 208 _ExactTM.gamma: 76.828257
    test 1240 line 208 _ExactTM.scale: 1.065556
    test 1241 line 208 _ExactTM.lat: 69.225574
    test 1242 line 208 _ExactTM.lon: 77.656135
    test 1243 line 209 _ExactTM.easting: 4111775.114451
    test 1244 line 209 _ExactTM.northing: 6509014.348792
    test 1245 line 209 _ExactTM.gamma: 43.052130
    test 1246 line 209 _ExactTM.scale: 1.214125
    test 1247 line 209 _ExactTM.lat: 44.698478
    test 1248 line 209 _ExactTM.lon: 52.979304
    test 1249 line 210 _ExactTM.easting: 75358.261962
    test 1250 line 210 _ExactTM.northing: 7711258.662251
    test 1251 line 210 _ExactTM.gamma: 1.806297
    test 1252 line 210 _ExactTM.scale: 0.999669
    test 1253 line 210 _ExactTM.lat: 69.499594
    test 1254 line 210 _ExactTM.lon: 1.928336
    test 1255 line 211 _ExactTM.easting: 8781885.229116
    test 1256 line 211 _ExactTM.northing: 9184776.452211
    test 1257 line 211 _ExactTM.gamma: 81.795539
    test 1258 line 211 _ExactTM.scale: 2.094908
    test 1259 line 211 _ExactTM.lat: 27.981364
    test 1260 line 211 _ExactTM.lon: 86.061113
    test 1261 line 212 _ExactTM.easting: 954378.415174
    test 1262 line 212 _ExactTM.northing: 7449110.669807
    test 1263 line 212 _ExactTM.gamma: 19.380657
    test 1264 line 212 _ExactTM.scale: 1.010768
    test 1265 line 212 _ExactTM.lat: 65.699839
    test 1266 line 212 _ExactTM.lon: 21.104725
    test 1267 line 213 _ExactTM.easting: 720971.793706
    test 1268 line 213 _ExactTM.northing: 5265195.121555
    test 1269 line 213 _ExactTM.gamma: 7.002995
    test 1270 line 213 _ExactTM.scale: 1.005995
    test 1271 line 213 _ExactTM.lat: 47.143648
    test 1272 line 213 _ExactTM.lon: 9.512189
    test 1273 line 214 _ExactTM.easting: 561561.493937
    test 1274 line 214 _ExactTM.northing: 989910.236221
    test 1275 line 214 _ExactTM.gamma: 0.793118
    test 1276 line 214 _ExactTM.scale: 1.003505
    test 1277 line 214 _ExactTM.lat: 8.920167
    test 1278 line 214 _ExactTM.lon: 5.101513
    test 1279 line 215 _ExactTM.easting: 3446829.634468
    test 1280 line 215 _ExactTM.northing: 9232868.155664
    test 1281 line 215 _ExactTM.gamma: 76.279075
    test 1282 line 215 _ExactTM.scale: 1.148263
    test 1283 line 215 _ExactTM.lat: 59.778971
    test 1284 line 215 _ExactTM.lon: 78.080322
    test 1285 line 216 _ExactTM.easting: 4048307.545909
    test 1286 line 216 _ExactTM.northing: 9800416.422998
    test 1287 line 216 _ExactTM.gamma: 86.843918
    test 1288 line 216 _ExactTM.scale: 1.206495
    test 1289 line 216 _ExactTM.lat: 55.865310
    test 1290 line 216 _ExactTM.lon: 87.384288
    test 1291 line 217 _ExactTM.easting: 8973188.480293
    test 1292 line 217 _ExactTM.northing: 7042230.087021
    test 1293 line 217 _ExactTM.gamma: 60.872456
    test 1294 line 217 _ExactTM.scale: 2.156098
    test 1295 line 217 _ExactTM.lat: 24.310973
    test 1296 line 217 _ExactTM.lon: 76.823777
    test 1297 line 218 _ExactTM.easting: 126314.191618
    test 1298 line 218 _ExactTM.northing: 396006.687921
    test 1299 line 218 _ExactTM.gamma: 0.071065
    test 1300 line 218 _ExactTM.scale: 0.999798
    test 1301 line 218 _ExactTM.lat: 3.582041
    test 1302 line 218 _ExactTM.lon: 1.137286
    test 1303 line 219 _ExactTM.easting: 5247652.345647
    test 1304 line 219 _ExactTM.northing: 8670513.359752
    test 1305 line 219 _ExactTM.gamma: 72.700498
    test 1306 line 219 _ExactTM.scale: 1.355272
    test 1307 line 219 _ExactTM.lat: 46.124233
    test 1308 line 219 _ExactTM.lon: 77.313118
    test 1309 line 220 _ExactTM.easting: 8103656.838119
    test 1310 line 220 _ExactTM.northing: 9469794.014737
    test 1311 line 220 _ExactTM.gamma: 84.490673
    test 1312 line 220 _ExactTM.scale: 1.912164
    test 1313 line 220 _ExactTM.lat: 31.171391
    test 1314 line 220 _ExactTM.lon: 87.104504
    test 1315 line 221 _ExactTM.easting: 6300112.758236
    test 1316 line 221 _ExactTM.northing: 93835.917364
    test 1317 line 221 _ExactTM.gamma: 0.644805
    test 1318 line 221 _ExactTM.scale: 1.534073
    test 1319 line 221 _ExactTM.lat: 0.553171
    test 1320 line 221 _ExactTM.lon: 49.117104
    test 1321 line 222 _ExactTM.easting: 3894813.593782
    test 1322 line 222 _ExactTM.northing: 4833832.341027
    test 1323 line 222 _ExactTM.gamma: 27.453298
    test 1324 line 222 _ExactTM.scale: 1.192135
    test 1325 line 222 _ExactTM.lat: 35.361587
    test 1326 line 222 _ExactTM.lon: 41.860599
    test 1327 line 223 _ExactTM.easting: 402511.346712
    test 1328 line 223 _ExactTM.northing: 3520621.561911
    test 1329 line 223 _ExactTM.gamma: 2.238474
    test 1330 line 223 _ExactTM.scale: 1.001599
    test 1331 line 223 _ExactTM.lat: 31.750314
    test 1332 line 223 _ExactTM.lon: 4.248167
    test 1333 line 224 _ExactTM.easting: 5357378.503148
    test 1334 line 224 _ExactTM.northing: 2772997.602234
    test 1335 line 224 _ExactTM.gamma: 17.823560
    test 1336 line 224 _ExactTM.scale: 1.376031
    test 1337 line 224 _ExactTM.lat: 17.924336
    test 1338 line 224 _ExactTM.lon: 46.096402
    test 1339 line 225 _ExactTM.easting: 2807553.985866
    test 1340 line 225 _ExactTM.northing: 8177847.980275
    test 1341 line 225 _ExactTM.gamma: 54.680045
    test 1342 line 225 _ExactTM.scale: 1.097531
    test 1343 line 225 _ExactTM.lat: 60.931488
    test 1344 line 225 _ExactTM.lon: 58.221214
    test 1345 line 226 _ExactTM.easting: 18289045.166501
    test 1346 line 226 _ExactTM.northing: 7792942.339604
    test 1347 line 226 _ExactTM.gamma: 73.216494
    test 1348 line 226 _ExactTM.scale: 8.098009
    test 1349 line 226 _ExactTM.lat: 5.358151
    test 1350 line 226 _ExactTM.lon: 87.556213
    test 1351 line 227 _ExactTM.easting: 8376822.459538
    test 1352 line 227 _ExactTM.northing: 8128174.623878
    test 1353 line 227 _ExactTM.gamma: 70.920117
    test 1354 line 227 _ExactTM.scale: 1.984873
    test 1355 line 227 _ExactTM.lat: 28.616673
    test 1356 line 227 _ExactTM.lon: 80.452426
    test 1357 line 228 _ExactTM.easting: 11898068.353272
    test 1358 line 228 _ExactTM.northing: 4772439.493697
    test 1359 line 228 _ExactTM.gamma: 42.613968
    test 1360 line 228 _ExactTM.scale: 3.314412
    test 1361 line 228 _ExactTM.lat: 11.709763
    test 1362 line 228 _ExactTM.lon: 76.760295
    test 1363 line 229 _ExactTM.easting: 10550946.939050
    test 1364 line 229 _ExactTM.northing: 3851968.815295
    test 1365 line 229 _ExactTM.gamma: 33.383025
    test 1366 line 229 _ExactTM.scale: 2.724754
    test 1367 line 229 _ExactTM.lat: 12.009498
    test 1368 line 229 _ExactTM.lon: 71.782351
    test 1369 line 230 _ExactTM.easting: 6828299.123607
    test 1370 line 230 _ExactTM.northing: 9394803.227463
    test 1371 line 230 _ExactTM.gamma: 83.181386
    test 1372 line 230 _ExactTM.scale: 1.624359
    test 1373 line 230 _ExactTM.lat: 37.629784
    test 1374 line 230 _ExactTM.lon: 85.795687
    test 1375 line 231 _ExactTM.easting: 11162550.334022
    test 1376 line 231 _ExactTM.northing: 2640267.279593
    test 1377 line 231 _ExactTM.gamma: 23.145404
    test 1378 line 231 _ExactTM.scale: 2.998408
    test 1379 line 231 _ExactTM.lat: 7.721128
    test 1380 line 231 _ExactTM.lon: 71.662731
    test 1381 line 232 _ExactTM.easting: 4411584.447941
    test 1382 line 232 _ExactTM.northing: 4956173.694407
    test 1383 line 232 _ExactTM.gamma: 30.713919
    test 1384 line 232 _ExactTM.scale: 1.248736
    test 1385 line 232 _ExactTM.lat: 34.295026
    test 1386 line 232 _ExactTM.lon: 46.442191
    test 1387 line 233 _ExactTM.easting: 672108.897905
    test 1388 line 233 _ExactTM.northing: 4751554.657054
    test 1389 line 233 _ExactTM.gamma: 5.569178
    test 1390 line 233 _ExactTM.scale: 1.005162
    test 1391 line 233 _ExactTM.lat: 42.622496
    test 1392 line 233 _ExactTM.lon: 8.193605
    test 1393 line 234 _ExactTM.easting: 5022964.290579
    test 1394 line 234 _ExactTM.northing: 6860418.199502
    test 1395 line 234 _ExactTM.gamma: 50.862230
    test 1396 line 234 _ExactTM.scale: 1.324925
    test 1397 line 234 _ExactTM.lat: 41.667780
    test 1398 line 234 _ExactTM.lon: 61.518288
    test 1399 line 235 _ExactTM.easting: 1669655.595207
    test 1400 line 235 _ExactTM.northing: 4152086.537021
    test 1401 line 235 _ExactTM.gamma: 11.110237
    test 1402 line 235 _ExactTM.scale: 1.034138
    test 1403 line 235 _ExactTM.lat: 36.060369
    test 1404 line 235 _ExactTM.lon: 18.444112
    test 1405 line 236 _ExactTM.easting: 6055876.729655
    test 1406 line 236 _ExactTM.northing: 4896837.552619
    test 1407 line 236 _ExactTM.gamma: 35.799747
    test 1408 line 236 _ExactTM.scale: 1.485967
    test 1409 line 236 _ExactTM.lat: 27.948091
    test 1410 line 236 _ExactTM.lon: 56.816429
    test 1411 line 237 _ExactTM.easting: 1209214.164379
    test 1412 line 237 _ExactTM.northing: 7266409.859178
    test 1413 line 237 _ExactTM.gamma: 22.319633
    test 1414 line 237 _ExactTM.scale: 1.017554
    test 1415 line 237 _ExactTM.lat: 63.386030
    test 1416 line 237 _ExactTM.lon: 24.662716
    test 1417 line 238 _ExactTM.easting: 5154564.559584
    test 1418 line 238 _ExactTM.northing: 698118.349975
    test 1419 line 238 _ExactTM.gamma: 4.242360
    test 1420 line 238 _ExactTM.scale: 1.347481
    test 1421 line 238 _ExactTM.lat: 4.680922
    test 1422 line 238 _ExactTM.lon: 42.114426
    test 1423 line 239 _ExactTM.easting: 2695149.806543
    test 1424 line 239 _ExactTM.northing: 8208197.765605
    test 1425 line 239 _ExactTM.gamma: 54.178615
    test 1426 line 239 _ExactTM.scale: 1.089730
    test 1427 line 239 _ExactTM.lat: 61.826625
    test 1428 line 239 _ExactTM.lon: 57.525096
    test 1429 line 240 _ExactTM.easting: 3394792.327820
    test 1430 line 240 _ExactTM.northing: 3217583.415552
    test 1431 line 240 _ExactTM.gamma: 15.165863
    test 1432 line 240 _ExactTM.scale: 1.145285
    test 1433 line 240 _ExactTM.lat: 25.104353
    test 1434 line 240 _ExactTM.lon: 32.528660
    test 1435 line 241 _ExactTM.easting: 1429160.966985
    test 1436 line 241 _ExactTM.northing: 8212685.362032
    test 1437 line 241 _ExactTM.gamma: 37.484904
    test 1438 line 241 _ExactTM.scale: 1.024676
    test 1439 line 241 _ExactTM.lat: 69.678351
    test 1440 line 241 _ExactTM.lon: 39.275513
    test 1441 line 242 _ExactTM.easting: 8343387.998065
    test 1442 line 242 _ExactTM.northing: 8885196.954578
    test 1443 line 242 _ExactTM.gamma: 78.561937
    test 1444 line 242 _ExactTM.scale: 1.974733
    test 1445 line 242 _ExactTM.lat: 29.671384
    test 1446 line 242 _ExactTM.lon: 84.196595
    test 1447 line 243 _ExactTM.easting: 1990722.928606
    test 1448 line 243 _ExactTM.northing: 7569202.065162
    test 1449 line 243 _ExactTM.gamma: 37.075276
    test 1450 line 243 _ExactTM.scale: 1.048486
    test 1451 line 243 _ExactTM.lat: 62.300208
    test 1452 line 243 _ExactTM.lon: 40.474051
    test 1453 line 244 _ExactTM.easting: 1554980.099559
    test 1454 line 244 _ExactTM.northing: 1449423.919586
    test 1455 line 244 _ExactTM.gamma: 3.188328
    test 1456 line 244 _ExactTM.scale: 1.029664
    test 1457 line 244 _ExactTM.lat: 12.721776
    test 1458 line 244 _ExactTM.lon: 14.190003
    test 1459 line 245 _ExactTM.easting: 785205.450196
    test 1460 line 245 _ExactTM.northing: 5575158.423096
    test 1461 line 245 _ExactTM.gamma: 8.388417
    test 1462 line 245 _ExactTM.scale: 1.007181
    test 1463 line 245 _ExactTM.lat: 49.811296
    test 1464 line 245 _ExactTM.lon: 10.925011
    test 1465 line 246 _ExactTM.easting: 3310405.988313
    test 1466 line 246 _ExactTM.northing: 5955022.233881
    test 1467 line 246 _ExactTM.gamma: 33.007587
    test 1468 line 246 _ExactTM.scale: 1.137141
    test 1469 line 246 _ExactTM.lat: 45.132680
    test 1470 line 246 _ExactTM.lon: 42.478624
    test 1471 line 247 _ExactTM.easting: 4733460.960666
    test 1472 line 247 _ExactTM.northing: 129034.889816
    test 1473 line 247 _ExactTM.gamma: 0.737551
    test 1474 line 247 _ExactTM.scale: 1.290439
    test 1475 line 247 _ExactTM.lat: 0.904279
    test 1476 line 247 _ExactTM.lon: 39.078412
    test 1477 line 248 _ExactTM.easting: 3322708.343909
    test 1478 line 248 _ExactTM.northing: 3864738.078742
    test 1479 line 248 _ExactTM.gamma: 18.472566
    test 1480 line 248 _ExactTM.scale: 1.138838
    test 1481 line 248 _ExactTM.lat: 30.163605
    test 1482 line 248 _ExactTM.lon: 33.577996
    test 1483 line 249 _ExactTM.easting: 8672864.417204
    test 1484 line 249 _ExactTM.northing: 8333465.983444
    test 1485 line 249 _ExactTM.gamma: 73.206273
    test 1486 line 249 _ExactTM.scale: 2.065441
    test 1487 line 249 _ExactTM.lat: 27.643244
    test 1488 line 249 _ExactTM.lon: 81.892859
    test 1489 line 250 _ExactTM.easting: 11126818.231196
    test 1490 line 250 _ExactTM.northing: 7618712.174991
    test 1491 line 250 _ExactTM.gamma: 67.887173
    test 1492 line 250 _ExactTM.scale: 2.922417
    test 1493 line 250 _ExactTM.lat: 18.201208
    test 1494 line 250 _ExactTM.lon: 82.434618
    test 1495 line 251 _ExactTM.easting: 8650100.981797
    test 1496 line 251 _ExactTM.northing: 9975084.168997
    test 1497 line 251 _ExactTM.gamma: 89.767446
    test 1498 line 251 _ExactTM.scale: 2.057289
    test 1499 line 251 _ExactTM.lat: 28.804576
    test 1500 line 251 _ExactTM.lon: 89.886072
    test 1501 line 252 _ExactTM.easting: 2212701.180192
    test 1502 line 252 _ExactTM.northing: 650348.100229
    test 1503 line 252 _ExactTM.gamma: 1.970441
    test 1504 line 252 _ExactTM.scale: 1.060830
    test 1505 line 252 _ExactTM.lat: 5.542998
    test 1506 line 252 _ExactTM.lon: 19.589578
    test 1507 line 253 _ExactTM.easting: 6890222.326618
    test 1508 line 253 _ExactTM.northing: 7506813.499547
    test 1509 line 253 _ExactTM.gamma: 62.684825
    test 1510 line 253 _ExactTM.scale: 1.638488
    test 1511 line 253 _ExactTM.lat: 34.237147
    test 1512 line 253 _ExactTM.lon: 73.678164
    test 1513 line 254 _ExactTM.easting: 6692260.067325
    test 1514 line 254 _ExactTM.northing: 4244174.008110
    test 1515 line 254 _ExactTM.gamma: 31.812920
    test 1516 line 254 _ExactTM.scale: 1.604640
    test 1517 line 254 _ExactTM.lat: 22.704949
    test 1518 line 254 _ExactTM.lon: 57.877010
    test 1519 line 255 _ExactTM.easting: 1225564.137190
    test 1520 line 255 _ExactTM.northing: 4778923.924144
    test 1521 line 255 _ExactTM.gamma: 10.083419
    test 1522 line 255 _ExactTM.scale: 1.018134
    test 1523 line 255 _ExactTM.lat: 42.192424
    test 1524 line 255 _ExactTM.lon: 14.828196
    test 1525 line 256 _ExactTM.easting: 12341116.154950
    test 1526 line 256 _ExactTM.northing: 5081855.521966
    test 1527 line 256 _ExactTM.gamma: 45.712546
    test 1528 line 256 _ExactTM.scale: 3.535170
    test 1529 line 256 _ExactTM.lat: 11.481151
    test 1530 line 256 _ExactTM.lon: 78.189236
    test 1531 line 257 _ExactTM.easting: 6673845.021771
    test 1532 line 257 _ExactTM.northing: 1177587.190565
    test 1533 line 257 _ExactTM.gamma: 8.389141
    test 1534 line 257 _ExactTM.scale: 1.605171
    test 1535 line 257 _ExactTM.lat: 6.609626
    test 1536 line 257 _ExactTM.lon: 51.735783
    test 1537 line 258 _ExactTM.easting: 6966354.690417
    test 1538 line 258 _ExactTM.northing: 3641802.005093
    test 1539 line 258 _ExactTM.gamma: 27.409636
    test 1540 line 258 _ExactTM.scale: 1.661469
    test 1541 line 258 _ExactTM.lat: 19.059369
    test 1542 line 258 _ExactTM.lon: 57.526439
    test 1543 max forward error: 2.328306e-08
    test 1544 max reverse error: 1.278977e-13
    test 1545 _ExactTM.scale0: 0.9996
    test 1546 _ExactTM.datum: WGS84
    test 1547 _ExactTM.datum.ellipsoid.KsOrder: 8
    test 1548 WGS84.KsOrder: 8

    all 1548 testExactTMcoords.py tests passed, 1 skipped (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.153 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testFmath.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fcbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fhypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.INF from .constants by testFmath.py line 11
# lazily imported pygeodesy.Fn_rt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsqrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFmath.py line 11
# lazily imported pygeodesy.cbrt from .fmath by testFmath.py line 11
# lazily imported pygeodesy.cbrt2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.euclid_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testFmath.py line 11
# lazily imported pygeodesy.facos1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fasin1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan1 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fatan2 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fhorner from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpolynomial from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fpowers from .fmath by testFmath.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFmath.py line 11
# lazily imported pygeodesy.hypot from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.hypot2_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.norm_ from .fmath by testFmath.py line 11
# lazily imported pygeodesy.signOf from .basics by testFmath.py line 11
# lazily imported pygeodesy.sqrt3 from .fmath by testFmath.py line 11
# lazily imported pygeodesy.sqrt_a from .fmath by testFmath.py line 11

    testing testFmath.py 23.03.27 (module pygeodesy.fmath 22.11.04) isLazy=3
    test 1 fpolynomialA: 1.21197509765625
    test 2 fhornerA: 1.21197509765625
    test 3 fpolynomialB: 0.1513671875
    test 4 fhornerB: 0.1513671875

    test 5 fpolynomialA: 1.21197509765625
    test 6 fhornerA: 1.21197509765625
    test 7 fpolynomialB: 0.1513671875
    test 8 fhornerB: 0.1513671875

    test 9 fpolynomialA: 1.21197509765625
    test 10 fhornerA: 1.21197509765625
    test 11 fpolynomialB: 0.1513671875
    test 12 fhornerB: 0.1513671875

    test 13 fpolynomialA: 1.21197509765625
    test 14 fhornerA: 1.21197509765625
    test 15 fpolynomialB: 0.1513671875
    test 16 fhornerB: 0.1513671875

    test 17 fpolynomialA: 1.21197509765625
    test 18 fhornerA: 1.21197509765625
    test 19 fpolynomialB: 0.1513671875
    test 20 fhornerB: 0.1513671875

    test 21 fpolynomialA: 1.21197509765625
    test 22 fhornerA: 1.21197509765625
    test 23 fpolynomialB: 0.1513671875
    test 24 fhornerB: 0.1513671875

    test 25 fpolynomialA: 1.21197509765625
    test 26 fhornerA: 1.21197509765625
    test 27 fpolynomialB: 0.1513671875
    test 28 fhornerB: 0.1513671875

    test 29 fpolynomialA: 1.21197509765625
    test 30 fhornerA: 1.21197509765625
    test 31 fpolynomialB: 0.1513671875
    test 32 fhornerB: 0.1513671875

    test 33 fpolynomialA: 1.21197509765625
    test 34 fhornerA: 1.21197509765625
    test 35 fpolynomialB: 0.1513671875
    test 36 fhornerB: 0.1513671875

    test 37 fpolynomialA: 1.21197509765625
    test 38 fhornerA: 1.21197509765625
    test 39 fpolynomialB: 0.1513671875
    test 40 fhornerB: 0.1513671875

    test 41 fpolynomialA: 1.21197509765625
    test 42 fhornerA: 1.21197509765625
    test 43 fpolynomialB: 0.1513671875
    test 44 fhornerB: 0.1513671875

    test 45 fpolynomialA: 1.21197509765625
    test 46 fhornerA: 1.21197509765625
    test 47 fpolynomialB: 0.1513671875
    test 48 fhornerB: 0.1513671875

    test 49 fpolynomialA: 1.21197509765625
    test 50 fhornerA: 1.21197509765625
    test 51 fpolynomialB: 0.1513671875
    test 52 fhornerB: 0.1513671875

    test 53 fpolynomialA: 1.21197509765625
    test 54 fhornerA: 1.21197509765625
    test 55 fpolynomialB: 0.1513671875
    test 56 fhornerB: 0.1513671875

    test 57 fpolynomialA: 1.21197509765625
    test 58 fhornerA: 1.21197509765625
    test 59 fpolynomialB: 0.1513671875
    test 60 fhornerB: 0.1513671875

    test 61 fpolynomialA: 1.21197509765625
    test 62 fhornerA: 1.21197509765625
    test 63 fpolynomialB: 0.1513671875
    test 64 fhornerB: 0.1513671875

    test 65 fpolynomialA: 1.21197509765625
    test 66 fhornerA: 1.21197509765625
    test 67 fpolynomialB: 0.1513671875
    test 68 fhornerB: 0.1513671875

    test 69 fpolynomialA: 1.21197509765625
    test 70 fhornerA: 1.21197509765625
    test 71 fpolynomialB: 0.1513671875
    test 72 fhornerB: 0.1513671875

    test 73 fpolynomialA: 1.21197509765625
    test 74 fhornerA: 1.21197509765625
    test 75 fpolynomialB: 0.1513671875
    test 76 fhornerB: 0.1513671875

    test 77 fpolynomialA: 1.21197509765625
    test 78 fhornerA: 1.21197509765625
    test 79 fpolynomialB: 0.1513671875
    test 80 fhornerB: 0.1513671875

    test 81 fpolynomialA: 1.21197509765625
    test 82 fhornerA: 1.21197509765625
    test 83 fpolynomialB: 0.1513671875
    test 84 fhornerB: 0.1513671875

    test 85 fpolynomialA: 1.21197509765625
    test 86 fhornerA: 1.21197509765625
    test 87 fpolynomialB: 0.1513671875
    test 88 fhornerB: 0.1513671875

    test 89 fpolynomialA: 1.21197509765625
    test 90 fhornerA: 1.21197509765625
    test 91 fpolynomialB: 0.1513671875
    test 92 fhornerB: 0.1513671875

    test 93 fpolynomialA: 1.21197509765625
    test 94 fhornerA: 1.21197509765625
    test 95 fpolynomialB: 0.1513671875
    test 96 fhornerB: 0.1513671875

    test 97 fpolynomialA: 1.21197509765625
    test 98 fhornerA: 1.21197509765625
    test 99 fpolynomialB: 0.1513671875
    test 100 fhornerB: 0.1513671875

    test 101 fpolynomialA: 1.21197509765625
    test 102 fhornerA: 1.21197509765625
    test 103 fpolynomialB: 0.1513671875
    test 104 fhornerB: 0.1513671875

    test 105 fpolynomialA: 1.21197509765625
    test 106 fhornerA: 1.21197509765625
    test 107 fpolynomialB: 0.1513671875
    test 108 fhornerB: 0.1513671875

    test 109 fpolynomialA: 1.21197509765625
    test 110 fhornerA: 1.21197509765625
    test 111 fpolynomialB: 0.1513671875
    test 112 fhornerB: 0.1513671875

    test 113 fpolynomialA: 1.21197509765625
    test 114 fhornerA: 1.21197509765625
    test 115 fpolynomialB: 0.1513671875
    test 116 fhornerB: 0.1513671875

    test 117 fpolynomialA: 1.21197509765625
    test 118 fhornerA: 1.21197509765625
    test 119 fpolynomialB: 0.1513671875
    test 120 fhornerB: 0.1513671875

    test 121 fpolynomialA: 1.21197509765625
    test 122 fhornerA: 1.21197509765625
    test 123 fpolynomialB: 0.1513671875
    test 124 fhornerB: 0.1513671875

    test 125 fpolynomialA: 1.21197509765625
    test 126 fhornerA: 1.21197509765625
    test 127 fpolynomialB: 0.1513671875
    test 128 fhornerB: 0.1513671875

    test 129 fpolynomialA: 1.21197509765625
    test 130 fhornerA: 1.21197509765625
    test 131 fpolynomialB: 0.1513671875
    test 132 fhornerB: 0.1513671875

    test 133 fpowers: 10
    test 134 fpowers: 2
    test 135 fpowers: 1024
    test 136 fpowers: 4
    test 137 fpowers: 16
    test 138 fpowers: 1024
    test 139 fpowers: 4
    test 140 fpowers: 8
    test 141 fpowers: 512

    test 142 Airy1830: 6366914.608925221
    test 143 Airy1830: 6366914.608925221
    test 144 Airy1830: 6366914.608925221
    test 145 Airy1830: 6366914.608925221

    test 146 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 147 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 148 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881
    test 149 AiryModified: 6366691.774619882  FAILED, KNOWN, expected 6366691.774619881

    test 150 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 151 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 152 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950
    test 153 ATS1977: 6367447.141166951  FAILED, KNOWN, expected 6367447.141166950

    test 154 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 155 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 156 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284
    test 157 Australia1966: 6367471.848532283  FAILED, KNOWN, expected 6367471.848532284

    test 158 Bessel1841: 6366742.520233950
    test 159 Bessel1841: 6366742.520233950
    test 160 Bessel1841: 6366742.520233950
    test 161 Bessel1841: 6366742.520233950

    test 162 BesselModified: 6366837.224747659
    test 163 BesselModified: 6366837.224747659
    test 164 BesselModified: 6366837.224747659
    test 165 BesselModified: 6366837.224747659

    test 166 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 167 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 168 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048
    test 169 CGCS2000: 6367449.145771047  FAILED, KNOWN, expected 6367449.145771048

    test 170 Clarke1866: 6367399.689169783
    test 171 Clarke1866: 6367399.689169783
    test 172 Clarke1866: 6367399.689169783
    test 173 Clarke1866: 6367399.689169783

    test 174 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 175 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 176 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514
    test 177 Clarke1880: 6367386.643980513  FAILED, KNOWN, expected 6367386.643980514

    test 178 Clarke1880IGN: 6367386.736673363
    test 179 Clarke1880IGN: 6367386.736673363
    test 180 Clarke1880IGN: 6367386.736673363
    test 181 Clarke1880IGN: 6367386.736673363

    test 182 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 183 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 184 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011
    test 185 Clarke1880Mod: 6367386.692362010  FAILED, KNOWN, expected 6367386.692362011

    test 186 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 187 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 188 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841
    test 189 CPM1799: 6366208.881847842  FAILED, KNOWN, expected 6366208.881847841

    test 190 Delambre1810: 6366197.076843344
    test 191 Delambre1810: 6366197.076843344
    test 192 Delambre1810: 6366197.076843344
    test 193 Delambre1810: 6366197.076843344

    test 194 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 195 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 196 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712
    test 197 Engelis1985: 6367448.175079710  FAILED, KNOWN, expected 6367448.175079712

    test 198 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 199 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 200 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009
    test 201 Everest1969: 6366699.578395008  FAILED, KNOWN, expected 6366699.578395009

    test 202 Everest1975: 6366703.060499237
    test 203 Everest1975: 6366703.060499237
    test 204 Everest1975: 6366703.060499237
    test 205 Everest1975: 6366703.060499237

    test 206 Fisher1968: 6367463.656043807
    test 207 Fisher1968: 6367463.656043807
    test 208 Fisher1968: 6367463.656043807
    test 209 Fisher1968: 6367463.656043807

    test 210 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 211 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 212 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740
    test 213 GEM10C: 6367449.145824739  FAILED, KNOWN, expected 6367449.145824740

    test 214 GPES: 6378135.000000000
    test 215 GPES: 6378135.000000000
    test 216 GPES: 6378135.000000000
    test 217 GPES: 6378135.000000000

    test 218 GRS67: 6367471.747065325
    test 219 GRS67: 6367471.747065325
    test 220 GRS67: 6367471.747065325
    test 221 GRS67: 6367471.747065325

    test 222 GRS80: 6367449.145771043
    test 223 GRS80: 6367449.145771043
    test 224 GRS80: 6367449.145771043
    test 225 GRS80: 6367449.145771043

    test 226 Helmert1906: 6367513.572270742
    test 227 Helmert1906: 6367513.572270742
    test 228 Helmert1906: 6367513.572270742
    test 229 Helmert1906: 6367513.572270742

    test 230 IAU76: 6367452.132788436
    test 231 IAU76: 6367452.132788436
    test 232 IAU76: 6367452.132788436
    test 233 IAU76: 6367452.132788436

    test 234 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 235 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 236 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 237 IERS1989: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246

    test 238 IERS1992TOPEX: 6367448.446996409
    test 239 IERS1992TOPEX: 6367448.446996409
    test 240 IERS1992TOPEX: 6367448.446996409
    test 241 IERS1992TOPEX: 6367448.446996409

    test 242 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 243 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 244 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577
    test 245 IERS2003: 6367448.717710576  FAILED, KNOWN, expected 6367448.717710577

    test 246 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 247 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 248 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584
    test 249 Intl1924: 6367654.500057585  FAILED, KNOWN, expected 6367654.500057584

    test 250 Intl1967: 6367469.338944457
    test 251 Intl1967: 6367469.338944457
    test 252 Intl1967: 6367469.338944457
    test 253 Intl1967: 6367469.338944457

    test 254 Krassovski1940: 6367558.496874981
    test 255 Krassovski1940: 6367558.496874981
    test 256 Krassovski1940: 6367558.496874981
    test 257 Krassovski1940: 6367558.496874981

    test 258 Krassowsky1940: 6367558.496874981
    test 259 Krassowsky1940: 6367558.496874981
    test 260 Krassowsky1940: 6367558.496874981
    test 261 Krassowsky1940: 6367558.496874981

    test 262 Maupertuis1738: 6380564.130118373
    test 263 Maupertuis1738: 6380564.130118373
    test 264 Maupertuis1738: 6380564.130118373
    test 265 Maupertuis1738: 6380564.130118373

    test 266 Mercury1960: 6367479.629236430
    test 267 Mercury1960: 6367479.629236430
    test 268 Mercury1960: 6367479.629236430
    test 269 Mercury1960: 6367479.629236430

    test 270 Mercury1968Mod: 6367463.656043807
    test 271 Mercury1968Mod: 6367463.656043807
    test 272 Mercury1968Mod: 6367463.656043807
    test 273 Mercury1968Mod: 6367463.656043807

    test 274 NWL1965: 6367456.873668412
    test 275 NWL1965: 6367456.873668412
    test 276 NWL1965: 6367456.873668412
    test 277 NWL1965: 6367456.873668412

    test 278 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 279 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 280 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302
    test 281 OSU86F: 6367448.347165301  FAILED, KNOWN, expected 6367448.347165302

    test 282 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 283 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 284 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732
    test 285 OSU91A: 6367448.446997731  FAILED, KNOWN, expected 6367448.446997732

    test 286 Plessis1817: 6366197.157107386
    test 287 Plessis1817: 6366197.157107386
    test 288 Plessis1817: 6366197.157107386
    test 289 Plessis1817: 6366197.157107386

    test 290 PZ90: 6367448.169554430
    test 291 PZ90: 6367448.169554430
    test 292 PZ90: 6367448.169554430
    test 293 PZ90: 6367448.169554430

    test 294 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 295 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 296 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246
    test 297 SGS85: 6367448.139491247  FAILED, KNOWN, expected 6367448.139491246

    test 298 SoAmerican1969: 6367471.848532285
    test 299 SoAmerican1969: 6367471.848532285
    test 300 SoAmerican1969: 6367471.848532285
    test 301 SoAmerican1969: 6367471.848532285

    test 302 Sphere: 6371008.771415000
    test 303 Sphere: 6371008.771415000
    test 304 Sphere: 6371008.771415000
    test 305 Sphere: 6371008.771415000

    test 306 SphereAuthalic: 6371000.000000000
    test 307 SphereAuthalic: 6371000.000000000
    test 308 SphereAuthalic: 6371000.000000000
    test 309 SphereAuthalic: 6371000.000000000

    test 310 SpherePopular: 6378137.000000000
    test 311 SpherePopular: 6378137.000000000
    test 312 SpherePopular: 6378137.000000000
    test 313 SpherePopular: 6378137.000000000

    test 314 Struve1860: 6367482.318325493
    test 315 Struve1860: 6367482.318325493
    test 316 Struve1860: 6367482.318325493
    test 317 Struve1860: 6367482.318325493

    test 318 WGS60: 6367478.630911891
    test 319 WGS60: 6367478.630911891
    test 320 WGS60: 6367478.630911891
    test 321 WGS60: 6367478.630911891

    test 322 WGS66: 6367456.873668412
    test 323 WGS66: 6367456.873668412
    test 324 WGS66: 6367456.873668412
    test 325 WGS66: 6367456.873668412

    test 326 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 327 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 328 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826
    test 329 WGS72: 6367447.248623827  FAILED, KNOWN, expected 6367447.248623826

    test 330 WGS84: 6367449.145823414
    test 331 WGS84: 6367449.145823414
    test 332 WGS84: 6367449.145823414
    test 333 WGS84: 6367449.145823414

    test 334 hypot: 1
    test 335 sqrt_a: 0.6102683302836
    test 336 sqrt_a: 0.6102683302836
    test 337 hypot_ : 1.00001250
    test 338 euclid_: 1.00207107  FAILED, KNOWN, expected 1.00001250
    test 339 hypot2_: 1.00002500
    test 340 norm_  : 1.00000000
    test 341 hypot_ : 3606.937759
    test 342 euclid_: 3845.584412  FAILED, KNOWN, expected 3859.423403
    test 343 hypot2_: 13010000.0
    test 344 norm_  : 1.0
    test 345 hypot_ : 40112.842
    test 346 hypot2_: 1609040100.0
    test 347 euclid_: 41277.666  FAILED, KNOWN, expected 41316.227
    test 348 cbrt: 3.00
    test 349 cbrt: -3.00
    test 350 cbrt2: 9.00
    test 351 cbrt2: 9.00
    test 352 sqrt3: 27.00
    test 353 facos1: 0.005%
    test 354 fasin1: 0.439%
    test 355 fatan : 0.134%
    test 356 fatan1: 2.834%
    test 357 fatan2: 0.321%

    test 358 Fhypot: fmath.Fhypot[2] (5.0, 0)
    test 359 Fhypot: fmath.Fhypot[3] (9.43398, 0)
    test 360 Fhypot: fmath.Fhypot[2] (5.0, 0)
    test 361 Fhypot: fmath.Fhypot[3] (-2.18182, 0)
    test 362 Fhypot: fmath.Fhypot[2] (-12, 0)
    test 363 Fhypot: fmath.Fhypot[2] (1.41421, 0)
    test 364 Fhypot: fmath.Fhypot[2] (-0.5, 0)
    test 365 Fhypot: fmath.Fhypot(<fsums.Fsum[1] (-1, 0) at 0x101f9c100>, inf, <fsums.Fsum[1] (-1, 0) at 0x101f9c100>, ..., power=-1): xs[2] (inf): _ (inf): not finite
    test 366 Fhypot: fmath.Fhypot(<fsums.Fsum[1] (-1, 0) at 0x101f9c100>, -1, power=0): float division by zero

    test 367 Fsqrt: fmath.Fsqrt[2] (3.0, 0)
    test 368 Fsqrt: fmath.Fcbrt[3] (3.0, 0)
    test 369 Fsqrt: fmath.Fsqrt[3] (1.41421, 0)
    test 370 Fsqrt: fmath.Fsqrt[2] (1.41421, 0)
    test 371 Fn_rt: fmath.Fn_rt[3] (0.5, 0)
    test 372 Fn_rt: fmath.Fn_rt[2] (0.5, 0)
    test 373 Fsqrt: fmath.Fsqrt(<fsums.Fsum[1] (-1, 0) at 0x1030ce4a0>, -1, root=2.0): fsums.Fsum[3] Fsum2Tuple(fsum=-2, residual=0) ** 0.5: complex (8.659560562354934e-17+1.4142135623730951j) from 2-arg pow(-2, 0.5)
    test 374 Fsqrt: fmath.Fn_rt(<fsums.Fsum[1] (-1, 0) at 0x1030ce4a0>, -1, root=0): float division by zero
    test 375 Fn_rt: fmath.Fn_rt[2] (-0.25, 0)

    test 376 Fhypot1: 1.41421356e+100
    test 377 Fpowers1: -5.5919337e-05
    test 378 Fsqrt1: 0.0351838441
    test 379 Fcbrt1: 0.107373108

    test 380 Fhypot2: 1.41421356e+100
    test 381 Fpowers2: -326.942731
    test 382 Fsqrt2: 0.0184753308
    test 383 Fcbrt2: 0.0698867452

    test 384 Fhypot3: 2e+100
    test 385 Fpowers3: 436.739692
    test 386 Fsqrt3: 0.00163178339
    test 387 Fcbrt3: 0.0138603758

    test 388 Fhypot4: 2.44948974e+100
    test 389 Fpowers4: -0.00502497974
    test 390 Fsqrt4: 0.155591825
    test 391 Fcbrt4: 0.289284069

    test 392 Fhypot5: 2.82842712e+100
    test 393 Fpowers5: 34959620.2
    test 394 Fsqrt5: 0.0447277566
    test 395 Fcbrt5: 0.126004119

    test 396 Fhypot6: 3.16227766e+100
    test 397 Fpowers6: -34.2126576
    test 398 Fsqrt6: 1.04716778e-06
    test 399 Fcbrt6: 0.000103120303

    test 400 Fhypot7: 3.46410162e+100
    test 401 Fpowers7: -30.4574687
    test 402 Fsqrt7: 4.9925036e-05
    test 403 Fcbrt7: 0.00135585191

    test 404 Fhypot8: 3.74165739e+100
    test 405 Fpowers8: 3.96040483
    test 406 Fsqrt8: 0.00130379446
    test 407 Fcbrt8: 0.0119345511

    test 408 Fhypot9: 4e+100
    test 409 Fpowers9: 675031.998
    test 410 Fsqrt9: 11.802454
    test 411 Fcbrt9: 5.18379968

    71 of 411 testFmath.py tests (17.3%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 62.727 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testFormy.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.PI from .constants by testFormy.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testFormy.py line 11
# lazily imported pygeodesy.R_M from .constants by testFormy.py line 11
# lazily imported pygeodesy.antipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.bearing from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineForsytheAndoyerLambert from .formy by testFormy.py line 11
# lazily imported pygeodesy.cosineLaw from .formy by testFormy.py line 11
# lazily imported pygeodesy.Datums from .datums by testFormy.py line 11
# lazily imported pygeodesy.equirectangular from .formy by testFormy.py line 11
# lazily imported pygeodesy.euclidean from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessAbc_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessGirard_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessLHuilier_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessKarney from .formy by testFormy.py line 11
# lazily imported pygeodesy.excessQuad from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatLocal from .formy by testFormy.py line 11
# lazily imported pygeodesy.flatPolar from .formy by testFormy.py line 11
# lazily imported pygeodesy.hartzell from .formy by testFormy.py line 11
# lazily imported pygeodesy.haversine from .formy by testFormy.py line 11
# lazily imported pygeodesy.heightOf from .formy by testFormy.py line 11
# lazily imported pygeodesy.horizon from .formy by testFormy.py line 11
# lazily imported pygeodesy.hubeny from .formy by testFormy.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testFormy.py line 11
# lazily imported pygeodesy.intersection2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.intersections2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode from .formy by testFormy.py line 11
# lazily imported pygeodesy.isantipode_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal from .formy by testFormy.py line 11
# lazily imported pygeodesy.isnormal_ from .formy by testFormy.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testFormy.py line 11
# lazily imported pygeodesy.latlonDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.LimitError from .errors by testFormy.py line 11
# lazily imported pygeodesy.limiterrors from .errors by testFormy.py line 11
# lazily imported pygeodesy.map1 from .basics by testFormy.py line 11
# lazily imported pygeodesy.normal from .formy by testFormy.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testFormy.py line 11
# lazily imported pygeodesy.radical2 from .formy by testFormy.py line 11
# lazily imported pygeodesy.thomas from .formy by testFormy.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testFormy.py line 11
# lazily imported pygeodesy.vincentys from .formy by testFormy.py line 11

    testing testFormy.py 23.04.11 isLazy=3
    test 1 antipode1: (-89.0, -1.0)
    test 2 antipode2: (89.0, 1.0)
    test 3 bearing1: 251.364
    test 4 bearing2: 251.364
    test 5 bearing3: 249.614
    test 6 excessAbc_: 11.9698
    test 7 excessAbc_: 11.9698
    test 8 excessGirard_: 11.9698
    test 9 excessLHuilier_: 11.9698
    test 10 excessKarney: 56.9625
    test 11 excessQuad: 56.9625
    test 12 excessKarney: 44.0235
    test 13 excessQuad: 44.0235
    test 14 excessKarney: -44.0235
    test 15 excessQuad: -44.0235
    test 16 isantipode1: True
    test 17 isantipode2: True
    test 18 isantipode3: False
    test 19 isantipode4: True
    test 20 isantipode5: True
    test 21 isantipode6: True
    test 22 isantipode7: False
    test 23 isantipode8: True
    test 24 isnormal1: True
    test 25 isnormal2: False
    test 26 isnormal3: True
    test 27 isnormal4: True
    test 28 isnormal5: True
    test 29 isnormal6: False
    test 30 isnormal7: True
    test 31 isnormal8: True
    test 32 hartzell: (884080.396945, 5592040.198472, 2927517.711001)
    test 33 hartzell: 27.500482°N, 081.016111°E, +0.00, 'hartzell'
    test 34 hartzell: (3642031.283571, 3678090.99925, 3714150.714929)
    test 35 hartzell: 35.843738°N, 045.282243°E, +0.00, 'hartzell'
    test 36 heightOf0: 2638958.23912
    test 37 heightOf45: 5401080.43931
    test 38 heightOf90: 6371008.77141
    test 39 heightOf135: 5401080.43931
    test 40 horizon0: 0.0
    test 41 horizon10Km: 357099.672
    test 42 horizon30Kft: 392310.704
    test 43 horizon10Kft: 214877.422
    test 44 normal1: (-89.0, 179.0)
    test 45 normal2: (81.0, 180.0)
    test 46 normal3: (81.0, -19.0)
    test 47 normal4: (-81.0, 0.0)

    test 48 haversine1 (0.00%): 298009.404
    test 49 vincentys1 (0.00%): 298009.404
    test 50 vincentys1 (0.00%): 298009.404
    test 51 cosineAndoyerLambert1 (0.13%): 298395.796  FAILED, KNOWN, expected 298009.404
    test 52 cosineForsytheAndoyerLambert1 (0.13%): 298396.056  FAILED, KNOWN, expected 298009.404
    test 53 cosineLaw1 (0.00%): 298009.404
    test 54 equirectangular1 (0.01%): 298039.206  FAILED, KNOWN, expected 298009.404
    test 55 euclidean1 (5.26%): 313698.901  FAILED, KNOWN, expected 298009.404
    test 56 flatLocal1 (0.14%): 298425.999  FAILED, KNOWN, expected 298009.404
    test 57 flatPolar1 (8.67%): 323841.582  FAILED, KNOWN, expected 298009.404
    test 58 thomas1 (0.13%): 298396.261  FAILED, KNOWN, expected 298009.404
    test 59 hubeny1: <function flatLocal at 0x10465ab00>

    test 60 haversine2 (0.00%): 98164.988
    test 61 vincentys2 (0.00%): 98164.988
    test 62 vincentys2 (0.00%): 98164.988
    test 63 cosineAndoyerLambert2 (0.10%): 98071.421  FAILED, KNOWN, expected 98164.988
    test 64 cosineForsytheAndoyerLambert2 (0.10%): 98071.560  FAILED, KNOWN, expected 98164.988
    test 65 cosineLaw2 (0.00%): 98164.988
    test 66 equirectangular2 (0.00%): 98165.123  FAILED, KNOWN, expected 98164.988
    test 67 euclidean2 (6.37%): 104419.458  FAILED, KNOWN, expected 98164.988
    test 68 flatLocal2 (0.10%): 98071.693  FAILED, KNOWN, expected 98164.988
    test 69 flatPolar2 (0.57%): 98725.040  FAILED, KNOWN, expected 98164.988
    test 70 thomas2 (0.10%): 98071.535  FAILED, KNOWN, expected 98164.988
    test 71 hubeny2: <function flatLocal at 0x10465ab00>

    test 72 haversine3 (0.00%): 651816.987
    test 73 vincentys3 (0.00%): 651816.987
    test 74 vincentys3 (0.00%): 651816.987
    test 75 cosineAndoyerLambert3 (0.25%): 653456.144  FAILED, KNOWN, expected 651816.987
    test 76 cosineForsytheAndoyerLambert3 (0.25%): 653456.175  FAILED, KNOWN, expected 651816.987
    test 77 cosineLaw3 (0.00%): 651816.987
    test 78 equirectangular3 (0.03%): 652041.760  FAILED, KNOWN, expected 651816.987
    test 79 euclidean3 (4.37%): 680281.470  FAILED, KNOWN, expected 651816.987
    test 80 flatLocal3 (0.29%): 653681.559  FAILED, KNOWN, expected 651816.987
    test 81 flatPolar3 (13.00%): 736534.840  FAILED, KNOWN, expected 651816.987
    test 82 thomas3 (0.25%): 653456.933  FAILED, KNOWN, expected 651816.987
    test 83 hubeny3: <function flatLocal at 0x10465ab00>

    test 84 haversine4 (0.00%): 4084985.780
    test 85 vincentys4 (0.00%): 4084985.780
    test 86 vincentys4 (0.00%): 4084985.780
    test 87 cosineAndoyerLambert4 (0.24%): 4094954.008  FAILED, KNOWN, expected 4084985.780
    test 88 cosineForsytheAndoyerLambert4 (0.24%): 4094953.639  FAILED, KNOWN, expected 4084985.780
    test 89 cosineLaw4 (0.00%): 4084985.780
    test 90 equirectangular4 (1.26%): 4136407.022  FAILED, KNOWN, expected 4084985.780
    test 91 euclidean4 (4.22%): 4257296.511  FAILED, KNOWN, expected 4084985.780
    test 92 flatLocal4 (1.51%): 4146513.247  FAILED, KNOWN, expected 4084985.780
    test 93 flatPolar4 (12.31%): 4587896.452  FAILED, KNOWN, expected 4084985.780
    test 94 thomas4 (0.24%): 4094958.301  FAILED, KNOWN, expected 4084985.780
    test 95 hubeny4: <function flatLocal at 0x10465ab00>

    test 96 haversine5 (0.00%): 9670051.606
    test 97 vincentys5 (0.00%): 9670051.606
    test 98 vincentys5 (0.00%): 9670051.606
    test 99 cosineAndoyerLambert5 (0.21%): 9690752.610  FAILED, KNOWN, expected 9670051.606
    test 100 cosineForsytheAndoyerLambert5 (0.21%): 9690746.120  FAILED, KNOWN, expected 9670051.606
    test 101 cosineLaw5 (0.00%): 9670051.606
    test 102 equirectangular5 (7.79%): 10423307.214  FAILED, KNOWN, expected 9670051.606
    test 103 euclidean5 (9.34%): 10573030.726  FAILED, KNOWN, expected 9670051.606
    test 104 flatLocal5 (8.03%): 10446503.342  FAILED, KNOWN, expected 9670051.606
    test 105 flatPolar5 (55.59%): 15045906.074  FAILED, KNOWN, expected 9670051.606
    test 106 thomas5 (0.21%): 9690767.767  FAILED, KNOWN, expected 9670051.606
    test 107 hubeny5: <function flatLocal at 0x10465ab00>

    test 108 haversine6 (0.00%): 10496496.577
    test 109 vincentys6 (0.00%): 10496496.577
    test 110 vincentys6 (0.00%): 10496496.577
    test 111 cosineAndoyerLambert6 (0.18%): 10477328.664  FAILED, KNOWN, expected 10496496.577
    test 112 cosineForsytheAndoyerLambert6 (0.18%): 10477342.084  FAILED, KNOWN, expected 10496496.577
    test 113 cosineLaw6 (0.00%): 10496496.577
    test 114 equirectangular6 (3.32%): 10844969.236  FAILED, KNOWN, expected 10496496.577
    test 115 euclidean6 (4.50%): 10968488.107  FAILED, KNOWN, expected 10496496.577
    test 116 flatLocal6 (3.07%): 10818798.605  FAILED, KNOWN, expected 10496496.577
    test 117 flatPolar6 (23.87%): 13002288.857  FAILED, KNOWN, expected 10496496.577
    test 118 thomas6 (0.18%): 10477316.498  FAILED, KNOWN, expected 10496496.577
    test 119 hubeny6: <function flatLocal at 0x10465ab00>

    test 120 haversine7 (0.00%): 8998396.669
    test 121 vincentys7 (0.00%): 8998396.669
    test 122 vincentys7 (0.00%): 8998396.669
    test 123 cosineAndoyerLambert7 (0.27%): 8974227.489  FAILED, KNOWN, expected 8998396.669
    test 124 cosineForsytheAndoyerLambert7 (0.27%): 8974238.592  FAILED, KNOWN, expected 8998396.669
    test 125 cosineLaw7 (0.00%): 8998396.669
    test 126 equirectangular7 (2.05%): 9182626.289  FAILED, KNOWN, expected 8998396.669
    test 127 euclidean7 (7.76%): 9696965.812  FAILED, KNOWN, expected 8998396.669
    test 128 flatLocal7 (1.71%): 9151831.117  FAILED, KNOWN, expected 8998396.669
    test 129 flatPolar7 (17.56%): 10578638.162  FAILED, KNOWN, expected 8998396.669
    test 130 thomas7 (0.27%): 8974216.867  FAILED, KNOWN, expected 8998396.669
    test 131 hubeny7: <function flatLocal at 0x10465ab00>

    test 132 haversine8 (0.00%): 6906867.946
    test 133 vincentys8 (0.00%): 6906867.946
    test 134 vincentys8 (0.00%): 6906867.946
    test 135 cosineAndoyerLambert8 (0.13%): 6916085.969  FAILED, KNOWN, expected 6906867.946
    test 136 cosineForsytheAndoyerLambert8 (0.13%): 6916085.333  FAILED, KNOWN, expected 6906867.946
    test 137 cosineLaw8 (0.00%): 6906867.946
    test 138 equirectangular8 (0.91%): 6969581.760  FAILED, KNOWN, expected 6906867.946
    test 139 euclidean8 (6.54%): 7358706.022  FAILED, KNOWN, expected 6906867.946
    test 140 flatLocal8 (1.04%): 6978905.097  FAILED, KNOWN, expected 6906867.946
    test 141 flatPolar8 (23.23%): 8511564.321  FAILED, KNOWN, expected 6906867.946
    test 142 thomas8 (0.13%): 6916087.828  FAILED, KNOWN, expected 6906867.946
    test 143 hubeny8: <function flatLocal at 0x10465ab00>

    test 144 haversine9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 145 vincentys9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 146 cosineAndoyerLambert9 (0.07%): 8050357.566  FAILED, KNOWN, expected 8044806.076
    test 147 cosineForsytheAndoyerLambert9 (0.07%): 8050363.635  FAILED, KNOWN, expected 8044806.076
    test 148 cosineLaw9 (0.01%): 8045325.213  FAILED, KNOWN, expected 8044806.076
    test 149 flatLocal9 (15.21%): 9268128.573  FAILED, KNOWN, expected 8044806.076
    test 150 thomas9 (0.07%): 8050370.796  FAILED, KNOWN, expected 8044806.076
    test 151 hubeny9: <function flatLocal at 0x10465ab00>

    test 152 intersection2: pygeodesy.formy
    test 153 intersection2(None): (25.980762, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
    test 154 intersection2(6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
    test 155 intersection2(-6371008.771415): (24.146108, 15.0)  FAILED, KNOWN, expected (24.284126, 15.0)
    test 156 intersection2(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84): (24.284126, 15.0)

    test 157 intersections2: pygeodesy.formy
    test 158 intersections2(None) 1: (1.0003, 1.0003), (-1.0003, -1.0003)
    test 159 intersections2(None) 2: (2.0024, 2.0024), (-2.0024, -2.0024)
    test 160 intersections2(None) 5: (5.0381, 5.0381), (-5.0381, -5.0381)
    test 161 intersections2(None) 10: (10.3062, 10.3062), (-10.3062, -10.3062)
    test 162 intersections2(None) 20: (22.494, 22.494), (-22.494, -22.494)
    test 163 intersections2(None) 30: (38.7298, 38.7298), (-38.7298, -38.7298)
    test 164 intersections2(None) 40: (62.0732, 62.0732), (-62.0732, -62.0732)
    test 165 intersections2(R_M) 1: (-1.0, -1.0003), (1.0, 1.0003)
    test 166 intersections2(R_M) 2: (-2.0, -2.0024), (2.0, 2.0024)
    test 167 intersections2(R_M) 5: (-4.9999, -5.0383), (4.9999, 5.0383)
    test 168 intersections2(R_M) 10: (-9.9976, -10.3117), (9.9976, 10.3117)
    test 169 intersections2(R_M) 20: (-19.914, -22.6761), (19.914, 22.6761)
    test 170 intersections2(R_M) 30: (-29.2059, -40.203), (29.2059, 40.203)
    test 171 intersections2(R_M) 40: (-35.5129, -68.6826), (35.5129, 68.6826)
    test 172 intersections2(WGS84) 1: (-1.0112, -0.998), (1.0112, 0.998)
    test 173 intersections2(WGS84) 2: (-2.0224, -1.9979), (2.0224, 1.9979)
    test 174 intersections2(WGS84) 5: (-5.0558, -5.0271), (5.0558, 5.0271)
    test 175 intersections2(WGS84) 10: (-10.1081, -10.2901), (10.1081, 10.2901)
    test 176 intersections2(WGS84) 20: (-20.1241, -22.6411), (20.1241, 22.6411)
    test 177 intersections2(WGS84) 30: (-29.4898, -40.1785), (29.4898, 40.1785)
    test 178 intersections2(WGS84) 40: (-35.8146, -68.7149), (35.8146, 68.7149)

    test 179 radical2: (0.26, 2.6)
    test 180 radical2: (0.74, 7.4)
    test 181 radical2: (0.5, 5.0)
    test 182 radical2: (0.5, 0.0)
    test 183 IntersectionError: distance (10.0), radius1 (5.0) or radius2 (4.0): too distant  FAILED, KNOWN, expected distance (10.0), ...

    test 184 LimitError: delta exceeds limit: equirectangular_(0.0, 0.0, 60.0, 120.0, limit=45)  FAILED, KNOWN, expected delta exceeds ...

    68 of 184 testFormy.py tests (37.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 52.530 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testFrechet.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.FrechetError from .frechet by testFrechet.py line 12
# lazily imported pygeodesy.fstr from .streprs by testFrechet.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testFrechet.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testFrechet.py line 12
# lazily imported pygeodesy.fractional from .points by testFrechet.py line 56
# lazily imported pygeodesy.frechet_ from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetCosineAndoyerLambert from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetCosineForsytheAndoyerLambert from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetCosineLaw from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetDegrees from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetDistanceTo from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetEquirectangular from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetEuclidean from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetExact from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetFlatLocal from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetFlatPolar from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetKarney from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetHaversine from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetHubeny from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetRadians from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetThomas from .frechet by testFrechet.py line 56
# lazily imported pygeodesy.FrechetVincentys from .frechet by testFrechet.py line 56

    testing testFrechet.py 23.03.27 isLazy=3
    test 1 FrechetDegrees_ (degrees): (178.5, 74, 56, 19, 5400)
    test 2 FrechetDegrees_ (degrees): (175.5, 74, 52.5, 29, 10710)
    test 3 copy(FrechetDegrees_): (<class '__main__.FrechetDegrees_'>, True)
    test 4 FrechetDegrees_.copy(): (<class '__main__.FrechetDegrees_'>, True)
    test 5 FrechetRadians_ (radians): (3.11541, 74, 56, 19, 5400)
    test 6 FrechetRadians_ (radians): (3.06305, 74, 52.5, 29, 10710)
    test 7 copy(FrechetRadians_): (<class '__main__.FrechetRadians_'>, True)
    test 8 FrechetRadians_.copy(): (<class '__main__.FrechetRadians_'>, True)
    test 9 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 10 FrechetCosineAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 11 copy(FrechetCosineAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 12 FrechetCosineAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineAndoyerLambert'>, True)
    test 13 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 149, 5400)
    test 14 FrechetCosineForsytheAndoyerLambert (radians): (2.6319, 0, 0, 208, 10710)
    test 15 copy(FrechetCosineForsytheAndoyerLambert): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 16 FrechetCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.frechet.FrechetCosineForsytheAndoyerLambert'>, True)
    test 17 FrechetCosineLaw (radians): (2.63867, 0, 0, 149, 5400)
    test 18 FrechetCosineLaw (radians): (2.63867, 0, 0, 208, 10710)
    test 19 copy(FrechetCosineLaw): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 20 FrechetCosineLaw.copy(): (<class 'pygeodesy.frechet.FrechetCosineLaw'>, True)
    test 21 FrechetEquirectangular (radians2): (7.1331, 8, 3, 138, 5400)
    test 22 FrechetEquirectangular (radians2): (7.01295, 0, 0, 208, 10710)
    test 23 copy(FrechetEquirectangular): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 24 FrechetEquirectangular.copy(): (<class 'pygeodesy.frechet.FrechetEquirectangular'>, True)
    test 25 FrechetEuclidean (radians): (2.81124, 8, 3, 138, 5400)
    test 26 FrechetEuclidean (radians): (2.74296, 0, 0, 208, 10710)
    test 27 copy(FrechetEuclidean): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 28 FrechetEuclidean.copy(): (<class 'pygeodesy.frechet.FrechetEuclidean'>, True)
    test 29 FrechetFlatLocal (radians2): (7.13778, 8, 3, 138, 5400)
    test 30 FrechetFlatLocal (radians2): (6.92262, 0, 0, 208, 10710)
    test 31 copy(FrechetFlatLocal): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 32 FrechetFlatLocal.copy(): (<class 'pygeodesy.frechet.FrechetFlatLocal'>, True)
    test 33 FrechetFlatPolar (radians): (2.65039, 0, 0, 149, 5400)
    test 34 FrechetFlatPolar (radians): (2.65039, 0, 0, 208, 10710)
    test 35 copy(FrechetFlatPolar): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 36 FrechetFlatPolar.copy(): (<class 'pygeodesy.frechet.FrechetFlatPolar'>, True)
    test 37 FrechetHaversine (radians): (2.63867, 0, 0, 149, 5400)
    test 38 FrechetHaversine (radians): (2.63867, 0, 0, 208, 10710)
    test 39 copy(FrechetHaversine): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 40 FrechetHaversine.copy(): (<class 'pygeodesy.frechet.FrechetHaversine'>, True)
    test 41 FrechetHubeny (radians2): (7.13778, 8, 3, 138, 5400)
    test 42 FrechetHubeny (radians2): (6.92262, 0, 0, 208, 10710)
    test 43 copy(FrechetHubeny): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 44 FrechetHubeny.copy(): (<class 'pygeodesy.frechet.FrechetHubeny'>, True)
    test 45 FrechetThomas (radians): (2.63187, 0, 0, 149, 5400)
    test 46 FrechetThomas (radians): (2.63187, 0, 0, 208, 10710)
    test 47 copy(FrechetThomas): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 48 FrechetThomas.copy(): (<class 'pygeodesy.frechet.FrechetThomas'>, True)
    test 49 FrechetVincentys (radians): (2.63867, 0, 0, 149, 5400)
    test 50 FrechetVincentys (radians): (2.63867, 0, 0, 208, 10710)
    test 51 copy(FrechetVincentys): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 52 FrechetVincentys.copy(): (<class 'pygeodesy.frechet.FrechetVincentys'>, True)
    test 53 FrechetKarney (degrees): (151.09508, 0, 0, 149, 5400)
    test 54 FrechetKarney (degrees): (151.09508, 0, 0, 208, 10710)
    test 55 copy(FrechetKarney): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
    test 56 FrechetKarney.copy(): (<class 'pygeodesy.frechet.FrechetKarney'>, True)
# lazily imported pygeodesy.ellipsoidalNvector by testFrechet.py line 229
# lazily imported pygeodesy.ellipsoidalVincenty by testFrechet.py line 229
# lazily imported pygeodesy.sphericalNvector by testFrechet.py line 229
# lazily imported pygeodesy.sphericalTrigonometry by testFrechet.py line 229
# lazily imported pygeodesy.ellipsoidalKarney by testFrechet.py line 234
    test 57 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 58 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalVincenty.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 59 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 60 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 61 FrechetDistanceTo (meter): (16786640.7064, 0, 0, 149, 5400)
    test 62 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalKarney.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16786640.7064, 0, 0, 149, 5400)
    test 63 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 64 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 65 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 66 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with ellipsoidalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 67 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 68 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 69 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 70 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalNvector.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 71 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 72 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 73 FrechetDistanceTo (meter): (16810959.0015, 0, 0, 149, 5400)
    test 74 FrechetDistanceTo (meter): FrechetDistanceTo.discrete: type(other) (fractional(lat=-35.0, lon=-26.0)): incompatible with sphericalTrigonometry.LatLon.distanceTo(other)  FAILED, KNOWN, expected (16810959.0015, 0, 0, 149, 5400)
    test 75 copy(FrechetDistanceTo): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 76 FrechetDistanceTo.copy(): (<class 'pygeodesy.frechet.FrechetDistanceTo'>, True)
    test 77 frechet_: (178.5, 74, 56, 19, 5400, 'test')
    test 78 [fi1]: 64.0°S, 096.0°E
    test 79 [fi2]: 41.0°S, 071.0°W
    test 80 [fi1]: LatLon_(64.0°S, 096.0°E)
    test 81 [fi2]: LatLon_(41.0°S, 071.0°W)

    5 of 81 testFrechet.py tests (6.2%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 9.531 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testFstats.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS0 from .constants by testFstats.py line 11
# lazily imported pygeodesy.Fcook from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Flinear from .fstats by testFstats.py line 11
# lazily imported pygeodesy.Fsum from .fsums by testFstats.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testFstats.py line 11

    testing testFstats.py 23.03.27 (module pygeodesy.fstats 23.03.29) isLazy=3
    test 1 Fcook: 8
    test 2 Fcook: -0.218750
    test 3 Fcook: 4.562500
    test 4 Fcook: 5.0
    test 5 Fcook: 0.656250
    test 6 Fcook: 2.0
    test 7 Fcook: 4.0
    test 8 Fcook: 1.039635

    test 9 fcopy: fstats.Fcook 'fcopy'[8]  FAILED, KNOWN, expected fstats.Fcook 'Fcook'[8]
    test 10 fcopy: 5.0
    test 11 fcopy: 2.0
    test 12 Fcook: 8

    test 13 Doubled: 16
    test 14 Doubled: -0.218750
    test 15 Doubled: 4.5625
    test 16 Doubled: 5.0
    test 17 Doubled: 0.656250
    test 18 Doubled: 2.0
    test 19 Doubled: 4.0
    test 20 Doubled: 1.340453  FAILED, KNOWN, expected 1.039635

    test 21 Empty: fstats.Fcook 'Empty'[16]  FAILED, KNOWN, expected fstats.Fcook 'Doubled'[16]
    test 22 Empty: 18
    test 23 Empty: fstats.Fcook 'Empty'[18] += None: invalid other

    test 24 Excel: 8
    test 25 Excel: -1.114187
    test 26 Excel: -0.939792
    test 27 Excel: 2.735294
    test 28 Excel: 2.50
    test 29 Excel: -0.342403
    test 30 Excel: -0.427052
    test 31 Excel: 2.061553
    test 32 Excel: 4.2
    test 33 Excel: 0.470372

    test 34 Fwelford: 8
    test 35 Fwelford: 5.0
    test 36 Fwelford: 2.0
    test 37 Fwelford: 4.0

    test 38 fcopy: fstats.Fwelford 'fcopy'[8]  FAILED, KNOWN, expected fstats.Fwelford 'Fwelford'[8]
    test 39 fcopy: 5.0
    test 40 fcopy: 2.0
    test 41 fcopy: 4.0
    test 42 fcopy: 8
    test 43 __add__: 18
    test 44 __add__: fstats.Fwelford '__add__'[18] += None: invalid other

    test 45 Flinear: 9
    test 46 Flinear: 0.988288
    test 47 Flinear: 167.682949
    test 48 Flinear: 23.422786
    test 49 __add__: 10
    test 50 __add__: 21
    test 51 __add__: fstats.Flinear '__add__'[21] += None: invalid other
    test 52 __add__: fstats.Flinear '__add__'[21] += (1, 2, 3): isodd(len(other))

    4 of 52 testFstats.py tests (7.7%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 217.030 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testFsums.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.fsum from .fsums by testFsums.py line 11
# lazily imported pygeodesy.fsum_ from .fsums by testFsums.py line 11
# lazily imported pygeodesy.ResidualError from .fsums by testFsums.py line 11

    testing testFsums.py 23.03.27 (module pygeodesy.fsums 23.03.19) isLazy=3
    test 1 sum1: 0.0  FAILED, KNOWN, expected 2.0
    test 2 fsum: 2.0
    test 3 Fsum: 2.0
    test 4 sum2: 0.0  FAILED, KNOWN, expected 4.0
    test 5 fsum: 4.0
    test 6 Fsum: 4.0
    test 7 sum3: 0.0  FAILED, KNOWN, expected 8.0
    test 8 fsum: 8.0
    test 9 Fsum: 8.0
    test 10 sum4: 0.0  FAILED, KNOWN, expected 16.0
    test 11 fsum: 16.0
    test 12 Fsum: 16.0
    test 13 sum5: 0.0  FAILED, KNOWN, expected 32.0
    test 14 fsum: 32.0
    test 15 Fsum: 32.0
    test 16 sum6: 0.0  FAILED, KNOWN, expected 64.0
    test 17 fsum: 64.0
    test 18 Fsum: 64.0
    test 19 sum7: 0.0  FAILED, KNOWN, expected 128.0
    test 20 fsum: 128.0
    test 21 Fsum: 128.0
    test 22 sum8: 0.0  FAILED, KNOWN, expected 256.0
    test 23 fsum: 256.0
    test 24 Fsum: 256.0
    test 25 sum9: 0.0  FAILED, KNOWN, expected 512.0
    test 26 fsum: 512.0
    test 27 Fsum: 512.0
    test 28 sum10: 0.0  FAILED, KNOWN, expected 1024.0
    test 29 fsum: 1024.0
    test 30 Fsum: 1024.0
    test 31 sum: 1.005000000001
    test 32 fsum: 1.005000000001
    test 33 Fsum: 1.005000000001
    test 34 fsum: 1.0000000000000002e+16
    test 35 Fsum: 1.0000000000000002e+16
    test 36 Fsum: 1.0000000000000002e+16


    test 37 fsum: 0.0006189514430196958
    test 38 sum1: 0.09983861064126062  FAILED, KNOWN, expected 0.0006189514430196958
    test 39 pow(4): fsums.Fsum 'pow'[64] (1.46766e-13, 5.26761e-30)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[278] (1.46766e-13, 1.70325e-30)
    test 40 pow(1): fsums.Fsum 'pow'[26] (0.000618951, 3.67688e-20)  FAILED, KNOWN, expected fsums.Fsum[26] (0.000618951, 3.67688e-20)
    test 41 pow(0): fsums.Fsum 'pow'[26] (1.0, 0)
    test 42 ceil: True
    test 43 floor: True
    test 44 divmod: fsums.Fsum[32] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 45 residual: 0
    test 46 is_exact: True
    test 47 Fsum: 0.0006189514430196958
    test 48 Fsum: 0.0006189514430196958

    test 49 fsum: 0.0001706689233624907
    test 50 sum2: -8.008206170431967  FAILED, KNOWN, expected 0.0001706689233624907
    test 51 pow(4): fsums.Fsum 'pow'[54] (8.48433e-16, -1.18237e-32)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[101] (8.48433e-16, 5.49924e-33)
    test 52 pow(1): fsums.Fsum 'pow'[32] (0.000170669, 2.6116e-21)  FAILED, KNOWN, expected fsums.Fsum[32] (0.000170669, 2.6116e-21)
    test 53 pow(0): fsums.Fsum 'pow'[32] (1.0, 0)
    test 54 ceil: True
    test 55 floor: True
    test 56 divmod: fsums.Fsum[35] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 57 residual: 0
    test 58 is_exact: True
    test 59 Fsum: 0.0001706689233624907
    test 60 Fsum: 0.0001706689233624907

    test 61 fsum: -6.045554234011299e-08
    test 62 sum3: 7.0  FAILED, KNOWN, expected -6.045554234011299e-08
    test 63 pow(4): fsums.Fsum 'pow'[66] (1.33581e-29, -5.20509e-46)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[158] (1.33581e-29, 1.91991e-46)
    test 64 pow(1): fsums.Fsum 'pow'[38] (-6.04555e-08, 4.22542e-24)  FAILED, KNOWN, expected fsums.Fsum[38] (-6.04555e-08, 4.22542e-24)
    test 65 pow(0): fsums.Fsum 'pow'[38] (1.0, 0)
    test 66 ceil: True
    test 67 floor: True
    test 68 divmod: fsums.Fsum[43] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 69 residual: 0
    test 70 is_exact: True
    test 71 Fsum: -6.045554234011299e-08
    test 72 Fsum: -6.045554234011299e-08

    test 73 fsum: 3.935820200253765
    test 74 sum4: 7.0  FAILED, KNOWN, expected 3.935820200253765
    test 75 pow(4): fsums.Fsum 'pow'[73] (239.961, 2.367e-15)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[254] (239.961, 1.91097e-15)
    test 76 pow(1): fsums.Fsum 'pow'[44] (3.93582, -1.06837e-16)  FAILED, KNOWN, expected fsums.Fsum[44] (3.93582, -1.06837e-16)
    test 77 pow(0): fsums.Fsum 'pow'[44] (1.0, 0)
    test 78 ceil: True
    test 79 floor: True
    test 80 divmod: fsums.Fsum[50] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 81 residual: 0
    test 82 is_exact: True
    test 83 Fsum: 3.935820200253765
    test 84 Fsum: 3.935820200253765

    test 85 fsum: 0.24155948761290824
    test 86 sum5: 0.0  FAILED, KNOWN, expected 0.24155948761290824
    test 87 pow(4): fsums.Fsum 'pow'[65] (0.00340484, -1.52588e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[135] (0.00340484, -1.52588e-19)
    test 88 pow(1): fsums.Fsum 'pow'[50] (0.241559, -2.70637e-18)  FAILED, KNOWN, expected fsums.Fsum[50] (0.241559, -2.70637e-18)
    test 89 pow(0): fsums.Fsum 'pow'[50] (1.0, 0)
    test 90 ceil: True
    test 91 floor: True
    test 92 divmod: fsums.Fsum[54] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 93 residual: 0
    test 94 is_exact: True
    test 95 Fsum: 0.24155948761290824
    test 96 Fsum: 0.24155948761290824

    test 97 fsum: 0.23246716191589017
    test 98 sum6: -3.885337784451458e+84  FAILED, KNOWN, expected 0.23246716191589017
    test 99 pow(4): fsums.Fsum 'pow'[95] (0.00292043, -8.32061e-20)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[246] (0.00292043, -8.32061e-20)
    test 100 pow(1): fsums.Fsum 'pow'[56] (0.232467, -1.65581e-18)  FAILED, KNOWN, expected fsums.Fsum[56] (0.232467, -1.65581e-18)
    test 101 pow(0): fsums.Fsum 'pow'[56] (1.0, 0)
    test 102 ceil: True
    test 103 floor: True
    test 104 divmod: fsums.Fsum[61] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 105 residual: 0
    test 106 is_exact: True
    test 107 Fsum: 0.23246716191589017
    test 108 Fsum: 0.23246716191589017

    test 109 fsum: -0.9405257729075945
    test 110 sum7: -3.885337784451458e+84  FAILED, KNOWN, expected -0.9405257729075945
    test 111 pow(4): fsums.Fsum 'pow'[96] (0.782497, 4.29788e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[186] (0.782497, -5.52303e-17)
    test 112 pow(1): fsums.Fsum 'pow'[62] (-0.940526, 4.61068e-17)  FAILED, KNOWN, expected fsums.Fsum[62] (-0.940526, 4.61068e-17)
    test 113 pow(0): fsums.Fsum 'pow'[62] (1.0, 0)
    test 114 ceil: True
    test 115 floor: True
    test 116 divmod: fsums.Fsum[67] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 117 residual: 0
    test 118 is_exact: True
    test 119 Fsum: -0.9405257729075945
    test 120 Fsum: -0.9405257729075945

    test 121 fsum: 0.08709320218260294
    test 122 sum8: 13.954756368838847  FAILED, KNOWN, expected 0.08709320218260294
    test 123 pow(4): fsums.Fsum 'pow'[94] (5.75357e-05, 2.51008e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[260] (5.75357e-05, 2.24939e-21)
    test 124 pow(1): fsums.Fsum 'pow'[68] (0.0870932, -3.7359e-18)  FAILED, KNOWN, expected fsums.Fsum[68] (0.0870932, -3.7359e-18)
    test 125 pow(0): fsums.Fsum 'pow'[68] (1.0, 0)
    test 126 ceil: True
    test 127 floor: True
    test 128 divmod: fsums.Fsum[74] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 129 residual: 0
    test 130 is_exact: True
    test 131 Fsum: 0.08709320218260294
    test 132 Fsum: 0.08709320218260294

    test 133 fsum: -0.32809421518721044
    test 134 sum9: -3.885337784451458e+84  FAILED, KNOWN, expected -0.32809421518721044
    test 135 pow(4): fsums.Fsum 'pow'[92] (0.0115876, -7.31242e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[143] (0.0115876, -7.31242e-19)
    test 136 pow(1): fsums.Fsum 'pow'[74] (-0.328094, 5.17614e-18)  FAILED, KNOWN, expected fsums.Fsum[74] (-0.328094, 5.17614e-18)
    test 137 pow(0): fsums.Fsum 'pow'[74] (1.0, 0)
    test 138 ceil: True
    test 139 floor: True
    test 140 divmod: fsums.Fsum[78] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 141 residual: 0
    test 142 is_exact: True
    test 143 Fsum: -0.32809421518721044
    test 144 Fsum: -0.32809421518721044

    test 145 fsum: -11.025916260775736
    test 146 sum10: -7.943508590091869  FAILED, KNOWN, expected -11.025916260775736
    test 147 pow(4): fsums.Fsum 'pow'[114] (14779.5, -2.4252e-13)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[265] (14779.5, 7.97092e-13)
    test 148 pow(1): fsums.Fsum 'pow'[80] (-11.0259, 8.37904e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-11.0259, 8.37904e-16)
    test 149 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 150 ceil: True
    test 151 floor: True
    test 152 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 153 residual: 0
    test 154 is_exact: True
    test 155 Fsum: -11.025916260775736
    test 156 Fsum: -11.025916260775736

    test 157 fsum: 56.64351710660262
    test 158 sum11: -3.885337784451458e+84  FAILED, KNOWN, expected 56.64351710660262
    test 159 pow(4): fsums.Fsum 'pow'[103] (1.02944e+07, -6.96208e-10)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (1.02944e+07, -4.82106e-10)
    test 160 pow(1): fsums.Fsum 'pow'[80] (56.6435, 1.60454e-15)  FAILED, KNOWN, expected fsums.Fsum[80] (56.6435, 1.60454e-15)
    test 161 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 162 ceil: True
    test 163 floor: True
    test 164 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 165 residual: 0
    test 166 is_exact: True
    test 167 Fsum: 56.64351710660262
    test 168 Fsum: 56.64351710660262

    test 169 fsum: -1.2746322697024011e-06
    test 170 sum12: 0.0  FAILED, KNOWN, expected -1.2746322697024011e-06
    test 171 pow(4): fsums.Fsum 'pow'[90] (2.63961e-24, 1.36113e-40)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[212] (2.63961e-24, -6.43756e-41)
    test 172 pow(1): fsums.Fsum 'pow'[80] (-1.27463e-06, 3.228e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.27463e-06, 3.228e-24)
    test 173 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 174 ceil: True
    test 175 floor: True
    test 176 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 177 residual: 0
    test 178 is_exact: True
    test 179 Fsum: -1.2746322697024011e-06
    test 180 Fsum: -1.2746322697024011e-06

    test 181 fsum: 8.499400031221518e-07
    test 182 sum13: 7.0  FAILED, KNOWN, expected 8.499400031221518e-07
    test 183 pow(4): fsums.Fsum 'pow'[109] (5.21859e-25, -3.10328e-42)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[240] (5.21859e-25, 9.84661e-42)
    test 184 pow(1): fsums.Fsum 'pow'[80] (8.4994e-07, -2.36424e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (8.4994e-07, -2.36424e-23)
    test 185 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 186 ceil: True
    test 187 floor: True
    test 188 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 189 residual: 0
    test 190 is_exact: True
    test 191 Fsum: 8.499400031221518e-07
    test 192 Fsum: 8.499400031221518e-07

    test 193 fsum: -0.00013243518771052505
    test 194 sum14: 0.0  FAILED, KNOWN, expected -0.00013243518771052505
    test 195 pow(4): fsums.Fsum 'pow'[87] (3.07619e-16, -9.3718e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[113] (3.07619e-16, -9.3718e-33)
    test 196 pow(1): fsums.Fsum 'pow'[80] (-0.000132435, 1.00868e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000132435, 1.00868e-21)
    test 197 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 198 ceil: True
    test 199 floor: True
    test 200 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 201 residual: 0
    test 202 is_exact: True
    test 203 Fsum: -0.00013243518771052505
    test 204 Fsum: -0.00013243518771052505

    test 205 fsum: -0.016888448032409648
    test 206 sum15: -3.885337784451458e+84  FAILED, KNOWN, expected -0.016888448032409648
    test 207 pow(4): fsums.Fsum 'pow'[103] (8.13503e-08, 1.99851e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[146] (8.13503e-08, -3.52483e-24)
    test 208 pow(1): fsums.Fsum 'pow'[80] (-0.0168884, 1.08145e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0168884, 1.08145e-18)
    test 209 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 210 ceil: True
    test 211 floor: True
    test 212 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 213 residual: 0
    test 214 is_exact: True
    test 215 Fsum: -0.016888448032409648
    test 216 Fsum: -0.016888448032409648

    test 217 fsum: -0.011242433012732641
    test 218 sum16: 3.885337784451458e+84  FAILED, KNOWN, expected -0.011242433012732641
    test 219 pow(4): fsums.Fsum 'pow'[101] (1.5975e-08, 7.87756e-26)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[155] (1.5975e-08, 4.16608e-25)
    test 220 pow(1): fsums.Fsum 'pow'[80] (-0.0112424, 2.51284e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0112424, 2.51284e-19)
    test 221 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 222 ceil: True
    test 223 floor: True
    test 224 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 225 residual: 0
    test 226 is_exact: True
    test 227 Fsum: -0.011242433012732641
    test 228 Fsum: -0.011242433012732641

    test 229 fsum: -8.638969204445709e-05
    test 230 sum17: -3.885337784451458e+84  FAILED, KNOWN, expected -8.638969204445709e-05
    test 231 pow(4): fsums.Fsum 'pow'[102] (5.5699e-17, 4.92483e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[172] (5.5699e-17, 4.92483e-33)
    test 232 pow(1): fsums.Fsum 'pow'[80] (-8.63897e-05, -1.90961e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-8.63897e-05, -1.90961e-21)
    test 233 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 234 ceil: True
    test 235 floor: True
    test 236 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 237 residual: 0
    test 238 is_exact: True
    test 239 Fsum: -8.638969204445709e-05
    test 240 Fsum: -8.638969204445709e-05

    test 241 fsum: -7.663331418997498e-05
    test 242 sum18: -3.885337784451458e+84  FAILED, KNOWN, expected -7.663331418997498e-05
    test 243 pow(4): fsums.Fsum 'pow'[90] (3.44882e-17, 2.90752e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[165] (3.44882e-17, -9.61475e-34)
    test 244 pow(1): fsums.Fsum 'pow'[80] (-7.66333e-05, -1.61514e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-7.66333e-05, -1.61514e-21)
    test 245 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 246 ceil: True
    test 247 floor: True
    test 248 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 249 residual: 0
    test 250 is_exact: True
    test 251 Fsum: -7.663331418997498e-05
    test 252 Fsum: -7.663331418997498e-05

    test 253 fsum: -0.03624424244886179
    test 254 sum19: 3.885337784451458e+84  FAILED, KNOWN, expected -0.03624424244886179
    test 255 pow(4): fsums.Fsum 'pow'[93] (1.72566e-06, -9.58254e-23)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[144] (1.72566e-06, 1.15718e-23)
    test 256 pow(1): fsums.Fsum 'pow'[80] (-0.0362442, 2.66136e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0362442, 2.66136e-18)
    test 257 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 258 ceil: True
    test 259 floor: True
    test 260 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 261 residual: 0
    test 262 is_exact: True
    test 263 Fsum: -0.03624424244886179
    test 264 Fsum: -0.03624424244886179

    test 265 fsum: -5.392336055078729
    test 266 sum20: -3.885337784451458e+84  FAILED, KNOWN, expected -5.392336055078729
    test 267 pow(4): fsums.Fsum 'pow'[113] (845.489, 2.53739e-14)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[208] (845.489, 3.57575e-14)
    test 268 pow(1): fsums.Fsum 'pow'[80] (-5.39234, 2.88965e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.39234, 2.88965e-16)
    test 269 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 270 ceil: True
    test 271 floor: True
    test 272 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 273 residual: 0
    test 274 is_exact: True
    test 275 Fsum: -5.392336055078729
    test 276 Fsum: -5.392336055078729

    test 277 fsum: -0.002617640876717621
    test 278 sum21: 3.885337784451458e+84  FAILED, KNOWN, expected -0.002617640876717621
    test 279 pow(4): fsums.Fsum 'pow'[92] (4.69505e-11, 7.55862e-28)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[136] (4.69505e-11, 1.4143e-27)
    test 280 pow(1): fsums.Fsum 'pow'[80] (-0.00261764, 1.51258e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00261764, 1.51258e-19)
    test 281 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 282 ceil: True
    test 283 floor: True
    test 284 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 285 residual: 0
    test 286 is_exact: True
    test 287 Fsum: -0.002617640876717621
    test 288 Fsum: -0.002617640876717621

    test 289 fsum: -3.632324608808226e-07
    test 290 sum22: -3.885337784451458e+84  FAILED, KNOWN, expected -3.632324608808226e-07
    test 291 pow(4): fsums.Fsum 'pow'[91] (1.74076e-26, -1.01769e-42)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[175] (1.74076e-26, -1.01769e-42)
    test 292 pow(1): fsums.Fsum 'pow'[80] (-3.63232e-07, 5.30888e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.63232e-07, 5.30888e-24)
    test 293 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 294 ceil: True
    test 295 floor: True
    test 296 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 297 residual: 0
    test 298 is_exact: True
    test 299 Fsum: -3.632324608808226e-07
    test 300 Fsum: -3.632324608808226e-07

    test 301 fsum: 1.468361590214191e-08
    test 302 sum23: 3.885337784451458e+84  FAILED, KNOWN, expected 1.468361590214191e-08
    test 303 pow(4): fsums.Fsum 'pow'[100] (4.64871e-32, 9.94965e-49)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[143] (4.64871e-32, 1.18667e-48)
    test 304 pow(1): fsums.Fsum 'pow'[80] (1.46836e-08, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (1.46836e-08, -4.81387e-25)
    test 305 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 306 ceil: True
    test 307 floor: True
    test 308 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 309 residual: 0
    test 310 is_exact: True
    test 311 Fsum: 1.468361590214191e-08
    test 312 Fsum: 1.468361590214191e-08

    test 313 fsum: 4.4551674596187214e-05
    test 314 sum24: -7.207871221771664  FAILED, KNOWN, expected 4.4551674596187214e-05
    test 315 pow(4): fsums.Fsum 'pow'[117] (3.93964e-18, 2.03913e-34)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[374] (3.93964e-18, 2.70646e-34)
    test 316 pow(1): fsums.Fsum 'pow'[80] (4.45517e-05, -6.85387e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (4.45517e-05, -6.85387e-22)
    test 317 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 318 ceil: True
    test 319 floor: True
    test 320 divmod: fsums.Fsum[87] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 321 residual: 0
    test 322 is_exact: True
    test 323 Fsum: 4.4551674596187214e-05
    test 324 Fsum: 4.4551674596187214e-05

    test 325 fsum: 1.2474625194311257e-14
    test 326 sum25: 7.0  FAILED, KNOWN, expected 1.2474625194311257e-14
    test 327 pow(4): fsums.Fsum 'pow'[94] (2.42164e-56, -4.73317e-73)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[137] (2.42164e-56, -5.08918e-73)
    test 328 pow(1): fsums.Fsum 'pow'[80] (1.24746e-14, -6.49255e-31)  FAILED, KNOWN, expected fsums.Fsum[80] (1.24746e-14, -6.49255e-31)
    test 329 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 330 ceil: True
    test 331 floor: True
    test 332 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 333 residual: 0
    test 334 is_exact: True
    test 335 Fsum: 1.2474625194311257e-14
    test 336 Fsum: 1.2474625194311257e-14

    test 337 fsum: -7.426029638752586e-05
    test 338 sum26: 3.885337784451458e+84  FAILED, KNOWN, expected -7.426029638752586e-05
    test 339 pow(4): fsums.Fsum 'pow'[112] (3.04107e-17, -1.69762e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[296] (3.04107e-17, 4.09829e-34)
    test 340 pow(1): fsums.Fsum 'pow'[80] (-7.42603e-05, -4.55907e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-7.42603e-05, -4.55907e-21)
    test 341 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 342 ceil: True
    test 343 floor: True
    test 344 divmod: fsums.Fsum[87] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 345 residual: 0
    test 346 is_exact: True
    test 347 Fsum: -7.426029638752586e-05
    test 348 Fsum: -7.426029638752586e-05

    test 349 fsum: 1.9502048876628035e-07
    test 350 sum27: -3.885337784451458e+84  FAILED, KNOWN, expected 1.9502048876628035e-07
    test 351 pow(4): fsums.Fsum 'pow'[97] (1.44651e-27, 8.38838e-44)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[131] (1.44651e-27, 8.38838e-44)
    test 352 pow(1): fsums.Fsum 'pow'[80] (1.9502e-07, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (1.9502e-07, 2.82734e-24)
    test 353 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 354 ceil: True
    test 355 floor: True
    test 356 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 357 residual: 0
    test 358 is_exact: True
    test 359 Fsum: 1.9502048876628035e-07
    test 360 Fsum: 1.9502048876628035e-07

    test 361 fsum: 1.6030906591208091e-13
    test 362 sum28: 3.885337784451458e+84  FAILED, KNOWN, expected 1.6030906591208091e-13
    test 363 pow(4): fsums.Fsum 'pow'[91] (6.60438e-52, -2.82068e-68)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (6.60438e-52, -2.86384e-68)
    test 364 pow(1): fsums.Fsum 'pow'[80] (1.60309e-13, 7.23935e-30)  FAILED, KNOWN, expected fsums.Fsum[80] (1.60309e-13, 7.23935e-30)
    test 365 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 366 ceil: True
    test 367 floor: True
    test 368 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 369 residual: 0
    test 370 is_exact: True
    test 371 Fsum: 1.6030906591208091e-13
    test 372 Fsum: 1.6030906591208091e-13

    test 373 fsum: 0.041049644259653864
    test 374 sum29: 3.885337784451458e+84  FAILED, KNOWN, expected 0.041049644259653864
    test 375 pow(4): fsums.Fsum 'pow'[114] (2.83947e-06, 1.211e-22)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[270] (2.83947e-06, 1.211e-22)
    test 376 pow(1): fsums.Fsum 'pow'[80] (0.0410496, 4.37681e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0410496, 4.37681e-19)
    test 377 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 378 ceil: True
    test 379 floor: True
    test 380 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 381 residual: 0
    test 382 is_exact: True
    test 383 Fsum: 0.041049644259653864
    test 384 Fsum: 0.041049644259653864

    test 385 fsum: -8.705834833508784e-10
    test 386 sum30: 3.885337784451458e+84  FAILED, KNOWN, expected -8.705834833508784e-10
    test 387 pow(4): fsums.Fsum 'pow'[98] (5.74436e-37, 3.75195e-53)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[134] (5.74436e-37, -3.4409e-53)
    test 388 pow(1): fsums.Fsum 'pow'[80] (-8.70583e-10, 3.17636e-26)  FAILED, KNOWN, expected fsums.Fsum[80] (-8.70583e-10, 3.17636e-26)
    test 389 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 390 ceil: True
    test 391 floor: True
    test 392 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 393 residual: 0
    test 394 is_exact: True
    test 395 Fsum: -8.705834833508784e-10
    test 396 Fsum: -8.705834833508784e-10

    test 397 fsum: -2.3352534249900304e-10
    test 398 sum31: 3.885337784451458e+84  FAILED, KNOWN, expected -2.3352534249900304e-10
    test 399 pow(4): fsums.Fsum 'pow'[96] (2.97397e-39, 1.59715e-55)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[134] (2.97397e-39, 1.63615e-55)
    test 400 pow(1): fsums.Fsum 'pow'[80] (-2.33525e-10, -1.60981e-26)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.33525e-10, -1.60981e-26)
    test 401 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 402 ceil: True
    test 403 floor: True
    test 404 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 405 residual: 0
    test 406 is_exact: True
    test 407 Fsum: -2.3352534249900304e-10
    test 408 Fsum: -2.3352534249900304e-10

    test 409 fsum: -7.858710361252404e-06
    test 410 sum32: 3.885337784451458e+84  FAILED, KNOWN, expected -7.858710361252404e-06
    test 411 pow(4): fsums.Fsum 'pow'[90] (3.81421e-21, 1.37627e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[106] (3.81421e-21, 9.1723e-38)
    test 412 pow(1): fsums.Fsum 'pow'[80] (-7.85871e-06, 7.51426e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-7.85871e-06, 7.51426e-22)
    test 413 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 414 ceil: True
    test 415 floor: True
    test 416 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 417 residual: 0
    test 418 is_exact: True
    test 419 Fsum: -7.858710361252404e-06
    test 420 Fsum: -7.858710361252404e-06

    test 421 fsum: -0.0007352434334438688
    test 422 sum33: 3.885337784451458e+84  FAILED, KNOWN, expected -0.0007352434334438688
    test 423 pow(4): fsums.Fsum 'pow'[87] (2.9223e-13, -3.84224e-30)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[110] (2.9223e-13, 8.63366e-30)
    test 424 pow(1): fsums.Fsum 'pow'[80] (-0.000735243, -2.93393e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000735243, -2.93393e-20)
    test 425 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 426 ceil: True
    test 427 floor: True
    test 428 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 429 residual: 0
    test 430 is_exact: True
    test 431 Fsum: -0.0007352434334438688
    test 432 Fsum: -0.0007352434334438688

    test 433 fsum: 0.07419249165017798
    test 434 sum34: 3.885337784451458e+84  FAILED, KNOWN, expected 0.07419249165017798
    test 435 pow(4): fsums.Fsum 'pow'[116] (3.02998e-05, -2.27254e-22)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[285] (3.02998e-05, 5.05436e-22)
    test 436 pow(1): fsums.Fsum 'pow'[80] (0.0741925, -6.85757e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0741925, -6.85757e-18)
    test 437 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 438 ceil: True
    test 439 floor: True
    test 440 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 441 residual: 0
    test 442 is_exact: True
    test 443 Fsum: 0.07419249165017798
    test 444 Fsum: 0.07419249165017798

    test 445 fsum: 0.07161133951506751
    test 446 sum35: 0.0  FAILED, KNOWN, expected 0.07161133951506751
    test 447 pow(4): fsums.Fsum 'pow'[95] (2.62983e-05, 1.57176e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[144] (2.62983e-05, -7.56511e-22)
    test 448 pow(1): fsums.Fsum 'pow'[80] (0.0716113, 4.81952e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0716113, 4.81952e-18)
    test 449 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 450 ceil: True
    test 451 floor: True
    test 452 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 453 residual: 0
    test 454 is_exact: True
    test 455 Fsum: 0.07161133951506751
    test 456 Fsum: 0.07161133951506751

    test 457 fsum: -9.744728356524548e-06
    test 458 sum36: 0.0  FAILED, KNOWN, expected -9.744728356524548e-06
    test 459 pow(4): fsums.Fsum 'pow'[90] (9.01735e-21, 5.69087e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[136] (9.01735e-21, 2.9178e-37)
    test 460 pow(1): fsums.Fsum 'pow'[80] (-9.74473e-06, -4.10411e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-9.74473e-06, -4.10411e-22)
    test 461 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 462 ceil: True
    test 463 floor: True
    test 464 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 465 residual: 0
    test 466 is_exact: True
    test 467 Fsum: -9.744728356524548e-06
    test 468 Fsum: -9.744728356524548e-06

    test 469 fsum: -0.7439488058225643
    test 470 sum37: -3.885337784451458e+84  FAILED, KNOWN, expected -0.7439488058225643
    test 471 pow(4): fsums.Fsum 'pow'[97] (0.306318, -6.49817e-18)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[143] (0.306318, 7.71553e-18)
    test 472 pow(1): fsums.Fsum 'pow'[80] (-0.743949, -2.97592e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.743949, -2.97592e-17)
    test 473 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 474 ceil: True
    test 475 floor: True
    test 476 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 477 residual: 0
    test 478 is_exact: True
    test 479 Fsum: -0.7439488058225643
    test 480 Fsum: -0.7439488058225643

    test 481 fsum: -3.740933563142125e-05
    test 482 sum38: -3.885337784451458e+84  FAILED, KNOWN, expected -3.740933563142125e-05
    test 483 pow(4): fsums.Fsum 'pow'[100] (1.95848e-18, 1.86438e-34)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (1.95848e-18, 1.08152e-34)
    test 484 pow(1): fsums.Fsum 'pow'[80] (-3.74093e-05, -1.06837e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.74093e-05, -1.06837e-21)
    test 485 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 486 ceil: True
    test 487 floor: True
    test 488 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 489 residual: 0
    test 490 is_exact: True
    test 491 Fsum: -3.740933563142125e-05
    test 492 Fsum: -3.740933563142125e-05

    test 493 fsum: -0.7226947778947966
    test 494 sum39: 3.885337784451458e+84  FAILED, KNOWN, expected -0.7226947778947966
    test 495 pow(4): fsums.Fsum 'pow'[107] (0.272784, -6.39678e-18)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (0.272784, -8.87121e-18)
    test 496 pow(1): fsums.Fsum 'pow'[80] (-0.722695, 4.42814e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.722695, 4.42814e-17)
    test 497 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 498 ceil: True
    test 499 floor: True
    test 500 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 501 residual: 0
    test 502 is_exact: True
    test 503 Fsum: -0.7226947778947966
    test 504 Fsum: -0.7226947778947966

    test 505 fsum: 6.653120339247635e-09
    test 506 sum40: -1.0000000000000007e-20  FAILED, KNOWN, expected 6.653120339247635e-09
    test 507 pow(4): fsums.Fsum 'pow'[87] (1.9593e-33, 1.5187e-49)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[102] (1.9593e-33, 1.5187e-49)
    test 508 pow(1): fsums.Fsum 'pow'[80] (6.65312e-09, -1.61501e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (6.65312e-09, -1.61501e-25)
    test 509 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 510 ceil: True
    test 511 floor: True
    test 512 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 513 residual: 0
    test 514 is_exact: True
    test 515 Fsum: 6.653120339247635e-09
    test 516 Fsum: 6.653120339247635e-09

    test 517 fsum: -210.74069684472167
    test 518 sum41: 0.0  FAILED, KNOWN, expected -210.74069684472167
    test 519 pow(4): fsums.Fsum 'pow'[93] (1.97239e+09, -1.15165e-07)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[165] (1.97239e+09, -1.15165e-07)
    test 520 pow(1): fsums.Fsum 'pow'[80] (-210.741, -3.29225e-15)  FAILED, KNOWN, expected fsums.Fsum[80] (-210.741, -3.29225e-15)
    test 521 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 522 ceil: True
    test 523 floor: True
    test 524 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 525 residual: 0
    test 526 is_exact: True
    test 527 Fsum: -210.74069684472167
    test 528 Fsum: -210.74069684472167

    test 529 fsum: 0.3644399781126283
    test 530 sum42: 3.885337784451458e+84  FAILED, KNOWN, expected 0.3644399781126283
    test 531 pow(4): fsums.Fsum 'pow'[94] (0.0176402, -9.86105e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[125] (0.0176402, -1.20306e-18)
    test 532 pow(1): fsums.Fsum 'pow'[80] (0.36444, -2.52535e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.36444, -2.52535e-17)
    test 533 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 534 ceil: True
    test 535 floor: True
    test 536 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 537 residual: 0
    test 538 is_exact: True
    test 539 Fsum: 0.3644399781126283
    test 540 Fsum: 0.3644399781126283

    test 541 fsum: -0.0003254104807187381
    test 542 sum43: -3.885337784451458e+84  FAILED, KNOWN, expected -0.0003254104807187381
    test 543 pow(4): fsums.Fsum 'pow'[109] (1.12131e-14, 4.88499e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[192] (1.12131e-14, 4.88499e-31)
    test 544 pow(1): fsums.Fsum 'pow'[80] (-0.00032541, -3.54412e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00032541, -3.54412e-21)
    test 545 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 546 ceil: True
    test 547 floor: True
    test 548 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 549 residual: 0
    test 550 is_exact: True
    test 551 Fsum: -0.0003254104807187381
    test 552 Fsum: -0.0003254104807187381

    test 553 fsum: -0.0005681600834553906
    test 554 sum44: 3.885337784451458e+84  FAILED, KNOWN, expected -0.0005681600834553906
    test 555 pow(4): fsums.Fsum 'pow'[89] (1.04204e-13, -6.65012e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[136] (1.04204e-13, -4.96075e-30)
    test 556 pow(1): fsums.Fsum 'pow'[80] (-0.00056816, -1.90595e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00056816, -1.90595e-20)
    test 557 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 558 ceil: True
    test 559 floor: True
    test 560 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 561 residual: 0
    test 562 is_exact: True
    test 563 Fsum: -0.0005681600834553906
    test 564 Fsum: -0.0005681600834553906

    test 565 fsum: -0.009404104278785911
    test 566 sum45: 3.885337784451458e+84  FAILED, KNOWN, expected -0.009404104278785911
    test 567 pow(4): fsums.Fsum 'pow'[119] (7.82113e-09, 6.54477e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[362] (7.82113e-09, 2.08211e-27)
    test 568 pow(1): fsums.Fsum 'pow'[80] (-0.0094041, -1.63996e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0094041, -1.63996e-19)
    test 569 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 570 ceil: True
    test 571 floor: True
    test 572 divmod: fsums.Fsum[87] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 573 residual: 0
    test 574 is_exact: True
    test 575 Fsum: -0.009404104278785911
    test 576 Fsum: -0.009404104278785911

    test 577 fsum: -0.002209378714150456
    test 578 sum46: 3.885337784451458e+84  FAILED, KNOWN, expected -0.002209378714150456
    test 579 pow(4): fsums.Fsum 'pow'[117] (2.38276e-11, -1.25402e-27)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[265] (2.38276e-11, -7.26148e-28)
    test 580 pow(1): fsums.Fsum 'pow'[80] (-0.00220938, 5.73976e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00220938, 5.73976e-20)
    test 581 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 582 ceil: True
    test 583 floor: True
    test 584 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 585 residual: 0
    test 586 is_exact: True
    test 587 Fsum: -0.002209378714150456
    test 588 Fsum: -0.002209378714150456

    test 589 fsum: 0.010696031393268553
    test 590 sum47: 3.885337784451458e+84  FAILED, KNOWN, expected 0.010696031393268553
    test 591 pow(4): fsums.Fsum 'pow'[95] (1.30885e-08, -4.62231e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[131] (1.30885e-08, -3.58348e-25)
    test 592 pow(1): fsums.Fsum 'pow'[80] (0.010696, -3.89976e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.010696, -3.89976e-19)
    test 593 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 594 ceil: True
    test 595 floor: True
    test 596 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 597 residual: 0
    test 598 is_exact: True
    test 599 Fsum: 0.010696031393268553
    test 600 Fsum: 0.010696031393268553

    test 601 fsum: -0.005100265566538264
    test 602 sum48: 3.885337784451458e+84  FAILED, KNOWN, expected -0.005100265566538264
    test 603 pow(4): fsums.Fsum 'pow'[92] (6.76661e-10, 5.13211e-26)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[136] (6.76661e-10, -2.66879e-26)
    test 604 pow(1): fsums.Fsum 'pow'[80] (-0.00510027, -3.81944e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.00510027, -3.81944e-19)
    test 605 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 606 ceil: True
    test 607 floor: True
    test 608 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 609 residual: 0
    test 610 is_exact: True
    test 611 Fsum: -0.005100265566538264
    test 612 Fsum: -0.005100265566538264

    test 613 fsum: -0.00030267614889257247
    test 614 sum49: 3.885337784451458e+84  FAILED, KNOWN, expected -0.00030267614889257247
    test 615 pow(4): fsums.Fsum 'pow'[119] (8.39291e-15, -7.14904e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[332] (8.39291e-15, -2.71047e-31)
    test 616 pow(1): fsums.Fsum 'pow'[80] (-0.000302676, -2.70278e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000302676, -2.70278e-20)
    test 617 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 618 ceil: True
    test 619 floor: True
    test 620 divmod: fsums.Fsum[87] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 621 residual: 0
    test 622 is_exact: True
    test 623 Fsum: -0.00030267614889257247
    test 624 Fsum: -0.00030267614889257247

    test 625 fsum: 9.25040632712679e-12
    test 626 sum50: 3.885337784451458e+84  FAILED, KNOWN, expected 9.25040632712679e-12
    test 627 pow(4): fsums.Fsum 'pow'[84] (7.32223e-45, 2.58563e-61)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[104] (7.32223e-45, 4.98558e-61)
    test 628 pow(1): fsums.Fsum 'pow'[80] (9.25041e-12, -5.48119e-28)  FAILED, KNOWN, expected fsums.Fsum[80] (9.25041e-12, -5.48119e-28)
    test 629 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 630 ceil: True
    test 631 floor: True
    test 632 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 633 residual: 0
    test 634 is_exact: True
    test 635 Fsum: 9.25040632712679e-12
    test 636 Fsum: 9.25040632712679e-12

    test 637 fsum: -4.8978186794166904e-05
    test 638 sum51: -3.885337784451458e+84  FAILED, KNOWN, expected -4.8978186794166904e-05
    test 639 pow(4): fsums.Fsum 'pow'[110] (5.75454e-18, 1.10942e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[204] (5.75454e-18, -1.80631e-34)
    test 640 pow(1): fsums.Fsum 'pow'[80] (-4.89782e-05, 1.21866e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-4.89782e-05, 1.21866e-22)
    test 641 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 642 ceil: True
    test 643 floor: True
    test 644 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 645 residual: 0
    test 646 is_exact: True
    test 647 Fsum: -4.8978186794166904e-05
    test 648 Fsum: -4.8978186794166904e-05

    test 649 fsum: 0.7343118109231686
    test 650 sum52: 3.885337784451458e+84  FAILED, KNOWN, expected 0.7343118109231686
    test 651 pow(4): fsums.Fsum 'pow'[97] (0.290752, -2.44022e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[212] (0.290752, -9.65354e-18)
    test 652 pow(1): fsums.Fsum 'pow'[80] (0.734312, 1.96419e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.734312, 1.96419e-17)
    test 653 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 654 ceil: True
    test 655 floor: True
    test 656 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 657 residual: 0
    test 658 is_exact: True
    test 659 Fsum: 0.7343118109231686
    test 660 Fsum: 0.7343118109231686

    test 661 fsum: 3.6980544727413114e-05
    test 662 sum53: 3.885337784451458e+84  FAILED, KNOWN, expected 3.6980544727413114e-05
    test 663 pow(4): fsums.Fsum 'pow'[87] (1.87022e-18, -1.9184e-34)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[98] (1.87022e-18, 9.09649e-35)
    test 664 pow(1): fsums.Fsum 'pow'[80] (3.69805e-05, 1.84767e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (3.69805e-05, 1.84767e-21)
    test 665 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 666 ceil: True
    test 667 floor: True
    test 668 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 669 residual: 0
    test 670 is_exact: True
    test 671 Fsum: 3.6980544727413114e-05
    test 672 Fsum: 3.6980544727413114e-05

    test 673 fsum: -5.970028321069147e-05
    test 674 sum54: 3.885337784451458e+84  FAILED, KNOWN, expected -5.970028321069147e-05
    test 675 pow(4): fsums.Fsum 'pow'[110] (1.2703e-17, 6.40398e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[192] (1.2703e-17, 5.53868e-34)
    test 676 pow(1): fsums.Fsum 'pow'[80] (-5.97003e-05, -9.00661e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-5.97003e-05, -9.00661e-22)
    test 677 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 678 ceil: True
    test 679 floor: True
    test 680 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 681 residual: 0
    test 682 is_exact: True
    test 683 Fsum: -5.970028321069147e-05
    test 684 Fsum: -5.970028321069147e-05

    test 685 fsum: 8.747229693341971
    test 686 sum55: 0.05673025374192798  FAILED, KNOWN, expected 8.747229693341971
    test 687 pow(4): fsums.Fsum 'pow'[123] (5854.4, -2.80437e-13)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[350] (5854.4, -2.80437e-13)
    test 688 pow(1): fsums.Fsum 'pow'[80] (8.74723, 2.34974e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (8.74723, 2.34974e-16)
    test 689 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 690 ceil: True
    test 691 floor: True
    test 692 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 693 residual: 0
    test 694 is_exact: True
    test 695 Fsum: 8.747229693341971
    test 696 Fsum: 8.747229693341971

    test 697 fsum: 0.02687078059378783
    test 698 sum56: 3.885337784451458e+84  FAILED, KNOWN, expected 0.02687078059378783
    test 699 pow(4): fsums.Fsum 'pow'[99] (5.2134e-07, -4.05226e-23)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[155] (5.2134e-07, -1.90171e-23)
    test 700 pow(1): fsums.Fsum 'pow'[80] (0.0268708, 5.61851e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0268708, 5.61851e-19)
    test 701 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 702 ceil: True
    test 703 floor: True
    test 704 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 705 residual: 0
    test 706 is_exact: True
    test 707 Fsum: 0.02687078059378783
    test 708 Fsum: 0.02687078059378783

    test 709 fsum: -8.40506045725281e-05
    test 710 sum57: 3.885337784451458e+84  FAILED, KNOWN, expected -8.40506045725281e-05
    test 711 pow(4): fsums.Fsum 'pow'[114] (4.99072e-17, 2.22506e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[212] (4.99072e-17, 7.11914e-34)
    test 712 pow(1): fsums.Fsum 'pow'[80] (-8.40506e-05, -4.25859e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-8.40506e-05, -4.25859e-22)
    test 713 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 714 ceil: True
    test 715 floor: True
    test 716 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 717 residual: 0
    test 718 is_exact: True
    test 719 Fsum: -8.40506045725281e-05
    test 720 Fsum: -8.40506045725281e-05

    test 721 fsum: 6.80968406922831e-06
    test 722 sum58: -0.010306126866175344  FAILED, KNOWN, expected 6.80968406922831e-06
    test 723 pow(4): fsums.Fsum 'pow'[106] (2.15034e-21, 1.10144e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[146] (2.15034e-21, 7.26664e-38)
    test 724 pow(1): fsums.Fsum 'pow'[80] (6.80968e-06, -1.55991e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (6.80968e-06, -1.55991e-22)
    test 725 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 726 ceil: True
    test 727 floor: True
    test 728 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 729 residual: 0
    test 730 is_exact: True
    test 731 Fsum: 6.80968406922831e-06
    test 732 Fsum: 6.80968406922831e-06

    test 733 fsum: 3.313716284426338e-10
    test 734 sum59: -3.885337784451458e+84  FAILED, KNOWN, expected 3.313716284426338e-10
    test 735 pow(4): fsums.Fsum 'pow'[101] (1.20576e-38, -8.93721e-55)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[176] (1.20576e-38, 1.64635e-55)
    test 736 pow(1): fsums.Fsum 'pow'[80] (3.31372e-10, -1.60981e-26)  FAILED, KNOWN, expected fsums.Fsum[80] (3.31372e-10, -1.60981e-26)
    test 737 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 738 ceil: True
    test 739 floor: True
    test 740 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 741 residual: 0
    test 742 is_exact: True
    test 743 Fsum: 3.313716284426338e-10
    test 744 Fsum: 3.313716284426338e-10

    test 745 fsum: 6.276290889706094e-09
    test 746 sum60: -0.12478485677711906  FAILED, KNOWN, expected 6.276290889706094e-09
    test 747 pow(4): fsums.Fsum 'pow'[87] (1.55172e-33, 5.34718e-51)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[100] (1.55172e-33, 5.34718e-51)
    test 748 pow(1): fsums.Fsum 'pow'[80] (6.27629e-09, 5.40699e-27)  FAILED, KNOWN, expected fsums.Fsum[80] (6.27629e-09, 5.40699e-27)
    test 749 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 750 ceil: True
    test 751 floor: True
    test 752 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 753 residual: 0
    test 754 is_exact: True
    test 755 Fsum: 6.276290889706094e-09
    test 756 Fsum: 6.276290889706094e-09

    test 757 fsum: -1.506164587316514e-17
    test 758 sum61: -3.885337784451458e+84  FAILED, KNOWN, expected -1.506164587316514e-17
    test 759 pow(4): fsums.Fsum 'pow'[89] (5.14624e-68, 3.52407e-84)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[131] (5.14624e-68, 2.44863e-84)
    test 760 pow(1): fsums.Fsum 'pow'[80] (-1.50616e-17, 9.38891e-34)  FAILED, KNOWN, expected fsums.Fsum[80] (-1.50616e-17, 9.38891e-34)
    test 761 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 762 ceil: True
    test 763 floor: True
    test 764 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 765 residual: 0
    test 766 is_exact: True
    test 767 Fsum: -1.506164587316514e-17
    test 768 Fsum: -1.506164587316514e-17

    test 769 fsum: 3.035998524925101
    test 770 sum62: 3.885337784451458e+84  FAILED, KNOWN, expected 3.035998524925101
    test 771 pow(4): fsums.Fsum 'pow'[91] (84.9584, -6.20934e-15)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[144] (84.9584, -6.20934e-15)
    test 772 pow(1): fsums.Fsum 'pow'[80] (3.036, -5.54729e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (3.036, -5.54729e-17)
    test 773 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 774 ceil: True
    test 775 floor: True
    test 776 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 777 residual: 0
    test 778 is_exact: True
    test 779 Fsum: 3.035998524925101
    test 780 Fsum: 3.035998524925101

    test 781 fsum: -0.020111233004266524
    test 782 sum63: 3.885337784451458e+84  FAILED, KNOWN, expected -0.020111233004266524
    test 783 pow(4): fsums.Fsum 'pow'[95] (1.63589e-07, 1.23733e-23)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[160] (1.63589e-07, -3.34129e-24)
    test 784 pow(1): fsums.Fsum 'pow'[80] (-0.0201112, -1.31473e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0201112, -1.31473e-18)
    test 785 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 786 ceil: True
    test 787 floor: True
    test 788 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 789 residual: 0
    test 790 is_exact: True
    test 791 Fsum: -0.020111233004266524
    test 792 Fsum: -0.020111233004266524

    test 793 fsum: -6.487420151240987e-06
    test 794 sum64: -0.10487610101389679  FAILED, KNOWN, expected -6.487420151240987e-06
    test 795 pow(4): fsums.Fsum 'pow'[108] (1.77128e-21, 1.49965e-37)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (1.77128e-21, 1.24483e-37)
    test 796 pow(1): fsums.Fsum 'pow'[80] (-6.48742e-06, -4.96827e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-6.48742e-06, -4.96827e-23)
    test 797 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 798 ceil: True
    test 799 floor: True
    test 800 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 801 residual: 0
    test 802 is_exact: True
    test 803 Fsum: -6.487420151240987e-06
    test 804 Fsum: -6.487420151240987e-06

    test 805 fsum: 0.0003830882661788339
    test 806 sum65: -0.3657873139115068  FAILED, KNOWN, expected 0.0003830882661788339
    test 807 pow(4): fsums.Fsum 'pow'[88] (2.15375e-14, -4.31702e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[102] (2.15375e-14, 2.48092e-31)
    test 808 pow(1): fsums.Fsum 'pow'[80] (0.000383088, 1.21118e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000383088, 1.21118e-20)
    test 809 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 810 ceil: True
    test 811 floor: True
    test 812 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 813 residual: 0
    test 814 is_exact: True
    test 815 Fsum: 0.0003830882661788339
    test 816 Fsum: 0.0003830882661788339

    test 817 fsum: -0.011166762490407206
    test 818 sum66: -21.0  FAILED, KNOWN, expected -0.011166762490407206
    test 819 pow(4): fsums.Fsum 'pow'[105] (1.55492e-08, -5.65946e-25)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[146] (1.55492e-08, -7.44658e-25)
    test 820 pow(1): fsums.Fsum 'pow'[80] (-0.0111668, 6.35216e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0111668, 6.35216e-19)
    test 821 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 822 ceil: True
    test 823 floor: True
    test 824 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 825 residual: 0
    test 826 is_exact: True
    test 827 Fsum: -0.011166762490407206
    test 828 Fsum: -0.011166762490407206

    test 829 fsum: 0.3482180296328787
    test 830 sum67: 3.885337784451458e+84  FAILED, KNOWN, expected 0.3482180296328787
    test 831 pow(4): fsums.Fsum 'pow'[116] (0.014703, 7.02771e-19)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[350] (0.014703, 7.02771e-19)
    test 832 pow(1): fsums.Fsum 'pow'[80] (0.348218, -6.11007e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.348218, -6.11007e-18)
    test 833 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 834 ceil: True
    test 835 floor: True
    test 836 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 837 residual: 0
    test 838 is_exact: True
    test 839 Fsum: 0.3482180296328787
    test 840 Fsum: 0.3482180296328787

    test 841 fsum: -0.026515756539071324
    test 842 sum68: 3.885337784451458e+84  FAILED, KNOWN, expected -0.026515756539071324
    test 843 pow(4): fsums.Fsum 'pow'[99] (4.94329e-07, 1.62915e-24)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (4.94329e-07, -4.53141e-23)
    test 844 pow(1): fsums.Fsum 'pow'[80] (-0.0265158, 2.28023e-19)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.0265158, 2.28023e-19)
    test 845 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 846 ceil: True
    test 847 floor: True
    test 848 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 849 residual: 0
    test 850 is_exact: True
    test 851 Fsum: -0.026515756539071324
    test 852 Fsum: -0.026515756539071324

    test 853 fsum: -9.704835689597475e-09
    test 854 sum69: 3.885337784451458e+84  FAILED, KNOWN, expected -9.704835689597475e-09
    test 855 pow(4): fsums.Fsum 'pow'[91] (8.87059e-33, -5.38032e-49)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[170] (8.87059e-33, -4.90015e-49)
    test 856 pow(1): fsums.Fsum 'pow'[80] (-9.70484e-09, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-9.70484e-09, -4.81387e-25)
    test 857 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 858 ceil: True
    test 859 floor: True
    test 860 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 861 residual: 0
    test 862 is_exact: True
    test 863 Fsum: -9.704835689597475e-09
    test 864 Fsum: -9.704835689597475e-09

    test 865 fsum: 0.00025282039639846067
    test 866 sum70: 8e-20  FAILED, KNOWN, expected 0.00025282039639846067
    test 867 pow(4): fsums.Fsum 'pow'[105] (4.08553e-15, 3.52646e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[192] (4.08553e-15, 3.52646e-31)
    test 868 pow(1): fsums.Fsum 'pow'[80] (0.00025282, 5.4556e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00025282, 5.4556e-21)
    test 869 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 870 ceil: True
    test 871 floor: True
    test 872 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 873 residual: 0
    test 874 is_exact: True
    test 875 Fsum: 0.00025282039639846067
    test 876 Fsum: 0.00025282039639846067

    test 877 fsum: 1.985301335482654e-16
    test 878 sum71: 7.935777257263735e-05  FAILED, KNOWN, expected 1.985301335482654e-16
    test 879 pow(4): fsums.Fsum 'pow'[88] (1.55348e-63, -9.83489e-80)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[98] (1.55348e-63, -4.4215e-80)
    test 880 pow(1): fsums.Fsum 'pow'[80] (1.9853e-16, -8.30557e-33)  FAILED, KNOWN, expected fsums.Fsum[80] (1.9853e-16, -8.30557e-33)
    test 881 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 882 ceil: True
    test 883 floor: True
    test 884 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 885 residual: 0
    test 886 is_exact: True
    test 887 Fsum: 1.985301335482654e-16
    test 888 Fsum: 1.985301335482654e-16

    test 889 fsum: 0.00012620934170238124
    test 890 sum72: 3.885337784451458e+84  FAILED, KNOWN, expected 0.00012620934170238124
    test 891 pow(4): fsums.Fsum 'pow'[87] (2.53727e-16, 8.03258e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[98] (2.53727e-16, 9.70432e-33)
    test 892 pow(1): fsums.Fsum 'pow'[80] (0.000126209, -5.13231e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000126209, -5.13231e-21)
    test 893 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 894 ceil: True
    test 895 floor: True
    test 896 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 897 residual: 0
    test 898 is_exact: True
    test 899 Fsum: 0.00012620934170238124
    test 900 Fsum: 0.00012620934170238124

    test 901 fsum: 0.00032587744821849874
    test 902 sum73: 3.885337784451458e+84  FAILED, KNOWN, expected 0.00032587744821849874
    test 903 pow(4): fsums.Fsum 'pow'[87] (1.12776e-14, 8.05106e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[113] (1.12776e-14, -1.64177e-31)
    test 904 pow(1): fsums.Fsum 'pow'[80] (0.000325877, 2.03647e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000325877, 2.03647e-20)
    test 905 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 906 ceil: True
    test 907 floor: True
    test 908 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 909 residual: 0
    test 910 is_exact: True
    test 911 Fsum: 0.00032587744821849874
    test 912 Fsum: 0.00032587744821849874

    test 913 fsum: 0.6366916299966564
    test 914 sum74: 3.885337784451458e+84  FAILED, KNOWN, expected 0.6366916299966564
    test 915 pow(4): fsums.Fsum 'pow'[107] (0.16433, 6.14493e-18)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[245] (0.16433, 1.13976e-17)
    test 916 pow(1): fsums.Fsum 'pow'[80] (0.636692, -3.76413e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (0.636692, -3.76413e-17)
    test 917 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 918 ceil: True
    test 919 floor: True
    test 920 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 921 residual: 0
    test 922 is_exact: True
    test 923 Fsum: 0.6366916299966564
    test 924 Fsum: 0.6366916299966564

    test 925 fsum: 3.3600968650420236e-10
    test 926 sum75: 3.885337784451458e+84  FAILED, KNOWN, expected 3.3600968650420236e-10
    test 927 pow(4): fsums.Fsum 'pow'[106] (1.2747e-38, -2.23223e-56)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (1.2747e-38, -3.5427e-55)
    test 928 pow(1): fsums.Fsum 'pow'[80] (3.3601e-10, -1.60981e-26)  FAILED, KNOWN, expected fsums.Fsum[80] (3.3601e-10, -1.60981e-26)
    test 929 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 930 ceil: True
    test 931 floor: True
    test 932 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 933 residual: 0
    test 934 is_exact: True
    test 935 Fsum: 3.3600968650420236e-10
    test 936 Fsum: 3.3600968650420236e-10

    test 937 fsum: 0.09061529044400062
    test 938 sum76: -3.885337784451458e+84  FAILED, KNOWN, expected 0.09061529044400062
    test 939 pow(4): fsums.Fsum 'pow'[95] (6.74227e-05, -2.46245e-21)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[165] (6.74227e-05, 1.41584e-21)
    test 940 pow(1): fsums.Fsum 'pow'[80] (0.0906153, 6.08204e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.0906153, 6.08204e-18)
    test 941 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 942 ceil: True
    test 943 floor: True
    test 944 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 945 residual: 0
    test 946 is_exact: True
    test 947 Fsum: 0.09061529044400062
    test 948 Fsum: 0.09061529044400062

    test 949 fsum: 3.397397991386572e-08
    test 950 sum77: 3.885337784451458e+84  FAILED, KNOWN, expected 3.397397991386572e-08
    test 951 pow(4): fsums.Fsum 'pow'[102] (1.33225e-30, -3.006e-47)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[168] (1.33225e-30, -3.006e-47)
    test 952 pow(1): fsums.Fsum 'pow'[80] (3.3974e-08, -1.91642e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (3.3974e-08, -1.91642e-25)
    test 953 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 954 ceil: True
    test 955 floor: True
    test 956 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 957 residual: 0
    test 958 is_exact: True
    test 959 Fsum: 3.397397991386572e-08
    test 960 Fsum: 3.397397991386572e-08

    test 961 fsum: -0.00012228182026594159
    test 962 sum78: -3.885337784451458e+84  FAILED, KNOWN, expected -0.00012228182026594159
    test 963 pow(4): fsums.Fsum 'pow'[92] (2.23588e-16, -2.19853e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[136] (2.23588e-16, -1.77095e-33)
    test 964 pow(1): fsums.Fsum 'pow'[80] (-0.000122282, -1.31816e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.000122282, -1.31816e-20)
    test 965 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 966 ceil: True
    test 967 floor: True
    test 968 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 969 residual: 0
    test 970 is_exact: True
    test 971 Fsum: -0.00012228182026594159
    test 972 Fsum: -0.00012228182026594159

    test 973 fsum: 0.00023046597922401214
    test 974 sum79: 3.885337784451458e+84  FAILED, KNOWN, expected 0.00023046597922401214
    test 975 pow(4): fsums.Fsum 'pow'[99] (2.82116e-15, -4.9406e-32)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[149] (2.82116e-15, 1.05075e-31)
    test 976 pow(1): fsums.Fsum 'pow'[80] (0.000230466, -1.23817e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000230466, -1.23817e-20)
    test 977 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 978 ceil: True
    test 979 floor: True
    test 980 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 981 residual: 0
    test 982 is_exact: True
    test 983 Fsum: 0.00023046597922401214
    test 984 Fsum: 0.00023046597922401214

    test 985 fsum: 0.0001397138838299574
    test 986 sum80: -3.885337784451458e+84  FAILED, KNOWN, expected 0.0001397138838299574
    test 987 pow(4): fsums.Fsum 'pow'[93] (3.81029e-16, -2.06368e-33)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[206] (3.81029e-16, 5.0625e-33)
    test 988 pow(1): fsums.Fsum 'pow'[80] (0.000139714, -4.70879e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000139714, -4.70879e-21)
    test 989 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 990 ceil: True
    test 991 floor: True
    test 992 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 993 residual: 0
    test 994 is_exact: True
    test 995 Fsum: 0.0001397138838299574
    test 996 Fsum: 0.0001397138838299574

    test 997 fsum: 0.0003893788423857181
    test 998 sum81: -9e-20  FAILED, KNOWN, expected 0.0003893788423857181
    test 999 pow(4): fsums.Fsum 'pow'[88] (2.29874e-14, -3.55496e-31)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[102] (2.29874e-14, -3.55496e-31)
    test 1000 pow(1): fsums.Fsum 'pow'[80] (0.000389379, 1.18569e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.000389379, 1.18569e-20)
    test 1001 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1002 ceil: True
    test 1003 floor: True
    test 1004 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1005 residual: 0
    test 1006 is_exact: True
    test 1007 Fsum: 0.0003893788423857181
    test 1008 Fsum: 0.0003893788423857181

    test 1009 fsum: 2.3810738895054022e-07
    test 1010 sum82: 3.885337784451458e+84  FAILED, KNOWN, expected 2.3810738895054022e-07
    test 1011 pow(4): fsums.Fsum 'pow'[102] (3.21434e-27, 2.51932e-44)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[134] (3.21434e-27, 2.42574e-44)
    test 1012 pow(1): fsums.Fsum 'pow'[80] (2.38107e-07, 7.07532e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (2.38107e-07, 7.07532e-24)
    test 1013 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1014 ceil: True
    test 1015 floor: True
    test 1016 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1017 residual: 0
    test 1018 is_exact: True
    test 1019 Fsum: 2.3810738895054022e-07
    test 1020 Fsum: 2.3810738895054022e-07

    test 1021 fsum: -2.9937490974618113
    test 1022 sum83: -3.885337784451458e+84  FAILED, KNOWN, expected -2.9937490974618113
    test 1023 pow(4): fsums.Fsum 'pow'[101] (80.327, 9.13381e-16)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (80.327, 4.4883e-15)
    test 1024 pow(1): fsums.Fsum 'pow'[80] (-2.99375, -1.40918e-16)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.99375, -1.40918e-16)
    test 1025 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1026 ceil: True
    test 1027 floor: True
    test 1028 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1029 residual: 0
    test 1030 is_exact: True
    test 1031 Fsum: -2.9937490974618113
    test 1032 Fsum: -2.9937490974618113

    test 1033 fsum: 1.727912201771693e-06
    test 1034 sum84: -3.885337784451458e+84  FAILED, KNOWN, expected 1.727912201771693e-06
    test 1035 pow(4): fsums.Fsum 'pow'[107] (8.91429e-24, -1.28222e-40)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[212] (8.91429e-24, -4.16631e-40)
    test 1036 pow(1): fsums.Fsum 'pow'[80] (1.72791e-06, -7.29308e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (1.72791e-06, -7.29308e-23)
    test 1037 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1038 ceil: True
    test 1039 floor: True
    test 1040 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1041 residual: 0
    test 1042 is_exact: True
    test 1043 Fsum: 1.727912201771693e-06
    test 1044 Fsum: 1.727912201771693e-06

    test 1045 fsum: -2.896283236974169e-08
    test 1046 sum85: -3.885337784451458e+84  FAILED, KNOWN, expected -2.896283236974169e-08
    test 1047 pow(4): fsums.Fsum 'pow'[100] (7.03662e-31, 1.89692e-47)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (7.03662e-31, 2.22994e-47)
    test 1048 pow(1): fsums.Fsum 'pow'[80] (-2.89628e-08, -4.81387e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.89628e-08, -4.81387e-25)
    test 1049 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1050 ceil: True
    test 1051 floor: True
    test 1052 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1053 residual: 0
    test 1054 is_exact: True
    test 1055 Fsum: -2.896283236974169e-08
    test 1056 Fsum: -2.896283236974169e-08

    test 1057 fsum: 2.0477133162539776e-13
    test 1058 sum86: -7.000000144314202  FAILED, KNOWN, expected 2.0477133162539776e-13
    test 1059 pow(4): fsums.Fsum 'pow'[88] (1.75823e-51, 1.20378e-67)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[98] (1.75823e-51, -1.20296e-67)
    test 1060 pow(1): fsums.Fsum 'pow'[80] (2.04771e-13, -1.051e-29)  FAILED, KNOWN, expected fsums.Fsum[80] (2.04771e-13, -1.051e-29)
    test 1061 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1062 ceil: True
    test 1063 floor: True
    test 1064 divmod: fsums.Fsum[82] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1065 residual: 0
    test 1066 is_exact: True
    test 1067 Fsum: 2.0477133162539776e-13
    test 1068 Fsum: 2.0477133162539776e-13

    test 1069 fsum: 1.4405794343693458e-05
    test 1070 sum87: 9.572492258772437  FAILED, KNOWN, expected 1.4405794343693458e-05
    test 1071 pow(4): fsums.Fsum 'pow'[106] (4.30674e-20, 1.53231e-36)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[208] (4.30674e-20, -2.79671e-36)
    test 1072 pow(1): fsums.Fsum 'pow'[80] (1.44058e-05, 4.26344e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (1.44058e-05, 4.26344e-22)
    test 1073 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1074 ceil: True
    test 1075 floor: True
    test 1076 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1077 residual: 0
    test 1078 is_exact: True
    test 1079 Fsum: 1.4405794343693458e-05
    test 1080 Fsum: 1.4405794343693458e-05

    test 1081 fsum: -0.998591801786246
    test 1082 sum88: -3.885337784451458e+84  FAILED, KNOWN, expected -0.998591801786246
    test 1083 pow(4): fsums.Fsum 'pow'[94] (0.994379, 1.03596e-17)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[144] (0.994379, 9.26627e-18)
    test 1084 pow(1): fsums.Fsum 'pow'[80] (-0.998592, 5.25189e-17)  FAILED, KNOWN, expected fsums.Fsum[80] (-0.998592, 5.25189e-17)
    test 1085 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1086 ceil: True
    test 1087 floor: True
    test 1088 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1089 residual: 0
    test 1090 is_exact: True
    test 1091 Fsum: -0.998591801786246
    test 1092 Fsum: -0.998591801786246

    test 1093 fsum: 1.787395242950536e-07
    test 1094 sum89: 3.885337784451458e+84  FAILED, KNOWN, expected 1.787395242950536e-07
    test 1095 pow(4): fsums.Fsum 'pow'[115] (1.02066e-27, 3.51199e-44)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[308] (1.02066e-27, -2.28738e-44)
    test 1096 pow(1): fsums.Fsum 'pow'[80] (1.7874e-07, 2.82734e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (1.7874e-07, 2.82734e-24)
    test 1097 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1098 ceil: True
    test 1099 floor: True
    test 1100 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1101 residual: 0
    test 1102 is_exact: True
    test 1103 Fsum: 1.787395242950536e-07
    test 1104 Fsum: 1.787395242950536e-07

    test 1105 fsum: -3.688447322895715e-05
    test 1106 sum90: 3.885337784451458e+84  FAILED, KNOWN, expected -3.688447322895715e-05
    test 1107 pow(4): fsums.Fsum 'pow'[103] (1.85086e-18, -1.07333e-34)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[143] (1.85086e-18, -1.55896e-34)
    test 1108 pow(1): fsums.Fsum 'pow'[80] (-3.68845e-05, 3.33802e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.68845e-05, 3.33802e-21)
    test 1109 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1110 ceil: True
    test 1111 floor: True
    test 1112 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1113 residual: 0
    test 1114 is_exact: True
    test 1115 Fsum: -3.688447322895715e-05
    test 1116 Fsum: -3.688447322895715e-05

    test 1117 fsum: -2.126256318374095e-05
    test 1118 sum91: -3.885337784451458e+84  FAILED, KNOWN, expected -2.126256318374095e-05
    test 1119 pow(4): fsums.Fsum 'pow'[101] (2.04391e-19, 8.26747e-36)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[149] (2.04391e-19, 8.26747e-36)
    test 1120 pow(1): fsums.Fsum 'pow'[80] (-2.12626e-05, -2.15014e-22)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.12626e-05, -2.15014e-22)
    test 1121 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1122 ceil: True
    test 1123 floor: True
    test 1124 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1125 residual: 0
    test 1126 is_exact: True
    test 1127 Fsum: -2.126256318374095e-05
    test 1128 Fsum: -2.126256318374095e-05

    test 1129 fsum: -4.0670362990572175e-13
    test 1130 sum92: 0.0  FAILED, KNOWN, expected -4.0670362990572175e-13
    test 1131 pow(4): fsums.Fsum 'pow'[88] (2.73598e-50, 4.11825e-67)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[188] (2.73598e-50, -1.74931e-68)
    test 1132 pow(1): fsums.Fsum 'pow'[80] (-4.06704e-13, 7.23935e-30)  FAILED, KNOWN, expected fsums.Fsum[80] (-4.06704e-13, 7.23935e-30)
    test 1133 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1134 ceil: True
    test 1135 floor: True
    test 1136 divmod: fsums.Fsum[86] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1137 residual: 0
    test 1138 is_exact: True
    test 1139 Fsum: -4.0670362990572175e-13
    test 1140 Fsum: -4.0670362990572175e-13

    test 1141 fsum: -7.86820153239289e-07
    test 1142 sum93: 3.885337784451458e+84  FAILED, KNOWN, expected -7.86820153239289e-07
    test 1143 pow(4): fsums.Fsum 'pow'[111] (3.83267e-25, 1.3069e-41)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[224] (3.83267e-25, -3.55581e-42)
    test 1144 pow(1): fsums.Fsum 'pow'[80] (-7.8682e-07, -5.01122e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-7.8682e-07, -5.01122e-23)
    test 1145 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1146 ceil: True
    test 1147 floor: True
    test 1148 divmod: fsums.Fsum[85] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1149 residual: 0
    test 1150 is_exact: True
    test 1151 Fsum: -7.86820153239289e-07
    test 1152 Fsum: -7.86820153239289e-07

    test 1153 fsum: -3.396189790061391e-05
    test 1154 sum94: -3.885337784451458e+84  FAILED, KNOWN, expected -3.396189790061391e-05
    test 1155 pow(4): fsums.Fsum 'pow'[99] (1.33036e-18, 3.64789e-35)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (1.33036e-18, 8.24056e-35)
    test 1156 pow(1): fsums.Fsum 'pow'[80] (-3.39619e-05, -2.04818e-21)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.39619e-05, -2.04818e-21)
    test 1157 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1158 ceil: True
    test 1159 floor: True
    test 1160 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1161 residual: 0
    test 1162 is_exact: True
    test 1163 Fsum: -3.396189790061391e-05
    test 1164 Fsum: -3.396189790061391e-05

    test 1165 fsum: 0.003615883731878489
    test 1166 sum95: -3.885337784451458e+84  FAILED, KNOWN, expected 0.003615883731878489
    test 1167 pow(4): fsums.Fsum 'pow'[101] (1.70946e-10, 6.92041e-27)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[137] (1.70946e-10, 3.1506e-27)
    test 1168 pow(1): fsums.Fsum 'pow'[80] (0.00361588, -9.2861e-20)  FAILED, KNOWN, expected fsums.Fsum[80] (0.00361588, -9.2861e-20)
    test 1169 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1170 ceil: True
    test 1171 floor: True
    test 1172 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1173 residual: 0
    test 1174 is_exact: True
    test 1175 Fsum: 0.003615883731878489
    test 1176 Fsum: 0.003615883731878489

    test 1177 fsum: 1.0522023591878301e-08
    test 1178 sum96: -3.885337784451458e+84  FAILED, KNOWN, expected 1.0522023591878301e-08
    test 1179 pow(4): fsums.Fsum 'pow'[101] (1.22574e-32, -4.2126e-49)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (1.22574e-32, 4.50261e-50)
    test 1180 pow(1): fsums.Fsum 'pow'[80] (1.0522e-08, -1.00109e-25)  FAILED, KNOWN, expected fsums.Fsum[80] (1.0522e-08, -1.00109e-25)
    test 1181 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1182 ceil: True
    test 1183 floor: True
    test 1184 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1185 residual: 0
    test 1186 is_exact: True
    test 1187 Fsum: 1.0522023591878301e-08
    test 1188 Fsum: 1.0522023591878301e-08

    test 1189 fsum: 0.3573866813300206
    test 1190 sum97: -3.885337784451458e+84  FAILED, KNOWN, expected 0.3573866813300206
    test 1191 pow(4): fsums.Fsum 'pow'[103] (0.0163137, 1.23839e-18)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[155] (0.0163137, 1.23839e-18)
    test 1192 pow(1): fsums.Fsum 'pow'[80] (0.357387, 6.78239e-18)  FAILED, KNOWN, expected fsums.Fsum[80] (0.357387, 6.78239e-18)
    test 1193 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1194 ceil: True
    test 1195 floor: True
    test 1196 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1197 residual: 0
    test 1198 is_exact: True
    test 1199 Fsum: 0.3573866813300206
    test 1200 Fsum: 0.3573866813300206

    test 1201 fsum: -2.5118463210768827e-06
    test 1202 sum98: 3.885337784451458e+84  FAILED, KNOWN, expected -2.5118463210768827e-06
    test 1203 pow(4): fsums.Fsum 'pow'[86] (3.98082e-23, -1.30423e-39)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[102] (3.98082e-23, -1.30423e-39)
    test 1204 pow(1): fsums.Fsum 'pow'[80] (-2.51185e-06, 2.05739e-23)  FAILED, KNOWN, expected fsums.Fsum[80] (-2.51185e-06, 2.05739e-23)
    test 1205 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1206 ceil: True
    test 1207 floor: True
    test 1208 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1209 residual: 0
    test 1210 is_exact: True
    test 1211 Fsum: -2.5118463210768827e-06
    test 1212 Fsum: -2.5118463210768827e-06

    test 1213 fsum: -3.0957020743442244e-06
    test 1214 sum99: 14.009920424477986  FAILED, KNOWN, expected -3.0957020743442244e-06
    test 1215 pow(4): fsums.Fsum 'pow'[101] (9.1841e-23, -2.85232e-39)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[140] (9.1841e-23, 1.26645e-39)
    test 1216 pow(1): fsums.Fsum 'pow'[80] (-3.0957e-06, -6.90385e-24)  FAILED, KNOWN, expected fsums.Fsum[80] (-3.0957e-06, -6.90385e-24)
    test 1217 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1218 ceil: True
    test 1219 floor: True
    test 1220 divmod: fsums.Fsum[84] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1221 residual: 0
    test 1222 is_exact: True
    test 1223 Fsum: -3.0957020743442244e-06
    test 1224 Fsum: -3.0957020743442244e-06

    test 1225 fsum: 8.72423539315021e-10
    test 1226 sum100: -3.885337784451458e+84  FAILED, KNOWN, expected 8.72423539315021e-10
    test 1227 pow(4): fsums.Fsum 'pow'[89] (5.79308e-37, 3.14953e-53)  FAILED, KNOWN, expected fsums.Fsum '__mul__'[132] (5.79308e-37, 2.12649e-53)
    test 1228 pow(1): fsums.Fsum 'pow'[80] (8.72424e-10, 3.56006e-26)  FAILED, KNOWN, expected fsums.Fsum[80] (8.72424e-10, 3.56006e-26)
    test 1229 pow(0): fsums.Fsum 'pow'[80] (1.0, 0)
    test 1230 ceil: True
    test 1231 floor: True
    test 1232 divmod: fsums.Fsum[83] (0.0, 0)  FAILED, KNOWN, expected 0.0
    test 1233 residual: 0
    test 1234 is_exact: True
    test 1235 Fsum: 8.72423539315021e-10
    test 1236 Fsum: 8.72423539315021e-10
    test 1237 fmul: 0.00000001

    test 1238 len1: 4
    test 1239 FSum+: 4.0
    test 1240 FSum-: 2.0
    test 1241 FSum-: 0.0
    test 1242 FSum*: 4.0
    test 1243 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1244 ._fint2: (4, 0)
    test 1245 ._fprs: 4.0
    test 1246 ._fprs2: (4.0, 0)
    test 1247 ._n: 5
    test 1248 ._ps: [4.0]
    test 1249 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1250 ._fint2: (4, 0)
    test 1251 ._fprs: 4.0
    test 1252 ._fprs2: (4.0, 0)
    test 1253 ._n: 5
    test 1254 ._ps: [4.0]
    test 1255 len2: 8
    test 1256 FSum+: 8.0
    test 1257 FSum-: 4.0
    test 1258 FSum-: 0.0
    test 1259 FSum*: 8.0
    test 1260 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1261 ._fint2: (8, 0)
    test 1262 ._fprs: 8.0
    test 1263 ._fprs2: (8.0, 0)
    test 1264 ._n: 9
    test 1265 ._ps: [8.0]
    test 1266 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1267 ._fint2: (8, 0)
    test 1268 ._fprs: 8.0
    test 1269 ._fprs2: (8.0, 0)
    test 1270 ._n: 9
    test 1271 ._ps: [8.0]
    test 1272 len3: 16
    test 1273 FSum+: 16.0
    test 1274 FSum-: 8.0
    test 1275 FSum-: 0.0
    test 1276 FSum*: 16.0
    test 1277 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1278 ._fint2: (16, 0)
    test 1279 ._fprs: 16.0
    test 1280 ._fprs2: (16.0, 0)
    test 1281 ._n: 17
    test 1282 ._ps: [16.0]
    test 1283 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1284 ._fint2: (16, 0)
    test 1285 ._fprs: 16.0
    test 1286 ._fprs2: (16.0, 0)
    test 1287 ._n: 17
    test 1288 ._ps: [16.0]
    test 1289 len4: 32
    test 1290 FSum+: 32.0
    test 1291 FSum-: 16.0
    test 1292 FSum-: 0.0
    test 1293 FSum*: 32.0
    test 1294 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1295 ._fint2: (32, 0)
    test 1296 ._fprs: 32.0
    test 1297 ._fprs2: (32.0, 0)
    test 1298 ._n: 33
    test 1299 ._ps: [32.0]
    test 1300 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1301 ._fint2: (32, 0)
    test 1302 ._fprs: 32.0
    test 1303 ._fprs2: (32.0, 0)
    test 1304 ._n: 33
    test 1305 ._ps: [32.0]
    test 1306 len5: 64
    test 1307 FSum+: 64.0
    test 1308 FSum-: 32.0
    test 1309 FSum-: 0.0
    test 1310 FSum*: 64.0
    test 1311 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1312 ._fint2: (64, 0)
    test 1313 ._fprs: 64.0
    test 1314 ._fprs2: (64.0, 0)
    test 1315 ._n: 65
    test 1316 ._ps: [64.0]
    test 1317 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1318 ._fint2: (64, 0)
    test 1319 ._fprs: 64.0
    test 1320 ._fprs2: (64.0, 0)
    test 1321 ._n: 65
    test 1322 ._ps: [64.0]
    test 1323 len6: 128
    test 1324 FSum+: 128.0
    test 1325 FSum-: 64.0
    test 1326 FSum-: 0.0
    test 1327 FSum*: 128.0
    test 1328 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1329 ._fint2: (128, 0)
    test 1330 ._fprs: 128.0
    test 1331 ._fprs2: (128.0, 0)
    test 1332 ._n: 129
    test 1333 ._ps: [128.0]
    test 1334 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1335 ._fint2: (128, 0)
    test 1336 ._fprs: 128.0
    test 1337 ._fprs2: (128.0, 0)
    test 1338 ._n: 129
    test 1339 ._ps: [128.0]
    test 1340 len7: 256
    test 1341 FSum+: 256.0
    test 1342 FSum-: 128.0
    test 1343 FSum-: 0.0
    test 1344 FSum*: 256.0
    test 1345 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1346 ._fint2: (256, 0)
    test 1347 ._fprs: 256.0
    test 1348 ._fprs2: (256.0, 0)
    test 1349 ._n: 257
    test 1350 ._ps: [256.0]
    test 1351 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1352 ._fint2: (256, 0)
    test 1353 ._fprs: 256.0
    test 1354 ._fprs2: (256.0, 0)
    test 1355 ._n: 257
    test 1356 ._ps: [256.0]
    test 1357 len8: 512
    test 1358 FSum+: 512.0
    test 1359 FSum-: 256.0
    test 1360 FSum-: 0.0
    test 1361 FSum*: 512.0
    test 1362 copy(Fsum): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1363 ._fint2: (512, 0)
    test 1364 ._fprs: 512.0
    test 1365 ._fprs2: (512.0, 0)
    test 1366 ._n: 513
    test 1367 ._ps: [512.0]
    test 1368 Fsum.copy(): (<class 'pygeodesy.fsums.Fsum'>, True)
    test 1369 ._fint2: (512, 0)
    test 1370 ._fprs: 512.0
    test 1371 ._fprs2: (512.0, 0)
    test 1372 ._n: 513
    test 1373 ._ps: [512.0]
    test 1374 len: 513
    test 1375 partials: (512.0,)

    test 1376 FSum0: 0.0
    test 1377 FSum0: 0.0
    test 1378 FSum0: 0.0
    test 1379 FSum0: 0.0
    test 1380 FSum0: 0.0
    test 1381 FSum0: 0.0
    test 1382 Fsum#: 514
    test 1383 Fsum#: 1
    test 1384 FSum.: fsums.Fsum[514] (0.0, 0)
    test 1385 FsumI: 0.0
    test 1386 FsumR: 0.0
    test 1387 radd: 514.0
    test 1388 rdiv: 3.91e-03
    test 1389 rmul: 1024.0
    test 1390 rpow: 1.0
    test 1391 rsub: -510.0
    test 1392 sizeof: 412  FAILED, KNOWN, expected 428
    test 1393 _2sum: OverflowError('_2sum(1.0e+308, inf): not finite (inf)')
    test 1394 F(None): TypeError("type(x) (None): float() argument must be a string or a real number, not 'NoneType'")

    test 1395 ints: 1
    test 1396 ints: 1
    test 1397 fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1398 fsum_: -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1399 Fsum : -3.58905099e+19  FAILED, KNOWN, expected 1.0
    test 1400 sum  : -3.68934881e+19  FAILED, KNOWN, expected 1.0
    test 1401 F * 2: 4.0000
    test 1402 F / 2: 2.0000
    test 1403 F / F: True
    test 1404 F / F: 1.0
    test 1405 F / F: 2.0
    test 1406 abs  : fsums.Fsum '__abs__'[4] (2.0, 0)  FAILED, KNOWN, expected fsums.Fsum[4] (2.0, 0)
    test 1407 int  : 2
    test 1408 eq F: True
    test 1409 ge F: True
    test 1410 gt F: False
    test 1411 le F: True
    test 1412 lt F: False
    test 1413 ne F: False
    test 1414 if F: True
    test 1415 gt 0: True
    test 1416 lt 0: False
    test 1417 eq 0: False
    test 1418 lt 0: True
    test 1419 gt 0: True
    test 1420 gt 0: False
    test 1421 signOf: 1
    test 1422 signOf: -1
    test 1423 ceil : 3
    test 1424 floor: 2

    test 1425 divmod : (2, <fsums.Fsum '__divmod__'[7] (0.0, 0) at 0x1065eb760>)
    test 1426 divmod : (2, <fsums.Fsum 'divmod'[2] (0.0, 0) at 0x1065ebd90>)
    test 1427 rdivmod : (0, <fsums.Fsum '__rdivmod__'[1] (2.0, 0) at 0x1065ebd90>)
    test 1428 divmod : (-2, <fsums.Fsum '__divmod__'[2] (1.0, 0) at 0x1065eb760>)
    test 1429 imod: fsums.Fsum '__imod__'[2] (0.0, 0)
    test 1430 mod : fsums.Fsum '__mod__'[7] (0.0, 0)
    test 1431 rmod: fsums.Fsum '__rmod__'[1] (2.0, 0)
    test 1432 neg : fsums.Fsum '__neg__'[4] (-2, 0)
    test 1433 pos : fsums.Fsum[4] (2.0, 0)
    test 1434 is_int: True
    test 1435 float: 9e-102
    test 1436 is_int: False
    test 1437 F //: fsums.Fsum '__floordiv__'[1] (-1, 0)
    test 1438 // F: ResidualError("fsums.Fsum '__rfloordiv__'[1] Fsum2Tuple(fsum=5.0, residual=0) // <fsums.Fsum 'm'[4] (-3, 9.0e-102) at 0x1065eb760>: non-zero residual (9.0e-102), ratio (3.0e-102) exceeds RESIDUAL (0.0)")
    test 1439 F //=: fsums.Fsum 'm'[1] (-2, 0)
    test 1440 F / 0: ZeroDivisionError("fsums.Fsum '__truediv__'[4] Fsum2Tuple(fsum=9.0e-102, residual=5.9483e-118) / 0: float division by zero")
    test 1441 pow(F, +): ResidualError("fsums.Fsum '__pow__'[4] Fsum2Tuple(fsum=9.0e-102, residual=5.9483e-118) ** 2.1: non-zero residual (5.94830118e-118), fractional power (2.1)")
    test 1442 pow(F, -): ResidualError("fsums.Fsum '__pow__'[5] Fsum2Tuple(fsum=1.0, residual=0) ** <fsums.Fsum '__pow__'[4] (9.0e-102, 5.9483e-118) at 0x1065eb7c0>: non-zero residual (5.94830118e-118), ratio (6.60922353e-17) exceeds RESIDUAL (0.0)")
    test 1443 pow(-F, F): ResidualError("fsums.Fsum '__pow__'[1] Fsum2Tuple(fsum=-2, residual=0) ** <fsums.Fsum[4] (9.0e-102, 5.9483e-118) at 0x1065ebdc0>: non-zero residual (5.94830118e-118), ratio (6.60922353e-17) exceeds RESIDUAL (0.0)")
    test 1444 pow(F, F): ResidualError("fsums.Fsum '__pow__'[1] Fsum2Tuple(fsum=2, residual=0) ** <fsums.Fsum[4] (9.0e-102, 5.9483e-118) at 0x1065ebdc0>: non-zero residual (5.94830118e-118), ratio (6.60922353e-17) exceeds RESIDUAL (0.0)")
    test 1445 pow(F, f, i): ResidualError("fsums.Fsum '__pow__'[4] Fsum2Tuple(fsum=9.0e-102, residual=5.9483e-118) ** 2.1: integer residual (9.0e-102), mod (2)")
    test 1446 pow(F, F, i): TypeError("fsums.Fsum 'pow'[1] Fsum2Tuple(fsum=-2, residual=0) ** <fsums.Fsum[1] (2.1, 0) at 0x1065ebd90>: mod (2), pow() 3rd argument not allowed unless all arguments are integers")
    test 1447 pow(F, i, None): fsums.Fsum '__pow__'[1] (4, 0)
    test 1448 Z**-2: ZeroDivisionError("fsums.Fsum '__pow__'[2] Fsum2Tuple(fsum=0.0, residual=0) ** -2: 0.0 cannot be raised to a negative power")
    test 1449 pow(0): 1.000
    test 1450 pow(1): -3.000
    test 1451 pow(2): 9.000
    test 1452 pow(21): -10460353203.000
    test 1453 **= 2: 9.000
    test 1454 F0**0: fsums.Fsum '__pow__'[1] (1, 0)
    test 1455 F0**0.: fsums.Fsum '__pow__'[1] (1.0, 0)
    test 1456 0**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1457 0.**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1458 F0**0: fsums.Fsum 'pow'[1] (1, 0)
    test 1459 F0**2: fsums.Fsum 'pow'[1] (0.0, 0)
    test 1460 F0**0.: fsums.Fsum 'pow'[1] (1.0, 0)
    test 1461 F0**3.: fsums.Fsum 'pow'[1] (0.0, 0)
    test 1462 F0**0.: fsums.Fsum 'pow'[1] (1, 0)
    test 1463 2**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1464 2.**F0: fsums.Fsum '__rpow__'[1] (1.0, 0)
    test 1465 F2**0: fsums.Fsum '__pow__'[1] (1, 0)
    test 1466 F2.**0: fsums.Fsum '__pow__'[1] (1, 0)
    test 1467 F2**F2: fsums.Fsum '__pow__'[1] (4, 0)
    test 1468 F2**F2: fsums.Fsum '__rpow__'[1] (4, 0)
    test 1469 F**2: 3125.000
    test 1470 F**-1: 0.200
    test 1471 F**-2: 0.040
    test 1472 F**-2.5: 0.018
    test 1473 F** 2.5: 55.902
    test 1474 pow(2): 25.000
    test 1475 pow(2.5): 55.902
    test 1476 pow(F): 3125.000
    test 1477 3pow(2, None): fsums.Fsum 'pow'[2] (25, 0)
    test 1478 3pow(2.5, None): fsums.Fsum 'pow'[2] (55.902, 0)
    test 1479 3pow(2, 20): fsums.Fsum 'pow'[2] (5, 0)
    test 1480 fsum(): 5.0
    test 1481 fsum(): True
    test 1482 fsum2(): (5.0, 0)
    test 1483 fsum2(): True
    test 1484 fsum2(): Fsum2Tuple(fsum=5.0, residual=0)
    test 1485 Fsum2Tuple: ('fsum', 5.0, <class 'pygeodesy.unitsBase.Float'>)
    test 1486 Fsum2Tuple: ('residual', 0, <class 'pygeodesy.unitsBase.Int'>)
    test 1487 fmul(x): 25.0
    test 1488 fmul(F): 62.5
    test 1489 fadd(F): 65.0
    test 1490 fsub(F): 62.5
    test 1491 Fsum(F): 125.0

    test 1492 ratio: (-27021597764141911, 9007199254740992)
    test 1493 ratio: fsums.Fsum[1] (-3, 0)  FAILED, KNOWN, expected fsums.Fsum[4] (-3, 8.80732e-17)
    test 1494 int_float: -3.000
    test 1495 fint: fsums.Fsum 'fint'[1] (-2, 0)
    test 1496 fint2: (-2, -1.0)
    test 1497 pow3: fsums.Fsum '__pow__'[1] (3, 0)

    test 1498 is_math_fsum: 2

    test 1499 RESIDUAL: 0.0
    test 1500 RESIDUAL: 0.0
    test 1501 RESIDUAL: 1e-32
    test 1502 RESIDUAL: 9.0
    test 1503 RESIDUAL: sorted

    417 of 1503 testFsums.py tests (27.7%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 314.589 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testGars.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.degDMS from .dms by testGars.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGars.py line 11
# lazily imported pygeodesy.gars by testGars.py line 11
# lazily imported pygeodesy.Garef from .gars by testGars.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testGars.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGars.py line 56

    testing testGars.py 23.03.27 (module pygeodesy.gars 22.09.29) isLazy=3
    test 1 Garef: 381NH45
    test 2 Garef: 381NH45
    test 3 Garef: Garef('381NH45')
    test 4 Garef: '381NH45'
    test 5 Garef: '381NH45'  FAILED, KNOWN, expected Garef('381NH45')
    test 6 Garef.precision: 2
    test 7 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 8 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 9 Garef.latlon: 57.64911, 10.40744
    test 10 Garef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 11 codec3: 381NH45
    test 12 decode3: 57.625, 10.375, 2.0
    test 13 encode: 381NH45
    test 14 Garef(LatLon): 381NH45
    test 15 copy(Garef): (<class 'pygeodesy.gars.Garef'>, True)
    test 16 Garef.copy(): (<class 'pygeodesy.gars.Garef'>, True)
    test 17 precision: -1  FAILED, KNOWN, expected 0
    test 18 resolution: 30′
    test 19 precision: 0
    test 20 resolution: 30′
    test 21 precision: 1
    test 22 resolution: 15′
    test 23 precision: 2
    test 24 resolution: 5′
    test 25 precision: 3  FAILED, KNOWN, expected 2
    test 26 resolution: 5′

    3 of 26 testGars.py tests (11.5%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 653.028 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testGeodesicx.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.classname from .named by testGeodesicx.py line 12
# lazily imported pygeodesy.DIG from .constants by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testGeodesicx.py line 12
# lazily imported pygeodesy.GDict from .karney by testGeodesicx.py line 12
# lazily imported pygeodesy.GeodesicLineExact from .geodesicx by testGeodesicx.py line 12
# lazily imported pygeodesy.itemsorted from .errors by testGeodesicx.py line 12
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testGeodesicx.py line 224
# lazily imported pygeodesy.geodesicw by testGeodesicx.py line 224
# lazily imported pygeodesy.geodsolve by testGeodesicx.py line 224

    testing testGeodesicx.py 23.04.08 (module pygeodesy.geodesicx 23.04.04) isLazy=3

    testDirectX vs ...(pygeodesy.geodesicx, 23.04.04)
    test 1 C++X.a12: 49.4755274632515
    test 2 C++X.azi1: 51
    test 3 C++X.azi2: 107.189397162606
    test 4 C++X.lat1: 40.6
    test 5 C++X.lat2: 51.8845645056068
    test 6 C++X.lon1: -73.8
    test 7 C++X.lon2: -1.14117286120083
    test 8 C++X.m12: 4844148.70310149
    test 9 C++X.M12: 0.650910566998086
    test 10 C++X.M21: 0.651228658921966
    test 11 C++X.s12: 5500000
    test 12 C++X.S12: 39735075134877.1
    test 13 iteration: None

    test 14 Python.a12: 49.4755274632515
    test 15 Python.azi1: 51
    test 16 Python.azi2: 107.189397162606
    test 17 Python.lat1: 40.6
    test 18 Python.lat2: 51.8845645056068
    test 19 Python.lon1: -73.8
    test 20 Python.lon2: -1.14117286120083  FAILED, KNOWN, expected -1.14117286120084
    test 21 Python.m12: 4844148.70310149
    test 22 Python.M12: 0.650910566998086
    test 23 Python.M21: 0.651228658921966
    test 24 Python.s12: 5500000
    test 25 Python.S12: 39735075134877.1
    test 26 iteration: None

    test 27 GeodSolve.a12: 49.4755274632515
    test 28 GeodSolve.azi1: 51
    test 29 GeodSolve.azi2: 107.189397162606
    test 30 GeodSolve.lat1: 40.6
    test 31 GeodSolve.lat2: 51.8845645056068
    test 32 GeodSolve.lon1: -73.8
    test 33 GeodSolve.lon2: -1.14117286120083
    test 34 GeodSolve.m12: 4844148.70310149
    test 35 GeodSolve.M12: 0.650910566998086
    test 36 GeodSolve.M21: 0.651228658921966
    test 37 GeodSolve.s12: 5500000
    test 38 GeodSolve.S12: 39735075134877.1
    test 39 iteration: None

    test 40 f(-0.7)proLate.a12: 41.2845109932529  FAILED, KNOWN, expected 41.284510993253
    test 41 f(-0.7)proLate.azi1: 51
    test 42 f(-0.7)proLate.azi2: 122.151604420253
    test 43 f(-0.7)proLate.lat1: 40.6
    test 44 f(-0.7)proLate.lat2: 44.0611144929705  FAILED, KNOWN, expected 44.0611144929704
    test 45 f(-0.7)proLate.lon1: -73.8
    test 46 f(-0.7)proLate.lon2: 22.642936371381
    test 47 f(-0.7)proLate.m12: 4556060.22546814
    test 48 f(-0.7)proLate.M12: 0.529204136691901  FAILED, KNOWN, expected 0.5292041366919
    test 49 f(-0.7)proLate.M21: 0.508852016715468  FAILED, KNOWN, expected 0.508852016715467
    test 50 f(-0.7)proLate.s12: 5500000
    test 51 f(-0.7)proLate.S12: 92958550148866.3  FAILED, KNOWN, expected 92958550148866.4

    test 52 f(-0.6)proLate.a12: 41.9855065431433
    test 53 f(-0.6)proLate.azi1: 51
    test 54 f(-0.6)proLate.azi2: 120.049569615163
    test 55 f(-0.6)proLate.lat1: 40.6
    test 56 f(-0.6)proLate.lat2: 45.0761455124556
    test 57 f(-0.6)proLate.lon1: -73.8
    test 58 f(-0.6)proLate.lon2: 19.3243907915446
    test 59 f(-0.6)proLate.m12: 4607523.91009243
    test 60 f(-0.6)proLate.M12: 0.553483535239664  FAILED, KNOWN, expected 0.553483535239665
    test 61 f(-0.6)proLate.M21: 0.531159755627539
    test 62 f(-0.6)proLate.s12: 5500000
    test 63 f(-0.6)proLate.S12: 84342570067148.5

    test 64 f(-0.5)proLate.a12: 42.7835406714305
    test 65 f(-0.5)proLate.azi1: 51
    test 66 f(-0.5)proLate.azi2: 117.89451986943
    test 67 f(-0.5)proLate.lat1: 40.6
    test 68 f(-0.5)proLate.lat2: 46.1086918613931
    test 69 f(-0.5)proLate.lon1: -73.8
    test 70 f(-0.5)proLate.lon2: 15.9398177760259
    test 71 f(-0.5)proLate.m12: 4656181.1495523
    test 72 f(-0.5)proLate.M12: 0.575884086565632
    test 73 f(-0.5)proLate.M21: 0.553184499769342
    test 74 f(-0.5)proLate.s12: 5500000
    test 75 f(-0.5)proLate.S12: 76020929892733.4

    test 76 f(-0.4)proLate.a12: 43.7036853028434
    test 77 f(-0.4)proLate.azi1: 51
    test 78 f(-0.4)proLate.azi2: 115.706685237732
    test 79 f(-0.4)proLate.lat1: 40.6
    test 80 f(-0.4)proLate.lat2: 47.1623837243428
    test 81 f(-0.4)proLate.lon1: -73.8
    test 82 f(-0.4)proLate.lon2: 12.5108734214613
    test 83 f(-0.4)proLate.m12: 4701617.48531727
    test 84 f(-0.4)proLate.M12: 0.596186986538198
    test 85 f(-0.4)proLate.M21: 0.57467855536679
    test 86 f(-0.4)proLate.s12: 5500000
    test 87 f(-0.4)proLate.S12: 68024911861224.7  FAILED, KNOWN, expected 68024911861224.8

    test 88 f(-0.3)proLate.a12: 44.7781429960549  FAILED, KNOWN, expected 44.778142996055
    test 89 f(-0.3)proLate.azi1: 51
    test 90 f(-0.3)proLate.azi2: 113.512221079884
    test 91 f(-0.3)proLate.lat1: 40.6
    test 92 f(-0.3)proLate.lat2: 48.2448394088334
    test 93 f(-0.3)proLate.lon1: -73.8
    test 94 f(-0.3)proLate.lon2: 9.06439641717132  FAILED, KNOWN, expected 9.06439641717141
    test 95 f(-0.3)proLate.m12: 4743418.11467171
    test 96 f(-0.3)proLate.M12: 0.614141109926639  FAILED, KNOWN, expected 0.614141109926638
    test 97 f(-0.3)proLate.M21: 0.595388570443548
    test 98 f(-0.3)proLate.s12: 5500000
    test 99 f(-0.3)proLate.S12: 60386769588050.1  FAILED, KNOWN, expected 60386769588050.2

    test 100 f(-0.2)proLate.a12: 46.0484287767579  FAILED, KNOWN, expected 46.0484287767578
    test 101 f(-0.2)proLate.azi1: 51
    test 102 f(-0.2)proLate.azi2: 111.343872400749
    test 103 f(-0.2)proLate.lat1: 40.6
    test 104 f(-0.2)proLate.lat2: 49.3693479292292
    test 105 f(-0.2)proLate.lon1: -73.8
    test 106 f(-0.2)proLate.lon2: 5.63252938443213  FAILED, KNOWN, expected 5.63252938443208
    test 107 f(-0.2)proLate.m12: 4781182.84779737
    test 108 f(-0.2)proLate.M12: 0.629452843380053
    test 109 f(-0.2)proLate.M21: 0.615074420205344  FAILED, KNOWN, expected 0.615074420205345
    test 110 f(-0.2)proLate.s12: 5500000
    test 111 f(-0.2)proLate.S12: 53138975764711

    test 112 f(-0.1)proLate.a12: 47.5682594059394
    test 113 f(-0.1)proLate.azi1: 51
    test 114 f(-0.1)proLate.azi2: 109.241628907367
    test 115 f(-0.1)proLate.lat1: 40.6
    test 116 f(-0.1)proLate.lat2: 50.5570087568933
    test 117 f(-0.1)proLate.lon1: -73.8
    test 118 f(-0.1)proLate.lon2: 2.25260962354908  FAILED, KNOWN, expected 2.2526096235491
    test 119 f(-0.1)proLate.m12: 4814553.53489422
    test 120 f(-0.1)proLate.M12: 0.641772419411799  FAILED, KNOWN, expected 0.641772419411798
    test 121 f(-0.1)proLate.M21: 0.633539030474701  FAILED, KNOWN, expected 0.6335390304747
    test 122 f(-0.1)proLate.s12: 5500000
    test 123 f(-0.1)proLate.S12: 46313407380218.5

    test 124 f(0.0)sphere.a12: 49.4073406265737
    test 125 f(0.0)sphere.azi1: 51
    test 126 f(0.0)sphere.azi2: 107.253441084194
    test 127 f(0.0)sphere.lat1: 40.6
    test 128 f(0.0)sphere.lat2: 51.8394367533853
    test 129 f(0.0)sphere.lon1: -73.8
    test 130 f(0.0)sphere.lon2: -1.03317283695992  FAILED, KNOWN, expected -1.03317283695991
    test 131 f(0.0)sphere.m12: 4843268.16188793
    test 132 f(0.0)sphere.M12: 0.650676935525673
    test 133 f(0.0)sphere.M21: 0.650676935525673
    test 134 f(0.0)sphere.s12: 5500000
    test 135 f(0.0)sphere.S12: 39940559879050  FAILED, KNOWN, expected 39940559879050.1

    test 136 f(0.1)obLate.a12: 51.6562009348442
    test 137 f(0.1)obLate.azi1: 51
    test 138 f(0.1)obLate.azi2: 105.436101360918
    test 139 f(0.1)obLate.lat1: 40.6
    test 140 f(0.1)obLate.lat2: 53.2621488352775
    test 141 f(0.1)obLate.lon1: -73.8
    test 142 f(0.1)obLate.lon2: -4.17831797695516  FAILED, KNOWN, expected -4.17831797695513
    test 143 f(0.1)obLate.m12: 4867271.01535067
    test 144 f(0.1)obLate.M12: 0.655652471115945
    test 145 f(0.1)obLate.M21: 0.666556146155552
    test 146 f(0.1)obLate.s12: 5500000
    test 147 f(0.1)obLate.S12: 34048882687460.5

    test 148 f(0.2)obLate.a12: 54.4319984205255
    test 149 f(0.2)obLate.azi1: 51
    test 150 f(0.2)obLate.azi2: 103.856359382499
    test 151 f(0.2)obLate.lat1: 40.6
    test 152 f(0.2)obLate.lat2: 54.8886869301292
    test 153 f(0.2)obLate.lon1: -73.8
    test 154 f(0.2)obLate.lon2: -7.13270532079328
    test 155 f(0.2)obLate.m12: 4886937.77404685
    test 156 f(0.2)obLate.M12: 0.65608338247866
    test 157 f(0.2)obLate.M21: 0.681558941812475
    test 158 f(0.2)obLate.s12: 5500000
    test 159 f(0.2)obLate.S12: 28664292324534.5

    test 160 f(0.3)obLate.a12: 57.8845459603904  FAILED, KNOWN, expected 57.8845459603905
    test 161 f(0.3)obLate.azi1: 51
    test 162 f(0.3)obLate.azi2: 102.592096849744
    test 163 f(0.3)obLate.lat1: 40.6
    test 164 f(0.3)obLate.lat2: 56.8052789737725
    test 165 f(0.3)obLate.lon1: -73.8
    test 166 f(0.3)obLate.lon2: -9.84339350245072  FAILED, KNOWN, expected -9.8433935024507
    test 167 f(0.3)obLate.m12: 4903527.26055769
    test 168 f(0.3)obLate.M12: 0.651269895561088
    test 169 f(0.3)obLate.M21: 0.696621153271262
    test 170 f(0.3)obLate.s12: 5500000
    test 171 f(0.3)obLate.S12: 23809838803598.7

    test 172 f(0.4)obLate.a12: 62.2000535802232
    test 173 f(0.4)obLate.azi1: 51
    test 174 f(0.4)obLate.azi2: 101.732620462068
    test 175 f(0.4)obLate.lat1: 40.6
    test 176 f(0.4)obLate.lat2: 59.1251996985707
    test 177 f(0.4)obLate.lon1: -73.8
    test 178 f(0.4)obLate.lon2: -12.2555967438742
    test 179 f(0.4)obLate.m12: 4920049.29725335
    test 180 f(0.4)obLate.M12: 0.640521897686656
    test 181 f(0.4)obLate.M21: 0.713612775606923
    test 182 f(0.4)obLate.s12: 5500000
    test 183 f(0.4)obLate.S12: 19505392269428.9

    test 184 f(0.5)obLate.a12: 67.5961360204058
    test 185 f(0.5)obLate.azi1: 51
    test 186 f(0.5)obLate.azi2: 101.375214059512
    test 187 f(0.5)obLate.lat1: 40.6
    test 188 f(0.5)obLate.lat2: 61.9908246599488
    test 189 f(0.5)obLate.lon1: -73.8
    test 190 f(0.5)obLate.lon2: -14.314173457934
    test 191 f(0.5)obLate.m12: 4942782.22410672
    test 192 f(0.5)obLate.M12: 0.62342153427984
    test 193 f(0.5)obLate.M21: 0.735840684527278
    test 194 f(0.5)obLate.s12: 5500000
    test 195 f(0.5)obLate.S12: 15767156271751.5

    test 196 f(0.6)obLate.a12: 74.293940742003
    test 197 f(0.6)obLate.azi1: 51
    test 198 f(0.6)obLate.azi2: 101.611122905479
    test 199 f(0.6)obLate.lat1: 40.6
    test 200 f(0.6)obLate.lat2: 65.570125882359
    test 201 f(0.6)obLate.lon1: -73.8
    test 202 f(0.6)obLate.lon2: -15.9664855590569
    test 203 f(0.6)obLate.m12: 4983385.70418856
    test 204 f(0.6)obLate.M12: 0.600385896682554
    test 205 f(0.6)obLate.M21: 0.768372005314339
    test 206 f(0.6)obLate.s12: 5500000
    test 207 f(0.6)obLate.S12: 12607032773613.6

    test 208 f(0.7)obLate.a12: 82.4416835202881
    test 209 f(0.7)obLate.azi1: 51
    test 210 f(0.7)obLate.azi2: 102.488060130252
    test 211 f(0.7)obLate.lat1: 40.6
    test 212 f(0.7)obLate.lat2: 70.0446694858328
    test 213 f(0.7)obLate.lon1: -73.8
    test 214 f(0.7)obLate.lon2: -17.1682178841074
    test 215 f(0.7)obLate.m12: 5059996.37065633
    test 216 f(0.7)obLate.M12: 0.573565786722513
    test 217 f(0.7)obLate.M21: 0.817099782347416
    test 218 f(0.7)obLate.s12: 5500000
    test 219 f(0.7)obLate.S12: 10032955148624.8

    test 220 f(0.8)obLate.a12: 91.9549069618778
    test 221 f(0.8)obLate.azi1: 51
    test 222 f(0.8)obLate.azi2: 103.932282361181
    test 223 f(0.8)obLate.lat1: 40.6
    test 224 f(0.8)obLate.lat2: 75.5867314102627
    test 225 f(0.8)obLate.lon1: -73.8
    test 226 f(0.8)obLate.lon2: -17.8943807275634  FAILED, KNOWN, expected -17.8943807275633
    test 227 f(0.8)obLate.m12: 5191227.434783
    test 228 f(0.8)obLate.M12: 0.54758812096158
    test 229 f(0.8)obLate.M21: 0.88423165114083
    test 230 f(0.8)obLate.s12: 5500000
    test 231 f(0.8)obLate.S12: 8054551454844.58

    test 232 f(0.9)obLate.a12: 102.246152032153
    test 233 f(0.9)obLate.azi1: 51
    test 234 f(0.9)obLate.azi2: 105.618016083621
    test 235 f(0.9)obLate.lat1: 40.6
    test 236 f(0.9)obLate.lat2: 82.2999319410311
    test 237 f(0.9)obLate.lon1: -73.8
    test 238 f(0.9)obLate.lon2: -18.1607604123893
    test 239 f(0.9)obLate.m12: 5370336.10833014
    test 240 f(0.9)obLate.M12: 0.528679454698809
    test 241 f(0.9)obLate.M21: 0.958073002020685  FAILED, KNOWN, expected 0.958073002020686
    test 242 f(0.9)obLate.s12: 5500000
    test 243 f(0.9)obLate.S12: 6706997024987.37

    test 244 _GeodesicLineExact: a13=49.475527, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), lat1=40.6, lon1=-73.8, s13=5500000.0
    test 245 GeodesicExact: GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594))
    test 246 _GeodesicLineExact: Direct9Tuple(a12=49.475527, lat2=51.884565, lon2=-1.141173, azi2=107.189397, s12=5500000.0, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 247 GeodesicExact: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}
    test 248 GeodesicExact: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 249 GeodesicExact: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, s12: 5500000.0}

    test 250 Geodesic: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}
    test 251 Geodesic: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, NAN, NAN, NAN, NAN)
    test 252 Geodesic: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: NAN, M12: NAN, M21: NAN, s12: 5500000.0, S12: NAN}

    test 253 GeodesicSolve: {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, m12: 4844148.703101, M12: 0.650911, M21: 0.651229, s12: 5500000.0, S12: 39735075134877.09375}
    test 254 GeodesicSolve: (49.475527, 51.884565, -1.141173, 107.189397, 5500000.0, 4844148.703101, 0.650911, 0.651229, 39735075134877.09375)
    test 255 GeodesicSolve: {a12: 49.475527, azi2: 107.189397, lat2: 51.884565, lon2: -1.141173, m12: 4844148.703101, M12: 0.650911, M21: 0.651229, s12: 5500000.0, S12: 39735075134877.09375}  FAILED, KNOWN, expected {a12: 49.475527, azi1: 51.0, azi2: 107.189397, lat1: 40.6, lat2: 51.884565, lon1: -73.8, lon2: -1.141173, m12: 4844148.703101, M12: 0.650911, M21: 0.651229, s12: 5500000.0, S12: 39735075134877.09375}

    test 256 ArcDirect.a12: 49.8
    test 257 ArcDirect.azi1: 51
    test 258 ArcDirect.azi2: 107.582082475406  FAILED, KNOWN, expected 107.5820825
    test 259 ArcDirect.lat1: 40.6
    test 260 ArcDirect.lat2: 51.7876866587893  FAILED, KNOWN, expected 51.7876867
    test 261 ArcDirect.lon1: -73.8
    test 262 ArcDirect.lon2: -0.641731343091337  FAILED, KNOWN, expected -0.641731
    test 263 ArcDirect.s12: 5536073.73439267  FAILED, KNOWN, expected 5536073.734393
    test 264 iteration: None

    test 265 ArcDirectLine: a13=49.8, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), lat1=40.6, lon1=-73.8, s13=5536073.734393
    test 266 iteration: None

    test 267 GeodesicLineExact: a13=NAN, azi1=51.0, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), lat1=40.6, lon1=-73.8, s13=NAN
    test 268 iteration: None

    testInverseX vs ...(pygeodesy.geodesicx, 23.04.04)
    test 269 C++X.a12: 49.941310217899
    test 270 C++X.azi1: 51.1988828455798
    test 271 C++X.azi2: 107.821776735514
    test 272 C++X.lat1: 40.6
    test 273 C++X.lat2: 51.6
    test 274 C++X.lon1: -73.8
    test 275 C++X.lon2: -0.5
    test 276 C++X.m12: 4877684.6027062
    test 277 C++X.M12: 0.644729692059482
    test 278 C++X.M21: 0.645045678521344
    test 279 C++X.s12: 5551759.40031868
    test 280 C++X.S12: 40041368848742.5
    test 281 iteration: 3

    test 282 Python.a12: 49.941310217899
    test 283 Python.azi1: 51.1988828455798
    test 284 Python.azi2: 107.821776735514
    test 285 Python.lat1: 40.6
    test 286 Python.lat2: 51.6
    test 287 Python.lon1: -73.8
    test 288 Python.lon2: -0.5
    test 289 Python.m12: 4877684.6027062
    test 290 Python.M12: 0.644729692059482
    test 291 Python.M21: 0.645045678521344
    test 292 Python.s12: 5551759.40031868
    test 293 Python.S12: 40041368848742.5
    test 294 iteration: None

    test 295 GeodSolve.a12: 49.941310217899
    test 296 GeodSolve.azi1: 51.1988828455798
    test 297 GeodSolve.azi2: 107.821776735514
    test 298 GeodSolve.lat1: 40.6
    test 299 GeodSolve.lat2: 51.6
    test 300 GeodSolve.lon1: -73.8
    test 301 GeodSolve.lon2: -0.5
    test 302 GeodSolve.m12: 4877684.6027062
    test 303 GeodSolve.M12: 0.644729692059482
    test 304 GeodSolve.M21: 0.645045678521344
    test 305 GeodSolve.s12: 5551759.40031868
    test 306 GeodSolve.S12: 40041368848742.5
    test 307 iteration: None

    test 308 f(-0.7)proLate.a12: 30.8498450229685
    test 309 f(-0.7)proLate.azi1: 46.8390771777767
    test 310 f(-0.7)proLate.azi2: 102.364845341617
    test 311 f(-0.7)proLate.lat1: 40.6
    test 312 f(-0.7)proLate.lat2: 51.6
    test 313 f(-0.7)proLate.lon1: -73.8
    test 314 f(-0.7)proLate.lon2: -0.5
    test 315 f(-0.7)proLate.m12: 3663075.31071237
    test 316 f(-0.7)proLate.M12: 0.731807954033609
    test 317 f(-0.7)proLate.M21: 0.696381877483542
    test 318 f(-0.7)proLate.s12: 4064374.7273353
    test 319 f(-0.7)proLate.S12: 71321909298423.2

    test 320 f(-0.6)proLate.a12: 32.624467259717
    test 321 f(-0.6)proLate.azi1: 47.2626025379604
    test 322 f(-0.6)proLate.azi2: 102.867650046856
    test 323 f(-0.6)proLate.lat1: 40.6
    test 324 f(-0.6)proLate.lat2: 51.6
    test 325 f(-0.6)proLate.lon1: -73.8
    test 326 f(-0.6)proLate.lon2: -0.5
    test 327 f(-0.6)proLate.m12: 3811547.14779174
    test 328 f(-0.6)proLate.M12: 0.725390840887561
    test 329 f(-0.6)proLate.M21: 0.692782702624977  FAILED, KNOWN, expected 0.692782702624978
    test 330 f(-0.6)proLate.s12: 4237106.26798553  FAILED, KNOWN, expected 4237106.26798552
    test 331 f(-0.6)proLate.S12: 67003980896186

    test 332 f(-0.5)proLate.a12: 34.6143539838512
    test 333 f(-0.5)proLate.azi1: 47.7400036902753
    test 334 f(-0.5)proLate.azi2: 103.43951372754
    test 335 f(-0.5)proLate.lat1: 40.6
    test 336 f(-0.5)proLate.lat2: 51.6
    test 337 f(-0.5)proLate.lon1: -73.8
    test 338 f(-0.5)proLate.lon2: -0.5
    test 339 f(-0.5)proLate.m12: 3968659.90647178
    test 340 f(-0.5)proLate.M12: 0.717750671080257
    test 341 f(-0.5)proLate.M21: 0.688437867237199  FAILED, KNOWN, expected 0.688437867237198
    test 342 f(-0.5)proLate.s12: 4421695.86157284
    test 343 f(-0.5)proLate.S12: 62647679908513.7

    test 344 f(-0.4)proLate.a12: 36.8617108475833
    test 345 f(-0.4)proLate.azi1: 48.2782940313591
    test 346 f(-0.4)proLate.azi2: 104.091557707465
    test 347 f(-0.4)proLate.lat1: 40.6
    test 348 f(-0.4)proLate.lat2: 51.6
    test 349 f(-0.4)proLate.lon1: -73.8
    test 350 f(-0.4)proLate.lon2: -0.5
    test 351 f(-0.4)proLate.m12: 4134433.86723881
    test 352 f(-0.4)proLate.M12: 0.708569458041405
    test 353 f(-0.4)proLate.M21: 0.683143770036343
    test 354 f(-0.4)proLate.s12: 4618861.32295257
    test 355 f(-0.4)proLate.S12: 58248979819324.2

    test 356 f(-0.3)proLate.a12: 39.420657884794
    test 357 f(-0.3)proLate.azi1: 48.8846677001672
    test 358 f(-0.3)proLate.azi2: 104.836563775286
    test 359 f(-0.3)proLate.lat1: 40.6
    test 360 f(-0.3)proLate.lat2: 51.6
    test 361 f(-0.3)proLate.lon1: -73.8
    test 362 f(-0.3)proLate.lon2: -0.5
    test 363 f(-0.3)proLate.m12: 4308600.98113564
    test 364 f(-0.3)proLate.M12: 0.697425644708898
    test 365 f(-0.3)proLate.M21: 0.676630205430697
    test 366 f(-0.3)proLate.s12: 4829239.13386067
    test 367 f(-0.3)proLate.S12: 53804526775605.1

    test 368 f(-0.2)proLate.a12: 42.3616492820545
    test 369 f(-0.2)proLate.azi1: 49.5658543493026
    test 370 f(-0.2)proLate.azi2: 105.689010365627
    test 371 f(-0.2)proLate.lat1: 40.6
    test 372 f(-0.2)proLate.lat2: 51.6
    test 373 f(-0.2)proLate.lon1: -73.8
    test 374 f(-0.2)proLate.lon2: -0.5
    test 375 f(-0.2)proLate.m12: 4490465.96891757
    test 376 f(-0.2)proLate.M12: 0.68375529812055
    test 377 f(-0.2)proLate.M21: 0.668536876326996
    test 378 f(-0.2)proLate.s12: 5053314.98382881
    test 379 f(-0.2)proLate.S12: 49312505255330.1

    test 380 f(-0.1)proLate.a12: 45.7778520084076
    test 381 f(-0.1)proLate.azi1: 50.3269341833279
    test 382 f(-0.1)proLate.azi2: 106.664955696455
    test 383 f(-0.1)proLate.lat1: 40.6
    test 384 f(-0.1)proLate.lat2: 51.6
    test 385 f(-0.1)proLate.lon1: -73.8
    test 386 f(-0.1)proLate.lon2: -0.5
    test 387 f(-0.1)proLate.m12: 4678718.41576326
    test 388 f(-0.1)proLate.M12: 0.666798996688209
    test 389 f(-0.1)proLate.M21: 0.658383098263921
    test 390 f(-0.1)proLate.s12: 5291321.5507197
    test 391 f(-0.1)proLate.S12: 44774044241120.1

    test 392 f(0.0)sphere.a12: 49.7943971585704
    test 393 f(0.0)sphere.azi1: 51.1692726724686
    test 394 f(0.0)sphere.azi2: 107.781686005324
    test 395 f(0.0)sphere.lat1: 40.6
    test 396 f(0.0)sphere.lat2: 51.6
    test 397 f(0.0)sphere.lon1: -73.8
    test 398 f(0.0)sphere.lon2: -0.5
    test 399 f(0.0)sphere.m12: 4871193.11191523
    test 400 f(0.0)sphere.M12: 0.645532374747016
    test 401 f(0.0)sphere.M21: 0.645532374747016
    test 402 f(0.0)sphere.s12: 5543086.93605008
    test 403 f(0.0)sphere.S12: 40195434111030.4

    test 404 f(0.1)obLate.a12: 54.5817311860469
    test 405 f(0.1)obLate.azi1: 52.0870591681387
    test 406 f(0.1)obLate.azi2: 109.057061572538
    test 407 f(0.1)obLate.lat1: 40.6
    test 408 f(0.1)obLate.lat2: 51.6
    test 409 f(0.1)obLate.lon1: -73.8
    test 410 f(0.1)obLate.lon2: -0.5
    test 411 f(0.1)obLate.m12: 5064606.53235912
    test 412 f(0.1)obLate.M12: 0.618585517999412
    test 413 f(0.1)obLate.M21: 0.629161725809447
    test 414 f(0.1)obLate.s12: 5807806.81178111
    test 415 f(0.1)obLate.S12: 35591517394916.9

    test 416 f(0.2)obLate.a12: 60.3743912113748
    test 417 f(0.2)obLate.azi1: 53.0617122520881
    test 418 f(0.2)obLate.azi2: 110.508586502508
    test 419 f(0.2)obLate.lat1: 40.6
    test 420 f(0.2)obLate.lat2: 51.6
    test 421 f(0.2)obLate.lon1: -73.8
    test 422 f(0.2)obLate.lon2: -0.5
    test 423 f(0.2)obLate.m12: 5254398.40150138
    test 424 f(0.2)obLate.M12: 0.58418152964186
    test 425 f(0.2)obLate.M21: 0.608269542318507
    test 426 f(0.2)obLate.s12: 6083696.88909233  FAILED, KNOWN, expected 6083696.88909232
    test 427 f(0.2)obLate.S12: 30990690116402.8

    test 428 f(0.3)obLate.a12: 67.495457095946
    test 429 f(0.3)obLate.azi1: 54.0532224017487
    test 430 f(0.3)obLate.azi2: 112.152465760492
    test 431 f(0.3)obLate.lat1: 40.6
    test 432 f(0.3)obLate.lat2: 51.6
    test 433 f(0.3)obLate.lon1: -73.8
    test 434 f(0.3)obLate.lon2: -0.5
    test 435 f(0.3)obLate.m12: 5435105.88682598
    test 436 f(0.3)obLate.M12: 0.540200055593844  FAILED, KNOWN, expected 0.540200055593843
    test 437 f(0.3)obLate.M21: 0.58182050999746
    test 438 f(0.3)obLate.s12: 6367459.71879628
    test 439 f(0.3)obLate.S12: 26441913266022.4

    test 440 f(0.4)obLate.a12: 76.3815180684531
    test 441 f(0.4)obLate.azi1: 54.9876967652191
    test 442 f(0.4)obLate.azi2: 114.003234978639
    test 443 f(0.4)obLate.lat1: 40.6
    test 444 f(0.4)obLate.lat2: 51.6
    test 445 f(0.4)obLate.lon1: -73.8
    test 446 f(0.4)obLate.lon2: -0.5
    test 447 f(0.4)obLate.m12: 5602495.83037188
    test 448 f(0.4)obLate.M12: 0.484674381110202  FAILED, KNOWN, expected 0.484674381110201
    test 449 f(0.4)obLate.M21: 0.549286273467489
    test 450 f(0.4)obLate.s12: 6653478.68267745
    test 451 f(0.4)obLate.S12: 22023748427134.9

    test 452 f(0.5)obLate.a12: 87.5840623039457
    test 453 f(0.5)obLate.azi1: 55.7424301998073
    test 454 f(0.5)obLate.azi2: 116.074074324746
    test 455 f(0.5)obLate.lat1: 40.6
    test 456 f(0.5)obLate.lat2: 51.6
    test 457 f(0.5)obLate.lon1: -73.8
    test 458 f(0.5)obLate.lon2: -0.5
    test 459 f(0.5)obLate.m12: 5760420.96055484
    test 460 f(0.5)obLate.M12: 0.417476669533173  FAILED, KNOWN, expected 0.417476669533174
    test 461 f(0.5)obLate.M21: 0.512154548261849
    test 462 f(0.5)obLate.s12: 6932661.04065593
    test 463 f(0.5)obLate.S12: 17854087370054.8

    test 464 f(0.6)obLate.a12: 101.672789393317
    test 465 f(0.6)obLate.azi1: 56.1390154131257
    test 466 f(0.6)obLate.azi2: 118.372753418033
    test 467 f(0.6)obLate.lat1: 40.6
    test 468 f(0.6)obLate.lat2: 51.6
    test 469 f(0.6)obLate.lon1: -73.8
    test 470 f(0.6)obLate.lon2: -0.5
    test 471 f(0.6)obLate.m12: 5936976.9392396
    test 472 f(0.6)obLate.M12: 0.344399833962436
    test 473 f(0.6)obLate.M21: 0.477141269812572
    test 474 f(0.6)obLate.s12: 7190974.04293755
    test 475 f(0.6)obLate.S12: 14095435741511.4

    test 476 f(0.7)obLate.a12: 118.899974433249
    test 477 f(0.7)obLate.azi1: 55.9822604941527
    test 478 f(0.7)obLate.azi2: 120.870267694794
    test 479 f(0.7)obLate.lat1: 40.6
    test 480 f(0.7)obLate.lat2: 51.6
    test 481 f(0.7)obLate.lon1: -73.8
    test 482 f(0.7)obLate.lon2: -0.5
    test 483 f(0.7)obLate.m12: 6204736.82362485
    test 484 f(0.7)obLate.M12: 0.282767834544914
    test 485 f(0.7)obLate.M21: 0.459629432484044
    test 486 f(0.7)obLate.s12: 7408209.3953438
    test 487 f(0.7)obLate.S12: 10942220257436

    test 488 f(0.8)obLate.a12: 138.654874707967
    test 489 f(0.8)obLate.azi1: 55.2084184735526
    test 490 f(0.8)obLate.azi2: 123.405114674792  FAILED, KNOWN, expected 123.405114674791
    test 491 f(0.8)obLate.lat1: 40.6
    test 492 f(0.8)obLate.lat2: 51.6
    test 493 f(0.8)obLate.lon1: -73.8
    test 494 f(0.8)obLate.lon2: -0.5
    test 495 f(0.8)obLate.m12: 6652110.16869957  FAILED, KNOWN, expected 6652110.16869956
    test 496 f(0.8)obLate.M12: 0.257661231584227  FAILED, KNOWN, expected 0.257661231584228
    test 497 f(0.8)obLate.M21: 0.47762576985866
    test 498 f(0.8)obLate.s12: 7559119.64995391  FAILED, KNOWN, expected 7559119.6499539
    test 499 f(0.8)obLate.S12: 8571969475833.52  FAILED, KNOWN, expected 8571969475833.49

    test 500 f(0.9)obLate.a12: 159.448156899958
    test 501 f(0.9)obLate.azi1: 54.0916012255364  FAILED, KNOWN, expected 54.0916012255363
    test 502 f(0.9)obLate.azi2: 125.571065515772
    test 503 f(0.9)obLate.lat1: 40.6
    test 504 f(0.9)obLate.lat2: 51.6
    test 505 f(0.9)obLate.lon1: -73.8
    test 506 f(0.9)obLate.lon2: -0.5
    test 507 f(0.9)obLate.m12: 7235195.22082337  FAILED, KNOWN, expected 7235195.22082338
    test 508 f(0.9)obLate.M12: 0.275665516678923
    test 509 f(0.9)obLate.M21: 0.527869883058878
    test 510 f(0.9)obLate.s12: 7622715.60282403
    test 511 f(0.9)obLate.S12: 7084875642239.09  FAILED, KNOWN, expected 7084875642239.11

    test 512 _GeodesicLineExact: _GeodesicLineExact(a13=49.94131, azi1=51.198883, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), lat1=40.6, lon1=-73.8, s13=5551759.400319)
    test 513 GeodesicExact: C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)
    test 514 _GeodesicLineExact: Direct9Tuple(a12=49.94131, lat2=51.6, lon2=-0.5, azi2=107.821777, s12=5551759.400319, m12=NAN, M12=NAN, M21=NAN, S12=NAN)

    test 515 GeodesicExact: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, s12=5551759.400319)
    test 516 GeodesicExact: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 517 GeodesicExact: {a12: 49.94131, azi1: NAN, azi2: NAN, calp1: NAN, calp2: NAN, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5551759.400319}

    test 518 Geodesic: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, calp1=0.626619, calp2=-0.306057, lon1=-73.8, lon2=-0.5, m12=NAN, M12=NAN, M21=NAN, s12=5551759.400319, S12=NAN, salp1=0.779326, salp2=0.952013)
    test 519 Geodesic: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=0.779326, calp1=0.626619, salp2=0.952013, calp2=-0.306057, m12=NAN, M12=NAN, M21=NAN, S12=NAN)
    test 520 Geodesic: {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: 0.779326, salp2: 0.952013}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, calp1: 0.626619, calp2: -0.306057, lon1: -73.8, lon2: -0.5, m12: NAN, M12: NAN, M21: NAN, s12: 5551759.400319, S12: NAN, salp1: 0.779326, salp2: 0.952013}

    test 521 GeodesicSolve: GDict(a12=49.94131, azi1=51.198883, azi2=107.821777, lat1=40.6, lat2=51.6, lon1=-73.8, lon2=-0.5, m12=4877684.602706, M12=0.64473, M21=0.645046, s12=5551759.400319, S12=40041368848742.53125)
    test 522 GeodesicSolve: Inverse10Tuple(a12=49.94131, s12=5551759.400319, salp1=NAN, calp1=NAN, salp2=NAN, calp2=NAN, m12=4877684.602706, M12=0.64473, M21=0.645046, S12=40041368848742.53125)
    test 523 GeodesicSolve: {a12: 49.94131, azi1: NAN, azi2: NAN, calp1: NAN, calp2: NAN, m12: 4877684.602706, M12: 0.64473, M21: 0.645046, s12: 5551759.400319, S12: 40041368848742.53125, salp1: NAN, salp2: NAN}  FAILED, KNOWN, expected {a12: 49.94131, azi1: 51.198883, azi2: 107.821777, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, m12: 4877684.602706, M12: 0.64473, M21: 0.645046, s12: 5551759.400319, S12: 40041368848742.53125}

    test 524 Inverse: {a12: 49.647855, azi1: 51.139649, azi2: 107.74164, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, s12: 5515844.227497}
    test 525 Inverse1: 49.647854761166144

    testPolygon24(pygeodesy.geodesicx, 23.04.04)
    test 526 Compute: (1, 0, 0)
    test 527 AddEdges: (4, 4000, 1000000)
    test 528 TestEdge: (5, 4000, 1000000)
    test 529 Clear: 0
    test 530 TestPoint: (1, 0, 0)
    test 531 AddPoints: (4, 29506941, 65690027591346)
    test 532 TestPoint: (5, 29506941, 65690027591346)
    test 533 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=24, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), num=4, perimeter=29506941.155178, polyline=False

    testPolygon27(pygeodesy.geodesicx, 23.04.04)
    test 534 Compute: (1, 0, 0)
    test 535 AddEdges: (4, 4000, 1000000)
    test 536 TestEdge: (5, 4000, 1000000)
    test 537 Clear: 0
    test 538 TestPoint: (1, 0, 0)
    test 539 AddPoints: (4, 29506941, 65690027591346)
    test 540 TestPoint: (5, 29506941, 65690027591346)
    test 541 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=27, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), num=4, perimeter=29506941.155178, polyline=False

    testPolygon30(pygeodesy.geodesicx, 23.04.04)
    test 542 Compute: (1, 0, 0)
    test 543 AddEdges: (4, 4000, 1000000)
    test 544 TestEdge: (5, 4000, 1000000)
    test 545 Clear: 0
    test 546 TestPoint: (1, 0, 0)
    test 547 AddPoints: (4, 29506941, 65690027591346)
    test 548 TestPoint: (5, 29506941, 65690027591346)
    test 549 toStr: area=65690027591345.671875, geodesic=GeodesicExact(C4order=30, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594)), num=4, perimeter=29506941.155178, polyline=False

    testPolygon(pygeodesy.geodsolve, 23.04.11)
    test 550 Compute: (1, 0, 0)
    test 551 AddEdges: (4, 4000, 1000000)
    test 552 TestEdge: (5, 4000, 1000000)
    test 553 Clear: 0
    test 554 TestPoint: (1, 0, 0)
    test 555 AddPoints: (4, 29506941, 65690027591346)
    test 556 TestPoint: (5, 29506941, 65690027591346)
    test 557 toStr: area=65690027591345.671875, geodesic=GeodesicSolve(ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), GeodSolve='/opt/local/bin/GeodSolve', invokation=17, status=0), num=4, perimeter=29506941.155178, polyline=False

    testPolygon(pygeodesy.geodesicw, 23.04.11)
    test 558 Compute: (1, 0, 0)
    test 559 AddEdges: (4, 4000, 1000000)
    test 560 TestEdge: (5, 4000, 1000000)
    test 561 Clear: None  FAILED, KNOWN, expected 0
    test 562 TestPoint: (1, 0, 0)
    test 563 AddPoints: (4, 29506941, 65690027591346)
    test 564 TestPoint: (5, 29506941, 65690027591346)

    50 of 564 testGeodesicx.py tests (8.9%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 2.024 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testGeohash.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.classname from .named by testGeohash.py line 11
# lazily imported pygeodesy.fstr from .streprs by testGeohash.py line 11
# lazily imported pygeodesy.geohash by testGeohash.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testGeohash.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testGeohash.py line 124

    testing testGeohash.py 23.03.27 (module pygeodesy.geohash 23.03.19) isLazy=3
    test 1 Geohash: geek
    test 2 Geohash: geek
    test 3 Geohash: 'geek'
    test 4 Geohash: Geohash('geek')
    test 5 Geohash: geek
    test 6 bounds: (LatLon(65°23′26.25″N, 017°55′46.88″W), LatLon(65°33′59.06″N, 017°34′41.25″W))
    test 7 toLatLon: 65.478516°N, 017.753906°W
    test 8 latlon: 65.4785156, -17.7539062
    test 9 philam: 1.1428157, -0.3098641
    test 10 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 11 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 12 Geohash: geehpbpbp
    test 13 toLatLon: 65.390625°N, 017.929689°W
    test 14 latlon: 65.390625, -17.929689
    test 15 ab: 1.1412817, -0.3129321
    test 16 decode: ('65.390646', '-17.929709')
    test 17 decode2: (65.390646, -17.929709)
    test 18 decode_error: 2.145767e-05, 2.145767e-05
    test 19 distance1To: 2758.887
    test 20 distance2To: 682.760
    test 21 distance3To: 397.404
    test 22 sizes: 4.8, 4.8
    test 23 copy(Geohash): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 24 Geohash.copy(): (<class 'pygeodesy.geohash.Geohash'>, True)
    test 25 N: geehpbpbr
    test 26 NE: geek00002
    test 27 E: geek00000
    test 28 SE: gee7bpbpb
    test 29 S: gee5zzzzz
    test 30 SW: gee5zzzzy
    test 31 W: geehpbpbn
    test 32 NW: geehpbpbq
    test 33 N: geehpbpbr
    test 34 NE: geek00002
    test 35 E: geek00000
    test 36 SE: gee7bpbpb
    test 37 S: gee5zzzzz
    test 38 SW: gee5zzzzy
    test 39 W: geehpbpbn
    test 40 NW: geehpbpbq
    test 41 N: geehpbpbr
    test 42 NE: geek00002
    test 43 E: geek00000
    test 44 SE: gee7bpbpb
    test 45 S: gee5zzzzz
    test 46 SW: gee5zzzzy
    test 47 W: geehpbpbn
    test 48 NW: geehpbpbq
    test 49 N: geehpbpbr
    test 50 NE: geek00002
    test 51 E: geek00000
    test 52 SE: gee7bpbpb
    test 53 S: gee5zzzzz
    test 54 SW: gee5zzzzy
    test 55 W: geehpbpbn
    test 56 NW: geehpbpbq
    test 57 bounds: 52.20428467, 0.11810303, 52.20565796, 0.11947632
    test 58 decode: 52.205, 0.1188
    test 59 encode-decode: u120fxw
    test 60 encode-decode: geek
    test 61 encode-decode: fur
    test 62 encode-decode: geehpbpbp
    test 63 encode-decode: u4pruydqqvj8
    test 64 encode-decode: bgr96qxvpd46
    test 65 encode-decode: 0123456789
    test 66 encode-decode: zzzzzz
    test 67 Geohash: u4pruydq
    test 68 N.E.S.W: True
    test 69 E.S.W.N: True
    test 70 S.W.N.E: True
    test 71 W.N.E.S: True
    test 72 N.E.S.S.W.W.N.N.E.S: True
    test 73 Geohash: u4pruydqq
    test 74 N.E.S.W: True
    test 75 E.S.W.N: True
    test 76 S.W.N.E: True
    test 77 W.N.E.S: True
    test 78 N.E.S.S.W.W.N.N.E.S: True
    test 79 Geohash: u4pruydqqv
    test 80 N.E.S.W: True
    test 81 E.S.W.N: True
    test 82 S.W.N.E: True
    test 83 W.N.E.S: True
    test 84 N.E.S.S.W.W.N.N.E.S: True
    test 85 Geohash: u4pruydqqvj
    test 86 N.E.S.W: True
    test 87 E.S.W.N: True
    test 88 S.W.N.E: True
    test 89 W.N.E.S: True
    test 90 N.E.S.S.W.W.N.N.E.S: True
    test 91 Geohash: u4pruydqqvj8
    test 92 N.E.S.W: True
    test 93 E.S.W.N: True
    test 94 S.W.N.E: True
    test 95 W.N.E.S: True
    test 96 N.E.S.S.W.W.N.N.E.S: True
    test 97 encode: u120fxw
    test 98 decode: ('52.205', '0.1188')
    test 99 decode2: (52.205, 0.1188)
    test 100 decode_error: 6.866455e-04, 6.866455e-04
    test 101 distance1: 486.710
    test 102 distance2: 3.374
    test 103 distance3: 2.798
    test 104 sizes: 153.0, 153.0
    test 105 Geohash: u336xv
    test 106 encode: u336xv
    test 107 equal: True
    test 108 sizes: 610.0, 1220.0
    test 109 encode: fur
    test 110 decode: ('69.6', '-45.7')
    test 111 decode: ('70.3', '-51')
    test 112 decode: ('68', '-68')
    test 113 decode_error: (0.703125, 0.703125)
    test 114 decode_error: (2.8125, 5.625)
    test 115 decode_error: (22.5, 22.5)
    test 116 encode: ezs42e44yx96
    test 117 decode: ('42.60000003', '-5.59999997')
    test 118 encode: ezs42
    test 119 decode: ('42.605', '-5.603')
    test 120 distance1: 503442.4
    test 121 distance2: 303317.6
    test 122 distance3: 179940.1
    test 123 precision: 0  FAILED, KNOWN, expected 1
    test 124 resolution: 360.0, 180.0
    test 125 precision: 1
    test 126 resolution: 45.0, 11.25
    test 127 precision: 2
    test 128 resolution: 11.25, 0.352
    test 129 precision: 3
    test 130 resolution: 1.4062, 0.011
    test 131 precision: 4
    test 132 resolution: 0.35156, 0.00034
    test 133 precision: 5
    test 134 resolution: 0.043945, 0.000011
    test 135 precision: 6
    test 136 resolution: 0.0109863, 0.0000003
    test 137 precision: 7
    test 138 resolution: 0.00137329, 0.00000001
    test 139 precision: 8
    test 140 resolution: 0.000343323, 0.0
    test 141 precision: 9
    test 142 resolution: 0.0000429153, 0.0
    test 143 precision: 10
    test 144 resolution: 0.00001072884, 0.0
    test 145 precision: 11
    test 146 resolution: 0.000001341105, 0.0
    test 147 precision: 12
    test 148 resolution: 0.0000003352761, 0.0
    test 149 precision: 13  FAILED, KNOWN, expected 12
    test 150 resolution: 0.00000033527613, 0.0

    2 of 150 testGeohash.py tests (1.3%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 35.439 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testGeoids.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.fstr from .streprs by testGeoids.py line 17
# lazily imported pygeodesy.len2 from .basics by testGeoids.py line 17
# lazily imported pygeodesy.egmGeoidHeights from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.Fwelford from .fstats by testGeoids.py line 17
# lazily imported pygeodesy.GeoidError from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidG2012B from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidKarney from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.GeoidPGM from .geoids by testGeoids.py line 17
# lazily imported pygeodesy.LatLon_ from .points by testGeoids.py line 17
# lazily imported pygeodesy.RangeError from .errors by testGeoids.py line 17
# lazily imported pygeodesy.reprs from .streprs by testGeoids.py line 17

    testing testGeoids.py 23.03.27 isLazy=3
    test 1 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 2: 11.422  FAILED, KNOWN, expected 11.423
    test 2 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 2: 0.887  FAILED, KNOWN, expected 0.892
    test 3 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 2: 65.226
    test 4 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 2: 24.460  FAILED, KNOWN, expected 24.463
    test 5 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 2: -29.682
    test 6 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 2: 10.503
    test 7 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 2: 29.325  FAILED, KNOWN, expected 29.326
    test 8 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 2: 60.423  FAILED, KNOWN, expected 60.424
    test 9 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 2: 68.997  FAILED, KNOWN, expected 68.996
    test 10 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 2: 36.295  FAILED, KNOWN, expected 36.287
    test 11 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 2: 6.627  FAILED, KNOWN, expected 6.626
    test 12 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 2: -20.860
    test 13 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 2: -3.266  FAILED, KNOWN, expected -3.267
    test 14 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 2: -1.296  FAILED, KNOWN, expected -1.294
    test 15 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 2: -2.322
    test 16 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 2: -17.556  FAILED, KNOWN, expected -17.557
    test 17 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 2: -16.594
    test 18 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 2: 24.455  FAILED, KNOWN, expected 24.453
    test 19 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 2: -18.591  FAILED, KNOWN, expected -18.592
    test 20 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 2: 44.051  FAILED, KNOWN, expected 44.049
    test 21 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 2: 18.582  FAILED, KNOWN, expected 18.581
    test 22 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 2: 44.290  FAILED, KNOWN, expected 44.289
    test 23 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 2: 49.821  FAILED, KNOWN, expected 49.816
    test 24 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 2: -36.108  FAILED, KNOWN, expected -36.114
    test 25 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 2: -41.046  FAILED, KNOWN, expected -41.048
    test 26 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 2: 26.457  FAILED, KNOWN, expected 26.456
    test 27 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 2: 49.309  FAILED, KNOWN, expected 49.317
    test 28 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 2: 20.706  FAILED, KNOWN, expected 20.714
    test 29 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 2: -7.363  FAILED, KNOWN, expected -7.362
    test 30 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 2: -16.499  FAILED, KNOWN, expected -16.492
    test 31 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 2: 18.108  FAILED, KNOWN, expected 18.110
    test 32 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 2: 51.859  FAILED, KNOWN, expected 51.858
    test 33 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 2: -38.979  FAILED, KNOWN, expected -38.981
    test 34 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 2: -9.912  FAILED, KNOWN, expected -9.913
    test 35 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 2: -2.827  FAILED, KNOWN, expected -2.828
    test 36 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 2: -5.719
    test 37 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 2: 22.420  FAILED, KNOWN, expected 22.426
    test 38 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 2: 24.546  FAILED, KNOWN, expected 24.545
    test 39 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 2: 40.651  FAILED, KNOWN, expected 40.652
    test 40 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 2: 22.380  FAILED, KNOWN, expected 22.383
    test 41 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 2: 22.185  FAILED, KNOWN, expected 22.182
    test 42 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 2: 14.927  FAILED, KNOWN, expected 14.930
    test 43 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 2: -47.093  FAILED, KNOWN, expected -47.094
    test 44 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 2: -18.421
    test 45 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 2: 10.060  FAILED, KNOWN, expected 10.055
    test 46 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 2: 5.784  FAILED, KNOWN, expected 5.786
    test 47 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 2: -22.840  FAILED, KNOWN, expected -22.838
    test 48 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 2: 42.988  FAILED, KNOWN, expected 42.989
    test 49 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 2: 15.351  FAILED, KNOWN, expected 15.353
    test 50 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 2: -6.341  FAILED, KNOWN, expected -6.337
    test 51 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 2: -25.551  FAILED, KNOWN, expected -25.555
    test 52 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 2: -9.921  FAILED, KNOWN, expected -9.923
    test 53 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 2: -10.861  FAILED, KNOWN, expected -10.852
    test 54 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 2: -0.136  FAILED, KNOWN, expected -0.135
    test 55 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 2: -43.808  FAILED, KNOWN, expected -43.809
    test 56 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 2: 57.151  FAILED, KNOWN, expected 57.150
    test 57 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 2: -17.660  FAILED, KNOWN, expected -17.657
    test 58 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 2: 46.356  FAILED, KNOWN, expected 46.358
    test 59 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 2: -14.404
    test 60 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 2: 11.239  FAILED, KNOWN, expected 11.242
    test 61 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 2: 42.236  FAILED, KNOWN, expected 42.237
    test 62 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 2: 22.148  FAILED, KNOWN, expected 22.147
    test 63 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 2: -33.395  FAILED, KNOWN, expected -33.396
    test 64 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 2: 7.965  FAILED, KNOWN, expected 7.961
    test 65 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 2: 7.228  FAILED, KNOWN, expected 7.229
    test 66 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 2: -44.289  FAILED, KNOWN, expected -44.292
    test 67 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 2: 21.872  FAILED, KNOWN, expected 21.875
    test 68 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 2: 28.935  FAILED, KNOWN, expected 28.933
    test 69 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 2: -41.255  FAILED, KNOWN, expected -41.238
    test 70 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 2: -31.334  FAILED, KNOWN, expected -31.331
    test 71 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 2: -32.702
    test 72 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 2: 60.118  FAILED, KNOWN, expected 60.117
    test 73 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 2: 6.456  FAILED, KNOWN, expected 6.457
    test 74 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 2: -31.959  FAILED, KNOWN, expected -31.961
    test 75 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 2: -26.572  FAILED, KNOWN, expected -26.571
    test 76 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 2: -29.761  FAILED, KNOWN, expected -29.760
    test 77 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 2: 21.980
    test 78 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 2: 16.849
    test 79 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 2: -20.922  FAILED, KNOWN, expected -20.923
    test 80 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 2: -42.745  FAILED, KNOWN, expected -42.749
    test 81 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 2: -21.839  FAILED, KNOWN, expected -21.841
    test 82 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 2: 25.482
    test 83 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 2: -8.845  FAILED, KNOWN, expected -8.847
    test 84 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 2: -19.600  FAILED, KNOWN, expected -19.604
    test 85 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 2: 25.672  FAILED, KNOWN, expected 25.668
    test 86 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 2: -3.772
    test 87 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 2: 17.747  FAILED, KNOWN, expected 17.748
    test 88 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 2: -17.838  FAILED, KNOWN, expected -17.839
    test 89 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 2: 14.293  FAILED, KNOWN, expected 14.292
    test 90 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 2: 16.529
    test 91 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 2: -8.230  FAILED, KNOWN, expected -8.229
    test 92 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 2: 9.828  FAILED, KNOWN, expected 9.830
    test 93 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 2: 6.213  FAILED, KNOWN, expected 6.215
    test 94 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 2: -2.957  FAILED, KNOWN, expected -2.960
    test 95 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 2: -42.326  FAILED, KNOWN, expected -42.323
    test 96 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 2: 38.352  FAILED, KNOWN, expected 38.356
    test 97 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 2: 34.242  FAILED, KNOWN, expected 34.259
    test 98 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 2: -37.390  FAILED, KNOWN, expected -37.397
    test 99 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 2: -2.015  FAILED, KNOWN, expected -2.016
    test 100 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 2: 33.915  FAILED, KNOWN, expected 33.912
    test 101 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 2: 12.676
    test 102 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 2: 15.729  FAILED, KNOWN, expected 15.692
    test 103 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 2: -11.117
    test 104 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 2: 27.443  FAILED, KNOWN, expected 27.437
    test 105 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 2: -23.893  FAILED, KNOWN, expected -23.894
    test 106 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 2: 18.749  FAILED, KNOWN, expected 18.766
    test 107 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 2: -7.452
    test 108 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 2: 30.141  FAILED, KNOWN, expected 30.143
    test 109 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 2: -61.176  FAILED, KNOWN, expected -61.172
    test 110 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 2: -24.892  FAILED, KNOWN, expected -24.890
    test 111 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 2: 39.523  FAILED, KNOWN, expected 39.519
    test 112 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 2: 19.417  FAILED, KNOWN, expected 19.419
    test 113 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 2: 2.069
    test 114 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 2: 25.048
    test 115 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 2: 22.547
    test 116 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 2: -34.359
    test 117 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 2: -5.454  FAILED, KNOWN, expected -5.453
    test 118 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 2: -6.802  FAILED, KNOWN, expected -6.804
    test 119 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 2: -35.053  FAILED, KNOWN, expected -35.054
    test 120 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 2: -15.417  FAILED, KNOWN, expected -15.418
    test 121 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 2: -79.556  FAILED, KNOWN, expected -79.557
    test 122 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 2: -16.894
    test 123 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 2: 36.213  FAILED, KNOWN, expected 36.215
    test 124 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 2: 3.524  FAILED, KNOWN, expected 3.523
    test 125 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 2: 23.796  FAILED, KNOWN, expected 23.797
    test 126 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 2: 51.587  FAILED, KNOWN, expected 51.586
    test 127 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 2: -30.131
    test 128 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 2: -51.853  FAILED, KNOWN, expected -51.848
    test 129 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 2: 37.200  FAILED, KNOWN, expected 37.192
    test 130 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 2: 63.583  FAILED, KNOWN, expected 63.597
    test 131 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 2: -62.636
    test 132 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 2: -8.717
    test 133 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 2: 40.649  FAILED, KNOWN, expected 40.645
    test 134 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 2: -60.730  FAILED, KNOWN, expected -60.729
    test 135 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 2: 8.784  FAILED, KNOWN, expected 8.783
    test 136 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 2: 31.569  FAILED, KNOWN, expected 31.523
    test 137 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 2: -6.249  FAILED, KNOWN, expected -6.250
    test 138 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 2: 32.599
    test 139 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 2: -24.531  FAILED, KNOWN, expected -24.536
    test 140 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 2: -38.863  FAILED, KNOWN, expected -38.869
    test 141 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 2: -23.214  FAILED, KNOWN, expected -23.213
    test 142 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 2: -11.824
    test 143 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 2: 16.712  FAILED, KNOWN, expected 16.709
    test 144 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 2: -22.380  FAILED, KNOWN, expected -22.379
    test 145 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 2: -4.941
    test 146 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 2: 19.382  FAILED, KNOWN, expected 19.394
    test 147 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 2: -9.381
    test 148 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 2: -23.319
    test 149 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 2: 24.470  FAILED, KNOWN, expected 24.468
    test 150 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 2: -21.762  FAILED, KNOWN, expected -21.761
    test 151 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 2: -18.798
    test 152 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 2: 12.611  FAILED, KNOWN, expected 12.612
    test 153 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 2: -19.708  FAILED, KNOWN, expected -19.706
    test 154 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 2: 45.794  FAILED, KNOWN, expected 45.792
    test 155 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 2: -8.408  FAILED, KNOWN, expected -8.406
    test 156 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 2: -8.366  FAILED, KNOWN, expected -8.367
    test 157 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 2: -2.026  FAILED, KNOWN, expected -2.025
    test 158 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 2: -16.569
    test 159 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 2: -35.434  FAILED, KNOWN, expected -35.435
    test 160 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 2: -39.009
    test 161 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 2: -6.921
    test 162 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 2: 50.811  FAILED, KNOWN, expected 50.795
    test 163 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 2: 1.069  FAILED, KNOWN, expected 1.070
    test 164 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 2: -14.198  FAILED, KNOWN, expected -14.214
    test 165 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 2: 17.603  FAILED, KNOWN, expected 17.600
    test 166 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 2: 44.803  FAILED, KNOWN, expected 44.804
    test 167 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 2: -17.924  FAILED, KNOWN, expected -17.922
    test 168 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 2: 10.681  FAILED, KNOWN, expected 10.662
    test 169 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 2: 7.672  FAILED, KNOWN, expected 7.670
    test 170 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 2: 8.622  FAILED, KNOWN, expected 8.623
    test 171 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 2: -60.723
    test 172 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 2: 3.818
    test 173 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 2: -1.870  FAILED, KNOWN, expected -1.871
    test 174 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 2: 30.642  FAILED, KNOWN, expected 30.633
    test 175 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 2: 2.801
    test 176 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 2: 19.858  FAILED, KNOWN, expected 19.859
    test 177 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 2: 5.347  FAILED, KNOWN, expected 5.348
    test 178 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 2: 9.940  FAILED, KNOWN, expected 9.941
    test 179 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 2: 22.322  FAILED, KNOWN, expected 22.321
    test 180 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 2: -24.136  FAILED, KNOWN, expected -24.135
    test 181 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 2: -17.680  FAILED, KNOWN, expected -17.679
    test 182 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 2: -37.149  FAILED, KNOWN, expected -37.150
    test 183 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 2: -61.158
    test 184 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 2: 20.600  FAILED, KNOWN, expected 20.602
    test 185 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 2: 13.054  FAILED, KNOWN, expected 13.055
    test 186 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 2: 40.138  FAILED, KNOWN, expected 40.132
    test 187 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 2: 43.263
    test 188 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 2: -23.129  FAILED, KNOWN, expected -23.126
    test 189 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 2: -20.677  FAILED, KNOWN, expected -20.678
    test 190 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 2: -8.531  FAILED, KNOWN, expected -8.529
    test 191 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 2: -8.669  FAILED, KNOWN, expected -8.666
    test 192 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 2: -12.798  FAILED, KNOWN, expected -12.796
    test 193 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 2: 15.770  FAILED, KNOWN, expected 15.773
    test 194 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 2: -19.955  FAILED, KNOWN, expected -19.954
    test 195 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 2: -31.479  FAILED, KNOWN, expected -31.480
    test 196 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 2: -17.428  FAILED, KNOWN, expected -17.429
    test 197 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 2: 24.037
    test 198 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 2: 4.522  FAILED, KNOWN, expected 4.520
    test 199 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 2: 11.403  FAILED, KNOWN, expected 11.394
    test 200 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 2: 5.676  FAILED, KNOWN, expected 5.679
    test 201 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 2: 28.705  FAILED, KNOWN, expected 28.707
    test 202 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 2: -30.261  FAILED, KNOWN, expected -30.262
    test 203 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 2: -15.984
    test 204 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 2: -18.636  FAILED, KNOWN, expected -18.635
    test 205 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 2: -37.749
    test 206 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 2: -26.691
    test 207 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 2: -39.561
    test 208 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 2: -22.563  FAILED, KNOWN, expected -22.562
    test 209 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 2: -30.012
    test 210 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 2: -48.039

    test 211 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.046496
    test 212 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.002766
    test 213 GeoidKarney('egm96-5.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.005116
    test 214 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 215 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 216 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 217 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 218 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 219 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 220 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 221 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 222 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 223 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 224 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 225 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 226 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 227 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 228 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 229 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 230 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 231 closed: True
    test 232 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 233 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 234 GeoidKarney('egm96-5.pgm').height(-76.981, 34.17) kind 3: 11.424  FAILED, KNOWN, expected 11.423
    test 235 GeoidKarney('egm96-5.pgm').height(79.695, 88.806) kind 3: 0.892
    test 236 GeoidKarney('egm96-5.pgm').height(-15.245, 168.748) kind 3: 65.225  FAILED, KNOWN, expected 65.226
    test 237 GeoidKarney('egm96-5.pgm').height(-19.379, 15.855) kind 3: 24.464  FAILED, KNOWN, expected 24.463
    test 238 GeoidKarney('egm96-5.pgm').height(43.378, -130.552) kind 3: -29.682
    test 239 GeoidKarney('egm96-5.pgm').height(-16.075, 21.795) kind 3: 10.503
    test 240 GeoidKarney('egm96-5.pgm').height(-11.256, -73.75) kind 3: 29.325  FAILED, KNOWN, expected 29.326
    test 241 GeoidKarney('egm96-5.pgm').height(69.017, -15.921) kind 3: 60.423  FAILED, KNOWN, expected 60.424
    test 242 GeoidKarney('egm96-5.pgm').height(2.221, 139.739) kind 3: 68.996
    test 243 GeoidKarney('egm96-5.pgm').height(-9.097, 119.142) kind 3: 36.287
    test 244 GeoidKarney('egm96-5.pgm').height(-28.524, -22.192) kind 3: 6.626
    test 245 GeoidKarney('egm96-5.pgm').height(12.272, -136.424) kind 3: -20.861  FAILED, KNOWN, expected -20.860
    test 246 GeoidKarney('egm96-5.pgm').height(-15.203, -85.604) kind 3: -3.267
    test 247 GeoidKarney('egm96-5.pgm').height(-63.736, -77.17) kind 3: -1.295  FAILED, KNOWN, expected -1.294
    test 248 GeoidKarney('egm96-5.pgm').height(-48.771, -90.102) kind 3: -2.323  FAILED, KNOWN, expected -2.322
    test 249 GeoidKarney('egm96-5.pgm').height(-0.179, -126.368) kind 3: -17.555  FAILED, KNOWN, expected -17.557
    test 250 GeoidKarney('egm96-5.pgm').height(1.586, -128.887) kind 3: -16.594
    test 251 GeoidKarney('egm96-5.pgm').height(-48.781, -2.684) kind 3: 24.454  FAILED, KNOWN, expected 24.453
    test 252 GeoidKarney('egm96-5.pgm').height(-49.092, 136.862) kind 3: -18.592
    test 253 GeoidKarney('egm96-5.pgm').height(47.732, 17.552) kind 3: 44.048  FAILED, KNOWN, expected 44.049
    test 254 GeoidKarney('egm96-5.pgm').height(-49.11, 85.706) kind 3: 18.582  FAILED, KNOWN, expected 18.581
    test 255 GeoidKarney('egm96-5.pgm').height(-49.162, 40.321) kind 3: 44.290  FAILED, KNOWN, expected 44.289
    test 256 GeoidKarney('egm96-5.pgm').height(3.498, 158.118) kind 3: 49.817  FAILED, KNOWN, expected 49.816
    test 257 GeoidKarney('egm96-5.pgm').height(-35.616, 122.648) kind 3: -36.114
    test 258 GeoidKarney('egm96-5.pgm').height(56.598, -96.114) kind 3: -41.047  FAILED, KNOWN, expected -41.048
    test 259 GeoidKarney('egm96-5.pgm').height(-31.85, 149.121) kind 3: 26.456
    test 260 GeoidKarney('egm96-5.pgm').height(-26.569, -177.792) kind 3: 49.317
    test 261 GeoidKarney('egm96-5.pgm').height(76.735, -65.753) kind 3: 20.714
    test 262 GeoidKarney('egm96-5.pgm').height(-21.404, -122.268) kind 3: -7.362
    test 263 GeoidKarney('egm96-5.pgm').height(-77.133, -65.474) kind 3: -16.491  FAILED, KNOWN, expected -16.492
    test 264 GeoidKarney('egm96-5.pgm').height(-58.812, 2.276) kind 3: 18.110
    test 265 GeoidKarney('egm96-5.pgm').height(4.415, 155.683) kind 3: 51.858
    test 266 GeoidKarney('egm96-5.pgm').height(-28.146, 107.081) kind 3: -38.979  FAILED, KNOWN, expected -38.981
    test 267 GeoidKarney('egm96-5.pgm').height(-10.551, -126.69) kind 3: -9.913
    test 268 GeoidKarney('egm96-5.pgm').height(-25.444, -103.337) kind 3: -2.828
    test 269 GeoidKarney('egm96-5.pgm').height(24.436, 46.159) kind 3: -5.718  FAILED, KNOWN, expected -5.719
    test 270 GeoidKarney('egm96-5.pgm').height(-72.889, 37.107) kind 3: 22.427  FAILED, KNOWN, expected 22.426
    test 271 GeoidKarney('egm96-5.pgm').height(-19.629, 13.245) kind 3: 24.545
    test 272 GeoidKarney('egm96-5.pgm').height(-7.602, 171.265) kind 3: 40.651  FAILED, KNOWN, expected 40.652
    test 273 GeoidKarney('egm96-5.pgm').height(-45.364, -1.876) kind 3: 22.383
    test 274 GeoidKarney('egm96-5.pgm').height(-7.292, -69.18) kind 3: 22.183  FAILED, KNOWN, expected 22.182
    test 275 GeoidKarney('egm96-5.pgm').height(-31.566, -166.689) kind 3: 14.929  FAILED, KNOWN, expected 14.930
    test 276 GeoidKarney('egm96-5.pgm').height(-82.751, -162.085) kind 3: -47.094
    test 277 GeoidKarney('egm96-5.pgm').height(-40.7, 99.466) kind 3: -18.421
    test 278 GeoidKarney('egm96-5.pgm').height(48.676, 39.69) kind 3: 10.055
    test 279 GeoidKarney('egm96-5.pgm').height(74.817, -78.404) kind 3: 5.786
    test 280 GeoidKarney('egm96-5.pgm').height(-81.032, -63.865) kind 3: -22.838
    test 281 GeoidKarney('egm96-5.pgm').height(74.022, 9.432) kind 3: 42.989
    test 282 GeoidKarney('egm96-5.pgm').height(-75.071, 17.579) kind 3: 15.352  FAILED, KNOWN, expected 15.353
    test 283 GeoidKarney('egm96-5.pgm').height(-12.546, -54.851) kind 3: -6.338  FAILED, KNOWN, expected -6.337
    test 284 GeoidKarney('egm96-5.pgm').height(-13.621, 42.408) kind 3: -25.554  FAILED, KNOWN, expected -25.555
    test 285 GeoidKarney('egm96-5.pgm').height(-2.266, -91.951) kind 3: -9.922  FAILED, KNOWN, expected -9.923
    test 286 GeoidKarney('egm96-5.pgm').height(-18.672, 42.547) kind 3: -10.853  FAILED, KNOWN, expected -10.852
    test 287 GeoidKarney('egm96-5.pgm').height(-41.44, 157.413) kind 3: -0.135
    test 288 GeoidKarney('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 289 GeoidKarney('egm96-5.pgm').height(39.26, -30.351) kind 3: 57.150
    test 290 GeoidKarney('egm96-5.pgm').height(-51.699, -141.493) kind 3: -17.656  FAILED, KNOWN, expected -17.657
    test 291 GeoidKarney('egm96-5.pgm').height(36.585, 4.515) kind 3: 46.359  FAILED, KNOWN, expected 46.358
    test 292 GeoidKarney('egm96-5.pgm').height(39.642, -54.659) kind 3: -14.404
    test 293 GeoidKarney('egm96-5.pgm').height(59.761, 166.567) kind 3: 11.242
    test 294 GeoidKarney('egm96-5.pgm').height(51.83, 13.357) kind 3: 42.237
    test 295 GeoidKarney('egm96-5.pgm').height(-36.531, -175.431) kind 3: 22.147
    test 296 GeoidKarney('egm96-5.pgm').height(-37.08, 125.264) kind 3: -33.396
    test 297 GeoidKarney('egm96-5.pgm').height(-68.651, 92.732) kind 3: 7.961
    test 298 GeoidKarney('egm96-5.pgm').height(35.087, 45.336) kind 3: 7.228  FAILED, KNOWN, expected 7.229
    test 299 GeoidKarney('egm96-5.pgm').height(-61.356, -169.379) kind 3: -44.290  FAILED, KNOWN, expected -44.292
    test 300 GeoidKarney('egm96-5.pgm').height(-36.955, 179.12) kind 3: 21.874  FAILED, KNOWN, expected 21.875
    test 301 GeoidKarney('egm96-5.pgm').height(10.248, -6.714) kind 3: 28.933
    test 302 GeoidKarney('egm96-5.pgm').height(36.868, 84.602) kind 3: -41.238
    test 303 GeoidKarney('egm96-5.pgm').height(28.637, 88.933) kind 3: -31.331
    test 304 GeoidKarney('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 305 GeoidKarney('egm96-5.pgm').height(7.611, 145.911) kind 3: 60.117
    test 306 GeoidKarney('egm96-5.pgm').height(59.412, 170.102) kind 3: 6.457
    test 307 GeoidKarney('egm96-5.pgm').height(-61.469, 126.144) kind 3: -31.961
    test 308 GeoidKarney('egm96-5.pgm').height(18.514, -137.083) kind 3: -26.572  FAILED, KNOWN, expected -26.571
    test 309 GeoidKarney('egm96-5.pgm').height(7.854, -126.799) kind 3: -29.761  FAILED, KNOWN, expected -29.760
    test 310 GeoidKarney('egm96-5.pgm').height(47.489, 134.183) kind 3: 21.981  FAILED, KNOWN, expected 21.980
    test 311 GeoidKarney('egm96-5.pgm').height(-34.144, -11.922) kind 3: 16.849
    test 312 GeoidKarney('egm96-5.pgm').height(-58.389, 117.458) kind 3: -20.923
    test 313 GeoidKarney('egm96-5.pgm').height(9.773, 95.846) kind 3: -42.749
    test 314 GeoidKarney('egm96-5.pgm').height(-53.12, 136.994) kind 3: -21.840  FAILED, KNOWN, expected -21.841
    test 315 GeoidKarney('egm96-5.pgm').height(-50.35, 0.075) kind 3: 25.481  FAILED, KNOWN, expected 25.482
    test 316 GeoidKarney('egm96-5.pgm').height(31.438, -170.879) kind 3: -8.846  FAILED, KNOWN, expected -8.847
    test 317 GeoidKarney('egm96-5.pgm').height(37.541, -153.024) kind 3: -19.603  FAILED, KNOWN, expected -19.604
    test 318 GeoidKarney('egm96-5.pgm').height(27.586, 2.444) kind 3: 25.668
    test 319 GeoidKarney('egm96-5.pgm').height(-26.139, -106.201) kind 3: -3.772
    test 320 GeoidKarney('egm96-5.pgm').height(-33.426, -14.84) kind 3: 17.747  FAILED, KNOWN, expected 17.748
    test 321 GeoidKarney('egm96-5.pgm').height(39.586, -153.019) kind 3: -17.838  FAILED, KNOWN, expected -17.839
    test 322 GeoidKarney('egm96-5.pgm').height(-60.79, -2.578) kind 3: 14.292
    test 323 GeoidKarney('egm96-5.pgm').height(-20.131, 21.975) kind 3: 16.529
    test 324 GeoidKarney('egm96-5.pgm').height(75.649, 99.921) kind 3: -8.230  FAILED, KNOWN, expected -8.229
    test 325 GeoidKarney('egm96-5.pgm').height(-0.385, -23.788) kind 3: 9.831  FAILED, KNOWN, expected 9.830
    test 326 GeoidKarney('egm96-5.pgm').height(-51.56, -50.327) kind 3: 6.215
    test 327 GeoidKarney('egm96-5.pgm').height(-43.129, -167.271) kind 3: -2.960
    test 328 GeoidKarney('egm96-5.pgm').height(46.374, 71.948) kind 3: -42.323
    test 329 GeoidKarney('egm96-5.pgm').height(-22.783, 140.657) kind 3: 38.356
    test 330 GeoidKarney('egm96-5.pgm').height(-12.056, 122.804) kind 3: 34.259
    test 331 GeoidKarney('egm96-5.pgm').height(30.127, 94.738) kind 3: -37.397
    test 332 GeoidKarney('egm96-5.pgm').height(46.296, -174.479) kind 3: -2.017  FAILED, KNOWN, expected -2.016
    test 333 GeoidKarney('egm96-5.pgm').height(34.99, 15.052) kind 3: 33.912
    test 334 GeoidKarney('egm96-5.pgm').height(-51.287, 90.565) kind 3: 12.676
    test 335 GeoidKarney('egm96-5.pgm').height(34.217, 141.302) kind 3: 15.692
    test 336 GeoidKarney('egm96-5.pgm').height(-40.423, -142.787) kind 3: -11.117
    test 337 GeoidKarney('egm96-5.pgm').height(-17.854, -170.216) kind 3: 27.437
    test 338 GeoidKarney('egm96-5.pgm').height(47.803, 112.701) kind 3: -23.894
    test 339 GeoidKarney('egm96-5.pgm').height(-23.276, 133.454) kind 3: 18.765  FAILED, KNOWN, expected 18.766
    test 340 GeoidKarney('egm96-5.pgm').height(-26.884, -36.571) kind 3: -7.452
    test 341 GeoidKarney('egm96-5.pgm').height(-37.106, 31.128) kind 3: 30.143
    test 342 GeoidKarney('egm96-5.pgm').height(-75.363, -173.674) kind 3: -61.172
    test 343 GeoidKarney('egm96-5.pgm').height(-18.305, 69.016) kind 3: -24.890
    test 344 GeoidKarney('egm96-5.pgm').height(39.527, 23.58) kind 3: 39.519
    test 345 GeoidKarney('egm96-5.pgm').height(68.903, 30.97) kind 3: 19.420  FAILED, KNOWN, expected 19.419
    test 346 GeoidKarney('egm96-5.pgm').height(53.937, 168.318) kind 3: 2.067  FAILED, KNOWN, expected 2.069
    test 347 GeoidKarney('egm96-5.pgm').height(-38.6, 64.812) kind 3: 25.049  FAILED, KNOWN, expected 25.048
    test 348 GeoidKarney('egm96-5.pgm').height(-41.396, -69.739) kind 3: 22.546  FAILED, KNOWN, expected 22.547
    test 349 GeoidKarney('egm96-5.pgm').height(50.158, 72.319) kind 3: -34.358  FAILED, KNOWN, expected -34.359
    test 350 GeoidKarney('egm96-5.pgm').height(27.692, 176.153) kind 3: -5.454  FAILED, KNOWN, expected -5.453
    test 351 GeoidKarney('egm96-5.pgm').height(-48.419, 170.454) kind 3: -6.804
    test 352 GeoidKarney('egm96-5.pgm').height(-65.346, -124.976) kind 3: -35.053  FAILED, KNOWN, expected -35.054
    test 353 GeoidKarney('egm96-5.pgm').height(-51.873, 167.266) kind 3: -15.417  FAILED, KNOWN, expected -15.418
    test 354 GeoidKarney('egm96-5.pgm').height(-7.263, 84.308) kind 3: -79.557
    test 355 GeoidKarney('egm96-5.pgm').height(-1.461, -105.458) kind 3: -16.894
    test 356 GeoidKarney('egm96-5.pgm').height(7.684, 161.873) kind 3: 36.215
    test 357 GeoidKarney('egm96-5.pgm').height(-31.475, -158.52) kind 3: 3.523
    test 358 GeoidKarney('egm96-5.pgm').height(-36.187, 62.917) kind 3: 23.797
    test 359 GeoidKarney('egm96-5.pgm').height(16.003, 141.687) kind 3: 51.587  FAILED, KNOWN, expected 51.586
    test 360 GeoidKarney('egm96-5.pgm').height(30.182, 86.261) kind 3: -30.131
    test 361 GeoidKarney('egm96-5.pgm').height(-77.304, 159.498) kind 3: -51.849  FAILED, KNOWN, expected -51.848
    test 362 GeoidKarney('egm96-5.pgm').height(39.536, 139.795) kind 3: 37.191  FAILED, KNOWN, expected 37.192
    test 363 GeoidKarney('egm96-5.pgm').height(8.569, 134.618) kind 3: 63.596  FAILED, KNOWN, expected 63.597
    test 364 GeoidKarney('egm96-5.pgm').height(14.473, 90.596) kind 3: -62.636
    test 365 GeoidKarney('egm96-5.pgm').height(-13.138, -99.589) kind 3: -8.718  FAILED, KNOWN, expected -8.717
    test 366 GeoidKarney('egm96-5.pgm').height(34.212, -26.307) kind 3: 40.645
    test 367 GeoidKarney('egm96-5.pgm').height(21.89, 76.371) kind 3: -60.729
    test 368 GeoidKarney('egm96-5.pgm').height(29.793, 120.487) kind 3: 8.784  FAILED, KNOWN, expected 8.783
    test 369 GeoidKarney('egm96-5.pgm').height(15.724, 122.714) kind 3: 31.523
    test 370 GeoidKarney('egm96-5.pgm').height(-66.208, -78.499) kind 3: -6.251  FAILED, KNOWN, expected -6.250
    test 371 GeoidKarney('egm96-5.pgm').height(-39.507, 55.809) kind 3: 32.598  FAILED, KNOWN, expected 32.599
    test 372 GeoidKarney('egm96-5.pgm').height(28.159, 51.476) kind 3: -24.536
    test 373 GeoidKarney('egm96-5.pgm').height(-36.207, 120.205) kind 3: -38.869
    test 374 GeoidKarney('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.212  FAILED, KNOWN, expected -23.213
    test 375 GeoidKarney('egm96-5.pgm').height(-16.993, 37.136) kind 3: -11.824
    test 376 GeoidKarney('egm96-5.pgm').height(-11.477, 12.039) kind 3: 16.710  FAILED, KNOWN, expected 16.709
    test 377 GeoidKarney('egm96-5.pgm').height(30.428, -144.765) kind 3: -22.378  FAILED, KNOWN, expected -22.379
    test 378 GeoidKarney('egm96-5.pgm').height(-17.44, -92.424) kind 3: -4.941
    test 379 GeoidKarney('egm96-5.pgm').height(40.203, 143.43) kind 3: 19.394
    test 380 GeoidKarney('egm96-5.pgm').height(-37.098, -106.574) kind 3: -9.381
    test 381 GeoidKarney('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 382 GeoidKarney('egm96-5.pgm').height(-31.633, 148.182) kind 3: 24.467  FAILED, KNOWN, expected 24.468
    test 383 GeoidKarney('egm96-5.pgm').height(-56.07, -141.407) kind 3: -21.761
    test 384 GeoidKarney('egm96-5.pgm').height(-8.195, -52.691) kind 3: -18.798
    test 385 GeoidKarney('egm96-5.pgm').height(17.851, 24.749) kind 3: 12.612
    test 386 GeoidKarney('egm96-5.pgm').height(0.349, -108.333) kind 3: -19.708  FAILED, KNOWN, expected -19.706
    test 387 GeoidKarney('egm96-5.pgm').height(15.038, 126.191) kind 3: 45.792
    test 388 GeoidKarney('egm96-5.pgm').height(-21.111, -123.696) kind 3: -8.406
    test 389 GeoidKarney('egm96-5.pgm').height(30.947, 173.002) kind 3: -8.367
    test 390 GeoidKarney('egm96-5.pgm').height(-10.698, -144.091) kind 3: -2.026  FAILED, KNOWN, expected -2.025
    test 391 GeoidKarney('egm96-5.pgm').height(-29.412, 124.753) kind 3: -16.567  FAILED, KNOWN, expected -16.569
    test 392 GeoidKarney('egm96-5.pgm').height(38.224, -137.189) kind 3: -35.435
    test 393 GeoidKarney('egm96-5.pgm').height(36.064, -132.409) kind 3: -39.008  FAILED, KNOWN, expected -39.009
    test 394 GeoidKarney('egm96-5.pgm').height(29.975, 178.076) kind 3: -6.921
    test 395 GeoidKarney('egm96-5.pgm').height(-21.346, 169.26) kind 3: 50.795
    test 396 GeoidKarney('egm96-5.pgm').height(49.282, -152.934) kind 3: 1.071  FAILED, KNOWN, expected 1.070
    test 397 GeoidKarney('egm96-5.pgm').height(16.349, -99.962) kind 3: -14.214
    test 398 GeoidKarney('egm96-5.pgm').height(-14.293, -167.34) kind 3: 17.600
    test 399 GeoidKarney('egm96-5.pgm').height(47.166, -38.523) kind 3: 44.803  FAILED, KNOWN, expected 44.804
    test 400 GeoidKarney('egm96-5.pgm').height(-58.911, 114.347) kind 3: -17.923  FAILED, KNOWN, expected -17.922
    test 401 GeoidKarney('egm96-5.pgm').height(-9.055, 111.294) kind 3: 10.662
    test 402 GeoidKarney('egm96-5.pgm').height(18.391, 29.692) kind 3: 7.670
    test 403 GeoidKarney('egm96-5.pgm').height(-15.074, 22.153) kind 3: 8.624  FAILED, KNOWN, expected 8.623
    test 404 GeoidKarney('egm96-5.pgm').height(-4.235, 62.001) kind 3: -60.722  FAILED, KNOWN, expected -60.723
    test 405 GeoidKarney('egm96-5.pgm').height(15.171, -86.583) kind 3: 3.820  FAILED, KNOWN, expected 3.818
    test 406 GeoidKarney('egm96-5.pgm').height(79.254, 112.116) kind 3: -1.871
    test 407 GeoidKarney('egm96-5.pgm').height(15.947, 156.093) kind 3: 30.634  FAILED, KNOWN, expected 30.633
    test 408 GeoidKarney('egm96-5.pgm').height(68.371, -177.382) kind 3: 2.800  FAILED, KNOWN, expected 2.801
    test 409 GeoidKarney('egm96-5.pgm').height(-41.931, -72.093) kind 3: 19.858  FAILED, KNOWN, expected 19.859
    test 410 GeoidKarney('egm96-5.pgm').height(-1.193, -143.133) kind 3: 5.347  FAILED, KNOWN, expected 5.348
    test 411 GeoidKarney('egm96-5.pgm').height(-37.006, 154.513) kind 3: 9.941
    test 412 GeoidKarney('egm96-5.pgm').height(-22.148, 9.938) kind 3: 22.322  FAILED, KNOWN, expected 22.321
    test 413 GeoidKarney('egm96-5.pgm').height(24.329, 109.044) kind 3: -24.135
    test 414 GeoidKarney('egm96-5.pgm').height(-54.878, 114.691) kind 3: -17.680  FAILED, KNOWN, expected -17.679
    test 415 GeoidKarney('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 416 GeoidKarney('egm96-5.pgm').height(2.372, 58.974) kind 3: -61.158
    test 417 GeoidKarney('egm96-5.pgm').height(15.937, 165.854) kind 3: 20.603  FAILED, KNOWN, expected 20.602
    test 418 GeoidKarney('egm96-5.pgm').height(4.889, -24.213) kind 3: 13.056  FAILED, KNOWN, expected 13.055
    test 419 GeoidKarney('egm96-5.pgm').height(-11.392, 179.558) kind 3: 40.133  FAILED, KNOWN, expected 40.132
    test 420 GeoidKarney('egm96-5.pgm').height(58.246, 4.862) kind 3: 43.263
    test 421 GeoidKarney('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 422 GeoidKarney('egm96-5.pgm').height(-58.196, 117.306) kind 3: -20.678
    test 423 GeoidKarney('egm96-5.pgm').height(44.5, 173.769) kind 3: -8.530  FAILED, KNOWN, expected -8.529
    test 424 GeoidKarney('egm96-5.pgm').height(-28.863, -139.775) kind 3: -8.666
    test 425 GeoidKarney('egm96-5.pgm').height(19.507, -96.099) kind 3: -12.795  FAILED, KNOWN, expected -12.796
    test 426 GeoidKarney('egm96-5.pgm').height(-42.488, -73.907) kind 3: 15.774  FAILED, KNOWN, expected 15.773
    test 427 GeoidKarney('egm96-5.pgm').height(46.138, -141.429) kind 3: -19.955  FAILED, KNOWN, expected -19.954
    test 428 GeoidKarney('egm96-5.pgm').height(60.507, 93.743) kind 3: -31.480
    test 429 GeoidKarney('egm96-5.pgm').height(26.219, -145.434) kind 3: -17.428  FAILED, KNOWN, expected -17.429
    test 430 GeoidKarney('egm96-5.pgm').height(-28.687, 3.37) kind 3: 24.037
    test 431 GeoidKarney('egm96-5.pgm').height(-15.008, 117.45) kind 3: 4.519  FAILED, KNOWN, expected 4.520
    test 432 GeoidKarney('egm96-5.pgm').height(40.71, 144.095) kind 3: 11.393  FAILED, KNOWN, expected 11.394
    test 433 GeoidKarney('egm96-5.pgm').height(20.823, -173.611) kind 3: 5.678  FAILED, KNOWN, expected 5.679
    test 434 GeoidKarney('egm96-5.pgm').height(16.776, -3.009) kind 3: 28.707
    test 435 GeoidKarney('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 436 GeoidKarney('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 437 GeoidKarney('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.635
    test 438 GeoidKarney('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 439 GeoidKarney('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 440 GeoidKarney('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 441 GeoidKarney('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.562
    test 442 GeoidKarney('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 443 GeoidKarney('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 444 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001756
    test 445 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000524
    test 446 GeoidKarney('egm96-5.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000371
    test 447 GeoidKarney('egm96-5.pgm').highest(): -8.167, 147.25, 85.422
    test 448 GeoidKarney('egm96-5.pgm').lowerleft(): -90.0, -180.0, -29.535
    test 449 GeoidKarney('egm96-5.pgm').lowerright(): -90.0, 180.0, -29.535
    test 450 GeoidKarney('egm96-5.pgm').lowest(): 4.667, 78.833, -107.043
    test 451 GeoidKarney('egm96-5.pgm').upperleft(): 90.0, -180.0, 13.605
    test 452 GeoidKarney('egm96-5.pgm').upperright(): 90.0, 180.0, 13.605
    test 453 GeoidKarney('egm96-5.pgm').dtype: ("'ushort'",)
    test 454 GeoidKarney('egm96-5.pgm').knots: ('9335520',)
    test 455 GeoidKarney('egm96-5.pgm').mean: ('-1.317',)
    test 456 GeoidKarney('egm96-5.pgm').nBytes: ('None',)
    test 457 GeoidKarney('egm96-5.pgm').smooth: ('None',)
    test 458 GeoidKarney('egm96-5.pgm').stdev: ('29.244',)
    test 459 GeoidKarney('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 460 GeoidKarney('egm96-5.pgm')._ll2g2(180, 360): (180, 360)
    test 461 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 462 GeoidKarney('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 463 GeoidKarney('egm96-5.pgm').toStr: GeoidKarney('egm96-5.pgm'): lowerleft(-90.0, -180.0, -29.535), upperright(90.0, 180.0, 13.605), center(0.0, 0.0, 17.163), highest(-8.167, 147.25, 85.422), lowest(4.667, 78.833, -107.043)

    test 464 closed: True
    test 465 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 466 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 467 GeoidPGM('egm96-5.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 11.423
    test 468 GeoidPGM('egm96-5.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.892
    test 469 GeoidPGM('egm96-5.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 65.226
    test 470 GeoidPGM('egm96-5.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 24.463
    test 471 GeoidPGM('egm96-5.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -29.682
    test 472 GeoidPGM('egm96-5.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 10.503
    test 473 GeoidPGM('egm96-5.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 29.326
    test 474 GeoidPGM('egm96-5.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 60.424
    test 475 GeoidPGM('egm96-5.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 68.996
    test 476 GeoidPGM('egm96-5.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 36.287
    test 477 GeoidPGM('egm96-5.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 6.626
    test 478 GeoidPGM('egm96-5.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.860
    test 479 GeoidPGM('egm96-5.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.267
    test 480 GeoidPGM('egm96-5.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -1.294
    test 481 GeoidPGM('egm96-5.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -2.322
    test 482 GeoidPGM('egm96-5.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -17.557
    test 483 GeoidPGM('egm96-5.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -16.594
    test 484 GeoidPGM('egm96-5.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 24.453
    test 485 GeoidPGM('egm96-5.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.592
    test 486 GeoidPGM('egm96-5.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 44.049
    test 487 GeoidPGM('egm96-5.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.581
    test 488 GeoidPGM('egm96-5.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.289
    test 489 GeoidPGM('egm96-5.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 49.816
    test 490 GeoidPGM('egm96-5.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -36.114
    test 491 GeoidPGM('egm96-5.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -41.048
    test 492 GeoidPGM('egm96-5.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 26.456
    test 493 GeoidPGM('egm96-5.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.317
    test 494 GeoidPGM('egm96-5.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 20.714
    test 495 GeoidPGM('egm96-5.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -7.362
    test 496 GeoidPGM('egm96-5.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -16.492
    test 497 GeoidPGM('egm96-5.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.110
    test 498 GeoidPGM('egm96-5.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 51.858
    test 499 GeoidPGM('egm96-5.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -38.981
    test 500 GeoidPGM('egm96-5.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.913
    test 501 GeoidPGM('egm96-5.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.828
    test 502 GeoidPGM('egm96-5.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -5.719
    test 503 GeoidPGM('egm96-5.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 22.426
    test 504 GeoidPGM('egm96-5.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 24.545
    test 505 GeoidPGM('egm96-5.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 40.652
    test 506 GeoidPGM('egm96-5.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 22.383
    test 507 GeoidPGM('egm96-5.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 22.182
    test 508 GeoidPGM('egm96-5.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.930
    test 509 GeoidPGM('egm96-5.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -47.094
    test 510 GeoidPGM('egm96-5.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -18.421
    test 511 GeoidPGM('egm96-5.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 10.055
    test 512 GeoidPGM('egm96-5.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 5.786
    test 513 GeoidPGM('egm96-5.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -22.838
    test 514 GeoidPGM('egm96-5.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 42.989
    test 515 GeoidPGM('egm96-5.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 15.353
    test 516 GeoidPGM('egm96-5.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -6.337
    test 517 GeoidPGM('egm96-5.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -25.555
    test 518 GeoidPGM('egm96-5.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -9.923
    test 519 GeoidPGM('egm96-5.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.852
    test 520 GeoidPGM('egm96-5.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected -0.135
    test 521 GeoidPGM('egm96-5.pgm').height(53.686, -79.375) kind 3: -43.809
    test 522 GeoidPGM('egm96-5.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.150
    test 523 GeoidPGM('egm96-5.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -17.657
    test 524 GeoidPGM('egm96-5.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 46.358
    test 525 GeoidPGM('egm96-5.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -14.404
    test 526 GeoidPGM('egm96-5.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.242
    test 527 GeoidPGM('egm96-5.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.237
    test 528 GeoidPGM('egm96-5.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.147
    test 529 GeoidPGM('egm96-5.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -33.396
    test 530 GeoidPGM('egm96-5.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 7.961
    test 531 GeoidPGM('egm96-5.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 7.229
    test 532 GeoidPGM('egm96-5.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -44.292
    test 533 GeoidPGM('egm96-5.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.875
    test 534 GeoidPGM('egm96-5.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 28.933
    test 535 GeoidPGM('egm96-5.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -41.238
    test 536 GeoidPGM('egm96-5.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.331
    test 537 GeoidPGM('egm96-5.pgm').height(54.811, -99.968) kind 3: -32.702
    test 538 GeoidPGM('egm96-5.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 60.117
    test 539 GeoidPGM('egm96-5.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 6.457
    test 540 GeoidPGM('egm96-5.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -31.961
    test 541 GeoidPGM('egm96-5.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.571
    test 542 GeoidPGM('egm96-5.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.760
    test 543 GeoidPGM('egm96-5.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 21.980
    test 544 GeoidPGM('egm96-5.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 16.849
    test 545 GeoidPGM('egm96-5.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.923
    test 546 GeoidPGM('egm96-5.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -42.749
    test 547 GeoidPGM('egm96-5.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -21.841
    test 548 GeoidPGM('egm96-5.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.482
    test 549 GeoidPGM('egm96-5.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.847
    test 550 GeoidPGM('egm96-5.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -19.604
    test 551 GeoidPGM('egm96-5.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 25.668
    test 552 GeoidPGM('egm96-5.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -3.772
    test 553 GeoidPGM('egm96-5.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 17.748
    test 554 GeoidPGM('egm96-5.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -17.839
    test 555 GeoidPGM('egm96-5.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.292
    test 556 GeoidPGM('egm96-5.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.529
    test 557 GeoidPGM('egm96-5.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -8.229
    test 558 GeoidPGM('egm96-5.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.830
    test 559 GeoidPGM('egm96-5.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.215
    test 560 GeoidPGM('egm96-5.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -2.960
    test 561 GeoidPGM('egm96-5.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -42.323
    test 562 GeoidPGM('egm96-5.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 38.356
    test 563 GeoidPGM('egm96-5.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 34.259
    test 564 GeoidPGM('egm96-5.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -37.397
    test 565 GeoidPGM('egm96-5.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -2.016
    test 566 GeoidPGM('egm96-5.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 33.912
    test 567 GeoidPGM('egm96-5.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.676
    test 568 GeoidPGM('egm96-5.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 15.692
    test 569 GeoidPGM('egm96-5.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -11.117
    test 570 GeoidPGM('egm96-5.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 27.437
    test 571 GeoidPGM('egm96-5.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -23.894
    test 572 GeoidPGM('egm96-5.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.766
    test 573 GeoidPGM('egm96-5.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -7.452
    test 574 GeoidPGM('egm96-5.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 30.143
    test 575 GeoidPGM('egm96-5.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -61.172
    test 576 GeoidPGM('egm96-5.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.890
    test 577 GeoidPGM('egm96-5.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 39.519
    test 578 GeoidPGM('egm96-5.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 19.419
    test 579 GeoidPGM('egm96-5.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 2.069
    test 580 GeoidPGM('egm96-5.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 25.048
    test 581 GeoidPGM('egm96-5.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 22.547
    test 582 GeoidPGM('egm96-5.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -34.359
    test 583 GeoidPGM('egm96-5.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -5.453
    test 584 GeoidPGM('egm96-5.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.804
    test 585 GeoidPGM('egm96-5.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -35.054
    test 586 GeoidPGM('egm96-5.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -15.418
    test 587 GeoidPGM('egm96-5.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.557
    test 588 GeoidPGM('egm96-5.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.894
    test 589 GeoidPGM('egm96-5.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.215
    test 590 GeoidPGM('egm96-5.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 3.523
    test 591 GeoidPGM('egm96-5.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 23.797
    test 592 GeoidPGM('egm96-5.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 51.586
    test 593 GeoidPGM('egm96-5.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.131
    test 594 GeoidPGM('egm96-5.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -51.848
    test 595 GeoidPGM('egm96-5.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 37.192
    test 596 GeoidPGM('egm96-5.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 63.597
    test 597 GeoidPGM('egm96-5.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -62.636
    test 598 GeoidPGM('egm96-5.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -8.717
    test 599 GeoidPGM('egm96-5.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 40.645
    test 600 GeoidPGM('egm96-5.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -60.729
    test 601 GeoidPGM('egm96-5.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 8.783
    test 602 GeoidPGM('egm96-5.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 31.523
    test 603 GeoidPGM('egm96-5.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -6.250
    test 604 GeoidPGM('egm96-5.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 32.599
    test 605 GeoidPGM('egm96-5.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -24.536
    test 606 GeoidPGM('egm96-5.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.869
    test 607 GeoidPGM('egm96-5.pgm').height(30.575, -99.998) kind 3: -23.213
    test 608 GeoidPGM('egm96-5.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -11.824
    test 609 GeoidPGM('egm96-5.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.709
    test 610 GeoidPGM('egm96-5.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.379
    test 611 GeoidPGM('egm96-5.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.941
    test 612 GeoidPGM('egm96-5.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 19.394
    test 613 GeoidPGM('egm96-5.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.381
    test 614 GeoidPGM('egm96-5.pgm').height(54.62, -68.413) kind 3: -23.318  FAILED, KNOWN, expected -23.319
    test 615 GeoidPGM('egm96-5.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 24.468
    test 616 GeoidPGM('egm96-5.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.761
    test 617 GeoidPGM('egm96-5.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -18.798
    test 618 GeoidPGM('egm96-5.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 12.612
    test 619 GeoidPGM('egm96-5.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.706
    test 620 GeoidPGM('egm96-5.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 45.792
    test 621 GeoidPGM('egm96-5.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.406
    test 622 GeoidPGM('egm96-5.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -8.367
    test 623 GeoidPGM('egm96-5.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -2.025
    test 624 GeoidPGM('egm96-5.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.569
    test 625 GeoidPGM('egm96-5.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.435
    test 626 GeoidPGM('egm96-5.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -39.009
    test 627 GeoidPGM('egm96-5.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -6.921
    test 628 GeoidPGM('egm96-5.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 50.795
    test 629 GeoidPGM('egm96-5.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.070
    test 630 GeoidPGM('egm96-5.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -14.214
    test 631 GeoidPGM('egm96-5.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 17.600
    test 632 GeoidPGM('egm96-5.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 44.804
    test 633 GeoidPGM('egm96-5.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.922
    test 634 GeoidPGM('egm96-5.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 10.662
    test 635 GeoidPGM('egm96-5.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 7.670
    test 636 GeoidPGM('egm96-5.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 8.623
    test 637 GeoidPGM('egm96-5.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.723
    test 638 GeoidPGM('egm96-5.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 3.818
    test 639 GeoidPGM('egm96-5.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected -1.871
    test 640 GeoidPGM('egm96-5.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 30.633
    test 641 GeoidPGM('egm96-5.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.801
    test 642 GeoidPGM('egm96-5.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 19.859
    test 643 GeoidPGM('egm96-5.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.348
    test 644 GeoidPGM('egm96-5.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 9.941
    test 645 GeoidPGM('egm96-5.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.321
    test 646 GeoidPGM('egm96-5.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -24.135
    test 647 GeoidPGM('egm96-5.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.679
    test 648 GeoidPGM('egm96-5.pgm').height(45.601, -80.458) kind 3: -37.151  FAILED, KNOWN, expected -37.150
    test 649 GeoidPGM('egm96-5.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.158
    test 650 GeoidPGM('egm96-5.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.602
    test 651 GeoidPGM('egm96-5.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.055
    test 652 GeoidPGM('egm96-5.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 40.132
    test 653 GeoidPGM('egm96-5.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 43.263
    test 654 GeoidPGM('egm96-5.pgm').height(34.302, -109.109) kind 3: -23.126
    test 655 GeoidPGM('egm96-5.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.678
    test 656 GeoidPGM('egm96-5.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -8.529
    test 657 GeoidPGM('egm96-5.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.666
    test 658 GeoidPGM('egm96-5.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -12.796
    test 659 GeoidPGM('egm96-5.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 15.773
    test 660 GeoidPGM('egm96-5.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.954
    test 661 GeoidPGM('egm96-5.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.480
    test 662 GeoidPGM('egm96-5.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.429
    test 663 GeoidPGM('egm96-5.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 24.037
    test 664 GeoidPGM('egm96-5.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 4.520
    test 665 GeoidPGM('egm96-5.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.394
    test 666 GeoidPGM('egm96-5.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 5.679
    test 667 GeoidPGM('egm96-5.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 28.707
    test 668 GeoidPGM('egm96-5.pgm').height(41.0, -95.0) kind 3: -30.261  FAILED, KNOWN, expected -30.262
    test 669 GeoidPGM('egm96-5.pgm').height(49.0, -120.5) kind 3: -15.984
    test 670 GeoidPGM('egm96-5.pgm').height(49.0, -103.5) kind 3: -18.636  FAILED, KNOWN, expected -18.635
    test 671 GeoidPGM('egm96-5.pgm').height(49.0, -86.5) kind 3: -37.749
    test 672 GeoidPGM('egm96-5.pgm').height(49.0, -69.5) kind 3: -26.691
    test 673 GeoidPGM('egm96-5.pgm').height(33.0, -120.5) kind 3: -39.561
    test 674 GeoidPGM('egm96-5.pgm').height(33.0, -103.5) kind 3: -22.563  FAILED, KNOWN, expected -22.562
    test 675 GeoidPGM('egm96-5.pgm').height(33.0, -86.5) kind 3: -30.012
    test 676 GeoidPGM('egm96-5.pgm').height(33.0, -69.5) kind 3: -48.039

    test 677 GeoidPGM('egm96-5.pgm').height() kind 3, eps max (in 0 FAILED): 0.001116
    test 678 GeoidPGM('egm96-5.pgm').height() kind 3, eps mean (of 15 total): 0.000383
    test 679 GeoidPGM('egm96-5.pgm').height() kind 3, eps stdev (of 15 total): 0.000294
    test 680 GeoidPGM('egm96-5.pgm').highest(): 45.0, -110.083, -7.479
    test 681 GeoidPGM('egm96-5.pgm').lowerleft(): 25.0, -125.0, -45.543
    test 682 GeoidPGM('egm96-5.pgm').lowerright(): 25.0, -64.917, -51.106
    test 683 GeoidPGM('egm96-5.pgm').lowest(): 25.75, -69.583, -52.671
    test 684 GeoidPGM('egm96-5.pgm').upperleft(): 55.0, -125.0, -10.221
    test 685 GeoidPGM('egm96-5.pgm').upperright(): 55.0, -64.917, -16.097
    test 686 GeoidPGM('egm96-5.pgm').dtype: ("dtype('float64')",)
    test 687 GeoidPGM('egm96-5.pgm').knots: ('260281',)
    test 688 GeoidPGM('egm96-5.pgm').mean: ('-29.816',)
    test 689 GeoidPGM('egm96-5.pgm').nBytes: ('2082248',)
    test 690 GeoidPGM('egm96-5.pgm').smooth: ('0',)
    test 691 GeoidPGM('egm96-5.pgm').stdev: ('9.503',)
    test 692 GeoidPGM('egm96-5.pgm')._g2ll2(180, 360): (180, 0.0)
    test 693 GeoidPGM('egm96-5.pgm')._ll2g2(180, 360): (180, 720.0)
    test 694 GeoidPGM('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 695 GeoidPGM('egm96-5.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 696 GeoidPGM('egm96-5.pgm').toStr: GeoidPGM('egm96-5.pgm'): lowerleft(25.0, -125.0, -45.543), upperright(55.0, -64.917, -16.097), center(40.0, -94.958, -32.13), highest(45.0, -110.083, -7.479), lowest(25.75, -69.583, -52.671)

    test 697 closed: True
    test 698 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 699 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 700 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 2: 12.637  FAILED, KNOWN, expected 12.636
    test 701 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 2: 0.749
    test 702 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 2: 65.110  FAILED, KNOWN, expected 65.109
    test 703 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 2: 24.889
    test 704 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 2: -29.557
    test 705 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 2: 9.741  FAILED, KNOWN, expected 9.742
    test 706 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 2: 30.061  FAILED, KNOWN, expected 30.059
    test 707 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 2: 60.691  FAILED, KNOWN, expected 60.690
    test 708 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 2: 69.134  FAILED, KNOWN, expected 69.133
    test 709 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 2: 36.522  FAILED, KNOWN, expected 36.520
    test 710 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 2: 6.801
    test 711 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 2: -20.652  FAILED, KNOWN, expected -20.651
    test 712 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 2: -3.040
    test 713 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 2: -1.329  FAILED, KNOWN, expected -1.328
    test 714 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 2: -2.171  FAILED, KNOWN, expected -2.172
    test 715 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 2: -17.411
    test 716 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 2: -16.426  FAILED, KNOWN, expected -16.425
    test 717 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 2: 24.699  FAILED, KNOWN, expected 24.698
    test 718 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 2: -18.328  FAILED, KNOWN, expected -18.329
    test 719 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 2: 43.802
    test 720 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 2: 18.716
    test 721 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 2: 44.468  FAILED, KNOWN, expected 44.469
    test 722 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 2: 49.943  FAILED, KNOWN, expected 49.944
    test 723 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 2: -35.878
    test 724 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 2: -40.777
    test 725 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 2: 26.560  FAILED, KNOWN, expected 26.559
    test 726 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 2: 49.361
    test 727 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 2: 21.106  FAILED, KNOWN, expected 21.107
    test 728 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 2: -7.202
    test 729 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 2: -17.168
    test 730 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 2: 18.359
    test 731 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 2: 52.118
    test 732 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 2: -38.949  FAILED, KNOWN, expected -38.950
    test 733 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 2: -9.935  FAILED, KNOWN, expected -9.934
    test 734 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 2: -2.879
    test 735 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 2: -5.025
    test 736 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 2: 24.296
    test 737 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 2: 25.131
    test 738 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 2: 40.720  FAILED, KNOWN, expected 40.721
    test 739 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 2: 22.388
    test 740 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 2: 22.485  FAILED, KNOWN, expected 22.486
    test 741 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 2: 14.942  FAILED, KNOWN, expected 14.943
    test 742 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 2: -47.387
    test 743 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 2: -18.404  FAILED, KNOWN, expected -18.403
    test 744 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 2: 10.186  FAILED, KNOWN, expected 10.185
    test 745 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 2: 5.671
    test 746 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 2: -24.577
    test 747 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 2: 43.288
    test 748 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 2: 13.747  FAILED, KNOWN, expected 13.748
    test 749 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 2: -5.342
    test 750 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 2: -25.579
    test 751 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 2: -9.849
    test 752 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 2: -10.491
    test 753 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 2: 0.243  FAILED, KNOWN, expected 0.244
    test 754 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 2: -43.820  FAILED, KNOWN, expected -43.821
    test 755 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 2: 57.400  FAILED, KNOWN, expected 57.401
    test 756 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 2: -17.889  FAILED, KNOWN, expected -17.890
    test 757 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 2: 46.422  FAILED, KNOWN, expected 46.421
    test 758 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 2: -14.475
    test 759 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 2: 11.119  FAILED, KNOWN, expected 11.118
    test 760 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 2: 42.291
    test 761 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 2: 22.327  FAILED, KNOWN, expected 22.326
    test 762 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 2: -33.098
    test 763 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 2: 9.431  FAILED, KNOWN, expected 9.430
    test 764 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 2: 6.032
    test 765 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 2: -44.330
    test 766 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 2: 21.775
    test 767 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 2: 29.243
    test 768 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 2: -40.677  FAILED, KNOWN, expected -40.676
    test 769 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 2: -31.353
    test 770 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 2: -32.700  FAILED, KNOWN, expected -32.701
    test 771 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 2: 60.628  FAILED, KNOWN, expected 60.629
    test 772 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 2: 6.617
    test 773 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 2: -31.888  FAILED, KNOWN, expected -31.887
    test 774 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 2: -26.536  FAILED, KNOWN, expected -26.535
    test 775 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 2: -29.631  FAILED, KNOWN, expected -29.630
    test 776 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 2: 22.274  FAILED, KNOWN, expected 22.275
    test 777 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 2: 17.095  FAILED, KNOWN, expected 17.094
    test 778 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 2: -20.940  FAILED, KNOWN, expected -20.941
    test 779 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 2: -42.740
    test 780 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 2: -21.651
    test 781 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 2: 25.240
    test 782 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 2: -8.758
    test 783 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 2: -19.606  FAILED, KNOWN, expected -19.607
    test 784 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 2: 26.258
    test 785 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 2: -3.824
    test 786 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 2: 18.194  FAILED, KNOWN, expected 18.195
    test 787 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 2: -17.724  FAILED, KNOWN, expected -17.725
    test 788 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 2: 14.511  FAILED, KNOWN, expected 14.513
    test 789 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 2: 16.808  FAILED, KNOWN, expected 16.809
    test 790 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 2: -8.025  FAILED, KNOWN, expected -8.026
    test 791 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 2: 9.688
    test 792 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 2: 6.218
    test 793 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 2: -2.725  FAILED, KNOWN, expected -2.724
    test 794 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 2: -42.566  FAILED, KNOWN, expected -42.565
    test 795 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 2: 38.341
    test 796 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 2: 33.888  FAILED, KNOWN, expected 33.889
    test 797 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 2: -37.382  FAILED, KNOWN, expected -37.380
    test 798 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 2: -1.857  FAILED, KNOWN, expected -1.858
    test 799 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 2: 34.196  FAILED, KNOWN, expected 34.195
    test 800 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 2: 12.767
    test 801 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 2: 15.612
    test 802 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 2: -11.063
    test 803 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 2: 27.387
    test 804 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 2: -23.817
    test 805 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 2: 18.713  FAILED, KNOWN, expected 18.712
    test 806 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 2: -7.343  FAILED, KNOWN, expected -7.344
    test 807 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 2: 29.997  FAILED, KNOWN, expected 29.998
    test 808 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 2: -61.869
    test 809 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 2: -24.937
    test 810 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 2: 38.558  FAILED, KNOWN, expected 38.556
    test 811 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 2: 19.672  FAILED, KNOWN, expected 19.671
    test 812 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 2: 2.273  FAILED, KNOWN, expected 2.272
    test 813 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 2: 24.863
    test 814 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 2: 21.637  FAILED, KNOWN, expected 21.636
    test 815 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 2: -33.851
    test 816 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 2: -5.299
    test 817 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 2: -6.789
    test 818 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 2: -35.030
    test 819 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 2: -15.338
    test 820 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 2: -79.356
    test 821 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 2: -16.650
    test 822 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 2: 36.358  FAILED, KNOWN, expected 36.359
    test 823 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 2: 3.614  FAILED, KNOWN, expected 3.615
    test 824 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 2: 23.946  FAILED, KNOWN, expected 23.947
    test 825 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 2: 51.495
    test 826 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 2: -30.909  FAILED, KNOWN, expected -30.910
    test 827 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 2: -52.131
    test 828 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 2: 37.046  FAILED, KNOWN, expected 37.045
    test 829 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 2: 64.181  FAILED, KNOWN, expected 64.180
    test 830 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 2: -62.475
    test 831 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 2: -8.454
    test 832 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 2: 40.834
    test 833 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 2: -60.456  FAILED, KNOWN, expected -60.455
    test 834 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 2: 9.727
    test 835 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 2: 32.143  FAILED, KNOWN, expected 32.142
    test 836 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 2: -6.221  FAILED, KNOWN, expected -6.220
    test 837 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 2: 32.489
    test 838 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 2: -24.692
    test 839 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 2: -38.748  FAILED, KNOWN, expected -38.749
    test 840 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 2: -23.254  FAILED, KNOWN, expected -23.255
    test 841 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 2: -13.454  FAILED, KNOWN, expected -13.455
    test 842 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 2: 16.627
    test 843 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 2: -22.221
    test 844 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 2: -4.836
    test 845 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 2: 19.571
    test 846 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 2: -9.227
    test 847 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 2: -23.248
    test 848 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 2: 24.829
    test 849 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 2: -21.706  FAILED, KNOWN, expected -21.705
    test 850 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 2: -17.054  FAILED, KNOWN, expected -17.053
    test 851 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 2: 11.716
    test 852 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 2: -19.529  FAILED, KNOWN, expected -19.530
    test 853 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 2: 45.929
    test 854 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 2: -8.283
    test 855 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 2: -8.467
    test 856 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 2: -1.829
    test 857 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 2: -16.505  FAILED, KNOWN, expected -16.506
    test 858 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 2: -35.384
    test 859 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 2: -38.962  FAILED, KNOWN, expected -38.963
    test 860 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 2: -6.956
    test 861 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 2: 51.006  FAILED, KNOWN, expected 51.005
    test 862 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 2: 1.193  FAILED, KNOWN, expected 1.192
    test 863 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 2: -15.038
    test 864 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 2: 17.792  FAILED, KNOWN, expected 17.791
    test 865 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 2: 44.653  FAILED, KNOWN, expected 44.652
    test 866 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 2: -17.972  FAILED, KNOWN, expected -17.971
    test 867 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 2: 11.631
    test 868 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 2: 7.394
    test 869 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 2: 7.932
    test 870 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 2: -60.594  FAILED, KNOWN, expected -60.593
    test 871 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 2: 4.382  FAILED, KNOWN, expected 4.384
    test 872 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 2: 1.296  FAILED, KNOWN, expected 1.297
    test 873 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 2: 30.852
    test 874 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 2: 2.705  FAILED, KNOWN, expected 2.704
    test 875 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 2: 21.263  FAILED, KNOWN, expected 21.264
    test 876 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 2: 5.443
    test 877 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 2: 9.998
    test 878 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 2: 22.428
    test 879 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 2: -23.156  FAILED, KNOWN, expected -23.154
    test 880 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 2: -17.662
    test 881 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 2: -36.840  FAILED, KNOWN, expected -36.839
    test 882 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 2: -61.220  FAILED, KNOWN, expected -61.221
    test 883 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 2: 20.355
    test 884 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 2: 13.147
    test 885 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 2: 41.072
    test 886 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 2: 42.982
    test 887 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 2: -22.997  FAILED, KNOWN, expected -22.998
    test 888 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 2: -20.662
    test 889 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 2: -8.438
    test 890 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 2: -8.711  FAILED, KNOWN, expected -8.712
    test 891 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 2: -12.654  FAILED, KNOWN, expected -12.653
    test 892 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 2: 17.163  FAILED, KNOWN, expected 17.166
    test 893 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 2: -19.873  FAILED, KNOWN, expected -19.874
    test 894 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 2: -31.124
    test 895 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 2: -17.307
    test 896 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 2: 23.437  FAILED, KNOWN, expected 23.434
    test 897 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 2: 4.508
    test 898 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 2: 11.550  FAILED, KNOWN, expected 11.549
    test 899 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 2: 5.749  FAILED, KNOWN, expected 5.748
    test 900 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 2: 28.788
    test 901 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 2: -30.588  FAILED, KNOWN, expected -30.589
    test 902 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 2: -15.273
    test 903 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 2: -18.624
    test 904 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 2: -37.872  FAILED, KNOWN, expected -37.873
    test 905 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 2: -26.511
    test 906 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 2: -39.600
    test 907 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 2: -22.689
    test 908 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 2: -30.066  FAILED, KNOWN, expected -30.067
    test 909 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 2: -48.093

    test 910 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.002537
    test 911 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.000543
    test 912 GeoidKarney('egm2008-1.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.000458
    test 913 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 914 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 915 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 916 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 917 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 918 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 919 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 920 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 921 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 922 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 923 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 924 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 925 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 926 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 927 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 928 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 929 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 930 closed: True
    test 931 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 932 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 933 GeoidKarney('egm2008-1.pgm').height(-76.981, 34.17) kind 3: 12.637  FAILED, KNOWN, expected 12.636
    test 934 GeoidKarney('egm2008-1.pgm').height(79.695, 88.806) kind 3: 0.749
    test 935 GeoidKarney('egm2008-1.pgm').height(-15.245, 168.748) kind 3: 65.110  FAILED, KNOWN, expected 65.109
    test 936 GeoidKarney('egm2008-1.pgm').height(-19.379, 15.855) kind 3: 24.889
    test 937 GeoidKarney('egm2008-1.pgm').height(43.378, -130.552) kind 3: -29.556  FAILED, KNOWN, expected -29.557
    test 938 GeoidKarney('egm2008-1.pgm').height(-16.075, 21.795) kind 3: 9.741  FAILED, KNOWN, expected 9.742
    test 939 GeoidKarney('egm2008-1.pgm').height(-11.256, -73.75) kind 3: 30.060  FAILED, KNOWN, expected 30.059
    test 940 GeoidKarney('egm2008-1.pgm').height(69.017, -15.921) kind 3: 60.690
    test 941 GeoidKarney('egm2008-1.pgm').height(2.221, 139.739) kind 3: 69.134  FAILED, KNOWN, expected 69.133
    test 942 GeoidKarney('egm2008-1.pgm').height(-9.097, 119.142) kind 3: 36.521  FAILED, KNOWN, expected 36.520
    test 943 GeoidKarney('egm2008-1.pgm').height(-28.524, -22.192) kind 3: 6.801
    test 944 GeoidKarney('egm2008-1.pgm').height(12.272, -136.424) kind 3: -20.652  FAILED, KNOWN, expected -20.651
    test 945 GeoidKarney('egm2008-1.pgm').height(-15.203, -85.604) kind 3: -3.040
    test 946 GeoidKarney('egm2008-1.pgm').height(-63.736, -77.17) kind 3: -1.329  FAILED, KNOWN, expected -1.328
    test 947 GeoidKarney('egm2008-1.pgm').height(-48.771, -90.102) kind 3: -2.171  FAILED, KNOWN, expected -2.172
    test 948 GeoidKarney('egm2008-1.pgm').height(-0.179, -126.368) kind 3: -17.411
    test 949 GeoidKarney('egm2008-1.pgm').height(1.586, -128.887) kind 3: -16.426  FAILED, KNOWN, expected -16.425
    test 950 GeoidKarney('egm2008-1.pgm').height(-48.781, -2.684) kind 3: 24.699  FAILED, KNOWN, expected 24.698
    test 951 GeoidKarney('egm2008-1.pgm').height(-49.092, 136.862) kind 3: -18.328  FAILED, KNOWN, expected -18.329
    test 952 GeoidKarney('egm2008-1.pgm').height(47.732, 17.552) kind 3: 43.802
    test 953 GeoidKarney('egm2008-1.pgm').height(-49.11, 85.706) kind 3: 18.716
    test 954 GeoidKarney('egm2008-1.pgm').height(-49.162, 40.321) kind 3: 44.468  FAILED, KNOWN, expected 44.469
    test 955 GeoidKarney('egm2008-1.pgm').height(3.498, 158.118) kind 3: 49.943  FAILED, KNOWN, expected 49.944
    test 956 GeoidKarney('egm2008-1.pgm').height(-35.616, 122.648) kind 3: -35.878
    test 957 GeoidKarney('egm2008-1.pgm').height(56.598, -96.114) kind 3: -40.777
    test 958 GeoidKarney('egm2008-1.pgm').height(-31.85, 149.121) kind 3: 26.559
    test 959 GeoidKarney('egm2008-1.pgm').height(-26.569, -177.792) kind 3: 49.362  FAILED, KNOWN, expected 49.361
    test 960 GeoidKarney('egm2008-1.pgm').height(76.735, -65.753) kind 3: 21.106  FAILED, KNOWN, expected 21.107
    test 961 GeoidKarney('egm2008-1.pgm').height(-21.404, -122.268) kind 3: -7.203  FAILED, KNOWN, expected -7.202
    test 962 GeoidKarney('egm2008-1.pgm').height(-77.133, -65.474) kind 3: -17.167  FAILED, KNOWN, expected -17.168
    test 963 GeoidKarney('egm2008-1.pgm').height(-58.812, 2.276) kind 3: 18.359
    test 964 GeoidKarney('egm2008-1.pgm').height(4.415, 155.683) kind 3: 52.117  FAILED, KNOWN, expected 52.118
    test 965 GeoidKarney('egm2008-1.pgm').height(-28.146, 107.081) kind 3: -38.950
    test 966 GeoidKarney('egm2008-1.pgm').height(-10.551, -126.69) kind 3: -9.935  FAILED, KNOWN, expected -9.934
    test 967 GeoidKarney('egm2008-1.pgm').height(-25.444, -103.337) kind 3: -2.879
    test 968 GeoidKarney('egm2008-1.pgm').height(24.436, 46.159) kind 3: -5.025
    test 969 GeoidKarney('egm2008-1.pgm').height(-72.889, 37.107) kind 3: 24.296
    test 970 GeoidKarney('egm2008-1.pgm').height(-19.629, 13.245) kind 3: 25.131
    test 971 GeoidKarney('egm2008-1.pgm').height(-7.602, 171.265) kind 3: 40.720  FAILED, KNOWN, expected 40.721
    test 972 GeoidKarney('egm2008-1.pgm').height(-45.364, -1.876) kind 3: 22.387  FAILED, KNOWN, expected 22.388
    test 973 GeoidKarney('egm2008-1.pgm').height(-7.292, -69.18) kind 3: 22.485  FAILED, KNOWN, expected 22.486
    test 974 GeoidKarney('egm2008-1.pgm').height(-31.566, -166.689) kind 3: 14.942  FAILED, KNOWN, expected 14.943
    test 975 GeoidKarney('egm2008-1.pgm').height(-82.751, -162.085) kind 3: -47.387
    test 976 GeoidKarney('egm2008-1.pgm').height(-40.7, 99.466) kind 3: -18.404  FAILED, KNOWN, expected -18.403
    test 977 GeoidKarney('egm2008-1.pgm').height(48.676, 39.69) kind 3: 10.185
    test 978 GeoidKarney('egm2008-1.pgm').height(74.817, -78.404) kind 3: 5.670  FAILED, KNOWN, expected 5.671
    test 979 GeoidKarney('egm2008-1.pgm').height(-81.032, -63.865) kind 3: -24.577
    test 980 GeoidKarney('egm2008-1.pgm').height(74.022, 9.432) kind 3: 43.288
    test 981 GeoidKarney('egm2008-1.pgm').height(-75.071, 17.579) kind 3: 13.747  FAILED, KNOWN, expected 13.748
    test 982 GeoidKarney('egm2008-1.pgm').height(-12.546, -54.851) kind 3: -5.342
    test 983 GeoidKarney('egm2008-1.pgm').height(-13.621, 42.408) kind 3: -25.579
    test 984 GeoidKarney('egm2008-1.pgm').height(-2.266, -91.951) kind 3: -9.849
    test 985 GeoidKarney('egm2008-1.pgm').height(-18.672, 42.547) kind 3: -10.490  FAILED, KNOWN, expected -10.491
    test 986 GeoidKarney('egm2008-1.pgm').height(-41.44, 157.413) kind 3: 0.243  FAILED, KNOWN, expected 0.244
    test 987 GeoidKarney('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 988 GeoidKarney('egm2008-1.pgm').height(39.26, -30.351) kind 3: 57.401
    test 989 GeoidKarney('egm2008-1.pgm').height(-51.699, -141.493) kind 3: -17.889  FAILED, KNOWN, expected -17.890
    test 990 GeoidKarney('egm2008-1.pgm').height(36.585, 4.515) kind 3: 46.423  FAILED, KNOWN, expected 46.421
    test 991 GeoidKarney('egm2008-1.pgm').height(39.642, -54.659) kind 3: -14.475
    test 992 GeoidKarney('egm2008-1.pgm').height(59.761, 166.567) kind 3: 11.118
    test 993 GeoidKarney('egm2008-1.pgm').height(51.83, 13.357) kind 3: 42.291
    test 994 GeoidKarney('egm2008-1.pgm').height(-36.531, -175.431) kind 3: 22.327  FAILED, KNOWN, expected 22.326
    test 995 GeoidKarney('egm2008-1.pgm').height(-37.08, 125.264) kind 3: -33.098
    test 996 GeoidKarney('egm2008-1.pgm').height(-68.651, 92.732) kind 3: 9.431  FAILED, KNOWN, expected 9.430
    test 997 GeoidKarney('egm2008-1.pgm').height(35.087, 45.336) kind 3: 6.032
    test 998 GeoidKarney('egm2008-1.pgm').height(-61.356, -169.379) kind 3: -44.330
    test 999 GeoidKarney('egm2008-1.pgm').height(-36.955, 179.12) kind 3: 21.775
    test 1000 GeoidKarney('egm2008-1.pgm').height(10.248, -6.714) kind 3: 29.243
    test 1001 GeoidKarney('egm2008-1.pgm').height(36.868, 84.602) kind 3: -40.677  FAILED, KNOWN, expected -40.676
    test 1002 GeoidKarney('egm2008-1.pgm').height(28.637, 88.933) kind 3: -31.352  FAILED, KNOWN, expected -31.353
    test 1003 GeoidKarney('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 1004 GeoidKarney('egm2008-1.pgm').height(7.611, 145.911) kind 3: 60.628  FAILED, KNOWN, expected 60.629
    test 1005 GeoidKarney('egm2008-1.pgm').height(59.412, 170.102) kind 3: 6.617
    test 1006 GeoidKarney('egm2008-1.pgm').height(-61.469, 126.144) kind 3: -31.887
    test 1007 GeoidKarney('egm2008-1.pgm').height(18.514, -137.083) kind 3: -26.536  FAILED, KNOWN, expected -26.535
    test 1008 GeoidKarney('egm2008-1.pgm').height(7.854, -126.799) kind 3: -29.631  FAILED, KNOWN, expected -29.630
    test 1009 GeoidKarney('egm2008-1.pgm').height(47.489, 134.183) kind 3: 22.274  FAILED, KNOWN, expected 22.275
    test 1010 GeoidKarney('egm2008-1.pgm').height(-34.144, -11.922) kind 3: 17.095  FAILED, KNOWN, expected 17.094
    test 1011 GeoidKarney('egm2008-1.pgm').height(-58.389, 117.458) kind 3: -20.940  FAILED, KNOWN, expected -20.941
    test 1012 GeoidKarney('egm2008-1.pgm').height(9.773, 95.846) kind 3: -42.740
    test 1013 GeoidKarney('egm2008-1.pgm').height(-53.12, 136.994) kind 3: -21.651
    test 1014 GeoidKarney('egm2008-1.pgm').height(-50.35, 0.075) kind 3: 25.240
    test 1015 GeoidKarney('egm2008-1.pgm').height(31.438, -170.879) kind 3: -8.758
    test 1016 GeoidKarney('egm2008-1.pgm').height(37.541, -153.024) kind 3: -19.606  FAILED, KNOWN, expected -19.607
    test 1017 GeoidKarney('egm2008-1.pgm').height(27.586, 2.444) kind 3: 26.258
    test 1018 GeoidKarney('egm2008-1.pgm').height(-26.139, -106.201) kind 3: -3.823  FAILED, KNOWN, expected -3.824
    test 1019 GeoidKarney('egm2008-1.pgm').height(-33.426, -14.84) kind 3: 18.195
    test 1020 GeoidKarney('egm2008-1.pgm').height(39.586, -153.019) kind 3: -17.724  FAILED, KNOWN, expected -17.725
    test 1021 GeoidKarney('egm2008-1.pgm').height(-60.79, -2.578) kind 3: 14.512  FAILED, KNOWN, expected 14.513
    test 1022 GeoidKarney('egm2008-1.pgm').height(-20.131, 21.975) kind 3: 16.808  FAILED, KNOWN, expected 16.809
    test 1023 GeoidKarney('egm2008-1.pgm').height(75.649, 99.921) kind 3: -8.025  FAILED, KNOWN, expected -8.026
    test 1024 GeoidKarney('egm2008-1.pgm').height(-0.385, -23.788) kind 3: 9.689  FAILED, KNOWN, expected 9.688
    test 1025 GeoidKarney('egm2008-1.pgm').height(-51.56, -50.327) kind 3: 6.218
    test 1026 GeoidKarney('egm2008-1.pgm').height(-43.129, -167.271) kind 3: -2.725  FAILED, KNOWN, expected -2.724
    test 1027 GeoidKarney('egm2008-1.pgm').height(46.374, 71.948) kind 3: -42.566  FAILED, KNOWN, expected -42.565
    test 1028 GeoidKarney('egm2008-1.pgm').height(-22.783, 140.657) kind 3: 38.342  FAILED, KNOWN, expected 38.341
    test 1029 GeoidKarney('egm2008-1.pgm').height(-12.056, 122.804) kind 3: 33.888  FAILED, KNOWN, expected 33.889
    test 1030 GeoidKarney('egm2008-1.pgm').height(30.127, 94.738) kind 3: -37.381  FAILED, KNOWN, expected -37.380
    test 1031 GeoidKarney('egm2008-1.pgm').height(46.296, -174.479) kind 3: -1.857  FAILED, KNOWN, expected -1.858
    test 1032 GeoidKarney('egm2008-1.pgm').height(34.99, 15.052) kind 3: 34.196  FAILED, KNOWN, expected 34.195
    test 1033 GeoidKarney('egm2008-1.pgm').height(-51.287, 90.565) kind 3: 12.767
    test 1034 GeoidKarney('egm2008-1.pgm').height(34.217, 141.302) kind 3: 15.612
    test 1035 GeoidKarney('egm2008-1.pgm').height(-40.423, -142.787) kind 3: -11.063
    test 1036 GeoidKarney('egm2008-1.pgm').height(-17.854, -170.216) kind 3: 27.386  FAILED, KNOWN, expected 27.387
    test 1037 GeoidKarney('egm2008-1.pgm').height(47.803, 112.701) kind 3: -23.817
    test 1038 GeoidKarney('egm2008-1.pgm').height(-23.276, 133.454) kind 3: 18.713  FAILED, KNOWN, expected 18.712
    test 1039 GeoidKarney('egm2008-1.pgm').height(-26.884, -36.571) kind 3: -7.343  FAILED, KNOWN, expected -7.344
    test 1040 GeoidKarney('egm2008-1.pgm').height(-37.106, 31.128) kind 3: 29.997  FAILED, KNOWN, expected 29.998
    test 1041 GeoidKarney('egm2008-1.pgm').height(-75.363, -173.674) kind 3: -61.869
    test 1042 GeoidKarney('egm2008-1.pgm').height(-18.305, 69.016) kind 3: -24.938  FAILED, KNOWN, expected -24.937
    test 1043 GeoidKarney('egm2008-1.pgm').height(39.527, 23.58) kind 3: 38.557  FAILED, KNOWN, expected 38.556
    test 1044 GeoidKarney('egm2008-1.pgm').height(68.903, 30.97) kind 3: 19.671
    test 1045 GeoidKarney('egm2008-1.pgm').height(53.937, 168.318) kind 3: 2.273  FAILED, KNOWN, expected 2.272
    test 1046 GeoidKarney('egm2008-1.pgm').height(-38.6, 64.812) kind 3: 24.863
    test 1047 GeoidKarney('egm2008-1.pgm').height(-41.396, -69.739) kind 3: 21.636
    test 1048 GeoidKarney('egm2008-1.pgm').height(50.158, 72.319) kind 3: -33.850  FAILED, KNOWN, expected -33.851
    test 1049 GeoidKarney('egm2008-1.pgm').height(27.692, 176.153) kind 3: -5.299
    test 1050 GeoidKarney('egm2008-1.pgm').height(-48.419, 170.454) kind 3: -6.789
    test 1051 GeoidKarney('egm2008-1.pgm').height(-65.346, -124.976) kind 3: -35.030
    test 1052 GeoidKarney('egm2008-1.pgm').height(-51.873, 167.266) kind 3: -15.338
    test 1053 GeoidKarney('egm2008-1.pgm').height(-7.263, 84.308) kind 3: -79.356
    test 1054 GeoidKarney('egm2008-1.pgm').height(-1.461, -105.458) kind 3: -16.649  FAILED, KNOWN, expected -16.650
    test 1055 GeoidKarney('egm2008-1.pgm').height(7.684, 161.873) kind 3: 36.359
    test 1056 GeoidKarney('egm2008-1.pgm').height(-31.475, -158.52) kind 3: 3.614  FAILED, KNOWN, expected 3.615
    test 1057 GeoidKarney('egm2008-1.pgm').height(-36.187, 62.917) kind 3: 23.946  FAILED, KNOWN, expected 23.947
    test 1058 GeoidKarney('egm2008-1.pgm').height(16.003, 141.687) kind 3: 51.494  FAILED, KNOWN, expected 51.495
    test 1059 GeoidKarney('egm2008-1.pgm').height(30.182, 86.261) kind 3: -30.909  FAILED, KNOWN, expected -30.910
    test 1060 GeoidKarney('egm2008-1.pgm').height(-77.304, 159.498) kind 3: -52.131
    test 1061 GeoidKarney('egm2008-1.pgm').height(39.536, 139.795) kind 3: 37.046  FAILED, KNOWN, expected 37.045
    test 1062 GeoidKarney('egm2008-1.pgm').height(8.569, 134.618) kind 3: 64.181  FAILED, KNOWN, expected 64.180
    test 1063 GeoidKarney('egm2008-1.pgm').height(14.473, 90.596) kind 3: -62.475
    test 1064 GeoidKarney('egm2008-1.pgm').height(-13.138, -99.589) kind 3: -8.454
    test 1065 GeoidKarney('egm2008-1.pgm').height(34.212, -26.307) kind 3: 40.834
    test 1066 GeoidKarney('egm2008-1.pgm').height(21.89, 76.371) kind 3: -60.455
    test 1067 GeoidKarney('egm2008-1.pgm').height(29.793, 120.487) kind 3: 9.728  FAILED, KNOWN, expected 9.727
    test 1068 GeoidKarney('egm2008-1.pgm').height(15.724, 122.714) kind 3: 32.141  FAILED, KNOWN, expected 32.142
    test 1069 GeoidKarney('egm2008-1.pgm').height(-66.208, -78.499) kind 3: -6.221  FAILED, KNOWN, expected -6.220
    test 1070 GeoidKarney('egm2008-1.pgm').height(-39.507, 55.809) kind 3: 32.488  FAILED, KNOWN, expected 32.489
    test 1071 GeoidKarney('egm2008-1.pgm').height(28.159, 51.476) kind 3: -24.692
    test 1072 GeoidKarney('egm2008-1.pgm').height(-36.207, 120.205) kind 3: -38.749
    test 1073 GeoidKarney('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 1074 GeoidKarney('egm2008-1.pgm').height(-16.993, 37.136) kind 3: -13.454  FAILED, KNOWN, expected -13.455
    test 1075 GeoidKarney('egm2008-1.pgm').height(-11.477, 12.039) kind 3: 16.627
    test 1076 GeoidKarney('egm2008-1.pgm').height(30.428, -144.765) kind 3: -22.221
    test 1077 GeoidKarney('egm2008-1.pgm').height(-17.44, -92.424) kind 3: -4.836
    test 1078 GeoidKarney('egm2008-1.pgm').height(40.203, 143.43) kind 3: 19.571
    test 1079 GeoidKarney('egm2008-1.pgm').height(-37.098, -106.574) kind 3: -9.227
    test 1080 GeoidKarney('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 1081 GeoidKarney('egm2008-1.pgm').height(-31.633, 148.182) kind 3: 24.829
    test 1082 GeoidKarney('egm2008-1.pgm').height(-56.07, -141.407) kind 3: -21.706  FAILED, KNOWN, expected -21.705
    test 1083 GeoidKarney('egm2008-1.pgm').height(-8.195, -52.691) kind 3: -17.054  FAILED, KNOWN, expected -17.053
    test 1084 GeoidKarney('egm2008-1.pgm').height(17.851, 24.749) kind 3: 11.715  FAILED, KNOWN, expected 11.716
    test 1085 GeoidKarney('egm2008-1.pgm').height(0.349, -108.333) kind 3: -19.529  FAILED, KNOWN, expected -19.530
    test 1086 GeoidKarney('egm2008-1.pgm').height(15.038, 126.191) kind 3: 45.929
    test 1087 GeoidKarney('egm2008-1.pgm').height(-21.111, -123.696) kind 3: -8.283
    test 1088 GeoidKarney('egm2008-1.pgm').height(30.947, 173.002) kind 3: -8.467
    test 1089 GeoidKarney('egm2008-1.pgm').height(-10.698, -144.091) kind 3: -1.829
    test 1090 GeoidKarney('egm2008-1.pgm').height(-29.412, 124.753) kind 3: -16.505  FAILED, KNOWN, expected -16.506
    test 1091 GeoidKarney('egm2008-1.pgm').height(38.224, -137.189) kind 3: -35.384
    test 1092 GeoidKarney('egm2008-1.pgm').height(36.064, -132.409) kind 3: -38.962  FAILED, KNOWN, expected -38.963
    test 1093 GeoidKarney('egm2008-1.pgm').height(29.975, 178.076) kind 3: -6.956
    test 1094 GeoidKarney('egm2008-1.pgm').height(-21.346, 169.26) kind 3: 51.006  FAILED, KNOWN, expected 51.005
    test 1095 GeoidKarney('egm2008-1.pgm').height(49.282, -152.934) kind 3: 1.193  FAILED, KNOWN, expected 1.192
    test 1096 GeoidKarney('egm2008-1.pgm').height(16.349, -99.962) kind 3: -15.038
    test 1097 GeoidKarney('egm2008-1.pgm').height(-14.293, -167.34) kind 3: 17.791
    test 1098 GeoidKarney('egm2008-1.pgm').height(47.166, -38.523) kind 3: 44.653  FAILED, KNOWN, expected 44.652
    test 1099 GeoidKarney('egm2008-1.pgm').height(-58.911, 114.347) kind 3: -17.972  FAILED, KNOWN, expected -17.971
    test 1100 GeoidKarney('egm2008-1.pgm').height(-9.055, 111.294) kind 3: 11.630  FAILED, KNOWN, expected 11.631
    test 1101 GeoidKarney('egm2008-1.pgm').height(18.391, 29.692) kind 3: 7.394
    test 1102 GeoidKarney('egm2008-1.pgm').height(-15.074, 22.153) kind 3: 7.932
    test 1103 GeoidKarney('egm2008-1.pgm').height(-4.235, 62.001) kind 3: -60.594  FAILED, KNOWN, expected -60.593
    test 1104 GeoidKarney('egm2008-1.pgm').height(15.171, -86.583) kind 3: 4.384
    test 1105 GeoidKarney('egm2008-1.pgm').height(79.254, 112.116) kind 3: 1.296  FAILED, KNOWN, expected 1.297
    test 1106 GeoidKarney('egm2008-1.pgm').height(15.947, 156.093) kind 3: 30.852
    test 1107 GeoidKarney('egm2008-1.pgm').height(68.371, -177.382) kind 3: 2.705  FAILED, KNOWN, expected 2.704
    test 1108 GeoidKarney('egm2008-1.pgm').height(-41.931, -72.093) kind 3: 21.264
    test 1109 GeoidKarney('egm2008-1.pgm').height(-1.193, -143.133) kind 3: 5.443
    test 1110 GeoidKarney('egm2008-1.pgm').height(-37.006, 154.513) kind 3: 9.998
    test 1111 GeoidKarney('egm2008-1.pgm').height(-22.148, 9.938) kind 3: 22.428
    test 1112 GeoidKarney('egm2008-1.pgm').height(24.329, 109.044) kind 3: -23.155  FAILED, KNOWN, expected -23.154
    test 1113 GeoidKarney('egm2008-1.pgm').height(-54.878, 114.691) kind 3: -17.662
    test 1114 GeoidKarney('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 1115 GeoidKarney('egm2008-1.pgm').height(2.372, 58.974) kind 3: -61.220  FAILED, KNOWN, expected -61.221
    test 1116 GeoidKarney('egm2008-1.pgm').height(15.937, 165.854) kind 3: 20.355
    test 1117 GeoidKarney('egm2008-1.pgm').height(4.889, -24.213) kind 3: 13.147
    test 1118 GeoidKarney('egm2008-1.pgm').height(-11.392, 179.558) kind 3: 41.073  FAILED, KNOWN, expected 41.072
    test 1119 GeoidKarney('egm2008-1.pgm').height(58.246, 4.862) kind 3: 42.982
    test 1120 GeoidKarney('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 1121 GeoidKarney('egm2008-1.pgm').height(-58.196, 117.306) kind 3: -20.662
    test 1122 GeoidKarney('egm2008-1.pgm').height(44.5, 173.769) kind 3: -8.438
    test 1123 GeoidKarney('egm2008-1.pgm').height(-28.863, -139.775) kind 3: -8.711  FAILED, KNOWN, expected -8.712
    test 1124 GeoidKarney('egm2008-1.pgm').height(19.507, -96.099) kind 3: -12.653
    test 1125 GeoidKarney('egm2008-1.pgm').height(-42.488, -73.907) kind 3: 17.166
    test 1126 GeoidKarney('egm2008-1.pgm').height(46.138, -141.429) kind 3: -19.873  FAILED, KNOWN, expected -19.874
    test 1127 GeoidKarney('egm2008-1.pgm').height(60.507, 93.743) kind 3: -31.124
    test 1128 GeoidKarney('egm2008-1.pgm').height(26.219, -145.434) kind 3: -17.306  FAILED, KNOWN, expected -17.307
    test 1129 GeoidKarney('egm2008-1.pgm').height(-28.687, 3.37) kind 3: 23.435  FAILED, KNOWN, expected 23.434
    test 1130 GeoidKarney('egm2008-1.pgm').height(-15.008, 117.45) kind 3: 4.508
    test 1131 GeoidKarney('egm2008-1.pgm').height(40.71, 144.095) kind 3: 11.550  FAILED, KNOWN, expected 11.549
    test 1132 GeoidKarney('egm2008-1.pgm').height(20.823, -173.611) kind 3: 5.749  FAILED, KNOWN, expected 5.748
    test 1133 GeoidKarney('egm2008-1.pgm').height(16.776, -3.009) kind 3: 28.788
    test 1134 GeoidKarney('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.589
    test 1135 GeoidKarney('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 1136 GeoidKarney('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 1137 GeoidKarney('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 1138 GeoidKarney('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 1139 GeoidKarney('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 1140 GeoidKarney('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 1141 GeoidKarney('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.067
    test 1142 GeoidKarney('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 1143 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.001323
    test 1144 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000468
    test 1145 GeoidKarney('egm2008-1.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000333
    test 1146 GeoidKarney('egm2008-1.pgm').highest(): -8.4, 147.367, 85.839
    test 1147 GeoidKarney('egm2008-1.pgm').lowerleft(): -90.0, -180.0, -30.15
    test 1148 GeoidKarney('egm2008-1.pgm').lowerright(): -90.0, 180.0, -30.15
    test 1149 GeoidKarney('egm2008-1.pgm').lowest(): 4.7, 78.767, -106.911
    test 1150 GeoidKarney('egm2008-1.pgm').upperleft(): 90.0, -180.0, 14.898
    test 1151 GeoidKarney('egm2008-1.pgm').upperright(): 90.0, 180.0, 14.898
    test 1152 GeoidKarney('egm2008-1.pgm').dtype: ("'ushort'",)
    test 1153 GeoidKarney('egm2008-1.pgm').knots: ('233301600',)
    test 1154 GeoidKarney('egm2008-1.pgm').mean: ('-1.317',)
    test 1155 GeoidKarney('egm2008-1.pgm').nBytes: ('None',)
    test 1156 GeoidKarney('egm2008-1.pgm').smooth: ('None',)
    test 1157 GeoidKarney('egm2008-1.pgm').stdev: ('29.244',)
    test 1158 GeoidKarney('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1159 GeoidKarney('egm2008-1.pgm')._ll2g2(180, 360): (180, 360)
    test 1160 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1161 GeoidKarney('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1162 GeoidKarney('egm2008-1.pgm').toStr: GeoidKarney('egm2008-1.pgm'): lowerleft(-90.0, -180.0, -30.15), upperright(90.0, 180.0, 14.898), center(0.0, 0.0, 17.226), highest(-8.4, 147.367, 85.839), lowest(4.7, 78.767, -106.911)

    test 1163 closed: True
    test 1164 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1165 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1166 GeoidPGM('egm2008-1.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 12.636
    test 1167 GeoidPGM('egm2008-1.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.749
    test 1168 GeoidPGM('egm2008-1.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 65.109
    test 1169 GeoidPGM('egm2008-1.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 24.889
    test 1170 GeoidPGM('egm2008-1.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -29.557
    test 1171 GeoidPGM('egm2008-1.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 9.742
    test 1172 GeoidPGM('egm2008-1.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 30.059
    test 1173 GeoidPGM('egm2008-1.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 60.690
    test 1174 GeoidPGM('egm2008-1.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 69.133
    test 1175 GeoidPGM('egm2008-1.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 36.520
    test 1176 GeoidPGM('egm2008-1.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 6.801
    test 1177 GeoidPGM('egm2008-1.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.651
    test 1178 GeoidPGM('egm2008-1.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.040
    test 1179 GeoidPGM('egm2008-1.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -1.328
    test 1180 GeoidPGM('egm2008-1.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -2.172
    test 1181 GeoidPGM('egm2008-1.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -17.411
    test 1182 GeoidPGM('egm2008-1.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -16.425
    test 1183 GeoidPGM('egm2008-1.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 24.698
    test 1184 GeoidPGM('egm2008-1.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.329
    test 1185 GeoidPGM('egm2008-1.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 43.802
    test 1186 GeoidPGM('egm2008-1.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.716
    test 1187 GeoidPGM('egm2008-1.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.469
    test 1188 GeoidPGM('egm2008-1.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 49.944
    test 1189 GeoidPGM('egm2008-1.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -35.878
    test 1190 GeoidPGM('egm2008-1.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -40.777
    test 1191 GeoidPGM('egm2008-1.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 26.559
    test 1192 GeoidPGM('egm2008-1.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.361
    test 1193 GeoidPGM('egm2008-1.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 21.107
    test 1194 GeoidPGM('egm2008-1.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -7.202
    test 1195 GeoidPGM('egm2008-1.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -17.168
    test 1196 GeoidPGM('egm2008-1.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.359
    test 1197 GeoidPGM('egm2008-1.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 52.118
    test 1198 GeoidPGM('egm2008-1.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -38.950
    test 1199 GeoidPGM('egm2008-1.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.934
    test 1200 GeoidPGM('egm2008-1.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.879
    test 1201 GeoidPGM('egm2008-1.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -5.025
    test 1202 GeoidPGM('egm2008-1.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 24.296
    test 1203 GeoidPGM('egm2008-1.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 25.131
    test 1204 GeoidPGM('egm2008-1.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 40.721
    test 1205 GeoidPGM('egm2008-1.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 22.388
    test 1206 GeoidPGM('egm2008-1.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 22.486
    test 1207 GeoidPGM('egm2008-1.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.943
    test 1208 GeoidPGM('egm2008-1.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -47.387
    test 1209 GeoidPGM('egm2008-1.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -18.403
    test 1210 GeoidPGM('egm2008-1.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 10.185
    test 1211 GeoidPGM('egm2008-1.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 5.671
    test 1212 GeoidPGM('egm2008-1.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -24.577
    test 1213 GeoidPGM('egm2008-1.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 43.288
    test 1214 GeoidPGM('egm2008-1.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 13.748
    test 1215 GeoidPGM('egm2008-1.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -5.342
    test 1216 GeoidPGM('egm2008-1.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -25.579
    test 1217 GeoidPGM('egm2008-1.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -9.849
    test 1218 GeoidPGM('egm2008-1.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.491
    test 1219 GeoidPGM('egm2008-1.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected 0.244
    test 1220 GeoidPGM('egm2008-1.pgm').height(53.686, -79.375) kind 3: -43.820  FAILED, KNOWN, expected -43.821
    test 1221 GeoidPGM('egm2008-1.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.401
    test 1222 GeoidPGM('egm2008-1.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -17.890
    test 1223 GeoidPGM('egm2008-1.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 46.421
    test 1224 GeoidPGM('egm2008-1.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -14.475
    test 1225 GeoidPGM('egm2008-1.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.118
    test 1226 GeoidPGM('egm2008-1.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.291
    test 1227 GeoidPGM('egm2008-1.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.326
    test 1228 GeoidPGM('egm2008-1.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -33.098
    test 1229 GeoidPGM('egm2008-1.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 9.430
    test 1230 GeoidPGM('egm2008-1.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 6.032
    test 1231 GeoidPGM('egm2008-1.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -44.330
    test 1232 GeoidPGM('egm2008-1.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.775
    test 1233 GeoidPGM('egm2008-1.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 29.243
    test 1234 GeoidPGM('egm2008-1.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -40.676
    test 1235 GeoidPGM('egm2008-1.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.353
    test 1236 GeoidPGM('egm2008-1.pgm').height(54.811, -99.968) kind 3: -32.700  FAILED, KNOWN, expected -32.701
    test 1237 GeoidPGM('egm2008-1.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 60.629
    test 1238 GeoidPGM('egm2008-1.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 6.617
    test 1239 GeoidPGM('egm2008-1.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -31.887
    test 1240 GeoidPGM('egm2008-1.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.535
    test 1241 GeoidPGM('egm2008-1.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.630
    test 1242 GeoidPGM('egm2008-1.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 22.275
    test 1243 GeoidPGM('egm2008-1.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 17.094
    test 1244 GeoidPGM('egm2008-1.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.941
    test 1245 GeoidPGM('egm2008-1.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -42.740
    test 1246 GeoidPGM('egm2008-1.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -21.651
    test 1247 GeoidPGM('egm2008-1.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.240
    test 1248 GeoidPGM('egm2008-1.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.758
    test 1249 GeoidPGM('egm2008-1.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -19.607
    test 1250 GeoidPGM('egm2008-1.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 26.258
    test 1251 GeoidPGM('egm2008-1.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -3.824
    test 1252 GeoidPGM('egm2008-1.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 18.195
    test 1253 GeoidPGM('egm2008-1.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -17.725
    test 1254 GeoidPGM('egm2008-1.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.513
    test 1255 GeoidPGM('egm2008-1.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.809
    test 1256 GeoidPGM('egm2008-1.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -8.026
    test 1257 GeoidPGM('egm2008-1.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.688
    test 1258 GeoidPGM('egm2008-1.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.218
    test 1259 GeoidPGM('egm2008-1.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -2.724
    test 1260 GeoidPGM('egm2008-1.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -42.565
    test 1261 GeoidPGM('egm2008-1.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 38.341
    test 1262 GeoidPGM('egm2008-1.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 33.889
    test 1263 GeoidPGM('egm2008-1.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -37.380
    test 1264 GeoidPGM('egm2008-1.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -1.858
    test 1265 GeoidPGM('egm2008-1.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 34.195
    test 1266 GeoidPGM('egm2008-1.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.767
    test 1267 GeoidPGM('egm2008-1.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 15.612
    test 1268 GeoidPGM('egm2008-1.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -11.063
    test 1269 GeoidPGM('egm2008-1.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 27.387
    test 1270 GeoidPGM('egm2008-1.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -23.817
    test 1271 GeoidPGM('egm2008-1.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.712
    test 1272 GeoidPGM('egm2008-1.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -7.344
    test 1273 GeoidPGM('egm2008-1.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 29.998
    test 1274 GeoidPGM('egm2008-1.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -61.869
    test 1275 GeoidPGM('egm2008-1.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.937
    test 1276 GeoidPGM('egm2008-1.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 38.556
    test 1277 GeoidPGM('egm2008-1.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 19.671
    test 1278 GeoidPGM('egm2008-1.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 2.272
    test 1279 GeoidPGM('egm2008-1.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 24.863
    test 1280 GeoidPGM('egm2008-1.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 21.636
    test 1281 GeoidPGM('egm2008-1.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -33.851
    test 1282 GeoidPGM('egm2008-1.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -5.299
    test 1283 GeoidPGM('egm2008-1.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.789
    test 1284 GeoidPGM('egm2008-1.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -35.030
    test 1285 GeoidPGM('egm2008-1.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -15.338
    test 1286 GeoidPGM('egm2008-1.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.356
    test 1287 GeoidPGM('egm2008-1.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.650
    test 1288 GeoidPGM('egm2008-1.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.359
    test 1289 GeoidPGM('egm2008-1.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 3.615
    test 1290 GeoidPGM('egm2008-1.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 23.947
    test 1291 GeoidPGM('egm2008-1.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 51.495
    test 1292 GeoidPGM('egm2008-1.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.910
    test 1293 GeoidPGM('egm2008-1.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -52.131
    test 1294 GeoidPGM('egm2008-1.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 37.045
    test 1295 GeoidPGM('egm2008-1.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 64.180
    test 1296 GeoidPGM('egm2008-1.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -62.475
    test 1297 GeoidPGM('egm2008-1.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -8.454
    test 1298 GeoidPGM('egm2008-1.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 40.834
    test 1299 GeoidPGM('egm2008-1.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -60.455
    test 1300 GeoidPGM('egm2008-1.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 9.727
    test 1301 GeoidPGM('egm2008-1.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 32.142
    test 1302 GeoidPGM('egm2008-1.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -6.220
    test 1303 GeoidPGM('egm2008-1.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 32.489
    test 1304 GeoidPGM('egm2008-1.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -24.692
    test 1305 GeoidPGM('egm2008-1.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.749
    test 1306 GeoidPGM('egm2008-1.pgm').height(30.575, -99.998) kind 3: -23.254  FAILED, KNOWN, expected -23.255
    test 1307 GeoidPGM('egm2008-1.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -13.455
    test 1308 GeoidPGM('egm2008-1.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.627
    test 1309 GeoidPGM('egm2008-1.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.221
    test 1310 GeoidPGM('egm2008-1.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.836
    test 1311 GeoidPGM('egm2008-1.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 19.571
    test 1312 GeoidPGM('egm2008-1.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.227
    test 1313 GeoidPGM('egm2008-1.pgm').height(54.62, -68.413) kind 3: -23.248
    test 1314 GeoidPGM('egm2008-1.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 24.829
    test 1315 GeoidPGM('egm2008-1.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.705
    test 1316 GeoidPGM('egm2008-1.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -17.053
    test 1317 GeoidPGM('egm2008-1.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 11.716
    test 1318 GeoidPGM('egm2008-1.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.530
    test 1319 GeoidPGM('egm2008-1.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 45.929
    test 1320 GeoidPGM('egm2008-1.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.283
    test 1321 GeoidPGM('egm2008-1.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -8.467
    test 1322 GeoidPGM('egm2008-1.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -1.829
    test 1323 GeoidPGM('egm2008-1.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.506
    test 1324 GeoidPGM('egm2008-1.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.384
    test 1325 GeoidPGM('egm2008-1.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -38.963
    test 1326 GeoidPGM('egm2008-1.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -6.956
    test 1327 GeoidPGM('egm2008-1.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 51.005
    test 1328 GeoidPGM('egm2008-1.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.192
    test 1329 GeoidPGM('egm2008-1.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -15.038
    test 1330 GeoidPGM('egm2008-1.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 17.791
    test 1331 GeoidPGM('egm2008-1.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 44.652
    test 1332 GeoidPGM('egm2008-1.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.971
    test 1333 GeoidPGM('egm2008-1.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 11.631
    test 1334 GeoidPGM('egm2008-1.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 7.394
    test 1335 GeoidPGM('egm2008-1.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 7.932
    test 1336 GeoidPGM('egm2008-1.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.593
    test 1337 GeoidPGM('egm2008-1.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 4.384
    test 1338 GeoidPGM('egm2008-1.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected 1.297
    test 1339 GeoidPGM('egm2008-1.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 30.852
    test 1340 GeoidPGM('egm2008-1.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.704
    test 1341 GeoidPGM('egm2008-1.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 21.264
    test 1342 GeoidPGM('egm2008-1.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.443
    test 1343 GeoidPGM('egm2008-1.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 9.998
    test 1344 GeoidPGM('egm2008-1.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.428
    test 1345 GeoidPGM('egm2008-1.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -23.154
    test 1346 GeoidPGM('egm2008-1.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.662
    test 1347 GeoidPGM('egm2008-1.pgm').height(45.601, -80.458) kind 3: -36.840  FAILED, KNOWN, expected -36.839
    test 1348 GeoidPGM('egm2008-1.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.221
    test 1349 GeoidPGM('egm2008-1.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.355
    test 1350 GeoidPGM('egm2008-1.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.147
    test 1351 GeoidPGM('egm2008-1.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 41.072
    test 1352 GeoidPGM('egm2008-1.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 42.982
    test 1353 GeoidPGM('egm2008-1.pgm').height(34.302, -109.109) kind 3: -22.997  FAILED, KNOWN, expected -22.998
    test 1354 GeoidPGM('egm2008-1.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.662
    test 1355 GeoidPGM('egm2008-1.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -8.438
    test 1356 GeoidPGM('egm2008-1.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.712
    test 1357 GeoidPGM('egm2008-1.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -12.653
    test 1358 GeoidPGM('egm2008-1.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 17.166
    test 1359 GeoidPGM('egm2008-1.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.874
    test 1360 GeoidPGM('egm2008-1.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.124
    test 1361 GeoidPGM('egm2008-1.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.307
    test 1362 GeoidPGM('egm2008-1.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 23.434
    test 1363 GeoidPGM('egm2008-1.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 4.508
    test 1364 GeoidPGM('egm2008-1.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.549
    test 1365 GeoidPGM('egm2008-1.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 5.748
    test 1366 GeoidPGM('egm2008-1.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 28.788
    test 1367 GeoidPGM('egm2008-1.pgm').height(41.0, -95.0) kind 3: -30.588  FAILED, KNOWN, expected -30.589
    test 1368 GeoidPGM('egm2008-1.pgm').height(49.0, -120.5) kind 3: -15.273
    test 1369 GeoidPGM('egm2008-1.pgm').height(49.0, -103.5) kind 3: -18.624
    test 1370 GeoidPGM('egm2008-1.pgm').height(49.0, -86.5) kind 3: -37.872  FAILED, KNOWN, expected -37.873
    test 1371 GeoidPGM('egm2008-1.pgm').height(49.0, -69.5) kind 3: -26.511
    test 1372 GeoidPGM('egm2008-1.pgm').height(33.0, -120.5) kind 3: -39.600
    test 1373 GeoidPGM('egm2008-1.pgm').height(33.0, -103.5) kind 3: -22.689
    test 1374 GeoidPGM('egm2008-1.pgm').height(33.0, -86.5) kind 3: -30.066  FAILED, KNOWN, expected -30.067
    test 1375 GeoidPGM('egm2008-1.pgm').height(33.0, -69.5) kind 3: -48.093

    test 1376 GeoidPGM('egm2008-1.pgm').height() kind 3, eps max (in 0 FAILED): 0.001386
    test 1377 GeoidPGM('egm2008-1.pgm').height() kind 3, eps mean (of 15 total): 0.000532
    test 1378 GeoidPGM('egm2008-1.pgm').height() kind 3, eps stdev (of 15 total): 0.000380
    test 1379 GeoidPGM('egm2008-1.pgm').highest(): 44.15, -109.817, -7.089
    test 1380 GeoidPGM('egm2008-1.pgm').lowerleft(): 25.0, -125.0, -45.45
    test 1381 GeoidPGM('egm2008-1.pgm').lowerright(): 25.0, -64.983, -50.831
    test 1382 GeoidPGM('egm2008-1.pgm').lowest(): 25.733, -69.767, -52.518
    test 1383 GeoidPGM('egm2008-1.pgm').upperleft(): 55.0, -125.0, -10.722
    test 1384 GeoidPGM('egm2008-1.pgm').upperright(): 55.0, -64.983, -16.223
    test 1385 GeoidPGM('egm2008-1.pgm').dtype: ("dtype('float64')",)
    test 1386 GeoidPGM('egm2008-1.pgm').knots: ('6485401',)
    test 1387 GeoidPGM('egm2008-1.pgm').mean: ('-29.707',)
    test 1388 GeoidPGM('egm2008-1.pgm').nBytes: ('51883208',)
    test 1389 GeoidPGM('egm2008-1.pgm').smooth: ('0',)
    test 1390 GeoidPGM('egm2008-1.pgm').stdev: ('9.505',)
    test 1391 GeoidPGM('egm2008-1.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1392 GeoidPGM('egm2008-1.pgm')._ll2g2(180, 360): (180, 720.0)
    test 1393 GeoidPGM('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1394 GeoidPGM('egm2008-1.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1395 GeoidPGM('egm2008-1.pgm').toStr: GeoidPGM('egm2008-1.pgm'): lowerleft(25.0, -125.0, -45.45), upperright(55.0, -64.983, -16.223), center(40.0, -94.992, -31.838), highest(44.15, -109.817, -7.089), lowest(25.733, -69.767, -52.518)

    test 1396 closed: True
    test 1397 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 1398 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 1399 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 2: 11.727  FAILED, KNOWN, expected 11.729
    test 1400 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 2: 0.280  FAILED, KNOWN, expected 0.270
    test 1401 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 2: 67.071  FAILED, KNOWN, expected 67.074
    test 1402 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 2: 25.366  FAILED, KNOWN, expected 25.344
    test 1403 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 2: -28.913  FAILED, KNOWN, expected -28.919
    test 1404 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 2: 14.383  FAILED, KNOWN, expected 14.386
    test 1405 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 2: 30.701  FAILED, KNOWN, expected 30.700
    test 1406 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 2: 62.222  FAILED, KNOWN, expected 62.225
    test 1407 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 2: 70.221  FAILED, KNOWN, expected 70.222
    test 1408 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 2: 34.290  FAILED, KNOWN, expected 34.336
    test 1409 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 2: 8.205  FAILED, KNOWN, expected 8.206
    test 1410 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 2: -20.068  FAILED, KNOWN, expected -20.074
    test 1411 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 2: -3.129
    test 1412 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 2: -3.214  FAILED, KNOWN, expected -3.217
    test 1413 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 2: -1.536  FAILED, KNOWN, expected -1.531
    test 1414 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 2: -16.742
    test 1415 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 2: -15.418  FAILED, KNOWN, expected -15.412
    test 1416 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 2: 25.077  FAILED, KNOWN, expected 25.078
    test 1417 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 2: -18.114  FAILED, KNOWN, expected -18.120
    test 1418 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 2: 46.230  FAILED, KNOWN, expected 46.224
    test 1419 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 2: 18.648  FAILED, KNOWN, expected 18.649
    test 1420 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 2: 44.759  FAILED, KNOWN, expected 44.764
    test 1421 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 2: 51.095  FAILED, KNOWN, expected 51.089
    test 1422 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 2: -34.436  FAILED, KNOWN, expected -34.471
    test 1423 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 2: -39.124
    test 1424 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 2: 28.131  FAILED, KNOWN, expected 28.142
    test 1425 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 2: 49.606  FAILED, KNOWN, expected 49.619
    test 1426 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 2: 22.568  FAILED, KNOWN, expected 22.575
    test 1427 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 2: -6.894  FAILED, KNOWN, expected -6.893
    test 1428 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 2: -15.017  FAILED, KNOWN, expected -15.012
    test 1429 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 2: 18.777  FAILED, KNOWN, expected 18.776
    test 1430 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 2: 53.644  FAILED, KNOWN, expected 53.645
    test 1431 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 2: -39.058  FAILED, KNOWN, expected -39.074
    test 1432 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 2: -9.643  FAILED, KNOWN, expected -9.645
    test 1433 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 2: -2.520  FAILED, KNOWN, expected -2.528
    test 1434 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 2: -6.918  FAILED, KNOWN, expected -6.907
    test 1435 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 2: 21.758  FAILED, KNOWN, expected 21.711
    test 1436 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 2: 25.617  FAILED, KNOWN, expected 25.611
    test 1437 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 2: 41.585  FAILED, KNOWN, expected 41.569
    test 1438 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 2: 23.283  FAILED, KNOWN, expected 23.280
    test 1439 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 2: 24.497  FAILED, KNOWN, expected 24.502
    test 1440 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 2: 14.825  FAILED, KNOWN, expected 14.826
    test 1441 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 2: -45.104
    test 1442 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 2: -17.254  FAILED, KNOWN, expected -17.252
    test 1443 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 2: 12.984  FAILED, KNOWN, expected 12.972
    test 1444 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 2: 4.773  FAILED, KNOWN, expected 4.776
    test 1445 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 2: -23.577
    test 1446 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 2: 43.884  FAILED, KNOWN, expected 43.885
    test 1447 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 2: 17.064  FAILED, KNOWN, expected 17.072
    test 1448 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 2: -6.637  FAILED, KNOWN, expected -6.643
    test 1449 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 2: -23.332  FAILED, KNOWN, expected -23.325
    test 1450 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 2: -10.689  FAILED, KNOWN, expected -10.698
    test 1451 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 2: -10.305  FAILED, KNOWN, expected -10.265
    test 1452 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 2: 0.692  FAILED, KNOWN, expected 0.689
    test 1453 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 2: -43.763  FAILED, KNOWN, expected -43.758
    test 1454 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 2: 57.551  FAILED, KNOWN, expected 57.554
    test 1455 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 2: -16.939  FAILED, KNOWN, expected -16.936
    test 1456 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 2: 45.227  FAILED, KNOWN, expected 45.295
    test 1457 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 2: -13.585  FAILED, KNOWN, expected -13.586
    test 1458 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 2: 11.469  FAILED, KNOWN, expected 11.468
    test 1459 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 2: 42.090  FAILED, KNOWN, expected 42.092
    test 1460 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 2: 22.828  FAILED, KNOWN, expected 22.830
    test 1461 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 2: -32.300  FAILED, KNOWN, expected -32.302
    test 1462 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 2: 9.212  FAILED, KNOWN, expected 9.228
    test 1463 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 2: 6.000  FAILED, KNOWN, expected 5.965
    test 1464 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 2: -45.000  FAILED, KNOWN, expected -45.013
    test 1465 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 2: 21.148  FAILED, KNOWN, expected 21.118
    test 1466 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 2: 30.500  FAILED, KNOWN, expected 30.497
    test 1467 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 2: -40.416  FAILED, KNOWN, expected -40.396
    test 1468 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 2: -31.726  FAILED, KNOWN, expected -31.704
    test 1469 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 2: -32.271  FAILED, KNOWN, expected -32.277
    test 1470 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 2: 61.016  FAILED, KNOWN, expected 61.024
    test 1471 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 2: 5.017  FAILED, KNOWN, expected 4.994
    test 1472 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 2: -30.240  FAILED, KNOWN, expected -30.237
    test 1473 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 2: -26.007  FAILED, KNOWN, expected -26.006
    test 1474 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 2: -29.280  FAILED, KNOWN, expected -29.283
    test 1475 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 2: 22.400  FAILED, KNOWN, expected 22.394
    test 1476 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 2: 17.549  FAILED, KNOWN, expected 17.550
    test 1477 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 2: -20.621  FAILED, KNOWN, expected -20.622
    test 1478 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 2: -41.463  FAILED, KNOWN, expected -41.484
    test 1479 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 2: -20.969  FAILED, KNOWN, expected -20.968
    test 1480 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 2: 25.561  FAILED, KNOWN, expected 25.568
    test 1481 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 2: -8.574  FAILED, KNOWN, expected -8.581
    test 1482 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 2: -18.329
    test 1483 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 2: 25.003  FAILED, KNOWN, expected 25.001
    test 1484 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 2: -2.945  FAILED, KNOWN, expected -2.940
    test 1485 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 2: 18.220  FAILED, KNOWN, expected 18.228
    test 1486 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 2: -16.511  FAILED, KNOWN, expected -16.507
    test 1487 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 2: 14.277  FAILED, KNOWN, expected 14.275
    test 1488 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 2: 16.866  FAILED, KNOWN, expected 16.852
    test 1489 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 2: -6.870  FAILED, KNOWN, expected -6.872
    test 1490 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 2: 8.987  FAILED, KNOWN, expected 9.006
    test 1491 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 2: 6.277  FAILED, KNOWN, expected 6.296
    test 1492 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 2: -1.483  FAILED, KNOWN, expected -1.481
    test 1493 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 2: -40.929  FAILED, KNOWN, expected -40.915
    test 1494 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 2: 37.481  FAILED, KNOWN, expected 37.495
    test 1495 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 2: 32.222  FAILED, KNOWN, expected 32.258
    test 1496 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 2: -41.529
    test 1497 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 2: -1.377
    test 1498 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 2: 35.263  FAILED, KNOWN, expected 35.280
    test 1499 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 2: 12.958
    test 1500 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 2: 18.423  FAILED, KNOWN, expected 18.307
    test 1501 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 2: -10.400
    test 1502 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 2: 28.649  FAILED, KNOWN, expected 28.638
    test 1503 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 2: -24.060  FAILED, KNOWN, expected -24.059
    test 1504 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 2: 18.800  FAILED, KNOWN, expected 18.806
    test 1505 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 2: -6.808  FAILED, KNOWN, expected -6.820
    test 1506 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 2: 31.485  FAILED, KNOWN, expected 31.486
    test 1507 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 2: -62.021  FAILED, KNOWN, expected -62.024
    test 1508 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 2: -24.246  FAILED, KNOWN, expected -24.248
    test 1509 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 2: 43.246  FAILED, KNOWN, expected 43.255
    test 1510 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 2: 18.496  FAILED, KNOWN, expected 18.498
    test 1511 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 2: 4.100  FAILED, KNOWN, expected 4.067
    test 1512 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 2: 25.456  FAILED, KNOWN, expected 25.454
    test 1513 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 2: 26.619  FAILED, KNOWN, expected 26.657
    test 1514 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 2: -32.003  FAILED, KNOWN, expected -31.966
    test 1515 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 2: -4.422  FAILED, KNOWN, expected -4.415
    test 1516 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 2: -6.717  FAILED, KNOWN, expected -6.741
    test 1517 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 2: -34.915  FAILED, KNOWN, expected -34.900
    test 1518 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 2: -14.214  FAILED, KNOWN, expected -14.223
    test 1519 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 2: -79.313  FAILED, KNOWN, expected -79.317
    test 1520 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 2: -16.163
    test 1521 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 2: 36.296  FAILED, KNOWN, expected 36.287
    test 1522 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 2: 4.066  FAILED, KNOWN, expected 4.068
    test 1523 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 2: 24.401  FAILED, KNOWN, expected 24.407
    test 1524 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 2: 53.051  FAILED, KNOWN, expected 53.054
    test 1525 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 2: -30.616  FAILED, KNOWN, expected -30.622
    test 1526 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 2: -53.544  FAILED, KNOWN, expected -53.540
    test 1527 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 2: 36.274  FAILED, KNOWN, expected 36.262
    test 1528 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 2: 64.339  FAILED, KNOWN, expected 64.369
    test 1529 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 2: -61.320  FAILED, KNOWN, expected -61.300
    test 1530 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 2: -7.996  FAILED, KNOWN, expected -7.999
    test 1531 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 2: 41.489  FAILED, KNOWN, expected 41.477
    test 1532 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 2: -59.881  FAILED, KNOWN, expected -59.876
    test 1533 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 2: 8.422  FAILED, KNOWN, expected 8.404
    test 1534 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 2: 39.200  FAILED, KNOWN, expected 39.152
    test 1535 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 2: -7.068  FAILED, KNOWN, expected -7.076
    test 1536 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 2: 33.179  FAILED, KNOWN, expected 33.178
    test 1537 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 2: -23.801  FAILED, KNOWN, expected -23.832
    test 1538 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 2: -38.175  FAILED, KNOWN, expected -38.206
    test 1539 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 2: -22.171  FAILED, KNOWN, expected -22.142
    test 1540 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 2: -13.746  FAILED, KNOWN, expected -13.765
    test 1541 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 2: 16.909  FAILED, KNOWN, expected 16.898
    test 1542 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 2: -22.479  FAILED, KNOWN, expected -22.474
    test 1543 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 2: -4.710  FAILED, KNOWN, expected -4.718
    test 1544 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 2: 16.680  FAILED, KNOWN, expected 16.635
    test 1545 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 2: -9.012
    test 1546 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 2: -23.556  FAILED, KNOWN, expected -23.543
    test 1547 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 2: 26.240  FAILED, KNOWN, expected 26.236
    test 1548 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 2: -21.963  FAILED, KNOWN, expected -21.953
    test 1549 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 2: -17.959
    test 1550 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 2: 9.072  FAILED, KNOWN, expected 9.078
    test 1551 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 2: -19.160  FAILED, KNOWN, expected -19.158
    test 1552 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 2: 46.776
    test 1553 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 2: -8.053  FAILED, KNOWN, expected -8.055
    test 1554 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 2: -7.681  FAILED, KNOWN, expected -7.696
    test 1555 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 2: -1.052  FAILED, KNOWN, expected -1.049
    test 1556 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 2: -16.081
    test 1557 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 2: -35.429  FAILED, KNOWN, expected -35.427
    test 1558 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 2: -38.648
    test 1559 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 2: -5.524  FAILED, KNOWN, expected -5.519
    test 1560 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 2: 53.448  FAILED, KNOWN, expected 53.431
    test 1561 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 2: 1.977  FAILED, KNOWN, expected 1.979
    test 1562 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 2: -13.131  FAILED, KNOWN, expected -13.197
    test 1563 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 2: 18.953  FAILED, KNOWN, expected 18.945
    test 1564 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 2: 45.180  FAILED, KNOWN, expected 45.187
    test 1565 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 2: -17.155  FAILED, KNOWN, expected -17.145
    test 1566 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 2: 13.136  FAILED, KNOWN, expected 13.146
    test 1567 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 2: 4.933
    test 1568 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 2: 12.313  FAILED, KNOWN, expected 12.326
    test 1569 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 2: -60.029  FAILED, KNOWN, expected -60.030
    test 1570 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 2: 3.034  FAILED, KNOWN, expected 3.110
    test 1571 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 2: -2.741
    test 1572 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 2: 32.108  FAILED, KNOWN, expected 32.085
    test 1573 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 2: 2.069  FAILED, KNOWN, expected 2.060
    test 1574 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 2: 22.901  FAILED, KNOWN, expected 22.916
    test 1575 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 2: 5.526  FAILED, KNOWN, expected 5.519
    test 1576 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 2: 11.019  FAILED, KNOWN, expected 11.020
    test 1577 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 2: 22.181  FAILED, KNOWN, expected 22.171
    test 1578 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 2: -22.957  FAILED, KNOWN, expected -22.944
    test 1579 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 2: -17.583  FAILED, KNOWN, expected -17.580
    test 1580 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 2: -35.728  FAILED, KNOWN, expected -35.738
    test 1581 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 2: -61.036  FAILED, KNOWN, expected -61.040
    test 1582 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 2: 20.897  FAILED, KNOWN, expected 20.907
    test 1583 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 2: 13.865  FAILED, KNOWN, expected 13.874
    test 1584 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 2: 40.920  FAILED, KNOWN, expected 40.929
    test 1585 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 2: 43.196  FAILED, KNOWN, expected 43.191
    test 1586 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 2: -22.016  FAILED, KNOWN, expected -22.006
    test 1587 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 2: -20.378  FAILED, KNOWN, expected -20.375
    test 1588 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 2: -7.856  FAILED, KNOWN, expected -7.852
    test 1589 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 2: -8.680  FAILED, KNOWN, expected -8.674
    test 1590 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 2: -14.089  FAILED, KNOWN, expected -14.117
    test 1591 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 2: 17.249  FAILED, KNOWN, expected 17.251
    test 1592 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 2: -19.434  FAILED, KNOWN, expected -19.436
    test 1593 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 2: -31.333  FAILED, KNOWN, expected -31.330
    test 1594 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 2: -17.088  FAILED, KNOWN, expected -17.090
    test 1595 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 2: 24.177  FAILED, KNOWN, expected 24.184
    test 1596 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 2: 6.146  FAILED, KNOWN, expected 6.142
    test 1597 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 2: 11.771  FAILED, KNOWN, expected 11.693
    test 1598 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 2: 6.830  FAILED, KNOWN, expected 6.840
    test 1599 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 2: 31.293  FAILED, KNOWN, expected 31.298
    test 1600 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 2: -31.953  FAILED, KNOWN, expected -31.952
    test 1601 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 2: -14.946
    test 1602 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 2: -17.031  FAILED, KNOWN, expected -17.032
    test 1603 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 2: -37.962
    test 1604 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 2: -26.493  FAILED, KNOWN, expected -26.492
    test 1605 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 2: -39.543
    test 1606 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 2: -22.557  FAILED, KNOWN, expected -22.556
    test 1607 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 2: -28.710
    test 1608 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 2: -46.590

    test 1609 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps max (in 0 FAILED): 0.115669
    test 1610 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps mean (of 210 total): 0.010307
    test 1611 GeoidKarney('egm84-15.pgm').height() kind 2, hits 0, eps stdev (of 210 total): 0.015203
    test 1612 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1613 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1614 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1615 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1616 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1617 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1618 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1619 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1620 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1621 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1622 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1623 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1624 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1625 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1626 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1627 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1628 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1629 closed: True
    test 1630 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1631 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1632 GeoidKarney('egm84-15.pgm').height(-76.981, 34.17) kind 3: 11.729
    test 1633 GeoidKarney('egm84-15.pgm').height(79.695, 88.806) kind 3: 0.271  FAILED, KNOWN, expected 0.270
    test 1634 GeoidKarney('egm84-15.pgm').height(-15.245, 168.748) kind 3: 67.074
    test 1635 GeoidKarney('egm84-15.pgm').height(-19.379, 15.855) kind 3: 25.345  FAILED, KNOWN, expected 25.344
    test 1636 GeoidKarney('egm84-15.pgm').height(43.378, -130.552) kind 3: -28.919
    test 1637 GeoidKarney('egm84-15.pgm').height(-16.075, 21.795) kind 3: 14.386
    test 1638 GeoidKarney('egm84-15.pgm').height(-11.256, -73.75) kind 3: 30.699  FAILED, KNOWN, expected 30.700
    test 1639 GeoidKarney('egm84-15.pgm').height(69.017, -15.921) kind 3: 62.226  FAILED, KNOWN, expected 62.225
    test 1640 GeoidKarney('egm84-15.pgm').height(2.221, 139.739) kind 3: 70.222
    test 1641 GeoidKarney('egm84-15.pgm').height(-9.097, 119.142) kind 3: 34.334  FAILED, KNOWN, expected 34.336
    test 1642 GeoidKarney('egm84-15.pgm').height(-28.524, -22.192) kind 3: 8.206
    test 1643 GeoidKarney('egm84-15.pgm').height(12.272, -136.424) kind 3: -20.073  FAILED, KNOWN, expected -20.074
    test 1644 GeoidKarney('egm84-15.pgm').height(-15.203, -85.604) kind 3: -3.129
    test 1645 GeoidKarney('egm84-15.pgm').height(-63.736, -77.17) kind 3: -3.216  FAILED, KNOWN, expected -3.217
    test 1646 GeoidKarney('egm84-15.pgm').height(-48.771, -90.102) kind 3: -1.532  FAILED, KNOWN, expected -1.531
    test 1647 GeoidKarney('egm84-15.pgm').height(-0.179, -126.368) kind 3: -16.741  FAILED, KNOWN, expected -16.742
    test 1648 GeoidKarney('egm84-15.pgm').height(1.586, -128.887) kind 3: -15.413  FAILED, KNOWN, expected -15.412
    test 1649 GeoidKarney('egm84-15.pgm').height(-48.781, -2.684) kind 3: 25.079  FAILED, KNOWN, expected 25.078
    test 1650 GeoidKarney('egm84-15.pgm').height(-49.092, 136.862) kind 3: -18.120
    test 1651 GeoidKarney('egm84-15.pgm').height(47.732, 17.552) kind 3: 46.225  FAILED, KNOWN, expected 46.224
    test 1652 GeoidKarney('egm84-15.pgm').height(-49.11, 85.706) kind 3: 18.649
    test 1653 GeoidKarney('egm84-15.pgm').height(-49.162, 40.321) kind 3: 44.763  FAILED, KNOWN, expected 44.764
    test 1654 GeoidKarney('egm84-15.pgm').height(3.498, 158.118) kind 3: 51.090  FAILED, KNOWN, expected 51.089
    test 1655 GeoidKarney('egm84-15.pgm').height(-35.616, 122.648) kind 3: -34.470  FAILED, KNOWN, expected -34.471
    test 1656 GeoidKarney('egm84-15.pgm').height(56.598, -96.114) kind 3: -39.125  FAILED, KNOWN, expected -39.124
    test 1657 GeoidKarney('egm84-15.pgm').height(-31.85, 149.121) kind 3: 28.142
    test 1658 GeoidKarney('egm84-15.pgm').height(-26.569, -177.792) kind 3: 49.620  FAILED, KNOWN, expected 49.619
    test 1659 GeoidKarney('egm84-15.pgm').height(76.735, -65.753) kind 3: 22.576  FAILED, KNOWN, expected 22.575
    test 1660 GeoidKarney('egm84-15.pgm').height(-21.404, -122.268) kind 3: -6.893
    test 1661 GeoidKarney('egm84-15.pgm').height(-77.133, -65.474) kind 3: -15.013  FAILED, KNOWN, expected -15.012
    test 1662 GeoidKarney('egm84-15.pgm').height(-58.812, 2.276) kind 3: 18.777  FAILED, KNOWN, expected 18.776
    test 1663 GeoidKarney('egm84-15.pgm').height(4.415, 155.683) kind 3: 53.645
    test 1664 GeoidKarney('egm84-15.pgm').height(-28.146, 107.081) kind 3: -39.073  FAILED, KNOWN, expected -39.074
    test 1665 GeoidKarney('egm84-15.pgm').height(-10.551, -126.69) kind 3: -9.645
    test 1666 GeoidKarney('egm84-15.pgm').height(-25.444, -103.337) kind 3: -2.527  FAILED, KNOWN, expected -2.528
    test 1667 GeoidKarney('egm84-15.pgm').height(24.436, 46.159) kind 3: -6.907
    test 1668 GeoidKarney('egm84-15.pgm').height(-72.889, 37.107) kind 3: 21.715  FAILED, KNOWN, expected 21.711
    test 1669 GeoidKarney('egm84-15.pgm').height(-19.629, 13.245) kind 3: 25.612  FAILED, KNOWN, expected 25.611
    test 1670 GeoidKarney('egm84-15.pgm').height(-7.602, 171.265) kind 3: 41.570  FAILED, KNOWN, expected 41.569
    test 1671 GeoidKarney('egm84-15.pgm').height(-45.364, -1.876) kind 3: 23.280
    test 1672 GeoidKarney('egm84-15.pgm').height(-7.292, -69.18) kind 3: 24.502
    test 1673 GeoidKarney('egm84-15.pgm').height(-31.566, -166.689) kind 3: 14.825  FAILED, KNOWN, expected 14.826
    test 1674 GeoidKarney('egm84-15.pgm').height(-82.751, -162.085) kind 3: -45.104
    test 1675 GeoidKarney('egm84-15.pgm').height(-40.7, 99.466) kind 3: -17.252
    test 1676 GeoidKarney('egm84-15.pgm').height(48.676, 39.69) kind 3: 12.972
    test 1677 GeoidKarney('egm84-15.pgm').height(74.817, -78.404) kind 3: 4.777  FAILED, KNOWN, expected 4.776
    test 1678 GeoidKarney('egm84-15.pgm').height(-81.032, -63.865) kind 3: -23.578  FAILED, KNOWN, expected -23.577
    test 1679 GeoidKarney('egm84-15.pgm').height(74.022, 9.432) kind 3: 43.886  FAILED, KNOWN, expected 43.885
    test 1680 GeoidKarney('egm84-15.pgm').height(-75.071, 17.579) kind 3: 17.071  FAILED, KNOWN, expected 17.072
    test 1681 GeoidKarney('egm84-15.pgm').height(-12.546, -54.851) kind 3: -6.643
    test 1682 GeoidKarney('egm84-15.pgm').height(-13.621, 42.408) kind 3: -23.326  FAILED, KNOWN, expected -23.325
    test 1683 GeoidKarney('egm84-15.pgm').height(-2.266, -91.951) kind 3: -10.699  FAILED, KNOWN, expected -10.698
    test 1684 GeoidKarney('egm84-15.pgm').height(-18.672, 42.547) kind 3: -10.268  FAILED, KNOWN, expected -10.265
    test 1685 GeoidKarney('egm84-15.pgm').height(-41.44, 157.413) kind 3: 0.690  FAILED, KNOWN, expected 0.689
    test 1686 GeoidKarney('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1687 GeoidKarney('egm84-15.pgm').height(39.26, -30.351) kind 3: 57.553  FAILED, KNOWN, expected 57.554
    test 1688 GeoidKarney('egm84-15.pgm').height(-51.699, -141.493) kind 3: -16.937  FAILED, KNOWN, expected -16.936
    test 1689 GeoidKarney('egm84-15.pgm').height(36.585, 4.515) kind 3: 45.291  FAILED, KNOWN, expected 45.295
    test 1690 GeoidKarney('egm84-15.pgm').height(39.642, -54.659) kind 3: -13.585  FAILED, KNOWN, expected -13.586
    test 1691 GeoidKarney('egm84-15.pgm').height(59.761, 166.567) kind 3: 11.467  FAILED, KNOWN, expected 11.468
    test 1692 GeoidKarney('egm84-15.pgm').height(51.83, 13.357) kind 3: 42.092
    test 1693 GeoidKarney('egm84-15.pgm').height(-36.531, -175.431) kind 3: 22.830
    test 1694 GeoidKarney('egm84-15.pgm').height(-37.08, 125.264) kind 3: -32.302
    test 1695 GeoidKarney('egm84-15.pgm').height(-68.651, 92.732) kind 3: 9.228
    test 1696 GeoidKarney('egm84-15.pgm').height(35.087, 45.336) kind 3: 5.966  FAILED, KNOWN, expected 5.965
    test 1697 GeoidKarney('egm84-15.pgm').height(-61.356, -169.379) kind 3: -45.012  FAILED, KNOWN, expected -45.013
    test 1698 GeoidKarney('egm84-15.pgm').height(-36.955, 179.12) kind 3: 21.118
    test 1699 GeoidKarney('egm84-15.pgm').height(10.248, -6.714) kind 3: 30.497
    test 1700 GeoidKarney('egm84-15.pgm').height(36.868, 84.602) kind 3: -40.397  FAILED, KNOWN, expected -40.396
    test 1701 GeoidKarney('egm84-15.pgm').height(28.637, 88.933) kind 3: -31.701  FAILED, KNOWN, expected -31.704
    test 1702 GeoidKarney('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.276  FAILED, KNOWN, expected -32.277
    test 1703 GeoidKarney('egm84-15.pgm').height(7.611, 145.911) kind 3: 61.024
    test 1704 GeoidKarney('egm84-15.pgm').height(59.412, 170.102) kind 3: 4.996  FAILED, KNOWN, expected 4.994
    test 1705 GeoidKarney('egm84-15.pgm').height(-61.469, 126.144) kind 3: -30.238  FAILED, KNOWN, expected -30.237
    test 1706 GeoidKarney('egm84-15.pgm').height(18.514, -137.083) kind 3: -26.006
    test 1707 GeoidKarney('egm84-15.pgm').height(7.854, -126.799) kind 3: -29.283
    test 1708 GeoidKarney('egm84-15.pgm').height(47.489, 134.183) kind 3: 22.393  FAILED, KNOWN, expected 22.394
    test 1709 GeoidKarney('egm84-15.pgm').height(-34.144, -11.922) kind 3: 17.550
    test 1710 GeoidKarney('egm84-15.pgm').height(-58.389, 117.458) kind 3: -20.623  FAILED, KNOWN, expected -20.622
    test 1711 GeoidKarney('egm84-15.pgm').height(9.773, 95.846) kind 3: -41.482  FAILED, KNOWN, expected -41.484
    test 1712 GeoidKarney('egm84-15.pgm').height(-53.12, 136.994) kind 3: -20.968
    test 1713 GeoidKarney('egm84-15.pgm').height(-50.35, 0.075) kind 3: 25.567  FAILED, KNOWN, expected 25.568
    test 1714 GeoidKarney('egm84-15.pgm').height(31.438, -170.879) kind 3: -8.581
    test 1715 GeoidKarney('egm84-15.pgm').height(37.541, -153.024) kind 3: -18.330  FAILED, KNOWN, expected -18.329
    test 1716 GeoidKarney('egm84-15.pgm').height(27.586, 2.444) kind 3: 25.000  FAILED, KNOWN, expected 25.001
    test 1717 GeoidKarney('egm84-15.pgm').height(-26.139, -106.201) kind 3: -2.941  FAILED, KNOWN, expected -2.940
    test 1718 GeoidKarney('egm84-15.pgm').height(-33.426, -14.84) kind 3: 18.229  FAILED, KNOWN, expected 18.228
    test 1719 GeoidKarney('egm84-15.pgm').height(39.586, -153.019) kind 3: -16.507
    test 1720 GeoidKarney('egm84-15.pgm').height(-60.79, -2.578) kind 3: 14.275
    test 1721 GeoidKarney('egm84-15.pgm').height(-20.131, 21.975) kind 3: 16.853  FAILED, KNOWN, expected 16.852
    test 1722 GeoidKarney('egm84-15.pgm').height(75.649, 99.921) kind 3: -6.872
    test 1723 GeoidKarney('egm84-15.pgm').height(-0.385, -23.788) kind 3: 9.005  FAILED, KNOWN, expected 9.006
    test 1724 GeoidKarney('egm84-15.pgm').height(-51.56, -50.327) kind 3: 6.294  FAILED, KNOWN, expected 6.296
    test 1725 GeoidKarney('egm84-15.pgm').height(-43.129, -167.271) kind 3: -1.482  FAILED, KNOWN, expected -1.481
    test 1726 GeoidKarney('egm84-15.pgm').height(46.374, 71.948) kind 3: -40.916  FAILED, KNOWN, expected -40.915
    test 1727 GeoidKarney('egm84-15.pgm').height(-22.783, 140.657) kind 3: 37.495
    test 1728 GeoidKarney('egm84-15.pgm').height(-12.056, 122.804) kind 3: 32.255  FAILED, KNOWN, expected 32.258
    test 1729 GeoidKarney('egm84-15.pgm').height(30.127, 94.738) kind 3: -41.528  FAILED, KNOWN, expected -41.529
    test 1730 GeoidKarney('egm84-15.pgm').height(46.296, -174.479) kind 3: -1.376  FAILED, KNOWN, expected -1.377
    test 1731 GeoidKarney('egm84-15.pgm').height(34.99, 15.052) kind 3: 35.279  FAILED, KNOWN, expected 35.280
    test 1732 GeoidKarney('egm84-15.pgm').height(-51.287, 90.565) kind 3: 12.958
    test 1733 GeoidKarney('egm84-15.pgm').height(34.217, 141.302) kind 3: 18.313  FAILED, KNOWN, expected 18.307
    test 1734 GeoidKarney('egm84-15.pgm').height(-40.423, -142.787) kind 3: -10.400
    test 1735 GeoidKarney('egm84-15.pgm').height(-17.854, -170.216) kind 3: 28.640  FAILED, KNOWN, expected 28.638
    test 1736 GeoidKarney('egm84-15.pgm').height(47.803, 112.701) kind 3: -24.059
    test 1737 GeoidKarney('egm84-15.pgm').height(-23.276, 133.454) kind 3: 18.806
    test 1738 GeoidKarney('egm84-15.pgm').height(-26.884, -36.571) kind 3: -6.819  FAILED, KNOWN, expected -6.820
    test 1739 GeoidKarney('egm84-15.pgm').height(-37.106, 31.128) kind 3: 31.486
    test 1740 GeoidKarney('egm84-15.pgm').height(-75.363, -173.674) kind 3: -62.024
    test 1741 GeoidKarney('egm84-15.pgm').height(-18.305, 69.016) kind 3: -24.247  FAILED, KNOWN, expected -24.248
    test 1742 GeoidKarney('egm84-15.pgm').height(39.527, 23.58) kind 3: 43.255
    test 1743 GeoidKarney('egm84-15.pgm').height(68.903, 30.97) kind 3: 18.499  FAILED, KNOWN, expected 18.498
    test 1744 GeoidKarney('egm84-15.pgm').height(53.937, 168.318) kind 3: 4.069  FAILED, KNOWN, expected 4.067
    test 1745 GeoidKarney('egm84-15.pgm').height(-38.6, 64.812) kind 3: 25.455  FAILED, KNOWN, expected 25.454
    test 1746 GeoidKarney('egm84-15.pgm').height(-41.396, -69.739) kind 3: 26.655  FAILED, KNOWN, expected 26.657
    test 1747 GeoidKarney('egm84-15.pgm').height(50.158, 72.319) kind 3: -31.967  FAILED, KNOWN, expected -31.966
    test 1748 GeoidKarney('egm84-15.pgm').height(27.692, 176.153) kind 3: -4.416  FAILED, KNOWN, expected -4.415
    test 1749 GeoidKarney('egm84-15.pgm').height(-48.419, 170.454) kind 3: -6.741
    test 1750 GeoidKarney('egm84-15.pgm').height(-65.346, -124.976) kind 3: -34.902  FAILED, KNOWN, expected -34.900
    test 1751 GeoidKarney('egm84-15.pgm').height(-51.873, 167.266) kind 3: -14.223
    test 1752 GeoidKarney('egm84-15.pgm').height(-7.263, 84.308) kind 3: -79.317
    test 1753 GeoidKarney('egm84-15.pgm').height(-1.461, -105.458) kind 3: -16.162  FAILED, KNOWN, expected -16.163
    test 1754 GeoidKarney('egm84-15.pgm').height(7.684, 161.873) kind 3: 36.288  FAILED, KNOWN, expected 36.287
    test 1755 GeoidKarney('egm84-15.pgm').height(-31.475, -158.52) kind 3: 4.067  FAILED, KNOWN, expected 4.068
    test 1756 GeoidKarney('egm84-15.pgm').height(-36.187, 62.917) kind 3: 24.406  FAILED, KNOWN, expected 24.407
    test 1757 GeoidKarney('egm84-15.pgm').height(16.003, 141.687) kind 3: 53.053  FAILED, KNOWN, expected 53.054
    test 1758 GeoidKarney('egm84-15.pgm').height(30.182, 86.261) kind 3: -30.621  FAILED, KNOWN, expected -30.622
    test 1759 GeoidKarney('egm84-15.pgm').height(-77.304, 159.498) kind 3: -53.540
    test 1760 GeoidKarney('egm84-15.pgm').height(39.536, 139.795) kind 3: 36.262
    test 1761 GeoidKarney('egm84-15.pgm').height(8.569, 134.618) kind 3: 64.367  FAILED, KNOWN, expected 64.369
    test 1762 GeoidKarney('egm84-15.pgm').height(14.473, 90.596) kind 3: -61.301  FAILED, KNOWN, expected -61.300
    test 1763 GeoidKarney('egm84-15.pgm').height(-13.138, -99.589) kind 3: -8.000  FAILED, KNOWN, expected -7.999
    test 1764 GeoidKarney('egm84-15.pgm').height(34.212, -26.307) kind 3: 41.479  FAILED, KNOWN, expected 41.477
    test 1765 GeoidKarney('egm84-15.pgm').height(21.89, 76.371) kind 3: -59.875  FAILED, KNOWN, expected -59.876
    test 1766 GeoidKarney('egm84-15.pgm').height(29.793, 120.487) kind 3: 8.404
    test 1767 GeoidKarney('egm84-15.pgm').height(15.724, 122.714) kind 3: 39.154  FAILED, KNOWN, expected 39.152
    test 1768 GeoidKarney('egm84-15.pgm').height(-66.208, -78.499) kind 3: -7.076
    test 1769 GeoidKarney('egm84-15.pgm').height(-39.507, 55.809) kind 3: 33.179  FAILED, KNOWN, expected 33.178
    test 1770 GeoidKarney('egm84-15.pgm').height(28.159, 51.476) kind 3: -23.832
    test 1771 GeoidKarney('egm84-15.pgm').height(-36.207, 120.205) kind 3: -38.206
    test 1772 GeoidKarney('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.144  FAILED, KNOWN, expected -22.142
    test 1773 GeoidKarney('egm84-15.pgm').height(-16.993, 37.136) kind 3: -13.763  FAILED, KNOWN, expected -13.765
    test 1774 GeoidKarney('egm84-15.pgm').height(-11.477, 12.039) kind 3: 16.899  FAILED, KNOWN, expected 16.898
    test 1775 GeoidKarney('egm84-15.pgm').height(30.428, -144.765) kind 3: -22.475  FAILED, KNOWN, expected -22.474
    test 1776 GeoidKarney('egm84-15.pgm').height(-17.44, -92.424) kind 3: -4.717  FAILED, KNOWN, expected -4.718
    test 1777 GeoidKarney('egm84-15.pgm').height(40.203, 143.43) kind 3: 16.635
    test 1778 GeoidKarney('egm84-15.pgm').height(-37.098, -106.574) kind 3: -9.011  FAILED, KNOWN, expected -9.012
    test 1779 GeoidKarney('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 1780 GeoidKarney('egm84-15.pgm').height(-31.633, 148.182) kind 3: 26.236
    test 1781 GeoidKarney('egm84-15.pgm').height(-56.07, -141.407) kind 3: -21.955  FAILED, KNOWN, expected -21.953
    test 1782 GeoidKarney('egm84-15.pgm').height(-8.195, -52.691) kind 3: -17.959
    test 1783 GeoidKarney('egm84-15.pgm').height(17.851, 24.749) kind 3: 9.078
    test 1784 GeoidKarney('egm84-15.pgm').height(0.349, -108.333) kind 3: -19.157  FAILED, KNOWN, expected -19.158
    test 1785 GeoidKarney('egm84-15.pgm').height(15.038, 126.191) kind 3: 46.776
    test 1786 GeoidKarney('egm84-15.pgm').height(-21.111, -123.696) kind 3: -8.055
    test 1787 GeoidKarney('egm84-15.pgm').height(30.947, 173.002) kind 3: -7.695  FAILED, KNOWN, expected -7.696
    test 1788 GeoidKarney('egm84-15.pgm').height(-10.698, -144.091) kind 3: -1.048  FAILED, KNOWN, expected -1.049
    test 1789 GeoidKarney('egm84-15.pgm').height(-29.412, 124.753) kind 3: -16.082  FAILED, KNOWN, expected -16.081
    test 1790 GeoidKarney('egm84-15.pgm').height(38.224, -137.189) kind 3: -35.426  FAILED, KNOWN, expected -35.427
    test 1791 GeoidKarney('egm84-15.pgm').height(36.064, -132.409) kind 3: -38.648
    test 1792 GeoidKarney('egm84-15.pgm').height(29.975, 178.076) kind 3: -5.519
    test 1793 GeoidKarney('egm84-15.pgm').height(-21.346, 169.26) kind 3: 53.430  FAILED, KNOWN, expected 53.431
    test 1794 GeoidKarney('egm84-15.pgm').height(49.282, -152.934) kind 3: 1.978  FAILED, KNOWN, expected 1.979
    test 1795 GeoidKarney('egm84-15.pgm').height(16.349, -99.962) kind 3: -13.194  FAILED, KNOWN, expected -13.197
    test 1796 GeoidKarney('egm84-15.pgm').height(-14.293, -167.34) kind 3: 18.945
    test 1797 GeoidKarney('egm84-15.pgm').height(47.166, -38.523) kind 3: 45.185  FAILED, KNOWN, expected 45.187
    test 1798 GeoidKarney('egm84-15.pgm').height(-58.911, 114.347) kind 3: -17.146  FAILED, KNOWN, expected -17.145
    test 1799 GeoidKarney('egm84-15.pgm').height(-9.055, 111.294) kind 3: 13.145  FAILED, KNOWN, expected 13.146
    test 1800 GeoidKarney('egm84-15.pgm').height(18.391, 29.692) kind 3: 4.932  FAILED, KNOWN, expected 4.933
    test 1801 GeoidKarney('egm84-15.pgm').height(-15.074, 22.153) kind 3: 12.327  FAILED, KNOWN, expected 12.326
    test 1802 GeoidKarney('egm84-15.pgm').height(-4.235, 62.001) kind 3: -60.029  FAILED, KNOWN, expected -60.030
    test 1803 GeoidKarney('egm84-15.pgm').height(15.171, -86.583) kind 3: 3.107  FAILED, KNOWN, expected 3.110
    test 1804 GeoidKarney('egm84-15.pgm').height(79.254, 112.116) kind 3: -2.741
    test 1805 GeoidKarney('egm84-15.pgm').height(15.947, 156.093) kind 3: 32.086  FAILED, KNOWN, expected 32.085
    test 1806 GeoidKarney('egm84-15.pgm').height(68.371, -177.382) kind 3: 2.060
    test 1807 GeoidKarney('egm84-15.pgm').height(-41.931, -72.093) kind 3: 22.916
    test 1808 GeoidKarney('egm84-15.pgm').height(-1.193, -143.133) kind 3: 5.519
    test 1809 GeoidKarney('egm84-15.pgm').height(-37.006, 154.513) kind 3: 11.021  FAILED, KNOWN, expected 11.020
    test 1810 GeoidKarney('egm84-15.pgm').height(-22.148, 9.938) kind 3: 22.171
    test 1811 GeoidKarney('egm84-15.pgm').height(24.329, 109.044) kind 3: -22.945  FAILED, KNOWN, expected -22.944
    test 1812 GeoidKarney('egm84-15.pgm').height(-54.878, 114.691) kind 3: -17.579  FAILED, KNOWN, expected -17.580
    test 1813 GeoidKarney('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 1814 GeoidKarney('egm84-15.pgm').height(2.372, 58.974) kind 3: -61.040
    test 1815 GeoidKarney('egm84-15.pgm').height(15.937, 165.854) kind 3: 20.906  FAILED, KNOWN, expected 20.907
    test 1816 GeoidKarney('egm84-15.pgm').height(4.889, -24.213) kind 3: 13.874
    test 1817 GeoidKarney('egm84-15.pgm').height(-11.392, 179.558) kind 3: 40.928  FAILED, KNOWN, expected 40.929
    test 1818 GeoidKarney('egm84-15.pgm').height(58.246, 4.862) kind 3: 43.191
    test 1819 GeoidKarney('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.006
    test 1820 GeoidKarney('egm84-15.pgm').height(-58.196, 117.306) kind 3: -20.375
    test 1821 GeoidKarney('egm84-15.pgm').height(44.5, 173.769) kind 3: -7.851  FAILED, KNOWN, expected -7.852
    test 1822 GeoidKarney('egm84-15.pgm').height(-28.863, -139.775) kind 3: -8.675  FAILED, KNOWN, expected -8.674
    test 1823 GeoidKarney('egm84-15.pgm').height(19.507, -96.099) kind 3: -14.116  FAILED, KNOWN, expected -14.117
    test 1824 GeoidKarney('egm84-15.pgm').height(-42.488, -73.907) kind 3: 17.252  FAILED, KNOWN, expected 17.251
    test 1825 GeoidKarney('egm84-15.pgm').height(46.138, -141.429) kind 3: -19.435  FAILED, KNOWN, expected -19.436
    test 1826 GeoidKarney('egm84-15.pgm').height(60.507, 93.743) kind 3: -31.331  FAILED, KNOWN, expected -31.330
    test 1827 GeoidKarney('egm84-15.pgm').height(26.219, -145.434) kind 3: -17.091  FAILED, KNOWN, expected -17.090
    test 1828 GeoidKarney('egm84-15.pgm').height(-28.687, 3.37) kind 3: 24.184
    test 1829 GeoidKarney('egm84-15.pgm').height(-15.008, 117.45) kind 3: 6.142
    test 1830 GeoidKarney('egm84-15.pgm').height(40.71, 144.095) kind 3: 11.693
    test 1831 GeoidKarney('egm84-15.pgm').height(20.823, -173.611) kind 3: 6.839  FAILED, KNOWN, expected 6.840
    test 1832 GeoidKarney('egm84-15.pgm').height(16.776, -3.009) kind 3: 31.298
    test 1833 GeoidKarney('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.952
    test 1834 GeoidKarney('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 1835 GeoidKarney('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.032
    test 1836 GeoidKarney('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 1837 GeoidKarney('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.492
    test 1838 GeoidKarney('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 1839 GeoidKarney('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.556
    test 1840 GeoidKarney('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 1841 GeoidKarney('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 1842 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps max (in 0 FAILED): 0.005459
    test 1843 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps mean (of 210 total): 0.000736
    test 1844 GeoidKarney('egm84-15.pgm').height() kind 3, hits 0, eps stdev (of 210 total): 0.000728
    test 1845 GeoidKarney('egm84-15.pgm').highest(): -4.5, 148.75, 81.33
    test 1846 GeoidKarney('egm84-15.pgm').lowerleft(): -90.0, -180.0, -29.712
    test 1847 GeoidKarney('egm84-15.pgm').lowerright(): -90.0, 180.0, -29.712
    test 1848 GeoidKarney('egm84-15.pgm').lowest(): 4.75, 79.25, -107.34
    test 1849 GeoidKarney('egm84-15.pgm').upperleft(): 90.0, -180.0, 13.098
    test 1850 GeoidKarney('egm84-15.pgm').upperright(): 90.0, 180.0, 13.098
    test 1851 GeoidKarney('egm84-15.pgm').dtype: ("'ushort'",)
    test 1852 GeoidKarney('egm84-15.pgm').knots: ('1038240',)
    test 1853 GeoidKarney('egm84-15.pgm').mean: ('-1.317',)
    test 1854 GeoidKarney('egm84-15.pgm').nBytes: ('None',)
    test 1855 GeoidKarney('egm84-15.pgm').smooth: ('None',)
    test 1856 GeoidKarney('egm84-15.pgm').stdev: ('29.244',)
    test 1857 GeoidKarney('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 1858 GeoidKarney('egm84-15.pgm')._ll2g2(180, 360): (180, 360)
    test 1859 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1860 GeoidKarney('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 1861 GeoidKarney('egm84-15.pgm').toStr: GeoidKarney('egm84-15.pgm'): lowerleft(-90.0, -180.0, -29.712), upperright(90.0, 180.0, 13.098), center(0.0, 0.0, 18.33), highest(-4.5, 148.75, 81.33), lowest(4.75, 79.25, -107.34)

    test 1862 closed: True
    test 1863 copy(GeoidKarney): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1864 GeoidKarney.copy(): (<class 'pygeodesy.geoids.GeoidKarney'>, True)
    test 1865 GeoidPGM('egm84-15.pgm').height(-76.981, 34.17) kind 3: lli ('-76.981466, 34.17016'): lli ('-76.981466, 34.17016'): outside on SE  FAILED, KNOWN, expected 11.729
    test 1866 GeoidPGM('egm84-15.pgm').height(79.695, 88.806) kind 3: lli ('79.695484, 88.805571'): lli ('79.695484, 88.805571'): outside on NE  FAILED, KNOWN, expected 0.270
    test 1867 GeoidPGM('egm84-15.pgm').height(-15.245, 168.748) kind 3: lli ('-15.244804, 168.747961'): lli ('-15.244804, 168.747961'): outside on SE  FAILED, KNOWN, expected 67.074
    test 1868 GeoidPGM('egm84-15.pgm').height(-19.379, 15.855) kind 3: lli ('-19.379357, 15.85511'): lli ('-19.379357, 15.85511'): outside on SE  FAILED, KNOWN, expected 25.344
    test 1869 GeoidPGM('egm84-15.pgm').height(43.378, -130.552) kind 3: lli ('43.377784, -130.551582'): lli ('43.377784, -130.551582'): outside on W  FAILED, KNOWN, expected -28.919
    test 1870 GeoidPGM('egm84-15.pgm').height(-16.075, 21.795) kind 3: lli ('-16.074554, 21.79547'): lli ('-16.074554, 21.79547'): outside on SE  FAILED, KNOWN, expected 14.386
    test 1871 GeoidPGM('egm84-15.pgm').height(-11.256, -73.75) kind 3: lli ('-11.256389, -73.750255'): lli ('-11.256389, -73.750255'): outside on S  FAILED, KNOWN, expected 30.700
    test 1872 GeoidPGM('egm84-15.pgm').height(69.017, -15.921) kind 3: lli ('69.016564, -15.921115'): lli ('69.016564, -15.921115'): outside on NE  FAILED, KNOWN, expected 62.225
    test 1873 GeoidPGM('egm84-15.pgm').height(2.221, 139.739) kind 3: lli ('2.221008, 139.73935'): lli ('2.221008, 139.73935'): outside on SE  FAILED, KNOWN, expected 70.222
    test 1874 GeoidPGM('egm84-15.pgm').height(-9.097, 119.142) kind 3: lli ('-9.096878, 119.141551'): lli ('-9.096878, 119.141551'): outside on SE  FAILED, KNOWN, expected 34.336
    test 1875 GeoidPGM('egm84-15.pgm').height(-28.524, -22.192) kind 3: lli ('-28.523717, -22.1925'): lli ('-28.523717, -22.1925'): outside on SE  FAILED, KNOWN, expected 8.206
    test 1876 GeoidPGM('egm84-15.pgm').height(12.272, -136.424) kind 3: lli ('12.27231, -136.424168'): lli ('12.27231, -136.424168'): outside on SW  FAILED, KNOWN, expected -20.074
    test 1877 GeoidPGM('egm84-15.pgm').height(-15.203, -85.604) kind 3: lli ('-15.20317, -85.603753'): lli ('-15.20317, -85.603753'): outside on S  FAILED, KNOWN, expected -3.129
    test 1878 GeoidPGM('egm84-15.pgm').height(-63.736, -77.17) kind 3: lli ('-63.735565, -77.169636'): lli ('-63.735565, -77.169636'): outside on S  FAILED, KNOWN, expected -3.217
    test 1879 GeoidPGM('egm84-15.pgm').height(-48.771, -90.102) kind 3: lli ('-48.770825, -90.102117'): lli ('-48.770825, -90.102117'): outside on S  FAILED, KNOWN, expected -1.531
    test 1880 GeoidPGM('egm84-15.pgm').height(-0.179, -126.368) kind 3: lli ('-0.178524, -126.368279'): lli ('-0.178524, -126.368279'): outside on SW  FAILED, KNOWN, expected -16.742
    test 1881 GeoidPGM('egm84-15.pgm').height(1.586, -128.887) kind 3: lli ('1.585536, -128.886967'): lli ('1.585536, -128.886967'): outside on SW  FAILED, KNOWN, expected -15.412
    test 1882 GeoidPGM('egm84-15.pgm').height(-48.781, -2.684) kind 3: lli ('-48.780705, -2.684224'): lli ('-48.780705, -2.684224'): outside on SE  FAILED, KNOWN, expected 25.078
    test 1883 GeoidPGM('egm84-15.pgm').height(-49.092, 136.862) kind 3: lli ('-49.091632, 136.862256'): lli ('-49.091632, 136.862256'): outside on SE  FAILED, KNOWN, expected -18.120
    test 1884 GeoidPGM('egm84-15.pgm').height(47.732, 17.552) kind 3: lli ('47.731727, 17.552416'): lli ('47.731727, 17.552416'): outside on E  FAILED, KNOWN, expected 46.224
    test 1885 GeoidPGM('egm84-15.pgm').height(-49.11, 85.706) kind 3: lli ('-49.109549, 85.706437'): lli ('-49.109549, 85.706437'): outside on SE  FAILED, KNOWN, expected 18.649
    test 1886 GeoidPGM('egm84-15.pgm').height(-49.162, 40.321) kind 3: lli ('-49.162281, 40.321209'): lli ('-49.162281, 40.321209'): outside on SE  FAILED, KNOWN, expected 44.764
    test 1887 GeoidPGM('egm84-15.pgm').height(3.498, 158.118) kind 3: lli ('3.498333, 158.117699'): lli ('3.498333, 158.117699'): outside on SE  FAILED, KNOWN, expected 51.089
    test 1888 GeoidPGM('egm84-15.pgm').height(-35.616, 122.648) kind 3: lli ('-35.616495, 122.648407'): lli ('-35.616495, 122.648407'): outside on SE  FAILED, KNOWN, expected -34.471
    test 1889 GeoidPGM('egm84-15.pgm').height(56.598, -96.114) kind 3: lli ('56.598256, -96.113696'): lli ('56.598256, -96.113696'): outside on N  FAILED, KNOWN, expected -39.124
    test 1890 GeoidPGM('egm84-15.pgm').height(-31.85, 149.121) kind 3: lli ('-31.850231, 149.120596'): lli ('-31.850231, 149.120596'): outside on SE  FAILED, KNOWN, expected 28.142
    test 1891 GeoidPGM('egm84-15.pgm').height(-26.569, -177.792) kind 3: lli ('-26.568996, -177.792196'): lli ('-26.568996, -177.792196'): outside on SW  FAILED, KNOWN, expected 49.619
    test 1892 GeoidPGM('egm84-15.pgm').height(76.735, -65.753) kind 3: lli ('76.734699, -65.752952'): lli ('76.734699, -65.752952'): outside on N  FAILED, KNOWN, expected 22.575
    test 1893 GeoidPGM('egm84-15.pgm').height(-21.404, -122.268) kind 3: lli ('-21.404166, -122.267869'): lli ('-21.404166, -122.267869'): outside on S  FAILED, KNOWN, expected -6.893
    test 1894 GeoidPGM('egm84-15.pgm').height(-77.133, -65.474) kind 3: lli ('-77.133426, -65.473819'): lli ('-77.133426, -65.473819'): outside on S  FAILED, KNOWN, expected -15.012
    test 1895 GeoidPGM('egm84-15.pgm').height(-58.812, 2.276) kind 3: lli ('-58.811779, 2.276142'): lli ('-58.811779, 2.276142'): outside on SE  FAILED, KNOWN, expected 18.776
    test 1896 GeoidPGM('egm84-15.pgm').height(4.415, 155.683) kind 3: lli ('4.415102, 155.683336'): lli ('4.415102, 155.683336'): outside on SE  FAILED, KNOWN, expected 53.645
    test 1897 GeoidPGM('egm84-15.pgm').height(-28.146, 107.081) kind 3: lli ('-28.145768, 107.081334'): lli ('-28.145768, 107.081334'): outside on SE  FAILED, KNOWN, expected -39.074
    test 1898 GeoidPGM('egm84-15.pgm').height(-10.551, -126.69) kind 3: lli ('-10.551267, -126.690468'): lli ('-10.551267, -126.690468'): outside on SW  FAILED, KNOWN, expected -9.645
    test 1899 GeoidPGM('egm84-15.pgm').height(-25.444, -103.337) kind 3: lli ('-25.444344, -103.337184'): lli ('-25.444344, -103.337184'): outside on S  FAILED, KNOWN, expected -2.528
    test 1900 GeoidPGM('egm84-15.pgm').height(24.436, 46.159) kind 3: lli ('24.435896, 46.158715'): lli ('24.435896, 46.158715'): outside on SE  FAILED, KNOWN, expected -6.907
    test 1901 GeoidPGM('egm84-15.pgm').height(-72.889, 37.107) kind 3: lli ('-72.888898, 37.106907'): lli ('-72.888898, 37.106907'): outside on SE  FAILED, KNOWN, expected 21.711
    test 1902 GeoidPGM('egm84-15.pgm').height(-19.629, 13.245) kind 3: lli ('-19.628762, 13.244525'): lli ('-19.628762, 13.244525'): outside on SE  FAILED, KNOWN, expected 25.611
    test 1903 GeoidPGM('egm84-15.pgm').height(-7.602, 171.265) kind 3: lli ('-7.602449, 171.264763'): lli ('-7.602449, 171.264763'): outside on SE  FAILED, KNOWN, expected 41.569
    test 1904 GeoidPGM('egm84-15.pgm').height(-45.364, -1.876) kind 3: lli ('-45.364396, -1.876412'): lli ('-45.364396, -1.876412'): outside on SE  FAILED, KNOWN, expected 23.280
    test 1905 GeoidPGM('egm84-15.pgm').height(-7.292, -69.18) kind 3: lli ('-7.292121, -69.179565'): lli ('-7.292121, -69.179565'): outside on S  FAILED, KNOWN, expected 24.502
    test 1906 GeoidPGM('egm84-15.pgm').height(-31.566, -166.689) kind 3: lli ('-31.566264, -166.688985'): lli ('-31.566264, -166.688985'): outside on SW  FAILED, KNOWN, expected 14.826
    test 1907 GeoidPGM('egm84-15.pgm').height(-82.751, -162.085) kind 3: lli ('-82.751144, -162.08523'): lli ('-82.751144, -162.08523'): outside on SW  FAILED, KNOWN, expected -45.104
    test 1908 GeoidPGM('egm84-15.pgm').height(-40.7, 99.466) kind 3: lli ('-40.699637, 99.465509'): lli ('-40.699637, 99.465509'): outside on SE  FAILED, KNOWN, expected -17.252
    test 1909 GeoidPGM('egm84-15.pgm').height(48.676, 39.69) kind 3: lli ('48.675771, 39.690012'): lli ('48.675771, 39.690012'): outside on E  FAILED, KNOWN, expected 12.972
    test 1910 GeoidPGM('egm84-15.pgm').height(74.817, -78.404) kind 3: lli ('74.817287, -78.404187'): lli ('74.817287, -78.404187'): outside on N  FAILED, KNOWN, expected 4.776
    test 1911 GeoidPGM('egm84-15.pgm').height(-81.032, -63.865) kind 3: lli ('-81.032306, -63.864898'): lli ('-81.032306, -63.864898'): outside on SE  FAILED, KNOWN, expected -23.577
    test 1912 GeoidPGM('egm84-15.pgm').height(74.022, 9.432) kind 3: lli ('74.021785, 9.431926'): lli ('74.021785, 9.431926'): outside on NE  FAILED, KNOWN, expected 43.885
    test 1913 GeoidPGM('egm84-15.pgm').height(-75.071, 17.579) kind 3: lli ('-75.070563, 17.57935'): lli ('-75.070563, 17.57935'): outside on SE  FAILED, KNOWN, expected 17.072
    test 1914 GeoidPGM('egm84-15.pgm').height(-12.546, -54.851) kind 3: lli ('-12.54612, -54.850614'): lli ('-12.54612, -54.850614'): outside on SE  FAILED, KNOWN, expected -6.643
    test 1915 GeoidPGM('egm84-15.pgm').height(-13.621, 42.408) kind 3: lli ('-13.621418, 42.407805'): lli ('-13.621418, 42.407805'): outside on SE  FAILED, KNOWN, expected -23.325
    test 1916 GeoidPGM('egm84-15.pgm').height(-2.266, -91.951) kind 3: lli ('-2.265774, -91.951437'): lli ('-2.265774, -91.951437'): outside on S  FAILED, KNOWN, expected -10.698
    test 1917 GeoidPGM('egm84-15.pgm').height(-18.672, 42.547) kind 3: lli ('-18.672316, 42.547125'): lli ('-18.672316, 42.547125'): outside on SE  FAILED, KNOWN, expected -10.265
    test 1918 GeoidPGM('egm84-15.pgm').height(-41.44, 157.413) kind 3: lli ('-41.439867, 157.413161'): lli ('-41.439867, 157.413161'): outside on SE  FAILED, KNOWN, expected 0.689
    test 1919 GeoidPGM('egm84-15.pgm').height(53.686, -79.375) kind 3: -43.759  FAILED, KNOWN, expected -43.758
    test 1920 GeoidPGM('egm84-15.pgm').height(39.26, -30.351) kind 3: lli ('39.260397, -30.351359'): lli ('39.260397, -30.351359'): outside on E  FAILED, KNOWN, expected 57.554
    test 1921 GeoidPGM('egm84-15.pgm').height(-51.699, -141.493) kind 3: lli ('-51.699195, -141.493082'): lli ('-51.699195, -141.493082'): outside on SW  FAILED, KNOWN, expected -16.936
    test 1922 GeoidPGM('egm84-15.pgm').height(36.585, 4.515) kind 3: lli ('36.584861, 4.515157'): lli ('36.584861, 4.515157'): outside on E  FAILED, KNOWN, expected 45.295
    test 1923 GeoidPGM('egm84-15.pgm').height(39.642, -54.659) kind 3: lli ('39.641638, -54.658846'): lli ('39.641638, -54.658846'): outside on E  FAILED, KNOWN, expected -13.586
    test 1924 GeoidPGM('egm84-15.pgm').height(59.761, 166.567) kind 3: lli ('59.761024, 166.566646'): lli ('59.761024, 166.566646'): outside on NE  FAILED, KNOWN, expected 11.468
    test 1925 GeoidPGM('egm84-15.pgm').height(51.83, 13.357) kind 3: lli ('51.830001, 13.357464'): lli ('51.830001, 13.357464'): outside on E  FAILED, KNOWN, expected 42.092
    test 1926 GeoidPGM('egm84-15.pgm').height(-36.531, -175.431) kind 3: lli ('-36.530912, -175.430804'): lli ('-36.530912, -175.430804'): outside on SW  FAILED, KNOWN, expected 22.830
    test 1927 GeoidPGM('egm84-15.pgm').height(-37.08, 125.264) kind 3: lli ('-37.079518, 125.263901'): lli ('-37.079518, 125.263901'): outside on SE  FAILED, KNOWN, expected -32.302
    test 1928 GeoidPGM('egm84-15.pgm').height(-68.651, 92.732) kind 3: lli ('-68.650762, 92.731524'): lli ('-68.650762, 92.731524'): outside on SE  FAILED, KNOWN, expected 9.228
    test 1929 GeoidPGM('egm84-15.pgm').height(35.087, 45.336) kind 3: lli ('35.086645, 45.335611'): lli ('35.086645, 45.335611'): outside on E  FAILED, KNOWN, expected 5.965
    test 1930 GeoidPGM('egm84-15.pgm').height(-61.356, -169.379) kind 3: lli ('-61.355646, -169.378929'): lli ('-61.355646, -169.378929'): outside on SW  FAILED, KNOWN, expected -45.013
    test 1931 GeoidPGM('egm84-15.pgm').height(-36.955, 179.12) kind 3: lli ('-36.954967, 179.11982'): lli ('-36.954967, 179.11982'): outside on SE  FAILED, KNOWN, expected 21.118
    test 1932 GeoidPGM('egm84-15.pgm').height(10.248, -6.714) kind 3: lli ('10.248399, -6.713559'): lli ('10.248399, -6.713559'): outside on SE  FAILED, KNOWN, expected 30.497
    test 1933 GeoidPGM('egm84-15.pgm').height(36.868, 84.602) kind 3: lli ('36.868193, 84.602243'): lli ('36.868193, 84.602243'): outside on E  FAILED, KNOWN, expected -40.396
    test 1934 GeoidPGM('egm84-15.pgm').height(28.637, 88.933) kind 3: lli ('28.636703, 88.932955'): lli ('28.636703, 88.932955'): outside on E  FAILED, KNOWN, expected -31.704
    test 1935 GeoidPGM('egm84-15.pgm').height(54.811, -99.968) kind 3: -32.277
    test 1936 GeoidPGM('egm84-15.pgm').height(7.611, 145.911) kind 3: lli ('7.610621, 145.911188'): lli ('7.610621, 145.911188'): outside on SE  FAILED, KNOWN, expected 61.024
    test 1937 GeoidPGM('egm84-15.pgm').height(59.412, 170.102) kind 3: lli ('59.411557, 170.102394'): lli ('59.411557, 170.102394'): outside on NE  FAILED, KNOWN, expected 4.994
    test 1938 GeoidPGM('egm84-15.pgm').height(-61.469, 126.144) kind 3: lli ('-61.468618, 126.144056'): lli ('-61.468618, 126.144056'): outside on SE  FAILED, KNOWN, expected -30.237
    test 1939 GeoidPGM('egm84-15.pgm').height(18.514, -137.083) kind 3: lli ('18.514019, -137.083301'): lli ('18.514019, -137.083301'): outside on SW  FAILED, KNOWN, expected -26.006
    test 1940 GeoidPGM('egm84-15.pgm').height(7.854, -126.799) kind 3: lli ('7.854318, -126.799148'): lli ('7.854318, -126.799148'): outside on SW  FAILED, KNOWN, expected -29.283
    test 1941 GeoidPGM('egm84-15.pgm').height(47.489, 134.183) kind 3: lli ('47.489222, 134.182527'): lli ('47.489222, 134.182527'): outside on E  FAILED, KNOWN, expected 22.394
    test 1942 GeoidPGM('egm84-15.pgm').height(-34.144, -11.922) kind 3: lli ('-34.143602, -11.921567'): lli ('-34.143602, -11.921567'): outside on SE  FAILED, KNOWN, expected 17.550
    test 1943 GeoidPGM('egm84-15.pgm').height(-58.389, 117.458) kind 3: lli ('-58.388787, 117.457755'): lli ('-58.388787, 117.457755'): outside on SE  FAILED, KNOWN, expected -20.622
    test 1944 GeoidPGM('egm84-15.pgm').height(9.773, 95.846) kind 3: lli ('9.772764, 95.845943'): lli ('9.772764, 95.845943'): outside on SE  FAILED, KNOWN, expected -41.484
    test 1945 GeoidPGM('egm84-15.pgm').height(-53.12, 136.994) kind 3: lli ('-53.120381, 136.993994'): lli ('-53.120381, 136.993994'): outside on SE  FAILED, KNOWN, expected -20.968
    test 1946 GeoidPGM('egm84-15.pgm').height(-50.35, 0.075) kind 3: lli ('-50.349867, 0.07532'): lli ('-50.349867, 0.07532'): outside on SE  FAILED, KNOWN, expected 25.568
    test 1947 GeoidPGM('egm84-15.pgm').height(31.438, -170.879) kind 3: lli ('31.438387, -170.878548'): lli ('31.438387, -170.878548'): outside on W  FAILED, KNOWN, expected -8.581
    test 1948 GeoidPGM('egm84-15.pgm').height(37.541, -153.024) kind 3: lli ('37.540689, -153.024228'): lli ('37.540689, -153.024228'): outside on W  FAILED, KNOWN, expected -18.329
    test 1949 GeoidPGM('egm84-15.pgm').height(27.586, 2.444) kind 3: lli ('27.586088, 2.443556'): lli ('27.586088, 2.443556'): outside on E  FAILED, KNOWN, expected 25.001
    test 1950 GeoidPGM('egm84-15.pgm').height(-26.139, -106.201) kind 3: lli ('-26.139126, -106.20081'): lli ('-26.139126, -106.20081'): outside on S  FAILED, KNOWN, expected -2.940
    test 1951 GeoidPGM('egm84-15.pgm').height(-33.426, -14.84) kind 3: lli ('-33.425976, -14.840359'): lli ('-33.425976, -14.840359'): outside on SE  FAILED, KNOWN, expected 18.228
    test 1952 GeoidPGM('egm84-15.pgm').height(39.586, -153.019) kind 3: lli ('39.586286, -153.018974'): lli ('39.586286, -153.018974'): outside on W  FAILED, KNOWN, expected -16.507
    test 1953 GeoidPGM('egm84-15.pgm').height(-60.79, -2.578) kind 3: lli ('-60.790289, -2.578163'): lli ('-60.790289, -2.578163'): outside on SE  FAILED, KNOWN, expected 14.275
    test 1954 GeoidPGM('egm84-15.pgm').height(-20.131, 21.975) kind 3: lli ('-20.130538, 21.974941'): lli ('-20.130538, 21.974941'): outside on SE  FAILED, KNOWN, expected 16.852
    test 1955 GeoidPGM('egm84-15.pgm').height(75.649, 99.921) kind 3: lli ('75.64878, 99.920587'): lli ('75.64878, 99.920587'): outside on NE  FAILED, KNOWN, expected -6.872
    test 1956 GeoidPGM('egm84-15.pgm').height(-0.385, -23.788) kind 3: lli ('-0.385453, -23.788336'): lli ('-0.385453, -23.788336'): outside on SE  FAILED, KNOWN, expected 9.006
    test 1957 GeoidPGM('egm84-15.pgm').height(-51.56, -50.327) kind 3: lli ('-51.559564, -50.32687'): lli ('-51.559564, -50.32687'): outside on SE  FAILED, KNOWN, expected 6.296
    test 1958 GeoidPGM('egm84-15.pgm').height(-43.129, -167.271) kind 3: lli ('-43.129209, -167.27147'): lli ('-43.129209, -167.27147'): outside on SW  FAILED, KNOWN, expected -1.481
    test 1959 GeoidPGM('egm84-15.pgm').height(46.374, 71.948) kind 3: lli ('46.374177, 71.947616'): lli ('46.374177, 71.947616'): outside on E  FAILED, KNOWN, expected -40.915
    test 1960 GeoidPGM('egm84-15.pgm').height(-22.783, 140.657) kind 3: lli ('-22.783085, 140.657444'): lli ('-22.783085, 140.657444'): outside on SE  FAILED, KNOWN, expected 37.495
    test 1961 GeoidPGM('egm84-15.pgm').height(-12.056, 122.804) kind 3: lli ('-12.05584, 122.80402'): lli ('-12.05584, 122.80402'): outside on SE  FAILED, KNOWN, expected 32.258
    test 1962 GeoidPGM('egm84-15.pgm').height(30.127, 94.738) kind 3: lli ('30.127372, 94.738186'): lli ('30.127372, 94.738186'): outside on E  FAILED, KNOWN, expected -41.529
    test 1963 GeoidPGM('egm84-15.pgm').height(46.296, -174.479) kind 3: lli ('46.296018, -174.478616'): lli ('46.296018, -174.478616'): outside on W  FAILED, KNOWN, expected -1.377
    test 1964 GeoidPGM('egm84-15.pgm').height(34.99, 15.052) kind 3: lli ('34.989646, 15.051646'): lli ('34.989646, 15.051646'): outside on E  FAILED, KNOWN, expected 35.280
    test 1965 GeoidPGM('egm84-15.pgm').height(-51.287, 90.565) kind 3: lli ('-51.287168, 90.564711'): lli ('-51.287168, 90.564711'): outside on SE  FAILED, KNOWN, expected 12.958
    test 1966 GeoidPGM('egm84-15.pgm').height(34.217, 141.302) kind 3: lli ('34.217016, 141.301548'): lli ('34.217016, 141.301548'): outside on E  FAILED, KNOWN, expected 18.307
    test 1967 GeoidPGM('egm84-15.pgm').height(-40.423, -142.787) kind 3: lli ('-40.423023, -142.786592'): lli ('-40.423023, -142.786592'): outside on SW  FAILED, KNOWN, expected -10.400
    test 1968 GeoidPGM('egm84-15.pgm').height(-17.854, -170.216) kind 3: lli ('-17.854486, -170.216354'): lli ('-17.854486, -170.216354'): outside on SW  FAILED, KNOWN, expected 28.638
    test 1969 GeoidPGM('egm84-15.pgm').height(47.803, 112.701) kind 3: lli ('47.803271, 112.700942'): lli ('47.803271, 112.700942'): outside on E  FAILED, KNOWN, expected -24.059
    test 1970 GeoidPGM('egm84-15.pgm').height(-23.276, 133.454) kind 3: lli ('-23.275962, 133.453821'): lli ('-23.275962, 133.453821'): outside on SE  FAILED, KNOWN, expected 18.806
    test 1971 GeoidPGM('egm84-15.pgm').height(-26.884, -36.571) kind 3: lli ('-26.884369, -36.570654'): lli ('-26.884369, -36.570654'): outside on SE  FAILED, KNOWN, expected -6.820
    test 1972 GeoidPGM('egm84-15.pgm').height(-37.106, 31.128) kind 3: lli ('-37.106468, 31.127939'): lli ('-37.106468, 31.127939'): outside on SE  FAILED, KNOWN, expected 31.486
    test 1973 GeoidPGM('egm84-15.pgm').height(-75.363, -173.674) kind 3: lli ('-75.363185, -173.673649'): lli ('-75.363185, -173.673649'): outside on SW  FAILED, KNOWN, expected -62.024
    test 1974 GeoidPGM('egm84-15.pgm').height(-18.305, 69.016) kind 3: lli ('-18.30485, 69.015565'): lli ('-18.30485, 69.015565'): outside on SE  FAILED, KNOWN, expected -24.248
    test 1975 GeoidPGM('egm84-15.pgm').height(39.527, 23.58) kind 3: lli ('39.527401, 23.580206'): lli ('39.527401, 23.580206'): outside on E  FAILED, KNOWN, expected 43.255
    test 1976 GeoidPGM('egm84-15.pgm').height(68.903, 30.97) kind 3: lli ('68.903148, 30.970247'): lli ('68.903148, 30.970247'): outside on NE  FAILED, KNOWN, expected 18.498
    test 1977 GeoidPGM('egm84-15.pgm').height(53.937, 168.318) kind 3: lli ('53.936937, 168.318201'): lli ('53.936937, 168.318201'): outside on E  FAILED, KNOWN, expected 4.067
    test 1978 GeoidPGM('egm84-15.pgm').height(-38.6, 64.812) kind 3: lli ('-38.600098, 64.811532'): lli ('-38.600098, 64.811532'): outside on SE  FAILED, KNOWN, expected 25.454
    test 1979 GeoidPGM('egm84-15.pgm').height(-41.396, -69.739) kind 3: lli ('-41.395739, -69.739418'): lli ('-41.395739, -69.739418'): outside on S  FAILED, KNOWN, expected 26.657
    test 1980 GeoidPGM('egm84-15.pgm').height(50.158, 72.319) kind 3: lli ('50.157749, 72.319017'): lli ('50.157749, 72.319017'): outside on E  FAILED, KNOWN, expected -31.966
    test 1981 GeoidPGM('egm84-15.pgm').height(27.692, 176.153) kind 3: lli ('27.691879, 176.152884'): lli ('27.691879, 176.152884'): outside on E  FAILED, KNOWN, expected -4.415
    test 1982 GeoidPGM('egm84-15.pgm').height(-48.419, 170.454) kind 3: lli ('-48.419449, 170.454472'): lli ('-48.419449, 170.454472'): outside on SE  FAILED, KNOWN, expected -6.741
    test 1983 GeoidPGM('egm84-15.pgm').height(-65.346, -124.976) kind 3: lli ('-65.34567, -124.975961'): lli ('-65.34567, -124.975961'): outside on S  FAILED, KNOWN, expected -34.900
    test 1984 GeoidPGM('egm84-15.pgm').height(-51.873, 167.266) kind 3: lli ('-51.873009, 167.265613'): lli ('-51.873009, 167.265613'): outside on SE  FAILED, KNOWN, expected -14.223
    test 1985 GeoidPGM('egm84-15.pgm').height(-7.263, 84.308) kind 3: lli ('-7.262544, 84.307626'): lli ('-7.262544, 84.307626'): outside on SE  FAILED, KNOWN, expected -79.317
    test 1986 GeoidPGM('egm84-15.pgm').height(-1.461, -105.458) kind 3: lli ('-1.461003, -105.458323'): lli ('-1.461003, -105.458323'): outside on S  FAILED, KNOWN, expected -16.163
    test 1987 GeoidPGM('egm84-15.pgm').height(7.684, 161.873) kind 3: lli ('7.684324, 161.87293'): lli ('7.684324, 161.87293'): outside on SE  FAILED, KNOWN, expected 36.287
    test 1988 GeoidPGM('egm84-15.pgm').height(-31.475, -158.52) kind 3: lli ('-31.474549, -158.520033'): lli ('-31.474549, -158.520033'): outside on SW  FAILED, KNOWN, expected 4.068
    test 1989 GeoidPGM('egm84-15.pgm').height(-36.187, 62.917) kind 3: lli ('-36.187212, 62.917075'): lli ('-36.187212, 62.917075'): outside on SE  FAILED, KNOWN, expected 24.407
    test 1990 GeoidPGM('egm84-15.pgm').height(16.003, 141.687) kind 3: lli ('16.002975, 141.686552'): lli ('16.002975, 141.686552'): outside on SE  FAILED, KNOWN, expected 53.054
    test 1991 GeoidPGM('egm84-15.pgm').height(30.182, 86.261) kind 3: lli ('30.182218, 86.260576'): lli ('30.182218, 86.260576'): outside on E  FAILED, KNOWN, expected -30.622
    test 1992 GeoidPGM('egm84-15.pgm').height(-77.304, 159.498) kind 3: lli ('-77.303842, 159.497665'): lli ('-77.303842, 159.497665'): outside on SE  FAILED, KNOWN, expected -53.540
    test 1993 GeoidPGM('egm84-15.pgm').height(39.536, 139.795) kind 3: lli ('39.536, 139.795358'): lli ('39.536, 139.795358'): outside on E  FAILED, KNOWN, expected 36.262
    test 1994 GeoidPGM('egm84-15.pgm').height(8.569, 134.618) kind 3: lli ('8.569309, 134.618403'): lli ('8.569309, 134.618403'): outside on SE  FAILED, KNOWN, expected 64.369
    test 1995 GeoidPGM('egm84-15.pgm').height(14.473, 90.596) kind 3: lli ('14.473483, 90.595663'): lli ('14.473483, 90.595663'): outside on SE  FAILED, KNOWN, expected -61.300
    test 1996 GeoidPGM('egm84-15.pgm').height(-13.138, -99.589) kind 3: lli ('-13.13767, -99.589202'): lli ('-13.13767, -99.589202'): outside on S  FAILED, KNOWN, expected -7.999
    test 1997 GeoidPGM('egm84-15.pgm').height(34.212, -26.307) kind 3: lli ('34.211572, -26.307194'): lli ('34.211572, -26.307194'): outside on E  FAILED, KNOWN, expected 41.477
    test 1998 GeoidPGM('egm84-15.pgm').height(21.89, 76.371) kind 3: lli ('21.889732, 76.371362'): lli ('21.889732, 76.371362'): outside on SE  FAILED, KNOWN, expected -59.876
    test 1999 GeoidPGM('egm84-15.pgm').height(29.793, 120.487) kind 3: lli ('29.792909, 120.48703'): lli ('29.792909, 120.48703'): outside on E  FAILED, KNOWN, expected 8.404
    test 2000 GeoidPGM('egm84-15.pgm').height(15.724, 122.714) kind 3: lli ('15.723814, 122.713685'): lli ('15.723814, 122.713685'): outside on SE  FAILED, KNOWN, expected 39.152
    test 2001 GeoidPGM('egm84-15.pgm').height(-66.208, -78.499) kind 3: lli ('-66.20776, -78.498807'): lli ('-66.20776, -78.498807'): outside on S  FAILED, KNOWN, expected -7.076
    test 2002 GeoidPGM('egm84-15.pgm').height(-39.507, 55.809) kind 3: lli ('-39.507049, 55.808743'): lli ('-39.507049, 55.808743'): outside on SE  FAILED, KNOWN, expected 33.178
    test 2003 GeoidPGM('egm84-15.pgm').height(28.159, 51.476) kind 3: lli ('28.159494, 51.476474'): lli ('28.159494, 51.476474'): outside on E  FAILED, KNOWN, expected -23.832
    test 2004 GeoidPGM('egm84-15.pgm').height(-36.207, 120.205) kind 3: lli ('-36.206825, 120.205019'): lli ('-36.206825, 120.205019'): outside on SE  FAILED, KNOWN, expected -38.206
    test 2005 GeoidPGM('egm84-15.pgm').height(30.575, -99.998) kind 3: -22.143  FAILED, KNOWN, expected -22.142
    test 2006 GeoidPGM('egm84-15.pgm').height(-16.993, 37.136) kind 3: lli ('-16.992515, 37.135881'): lli ('-16.992515, 37.135881'): outside on SE  FAILED, KNOWN, expected -13.765
    test 2007 GeoidPGM('egm84-15.pgm').height(-11.477, 12.039) kind 3: lli ('-11.476997, 12.038708'): lli ('-11.476997, 12.038708'): outside on SE  FAILED, KNOWN, expected 16.898
    test 2008 GeoidPGM('egm84-15.pgm').height(30.428, -144.765) kind 3: lli ('30.428465, -144.765049'): lli ('30.428465, -144.765049'): outside on W  FAILED, KNOWN, expected -22.474
    test 2009 GeoidPGM('egm84-15.pgm').height(-17.44, -92.424) kind 3: lli ('-17.439773, -92.424339'): lli ('-17.439773, -92.424339'): outside on S  FAILED, KNOWN, expected -4.718
    test 2010 GeoidPGM('egm84-15.pgm').height(40.203, 143.43) kind 3: lli ('40.203164, 143.429799'): lli ('40.203164, 143.429799'): outside on E  FAILED, KNOWN, expected 16.635
    test 2011 GeoidPGM('egm84-15.pgm').height(-37.098, -106.574) kind 3: lli ('-37.098392, -106.573712'): lli ('-37.098392, -106.573712'): outside on S  FAILED, KNOWN, expected -9.012
    test 2012 GeoidPGM('egm84-15.pgm').height(54.62, -68.413) kind 3: -23.544  FAILED, KNOWN, expected -23.543
    test 2013 GeoidPGM('egm84-15.pgm').height(-31.633, 148.182) kind 3: lli ('-31.633252, 148.181926'): lli ('-31.633252, 148.181926'): outside on SE  FAILED, KNOWN, expected 26.236
    test 2014 GeoidPGM('egm84-15.pgm').height(-56.07, -141.407) kind 3: lli ('-56.069748, -141.406778'): lli ('-56.069748, -141.406778'): outside on SW  FAILED, KNOWN, expected -21.953
    test 2015 GeoidPGM('egm84-15.pgm').height(-8.195, -52.691) kind 3: lli ('-8.195214, -52.691177'): lli ('-8.195214, -52.691177'): outside on SE  FAILED, KNOWN, expected -17.959
    test 2016 GeoidPGM('egm84-15.pgm').height(17.851, 24.749) kind 3: lli ('17.850526, 24.748606'): lli ('17.850526, 24.748606'): outside on SE  FAILED, KNOWN, expected 9.078
    test 2017 GeoidPGM('egm84-15.pgm').height(0.349, -108.333) kind 3: lli ('0.349465, -108.332667'): lli ('0.349465, -108.332667'): outside on S  FAILED, KNOWN, expected -19.158
    test 2018 GeoidPGM('egm84-15.pgm').height(15.038, 126.191) kind 3: lli ('15.037932, 126.190545'): lli ('15.037932, 126.190545'): outside on SE  FAILED, KNOWN, expected 46.776
    test 2019 GeoidPGM('egm84-15.pgm').height(-21.111, -123.696) kind 3: lli ('-21.111105, -123.695981'): lli ('-21.111105, -123.695981'): outside on S  FAILED, KNOWN, expected -8.055
    test 2020 GeoidPGM('egm84-15.pgm').height(30.947, 173.002) kind 3: lli ('30.946618, 173.002137'): lli ('30.946618, 173.002137'): outside on E  FAILED, KNOWN, expected -7.696
    test 2021 GeoidPGM('egm84-15.pgm').height(-10.698, -144.091) kind 3: lli ('-10.698334, -144.091109'): lli ('-10.698334, -144.091109'): outside on SW  FAILED, KNOWN, expected -1.049
    test 2022 GeoidPGM('egm84-15.pgm').height(-29.412, 124.753) kind 3: lli ('-29.412071, 124.75279'): lli ('-29.412071, 124.75279'): outside on SE  FAILED, KNOWN, expected -16.081
    test 2023 GeoidPGM('egm84-15.pgm').height(38.224, -137.189) kind 3: lli ('38.223621, -137.189376'): lli ('38.223621, -137.189376'): outside on W  FAILED, KNOWN, expected -35.427
    test 2024 GeoidPGM('egm84-15.pgm').height(36.064, -132.409) kind 3: lli ('36.063775, -132.409284'): lli ('36.063775, -132.409284'): outside on W  FAILED, KNOWN, expected -38.648
    test 2025 GeoidPGM('egm84-15.pgm').height(29.975, 178.076) kind 3: lli ('29.974676, 178.075894'): lli ('29.974676, 178.075894'): outside on E  FAILED, KNOWN, expected -5.519
    test 2026 GeoidPGM('egm84-15.pgm').height(-21.346, 169.26) kind 3: lli ('-21.346396, 169.259508'): lli ('-21.346396, 169.259508'): outside on SE  FAILED, KNOWN, expected 53.431
    test 2027 GeoidPGM('egm84-15.pgm').height(49.282, -152.934) kind 3: lli ('49.282472, -152.934409'): lli ('49.282472, -152.934409'): outside on W  FAILED, KNOWN, expected 1.979
    test 2028 GeoidPGM('egm84-15.pgm').height(16.349, -99.962) kind 3: lli ('16.349121, -99.962229'): lli ('16.349121, -99.962229'): outside on S  FAILED, KNOWN, expected -13.197
    test 2029 GeoidPGM('egm84-15.pgm').height(-14.293, -167.34) kind 3: lli ('-14.293325, -167.339799'): lli ('-14.293325, -167.339799'): outside on SW  FAILED, KNOWN, expected 18.945
    test 2030 GeoidPGM('egm84-15.pgm').height(47.166, -38.523) kind 3: lli ('47.165911, -38.522629'): lli ('47.165911, -38.522629'): outside on E  FAILED, KNOWN, expected 45.187
    test 2031 GeoidPGM('egm84-15.pgm').height(-58.911, 114.347) kind 3: lli ('-58.910597, 114.346927'): lli ('-58.910597, 114.346927'): outside on SE  FAILED, KNOWN, expected -17.145
    test 2032 GeoidPGM('egm84-15.pgm').height(-9.055, 111.294) kind 3: lli ('-9.055095, 111.294422'): lli ('-9.055095, 111.294422'): outside on SE  FAILED, KNOWN, expected 13.146
    test 2033 GeoidPGM('egm84-15.pgm').height(18.391, 29.692) kind 3: lli ('18.390988, 29.691577'): lli ('18.390988, 29.691577'): outside on SE  FAILED, KNOWN, expected 4.933
    test 2034 GeoidPGM('egm84-15.pgm').height(-15.074, 22.153) kind 3: lli ('-15.074412, 22.152663'): lli ('-15.074412, 22.152663'): outside on SE  FAILED, KNOWN, expected 12.326
    test 2035 GeoidPGM('egm84-15.pgm').height(-4.235, 62.001) kind 3: lli ('-4.234571, 62.001081'): lli ('-4.234571, 62.001081'): outside on SE  FAILED, KNOWN, expected -60.030
    test 2036 GeoidPGM('egm84-15.pgm').height(15.171, -86.583) kind 3: lli ('15.170822, -86.582929'): lli ('15.170822, -86.582929'): outside on S  FAILED, KNOWN, expected 3.110
    test 2037 GeoidPGM('egm84-15.pgm').height(79.254, 112.116) kind 3: lli ('79.254009, 112.115515'): lli ('79.254009, 112.115515'): outside on NE  FAILED, KNOWN, expected -2.741
    test 2038 GeoidPGM('egm84-15.pgm').height(15.947, 156.093) kind 3: lli ('15.947068, 156.092678'): lli ('15.947068, 156.092678'): outside on SE  FAILED, KNOWN, expected 32.085
    test 2039 GeoidPGM('egm84-15.pgm').height(68.371, -177.382) kind 3: lli ('68.370605, -177.382127'): lli ('68.370605, -177.382127'): outside on NW  FAILED, KNOWN, expected 2.060
    test 2040 GeoidPGM('egm84-15.pgm').height(-41.931, -72.093) kind 3: lli ('-41.931009, -72.093413'): lli ('-41.931009, -72.093413'): outside on S  FAILED, KNOWN, expected 22.916
    test 2041 GeoidPGM('egm84-15.pgm').height(-1.193, -143.133) kind 3: lli ('-1.192967, -143.133078'): lli ('-1.192967, -143.133078'): outside on SW  FAILED, KNOWN, expected 5.519
    test 2042 GeoidPGM('egm84-15.pgm').height(-37.006, 154.513) kind 3: lli ('-37.006115, 154.512534'): lli ('-37.006115, 154.512534'): outside on SE  FAILED, KNOWN, expected 11.020
    test 2043 GeoidPGM('egm84-15.pgm').height(-22.148, 9.938) kind 3: lli ('-22.148493, 9.938408'): lli ('-22.148493, 9.938408'): outside on SE  FAILED, KNOWN, expected 22.171
    test 2044 GeoidPGM('egm84-15.pgm').height(24.329, 109.044) kind 3: lli ('24.328746, 109.043774'): lli ('24.328746, 109.043774'): outside on SE  FAILED, KNOWN, expected -22.944
    test 2045 GeoidPGM('egm84-15.pgm').height(-54.878, 114.691) kind 3: lli ('-54.877699, 114.691444'): lli ('-54.877699, 114.691444'): outside on SE  FAILED, KNOWN, expected -17.580
    test 2046 GeoidPGM('egm84-15.pgm').height(45.601, -80.458) kind 3: -35.737  FAILED, KNOWN, expected -35.738
    test 2047 GeoidPGM('egm84-15.pgm').height(2.372, 58.974) kind 3: lli ('2.371766, 58.974082'): lli ('2.371766, 58.974082'): outside on SE  FAILED, KNOWN, expected -61.040
    test 2048 GeoidPGM('egm84-15.pgm').height(15.937, 165.854) kind 3: lli ('15.936522, 165.854035'): lli ('15.936522, 165.854035'): outside on SE  FAILED, KNOWN, expected 20.907
    test 2049 GeoidPGM('egm84-15.pgm').height(4.889, -24.213) kind 3: lli ('4.889499, -24.213194'): lli ('4.889499, -24.213194'): outside on SE  FAILED, KNOWN, expected 13.874
    test 2050 GeoidPGM('egm84-15.pgm').height(-11.392, 179.558) kind 3: lli ('-11.392365, 179.558198'): lli ('-11.392365, 179.558198'): outside on SE  FAILED, KNOWN, expected 40.929
    test 2051 GeoidPGM('egm84-15.pgm').height(58.246, 4.862) kind 3: lli ('58.24629, 4.862128'): lli ('58.24629, 4.862128'): outside on NE  FAILED, KNOWN, expected 43.191
    test 2052 GeoidPGM('egm84-15.pgm').height(34.302, -109.109) kind 3: -22.005  FAILED, KNOWN, expected -22.006
    test 2053 GeoidPGM('egm84-15.pgm').height(-58.196, 117.306) kind 3: lli ('-58.195787, 117.305696'): lli ('-58.195787, 117.305696'): outside on SE  FAILED, KNOWN, expected -20.375
    test 2054 GeoidPGM('egm84-15.pgm').height(44.5, 173.769) kind 3: lli ('44.499876, 173.768568'): lli ('44.499876, 173.768568'): outside on E  FAILED, KNOWN, expected -7.852
    test 2055 GeoidPGM('egm84-15.pgm').height(-28.863, -139.775) kind 3: lli ('-28.862539, -139.774812'): lli ('-28.862539, -139.774812'): outside on SW  FAILED, KNOWN, expected -8.674
    test 2056 GeoidPGM('egm84-15.pgm').height(19.507, -96.099) kind 3: lli ('19.507043, -96.099433'): lli ('19.507043, -96.099433'): outside on S  FAILED, KNOWN, expected -14.117
    test 2057 GeoidPGM('egm84-15.pgm').height(-42.488, -73.907) kind 3: lli ('-42.487604, -73.906602'): lli ('-42.487604, -73.906602'): outside on S  FAILED, KNOWN, expected 17.251
    test 2058 GeoidPGM('egm84-15.pgm').height(46.138, -141.429) kind 3: lli ('46.138437, -141.429193'): lli ('46.138437, -141.429193'): outside on W  FAILED, KNOWN, expected -19.436
    test 2059 GeoidPGM('egm84-15.pgm').height(60.507, 93.743) kind 3: lli ('60.506969, 93.74336'): lli ('60.506969, 93.74336'): outside on NE  FAILED, KNOWN, expected -31.330
    test 2060 GeoidPGM('egm84-15.pgm').height(26.219, -145.434) kind 3: lli ('26.219081, -145.434391'): lli ('26.219081, -145.434391'): outside on W  FAILED, KNOWN, expected -17.090
    test 2061 GeoidPGM('egm84-15.pgm').height(-28.687, 3.37) kind 3: lli ('-28.68714, 3.370196'): lli ('-28.68714, 3.370196'): outside on SE  FAILED, KNOWN, expected 24.184
    test 2062 GeoidPGM('egm84-15.pgm').height(-15.008, 117.45) kind 3: lli ('-15.007944, 117.449536'): lli ('-15.007944, 117.449536'): outside on SE  FAILED, KNOWN, expected 6.142
    test 2063 GeoidPGM('egm84-15.pgm').height(40.71, 144.095) kind 3: lli ('40.710024, 144.095126'): lli ('40.710024, 144.095126'): outside on E  FAILED, KNOWN, expected 11.693
    test 2064 GeoidPGM('egm84-15.pgm').height(20.823, -173.611) kind 3: lli ('20.823096, -173.610797'): lli ('20.823096, -173.610797'): outside on SW  FAILED, KNOWN, expected 6.840
    test 2065 GeoidPGM('egm84-15.pgm').height(16.776, -3.009) kind 3: lli ('16.776, -3.009'): lli ('16.776, -3.009'): outside on SE  FAILED, KNOWN, expected 31.298
    test 2066 GeoidPGM('egm84-15.pgm').height(41.0, -95.0) kind 3: -31.953  FAILED, KNOWN, expected -31.952
    test 2067 GeoidPGM('egm84-15.pgm').height(49.0, -120.5) kind 3: -14.946
    test 2068 GeoidPGM('egm84-15.pgm').height(49.0, -103.5) kind 3: -17.031  FAILED, KNOWN, expected -17.032
    test 2069 GeoidPGM('egm84-15.pgm').height(49.0, -86.5) kind 3: -37.962
    test 2070 GeoidPGM('egm84-15.pgm').height(49.0, -69.5) kind 3: -26.493  FAILED, KNOWN, expected -26.492
    test 2071 GeoidPGM('egm84-15.pgm').height(33.0, -120.5) kind 3: -39.543
    test 2072 GeoidPGM('egm84-15.pgm').height(33.0, -103.5) kind 3: -22.557  FAILED, KNOWN, expected -22.556
    test 2073 GeoidPGM('egm84-15.pgm').height(33.0, -86.5) kind 3: -28.710
    test 2074 GeoidPGM('egm84-15.pgm').height(33.0, -69.5) kind 3: -46.590

    test 2075 GeoidPGM('egm84-15.pgm').height() kind 3, eps max (in 0 FAILED): 0.001055
    test 2076 GeoidPGM('egm84-15.pgm').height() kind 3, eps mean (of 15 total): 0.000534
    test 2077 GeoidPGM('egm84-15.pgm').height() kind 3, eps stdev (of 15 total): 0.000293
    test 2078 GeoidPGM('egm84-15.pgm').highest(): 44.0, -110.25, -6.927
    test 2079 GeoidPGM('egm84-15.pgm').lowerleft(): 25.0, -125.0, -45.237
    test 2080 GeoidPGM('egm84-15.pgm').lowerright(): 25.0, -64.75, -49.503
    test 2081 GeoidPGM('egm84-15.pgm').lowest(): 26.0, -69.5, -52.293
    test 2082 GeoidPGM('egm84-15.pgm').upperleft(): 55.0, -125.0, -11.157
    test 2083 GeoidPGM('egm84-15.pgm').upperright(): 55.0, -64.75, -15.43
    test 2084 GeoidPGM('egm84-15.pgm').dtype: ("dtype('float64')",)
    test 2085 GeoidPGM('egm84-15.pgm').knots: ('29161',)
    test 2086 GeoidPGM('egm84-15.pgm').mean: ('-29.223',)
    test 2087 GeoidPGM('egm84-15.pgm').nBytes: ('233288',)
    test 2088 GeoidPGM('egm84-15.pgm').smooth: ('0',)
    test 2089 GeoidPGM('egm84-15.pgm').stdev: ('9.692',)
    test 2090 GeoidPGM('egm84-15.pgm')._g2ll2(180, 360): (180, 0.0)
    test 2091 GeoidPGM('egm84-15.pgm')._ll2g2(180, 360): (180, 720.0)
    test 2092 GeoidPGM('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2093 GeoidPGM('egm84-15.pgm')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2094 GeoidPGM('egm84-15.pgm').toStr: GeoidPGM('egm84-15.pgm'): lowerleft(25.0, -125.0, -45.237), upperright(55.0, -64.75, -15.43), center(40.0, -94.875, -33.654), highest(44.0, -110.25, -6.927), lowest(26.0, -69.5, -52.293)

    test 2095 closed: True
    test 2096 copy(GeoidPGM): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 2097 GeoidPGM.copy(): (<class 'pygeodesy.geoids.GeoidPGM'>, True)
    test 2098 GeoidG2012B('g2012bu0.bin').height(41.0, -95.0) kind 3: -30.312
    test 2099 GeoidG2012B('g2012bu0.bin').height(49.0, -120.5) kind 3: -16.112
    test 2100 GeoidG2012B('g2012bu0.bin').height(49.0, -103.5) kind 3: -18.955
    test 2101 GeoidG2012B('g2012bu0.bin').height(49.0, -86.5) kind 3: -37.584
    test 2102 GeoidG2012B('g2012bu0.bin').height(49.0, -69.5) kind 3: -25.867
    test 2103 GeoidG2012B('g2012bu0.bin').height(33.0, -120.5) kind 3: -39.554
    test 2104 GeoidG2012B('g2012bu0.bin').height(33.0, -103.5) kind 3: -21.917
    test 2105 GeoidG2012B('g2012bu0.bin').height(33.0, -86.5) kind 3: -29.001
    test 2106 GeoidG2012B('g2012bu0.bin').height(33.0, -69.5) kind 3: -46.725

    test 2107 GeoidG2012B('g2012bu0.bin').height() kind 3, eps max (in 0 FAILED): 0.000400
    test 2108 GeoidG2012B('g2012bu0.bin').height() kind 3, eps mean (of 9 total): 0.000222
    test 2109 GeoidG2012B('g2012bu0.bin').height() kind 3, eps stdev (of 9 total): 0.000139
    test 2110 GeoidG2012B('g2012bu0.bin').highest(): 58.0, -60.0, 3.31
    test 2111 GeoidG2012B('g2012bu0.bin').lowerleft(): 24.0, -130.0, -39.727
    test 2112 GeoidG2012B('g2012bu0.bin').lowerright(): 24.0, -59.983, -47.981
    test 2113 GeoidG2012B('g2012bu0.bin').lowest(): 25.9, -69.85, -50.709
    test 2114 GeoidG2012B('g2012bu0.bin').upperleft(): 58.0, -130.0, -1.095
    test 2115 GeoidG2012B('g2012bu0.bin').upperright(): 58.0, -59.983, 3.38
    test 2116 GeoidG2012B('g2012bu0.bin').dtype: ("dtype('>f4')",)
    test 2117 GeoidG2012B('g2012bu0.bin').knots: ('8574241',)
    test 2118 GeoidG2012B('g2012bu0.bin').mean: ('-29.481',)
    test 2119 GeoidG2012B('g2012bu0.bin').nBytes: ('34296964',)
    test 2120 GeoidG2012B('g2012bu0.bin').smooth: ('0',)
    test 2121 GeoidG2012B('g2012bu0.bin').stdev: ('10.063',)
    test 2122 GeoidG2012B('g2012bu0.bin')._g2ll2(180, 360): (180, 360)
    test 2123 GeoidG2012B('g2012bu0.bin')._ll2g2(180, 360): (180, 360)
    test 2124 GeoidG2012B('g2012bu0.bin')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2125 GeoidG2012B('g2012bu0.bin')._swne: (-10.0, -100.0, 10.0, 100.0)
    test 2126 GeoidG2012B('g2012bu0.bin').toStr: GeoidG2012B('g2012bu0.bin'): lowerleft(24.0, -130.0, -39.727), upperright(58.0, -59.983, 3.38), center(41.0, -94.992, -30.328), highest(58.0, -60.0, 3.31), lowest(25.9, -69.85, -50.709)

    test 2127 closed: True
    test 2128 copy(GeoidG2012B): (<class 'pygeodesy.geoids.GeoidG2012B'>, True)
    test 2129 GeoidG2012B.copy(): (<class 'pygeodesy.geoids.GeoidG2012B'>, True)

    1385 of 2129 testGeoids.py tests (65.1%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 58.752 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testGreatCircle.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.F_DMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.classname from .named by testGreatCircle.py line 40
# lazily imported pygeodesy.bearingDMS from .dms by testGreatCircle.py line 40
# lazily imported pygeodesy.CrossError from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.crosserrors from .errors by testGreatCircle.py line 40
# lazily imported pygeodesy.sphericalNvector by testGreatCircle.py line 190
# lazily imported pygeodesy.sphericalTrigonometry by testGreatCircle.py line 190

    testing testGreatCircle.py 23.03.27 isLazy=3

    testGreatCircle(pygeodesy.sphericalNvector, 23.04.11)
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 6 DistanceSameLocations: 0.0
    test 7 DistanceEqualLocations: 0.0
    test 8 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 9 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 10 InitialBearingEiffelToVersailles: 245.13460297
    test 11 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 12 InitialBearingVersaillesToEiffel: 65.003253951
    test 13 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 14 FinalBearingEiffelToVersailles: 245.00325395
    test 15 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 16 FinalBearingVersaillesToEiffel: 65.134602969
    test 17 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 18 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 19 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 20 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 21 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 22 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 23 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 24 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 25 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 26 Intersection: 48.83569095°N, 002.221252031°E
    test 27 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 28 CrossTrackDistance200m+90°: 200.0
    test 29 CrossTrackDistance200m+270°: -200.0
    test 30 CrossTrackDistanceCloseToZero: 0.0000000

    testGreatCircle(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 31 InitialBearingSameLocations: 0.0
    test 32 InitialBearingEqualLocations: 0.0
    test 33 FinalBearingSameLocations: 180.0
    test 34 FinalBearingEqualLocations: 180.0
    test 35 FinalBearingCrossError: points (LatLon(43°55′51.28″N, 072°03′13.72″W)): coincident
    test 36 DistanceSameLocations: 0.0
    test 37 DistanceEqualLocations: 0.0
    test 38 DistanceEiffelToVersailles: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 39 DistanceVersaillesToEiffel: 14084.300096  FAILED, KNOWN, expected 14084.280705
    test 40 InitialBearingEiffelToVersailles: 245.13460297
    test 41 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 42 InitialBearingVersaillesToEiffel: 65.003253951
    test 43 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 44 FinalBearingEiffelToVersailles: 245.00325395
    test 45 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 46 FinalBearingVersaillesToEiffel: 65.134602969
    test 47 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 48 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 49 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 50 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 51 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 52 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 53 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 54 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 55 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.15974330
    test 56 Intersection: 48.83569095°N, 002.221252031°E
    test 57 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 58 CrossTrackDistance200m+90°: 200.0
    test 59 CrossTrackDistance200m+270°: -200.0
    test 60 CrossTrackDistanceCloseToZero: 0.0000000

    10 of 60 testGreatCircle.py tests (16.7%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 6.359 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testHausdorff.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Datums from .datums by testHausdorff.py line 12
# lazily imported pygeodesy.fstr from .streprs by testHausdorff.py line 12
# lazily imported pygeodesy.hausdorff_ from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineForsytheAndoyerLambert from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDegrees from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffDistanceTo from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffRadians from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffCosineLaw from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEquirectangular from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffEuclidean from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffExact from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatLocal from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffFlatPolar from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHaversine from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffHubeny from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffKarney from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffThomas from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.HausdorffVincentys from .hausdorff by testHausdorff.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testHausdorff.py line 12
# lazily imported pygeodesy.randomrangenerator from .hausdorff by testHausdorff.py line 12

    testing testHausdorff.py 23.03.27 isLazy=3
    test 1 randomrange[0]: ()
    test 2 randomrange[1]: (0,)
    test 3 randomrange[2]: (0, 1)
    test 4 randomrange[8]: (1, 4, 2, 6, 0, 3, 5, 7)
    test 5 randomrange[32]: (11, 6, 30, 28, 21, 9, 13, 26, 4, 29, 8, 27, 31, 15, 1, 24, 0, 25, 22, 2, 20, 17, 3, 23, 12, 19, 18, 14, 7, 10, 16, 5)
    test 6 randomrange[128]: (122, 62, 14, 24, 65, 57, 75, 84, 42, 32, 82, 43, 13, 34, 53, 104, 71, 22, 76, 15, 108, 113, 52, 79, 112, 54, 90, 106, 10, 87, 115, 123, 119, 120, 48, 61, 39, 19, 31, 94, 124, 98, 96, 3, 101, 25, 118, 30, 99, 105, 92, 66, 126, 114, 23, 117, 72, 67, 73, 64, 68, 50, 5, 74, 51, 9, 17, 21, 80, 95, 41, 37, 2, 11, 55, 127, 38, 85, 81, 109, 36, 121, 6, 102, 12, 1, 93, 91, 83, 16, 116, 103, 70, 56, 89, 35, 88, 86, 27, 20, 44, 110, 63, 28, 8, 4, 18, 45, 78, 100, 60, 125, 58, 33, 0, 7, 40, 59, 46, 69, 26, 77, 107, 47, 49, 97, 111, 29)
    test 7 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 8 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 9 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, 18.16111)
    test 10 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, 17.30667)
    test 11 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 12 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 13 HausdorffDegrees_ (degrees): (40.0, 22, 6, 90, None)
    test 14 HausdorffDegrees_ (degrees): (48.0, 38, 36, 150, None)
    test 15 copy(HausdorffDegrees_): (<class '__main__.HausdorffDegrees_'>, True)
    test 16 HausdorffDegrees_.copy(): (<class '__main__.HausdorffDegrees_'>, True)
    test 17 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 18 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 19 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, 0.31697)
    test 20 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, 0.30206)
    test 21 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 22 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 23 HausdorffRadians_ (radians): (0.69813, 22, 6, 90, None)
    test 24 HausdorffRadians_ (radians): (0.83776, 38, 36, 150, None)
    test 25 copy(HausdorffRadians_): (<class '__main__.HausdorffRadians_'>, True)
    test 26 HausdorffRadians_.copy(): (<class '__main__.HausdorffRadians_'>, True)
    test 27 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 28 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 29 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 30 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 31 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 32 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 33 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 34 HausdorffCosineAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 35 copy(HausdorffCosineAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 36 HausdorffCosineAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineAndoyerLambert'>, True)
    test 37 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 38 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 39 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, 0.21184)
    test 40 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, 0.20084)
    test 41 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 42 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 43 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 90, None)
    test 44 HausdorffCosineForsytheAndoyerLambert (radians): (0.501, 35, 3, 150, None)
    test 45 copy(HausdorffCosineForsytheAndoyerLambert): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 46 HausdorffCosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineForsytheAndoyerLambert'>, True)
    test 47 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, 0.212)
    test 48 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, 0.20099)
    test 49 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, 0.212)
    test 50 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, 0.20099)
    test 51 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, None)
    test 52 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, None)
    test 53 HausdorffCosineLaw (radians): (0.50097, 35, 3, 90, None)
    test 54 HausdorffCosineLaw (radians): (0.50097, 35, 3, 150, None)
    test 55 copy(HausdorffCosineLaw): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 56 HausdorffCosineLaw.copy(): (<class 'pygeodesy.hausdorff.HausdorffCosineLaw'>, True)
    test 57 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, 0.05965)
    test 58 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, 0.05532)
    test 59 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, 0.05965)
    test 60 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, 0.05532)
    test 61 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, None)
    test 62 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, None)
    test 63 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 90, None)
    test 64 HausdorffEquirectangular (radians2): (0.25113, 35, 3, 150, None)
    test 65 copy(HausdorffEquirectangular): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 66 HausdorffEquirectangular.copy(): (<class 'pygeodesy.hausdorff.HausdorffEquirectangular'>, True)
    test 67 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, 0.22571)
    test 68 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, 0.21579)
    test 69 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, 0.22571)
    test 70 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, 0.21579)
    test 71 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, None)
    test 72 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, None)
    test 73 HausdorffEuclidean (radians): (0.52803, 56, 51, 90, None)
    test 74 HausdorffEuclidean (radians): (0.52803, 56, 51, 150, None)
    test 75 copy(HausdorffEuclidean): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 76 HausdorffEuclidean.copy(): (<class 'pygeodesy.hausdorff.HausdorffEuclidean'>, True)
    test 77 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 78 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 79 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 80 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 81 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 82 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 83 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 90, None)
    test 84 HausdorffFlatLocal (radians2): (0.25116, 35, 3, 150, None)
    test 85 copy(HausdorffFlatLocal): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 86 HausdorffFlatLocal.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatLocal'>, True)
    test 87 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, 0.22286)
    test 88 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, 0.21318)
    test 89 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, 0.22286)
    test 90 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, 0.21318)
    test 91 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, None)
    test 92 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, None)
    test 93 HausdorffFlatPolar (radians): (0.69043, 4, 31, 90, None)
    test 94 HausdorffFlatPolar (radians): (0.69043, 4, 31, 150, None)
    test 95 copy(HausdorffFlatPolar): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 96 HausdorffFlatPolar.copy(): (<class 'pygeodesy.hausdorff.HausdorffFlatPolar'>, True)
    test 97 HausdorffHaversine (radians): (0.50097, 35, 3, 90, 0.212)
    test 98 HausdorffHaversine (radians): (0.50097, 35, 3, 150, 0.20099)
    test 99 HausdorffHaversine (radians): (0.50097, 35, 3, 90, 0.212)
    test 100 HausdorffHaversine (radians): (0.50097, 35, 3, 150, 0.20099)
    test 101 HausdorffHaversine (radians): (0.50097, 35, 3, 90, None)
    test 102 HausdorffHaversine (radians): (0.50097, 35, 3, 150, None)
    test 103 HausdorffHaversine (radians): (0.50097, 35, 3, 90, None)
    test 104 HausdorffHaversine (radians): (0.50097, 35, 3, 150, None)
    test 105 copy(HausdorffHaversine): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 106 HausdorffHaversine.copy(): (<class 'pygeodesy.hausdorff.HausdorffHaversine'>, True)
    test 107 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 108 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 109 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, 0.05951)
    test 110 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, 0.0552)
    test 111 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 112 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 113 HausdorffHubeny (radians2): (0.25116, 35, 3, 90, None)
    test 114 HausdorffHubeny (radians2): (0.25116, 35, 3, 150, None)
    test 115 copy(HausdorffHubeny): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 116 HausdorffHubeny.copy(): (<class 'pygeodesy.hausdorff.HausdorffHubeny'>, True)
    test 117 HausdorffThomas (radians): (0.501, 35, 3, 90, 0.21184)
    test 118 HausdorffThomas (radians): (0.501, 35, 3, 150, 0.20084)
    test 119 HausdorffThomas (radians): (0.501, 35, 3, 90, 0.21184)
    test 120 HausdorffThomas (radians): (0.501, 35, 3, 150, 0.20084)
    test 121 HausdorffThomas (radians): (0.501, 35, 3, 90, None)
    test 122 HausdorffThomas (radians): (0.501, 35, 3, 150, None)
    test 123 HausdorffThomas (radians): (0.501, 35, 3, 90, None)
    test 124 HausdorffThomas (radians): (0.501, 35, 3, 150, None)
    test 125 copy(HausdorffThomas): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 126 HausdorffThomas.copy(): (<class 'pygeodesy.hausdorff.HausdorffThomas'>, True)
    test 127 HausdorffVincentys (radians): (0.50097, 35, 3, 90, 0.212)
    test 128 HausdorffVincentys (radians): (0.50097, 35, 3, 150, 0.20099)
    test 129 HausdorffVincentys (radians): (0.50097, 35, 3, 90, 0.212)
    test 130 HausdorffVincentys (radians): (0.50097, 35, 3, 150, 0.20099)
    test 131 HausdorffVincentys (radians): (0.50097, 35, 3, 90, None)
    test 132 HausdorffVincentys (radians): (0.50097, 35, 3, 150, None)
    test 133 HausdorffVincentys (radians): (0.50097, 35, 3, 90, None)
    test 134 HausdorffVincentys (radians): (0.50097, 35, 3, 150, None)
    test 135 copy(HausdorffVincentys): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 136 HausdorffVincentys.copy(): (<class 'pygeodesy.hausdorff.HausdorffVincentys'>, True)
    test 137 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 138 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 139 HausdorffKarney (degrees): (28.79903, 35, 3, 90, 12.16138)
    test 140 HausdorffKarney (degrees): (28.79903, 35, 3, 150, 11.53021)
    test 141 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 142 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 143 HausdorffKarney (degrees): (28.79903, 35, 3, 90, None)
    test 144 HausdorffKarney (degrees): (28.79903, 35, 3, 150, None)
    test 145 copy(HausdorffKarney): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 146 HausdorffKarney.copy(): (<class 'pygeodesy.hausdorff.HausdorffKarney'>, True)
    test 147 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 148 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 149 hausdorff_: (40.0, 22, 6, 90, 18.16111)
    test 150 hausdorff_: (48.0, 38, 36, 150, 17.30667)
    test 151 hausdorff_: (40.0, 22, 6, 90, None)
    test 152 hausdorff_: (48.0, 38, 36, 150, None)
    test 153 hausdorff_: (40.0, 22, 6, 90, None)
    test 154 hausdorff_: (48.0, 38, 36, 150, None)
# lazily imported pygeodesy.ellipsoidalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.ellipsoidalVincenty by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalNvector by testHausdorff.py line 270
# lazily imported pygeodesy.sphericalTrigonometry by testHausdorff.py line 270
# lazily imported pygeodesy.ellipsoidalKarney by testHausdorff.py line 275
    test 155 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 156 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 157 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35982)  FAILED, KNOWN, expected (3195418.34044, 35, 3, 90, 1351164.35981)
    test 158 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 159 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 160 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 161 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 162 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 163 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 164 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 165 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 166 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 167 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, 1351164.35981)
    test 168 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, 1280992.80341)
    test 169 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 170 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 171 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 90, None)
    test 172 HausdorffDistanceTo (meter): (3195418.34044, 35, 3, 150, None)
    test 173 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 174 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 175 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 176 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 177 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 178 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 179 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 180 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 181 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 182 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 183 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 184 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 185 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 186 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 187 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 188 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 189 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 190 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 191 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 192 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 193 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 194 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 195 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 196 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 197 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, 1350684.04012)
    test 198 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, 1280478.58707)
    test 199 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 200 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 201 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 90, None)
    test 202 HausdorffDistanceTo (meter): (3191685.70841, 35, 3, 150, None)
    test 203 copy(HausdorffDistanceTo): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)
    test 204 HausdorffDistanceTo.copy(): (<class 'pygeodesy.hausdorff.HausdorffDistanceTo'>, True)

    2 of 204 testHausdorff.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 27.656 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testHeights.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Datums from .datums by testHeights.py line 17
# lazily imported pygeodesy.fstr from .streprs by testHeights.py line 17
# lazily imported pygeodesy.HeightError from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightCubic from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLinear from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineForsytheAndoyerLambert from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWcosineLaw from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWdistanceTo from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWequirectangular from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWeuclidean from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatLocal from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWflatPolar from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhaversine from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWhubeny from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWkarney from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWthomas from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightIDWvincentys from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightLSQBiSpline from .heights by testHeights.py line 17
# lazily imported pygeodesy.HeightSmoothBiSpline from .heights by testHeights.py line 17
# lazily imported pygeodesy.SciPyError from .errors by testHeights.py line 17

    testing testHeights.py 23.03.27 isLazy=3
    test 1 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 2 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 3 HeightIDWcosineAndoyerLambert(wrap=False): 6.108538037
    test 4 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 5 HeightIDWcosineAndoyerLambert(latlon): True
    test 6 HeightIDWcosineAndoyerLambert(wrap=False): 5.0
    test 7 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 8 HeightIDWcosineAndoyerLambert(latlon): True
    test 9 HeightIDWcosineAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 10 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 11 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 12 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 13 HeightIDWcosineAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 14 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 15 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 16 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 17 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 18 HeightIDWcosineAndoyerLambert.adjust: None
    test 19 HeightIDWcosineAndoyerLambert.kmin: 2
    test 20 HeightIDWcosineAndoyerLambert.wrap: False
    test 21 HeightIDWcosineAndoyerLambert.beta: 2
    test 22 HeightIDWcosineAndoyerLambert.adjust: None
    test 23 HeightIDWcosineAndoyerLambert.beta: 2
    test 24 HeightIDWcosineAndoyerLambert.kmin: 2
    test 25 HeightIDWcosineAndoyerLambert.wrap: False
    test 26 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 27 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 28 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 6.108538037
    test 29 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 30 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 31 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 5.0
    test 32 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 33 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 34 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (6.108538037, 5.0,)
    test 35 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 36 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 37 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 38 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [6.108538037, 5.0]
    test 39 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 40 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 41 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 42 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 43 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 44 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 45 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 46 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 47 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 48 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 49 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 50 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 51 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 52 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 53 HeightIDWcosineLaw(wrap=True): 6.108538037
    test 54 HeightIDWcosineLaw(float): <class 'float'>
    test 55 HeightIDWcosineLaw(latlon): True
    test 56 HeightIDWcosineLaw(wrap=True): 5.0
    test 57 HeightIDWcosineLaw(float): <class 'float'>
    test 58 HeightIDWcosineLaw(latlon): True
    test 59 HeightIDWcosineLaw(wrap=True): (6.108538037, 5.0,)
    test 60 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 61 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 62 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 63 HeightIDWcosineLaw(wrap=True): [6.108538037, 5.0]
    test 64 HeightIDWcosineLaw(list: <class 'list'>
    test 65 HeightIDWcosineLaw(list-float): <class 'float'>
    test 66 HeightIDWcosineLaw(list-float): <class 'float'>
    test 67 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 68 HeightIDWcosineLaw.adjust: None
    test 69 HeightIDWcosineLaw.kmin: 2
    test 70 HeightIDWcosineLaw.wrap: False
    test 71 HeightIDWcosineLaw.beta: 2
    test 72 HeightIDWcosineLaw.adjust: None
    test 73 HeightIDWcosineLaw.beta: 2
    test 74 HeightIDWcosineLaw.kmin: 2
    test 75 HeightIDWcosineLaw.wrap: False
    test 76 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 77 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 78 HeightIDWcosineLaw(wrap=False): 6.108538037
    test 79 HeightIDWcosineLaw(float): <class 'float'>
    test 80 HeightIDWcosineLaw(latlon): True
    test 81 HeightIDWcosineLaw(wrap=False): 5.0
    test 82 HeightIDWcosineLaw(float): <class 'float'>
    test 83 HeightIDWcosineLaw(latlon): True
    test 84 HeightIDWcosineLaw(wrap=False): (6.108538037, 5.0,)
    test 85 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 86 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 87 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 88 HeightIDWcosineLaw(wrap=False): [6.108538037, 5.0]
    test 89 HeightIDWcosineLaw(list: <class 'list'>
    test 90 HeightIDWcosineLaw(list-float): <class 'float'>
    test 91 HeightIDWcosineLaw(list-float): <class 'float'>
    test 92 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 93 HeightIDWcosineLaw.adjust: None
    test 94 HeightIDWcosineLaw.kmin: 2
    test 95 HeightIDWcosineLaw.wrap: False
    test 96 HeightIDWcosineLaw.beta: 2
    test 97 HeightIDWcosineLaw.adjust: None
    test 98 HeightIDWcosineLaw.beta: 2
    test 99 HeightIDWcosineLaw.kmin: 2
    test 100 HeightIDWcosineLaw.wrap: False
    test 101 copy(HeightIDWdistanceTo): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 102 HeightIDWdistanceTo.copy(): (<class 'pygeodesy.heights.HeightIDWdistanceTo'>, True)
    test 103 HeightIDWdistanceTo(): 6.108538037
    test 104 HeightIDWdistanceTo(float): <class 'float'>
    test 105 HeightIDWdistanceTo(latlon): True
    test 106 HeightIDWdistanceTo(): 5.0
    test 107 HeightIDWdistanceTo(float): <class 'float'>
    test 108 HeightIDWdistanceTo(latlon): True
    test 109 HeightIDWdistanceTo(): (6.108538037, 5.0,)
    test 110 HeightIDWdistanceTo(tuple): <class 'tuple'>
    test 111 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 112 HeightIDWdistanceTo(tuple-float): <class 'float'>
    test 113 HeightIDWdistanceTo(): [6.108538037, 5.0]
    test 114 HeightIDWdistanceTo(list: <class 'list'>
    test 115 HeightIDWdistanceTo(list-float): <class 'float'>
    test 116 HeightIDWdistanceTo(list-float): <class 'float'>
    test 117 HeightError: type(other) (9.0): incompatible with sphericalTrigonometry.LatLon.distanceTo(other), invalid
    test 118 HeightIDWdistanceTo.adjust: None
    test 119 HeightIDWdistanceTo.kmin: 2
    test 120 HeightIDWdistanceTo.wrap: None
    test 121 HeightIDWdistanceTo.beta: 2
    test 122 HeightIDWdistanceTo.adjust: None
    test 123 HeightIDWdistanceTo.beta: 2
    test 124 HeightIDWdistanceTo.kmin: 2
    test 125 HeightIDWdistanceTo.wrap: None
    test 126 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 127 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 128 HeightIDWeuclidean(adjust=False): 6.143010434
    test 129 HeightIDWeuclidean(float): <class 'float'>
    test 130 HeightIDWeuclidean(latlon): True
    test 131 HeightIDWeuclidean(adjust=False): 5.0
    test 132 HeightIDWeuclidean(float): <class 'float'>
    test 133 HeightIDWeuclidean(latlon): True
    test 134 HeightIDWeuclidean(adjust=False): (6.143010434, 5.0,)
    test 135 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 136 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 137 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 138 HeightIDWeuclidean(adjust=False): [6.143010434, 5.0]
    test 139 HeightIDWeuclidean(list: <class 'list'>
    test 140 HeightIDWeuclidean(list-float): <class 'float'>
    test 141 HeightIDWeuclidean(list-float): <class 'float'>
    test 142 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 143 HeightIDWeuclidean.adjust: True
    test 144 HeightIDWeuclidean.kmin: 2
    test 145 HeightIDWeuclidean.wrap: None
    test 146 HeightIDWeuclidean.beta: 2
    test 147 HeightIDWeuclidean.adjust: True
    test 148 HeightIDWeuclidean.beta: 2
    test 149 HeightIDWeuclidean.kmin: 2
    test 150 HeightIDWeuclidean.wrap: None
    test 151 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 152 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 153 HeightIDWequirectangular(adjust=True, wrap=True): 6.108538529
    test 154 HeightIDWequirectangular(float): <class 'float'>
    test 155 HeightIDWequirectangular(latlon): True
    test 156 HeightIDWequirectangular(adjust=True, wrap=True): 5.0
    test 157 HeightIDWequirectangular(float): <class 'float'>
    test 158 HeightIDWequirectangular(latlon): True
    test 159 HeightIDWequirectangular(adjust=True, wrap=True): (6.108538529, 5.0,)
    test 160 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 161 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 162 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 163 HeightIDWequirectangular(adjust=True, wrap=True): [6.108538529, 5.0]
    test 164 HeightIDWequirectangular(list: <class 'list'>
    test 165 HeightIDWequirectangular(list-float): <class 'float'>
    test 166 HeightIDWequirectangular(list-float): <class 'float'>
    test 167 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 168 HeightIDWequirectangular.adjust: True
    test 169 HeightIDWequirectangular.kmin: 2
    test 170 HeightIDWequirectangular.wrap: False
    test 171 HeightIDWequirectangular.beta: 1
    test 172 HeightIDWequirectangular.adjust: True
    test 173 HeightIDWequirectangular.beta: 1
    test 174 HeightIDWequirectangular.kmin: 2
    test 175 HeightIDWequirectangular.wrap: False
    test 176 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 177 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 178 HeightIDWequirectangular(adjust=False, wrap=True): 6.108614369
    test 179 HeightIDWequirectangular(float): <class 'float'>
    test 180 HeightIDWequirectangular(latlon): True
    test 181 HeightIDWequirectangular(adjust=False, wrap=True): 5.0
    test 182 HeightIDWequirectangular(float): <class 'float'>
    test 183 HeightIDWequirectangular(latlon): True
    test 184 HeightIDWequirectangular(adjust=False, wrap=True): (6.108614369, 5.0,)
    test 185 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 186 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 187 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 188 HeightIDWequirectangular(adjust=False, wrap=True): [6.108614369, 5.0]
    test 189 HeightIDWequirectangular(list: <class 'list'>
    test 190 HeightIDWequirectangular(list-float): <class 'float'>
    test 191 HeightIDWequirectangular(list-float): <class 'float'>
    test 192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 193 HeightIDWequirectangular.adjust: True
    test 194 HeightIDWequirectangular.kmin: 2
    test 195 HeightIDWequirectangular.wrap: False
    test 196 HeightIDWequirectangular.beta: 1
    test 197 HeightIDWequirectangular.adjust: True
    test 198 HeightIDWequirectangular.beta: 1
    test 199 HeightIDWequirectangular.kmin: 2
    test 200 HeightIDWequirectangular.wrap: False
    test 201 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 202 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 203 HeightIDWflatLocal(wrap=False): 6.860459007
    test 204 HeightIDWflatLocal(float): <class 'float'>
    test 205 HeightIDWflatLocal(latlon): True
    test 206 HeightIDWflatLocal(wrap=False): 5.0
    test 207 HeightIDWflatLocal(float): <class 'float'>
    test 208 HeightIDWflatLocal(latlon): True
    test 209 HeightIDWflatLocal(wrap=False): (6.860459007, 5.0,)
    test 210 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 211 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 212 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 213 HeightIDWflatLocal(wrap=False): [6.860459007, 5.0]
    test 214 HeightIDWflatLocal(list: <class 'list'>
    test 215 HeightIDWflatLocal(list-float): <class 'float'>
    test 216 HeightIDWflatLocal(list-float): <class 'float'>
    test 217 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 218 HeightIDWflatLocal.adjust: None
    test 219 HeightIDWflatLocal.kmin: 2
    test 220 HeightIDWflatLocal.wrap: False
    test 221 HeightIDWflatLocal.beta: 2
    test 222 HeightIDWflatLocal.adjust: None
    test 223 HeightIDWflatLocal.beta: 2
    test 224 HeightIDWflatLocal.kmin: 2
    test 225 HeightIDWflatLocal.wrap: False
    test 226 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 227 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 228 HeightIDWflatPolar(wrap=False): 6.261469975
    test 229 HeightIDWflatPolar(float): <class 'float'>
    test 230 HeightIDWflatPolar(latlon): True
    test 231 HeightIDWflatPolar(wrap=False): 5.0
    test 232 HeightIDWflatPolar(float): <class 'float'>
    test 233 HeightIDWflatPolar(latlon): True
    test 234 HeightIDWflatPolar(wrap=False): (6.261469975, 5.0,)
    test 235 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 236 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 237 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 238 HeightIDWflatPolar(wrap=False): [6.261469975, 5.0]
    test 239 HeightIDWflatPolar(list: <class 'list'>
    test 240 HeightIDWflatPolar(list-float): <class 'float'>
    test 241 HeightIDWflatPolar(list-float): <class 'float'>
    test 242 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 243 HeightIDWflatPolar.adjust: None
    test 244 HeightIDWflatPolar.kmin: 2
    test 245 HeightIDWflatPolar.wrap: False
    test 246 HeightIDWflatPolar.beta: 2
    test 247 HeightIDWflatPolar.adjust: None
    test 248 HeightIDWflatPolar.beta: 2
    test 249 HeightIDWflatPolar.kmin: 2
    test 250 HeightIDWflatPolar.wrap: False
    test 251 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 252 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 253 HeightIDWhaversine(wrap=False): 6.108538037
    test 254 HeightIDWhaversine(float): <class 'float'>
    test 255 HeightIDWhaversine(latlon): True
    test 256 HeightIDWhaversine(wrap=False): 5.0
    test 257 HeightIDWhaversine(float): <class 'float'>
    test 258 HeightIDWhaversine(latlon): True
    test 259 HeightIDWhaversine(wrap=False): (6.108538037, 5.0,)
    test 260 HeightIDWhaversine(tuple): <class 'tuple'>
    test 261 HeightIDWhaversine(tuple-float): <class 'float'>
    test 262 HeightIDWhaversine(tuple-float): <class 'float'>
    test 263 HeightIDWhaversine(wrap=False): [6.108538037, 5.0]
    test 264 HeightIDWhaversine(list: <class 'list'>
    test 265 HeightIDWhaversine(list-float): <class 'float'>
    test 266 HeightIDWhaversine(list-float): <class 'float'>
    test 267 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 268 HeightIDWhaversine.adjust: None
    test 269 HeightIDWhaversine.kmin: 2
    test 270 HeightIDWhaversine.wrap: False
    test 271 HeightIDWhaversine.beta: 2
    test 272 HeightIDWhaversine.adjust: None
    test 273 HeightIDWhaversine.beta: 2
    test 274 HeightIDWhaversine.kmin: 2
    test 275 HeightIDWhaversine.wrap: False
    test 276 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 277 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 278 HeightIDWhubeny(wrap=False): 6.860459007
    test 279 HeightIDWhubeny(float): <class 'float'>
    test 280 HeightIDWhubeny(latlon): True
    test 281 HeightIDWhubeny(wrap=False): 5.0
    test 282 HeightIDWhubeny(float): <class 'float'>
    test 283 HeightIDWhubeny(latlon): True
    test 284 HeightIDWhubeny(wrap=False): (6.860459007, 5.0,)
    test 285 HeightIDWhubeny(tuple): <class 'tuple'>
    test 286 HeightIDWhubeny(tuple-float): <class 'float'>
    test 287 HeightIDWhubeny(tuple-float): <class 'float'>
    test 288 HeightIDWhubeny(wrap=False): [6.860459007, 5.0]
    test 289 HeightIDWhubeny(list: <class 'list'>
    test 290 HeightIDWhubeny(list-float): <class 'float'>
    test 291 HeightIDWhubeny(list-float): <class 'float'>
    test 292 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 293 HeightIDWhubeny.adjust: None
    test 294 HeightIDWhubeny.kmin: 2
    test 295 HeightIDWhubeny.wrap: False
    test 296 HeightIDWhubeny.beta: 2
    test 297 HeightIDWhubeny.adjust: None
    test 298 HeightIDWhubeny.beta: 2
    test 299 HeightIDWhubeny.kmin: 2
    test 300 HeightIDWhubeny.wrap: False
    test 301 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 302 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 303 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 6.111158743
    test 304 HeightIDWkarney(float): <class 'float'>
    test 305 HeightIDWkarney(latlon): True
    test 306 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 5.0
    test 307 HeightIDWkarney(float): <class 'float'>
    test 308 HeightIDWkarney(latlon): True
    test 309 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (6.111158743, 5.0,)
    test 310 HeightIDWkarney(tuple): <class 'tuple'>
    test 311 HeightIDWkarney(tuple-float): <class 'float'>
    test 312 HeightIDWkarney(tuple-float): <class 'float'>
    test 313 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [6.111158743, 5.0]
    test 314 HeightIDWkarney(list: <class 'list'>
    test 315 HeightIDWkarney(list-float): <class 'float'>
    test 316 HeightIDWkarney(list-float): <class 'float'>
    test 317 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 318 HeightIDWkarney.adjust: None
    test 319 HeightIDWkarney.kmin: 2
    test 320 HeightIDWkarney.wrap: True
    test 321 HeightIDWkarney.beta: 2
    test 322 HeightIDWkarney.adjust: None
    test 323 HeightIDWkarney.beta: 2
    test 324 HeightIDWkarney.kmin: 2
    test 325 HeightIDWkarney.wrap: True
    test 326 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 327 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 328 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 6.111158743
    test 329 HeightIDWkarney(float): <class 'float'>
    test 330 HeightIDWkarney(latlon): True
    test 331 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 5.0
    test 332 HeightIDWkarney(float): <class 'float'>
    test 333 HeightIDWkarney(latlon): True
    test 334 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (6.111158743, 5.0,)
    test 335 HeightIDWkarney(tuple): <class 'tuple'>
    test 336 HeightIDWkarney(tuple-float): <class 'float'>
    test 337 HeightIDWkarney(tuple-float): <class 'float'>
    test 338 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [6.111158743, 5.0]
    test 339 HeightIDWkarney(list: <class 'list'>
    test 340 HeightIDWkarney(list-float): <class 'float'>
    test 341 HeightIDWkarney(list-float): <class 'float'>
    test 342 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 343 HeightIDWkarney.adjust: None
    test 344 HeightIDWkarney.kmin: 2
    test 345 HeightIDWkarney.wrap: False
    test 346 HeightIDWkarney.beta: 2
    test 347 HeightIDWkarney.adjust: None
    test 348 HeightIDWkarney.beta: 2
    test 349 HeightIDWkarney.kmin: 2
    test 350 HeightIDWkarney.wrap: False
    test 351 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 352 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 353 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 6.108538037
    test 354 HeightIDWkarney(float): <class 'float'>
    test 355 HeightIDWkarney(latlon): True
    test 356 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 5.0
    test 357 HeightIDWkarney(float): <class 'float'>
    test 358 HeightIDWkarney(latlon): True
    test 359 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (6.108538037, 5.0,)
    test 360 HeightIDWkarney(tuple): <class 'tuple'>
    test 361 HeightIDWkarney(tuple-float): <class 'float'>
    test 362 HeightIDWkarney(tuple-float): <class 'float'>
    test 363 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [6.108538037, 5.0]
    test 364 HeightIDWkarney(list: <class 'list'>
    test 365 HeightIDWkarney(list-float): <class 'float'>
    test 366 HeightIDWkarney(list-float): <class 'float'>
    test 367 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 368 HeightIDWkarney.adjust: None
    test 369 HeightIDWkarney.kmin: 2
    test 370 HeightIDWkarney.wrap: True
    test 371 HeightIDWkarney.beta: 2
    test 372 HeightIDWkarney.adjust: None
    test 373 HeightIDWkarney.beta: 2
    test 374 HeightIDWkarney.kmin: 2
    test 375 HeightIDWkarney.wrap: True
    test 376 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 377 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 378 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 6.108538037
    test 379 HeightIDWkarney(float): <class 'float'>
    test 380 HeightIDWkarney(latlon): True
    test 381 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 5.0
    test 382 HeightIDWkarney(float): <class 'float'>
    test 383 HeightIDWkarney(latlon): True
    test 384 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (6.108538037, 5.0,)
    test 385 HeightIDWkarney(tuple): <class 'tuple'>
    test 386 HeightIDWkarney(tuple-float): <class 'float'>
    test 387 HeightIDWkarney(tuple-float): <class 'float'>
    test 388 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [6.108538037, 5.0]
    test 389 HeightIDWkarney(list: <class 'list'>
    test 390 HeightIDWkarney(list-float): <class 'float'>
    test 391 HeightIDWkarney(list-float): <class 'float'>
    test 392 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 393 HeightIDWkarney.adjust: None
    test 394 HeightIDWkarney.kmin: 2
    test 395 HeightIDWkarney.wrap: False
    test 396 HeightIDWkarney.beta: 2
    test 397 HeightIDWkarney.adjust: None
    test 398 HeightIDWkarney.beta: 2
    test 399 HeightIDWkarney.kmin: 2
    test 400 HeightIDWkarney.wrap: False
    test 401 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 402 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 403 HeightIDWthomas(wrap=True): 6.108538037
    test 404 HeightIDWthomas(float): <class 'float'>
    test 405 HeightIDWthomas(latlon): True
    test 406 HeightIDWthomas(wrap=True): 5.0
    test 407 HeightIDWthomas(float): <class 'float'>
    test 408 HeightIDWthomas(latlon): True
    test 409 HeightIDWthomas(wrap=True): (6.108538037, 5.0,)
    test 410 HeightIDWthomas(tuple): <class 'tuple'>
    test 411 HeightIDWthomas(tuple-float): <class 'float'>
    test 412 HeightIDWthomas(tuple-float): <class 'float'>
    test 413 HeightIDWthomas(wrap=True): [6.108538037, 5.0]
    test 414 HeightIDWthomas(list: <class 'list'>
    test 415 HeightIDWthomas(list-float): <class 'float'>
    test 416 HeightIDWthomas(list-float): <class 'float'>
    test 417 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 418 HeightIDWthomas.adjust: None
    test 419 HeightIDWthomas.kmin: 2
    test 420 HeightIDWthomas.wrap: False
    test 421 HeightIDWthomas.beta: 2
    test 422 HeightIDWthomas.adjust: None
    test 423 HeightIDWthomas.beta: 2
    test 424 HeightIDWthomas.kmin: 2
    test 425 HeightIDWthomas.wrap: False
    test 426 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 427 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 428 HeightIDWthomas(wrap=False): 6.108538037
    test 429 HeightIDWthomas(float): <class 'float'>
    test 430 HeightIDWthomas(latlon): True
    test 431 HeightIDWthomas(wrap=False): 5.0
    test 432 HeightIDWthomas(float): <class 'float'>
    test 433 HeightIDWthomas(latlon): True
    test 434 HeightIDWthomas(wrap=False): (6.108538037, 5.0,)
    test 435 HeightIDWthomas(tuple): <class 'tuple'>
    test 436 HeightIDWthomas(tuple-float): <class 'float'>
    test 437 HeightIDWthomas(tuple-float): <class 'float'>
    test 438 HeightIDWthomas(wrap=False): [6.108538037, 5.0]
    test 439 HeightIDWthomas(list: <class 'list'>
    test 440 HeightIDWthomas(list-float): <class 'float'>
    test 441 HeightIDWthomas(list-float): <class 'float'>
    test 442 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 443 HeightIDWthomas.adjust: None
    test 444 HeightIDWthomas.kmin: 2
    test 445 HeightIDWthomas.wrap: False
    test 446 HeightIDWthomas.beta: 2
    test 447 HeightIDWthomas.adjust: None
    test 448 HeightIDWthomas.beta: 2
    test 449 HeightIDWthomas.kmin: 2
    test 450 HeightIDWthomas.wrap: False
    test 451 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 452 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 453 HeightIDWvincentys(wrap=True): 6.108538037
    test 454 HeightIDWvincentys(float): <class 'float'>
    test 455 HeightIDWvincentys(latlon): True
    test 456 HeightIDWvincentys(wrap=True): 5.0
    test 457 HeightIDWvincentys(float): <class 'float'>
    test 458 HeightIDWvincentys(latlon): True
    test 459 HeightIDWvincentys(wrap=True): (6.108538037, 5.0,)
    test 460 HeightIDWvincentys(tuple): <class 'tuple'>
    test 461 HeightIDWvincentys(tuple-float): <class 'float'>
    test 462 HeightIDWvincentys(tuple-float): <class 'float'>
    test 463 HeightIDWvincentys(wrap=True): [6.108538037, 5.0]
    test 464 HeightIDWvincentys(list: <class 'list'>
    test 465 HeightIDWvincentys(list-float): <class 'float'>
    test 466 HeightIDWvincentys(list-float): <class 'float'>
    test 467 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 468 HeightIDWvincentys.adjust: None
    test 469 HeightIDWvincentys.kmin: 2
    test 470 HeightIDWvincentys.wrap: False
    test 471 HeightIDWvincentys.beta: 2
    test 472 HeightIDWvincentys.adjust: None
    test 473 HeightIDWvincentys.beta: 2
    test 474 HeightIDWvincentys.kmin: 2
    test 475 HeightIDWvincentys.wrap: False
    test 476 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 477 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 478 HeightIDWvincentys(wrap=False): 6.108538037
    test 479 HeightIDWvincentys(float): <class 'float'>
    test 480 HeightIDWvincentys(latlon): True
    test 481 HeightIDWvincentys(wrap=False): 5.0
    test 482 HeightIDWvincentys(float): <class 'float'>
    test 483 HeightIDWvincentys(latlon): True
    test 484 HeightIDWvincentys(wrap=False): (6.108538037, 5.0,)
    test 485 HeightIDWvincentys(tuple): <class 'tuple'>
    test 486 HeightIDWvincentys(tuple-float): <class 'float'>
    test 487 HeightIDWvincentys(tuple-float): <class 'float'>
    test 488 HeightIDWvincentys(wrap=False): [6.108538037, 5.0]
    test 489 HeightIDWvincentys(list: <class 'list'>
    test 490 HeightIDWvincentys(list-float): <class 'float'>
    test 491 HeightIDWvincentys(list-float): <class 'float'>
    test 492 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 493 HeightIDWvincentys.adjust: None
    test 494 HeightIDWvincentys.kmin: 2
    test 495 HeightIDWvincentys.wrap: False
    test 496 HeightIDWvincentys.beta: 2
    test 497 HeightIDWvincentys.adjust: None
    test 498 HeightIDWvincentys.beta: 2
    test 499 HeightIDWvincentys.kmin: 2
    test 500 HeightIDWvincentys.wrap: False
    test 501 intersection: 02.64932°N, 002.550079°E, +2.50m
    test 502 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 503 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 504 HeightIDWcosineAndoyerLambert(wrap=False): 2.592742938
    test 505 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 506 HeightIDWcosineAndoyerLambert(latlon): True
    test 507 HeightIDWcosineAndoyerLambert(wrap=False): 3.0
    test 508 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 509 HeightIDWcosineAndoyerLambert(latlon): True
    test 510 HeightIDWcosineAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 511 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 512 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 513 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 514 HeightIDWcosineAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 515 HeightIDWcosineAndoyerLambert(list: <class 'list'>
    test 516 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 517 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 518 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 519 HeightIDWcosineAndoyerLambert.adjust: None
    test 520 HeightIDWcosineAndoyerLambert.kmin: 2
    test 521 HeightIDWcosineAndoyerLambert.wrap: False
    test 522 HeightIDWcosineAndoyerLambert.beta: 2
    test 523 HeightIDWcosineAndoyerLambert.adjust: None
    test 524 HeightIDWcosineAndoyerLambert.beta: 2
    test 525 HeightIDWcosineAndoyerLambert.kmin: 2
    test 526 HeightIDWcosineAndoyerLambert.wrap: False
    test 527 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 528 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 529 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 2.592742938
    test 530 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 531 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 532 HeightIDWcosineForsytheAndoyerLambert(wrap=False): 3.0
    test 533 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 534 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 535 HeightIDWcosineForsytheAndoyerLambert(wrap=False): (2.592742938, 3.0,)
    test 536 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 537 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 538 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 539 HeightIDWcosineForsytheAndoyerLambert(wrap=False): [2.592742938, 3.0]
    test 540 HeightIDWcosineForsytheAndoyerLambert(list: <class 'list'>
    test 541 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 542 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 543 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 544 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 545 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 546 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 547 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 548 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 549 HeightIDWcosineForsytheAndoyerLambert.beta: 2
    test 550 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 551 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 552 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 553 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 554 HeightIDWcosineLaw(wrap=True): 2.592742938
    test 555 HeightIDWcosineLaw(float): <class 'float'>
    test 556 HeightIDWcosineLaw(latlon): True
    test 557 HeightIDWcosineLaw(wrap=True): 3.0
    test 558 HeightIDWcosineLaw(float): <class 'float'>
    test 559 HeightIDWcosineLaw(latlon): True
    test 560 HeightIDWcosineLaw(wrap=True): (2.592742938, 3.0,)
    test 561 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 562 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 563 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 564 HeightIDWcosineLaw(wrap=True): [2.592742938, 3.0]
    test 565 HeightIDWcosineLaw(list: <class 'list'>
    test 566 HeightIDWcosineLaw(list-float): <class 'float'>
    test 567 HeightIDWcosineLaw(list-float): <class 'float'>
    test 568 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 569 HeightIDWcosineLaw.adjust: None
    test 570 HeightIDWcosineLaw.kmin: 2
    test 571 HeightIDWcosineLaw.wrap: False
    test 572 HeightIDWcosineLaw.beta: 2
    test 573 HeightIDWcosineLaw.adjust: None
    test 574 HeightIDWcosineLaw.beta: 2
    test 575 HeightIDWcosineLaw.kmin: 2
    test 576 HeightIDWcosineLaw.wrap: False
    test 577 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 578 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 579 HeightIDWcosineLaw(wrap=False): 2.592742938
    test 580 HeightIDWcosineLaw(float): <class 'float'>
    test 581 HeightIDWcosineLaw(latlon): True
    test 582 HeightIDWcosineLaw(wrap=False): 3.0
    test 583 HeightIDWcosineLaw(float): <class 'float'>
    test 584 HeightIDWcosineLaw(latlon): True
    test 585 HeightIDWcosineLaw(wrap=False): (2.592742938, 3.0,)
    test 586 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 587 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 588 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 589 HeightIDWcosineLaw(wrap=False): [2.592742938, 3.0]
    test 590 HeightIDWcosineLaw(list: <class 'list'>
    test 591 HeightIDWcosineLaw(list-float): <class 'float'>
    test 592 HeightIDWcosineLaw(list-float): <class 'float'>
    test 593 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 594 HeightIDWcosineLaw.adjust: None
    test 595 HeightIDWcosineLaw.kmin: 2
    test 596 HeightIDWcosineLaw.wrap: False
    test 597 HeightIDWcosineLaw.beta: 2
    test 598 HeightIDWcosineLaw.adjust: None
    test 599 HeightIDWcosineLaw.beta: 2
    test 600 HeightIDWcosineLaw.kmin: 2
    test 601 HeightIDWcosineLaw.wrap: False
    test 602 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 603 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 604 HeightIDWeuclidean(adjust=False): 2.592735541
    test 605 HeightIDWeuclidean(float): <class 'float'>
    test 606 HeightIDWeuclidean(latlon): True
    test 607 HeightIDWeuclidean(adjust=False): 3.0
    test 608 HeightIDWeuclidean(float): <class 'float'>
    test 609 HeightIDWeuclidean(latlon): True
    test 610 HeightIDWeuclidean(adjust=False): (2.592735541, 3.0,)
    test 611 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 612 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 613 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 614 HeightIDWeuclidean(adjust=False): [2.592735541, 3.0]
    test 615 HeightIDWeuclidean(list: <class 'list'>
    test 616 HeightIDWeuclidean(list-float): <class 'float'>
    test 617 HeightIDWeuclidean(list-float): <class 'float'>
    test 618 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 619 HeightIDWeuclidean.adjust: True
    test 620 HeightIDWeuclidean.kmin: 2
    test 621 HeightIDWeuclidean.wrap: None
    test 622 HeightIDWeuclidean.beta: 2
    test 623 HeightIDWeuclidean.adjust: True
    test 624 HeightIDWeuclidean.beta: 2
    test 625 HeightIDWeuclidean.kmin: 2
    test 626 HeightIDWeuclidean.wrap: None
    test 627 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 628 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 629 HeightIDWequirectangular(adjust=True, wrap=True): 2.592743455
    test 630 HeightIDWequirectangular(float): <class 'float'>
    test 631 HeightIDWequirectangular(latlon): True
    test 632 HeightIDWequirectangular(adjust=True, wrap=True): 3.0
    test 633 HeightIDWequirectangular(float): <class 'float'>
    test 634 HeightIDWequirectangular(latlon): True
    test 635 HeightIDWequirectangular(adjust=True, wrap=True): (2.592743455, 3.0,)
    test 636 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 637 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 638 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 639 HeightIDWequirectangular(adjust=True, wrap=True): [2.592743455, 3.0]
    test 640 HeightIDWequirectangular(list: <class 'list'>
    test 641 HeightIDWequirectangular(list-float): <class 'float'>
    test 642 HeightIDWequirectangular(list-float): <class 'float'>
    test 643 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 644 HeightIDWequirectangular.adjust: True
    test 645 HeightIDWequirectangular.kmin: 2
    test 646 HeightIDWequirectangular.wrap: False
    test 647 HeightIDWequirectangular.beta: 1
    test 648 HeightIDWequirectangular.adjust: True
    test 649 HeightIDWequirectangular.beta: 1
    test 650 HeightIDWequirectangular.kmin: 2
    test 651 HeightIDWequirectangular.wrap: False
    test 652 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 653 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 654 HeightIDWequirectangular(adjust=False, wrap=True): 2.592732915
    test 655 HeightIDWequirectangular(float): <class 'float'>
    test 656 HeightIDWequirectangular(latlon): True
    test 657 HeightIDWequirectangular(adjust=False, wrap=True): 3.0
    test 658 HeightIDWequirectangular(float): <class 'float'>
    test 659 HeightIDWequirectangular(latlon): True
    test 660 HeightIDWequirectangular(adjust=False, wrap=True): (2.592732915, 3.0,)
    test 661 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 662 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 663 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 664 HeightIDWequirectangular(adjust=False, wrap=True): [2.592732915, 3.0]
    test 665 HeightIDWequirectangular(list: <class 'list'>
    test 666 HeightIDWequirectangular(list-float): <class 'float'>
    test 667 HeightIDWequirectangular(list-float): <class 'float'>
    test 668 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 669 HeightIDWequirectangular.adjust: True
    test 670 HeightIDWequirectangular.kmin: 2
    test 671 HeightIDWequirectangular.wrap: False
    test 672 HeightIDWequirectangular.beta: 1
    test 673 HeightIDWequirectangular.adjust: True
    test 674 HeightIDWequirectangular.beta: 1
    test 675 HeightIDWequirectangular.kmin: 2
    test 676 HeightIDWequirectangular.wrap: False
    test 677 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 678 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 679 HeightIDWflatLocal(wrap=False): 2.689429914
    test 680 HeightIDWflatLocal(float): <class 'float'>
    test 681 HeightIDWflatLocal(latlon): True
    test 682 HeightIDWflatLocal(wrap=False): 3.0
    test 683 HeightIDWflatLocal(float): <class 'float'>
    test 684 HeightIDWflatLocal(latlon): True
    test 685 HeightIDWflatLocal(wrap=False): (2.689429914, 3.0,)
    test 686 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 687 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 688 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 689 HeightIDWflatLocal(wrap=False): [2.689429914, 3.0]
    test 690 HeightIDWflatLocal(list: <class 'list'>
    test 691 HeightIDWflatLocal(list-float): <class 'float'>
    test 692 HeightIDWflatLocal(list-float): <class 'float'>
    test 693 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 694 HeightIDWflatLocal.adjust: None
    test 695 HeightIDWflatLocal.kmin: 2
    test 696 HeightIDWflatLocal.wrap: False
    test 697 HeightIDWflatLocal.beta: 2
    test 698 HeightIDWflatLocal.adjust: None
    test 699 HeightIDWflatLocal.beta: 2
    test 700 HeightIDWflatLocal.kmin: 2
    test 701 HeightIDWflatLocal.wrap: False
    test 702 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 703 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 704 HeightIDWflatPolar(wrap=False): 2.592973059
    test 705 HeightIDWflatPolar(float): <class 'float'>
    test 706 HeightIDWflatPolar(latlon): True
    test 707 HeightIDWflatPolar(wrap=False): 3.0
    test 708 HeightIDWflatPolar(float): <class 'float'>
    test 709 HeightIDWflatPolar(latlon): True
    test 710 HeightIDWflatPolar(wrap=False): (2.592973059, 3.0,)
    test 711 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 712 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 713 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 714 HeightIDWflatPolar(wrap=False): [2.592973059, 3.0]
    test 715 HeightIDWflatPolar(list: <class 'list'>
    test 716 HeightIDWflatPolar(list-float): <class 'float'>
    test 717 HeightIDWflatPolar(list-float): <class 'float'>
    test 718 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 719 HeightIDWflatPolar.adjust: None
    test 720 HeightIDWflatPolar.kmin: 2
    test 721 HeightIDWflatPolar.wrap: False
    test 722 HeightIDWflatPolar.beta: 2
    test 723 HeightIDWflatPolar.adjust: None
    test 724 HeightIDWflatPolar.beta: 2
    test 725 HeightIDWflatPolar.kmin: 2
    test 726 HeightIDWflatPolar.wrap: False
    test 727 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 728 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 729 HeightIDWhaversine(wrap=False): 2.592742938
    test 730 HeightIDWhaversine(float): <class 'float'>
    test 731 HeightIDWhaversine(latlon): True
    test 732 HeightIDWhaversine(wrap=False): 3.0
    test 733 HeightIDWhaversine(float): <class 'float'>
    test 734 HeightIDWhaversine(latlon): True
    test 735 HeightIDWhaversine(wrap=False): (2.592742938, 3.0,)
    test 736 HeightIDWhaversine(tuple): <class 'tuple'>
    test 737 HeightIDWhaversine(tuple-float): <class 'float'>
    test 738 HeightIDWhaversine(tuple-float): <class 'float'>
    test 739 HeightIDWhaversine(wrap=False): [2.592742938, 3.0]
    test 740 HeightIDWhaversine(list: <class 'list'>
    test 741 HeightIDWhaversine(list-float): <class 'float'>
    test 742 HeightIDWhaversine(list-float): <class 'float'>
    test 743 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 744 HeightIDWhaversine.adjust: None
    test 745 HeightIDWhaversine.kmin: 2
    test 746 HeightIDWhaversine.wrap: False
    test 747 HeightIDWhaversine.beta: 2
    test 748 HeightIDWhaversine.adjust: None
    test 749 HeightIDWhaversine.beta: 2
    test 750 HeightIDWhaversine.kmin: 2
    test 751 HeightIDWhaversine.wrap: False
    test 752 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 753 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 754 HeightIDWhubeny(wrap=False): 2.689429914
    test 755 HeightIDWhubeny(float): <class 'float'>
    test 756 HeightIDWhubeny(latlon): True
    test 757 HeightIDWhubeny(wrap=False): 3.0
    test 758 HeightIDWhubeny(float): <class 'float'>
    test 759 HeightIDWhubeny(latlon): True
    test 760 HeightIDWhubeny(wrap=False): (2.689429914, 3.0,)
    test 761 HeightIDWhubeny(tuple): <class 'tuple'>
    test 762 HeightIDWhubeny(tuple-float): <class 'float'>
    test 763 HeightIDWhubeny(tuple-float): <class 'float'>
    test 764 HeightIDWhubeny(wrap=False): [2.689429914, 3.0]
    test 765 HeightIDWhubeny(list: <class 'list'>
    test 766 HeightIDWhubeny(list-float): <class 'float'>
    test 767 HeightIDWhubeny(list-float): <class 'float'>
    test 768 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 769 HeightIDWhubeny.adjust: None
    test 770 HeightIDWhubeny.kmin: 2
    test 771 HeightIDWhubeny.wrap: False
    test 772 HeightIDWhubeny.beta: 2
    test 773 HeightIDWhubeny.adjust: None
    test 774 HeightIDWhubeny.beta: 2
    test 775 HeightIDWhubeny.kmin: 2
    test 776 HeightIDWhubeny.wrap: False
    test 777 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 778 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 779 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 2.592742915
    test 780 HeightIDWkarney(float): <class 'float'>
    test 781 HeightIDWkarney(latlon): True
    test 782 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): 3.0
    test 783 HeightIDWkarney(float): <class 'float'>
    test 784 HeightIDWkarney(latlon): True
    test 785 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): (2.592742915, 3.0,)
    test 786 HeightIDWkarney(tuple): <class 'tuple'>
    test 787 HeightIDWkarney(tuple-float): <class 'float'>
    test 788 HeightIDWkarney(tuple-float): <class 'float'>
    test 789 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=True): [2.592742915, 3.0]
    test 790 HeightIDWkarney(list: <class 'list'>
    test 791 HeightIDWkarney(list-float): <class 'float'>
    test 792 HeightIDWkarney(list-float): <class 'float'>
    test 793 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 794 HeightIDWkarney.adjust: None
    test 795 HeightIDWkarney.kmin: 2
    test 796 HeightIDWkarney.wrap: True
    test 797 HeightIDWkarney.beta: 2
    test 798 HeightIDWkarney.adjust: None
    test 799 HeightIDWkarney.beta: 2
    test 800 HeightIDWkarney.kmin: 2
    test 801 HeightIDWkarney.wrap: True
    test 802 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 803 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 804 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 2.592742915
    test 805 HeightIDWkarney(float): <class 'float'>
    test 806 HeightIDWkarney(latlon): True
    test 807 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): 3.0
    test 808 HeightIDWkarney(float): <class 'float'>
    test 809 HeightIDWkarney(latlon): True
    test 810 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): (2.592742915, 3.0,)
    test 811 HeightIDWkarney(tuple): <class 'tuple'>
    test 812 HeightIDWkarney(tuple-float): <class 'float'>
    test 813 HeightIDWkarney(tuple-float): <class 'float'>
    test 814 HeightIDWkarney(datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), wrap=False): [2.592742915, 3.0]
    test 815 HeightIDWkarney(list: <class 'list'>
    test 816 HeightIDWkarney(list-float): <class 'float'>
    test 817 HeightIDWkarney(list-float): <class 'float'>
    test 818 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 819 HeightIDWkarney.adjust: None
    test 820 HeightIDWkarney.kmin: 2
    test 821 HeightIDWkarney.wrap: False
    test 822 HeightIDWkarney.beta: 2
    test 823 HeightIDWkarney.adjust: None
    test 824 HeightIDWkarney.beta: 2
    test 825 HeightIDWkarney.kmin: 2
    test 826 HeightIDWkarney.wrap: False
    test 827 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 828 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 829 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 2.592742938
    test 830 HeightIDWkarney(float): <class 'float'>
    test 831 HeightIDWkarney(latlon): True
    test 832 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): 3.0
    test 833 HeightIDWkarney(float): <class 'float'>
    test 834 HeightIDWkarney(latlon): True
    test 835 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): (2.592742938, 3.0,)
    test 836 HeightIDWkarney(tuple): <class 'tuple'>
    test 837 HeightIDWkarney(tuple-float): <class 'float'>
    test 838 HeightIDWkarney(tuple-float): <class 'float'>
    test 839 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=True): [2.592742938, 3.0]
    test 840 HeightIDWkarney(list: <class 'list'>
    test 841 HeightIDWkarney(list-float): <class 'float'>
    test 842 HeightIDWkarney(list-float): <class 'float'>
    test 843 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 844 HeightIDWkarney.adjust: None
    test 845 HeightIDWkarney.kmin: 2
    test 846 HeightIDWkarney.wrap: True
    test 847 HeightIDWkarney.beta: 2
    test 848 HeightIDWkarney.adjust: None
    test 849 HeightIDWkarney.beta: 2
    test 850 HeightIDWkarney.kmin: 2
    test 851 HeightIDWkarney.wrap: True
    test 852 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 853 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 854 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 2.592742938
    test 855 HeightIDWkarney(float): <class 'float'>
    test 856 HeightIDWkarney(latlon): True
    test 857 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): 3.0
    test 858 HeightIDWkarney(float): <class 'float'>
    test 859 HeightIDWkarney(latlon): True
    test 860 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): (2.592742938, 3.0,)
    test 861 HeightIDWkarney(tuple): <class 'tuple'>
    test 862 HeightIDWkarney(tuple-float): <class 'float'>
    test 863 HeightIDWkarney(tuple-float): <class 'float'>
    test 864 HeightIDWkarney(datum=Datum(name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84), wrap=False): [2.592742938, 3.0]
    test 865 HeightIDWkarney(list: <class 'list'>
    test 866 HeightIDWkarney(list-float): <class 'float'>
    test 867 HeightIDWkarney(list-float): <class 'float'>
    test 868 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 869 HeightIDWkarney.adjust: None
    test 870 HeightIDWkarney.kmin: 2
    test 871 HeightIDWkarney.wrap: False
    test 872 HeightIDWkarney.beta: 2
    test 873 HeightIDWkarney.adjust: None
    test 874 HeightIDWkarney.beta: 2
    test 875 HeightIDWkarney.kmin: 2
    test 876 HeightIDWkarney.wrap: False
    test 877 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 878 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 879 HeightIDWthomas(wrap=True): 2.592742938
    test 880 HeightIDWthomas(float): <class 'float'>
    test 881 HeightIDWthomas(latlon): True
    test 882 HeightIDWthomas(wrap=True): 3.0
    test 883 HeightIDWthomas(float): <class 'float'>
    test 884 HeightIDWthomas(latlon): True
    test 885 HeightIDWthomas(wrap=True): (2.592742938, 3.0,)
    test 886 HeightIDWthomas(tuple): <class 'tuple'>
    test 887 HeightIDWthomas(tuple-float): <class 'float'>
    test 888 HeightIDWthomas(tuple-float): <class 'float'>
    test 889 HeightIDWthomas(wrap=True): [2.592742938, 3.0]
    test 890 HeightIDWthomas(list: <class 'list'>
    test 891 HeightIDWthomas(list-float): <class 'float'>
    test 892 HeightIDWthomas(list-float): <class 'float'>
    test 893 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 894 HeightIDWthomas.adjust: None
    test 895 HeightIDWthomas.kmin: 2
    test 896 HeightIDWthomas.wrap: False
    test 897 HeightIDWthomas.beta: 2
    test 898 HeightIDWthomas.adjust: None
    test 899 HeightIDWthomas.beta: 2
    test 900 HeightIDWthomas.kmin: 2
    test 901 HeightIDWthomas.wrap: False
    test 902 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 903 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 904 HeightIDWthomas(wrap=False): 2.592742938
    test 905 HeightIDWthomas(float): <class 'float'>
    test 906 HeightIDWthomas(latlon): True
    test 907 HeightIDWthomas(wrap=False): 3.0
    test 908 HeightIDWthomas(float): <class 'float'>
    test 909 HeightIDWthomas(latlon): True
    test 910 HeightIDWthomas(wrap=False): (2.592742938, 3.0,)
    test 911 HeightIDWthomas(tuple): <class 'tuple'>
    test 912 HeightIDWthomas(tuple-float): <class 'float'>
    test 913 HeightIDWthomas(tuple-float): <class 'float'>
    test 914 HeightIDWthomas(wrap=False): [2.592742938, 3.0]
    test 915 HeightIDWthomas(list: <class 'list'>
    test 916 HeightIDWthomas(list-float): <class 'float'>
    test 917 HeightIDWthomas(list-float): <class 'float'>
    test 918 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 919 HeightIDWthomas.adjust: None
    test 920 HeightIDWthomas.kmin: 2
    test 921 HeightIDWthomas.wrap: False
    test 922 HeightIDWthomas.beta: 2
    test 923 HeightIDWthomas.adjust: None
    test 924 HeightIDWthomas.beta: 2
    test 925 HeightIDWthomas.kmin: 2
    test 926 HeightIDWthomas.wrap: False
    test 927 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 928 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 929 HeightIDWvincentys(wrap=True): 2.592742938
    test 930 HeightIDWvincentys(float): <class 'float'>
    test 931 HeightIDWvincentys(latlon): True
    test 932 HeightIDWvincentys(wrap=True): 3.0
    test 933 HeightIDWvincentys(float): <class 'float'>
    test 934 HeightIDWvincentys(latlon): True
    test 935 HeightIDWvincentys(wrap=True): (2.592742938, 3.0,)
    test 936 HeightIDWvincentys(tuple): <class 'tuple'>
    test 937 HeightIDWvincentys(tuple-float): <class 'float'>
    test 938 HeightIDWvincentys(tuple-float): <class 'float'>
    test 939 HeightIDWvincentys(wrap=True): [2.592742938, 3.0]
    test 940 HeightIDWvincentys(list: <class 'list'>
    test 941 HeightIDWvincentys(list-float): <class 'float'>
    test 942 HeightIDWvincentys(list-float): <class 'float'>
    test 943 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 944 HeightIDWvincentys.adjust: None
    test 945 HeightIDWvincentys.kmin: 2
    test 946 HeightIDWvincentys.wrap: False
    test 947 HeightIDWvincentys.beta: 2
    test 948 HeightIDWvincentys.adjust: None
    test 949 HeightIDWvincentys.beta: 2
    test 950 HeightIDWvincentys.kmin: 2
    test 951 HeightIDWvincentys.wrap: False
    test 952 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 953 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 954 HeightIDWvincentys(wrap=False): 2.592742938
    test 955 HeightIDWvincentys(float): <class 'float'>
    test 956 HeightIDWvincentys(latlon): True
    test 957 HeightIDWvincentys(wrap=False): 3.0
    test 958 HeightIDWvincentys(float): <class 'float'>
    test 959 HeightIDWvincentys(latlon): True
    test 960 HeightIDWvincentys(wrap=False): (2.592742938, 3.0,)
    test 961 HeightIDWvincentys(tuple): <class 'tuple'>
    test 962 HeightIDWvincentys(tuple-float): <class 'float'>
    test 963 HeightIDWvincentys(tuple-float): <class 'float'>
    test 964 HeightIDWvincentys(wrap=False): [2.592742938, 3.0]
    test 965 HeightIDWvincentys(list: <class 'list'>
    test 966 HeightIDWvincentys(list-float): <class 'float'>
    test 967 HeightIDWvincentys(list-float): <class 'float'>
    test 968 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 969 HeightIDWvincentys.adjust: None
    test 970 HeightIDWvincentys.kmin: 2
    test 971 HeightIDWvincentys.wrap: False
    test 972 HeightIDWvincentys.beta: 2
    test 973 HeightIDWvincentys.adjust: None
    test 974 HeightIDWvincentys.beta: 2
    test 975 HeightIDWvincentys.kmin: 2
    test 976 HeightIDWvincentys.wrap: False
    test 977 copy(HeightLinear): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 978 HeightLinear.copy(): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 979 HeightLinear: 2.536626441
    test 980 HeightLinear(float): <class 'float'>
    test 981 HeightLinear(latlon): True
    test 982 copy(HeightCubic): (<class 'pygeodesy.heights.HeightCubic'>, True)
    test 983 HeightCubic.copy(): (<class 'pygeodesy.heights.HeightCubic'>, True)
    test 984 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 985 HeightCubic.adjust: None
    test 986 HeightCubic.kmin: 16
    test 987 HeightCubic.wrap: None
    test 988 HeightCubic: 3.000000000
    test 989 HeightCubic(float): <class 'float'>
    test 990 HeightCubic(latlon): True
    test 991 HeightCubic(tuple): <class 'tuple'>
    test 992 HeightCubic(tuple-float): <class 'float'>
    test 993 HeightCubic(tuple-float): <class 'float'>
    test 994 HeightCubic(list): <class 'list'>
    test 995 HeightCubic(list-float): <class 'float'>
    test 996 HeightCubic(list-float): <class 'float'>
    test 997 HeightCubic(latlon): True
    test 998 copy(HeightIDWcosineAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 999 HeightIDWcosineAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineAndoyerLambert'>, True)
    test 1000 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1001 HeightIDWcosineAndoyerLambert.adjust: None
    test 1002 HeightIDWcosineAndoyerLambert.kmin: 2
    test 1003 HeightIDWcosineAndoyerLambert.wrap: False
    test 1004 HeightIDWcosineAndoyerLambert: 2.402157442
    test 1005 HeightIDWcosineAndoyerLambert(float): <class 'float'>
    test 1006 HeightIDWcosineAndoyerLambert(latlon): True
    test 1007 HeightIDWcosineAndoyerLambert(tuple): <class 'tuple'>
    test 1008 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 1009 HeightIDWcosineAndoyerLambert(tuple-float): <class 'float'>
    test 1010 HeightIDWcosineAndoyerLambert(list): <class 'list'>
    test 1011 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 1012 HeightIDWcosineAndoyerLambert(list-float): <class 'float'>
    test 1013 HeightIDWcosineAndoyerLambert(latlon): True
    test 1014 copy(HeightIDWcosineForsytheAndoyerLambert): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 1015 HeightIDWcosineForsytheAndoyerLambert.copy(): (<class 'pygeodesy.heights.HeightIDWcosineForsytheAndoyerLambert'>, True)
    test 1016 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1017 HeightIDWcosineForsytheAndoyerLambert.adjust: None
    test 1018 HeightIDWcosineForsytheAndoyerLambert.kmin: 2
    test 1019 HeightIDWcosineForsytheAndoyerLambert.wrap: False
    test 1020 HeightIDWcosineForsytheAndoyerLambert: 2.402157442
    test 1021 HeightIDWcosineForsytheAndoyerLambert(float): <class 'float'>
    test 1022 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 1023 HeightIDWcosineForsytheAndoyerLambert(tuple): <class 'tuple'>
    test 1024 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 1025 HeightIDWcosineForsytheAndoyerLambert(tuple-float): <class 'float'>
    test 1026 HeightIDWcosineForsytheAndoyerLambert(list): <class 'list'>
    test 1027 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 1028 HeightIDWcosineForsytheAndoyerLambert(list-float): <class 'float'>
    test 1029 HeightIDWcosineForsytheAndoyerLambert(latlon): True
    test 1030 copy(HeightIDWcosineLaw): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 1031 HeightIDWcosineLaw.copy(): (<class 'pygeodesy.heights.HeightIDWcosineLaw'>, True)
    test 1032 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1033 HeightIDWcosineLaw.adjust: None
    test 1034 HeightIDWcosineLaw.kmin: 2
    test 1035 HeightIDWcosineLaw.wrap: False
    test 1036 HeightIDWcosineLaw: 2.402157442
    test 1037 HeightIDWcosineLaw(float): <class 'float'>
    test 1038 HeightIDWcosineLaw(latlon): True
    test 1039 HeightIDWcosineLaw(tuple): <class 'tuple'>
    test 1040 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 1041 HeightIDWcosineLaw(tuple-float): <class 'float'>
    test 1042 HeightIDWcosineLaw(list): <class 'list'>
    test 1043 HeightIDWcosineLaw(list-float): <class 'float'>
    test 1044 HeightIDWcosineLaw(list-float): <class 'float'>
    test 1045 HeightIDWcosineLaw(latlon): True
    test 1046 copy(HeightIDWeuclidean): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 1047 HeightIDWeuclidean.copy(): (<class 'pygeodesy.heights.HeightIDWeuclidean'>, True)
    test 1048 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1049 HeightIDWeuclidean.adjust: True
    test 1050 HeightIDWeuclidean.kmin: 2
    test 1051 HeightIDWeuclidean.wrap: None
    test 1052 HeightIDWeuclidean: 2.409288552
    test 1053 HeightIDWeuclidean(float): <class 'float'>
    test 1054 HeightIDWeuclidean(latlon): True
    test 1055 HeightIDWeuclidean(tuple): <class 'tuple'>
    test 1056 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 1057 HeightIDWeuclidean(tuple-float): <class 'float'>
    test 1058 HeightIDWeuclidean(list): <class 'list'>
    test 1059 HeightIDWeuclidean(list-float): <class 'float'>
    test 1060 HeightIDWeuclidean(list-float): <class 'float'>
    test 1061 HeightIDWeuclidean(latlon): True
    test 1062 copy(HeightIDWequirectangular): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 1063 HeightIDWequirectangular.copy(): (<class 'pygeodesy.heights.HeightIDWequirectangular'>, True)
    test 1064 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1065 HeightIDWequirectangular.adjust: True
    test 1066 HeightIDWequirectangular.kmin: 2
    test 1067 HeightIDWequirectangular.wrap: False
    test 1068 HeightIDWequirectangular: 2.402157181
    test 1069 HeightIDWequirectangular(float): <class 'float'>
    test 1070 HeightIDWequirectangular(latlon): True
    test 1071 HeightIDWequirectangular(tuple): <class 'tuple'>
    test 1072 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 1073 HeightIDWequirectangular(tuple-float): <class 'float'>
    test 1074 HeightIDWequirectangular(list): <class 'list'>
    test 1075 HeightIDWequirectangular(list-float): <class 'float'>
    test 1076 HeightIDWequirectangular(list-float): <class 'float'>
    test 1077 HeightIDWequirectangular(latlon): True
    test 1078 copy(HeightIDWflatLocal): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 1079 HeightIDWflatLocal.copy(): (<class 'pygeodesy.heights.HeightIDWflatLocal'>, True)
    test 1080 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1081 HeightIDWflatLocal.adjust: None
    test 1082 HeightIDWflatLocal.kmin: 2
    test 1083 HeightIDWflatLocal.wrap: False
    test 1084 HeightIDWflatLocal: 2.469718302
    test 1085 HeightIDWflatLocal(float): <class 'float'>
    test 1086 HeightIDWflatLocal(latlon): True
    test 1087 HeightIDWflatLocal(tuple): <class 'tuple'>
    test 1088 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 1089 HeightIDWflatLocal(tuple-float): <class 'float'>
    test 1090 HeightIDWflatLocal(list): <class 'list'>
    test 1091 HeightIDWflatLocal(list-float): <class 'float'>
    test 1092 HeightIDWflatLocal(list-float): <class 'float'>
    test 1093 HeightIDWflatLocal(latlon): True
    test 1094 copy(HeightIDWflatPolar): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 1095 HeightIDWflatPolar.copy(): (<class 'pygeodesy.heights.HeightIDWflatPolar'>, True)
    test 1096 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1097 HeightIDWflatPolar.adjust: None
    test 1098 HeightIDWflatPolar.kmin: 2
    test 1099 HeightIDWflatPolar.wrap: False
    test 1100 HeightIDWflatPolar: 2.370266641
    test 1101 HeightIDWflatPolar(float): <class 'float'>
    test 1102 HeightIDWflatPolar(latlon): True
    test 1103 HeightIDWflatPolar(tuple): <class 'tuple'>
    test 1104 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 1105 HeightIDWflatPolar(tuple-float): <class 'float'>
    test 1106 HeightIDWflatPolar(list): <class 'list'>
    test 1107 HeightIDWflatPolar(list-float): <class 'float'>
    test 1108 HeightIDWflatPolar(list-float): <class 'float'>
    test 1109 HeightIDWflatPolar(latlon): True
    test 1110 copy(HeightIDWhaversine): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 1111 HeightIDWhaversine.copy(): (<class 'pygeodesy.heights.HeightIDWhaversine'>, True)
    test 1112 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1113 HeightIDWhaversine.adjust: None
    test 1114 HeightIDWhaversine.kmin: 2
    test 1115 HeightIDWhaversine.wrap: False
    test 1116 HeightIDWhaversine: 2.402157442
    test 1117 HeightIDWhaversine(float): <class 'float'>
    test 1118 HeightIDWhaversine(latlon): True
    test 1119 HeightIDWhaversine(tuple): <class 'tuple'>
    test 1120 HeightIDWhaversine(tuple-float): <class 'float'>
    test 1121 HeightIDWhaversine(tuple-float): <class 'float'>
    test 1122 HeightIDWhaversine(list): <class 'list'>
    test 1123 HeightIDWhaversine(list-float): <class 'float'>
    test 1124 HeightIDWhaversine(list-float): <class 'float'>
    test 1125 HeightIDWhaversine(latlon): True
    test 1126 copy(HeightIDWhubeny): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 1127 HeightIDWhubeny.copy(): (<class 'pygeodesy.heights.HeightIDWhubeny'>, True)
    test 1128 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1129 HeightIDWhubeny.adjust: None
    test 1130 HeightIDWhubeny.kmin: 2
    test 1131 HeightIDWhubeny.wrap: False
    test 1132 HeightIDWhubeny: 2.469718302
    test 1133 HeightIDWhubeny(float): <class 'float'>
    test 1134 HeightIDWhubeny(latlon): True
    test 1135 HeightIDWhubeny(tuple): <class 'tuple'>
    test 1136 HeightIDWhubeny(tuple-float): <class 'float'>
    test 1137 HeightIDWhubeny(tuple-float): <class 'float'>
    test 1138 HeightIDWhubeny(list): <class 'list'>
    test 1139 HeightIDWhubeny(list-float): <class 'float'>
    test 1140 HeightIDWhubeny(list-float): <class 'float'>
    test 1141 HeightIDWhubeny(latlon): True
    test 1142 copy(HeightIDWkarney): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 1143 HeightIDWkarney.copy(): (<class 'pygeodesy.heights.HeightIDWkarney'>, True)
    test 1144 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1145 HeightIDWkarney.adjust: None
    test 1146 HeightIDWkarney.kmin: 2
    test 1147 HeightIDWkarney.wrap: False
    test 1148 HeightIDWkarney: 2.402157442
    test 1149 HeightIDWkarney(float): <class 'float'>
    test 1150 HeightIDWkarney(latlon): True
    test 1151 HeightIDWkarney(tuple): <class 'tuple'>
    test 1152 HeightIDWkarney(tuple-float): <class 'float'>
    test 1153 HeightIDWkarney(tuple-float): <class 'float'>
    test 1154 HeightIDWkarney(list): <class 'list'>
    test 1155 HeightIDWkarney(list-float): <class 'float'>
    test 1156 HeightIDWkarney(list-float): <class 'float'>
    test 1157 HeightIDWkarney(latlon): True
    test 1158 copy(HeightIDWthomas): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 1159 HeightIDWthomas.copy(): (<class 'pygeodesy.heights.HeightIDWthomas'>, True)
    test 1160 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1161 HeightIDWthomas.adjust: None
    test 1162 HeightIDWthomas.kmin: 2
    test 1163 HeightIDWthomas.wrap: False
    test 1164 HeightIDWthomas: 2.402157442
    test 1165 HeightIDWthomas(float): <class 'float'>
    test 1166 HeightIDWthomas(latlon): True
    test 1167 HeightIDWthomas(tuple): <class 'tuple'>
    test 1168 HeightIDWthomas(tuple-float): <class 'float'>
    test 1169 HeightIDWthomas(tuple-float): <class 'float'>
    test 1170 HeightIDWthomas(list): <class 'list'>
    test 1171 HeightIDWthomas(list-float): <class 'float'>
    test 1172 HeightIDWthomas(list-float): <class 'float'>
    test 1173 HeightIDWthomas(latlon): True
    test 1174 copy(HeightIDWvincentys): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1175 HeightIDWvincentys.copy(): (<class 'pygeodesy.heights.HeightIDWvincentys'>, True)
    test 1176 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1177 HeightIDWvincentys.adjust: None
    test 1178 HeightIDWvincentys.kmin: 2
    test 1179 HeightIDWvincentys.wrap: False
    test 1180 HeightIDWvincentys: 2.402157442
    test 1181 HeightIDWvincentys(float): <class 'float'>
    test 1182 HeightIDWvincentys(latlon): True
    test 1183 HeightIDWvincentys(tuple): <class 'tuple'>
    test 1184 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1185 HeightIDWvincentys(tuple-float): <class 'float'>
    test 1186 HeightIDWvincentys(list): <class 'list'>
    test 1187 HeightIDWvincentys(list-float): <class 'float'>
    test 1188 HeightIDWvincentys(list-float): <class 'float'>
    test 1189 HeightIDWvincentys(latlon): True
    test 1190 copy(HeightLinear): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 1191 HeightLinear.copy(): (<class 'pygeodesy.heights.HeightLinear'>, True)
    test 1192 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1193 HeightLinear.adjust: None
    test 1194 HeightLinear.kmin: 2
    test 1195 HeightLinear.wrap: None
    test 1196 HeightLinear: 3.000000000
    test 1197 HeightLinear(float): <class 'float'>
    test 1198 HeightLinear(latlon): True
    test 1199 HeightLinear(tuple): <class 'tuple'>
    test 1200 HeightLinear(tuple-float): <class 'float'>
    test 1201 HeightLinear(tuple-float): <class 'float'>
    test 1202 HeightLinear(list): <class 'list'>
    test 1203 HeightLinear(list-float): <class 'float'>
    test 1204 HeightLinear(list-float): <class 'float'>
    test 1205 HeightLinear(latlon): True
    test 1206 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1207 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1208 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1209 HeightLSQBiSpline.adjust: None
    test 1210 HeightLSQBiSpline.kmin: 16
    test 1211 HeightLSQBiSpline.wrap: None
    test 1212 HeightLSQBiSpline: 6.419251669
    test 1213 HeightLSQBiSpline(float): <class 'float'>
    test 1214 HeightLSQBiSpline(latlon): True
    test 1215 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1216 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1217 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1218 HeightLSQBiSpline(list): <class 'list'>
    test 1219 HeightLSQBiSpline(list-float): <class 'float'>
    test 1220 HeightLSQBiSpline(list-float): <class 'float'>
    test 1221 HeightLSQBiSpline(latlon): True
    test 1222 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1223 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1224 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1225 HeightLSQBiSpline.adjust: None
    test 1226 HeightLSQBiSpline.kmin: 16
    test 1227 HeightLSQBiSpline.wrap: None
    test 1228 HeightLSQBiSpline: 6.419251669
    test 1229 HeightLSQBiSpline(float): <class 'float'>
    test 1230 HeightLSQBiSpline(latlon): True
    test 1231 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1232 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1233 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1234 HeightLSQBiSpline(list): <class 'list'>
    test 1235 HeightLSQBiSpline(list-float): <class 'float'>
    test 1236 HeightLSQBiSpline(list-float): <class 'float'>
    test 1237 HeightLSQBiSpline(latlon): True
    test 1238 copy(HeightLSQBiSpline): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1239 HeightLSQBiSpline.copy(): (<class 'pygeodesy.heights.HeightLSQBiSpline'>, True)
    test 1240 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1241 HeightLSQBiSpline.adjust: None
    test 1242 HeightLSQBiSpline.kmin: 16
    test 1243 HeightLSQBiSpline.wrap: None
    test 1244 HeightLSQBiSpline: 6.419251669
    test 1245 HeightLSQBiSpline(float): <class 'float'>
    test 1246 HeightLSQBiSpline(latlon): True
    test 1247 HeightLSQBiSpline(tuple): <class 'tuple'>
    test 1248 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1249 HeightLSQBiSpline(tuple-float): <class 'float'>
    test 1250 HeightLSQBiSpline(list): <class 'list'>
    test 1251 HeightLSQBiSpline(list-float): <class 'float'>
    test 1252 HeightLSQBiSpline(list-float): <class 'float'>
    test 1253 HeightLSQBiSpline(latlon): True
    test 1254 copy(HeightSmoothBiSpline): (<class 'pygeodesy.heights.HeightSmoothBiSpline'>, True)
    test 1255 HeightSmoothBiSpline.copy(): (<class 'pygeodesy.heights.HeightSmoothBiSpline'>, True)
    test 1256 HeightError: llis[0] (9.0): 'float' object has no attribute 'lon'
    test 1257 HeightSmoothBiSpline.adjust: None
    test 1258 HeightSmoothBiSpline.kmin: 16
    test 1259 HeightSmoothBiSpline.wrap: None
    test 1260 HeightSmoothBiSpline: 2.598922541
    test 1261 HeightSmoothBiSpline(float): <class 'float'>
    test 1262 HeightSmoothBiSpline(latlon): True
    test 1263 HeightSmoothBiSpline(tuple): <class 'tuple'>
    test 1264 HeightSmoothBiSpline(tuple-float): <class 'float'>
    test 1265 HeightSmoothBiSpline(tuple-float): <class 'float'>
    test 1266 HeightSmoothBiSpline(list): <class 'list'>
    test 1267 HeightSmoothBiSpline(list-float): <class 'float'>
    test 1268 HeightSmoothBiSpline(list-float): <class 'float'>
    test 1269 HeightSmoothBiSpline(latlon): True

    all 1269 testHeights.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 228.408 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testInterns.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36

    testing testInterns.py 23.03.27 (module pygeodesy.interns 23.04.11) isLazy=3
    test 1 _0_ = '0': True
    test 2 _0_ = '0': 0
    test 3 _0to9_ = '0123456789': True
    test 4 _0to9_ = '0123456789': 0123456789  FAILED, KNOWN, expected 0to9
    test 5 _1_ = '1': True
    test 6 _1_ = '1': 1
    test 7 _2_ = '2': True
    test 8 _2_ = '2': 2
    test 9 _3_ = '3': True
    test 10 _3_ = '3': 3
    test 11 _4_ = '4': True
    test 12 _4_ = '4': 4
    test 13 __all__ = ('NN', 'Str_', 'machine'): False  FAILED, KNOWN, expected True
    test 14 __builtins__ = {'__name__': 'builtins', ....) for help about object.}: False  FAILED, KNOWN, expected True
    test 15 __cached__ = './pygeodesy/__pycache__/interns.cpython-310.pyc': True
    test 16 __doc__ = "Single C{str}ing constan.... L{pygeodesy.machine}.\n": True
    test 17 __file__ = './pygeodesy/interns.py': True
    test 18 __loader__ = <_frozen_importlib_extern....er object at 0x105b4eaa0>: False  FAILED, KNOWN, expected True
    test 19 __name__ = 'pygeodesy.interns': True
    test 20 __package__ = 'pygeodesy': True
    test 21 __spec__ = ModuleSpec(name='pygeodes....'./pygeodesy/interns.py'): False  FAILED, KNOWN, expected True
    test 22 __version__ = '23.04.11': True
    test 23 _a12_ = 'a12': True
    test 24 _a12_ = 'a12': a12
    test 25 _A_ = 'A': True
    test 26 _A_ = 'A': a
    test 27 _a_ = 'a': True
    test 28 _a_ = 'a': a
    test 29 _Airy1830_ = 'Airy1830': True
    test 30 _Airy1830_ = 'Airy1830': airy1830
    test 31 _AiryModified_ = 'AiryModified': True
    test 32 _AiryModified_ = 'AiryModified': airymodified
    test 33 _ambiguous_ = 'ambiguous': True
    test 34 _ambiguous_ = 'ambiguous': ambiguous
    test 35 _AMPERSAND_ = '&': True
    test 36 _AMPERSAND_ = '&': &  FAILED, KNOWN, expected ampersand
    test 37 _an_ = 'an': True
    test 38 _an_ = 'an': an
    test 39 _and_ = 'and': True
    test 40 _and_ = 'and': and
    test 41 _angle_ = 'angle': True
    test 42 _angle_ = 'angle': angle
    test 43 _antipodal_ = 'antipodal': True
    test 44 _antipodal_ = 'antipodal': antipodal
    test 45 _area_ = 'area': True
    test 46 _area_ = 'area': area
    test 47 _areaOf_ = 'areaOf': True
    test 48 _areaOf_ = 'areaOf': areaof
    test 49 _arg_ = 'arg': True
    test 50 _arg_ = 'arg': arg
    test 51 _AT_ = '@': True
    test 52 _AT_ = '@': @  FAILED, KNOWN, expected at
    test 53 _at_ = 'at': True
    test 54 _at_ = 'at': at
    test 55 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': True
    test 56 _AtoZnoIO_ = 'ABCDEFGHJKLMNPQRSTUVWXYZ': abcdefghjklmnpqrstuvwxyz  FAILED, KNOWN, expected atoznoio
    test 57 _attribute_ = 'attribute': True
    test 58 _attribute_ = 'attribute': attribute
    test 59 _azi12_ = 'azi12': True
    test 60 _azi12_ = 'azi12': azi12
    test 61 _azi1_ = 'azi1': True
    test 62 _azi1_ = 'azi1': azi1
    test 63 _azi2_ = 'azi2': True
    test 64 _azi2_ = 'azi2': azi2
    test 65 _azimuth_ = 'azimuth': True
    test 66 _azimuth_ = 'azimuth': azimuth
    test 67 _B_ = 'B': True
    test 68 _B_ = 'B': b
    test 69 _b_ = 'b': True
    test 70 _b_ = 'b': b
    test 71 _BACKSLASH_ = '\\': True
    test 72 _BACKSLASH_ = '\\': \  FAILED, KNOWN, expected backslash
    test 73 _band_ = 'band': True
    test 74 _band_ = 'band': band
    test 75 _BANG_ = '!': True
    test 76 _BANG_ = '!': !  FAILED, KNOWN, expected bang
    test 77 _BAR_ = '|': True
    test 78 _BAR_ = '|': |  FAILED, KNOWN, expected bar
    test 79 _bearing_ = 'bearing': True
    test 80 _bearing_ = 'bearing': bearing
    test 81 _Bessel1841_ = 'Bessel1841': True
    test 82 _Bessel1841_ = 'Bessel1841': bessel1841
    test 83 _beta_ = 'beta': True
    test 84 _beta_ = 'beta': beta
    test 85 _by_ = 'by': True
    test 86 _by_ = 'by': by
    test 87 _C_ = 'C': True
    test 88 _C_ = 'C': c
    test 89 _c_ = 'c': True
    test 90 _c_ = 'c': c
    test 91 _cartesian_ = 'cartesian': True
    test 92 _cartesian_ = 'cartesian': cartesian
    test 93 _center_ = 'center': True
    test 94 _center_ = 'center': center
    test 95 _Clarke1866_ = 'Clarke1866': True
    test 96 _Clarke1866_ = 'Clarke1866': clarke1866
    test 97 _Clarke1880IGN_ = 'Clarke1880IGN': True
    test 98 _Clarke1880IGN_ = 'Clarke1880IGN': clarke1880ign
    test 99 _clip_ = 'clip': True
    test 100 _clip_ = 'clip': clip
    test 101 _clipid_ = 'clipid': True
    test 102 _clipid_ = 'clipid': clipid
    test 103 _coincident_ = 'coincident': True
    test 104 _coincident_ = 'coincident': coincident
    test 105 _colinear_ = 'colinear': True
    test 106 _colinear_ = 'colinear': colinear
    test 107 _COLON_ = ':': True
    test 108 _COLON_ = ':': :  FAILED, KNOWN, expected colon
    test 109 _COLONSPACE_ = ': ': True
    test 110 _COLONSPACE_ = ': ': :   FAILED, KNOWN, expected colonspace
    test 111 _COMMA_ = ',': True
    test 112 _COMMA_ = ',': ,  FAILED, KNOWN, expected comma
    test 113 _COMMASPACE_ = ', ': True
    test 114 _COMMASPACE_ = ', ': ,   FAILED, KNOWN, expected commaspace
    test 115 _composite_ = 'composite': True
    test 116 _composite_ = 'composite': composite
    test 117 _concentric_ = 'concentric': True
    test 118 _concentric_ = 'concentric': concentric
    test 119 _convergence_ = 'convergence': True
    test 120 _convergence_ = 'convergence': convergence
    test 121 _conversion_ = 'conversion': True
    test 122 _conversion_ = 'conversion': conversion
    test 123 _convex_ = 'convex': True
    test 124 _convex_ = 'convex': convex
    test 125 _cubic_ = 'cubic': True
    test 126 _cubic_ = 'cubic': cubic
    test 127 _D_ = 'D': True
    test 128 _D_ = 'D': d
    test 129 _d_ = 'd': True
    test 130 _d_ = 'd': d
    test 131 _DASH_ = '-': True
    test 132 _DASH_ = '-': -  FAILED, KNOWN, expected dash
    test 133 _datum_ = 'datum': True
    test 134 _datum_ = 'datum': datum
    test 135 _DDOT_ = '..': True
    test 136 _DDOT_ = '..': ..  FAILED, KNOWN, expected ddot
    test 137 _decode3_ = 'decode3': True
    test 138 _decode3_ = 'decode3': decode3
    test 139 _deg_ = 'deg': True
    test 140 _deg_ = 'deg': deg
    test 141 _degrees2_ = 'degrees2': True
    test 142 _degrees2_ = 'degrees2': degrees2
    test 143 _degrees_ = 'degrees': True
    test 144 _degrees_ = 'degrees': degrees
    test 145 _DEPRECATED_ = 'DEPRECATED': True
    test 146 _DEPRECATED_ = 'DEPRECATED': deprecated
    test 147 _DEQUALSPACED_ = ' == ': True
    test 148 _DEQUALSPACED_ = ' == ':  ==   FAILED, KNOWN, expected dequalspaced
    test 149 _distance_ = 'distance': True
    test 150 _distance_ = 'distance': distance
    test 151 _distanceTo_ = 'distanceTo': True
    test 152 _distanceTo_ = 'distanceTo': distanceto
    test 153 _distant_ = 'distant': True
    test 154 _distant_ = 'distant': distant
    test 155 _DNL_ = '\n\n': True
    test 156 _DNL_ = '\n\n': 

  FAILED, KNOWN, expected dnl
    test 157 _doesn_t_exist_ = "doesn't exist": True
    test 158 _doesn_t_exist_ = "doesn't exist": doesn't exist  FAILED, KNOWN, expected doesn_t_exist
    test 159 _DOT_ = '.': True
    test 160 _DOT_ = '.': .  FAILED, KNOWN, expected dot
    test 161 _down_ = 'down': True
    test 162 _down_ = 'down': down
    test 163 _DUNDER_ = '__': True
    test 164 _DUNDER_ = '__': __  FAILED, KNOWN, expected dunder
    test 165 _E_ = 'E': True
    test 166 _E_ = 'E': e
    test 167 _e_ = 'e': True
    test 168 _e_ = 'e': e
    test 169 _east_ = 'east': True
    test 170 _east_ = 'east': east
    test 171 _easting_ = 'easting': True
    test 172 _easting_ = 'easting': easting
    test 173 _ecef_ = 'ecef': True
    test 174 _ecef_ = 'ecef': ecef
    test 175 _edge_ = 'edge': True
    test 176 _edge_ = 'edge': edge
    test 177 _elevation_ = 'elevation': True
    test 178 _elevation_ = 'elevation': elevation
    test 179 _ELLIPSIS4_ = '....': True
    test 180 _ELLIPSIS4_ = '....': ....  FAILED, KNOWN, expected ellipsis4
    test 181 _ELLIPSIS_ = '...': True
    test 182 _ELLIPSIS_ = '...': ...  FAILED, KNOWN, expected ellipsis
    test 183 _ellipsoid_ = 'ellipsoid': True
    test 184 _ellipsoid_ = 'ellipsoid': ellipsoid
    test 185 _ellipsoidal_ = 'ellipsoidal': True
    test 186 _ellipsoidal_ = 'ellipsoidal': ellipsoidal
    test 187 _enabled_ = 'enabled': True
    test 188 _enabled_ = 'enabled': enabled
    test 189 _encode_ = 'encode': True
    test 190 _encode_ = 'encode': encode
    test 191 _end_ = 'end': True
    test 192 _end_ = 'end': end
    test 193 _epoch_ = 'epoch': True
    test 194 _epoch_ = 'epoch': epoch
    test 195 _EQUAL_ = '=': True
    test 196 _EQUAL_ = '=': =  FAILED, KNOWN, expected equal
    test 197 _EQUALSPACED_ = ' = ': True
    test 198 _EQUALSPACED_ = ' = ':  =   FAILED, KNOWN, expected equalspaced
    test 199 _Error_ = 'Error': True
    test 200 _Error_ = 'Error': error
    test 201 _EW_ = 'EW': True
    test 202 _EW_ = 'EW': ew
    test 203 _exceed_PI_radians_ = 'exceed PI radians': True
    test 204 _exceed_PI_radians_ = 'exceed PI radians': exceed pi radians  FAILED, KNOWN, expected exceed_pi_radians
    test 205 _exceeds_ = 'exceeds': True
    test 206 _exceeds_ = 'exceeds': exceeds
    test 207 _exists_ = 'exists': True
    test 208 _exists_ = 'exists': exists
    test 209 _F_ = 'F': True
    test 210 _F_ = 'F': f
    test 211 _f_ = 'f': True
    test 212 _f_ = 'f': f
    test 213 _feet_ = 'feet': True
    test 214 _feet_ = 'feet': feet
    test 215 _few_ = 'few': True
    test 216 _few_ = 'few': few
    test 217 _fi_ = 'fi': True
    test 218 _fi_ = 'fi': fi
    test 219 _finite_ = 'finite': True
    test 220 _finite_ = 'finite': finite
    test 221 _from_ = 'from': True
    test 222 _from_ = 'from': from
    test 223 _g_ = 'g': True
    test 224 _g_ = 'g': g
    test 225 _gamma_ = 'gamma': True
    test 226 _gamma_ = 'gamma': gamma
    test 227 _GRS80_ = 'GRS80': True
    test 228 _GRS80_ = 'GRS80': grs80
    test 229 _H_ = 'H': True
    test 230 _H_ = 'H': h
    test 231 _h_ = 'h': True
    test 232 _h_ = 'h': h
    test 233 _height_ = 'height': True
    test 234 _height_ = 'height': height
    test 235 _hemipole_ = 'hemipole': True
    test 236 _hemipole_ = 'hemipole': hemipole
    test 237 _i_ = 'i': True
    test 238 _i_ = 'i': i
    test 239 _iadd_ = '+=': True
    test 240 _iadd_ = '+=': +=  FAILED, KNOWN, expected iadd
    test 241 _immutable_ = 'immutable': True
    test 242 _immutable_ = 'immutable': immutable
    test 243 _in_ = 'in': True
    test 244 _in_ = 'in': in
    test 245 _incompatible_ = 'incompatible': True
    test 246 _incompatible_ = 'incompatible': incompatible
    test 247 _INF_ = 'INF': True
    test 248 _INF_ = 'INF': inf
    test 249 _infinite_ = 'infinite': True
    test 250 _infinite_ = 'infinite': infinite
    test 251 _initial_ = 'initial': True
    test 252 _initial_ = 'initial': initial
    test 253 _inside_ = 'inside': True
    test 254 _inside_ = 'inside': inside
    test 255 _intersection_ = 'intersection': True
    test 256 _intersection_ = 'intersection': intersection
    test 257 _Intl1924_ = 'Intl1924': True
    test 258 _Intl1924_ = 'Intl1924': intl1924
    test 259 _invalid_ = 'invalid': True
    test 260 _invalid_ = 'invalid': invalid
    test 261 _isclockwise_ = 'isclockwise': True
    test 262 _isclockwise_ = 'isclockwise': isclockwise
    test 263 _ispolar_ = 'ispolar': True
    test 264 _ispolar_ = 'ispolar': ispolar
    test 265 _j_ = 'j': True
    test 266 _j_ = 'j': j
    test 267 _k0_ = 'k0': True
    test 268 _k0_ = 'k0': k0
    test 269 _kind_ = 'kind': True
    test 270 _kind_ = 'kind': kind
    test 271 _knots_ = 'knots': True
    test 272 _knots_ = 'knots': knots
    test 273 _Krassovski1940_ = 'Krassovski1940': True
    test 274 _Krassovski1940_ = 'Krassovski1940': krassovski1940
    test 275 _Krassowsky1940_ = 'Krassowsky1940': True
    test 276 _Krassowsky1940_ = 'Krassowsky1940': krassowsky1940
    test 277 _lam_ = 'lam': True
    test 278 _lam_ = 'lam': lam
    test 279 _LANGLE_ = '<': True
    test 280 _LANGLE_ = '<': <  FAILED, KNOWN, expected langle
    test 281 _lat0_ = 'lat0': True
    test 282 _lat0_ = 'lat0': lat0
    test 283 _lat1_ = 'lat1': True
    test 284 _lat1_ = 'lat1': lat1
    test 285 _lat2_ = 'lat2': True
    test 286 _lat2_ = 'lat2': lat2
    test 287 _lat_ = 'lat': True
    test 288 _lat_ = 'lat': lat
    test 289 _LatLon_ = 'LatLon': True
    test 290 _LatLon_ = 'LatLon': latlon
    test 291 _latlon_ = 'latlon': True
    test 292 _latlon_ = 'latlon': latlon
    test 293 _LCURLY_ = '{': True
    test 294 _LCURLY_ = '{': {  FAILED, KNOWN, expected lcurly
    test 295 _len_ = 'len': True
    test 296 _len_ = 'len': len
    test 297 _line_ = 'line': True
    test 298 _line_ = 'line': line
    test 299 _linear_ = 'linear': True
    test 300 _linear_ = 'linear': linear
    test 301 _lon0_ = 'lon0': True
    test 302 _lon0_ = 'lon0': lon0
    test 303 _lon1_ = 'lon1': True
    test 304 _lon1_ = 'lon1': lon1
    test 305 _lon2_ = 'lon2': True
    test 306 _lon2_ = 'lon2': lon2
    test 307 _lon_ = 'lon': True
    test 308 _lon_ = 'lon': lon
    test 309 _LPAREN_ = '(': True
    test 310 _LPAREN_ = '(': (  FAILED, KNOWN, expected lparen
    test 311 _LSQUARE_ = '[': True
    test 312 _LSQUARE_ = '[': [  FAILED, KNOWN, expected lsquare
    test 313 _ltp_ = 'ltp': True
    test 314 _ltp_ = 'ltp': ltp
    test 315 _M12_ = 'M12': True
    test 316 _M12_ = 'M12': m12
    test 317 _m12_ = 'm12': True
    test 318 _m12_ = 'm12': m12
    test 319 _M21_ = 'M21': True
    test 320 _M21_ = 'M21': m21
    test 321 _M_ = 'M': True
    test 322 _M_ = 'M': m
    test 323 _m_ = 'm': True
    test 324 _m_ = 'm': m
    test 325 _MANT_DIG_ = 'MANT_DIG': True
    test 326 _MANT_DIG_ = 'MANT_DIG': mant_dig
    test 327 _MAX_ = 'MAX': True
    test 328 _MAX_ = 'MAX': max
    test 329 _mean_ = 'mean': True
    test 330 _mean_ = 'mean': mean
    test 331 _meanOf_ = 'meanOf': True
    test 332 _meanOf_ = 'meanOf': meanof
    test 333 _meridional_ = 'meridional': True
    test 334 _meridional_ = 'meridional': meridional
    test 335 _meter2_ = 'meter2': True
    test 336 _meter2_ = 'meter2': meter2
    test 337 _meter_ = 'meter': True
    test 338 _meter_ = 'meter': meter
    test 339 _MGRS_ = 'MGRS': True
    test 340 _MGRS_ = 'MGRS': mgrs
    test 341 _MIN_ = 'MIN': True
    test 342 _MIN_ = 'MIN': min
    test 343 _MINUS_ = '-': True
    test 344 _MINUS_ = '-': -  FAILED, KNOWN, expected minus
    test 345 _module_ = 'module': True
    test 346 _module_ = 'module': module
    test 347 _N_ = 'N': True
    test 348 _N_ = 'N': n
    test 349 _n_ = 'n': True
    test 350 _n_ = 'n': n
    test 351 _N_A_ = 'N/A': True
    test 352 _N_A_ = 'N/A': n/a  FAILED, KNOWN, expected n_a
    test 353 _n_a_ = 'n/a': True
    test 354 _n_a_ = 'n/a': n/a  FAILED, KNOWN, expected n_a
    test 355 _NAD27_ = 'NAD27': True
    test 356 _NAD27_ = 'NAD27': nad27
    test 357 _NAD83_ = 'NAD83': True
    test 358 _NAD83_ = 'NAD83': nad83
    test 359 _name_ = 'name': True
    test 360 _name_ = 'name': name
    test 361 _NAN_ = 'NAN': True
    test 362 _NAN_ = 'NAN': nan
    test 363 _NE_ = 'NE': True
    test 364 _NE_ = 'NE': ne
    test 365 _near_ = 'near': True
    test 366 _near_ = 'near': near
    test 367 _nearestOn2_ = 'nearestOn2': True
    test 368 _nearestOn2_ = 'nearestOn2': neareston2
    test 369 _negative_ = 'negative': True
    test 370 _negative_ = 'negative': negative
    test 371 _NL_ = '\n': True
    test 372 _NL_ = '\n': 
  FAILED, KNOWN, expected nl
    test 373 _NLATvar_ = '\n@var ': True
    test 374 _NLATvar_ = '\n@var ': 
@var   FAILED, KNOWN, expected nlatvar
    test 375 _NLHASH_ = '\n# ': True
    test 376 _NLHASH_ = '\n# ': 
#   FAILED, KNOWN, expected nlhash
    test 377 _NN_ = 'NN': True
    test 378 _NN_ = 'NN': nn
    test 379 _no_ = 'no': True
    test 380 _no_ = 'no': no
    test 381 _north_ = 'north': True
    test 382 _north_ = 'north': north
    test 383 _northing_ = 'northing': True
    test 384 _northing_ = 'northing': northing
    test 385 _NorthPole_ = 'NorthPole': True
    test 386 _NorthPole_ = 'NorthPole': northpole
    test 387 _not_ = 'not': True
    test 388 _not_ = 'not': not
    test 389 _not_finite_ = 'not finite': True
    test 390 _not_finite_ = 'not finite': not finite  FAILED, KNOWN, expected not_finite
    test 391 _not_scalar_ = 'not scalar': True
    test 392 _not_scalar_ = 'not scalar': not scalar  FAILED, KNOWN, expected not_scalar
    test 393 _NOTEQUAL_ = '!=': True
    test 394 _NOTEQUAL_ = '!=': !=  FAILED, KNOWN, expected notequal
    test 395 _NS_ = 'NS': True
    test 396 _NS_ = 'NS': ns
    test 397 _NSEW_ = 'NSEW': True
    test 398 _NSEW_ = 'NSEW': nsew
    test 399 _NTF_ = 'NTF': True
    test 400 _NTF_ = 'NTF': ntf
    test 401 _null_ = 'null': True
    test 402 _null_ = 'null': null
    test 403 _number_ = 'number': True
    test 404 _number_ = 'number': number
    test 405 _numpy_ = 'numpy': True
    test 406 _numpy_ = 'numpy': numpy
    test 407 _Nv00_ = 'Nv00': True
    test 408 _Nv00_ = 'Nv00': nv00
    test 409 _NW_ = 'NW': True
    test 410 _NW_ = 'NW': nw
    test 411 _on_ = 'on': True
    test 412 _on_ = 'on': on
    test 413 _opposite_ = 'opposite': True
    test 414 _opposite_ = 'opposite': opposite
    test 415 _or_ = 'or': True
    test 416 _or_ = 'or': or
    test 417 _other_ = 'other': True
    test 418 _other_ = 'other': other
    test 419 _outside_ = 'outside': True
    test 420 _outside_ = 'outside': outside
    test 421 _overlap_ = 'overlap': True
    test 422 _overlap_ = 'overlap': overlap
    test 423 _PERCENT_ = '%': True
    test 424 _PERCENT_ = '%': %  FAILED, KNOWN, expected percent
    test 425 _PERCENTDOTSTAR_ = '%.*': True
    test 426 _PERCENTDOTSTAR_ = '%.*': %.*  FAILED, KNOWN, expected percentdotstar
    test 427 _phi_ = 'phi': True
    test 428 _phi_ = 'phi': phi
    test 429 _platform2 = <function _platform2 at 0x105b78e50>: True
    test 430 _PLUS_ = '+': True
    test 431 _PLUS_ = '+': +  FAILED, KNOWN, expected plus
    test 432 _PLUSMINUS_ = '+-': True
    test 433 _PLUSMINUS_ = '+-': +-  FAILED, KNOWN, expected plusminus
    test 434 _point_ = 'point': True
    test 435 _point_ = 'point': point
    test 436 _points_ = 'points': True
    test 437 _points_ = 'points': points
    test 438 _pole_ = 'pole': True
    test 439 _pole_ = 'pole': pole
    test 440 _precision_ = 'precision': True
    test 441 _precision_ = 'precision': precision
    test 442 _prime_vertical_ = 'prime_vertical': True
    test 443 _prime_vertical_ = 'prime_vertical': prime_vertical
    test 444 _pygeodesy_abspath_ = 'pygeodesy_abspath': True
    test 445 _pygeodesy_abspath_ = 'pygeodesy_abspath': pygeodesy_abspath
    test 446 _PyPy__ = 'PyPy ': True
    test 447 _PyPy__ = 'PyPy ': pypy   FAILED, KNOWN, expected pypy
    test 448 _Python_ = 'Python': True
    test 449 _Python_ = 'Python': python
    test 450 _python_ = 'python': True
    test 451 _python_ = 'python': python
    test 452 _QUOTE1_ = "'": True
    test 453 _QUOTE1_ = "'": '  FAILED, KNOWN, expected quote1
    test 454 _QUOTE2_ = '"': True
    test 455 _QUOTE2_ = '"': "  FAILED, KNOWN, expected quote2
    test 456 _R_ = 'R': True
    test 457 _R_ = 'R': r
    test 458 _radians2_ = 'radians2': True
    test 459 _radians2_ = 'radians2': radians2
    test 460 _radians_ = 'radians': True
    test 461 _radians_ = 'radians': radians
    test 462 _radius1_ = 'radius1': True
    test 463 _radius1_ = 'radius1': radius1
    test 464 _radius2_ = 'radius2': True
    test 465 _radius2_ = 'radius2': radius2
    test 466 _radius_ = 'radius': True
    test 467 _radius_ = 'radius': radius
    test 468 _range_ = 'range': True
    test 469 _range_ = 'range': range
    test 470 _RANGLE_ = '>': True
    test 471 _RANGLE_ = '>': >  FAILED, KNOWN, expected rangle
    test 472 _RCURLY_ = '}': True
    test 473 _RCURLY_ = '}': }  FAILED, KNOWN, expected rcurly
    test 474 _reciprocal_ = 'reciprocal': True
    test 475 _reciprocal_ = 'reciprocal': reciprocal
    test 476 _reframe_ = 'reframe': True
    test 477 _reframe_ = 'reframe': reframe
    test 478 _resolution_ = 'resolution': True
    test 479 _resolution_ = 'resolution': resolution
    test 480 _rIn_ = 'rIn': True
    test 481 _rIn_ = 'rIn': rin
    test 482 _RPAREN_ = ')': True
    test 483 _RPAREN_ = ')': )  FAILED, KNOWN, expected rparen
    test 484 _RSQUARE_ = ']': True
    test 485 _RSQUARE_ = ']': ]  FAILED, KNOWN, expected rsquare
    test 486 _S12_ = 'S12': True
    test 487 _S12_ = 'S12': s12
    test 488 _s12_ = 's12': True
    test 489 _s12_ = 's12': s12
    test 490 _S_ = 'S': True
    test 491 _S_ = 'S': s
    test 492 _s_ = 's': True
    test 493 _s_ = 's': s
    test 494 _scalar_ = 'scalar': True
    test 495 _scalar_ = 'scalar': scalar
    test 496 _scale0_ = 'scale0': True
    test 497 _scale0_ = 'scale0': scale0
    test 498 _scale_ = 'scale': True
    test 499 _scale_ = 'scale': scale
    test 500 _scipy_ = 'scipy': True
    test 501 _scipy_ = 'scipy': scipy
    test 502 _SE_ = 'SE': True
    test 503 _SE_ = 'SE': se
    test 504 _semi_circular_ = 'semi-circular': True
    test 505 _semi_circular_ = 'semi-circular': semi-circular  FAILED, KNOWN, expected semi_circular
    test 506 _sep_ = 'sep': True
    test 507 _sep_ = 'sep': sep
    test 508 _sets_ = 'sets': True
    test 509 _sets_ = 'sets': sets
    test 510 _singular_ = 'singular': True
    test 511 _singular_ = 'singular': singular
    test 512 _SLASH_ = '/': True
    test 513 _SLASH_ = '/': /  FAILED, KNOWN, expected slash
    test 514 _small_ = 'small': True
    test 515 _small_ = 'small': small
    test 516 _SouthPole_ = 'SouthPole': True
    test 517 _SouthPole_ = 'SouthPole': southpole
    test 518 _SPACE_ = ' ': True
    test 519 _SPACE_ = ' ':    FAILED, KNOWN, expected space
    test 520 _specified_ = 'specified': True
    test 521 _specified_ = 'specified': specified
    test 522 _Sphere_ = 'Sphere': True
    test 523 _Sphere_ = 'Sphere': sphere
    test 524 _spherical_ = 'spherical': True
    test 525 _spherical_ = 'spherical': spherical
    test 526 _STAR_ = '*': True
    test 527 _STAR_ = '*': *  FAILED, KNOWN, expected star
    test 528 _start_ = 'start': True
    test 529 _start_ = 'start': start
    test 530 _std_ = 'std': True
    test 531 _std_ = 'std': std
    test 532 _stdev_ = 'stdev': True
    test 533 _stdev_ = 'stdev': stdev
    test 534 _supported_ = 'supported': True
    test 535 _supported_ = 'supported': supported
    test 536 _SW_ = 'SW': True
    test 537 _SW_ = 'SW': sw
    test 538 _sx_ = 'sx': True
    test 539 _sx_ = 'sx': sx
    test 540 _sy_ = 'sy': True
    test 541 _sy_ = 'sy': sy
    test 542 _sz_ = 'sz': True
    test 543 _sz_ = 'sz': sz
    test 544 _tbd_ = 'tbd': True
    test 545 _tbd_ = 'tbd': tbd
    test 546 _TILDE_ = '~': True
    test 547 _TILDE_ = '~': ~  FAILED, KNOWN, expected tilde
    test 548 _till_ = 'till': True
    test 549 _till_ = 'till': till
    test 550 _to_ = 'to': True
    test 551 _to_ = 'to': to
    test 552 _tolerance_ = 'tolerance': True
    test 553 _tolerance_ = 'tolerance': tolerance
    test 554 _too_ = 'too': True
    test 555 _too_ = 'too': too
    test 556 _transform_ = 'transform': True
    test 557 _transform_ = 'transform': transform
    test 558 _tx_ = 'tx': True
    test 559 _tx_ = 'tx': tx
    test 560 _ty_ = 'ty': True
    test 561 _ty_ = 'ty': ty
    test 562 _tz_ = 'tz': True
    test 563 _tz_ = 'tz': tz
    test 564 _UNDER_ = '_': True
    test 565 _UNDER_ = '_': _  FAILED, KNOWN, expected under
    test 566 _units_ = 'units': True
    test 567 _units_ = 'units': units
    test 568 _up_ = 'up': True
    test 569 _up_ = 'up': up
    test 570 _UPS_ = 'UPS': True
    test 571 _UPS_ = 'UPS': ups
    test 572 _utf_8_ = 'utf-8': True
    test 573 _utf_8_ = 'utf-8': utf-8  FAILED, KNOWN, expected utf_8
    test 574 _UTM_ = 'UTM': True
    test 575 _UTM_ = 'UTM': utm
    test 576 _V_ = 'V': True
    test 577 _V_ = 'V': v
    test 578 _valid_ = 'valid': True
    test 579 _valid_ = 'valid': valid
    test 580 _value_ = 'value': True
    test 581 _value_ = 'value': value
    test 582 _version2 = <function _version2 at 0x105b79120>: True
    test 583 _version_ = 'version': True
    test 584 _version_ = 'version': version
    test 585 _vs_ = 'vs': True
    test 586 _vs_ = 'vs': vs
    test 587 _W_ = 'W': True
    test 588 _W_ = 'W': w
    test 589 _WGS72_ = 'WGS72': True
    test 590 _WGS72_ = 'WGS72': wgs72
    test 591 _WGS84_ = 'WGS84': True
    test 592 _WGS84_ = 'WGS84': wgs84
    test 593 _width_ = 'width': True
    test 594 _width_ = 'width': width
    test 595 _with_ = 'with': True
    test 596 _with_ = 'with': with
    test 597 _X_ = 'X': True
    test 598 _X_ = 'X': x
    test 599 _x_ = 'x': True
    test 600 _x_ = 'x': x
    test 601 _xyz_ = 'xyz': True
    test 602 _xyz_ = 'xyz': xyz
    test 603 _Y_ = 'Y': True
    test 604 _Y_ = 'Y': y
    test 605 _y_ = 'y': True
    test 606 _y_ = 'y': y
    test 607 _Z_ = 'Z': True
    test 608 _Z_ = 'Z': z
    test 609 _z_ = 'z': True
    test 610 _z_ = 'z': z
    test 611 _zone_ = 'zone': True
    test 612 _zone_ = 'zone': zone
    test 613 .tillC: ABC
    test 614 .fromX: XYZ
    test 615 .fromH.tillJ: HJ
    test 616 .fromN.tillP: NP

    59 of 616 testInterns.py tests (9.6%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 3.951 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testIters.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.PointsError from .errors by testIters.py line 11
# lazily imported pygeodesy.PointsIter from .iters by testIters.py line 11

    testing testIters.py 23.03.27 (module pygeodesy.iters 23.03.30) isLazy=3
    test 1 i : 7
    test 2 dedup: False
    test 3 i : 0
    test 4 p0: True
    test 5 dedup: True
    test 6 copies: [0, 1, 2, 3, 4, 5, 6, 7]
    test 7 i : 0
    test 8 copies: 9
    test 9 p0: True
    test 10 copies: True
    test 11 copies: (0, 1, 2, 3, 4, 5, 6, 7)
    test 12 iter: 1
    test 13 iter: 2
    test 14 iter: 3
    test 15 re-iter: PointsError('points (0): too few')

    all 15 testIters.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.979 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testKarney.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.karney by testKarney.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testKarney.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testKarney.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testKarney.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testKarney.py line 192
# lazily imported pygeodesy.geodesicw by testKarney.py line 192
# lazily imported pygeodesy.geodesicx by testKarney.py line 192

    testing testKarney.py 23.04.08 (module pygeodesy.karney 23.04.07) isLazy=3
# lazily imported pygeodesy.ellipsoidalKarney by testKarney.py line 197
    test 1 Geodesic: True

    testDirect(pygeodesy.geodesicw, 23.04.11)
    test 2 Direct.lat2: -11.174909999999993  FAILED, KNOWN, expected -11.174910000000001
    test 3 Direct.lon2: -69.959210000000027  FAILED, KNOWN, expected -69.959209999999999
    test 4 Direct.azi2: 129.289270889708774
    test 5 Direct.a12: 80.507297142819738
    test 6 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 7 Direct.M12: 0.166063184473861
    test 8 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 9 Direct.S12: 12841384694976.431640625000000
    test 10 Direct.lat2: 77.031959999999998
    test 11 Direct.lon2: 197.182340000000011
    test 12 Direct.azi2: 109.112041110671512
    test 13 Direct.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 14 Direct.m12: 3828869.334438760299236  FAILED, KNOWN, expected 3828869.334438760764897
    test 15 Direct.M12: 0.800763496080926
    test 16 Direct.M21: 0.801010069842010
    test 17 Direct.S12: 61674961290615.609375000000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 18 Direct.lat2: 41.841380000000001
    test 19 Direct.lon2: 98.566350000000014  FAILED, KNOWN, expected 98.566350000000000
    test 20 Direct.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 21 Direct.a12: 75.629304910115223
    test 22 Direct.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 23 Direct.M12: 0.248163392339504
    test 24 Direct.M21: 0.249302512036279
    test 25 Direct.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 26 Direct.lat2: -12.706309999999982  FAILED, KNOWN, expected -12.706310000000000
    test 27 Direct.lon2: 285.903439999999989
    test 28 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 29 Direct.a12: 100.278634181155780  FAILED, KNOWN, expected 100.278634181155752
    test 30 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 31 Direct.M12: -0.171994902747004
    test 32 Direct.M21: -0.177225695263457
    test 33 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 34 Direct.lat2: -15.847839999999977  FAILED, KNOWN, expected -15.847840000000000
    test 35 Direct.lon2: 5.935569999999956  FAILED, KNOWN, expected 5.935570000000000
    test 36 Direct.azi2: -20.787484651536982  FAILED, KNOWN, expected -20.787484651536989
    test 37 Direct.a12: 144.640108810286279  FAILED, KNOWN, expected 144.640108810286250
    test 38 Direct.m12: 3732902.158387716859579  FAILED, KNOWN, expected 3732902.158387718722224
    test 39 Direct.M12: -0.812736387000705
    test 40 Direct.M21: -0.812998005191545
    test 41 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodesicw, 23.04.11)
    test 42 Inverse.lat2: -11.174910000000001
    test 43 Inverse.lon2: -69.959209999999999
    test 44 Inverse.azi1: 111.098748429560331
    test 45 Inverse.azi2: 129.289270889708774
    test 46 Inverse.s12: 8935244.560481829568744
    test 47 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 48 Inverse.m12: 6273170.205530383624136
    test 49 Inverse.M12: 0.166063184473861
    test 50 Inverse.M21: 0.164791169456129
    test 51 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 52 Inverse.lat2: 77.031959999999998
    test 53 Inverse.lon2: 197.182340000000011
    test 54 Inverse.azi1: 22.020059880982803  FAILED, KNOWN, expected 22.020059880982799
    test 55 Inverse.azi2: 109.112041110671541  FAILED, KNOWN, expected 109.112041110671512
    test 56 Inverse.s12: 4105086.171392441727221  FAILED, KNOWN, expected 4105086.171392440795898
    test 57 Inverse.a12: 36.892740690445905  FAILED, KNOWN, expected 36.892740690445891
    test 58 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 59 Inverse.M12: 0.800763496080926
    test 60 Inverse.M21: 0.801010069842010
    test 61 Inverse.S12: 61674961290615.617187500000000
    test 62 Inverse.lat2: 41.841380000000001
    test 63 Inverse.lon2: 98.566350000000000
    test 64 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 65 Inverse.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 66 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 67 Inverse.a12: 75.629304910115223
    test 68 Inverse.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 69 Inverse.M12: 0.248163392339504
    test 70 Inverse.M21: 0.249302512036279
    test 71 Inverse.S12: -6637997720646.717773437500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 72 Inverse.lat2: -12.706310000000000
    test 73 Inverse.lon2: 285.903439999999989
    test 74 Inverse.azi1: 173.734912408784027
    test 75 Inverse.azi2: 2.512956620913672  FAILED, KNOWN, expected 2.512956620913668
    test 76 Inverse.s12: 11150344.231208024546504
    test 77 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 78 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 79 Inverse.M12: -0.171994902747004
    test 80 Inverse.M21: -0.177225695263457
    test 81 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 82 Inverse.lat2: -15.847840000000000
    test 83 Inverse.lon2: 5.935570000000000
    test 84 Inverse.azi1: -159.033557661192930
    test 85 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 86 Inverse.s12: 16076603.163118068128824
    test 87 Inverse.a12: 144.640108810286250
    test 88 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 89 Inverse.M12: -0.812736387000705
    test 90 Inverse.M21: -0.812998005191545
    test 91 Inverse.S12: 97825992354058.703125000000000

    testInverseLine(pygeodesy.geodesicw, 23.04.11)
    test 92 InverseLine[0].lat: 40.640
    test 93 InverseLine[0].lon: -73.779
    test 94 InverseLine[1].lat: 49.825  FAILED, KNOWN, expected 49.829
    test 95 InverseLine[1].lon: -72.962
    test 96 InverseLine[2].lat: 58.992  FAILED, KNOWN, expected 58.994
    test 97 InverseLine[2].lon: -71.759
    test 98 InverseLine[3].lat: 68.132  FAILED, KNOWN, expected 68.127
    test 99 InverseLine[3].lon: -69.677  FAILED, KNOWN, expected -69.678
    test 100 InverseLine[4].lat: 77.203  FAILED, KNOWN, expected 77.190
    test 101 InverseLine[4].lon: -64.830  FAILED, KNOWN, expected -64.842
    test 102 InverseLine[5].lat: 85.794  FAILED, KNOWN, expected 85.774
    test 103 InverseLine[5].lon: -39.425  FAILED, KNOWN, expected -39.628
    test 104 InverseLine[6].lat: 83.690  FAILED, KNOWN, expected 83.724
    test 105 InverseLine[6].lon: 80.754  FAILED, KNOWN, expected 80.619
    test 106 InverseLine[7].lat: 74.828  FAILED, KNOWN, expected 74.875
    test 107 InverseLine[7].lon: 94.774  FAILED, KNOWN, expected 94.743
    test 108 InverseLine[8].lat: 65.730  FAILED, KNOWN, expected 65.786
    test 109 InverseLine[8].lon: 98.489  FAILED, KNOWN, expected 98.474
    test 110 InverseLine[9].lat: 56.582  FAILED, KNOWN, expected 56.643
    test 111 InverseLine[9].lon: 100.254  FAILED, KNOWN, expected 100.246
    test 112 InverseLine[10].lat: 47.409  FAILED, KNOWN, expected 47.471
    test 113 InverseLine[10].lon: 101.327  FAILED, KNOWN, expected 101.321
    test 114 InverseLine[11].lat: 38.220  FAILED, KNOWN, expected 38.277
    test 115 InverseLine[11].lon: 102.079  FAILED, KNOWN, expected 102.075
    test 116 InverseLine[12].lat: 29.017  FAILED, KNOWN, expected 29.066
    test 117 InverseLine[12].lon: 102.662  FAILED, KNOWN, expected 102.659
    test 118 InverseLine[13].lat: 19.804  FAILED, KNOWN, expected 19.839
    test 119 InverseLine[13].lon: 103.148  FAILED, KNOWN, expected 103.147
    test 120 InverseLine[14].lat: 10.584  FAILED, KNOWN, expected 10.602
    test 121 InverseLine[14].lon: 103.581
    test 122 InverseLine[15].lat: 1.359
    test 123 InverseLine[15].lon: 103.989

    testGeodCalc(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 124 area: 13662703680020
    test 125 perimeter: 16831067.892791

    testMask(pygeodesy.geodesicw, 23.04.11)
    test 126 Geodesic.EMPTY: 0
    test 127 Geodesic.LATITUDE: 128
    test 128 Geodesic.LONGITUDE: 264
    test 129 Geodesic.AZIMUTH: 512
    test 130 Geodesic.DISTANCE: 1025
    test 131 Geodesic.STANDARD: 1929
    test 132 Geodesic.DISTANCE_IN: 2051
    test 133 Geodesic.REDUCEDLENGTH: 4101
    test 134 Geodesic.GEODESICSCALE: 8197
    test 135 Geodesic.AREA: 16400
    test 136 Geodesic.ALL: 32671
    test 137 Geodesic.LONG_UNROLL: 32768

    testDirect(pygeodesy.geodesicx, 23.04.04)
    test 138 Direct.lat2: -11.174909999999993  FAILED, KNOWN, expected -11.174910000000001
    test 139 Direct.lon2: -69.959209999999999
    test 140 Direct.azi2: 129.289270889708774
    test 141 Direct.a12: 80.507297142819738
    test 142 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 143 Direct.M12: 0.166063184473861
    test 144 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 145 Direct.S12: 12841384694976.431640625000000
    test 146 Direct.lat2: 77.031959999999998
    test 147 Direct.lon2: 197.182339999999954  FAILED, KNOWN, expected 197.182340000000011
    test 148 Direct.azi2: 109.112041110671470  FAILED, KNOWN, expected 109.112041110671512
    test 149 Direct.a12: 36.892740690445883  FAILED, KNOWN, expected 36.892740690445891
    test 150 Direct.m12: 3828869.334438759367913  FAILED, KNOWN, expected 3828869.334438760764897
    test 151 Direct.M12: 0.800763496080926
    test 152 Direct.M21: 0.801010069842010
    test 153 Direct.S12: 61674961290615.585937500000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 154 Direct.lat2: 41.841380000000001
    test 155 Direct.lon2: 98.566350000000000
    test 156 Direct.azi2: -41.843599514404673  FAILED, KNOWN, expected -41.843599514404659
    test 157 Direct.a12: 75.629304910115238  FAILED, KNOWN, expected 75.629304910115223
    test 158 Direct.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 159 Direct.M12: 0.248163392339504
    test 160 Direct.M21: 0.249302512036279
    test 161 Direct.S12: -6637997720646.717773437500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 162 Direct.lat2: -12.706309999999997  FAILED, KNOWN, expected -12.706310000000000
    test 163 Direct.lon2: 285.903439999999989
    test 164 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 165 Direct.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 166 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 167 Direct.M12: -0.171994902747004
    test 168 Direct.M21: -0.177225695263457
    test 169 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 170 Direct.lat2: -15.847839999999952  FAILED, KNOWN, expected -15.847840000000000
    test 171 Direct.lon2: 5.935569999999984  FAILED, KNOWN, expected 5.935570000000000
    test 172 Direct.azi2: -20.787484651536978  FAILED, KNOWN, expected -20.787484651536989
    test 173 Direct.a12: 144.640108810286307  FAILED, KNOWN, expected 144.640108810286250
    test 174 Direct.m12: 3732902.158387714996934  FAILED, KNOWN, expected 3732902.158387718722224
    test 175 Direct.M12: -0.812736387000705
    test 176 Direct.M21: -0.812998005191545
    test 177 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodesicx, 23.04.04)
    test 178 Inverse.lat2: -11.174910000000001
    test 179 Inverse.lon2: -69.959209999999999
    test 180 Inverse.azi1: 111.098748429560331
    test 181 Inverse.azi2: 129.289270889708774
    test 182 Inverse.s12: 8935244.560481829568744
    test 183 Inverse.a12: 80.507297142819752  FAILED, KNOWN, expected 80.507297142819738
    test 184 Inverse.m12: 6273170.205530383624136
    test 185 Inverse.M12: 0.166063184473861
    test 186 Inverse.M21: 0.164791169456129
    test 187 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 188 Inverse.lat2: 77.031959999999998
    test 189 Inverse.lon2: 197.182340000000011
    test 190 Inverse.azi1: 22.020059880982807  FAILED, KNOWN, expected 22.020059880982799
    test 191 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 192 Inverse.s12: 4105086.171392442658544  FAILED, KNOWN, expected 4105086.171392440795898
    test 193 Inverse.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 194 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 195 Inverse.M12: 0.800763496080926
    test 196 Inverse.M21: 0.801010069842010
    test 197 Inverse.S12: 61674961290615.617187500000000
    test 198 Inverse.lat2: 41.841380000000001
    test 199 Inverse.lon2: 98.566350000000000
    test 200 Inverse.azi1: -32.444568764331898  FAILED, KNOWN, expected -32.444568764331891
    test 201 Inverse.azi2: -41.843599514404666  FAILED, KNOWN, expected -41.843599514404659
    test 202 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 203 Inverse.a12: 75.629304910115223
    test 204 Inverse.m12: 6161154.577311059460044  FAILED, KNOWN, expected 6161154.577311061322689
    test 205 Inverse.M12: 0.248163392339504
    test 206 Inverse.M21: 0.249302512036279
    test 207 Inverse.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 208 Inverse.lat2: -12.706310000000000
    test 209 Inverse.lon2: 285.903439999999989
    test 210 Inverse.azi1: 173.734912408784027
    test 211 Inverse.azi2: 2.512956620913673  FAILED, KNOWN, expected 2.512956620913668
    test 212 Inverse.s12: 11150344.231208024546504
    test 213 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 214 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 215 Inverse.M12: -0.171994902747004
    test 216 Inverse.M21: -0.177225695263457
    test 217 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 218 Inverse.lat2: -15.847840000000000
    test 219 Inverse.lon2: 5.935570000000000
    test 220 Inverse.azi1: -159.033557661192930
    test 221 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 222 Inverse.s12: 16076603.163118060678244  FAILED, KNOWN, expected 16076603.163118068128824
    test 223 Inverse.a12: 144.640108810286250
    test 224 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 225 Inverse.M12: -0.812736387000705
    test 226 Inverse.M21: -0.812998005191545
    test 227 Inverse.S12: 97825992354058.703125000000000

    testInverseLine(pygeodesy.geodesicx, 23.04.04)
    test 228 InverseLine[0].lat: 40.640
    test 229 InverseLine[0].lon: -73.779
    test 230 InverseLine[1].lat: 49.825  FAILED, KNOWN, expected 49.829
    test 231 InverseLine[1].lon: -72.962
    test 232 InverseLine[2].lat: 58.992  FAILED, KNOWN, expected 58.994
    test 233 InverseLine[2].lon: -71.759
    test 234 InverseLine[3].lat: 68.132  FAILED, KNOWN, expected 68.127
    test 235 InverseLine[3].lon: -69.677  FAILED, KNOWN, expected -69.678
    test 236 InverseLine[4].lat: 77.203  FAILED, KNOWN, expected 77.190
    test 237 InverseLine[4].lon: -64.830  FAILED, KNOWN, expected -64.842
    test 238 InverseLine[5].lat: 85.794  FAILED, KNOWN, expected 85.774
    test 239 InverseLine[5].lon: -39.425  FAILED, KNOWN, expected -39.628
    test 240 InverseLine[6].lat: 83.690  FAILED, KNOWN, expected 83.724
    test 241 InverseLine[6].lon: 80.754  FAILED, KNOWN, expected 80.619
    test 242 InverseLine[7].lat: 74.828  FAILED, KNOWN, expected 74.875
    test 243 InverseLine[7].lon: 94.774  FAILED, KNOWN, expected 94.743
    test 244 InverseLine[8].lat: 65.730  FAILED, KNOWN, expected 65.786
    test 245 InverseLine[8].lon: 98.489  FAILED, KNOWN, expected 98.474
    test 246 InverseLine[9].lat: 56.582  FAILED, KNOWN, expected 56.643
    test 247 InverseLine[9].lon: 100.254  FAILED, KNOWN, expected 100.246
    test 248 InverseLine[10].lat: 47.409  FAILED, KNOWN, expected 47.471
    test 249 InverseLine[10].lon: 101.327  FAILED, KNOWN, expected 101.321
    test 250 InverseLine[11].lat: 38.220  FAILED, KNOWN, expected 38.277
    test 251 InverseLine[11].lon: 102.079  FAILED, KNOWN, expected 102.075
    test 252 InverseLine[12].lat: 29.017  FAILED, KNOWN, expected 29.066
    test 253 InverseLine[12].lon: 102.662  FAILED, KNOWN, expected 102.659
    test 254 InverseLine[13].lat: 19.804  FAILED, KNOWN, expected 19.839
    test 255 InverseLine[13].lon: 103.148  FAILED, KNOWN, expected 103.147
    test 256 InverseLine[14].lat: 10.584  FAILED, KNOWN, expected 10.602
    test 257 InverseLine[14].lon: 103.581
    test 258 InverseLine[15].lat: 1.359
    test 259 InverseLine[15].lon: 103.989

    testGeodCalc(pygeodesy.ellipsoidalExact, 23.04.11)
    test 260 area: 13662703680020
    test 261 perimeter: 16830891.356049

    testMask(pygeodesy.geodesicx, 23.04.04)
    test 262 Geodesic.EMPTY: 0
    test 263 Geodesic.LATITUDE: 128
    test 264 Geodesic.LONGITUDE: 256
    test 265 Geodesic.AZIMUTH: 512
    test 266 Geodesic.DISTANCE: 1024
    test 267 Geodesic.STANDARD: 3968
    test 268 Geodesic.DISTANCE_IN: 2048
    test 269 Geodesic.REDUCEDLENGTH: 4096
    test 270 Geodesic.GEODESICSCALE: 8192
    test 271 Geodesic.AREA: 16384
    test 272 Geodesic.ALL: 32640
    test 273 Geodesic.LONG_UNROLL: 65536
# lazily imported pygeodesy.ellipsoidalGeodSolve by testKarney.py line 216
# lazily imported pygeodesy.GeodesicSolve from .geodsolve by testKarney.py line 216

    testDirect(pygeodesy.geodsolve, 23.04.11)
    test 274 Direct.lat2: -11.174909999999988  FAILED, KNOWN, expected -11.174910000000001
    test 275 Direct.lon2: -69.959210000000027  FAILED, KNOWN, expected -69.959209999999999
    test 276 Direct.azi2: 129.289270889708774
    test 277 Direct.a12: 80.507297142819723  FAILED, KNOWN, expected 80.507297142819738
    test 278 Direct.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 279 Direct.M12: 0.166063184473861
    test 280 Direct.M21: 0.164791169456130  FAILED, KNOWN, expected 0.164791169456129
    test 281 Direct.S12: 12841384694976.431640625000000
    test 282 Direct.lat2: 77.031959999999998
    test 283 Direct.lon2: -162.817659999999961  FAILED, KNOWN, expected 197.182340000000011
    test 284 Direct.azi2: 109.112041110671555  FAILED, KNOWN, expected 109.112041110671512
    test 285 Direct.a12: 36.892740690445905  FAILED, KNOWN, expected 36.892740690445891
    test 286 Direct.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 287 Direct.M12: 0.800763496080926
    test 288 Direct.M21: 0.801010069842010
    test 289 Direct.S12: 61674961290615.625000000000000  FAILED, KNOWN, expected 61674961290615.617187500000000
    test 290 Direct.lat2: 41.841380000000029  FAILED, KNOWN, expected 41.841380000000001
    test 291 Direct.lon2: 98.566349999999971  FAILED, KNOWN, expected 98.566350000000000
    test 292 Direct.azi2: -41.843599514404680  FAILED, KNOWN, expected -41.843599514404659
    test 293 Direct.a12: 75.629304910115252  FAILED, KNOWN, expected 75.629304910115223
    test 294 Direct.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 295 Direct.M12: 0.248163392339503  FAILED, KNOWN, expected 0.248163392339504
    test 296 Direct.M21: 0.249302512036278  FAILED, KNOWN, expected 0.249302512036279
    test 297 Direct.S12: -6637997720646.726562500000000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 298 Direct.lat2: -12.706309999999982  FAILED, KNOWN, expected -12.706310000000000
    test 299 Direct.lon2: -74.096560000000011  FAILED, KNOWN, expected 285.903439999999989
    test 300 Direct.azi2: 2.512956620913670  FAILED, KNOWN, expected 2.512956620913668
    test 301 Direct.a12: 100.278634181155780  FAILED, KNOWN, expected 100.278634181155752
    test 302 Direct.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 303 Direct.M12: -0.171994902747004
    test 304 Direct.M21: -0.177225695263457
    test 305 Direct.S12: -121287239862139.734375000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 306 Direct.lat2: -15.847839999999980  FAILED, KNOWN, expected -15.847840000000000
    test 307 Direct.lon2: 5.935569999999956  FAILED, KNOWN, expected 5.935570000000000
    test 308 Direct.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 309 Direct.a12: 144.640108810286279  FAILED, KNOWN, expected 144.640108810286250
    test 310 Direct.m12: 3732902.158387716859579  FAILED, KNOWN, expected 3732902.158387718722224
    test 311 Direct.M12: -0.812736387000705
    test 312 Direct.M21: -0.812998005191545
    test 313 Direct.S12: 97825992354058.703125000000000

    testInverse(pygeodesy.geodsolve, 23.04.11)
    test 314 Inverse.lat2: -11.174910000000001
    test 315 Inverse.lon2: -69.959209999999999
    test 316 Inverse.azi1: 111.098748429560331
    test 317 Inverse.azi2: 129.289270889708774
    test 318 Inverse.s12: 8935244.560481829568744
    test 319 Inverse.a12: 80.507297142819738
    test 320 Inverse.m12: 6273170.205530384555459  FAILED, KNOWN, expected 6273170.205530383624136
    test 321 Inverse.M12: 0.166063184473861
    test 322 Inverse.M21: 0.164791169456129
    test 323 Inverse.S12: 12841384694976.433593750000000  FAILED, KNOWN, expected 12841384694976.431640625000000
    test 324 Inverse.lat2: 77.031959999999998
    test 325 Inverse.lon2: -162.817659999999989  FAILED, KNOWN, expected 197.182340000000011
    test 326 Inverse.azi1: 22.020059880982807  FAILED, KNOWN, expected 22.020059880982799
    test 327 Inverse.azi2: 109.112041110671527  FAILED, KNOWN, expected 109.112041110671512
    test 328 Inverse.s12: 4105086.171392440330237  FAILED, KNOWN, expected 4105086.171392440795898
    test 329 Inverse.a12: 36.892740690445898  FAILED, KNOWN, expected 36.892740690445891
    test 330 Inverse.m12: 3828869.334438761696219  FAILED, KNOWN, expected 3828869.334438760764897
    test 331 Inverse.M12: 0.800763496080926
    test 332 Inverse.M21: 0.801010069842010
    test 333 Inverse.S12: 61674961290615.617187500000000
    test 334 Inverse.lat2: 41.841380000000001
    test 335 Inverse.lon2: 98.566350000000000
    test 336 Inverse.azi1: -32.444568764331891
    test 337 Inverse.azi2: -41.843599514404659
    test 338 Inverse.s12: 8394328.894657669588923  FAILED, KNOWN, expected 8394328.894657671451569
    test 339 Inverse.a12: 75.629304910115223
    test 340 Inverse.m12: 6161154.577311060391366  FAILED, KNOWN, expected 6161154.577311061322689
    test 341 Inverse.M12: 0.248163392339504
    test 342 Inverse.M21: 0.249302512036279
    test 343 Inverse.S12: -6637997720646.715820312500000  FAILED, KNOWN, expected -6637997720646.716796875000000
    test 344 Inverse.lat2: -12.706310000000000
    test 345 Inverse.lon2: -74.096560000000011  FAILED, KNOWN, expected 285.903439999999989
    test 346 Inverse.azi1: 173.734912408784027
    test 347 Inverse.azi2: 2.512956620913673  FAILED, KNOWN, expected 2.512956620913668
    test 348 Inverse.s12: 11150344.231208024546504
    test 349 Inverse.a12: 100.278634181155766  FAILED, KNOWN, expected 100.278634181155752
    test 350 Inverse.m12: 6289939.567044666968286  FAILED, KNOWN, expected 6289939.567044668830931
    test 351 Inverse.M12: -0.171994902747004
    test 352 Inverse.M21: -0.177225695263457
    test 353 Inverse.S12: -121287239862139.718750000000000  FAILED, KNOWN, expected -121287239862139.750000000000000
    test 354 Inverse.lat2: -15.847840000000000
    test 355 Inverse.lon2: 5.935570000000000
    test 356 Inverse.azi1: -159.033557661192930
    test 357 Inverse.azi2: -20.787484651536985  FAILED, KNOWN, expected -20.787484651536989
    test 358 Inverse.s12: 16076603.163118068128824
    test 359 Inverse.a12: 144.640108810286250
    test 360 Inverse.m12: 3732902.158387719187886  FAILED, KNOWN, expected 3732902.158387718722224
    test 361 Inverse.M12: -0.812736387000705
    test 362 Inverse.M21: -0.812998005191545
    test 363 Inverse.S12: 97825992354058.703125000000000

    testGeodCalc(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 364 area: 13662703680020
    test 365 perimeter: 16831067.892791

    testMask(pygeodesy.geodsolve, 23.04.11)
    test 366 Geodesic.EMPTY: 0
    test 367 Geodesic.LATITUDE: 128
    test 368 Geodesic.LONGITUDE: 256
    test 369 Geodesic.AZIMUTH: 512
    test 370 Geodesic.DISTANCE: 1024
    test 371 Geodesic.STANDARD: 3968
    test 372 Geodesic.DISTANCE_IN: 2048
    test 373 Geodesic.REDUCEDLENGTH: 4096
    test 374 Geodesic.GEODESICSCALE: 8192
    test 375 Geodesic.AREA: 16384
    test 376 Geodesic.ALL: 32640
    test 377 Geodesic.LONG_UNROLL: 65536

    testMath(pygeodesy.karney, 23.04.07)
    test 378 _diff182(-180, -180): 0.0  FAILED, KNOWN, expected -0.0
    test 379 _diff182(-180, -90): 90.0
    test 380 _diff182(-180, 0): 180.0
    test 381 _diff182(-180, 90): -90.0
    test 382 _diff182(-180, 180): 0.0
    test 383 _diff182(-90, -180): -90.0
    test 384 _diff182(-90, -90): 0.0  FAILED, KNOWN, expected -0.0
    test 385 _diff182(-90, 0): 90.0
    test 386 _diff182(-90, 90): 180.0
    test 387 _diff182(-90, 180): -90.0
    test 388 _diff182(0, -180): -180.0
    test 389 _diff182(0, -90): -90.0
    test 390 _diff182(0, 0): 0.0  FAILED, KNOWN, expected -0.0
    test 391 _diff182(0, 90): 90.0
    test 392 _diff182(0, 180): 180.0
    test 393 _diff182(90, -180): 90.0
    test 394 _diff182(90, -90): -180.0
    test 395 _diff182(90, 0): -90.0
    test 396 _diff182(90, 90): 0.0  FAILED, KNOWN, expected -0.0
    test 397 _diff182(90, 180): 90.0
    test 398 _diff182(180, -180): -0.0
    test 399 _diff182(180, -90): 90.0
    test 400 _diff182(180, 0): -180.0
    test 401 _diff182(180, 90): -90.0
    test 402 _diff182(180, 180): 0.0  FAILED, KNOWN, expected -0.0
    test 403 _norm180(-361): -1.0
    test 404  wrap180(-361): -1.0
    test 405 _norm180(-360): -0.0
    test 406  wrap180(-360): 0.0  FAILED, KNOWN, expected -0.0
    test 407 _norm180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 408  wrap180(-180): -180.0  FAILED, KNOWN, expected 180.0
    test 409 _norm180(-90): -90.0
    test 410  wrap180(-90): -90.0
    test 411 _norm180(0): 0.0
    test 412  wrap180(0): 0.0
    test 413 _norm180(0): 0.0
    test 414  wrap180(0): 0.0
    test 415 _norm180(90): 90.0
    test 416  wrap180(90): 90.0
    test 417 _norm180(180): 180.0
    test 418  wrap180(180): 180.0
    test 419 _norm180(360): 0.0
    test 420  wrap180(360): 0.0
    test 421 _norm180(361): 1.0
    test 422  wrap180(361): 1.0
    test 423 _fsum2_: 1.0e-20
    test 424 _fsum2_: 0.0
    test 425 _fsum2_: -8.0e-20  FAILED, KNOWN, expected 1.0e-20
    test 426 _fsum2_: 1.0e-20
    test 427 _fsum2_: -3.6893488147419103e+19  FAILED, KNOWN, expected 1.0
    test 428 _fsum2_: 1.002978273411373e+18
    test 429 unroll(-30, 0): (30.0, 0.0)
    test 430 unroll(-30, 30): (60.0, 30.0)
    test 431 unroll(-30, 60): (90.0, 60.0)
    test 432 unroll(-30, 90): (120.0, 90.0)
    test 433 unroll(-30, 120): (150.0, 120.0)
    test 434 unroll(-30, 150): (180.0, 150.0)
    test 435 unroll(-30, 180): (-150.0, -180.0)
    test 436 unroll(-30, 210): (-120.0, -150.0)
    test 437 unroll(-30, 240): (-90.0, -120.0)
    test 438 unroll(-30, 270): (-60.0, -90.0)
    test 439 unroll(-30, 300): (-30.0, -60.0)
    test 440 unroll(-30, 330): (0.0, -30.0)
    test 441 unroll(-30, 360): (30.0, 0.0)

    187 of 441 testKarney.py tests (42.4%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.153 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testKtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.fstr from .streprs by testKtm.py line 10
# lazily imported pygeodesy.hypot from .fmath by testKtm.py line 10
# lazily imported pygeodesy.sincos2d from .utily by testKtm.py line 10
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testKtm.py line 56
# lazily imported pygeodesy.ExactTransverseMercator from .etm by testKtm.py line 56
# lazily imported pygeodesy.ktm by testKtm.py line 56
# lazily imported pygeodesy.KTransverseMercator from .ktm by testKtm.py line 56

    testing testKtm.py 23.03.27 (module pygeodesy.ktm 23.03.19) isLazy=3

    test 1 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=7)
    test 2 forward 0N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 3 reverse 0N (80.000, 0.000) -/-: 0.0
    test 4 forward 3N (79.890, 8.374) -/-: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 5 reverse 3N (79.890, 8.374) -/-: 1.7763568394002505e-15
    test 6 forward 6N (79.562, 16.725) -/-: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 7 reverse 6N (79.562, 16.725) -/-: 1.5888218580782548e-14
    test 8 forward 9N (79.015, 25.030) -/-: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 9 reverse 9N (79.015, 25.030) -/-: 2.1316282072803006e-14
    test 10 forward 12N (78.252, 33.266) -/-: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 11 reverse 12N (78.252, 33.266) -/-: 5.1728291973635394e-14
    test 12 forward 15N (77.274, 41.411) -/-: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 13 reverse 15N (77.274, 41.411) -/-: 0.0
    test 14 forward 18N (76.085, 49.443) -/-: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 15 reverse 18N (76.085, 49.443) -/-: 3.8263897345803626e-14
    test 16 forward 21N (74.686, 57.339) -/-: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 17 reverse 21N (74.686, 57.339) -/-: 5.859285502108464e-14
    test 18 forward 24N (73.084, 65.078) -/-: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 19 reverse 24N (73.084, 65.078) -/-: 1.4210854715202004e-14
    test 20 forward 27N (71.281, 72.638) -/-: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 21 reverse 27N (71.281, 72.638) -/-: 1.4210854715202004e-14
    test 22 forward 30N (69.282, 80.000) -/-: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 23 reverse 30N (69.282, 80.000) -/-: 1.4210854715202004e-14
    test 24 forward 33N (67.094, 87.142) -/-: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 25 reverse 33N (67.094, 87.142) -/-: 0.0
    test 26 forward 36N (64.721, 94.046) -/-: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 27 reverse 36N (64.721, 94.046) -/-: 0.0
    test 28 forward 39N (62.172, 100.691) -/-: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 29 reverse 39N (62.172, 100.691) -/-: 0.0
    test 30 forward 42N (59.452, 107.061) -/-: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 31 reverse 42N (59.452, 107.061) -/-: 1.4210854715202004e-14
    test 32 forward 45N (56.569, 113.137) -/-: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 33 reverse 45N (56.569, 113.137) -/-: 1.5888218580782548e-14
    test 34 forward 48N (53.530, 118.903) -/-: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 35 reverse 48N (53.530, 118.903) -/-: 1.4210854715202004e-14
    test 36 forward 51N (50.346, 124.343) -/-: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 37 reverse 51N (50.346, 124.343) -/-: 1.4210854715202004e-14
    test 38 forward 54N (47.023, 129.443) -/-: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 39 reverse 54N (47.023, 129.443) -/-: 2.842170943040401e-14
    test 40 forward 57N (43.571, 134.187) -/-: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 41 reverse 57N (43.571, 134.187) -/-: 0.0
    test 42 forward 60N (40.000, 138.564) -/-: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 43 reverse 60N (40.000, 138.564) -/-: 0.0
    test 44 forward 63N (36.319, 142.561) -/-: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 45 reverse 63N (36.319, 142.561) -/-: 7.105427357601002e-15
    test 46 forward 66N (32.539, 146.167) -/-: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 47 reverse 66N (32.539, 146.167) -/-: 7.105427357601002e-15
    test 48 forward 69N (28.669, 149.373) -/-: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 49 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 50 forward 72N (24.721, 152.169) -/-: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 51 reverse 72N (24.721, 152.169) -/-: 1.0658141036401503e-14
    test 52 forward 75N (20.706, 154.548) -/-: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 53 reverse 75N (20.706, 154.548) -/-: 1.7763568394002505e-14
    test 54 forward 78N (16.633, 156.504) -/-: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 55 reverse 78N (16.633, 156.504) -/-: 1.7763568394002505e-14
    test 56 forward 81N (12.515, 158.030) -/-: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 57 reverse 81N (12.515, 158.030) -/-: 1.2434497875801753e-14
    test 58 forward 84N (8.362, 159.124) -/-: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 59 reverse 84N (8.362, 159.124) -/-: 1.7763568394002505e-14
    test 60 forward 87N (4.187, 159.781) -/-: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 61 reverse 87N (4.187, 159.781) -/-: 8.881784197001252e-15
    test 62 forward 90N (0.000, 160.000) -/-: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 63 reverse 90N (0.000, 160.000) -/-: 2.402002211154445e-14
    test 64 forward 93N (-4.187, 159.781) -/-: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 65 reverse 93N (-4.187, 159.781) -/-: 6.217248937900877e-15
    test 66 forward 96N (-8.362, 159.124) -/-: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 67 reverse 96N (-8.362, 159.124) -/-: 1.5987211554602254e-14
    test 68 forward 99N (-12.515, 158.030) -/-: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 69 reverse 99N (-12.515, 158.030) -/-: 7.105427357601002e-15
    test 70 forward 102N (-16.633, 156.504) -/-: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 71 reverse 102N (-16.633, 156.504) -/-: 2.842170943040401e-14
    test 72 forward 105N (-20.706, 154.548) -/-: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 73 reverse 105N (-20.706, 154.548) -/-: 1.7763568394002505e-14
    test 74 forward 108N (-24.721, 152.169) -/-: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 75 reverse 108N (-24.721, 152.169) -/-: 7.105427357601002e-15
    test 76 forward 111N (-28.669, 149.373) -/-: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 77 reverse 111N (-28.669, 149.373) -/-: 7.105427357601002e-15
    test 78 forward 114N (-32.539, 146.167) -/-: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 79 reverse 114N (-32.539, 146.167) -/-: 7.105427357601002e-15
    test 80 forward 117N (-36.319, 142.561) -/-: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 81 reverse 117N (-36.319, 142.561) -/-: 7.105427357601002e-15
    test 82 forward 120N (-40.000, 138.564) -/-: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 83 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 84 forward 123N (-43.571, 134.187) -/-: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 85 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 86 forward 126N (-47.023, 129.443) -/-: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 87 reverse 126N (-47.023, 129.443) -/-: 2.842170943040401e-14
    test 88 forward 129N (-50.346, 124.343) -/-: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 89 reverse 129N (-50.346, 124.343) -/-: 1.4210854715202004e-14
    test 90 forward 132N (-53.530, 118.903) -/-: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 91 reverse 132N (-53.530, 118.903) -/-: 1.4210854715202004e-14
    test 92 forward 135N (-56.569, 113.137) -/-: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 93 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 94 forward 138N (-59.452, 107.061) -/-: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 95 reverse 138N (-59.452, 107.061) -/-: 1.4210854715202004e-14
    test 96 forward 141N (-62.172, 100.691) -/-: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 97 reverse 141N (-62.172, 100.691) -/-: 0.0
    test 98 forward 144N (-64.721, 94.046) -/-: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 99 reverse 144N (-64.721, 94.046) -/-: 0.0
    test 100 forward 147N (-67.094, 87.142) -/-: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 101 reverse 147N (-67.094, 87.142) -/-: 0.0
    test 102 forward 150N (-69.282, 80.000) -/-: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 103 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 104 forward 153N (-71.281, 72.638) -/-: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 105 reverse 153N (-71.281, 72.638) -/-: 1.4210854715202004e-14
    test 106 forward 156N (-73.084, 65.078) -/-: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 107 reverse 156N (-73.084, 65.078) -/-: 1.4210854715202004e-14
    test 108 forward 159N (-74.686, 57.339) -/-: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 109 reverse 159N (-74.686, 57.339) -/-: 1.4210854715202004e-14
    test 110 forward 162N (-76.085, 49.443) -/-: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 111 reverse 162N (-76.085, 49.443) -/-: 3.552713678800501e-14
    test 112 forward 165N (-77.274, 41.411) -/-: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 113 reverse 165N (-77.274, 41.411) -/-: 0.0
    test 114 forward 168N (-78.252, 33.266) -/-: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 115 reverse 168N (-78.252, 33.266) -/-: 2.5618982671915014e-14
    test 116 forward 171N (-79.015, 25.030) -/-: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 117 reverse 171N (-79.015, 25.030) -/-: 2.842170943040401e-14
    test 118 forward 174N (-79.562, 16.725) -/-: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 119 reverse 174N (-79.562, 16.725) -/-: 1.7763568394002505e-14
    test 120 forward 177N (-79.890, 8.374) -/-: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 121 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 122 forward 180N (-80.000, 0.000) -/-: 0.0, -8881585.815988, 0.0, 0.9996
    test 123 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 124 forward 183N (-79.890, -8.374) -/-: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 125 reverse 183N (-79.890, -8.374) -/-: 1.7763568394002505e-15
    test 126 forward 186N (-79.562, -16.725) -/-: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 127 reverse 186N (-79.562, -16.725) -/-: 1.5888218580782548e-14
    test 128 forward 189N (-79.015, -25.030) -/-: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 129 reverse 189N (-79.015, -25.030) -/-: 2.1316282072803006e-14
    test 130 forward 192N (-78.252, -33.266) -/-: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 131 reverse 192N (-78.252, -33.266) -/-: 5.1728291973635394e-14
    test 132 forward 195N (-77.274, -41.411) -/-: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 133 reverse 195N (-77.274, -41.411) -/-: 0.0
    test 134 forward 198N (-76.085, -49.443) -/-: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 135 reverse 198N (-76.085, -49.443) -/-: 3.8263897345803626e-14
    test 136 forward 201N (-74.686, -57.339) -/-: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 137 reverse 201N (-74.686, -57.339) -/-: 5.859285502108464e-14
    test 138 forward 204N (-73.084, -65.078) -/-: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 139 reverse 204N (-73.084, -65.078) -/-: 1.4210854715202004e-14
    test 140 forward 207N (-71.281, -72.638) -/-: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 141 reverse 207N (-71.281, -72.638) -/-: 1.4210854715202004e-14
    test 142 forward 210N (-69.282, -80.000) -/-: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 143 reverse 210N (-69.282, -80.000) -/-: 1.4210854715202004e-14
    test 144 forward 213N (-67.094, -87.142) -/-: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 145 reverse 213N (-67.094, -87.142) -/-: 0.0
    test 146 forward 216N (-64.721, -94.046) -/-: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 147 reverse 216N (-64.721, -94.046) -/-: 0.0
    test 148 forward 219N (-62.172, -100.691) -/-: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 149 reverse 219N (-62.172, -100.691) -/-: 0.0
    test 150 forward 222N (-59.452, -107.061) -/-: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 151 reverse 222N (-59.452, -107.061) -/-: 1.4210854715202004e-14
    test 152 forward 225N (-56.569, -113.137) -/-: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 153 reverse 225N (-56.569, -113.137) -/-: 1.5888218580782548e-14
    test 154 forward 228N (-53.530, -118.903) -/-: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 155 reverse 228N (-53.530, -118.903) -/-: 1.4210854715202004e-14
    test 156 forward 231N (-50.346, -124.343) -/-: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 157 reverse 231N (-50.346, -124.343) -/-: 1.4210854715202004e-14
    test 158 forward 234N (-47.023, -129.443) -/-: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 159 reverse 234N (-47.023, -129.443) -/-: 2.842170943040401e-14
    test 160 forward 237N (-43.571, -134.187) -/-: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 161 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 162 forward 240N (-40.000, -138.564) -/-: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 163 reverse 240N (-40.000, -138.564) -/-: 0.0
    test 164 forward 243N (-36.319, -142.561) -/-: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 165 reverse 243N (-36.319, -142.561) -/-: 7.105427357601002e-15
    test 166 forward 246N (-32.539, -146.167) -/-: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 167 reverse 246N (-32.539, -146.167) -/-: 7.105427357601002e-15
    test 168 forward 249N (-28.669, -149.373) -/-: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 169 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 170 forward 252N (-24.721, -152.169) -/-: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 171 reverse 252N (-24.721, -152.169) -/-: 1.0658141036401503e-14
    test 172 forward 255N (-20.706, -154.548) -/-: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 173 reverse 255N (-20.706, -154.548) -/-: 1.7763568394002505e-14
    test 174 forward 258N (-16.633, -156.504) -/-: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 175 reverse 258N (-16.633, -156.504) -/-: 1.7763568394002505e-14
    test 176 forward 261N (-12.515, -158.030) -/-: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 177 reverse 261N (-12.515, -158.030) -/-: 1.2434497875801753e-14
    test 178 forward 264N (-8.362, -159.124) -/-: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 179 reverse 264N (-8.362, -159.124) -/-: 1.7763568394002505e-14
    test 180 forward 267N (-4.187, -159.781) -/-: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 181 reverse 267N (-4.187, -159.781) -/-: 8.881784197001252e-15
    test 182 forward 270N (0.000, -160.000) -/-: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 183 reverse 270N (0.000, -160.000) -/-: 2.402002211154445e-14
    test 184 forward 273N (4.187, -159.781) -/-: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 185 reverse 273N (4.187, -159.781) -/-: 6.217248937900877e-15
    test 186 forward 276N (8.362, -159.124) -/-: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 187 reverse 276N (8.362, -159.124) -/-: 1.5987211554602254e-14
    test 188 forward 279N (12.515, -158.030) -/-: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 189 reverse 279N (12.515, -158.030) -/-: 7.105427357601002e-15
    test 190 forward 282N (16.633, -156.504) -/-: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 191 reverse 282N (16.633, -156.504) -/-: 2.842170943040401e-14
    test 192 forward 285N (20.706, -154.548) -/-: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 193 reverse 285N (20.706, -154.548) -/-: 1.7763568394002505e-14
    test 194 forward 288N (24.721, -152.169) -/-: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 195 reverse 288N (24.721, -152.169) -/-: 7.105427357601002e-15
    test 196 forward 291N (28.669, -149.373) -/-: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 197 reverse 291N (28.669, -149.373) -/-: 7.105427357601002e-15
    test 198 forward 294N (32.539, -146.167) -/-: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 199 reverse 294N (32.539, -146.167) -/-: 7.105427357601002e-15
    test 200 forward 297N (36.319, -142.561) -/-: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 201 reverse 297N (36.319, -142.561) -/-: 7.105427357601002e-15
    test 202 forward 300N (40.000, -138.564) -/-: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 203 reverse 300N (40.000, -138.564) -/-: 0.0
    test 204 forward 303N (43.571, -134.187) -/-: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 205 reverse 303N (43.571, -134.187) -/-: 0.0
    test 206 forward 306N (47.023, -129.443) -/-: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 207 reverse 306N (47.023, -129.443) -/-: 2.842170943040401e-14
    test 208 forward 309N (50.346, -124.343) -/-: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 209 reverse 309N (50.346, -124.343) -/-: 1.4210854715202004e-14
    test 210 forward 312N (53.530, -118.903) -/-: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 211 reverse 312N (53.530, -118.903) -/-: 1.4210854715202004e-14
    test 212 forward 315N (56.569, -113.137) -/-: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 213 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 214 forward 318N (59.452, -107.061) -/-: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 215 reverse 318N (59.452, -107.061) -/-: 1.4210854715202004e-14
    test 216 forward 321N (62.172, -100.691) -/-: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 217 reverse 321N (62.172, -100.691) -/-: 0.0
    test 218 forward 324N (64.721, -94.046) -/-: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 219 reverse 324N (64.721, -94.046) -/-: 0.0
    test 220 forward 327N (67.094, -87.142) -/-: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 221 reverse 327N (67.094, -87.142) -/-: 0.0
    test 222 forward 330N (69.282, -80.000) -/-: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 223 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 224 forward 333N (71.281, -72.638) -/-: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 225 reverse 333N (71.281, -72.638) -/-: 1.4210854715202004e-14
    test 226 forward 336N (73.084, -65.078) -/-: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 227 reverse 336N (73.084, -65.078) -/-: 1.4210854715202004e-14
    test 228 forward 339N (74.686, -57.339) -/-: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 229 reverse 339N (74.686, -57.339) -/-: 1.4210854715202004e-14
    test 230 forward 342N (76.085, -49.443) -/-: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 231 reverse 342N (76.085, -49.443) -/-: 3.552713678800501e-14
    test 232 forward 345N (77.274, -41.411) -/-: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 233 reverse 345N (77.274, -41.411) -/-: 0.0
    test 234 forward 348N (78.252, -33.266) -/-: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 235 reverse 348N (78.252, -33.266) -/-: 2.5618982671915014e-14
    test 236 forward 351N (79.015, -25.030) -/-: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 237 reverse 351N (79.015, -25.030) -/-: 2.842170943040401e-14
    test 238 forward 354N (79.562, -16.725) -/-: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 239 reverse 354N (79.562, -16.725) -/-: 1.7763568394002505e-14
    test 240 forward 357N (79.890, -8.374) -/-: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 241 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 242 forward 360N (80.000, 0.000) -/-: 0.0, 8881585.815988, 0.0, 0.9996
    test 243 reverse 360N (80.000, 0.000) -/-: 0.0
    test 244 max: 5.859285502108464e-14  FAILED, KNOWN, expected 6e-14

    test 245 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 246 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    test 247 _TM: KTransverseMercator(ellipsoid=Ellipsoid(name='Sphere', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=4)
    test 248 forward 0N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 249 reverse 0N (80.000, 0.000) -/-: 0.0
    test 250 forward 3N (79.890, 8.374) -/-: 162830.781916, 8891598.152508, 8.245541, 0.999927
    test 251 reverse 3N (79.890, 8.374) -/-: 3.552713678800501e-15
    test 252 forward 6N (79.562, 16.725) -/-: 332334.438121, 8891401.702739, 16.462875, 1.000961
    test 253 reverse 6N (79.562, 16.725) -/-: 3.552713678800501e-15
    test 254 forward 9N (79.015, 25.030) -/-: 514536.969405, 8894816.626946, 24.625748, 1.002864
    test 255 reverse 9N (79.015, 25.030) -/-: 3.552713678800501e-15
    test 256 forward 12N (78.252, 33.266) -/-: 714245.109628, 8907114.580812, 32.711919, 1.005893
    test 257 reverse 12N (78.252, 33.266) -/-: 1.4210854715202004e-14
    test 258 forward 15N (77.274, 41.411) -/-: 934605.427053, 8935050.398758, 40.705275, 1.010384
    test 259 reverse 15N (77.274, 41.411) -/-: 2.1316282072803006e-14
    test 260 forward 18N (76.085, 49.443) -/-: 1176821.393989, 8986356.098856, 48.597784, 1.016715
    test 261 reverse 18N (76.085, 49.443) -/-: 7.105427357601002e-15
    test 262 forward 21N (74.686, 57.339) -/-: 1440020.023752, 9069222.197918, 56.390849, 1.025263
    test 263 reverse 21N (74.686, 57.339) -/-: 1.4210854715202004e-14
    test 264 forward 24N (73.084, 65.078) -/-: 1721232.03303, 9191807.409386, 64.095597, 1.036332
    test 265 reverse 24N (73.084, 65.078) -/-: 4.4938668397781776e-14
    test 266 forward 27N (71.281, 72.638) -/-: 2015439.94304, 9361783.139474, 71.731644, 1.050076
    test 267 reverse 27N (71.281, 72.638) -/-: 0.0
    test 268 forward 30N (69.282, 80.000) -/-: 2315663.380439, 9585883.63353, 79.324018, 1.066413
    test 269 reverse 30N (69.282, 80.000) -/-: 0.0
    test 270 forward 33N (67.094, 87.142) -/-: 2613089.50746, 9869411.258858, 86.898056, 1.084934
    test 271 reverse 33N (67.094, 87.142) -/-: 1.4210854715202004e-14
    test 272 forward 36N (64.721, 94.046) -/-: 2897310.302591, 10215654.794479, 94.472414, 1.104843
    test 273 reverse 36N (64.721, 94.046) -/-: 4.4938668397781776e-14
    test 274 forward 39N (62.172, 100.691) -/-: 3156777.9732, 10625229.653451, 102.050793, 1.12494
    test 275 reverse 39N (62.172, 100.691) -/-: 7.105427357601002e-15
    test 276 forward 42N (59.452, 107.061) -/-: 3379601.994821, 11095444.501021, 109.613799, 1.143688
    test 277 reverse 42N (59.452, 107.061) -/-: 2.0097183471152322e-14
    test 278 forward 45N (56.569, 113.137) -/-: 3554744.82183, 11619912.294696, 117.113212, 1.159405
    test 279 reverse 45N (56.569, 113.137) -/-: 0.0
    test 280 forward 48N (53.530, 118.903) -/-: 3673507.549162, 12188686.186502, 124.471401, 1.170561
    test 281 reverse 48N (53.530, 118.903) -/-: 2.1316282072803006e-14
    test 282 forward 51N (50.346, 124.343) -/-: 3730980.59573, 12789121.454112, 131.587794, 1.176106
    test 283 reverse 51N (50.346, 124.343) -/-: 1.5888218580782548e-14
    test 284 forward 54N (47.023, 129.443) -/-: 3727003.760242, 13407411.821957, 138.351947, 1.175719
    test 285 reverse 54N (47.023, 129.443) -/-: 0.0
    test 286 forward 57N (43.571, 134.187) -/-: 3666275.084648, 14030431.844036, 144.659906, 1.16987
    test 287 reverse 57N (43.571, 134.187) -/-: 0.0
    test 288 forward 60N (40.000, 138.564) -/-: 3557564.445775, 14647347.719581, 150.428973, 1.159665
    test 289 reverse 60N (40.000, 138.564) -/-: 7.105427357601002e-15
    test 290 forward 63N (36.319, 142.561) -/-: 3412334.48396, 15250567.642625, 155.606964, 1.146559
    test 291 reverse 63N (36.319, 142.561) -/-: 0.0
    test 292 forward 66N (32.539, 146.167) -/-: 3243229.892204, 15835907.12812, 160.174784, 1.132049
    test 293 reverse 66N (32.539, 146.167) -/-: 3.1776437161565096e-14
    test 294 forward 69N (28.669, 149.373) -/-: 3062811.744735, 16402134.803105, 164.143685, 1.117448
    test 295 reverse 69N (28.669, 149.373) -/-: 3.552713678800501e-15
    test 296 forward 72N (24.721, 152.169) -/-: 2882703.816659, 16950195.447611, 167.549757, 1.103767
    test 297 reverse 72N (24.721, 152.169) -/-: 0.0
    test 298 forward 75N (20.706, 154.548) -/-: 2713130.658999, 17482381.525728, 170.447906, 1.091693
    test 299 reverse 75N (20.706, 154.548) -/-: 1.0658141036401503e-14
    test 300 forward 78N (16.633, 156.504) -/-: 2562732.651149, 18001625.534999, 172.906642, 1.081633
    test 301 reverse 78N (16.633, 156.504) -/-: 7.105427357601002e-15
    test 302 forward 81N (12.515, 158.030) -/-: 2438532.075646, 18510987.984533, 175.004113, 1.07378
    test 303 reverse 81N (12.515, 158.030) -/-: 3.552713678800501e-15
    test 304 forward 84N (8.362, 159.124) -/-: 2345956.628332, 19013350.872509, 176.82525, 1.068192
    test 305 reverse 84N (8.362, 159.124) -/-: 8.881784197001252e-15
    test 306 forward 87N (4.187, 159.781) -/-: 2288868.720832, 19511292.939628, 178.459673, 1.064859
    test 307 reverse 87N (4.187, 159.781) -/-: 1.9539925233402755e-14
    test 308 forward 90N (0.000, 160.000) -/-: 2269582.383311, -20007108.306493, -180.0, 1.063752
    test 309 reverse 90N (0.000, 160.000) -/-: 0.0
    test 310 forward 93N (-4.187, 159.781) -/-: 2288868.720832, -19511292.939628, -178.459673, 1.064859
    test 311 reverse 93N (-4.187, 159.781) -/-: 3.019806626980426e-14
    test 312 forward 96N (-8.362, 159.124) -/-: 2345956.628332, -19013350.872509, -176.82525, 1.068192
    test 313 reverse 96N (-8.362, 159.124) -/-: 1.0658141036401503e-14
    test 314 forward 99N (-12.515, 158.030) -/-: 2438532.075646, -18510987.984533, -175.004113, 1.07378
    test 315 reverse 99N (-12.515, 158.030) -/-: 8.881784197001252e-15
    test 316 forward 102N (-16.633, 156.504) -/-: 2562732.651149, -18001625.534999, -172.906642, 1.081633
    test 317 reverse 102N (-16.633, 156.504) -/-: 3.552713678800501e-15
    test 318 forward 105N (-20.706, 154.548) -/-: 2713130.658999, -17482381.525728, -170.447906, 1.091693
    test 319 reverse 105N (-20.706, 154.548) -/-: 1.0658141036401503e-14
    test 320 forward 108N (-24.721, 152.169) -/-: 2882703.816659, -16950195.447611, -167.549757, 1.103767
    test 321 reverse 108N (-24.721, 152.169) -/-: 3.552713678800501e-15
    test 322 forward 111N (-28.669, 149.373) -/-: 3062811.744735, -16402134.803105, -164.143685, 1.117448
    test 323 reverse 111N (-28.669, 149.373) -/-: 1.0658141036401503e-14
    test 324 forward 114N (-32.539, 146.167) -/-: 3243229.892204, -15835907.12812, -160.174784, 1.132049
    test 325 reverse 114N (-32.539, 146.167) -/-: 3.1776437161565096e-14
    test 326 forward 117N (-36.319, 142.561) -/-: 3412334.48396, -15250567.642625, -155.606964, 1.146559
    test 327 reverse 117N (-36.319, 142.561) -/-: 0.0
    test 328 forward 120N (-40.000, 138.564) -/-: 3557564.445775, -14647347.719581, -150.428973, 1.159665
    test 329 reverse 120N (-40.000, 138.564) -/-: 0.0
    test 330 forward 123N (-43.571, 134.187) -/-: 3666275.084648, -14030431.844036, -144.659906, 1.16987
    test 331 reverse 123N (-43.571, 134.187) -/-: 0.0
    test 332 forward 126N (-47.023, 129.443) -/-: 3727003.760242, -13407411.821957, -138.351947, 1.175719
    test 333 reverse 126N (-47.023, 129.443) -/-: 0.0
    test 334 forward 129N (-50.346, 124.343) -/-: 3730980.59573, -12789121.454112, -131.587794, 1.176106
    test 335 reverse 129N (-50.346, 124.343) -/-: 1.5888218580782548e-14
    test 336 forward 132N (-53.530, 118.903) -/-: 3673507.549162, -12188686.186502, -124.471401, 1.170561
    test 337 reverse 132N (-53.530, 118.903) -/-: 2.1316282072803006e-14
    test 338 forward 135N (-56.569, 113.137) -/-: 3554744.82183, -11619912.294696, -117.113212, 1.159405
    test 339 reverse 135N (-56.569, 113.137) -/-: 7.105427357601002e-15
    test 340 forward 138N (-59.452, 107.061) -/-: 3379601.994821, -11095444.501021, -109.613799, 1.143688
    test 341 reverse 138N (-59.452, 107.061) -/-: 2.0097183471152322e-14
    test 342 forward 141N (-62.172, 100.691) -/-: 3156777.9732, -10625229.653451, -102.050793, 1.12494
    test 343 reverse 141N (-62.172, 100.691) -/-: 7.105427357601002e-15
    test 344 forward 144N (-64.721, 94.046) -/-: 2897310.302591, -10215654.794479, -94.472414, 1.104843
    test 345 reverse 144N (-64.721, 94.046) -/-: 4.4938668397781776e-14
    test 346 forward 147N (-67.094, 87.142) -/-: 2613089.50746, -9869411.258858, -86.898056, 1.084934
    test 347 reverse 147N (-67.094, 87.142) -/-: 1.4210854715202004e-14
    test 348 forward 150N (-69.282, 80.000) -/-: 2315663.380439, -9585883.63353, -79.324018, 1.066413
    test 349 reverse 150N (-69.282, 80.000) -/-: 2.842170943040401e-14
    test 350 forward 153N (-71.281, 72.638) -/-: 2015439.94304, -9361783.139474, -71.731644, 1.050076
    test 351 reverse 153N (-71.281, 72.638) -/-: 0.0
    test 352 forward 156N (-73.084, 65.078) -/-: 1721232.03303, -9191807.409386, -64.095597, 1.036332
    test 353 reverse 156N (-73.084, 65.078) -/-: 4.4938668397781776e-14
    test 354 forward 159N (-74.686, 57.339) -/-: 1440020.023752, -9069222.197918, -56.390849, 1.025263
    test 355 reverse 159N (-74.686, 57.339) -/-: 1.5888218580782548e-14
    test 356 forward 162N (-76.085, 49.443) -/-: 1176821.393989, -8986356.098856, -48.597784, 1.016715
    test 357 reverse 162N (-76.085, 49.443) -/-: 7.105427357601002e-15
    test 358 forward 165N (-77.274, 41.411) -/-: 934605.427053, -8935050.398758, -40.705275, 1.010384
    test 359 reverse 165N (-77.274, 41.411) -/-: 2.1316282072803006e-14
    test 360 forward 168N (-78.252, 33.266) -/-: 714245.109628, -8907114.580812, -32.711919, 1.005893
    test 361 reverse 168N (-78.252, 33.266) -/-: 1.4210854715202004e-14
    test 362 forward 171N (-79.015, 25.030) -/-: 514536.969405, -8894816.626946, -24.625748, 1.002864
    test 363 reverse 171N (-79.015, 25.030) -/-: 3.552713678800501e-15
    test 364 forward 174N (-79.562, 16.725) -/-: 332334.438121, -8891401.702739, -16.462875, 1.000961
    test 365 reverse 174N (-79.562, 16.725) -/-: 3.552713678800501e-15
    test 366 forward 177N (-79.890, 8.374) -/-: 162830.781916, -8891598.152508, -8.245541, 0.999927
    test 367 reverse 177N (-79.890, 8.374) -/-: 1.7763568394002505e-15
    test 368 forward 180N (-80.000, 0.000) -/-: 0.0, -8892048.136219, 0.0, 0.9996
    test 369 reverse 180N (-80.000, 0.000) -/-: 0.0
    test 370 forward 183N (-79.890, -8.374) -/-: -162830.781916, -8891598.152508, 8.245541, 0.999927
    test 371 reverse 183N (-79.890, -8.374) -/-: 3.552713678800501e-15
    test 372 forward 186N (-79.562, -16.725) -/-: -332334.438121, -8891401.702739, 16.462875, 1.000961
    test 373 reverse 186N (-79.562, -16.725) -/-: 3.552713678800501e-15
    test 374 forward 189N (-79.015, -25.030) -/-: -514536.969405, -8894816.626946, 24.625748, 1.002864
    test 375 reverse 189N (-79.015, -25.030) -/-: 3.552713678800501e-15
    test 376 forward 192N (-78.252, -33.266) -/-: -714245.109628, -8907114.580812, 32.711919, 1.005893
    test 377 reverse 192N (-78.252, -33.266) -/-: 1.4210854715202004e-14
    test 378 forward 195N (-77.274, -41.411) -/-: -934605.427053, -8935050.398758, 40.705275, 1.010384
    test 379 reverse 195N (-77.274, -41.411) -/-: 2.1316282072803006e-14
    test 380 forward 198N (-76.085, -49.443) -/-: -1176821.393989, -8986356.098856, 48.597784, 1.016715
    test 381 reverse 198N (-76.085, -49.443) -/-: 7.105427357601002e-15
    test 382 forward 201N (-74.686, -57.339) -/-: -1440020.023752, -9069222.197918, 56.390849, 1.025263
    test 383 reverse 201N (-74.686, -57.339) -/-: 1.4210854715202004e-14
    test 384 forward 204N (-73.084, -65.078) -/-: -1721232.03303, -9191807.409386, 64.095597, 1.036332
    test 385 reverse 204N (-73.084, -65.078) -/-: 4.4938668397781776e-14
    test 386 forward 207N (-71.281, -72.638) -/-: -2015439.94304, -9361783.139474, 71.731644, 1.050076
    test 387 reverse 207N (-71.281, -72.638) -/-: 0.0
    test 388 forward 210N (-69.282, -80.000) -/-: -2315663.380439, -9585883.63353, 79.324018, 1.066413
    test 389 reverse 210N (-69.282, -80.000) -/-: 0.0
    test 390 forward 213N (-67.094, -87.142) -/-: -2613089.50746, -9869411.258858, 86.898056, 1.084934
    test 391 reverse 213N (-67.094, -87.142) -/-: 1.4210854715202004e-14
    test 392 forward 216N (-64.721, -94.046) -/-: -2897310.302591, -10215654.794479, 94.472414, 1.104843
    test 393 reverse 216N (-64.721, -94.046) -/-: 4.4938668397781776e-14
    test 394 forward 219N (-62.172, -100.691) -/-: -3156777.9732, -10625229.653451, 102.050793, 1.12494
    test 395 reverse 219N (-62.172, -100.691) -/-: 7.105427357601002e-15
    test 396 forward 222N (-59.452, -107.061) -/-: -3379601.994821, -11095444.501021, 109.613799, 1.143688
    test 397 reverse 222N (-59.452, -107.061) -/-: 2.0097183471152322e-14
    test 398 forward 225N (-56.569, -113.137) -/-: -3554744.82183, -11619912.294696, 117.113212, 1.159405
    test 399 reverse 225N (-56.569, -113.137) -/-: 0.0
    test 400 forward 228N (-53.530, -118.903) -/-: -3673507.549162, -12188686.186502, 124.471401, 1.170561
    test 401 reverse 228N (-53.530, -118.903) -/-: 2.1316282072803006e-14
    test 402 forward 231N (-50.346, -124.343) -/-: -3730980.59573, -12789121.454112, 131.587794, 1.176106
    test 403 reverse 231N (-50.346, -124.343) -/-: 1.5888218580782548e-14
    test 404 forward 234N (-47.023, -129.443) -/-: -3727003.760242, -13407411.821957, 138.351947, 1.175719
    test 405 reverse 234N (-47.023, -129.443) -/-: 0.0
    test 406 forward 237N (-43.571, -134.187) -/-: -3666275.084648, -14030431.844036, 144.659906, 1.16987
    test 407 reverse 237N (-43.571, -134.187) -/-: 0.0
    test 408 forward 240N (-40.000, -138.564) -/-: -3557564.445775, -14647347.719581, 150.428973, 1.159665
    test 409 reverse 240N (-40.000, -138.564) -/-: 7.105427357601002e-15
    test 410 forward 243N (-36.319, -142.561) -/-: -3412334.48396, -15250567.642625, 155.606964, 1.146559
    test 411 reverse 243N (-36.319, -142.561) -/-: 0.0
    test 412 forward 246N (-32.539, -146.167) -/-: -3243229.892204, -15835907.12812, 160.174784, 1.132049
    test 413 reverse 246N (-32.539, -146.167) -/-: 3.1776437161565096e-14
    test 414 forward 249N (-28.669, -149.373) -/-: -3062811.744735, -16402134.803105, 164.143685, 1.117448
    test 415 reverse 249N (-28.669, -149.373) -/-: 3.552713678800501e-15
    test 416 forward 252N (-24.721, -152.169) -/-: -2882703.816659, -16950195.447611, 167.549757, 1.103767
    test 417 reverse 252N (-24.721, -152.169) -/-: 0.0
    test 418 forward 255N (-20.706, -154.548) -/-: -2713130.658999, -17482381.525728, 170.447906, 1.091693
    test 419 reverse 255N (-20.706, -154.548) -/-: 1.0658141036401503e-14
    test 420 forward 258N (-16.633, -156.504) -/-: -2562732.651149, -18001625.534999, 172.906642, 1.081633
    test 421 reverse 258N (-16.633, -156.504) -/-: 7.105427357601002e-15
    test 422 forward 261N (-12.515, -158.030) -/-: -2438532.075646, -18510987.984533, 175.004113, 1.07378
    test 423 reverse 261N (-12.515, -158.030) -/-: 3.552713678800501e-15
    test 424 forward 264N (-8.362, -159.124) -/-: -2345956.628332, -19013350.872509, 176.82525, 1.068192
    test 425 reverse 264N (-8.362, -159.124) -/-: 8.881784197001252e-15
    test 426 forward 267N (-4.187, -159.781) -/-: -2288868.720832, -19511292.939628, 178.459673, 1.064859
    test 427 reverse 267N (-4.187, -159.781) -/-: 1.9539925233402755e-14
    test 428 forward 270N (0.000, -160.000) -/-: -2269582.383311, -20007108.306493, 180.0, 1.063752
    test 429 reverse 270N (0.000, -160.000) -/-: 0.0
    test 430 forward 273N (4.187, -159.781) -/-: -2288868.720832, 19511292.939628, -178.459673, 1.064859
    test 431 reverse 273N (4.187, -159.781) -/-: 3.019806626980426e-14
    test 432 forward 276N (8.362, -159.124) -/-: -2345956.628332, 19013350.872509, -176.82525, 1.068192
    test 433 reverse 276N (8.362, -159.124) -/-: 1.0658141036401503e-14
    test 434 forward 279N (12.515, -158.030) -/-: -2438532.075646, 18510987.984533, -175.004113, 1.07378
    test 435 reverse 279N (12.515, -158.030) -/-: 8.881784197001252e-15
    test 436 forward 282N (16.633, -156.504) -/-: -2562732.651149, 18001625.534999, -172.906642, 1.081633
    test 437 reverse 282N (16.633, -156.504) -/-: 3.552713678800501e-15
    test 438 forward 285N (20.706, -154.548) -/-: -2713130.658999, 17482381.525728, -170.447906, 1.091693
    test 439 reverse 285N (20.706, -154.548) -/-: 1.0658141036401503e-14
    test 440 forward 288N (24.721, -152.169) -/-: -2882703.816659, 16950195.447611, -167.549757, 1.103767
    test 441 reverse 288N (24.721, -152.169) -/-: 3.552713678800501e-15
    test 442 forward 291N (28.669, -149.373) -/-: -3062811.744735, 16402134.803105, -164.143685, 1.117448
    test 443 reverse 291N (28.669, -149.373) -/-: 1.0658141036401503e-14
    test 444 forward 294N (32.539, -146.167) -/-: -3243229.892204, 15835907.12812, -160.174784, 1.132049
    test 445 reverse 294N (32.539, -146.167) -/-: 3.1776437161565096e-14
    test 446 forward 297N (36.319, -142.561) -/-: -3412334.48396, 15250567.642625, -155.606964, 1.146559
    test 447 reverse 297N (36.319, -142.561) -/-: 0.0
    test 448 forward 300N (40.000, -138.564) -/-: -3557564.445775, 14647347.719581, -150.428973, 1.159665
    test 449 reverse 300N (40.000, -138.564) -/-: 0.0
    test 450 forward 303N (43.571, -134.187) -/-: -3666275.084648, 14030431.844036, -144.659906, 1.16987
    test 451 reverse 303N (43.571, -134.187) -/-: 0.0
    test 452 forward 306N (47.023, -129.443) -/-: -3727003.760242, 13407411.821957, -138.351947, 1.175719
    test 453 reverse 306N (47.023, -129.443) -/-: 0.0
    test 454 forward 309N (50.346, -124.343) -/-: -3730980.59573, 12789121.454112, -131.587794, 1.176106
    test 455 reverse 309N (50.346, -124.343) -/-: 1.5888218580782548e-14
    test 456 forward 312N (53.530, -118.903) -/-: -3673507.549162, 12188686.186502, -124.471401, 1.170561
    test 457 reverse 312N (53.530, -118.903) -/-: 2.1316282072803006e-14
    test 458 forward 315N (56.569, -113.137) -/-: -3554744.82183, 11619912.294696, -117.113212, 1.159405
    test 459 reverse 315N (56.569, -113.137) -/-: 7.105427357601002e-15
    test 460 forward 318N (59.452, -107.061) -/-: -3379601.994821, 11095444.501021, -109.613799, 1.143688
    test 461 reverse 318N (59.452, -107.061) -/-: 2.0097183471152322e-14
    test 462 forward 321N (62.172, -100.691) -/-: -3156777.9732, 10625229.653451, -102.050793, 1.12494
    test 463 reverse 321N (62.172, -100.691) -/-: 7.105427357601002e-15
    test 464 forward 324N (64.721, -94.046) -/-: -2897310.302591, 10215654.794479, -94.472414, 1.104843
    test 465 reverse 324N (64.721, -94.046) -/-: 4.4938668397781776e-14
    test 466 forward 327N (67.094, -87.142) -/-: -2613089.50746, 9869411.258858, -86.898056, 1.084934
    test 467 reverse 327N (67.094, -87.142) -/-: 1.4210854715202004e-14
    test 468 forward 330N (69.282, -80.000) -/-: -2315663.380439, 9585883.63353, -79.324018, 1.066413
    test 469 reverse 330N (69.282, -80.000) -/-: 2.842170943040401e-14
    test 470 forward 333N (71.281, -72.638) -/-: -2015439.94304, 9361783.139474, -71.731644, 1.050076
    test 471 reverse 333N (71.281, -72.638) -/-: 0.0
    test 472 forward 336N (73.084, -65.078) -/-: -1721232.03303, 9191807.409386, -64.095597, 1.036332
    test 473 reverse 336N (73.084, -65.078) -/-: 4.4938668397781776e-14
    test 474 forward 339N (74.686, -57.339) -/-: -1440020.023752, 9069222.197918, -56.390849, 1.025263
    test 475 reverse 339N (74.686, -57.339) -/-: 1.5888218580782548e-14
    test 476 forward 342N (76.085, -49.443) -/-: -1176821.393989, 8986356.098856, -48.597784, 1.016715
    test 477 reverse 342N (76.085, -49.443) -/-: 7.105427357601002e-15
    test 478 forward 345N (77.274, -41.411) -/-: -934605.427053, 8935050.398758, -40.705275, 1.010384
    test 479 reverse 345N (77.274, -41.411) -/-: 2.1316282072803006e-14
    test 480 forward 348N (78.252, -33.266) -/-: -714245.109628, 8907114.580812, -32.711919, 1.005893
    test 481 reverse 348N (78.252, -33.266) -/-: 1.4210854715202004e-14
    test 482 forward 351N (79.015, -25.030) -/-: -514536.969405, 8894816.626946, -24.625748, 1.002864
    test 483 reverse 351N (79.015, -25.030) -/-: 3.552713678800501e-15
    test 484 forward 354N (79.562, -16.725) -/-: -332334.438121, 8891401.702739, -16.462875, 1.000961
    test 485 reverse 354N (79.562, -16.725) -/-: 3.552713678800501e-15
    test 486 forward 357N (79.890, -8.374) -/-: -162830.781916, 8891598.152508, -8.245541, 0.999927
    test 487 reverse 357N (79.890, -8.374) -/-: 1.7763568394002505e-15
    test 488 forward 360N (80.000, 0.000) -/-: 0.0, 8892048.136219, 0.0, 0.9996
    test 489 reverse 360N (80.000, 0.000) -/-: 0.0
    test 490 max: 4.4938668397781776e-14  FAILED, KNOWN, expected 5e-14

    test 491 forward: 6196225.831883, 5458228.732328, 40.893395, 1.511253
    test 492 reverse: 30.172556, 60.208316, 41.279729, 1.511925

    test 493 _TM: ExactTransverseMercator(datum='WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 494 forward 0N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 495 reverse 0N (80.000, 0.000) 3/3: 0.0
    test 496 forward 3N (79.890, 8.374) 3/4: 163544.38007, 8881136.361771, 8.245542, 0.999927
    test 497 reverse 3N (79.890, 8.374) 3/3: 3.552713678800501e-15
    test 498 forward 6N (79.562, 16.725) 3/4: 333788.634116, 8880946.730424, 16.462884, 1.000962
    test 499 reverse 6N (79.562, 16.725) 3/3: 1.5888218580782548e-14
    test 500 forward 9N (79.015, 25.030) 3/4: 516782.400098, 8884389.933155, 24.625783, 1.002865
    test 501 reverse 9N (79.015, 25.030) 3/3: 2.0097183471152322e-14
    test 502 forward 12N (78.252, 33.266) 3/4: 717349.637417, 8896761.249834, 32.712011, 1.005894
    test 503 reverse 12N (78.252, 33.266) 3/3: 1.4210854715202004e-14
    test 504 forward 15N (77.274, 41.411) 3/4: 938645.229361, 8924845.3123, 40.705476, 1.010384
    test 505 reverse 15N (77.274, 41.411) 3/3: 4.4938668397781776e-14
    test 506 forward 18N (76.085, 49.443) 3/4: 1181870.215451, 8976407.252949, 48.598167, 1.016714
    test 507 reverse 18N (76.085, 49.443) 3/3: 5.1728291973635394e-14
    test 508 forward 21N (74.686, 57.339) 3/4: 1446137.252018, 9059670.735504, 56.391495, 1.025259
    test 509 reverse 21N (74.686, 57.339) 3/3: 2.0097183471152322e-14
    test 510 forward 24N (73.084, 65.078) 3/4: 1728450.251911, 9182823.938232, 64.096558, 1.036319
    test 511 reverse 24N (73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 512 forward 27N (71.281, 72.638) 3/4: 2023752.790526, 9353559.771346, 71.732868, 1.050046
    test 513 reverse 27N (71.281, 72.638) 3/3: 2.842170943040401e-14
    test 514 forward 30N (69.282, 80.000) 3/4: 2325015.074835, 9578621.128889, 79.325231, 1.066355
    test 515 reverse 30N (69.282, 80.000) 3/4: 7.105427357601002e-14
    test 516 forward 33N (67.094, 87.142) 3/4: 2623368.28288, 9863301.12097, 86.898617, 1.084836
    test 517 reverse 33N (67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 518 forward 36N (64.721, 94.046) 3/4: 2908348.733697, 10210857.598605, 94.471204, 1.104695
    test 519 reverse 36N (64.721, 94.046) 3/4: 2.842170943040401e-14
    test 520 forward 39N (62.172, 100.691) 3/4: 3168362.707459, 10621853.317461, 102.04623, 1.124739
    test 521 reverse 39N (62.172, 100.691) 3/4: 7.105427357601002e-15
    test 522 forward 42N (59.452, 107.061) 3/4: 3391492.622467, 11093528.387239, 109.604086, 1.14345
    test 523 reverse 42N (59.452, 107.061) 3/4: 0.0
    test 524 forward 45N (56.569, 113.137) 3/4: 3566696.824822, 11619422.467571, 117.096854, 1.159166
    test 525 reverse 45N (56.569, 113.137) 3/4: 1.5888218580782548e-14
    test 526 forward 48N (53.530, 118.903) 3/4: 3685290.742854, 12189522.028618, 124.447841, 1.170375
    test 527 reverse 48N (53.530, 118.903) 3/4: 7.105427357601002e-15
    test 528 forward 51N (50.346, 124.343) 3/4: 3742386.824274, 12791126.616764, 131.557863, 1.176031
    test 529 reverse 51N (50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 530 forward 54N (47.023, 129.443) 3/4: 3737846.053669, 13410380.03778, 138.317827, 1.175799
    test 531 reverse 54N (47.023, 129.443) 3/4: 0.0
    test 532 forward 57N (43.571, 134.187) 3/4: 3676387.634221, 14034104.572541, 144.624552, 1.170121
    test 533 reverse 57N (43.571, 134.187) 3/4: 7.105427357601002e-15
    test 534 forward 60N (40.000, 138.564) 3/4: 3566810.754496, 14651410.305646, 150.395289, 1.16007
    test 535 reverse 60N (40.000, 138.564) 3/4: 2.929642751054232e-14
    test 536 forward 63N (36.319, 142.561) 3/4: 3420621.906486, 15254653.660248, 155.577129, 1.147079
    test 537 reverse 63N (36.319, 142.561) 3/4: 1.4210854715202004e-14
    test 538 forward 66N (32.539, 146.167) 3/4: 3250522.133697, 15839614.666766, 160.149958, 1.132638
    test 539 reverse 66N (32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 540 forward 69N (28.669, 149.373) 3/4: 3069132.144368, 16405050.640186, 164.124094, 1.118063
    test 541 reverse 69N (28.669, 149.373) 3/4: 3.552713678800501e-15
    test 542 forward 72N (24.721, 152.169) 3/4: 2888128.173431, 16951919.948156, 167.534978, 1.104377
    test 543 reverse 72N (24.721, 152.169) 3/4: 3.552713678800501e-15
    test 544 forward 75N (20.706, 154.548) 3/4: 2717773.256417, 17482549.021439, 170.437193, 1.09228
    test 545 reverse 75N (20.706, 154.548) 3/4: 1.0658141036401503e-14
    test 546 forward 78N (16.633, 156.504) 3/4: 2566730.586316, 17999918.486885, 172.899178, 1.082187
    test 547 reverse 78N (16.633, 156.504) 3/4: 3.552713678800501e-15
    test 548 forward 81N (12.515, 158.030) 3/4: 2442031.891673, 18507145.758, 174.99917, 1.074303
    test 549 reverse 81N (12.515, 158.030) 3/4: 5.329070518200751e-15
    test 550 forward 84N (8.362, 159.124) 3/4: 2349105.316925, 19007174.828239, 176.822266, 1.068689
    test 551 reverse 84N (8.362, 159.124) 3/4: 8.881784197001252e-15
    test 552 forward 87N (4.187, 159.781) 3/4: 2291809.478825, 19502649.329559, 178.458273, 1.06534
    test 553 reverse 87N (4.187, 159.781) 3/4: 9.769962616701378e-15
    test 554 forward 90N (0.000, 160.000) 3/4: 2272454.379192, -19995929.886042, -180.0, 1.064227
    test 555 reverse 90N (0.000, 160.000) 3/3: 0.0
    test 556 forward 93N (-4.187, 159.781) 3/4: 2291809.478825, -19502649.329559, -178.458273, 1.06534
    test 557 reverse 93N (-4.187, 159.781) 3/4: 4.440892098500626e-15
    test 558 forward 96N (-8.362, 159.124) 3/4: 2349105.316925, -19007174.828239, -176.822266, 1.068689
    test 559 reverse 96N (-8.362, 159.124) 3/4: 1.0658141036401503e-14
    test 560 forward 99N (-12.515, 158.030) 3/4: 2442031.891673, -18507145.758, -174.99917, 1.074303
    test 561 reverse 99N (-12.515, 158.030) 3/4: 1.4210854715202004e-14
    test 562 forward 102N (-16.633, 156.504) 3/4: 2566730.586316, -17999918.486885, -172.899178, 1.082187
    test 563 reverse 102N (-16.633, 156.504) 3/4: 1.4210854715202004e-14
    test 564 forward 105N (-20.706, 154.548) 3/4: 2717773.256417, -17482549.021439, -170.437193, 1.09228
    test 565 reverse 105N (-20.706, 154.548) 3/4: 1.0658141036401503e-14
    test 566 forward 108N (-24.721, 152.169) 3/4: 2888128.173431, -16951919.948156, -167.534978, 1.104377
    test 567 reverse 108N (-24.721, 152.169) 3/4: 1.7763568394002505e-14
    test 568 forward 111N (-28.669, 149.373) 3/4: 3069132.144368, -16405050.640186, -164.124094, 1.118063
    test 569 reverse 111N (-28.669, 149.373) 3/4: 1.4210854715202004e-14
    test 570 forward 114N (-32.539, 146.167) 3/4: 3250522.133697, -15839614.666766, -160.149958, 1.132638
    test 571 reverse 114N (-32.539, 146.167) 3/4: 1.4210854715202004e-14
    test 572 forward 117N (-36.319, 142.561) 3/4: 3420621.906486, -15254653.660248, -155.577129, 1.147079
    test 573 reverse 117N (-36.319, 142.561) 3/4: 1.4210854715202004e-14
    test 574 forward 120N (-40.000, 138.564) 3/4: 3566810.754496, -14651410.305646, -150.395289, 1.16007
    test 575 reverse 120N (-40.000, 138.564) 3/4: 2.842170943040401e-14
    test 576 forward 123N (-43.571, 134.187) 3/4: 3676387.634221, -14034104.572541, -144.624552, 1.170121
    test 577 reverse 123N (-43.571, 134.187) 3/4: 7.105427357601002e-15
    test 578 forward 126N (-47.023, 129.443) 3/4: 3737846.053669, -13410380.03778, -138.317827, 1.175799
    test 579 reverse 126N (-47.023, 129.443) 3/4: 0.0
    test 580 forward 129N (-50.346, 124.343) 3/4: 3742386.824274, -12791126.616764, -131.557863, 1.176031
    test 581 reverse 129N (-50.346, 124.343) 3/4: 1.4210854715202004e-14
    test 582 forward 132N (-53.530, 118.903) 3/4: 3685290.742854, -12189522.028618, -124.447841, 1.170375
    test 583 reverse 132N (-53.530, 118.903) 3/4: 7.105427357601002e-15
    test 584 forward 135N (-56.569, 113.137) 3/4: 3566696.824822, -11619422.467571, -117.096854, 1.159166
    test 585 reverse 135N (-56.569, 113.137) 3/4: 3.552713678800501e-14
    test 586 forward 138N (-59.452, 107.061) 3/4: 3391492.622467, -11093528.387239, -109.604086, 1.14345
    test 587 reverse 138N (-59.452, 107.061) 3/4: 0.0
    test 588 forward 141N (-62.172, 100.691) 3/4: 3168362.707459, -10621853.317461, -102.04623, 1.124739
    test 589 reverse 141N (-62.172, 100.691) 3/4: 7.105427357601002e-15
    test 590 forward 144N (-64.721, 94.046) 3/4: 2908348.733697, -10210857.598605, -94.471204, 1.104695
    test 591 reverse 144N (-64.721, 94.046) 3/4: 2.842170943040401e-14
    test 592 forward 147N (-67.094, 87.142) 3/4: 2623368.28288, -9863301.12097, -86.898617, 1.084836
    test 593 reverse 147N (-67.094, 87.142) 3/4: 1.4210854715202004e-14
    test 594 forward 150N (-69.282, 80.000) 3/4: 2325015.074835, -9578621.128889, -79.325231, 1.066355
    test 595 reverse 150N (-69.282, 80.000) 3/4: 8.526512829121202e-14
    test 596 forward 153N (-71.281, 72.638) 3/4: 2023752.790526, -9353559.771346, -71.732868, 1.050046
    test 597 reverse 153N (-71.281, 72.638) 3/3: 2.842170943040401e-14
    test 598 forward 156N (-73.084, 65.078) 3/4: 1728450.251911, -9182823.938232, -64.096558, 1.036319
    test 599 reverse 156N (-73.084, 65.078) 3/3: 2.0097183471152322e-14
    test 600 forward 159N (-74.686, 57.339) 3/4: 1446137.252018, -9059670.735504, -56.391495, 1.025259
    test 601 reverse 159N (-74.686, 57.339) 3/3: 2.5618982671915014e-14
    test 602 forward 162N (-76.085, 49.443) 3/4: 1181870.215451, -8976407.252949, -48.598167, 1.016714
    test 603 reverse 162N (-76.085, 49.443) 3/3: 4.4938668397781776e-14
    test 604 forward 165N (-77.274, 41.411) 3/4: 938645.229361, -8924845.3123, -40.705476, 1.010384
    test 605 reverse 165N (-77.274, 41.411) 3/3: 4.4938668397781776e-14
    test 606 forward 168N (-78.252, 33.266) 3/4: 717349.637417, -8896761.249834, -32.712011, 1.005894
    test 607 reverse 168N (-78.252, 33.266) 3/3: 7.105427357601002e-15
    test 608 forward 171N (-79.015, 25.030) 3/4: 516782.400098, -8884389.933155, -24.625783, 1.002865
    test 609 reverse 171N (-79.015, 25.030) 3/3: 1.4210854715202004e-14
    test 610 forward 174N (-79.562, 16.725) 3/4: 333788.634116, -8880946.730424, -16.462884, 1.000962
    test 611 reverse 174N (-79.562, 16.725) 3/3: 1.7763568394002505e-14
    test 612 forward 177N (-79.890, 8.374) 3/4: 163544.38007, -8881136.361771, -8.245542, 0.999927
    test 613 reverse 177N (-79.890, 8.374) 3/3: 1.7763568394002505e-15
    test 614 forward 180N (-80.000, 0.000) 3/3: 0.0, -8881585.815988, 0.0, 0.9996
    test 615 reverse 180N (-80.000, 0.000) 3/3: 0.0
    test 616 forward 183N (-79.890, -8.374) 3/4: -163544.38007, -8881136.361771, 8.245542, 0.999927
    test 617 reverse 183N (-79.890, -8.374) 3/3: 3.552713678800501e-15
    test 618 forward 186N (-79.562, -16.725) 3/4: -333788.634116, -8880946.730424, 16.462884, 1.000962
    test 619 reverse 186N (-79.562, -16.725) 3/3: 1.5888218580782548e-14
    test 620 forward 189N (-79.015, -25.030) 3/4: -516782.400098, -8884389.933155, 24.625783, 1.002865
    test 621 reverse 189N (-79.015, -25.030) 3/3: 2.0097183471152322e-14
    test 622 forward 192N (-78.252, -33.266) 3/4: -717349.637417, -8896761.249834, 32.712011, 1.005894
    test 623 reverse 192N (-78.252, -33.266) 3/3: 1.4210854715202004e-14
    test 624 forward 195N (-77.274, -41.411) 3/4: -938645.229361, -8924845.3123, 40.705476, 1.010384
    test 625 reverse 195N (-77.274, -41.411) 3/3: 4.4938668397781776e-14
    test 626 forward 198N (-76.085, -49.443) 3/4: -1181870.215451, -8976407.252949, 48.598167, 1.016714
    test 627 reverse 198N (-76.085, -49.443) 3/3: 5.1728291973635394e-14
    test 628 forward 201N (-74.686, -57.339) 3/4: -1446137.252018, -9059670.735504, 56.391495, 1.025259
    test 629 reverse 201N (-74.686, -57.339) 3/3: 2.0097183471152322e-14
    test 630 forward 204N (-73.084, -65.078) 3/4: -1728450.251911, -9182823.938232, 64.096558, 1.036319
    test 631 reverse 204N (-73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 632 forward 207N (-71.281, -72.638) 3/4: -2023752.790526, -9353559.771346, 71.732868, 1.050046
    test 633 reverse 207N (-71.281, -72.638) 3/3: 2.842170943040401e-14
    test 634 forward 210N (-69.282, -80.000) 3/4: -2325015.074835, -9578621.128889, 79.325231, 1.066355
    test 635 reverse 210N (-69.282, -80.000) 3/4: 7.105427357601002e-14
    test 636 forward 213N (-67.094, -87.142) 3/4: -2623368.28288, -9863301.12097, 86.898617, 1.084836
    test 637 reverse 213N (-67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 638 forward 216N (-64.721, -94.046) 3/4: -2908348.733697, -10210857.598605, 94.471204, 1.104695
    test 639 reverse 216N (-64.721, -94.046) 3/4: 2.842170943040401e-14
    test 640 forward 219N (-62.172, -100.691) 3/4: -3168362.707459, -10621853.317461, 102.04623, 1.124739
    test 641 reverse 219N (-62.172, -100.691) 3/4: 7.105427357601002e-15
    test 642 forward 222N (-59.452, -107.061) 3/4: -3391492.622467, -11093528.387239, 109.604086, 1.14345
    test 643 reverse 222N (-59.452, -107.061) 3/4: 0.0
    test 644 forward 225N (-56.569, -113.137) 3/4: -3566696.824822, -11619422.467571, 117.096854, 1.159166
    test 645 reverse 225N (-56.569, -113.137) 3/4: 1.5888218580782548e-14
    test 646 forward 228N (-53.530, -118.903) 3/4: -3685290.742854, -12189522.028618, 124.447841, 1.170375
    test 647 reverse 228N (-53.530, -118.903) 3/4: 7.105427357601002e-15
    test 648 forward 231N (-50.346, -124.343) 3/4: -3742386.824274, -12791126.616764, 131.557863, 1.176031
    test 649 reverse 231N (-50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 650 forward 234N (-47.023, -129.443) 3/4: -3737846.053669, -13410380.03778, 138.317827, 1.175799
    test 651 reverse 234N (-47.023, -129.443) 3/4: 0.0
    test 652 forward 237N (-43.571, -134.187) 3/4: -3676387.634221, -14034104.572541, 144.624552, 1.170121
    test 653 reverse 237N (-43.571, -134.187) 3/4: 7.105427357601002e-15
    test 654 forward 240N (-40.000, -138.564) 3/4: -3566810.754496, -14651410.305646, 150.395289, 1.16007
    test 655 reverse 240N (-40.000, -138.564) 3/4: 2.929642751054232e-14
    test 656 forward 243N (-36.319, -142.561) 3/4: -3420621.906486, -15254653.660248, 155.577129, 1.147079
    test 657 reverse 243N (-36.319, -142.561) 3/4: 1.4210854715202004e-14
    test 658 forward 246N (-32.539, -146.167) 3/4: -3250522.133697, -15839614.666766, 160.149958, 1.132638
    test 659 reverse 246N (-32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 660 forward 249N (-28.669, -149.373) 3/4: -3069132.144368, -16405050.640186, 164.124094, 1.118063
    test 661 reverse 249N (-28.669, -149.373) 3/4: 3.552713678800501e-15
    test 662 forward 252N (-24.721, -152.169) 3/4: -2888128.173431, -16951919.948156, 167.534978, 1.104377
    test 663 reverse 252N (-24.721, -152.169) 3/4: 3.552713678800501e-15
    test 664 forward 255N (-20.706, -154.548) 3/4: -2717773.256417, -17482549.021439, 170.437193, 1.09228
    test 665 reverse 255N (-20.706, -154.548) 3/4: 1.0658141036401503e-14
    test 666 forward 258N (-16.633, -156.504) 3/4: -2566730.586316, -17999918.486885, 172.899178, 1.082187
    test 667 reverse 258N (-16.633, -156.504) 3/4: 3.552713678800501e-15
    test 668 forward 261N (-12.515, -158.030) 3/4: -2442031.891673, -18507145.758, 174.99917, 1.074303
    test 669 reverse 261N (-12.515, -158.030) 3/4: 5.329070518200751e-15
    test 670 forward 264N (-8.362, -159.124) 3/4: -2349105.316925, -19007174.828239, 176.822266, 1.068689
    test 671 reverse 264N (-8.362, -159.124) 3/4: 8.881784197001252e-15
    test 672 forward 267N (-4.187, -159.781) 3/4: -2291809.478825, -19502649.329559, 178.458273, 1.06534
    test 673 reverse 267N (-4.187, -159.781) 3/4: 9.769962616701378e-15
    test 674 forward 270N (0.000, -160.000) 3/4: -2272454.379192, -19995929.886042, 180.0, 1.064227
    test 675 reverse 270N (0.000, -160.000) 3/3: 0.0
    test 676 forward 273N (4.187, -159.781) 3/4: -2291809.478825, 19502649.329559, -178.458273, 1.06534
    test 677 reverse 273N (4.187, -159.781) 3/4: 4.440892098500626e-15
    test 678 forward 276N (8.362, -159.124) 3/4: -2349105.316925, 19007174.828239, -176.822266, 1.068689
    test 679 reverse 276N (8.362, -159.124) 3/4: 1.0658141036401503e-14
    test 680 forward 279N (12.515, -158.030) 3/4: -2442031.891673, 18507145.758, -174.99917, 1.074303
    test 681 reverse 279N (12.515, -158.030) 3/4: 1.4210854715202004e-14
    test 682 forward 282N (16.633, -156.504) 3/4: -2566730.586316, 17999918.486885, -172.899178, 1.082187
    test 683 reverse 282N (16.633, -156.504) 3/4: 1.4210854715202004e-14
    test 684 forward 285N (20.706, -154.548) 3/4: -2717773.256417, 17482549.021439, -170.437193, 1.09228
    test 685 reverse 285N (20.706, -154.548) 3/4: 1.0658141036401503e-14
    test 686 forward 288N (24.721, -152.169) 3/4: -2888128.173431, 16951919.948156, -167.534978, 1.104377
    test 687 reverse 288N (24.721, -152.169) 3/4: 1.7763568394002505e-14
    test 688 forward 291N (28.669, -149.373) 3/4: -3069132.144368, 16405050.640186, -164.124094, 1.118063
    test 689 reverse 291N (28.669, -149.373) 3/4: 1.4210854715202004e-14
    test 690 forward 294N (32.539, -146.167) 3/4: -3250522.133697, 15839614.666766, -160.149958, 1.132638
    test 691 reverse 294N (32.539, -146.167) 3/4: 1.4210854715202004e-14
    test 692 forward 297N (36.319, -142.561) 3/4: -3420621.906486, 15254653.660248, -155.577129, 1.147079
    test 693 reverse 297N (36.319, -142.561) 3/4: 1.4210854715202004e-14
    test 694 forward 300N (40.000, -138.564) 3/4: -3566810.754496, 14651410.305646, -150.395289, 1.16007
    test 695 reverse 300N (40.000, -138.564) 3/4: 2.842170943040401e-14
    test 696 forward 303N (43.571, -134.187) 3/4: -3676387.634221, 14034104.572541, -144.624552, 1.170121
    test 697 reverse 303N (43.571, -134.187) 3/4: 7.105427357601002e-15
    test 698 forward 306N (47.023, -129.443) 3/4: -3737846.053669, 13410380.03778, -138.317827, 1.175799
    test 699 reverse 306N (47.023, -129.443) 3/4: 0.0
    test 700 forward 309N (50.346, -124.343) 3/4: -3742386.824274, 12791126.616764, -131.557863, 1.176031
    test 701 reverse 309N (50.346, -124.343) 3/4: 1.4210854715202004e-14
    test 702 forward 312N (53.530, -118.903) 3/4: -3685290.742854, 12189522.028618, -124.447841, 1.170375
    test 703 reverse 312N (53.530, -118.903) 3/4: 7.105427357601002e-15
    test 704 forward 315N (56.569, -113.137) 3/4: -3566696.824822, 11619422.467571, -117.096854, 1.159166
    test 705 reverse 315N (56.569, -113.137) 3/4: 3.552713678800501e-14
    test 706 forward 318N (59.452, -107.061) 3/4: -3391492.622467, 11093528.387239, -109.604086, 1.14345
    test 707 reverse 318N (59.452, -107.061) 3/4: 0.0
    test 708 forward 321N (62.172, -100.691) 3/4: -3168362.707459, 10621853.317461, -102.04623, 1.124739
    test 709 reverse 321N (62.172, -100.691) 3/4: 7.105427357601002e-15
    test 710 forward 324N (64.721, -94.046) 3/4: -2908348.733697, 10210857.598605, -94.471204, 1.104695
    test 711 reverse 324N (64.721, -94.046) 3/4: 2.842170943040401e-14
    test 712 forward 327N (67.094, -87.142) 3/4: -2623368.28288, 9863301.12097, -86.898617, 1.084836
    test 713 reverse 327N (67.094, -87.142) 3/4: 1.4210854715202004e-14
    test 714 forward 330N (69.282, -80.000) 3/4: -2325015.074835, 9578621.128889, -79.325231, 1.066355
    test 715 reverse 330N (69.282, -80.000) 3/4: 8.526512829121202e-14
    test 716 forward 333N (71.281, -72.638) 3/4: -2023752.790526, 9353559.771346, -71.732868, 1.050046
    test 717 reverse 333N (71.281, -72.638) 3/3: 2.842170943040401e-14
    test 718 forward 336N (73.084, -65.078) 3/4: -1728450.251911, 9182823.938232, -64.096558, 1.036319
    test 719 reverse 336N (73.084, -65.078) 3/3: 2.0097183471152322e-14
    test 720 forward 339N (74.686, -57.339) 3/4: -1446137.252018, 9059670.735504, -56.391495, 1.025259
    test 721 reverse 339N (74.686, -57.339) 3/3: 2.5618982671915014e-14
    test 722 forward 342N (76.085, -49.443) 3/4: -1181870.215451, 8976407.252949, -48.598167, 1.016714
    test 723 reverse 342N (76.085, -49.443) 3/3: 4.4938668397781776e-14
    test 724 forward 345N (77.274, -41.411) 3/4: -938645.229361, 8924845.3123, -40.705476, 1.010384
    test 725 reverse 345N (77.274, -41.411) 3/3: 4.4938668397781776e-14
    test 726 forward 348N (78.252, -33.266) 3/4: -717349.637417, 8896761.249834, -32.712011, 1.005894
    test 727 reverse 348N (78.252, -33.266) 3/3: 7.105427357601002e-15
    test 728 forward 351N (79.015, -25.030) 3/4: -516782.400098, 8884389.933155, -24.625783, 1.002865
    test 729 reverse 351N (79.015, -25.030) 3/3: 1.4210854715202004e-14
    test 730 forward 354N (79.562, -16.725) 3/4: -333788.634116, 8880946.730424, -16.462884, 1.000962
    test 731 reverse 354N (79.562, -16.725) 3/3: 1.7763568394002505e-14
    test 732 forward 357N (79.890, -8.374) 3/4: -163544.38007, 8881136.361771, -8.245542, 0.999927
    test 733 reverse 357N (79.890, -8.374) 3/3: 1.7763568394002505e-15
    test 734 forward 360N (80.000, 0.000) 3/3: 0.0, 8881585.815988, 0.0, 0.9996
    test 735 reverse 360N (80.000, 0.000) 3/3: 0.0
    test 736 max: 8.526512829121202e-14  FAILED, KNOWN, expected 9e-14

    test 737 forward: 6208422.5374, 5452954.287187, 41.077484, 1.511911
    test 738 reverse: 30.244228, 60.169664, 41.479185, 1.510346

    3 of 738 testKtm.py tests (0.4%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 556.399 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLatLon.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 11
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 11
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 11
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 11
# lazily imported pygeodesy.Height from .units by testLatLon.py line 11
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 11
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 11
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 11
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 11
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 11
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testLatLon.py line 629
# lazily imported pygeodesy.ellipsoidalNvector by testLatLon.py line 629
# lazily imported pygeodesy.sphericalNvector by testLatLon.py line 629
# lazily imported pygeodesy.sphericalTrigonometry by testLatLon.py line 629

    testing testLatLon.py 23.03.27 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 23.04.11)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: can't multiply sequence by non-int of type 'float'  FAILED, KNOWN, expected incompatible ...
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 155 compassAngleTo: <class 'float'>
    test 156 cosineLawTo: <class 'float'>
    test 157 euclideanTo: <class 'float'>
    test 158 flatLocalTo: <class 'float'>
    test 159 flatPolarTo: <class 'float'>
    test 160 haversineTo: <class 'float'>
    test 161 hubenyTo: <class 'float'>
    test 162 vincentysTo: <class 'float'>
    test 163 toVector: (0.615661, 0.0, 0.788011)
    test 164 toVector3d: (0.61566, 0.0, 0.78801)
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 170 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)
    test 171 circum4 (pygeodesy.sphericalNvector) .radius: 3185505.323  FAILED, KNOWN, expected 3184256.748
    test 172 circum4 (pygeodesy.sphericalNvector) .center: 42.674561°N, 002.495395°E, -3185503.45m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 173 circum4 (pygeodesy.sphericalNvector) .rank: 3
    test 174 circum4 (pygeodesy.sphericalNvector) .residuals: ()
    test 175 circum4 (pygeodesy.sphericalNvector) .d1: 4886.695  FAILED, KNOWN, expected 57818.033
    test 176 circum4 (pygeodesy.sphericalNvector) .d2: 4886.695  FAILED, KNOWN, expected 57834.176
    test 177 circum4 (pygeodesy.sphericalNvector) .d3: 4886.695  FAILED, KNOWN, expected 57830.992
    test 178 circum4 (pygeodesy.sphericalNvector) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 179 circum4 (pygeodesy.sphericalNvector) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 180 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 181 circin6 (pygeodesy.sphericalNvector) .rB+rC: 1564564.352
    test 182 circin6 (pygeodesy.sphericalNvector) .rC+pA: 1110540.003
    test 183 circin6 (pygeodesy.sphericalNvector) .rA+rB: 1110540.003
    test 184 circin6 (pygeodesy.sphericalNvector) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 185 circin6 (pygeodesy.sphericalNvector) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 186 circin6 (pygeodesy.sphericalNvector) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 187 circin6 (pygeodesy.sphericalNvector) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 188 circin6 (pygeodesy.sphericalNvector) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 189 circin6 (pygeodesy.sphericalNvector) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 190 circin6 (pygeodesy.sphericalNvector) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 191 circin6 (pygeodesy.sphericalNvector) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 192 circin6 (pygeodesy.sphericalNvector) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    test 193 area cw/ccw: 1.0

    testLatLon(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 194 isEllipsoidal: False
    test 195 isSpherical: True
    test 196 lat/lonDMS: 52.20472°N, 000.14056°E
    test 197 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 198 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 199 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 200 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 201 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 202 isequalTo: True
    test 203 isequalTo: True
    test 204 latlon2: 52.20472, 0.14056
    test 205 latlon2: 52.2047, 0.1406
    test 206 latlon2: 52.205, 0.141
    test 207 latlon2: 52.2, 0.14
    test 208 latlon2: 52.2, 0.1
    test 209 latlon2: 52.0, 0.0
    test 210 chordTo: 12036677.26
    test 211 chordTo: 12036463.78
    test 212 initialBearingTo: 156.1666
    test 213 initialBearingTo: 65.8921
    test 214 initialBearingTo: 0.0
    test 215 initialBearingTo: 180.0
    test 216 finalBearingTo: 157.8904
    test 217 finalBearingTo: 93.8581
    test 218 bearingTo2: 156.1666, 157.8904
    test 219 ispolar: True
    test 220 copy: True
    test 221 __eq__: True
    test 222 __ne__: False
    test 223 equirectangularTo: 404329.56
    test 224 distanceTo: 404279.720589
    test 225 distanceTo: 404279.720589
    test 226 distanceTo: 2145
    test 227 antipodal: False
    test 228 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 229 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 230 antipodal: False
    test 231 distanceTo dateline: 9491735
    test 232 distanceTo unrolled: 9491735
    test 233 distanceTo: 18013602.92
    test 234 distanceTo: 20015114.35
    test 235 intermediateTo: 51.372084°N, 000.707337°E
    test 236 intermediateTo: True
    test 237 intermediateTo: 404279.721
    test 238 intermediateTo+5: 35.160975°N, 008.989542°E
    test 239 intermediateTo+5: 5.000
    test 240 intermediateTo-4: 64.911647°N, 013.726301°W
    test 241 intermediateTo-4: 4.000
    test 242 intermediateTo-h: 125.000
    test 243 midpointTo: 50.536327°N, 001.274614°E
    test 244 destination: 51.513546°N, 000.098345°W
    test 245 destination: 51°30′49″N, 000°05′54″W
    test 246 destination: 34°37′N, 116°33′W
    test 247 destination: 34.613647°N, 116.55116°W
    test 248 destination: 0.604122N, 2.034201W
    test 249 destination: 31.96383509°N, 064.37329146°E
    test 250 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 251 alongTrackDistanceTo: 62331.58
    test 252 alongTrackDistanceTo: 99.588
    test 253 alongTrackDistanceTo: -7702.7
    test 254 alongTrackDistanceTo: 7587.6
    test 255 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 256 crossTrackDistanceTo: -307.55
    test 257 crossTrackDistanceTo: 7.4524
    test 258 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 259 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 260 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 261 chordTo: 124799.103
    test 262 cosineAndoyerLambertTo: 124801.098
    test 263 cosineAndoyerLambertTo: 124801.098
    test 264 cosineForsyheAndoyerLambertTo: 124801.098
    test 265 cosineForsyheAndoyerLambertTo: 124801.098
    test 266 cosineLawTo: 124801.098
    test 267 cosineLawTo: 124801.098
    test 268 equirectangularTo: 124804.754
    test 269 equirectangularTo: 124804.754
    test 270 euclideanTo: 130015.089
    test 271 euclideanTo: 130015.089
    test 272 flatLocalTo: 124804.754
    test 273 flatLocalTo: 124804.754
    test 274 flatPolarTo: 133663.257
    test 275 flatPolarTo: 133663.257
    test 276 hartzell: 53.3206°N, 001.7297°W
    test 277 hartzell: 53.3206°N, 001.7297°W
    test 278 height4: 0.0
    test 279 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 280 height4: 53°19′14.2″N, 001°43′46.9″W
    test 281 height4: 53°19′14.2″N, 001°43′46.9″W
    test 282 haversineTo: 124801.098
    test 283 haversineTo: 124801.098
    test 284 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 285 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 286 thomasTo: 124801.098
    test 287 thomasTo: 124801.098
    test 288 vincentysTo: 124801.098
    test 289 vincentysTo: 124801.098
    test 290 isclockwise: False
    test 291 isclockwise*: False
    test 292 isclockwise: True
    test 293 isclockwise*: True
    test 294 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 295 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 296 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 297 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 298 isconvex: False
    test 299 isconvex*: False
    test 300 isconvex: True
    test 301 isconvex*: True
    test 302 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 303 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 304 isenclosedBy1: True
    test 305 isenclosedBy1*: True
    test 306 isenclosedBy2: False
    test 307 isenclosedBy2*: False
    test 308 isenclosedBy3: False
    test 309 isenclosedBy3*: False
    test 310 isenclosedBy4: False
    test 311 isenclosedBy4*: False
    test 312 isenclosedBy5: False
    test 313 isenclosedBy5*: False
    test 314 isenclosedBy6: True
    test 315 isenclosedBy6*: True
    test 316 isenclosedBy7: True
    test 317 isenclosedBy7*: True
    test 318 isenclosedBy-CCW: True
    test 319 isenclosedBy-CW : True
    test 320 isenclosedBy-CCW: True
    test 321 initialBearingTo: 102.432182
    test 322 compassAngleTo: 100.017
    test 323 compassAngleTo: 105.599
    test 324 initialBearingTo: 288.715918
    test 325 compassAngleTo: 280.017
    test 326 compassAngleTo: 285.599
    test 327 equirectangularTo: 592.185
    test 328 distanceTo: 591.831
    test 329 bearingTo: 0.0
    test 330 compassAngleTo: 0.0
    test 331 bearingTo: 45.0
    test 332 compassAngleTo: 45.0
    test 333 bearingTo: 90.0
    test 334 compassAngleTo: 90.0
    test 335 bearingTo: 180.0
    test 336 compassAngleTo: 180.0
    test 337 bearingTo: 225.0
    test 338 compassAngleTo: 225.0
    test 339 bearingTo: 315.0
    test 340 compassAngleTo: 315.0
    test 341 bearingTo: 270.0
    test 342 compassAngleTo: 270.0
    test 343 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 344 compassAngleTo: 359.4
    test 345 latlon2: (53.0, 1.0)
    test 346 philam2: (0.93, 0.02)
    test 347 bearingTo: 31
    test 348 compassAngleTo: 31
    test 349 compassAngleTo: 45

    test 350 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 351 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 352 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 353 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 354 isequalTo: <class 'bool'>
    test 355 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 356 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 357 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 358 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 359 compassAngleTo: <class 'float'>
    test 360 cosineLawTo: <class 'float'>
    test 361 euclideanTo: <class 'float'>
    test 362 flatLocalTo: <class 'float'>
    test 363 flatPolarTo: <class 'float'>
    test 364 haversineTo: <class 'float'>
    test 365 hubenyTo: <class 'float'>
    test 366 vincentysTo: <class 'float'>
    test 367 toNvector: (0.61566, 0.0, 0.78801)
    test 368 toVector: (0.615661, 0.0, 0.788011)
    test 369 toVector3d: (0.61566, 0.0, 0.78801)

    test 370 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 371 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 372 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 373 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 374 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 375 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 376 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 377 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 378 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 379 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 380 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 381 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 382 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 383 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 384 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 385 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 386 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 387 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 388 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 389 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 390 circum3 (pygeodesy.sphericalTrigonometry) .radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 391 circum3 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 392 circum3 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 18.983)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 393 circum3 (pygeodesy.sphericalTrigonometry) .d1: 57691.282  FAILED, KNOWN, expected 57792.858
    test 394 circum3 (pygeodesy.sphericalTrigonometry) .d2: 57691.282  FAILED, KNOWN, expected 57792.859
    test 395 circum3 (pygeodesy.sphericalTrigonometry) .d3: 57691.282  FAILED, KNOWN, expected 57792.859
    test 396 circum3 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 397 circum3 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 398 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 399 circum4 (pygeodesy.sphericalTrigonometry) .radius: 3185634.993  FAILED, KNOWN, expected 3184256.748
    test 400 circum4 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -3185373.78m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 401 circum4 (pygeodesy.sphericalTrigonometry) .rank: 3
    test 402 circum4 (pygeodesy.sphericalTrigonometry) .residuals: ()
    test 403 circum4 (pygeodesy.sphericalTrigonometry) .d1: 57691.283  FAILED, KNOWN, expected 57818.033
    test 404 circum4 (pygeodesy.sphericalTrigonometry) .d2: 57691.283  FAILED, KNOWN, expected 57834.176
    test 405 circum4 (pygeodesy.sphericalTrigonometry) .d3: 57691.283  FAILED, KNOWN, expected 57830.992
    test 406 circum4 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 407 circum4 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 408 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 409 circin6 (pygeodesy.sphericalTrigonometry) .rB+rC: 1564564.352
    test 410 circin6 (pygeodesy.sphericalTrigonometry) .rC+pA: 1110540.003
    test 411 circin6 (pygeodesy.sphericalTrigonometry) .rA+rB: 1110540.003
    test 412 circin6 (pygeodesy.sphericalTrigonometry) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 413 circin6 (pygeodesy.sphericalTrigonometry) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 414 circin6 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 415 circin6 (pygeodesy.sphericalTrigonometry) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 416 circin6 (pygeodesy.sphericalTrigonometry) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 417 circin6 (pygeodesy.sphericalTrigonometry) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 418 circin6 (pygeodesy.sphericalTrigonometry) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 419 circin6 (pygeodesy.sphericalTrigonometry) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 420 circin6 (pygeodesy.sphericalTrigonometry) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    test 421 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 422 isEllipsoidal: True
    test 423 isSpherical: False
    test 424 lat/lonDMS: 52.20472°N, 000.14056°E
    test 425 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 426 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 427 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 428 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 429 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 430 isequalTo: True
    test 431 isequalTo: True
    test 432 latlon2: 52.20472, 0.14056
    test 433 latlon2: 52.2047, 0.1406
    test 434 latlon2: 52.205, 0.141
    test 435 latlon2: 52.2, 0.14
    test 436 latlon2: 52.2, 0.1
    test 437 latlon2: 52.0, 0.0
    test 438 chordTo: 12029263.15
    test 439 chordTo: 12029049.69
    test 440 copy: True
    test 441 __eq__: True
    test 442 __ne__: False
    test 443 equirectangularTo: 404329.56
    test 444 distanceTo: 404279.720589
    test 445 distanceTo: 404279.720589
    test 446 distanceTo: 3972863
    test 447 distanceTo: 18013602.92
    test 448 distanceTo: 20015114.35  FAILED, KNOWN, expected 20003931.46
    test 449 intermediateTo: 51.372294°N, 000.707192°E
    test 450 intermediateTo: True
    test 451 intermediateTo: 404279.721
    test 452 intermediateTo+5: 35.560239°N, 008.833512°E
    test 453 intermediateTo+5: 4.885
    test 454 intermediateTo-4: 64.570387°N, 013.156352°W
    test 455 intermediateTo-4: 3.885
    test 456 intermediateTo-h: 125.000
    test 457 midpointTo: 50.536327°N, 001.274614°E
    test 458 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 459 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 460 chordTo: 125203.963
    test 461 cosineAndoyerLambertTo: 125205.962
    test 462 cosineAndoyerLambertTo: 125205.962
    test 463 cosineForsyheAndoyerLambertTo: 125205.965
    test 464 cosineForsyheAndoyerLambertTo: 125205.965
    test 465 cosineLawTo: 124801.098
    test 466 cosineLawTo: 124801.098
    test 467 equirectangularTo: 124804.754
    test 468 equirectangularTo: 124804.754
    test 469 euclideanTo: 130015.089
    test 470 euclideanTo: 130015.089
    test 471 flatLocalTo: 125209.633
    test 472 flatLocalTo: 125209.633
    test 473 flatPolarTo: 133663.257
    test 474 flatPolarTo: 133663.257
    test 475 hartzell: 53.3206°N, 001.7297°W
    test 476 hartzell: 53.349541°N, 001.7297°W
    test 477 height4: 0.0
    test 478 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 479 height4: 53°19′14.2″N, 001°43′46.9″W
    test 480 height4: 53°19′14.2″N, 001°43′46.9″W
    test 481 haversineTo: 124801.098
    test 482 haversineTo: 124801.098
    test 483 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 484 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 485 thomasTo: 125206.188
    test 486 thomasTo: 125206.188
    test 487 vincentysTo: 124801.098
    test 488 vincentysTo: 124801.098
    test 489 isclockwise: False
    test 490 isclockwise*: False
    test 491 isclockwise: True
    test 492 isclockwise*: True
    test 493 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 494 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
./test/testLatLon.py:617: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = a(reversed(b))
./test/testLatLon.py:618: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  f = a(b)  # ccw
    test 495 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 496 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 497 isconvex: False
    test 498 isconvex*: False
    test 499 isconvex: True
    test 500 isconvex*: True
    test 501 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 502 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 503 isenclosedBy1: True
    test 504 isenclosedBy1*: True
    test 505 isenclosedBy2: False
    test 506 isenclosedBy2*: False
    test 507 isenclosedBy3: False
    test 508 isenclosedBy3*: False
    test 509 isenclosedBy4: False
    test 510 isenclosedBy4*: False
    test 511 isenclosedBy5: False
    test 512 isenclosedBy5*: False
    test 513 isenclosedBy6: True
    test 514 isenclosedBy6*: True
    test 515 isenclosedBy7: True
    test 516 isenclosedBy7*: True
    test 517 isenclosedBy-CCW: True
    test 518 isenclosedBy-CW : True
    test 519 isenclosedBy-CCW: True
    test 520 compassAngleTo: 100.017
    test 521 compassAngleTo: 105.599
    test 522 compassAngleTo: 280.017
    test 523 compassAngleTo: 285.599
    test 524 equirectangularTo: 592.185
    test 525 distanceTo: 591.831
    test 526 compassAngleTo: 0.0
    test 527 compassAngleTo: 45.0
    test 528 compassAngleTo: 90.0
    test 529 compassAngleTo: 180.0
    test 530 compassAngleTo: 225.0
    test 531 compassAngleTo: 315.0
    test 532 compassAngleTo: 270.0
    test 533 compassAngleTo: 359.4
    test 534 latlon2: (53.0, 1.0)
    test 535 philam2: (0.93, 0.02)
    test 536 compassAngleTo: 31
    test 537 compassAngleTo: 45

    test 538 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 539 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 540 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 541 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 542 isequalTo: <class 'bool'>
    test 543 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 544 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 545 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 546 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 547 compassAngleTo: <class 'float'>
    test 548 cosineLawTo: <class 'float'>
    test 549 euclideanTo: <class 'float'>
    test 550 flatLocalTo: <class 'float'>
    test 551 flatPolarTo: <class 'float'>
    test 552 haversineTo: <class 'float'>
    test 553 hubenyTo: <class 'float'>
    test 554 vincentysTo: <class 'float'>
    test 555 toVector: (0.615661, 0.0, 0.788011)
    test 556 toVector3d: (0.61566, 0.0, 0.78801)
    test 557 trilaterate5 (pygeodesy.ellipsoidalNvector) .min: 223.305
    test 558 trilaterate5 (pygeodesy.ellipsoidalNvector) .point: 42.67456065°N, 002.49539502°E
    test 559 trilaterate5 (pygeodesy.ellipsoidalNvector) .min- is .maxPoint: True
    test 560 trilaterate5 (pygeodesy.ellipsoidalNvector) .n: 1
    test 561 trilaterate5 (pygeodesy.ellipsoidalNvector) .error: ellipsoidalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, ellipsoidalBase.LatLonEllipsoidalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 562 radii11: Radii11Tuple(rA=7705.84217, rB=1367.057272, rC=498.160185, cR=4897.488519, rIn=740.470746, riS=179.544791, roS=5964.029657, a=1865.217457, b=8204.002354, c=9072.899442, s=9571.059626)
    test 563 circum4 (pygeodesy.ellipsoidalNvector) .radius: 3184196.839  FAILED, KNOWN, expected 3184256.748
    test 564 circum4 (pygeodesy.ellipsoidalNvector) .center: 42.674776°N, 002.495488°E, -3184194.95m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 565 circum4 (pygeodesy.ellipsoidalNvector) .rank: 3
    test 566 circum4 (pygeodesy.ellipsoidalNvector) .residuals: ()
    test 567 circum4 (pygeodesy.ellipsoidalNvector) .d1: 4886.122  FAILED, KNOWN, expected 57818.033
    test 568 circum4 (pygeodesy.ellipsoidalNvector) .d2: 4904.641  FAILED, KNOWN, expected 57834.176
    test 569 circum4 (pygeodesy.ellipsoidalNvector) .d3: 4909.920  FAILED, KNOWN, expected 57830.992
    test 570 circum4 (pygeodesy.ellipsoidalNvector) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 571 circum4 (pygeodesy.ellipsoidalNvector) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 572 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 573 circin6 (pygeodesy.ellipsoidalNvector) .rB+rC: 1561159.315
    test 574 circin6 (pygeodesy.ellipsoidalNvector) .rC+pA: 1111782.535
    test 575 circin6 (pygeodesy.ellipsoidalNvector) .rA+rB: 1104451.745
    test 576 circin6 (pygeodesy.ellipsoidalNvector) .radius: 325058.721
    test 577 circin6 (pygeodesy.ellipsoidalNvector) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 578 circin6 (pygeodesy.ellipsoidalNvector) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 579 circin6 (pygeodesy.ellipsoidalNvector) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 580 circin6 (pygeodesy.ellipsoidalNvector) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 581 circin6 (pygeodesy.ellipsoidalNvector) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 582 circin6 (pygeodesy.ellipsoidalNvector) .dA: 327992.318  FAILED, KNOWN, expected 327263.596
    test 583 circin6 (pygeodesy.ellipsoidalNvector) .dB: 327863.711  FAILED, KNOWN, expected 326036.153
    test 584 circin6 (pygeodesy.ellipsoidalNvector) .dC: 325653.216  FAILED, KNOWN, expected 326020.432

    testLatLon(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 585 isEllipsoidal: True
    test 586 isSpherical: False
    test 587 lat/lonDMS: 52.20472°N, 000.14056°E
    test 588 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 589 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 590 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 591 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 592 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 593 isequalTo: True
    test 594 isequalTo: True
    test 595 latlon2: 52.20472, 0.14056
    test 596 latlon2: 52.2047, 0.1406
    test 597 latlon2: 52.205, 0.141
    test 598 latlon2: 52.2, 0.14
    test 599 latlon2: 52.2, 0.1
    test 600 latlon2: 52.0, 0.0
    test 601 chordTo: 12029263.15
    test 602 chordTo: 12029049.69
    test 603 initialBearingTo: 156.1106
    test 604 initialBearingTo: 65.9335
    test 605 initialBearingTo: 0.0
    test 606 initialBearingTo: 180.0
    test 607 finalBearingTo: 157.8345
    test 608 finalBearingTo: 93.9034
    test 609 bearingTo2: 156.1106, 157.8345
    test 610 ispolar: True
    test 611 copy: True
    test 612 __eq__: True
    test 613 __ne__: False
    test 614 equirectangularTo: 404329.56
    test 615 distanceTo: 404607.805988
    test 616 distanceTo: 404607.805988
    test 617 distanceTo: 3981601
    test 618 antipodal: False
    test 619 distanceTo dateline: 19959679.267
    test 620 distanceTo unrolled: 19959679.267
    test 621 antipodal: False
    test 622 distanceTo dateline: 9513998
    test 623 distanceTo unrolled: 9513998
    test 624 distanceTo: 18012714.66
    test 625 distanceTo: ambiguous: LatLon(00°00′00.0″N, 000°00′00.0″E) antipodal to LatLon(00°00′00.0″N, 180°00′00.0″E)  FAILED, KNOWN, expected ambiguous, antipodal ...
    test 626 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 627 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 628 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 629 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 630 intermediateTo: 51.372275°N, 000.707253°E
    test 631 intermediateTo: True
    test 632 intermediateTo: 404607.806
    test 633 intermediateTo+5: 35.139582°N, 008.994368°E
    test 634 intermediateTo+5: 5.000
    test 635 intermediateTo-4: 64.894124°N, 013.705689°W
    test 636 intermediateTo-4: 4.000
    test 637 intermediateTo-h: 125.000
    test 638 midpointTo: 50.536583°N, 001.274507°E
    test 639 destination: 51.513526°N, 000.098038°W
    test 640 destination: 51°30′49″N, 000°05′53″W
    test 641 destination: 33°57′N, 118°24′W
    test 642 destination: 33.950367°N, 118.399012°W
    test 643 destination: 0.592546N, 2.066453W
    test 644 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 645 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 646 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 647 chordTo: 125203.963
    test 648 cosineAndoyerLambertTo: 125205.962
    test 649 cosineAndoyerLambertTo: 125205.962
    test 650 cosineForsyheAndoyerLambertTo: 125205.965
    test 651 cosineForsyheAndoyerLambertTo: 125205.965
    test 652 cosineLawTo: 124801.098
    test 653 cosineLawTo: 124801.098
    test 654 equirectangularTo: 124804.754
    test 655 equirectangularTo: 124804.754
    test 656 euclideanTo: 130015.089
    test 657 euclideanTo: 130015.089
    test 658 flatLocalTo: 125209.633
    test 659 flatLocalTo: 125209.633
    test 660 flatPolarTo: 133663.257
    test 661 flatPolarTo: 133663.257
    test 662 hartzell: 53.3206°N, 001.7297°W
    test 663 hartzell: 53.349541°N, 001.7297°W
    test 664 height4: 0.0
    test 665 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 666 height4: 53°19′14.2″N, 001°43′46.9″W
    test 667 height4: 53°19′14.2″N, 001°43′46.9″W
    test 668 haversineTo: 124801.098
    test 669 haversineTo: 124801.098
    test 670 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 671 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 672 thomasTo: 125206.188
    test 673 thomasTo: 125206.188
    test 674 vincentysTo: 124801.098
    test 675 vincentysTo: 124801.098
    test 676 isclockwise: False
    test 677 isclockwise*: False
    test 678 isclockwise: True
    test 679 isclockwise*: True
    test 680 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 681 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 682 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 683 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 684 isconvex: False
    test 685 isconvex*: False
    test 686 isconvex: True
    test 687 isconvex*: True
    test 688 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 689 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 690 isenclosedBy1: True
    test 691 isenclosedBy1*: True
    test 692 isenclosedBy2: False
    test 693 isenclosedBy2*: False
    test 694 isenclosedBy3: False
    test 695 isenclosedBy3*: False
    test 696 isenclosedBy4: False
    test 697 isenclosedBy4*: False
    test 698 isenclosedBy5: False
    test 699 isenclosedBy5*: False
    test 700 isenclosedBy6: True
    test 701 isenclosedBy6*: True
    test 702 isenclosedBy7: True
    test 703 isenclosedBy7*: True
    test 704 isenclosedBy-CCW: True
    test 705 isenclosedBy-CW : True
    test 706 isenclosedBy-CCW: True
    test 707 initialBearingTo: 102.392291
    test 708 compassAngleTo: 100.017
    test 709 compassAngleTo: 105.599
    test 710 initialBearingTo: 288.676039
    test 711 compassAngleTo: 280.017
    test 712 compassAngleTo: 285.599
    test 713 equirectangularTo: 592.185
    test 714 distanceTo: 593.571
    test 715 bearingTo: 0.0
    test 716 compassAngleTo: 0.0
    test 717 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 718 compassAngleTo: 45.0
    test 719 bearingTo: 90.0
    test 720 compassAngleTo: 90.0
    test 721 bearingTo: 180.0
    test 722 compassAngleTo: 180.0
    test 723 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 724 compassAngleTo: 225.0
    test 725 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 726 compassAngleTo: 315.0
    test 727 bearingTo: 270.0
    test 728 compassAngleTo: 270.0
    test 729 bearingTo: 360.0  FAILED, KNOWN, expected 359.4
    test 730 compassAngleTo: 359.4
    test 731 latlon2: (53.0, 1.0)
    test 732 philam2: (0.93, 0.02)
    test 733 bearingTo: 31
    test 734 compassAngleTo: 31
    test 735 compassAngleTo: 45

    test 736 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 737 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 738 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 739 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 740 isequalTo: <class 'bool'>
    test 741 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 742 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 743 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 744 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 745 compassAngleTo: <class 'float'>
    test 746 cosineLawTo: <class 'float'>
    test 747 euclideanTo: <class 'float'>
    test 748 flatLocalTo: <class 'float'>
    test 749 flatPolarTo: <class 'float'>
    test 750 haversineTo: <class 'float'>
    test 751 hubenyTo: <class 'float'>
    test 752 vincentysTo: <class 'float'>
    test 753 toNvector: (0.615661, 0.0, 0.788011)
    test 754 toVector: (0.615661, 0.0, 0.788011)
    test 755 toVector3d: (0.61566, 0.0, 0.78801)

    test 756 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 305.091
    test 757 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66933643°N, 002.48620262°E
    test 758 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1592.545
    test 759 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.65141232°N, 002.46816989°E
    test 760 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 3
    test 761 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 127.229
    test 762 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 152.612
    test 763 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 764 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 765 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 2400.293
    test 766 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 2400.293
    test 767 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.66128984°N, 002.47973818°E
    test 768 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min- is .maxPoint: True
    test 769 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 1
    test 770 trilaterate5 (pygeodesy.ellipsoidalVincenty) .min: 1343.743
    test 771 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.69131964°N, 002.50112167°E
    test 772 trilaterate5 (pygeodesy.ellipsoidalVincenty) .max: 1445.554
    test 773 trilaterate5 (pygeodesy.ellipsoidalVincenty) .point: 42.67815375°N, 002.49950041°E
    test 774 trilaterate5 (pygeodesy.ellipsoidalVincenty) .n: 2
    test 775 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 776 circum3 (pygeodesy.ellipsoidalVincenty) .radius: 57792.067
    test 777 circum3 (pygeodesy.ellipsoidalVincenty) .center: 43.053532°N, 002.943255°E, -261.66m
    test 778 circum3 (pygeodesy.ellipsoidalVincenty) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 779 circum3 (pygeodesy.ellipsoidalVincenty) .d1: 57792.858
    test 780 circum3 (pygeodesy.ellipsoidalVincenty) .d2: 57792.859
    test 781 circum3 (pygeodesy.ellipsoidalVincenty) .d3: 57792.859
    test 782 circum3 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 783 circum3 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>

    test 784 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 785 circum4 (pygeodesy.ellipsoidalVincenty) .radius: 3184256.748
    test 786 circum4 (pygeodesy.ellipsoidalVincenty) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 787 circum4 (pygeodesy.ellipsoidalVincenty) .rank: 3
    test 788 circum4 (pygeodesy.ellipsoidalVincenty) .residuals: ()
    test 789 circum4 (pygeodesy.ellipsoidalVincenty) .d1: 57818.033
    test 790 circum4 (pygeodesy.ellipsoidalVincenty) .d2: 57834.176
    test 791 circum4 (pygeodesy.ellipsoidalVincenty) .d3: 57830.992
    test 792 circum4 (pygeodesy.ellipsoidalVincenty) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 793 circum4 (pygeodesy.ellipsoidalVincenty) .Ecef: <class 'pygeodesy.ecef.EcefVeness'>
    test 794 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 795 circin6 (pygeodesy.ellipsoidalVincenty) .rB+rC: 1561159.315
    test 796 circin6 (pygeodesy.ellipsoidalVincenty) .rC+pA: 1111782.535
    test 797 circin6 (pygeodesy.ellipsoidalVincenty) .rA+rB: 1104451.745
    test 798 circin6 (pygeodesy.ellipsoidalVincenty) .radius: 325058.721
    test 799 circin6 (pygeodesy.ellipsoidalVincenty) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 800 circin6 (pygeodesy.ellipsoidalVincenty) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 801 circin6 (pygeodesy.ellipsoidalVincenty) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 802 circin6 (pygeodesy.ellipsoidalVincenty) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 803 circin6 (pygeodesy.ellipsoidalVincenty) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 804 circin6 (pygeodesy.ellipsoidalVincenty) .dA: 327263.596
    test 805 circin6 (pygeodesy.ellipsoidalVincenty) .dB: 326036.153
    test 806 circin6 (pygeodesy.ellipsoidalVincenty) .dC: 326020.432

    test 807 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 808 isEllipsoidal: True
    test 809 isSpherical: False
    test 810 lat/lonDMS: 52.20472°N, 000.14056°E
    test 811 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 812 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 813 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 814 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 815 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 816 isequalTo: True
    test 817 isequalTo: True
    test 818 latlon2: 52.20472, 0.14056
    test 819 latlon2: 52.2047, 0.1406
    test 820 latlon2: 52.205, 0.141
    test 821 latlon2: 52.2, 0.14
    test 822 latlon2: 52.2, 0.1
    test 823 latlon2: 52.0, 0.0
    test 824 chordTo: 12029263.15
    test 825 chordTo: 12029049.69
    test 826 initialBearingTo: 156.1106
    test 827 initialBearingTo: 65.9335
    test 828 initialBearingTo: 0.0
    test 829 initialBearingTo: 180.0
    test 830 finalBearingTo: 157.8345
    test 831 finalBearingTo: 93.9034
    test 832 bearingTo2: 156.1106, 157.8345
    test 833 ispolar: True
    test 834 copy: True
    test 835 __eq__: True
    test 836 __ne__: False
    test 837 equirectangularTo: 404329.56
    test 838 distanceTo: 404607.805988
    test 839 distanceTo: 404607.805988
    test 840 distanceTo: 3981601
    test 841 antipodal: False
    test 842 distanceTo dateline: 19959679.267
    test 843 distanceTo unrolled: 19959679.267
    test 844 antipodal: False
    test 845 distanceTo dateline: 9513998
    test 846 distanceTo unrolled: 9513998
    test 847 distanceTo: 18012714.66
    test 848 distanceTo: 20003931.46
    test 849 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 850 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 851 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 852 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 853 intermediateTo: 51.372275°N, 000.707253°E
    test 854 intermediateTo: True
    test 855 intermediateTo: 404607.806
    test 856 intermediateTo+5: 35.139582°N, 008.994368°E
    test 857 intermediateTo+5: 5.000
    test 858 intermediateTo-4: 64.894124°N, 013.705689°W
    test 859 intermediateTo-4: 4.000
    test 860 intermediateTo-h: 125.000
    test 861 midpointTo: 50.536583°N, 001.274507°E
    test 862 destination: 51.513526°N, 000.098038°W
    test 863 destination: 51°30′49″N, 000°05′53″W
    test 864 destination: 33°57′N, 118°24′W
    test 865 destination: 33.950367°N, 118.399012°W
    test 866 destination: 0.592546N, 2.066453W
    test 867 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 868 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 869 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 870 chordTo: 125203.963
    test 871 cosineAndoyerLambertTo: 125205.962
    test 872 cosineAndoyerLambertTo: 125205.962
    test 873 cosineForsyheAndoyerLambertTo: 125205.965
    test 874 cosineForsyheAndoyerLambertTo: 125205.965
    test 875 cosineLawTo: 124801.098
    test 876 cosineLawTo: 124801.098
    test 877 equirectangularTo: 124804.754
    test 878 equirectangularTo: 124804.754
    test 879 euclideanTo: 130015.089
    test 880 euclideanTo: 130015.089
    test 881 flatLocalTo: 125209.633
    test 882 flatLocalTo: 125209.633
    test 883 flatPolarTo: 133663.257
    test 884 flatPolarTo: 133663.257
    test 885 hartzell: 53.3206°N, 001.7297°W
    test 886 hartzell: 53.349541°N, 001.7297°W
    test 887 height4: 0.0
    test 888 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 889 height4: 53°19′14.2″N, 001°43′46.9″W
    test 890 height4: 53°19′14.2″N, 001°43′46.9″W
    test 891 haversineTo: 124801.098
    test 892 haversineTo: 124801.098
    test 893 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 894 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 895 thomasTo: 125206.188
    test 896 thomasTo: 125206.188
    test 897 vincentysTo: 124801.098
    test 898 vincentysTo: 124801.098
    test 899 isclockwise: False
    test 900 isclockwise*: False
    test 901 isclockwise: True
    test 902 isclockwise*: True
    test 903 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 904 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 905 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 906 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 907 isconvex: False
    test 908 isconvex*: False
    test 909 isconvex: True
    test 910 isconvex*: True
    test 911 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 912 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 913 isenclosedBy1: True
    test 914 isenclosedBy1*: True
    test 915 isenclosedBy2: False
    test 916 isenclosedBy2*: False
    test 917 isenclosedBy3: False
    test 918 isenclosedBy3*: False
    test 919 isenclosedBy4: False
    test 920 isenclosedBy4*: False
    test 921 isenclosedBy5: False
    test 922 isenclosedBy5*: False
    test 923 isenclosedBy6: True
    test 924 isenclosedBy6*: True
    test 925 isenclosedBy7: True
    test 926 isenclosedBy7*: True
    test 927 isenclosedBy-CCW: True
    test 928 isenclosedBy-CW : True
    test 929 isenclosedBy-CCW: True
    test 930 initialBearingTo: 102.392291
    test 931 compassAngleTo: 100.017
    test 932 compassAngleTo: 105.599
    test 933 initialBearingTo: 288.676039
    test 934 compassAngleTo: 280.017
    test 935 compassAngleTo: 285.599
    test 936 equirectangularTo: 592.185
    test 937 distanceTo: 593.571
    test 938 bearingTo: 0.0
    test 939 compassAngleTo: 0.0
    test 940 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 941 compassAngleTo: 45.0
    test 942 bearingTo: 90.0
    test 943 compassAngleTo: 90.0
    test 944 bearingTo: 180.0
    test 945 compassAngleTo: 180.0
    test 946 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 947 compassAngleTo: 225.0
    test 948 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 949 compassAngleTo: 315.0
    test 950 bearingTo: 270.0
    test 951 compassAngleTo: 270.0
    test 952 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 953 compassAngleTo: 359.4
    test 954 latlon2: (53.0, 1.0)
    test 955 philam2: (0.93, 0.02)
    test 956 bearingTo: 31
    test 957 compassAngleTo: 31
    test 958 compassAngleTo: 45

    test 959 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 960 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 961 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 962 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 963 isequalTo: <class 'bool'>
    test 964 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 965 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 966 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 967 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 968 compassAngleTo: <class 'float'>
    test 969 cosineLawTo: <class 'float'>
    test 970 euclideanTo: <class 'float'>
    test 971 flatLocalTo: <class 'float'>
    test 972 flatPolarTo: <class 'float'>
    test 973 haversineTo: <class 'float'>
    test 974 hubenyTo: <class 'float'>
    test 975 vincentysTo: <class 'float'>
    test 976 toNvector: (0.615661, 0.0, 0.788011)
    test 977 toVector: (0.615661, 0.0, 0.788011)
    test 978 toVector3d: (0.61566, 0.0, 0.78801)

    test 979 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 305.091
    test 980 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66933643°N, 002.48620262°E
    test 981 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1592.545
    test 982 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.65141232°N, 002.46816989°E
    test 983 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 3
    test 984 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 127.229
    test 985 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 152.612
    test 986 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 987 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 988 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 2400.293
    test 989 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 2400.293
    test 990 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.66128984°N, 002.47973818°E
    test 991 trilaterate5 (pygeodesy.ellipsoidalKarney) .min- is .maxPoint: True
    test 992 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 1
    test 993 trilaterate5 (pygeodesy.ellipsoidalKarney) .min: 1343.743
    test 994 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.69131964°N, 002.50112167°E
    test 995 trilaterate5 (pygeodesy.ellipsoidalKarney) .max: 1445.554
    test 996 trilaterate5 (pygeodesy.ellipsoidalKarney) .point: 42.67815375°N, 002.49950041°E
    test 997 trilaterate5 (pygeodesy.ellipsoidalKarney) .n: 2
    test 998 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 999 circum3 (pygeodesy.ellipsoidalKarney) .radius: 57792.067
    test 1000 circum3 (pygeodesy.ellipsoidalKarney) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1001 circum3 (pygeodesy.ellipsoidalKarney) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1002 circum3 (pygeodesy.ellipsoidalKarney) .d1: 57792.858
    test 1003 circum3 (pygeodesy.ellipsoidalKarney) .d2: 57792.859
    test 1004 circum3 (pygeodesy.ellipsoidalKarney) .d3: 57792.859
    test 1005 circum3 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1006 circum3 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 1007 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1008 circum4 (pygeodesy.ellipsoidalKarney) .radius: 3184256.748
    test 1009 circum4 (pygeodesy.ellipsoidalKarney) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1010 circum4 (pygeodesy.ellipsoidalKarney) .rank: 3
    test 1011 circum4 (pygeodesy.ellipsoidalKarney) .residuals: ()
    test 1012 circum4 (pygeodesy.ellipsoidalKarney) .d1: 57818.033
    test 1013 circum4 (pygeodesy.ellipsoidalKarney) .d2: 57834.176
    test 1014 circum4 (pygeodesy.ellipsoidalKarney) .d3: 57830.992
    test 1015 circum4 (pygeodesy.ellipsoidalKarney) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1016 circum4 (pygeodesy.ellipsoidalKarney) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1017 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1018 circin6 (pygeodesy.ellipsoidalKarney) .rB+rC: 1561159.315
    test 1019 circin6 (pygeodesy.ellipsoidalKarney) .rC+pA: 1111782.535
    test 1020 circin6 (pygeodesy.ellipsoidalKarney) .rA+rB: 1104451.745
    test 1021 circin6 (pygeodesy.ellipsoidalKarney) .radius: 325058.721
    test 1022 circin6 (pygeodesy.ellipsoidalKarney) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1023 circin6 (pygeodesy.ellipsoidalKarney) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1024 circin6 (pygeodesy.ellipsoidalKarney) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1025 circin6 (pygeodesy.ellipsoidalKarney) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1026 circin6 (pygeodesy.ellipsoidalKarney) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1027 circin6 (pygeodesy.ellipsoidalKarney) .dA: 327263.596
    test 1028 circin6 (pygeodesy.ellipsoidalKarney) .dB: 326036.153
    test 1029 circin6 (pygeodesy.ellipsoidalKarney) .dC: 326020.432

    test 1030 area cw/ccw: 1.0
# lazily imported pygeodesy.ellipsoidalGeodSolve by testLatLon.py line 645

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 1031 isEllipsoidal: True
    test 1032 isSpherical: False
    test 1033 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1034 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1035 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1036 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1037 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1038 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1039 isequalTo: True
    test 1040 isequalTo: True
    test 1041 latlon2: 52.20472, 0.14056
    test 1042 latlon2: 52.2047, 0.1406
    test 1043 latlon2: 52.205, 0.141
    test 1044 latlon2: 52.2, 0.14
    test 1045 latlon2: 52.2, 0.1
    test 1046 latlon2: 52.0, 0.0
    test 1047 chordTo: 12029263.15
    test 1048 chordTo: 12029049.69
    test 1049 initialBearingTo: 156.1106
    test 1050 initialBearingTo: 65.9335
    test 1051 initialBearingTo: 0.0
    test 1052 initialBearingTo: 180.0
    test 1053 finalBearingTo: 157.8345
    test 1054 finalBearingTo: 93.9034
    test 1055 bearingTo2: 156.1106, 157.8345
    test 1056 ispolar: True
    test 1057 copy: True
    test 1058 __eq__: True
    test 1059 __ne__: False
    test 1060 equirectangularTo: 404329.56
    test 1061 distanceTo: 404607.805988
    test 1062 distanceTo: 404607.805988
    test 1063 distanceTo: 3981601
    test 1064 antipodal: False
    test 1065 distanceTo dateline: 19959679.267
    test 1066 distanceTo unrolled: 19959679.267
    test 1067 antipodal: False
    test 1068 distanceTo dateline: 9513998
    test 1069 distanceTo unrolled: 9513998
    test 1070 distanceTo: 18012714.66
    test 1071 distanceTo: 20003931.46
    test 1072 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1073 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1074 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1075 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1076 intermediateTo: 51.372275°N, 000.707253°E
    test 1077 intermediateTo: True
    test 1078 intermediateTo: 404607.806
    test 1079 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1080 intermediateTo+5: 5.000
    test 1081 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1082 intermediateTo-4: 4.000
    test 1083 intermediateTo-h: 125.000
    test 1084 midpointTo: 50.536583°N, 001.274507°E
    test 1085 destination: 51.513526°N, 000.098038°W
    test 1086 destination: 51°30′49″N, 000°05′53″W
    test 1087 destination: 33°57′N, 118°24′W
    test 1088 destination: 33.950367°N, 118.399012°W
    test 1089 destination: 0.592546N, 2.066453W
    test 1090 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1091 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1092 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1093 chordTo: 125203.963
    test 1094 cosineAndoyerLambertTo: 125205.962
    test 1095 cosineAndoyerLambertTo: 125205.962
    test 1096 cosineForsyheAndoyerLambertTo: 125205.965
    test 1097 cosineForsyheAndoyerLambertTo: 125205.965
    test 1098 cosineLawTo: 124801.098
    test 1099 cosineLawTo: 124801.098
    test 1100 equirectangularTo: 124804.754
    test 1101 equirectangularTo: 124804.754
    test 1102 euclideanTo: 130015.089
    test 1103 euclideanTo: 130015.089
    test 1104 flatLocalTo: 125209.633
    test 1105 flatLocalTo: 125209.633
    test 1106 flatPolarTo: 133663.257
    test 1107 flatPolarTo: 133663.257
    test 1108 hartzell: 53.3206°N, 001.7297°W
    test 1109 hartzell: 53.349541°N, 001.7297°W
    test 1110 height4: 0.0
    test 1111 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1112 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1113 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1114 haversineTo: 124801.098
    test 1115 haversineTo: 124801.098
    test 1116 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1117 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1118 thomasTo: 125206.188
    test 1119 thomasTo: 125206.188
    test 1120 vincentysTo: 124801.098
    test 1121 vincentysTo: 124801.098
    test 1122 isclockwise: False
    test 1123 isclockwise*: False
    test 1124 isclockwise: True
    test 1125 isclockwise*: True
    test 1126 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1127 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1128 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1129 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1130 isconvex: False
    test 1131 isconvex*: False
    test 1132 isconvex: True
    test 1133 isconvex*: True
    test 1134 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1135 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1136 isenclosedBy1: True
    test 1137 isenclosedBy1*: True
    test 1138 isenclosedBy2: False
    test 1139 isenclosedBy2*: False
    test 1140 isenclosedBy3: False
    test 1141 isenclosedBy3*: False
    test 1142 isenclosedBy4: False
    test 1143 isenclosedBy4*: False
    test 1144 isenclosedBy5: False
    test 1145 isenclosedBy5*: False
    test 1146 isenclosedBy6: True
    test 1147 isenclosedBy6*: True
    test 1148 isenclosedBy7: True
    test 1149 isenclosedBy7*: True
    test 1150 isenclosedBy-CCW: True
    test 1151 isenclosedBy-CW : True
    test 1152 isenclosedBy-CCW: True
    test 1153 initialBearingTo: 102.392291
    test 1154 compassAngleTo: 100.017
    test 1155 compassAngleTo: 105.599
    test 1156 initialBearingTo: 288.676039
    test 1157 compassAngleTo: 280.017
    test 1158 compassAngleTo: 285.599
    test 1159 equirectangularTo: 592.185
    test 1160 distanceTo: 593.571
    test 1161 bearingTo: 0.0
    test 1162 compassAngleTo: 0.0
    test 1163 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1164 compassAngleTo: 45.0
    test 1165 bearingTo: 90.0
    test 1166 compassAngleTo: 90.0
    test 1167 bearingTo: 180.0
    test 1168 compassAngleTo: 180.0
    test 1169 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1170 compassAngleTo: 225.0
    test 1171 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1172 compassAngleTo: 315.0
    test 1173 bearingTo: 270.0
    test 1174 compassAngleTo: 270.0
    test 1175 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1176 compassAngleTo: 359.4
    test 1177 latlon2: (53.0, 1.0)
    test 1178 philam2: (0.93, 0.02)
    test 1179 bearingTo: 31
    test 1180 compassAngleTo: 31
    test 1181 compassAngleTo: 45

    test 1182 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1183 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1184 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1185 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1186 isequalTo: <class 'bool'>
    test 1187 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1188 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1189 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1190 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1191 compassAngleTo: <class 'float'>
    test 1192 cosineLawTo: <class 'float'>
    test 1193 euclideanTo: <class 'float'>
    test 1194 flatLocalTo: <class 'float'>
    test 1195 flatPolarTo: <class 'float'>
    test 1196 haversineTo: <class 'float'>
    test 1197 hubenyTo: <class 'float'>
    test 1198 vincentysTo: <class 'float'>
    test 1199 toNvector: (0.615661, 0.0, 0.788011)
    test 1200 toVector: (0.615661, 0.0, 0.788011)
    test 1201 toVector3d: (0.61566, 0.0, 0.78801)

    test 1202 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 305.091
    test 1203 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66933643°N, 002.48620262°E
    test 1204 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1592.545
    test 1205 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.65141232°N, 002.46816989°E
    test 1206 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 3
    test 1207 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 127.229
    test 1208 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 152.612
    test 1209 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E
    test 1210 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 1211 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 2400.293
    test 1212 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 2400.293
    test 1213 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.66128984°N, 002.47973818°E
    test 1214 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min- is .maxPoint: True
    test 1215 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 1
    test 1216 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .min: 1343.743
    test 1217 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.69131964°N, 002.50112167°E
    test 1218 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .max: 1445.554
    test 1219 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .point: 42.67815375°N, 002.49950041°E
    test 1220 trilaterate5 (pygeodesy.ellipsoidalGeodSolve) .n: 2
    test 1221 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1222 circum3 (pygeodesy.ellipsoidalGeodSolve) .radius: 57792.067
    test 1223 circum3 (pygeodesy.ellipsoidalGeodSolve) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1224 circum3 (pygeodesy.ellipsoidalGeodSolve) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1225 circum3 (pygeodesy.ellipsoidalGeodSolve) .d1: 57792.858
    test 1226 circum3 (pygeodesy.ellipsoidalGeodSolve) .d2: 57792.859
    test 1227 circum3 (pygeodesy.ellipsoidalGeodSolve) .d3: 57792.859
    test 1228 circum3 (pygeodesy.ellipsoidalGeodSolve) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1229 circum3 (pygeodesy.ellipsoidalGeodSolve) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 1230 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1231 circum4 (pygeodesy.ellipsoidalGeodSolve) .radius: 3184256.748
    test 1232 circum4 (pygeodesy.ellipsoidalGeodSolve) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1233 circum4 (pygeodesy.ellipsoidalGeodSolve) .rank: 3
    test 1234 circum4 (pygeodesy.ellipsoidalGeodSolve) .residuals: ()
    test 1235 circum4 (pygeodesy.ellipsoidalGeodSolve) .d1: 57818.033
    test 1236 circum4 (pygeodesy.ellipsoidalGeodSolve) .d2: 57834.176
    test 1237 circum4 (pygeodesy.ellipsoidalGeodSolve) .d3: 57830.992
    test 1238 circum4 (pygeodesy.ellipsoidalGeodSolve) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1239 circum4 (pygeodesy.ellipsoidalGeodSolve) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1240 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1241 circin6 (pygeodesy.ellipsoidalGeodSolve) .rB+rC: 1561159.315
    test 1242 circin6 (pygeodesy.ellipsoidalGeodSolve) .rC+pA: 1111782.535
    test 1243 circin6 (pygeodesy.ellipsoidalGeodSolve) .rA+rB: 1104451.745
    test 1244 circin6 (pygeodesy.ellipsoidalGeodSolve) .radius: 325058.721
    test 1245 circin6 (pygeodesy.ellipsoidalGeodSolve) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1246 circin6 (pygeodesy.ellipsoidalGeodSolve) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1247 circin6 (pygeodesy.ellipsoidalGeodSolve) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1248 circin6 (pygeodesy.ellipsoidalGeodSolve) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1249 circin6 (pygeodesy.ellipsoidalGeodSolve) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1250 circin6 (pygeodesy.ellipsoidalGeodSolve) .dA: 327263.596
    test 1251 circin6 (pygeodesy.ellipsoidalGeodSolve) .dB: 326036.153
    test 1252 circin6 (pygeodesy.ellipsoidalGeodSolve) .dC: 326020.432

    test 1253 area cw/ccw: 1.0

    testLatLon(pygeodesy.ellipsoidalExact, 23.04.11)
    test 1254 isEllipsoidal: True
    test 1255 isSpherical: False
    test 1256 lat/lonDMS: 52.20472°N, 000.14056°E
    test 1257 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 1258 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 1259 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 1260 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 1261 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 1262 isequalTo: True
    test 1263 isequalTo: True
    test 1264 latlon2: 52.20472, 0.14056
    test 1265 latlon2: 52.2047, 0.1406
    test 1266 latlon2: 52.205, 0.141
    test 1267 latlon2: 52.2, 0.14
    test 1268 latlon2: 52.2, 0.1
    test 1269 latlon2: 52.0, 0.0
    test 1270 chordTo: 12029263.15
    test 1271 chordTo: 12029049.69
    test 1272 initialBearingTo: 156.1106
    test 1273 initialBearingTo: 65.9335
    test 1274 initialBearingTo: 0.0
    test 1275 initialBearingTo: 180.0
    test 1276 finalBearingTo: 157.8345
    test 1277 finalBearingTo: 93.9034
    test 1278 bearingTo2: 156.1106, 157.8345
    test 1279 ispolar: True
    test 1280 copy: True
    test 1281 __eq__: True
    test 1282 __ne__: False
    test 1283 equirectangularTo: 404329.56
    test 1284 distanceTo: 404607.805988
    test 1285 distanceTo: 404607.805988
    test 1286 distanceTo: 3981601
    test 1287 antipodal: False
    test 1288 distanceTo dateline: 19959679.267
    test 1289 distanceTo unrolled: 19959679.267
    test 1290 antipodal: False
    test 1291 distanceTo dateline: 9513998
    test 1292 distanceTo unrolled: 9513998
    test 1293 distanceTo: 18003740.39
    test 1294 distanceTo: 19994797.60  FAILED, KNOWN, expected 20003931.46
    test 1295 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1296 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1297 distanceTo3 dateline: 19959679.2674, 161.0677, 18.8252
    test 1298 distanceTo3 dateline: 9513997.9901, 42.9164, 138.8903
    test 1299 intermediateTo: 51.372275°N, 000.707253°E
    test 1300 intermediateTo: True
    test 1301 intermediateTo: 404607.806
    test 1302 intermediateTo+5: 35.139582°N, 008.994368°E
    test 1303 intermediateTo+5: 5.000
    test 1304 intermediateTo-4: 64.894124°N, 013.705689°W
    test 1305 intermediateTo-4: 4.000
    test 1306 intermediateTo-h: 125.000
    test 1307 midpointTo: 50.536583°N, 001.274507°E
    test 1308 destination: 51.513526°N, 000.098038°W
    test 1309 destination: 51°30′49″N, 000°05′53″W
    test 1310 destination: 33°57′N, 118°24′W
    test 1311 destination: 33.950367°N, 118.399012°W
    test 1312 destination: 0.592546N, 2.066453W
    test 1313 destination: 32.11195529°N, 064.56074722°E  FAILED, KNOWN, expected 32.11195529°N, 063.95925278°E
    test 1314 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 1315 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 1316 chordTo: 125203.963
    test 1317 cosineAndoyerLambertTo: 125205.962
    test 1318 cosineAndoyerLambertTo: 125205.962
    test 1319 cosineForsyheAndoyerLambertTo: 125205.965
    test 1320 cosineForsyheAndoyerLambertTo: 125205.965
    test 1321 cosineLawTo: 124801.098
    test 1322 cosineLawTo: 124801.098
    test 1323 equirectangularTo: 124804.754
    test 1324 equirectangularTo: 124804.754
    test 1325 euclideanTo: 130015.089
    test 1326 euclideanTo: 130015.089
    test 1327 flatLocalTo: 125209.633
    test 1328 flatLocalTo: 125209.633
    test 1329 flatPolarTo: 133663.257
    test 1330 flatPolarTo: 133663.257
    test 1331 hartzell: 53.3206°N, 001.7297°W
    test 1332 hartzell: 53.349541°N, 001.7297°W
    test 1333 height4: 0.0
    test 1334 height4: (3820333.9, -115367.0, 5097204.4, -6584.9)
    test 1335 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1336 height4: 53°19′14.2″N, 001°43′46.9″W
    test 1337 haversineTo: 124801.098
    test 1338 haversineTo: 124801.098
    test 1339 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 1340 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 1341 thomasTo: 125206.188
    test 1342 thomasTo: 125206.188
    test 1343 vincentysTo: 124801.098
    test 1344 vincentysTo: 124801.098
    test 1345 isclockwise: False
    test 1346 isclockwise*: False
    test 1347 isclockwise: True
    test 1348 isclockwise*: True
    test 1349 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1350 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1351 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1352 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 1353 isconvex: False
    test 1354 isconvex*: False
    test 1355 isconvex: True
    test 1356 isconvex*: True
    test 1357 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1358 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 1359 isenclosedBy1: True
    test 1360 isenclosedBy1*: True
    test 1361 isenclosedBy2: False
    test 1362 isenclosedBy2*: False
    test 1363 isenclosedBy3: False
    test 1364 isenclosedBy3*: False
    test 1365 isenclosedBy4: False
    test 1366 isenclosedBy4*: False
    test 1367 isenclosedBy5: False
    test 1368 isenclosedBy5*: False
    test 1369 isenclosedBy6: True
    test 1370 isenclosedBy6*: True
    test 1371 isenclosedBy7: True
    test 1372 isenclosedBy7*: True
    test 1373 isenclosedBy-CCW: True
    test 1374 isenclosedBy-CW : True
    test 1375 isenclosedBy-CCW: True
    test 1376 initialBearingTo: 102.392291
    test 1377 compassAngleTo: 100.017
    test 1378 compassAngleTo: 105.599
    test 1379 initialBearingTo: 288.676039
    test 1380 compassAngleTo: 280.017
    test 1381 compassAngleTo: 285.599
    test 1382 equirectangularTo: 592.185
    test 1383 distanceTo: 593.571
    test 1384 bearingTo: 0.0
    test 1385 compassAngleTo: 0.0
    test 1386 bearingTo: 45.2  FAILED, KNOWN, expected 45.0
    test 1387 compassAngleTo: 45.0
    test 1388 bearingTo: 90.0
    test 1389 compassAngleTo: 90.0
    test 1390 bearingTo: 180.0
    test 1391 compassAngleTo: 180.0
    test 1392 bearingTo: 225.2  FAILED, KNOWN, expected 225.0
    test 1393 compassAngleTo: 225.0
    test 1394 bearingTo: 314.8  FAILED, KNOWN, expected 315.0
    test 1395 compassAngleTo: 315.0
    test 1396 bearingTo: 270.0
    test 1397 compassAngleTo: 270.0
    test 1398 bearingTo: -0.0  FAILED, KNOWN, expected 359.4
    test 1399 compassAngleTo: 359.4
    test 1400 latlon2: (53.0, 1.0)
    test 1401 philam2: (0.93, 0.02)
    test 1402 bearingTo: 31
    test 1403 compassAngleTo: 31
    test 1404 compassAngleTo: 45

    test 1405 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 1406 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1407 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 1408 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 1409 isequalTo: <class 'bool'>
    test 1410 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 1411 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 1412 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 1413 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 1414 compassAngleTo: <class 'float'>
    test 1415 cosineLawTo: <class 'float'>
    test 1416 euclideanTo: <class 'float'>
    test 1417 flatLocalTo: <class 'float'>
    test 1418 flatPolarTo: <class 'float'>
    test 1419 haversineTo: <class 'float'>
    test 1420 hubenyTo: <class 'float'>
    test 1421 vincentysTo: <class 'float'>
    test 1422 toNvector: (0.615661, 0.0, 0.788011)
    test 1423 toVector: (0.615661, 0.0, 0.788011)
    test 1424 toVector3d: (0.61566, 0.0, 0.78801)

    test 1425 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 305.091
    test 1426 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66933643°N, 002.48620262°E
    test 1427 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1592.545
    test 1428 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.65141232°N, 002.46816989°E
    test 1429 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 3
    test 1430 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 127.229
    test 1431 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 152.612
    test 1432 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1433 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1434 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 2400.293
    test 1435 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 2400.293
    test 1436 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.66128984°N, 002.47973818°E
    test 1437 trilaterate5 (pygeodesy.ellipsoidalExact) .min- is .maxPoint: True
    test 1438 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 1
    test 1439 trilaterate5 (pygeodesy.ellipsoidalExact) .min: 1343.743
    test 1440 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.69131964°N, 002.50112167°E
    test 1441 trilaterate5 (pygeodesy.ellipsoidalExact) .max: 1445.554
    test 1442 trilaterate5 (pygeodesy.ellipsoidalExact) .point: 42.67815375°N, 002.49950041°E
    test 1443 trilaterate5 (pygeodesy.ellipsoidalExact) .n: 2
    test 1444 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1445 circum3 (pygeodesy.ellipsoidalExact) .radius: 57792.067
    test 1446 circum3 (pygeodesy.ellipsoidalExact) .center: 43.053532°N, 002.943255°E, -261.66m
    test 1447 circum3 (pygeodesy.ellipsoidalExact) .deltas: (-0.0, 0.0, 13.438)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 1448 circum3 (pygeodesy.ellipsoidalExact) .d1: 57792.858
    test 1449 circum3 (pygeodesy.ellipsoidalExact) .d2: 57792.859
    test 1450 circum3 (pygeodesy.ellipsoidalExact) .d3: 57792.859
    test 1451 circum3 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1452 circum3 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 1453 radii11: Radii11Tuple(rA=7244.792747, rB=1828.106695, rC=2.25502, cR=57792.067128, rIn=57.366968, riS=2.087668, roS=2.443334, a=1830.361715, b=7247.047766, c=9072.899442, s=9075.154461)
    test 1454 circum4 (pygeodesy.ellipsoidalExact) .radius: 3184256.748
    test 1455 circum4 (pygeodesy.ellipsoidalExact) .center: 43.054367°N, 002.942573°E, -3183993.92m
    test 1456 circum4 (pygeodesy.ellipsoidalExact) .rank: 3
    test 1457 circum4 (pygeodesy.ellipsoidalExact) .residuals: ()
    test 1458 circum4 (pygeodesy.ellipsoidalExact) .d1: 57818.033
    test 1459 circum4 (pygeodesy.ellipsoidalExact) .d2: 57834.176
    test 1460 circum4 (pygeodesy.ellipsoidalExact) .d3: 57830.992
    test 1461 circum4 (pygeodesy.ellipsoidalExact) .datum: name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84
    test 1462 circum4 (pygeodesy.ellipsoidalExact) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 1463 radii11: Radii11Tuple(rA=327537.482637, rB=776914.262482, rC=784245.052526, cR=780602.180901, rIn=325058.721103, riS=84975.664195, roS=INF, a=1561159.315008, b=1111782.535163, c=1104451.745119, s=1888696.797645)
    test 1464 circin6 (pygeodesy.ellipsoidalExact) .rB+rC: 1561159.315
    test 1465 circin6 (pygeodesy.ellipsoidalExact) .rC+pA: 1111782.535
    test 1466 circin6 (pygeodesy.ellipsoidalExact) .rA+rB: 1104451.745
    test 1467 circin6 (pygeodesy.ellipsoidalExact) .radius: 325058.721
    test 1468 circin6 (pygeodesy.ellipsoidalExact) .center: 02.948531°N, 002.932537°E, -40041.19m
    test 1469 circin6 (pygeodesy.ellipsoidalExact) .deltas: (0.0, 0.0, 0.427043)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 1470 circin6 (pygeodesy.ellipsoidalExact) .cA: 05.04314°N, 005.014578°E, -48104.09m
    test 1471 circin6 (pygeodesy.ellipsoidalExact) .cB: 00.0°N, 002.941713°E, -20168.62m
    test 1472 circin6 (pygeodesy.ellipsoidalExact) .cC: 02.961566°N, 000.0°E, -20113.46m
    test 1473 circin6 (pygeodesy.ellipsoidalExact) .dA: 327263.596
    test 1474 circin6 (pygeodesy.ellipsoidalExact) .dB: 326036.153
    test 1475 circin6 (pygeodesy.ellipsoidalExact) .dC: 326020.432

    test 1476 area cw/ccw: 1.0

    129 of 1476 testLatLon.py tests (8.7%) FAILED, incl. 127 KNOWN plus 2 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 5.582 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLatLonBase.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.precision from .dms by testLatLonBase.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testLatLonBase.py line 128
# lazily imported pygeodesy.ellipsoidalKarney by testLatLonBase.py line 128
# lazily imported pygeodesy.ellipsoidalNvector by testLatLonBase.py line 128
# lazily imported pygeodesy.ellipsoidalVincenty by testLatLonBase.py line 128
# lazily imported pygeodesy.sphericalNvector by testLatLonBase.py line 128
# lazily imported pygeodesy.sphericalTrigonometry by testLatLonBase.py line 128

    testing testLatLonBase.py 23.03.27 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 23.04.11)
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 isequalTo: True
    test 4 isequalTo3: True
    test 5 latlon: (52.205, 0.119)
    test 6 latlonheight: (52.205, 0.119, 0)
    test 7 phimlam: (0.911149, 0.002077)
    test 8 phimlamheight: (0.911149, 0.002077, 0)
    test 9 isequalTo: False
    test 10 antipode1: 52.205°S, 179.881°W
    test 11 antipode2: True
    test 12 antipode3: 52.205°N, 000.119°E
    test 13 antipode4: True
    test 14 antipode5: 52.205°N, 000.119°E
    test 15 isnormal1: True
    test 16 isnormal2: False
    test 17 normal1: False
    test 18 normal2: True
    test 19 toStr: 51°28′40″N, 000°00′06″W
    test 20 toStr: 51.4778°N, 000.0016°W
    test 21 precision: 0
    test 22 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 23 isequalTo: True
    test 24 isequalTo3: False
    test 25 latlon: (51.4778, -0.0016)
    test 26 phimlam: (0.898457, -0.000028)
    test 27 isequalTo: True
    test 28 isequalTo3: True
    test 29 latlon: (51.4778, -0.0016)
    test 30 latlonheight: (51.4778, -0.0016, 42.0)
    test 31 phimlam: (0.898457, -0.000028)
    test 32 phimlamheight: (0.898457, -0.000028, 42.0)
    test 33 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 34 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 35 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 36 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 37 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 38 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 39 rhumbAzimuthTo: 107.563
    test 40 rhumbDestination: 50.964155°N, 001.853°E
    test 41 rhumbDestination: True
    test 42 rhumbDistanceTo: 42186.1
    test 43 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 44 rhumbMidpointo: True
    test 45 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 46 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 47 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 48 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 49 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 50 lat, lon: 50.06632°N, 005.71475°W
    test 51 lat, lon: 50.066389°N, 005.714722°W
    test 52 isequalTo: True
    test 53 isequalTo3: True
    test 54 latlon: (52.205, 0.119)
    test 55 latlonheight: (52.205, 0.119, 0)
    test 56 phimlam: (0.911149, 0.002077)
    test 57 phimlamheight: (0.911149, 0.002077, 0)
    test 58 isequalTo: False
    test 59 antipode1: 52.205°S, 179.881°W
    test 60 antipode2: True
    test 61 antipode3: 52.205°N, 000.119°E
    test 62 antipode4: True
    test 63 antipode5: 52.205°N, 000.119°E
    test 64 isnormal1: True
    test 65 isnormal2: False
    test 66 normal1: False
    test 67 normal2: True
    test 68 toStr: 51°28′40″N, 000°00′06″W
    test 69 toStr: 51.4778°N, 000.0016°W
    test 70 precision: 0
    test 71 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 72 isequalTo: True
    test 73 isequalTo3: False
    test 74 latlon: (51.4778, -0.0016)
    test 75 phimlam: (0.898457, -0.000028)
    test 76 isequalTo: True
    test 77 isequalTo3: True
    test 78 latlon: (51.4778, -0.0016)
    test 79 latlonheight: (51.4778, -0.0016, 42.0)
    test 80 phimlam: (0.898457, -0.000028)
    test 81 phimlamheight: (0.898457, -0.000028, 42.0)
    test 82 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 83 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 84 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 85 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 86 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 87 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 88 rhumbAzimuthTo: 107.563
    test 89 rhumbDestination: 50.964155°N, 001.853°E
    test 90 rhumbDestination: True
    test 91 rhumbDistanceTo: 42186.1
    test 92 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 93 rhumbMidpointo: True
    test 94 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 95 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 96 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 97 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 98 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    testLatLon(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 99 lat, lon: 50.06632°N, 005.71475°W
    test 100 lat, lon: 50.066389°N, 005.714722°W
    test 101 isequalTo: True
    test 102 isequalTo3: True
    test 103 latlon: (52.205, 0.119)
    test 104 latlonheight: (52.205, 0.119, 0)
    test 105 phimlam: (0.911149, 0.002077)
    test 106 phimlamheight: (0.911149, 0.002077, 0)
    test 107 isequalTo: False
    test 108 antipode1: 52.205°S, 179.881°W
    test 109 antipode2: True
    test 110 antipode3: 52.205°N, 000.119°E
    test 111 antipode4: True
    test 112 antipode5: 52.205°N, 000.119°E
    test 113 isnormal1: True
    test 114 isnormal2: False
    test 115 normal1: False
    test 116 normal2: True
    test 117 toStr: 51°28′40″N, 000°00′06″W
    test 118 toStr: 51.4778°N, 000.0016°W
    test 119 precision: 0
    test 120 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 121 isequalTo: True
    test 122 isequalTo3: False
    test 123 latlon: (51.4778, -0.0016)
    test 124 phimlam: (0.898457, -0.000028)
    test 125 isequalTo: True
    test 126 isequalTo3: True
    test 127 latlon: (51.4778, -0.0016)
    test 128 latlonheight: (51.4778, -0.0016, 42.0)
    test 129 phimlam: (0.898457, -0.000028)
    test 130 phimlamheight: (0.898457, -0.000028, 42.0)
    test 131 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 132 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 133 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 134 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 135 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 136 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 137 rhumbAzimuthTo: 116.661
    test 138 rhumbDestination: 50.964234°N, 001.851383°E
    test 139 rhumbDestination: True
    test 140 rhumbDistanceTo: 40413.1
    test 141 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 142 rhumbMidpointo: True
    test 143 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 144 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 145 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 146 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 147 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 148 lat, lon: 50.06632°N, 005.71475°W
    test 149 lat, lon: 50.066389°N, 005.714722°W
    test 150 isequalTo: True
    test 151 isequalTo3: True
    test 152 latlon: (52.205, 0.119)
    test 153 latlonheight: (52.205, 0.119, 0)
    test 154 phimlam: (0.911149, 0.002077)
    test 155 phimlamheight: (0.911149, 0.002077, 0)
    test 156 isequalTo: False
    test 157 antipode1: 52.205°S, 179.881°W
    test 158 antipode2: True
    test 159 antipode3: 52.205°N, 000.119°E
    test 160 antipode4: True
    test 161 antipode5: 52.205°N, 000.119°E
    test 162 isnormal1: True
    test 163 isnormal2: False
    test 164 normal1: False
    test 165 normal2: True
    test 166 toStr: 51°28′40″N, 000°00′06″W
    test 167 toStr: 51.4778°N, 000.0016°W
    test 168 precision: 0
    test 169 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 170 isequalTo: True
    test 171 isequalTo3: False
    test 172 latlon: (51.4778, -0.0016)
    test 173 phimlam: (0.898457, -0.000028)
    test 174 isequalTo: True
    test 175 isequalTo3: True
    test 176 latlon: (51.4778, -0.0016)
    test 177 latlonheight: (51.4778, -0.0016, 42.0)
    test 178 phimlam: (0.898457, -0.000028)
    test 179 phimlamheight: (0.898457, -0.000028, 42.0)
    test 180 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 181 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 182 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 183 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 184 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 185 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 186 rhumbAzimuthTo: 116.661
    test 187 rhumbDestination: 50.964234°N, 001.851383°E
    test 188 rhumbDestination: True
    test 189 rhumbDistanceTo: 40413.1
    test 190 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 191 rhumbMidpointo: True
    test 192 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 193 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 194 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 195 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 196 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 197 lat, lon: 50.06632°N, 005.71475°W
    test 198 lat, lon: 50.066389°N, 005.714722°W
    test 199 isequalTo: True
    test 200 isequalTo3: True
    test 201 latlon: (52.205, 0.119)
    test 202 latlonheight: (52.205, 0.119, 0)
    test 203 phimlam: (0.911149, 0.002077)
    test 204 phimlamheight: (0.911149, 0.002077, 0)
    test 205 isequalTo: False
    test 206 antipode1: 52.205°S, 179.881°W
    test 207 antipode2: True
    test 208 antipode3: 52.205°N, 000.119°E
    test 209 antipode4: True
    test 210 antipode5: 52.205°N, 000.119°E
    test 211 isnormal1: True
    test 212 isnormal2: False
    test 213 normal1: False
    test 214 normal2: True
    test 215 toStr: 51°28′40″N, 000°00′06″W
    test 216 toStr: 51.4778°N, 000.0016°W
    test 217 precision: 0
    test 218 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 219 isequalTo: True
    test 220 isequalTo3: False
    test 221 latlon: (51.4778, -0.0016)
    test 222 phimlam: (0.898457, -0.000028)
    test 223 isequalTo: True
    test 224 isequalTo3: True
    test 225 latlon: (51.4778, -0.0016)
    test 226 latlonheight: (51.4778, -0.0016, 42.0)
    test 227 phimlam: (0.898457, -0.000028)
    test 228 phimlamheight: (0.898457, -0.000028, 42.0)
    test 229 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 230 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 231 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 232 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 233 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 234 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 235 rhumbAzimuthTo: 116.661
    test 236 rhumbDestination: 50.964234°N, 001.851383°E
    test 237 rhumbDestination: True
    test 238 rhumbDistanceTo: 40413.1
    test 239 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 240 rhumbMidpointo: True
    test 241 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 242 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 243 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 244 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 245 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLon(pygeodesy.ellipsoidalExact, 23.04.11)
    test 246 lat, lon: 50.06632°N, 005.71475°W
    test 247 lat, lon: 50.066389°N, 005.714722°W
    test 248 isequalTo: True
    test 249 isequalTo3: True
    test 250 latlon: (52.205, 0.119)
    test 251 latlonheight: (52.205, 0.119, 0)
    test 252 phimlam: (0.911149, 0.002077)
    test 253 phimlamheight: (0.911149, 0.002077, 0)
    test 254 isequalTo: False
    test 255 antipode1: 52.205°S, 179.881°W
    test 256 antipode2: True
    test 257 antipode3: 52.205°N, 000.119°E
    test 258 antipode4: True
    test 259 antipode5: 52.205°N, 000.119°E
    test 260 isnormal1: True
    test 261 isnormal2: False
    test 262 normal1: False
    test 263 normal2: True
    test 264 toStr: 51°28′40″N, 000°00′06″W
    test 265 toStr: 51.4778°N, 000.0016°W
    test 266 precision: 0
    test 267 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 268 isequalTo: True
    test 269 isequalTo3: False
    test 270 latlon: (51.4778, -0.0016)
    test 271 phimlam: (0.898457, -0.000028)
    test 272 isequalTo: True
    test 273 isequalTo3: True
    test 274 latlon: (51.4778, -0.0016)
    test 275 latlonheight: (51.4778, -0.0016, 42.0)
    test 276 phimlam: (0.898457, -0.000028)
    test 277 phimlamheight: (0.898457, -0.000028, 42.0)
    test 278 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 279 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 280 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 281 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 282 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 283 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 284 rhumbAzimuthTo: 116.661
    test 285 rhumbDestination: 50.964234°N, 001.851383°E
    test 286 rhumbDestination: True
    test 287 rhumbDistanceTo: 40413.1
    test 288 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 289 rhumbMidpointo: True
    test 290 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 291 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 292 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 293 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 294 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E
# lazily imported pygeodesy.ellipsoidalGeodSolve by testLatLonBase.py line 144

    testLatLon(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 295 lat, lon: 50.06632°N, 005.71475°W
    test 296 lat, lon: 50.066389°N, 005.714722°W
    test 297 isequalTo: True
    test 298 isequalTo3: True
    test 299 latlon: (52.205, 0.119)
    test 300 latlonheight: (52.205, 0.119, 0)
    test 301 phimlam: (0.911149, 0.002077)
    test 302 phimlamheight: (0.911149, 0.002077, 0)
    test 303 isequalTo: False
    test 304 antipode1: 52.205°S, 179.881°W
    test 305 antipode2: True
    test 306 antipode3: 52.205°N, 000.119°E
    test 307 antipode4: True
    test 308 antipode5: 52.205°N, 000.119°E
    test 309 isnormal1: True
    test 310 isnormal2: False
    test 311 normal1: False
    test 312 normal2: True
    test 313 toStr: 51°28′40″N, 000°00′06″W
    test 314 toStr: 51.4778°N, 000.0016°W
    test 315 precision: 0
    test 316 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 317 isequalTo: True
    test 318 isequalTo3: False
    test 319 latlon: (51.4778, -0.0016)
    test 320 phimlam: (0.898457, -0.000028)
    test 321 isequalTo: True
    test 322 isequalTo3: True
    test 323 latlon: (51.4778, -0.0016)
    test 324 latlonheight: (51.4778, -0.0016, 42.0)
    test 325 phimlam: (0.898457, -0.000028)
    test 326 phimlamheight: (0.898457, -0.000028, 42.0)
    test 327 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 328 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 329 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 330 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 331 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 332 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 333 rhumbAzimuthTo: 116.661
    test 334 rhumbDestination: 50.964234°N, 001.851383°E
    test 335 rhumbDestination: True
    test 336 rhumbDistanceTo: 40413.1
    test 337 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 338 rhumbMidpointo: True
    test 339 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 340 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 341 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 342 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 343 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBase(pygeodesy.ellipsoidalBase, 23.04.11)
    test 344 lat, lon: 50.06632°N, 005.71475°W
    test 345 lat, lon: 50.066389°N, 005.714722°W
    test 346 isequalTo: True
    test 347 isequalTo3: True
    test 348 latlon: (52.205, 0.119)
    test 349 latlonheight: (52.205, 0.119, 0)
    test 350 phimlam: (0.911149, 0.002077)
    test 351 phimlamheight: (0.911149, 0.002077, 0)
    test 352 isequalTo: False
    test 353 antipode1: 52.205°S, 179.881°W
    test 354 antipode2: True
    test 355 antipode3: 52.205°N, 000.119°E
    test 356 antipode4: True
    test 357 antipode5: 52.205°N, 000.119°E
    test 358 isnormal1: True
    test 359 isnormal2: False
    test 360 normal1: False
    test 361 normal2: True
    test 362 toStr: 51°28′40″N, 000°00′06″W
    test 363 toStr: 51.4778°N, 000.0016°W
    test 364 precision: 0
    test 365 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 366 isequalTo: True
    test 367 isequalTo3: False
    test 368 latlon: (51.4778, -0.0016)
    test 369 phimlam: (0.898457, -0.000028)
    test 370 isequalTo: True
    test 371 isequalTo3: True
    test 372 latlon: (51.4778, -0.0016)
    test 373 latlonheight: (51.4778, -0.0016, 42.0)
    test 374 phimlam: (0.898457, -0.000028)
    test 375 phimlamheight: (0.898457, -0.000028, 42.0)
    test 376 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 377 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 378 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 379 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 380 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 381 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 382 rhumbAzimuthTo: 116.661
    test 383 rhumbDestination: 50.964234°N, 001.851383°E
    test 384 rhumbDestination: True
    test 385 rhumbDistanceTo: 40413.1
    test 386 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 387 rhumbMidpointo: True
    test 388 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 389 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 390 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 391 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 392 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonEllipsoidalBaseDI(pygeodesy.ellipsoidalBaseDI, 23.04.11)
    test 393 lat, lon: 50.06632°N, 005.71475°W
    test 394 lat, lon: 50.066389°N, 005.714722°W
    test 395 isequalTo: True
    test 396 isequalTo3: True
    test 397 latlon: (52.205, 0.119)
    test 398 latlonheight: (52.205, 0.119, 0)
    test 399 phimlam: (0.911149, 0.002077)
    test 400 phimlamheight: (0.911149, 0.002077, 0)
    test 401 isequalTo: False
    test 402 antipode1: 52.205°S, 179.881°W
    test 403 antipode2: True
    test 404 antipode3: 52.205°N, 000.119°E
    test 405 antipode4: True
    test 406 antipode5: 52.205°N, 000.119°E
    test 407 isnormal1: True
    test 408 isnormal2: False
    test 409 normal1: False
    test 410 normal2: True
    test 411 toStr: 51°28′40″N, 000°00′06″W
    test 412 toStr: 51.4778°N, 000.0016°W
    test 413 precision: 0
    test 414 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 415 isequalTo: True
    test 416 isequalTo3: False
    test 417 latlon: (51.4778, -0.0016)
    test 418 phimlam: (0.898457, -0.000028)
    test 419 isequalTo: True
    test 420 isequalTo3: True
    test 421 latlon: (51.4778, -0.0016)
    test 422 latlonheight: (51.4778, -0.0016, 42.0)
    test 423 phimlam: (0.898457, -0.000028)
    test 424 phimlamheight: (0.898457, -0.000028, 42.0)
    test 425 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 426 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 427 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 428 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 429 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 430 rhumbLine: TMorder=6, azi12=113.805696, exact=False, lat1=51.4778, lon1=-0.0016, rhumb....biaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=6)
    test 431 rhumbAzimuthTo: 116.661
    test 432 rhumbDestination: 50.964234°N, 001.851383°E
    test 433 rhumbDestination: True
    test 434 rhumbDistanceTo: 40413.1
    test 435 rhumbMidpointo-0.5: 51.045501°N, 001.595726°E
    test 436 rhumbMidpointo: True
    test 437 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 438 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 439 rhumbMidpointo-0.75: 51.00475°N, 001.724419°E
    test 440 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 441 rhumbMidpointo-2.0: 50.800995°N, 002.366201°E

    testLatLonBase(pygeodesy.latlonBase, 23.03.30)
    test 442 lat, lon: 50.06632°N, 005.71475°W
    test 443 lat, lon: 50.066389°N, 005.714722°W
    test 444 isequalTo: True
    test 445 isequalTo3: True
    test 446 latlon: (52.205, 0.119)
    test 447 latlonheight: (52.205, 0.119, 0)
    test 448 phimlam: (0.911149, 0.002077)
    test 449 phimlamheight: (0.911149, 0.002077, 0)
    test 450 isequalTo: False
    test 451 antipode1: 52.205°S, 179.881°W
    test 452 antipode2: True
    test 453 antipode3: 52.205°N, 000.119°E
    test 454 antipode4: True
    test 455 antipode5: 52.205°N, 000.119°E
    test 456 isnormal1: True
    test 457 isnormal2: False
    test 458 normal1: False
    test 459 normal2: True
    test 460 toStr: 51°28′40″N, 000°00′06″W
    test 461 toStr: 51.4778°N, 000.0016°W
    test 462 precision: 0
    test 463 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 464 isequalTo: True
    test 465 isequalTo3: False
    test 466 latlon: (51.4778, -0.0016)
    test 467 phimlam: (0.898457, -0.000028)
    test 468 isequalTo: True
    test 469 isequalTo3: True
    test 470 latlon: (51.4778, -0.0016)
    test 471 latlonheight: (51.4778, -0.0016, 42.0)
    test 472 phimlam: (0.898457, -0.000028)
    test 473 phimlamheight: (0.898457, -0.000028, 42.0)
    test 474 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 475 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 476 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 477 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonNvectorBase(pygeodesy.nvectorBase, 23.03.19)
    test 478 lat, lon: 50.06632°N, 005.71475°W
    test 479 lat, lon: 50.066389°N, 005.714722°W
    test 480 isequalTo: True
    test 481 isequalTo3: True
    test 482 latlon: (52.205, 0.119)
    test 483 latlonheight: (52.205, 0.119, 0)
    test 484 phimlam: (0.911149, 0.002077)
    test 485 phimlamheight: (0.911149, 0.002077, 0)
    test 486 isequalTo: False
    test 487 antipode1: 52.205°S, 179.881°W
    test 488 antipode2: True
    test 489 antipode3: 52.205°N, 000.119°E
    test 490 antipode4: True
    test 491 antipode5: 52.205°N, 000.119°E
    test 492 isnormal1: True
    test 493 isnormal2: False
    test 494 normal1: False
    test 495 normal2: True
    test 496 toStr: 51°28′40″N, 000°00′06″W
    test 497 toStr: 51.4778°N, 000.0016°W
    test 498 precision: 0
    test 499 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 500 isequalTo: True
    test 501 isequalTo3: False
    test 502 latlon: (51.4778, -0.0016)
    test 503 phimlam: (0.898457, -0.000028)
    test 504 isequalTo: True
    test 505 isequalTo3: True
    test 506 latlon: (51.4778, -0.0016)
    test 507 latlonheight: (51.4778, -0.0016, 42.0)
    test 508 phimlam: (0.898457, -0.000028)
    test 509 phimlamheight: (0.898457, -0.000028, 42.0)
    test 510 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 511 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 512 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 513 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    testLatLonSphericalBase(pygeodesy.sphericalBase, 23.04.10)
    test 514 lat, lon: 50.06632°N, 005.71475°W
    test 515 lat, lon: 50.066389°N, 005.714722°W
    test 516 isequalTo: True
    test 517 isequalTo3: True
    test 518 latlon: (52.205, 0.119)
    test 519 latlonheight: (52.205, 0.119, 0)
    test 520 phimlam: (0.911149, 0.002077)
    test 521 phimlamheight: (0.911149, 0.002077, 0)
    test 522 isequalTo: False
    test 523 antipode1: 52.205°S, 179.881°W
    test 524 antipode2: True
    test 525 antipode3: 52.205°N, 000.119°E
    test 526 antipode4: True
    test 527 antipode5: 52.205°N, 000.119°E
    test 528 isnormal1: True
    test 529 isnormal2: False
    test 530 normal1: False
    test 531 normal2: True
    test 532 toStr: 51°28′40″N, 000°00′06″W
    test 533 toStr: 51.4778°N, 000.0016°W
    test 534 precision: 0
    test 535 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    test 536 isequalTo: True
    test 537 isequalTo3: False
    test 538 latlon: (51.4778, -0.0016)
    test 539 phimlam: (0.898457, -0.000028)
    test 540 isequalTo: True
    test 541 isequalTo3: True
    test 542 latlon: (51.4778, -0.0016)
    test 543 latlonheight: (51.4778, -0.0016, 42.0)
    test 544 phimlam: (0.898457, -0.000028)
    test 545 phimlamheight: (0.898457, -0.000028, 42.0)
    test 546 latlon: LatLon2Tuple(lat=51.4778, lon=-0.0016)
    test 547 latlonheight: LatLon3Tuple(lat=51.4778, lon=-0.0016, height=42.0)
    test 548 phimlam: PhiLam2Tuple(phi=0.898457, lam=-0.000028)
    test 549 phimlamheight: PhiLam3Tuple(phi=0.898457, lam=-0.000028, height=42.0)

    test 550 rhumbLine: TMorder=6, azi12=30.0, exact=False, lat1=51.4778, lon1=-0.0016, rhumb=Rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 551 rhumbLine: TMorder=6, azi12=105.484906, exact=False, lat1=51.4778, lon1=-0.0016, rhumb...., Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)
    test 552 rhumbAzimuthTo: 107.563
    test 553 rhumbDestination: 50.964155°N, 001.853°E
    test 554 rhumbDestination: True
    test 555 rhumbDistanceTo: 42186.1
    test 556 rhumbMidpointo-0.5: 51.069759°N, 001.625988°E
    test 557 rhumbMidpointo: True
    test 558 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 559 rhumbMidpointo-0.25: 51.09838°N, 001.482038°E
    test 560 rhumbMidpointo-0.75: 51.041139°N, 001.769848°E
    test 561 rhumbMidpointo-1.0: 51.012519°N, 001.913619°E
    test 562 rhumbMidpointo-2.0: 50.898038°N, 002.48782°E

    all 562 testLatLonBase.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 208.460 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLazily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36

    testing testLazily.py 23.03.27 isLazy=3
    test 1 isLazy: 3
    test 2 cmd: /usr/local/bin/python3.10 -c 'import pygeodesy, sys; sys.exit(0 if pygeodesy.isLazy == %s else 1)'
    test 3 PYGEODESY_LAZY_IMPORT=0: 0
    test 4 PYGEODESY_LAZY_IMPORT=1: 0
    test 5 PYGEODESY_LAZY_IMPORT=2: 0
    test 6 PYGEODESY_LAZY_IMPORT=3: 0
    test 7 PYGEODESY_LAZY_IMPORT=4: 0
    test 8 sys: <module 'sys' (built-in)>
    test 9 builtins: <module 'builtins' (built-in)>
    test 10 _frozen_importlib: <module '_frozen_importlib' (frozen)>
    test 11 _imp: <module '_imp' (built-in)>
    test 12 _thread: <module '_thread' (built-in)>
    test 13 _warnings: <module '_warnings' (built-in)>
    test 14 _weakref: <module '_weakref' (built-in)>
    test 15 _io: <module '_io' (built-in)>
    test 16 marshal: <module 'marshal' (built-in)>
    test 17 posix: <module 'posix' (built-in)>
    test 18 _frozen_importlib_external: <module '_frozen_importlib_external' (frozen)>
    test 19 time: <module 'time' (built-in)>
    test 20 zipimport: <module 'zipimport' (frozen)>
    test 21 _codecs: <module '_codecs' (built-in)>
    test 22 codecs: <module 'codecs' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/codecs.py'>
    test 23 encodings.aliases: <module 'encodings.aliases' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/aliases.py'>
    test 24 encodings: <module 'encodings' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/__init__.py'>
    test 25 encodings.utf_8: <module 'encodings.utf_8' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/encodings/utf_8.py'>
    test 26 _signal: <module '_signal' (built-in)>
    test 27 _abc: <module '_abc' (built-in)>
    test 28 abc: <module 'abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/abc.py'>
    test 29 io: <module 'io' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/io.py'>
    test 30 __main__: <module '__main__' from './test/testLazily.py'>
    test 31 warnings: <module 'warnings' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/warnings.py'>
    test 32 _stat: <module '_stat' (built-in)>
    test 33 stat: <module 'stat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/stat.py'>
    test 34 _collections_abc: <module '_collections_abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_collections_abc.py'>
    test 35 genericpath: <module 'genericpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/genericpath.py'>
    test 36 posixpath: <module 'posixpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/posixpath.py'>
    test 37 os.path: <module 'posixpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/posixpath.py'>
    test 38 os: <module 'os' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/os.py'>
    test 39 _sitebuiltins: <module '_sitebuiltins' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_sitebuiltins.py'>
    test 40 _distutils_hack: <module '_distutils_hack' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/_distutils_hack/__init__.py'>
    test 41 site: <module 'site' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site.py'>
    test 42 importlib._bootstrap: <module '_frozen_importlib' (frozen)>
    test 43 importlib._bootstrap_external: <module '_frozen_importlib_external' (frozen)>
    test 44 importlib: <module 'importlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/__init__.py'>
    test 45 importlib.machinery: <module 'importlib.machinery' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/machinery.py'>
    test 46 importlib._abc: <module 'importlib._abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/_abc.py'>
    test 47 itertools: <module 'itertools' (built-in)>
    test 48 keyword: <module 'keyword' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/keyword.py'>
    test 49 _operator: <module '_operator' (built-in)>
    test 50 operator: <module 'operator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/operator.py'>
    test 51 reprlib: <module 'reprlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/reprlib.py'>
    test 52 _collections: <module '_collections' (built-in)>
    test 53 collections: <module 'collections' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/__init__.py'>
    test 54 types: <module 'types' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/types.py'>
    test 55 _functools: <module '_functools' (built-in)>
    test 56 functools: <module 'functools' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/functools.py'>
    test 57 contextlib: <module 'contextlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py'>
    test 58 importlib.util: <module 'importlib.util' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/util.py'>
    test 59 runpy: <module 'runpy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/runpy.py'>
    test 60 __future__: <module '__future__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/__future__.py'>
    test 61 coverage.version: <module 'coverage.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/version.py'>
    test 62 atexit: <module 'atexit' (built-in)>
    test 63 enum: <module 'enum' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/enum.py'>
    test 64 _sre: <module '_sre' (built-in)>
    test 65 sre_constants: <module 'sre_constants' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_constants.py'>
    test 66 sre_parse: <module 'sre_parse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_parse.py'>
    test 67 sre_compile: <module 'sre_compile' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_compile.py'>
    test 68 _locale: <module '_locale' (built-in)>
    test 69 copyreg: <module 'copyreg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copyreg.py'>
    test 70 re: <module 're' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/re.py'>
    test 71 errno: <module 'errno' (built-in)>
    test 72 signal: <module 'signal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/signal.py'>
    test 73 _weakrefset: <module '_weakrefset' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_weakrefset.py'>
    test 74 threading: <module 'threading' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py'>
    test 75 fcntl: <module 'fcntl' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/fcntl.cpython-310-darwin.so'>
    test 76 _posixsubprocess: <module '_posixsubprocess' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_posixsubprocess.cpython-310-darwin.so'>
    test 77 select: <module 'select' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/select.cpython-310-darwin.so'>
    test 78 collections.abc: <module 'collections.abc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/abc.py'>
    test 79 math: <module 'math' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/math.cpython-310-darwin.so'>
    test 80 selectors: <module 'selectors' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/selectors.py'>
    test 81 subprocess: <module 'subprocess' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py'>
    test 82 platform: <module 'platform' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/platform.py'>
    test 83 typing.io: <class 'typing.io'>
    test 84 typing.re: <class 'typing.re'>
    test 85 typing: <module 'typing' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/typing.py'>
    test 86 coverage.env: <module 'coverage.env' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/env.py'>
    test 87 _hashlib: <module '_hashlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_hashlib.cpython-310-darwin.so'>
    test 88 _blake2: <module '_blake2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_blake2.cpython-310-darwin.so'>
    test 89 hashlib: <module 'hashlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/hashlib.py'>
    test 90 ntpath: <module 'ntpath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ntpath.py'>
    test 91 coverage.exceptions: <module 'coverage.exceptions' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/exceptions.py'>
    test 92 _datetime: <module '_datetime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_datetime.cpython-310-darwin.so'>
    test 93 datetime: <module 'datetime' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/datetime.py'>
    test 94 _ast: <module '_ast' (built-in)>
    test 95 ast: <module 'ast' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ast.py'>
    test 96 _opcode: <module '_opcode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_opcode.cpython-310-darwin.so'>
    test 97 opcode: <module 'opcode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/opcode.py'>
    test 98 dis: <module 'dis' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/dis.py'>
    test 99 token: <module 'token' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/token.py'>
    test 100 tokenize: <module 'tokenize' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/tokenize.py'>
    test 101 linecache: <module 'linecache' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/linecache.py'>
    test 102 inspect: <module 'inspect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/inspect.py'>
    test 103 locale: <module 'locale' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/locale.py'>
    test 104 fnmatch: <module 'fnmatch' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/fnmatch.py'>
    test 105 urllib: <module 'urllib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/__init__.py'>
    test 106 urllib.parse: <module 'urllib.parse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/urllib/parse.py'>
    test 107 pathlib: <module 'pathlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/pathlib.py'>
    test 108 coverage.types: <module 'coverage.types' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/types.py'>
    test 109 coverage.misc: <module 'coverage.misc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/misc.py'>
    test 110 coverage.files: <module 'coverage.files' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/files.py'>
    test 111 coverage.plugin: <module 'coverage.plugin' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/plugin.py'>
    test 112 weakref: <module 'weakref' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/weakref.py'>
    test 113 copy: <module 'copy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/copy.py'>
    test 114 dataclasses: <module 'dataclasses' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/dataclasses.py'>
    test 115 pprint: <module 'pprint' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/pprint.py'>
    test 116 coverage.debug: <module 'coverage.debug' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/debug.py'>
    test 117 coverage.results: <module 'coverage.results' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/results.py'>
    test 118 coverage.report: <module 'coverage.report' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/report.py'>
    test 119 coverage.annotate: <module 'coverage.annotate' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/annotate.py'>
    test 120 configparser: <module 'configparser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/configparser.py'>
    test 121 coverage.tomlconfig: <module 'coverage.tomlconfig' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/tomlconfig.py'>
    test 122 coverage.config: <module 'coverage.config' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/config.py'>
    test 123 glob: <module 'glob' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/glob.py'>
    test 124 _bisect: <module '_bisect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_bisect.cpython-310-darwin.so'>
    test 125 bisect: <module 'bisect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bisect.py'>
    test 126 _random: <module '_random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_random.cpython-310-darwin.so'>
    test 127 _sha512: <module '_sha512' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_sha512.cpython-310-darwin.so'>
    test 128 random: <module 'random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/random.py'>
    test 129 _socket: <module '_socket' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_socket.cpython-310-darwin.so'>
    test 130 array: <module 'array' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/array.cpython-310-darwin.so'>
    test 131 socket: <module 'socket' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/socket.py'>
    test 132 _sqlite3: <module '_sqlite3' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_sqlite3.cpython-310-darwin.so'>
    test 133 sqlite3.dbapi2: <module 'sqlite3.dbapi2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sqlite3/dbapi2.py'>
    test 134 sqlite3: <module 'sqlite3' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sqlite3/__init__.py'>
    test 135 textwrap: <module 'textwrap' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/textwrap.py'>
    test 136 zlib: <module 'zlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/zlib.cpython-310-darwin.so'>
    test 137 _json: <module '_json' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_json.cpython-310-darwin.so'>
    test 138 json.scanner: <module 'json.scanner' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/scanner.py'>
    test 139 json.decoder: <module 'json.decoder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py'>
    test 140 json.encoder: <module 'json.encoder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py'>
    test 141 json: <module 'json' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py'>
    test 142 coverage.numbits: <module 'coverage.numbits' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/numbits.py'>
    test 143 coverage.sqldata: <module 'coverage.sqldata' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/sqldata.py'>
    test 144 coverage.data: <module 'coverage.data' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/data.py'>
    test 145 coverage.disposition: <module 'coverage.disposition' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/disposition.py'>
    test 146 coverage.pytracer: <module 'coverage.pytracer' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/pytracer.py'>
    test 147 coverage.tracer: <module 'coverage.tracer' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/tracer.cpython-310-darwin.so'>
    test 148 coverage.collector: <module 'coverage.collector' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/collector.py'>
    test 149 coverage.context: <module 'coverage.context' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/context.py'>
    test 150 _compression: <module '_compression' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_compression.py'>
    test 151 _bz2: <module '_bz2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_bz2.cpython-310-darwin.so'>
    test 152 bz2: <module 'bz2' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/bz2.py'>
    test 153 _lzma: <module '_lzma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_lzma.cpython-310-darwin.so'>
    test 154 lzma: <module 'lzma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lzma.py'>
    test 155 shutil: <module 'shutil' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/shutil.py'>
    test 156 coverage.templite: <module 'coverage.templite' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/templite.py'>
    test 157 coverage.html: <module 'coverage.html' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/html.py'>
    test 158 sysconfig: <module 'sysconfig' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sysconfig.py'>
    test 159 traceback: <module 'traceback' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/traceback.py'>
    test 160 coverage.bytecode: <module 'coverage.bytecode' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/bytecode.py'>
    test 161 coverage.phystokens: <module 'coverage.phystokens' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/phystokens.py'>
    test 162 coverage.parser: <module 'coverage.parser' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/parser.py'>
    test 163 coverage.python: <module 'coverage.python' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/python.py'>
    test 164 coverage.inorout: <module 'coverage.inorout' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/inorout.py'>
    test 165 coverage.jsonreport: <module 'coverage.jsonreport' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/jsonreport.py'>
    test 166 _struct: <module '_struct' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_struct.cpython-310-darwin.so'>
    test 167 struct: <module 'struct' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/struct.py'>
    test 168 binascii: <module 'binascii' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/binascii.cpython-310-darwin.so'>
    test 169 base64: <module 'base64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/base64.py'>
    test 170 coverage.lcovreport: <module 'coverage.lcovreport' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/lcovreport.py'>
    test 171 multiprocessing.process: <module 'multiprocessing.process' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/process.py'>
    test 172 _compat_pickle: <module '_compat_pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_compat_pickle.py'>
    test 173 _pickle: <module '_pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_pickle.cpython-310-darwin.so'>
    test 174 pickle: <module 'pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/pickle.py'>
    test 175 multiprocessing.reduction: <module 'multiprocessing.reduction' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/reduction.py'>
    test 176 multiprocessing.context: <module 'multiprocessing.context' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/context.py'>
    test 177 __mp_main__: <module 'coverage.__main__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/__main__.py'>
    test 178 multiprocessing: <module 'multiprocessing' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/multiprocessing/__init__.py'>
    test 179 coverage.multiproc: <module 'coverage.multiproc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/multiproc.py'>
    test 180 coverage.plugin_support: <module 'coverage.plugin_support' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/plugin_support.py'>
    test 181 coverage.summary: <module 'coverage.summary' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/summary.py'>
    test 182 xml: <module 'xml' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/__init__.py'>
    test 183 xml.dom.domreg: <module 'xml.dom.domreg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/domreg.py'>
    test 184 xml.dom: <module 'xml.dom' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/__init__.py'>
    test 185 xml.dom.minicompat: <module 'xml.dom.minicompat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/minicompat.py'>
    test 186 xml.dom.NodeFilter: <module 'xml.dom.NodeFilter' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/NodeFilter.py'>
    test 187 xml.dom.xmlbuilder: <module 'xml.dom.xmlbuilder' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/xmlbuilder.py'>
    test 188 xml.dom.minidom: <module 'xml.dom.minidom' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/xml/dom/minidom.py'>
    test 189 coverage.xmlreport: <module 'coverage.xmlreport' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/xmlreport.py'>
    test 190 coverage.control: <module 'coverage.control' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/control.py'>
    test 191 coverage: <module 'coverage' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/__init__.py'>
    test 192 gettext: <module 'gettext' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/gettext.py'>
    test 193 optparse: <module 'optparse' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/optparse.py'>
    test 194 shlex: <module 'shlex' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/shlex.py'>
    test 195 coverage.execfile: <module 'coverage.execfile' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/execfile.py'>
    test 196 coverage.cmdline: <module 'coverage.cmdline' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/coverage/cmdline.py'>
    test 197 $coverage.debug.DebugOutputFile.the_one: <module '$coverage.debug.DebugOutputFile.the_one'>
    test 198 _sysconfigdata__darwin_darwin: <module '_sysconfigdata__darwin_darwin' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_sysconfigdata__darwin_darwin.py'>
    test 199 _osx_support: <module '_osx_support' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/_osx_support.py'>
    test 200 pygeodesy.interns: <module 'pygeodesy.interns' from './pygeodesy/interns.py'>
    test 201 pygeodesy.lazily: <module 'pygeodesy.lazily' from './pygeodesy/lazily.py'>
    test 202 pygeodesy: <module 'pygeodesy' from './pygeodesy/__init__.py'>
    test 203 pygeodesy.errors: <module 'pygeodesy.errors' from './pygeodesy/errors.py'>
    test 204 numbers: <module 'numbers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/numbers.py'>
    test 205 pygeodesy.basics: <module 'pygeodesy.basics' from './pygeodesy/basics.py'>
    test 206 pygeodesy.streprs: <module 'pygeodesy.streprs' from './pygeodesy/streprs.py'>
    test 207 pygeodesy.props: <module 'pygeodesy.props' from './pygeodesy/props.py'>
    test 208 pygeodesy.named: <module 'pygeodesy.named' from './pygeodesy/named.py'>
    test 209 pygeodesy.unitsBase: <module 'pygeodesy.unitsBase' from './pygeodesy/unitsBase.py'>
    test 210 pygeodesy.constants: <module 'pygeodesy.constants' from './pygeodesy/constants.py'>
    test 211 _string: <module '_string' (built-in)>
    test 212 string: <module 'string' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/string.py'>
    test 213 pygeodesy.dms: <module 'pygeodesy.dms' from './pygeodesy/dms.py'>
    test 214 pygeodesy.units: <module 'pygeodesy.units' from './pygeodesy/units.py'>
    test 215 pygeodesy.namedTuples: <module 'pygeodesy.namedTuples' from './pygeodesy/namedTuples.py'>
    test 216 pygeodesy.utily: <module 'pygeodesy.utily' from './pygeodesy/utily.py'>
    test 217 pygeodesy.iters: <module 'pygeodesy.iters' from './pygeodesy/iters.py'>
    test 218 geographiclib: <module 'geographiclib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/geographiclib/__init__.py'>
    test 219 numpy._globals: <module 'numpy._globals' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_globals.py'>
    test 220 numpy.__config__: <module 'numpy.__config__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/__config__.py'>
    test 221 numpy._distributor_init: <module 'numpy._distributor_init' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_distributor_init.py'>
    test 222 numpy._version: <module 'numpy._version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_version.py'>
    test 223 numpy.version: <module 'numpy.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/version.py'>
    test 224 numpy.core._multiarray_umath: <module 'numpy.core._multiarray_umath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_multiarray_umath.cpython-310-darwin.so'>
    test 225 numpy.compat._inspect: <module 'numpy.compat._inspect' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/_inspect.py'>
    test 226 numpy.compat._pep440: <module 'numpy.compat._pep440' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/_pep440.py'>
    test 227 numpy.compat.py3k: <module 'numpy.compat.py3k' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/py3k.py'>
    test 228 numpy.compat: <module 'numpy.compat' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/compat/__init__.py'>
    test 229 numpy.core.overrides: <module 'numpy.core.overrides' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/overrides.py'>
    test 230 numpy.core.multiarray: <module 'numpy.core.multiarray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/multiarray.py'>
    test 231 numpy.core.umath: <module 'numpy.core.umath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/umath.py'>
    test 232 numpy.core._string_helpers: <module 'numpy.core._string_helpers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_string_helpers.py'>
    test 233 numpy.core._dtype: <module 'numpy.core._dtype' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_dtype.py'>
    test 234 numpy.core._type_aliases: <module 'numpy.core._type_aliases' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_type_aliases.py'>
    test 235 numpy.core.numerictypes: <module 'numpy.core.numerictypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/numerictypes.py'>
    test 236 numpy.core._exceptions: <module 'numpy.core._exceptions' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_exceptions.py'>
    test 237 numpy.core._methods: <module 'numpy.core._methods' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_methods.py'>
    test 238 numpy.core.fromnumeric: <module 'numpy.core.fromnumeric' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/fromnumeric.py'>
    test 239 numpy.core.shape_base: <module 'numpy.core.shape_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/shape_base.py'>
    test 240 numpy.core._ufunc_config: <module 'numpy.core._ufunc_config' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_ufunc_config.py'>
    test 241 numpy.core.arrayprint: <module 'numpy.core.arrayprint' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/arrayprint.py'>
    test 242 numpy.core._asarray: <module 'numpy.core._asarray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_asarray.py'>
    test 243 numpy.core.numeric: <module 'numpy.core.numeric' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/numeric.py'>
    test 244 numpy.core.defchararray: <module 'numpy.core.defchararray' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/defchararray.py'>
    test 245 numpy.core.records: <module 'numpy.core.records' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/records.py'>
    test 246 numpy.core.memmap: <module 'numpy.core.memmap' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/memmap.py'>
    test 247 numpy.core.function_base: <module 'numpy.core.function_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/function_base.py'>
    test 248 numpy.core._machar: <module 'numpy.core._machar' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_machar.py'>
    test 249 numpy.core.getlimits: <module 'numpy.core.getlimits' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/getlimits.py'>
    test 250 numpy.core.einsumfunc: <module 'numpy.core.einsumfunc' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/einsumfunc.py'>
    test 251 numpy.core._multiarray_tests: <module 'numpy.core._multiarray_tests' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_multiarray_tests.cpython-310-darwin.so'>
    test 252 numpy.core._add_newdocs: <module 'numpy.core._add_newdocs' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_add_newdocs.py'>
    test 253 numpy.core._add_newdocs_scalars: <module 'numpy.core._add_newdocs_scalars' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_add_newdocs_scalars.py'>
    test 254 numpy.core._dtype_ctypes: <module 'numpy.core._dtype_ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_dtype_ctypes.py'>
    test 255 _ctypes: <module '_ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/lib-dynload/_ctypes.cpython-310-darwin.so'>
    test 256 ctypes._endian: <module 'ctypes._endian' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ctypes/_endian.py'>
    test 257 ctypes: <module 'ctypes' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ctypes/__init__.py'>
    test 258 numpy.core._internal: <module 'numpy.core._internal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/_internal.py'>
    test 259 numpy._pytesttester: <module 'numpy._pytesttester' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/_pytesttester.py'>
    test 260 numpy.core: <module 'numpy.core' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/core/__init__.py'>
    test 261 numpy.lib.mixins: <module 'numpy.lib.mixins' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/mixins.py'>
    test 262 numpy.lib.ufunclike: <module 'numpy.lib.ufunclike' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/ufunclike.py'>
    test 263 numpy.lib.type_check: <module 'numpy.lib.type_check' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/type_check.py'>
    test 264 numpy.lib.scimath: <module 'numpy.lib.scimath' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/scimath.py'>
    test 265 numpy.lib.stride_tricks: <module 'numpy.lib.stride_tricks' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/stride_tricks.py'>
    test 266 numpy.lib.twodim_base: <module 'numpy.lib.twodim_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/twodim_base.py'>
    test 267 numpy.linalg._umath_linalg: <module 'numpy.linalg._umath_linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/_umath_linalg.cpython-310-darwin.so'>
    test 268 numpy.linalg.linalg: <module 'numpy.linalg.linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/linalg.py'>
    test 269 numpy.linalg: <module 'numpy.linalg' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/linalg/__init__.py'>
    test 270 numpy.matrixlib.defmatrix: <module 'numpy.matrixlib.defmatrix' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/matrixlib/defmatrix.py'>
    test 271 numpy.matrixlib: <module 'numpy.matrixlib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/matrixlib/__init__.py'>
    test 272 numpy.lib.histograms: <module 'numpy.lib.histograms' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/histograms.py'>
    test 273 numpy.lib.function_base: <module 'numpy.lib.function_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/function_base.py'>
    test 274 numpy.lib.index_tricks: <module 'numpy.lib.index_tricks' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/index_tricks.py'>
    test 275 numpy.lib.nanfunctions: <module 'numpy.lib.nanfunctions' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/nanfunctions.py'>
    test 276 numpy.lib.shape_base: <module 'numpy.lib.shape_base' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/shape_base.py'>
    test 277 numpy.lib.polynomial: <module 'numpy.lib.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/polynomial.py'>
    test 278 numpy.lib.utils: <module 'numpy.lib.utils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/utils.py'>
    test 279 numpy.lib.arraysetops: <module 'numpy.lib.arraysetops' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arraysetops.py'>
    test 280 numpy.lib.format: <module 'numpy.lib.format' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/format.py'>
    test 281 numpy.lib._datasource: <module 'numpy.lib._datasource' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_datasource.py'>
    test 282 numpy.lib._iotools: <module 'numpy.lib._iotools' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_iotools.py'>
    test 283 numpy.lib.npyio: <module 'numpy.lib.npyio' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/npyio.py'>
    test 284 numpy.lib.arrayterator: <module 'numpy.lib.arrayterator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arrayterator.py'>
    test 285 numpy.lib.arraypad: <module 'numpy.lib.arraypad' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/arraypad.py'>
    test 286 numpy.lib._version: <module 'numpy.lib._version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/_version.py'>
    test 287 numpy.lib: <module 'numpy.lib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/lib/__init__.py'>
    test 288 numpy.fft._pocketfft_internal: <module 'numpy.fft._pocketfft_internal' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/_pocketfft_internal.cpython-310-darwin.so'>
    test 289 numpy.fft._pocketfft: <module 'numpy.fft._pocketfft' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/_pocketfft.py'>
    test 290 numpy.fft.helper: <module 'numpy.fft.helper' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/helper.py'>
    test 291 numpy.fft: <module 'numpy.fft' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/fft/__init__.py'>
    test 292 numpy.polynomial.polyutils: <module 'numpy.polynomial.polyutils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/polyutils.py'>
    test 293 numpy.polynomial._polybase: <module 'numpy.polynomial._polybase' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/_polybase.py'>
    test 294 numpy.polynomial.polynomial: <module 'numpy.polynomial.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/polynomial.py'>
    test 295 numpy.polynomial.chebyshev: <module 'numpy.polynomial.chebyshev' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/chebyshev.py'>
    test 296 numpy.polynomial.legendre: <module 'numpy.polynomial.legendre' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/legendre.py'>
    test 297 numpy.polynomial.hermite: <module 'numpy.polynomial.hermite' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/hermite.py'>
    test 298 numpy.polynomial.hermite_e: <module 'numpy.polynomial.hermite_e' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/hermite_e.py'>
    test 299 numpy.polynomial.laguerre: <module 'numpy.polynomial.laguerre' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/laguerre.py'>
    test 300 numpy.polynomial: <module 'numpy.polynomial' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/polynomial/__init__.py'>
    test 301 cython_runtime: <module 'cython_runtime'>
    test 302 _cython_0_29_32: <module '_cython_0_29_32'>
    test 303 numpy.random._common: <module 'numpy.random._common' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_common.cpython-310-darwin.so'>
    test 304 hmac: <module 'hmac' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/hmac.py'>
    test 305 secrets: <module 'secrets' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/secrets.py'>
    test 306 numpy.random.bit_generator: <module 'numpy.random.bit_generator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/bit_generator.cpython-310-darwin.so'>
    test 307 numpy.random._bounded_integers: <module 'numpy.random._bounded_integers' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_bounded_integers.cpython-310-darwin.so'>
    test 308 numpy.random._mt19937: <module 'numpy.random._mt19937' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_mt19937.cpython-310-darwin.so'>
    test 309 numpy.random.mtrand: <module 'numpy.random.mtrand' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/mtrand.cpython-310-darwin.so'>
    test 310 numpy.random._philox: <module 'numpy.random._philox' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_philox.cpython-310-darwin.so'>
    test 311 numpy.random._pcg64: <module 'numpy.random._pcg64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_pcg64.cpython-310-darwin.so'>
    test 312 numpy.random._sfc64: <module 'numpy.random._sfc64' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_sfc64.cpython-310-darwin.so'>
    test 313 numpy.random._generator: <module 'numpy.random._generator' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_generator.cpython-310-darwin.so'>
    test 314 numpy.random._pickle: <module 'numpy.random._pickle' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/_pickle.py'>
    test 315 numpy.random: <module 'numpy.random' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/random/__init__.py'>
    test 316 numpy.ctypeslib: <module 'numpy.ctypeslib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ctypeslib.py'>
    test 317 numpy.ma.core: <module 'numpy.ma.core' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/core.py'>
    test 318 numpy.ma.extras: <module 'numpy.ma.extras' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/extras.py'>
    test 319 numpy.ma: <module 'numpy.ma' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/ma/__init__.py'>
    test 320 numpy: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/numpy/__init__.py'>
    test 321 scipy._lib._testutils: <module 'scipy._lib._testutils' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_testutils.py'>
    test 322 scipy._lib: <module 'scipy._lib' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/__init__.py'>
    test 323 scipy._lib.deprecation: <module 'scipy._lib.deprecation' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/deprecation.py'>
    test 324 scipy.__config__: <module 'scipy.__config__' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/__config__.py'>
    test 325 scipy.version: <module 'scipy.version' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/version.py'>
    test 326 scipy._distributor_init: <module 'scipy._distributor_init' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_distributor_init.py'>
    test 327 scipy._lib._pep440: <module 'scipy._lib._pep440' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_pep440.py'>
    test 328 scipy._lib._ccallback_c: <module 'scipy._lib._ccallback_c' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_ccallback_c.cpython-310-darwin.so'>
    test 329 scipy._lib._ccallback: <module 'scipy._lib._ccallback' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/_lib/_ccallback.py'>
    test 330 scipy: <module 'scipy' from '/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/scipy/__init__.py'>
    test 331 bases: <module 'bases' from './test/bases.py'>

    all 331 testLazily.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 146.130 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLcc.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testLcc.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLcc.py line 11
# lazily imported pygeodesy.Conic from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Conics from .lcc by testLcc.py line 11
# lazily imported pygeodesy.Datums from .datums by testLcc.py line 11
# lazily imported pygeodesy.Lcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.toLcc from .lcc by testLcc.py line 11
# lazily imported pygeodesy.ellipsoidalNvector by testLcc.py line 92
# lazily imported pygeodesy.ellipsoidalVincenty by testLcc.py line 92

    testing testLcc.py 23.03.27 (module pygeodesy.lcc 23.03.19) isLazy=3

    testLcc(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: [E:448251, N:5411932]
    test 4 lb1: WRF_Lb.WGS84
    test 5 lb1: lb1
    test 6 lb1: (81.929348, -79.558697)
    test 7 lb1: (1.429937, -1.388561)
    test 8 LatLon: 46.5°N, 003.0°E
    test 9 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 10 toLcc1: 700000 6600000
    test 11 toLcc1: 46.5°N, 003.0°E
    test 12 lb2: 1894411 1564650
    test 13 lb2: Clarke1866
    test 14 lb2: lb2
    test 15 toLatLon2: 35.0°N, 075.0°W
    test 16 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 17 toLatLon2: NAD27
    test 18 toLcc2: 1894410.9 1564649.5
    test 19 toLcc2: [E:1894411, N:1564649]
    test 20 toLcc2: Snyder.NAD27

    test 21 Be08Lb: 49.833334°N, 003.025883°E
    test 22 Be08Lb: GRS80

    test 23 Be08Lb: 49.833334°N, 004.359216°E
    test 24 Be08Lb: GRS80

    test 25 Be08Lb: 49.833334°N, 005.692549°E
    test 26 Be08Lb: GRS80

    test 27 Be08Lb: 51.166667°N, 003.025883°E
    test 28 Be08Lb: GRS80

    test 29 Be08Lb: 51.166667°N, 004.359216°E
    test 30 Be08Lb: GRS80

    test 31 Be08Lb: 51.166667°N, 005.692549°E
    test 32 Be08Lb: GRS80

    test 33 Be72Lb: 49.833334°N, 003.034153°E
    test 34 Be72Lb: NAD83

    test 35 Be72Lb: 49.833334°N, 004.367487°E
    test 36 Be72Lb: NAD83

    test 37 Be72Lb: 49.833334°N, 005.70082°E
    test 38 Be72Lb: NAD83

    test 39 Be72Lb: 51.166667°N, 003.034153°E
    test 40 Be72Lb: NAD83

    test 41 Be72Lb: 51.166667°N, 004.367487°E
    test 42 Be72Lb: NAD83

    test 43 Be72Lb: 51.166667°N, 005.70082°E
    test 44 Be72Lb: NAD83

    test 45 Fr93Lb: 49.0°N, 002.0°W
    test 46 Fr93Lb: WGS84

    test 47 Fr93Lb: 49.0°N, 003.0°E
    test 48 Fr93Lb: WGS84

    test 49 Fr93Lb: 49.0°N, 008.0°E
    test 50 Fr93Lb: WGS84

    test 51 Fr93Lb: 44.0°N, 002.0°W
    test 52 Fr93Lb: WGS84

    test 53 Fr93Lb: 44.0°N, 003.0°E
    test 54 Fr93Lb: WGS84

    test 55 Fr93Lb: 44.0°N, 008.0°E
    test 56 Fr93Lb: WGS84

    test 57 MaNLb: 31.73°N, 008.54°W
    test 58 MaNLb: NTF

    test 59 MaNLb: 31.73°N, 005.4°W
    test 60 MaNLb: NTF

    test 61 MaNLb: 31.73°N, 002.26°W
    test 62 MaNLb: NTF

    test 63 MaNLb: 34.87°N, 008.54°W
    test 64 MaNLb: NTF

    test 65 MaNLb: 34.87°N, 005.4°W
    test 66 MaNLb: NTF

    test 67 MaNLb: 34.87°N, 002.26°W
    test 68 MaNLb: NTF

    test 69 MxLb: 17.5°N, 114.0°W
    test 70 MxLb: WGS84

    test 71 MxLb: 17.5°N, 102.0°W
    test 72 MxLb: WGS84

    test 73 MxLb: 17.5°N, 090.0°W
    test 74 MxLb: WGS84

    test 75 MxLb: 29.5°N, 114.0°W
    test 76 MxLb: WGS84

    test 77 MxLb: 29.5°N, 102.0°W
    test 78 MxLb: WGS84

    test 79 MxLb: 29.5°N, 090.0°W
    test 80 MxLb: WGS84

    test 81 PyT_Lb: 45.898939°N, 000.540154°E
    test 82 PyT_Lb: NTF

    test 83 PyT_Lb: 45.898939°N, 002.337229°E
    test 84 PyT_Lb: NTF

    test 85 PyT_Lb: 45.898939°N, 004.134305°E
    test 86 PyT_Lb: NTF

    test 87 PyT_Lb: 47.696014°N, 000.540154°E
    test 88 PyT_Lb: NTF

    test 89 PyT_Lb: 47.696014°N, 002.337229°E
    test 90 PyT_Lb: NTF

    test 91 PyT_Lb: 47.696014°N, 004.134305°E
    test 92 PyT_Lb: NTF

    test 93 Snyder: 33.0°N, 108.0°W
    test 94 Snyder: NAD27

    test 95 Snyder: 33.0°N, 096.0°W
    test 96 Snyder: NAD27

    test 97 Snyder: 33.0°N, 084.0°W
    test 98 Snyder: NAD27

    test 99 Snyder: 45.0°N, 108.0°W
    test 100 Snyder: NAD27

    test 101 Snyder: 45.0°N, 096.0°W
    test 102 Snyder: NAD27

    test 103 Snyder: 45.0°N, 084.0°W
    test 104 Snyder: NAD27

    test 105 USA_Lb: 33.0°N, 108.0°W
    test 106 USA_Lb: WGS84

    test 107 USA_Lb: 33.0°N, 096.0°W
    test 108 USA_Lb: WGS84

    test 109 USA_Lb: 33.0°N, 084.0°W
    test 110 USA_Lb: WGS84

    test 111 USA_Lb: 45.0°N, 108.0°W
    test 112 USA_Lb: WGS84

    test 113 USA_Lb: 45.0°N, 096.0°W
    test 114 USA_Lb: WGS84

    test 115 USA_Lb: 45.0°N, 084.0°W
    test 116 USA_Lb: WGS84

    test 117 WRF_Lb: 33.0°N, 109.0°W
    test 118 WRF_Lb: WGS84

    test 119 WRF_Lb: 33.0°N, 097.0°W
    test 120 WRF_Lb: WGS84

    test 121 WRF_Lb: 33.0°N, 085.0°W
    test 122 WRF_Lb: WGS84

    test 123 WRF_Lb: 45.0°N, 109.0°W
    test 124 WRF_Lb: WGS84

    test 125 WRF_Lb: 45.0°N, 097.0°W
    test 126 WRF_Lb: WGS84

    test 127 WRF_Lb: 45.0°N, 085.0°W
    test 128 WRF_Lb: WGS84


    testLcc(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 129 lb1: 448251.0 5411932.0001
    test 130 lb1: 448251, 5411932
    test 131 lb1: [E:448251, N:5411932]
    test 132 lb1: WRF_Lb.WGS84
    test 133 lb1: lb1
    test 134 lb1: (81.929348, -79.558697)
    test 135 lb1: (1.429937, -1.388561)
    test 136 LatLon: 46.5°N, 003.0°E
    test 137 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 138 toLcc1: 700000 6600000
    test 139 toLcc1: 46.5°N, 003.0°E
    test 140 lb2: 1894411 1564650
    test 141 lb2: Clarke1866
    test 142 lb2: lb2
    test 143 toLatLon2: 35.0°N, 075.0°W
    test 144 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 145 toLatLon2: NAD27
    test 146 toLcc2: 1894410.9 1564649.5
    test 147 toLcc2: [E:1894411, N:1564649]
    test 148 toLcc2: Snyder.NAD27

    test 149 Be08Lb: 49.833334°N, 003.025883°E
    test 150 Be08Lb: GRS80

    test 151 Be08Lb: 49.833334°N, 004.359216°E
    test 152 Be08Lb: GRS80

    test 153 Be08Lb: 49.833334°N, 005.692549°E
    test 154 Be08Lb: GRS80

    test 155 Be08Lb: 51.166667°N, 003.025883°E
    test 156 Be08Lb: GRS80

    test 157 Be08Lb: 51.166667°N, 004.359216°E
    test 158 Be08Lb: GRS80

    test 159 Be08Lb: 51.166667°N, 005.692549°E
    test 160 Be08Lb: GRS80

    test 161 Be72Lb: 49.833334°N, 003.034153°E
    test 162 Be72Lb: NAD83

    test 163 Be72Lb: 49.833334°N, 004.367487°E
    test 164 Be72Lb: NAD83

    test 165 Be72Lb: 49.833334°N, 005.70082°E
    test 166 Be72Lb: NAD83

    test 167 Be72Lb: 51.166667°N, 003.034153°E
    test 168 Be72Lb: NAD83

    test 169 Be72Lb: 51.166667°N, 004.367487°E
    test 170 Be72Lb: NAD83

    test 171 Be72Lb: 51.166667°N, 005.70082°E
    test 172 Be72Lb: NAD83

    test 173 Fr93Lb: 49.0°N, 002.0°W
    test 174 Fr93Lb: WGS84

    test 175 Fr93Lb: 49.0°N, 003.0°E
    test 176 Fr93Lb: WGS84

    test 177 Fr93Lb: 49.0°N, 008.0°E
    test 178 Fr93Lb: WGS84

    test 179 Fr93Lb: 44.0°N, 002.0°W
    test 180 Fr93Lb: WGS84

    test 181 Fr93Lb: 44.0°N, 003.0°E
    test 182 Fr93Lb: WGS84

    test 183 Fr93Lb: 44.0°N, 008.0°E
    test 184 Fr93Lb: WGS84

    test 185 MaNLb: 31.73°N, 008.54°W
    test 186 MaNLb: NTF

    test 187 MaNLb: 31.73°N, 005.4°W
    test 188 MaNLb: NTF

    test 189 MaNLb: 31.73°N, 002.26°W
    test 190 MaNLb: NTF

    test 191 MaNLb: 34.87°N, 008.54°W
    test 192 MaNLb: NTF

    test 193 MaNLb: 34.87°N, 005.4°W
    test 194 MaNLb: NTF

    test 195 MaNLb: 34.87°N, 002.26°W
    test 196 MaNLb: NTF

    test 197 MxLb: 17.5°N, 114.0°W
    test 198 MxLb: WGS84

    test 199 MxLb: 17.5°N, 102.0°W
    test 200 MxLb: WGS84

    test 201 MxLb: 17.5°N, 090.0°W
    test 202 MxLb: WGS84

    test 203 MxLb: 29.5°N, 114.0°W
    test 204 MxLb: WGS84

    test 205 MxLb: 29.5°N, 102.0°W
    test 206 MxLb: WGS84

    test 207 MxLb: 29.5°N, 090.0°W
    test 208 MxLb: WGS84

    test 209 PyT_Lb: 45.898939°N, 000.540154°E
    test 210 PyT_Lb: NTF

    test 211 PyT_Lb: 45.898939°N, 002.337229°E
    test 212 PyT_Lb: NTF

    test 213 PyT_Lb: 45.898939°N, 004.134305°E
    test 214 PyT_Lb: NTF

    test 215 PyT_Lb: 47.696014°N, 000.540154°E
    test 216 PyT_Lb: NTF

    test 217 PyT_Lb: 47.696014°N, 002.337229°E
    test 218 PyT_Lb: NTF

    test 219 PyT_Lb: 47.696014°N, 004.134305°E
    test 220 PyT_Lb: NTF

    test 221 Snyder: 33.0°N, 108.0°W
    test 222 Snyder: NAD27

    test 223 Snyder: 33.0°N, 096.0°W
    test 224 Snyder: NAD27

    test 225 Snyder: 33.0°N, 084.0°W
    test 226 Snyder: NAD27

    test 227 Snyder: 45.0°N, 108.0°W
    test 228 Snyder: NAD27

    test 229 Snyder: 45.0°N, 096.0°W
    test 230 Snyder: NAD27

    test 231 Snyder: 45.0°N, 084.0°W
    test 232 Snyder: NAD27

    test 233 USA_Lb: 33.0°N, 108.0°W
    test 234 USA_Lb: WGS84

    test 235 USA_Lb: 33.0°N, 096.0°W
    test 236 USA_Lb: WGS84

    test 237 USA_Lb: 33.0°N, 084.0°W
    test 238 USA_Lb: WGS84

    test 239 USA_Lb: 45.0°N, 108.0°W
    test 240 USA_Lb: WGS84

    test 241 USA_Lb: 45.0°N, 096.0°W
    test 242 USA_Lb: WGS84

    test 243 USA_Lb: 45.0°N, 084.0°W
    test 244 USA_Lb: WGS84

    test 245 WRF_Lb: 33.0°N, 109.0°W
    test 246 WRF_Lb: WGS84

    test 247 WRF_Lb: 33.0°N, 097.0°W
    test 248 WRF_Lb: WGS84

    test 249 WRF_Lb: 33.0°N, 085.0°W
    test 250 WRF_Lb: WGS84

    test 251 WRF_Lb: 45.0°N, 109.0°W
    test 252 WRF_Lb: WGS84

    test 253 WRF_Lb: 45.0°N, 097.0°W
    test 254 WRF_Lb: WGS84

    test 255 WRF_Lb: 45.0°N, 085.0°W
    test 256 WRF_Lb: WGS84


    testConic(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 257 SnyderN: name='SnyderN', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 258 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 259 _SnyderN: name='_SnyderN', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 260 _SnyderN .auth: ''
    test 261 _SnyderN .opt3: 0.0
    test 262 _SnyderN .latlon0: (23.0, -96.0)
    test 263 _SnyderN .philam0: (0.401426, -1.675516)

    testConic(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 264 SnyderV: name='SnyderV', lat0=23, lon0=-96, par1=33, par2=45, E0=0, N0=0, k0=1, SP=2, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 265 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 266 _SnyderV: name='_SnyderV', lat0=23, lon0=-96, par1=33, E0=0, N0=0, k0=1, SP=1, datum=Datum(name='NAD83', ellipsoid=Ellipsoids.GRS80, transform=Transforms.NAD83)
    test 267 _SnyderV .auth: ''
    test 268 _SnyderV .opt3: 0.0
    test 269 _SnyderV .latlon0: (23.0, -96.0)
    test 270 _SnyderV .philam0: (0.401426, -1.675516)

    all 270 testLcc.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 20.562 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLtp.py
./pygeodesy/deprecated/__init__.py:87: DeprecationWarning: class L{pygeodesy.deprecated.EcefCartesian} has been DEPRECATED, use class L{LocalCartesian}.
  deprecated_class(self.__class__)
./test/testLtp.py:41: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(33.3, 44.4, 6000)
./test/testLtp.py:45: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(37288.97, 33374.29, 5783.65)
./test/testLtp.py:54: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(LatLon_(50.9, 1.8, name='Calais'))  # Local9Tuple
./test/testLtp.py:58: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-37518.64, 229949.65, -4260.43)  # Local9Tuple
./test/testLtp.py:62: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = c.reverse(-38e3, 230e3, -4e3)
./test/testLtp.py:66: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  t = c.forward(50.9, 1.79, 264.92)  # Local9Tuple
./test/testLtp.py:74: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.reverse} has been DEPRECATED, use method L{LocalCartesian.reverse}.
  t = Z.reverse(M).toLatLon(datum=None)  # Matterhorn Xyz to LatLon
./test/testLtp.py:76: DeprecationWarning: method L{pygeodesy.deprecated.EcefCartesian.forward} has been DEPRECATED, use method L{LocalCartesian.forward}.
  self.test('xyz', Z.forward(t).xyz.toStr(prec=1), '(-7134.8, -4556.3, 2852.4)', known=Sudano)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Aer from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Attitude from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLV from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVa from .ltp by testLtp.py line 11
# lazily imported pygeodesy.ChLVe from .ltp by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell21 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefFarrell22 from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefKarney from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefVeness from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefSudano from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Ecef9Tuple from .ecef by testLtp.py line 11
# lazily imported pygeodesy.EcefYou from .ecef by testLtp.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Frustum from .ltp by testLtp.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtp.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testLtp.py line 11
# lazily imported pygeodesy.LocalCartesian from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtp.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.tyr3d from .ltp by testLtp.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtp.py line 11
# lazily imported pygeodesy.latDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testLtp.py line 11
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241
# lazily imported pygeodesy.EcefCartesian from .deprecated by testLtp.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testLtp.py line 277

    testing testLtp.py 23.03.27 isLazy=3

    test 1 EcefCartesian: {}
    test 2 name: Test
    test 3 toStr: EcefCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected EcefCartesian
    test 4 copy(EcefCartesian): (<class 'pygeodesy.deprecated.EcefCartesian.<locals>.EcefCartesian'>, True)
    test 5 EcefCartesian.copy(): (<class 'pygeodesy.deprecated.EcefCartesian.<locals>.EcefCartesian'>, True)
    test 6 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 7 forward: 37288.97, 33374.29, 5783.65
    test 8 name: Test
    test 9 reverse: 33.3, 44.4, 6000.0
    test 10 name: Test
    test 11 name: Paris
    test 12 Paris: 48.833, 2.333, 0.0
    test 13 forward: -37518.64, 229949.65, -4260.43
    test 14 name: Calais
    test 15 reverse: 50.9, 1.8, -0.0
    test 16 name: Paris
    test 17 reverse: -38000.0, 230000.0, -4000.0
    test 18 reverse: 50.9, 1.79, 264.92
    test 19 forward: -38223.7, 229964.2, -4000.0

    test 20 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected EcefCartesian
    test 21 Matterhorn: (45.976, 7.658, 4531.01)
    test 22 xyz: (-7134.8, -4556.3, 2852.4)
    test 23 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 24 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 25 _local2ecef: Ecef9Tuple
    test 26 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, EcefCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 27 _ecef2local: Local9Tuple
    test 28 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 29 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 30 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 31 Ned: [-4556.3, -7134.8, -2852.4]
    test 32 Enu: [-7134.8, -4556.3, 2852.4]
    test 33 Ned: [-4556.3, -7134.8, -2852.4]

    test 34 Frustum: 90.0, 90.0
    test 35 hfov: 90.0
    test 36 vfov: 90.0
    test 37 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 38 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 39 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 40 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 41 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 42 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 43 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 44 alt: 0.0
    test 45 tilt: -10.0
    test 46 roll: -20.0
    test 47 yaw: 330.0
    test 48 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 49 rotate: (-0.005694, 1.334382, 1.104261)
    test 50 tyr3d: (0.0, 0.0, 0.0)
    test 51 tyr3d: (0.0, -2.0, 0.0)
    test 52 tyr3d: (0.0, -2.0, 0.0)
    test 53 tyr3d: (0.0, 0.0, -2.0)

    test 54 LocalCartesian: {}
    test 55 name: Test
    test 56 toStr: LocalCartesian(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected LocalCartesian
    test 57 copy(LocalCartesian): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 58 LocalCartesian.copy(): (<class 'pygeodesy.ltp.LocalCartesian'>, True)
    test 59 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 60 forward: 37288.97, 33374.29, 5783.65
    test 61 name: Test
    test 62 reverse: 33.3, 44.4, 6000.0
    test 63 name: Test
    test 64 name: Paris
    test 65 Paris: 48.833, 2.333, 0.0
    test 66 forward: -37518.64, 229949.65, -4260.43
    test 67 name: Calais
    test 68 reverse: 50.9, 1.8, -0.0
    test 69 name: Paris
    test 70 reverse: -38000.0, 230000.0, -4000.0
    test 71 reverse: 50.9, 1.79, 264.92
    test 72 forward: -38223.7, 229964.2, -4000.0

    test 73 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected LocalCartesian
    test 74 Matterhorn: (45.976, 7.658, 4531.01)
    test 75 xyz: (-7134.8, -4556.3, 2852.4)
    test 76 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 77 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 78 _local2ecef: Ecef9Tuple
    test 79 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, LocalCartesian(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 80 _ecef2local: Local9Tuple
    test 81 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 82 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 83 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 84 Ned: [-4556.3, -7134.8, -2852.4]
    test 85 Enu: [-7134.8, -4556.3, 2852.4]
    test 86 Ned: [-4556.3, -7134.8, -2852.4]

    test 87 Frustum: 90.0, 90.0
    test 88 hfov: 90.0
    test 89 vfov: 90.0
    test 90 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 91 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 92 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 93 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 94 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 95 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 96 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 97 alt: 0.0
    test 98 tilt: -10.0
    test 99 roll: -20.0
    test 100 yaw: 330.0
    test 101 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 102 rotate: (-0.005694, 1.334382, 1.104261)
    test 103 tyr3d: (0.0, 0.0, 0.0)
    test 104 tyr3d: (0.0, -2.0, 0.0)
    test 105 tyr3d: (0.0, -2.0, 0.0)
    test 106 tyr3d: (0.0, 0.0, -2.0)

    test 107 Ltp: {}
    test 108 name: Test
    test 109 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 110 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 111 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 112 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 113 forward: 37288.97, 33374.29, 5783.65
    test 114 name: Test
    test 115 reverse: 33.3, 44.4, 6000.0
    test 116 name: Test
    test 117 name: Paris
    test 118 Paris: 48.833, 2.333, 0.0
    test 119 forward: -37518.64, 229949.65, -4260.43
    test 120 name: Calais
    test 121 reverse: 50.9, 1.8, -0.0
    test 122 name: Paris
    test 123 reverse: -38000.0, 230000.0, -4000.0
    test 124 reverse: 50.9, 1.79, 264.92
    test 125 forward: -38223.7, 229964.2, -4000.0

    test 126 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 127 Matterhorn: (45.976, 7.658, 4531.01)
    test 128 xyz: (-7134.8, -4556.3, 2852.4)
    test 129 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 130 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 131 _local2ecef: Ecef9Tuple
    test 132 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 133 _ecef2local: Local9Tuple
    test 134 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 135 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 136 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 137 Ned: [-4556.3, -7134.8, -2852.4]
    test 138 Enu: [-7134.8, -4556.3, 2852.4]
    test 139 Ned: [-4556.3, -7134.8, -2852.4]

    test 140 Frustum: 90.0, 90.0
    test 141 hfov: 90.0
    test 142 vfov: 90.0
    test 143 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 144 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 145 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 146 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 147 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 148 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 149 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 150 alt: 0.0
    test 151 tilt: -10.0
    test 152 roll: -20.0
    test 153 yaw: 330.0
    test 154 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 155 rotate: (-0.005694, 1.334382, 1.104261)
    test 156 tyr3d: (0.0, 0.0, 0.0)
    test 157 tyr3d: (0.0, -2.0, 0.0)
    test 158 tyr3d: (0.0, -2.0, 0.0)
    test 159 tyr3d: (0.0, 0.0, -2.0)

    test 160 Ltp: {'ecef': EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 161 name: Test
    test 162 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 163 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 164 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 165 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Test'
    test 166 forward: 37288.97, 33374.29, 5783.65
    test 167 name: Test
    test 168 reverse: 33.3, 44.4, 6000.0
    test 169 name: Test
    test 170 name: Paris
    test 171 Paris: 48.833, 2.333, 0.0
    test 172 forward: -37518.64, 229949.65, -4260.43
    test 173 name: Calais
    test 174 reverse: 50.9, 1.8, -0.0
    test 175 name: Paris
    test 176 reverse: -38000.0, 230000.0, -4000.0
    test 177 reverse: 50.9, 1.79, 264.92
    test 178 forward: -38223.7, 229964.2, -4000.0

    test 179 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 180 Matterhorn: (45.976, 7.658, 4531.01)
    test 181 xyz: (-7134.8, -4556.3, 2852.4)
    test 182 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 183 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 2, None, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))  FAILED, KNOWN, expected Ecef9Tuple
    test 184 _local2ecef: Ecef9Tuple
    test 185 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=2, M=None, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84)), None)  FAILED, KNOWN, expected Local9Tuple
    test 186 _ecef2local: Local9Tuple
    test 187 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 188 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 189 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 190 Ned: [-4556.3, -7134.8, -2852.4]
    test 191 Enu: [-7134.8, -4556.3, 2852.4]
    test 192 Ned: [-4556.3, -7134.8, -2852.4]

    test 193 Frustum: 90.0, 90.0
    test 194 hfov: 90.0
    test 195 vfov: 90.0
    test 196 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 197 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 198 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 199 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 200 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 201 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 202 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 203 alt: 0.0
    test 204 tilt: -10.0
    test 205 roll: -20.0
    test 206 yaw: 330.0
    test 207 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 208 rotate: (-0.005694, 1.334382, 1.104261)
    test 209 tyr3d: (0.0, 0.0, 0.0)
    test 210 tyr3d: (0.0, -2.0, 0.0)
    test 211 tyr3d: (0.0, -2.0, 0.0)
    test 212 tyr3d: (0.0, 0.0, -2.0)

    test 213 Ltp: {'ecef': EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 214 name: Test
    test 215 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 216 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 217 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 218 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test'
    test 219 forward: 37288.97, 33374.29, 5783.65
    test 220 name: Test
    test 221 reverse: 33.3, 44.4, 6000.0
    test 222 name: Test
    test 223 name: Paris
    test 224 Paris: 48.833, 2.333, 0.0
    test 225 forward: -37518.64, 229949.65, -4260.43
    test 226 name: Calais
    test 227 reverse: 50.9, 1.8, -0.0
    test 228 name: Paris
    test 229 reverse: -38000.0, 230000.0, -4000.0
    test 230 reverse: 50.9, 1.79, 264.92
    test 231 forward: -38223.7, 229964.2, -4000.0

    test 232 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 233 Matterhorn: (45.976, 7.658, 4531.01)
    test 234 xyz: (-7134.8, -4556.3, 2852.4)
    test 235 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 236 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 237 _local2ecef: Ecef9Tuple
    test 238 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell21(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 239 _ecef2local: Local9Tuple
    test 240 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 241 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 242 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 243 Ned: [-4556.3, -7134.8, -2852.4]
    test 244 Enu: [-7134.8, -4556.3, 2852.4]
    test 245 Ned: [-4556.3, -7134.8, -2852.4]

    test 246 Frustum: 90.0, 90.0
    test 247 hfov: 90.0
    test 248 vfov: 90.0
    test 249 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 250 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 251 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 252 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 253 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 254 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 255 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 256 alt: 0.0
    test 257 tilt: -10.0
    test 258 roll: -20.0
    test 259 yaw: 330.0
    test 260 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 261 rotate: (-0.005694, 1.334382, 1.104261)
    test 262 tyr3d: (0.0, 0.0, 0.0)
    test 263 tyr3d: (0.0, -2.0, 0.0)
    test 264 tyr3d: (0.0, -2.0, 0.0)
    test 265 tyr3d: (0.0, 0.0, -2.0)

    test 266 Ltp: {'ecef': EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 267 name: Test
    test 268 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 269 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 270 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 271 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test'
    test 272 forward: 37288.97, 33374.29, 5783.65
    test 273 name: Test
    test 274 reverse: 33.3, 44.4, 6000.0
    test 275 name: Test
    test 276 name: Paris
    test 277 Paris: 48.833, 2.333, 0.0
    test 278 forward: -37518.64, 229949.65, -4260.43
    test 279 name: Calais
    test 280 reverse: 50.9, 1.8, -0.0
    test 281 name: Paris
    test 282 reverse: -38000.0, 230000.0, -4000.0
    test 283 reverse: 50.9, 1.79, 264.92
    test 284 forward: -38223.7, 229964.2, -4000.0

    test 285 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 286 Matterhorn: (45.976, 7.658, 4531.01)
    test 287 xyz: (-7134.8, -4556.3, 2852.4)
    test 288 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 289 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 290 _local2ecef: Ecef9Tuple
    test 291 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefFarrell22(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009609, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 292 _ecef2local: Local9Tuple
    test 293 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 294 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 295 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 296 Ned: [-4556.3, -7134.8, -2852.4]
    test 297 Enu: [-7134.8, -4556.3, 2852.4]
    test 298 Ned: [-4556.3, -7134.8, -2852.4]

    test 299 Frustum: 90.0, 90.0
    test 300 hfov: 90.0
    test 301 vfov: 90.0
    test 302 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 303 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 304 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 305 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 306 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 307 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 308 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 309 alt: 0.0
    test 310 tilt: -10.0
    test 311 roll: -20.0
    test 312 yaw: 330.0
    test 313 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 314 rotate: (-0.005694, 1.334382, 1.104261)
    test 315 tyr3d: (0.0, 0.0, 0.0)
    test 316 tyr3d: (0.0, -2.0, 0.0)
    test 317 tyr3d: (0.0, -2.0, 0.0)
    test 318 tyr3d: (0.0, 0.0, -2.0)

    test 319 Ltp: {'ecef': EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 320 name: Test
    test 321 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 322 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 323 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 324 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test'
    test 325 forward: 37288.97, 33374.29, 5783.65
    test 326 name: Test
    test 327 reverse: 33.3, 44.4, 6000.0
    test 328 name: Test
    test 329 name: Paris
    test 330 Paris: 48.833, 2.333, 0.0
    test 331 forward: -37518.64, 229949.65, -4260.43
    test 332 name: Calais
    test 333 reverse: 50.9, 1.8, -0.0
    test 334 name: Paris
    test 335 reverse: -38000.0, 230000.0, -4000.0
    test 336 reverse: 50.9, 1.79, 264.92
    test 337 forward: -38223.7, 229964.2, -4000.0

    test 338 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 339 Matterhorn: (45.976, 7.658, 4531.01)
    test 340 xyz: (-7134.8, -4556.3, 2852.4)
    test 341 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 342 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 343 _local2ecef: Ecef9Tuple
    test 344 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 345 _ecef2local: Local9Tuple
    test 346 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 347 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 348 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 349 Ned: [-4556.3, -7134.8, -2852.4]
    test 350 Enu: [-7134.8, -4556.3, 2852.4]
    test 351 Ned: [-4556.3, -7134.8, -2852.4]

    test 352 Frustum: 90.0, 90.0
    test 353 hfov: 90.0
    test 354 vfov: 90.0
    test 355 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 356 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 357 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 358 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 359 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 360 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 361 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 362 alt: 0.0
    test 363 tilt: -10.0
    test 364 roll: -20.0
    test 365 yaw: 330.0
    test 366 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 367 rotate: (-0.005694, 1.334382, 1.104261)
    test 368 tyr3d: (0.0, 0.0, 0.0)
    test 369 tyr3d: (0.0, -2.0, 0.0)
    test 370 tyr3d: (0.0, -2.0, 0.0)
    test 371 tyr3d: (0.0, 0.0, -2.0)

    test 372 Ltp: {'ecef': EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 373 name: Test
    test 374 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 375 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 376 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 377 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test'
    test 378 forward: 37288.97, 33374.29, 5783.65
    test 379 name: Test
    test 380 reverse: 33.33, 44.4, 5998.84  FAILED, KNOWN, expected 33.3, 44.4, 6000.0
    test 381 name: Test
    test 382 name: Paris
    test 383 Paris: 48.833, 2.333, 0.0
    test 384 forward: -37518.64, 229949.65, -4260.43
    test 385 name: Calais
    test 386 reverse: 51.01, 1.8, -11.8  FAILED, KNOWN, expected 50.9, 1.8, -0.0
    test 387 name: Paris
    test 388 reverse: -38000.0, 230000.0, -4000.0
    test 389 reverse: 51.01, 1.79, 253.12  FAILED, KNOWN, expected 50.9, 1.79, 264.92
    test 390 forward: -38223.7, 229964.2, -4000.0

    test 391 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 392 Matterhorn: (46.06, 7.658, 4524.116)  FAILED, KNOWN, expected (45.976, 7.658, 4531.01)
    test 393 xyz: (-7124.0, 4817.7, 2845.3)  FAILED, KNOWN, expected (-7134.8, -4556.3, 2852.4)
    test 394 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 395 _local2ecef: (4403757.602, 592124.536, 4566652.082, 46.06, 7.658, 4524.116, 7, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 396 _local2ecef: Ecef9Tuple
    test 397 _ecef2local: (-7134.8, -4556.3, 2852.4, 46.06, 7.658, 4524.116, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefSudano(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=46.060275, lon=7.657999, height=4524.115631, C=7, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 398 _ecef2local: Local9Tuple
    test 399 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 400 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 401 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 402 Ned: [-4556.3, -7134.8, -2852.4]
    test 403 Enu: [-7134.8, -4556.3, 2852.4]
    test 404 Ned: [-4556.3, -7134.8, -2852.4]

    test 405 Frustum: 90.0, 90.0
    test 406 hfov: 90.0
    test 407 vfov: 90.0
    test 408 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 409 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 410 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 411 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 412 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 413 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 414 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 415 alt: 0.0
    test 416 tilt: -10.0
    test 417 roll: -20.0
    test 418 yaw: 330.0
    test 419 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 420 rotate: (-0.005694, 1.334382, 1.104261)
    test 421 tyr3d: (0.0, 0.0, 0.0)
    test 422 tyr3d: (0.0, -2.0, 0.0)
    test 423 tyr3d: (0.0, -2.0, 0.0)
    test 424 tyr3d: (0.0, 0.0, -2.0)

    test 425 Ltp: {'ecef': EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name='')}
    test 426 name: Test
    test 427 toStr: Ltp(lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test')  FAILED, KNOWN, expected Ltp
    test 428 copy(Ltp): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 429 Ltp.copy(): (<class 'pygeodesy.ltp.Ltp'>, True)
    test 430 New: lat0=33.0, lon0=44.0, height0=20.0, M=EcefMatrix(_0_0_=-0.694658, _0_1_=-0.391781, _0_2_=0.603289, _1_0_=0.71934, _1_1_=-0.378338, _1_2_=0.58259, _2_0_=0.0, _2_1_=0.838671, _2_2_=0.544639), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Test'
    test 431 forward: 37288.97, 33374.29, 5783.65
    test 432 name: Test
    test 433 reverse: 33.3, 44.4, 6000.0
    test 434 name: Test
    test 435 name: Paris
    test 436 Paris: 48.833, 2.333, 0.0
    test 437 forward: -37518.64, 229949.65, -4260.43
    test 438 name: Calais
    test 439 reverse: 50.9, 1.8, -0.0
    test 440 name: Paris
    test 441 reverse: -38000.0, 230000.0, -4000.0
    test 442 reverse: 50.9, 1.79, 264.92
    test 443 forward: -38223.7, 229964.2, -4000.0

    test 444 Zermatt: lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'  FAILED, KNOWN, expected Ltp
    test 445 Matterhorn: (45.976, 7.658, 4531.01)
    test 446 xyz: (-7134.8, -4556.3, 2852.4)
    test 447 _local2ecef: 4403757.602, 592124.536, 4566652.082
    test 448 _local2ecef: (4403757.602, 592124.536, 4566652.082, 45.976, 7.658, 4531.01, 1, None, Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity))  FAILED, KNOWN, expected Ecef9Tuple
    test 449 _local2ecef: Ecef9Tuple
    test 450 _ecef2local: (-7134.8, -4556.3, 2852.4, 45.976, 7.658, 4531.01, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefYou(a=6378137.0, f=0.003352811, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity), name=''), name='Zermatt'), Ecef9Tuple(x=4403757.601549, y=592124.535536, z=4566652.082005, lat=45.976, lon=7.657999, height=4531.009608, C=1, M=None, datum=Datum(name='_WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.Identity)), None)  FAILED, KNOWN, expected Local9Tuple
    test 451 _ecef2local: Local9Tuple
    test 452 Xyz: (-7134.8, -4556.3, 2852.4, None)
    test 453 Aer: (-7134.912, -4444.548, 2852.474, None)
    test 454 Enu: (-7134.8, -4556.3, 2852.4, None)
    test 455 Ned: [-4556.3, -7134.8, -2852.4]
    test 456 Enu: [-7134.8, -4556.3, 2852.4]
    test 457 Ned: [-4556.3, -7134.8, -2852.4]

    test 458 Frustum: 90.0, 90.0
    test 459 hfov: 90.0
    test 460 vfov: 90.0
    test 461 footprint: (Xyz4Tuple(x=0.0, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-1000.0, z=0.0, ltp=None))
    test 462 footprint.xyzLocal5: ([X:0.0, Y:0.0, Z:0.0], [X:-1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:1000.0, Z:0.0], [X:1000.0, Y:-1000.0, Z:0.0], [X:-1000.0, Y:-1000.0, Z:0.0])
    test 463 footprint.toLatLon5: (LatLon_(00.0°N, 000.0°E), LatLon_(00.009044°N, 000.008983°W, +0.16), LatLon_(00.009044°N, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°E, +0.16), LatLon_(00.009044°S, 000.008983°W, +0.16))

    test 464 footprint: (Xyz4Tuple(x=-999.650995, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=1000.0, z=0.0, ltp=None), Xyz4Tuple(x=0.174533, y=-1000.0, z=0.0, ltp=None), Xyz4Tuple(x=-5729577.893136, y=-1000.0, z=0.0, ltp=None))
    test 465 footprint: (Xyz4Tuple(x=-414.213562, y=0.0, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=414.213562, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-414.213562, z=0.0, ltp=None), Xyz4Tuple(x=-1000.0, y=-414.213562, z=0.0, ltp=None))
    test 466 footprint: (Xyz4Tuple(x=414.213562, y=-57289.961631, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=2538.647896, z=0.0, ltp=None), Xyz4Tuple(x=0.0, y=-2299.842547, z=0.0, ltp=None), Xyz4Tuple(x=1000.0, y=-2299.842547, z=0.0, ltp=None))

    test 467 Attitude: (0.0, -10.0, 330.0, -20.0)
    test 468 alt: 0.0
    test 469 tilt: -10.0
    test 470 roll: -20.0
    test 471 yaw: 330.0
    test 472 matrix: ((0.8137976813493738, -0.44096961052988237, -0.37852230636979245), (0.46984631039295416, 0.8825641192593856, -0.01802831123629725), (0.3420201433256687, -0.16317591116653482, 0.9254165783983234))  FAILED, KNOWN, expected ((0.8137976813493737, -0.4409696105298823, -0.3785223063697926), (0.4698463103929541, 0.8825641192593856, -0.01802831123629725), (0.3420201433256688, -0.16317591116653488, 0.9254165783983233))
    test 473 rotate: (-0.005694, 1.334382, 1.104261)
    test 474 tyr3d: (0.0, 0.0, 0.0)
    test 475 tyr3d: (0.0, -2.0, 0.0)
    test 476 tyr3d: (0.0, -2.0, 0.0)
    test 477 tyr3d: (0.0, 0.0, -2.0)

    test 478 ChLV: ...
    test 479 name: Test
    test 480 ChLV_: ChLV

    test 481 forward1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 482 Y, X, h_: (-72.03999403763596, -147.3614439740948, -49.552110733046206)
    test 483 EN2_LV95: (2599927.960006, 1199852.638556)
    test 484 yx2_LV03: (599927.960006, 199852.638556)
    test 485 reverse1: (-72.039994, -147.361444, -49.552111, 46.95108, 7.438637, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 486 reverse2: (100000.0, 0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 487 forward2: (100000.0, -0.0, 600.0, 46.944873, 8.752874, 1431.948128, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 488 Y, X, h_: (100000.00000000006, -6.093046067690011e-10, 599.9999999994027)
    test 489 EN2_LV95: (2700000.0, 1200000.0)
    test 490 yx2_LV03: (700000.0, 200000.0)

    test 491 forward3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 492 Y, X, h_: (99920.63980649531, -100148.24791021198, -967.6616955393074)
    test 493 EN2_LV95: (2699920.639806, 1099851.75209)
    test 494 yx2_LV03: (699920.639806, 99851.75209)
    test 495 reverse3: (99920.639806, -100148.24791, -967.661696, 46.044131, 8.730497, 650.6, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 496 forward4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 497 Y, X, h_: (79527.50238583283, 12274.804228940542, -556.3121548973841)
    test 498 EN2_LV95: (2679527.502386, 1212274.804229)
    test 499 yx2_LV03: (679527.502386, 212274.804229)
    test 500 reverse4: (79527.502386, 12274.804229, -556.312155, 47.058043, 8.48642, 0.0, ChLV(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 501 REFRAME1: (8.616351530455896, 46.65475067063166, 3083.406444118289)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 502 REFRAME1:  0.00146 m
    test 503 REFRAME2: (10.204043023734306, 46.77783593870853, 5053.168786316335)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 504 REFRAME2:  0.00145 m
    test 505 REFRAME3: (7.231565437123991, 47.39538671375251, 1150.3589295501365)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 506 REFRAME3:  0.00125 m
    test 507 REFRAME4: (9.843252123471997, 46.81431931429166, 4291.25673621361)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 508 REFRAME4:  0.0014 m
    test 509 REFRAME5: (6.568908171267955, 46.52284580890317, 985.759710610112)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 510 REFRAME5:  0.00138 m
    test 511 REFRAME6: (8.731242095241983, 46.04567715552447, 2216.788871436723)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 512 REFRAME6:  0.00156 m

    test 513 Bollinger.lat: 46°11′13.03444″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 514 Bollinger.lon: 009°07′55.69155″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 515 Zermatt: (46.016932928431906, 7.7455811694023975, 2629.5454517406183)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 516 Zermatt:  0.00162 m
    test 517 Zimmerwald: (46.8784274460462, 7.466218796566257, 953.097289739065)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 518 Zimmerwald:  4.34e-10 m
    test 519 Chrischona: (47.568308646845004, 7.66954858440231, 897.4060435649002)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 520 Chrischona:  1.55e-10 m
    test 521 Pfaender: (47.51632016978097, 9.784378737247414, 3868.85984263466)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 522 Pfaender:  4.74e-11 m
    test 523 La Givrine: (46.45557406857666, 6.103316269663712, 2313.944970899141)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 524 La Givrine:  3.63e-11 m
    test 525 Monte Generoso: (45.931118444496924, 9.021602047098654, 3855.4332412041144)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 526 Monte Generoso:  3.08e-12 m

    test 527 ChLVa: ...
    test 528 name: Test
    test 529 ChLV_: ChLVa

    test 530 forward1: (0.329415, -0.292702, -49.554242, 46.95108, 7.438637, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 531 Y, X, h_: (0.32941546850192266, -0.2927016084473125, -49.554241824400016)
    test 532 EN2_LV95: (2600000.329415, 1199999.707298)
    test 533 yx2_LV03: (600000.329415, 199999.707298)
    test 534 reverse1: (0.329415, -0.292702, -49.554242, 46.951078, 7.438642, -0.004239, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 535 reverse2: (100000.0, -100000.0, 600.0, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 536 forward2: (99999.933937, -100000.44412, 600.003469, 46.044127, 8.730499, 650.554, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 537 Y, X, h_: (99999.933937317, -100000.44412018938, 600.0034685464)
    test 538 EN2_LV95: (2699999.933937, 1099999.55588)
    test 539 yx2_LV03: (699999.933937, 99999.55588)

    test 540 forward3: (99999.763621, -100000.026905, 600.049476, 46.044131, 8.730497, 650.6, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 541 Y, X, h_: (99999.76362116335, -100000.0269049639, 600.0494759100001)
    test 542 EN2_LV95: (2699999.763621, 1099999.973095)
    test 543 yx2_LV03: (699999.763621, 99999.973095)
    test 544 reverse3: (99999.763621, -100000.026905, 600.049476, 46.044127, 8.730496, 650.603479, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 545 forward4: (79602.736359, 12421.914221, -48.257243, 47.058043, 8.48642, 0.0, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 546 Y, X, h_: (79602.73635877526, 12421.914220824741, -48.25724328779257)
    test 547 EN2_LV95: (2679602.736359, 1212421.914221)
    test 548 yx2_LV03: (679602.736359, 212421.914221)
    test 549 reverse4: (79602.736359, 12421.914221, -48.257243, 47.058038, 8.486421, 0.00853, ChLVa(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 550 REFRAME1: (8.615878879495897, 46.65329026883798, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 551 REFRAME1:  5.65e-06 m
    test 552 REFRAME2: (10.204675703252203, 46.77638487390875, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 553 REFRAME2:  1.17e-05 m
    test 554 REFRAME3: (7.230597895755378, 47.394131639593425, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 555 REFRAME3:  9.75e-06 m
    test 556 REFRAME4: (9.843502988079765, 46.812913925274714, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 557 REFRAME4:  1.05e-05 m
    test 558 REFRAME5: (6.5678939352793595, 46.52146855855015, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 559 REFRAME5:  3.81e-06 m
    test 560 REFRAME6: (8.730499333333333, 46.04412677777778, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 561 REFRAME6:  5.83e-06 m

    test 562 Bollinger.lat: 46°11′07.65425″N  FAILED, KNOWN, expected 46°11′12.03969″N
    test 563 Bollinger.lon: 009°07′52.99874″E  FAILED, KNOWN, expected 009°07′57.29664″E
    test 564 Zermatt: (46.01531297876282, 7.744712831892469, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 565 Zermatt:  0.00249 m
    test 566 Zimmerwald: (46.877092307814216, 7.465275686541408, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 567 Zimmerwald:  0.00134 m
    test 568 Chrischona: (47.56704452300608, 7.668609312668058, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 569 Chrischona:  0.00126 m
    test 570 Pfaender: (47.51533372240414, 9.784358161933795, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 571 Pfaender:  0.000986 m
    test 572 La Givrine: (46.45409066669543, 6.1020351431347315, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 573 La Givrine:  0.00148 m
    test 574 Monte Generoso: (45.92930092608269, 9.02121992500755, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 575 Monte Generoso:  0.00182 m

    test 576 ChLVe: ...
    test 577 name: Test
    test 578 ChLV_: ChLVe

    test 579 forward1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 580 Y, X, h_: (-72.031251437589, -147.3449483831346, -49.554241824400016)
    test 581 EN2_LV95: (2599927.968749, 1199852.655052)
    test 582 yx2_LV03: (599927.968749, 199852.655052)
    test 583 reverse1: (-72.031251, -147.344948, -49.554242, 46.95108, 7.438637, 0.000002, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 584 reverse2: (100000.0, 0.0, 600.0, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 585 forward2: (100000.000001, 0.0, 600.012265, 46.944869, 8.753274, 648.29, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 586 Y, X, h_: (100000.00000057962, 1.8112534442566837e-07, 600.0122653531955)
    test 587 EN2_LV95: (2700000.000001, 1200000.0)
    test 588 yx2_LV03: (700000.000001, 200000.0)

    test 589 forward3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.6, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 590 Y, X, h_: (99914.74045471674, -100135.07938181334, 600.0494759100001)
    test 591 EN2_LV95: (2699914.740455, 1099864.920618)
    test 592 yx2_LV03: (699914.740455, 99864.920618)
    test 593 reverse3: (99914.740455, -100135.079382, 600.049476, 46.044131, 8.730497, 650.607608, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 594 forward4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.0, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...
    test 595 Y, X, h_: (79520.05000103211, 12273.439993103837, -48.25724328779257)
    test 596 EN2_LV95: (2679520.050001, 1212273.439993)
    test 597 yx2_LV03: (679520.050001, 212273.439993)
    test 598 reverse4: (79520.050001, 12273.439993, -48.257243, 47.058043, 8.48642, 0.012933, ChLVe(lat0=46.952405556, lon0=7.439583333, height0=49.55, M=...

    test 599 REFRAME1: (8.617004216786864, 46.65457267826783, 2365.31877736998)  FAILED, KNOWN, expected (8.61588452888461, 46.6532932166132, 2367.70367439557)
    test 600 REFRAME1:  0.00128 m
    test 601 REFRAME2: (10.206045201491072, 46.777660119243905, 1542.5231657804)  FAILED, KNOWN, expected (10.2046874099038, 46.7763864160066, 1546.62256775331)
    test 602 REFRAME2:  0.00136 m
    test 603 REFRAME3: (7.231508661195409, 47.3955074884183, 939.5622657947999)  FAILED, KNOWN, expected (7.23058814336896, 47.3941353658685, 940.206020880491)
    test 604 REFRAME3:  0.00137 m
    test 605 REFRAME4: (9.844818386934287, 46.814198001739975, 1642.70478811448)  FAILED, KNOWN, expected (9.84351348200287, 46.8129146868336, 1645.59174753912)
    test 606 REFRAME4:  0.0013 m
    test 607 REFRAME5: (6.568709824649145, 46.5227385206423, 462.1027394584)  FAILED, KNOWN, expected (6.56789363190021, 46.5214647527993, 460.491580192)
    test 608 REFRAME5:  0.00127 m
    test 609 REFRAME6: (8.731627351611777, 46.04533300622348, 650.554)  FAILED, KNOWN, expected (8.73049738375132, 46.0441209510033, 650.012275829911)
    test 610 REFRAME6:  0.00121 m

    test 611 Bollinger.lat: 46°11′12.03969″N
    test 612 Bollinger.lon: 009°07′57.29664″E
    test 613 Bollinger.gamma: 1.3747154949761575

    test 614 Zermatt: (46.016524980589146, 7.745700583699864, 1739.1724096628)  FAILED, KNOWN, expected (46.015314107, 7.74720273, 1742.449)
    test 615 Zermatt:  0.0015 m
    test 616 Zimmerwald: (46.878408134660475, 7.46622597045386, 947.6256267527999)  FAILED, KNOWN, expected (46.878427446, 7.466218797, 953.0973)
    test 617 Zimmerwald:  1.93e-05 m
    test 618 Chrischona: (47.56844071309313, 7.669595854297879, 503.84493534800004)  FAILED, KNOWN, expected (47.568308647, 7.6695485844, 897.406)
    test 619 Chrischona:  0.000132 m
    test 620 Pfaender: (47.51669640784962, 9.785678729594727, 1088.46794437916)  FAILED, KNOWN, expected (47.5163201698, 9.7843787372, 3868.8599)
    test 621 Pfaender:  0.0013 m
    test 622 La Givrine: (46.45534732351903, 6.102781792813614, 1259.50889260448)  FAILED, KNOWN, expected (46.4555740686, 6.1033162697, 2313.94497)
    test 623 La Givrine:  0.000534 m
    test 624 Monte Generoso: (45.93048753878003, 9.022387820586593, 1687.1468504651998)  FAILED, KNOWN, expected (45.9311184445, 9.0216020471, 3855.4332)
    test 625 Monte Generoso:  0.000786 m

    102 of 625 testLtp.py tests (16.3%) FAILED, incl. 90 KNOWN plus 12 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 53.978 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testLtpTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Aer from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Enu from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLtpTuples.py line 11
# lazily imported pygeodesy.Local9Tuple from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.Ltp from .ltp by testLtpTuples.py line 11
# lazily imported pygeodesy.Ned from .ltpTuples by testLtpTuples.py line 11
# lazily imported pygeodesy.XyzLocal from .ltpTuples by testLtpTuples.py line 11

    testing testLtpTuples.py 23.03.27 isLazy=3

    test 1 Aer.toRepr: [A:60.0°, E:40.0°, R:1000.0]
    test 2 Aer.toStr: [60.0, 40.0, 1000.0]
    test 3 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 4 Aer.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 5 Aer.xyzLocal.toEnu: [663.41, 383.02, 642.79]
    test 6 Enu.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 7 Aer.xyzLocal.toNed: [383.02, 663.41, -642.79]
    test 8 Ned.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 9 Aer.xyzLocal.toXyz: [663.41, 383.02, 642.79]
    test 10 Xyz.xyzLocal.toAer: [60.0, 40.0, 1000.0]
    test 11 Aer.toCartesian: [4397663.96, 599165.33, 4568492.25]
    test 12 Cartesian.toLocal Aer: [60.0, 40.0, 1000.0]
    test 13 Aer.toLatLon: 46°01′13.6″N, 007°45′30.83″E, +2315.83m
    test 14 LatLon.toLocal Aer: [60.0, 40.0, 1000.0]
    test 15 Aer.azimuth: 60.0
    test 16 Aer.elevation: 40.0
    test 17 Aer.slantrange: 1000.0
    test 18 Aer.groundrange: 766.044
    test 19 Aer.east: 663.414
    test 20 Aer.north: 383.022
    test 21 Aer.up: 642.788
    test 22 Aer.down: -642.788
    test 23 Aer.x: 663.414
    test 24 Aer.y: 383.022
    test 25 Aer.z: 642.788
    test 26 Aer.xyz: 663.414, 383.022, 642.788

    test 27 Enu.toRepr: [E:100.0, N:200.0, U:1000.0]
    test 28 Enu.toStr: [100.0, 200.0, 1000.0]
    test 29 Enu.xyzLocal.toAer: [26.57, 77.4, 1024.7]
    test 30 Aer.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 31 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 32 Enu.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 33 Enu.xyzLocal.toNed: [200.0, 100.0, -1000.0]
    test 34 Ned.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 35 Enu.xyzLocal.toXyz: [100.0, 200.0, 1000.0]
    test 36 Xyz.xyzLocal.toEnu: [100.0, 200.0, 1000.0]
    test 37 Enu.toCartesian: [4398116.23, 598658.27, 4568622.18]
    test 38 Cartesian.toLocal Enu: [100.0, 200.0, 1000.0]
    test 39 Enu.toLatLon: 46°01′07.67″N, 007°45′04.65″E, +2673.00m
    test 40 LatLon.toLocal Enu: [100.0, 200.0, 1000.0]
    test 41 Enu.azimuth: 26.565
    test 42 Enu.elevation: 77.396
    test 43 Enu.slantrange: 1024.695
    test 44 Enu.groundrange: 223.607
    test 45 Enu.east: 100.0
    test 46 Enu.north: 200.0
    test 47 Enu.up: 1000.0
    test 48 Enu.down: -1000.0
    test 49 Enu.x: 100.0
    test 50 Enu.y: 200.0
    test 51 Enu.z: 1000.0
    test 52 Enu.xyz: 100.0, 200.0, 1000.0

    test 53 Ned.toRepr: [N:200.0, E:100.0, D:1000.0]
    test 54 Ned.toStr: [200.0, 100.0, 1000.0]
    test 55 Ned.xyzLocal.toAer: [26.57, -77.4, 1024.7]
    test 56 Aer.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 57 Ned.xyzLocal.toEnu: [100.0, 200.0, -1000.0]
    test 58 Enu.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 59 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 60 Ned.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 61 Ned.xyzLocal.toXyz: [100.0, 200.0, -1000.0]
    test 62 Xyz.xyzLocal.toNed: [200.0, 100.0, 1000.0]
    test 63 Ned.toCartesian: [4396740.02, 598470.98, 4567183.09]
    test 64 Cartesian.toLocal Ned: [200.0, 100.0, 1000.0]
    test 65 Ned.toLatLon: 46°01′07.68″N, 007°45′04.65″E, +673.00m
    test 66 LatLon.toLocal Ned: [200.0, 100.0, 1000.0]
    test 67 Ned.azimuth: 26.565
    test 68 Ned.elevation: -77.396
    test 69 Ned.slantrange: 1024.695
    test 70 Ned.groundrange: 223.607
    test 71 Ned.east: 100.0
    test 72 Ned.north: 200.0
    test 73 Ned.up: -1000.0
    test 74 Ned.down: 1000.0
    test 75 Ned.x: 100.0
    test 76 Ned.y: 200.0
    test 77 Ned.z: -1000.0
    test 78 Ned.xyz: 100.0, 200.0, -1000.0

    test 79 Xyz.toRepr: [X:10.0, Y:20.0, Z:100.0]
    test 80 Xyz.toStr: [10.0, 20.0, 100.0]
    test 81 Xyz.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 82 Aer.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 83 Xyz.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 84 Enu.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 85 Xyz.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 86 Ned.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 87 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 88 Xyz.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 89 Xyz.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 90 Cartesian.toLocal Xyz: [10.0, 20.0, 100.0]
    test 91 Xyz.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 92 LatLon.toLocal Xyz: [10.0, 20.0, 100.0]
    test 93 Xyz.azimuth: 26.565
    test 94 Xyz.elevation: 77.396
    test 95 Xyz.slantrange: 102.47
    test 96 Xyz.groundrange: 22.361
    test 97 Xyz.east: 10.0
    test 98 Xyz.north: 20.0
    test 99 Xyz.up: 100.0
    test 100 Xyz.down: -100.0
    test 101 Xyz.x: 10.0
    test 102 Xyz.y: 20.0
    test 103 Xyz.z: 100.0
    test 104 Xyz.xyz: 10.0, 20.0, 100.0

    test 105 Local9Tuple.toRepr: Local9Tuple(x=10.0, y=20.0, z=100.0, lat=46.02, lon=7.75, height=1773.0, ltp=Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transfo
    test 106 Local9Tuple.toStr: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 107 Local9Tuple.xyzLocal.toAer: [26.57, 77.4, 102.47]
    test 108 Aer.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 109 Local9Tuple.xyzLocal.toEnu: [10.0, 20.0, 100.0]
    test 110 Enu.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 111 Local9Tuple.xyzLocal.toNed: [20.0, 10.0, -100.0]
    test 112 Ned.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 113 Local9Tuple.xyzLocal.toXyz: [10.0, 20.0, 100.0]
    test 114 Xyz.xyzLocal.toLocal9Tuple: (10.0, 20.0, 100.0, 46.02, 7.75, 1773.0, Ltp(lat0=46.017, lon0=7.75, height0=1673.0, M=EcefMatrix(_0_0_=-0.134851, _0_1_=-0.712973, _0_2_=0.688102, _1_0_=0.990866, _1_1_=-0.097031, _1_2_=0.093647, _2_0_=0.0, _2_1_=0.694445, _2_2_=0.719546), ecef=EcefKarney(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name='Zermatt'
    test 115 Local9Tuple.toCartesian: [4397637.41, 598502.28, 4567849.59]
    test 116 Local9Tuple.toLatLon: 46°01′01.85″N, 007°45′00.46″E, +1773.00m
    test 117 Local9Tuple.azimuth: 26.565
    test 118 Local9Tuple.elevation: 77.396
    test 119 Local9Tuple.slantrange: 102.47
    test 120 Local9Tuple.groundrange: 22.361
    test 121 Local9Tuple.east: 10.0
    test 122 Local9Tuple.north: 20.0
    test 123 Local9Tuple.up: 100.0
    test 124 Local9Tuple.down: -100.0
    test 125 Local9Tuple.x: 10.0
    test 126 Local9Tuple.y: 20.0
    test 127 Local9Tuple.z: 100.0
    test 128 Local9Tuple.xyz: 10.0, 20.0, 100.0
    test 129 Local9Tuple.lat: 46.02
    test 130 Local9Tuple.lon: 7.75
    test 131 Local9Tuple.latlon: 46.02, 7.75
    test 132 Local9Tuple.latlonheight: 46.02, 7.75, 1773.0
    test 133 Local9Tuple.phi: 0.803
    test 134 Local9Tuple.lam: 0.135
    test 135 Local9Tuple.philam: 0.803, 0.135
    test 136 Local9Tuple.philamheight: 0.803, 0.135, 1773.0

    all 136 testLtpTuples.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 7.554 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testMgrs.py
./test/testMgrs.py:88: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs.en100k} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:88: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs.digraph} has been DEPRECATED, use property C{EN}.
  self.test(a, getattr(p, a), x)
./test/testMgrs.py:94: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs6Tuple.digraph} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', m.digraph, m.EN, nt=1)  # DEPRECATED
./test/testMgrs.py:117: DeprecationWarning: property_RO L{pygeodesy.mgrs.Mgrs4Tuple.digraph} has been DEPRECATED, use attribute C{EN}.
  self.test('digraph', t.digraph, t.EN)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.mgrs by testMgrs.py line 11
# lazily imported pygeodesy.Mgrs from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.parseMGRS from .mgrs by testMgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testMgrs.py line 204

    testing testMgrs.py 23.03.27 (module pygeodesy.mgrs 23.03.19) isLazy=3
    test 1 Mgrs1: 42S XD 09705 38646
    test 2 Mgrs1: [Z:42S, G:XD, E:09705, N:38646]
    test 3 Mgrs2: 42S XD 19705 08646
    test 4 Mgrs2: [Z:42S, G:XD, E:19705, N:08646]
    test 5 Mgrs3: 42S XD 19000 38000
    test 6 Mgrs3: [Z:42S, G:XD, E:19000, N:38000]
    test 7 Mgrs4: 31U DQ 48251 11932
    test 8 Mgrs4: [Z:31U, G:DQ, E:48251, N:11932]
    test 9 Mgrs5: 31U DQ 48251 11932
    test 10 Mgrs5: [Z:31U, G:DQ, E:48251, N:11932]
    test 11 Mgrs6: 31U DQ 48251 11932
    test 12 Mgrs6: [Z:31U, G:DQ, E:48251, N:11932]
    test 13 Mgrs7: 31U DQ 48251 11932
    test 14 Mgrs7: [Z:31U, G:DQ, E:48251, N:11932]
    test 15 Mgrs8: 31 N 431000 4582000
    test 16 Mgrs8: (41.38657, 2.174726, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.54564, 0.999659)
    test 17 Mgrs8: 31 N 431500 4582500
    test 18 Mgrs8: 31T DF 31000 82000
    test 19 Mgrs8: 41.391116°N, 002.180649°E
    test 20 Mgrs8: 31T DF 31000 82000
    test 21 Mgrs9: 31U DQ 48251 11932
    test 22 Mgrs9: [Z:31U, G:DQ, E:48251, N:11932]
    test 23 toUtm1: 31 N 448251 5411932
    test 24 toUtm1: [Z:31U, H:N, E:448251, N:5411932]
    test 25 toMgrs1: 31U DQ 48251 11932
    test 26 toMgrs1: [Z:31U, G:DQ, E:48251, N:11932]

    test 27 toUtm(None): (31, 'N', 448251.0, 5411932.0, 'U')
    test 28 easting: 48251.0
    test 29 northing: 11932.0
    test 30 EN: DQ
    test 31 en100k: DQ
    test 32 digraph: DQ
    test 33 zone: 31
    test 34 band: U
    test 35 bandLatitude: 48
    test 36 eastingnorthing: (48251.0, 11932.0)
    test 37 resolution: 1.0
    test 38 tilesize: 100000.0

    test 39 toMgrs: 31U DQ 48251 11932
    test 40 toMgrs(None): Mgrs6Tuple
    test 41 digraph: DQ

    test 42 (60.0°N, 001.0°E).toUtmUps.toMgrs: 31V CG 88455 53097
    test 43 (60.0°N, 003.0°E).toUtmUps.toMgrs: 32V JM 65640 66593
    test 44 (60.0°N, 009.0°E).toUtmUps.toMgrs: 32V NM 00000 51411
    test 45 (76.0°N, 001.0°E).toUtmUps.toMgrs: 31X DE 45999 36099
    test 46 (76.0°N, 013.0°E).toUtmUps.toMgrs: 33X VE 45999 36099
    test 47 (76.0°N, 025.0°E).toUtmUps.toMgrs: 35X ME 45999 36099
    test 48 (76.0°N, 037.0°E).toUtmUps.toMgrs: 37X DE 45999 36099
    test 49 (84.0°N, 042.0°E).toUtmUps.toMgrs: Z GC 46127 04524
    test 50 (90.0°S, 000.0°E).toUtmUps.toMgrs: B AN 00000 00000

    test 51 Mgrs: BAN00
    test 52 Mgrs4Tuple: ('B', 'AN', 0.0, 0.0)
    test 53 Mgrs4Tuple: SouthPole(zone='B', EN='AN', easting=0.0, northing=0.0)
    test 54 digraph: AN
    test 55 toMgrs.toLatLon: SouthPole(lat=-90.0, lon=0.0, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.0, scale=0.994)

    test 56 Ups: 00 S 2000000 2000000
    test 57 Ups: 00 S 2000500 2000500
    test 58 Mgrs: 0.1

    test 59 Mgrs: Y UB 17770 03800
    test 60 Mgrs: [Z:Y, G:UB, E:17770, N:03800]
    test 61 toUtmUps: 00 N 1617775 1403805
    test 62 toUtmUps: [Z:00Y, H:N, E:1617775, N:1403805]
    test 63 toLatLon: (83.627518, -32.664231, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.570098, 0.99708)
    test 64 toLatLon: LatLonDatum5Tuple(lat=83.627518, lon=-32.664231, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.570098, scale=0.99708)
    test 65 toMgrs!: 25X EN 04160 86523

    test 66 Mgrs: B FS 77514 99182
    test 67 Mgrs: [Z:B, G:FS, E:77514, N:99182]
    test 68 toUtmUps: 00 S 2377514 2499182
    test 69 toUtmUps: [Z:00B, H:S, E:2377514, N:2499182]
    test 70 toLatLon: (-84.367192, 37.098959, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -0.647499, 0.996406)
    test 71 toLatLon: LatLonDatum5Tuple(lat=-84.367192, lon=37.098959, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-0.647499, scale=0.996406)
    test 72 toMgrs: B FS 77514 99182

    test 73 Mgrs: 45S XT 47000 91000
    test 74 Mgrs: [Z:45S, G:XT, E:47000, N:91000]
    test 75 toUtmUps: 45 N 647500 3791500
    test 76 toUtmUps: [Z:45S, H:N, E:647500, N:3791500]
    test 77 toLatLon: (34.254177, 88.601932, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), 0.901835, 0.999868)
    test 78 toLatLon: LatLonDatum5Tuple(lat=34.254177, lon=88.601932, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=0.901835, scale=0.999868)
    test 79 toMgrs: 45S XT 47499 91499

    test 80 Mgrs: Y XK 35000 43000
    test 81 Mgrs: [Z:Y, G:XK, E:35000, N:43000]
    test 82 toUtmUps: 00 N 1735500 2243500
    test 83 toUtmUps: [Z:00Y, H:N, E:1735500, N:2243500]
    test 84 toLatLon: (86.762629, -132.632821, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.314879, 0.994794)
    test 85 toLatLon: LatLonDatum5Tuple(lat=86.762629, lon=-132.632821, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), gamma=-2.314879, scale=0.994794)
    test 86 toMgrs: Y XK 35499 43500

    test 87 GeoConvert: /opt/local/bin/GeoConvert
    test 88 LatLon(-59.811,   40.588).toMgrs: 37EEP8907468569
    test 89 LatLon(-56.153,   74.377).toMgrs: 43EDT6129876716
    test 90 LatLon( 18.332,  -40.482).toMgrs: 24QUF4339327554
    test 91 LatLon( 19.975,   23.188).toMgrs: 34QGH2895510208
    test 92 LatLon(-77.652,   10.541).toMgrs: 32CNU3678379983
    test 93 LatLon( 20.342,    6.863).toMgrs: 32QKH7690550774
    test 94 LatLon( 64.509,   82.359).toMgrs: 44WNS6525554434
    test 95 LatLon( -20.89,  -95.606).toMgrs: 15KTS2889387826
    test 96 LatLon(-63.232,  108.571).toMgrs: 49ECK7796486251
    test 97 LatLon( 32.264,   38.261).toMgrs: 37SDR3039769938
    test 98 LatLon( -9.906,    0.364).toMgrs: 31LBK1092603835
    test 99 LatLon(-47.256,   10.643).toMgrs: 32GPN2431065077
    test 100 LatLon( -60.29,   42.386).toMgrs: 38ELU5550013427
    test 101 LatLon( 22.128,   59.603).toMgrs: 40QGK6850849293
    test 102 LatLon(-43.105, -142.799).toMgrs: 07GCN5361425954
    test 103 LatLon(-28.393,    65.67).toMgrs: 41JQJ6161456361
    test 104 LatLon(  1.685,   86.663).toMgrs: 45NVB6251686246
    test 105 LatLon(-11.721,  -35.548).toMgrs: 25LBH2226003042
    test 106 LatLon( 69.288, -116.547).toMgrs: 11WNS1787986542
    test 107 LatLon(-49.749,   31.084).toMgrs: 36FUK6197687514
    test 108 LatLon( 22.338,  -23.507).toMgrs: 27QTE4178472387
    test 109 LatLon(   9.87,  -20.796).toMgrs: 27PWL2236691046
    test 110 LatLon( 28.675,  136.086).toMgrs: 53RPM0610872461
    test 111 LatLon( 55.259,   48.732).toMgrs: 39UUB5586825957
    test 112 LatLon( -5.077,  156.642).toMgrs: 57MTQ3856338347
    test 113 LatLon( -8.987,   44.003).toMgrs: 38LLR9040606436
    test 114 LatLon( 62.642,   64.189).toMgrs: 41VNK6095946264
    test 115 LatLon(-18.575,   85.055).toMgrs: 45KTV9474345086
    test 116 LatLon(  17.05,  145.248).toMgrs: 55QCU1353685922
    test 117 LatLon( 20.924,   11.785).toMgrs: 32QQJ8967316252
    test 118 LatLon( 80.582,    9.676).toMgrs: 33XVK0287251002
    test 119 LatLon(-17.266,  153.197).toMgrs: 56KNF2093991007
    test 120 LatLon( 75.492, -114.794).toMgrs: 11XND6167579651
    test 121 LatLon(-72.689,  125.321).toMgrs: 51CWV7706832722
    test 122 LatLon( 65.064,  -40.435).toMgrs: 24WVT3249616353
    test 123 LatLon(-41.697,    64.57).toMgrs: 41GPP3064082673
    test 124 LatLon( 74.819, -100.418).toMgrs: 14XMJ5855403907
    test 125 LatLon( -8.869,   56.938).toMgrs: 40LDR9318219630
    test 126 LatLon(-47.462,    -29.8).toMgrs: 26GKN8897739692
    test 127 LatLon(-60.702,   -7.103).toMgrs: 29EPN0355068909
    test 128 LatLon(-45.915, -146.772).toMgrs: 06GWQ1768115371
    test 129 LatLon(-18.844,  -122.43).toMgrs: 10KEE6004816336
    test 130 LatLon(-64.794, -122.288).toMgrs: 10DEP3383314313
    test 131 LatLon(-13.991,  -63.752).toMgrs: 20LMK1878553140
    test 132 LatLon( 38.811,  -29.969).toMgrs: 26SKH4220199991
    test 133 LatLon( -43.65, -109.188).toMgrs: 12GXS4612765404
    test 134 LatLon( -34.49,   85.159).toMgrs: 45HUB3095981973
    test 135 LatLon( -50.74,  -12.159).toMgrs: 28FGJ0044775238
    test 136 LatLon( 52.136,  115.409).toMgrs: 50ULC9111177358
    test 137 LatLon(   -6.4,  119.957).toMgrs: 50MRT2714591636
    test 138 LatLon( 24.203,  -95.603).toMgrs: 15RTG3560279165
    test 139 LatLon(-69.211, -115.484).toMgrs: 11DND6004421367
    test 140 LatLon( 49.323,  -38.621).toMgrs: 24UWV2754163432
    test 141 LatLon( 57.372,  163.617).toMgrs: 58VDJ1682959641
    test 142 LatLon( 71.289,  -10.781).toMgrs: 29WMV3624110568
    test 143 LatLon(-83.706,  -78.282).toMgrs: ARP1511842056
    test 144 LatLon(-47.785,   52.171).toMgrs: 39GWH8771306931
    test 145 LatLon( 34.326,  147.573).toMgrs: 55SET5271298451
    test 146 LatLon( 34.875,   160.88).toMgrs: 57SXU7182460793
    test 147 LatLon( 23.475,   -8.819).toMgrs: 29QNF1848396115
    test 148 LatLon( 57.252,  -79.087).toMgrs: 17VPD1541547058
    test 149 LatLon( 47.341,   79.624).toMgrs: 44TLT9605743977
    test 150 LatLon( 62.369,  -153.86).toMgrs: 05VMK5550215584
    test 151 LatLon(-52.956,  157.422).toMgrs: 57FUB9399531458
    test 152 LatLon(-60.845,  -17.072).toMgrs: 28ECT8740152698
    test 153 LatLon( 17.297,   -6.266).toMgrs: 29QQV9064414474
    test 154 LatLon( 64.476,  159.392).toMgrs: 57WWM1884650116
    test 155 LatLon(-26.977, -127.973).toMgrs: 09JXL0191715697
    test 156 LatLon( 70.466,  -16.243).toMgrs: 28WDD5361618315
    test 157 LatLon(-42.723, -126.609).toMgrs: 09GXN9576467172
    test 158 LatLon(-83.464,   28.942).toMgrs: BFU5152635686
    test 159 LatLon( -37.23,    19.72).toMgrs: 34HCD8645278845
    test 160 LatLon( 72.138,   -5.477).toMgrs: 30XVF1522106069
    test 161 LatLon( 77.079,  -151.62).toMgrs: 05XNF3444355993
    test 162 LatLon( 43.868,   89.135).toMgrs: 45TXJ7155259427
    test 163 LatLon(   78.0, -164.165).toMgrs: 03XWG1937958507
    test 164 LatLon(  1.132,   19.729).toMgrs: 34NCG5858525151
    test 165 LatLon( 16.706,  -10.092).toMgrs: 29QLU8357847350
    test 166 LatLon(-38.604,  140.988).toMgrs: 54HVC9895527166
    test 167 LatLon( 64.255,   70.439).toMgrs: 42WWS6973726218
    test 168 LatLon( 78.065,   18.707).toMgrs: 33XWG8552568331
    test 169 LatLon(-71.494,   67.909).toMgrs: 42DVF6135267157
    test 170 LatLon( -67.17,   87.805).toMgrs: 45DWF3485349442
    test 171 LatLon( 25.268, -102.587).toMgrs: 13RGH4301096808
    test 172 LatLon(-59.089, -151.381).toMgrs: 05ENQ9276948913
    test 173 LatLon(-54.933,  167.314).toMgrs: 58FFE4825610213
    test 174 LatLon(-46.248,  134.407).toMgrs: 53GMJ5428878226
    test 175 LatLon(-62.142,  -56.482).toMgrs: 21EWM2700409892
    test 176 LatLon( -4.716,  -49.576).toMgrs: 22MFV5793878567
    test 177 LatLon( 78.941,  -90.948).toMgrs: 15XWH4393264161
    test 178 LatLon( -2.788, -103.199).toMgrs: 13MGS0020391686
    test 179 LatLon(-66.451,   66.662).toMgrs: 42DUM9578327869
    test 180 LatLon( -27.35,   -4.536).toMgrs: 30JUQ4806973862
    test 181 LatLon( 32.772, -143.905).toMgrs: 07SBS2788229747
    test 182 LatLon(-75.737,   65.634).toMgrs: 41CNR7241792547
    test 183 LatLon( 83.938, -168.534).toMgrs: 02XNU2906521794
    test 184 LatLon( -8.121,  173.129).toMgrs: 59LQM3459601709
    test 185 LatLon( 56.616,  171.283).toMgrs: 59VNC1736874677
    test 186 LatLon(  4.962,  165.119).toMgrs: 58NEL1319248465
    test 187 LatLon(-75.488,   -9.812).toMgrs: 29CMS7728721788
    test 188 LatLon( 59.133,  -38.279).toMgrs: 24VWL4126255084
    test 189 LatLon(-10.091,  -17.829).toMgrs: 28LAP8992183184
    test 190 LatLon(-20.442,  109.533).toMgrs: 49KCT4696438921
    test 191 LatLon( 80.378,  -94.239).toMgrs: 15XVK7688124023
    test 192 LatLon( -30.18,  106.342).toMgrs: 48JXM2920460508
    test 193 LatLon( 41.468,  110.008).toMgrs: 49TDF1716391186
    test 194 LatLon( 30.913,   145.23).toMgrs: 55RCQ3085921302
    test 195 LatLon( 58.634,   46.788).toMgrs: 38VPL0380500682
    test 196 LatLon(-36.781, -145.205).toMgrs: 06HXE6017627918
    test 197 LatLon( 61.203,  125.321).toMgrs: 51VXH2471387612
    test 198 LatLon( 66.557,  -82.277).toMgrs: 17WMP4331182576
    test 199 LatLon( 40.539,  150.675).toMgrs: 56TLK0309990181
    test 200 LatLon(-49.851,  -166.75).toMgrs: 03FUE7419876466
    test 201 LatLon(-55.416,  -98.403).toMgrs: 14FND3779258752
    test 202 LatLon(   30.6,  112.465).toMgrs: 49RFP4044586187
    test 203 LatLon( 54.192,   66.184).toMgrs: 42UUF1628608546
    test 204 LatLon( 81.327,  165.297).toMgrs: 58XER0499929717

    4 of 204 testMgrs.py tests (2.0%) FAILED, incl. 4 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 821.817 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testModules.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36

    testing testModules.py 23.03.27 isLazy=3

    testModule(pygeodesy, 23.04.12)
# lazily imported pygeodesy.iskeyword from .basics by execfile.py line 211

    testPublic(pygeodesy, 23.04.12)

    all testModules.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 81.778 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testNamed.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.geohash by testNamed.py line 10
# lazily imported pygeodesy.Datum from .datums by testNamed.py line 10
# lazily imported pygeodesy.Datums from .datums by testNamed.py line 10
# lazily imported pygeodesy.nameof from .named by testNamed.py line 10
# lazily imported pygeodesy.ub2str from .basics by testNamed.py line 10

    testing testNamed.py 23.03.27 isLazy=3

    testing _Named() (pygeodesy.named, 23.02.06)
    test 1 _Named: _Named
    test 2 _Named: True
    test 3 _Named: ''
    test 4 Test: Test
    test 5 _Named 'Test': _Named 'Test'
    test 6 named._Named 'Test': named._Named 'Test'
    test 7 pygeodesy.named._Named 'Test': pygeodesy.named._Named 'Test'
    test 8 Test: use _Named.rename('X'): not _Named.name = 'X' (was 'Test')
    test 9 Test: _Named 'Test'
    test 10 _Named 'Test': Test
    test 11 _Named 'Test': Test
    test 12 _Named 'Test': _Named 'Test'
    test 13 _Named 'Test': <_Named 'Test' at 0x101a51870>  FAILED, KNOWN, expected _Named 'Test'
    test 14 _Named 'Test': ''

    testing _NamedBase() (pygeodesy.named, 23.02.06)
    test 15 _NamedBase: _NamedBase
    test 16 _NamedBase: True
    test 17 _NamedBase: ''
    test 18 Test: Test
    test 19 _NamedBase 'Test': _NamedBase 'Test'
    test 20 named._NamedBase 'Test': named._NamedBase 'Test'
    test 21 pygeodesy.named._NamedBase 'Test': pygeodesy.named._NamedBase 'Test'
    test 22 Test: use _NamedBase.rename('X'): not _NamedBase.name = 'X' (was 'Test')
    test 23 Test: named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 24 _NamedBase 'Test': Test
    test 25 _NamedBase 'Test': Test
    test 26 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 27 _NamedBase 'Test': named._NamedBase.toStr(), MRO(named._Named): not overloaded
    test 28 _NamedBase 'Test': ''

    testing _NamedDict() (pygeodesy.named, 23.02.06)
    test 29 _NamedDict: _NamedDict
    test 30 _NamedDict: True
    test 31 _NamedDict: ''
    test 32 Test: Test
    test 33 _NamedDict 'Test': _NamedDict 'Test'
    test 34 named._NamedDict 'Test': named._NamedDict 'Test'
    test 35 pygeodesy.named._NamedDict 'Test': pygeodesy.named._NamedDict 'Test'
    test 36 Test: use _NamedDict.rename('X'): not _NamedDict.name = 'X' (was 'Test')
    test 37 Test: {}
    test 38 _NamedDict 'Test': Test
    test 39 _NamedDict 'Test': Test
    test 40 _NamedDict 'Test': {}
    test 41 _NamedDict 'Test': Test()  FAILED, KNOWN, expected {}
    test 42 _NamedDict: ''

    testing _NamedEnum(<class 'pygeodesy.datums.Datum'>,) (pygeodesy.named, 23.02.06)
    test 43 Datums: _NamedEnum
    test 44 Datums: True
    test 45 Datums: 'Datums'  FAILED, KNOWN, expected ''
    test 46 Test: Test
    test 47 _NamedEnum 'Test': _NamedEnum 'Test'
    test 48 named._NamedEnum 'Test': named._NamedEnum 'Test'
    test 49 pygeodesy.named._NamedEnum 'Test': pygeodesy.named._NamedEnum 'Test'
    test 50 Test: use _NamedEnum.rename('X'): not _NamedEnum.name = 'X' (was 'Test')
    test 51 Test: Test.
    test 52 _NamedEnum 'Test': Test
    test 53 _NamedEnum 'Test': Test
    test 54 _NamedEnum 'Test': Test.
    test 55 _NamedEnum 'Test':   FAILED, KNOWN, expected Test.
    test 56 _NamedEnum: ''

    testing _NamedEnumItem() (pygeodesy.named, 23.02.06)
    test 57 _NamedEnumItem: _NamedEnumItem
    test 58 _NamedEnumItem: True
    test 59 _NamedEnumItem: ''
    test 60 Test: Test
    test 61 _NamedEnumItem 'Test': _NamedEnumItem 'Test'
    test 62 named._NamedEnumItem 'Test': named._NamedEnumItem 'Test'
    test 63 pygeodesy.named._NamedEnumItem 'Test': pygeodesy.named._NamedEnumItem 'Test'
    test 64 _NamedEnumItem 'Test': Test
    test 65 _NamedEnumItem 'Test': Test
    test 66 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 67 _NamedEnumItem 'Test': named._NamedEnumItem.toStr(), MRO(named._NamedBase, named._Named): not overloaded
    test 68 _NamedEnumItem 'Test': ''

    testing LatLon2Tuple(0, 0) (pygeodesy.named, 23.02.06)
    test 69 LatLon2Tuple: LatLon2Tuple
    test 70 LatLon2Tuple: True
    test 71 LatLon2Tuple: ''
    test 72 Test: Test
    test 73 LatLon2Tuple 'Test': LatLon2Tuple 'Test'
    test 74 namedTuples.LatLon2Tuple 'Test': namedTuples.LatLon2Tuple 'Test'
    test 75 pygeodesy.namedTuples.LatLon2Tuple 'Test': pygeodesy.namedTuples.LatLon2Tuple 'Test'
    test 76 Test: use LatLon2Tuple.rename('X'): not LatLon2Tuple.name = 'X' (was 'Test')
    test 77 Test: (0, 0)
    test 78 LatLon2Tuple 'Test': Test
    test 79 LatLon2Tuple 'Test': Test
    test 80 LatLon2Tuple 'Test': (0, 0)
    test 81 LatLon2Tuple 'Test': Test(lat=0, lon=0)  FAILED, KNOWN, expected (0, 0)
    test 82 LatLon2Tuple 'Test': ''

    testing NamedDicts (pygeodesy.named, 23.02.06)
# lazily imported pygeodesy.albers by bases.py line 213
# lazily imported pygeodesy.azimuthal by bases.py line 213
# lazily imported pygeodesy.booleans by bases.py line 213
# lazily imported pygeodesy.clipy by bases.py line 213
# lazily imported pygeodesy.css by bases.py line 213
# lazily imported pygeodesy.ecef by bases.py line 213
# lazily imported pygeodesy.elevations by bases.py line 213
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 213
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 213
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 213
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 213
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 213
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 213
# lazily imported pygeodesy.elliptic by bases.py line 213
# lazily imported pygeodesy.epsg by bases.py line 213
# lazily imported pygeodesy.etm by bases.py line 213
# lazily imported pygeodesy.frechet by bases.py line 213
# lazily imported pygeodesy.fstats by bases.py line 213
# lazily imported pygeodesy.gars by bases.py line 213
# lazily imported pygeodesy.geodesicw by bases.py line 213
# lazily imported pygeodesy.geodsolve by bases.py line 213
    test 83 Neighbors8Dict: Neighbors8Dict
    test 84 Neighbors8Dict: 8-Dict C{(N, NE, E, SE, S, SW, W, NW)}
    test 85 Neighbors8Dict: 8
# lazily imported pygeodesy.geoids by bases.py line 213
# lazily imported pygeodesy.hausdorff by bases.py line 213
# lazily imported pygeodesy.ktm by bases.py line 213
# lazily imported pygeodesy.lcc by bases.py line 213
# lazily imported pygeodesy.ltp by bases.py line 213
# lazily imported pygeodesy.mgrs by bases.py line 213
# lazily imported pygeodesy.osgr by bases.py line 213
# lazily imported pygeodesy.resections by bases.py line 213
# lazily imported pygeodesy.rhumbsolve by bases.py line 213
# lazily imported pygeodesy.simplify by bases.py line 213
# lazily imported pygeodesy.sphericalBase by bases.py line 213
# lazily imported pygeodesy.sphericalNvector by bases.py line 213
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 213
# lazily imported pygeodesy.trf by bases.py line 213
# lazily imported pygeodesy.triaxials by bases.py line 213
# lazily imported pygeodesy.utmups by bases.py line 213
# lazily imported pygeodesy.webmercator by bases.py line 213
# lazily imported pygeodesy.wgrs by bases.py line 213

    testing NamedTuples (pygeodesy.namedTuples, 23.04.03)
    test 86 Albers7Tuple: Albers7Tuple
    test 87 Albers7Tuple: 7-Tuple C{(x, y, lat, lon, gamma, scale, datum)}
    test 88 Albers7Tuple: 7
    test 89 Azimuthal7Tuple: Azimuthal7Tuple
    test 90 Azimuthal7Tuple: 7-Tuple C{(x, y, lat, lon, azimuth, scale, datum)}
    test 91 Azimuthal7Tuple: 7
    test 92 ClipCS4Tuple: ClipCS4Tuple
    test 93 ClipCS4Tuple: 4-Tuple C{(start, end, i, j)}
    test 94 ClipCS4Tuple: 4
    test 95 ClipFHP4Tuple: ClipFHP4Tuple
    test 96 ClipFHP4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 97 ClipFHP4Tuple: 4
    test 98 ClipGH4Tuple: ClipGH4Tuple
    test 99 ClipGH4Tuple: 4-Tuple C{(lat, lon, height, clipid)}
    test 100 ClipGH4Tuple: 4
    test 101 ClipLB6Tuple: ClipLB6Tuple
    test 102 ClipLB6Tuple: 6-Tuple C{(start, end, i, fi, fj, j)}
    test 103 ClipLB6Tuple: 6
    test 104 ClipSH3Tuple: ClipSH3Tuple
    test 105 ClipSH3Tuple: 3-Tuple C{(start, end, original)}
    test 106 ClipSH3Tuple: 3
    test 107 EasNorAziRk4Tuple: EasNorAziRk4Tuple
    test 108 EasNorAziRk4Tuple: 4-Tuple C{(easting, northing, azimuth, reciprocal)}
    test 109 EasNorAziRk4Tuple: 4
    test 110 EasNorAziRkEqu6Tuple: EasNorAziRkEqu6Tuple
    test 111 EasNorAziRkEqu6Tuple: 6-Tuple C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 112 EasNorAziRkEqu6Tuple: 6
    test 113 LatLonAziRk4Tuple: LatLonAziRk4Tuple
    test 114 LatLonAziRk4Tuple: 4-Tuple C{(lat, lon, azimuth, reciprocal)}
    test 115 LatLonAziRk4Tuple: 4
    test 116 Ecef9Tuple: Ecef9Tuple
    test 117 Ecef9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, C, M, datum)}
    test 118 Ecef9Tuple: 9
    test 119 Elevation2Tuple: Elevation2Tuple
    test 120 Elevation2Tuple: 2-Tuple C{(elevation, data_source)}
    test 121 Elevation2Tuple: 2
    test 122 GeoidHeight2Tuple: GeoidHeight2Tuple
    test 123 GeoidHeight2Tuple: 2-Tuple C{(height, model_name)}
    test 124 GeoidHeight2Tuple: 2
    test 125 Circle4Tuple: Circle4Tuple
    test 126 Circle4Tuple: 4-Tuple C{(radius, height, lat, beta)}
    test 127 Circle4Tuple: 4
    test 128 Curvature2Tuple: Curvature2Tuple
    test 129 Curvature2Tuple: 2-Tuple C{(meridional, prime_vertical)}
    test 130 Curvature2Tuple: 2
    test 131 a_f2Tuple: a_f2Tuple
    test 132 a_f2Tuple: 2-Tuple C{(a, f)}
    test 133 a_f2Tuple: 2
    test 134 Elliptic3Tuple: Elliptic3Tuple
    test 135 Elliptic3Tuple: 3-Tuple C{(sn, cn, dn)}
    test 136 Elliptic3Tuple: 3
    test 137 Radical2Tuple: Radical2Tuple
    test 138 Radical2Tuple: 2-Tuple C{(ratio, xline)}
    test 139 Radical2Tuple: 2
    test 140 Frechet6Tuple: Frechet6Tuple
    test 141 Frechet6Tuple: 6-Tuple C{(fd, fi1, fi2, r, n, units)}
    test 142 Frechet6Tuple: 6
    test 143 Fsum2Tuple: Fsum2Tuple
    test 144 Fsum2Tuple: 2-Tuple C{(fsum, residual)}
    test 145 Fsum2Tuple: 2
    test 146 GeodSolve12Tuple: GeodSolve12Tuple
    test 147 GeodSolve12Tuple: 12-Tuple C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 148 GeodSolve12Tuple: 12
    test 149 Resolutions2Tuple: Resolutions2Tuple
    test 150 Resolutions2Tuple: 2-Tuple C{(res1, res2)}
    test 151 Resolutions2Tuple: 2
    test 152 GeoidHeight5Tuple: GeoidHeight5Tuple
    test 153 GeoidHeight5Tuple: 5-Tuple C{(lat, lon, egm84, egm96, egm2008)}
    test 154 GeoidHeight5Tuple: 5
    test 155 Hausdorff6Tuple: Hausdorff6Tuple
    test 156 Hausdorff6Tuple: 6-Tuple C{(hd, i, j, mn, md, units)}
    test 157 Hausdorff6Tuple: 6
    test 158 Area3Tuple: Area3Tuple
    test 159 Area3Tuple: 3-Tuple C{(number, perimeter, area)}
    test 160 Area3Tuple: 3
    test 161 Direct9Tuple: Direct9Tuple
    test 162 Direct9Tuple: 9-Tuple C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 163 Direct9Tuple: 9
    test 164 Inverse10Tuple: Inverse10Tuple
    test 165 Inverse10Tuple: 10-Tuple C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 166 Inverse10Tuple: 10
    test 167 Aer4Tuple: Aer4Tuple
    test 168 Aer4Tuple: 4-Tuple C{(azimuth, elevation, slantrange, ltp)}
    test 169 Aer4Tuple: 4
    test 170 Attitude4Tuple: Attitude4Tuple
    test 171 Attitude4Tuple: 4-Tuple C{(alt, tilt, yaw, roll)}
    test 172 Attitude4Tuple: 4
    test 173 ChLV9Tuple: ChLV9Tuple
    test 174 ChLV9Tuple: 9-Tuple C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 175 ChLV9Tuple: 9
    test 176 ChLVEN2Tuple: ChLVEN2Tuple
    test 177 ChLVEN2Tuple: 2-Tuple C{(E_LV95, N_LV95)}
    test 178 ChLVEN2Tuple: 2
    test 179 ChLVYX2Tuple: ChLVYX2Tuple
    test 180 ChLVYX2Tuple: 2-Tuple C{(Y, X)}
    test 181 ChLVYX2Tuple: 2
    test 182 ChLVyx2Tuple: ChLVyx2Tuple
    test 183 ChLVyx2Tuple: 2-Tuple C{(y_LV03, x_LV03)}
    test 184 ChLVyx2Tuple: 2
    test 185 Enu4Tuple: Enu4Tuple
    test 186 Enu4Tuple: 4-Tuple C{(east, north, up, ltp)}
    test 187 Enu4Tuple: 4
    test 188 Footprint5Tuple: Footprint5Tuple
    test 189 Footprint5Tuple: 5-Tuple C{(center, upperleft, upperight, loweright, lowerleft)}
    test 190 Footprint5Tuple: 5
    test 191 Local9Tuple: Local9Tuple
    test 192 Local9Tuple: 9-Tuple C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 193 Local9Tuple: 9
    test 194 Ned4Tuple: Ned4Tuple
    test 195 Ned4Tuple: 4-Tuple C{(north, east, down, ltp)}
    test 196 Ned4Tuple: 4
    test 197 Xyz4Tuple: Xyz4Tuple
    test 198 Xyz4Tuple: 4-Tuple C{(x, y, z, ltp)}
    test 199 Xyz4Tuple: 4
    test 200 Mgrs4Tuple: Mgrs4Tuple
    test 201 Mgrs4Tuple: 4-Tuple C{(zone, EN, easting, northing)}
    test 202 Mgrs4Tuple: 4
    test 203 Mgrs6Tuple: Mgrs6Tuple
    test 204 Mgrs6Tuple: 6-Tuple C{(zone, EN, easting, northing, band, datum)}
    test 205 Mgrs6Tuple: 6
    test 206 Bearing2Tuple: Bearing2Tuple
    test 207 Bearing2Tuple: 2-Tuple C{(initial, final)}
    test 208 Bearing2Tuple: 2
    test 209 Bounds2Tuple: Bounds2Tuple
    test 210 Bounds2Tuple: 2-Tuple C{(latlonSW, latlonNE)}
    test 211 Bounds2Tuple: 2
    test 212 Bounds4Tuple: Bounds4Tuple
    test 213 Bounds4Tuple: 4-Tuple C{(latS, lonW, latN, lonE)}
    test 214 Bounds4Tuple: 4
    test 215 Destination2Tuple: Destination2Tuple
    test 216 Destination2Tuple: 2-Tuple C{(destination, final)}
    test 217 Destination2Tuple: 2
    test 218 Destination3Tuple: Destination3Tuple
    test 219 Destination3Tuple: 3-Tuple C{(lat, lon, final)}
    test 220 Destination3Tuple: 3
    test 221 Distance2Tuple: Distance2Tuple
    test 222 Distance2Tuple: 2-Tuple C{(distance, initial)}
    test 223 Distance2Tuple: 2
    test 224 Distance3Tuple: Distance3Tuple
    test 225 Distance3Tuple: 3-Tuple C{(distance, initial, final)}
    test 226 Distance3Tuple: 3
    test 227 Distance4Tuple: Distance4Tuple
    test 228 Distance4Tuple: 4-Tuple C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 229 Distance4Tuple: 4
    test 230 EasNor2Tuple: EasNor2Tuple
    test 231 EasNor2Tuple: 2-Tuple C{(easting, northing)}
    test 232 EasNor2Tuple: 2
    test 233 EasNor3Tuple: EasNor3Tuple
    test 234 EasNor3Tuple: 3-Tuple C{(easting, northing, height)}
    test 235 EasNor3Tuple: 3
    test 236 Forward4Tuple: Forward4Tuple
    test 237 Forward4Tuple: 4-Tuple C{(easting, northing, gamma, scale)}
    test 238 Forward4Tuple: 4
    test 239 Intersection3Tuple: Intersection3Tuple
    test 240 Intersection3Tuple: 3-Tuple C{(point, outside1, outside2)}
    test 241 Intersection3Tuple: 3
    test 242 LatLon2Tuple: LatLon2Tuple
    test 243 LatLon2Tuple: 2-Tuple C{(lat, lon)}
    test 244 LatLon2Tuple: 2
    test 245 LatLon3Tuple: LatLon3Tuple
    test 246 LatLon3Tuple: 3-Tuple C{(lat, lon, height)}
    test 247 LatLon3Tuple: 3
    test 248 LatLon4Tuple: LatLon4Tuple
    test 249 LatLon4Tuple: 4-Tuple C{(lat, lon, height, datum)}
    test 250 LatLon4Tuple: 4
    test 251 LatLonDatum3Tuple: LatLonDatum3Tuple
    test 252 LatLonDatum3Tuple: 3-Tuple C{(lat, lon, datum)}
    test 253 LatLonDatum3Tuple: 3
    test 254 LatLonDatum5Tuple: LatLonDatum5Tuple
    test 255 LatLonDatum5Tuple: 5-Tuple C{(lat, lon, datum, gamma, scale)}
    test 256 LatLonDatum5Tuple: 5
    test 257 LatLonPrec3Tuple: LatLonPrec3Tuple
    test 258 LatLonPrec3Tuple: 3-Tuple C{(lat, lon, precision)}
    test 259 LatLonPrec3Tuple: 3
    test 260 LatLonPrec5Tuple: LatLonPrec5Tuple
    test 261 LatLonPrec5Tuple: 5-Tuple C{(lat, lon, precision, height, radius)}
    test 262 LatLonPrec5Tuple: 5
    test 263 NearestOn2Tuple: NearestOn2Tuple
    test 264 NearestOn2Tuple: 2-Tuple C{(closest, fraction)}
    test 265 NearestOn2Tuple: 2
    test 266 NearestOn3Tuple: NearestOn3Tuple
    test 267 NearestOn3Tuple: 3-Tuple C{(closest, distance, angle)}
    test 268 NearestOn3Tuple: 3
    test 269 NearestOn4Tuple: NearestOn4Tuple
    test 270 NearestOn4Tuple: 4-Tuple C{(lat, lon, distance, normal)}
    test 271 NearestOn4Tuple: 4
    test 272 NearestOn5Tuple: NearestOn5Tuple
    test 273 NearestOn5Tuple: 5-Tuple C{(lat, lon, distance, angle, height)}
    test 274 NearestOn5Tuple: 5
    test 275 NearestOn6Tuple: NearestOn6Tuple
    test 276 NearestOn6Tuple: 6-Tuple C{(closest, distance, fi, j, start, end)}
    test 277 NearestOn6Tuple: 6
    test 278 NearestOn8Tuple: NearestOn8Tuple
    test 279 NearestOn8Tuple: 8-Tuple C{(closest, distance, fi, j, start, end, initial, final)}
    test 280 NearestOn8Tuple: 8
    test 281 PhiLam2Tuple: PhiLam2Tuple
    test 282 PhiLam2Tuple: 2-Tuple C{(phi, lam)}
    test 283 PhiLam2Tuple: 2
    test 284 PhiLam3Tuple: PhiLam3Tuple
    test 285 PhiLam3Tuple: 3-Tuple C{(phi, lam, height)}
    test 286 PhiLam3Tuple: 3
    test 287 PhiLam4Tuple: PhiLam4Tuple
    test 288 PhiLam4Tuple: 4-Tuple C{(phi, lam, height, datum)}
    test 289 PhiLam4Tuple: 4
    test 290 Point3Tuple: Point3Tuple
    test 291 Point3Tuple: 3-Tuple C{(x, y, ll)}
    test 292 Point3Tuple: 3
    test 293 Points2Tuple: Points2Tuple
    test 294 Points2Tuple: 2-Tuple C{(number, points)}
    test 295 Points2Tuple: 2
    test 296 Reverse4Tuple: Reverse4Tuple
    test 297 Reverse4Tuple: 4-Tuple C{(lat, lon, gamma, scale)}
    test 298 Reverse4Tuple: 4
    test 299 Triangle7Tuple: Triangle7Tuple
    test 300 Triangle7Tuple: 7-Tuple C{(A, a, B, b, C, c, area)}
    test 301 Triangle7Tuple: 7
    test 302 Triangle8Tuple: Triangle8Tuple
    test 303 Triangle8Tuple: 8-Tuple C{(A, a, B, b, C, c, D, E)}
    test 304 Triangle8Tuple: 8
    test 305 Trilaterate5Tuple: Trilaterate5Tuple
    test 306 Trilaterate5Tuple: 5-Tuple C{(min, minPoint, max, maxPoint, n)}
    test 307 Trilaterate5Tuple: 5
    test 308 UtmUps2Tuple: UtmUps2Tuple
    test 309 UtmUps2Tuple: 2-Tuple C{(zone, hemipole)}
    test 310 UtmUps2Tuple: 2
    test 311 UtmUps5Tuple: UtmUps5Tuple
    test 312 UtmUps5Tuple: 5-Tuple C{(zone, hemipole, easting, northing, band)}
    test 313 UtmUps5Tuple: 5
    test 314 UtmUps8Tuple: UtmUps8Tuple
    test 315 UtmUps8Tuple: 8-Tuple C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 316 UtmUps8Tuple: 8
    test 317 UtmUpsLatLon5Tuple: UtmUpsLatLon5Tuple
    test 318 UtmUpsLatLon5Tuple: 5-Tuple C{(zone, band, hemipole, lat, lon)}
    test 319 UtmUpsLatLon5Tuple: 5
    test 320 Vector2Tuple: Vector2Tuple
    test 321 Vector2Tuple: 2-Tuple C{(x, y)}
    test 322 Vector2Tuple: 2
    test 323 Vector3Tuple: Vector3Tuple
    test 324 Vector3Tuple: 3-Tuple C{(x, y, z)}
    test 325 Vector3Tuple: 3
    test 326 Vector4Tuple: Vector4Tuple
    test 327 Vector4Tuple: 4-Tuple C{(x, y, z, h)}
    test 328 Vector4Tuple: 4
    test 329 Shape2Tuple: Shape2Tuple
    test 330 Shape2Tuple: 2-Tuple C{(nrows, ncols)}
    test 331 Shape2Tuple: 2
    test 332 Collins5Tuple: Collins5Tuple
    test 333 Collins5Tuple: 5-Tuple C{(pointP, pointH, a, b, c)}
    test 334 Collins5Tuple: 5
    test 335 Survey3Tuple: Survey3Tuple
    test 336 Survey3Tuple: 3-Tuple C{(PA, PB, PC)}
    test 337 Survey3Tuple: 3
    test 338 Tienstra7Tuple: Tienstra7Tuple
    test 339 Tienstra7Tuple: 7-Tuple C{(pointP, A, B, C, a, b, c)}
    test 340 Tienstra7Tuple: 7
    test 341 TriAngle4Tuple: TriAngle4Tuple
    test 342 TriAngle4Tuple: 4-Tuple C{(radA, radB, radC, rIn)}
    test 343 TriAngle4Tuple: 4
    test 344 TriSide2Tuple: TriSide2Tuple
    test 345 TriSide2Tuple: 2-Tuple C{(a, radA)}
    test 346 TriSide2Tuple: 2
    test 347 TriSide4Tuple: TriSide4Tuple
    test 348 TriSide4Tuple: 4-Tuple C{(a, b, radC, d)}
    test 349 TriSide4Tuple: 4
    test 350 RhumbSolve7Tuple: RhumbSolve7Tuple
    test 351 RhumbSolve7Tuple: 7-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}
    test 352 RhumbSolve7Tuple: 7
    test 353 Rhumb8Tuple: Rhumb8Tuple
    test 354 Rhumb8Tuple: 8-Tuple C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 355 Rhumb8Tuple: 8
    test 356 RhumbOrder2Tuple: RhumbOrder2Tuple
    test 357 RhumbOrder2Tuple: 2-Tuple C{(RAorder, TMorder)}
    test 358 RhumbOrder2Tuple: 2
    test 359 Helmert7Tuple: Helmert7Tuple
    test 360 Helmert7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 361 Helmert7Tuple: 7
    test 362 Helmert7Tuple: Helmert7Tuple
    test 363 Helmert7Tuple: 7-Tuple C{(tx, ty, tz, s, sx, sy, sz)}
    test 364 Helmert7Tuple: 7
    test 365 BetaOmega2Tuple: BetaOmega2Tuple
    test 366 BetaOmega2Tuple: 2-Tuple C{(beta, omega)}
    test 367 BetaOmega2Tuple: 2
    test 368 BetaOmega3Tuple: BetaOmega3Tuple
    test 369 BetaOmega3Tuple: 3-Tuple C{(beta, omega, height)}
    test 370 BetaOmega3Tuple: 3
    test 371 Jacobi2Tuple: Jacobi2Tuple
    test 372 Jacobi2Tuple: 2-Tuple C{(x, y)}
    test 373 Jacobi2Tuple: 2
    test 374 Circin6Tuple: Circin6Tuple
    test 375 Circin6Tuple: 6-Tuple C{(radius, center, deltas, cA, cB, cC)}
    test 376 Circin6Tuple: 6
    test 377 Circum3Tuple: Circum3Tuple
    test 378 Circum3Tuple: 3-Tuple C{(radius, center, deltas)}
    test 379 Circum3Tuple: 3
    test 380 Circum4Tuple: Circum4Tuple
    test 381 Circum4Tuple: 4-Tuple C{(radius, center, rank, residuals)}
    test 382 Circum4Tuple: 4
    test 383 Meeus2Tuple: Meeus2Tuple
    test 384 Meeus2Tuple: 2-Tuple C{(radius, Type)}
    test 385 Meeus2Tuple: 2
    test 386 Radii11Tuple: Radii11Tuple
    test 387 Radii11Tuple: 11-Tuple C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 388 Radii11Tuple: 11
    test 389 Soddy4Tuple: Soddy4Tuple
    test 390 Soddy4Tuple: 4-Tuple C{(radius, center, deltas, outer)}
    test 391 Soddy4Tuple: 4
    test 392 EasNorRadius3Tuple: EasNorRadius3Tuple
    test 393 EasNorRadius3Tuple: 3-Tuple C{(easting, northing, radius)}
    test 394 EasNorRadius3Tuple: 3

    testing albers.py (pygeodesy.named, 23.02.06)
    test 395 albers.py:350: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}
    test 396 albers.py:472: L{Albers7Tuple}C{(x, y, lat, lon, gamma, scale, datum)}

    testing azimuthal.py (pygeodesy.named, 23.02.06)
    test 397 azimuthal.py:182: L{LatLon2Tuple}C{(lat, lon)}
    test 398 azimuthal.py:358: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 399 azimuthal.py:392: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 400 azimuthal.py:485: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 401 azimuthal.py:512: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 402 azimuthal.py:657: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 403 azimuthal.py:683: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 404 azimuthal.py:753: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 405 azimuthal.py:794: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 406 azimuthal.py:959: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 407 azimuthal.py:986: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 408 azimuthal.py:1016: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 409 azimuthal.py:1040: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 410 azimuthal.py:1072: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}
    test 411 azimuthal.py:1113: L{Azimuthal7Tuple}C{(x, y, lat, lon, azimuth, scale, datum)}

    testing basics.py (pygeodesy.named, 23.02.06)

    testing booleans.py (pygeodesy.named, 23.02.06)

    testing cartesianBase.py (pygeodesy.named, 23.02.06)
    test 412 cartesianBase.py:127: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 413 cartesianBase.py:176: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 414 cartesianBase.py:272: L{Vector4Tuple}C{(x, y, z, h)}
    test 415 cartesianBase.py:310: L{LatLon2Tuple}C{(lat, lon)}
    test 416 cartesianBase.py:316: L{LatLon3Tuple}C{(lat, lon, height)}
    test 417 cartesianBase.py:322: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 418 cartesianBase.py:388: L{PhiLam2Tuple}C{(phi, lam)}
    test 419 cartesianBase.py:394: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 420 cartesianBase.py:400: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 421 cartesianBase.py:460: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 422 cartesianBase.py:484: L{PhiLam2Tuple}C{(phi, lam)}
    test 423 cartesianBase.py:492: L{LatLon2Tuple}C{(lat, lon)}
    test 424 cartesianBase.py:500: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 425 cartesianBase.py:555: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 426 cartesianBase.py:575: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 427 cartesianBase.py:605: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 428 cartesianBase.py:633: L{Vector4Tuple}C{(x, y, z, h)}
    test 429 cartesianBase.py:694: L{Vector3Tuple}C{(x, y, z)}

    testing clipy.py (pygeodesy.named, 23.02.06)
    test 430 clipy.py:196: L{ClipCS4Tuple}C{(start, end, i, j)}
    test 431 clipy.py:276: L{ClipFHP4Tuple}C{(lat, lon, height, clipid)}
    test 432 clipy.py:321: L{ClipGH4Tuple}C{(lat, lon, height, clipid)}
    test 433 clipy.py:387: L{ClipLB6Tuple}C{(start, end, i, fi, fj, j)}
    test 434 clipy.py:665: L{ClipSH3Tuple}C{(start, end, original)}

    testing constants.py (pygeodesy.named, 23.02.06)

    testing css.py (pygeodesy.named, 23.02.06)
    test 435 css.py:144: L{EasNor2Tuple}C{(easting, northing)}
    test 436 css.py:162: L{EasNorAziRk4Tuple}C{(easting, northing, azimuth, reciprocal)}
    test 437 css.py:182: L{EasNorAziRkEqu6Tuple}C{(easting, northing, azimuth, reciprocal, equatorarc, equatorazimuth)}
    test 438 css.py:267: L{LatLon2Tuple}C{(lat, lon)}
    test 439 css.py:333: L{LatLon2Tuple}C{(lat, lon)}
    test 440 css.py:360: L{LatLonAziRk4Tuple}C{(lat, lon, azimuth, reciprocal)}
    test 441 css.py:529: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 442 css.py:624: L{EasNor3Tuple}C{(easting, northing, height)}

    testing datums.py (pygeodesy.named, 23.02.06)
    test 443 datums.py:230: L{Vector3Tuple}C{(x, y, z)}

    testing dms.py (pygeodesy.named, 23.02.06)
    test 444 dms.py:777: L{LatLon2Tuple}C{(lat, lon)}
    test 445 dms.py:814: L{LatLon3Tuple}C{(lat, lon, height)}

    testing ecef.py (pygeodesy.named, 23.02.06)
    test 446 ecef.py:258: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 447 ecef.py:284: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 448 ecef.py:355: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 449 ecef.py:425: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 450 ecef.py:493: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 451 ecef.py:635: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 452 ecef.py:734: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 453 ecef.py:813: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 454 ecef.py:1079: L{LatLon2Tuple}C{(lat, lon)}
    test 455 ecef.py:1085: L{LatLon3Tuple}C{(lat, lon, height)}
    test 456 ecef.py:1091: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 457 ecef.py:1097: L{LatLon2Tuple}C{(lat, lon)}
    test 458 ecef.py:1128: L{PhiLam2Tuple}C{(phi, lam)}
    test 459 ecef.py:1134: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 460 ecef.py:1140: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 461 ecef.py:1146: L{PhiLam2Tuple}C{(phi, lam)}
    test 462 ecef.py:1164: L{Vector4Tuple}C{(x, y, z, h)}
    test 463 ecef.py:1204: L{LatLon3Tuple}C{(lat, lon, height)}
    test 464 ecef.py:1205: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 465 ecef.py:1233: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 466 ecef.py:1249: L{Vector3Tuple}C{(x, y, z)}
    test 467 ecef.py:1258: L{Vector3Tuple}C{(x, y, z)}
    test 468 ecef.py:1264: L{Vector4Tuple}C{(x, y, z, h)}

    testing elevations.py (pygeodesy.named, 23.02.06)
    test 469 elevations.py:147: L{Elevation2Tuple}C{(elevation, data_source)}
    test 470 elevations.py:203: L{GeoidHeight2Tuple}C{(height, model_name)}

    testing ellipsoidalBase.py (pygeodesy.named, 23.02.06)
    test 471 ellipsoidalBase.py:288: L{Distance2Tuple}C{(distance, initial)}
    test 472 ellipsoidalBase.py:320: L{Elevation2Tuple}C{(elevation, data_source)}
    test 473 ellipsoidalBase.py:430: L{GeoidHeight2Tuple}C{(height, model_name)}
    test 474 ellipsoidalBase.py:474: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 475 ellipsoidalBase.py:984: L{Vector3Tuple}C{(x, y, z)}
    test 476 ellipsoidalBase.py:1011: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}

    testing ellipsoidalBaseDI.py (pygeodesy.named, 23.02.06)
    test 477 ellipsoidalBaseDI.py:56: L{Bearing2Tuple}C{(initial, final)}
    test 478 ellipsoidalBaseDI.py:102: L{Destination2Tuple}C{(destination, final)}
    test 479 ellipsoidalBaseDI.py:110: L{Destination2Tuple}C{(destination, final)}
    test 480 ellipsoidalBaseDI.py:111: L{Destination3Tuple}C{(lat, lon, final)}
    test 481 ellipsoidalBaseDI.py:160: L{Distance3Tuple}C{(distance, initial, final)}
    test 482 ellipsoidalBaseDI.py:262: L{Distance3Tuple}C{(distance, initial, final)}
    test 483 ellipsoidalBaseDI.py:286: L{NearestOn8Tuple}C{(closest, distance, fi, j, start, end, initial, final)}

    testing ellipsoidalExact.py (pygeodesy.named, 23.02.06)
    test 484 ellipsoidalExact.py:42: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 485 ellipsoidalExact.py:82: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 486 ellipsoidalExact.py:146: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 487 ellipsoidalExact.py:147: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 488 ellipsoidalExact.py:196: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 489 ellipsoidalExact.py:270: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalGeodSolve.py (pygeodesy.named, 23.02.06)
    test 490 ellipsoidalGeodSolve.py:43: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 491 ellipsoidalGeodSolve.py:82: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 492 ellipsoidalGeodSolve.py:143: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 493 ellipsoidalGeodSolve.py:144: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 494 ellipsoidalGeodSolve.py:194: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 495 ellipsoidalGeodSolve.py:269: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalKarney.py (pygeodesy.named, 23.02.06)
    test 496 ellipsoidalKarney.py:62: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 497 ellipsoidalKarney.py:113: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 498 ellipsoidalKarney.py:185: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 499 ellipsoidalKarney.py:186: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 500 ellipsoidalKarney.py:236: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 501 ellipsoidalKarney.py:318: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoidalNvector.py (pygeodesy.named, 23.02.06)
    test 502 ellipsoidalNvector.py:100: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 503 ellipsoidalNvector.py:117: L{Vector4Tuple}C{(x, y, z, h)}
    test 504 ellipsoidalNvector.py:457: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 505 ellipsoidalNvector.py:474: L{Vector4Tuple}C{(x, y, z, h)}
    test 506 ellipsoidalNvector.py:548: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 507 ellipsoidalNvector.py:572: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 508 ellipsoidalNvector.py:613: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 509 ellipsoidalNvector.py:653: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 510 ellipsoidalNvector.py:709: L{Ned3Tuple}C{(north, east, down)}  FAILED, KNOWN, expected signature

    testing ellipsoidalVincenty.py (pygeodesy.named, 23.02.06)
    test 511 ellipsoidalVincenty.py:105: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 512 ellipsoidalVincenty.py:189: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 513 ellipsoidalVincenty.py:427: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 514 ellipsoidalVincenty.py:428: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 515 ellipsoidalVincenty.py:478: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 516 ellipsoidalVincenty.py:527: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing ellipsoids.py (pygeodesy.named, 23.02.06)
    test 517 ellipsoids.py:138: L{a_f2Tuple}C{(a, f)}
    test 518 ellipsoids.py:652: L{Circle4Tuple}C{(radius, height, lat, beta)}
    test 519 ellipsoids.py:714: L{Distance2Tuple}C{(distance, initial)}
    test 520 ellipsoids.py:1033: L{Vector4Tuple}C{(x, y, z, h)}
    test 521 ellipsoids.py:1482: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 522 ellipsoids.py:1501: L{Curvature2Tuple}C{(meridional, prime_vertical)}
    test 523 ellipsoids.py:1558: L{Curvature2Tuple}C{(meridional, prime_vertical)}

    testing elliptic.py (pygeodesy.named, 23.02.06)
    test 524 elliptic.py:753: L{Elliptic3Tuple}C{(sn, cn, dn)}

    testing epsg.py (pygeodesy.named, 23.02.06)
    test 525 epsg.py:147: L{UtmUps2Tuple}C{(zone, hemipole)}

    testing errors.py (pygeodesy.named, 23.02.06)

    testing etm.py (pygeodesy.named, 23.02.06)
    test 526 etm.py:197: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 527 etm.py:461: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 528 etm.py:681: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}
    test 529 etm.py:1033: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 530 etm.py:1073: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}

    testing fmath.py (pygeodesy.named, 23.02.06)

    testing formy.py (pygeodesy.named, 23.02.06)
    test 531 formy.py:64: L{LatLon2Tuple}C{(lat, lon)}
    test 532 formy.py:80: L{PhiLam2Tuple}C{(phi, lam)}
    test 533 formy.py:462: L{Distance4Tuple}C{(distance2, delta_lat, delta_lon, unroll_lon2)}
    test 534 formy.py:1151: L{LatLon2Tuple}C{(lat, lon)}
    test 535 formy.py:1222: L{LatLon2Tuple}C{(lat, lon)}
    test 536 formy.py:1346: L{Vector3Tuple}C{(x, y, z)}
    test 537 formy.py:1375: L{LatLon2Tuple}C{(lat, lon)}
    test 538 formy.py:1390: L{PhiLam2Tuple}C{(phi, lam)}
    test 539 formy.py:1414: L{LatLon2Tuple}C{(lat, lon)}
    test 540 formy.py:1429: L{PhiLam2Tuple}C{(phi, lam)}
    test 541 formy.py:1484: L{Vector3Tuple}C{(x, y, z)}
    test 542 formy.py:1513: L{Radical2Tuple}C{(ratio, xline)}

    testing frechet.py (pygeodesy.named, 23.02.06)
    test 543 frechet.py:203: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}
    test 544 frechet.py:333: L{PhiLam2Tuple}C{(phi, lam)}
    test 545 frechet.py:978: L{Frechet6Tuple}C{(fd, fi1, fi2, r, n, units)}

    testing fstats.py (pygeodesy.named, 23.02.06)

    testing fsums.py (pygeodesy.named, 23.02.06)
    test 546 fsums.py:1014: L{Fsum2Tuple}C{(fsum, residual)}
    test 547 fsums.py:1269: L{Fsum2Tuple}C{(fsum, residual)}

    testing gars.py (pygeodesy.named, 23.02.06)
    test 548 gars.py:211: L{LatLonPrec3Tuple}C{(lat, lon, precision)}

    testing geodesicw.py (pygeodesy.named, 23.02.06)

    testing geodsolve.py (pygeodesy.named, 23.02.06)
    test 549 geodsolve.py:145: L{Destination3Tuple}C{(lat, lon, final)}
    test 550 geodsolve.py:155: L{Distance3Tuple}C{(distance, initial, final)}

    testing geohash.py (pygeodesy.named, 23.02.06)
    test 551 geohash.py:373: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 552 geohash.py:807: L{Neighbors8Dict}C{(N, NE, E, SE, S, SW, W, NW)}
    test 553 geohash.py:240: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 554 geohash.py:241: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 555 geohash.py:366: L{LatLon2Tuple}C{(lat, lon)}
    test 556 geohash.py:383: L{PhiLam2Tuple}C{(phi, lam)}
    test 557 geohash.py:396: L{LatLon2Tuple}C{(lat, lon)}
    test 558 geohash.py:412: L{LatLon2Tuple}C{(lat, lon)}
    test 559 geohash.py:524: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 560 geohash.py:525: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 561 geohash.py:614: L{LatLon2Tuple}C{(lat, lon)}
    test 562 geohash.py:633: L{LatLon2Tuple}C{(lat, lon)}
    test 563 geohash.py:865: L{Resolutions2Tuple}C{(res1, res2)}
    test 564 geohash.py:893: L{LatLon2Tuple}C{(lat, lon)}

    testing geoids.py (pygeodesy.named, 23.02.06)
    test 565 geoids.py:299: L{LatLon3Tuple}C{(lat, lon, height)}
    test 566 geoids.py:410: L{LatLon3Tuple}C{(lat, lon, height)}
    test 567 geoids.py:477: L{LatLon3Tuple}C{(lat, lon, height)}
    test 568 geoids.py:496: L{LatLon3Tuple}C{(lat, lon, height)}
    test 569 geoids.py:518: L{LatLon3Tuple}C{(lat, lon, height)}
    test 570 geoids.py:665: L{LatLon3Tuple}C{(lat, lon, height)}
    test 571 geoids.py:684: L{LatLon3Tuple}C{(lat, lon, height)}
    test 572 geoids.py:1116: L{LatLon3Tuple}C{(lat, lon, height)}
    test 573 geoids.py:1170: L{LatLon3Tuple}C{(lat, lon, height)}
    test 574 geoids.py:1643: L{GeoidHeight5Tuple}C{(lat, lon, egm84, egm96, egm2008)}

    testing hausdorff.py (pygeodesy.named, 23.02.06)
    test 575 hausdorff.py:173: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 576 hausdorff.py:230: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}
    test 577 hausdorff.py:289: L{PhiLam2Tuple}C{(phi, lam)}
    test 578 hausdorff.py:995: L{Hausdorff6Tuple}C{(hd, i, j, mn, md, units)}

    testing heights.py (pygeodesy.named, 23.02.06)

    testing interns.py (pygeodesy.named, 23.02.06)

    testing iters.py (pygeodesy.named, 23.02.06)
    test 579 iters.py:354: L{Point3Tuple}C{(x, y, ll)}
    test 580 iters.py:479: L{Points2Tuple}C{(number, points)}

    testing karney.py (pygeodesy.named, 23.02.06)
    test 581 karney.py:360: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 582 karney.py:372: L{GeodSolve12Tuple}C{(lat1, lon1, azi1, lat2, lon2, azi2, s12, a12, m12, M12, M21, S12)}
    test 583 karney.py:383: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}
    test 584 karney.py:401: L{Rhumb8Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12, a12)}
    test 585 karney.py:411: L{RhumbSolve7Tuple}C{(lat1, lon1, lat2, lon2, azi12, s12, S12)}

    testing ktm.py (pygeodesy.named, 23.02.06)
    test 586 ktm.py:203: L{Forward4Tuple}C{(easting, northing, gamma, scale)}
    test 587 ktm.py:319: L{Reverse4Tuple}C{(lat, lon, gamma, scale)}

    testing latlonBase.py (pygeodesy.named, 23.02.06)
    test 588 latlonBase.py:126: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 589 latlonBase.py:172: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 590 latlonBase.py:189: L{LatLon3Tuple}C{(lat, lon, height)}
    test 591 latlonBase.py:215: L{Circum3Tuple}C{(radius, center, deltas)}
    test 592 latlonBase.py:218: L{LatLon3Tuple}C{(lat, lon, height)}
    test 593 latlonBase.py:235: L{LatLon3Tuple}C{(lat, lon, height)}
    test 594 latlonBase.py:254: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 595 latlonBase.py:403: L{LatLon3Tuple}C{(lat, lon, height)}
    test 596 latlonBase.py:404: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 597 latlonBase.py:666: L{Vector4Tuple}C{(x, y, z, h)}
    test 598 latlonBase.py:803: L{LatLon2Tuple}C{(lat, lon)}
    test 599 latlonBase.py:842: L{LatLon2Tuple}C{(lat, lon)}
    test 600 latlonBase.py:860: L{LatLon3Tuple}C{(lat, lon, height)}
    test 601 latlonBase.py:902: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 602 latlonBase.py:967: L{PhiLam2Tuple}C{(phi, lam)}
    test 603 latlonBase.py:976: L{PhiLam2Tuple}C{(phi, lam)}
    test 604 latlonBase.py:987: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 605 latlonBase.py:1004: L{Points2Tuple}C{(number, points)}
    test 606 latlonBase.py:1033: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 607 latlonBase.py:1239: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 608 latlonBase.py:1281: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 609 latlonBase.py:1306: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 610 latlonBase.py:1335: L{Vector4Tuple}C{(x, y, z, h)}
    test 611 latlonBase.py:1388: L{Vector3Tuple}C{(x, y, z)}
    test 612 latlonBase.py:1454: L{Vector3Tuple}C{(x, y, z)}
    test 613 latlonBase.py:1463: L{Vector4Tuple}C{(x, y, z, h)}

    testing lazily.py (pygeodesy.named, 23.02.06)

    testing lcc.py (pygeodesy.named, 23.02.06)
    test 614 lcc.py:172: L{LatLon2Tuple}C{(lat, lon)}
    test 615 lcc.py:226: L{PhiLam2Tuple}C{(phi, lam)}
    test 616 lcc.py:492: L{LatLon3Tuple}C{(lat, lon, height)}
    test 617 lcc.py:498: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 618 lcc.py:517: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 619 lcc.py:523: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 620 lcc.py:534: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 621 lcc.py:561: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 622 lcc.py:641: L{EasNor3Tuple}C{(easting, northing, height)}

    testing ltp.py (pygeodesy.named, 23.02.06)
    test 623 ltp.py:169: L{Vector3Tuple}C{(x, y, z)}
    test 624 ltp.py:287: L{Footprint5Tuple}C{(center, upperleft, upperight, loweright, lowerleft)}
    test 625 ltp.py:478: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 626 ltp.py:509: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 627 ltp.py:541: L{LatLon3Tuple}C{(lat, lon, height)}
    test 628 ltp.py:553: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 629 ltp.py:610: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 630 ltp.py:733: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 631 ltp.py:755: L{ChLV9Tuple}C{(Y, X, h_, lat, lon, height, ltp, ecef, M)}
    test 632 ltp.py:870: L{ChLVEN2Tuple}C{(E_LV95, N_LV95)}
    test 633 ltp.py:871: L{ChLVyx2Tuple}C{(y_LV03, x_LV03)}
    test 634 ltp.py:872: L{ChLVYX2Tuple}C{(Y, X)}
    test 635 ltp.py:923: L{ChLVYX2Tuple}C{(Y, X)}
    test 636 ltp.py:1065: L{Vector3Tuple}C{(x, y, z)}

    testing ltpTuples.py (pygeodesy.named, 23.02.06)
    test 637 ltpTuples.py:119: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 638 ltpTuples.py:131: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 639 ltpTuples.py:143: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 640 ltpTuples.py:156: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 641 ltpTuples.py:164: L{Vector3Tuple}C{(x, y, z)}
    test 642 ltpTuples.py:726: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 643 ltpTuples.py:743: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 644 ltpTuples.py:766: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 645 ltpTuples.py:781: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 646 ltpTuples.py:803: L{Local9Tuple}C{(x, y, z, lat, lon, height, ltp, ecef, M)}
    test 647 ltpTuples.py:820: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 648 ltpTuples.py:861: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 649 ltpTuples.py:879: L{Vector3Tuple}C{(x, y, z)}
    test 650 ltpTuples.py:1029: L{LatLon2Tuple}C{(lat, lon)}
    test 651 ltpTuples.py:1035: L{LatLon3Tuple}C{(lat, lon, height)}
    test 652 ltpTuples.py:1053: L{PhiLam2Tuple}C{(phi, lam)}
    test 653 ltpTuples.py:1059: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 654 ltpTuples.py:1077: L{Aer4Tuple}C{(azimuth, elevation, slantrange, ltp)}
    test 655 ltpTuples.py:1090: L{Vector4Tuple}C{(x, y, z, h)}
    test 656 ltpTuples.py:1105: L{Enu4Tuple}C{(east, north, up, ltp)}
    test 657 ltpTuples.py:1118: L{LatLon3Tuple}C{(lat, lon, height)}
    test 658 ltpTuples.py:1119: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 659 ltpTuples.py:1135: L{Ned4Tuple}C{(north, east, down, ltp)}
    test 660 ltpTuples.py:1147: L{Xyz4Tuple}C{(x, y, z, ltp)}
    test 661 ltpTuples.py:1159: L{Vector3Tuple}C{(x, y, z)}
    test 662 ltpTuples.py:1340: L{LatLon3Tuple}C{(lat, lon, height)}
    test 663 ltpTuples.py:1341: L{LatLon4Tuple}C{(lat, lon, height, datum)}

    testing mgrs.py (pygeodesy.named, 23.02.06)
    test 664 mgrs.py:214: L{EasNor2Tuple}C{(easting, northing)}
    test 665 mgrs.py:301: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 666 mgrs.py:372: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 667 mgrs.py:390: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 668 mgrs.py:410: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 669 mgrs.py:484: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}
    test 670 mgrs.py:568: L{Mgrs4Tuple}C{(zone, EN, easting, northing)}
    test 671 mgrs.py:637: L{Mgrs6Tuple}C{(zone, EN, easting, northing, band, datum)}

    testing named.py (pygeodesy.named, 23.02.06)

    testing namedTuples.py (pygeodesy.named, 23.02.06)
    test 672 namedTuples.py:207: L{LatLon3Tuple}C{(lat, lon, height)}
    test 673 namedTuples.py:219: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 674 namedTuples.py:240: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 675 namedTuples.py:305: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}
    test 676 namedTuples.py:336: L{LatLon3Tuple}C{(lat, lon, height)}
    test 677 namedTuples.py:408: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 678 namedTuples.py:420: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 679 namedTuples.py:446: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 680 namedTuples.py:610: L{Vector3Tuple}C{(x, y, z)}
    test 681 namedTuples.py:629: L{Vector4Tuple}C{(x, y, z, h)}
    test 682 namedTuples.py:652: L{Vector3Tuple}C{(x, y, z)}

    testing nvectorBase.py (pygeodesy.named, 23.02.06)
    test 683 nvectorBase.py:162: L{LatLon2Tuple}C{(lat, lon)}
    test 684 nvectorBase.py:168: L{LatLon3Tuple}C{(lat, lon, height)}
    test 685 nvectorBase.py:174: L{LatLon4Tuple}C{(lat, lon, height, datum)}
    test 686 nvectorBase.py:192: L{PhiLam2Tuple}C{(phi, lam)}
    test 687 nvectorBase.py:198: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 688 nvectorBase.py:204: L{PhiLam4Tuple}C{(phi, lam, height, datum)}
    test 689 nvectorBase.py:212: L{PhiLam2Tuple}C{(phi, lam)}
    test 690 nvectorBase.py:223: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 691 nvectorBase.py:241: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 692 nvectorBase.py:280: L{LatLon2Tuple}C{(lat, lon)}
    test 693 nvectorBase.py:291: L{LatLon3Tuple}C{(lat, lon, height)}
    test 694 nvectorBase.py:310: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 695 nvectorBase.py:385: L{Vector4Tuple}C{(x, y, z, h)}
    test 696 nvectorBase.py:462: L{Vector4Tuple}C{(x, y, z, h)}
    test 697 nvectorBase.py:537: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 698 nvectorBase.py:579: L{Vector4Tuple}C{(x, y, z, h)}

    testing osgr.py (pygeodesy.named, 23.02.06)
    test 699 osgr.py:304: L{LatLonDatum3Tuple}C{(lat, lon, datum)}
    test 700 osgr.py:541: L{EasNor2Tuple}C{(easting, northing)}
    test 701 osgr.py:630: L{EasNor2Tuple}C{(easting, northing)}

    testing points.py (pygeodesy.named, 23.02.06)
    test 702 points.py:244: L{LatLon2Tuple}C{(lat, lon)}
    test 703 points.py:250: L{LatLon3Tuple}C{(lat, lon, height)}
    test 704 points.py:280: L{PhiLam2Tuple}C{(phi, lam)}
    test 705 points.py:286: L{PhiLam3Tuple}C{(phi, lam, height)}
    test 706 points.py:305: L{Points2Tuple}C{(number, points)}
    test 707 points.py:344: L{Vector4Tuple}C{(x, y, z, h)}
    test 708 points.py:785: L{Shape2Tuple}C{(nrows, ncols)}
    test 709 points.py:986: L{Point3Tuple}C{(x, y, ll)}
    test 710 points.py:1218: L{Bounds2Tuple}C{(latlonSW, latlonNE)}
    test 711 points.py:1220: L{Bounds4Tuple}C{(latS, lonW, latN, lonE)}
    test 712 points.py:1260: L{LatLon2Tuple}C{(lat, lon)}
    test 713 points.py:1327: L{LatLon2Tuple}C{(lat, lon)}
    test 714 points.py:1703: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 715 points.py:1705: L{NearestOn5Tuple}C{(lat, lon, distance, angle, height)}

    testing props.py (pygeodesy.named, 23.02.06)

    testing resections.py (pygeodesy.named, 23.02.06)
    test 716 resections.py:213: L{Collins5Tuple}C{(pointP, pointH, a, b, c)}
    test 717 resections.py:379: L{Survey3Tuple}C{(PA, PB, PC)}
    test 718 resections.py:446: L{Tienstra7Tuple}C{(pointP, A, B, C, a, b, c)}
    test 719 resections.py:573: L{TriAngle4Tuple}C{(radA, radB, radC, rIn)}
    test 720 resections.py:674: L{TriSide2Tuple}C{(a, radA)}
    test 721 resections.py:721: L{TriSide4Tuple}C{(a, b, radC, d)}
    test 722 resections.py:763: L{Survey3Tuple}C{(PA, PB, PC)}

    testing rhumbsolve.py (pygeodesy.named, 23.02.06)
    test 723 rhumbsolve.py:127: L{Destination3Tuple}C{(lat, lon, final)}
    test 724 rhumbsolve.py:156: L{Distance3Tuple}C{(distance, initial, final)}

    testing rhumbx.py (pygeodesy.named, 23.02.06)
    test 725 rhumbx.py:348: L{Distance3Tuple}C{(distance, initial, final)}
    test 726 rhumbx.py:401: L{RhumbOrder2Tuple}C{(RAorder, TMorder)}
    test 727 rhumbx.py:540: L{Distance2Tuple}C{(distance, initial)}
    test 728 rhumbx.py:625: L{LatLon2Tuple}C{(lat, lon)}
    test 729 rhumbx.py:644: L{NearestOn4Tuple}C{(lat, lon, distance, normal)}
    test 730 rhumbx.py:850: L{Direct9Tuple}C{(a12, lat2, lon2, azi2, s12, m12, M12, M21, S12)}
    test 731 rhumbx.py:867: L{Inverse10Tuple}C{(a12, s12, salp1, calp1, salp2, calp2, m12, M12, M21, S12)}

    testing simplify.py (pygeodesy.named, 23.02.06)

    testing solveBase.py (pygeodesy.named, 23.02.06)

    testing sphericalBase.py (pygeodesy.named, 23.02.06)
    test 732 sphericalBase.py:170: L{Bearing2Tuple}C{(initial, final)}
    test 733 sphericalBase.py:547: L{Vector4Tuple}C{(x, y, z, h)}

    testing sphericalNvector.py (pygeodesy.named, 23.02.06)
    test 734 sphericalNvector.py:80: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 735 sphericalNvector.py:97: L{Vector4Tuple}C{(x, y, z, h)}
    test 736 sphericalNvector.py:661: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 737 sphericalNvector.py:697: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 738 sphericalNvector.py:714: L{Vector4Tuple}C{(x, y, z, h)}
    test 739 sphericalNvector.py:754: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 740 sphericalNvector.py:771: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 741 sphericalNvector.py:1051: L{NearestOn3Tuple}C{(closest, distance, angle)}

    testing sphericalTrigonometry.py (pygeodesy.named, 23.02.06)
    test 742 sphericalTrigonometry.py:79: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 743 sphericalTrigonometry.py:658: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 744 sphericalTrigonometry.py:696: L{Ecef9Tuple}C{(x, y, z, lat, lon, height, C, M, datum)}
    test 745 sphericalTrigonometry.py:728: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 746 sphericalTrigonometry.py:729: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 747 sphericalTrigonometry.py:763: L{Trilaterate5Tuple}C{(min, minPoint, max, maxPoint, n)}
    test 748 sphericalTrigonometry.py:1058: L{LatLon3Tuple}C{(lat, lon, height)}
    test 749 sphericalTrigonometry.py:1111: L{LatLon3Tuple}C{(lat, lon, height)}
    test 750 sphericalTrigonometry.py:1225: L{LatLon3Tuple}C{(lat, lon, height)}
    test 751 sphericalTrigonometry.py:1250: L{LatLon2Tuple}C{(lat, lon)}
    test 752 sphericalTrigonometry.py:1275: L{NearestOn3Tuple}C{(closest, distance, angle)}
    test 753 sphericalTrigonometry.py:1276: L{LatLon3Tuple}C{(lat, lon, height)}
    test 754 sphericalTrigonometry.py:1374: L{Triangle7Tuple}C{(A, a, B, b, C, c, area)}
    test 755 sphericalTrigonometry.py:1379: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}
    test 756 sphericalTrigonometry.py:1405: L{Triangle8Tuple}C{(A, a, B, b, C, c, D, E)}

    testing streprs.py (pygeodesy.named, 23.02.06)

    testing trf.py (pygeodesy.named, 23.02.06)

    testing triaxials.py (pygeodesy.named, 23.02.06)
    test 757 triaxials.py:100: L{BetaOmega2Tuple}C{(beta, omega)}
    test 758 triaxials.py:110: L{BetaOmega2Tuple}C{(beta, omega)}
    test 759 triaxials.py:129: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 760 triaxials.py:139: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 761 triaxials.py:160: L{Jacobi2Tuple}C{(x, y)}
    test 762 triaxials.py:169: L{Jacobi2Tuple}C{(x, y)}
    test 763 triaxials.py:375: L{Vector4Tuple}C{(x, y, z, h)}
    test 764 triaxials.py:680: L{Vector3Tuple}C{(x, y, z)}
    test 765 triaxials.py:710: L{Vector3Tuple}C{(x, y, z)}
    test 766 triaxials.py:749: L{Vector3Tuple}C{(x, y, z)}
    test 767 triaxials.py:767: L{Vector3Tuple}C{(x, y, z)}
    test 768 triaxials.py:831: L{BetaOmega3Tuple}C{(beta, omega, height)}
    test 769 triaxials.py:857: L{Vector3Tuple}C{(x, y, z)}
    test 770 triaxials.py:885: L{LatLon3Tuple}C{(lat, lon, height)}
    test 771 triaxials.py:974: L{Jacobi2Tuple}C{(x, y)}
    test 772 triaxials.py:987: L{Jacobi2Tuple}C{(x, y)}
    test 773 triaxials.py:1001: L{Jacobi2Tuple}C{(x, y)}
    test 774 triaxials.py:1140: L{Vector4Tuple}C{(x, y, z, h)}

    testing units.py (pygeodesy.named, 23.02.06)

    testing unitsBase.py (pygeodesy.named, 23.02.06)

    testing ups.py (pygeodesy.named, 23.02.06)
    test 775 ups.py:158: L{EasNor2Tuple}C{(easting, northing)}
    test 776 ups.py:222: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 777 ups.py:368: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 778 ups.py:403: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 779 ups.py:484: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utily.py (pygeodesy.named, 23.02.06)
    test 780 utily.py:144: L{Circle4Tuple}C{(radius, height, lat, beta)}

    testing utm.py (pygeodesy.named, 23.02.06)
    test 781 utm.py:368: L{EasNor2Tuple}C{(easting, northing)}
    test 782 utm.py:424: L{LatLonDatum5Tuple}C{(lat, lon, datum, gamma, scale)}
    test 783 utm.py:625: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 784 utm.py:665: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 785 utm.py:759: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmups.py (pygeodesy.named, 23.02.06)
    test 786 utmups.py:89: L{UtmUps5Tuple}C{(zone, hemipole, easting, northing, band)}
    test 787 utmups.py:130: L{UtmUps8Tuple}C{(zone, hemipole, easting, northing, band, datum, gamma, scale)}
    test 788 utmups.py:280: L{UtmUpsLatLon5Tuple}C{(zone, band, hemipole, lat, lon)}

    testing utmupsBase.py (pygeodesy.named, 23.02.06)
    test 789 utmupsBase.py:239: L{EasNor2Tuple}C{(easting, northing)}
    test 790 utmupsBase.py:249: L{EasNor2Tuple}C{(easting, northing)}
    test 791 utmupsBase.py:360: L{EasNor2Tuple}C{(easting, northing)}

    testing vector2d.py (pygeodesy.named, 23.02.06)
    test 792 vector2d.py:133: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 793 vector2d.py:197: L{Circum3Tuple}C{(radius, center, deltas)}
    test 794 vector2d.py:247: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 795 vector2d.py:317: L{Meeus2Tuple}C{(radius, Type)}
    test 796 vector2d.py:479: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 797 vector2d.py:556: L{Soddy4Tuple}C{(radius, center, deltas, outer)}

    testing vector3d.py (pygeodesy.named, 23.02.06)
    test 798 vector3d.py:74: L{Circin6Tuple}C{(radius, center, deltas, cA, cB, cC)}
    test 799 vector3d.py:108: L{Circum3Tuple}C{(radius, center, deltas)}
    test 800 vector3d.py:134: L{Circum4Tuple}C{(radius, center, rank, residuals)}
    test 801 vector3d.py:181: L{Meeus2Tuple}C{(radius, Type)}
    test 802 vector3d.py:227: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 803 vector3d.py:263: L{Radii11Tuple}C{(rA, rB, rC, cR, rIn, riS, roS, a, b, c, s)}
    test 804 vector3d.py:290: L{Soddy4Tuple}C{(radius, center, deltas, outer)}
    test 805 vector3d.py:505: L{Intersection3Tuple}C{(point, outside1, outside2)}
    test 806 vector3d.py:732: L{NearestOn6Tuple}C{(closest, distance, fi, j, start, end)}
    test 807 vector3d.py:804: L{Vector3Tuple}C{(x, y, z)}
    test 808 vector3d.py:828: L{Vector3Tuple}C{(x, y, z)}
    test 809 vector3d.py:863: L{Vector2Tuple}C{(x, y)}

    testing vector3dBase.py (pygeodesy.named, 23.02.06)
    test 810 vector3dBase.py:852: L{PhiLam2Tuple}C{(phi, lam)}
    test 811 vector3dBase.py:860: L{LatLon2Tuple}C{(lat, lon)}
    test 812 vector3dBase.py:926: L{Vector3Tuple}C{(x, y, z)}

    testing webmercator.py (pygeodesy.named, 23.02.06)
    test 813 webmercator.py:95: L{LatLon2Tuple}C{(lat, lon)}
    test 814 webmercator.py:106: L{LatLon2Tuple}C{(lat, lon)}
    test 815 webmercator.py:152: L{PhiLam2Tuple}C{(phi, lam)}
    test 816 webmercator.py:167: L{LatLon2Tuple}C{(lat, lon)}
    test 817 webmercator.py:279: L{EasNorRadius3Tuple}C{(easting, northing, radius)}
    test 818 webmercator.py:320: L{EasNorRadius3Tuple}C{(easting, northing, radius)}

    testing wgrs.py (pygeodesy.named, 23.02.06)
    test 819 wgrs.py:220: L{LatLon3Tuple}C{(lat, lon, height)}
    test 820 wgrs.py:240: L{LatLonPrec3Tuple}C{(lat, lon, precision)}
    test 821 wgrs.py:293: L{LatLonPrec5Tuple}C{(lat, lon, precision, height, radius)}

    testing xtend (pygeodesy.namedTuples, 23.04.03)
    test 822 LatLon2Tuple(lat=0, lon=1): (0, 1, 2)
    test 823 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 824 LatLon2Tuple(lat=0, lon=1): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 825 LatLon2Tuple(lat=0, lon=1): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 826 LatLon3Tuple(lat=0, lon=1, height=2): (0, 1, 2, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 827 LatLon3Tuple(lat=0, lon=1, height=2): <class 'pygeodesy.namedTuples.LatLon4Tuple'>
    test 828 PhiLam2Tuple(phi=0, lam=1): (0, 1, 2)
    test 829 PhiLam2Tuple(phi=0, lam=1): <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 830 Vector3Tuple(x=0, y=1, z=2): (0, 1, 2, 4)
    test 831 Vector3Tuple(x=0, y=1, z=2): <class 'pygeodesy.namedTuples.Vector4Tuple'>

    testing bases (pygeodesy.named, 23.02.06)
    test 832 nd.dict: test(1=1, 2=2)
    test 833 nd.name: test
    test 834 nd.dict: test(1=1, 2=2)
    test 835 nd.name: test
    test 836 nd.kwds: test(one=1, two=2)
    test 837 nd.name: test
    test 838 nd.dict: test(1=1, 2=2)
    test 839 nd.name: test
    test 840 nd.list: test(1=1, 2=2)
    test 841 nd.name: test
    test 842 nd.updated: test(1=1, 2=2, name='kwds')
    test 843 nd.name: test

    testing coverage (pygeodesy.named, 23.02.06)
    test 844 nd.name: name
    test 845 nd.named: name
    test 846 nd.named: Neighbors8Dict
    test 847 nd.name: test
    test 848 nd.test: test
    test 849 nd.test: None
    test 850 nd.classnaming: False
    test 851 nd.classname: Neighbors8Dict
    test 852 nd.named2: Neighbors8Dict
    test 853 nd.classnaming: True
    test 854 nd.classname: geohash.Neighbors8Dict
    test 855 nd.named2: geohash.Neighbors8Dict 'test'
    test 856 classnaming: False
    test 857 classnaming: True

    testing unregister (pygeodesy.named, 23.02.06)
# lazily imported pygeodesy.Conics from .lcc by testNamed.py line 183
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testNamed.py line 183
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testNamed.py line 183
# lazily imported pygeodesy.RefFrames from .trf by testNamed.py line 183
# lazily imported pygeodesy.Transforms from .datums by testNamed.py line 183
    test 858 Conics: 1
    test 859 Conics: 8
    test 860 Conics.Be08Lb.unregister: None
    test 861 Conics.Be72Lb.unregister: None
    test 862 Conics.Fr93Lb.unregister: None
    test 863 Conics.MaNLb.unregister: None
    test 864 Conics.MxLb.unregister: None
    test 865 Conics.PyT_Lb.unregister: None
    test 866 Conics.USA_Lb.unregister: None
    test 867 Conics.WRF_Lb.unregister: None
    test 868 Conics: 0

    test 869 Datums: 6
    test 870 Datums: 18
    test 871 Datums.unregister(BD72): None
    test 872 Datums.unregister(DHDN): None
    test 873 Datums.unregister(ED50): None
    test 874 Datums.unregister(GDA2020): None
    test 875 Datums.unregister(GRS80): None
    test 876 Datums.unregister(Irl1975): None
    test 877 Datums.unregister(Krassovski1940): None
    test 878 Datums.unregister(Krassowsky1940): None
    test 879 Datums.unregister(MGI): None
    test 880 Datums.unregister(NAD27): None
    test 881 Datums.unregister(NAD83): None
    test 882 Datums.unregister(NTF): None
    test 883 Datums.unregister(OSGB36): None
    test 884 Datums.unregister(Potsdam): None
    test 885 Datums.unregister(Sphere): None
    test 886 Datums.unregister(TokyoJapan): None
    test 887 Datums.unregister(WGS72): None
    test 888 Datums.unregister(WGS84): None
    test 889 Datums: 0

    test 890 RefFrames: 0
    test 891 RefFrames: 15
    test 892 RefFrames.ETRF2000.unregister: None
    test 893 RefFrames.GDA2020.unregister: None
    test 894 RefFrames.GDA94.unregister: None
    test 895 RefFrames.ITRF2000.unregister: None
    test 896 RefFrames.ITRF2005.unregister: None
    test 897 RefFrames.ITRF2008.unregister: None
    test 898 RefFrames.ITRF2014.unregister: None
    test 899 RefFrames.ITRF90.unregister: None
    test 900 RefFrames.ITRF91.unregister: None
    test 901 RefFrames.ITRF93.unregister: None
    test 902 RefFrames.NAD83.unregister: None
    test 903 RefFrames.WGS84.unregister: None
    test 904 RefFrames.WGS84g1150.unregister: None
    test 905 RefFrames.WGS84g1674.unregister: None
    test 906 RefFrames.WGS84g1762.unregister: None
    test 907 RefFrames: 0

    test 908 Ellipsoids: 12
    test 909 Ellipsoids: 48
    test 910 Ellipsoids.Airy1830.unregister: None
    test 911 Ellipsoids.AiryModified.unregister: None
    test 912 Ellipsoids.ATS1977.unregister: None
    test 913 Ellipsoids.Australia1966.unregister: None
    test 914 Ellipsoids.Bessel1841.unregister: None
    test 915 Ellipsoids.BesselModified.unregister: None
    test 916 Ellipsoids.CGCS2000.unregister: None
    test 917 Ellipsoids.Clarke1866.unregister: None
    test 918 Ellipsoids.Clarke1880.unregister: None
    test 919 Ellipsoids.Clarke1880IGN.unregister: None
    test 920 Ellipsoids.Clarke1880Mod.unregister: None
    test 921 Ellipsoids.CPM1799.unregister: None
    test 922 Ellipsoids.Delambre1810.unregister: None
    test 923 Ellipsoids.Engelis1985.unregister: None
    test 924 Ellipsoids.Everest1969.unregister: None
    test 925 Ellipsoids.Everest1975.unregister: None
    test 926 Ellipsoids.Fisher1968.unregister: None
    test 927 Ellipsoids.GEM10C.unregister: None
    test 928 Ellipsoids.GPES.unregister: None
    test 929 Ellipsoids.GRS67.unregister: None
    test 930 Ellipsoids.GRS80.unregister: None
    test 931 Ellipsoids.Helmert1906.unregister: None
    test 932 Ellipsoids.IAU76.unregister: None
    test 933 Ellipsoids.IERS1989.unregister: None
    test 934 Ellipsoids.IERS1992TOPEX.unregister: None
    test 935 Ellipsoids.IERS2003.unregister: None
    test 936 Ellipsoids.Intl1924.unregister: None
    test 937 Ellipsoids.Intl1967.unregister: None
    test 938 Ellipsoids.Krassovski1940.unregister: None
    test 939 Ellipsoids.Krassowsky1940.unregister: None
    test 940 Ellipsoids.Maupertuis1738.unregister: None
    test 941 Ellipsoids.Mercury1960.unregister: None
    test 942 Ellipsoids.Mercury1968Mod.unregister: None
    test 943 Ellipsoids.NWL1965.unregister: None
    test 944 Ellipsoids.OSU86F.unregister: None
    test 945 Ellipsoids.OSU91A.unregister: None
    test 946 Ellipsoids.Plessis1817.unregister: None
    test 947 Ellipsoids.PZ90.unregister: None
    test 948 Ellipsoids.SGS85.unregister: None
    test 949 Ellipsoids.SoAmerican1969.unregister: None
    test 950 Ellipsoids.Sphere.unregister: None
    test 951 Ellipsoids.SphereAuthalic.unregister: None
    test 952 Ellipsoids.SpherePopular.unregister: None
    test 953 Ellipsoids.Struve1860.unregister: None
    test 954 Ellipsoids.WGS60.unregister: None
    test 955 Ellipsoids.WGS66.unregister: None
    test 956 Ellipsoids.WGS72.unregister: None
    test 957 Ellipsoids.WGS84.unregister: None
    test 958 Ellipsoids: 0

    test 959 Transforms: 15
    test 960 Transforms: 18
    test 961 Transforms.BD72.unregister: None
    test 962 Transforms.Bessel1841.unregister: None
    test 963 Transforms.Clarke1866.unregister: None
    test 964 Transforms.DHDN.unregister: None
    test 965 Transforms.ED50.unregister: None
    test 966 Transforms.Identity.unregister: None
    test 967 Transforms.Irl1965.unregister: None
    test 968 Transforms.Irl1975.unregister: None
    test 969 Transforms.Krassovski1940.unregister: None
    test 970 Transforms.Krassowsky1940.unregister: None
    test 971 Transforms.MGI.unregister: None
    test 972 Transforms.NAD27.unregister: None
    test 973 Transforms.NAD83.unregister: None
    test 974 Transforms.NTF.unregister: None
    test 975 Transforms.OSGB36.unregister: None
    test 976 Transforms.TokyoJapan.unregister: None
    test 977 Transforms.WGS72.unregister: None
    test 978 Transforms.WGS84.unregister: None
    test 979 Transforms: 0

    test 980 nameof: KsOrder

    6 of 980 testNamed.py tests (0.6%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 68.497 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testNamedTuples.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.FIx from .units by testNamedTuples.py line 10

    testing testNamedTuples.py 23.03.27 isLazy=3
    test 1 pygeodesy.albers: Albers7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, gamma=0.5, scale=0.5, datum=0.5)
    test 2 pygeodesy.albers: Albers7Tuple(x=Meter, y=Meter, lat=Lat, lon=Lon, gamma=Bearing, scale=_Pass, datum=_Pass)
    test 3 pygeodesy.albers.Albers7Tuple.x: 0.5
    test 4 pygeodesy.albers.Albers7Tuple.y: 0.5
    test 5 pygeodesy.albers.Albers7Tuple.lat: 0.5
    test 6 pygeodesy.albers.Albers7Tuple.lon: 0.5
    test 7 pygeodesy.albers.Albers7Tuple.gamma: 0.5
    test 8 pygeodesy.albers.Albers7Tuple.scale: 0.5
    test 9 pygeodesy.albers.Albers7Tuple.datum: 0.5
    test 10 pygeodesy.albers.Albers7Tuple._validated: True
    test 11 pygeodesy.albers.Albers7Tuple._validated: True
# lazily imported pygeodesy.azimuthal by bases.py line 213
    test 12 pygeodesy.azimuthal: Azimuthal7Tuple(x=0.5, y=0.5, lat=0.5, lon=0.5, azimuth=0.5, scale=0.5, datum=0.5)
    test 13 pygeodesy.azimuthal: Azimuthal7Tuple(x=Easting, y=Northing, lat=Lat_, lon=Lon_, azimuth=Bearing, scale=Scalar, datum=_Pass)
    test 14 pygeodesy.azimuthal.Azimuthal7Tuple.x: 0.5
    test 15 pygeodesy.azimuthal.Azimuthal7Tuple.y: 0.5
    test 16 pygeodesy.azimuthal.Azimuthal7Tuple.lat: 0.5
    test 17 pygeodesy.azimuthal.Azimuthal7Tuple.lon: 0.5
    test 18 pygeodesy.azimuthal.Azimuthal7Tuple.azimuth: 0.5
    test 19 pygeodesy.azimuthal.Azimuthal7Tuple.scale: 0.5
    test 20 pygeodesy.azimuthal.Azimuthal7Tuple.datum: 0.5
    test 21 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
    test 22 pygeodesy.azimuthal.Azimuthal7Tuple._validated: True
# lazily imported pygeodesy.booleans by bases.py line 213
# lazily imported pygeodesy.clipy by bases.py line 213
    test 23 pygeodesy.clipy: ClipCS4Tuple(start=0.5, end=0.5, i=0, j=0)
    test 24 pygeodesy.clipy: ClipCS4Tuple(start=_Pass, end=_Pass, i=Number_, j=Number_)
    test 25 pygeodesy.clipy.ClipCS4Tuple.start: 0.5
    test 26 pygeodesy.clipy.ClipCS4Tuple.end: 0.5
    test 27 pygeodesy.clipy.ClipCS4Tuple.i: 0.5
    test 28 pygeodesy.clipy.ClipCS4Tuple.j: 0.5
    test 29 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 30 pygeodesy.clipy.ClipCS4Tuple._validated: True
    test 31 pygeodesy.clipy: ClipFHP4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 32 pygeodesy.clipy: ClipFHP4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 33 pygeodesy.clipy.ClipFHP4Tuple.lat: 0.5
    test 34 pygeodesy.clipy.ClipFHP4Tuple.lon: 0.5
    test 35 pygeodesy.clipy.ClipFHP4Tuple.height: 0.5
    test 36 pygeodesy.clipy.ClipFHP4Tuple.clipid: 0.5
    test 37 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 38 pygeodesy.clipy.ClipFHP4Tuple._validated: True
    test 39 pygeodesy.clipy: ClipGH4Tuple(lat=0.5, lon=0.5, height=0.5, clipid=0)
    test 40 pygeodesy.clipy: ClipGH4Tuple(lat=Lat, lon=Lon, height=_Pass, clipid=Number_)
    test 41 pygeodesy.clipy.ClipGH4Tuple.lat: 0.5
    test 42 pygeodesy.clipy.ClipGH4Tuple.lon: 0.5
    test 43 pygeodesy.clipy.ClipGH4Tuple.height: 0.5
    test 44 pygeodesy.clipy.ClipGH4Tuple.clipid: 0.5
    test 45 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 46 pygeodesy.clipy.ClipGH4Tuple._validated: True
    test 47 pygeodesy.clipy: ClipLB6Tuple(start=0.5, end=0.5, i=0, fi=0.5, fj=0.5, j=0)
    test 48 pygeodesy.clipy: ClipLB6Tuple(start=_Pass, end=_Pass, i=Number_, fi=_Pass, fj=_Pass, j=Number_)
    test 49 pygeodesy.clipy.ClipLB6Tuple.start: 0.5
    test 50 pygeodesy.clipy.ClipLB6Tuple.end: 0.5
    test 51 pygeodesy.clipy.ClipLB6Tuple.i: 0.5
    test 52 pygeodesy.clipy.ClipLB6Tuple.fi: 0.5
    test 53 pygeodesy.clipy.ClipLB6Tuple.fj: 0.5
    test 54 pygeodesy.clipy.ClipLB6Tuple.j: 0.5
    test 55 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 56 pygeodesy.clipy.ClipLB6Tuple._validated: True
    test 57 pygeodesy.clipy: ClipSH3Tuple(start=0.5, end=0.5, original=True)
    test 58 pygeodesy.clipy: ClipSH3Tuple(start=_Pass, end=_Pass, original=Bool)
    test 59 pygeodesy.clipy.ClipSH3Tuple.start: 0.5
    test 60 pygeodesy.clipy.ClipSH3Tuple.end: 0.5
    test 61 pygeodesy.clipy.ClipSH3Tuple.original: 0.5
    test 62 pygeodesy.clipy.ClipSH3Tuple._validated: True
    test 63 pygeodesy.clipy.ClipSH3Tuple._validated: True
# lazily imported pygeodesy.css by bases.py line 213
    test 64 pygeodesy.css: EasNorAziRk4Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5)
    test 65 pygeodesy.css: EasNorAziRk4Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar)
    test 66 pygeodesy.css.EasNorAziRk4Tuple.easting: 0.5
    test 67 pygeodesy.css.EasNorAziRk4Tuple.northing: 0.5
    test 68 pygeodesy.css.EasNorAziRk4Tuple.azimuth: 0.5
    test 69 pygeodesy.css.EasNorAziRk4Tuple.reciprocal: 0.5
    test 70 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 71 pygeodesy.css.EasNorAziRk4Tuple._validated: True
    test 72 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=0.5, northing=0.5, azimuth=0.5, reciprocal=0.5, equatorarc=0.5, equatorazimuth=0.5)
    test 73 pygeodesy.css: EasNorAziRkEqu6Tuple(easting=Easting, northing=Northing, azimuth=Bearing, reciprocal=Scalar, equatorarc=Degrees, equatorazimuth=Bearing)
    test 74 pygeodesy.css.EasNorAziRkEqu6Tuple.easting: 0.5
    test 75 pygeodesy.css.EasNorAziRkEqu6Tuple.northing: 0.5
    test 76 pygeodesy.css.EasNorAziRkEqu6Tuple.azimuth: 0.5
    test 77 pygeodesy.css.EasNorAziRkEqu6Tuple.reciprocal: 0.5
    test 78 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorarc: 0.5
    test 79 pygeodesy.css.EasNorAziRkEqu6Tuple.equatorazimuth: 0.5
    test 80 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 81 pygeodesy.css.EasNorAziRkEqu6Tuple._validated: True
    test 82 pygeodesy.css: LatLonAziRk4Tuple(lat=0.5, lon=0.5, azimuth=0.5, reciprocal=0.5)
    test 83 pygeodesy.css: LatLonAziRk4Tuple(lat=Lat_, lon=Lon_, azimuth=Bearing, reciprocal=Scalar)
    test 84 pygeodesy.css.LatLonAziRk4Tuple.lat: 0.5
    test 85 pygeodesy.css.LatLonAziRk4Tuple.lon: 0.5
    test 86 pygeodesy.css.LatLonAziRk4Tuple.azimuth: 0.5
    test 87 pygeodesy.css.LatLonAziRk4Tuple.reciprocal: 0.5
    test 88 pygeodesy.css.LatLonAziRk4Tuple._validated: True
    test 89 pygeodesy.css.LatLonAziRk4Tuple._validated: True
# lazily imported pygeodesy.ecef by bases.py line 213
    test 90 pygeodesy.ecef: Ecef9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, C=0, M=0.5, datum=0.5)
    test 91 pygeodesy.ecef: Ecef9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, C=Int, M=_Pass, datum=_Pass)
    test 92 pygeodesy.ecef.Ecef9Tuple.x: 0.5
    test 93 pygeodesy.ecef.Ecef9Tuple.y: 0.5
    test 94 pygeodesy.ecef.Ecef9Tuple.z: 0.5
    test 95 pygeodesy.ecef.Ecef9Tuple.lat: 0.5
    test 96 pygeodesy.ecef.Ecef9Tuple.lon: 0.5
    test 97 pygeodesy.ecef.Ecef9Tuple.height: 0.5
    test 98 pygeodesy.ecef.Ecef9Tuple.C: 0.5
    test 99 pygeodesy.ecef.Ecef9Tuple.M: 0.5
    test 100 pygeodesy.ecef.Ecef9Tuple.datum: 0.5
    test 101 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 102 pygeodesy.ecef.Ecef9Tuple._validated: True
    test 103 pygeodesy.ecef: EcefMatrix(_0_0_=0.5, _0_1_=0.5, _0_2_=0.5, _1_0_=0.5, _1_1_=0.5, _1_2_=0.5, _2_0_=0.5, _2_1_=0.5, _2_2_=0.5)
    test 104 pygeodesy.ecef: EcefMatrix(_0_0_=Scalar, _0_1_=Scalar, _0_2_=Scalar, _1_0_=Scalar, _1_1_=Scalar, _1_2_=Scalar, _2_0_=Scalar, _2_1_=Scalar, _2_2_=Scalar)
    test 105 pygeodesy.ecef.EcefMatrix._0_0_: 0.5
    test 106 pygeodesy.ecef.EcefMatrix._0_1_: 0.5
    test 107 pygeodesy.ecef.EcefMatrix._0_2_: 0.5
    test 108 pygeodesy.ecef.EcefMatrix._1_0_: 0.5
    test 109 pygeodesy.ecef.EcefMatrix._1_1_: 0.5
    test 110 pygeodesy.ecef.EcefMatrix._1_2_: 0.5
    test 111 pygeodesy.ecef.EcefMatrix._2_0_: 0.5
    test 112 pygeodesy.ecef.EcefMatrix._2_1_: 0.5
    test 113 pygeodesy.ecef.EcefMatrix._2_2_: 0.5
    test 114 pygeodesy.ecef.EcefMatrix._validated: True
    test 115 pygeodesy.ecef.EcefMatrix._validated: True
# lazily imported pygeodesy.elevations by bases.py line 213
    test 116 pygeodesy.elevations: Elevation2Tuple(elevation=0.5, data_source='0.5')
    test 117 pygeodesy.elevations: Elevation2Tuple(elevation=Meter, data_source=Str)
    test 118 pygeodesy.elevations.Elevation2Tuple.elevation: 0.5
    test 119 pygeodesy.elevations.Elevation2Tuple.data_source: 0.5
    test 120 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 121 pygeodesy.elevations.Elevation2Tuple._validated: True
    test 122 pygeodesy.elevations: GeoidHeight2Tuple(height=0.5, model_name='0.5')
    test 123 pygeodesy.elevations: GeoidHeight2Tuple(height=Meter, model_name=Str)
    test 124 pygeodesy.elevations.GeoidHeight2Tuple.height: 0.5
    test 125 pygeodesy.elevations.GeoidHeight2Tuple.model_name: 0.5
    test 126 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
    test 127 pygeodesy.elevations.GeoidHeight2Tuple._validated: True
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 213
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 213
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 213
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 213
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 213
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 213
    test 128 pygeodesy.ellipsoids: Circle4Tuple(radius=0.5, height=0.5, lat=0.5, beta=0.5)
    test 129 pygeodesy.ellipsoids: Circle4Tuple(radius=Radius, height=Height, lat=Lat, beta=Lat)
    test 130 pygeodesy.ellipsoids.Circle4Tuple.radius: 0.5
    test 131 pygeodesy.ellipsoids.Circle4Tuple.height: 0.5
    test 132 pygeodesy.ellipsoids.Circle4Tuple.lat: 0.5
    test 133 pygeodesy.ellipsoids.Circle4Tuple.beta: 0.5
    test 134 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 135 pygeodesy.ellipsoids.Circle4Tuple._validated: True
    test 136 pygeodesy.ellipsoids: Curvature2Tuple(meridional=0.5, prime_vertical=0.5)
    test 137 pygeodesy.ellipsoids: Curvature2Tuple(meridional=Meter, prime_vertical=Meter)
    test 138 pygeodesy.ellipsoids.Curvature2Tuple.meridional: 0.5
    test 139 pygeodesy.ellipsoids.Curvature2Tuple.prime_vertical: 0.5
    test 140 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 141 pygeodesy.ellipsoids.Curvature2Tuple._validated: True
    test 142 pygeodesy.ellipsoids: a_f2Tuple(a=0.5, f=0.5)
    test 143 pygeodesy.ellipsoids: a_f2Tuple(a=_Pass, f=_Pass)
    test 144 pygeodesy.ellipsoids.a_f2Tuple.a: 0.5
    test 145 pygeodesy.ellipsoids.a_f2Tuple.f: 0.5
    test 146 pygeodesy.ellipsoids.a_f2Tuple._validated: True
    test 147 pygeodesy.ellipsoids.a_f2Tuple._validated: True
# lazily imported pygeodesy.elliptic by bases.py line 213
    test 148 pygeodesy.elliptic: Elliptic3Tuple(sn=0.5, cn=0.5, dn=0.5)
    test 149 pygeodesy.elliptic: Elliptic3Tuple(sn=Scalar, cn=Scalar, dn=Scalar)
    test 150 pygeodesy.elliptic.Elliptic3Tuple.sn: 0.5
    test 151 pygeodesy.elliptic.Elliptic3Tuple.cn: 0.5
    test 152 pygeodesy.elliptic.Elliptic3Tuple.dn: 0.5
    test 153 pygeodesy.elliptic.Elliptic3Tuple._validated: True
    test 154 pygeodesy.elliptic.Elliptic3Tuple._validated: True
# lazily imported pygeodesy.epsg by bases.py line 213
# lazily imported pygeodesy.etm by bases.py line 213
    test 155 pygeodesy.formy: Radical2Tuple(ratio=0.5, xline=0.5)
    test 156 pygeodesy.formy: Radical2Tuple(ratio=Scalar, xline=Scalar)
    test 157 pygeodesy.formy.Radical2Tuple.ratio: 0.5
    test 158 pygeodesy.formy.Radical2Tuple.xline: 0.5
    test 159 pygeodesy.formy.Radical2Tuple._validated: True
    test 160 pygeodesy.formy.Radical2Tuple._validated: True
    test 161 pygeodesy.frechet: Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0, n=0, units='test')
    test 162 pygeodesy.frechet: Frechet6Tuple(fd=_Pass, fi1=FIx, fi2=FIx, r=Number_, n=Number_, units=_Pass)
    test 163 pygeodesy.frechet.Frechet6Tuple.fd: 0.5
    test 164 pygeodesy.frechet.Frechet6Tuple.fi1: 0.5
    test 165 pygeodesy.frechet.Frechet6Tuple.fi2: 0.5
    test 166 pygeodesy.frechet.Frechet6Tuple.r: 0.5
    test 167 pygeodesy.frechet.Frechet6Tuple.n: 0.5
    test 168 pygeodesy.frechet.Frechet6Tuple.units: <bound method _NamedTuple.units of Frechet6Tuple(fd=0.5, fi1=0.5, fi2=0.5, r=0.5, n=0.5, units='test')>
    test 169 pygeodesy.frechet.Frechet6Tuple._validated: True
    test 170 pygeodesy.frechet.Frechet6Tuple._validated: True
# lazily imported pygeodesy.fstats by bases.py line 213
    test 171 pygeodesy.fsums: Fsum2Tuple(fsum=0.5, residual=0.5)
    test 172 pygeodesy.fsums: Fsum2Tuple(fsum=_Float_Int, residual=_Float_Int)
    test 173 pygeodesy.fsums.Fsum2Tuple.fsum: 0.5
    test 174 pygeodesy.fsums.Fsum2Tuple.residual: 0.5
    test 175 pygeodesy.fsums.Fsum2Tuple._validated: True
    test 176 pygeodesy.fsums.Fsum2Tuple._validated: True
# lazily imported pygeodesy.gars by bases.py line 213
# lazily imported pygeodesy.geodesicw by bases.py line 213
# lazily imported pygeodesy.geodsolve by bases.py line 213
    test 177 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=0.5, lon1=0.5, azi1=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, a12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 178 pygeodesy.geodsolve: GeodSolve12Tuple(lat1=_Lat, lon1=_Lon, azi1=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, a12=Degrees, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 179 pygeodesy.geodsolve.GeodSolve12Tuple.lat1: 0.5
    test 180 pygeodesy.geodsolve.GeodSolve12Tuple.lon1: 0.5
    test 181 pygeodesy.geodsolve.GeodSolve12Tuple.azi1: 0.5
    test 182 pygeodesy.geodsolve.GeodSolve12Tuple.lat2: 0.5
    test 183 pygeodesy.geodsolve.GeodSolve12Tuple.lon2: 0.5
    test 184 pygeodesy.geodsolve.GeodSolve12Tuple.azi2: 0.5
    test 185 pygeodesy.geodsolve.GeodSolve12Tuple.s12: 0.5
    test 186 pygeodesy.geodsolve.GeodSolve12Tuple.a12: 0.5
    test 187 pygeodesy.geodsolve.GeodSolve12Tuple.m12: 0.5
    test 188 pygeodesy.geodsolve.GeodSolve12Tuple.M12: 0.5
    test 189 pygeodesy.geodsolve.GeodSolve12Tuple.M21: 0.5
    test 190 pygeodesy.geodsolve.GeodSolve12Tuple.S12: 0.5
    test 191 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
    test 192 pygeodesy.geodsolve.GeodSolve12Tuple._validated: True
# lazily imported pygeodesy.geohash by bases.py line 213
    test 193 pygeodesy.geohash: Resolutions2Tuple(res1=0.5, res2=0.5)
    test 194 pygeodesy.geohash: Resolutions2Tuple(res1=Degrees_, res2=Degrees_)
    test 195 pygeodesy.geohash.Resolutions2Tuple.res1: 0.5
    test 196 pygeodesy.geohash.Resolutions2Tuple.res2: 0.5
    test 197 pygeodesy.geohash.Resolutions2Tuple._validated: True
    test 198 pygeodesy.geohash.Resolutions2Tuple._validated: True
# lazily imported pygeodesy.geoids by bases.py line 213
    test 199 pygeodesy.geoids: GeoidHeight5Tuple(lat=0.5, lon=0.5, egm84=0.5, egm96=0.5, egm2008=0.5)
    test 200 pygeodesy.geoids: GeoidHeight5Tuple(lat=Lat, lon=Lon, egm84=Height, egm96=Height, egm2008=Height)
    test 201 pygeodesy.geoids.GeoidHeight5Tuple.lat: 0.5
    test 202 pygeodesy.geoids.GeoidHeight5Tuple.lon: 0.5
    test 203 pygeodesy.geoids.GeoidHeight5Tuple.egm84: 0.5
    test 204 pygeodesy.geoids.GeoidHeight5Tuple.egm96: 0.5
    test 205 pygeodesy.geoids.GeoidHeight5Tuple.egm2008: 0.5
    test 206 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 207 pygeodesy.geoids.GeoidHeight5Tuple._validated: True
    test 208 pygeodesy.hausdorff: Hausdorff6Tuple(hd=0.5, i=0, j=0, mn=0, md=0.5, units='test')
    test 209 pygeodesy.hausdorff: Hausdorff6Tuple(hd=_Pass, i=Number_, j=Number_, mn=Number_, md=_Pass, units=_Pass)
    test 210 pygeodesy.hausdorff.Hausdorff6Tuple.hd: 0.5
    test 211 pygeodesy.hausdorff.Hausdorff6Tuple.i: 0.5
    test 212 pygeodesy.hausdorff.Hausdorff6Tuple.j: 0.5
    test 213 pygeodesy.hausdorff.Hausdorff6Tuple.mn: 0.5
    test 214 pygeodesy.hausdorff.Hausdorff6Tuple.md: 0.5
    test 215 pygeodesy.hausdorff.Hausdorff6Tuple.units: <bound method _NamedTuple.units of Hausdorff6Tuple(hd=0.5, i=0.5, j=0.5, mn=0.5, md=0.5, units='test')>
    test 216 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 217 pygeodesy.hausdorff.Hausdorff6Tuple._validated: True
    test 218 pygeodesy.karney: Area3Tuple(number=0, perimeter=0.5, area=0.5)
    test 219 pygeodesy.karney: Area3Tuple(number=Number_, perimeter=Meter, area=Meter2)
    test 220 pygeodesy.karney.Area3Tuple.number: 0.5
    test 221 pygeodesy.karney.Area3Tuple.perimeter: 0.5
    test 222 pygeodesy.karney.Area3Tuple.area: 0.5
    test 223 pygeodesy.karney.Area3Tuple._validated: True
    test 224 pygeodesy.karney.Area3Tuple._validated: True
    test 225 pygeodesy.karney: Direct9Tuple(a12=0.5, lat2=0.5, lon2=0.5, azi2=0.5, s12=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 226 pygeodesy.karney: Direct9Tuple(a12=Bearing, lat2=_Lat, lon2=_Lon, azi2=Bearing, s12=Meter, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 227 pygeodesy.karney.Direct9Tuple.a12: 0.5
    test 228 pygeodesy.karney.Direct9Tuple.lat2: 0.5
    test 229 pygeodesy.karney.Direct9Tuple.lon2: 0.5
    test 230 pygeodesy.karney.Direct9Tuple.azi2: 0.5
    test 231 pygeodesy.karney.Direct9Tuple.s12: 0.5
    test 232 pygeodesy.karney.Direct9Tuple.m12: 0.5
    test 233 pygeodesy.karney.Direct9Tuple.M12: 0.5
    test 234 pygeodesy.karney.Direct9Tuple.M21: 0.5
    test 235 pygeodesy.karney.Direct9Tuple.S12: 0.5
    test 236 pygeodesy.karney.Direct9Tuple._validated: True
    test 237 pygeodesy.karney.Direct9Tuple._validated: True
    test 238 pygeodesy.karney: Inverse10Tuple(a12=0.5, s12=0.5, salp1=0.5, calp1=0.5, salp2=0.5, calp2=0.5, m12=0.5, M12=0.5, M21=0.5, S12=0.5)
    test 239 pygeodesy.karney: Inverse10Tuple(a12=Bearing, s12=Meter, salp1=_Pass, calp1=_Pass, salp2=_Pass, calp2=_Pass, m12=_Pass, M12=_Pass, M21=_Pass, S12=Meter2)
    test 240 pygeodesy.karney.Inverse10Tuple.a12: 0.5
    test 241 pygeodesy.karney.Inverse10Tuple.s12: 0.5
    test 242 pygeodesy.karney.Inverse10Tuple.salp1: 0.5
    test 243 pygeodesy.karney.Inverse10Tuple.calp1: 0.5
    test 244 pygeodesy.karney.Inverse10Tuple.salp2: 0.5
    test 245 pygeodesy.karney.Inverse10Tuple.calp2: 0.5
    test 246 pygeodesy.karney.Inverse10Tuple.m12: 0.5
    test 247 pygeodesy.karney.Inverse10Tuple.M12: 0.5
    test 248 pygeodesy.karney.Inverse10Tuple.M21: 0.5
    test 249 pygeodesy.karney.Inverse10Tuple.S12: 0.5
    test 250 pygeodesy.karney.Inverse10Tuple._validated: True
    test 251 pygeodesy.karney.Inverse10Tuple._validated: True
# lazily imported pygeodesy.ktm by bases.py line 213
# lazily imported pygeodesy.lcc by bases.py line 213
# lazily imported pygeodesy.ltp by bases.py line 213
    test 252 pygeodesy.ltpTuples: Aer4Tuple(azimuth=0.5, elevation=0.5, slantrange=0.5, ltp=0.5)
    test 253 pygeodesy.ltpTuples: Aer4Tuple(azimuth=Meter, elevation=Meter, slantrange=Meter, ltp=_Pass)
    test 254 pygeodesy.ltpTuples.Aer4Tuple.azimuth: 0.5
    test 255 pygeodesy.ltpTuples.Aer4Tuple.elevation: 0.5
    test 256 pygeodesy.ltpTuples.Aer4Tuple.slantrange: 0.5
    test 257 pygeodesy.ltpTuples.Aer4Tuple.ltp: 0.5
    test 258 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 259 pygeodesy.ltpTuples.Aer4Tuple._validated: True
    test 260 pygeodesy.ltpTuples: Attitude4Tuple(alt=0.5, tilt=0.5, yaw=0.5, roll=0.5)
    test 261 pygeodesy.ltpTuples: Attitude4Tuple(alt=Meter, tilt=Bearing, yaw=Degrees, roll=Degrees)
    test 262 pygeodesy.ltpTuples.Attitude4Tuple.alt: 0.5
    test 263 pygeodesy.ltpTuples.Attitude4Tuple.tilt: 0.5
    test 264 pygeodesy.ltpTuples.Attitude4Tuple.yaw: 0.5
    test 265 pygeodesy.ltpTuples.Attitude4Tuple.roll: 0.5
    test 266 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 267 pygeodesy.ltpTuples.Attitude4Tuple._validated: True
    test 268 pygeodesy.ltpTuples: ChLV9Tuple(Y=0.5, X=0.5, h_=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 269 pygeodesy.ltpTuples: ChLV9Tuple(Y=Meter, X=Meter, h_=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 270 pygeodesy.ltpTuples.ChLV9Tuple.Y: 0.5
    test 271 pygeodesy.ltpTuples.ChLV9Tuple.X: 0.5
    test 272 pygeodesy.ltpTuples.ChLV9Tuple.h_: 0.5
    test 273 pygeodesy.ltpTuples.ChLV9Tuple.lat: 0.5
    test 274 pygeodesy.ltpTuples.ChLV9Tuple.lon: 0.5
    test 275 pygeodesy.ltpTuples.ChLV9Tuple.height: 0.5
    test 276 pygeodesy.ltpTuples.ChLV9Tuple.ltp: 0.5
    test 277 pygeodesy.ltpTuples.ChLV9Tuple.ecef: 0.5
    test 278 pygeodesy.ltpTuples.ChLV9Tuple.M: 0.5
    test 279 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 280 pygeodesy.ltpTuples.ChLV9Tuple._validated: True
    test 281 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=0.5, N_LV95=0.5)
    test 282 pygeodesy.ltpTuples: ChLVEN2Tuple(E_LV95=Meter, N_LV95=Meter)
    test 283 pygeodesy.ltpTuples.ChLVEN2Tuple.E_LV95: 0.5
    test 284 pygeodesy.ltpTuples.ChLVEN2Tuple.N_LV95: 0.5
    test 285 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 286 pygeodesy.ltpTuples.ChLVEN2Tuple._validated: True
    test 287 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=0.5, X=0.5)
    test 288 pygeodesy.ltpTuples: ChLVYX2Tuple(Y=Meter, X=Meter)
    test 289 pygeodesy.ltpTuples.ChLVYX2Tuple.Y: 0.5
    test 290 pygeodesy.ltpTuples.ChLVYX2Tuple.X: 0.5
    test 291 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 292 pygeodesy.ltpTuples.ChLVYX2Tuple._validated: True
    test 293 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=0.5, x_LV03=0.5)
    test 294 pygeodesy.ltpTuples: ChLVyx2Tuple(y_LV03=Meter, x_LV03=Meter)
    test 295 pygeodesy.ltpTuples.ChLVyx2Tuple.y_LV03: 0.5
    test 296 pygeodesy.ltpTuples.ChLVyx2Tuple.x_LV03: 0.5
    test 297 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 298 pygeodesy.ltpTuples.ChLVyx2Tuple._validated: True
    test 299 pygeodesy.ltpTuples: Enu4Tuple(east=0.5, north=0.5, up=0.5, ltp=0.5)
    test 300 pygeodesy.ltpTuples: Enu4Tuple(east=Meter, north=Meter, up=Meter, ltp=_Pass)
    test 301 pygeodesy.ltpTuples.Enu4Tuple.east: 0.5
    test 302 pygeodesy.ltpTuples.Enu4Tuple.north: 0.5
    test 303 pygeodesy.ltpTuples.Enu4Tuple.up: 0.5
    test 304 pygeodesy.ltpTuples.Enu4Tuple.ltp: 0.5
    test 305 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 306 pygeodesy.ltpTuples.Enu4Tuple._validated: True
    test 307 pygeodesy.ltpTuples: Footprint5Tuple(center=0.5, upperleft=0.5, upperight=0.5, loweright=0.5, lowerleft=0.5)
    test 308 pygeodesy.ltpTuples: Footprint5Tuple(center=_Pass, upperleft=_Pass, upperight=_Pass, loweright=_Pass, lowerleft=_Pass)
    test 309 pygeodesy.ltpTuples.Footprint5Tuple.center: 0.5
    test 310 pygeodesy.ltpTuples.Footprint5Tuple.upperleft: 0.5
    test 311 pygeodesy.ltpTuples.Footprint5Tuple.upperight: 0.5
    test 312 pygeodesy.ltpTuples.Footprint5Tuple.loweright: 0.5
    test 313 pygeodesy.ltpTuples.Footprint5Tuple.lowerleft: 0.5
    test 314 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 315 pygeodesy.ltpTuples.Footprint5Tuple._validated: True
    test 316 pygeodesy.ltpTuples: Local9Tuple(x=0.5, y=0.5, z=0.5, lat=0.5, lon=0.5, height=0.5, ltp=0.5, ecef=0.5, M=0.5)
    test 317 pygeodesy.ltpTuples: Local9Tuple(x=Meter, y=Meter, z=Meter, lat=Lat, lon=Lon, height=Height, ltp=_Pass, ecef=_Pass, M=_Pass)
    test 318 pygeodesy.ltpTuples.Local9Tuple.x: 0.5
    test 319 pygeodesy.ltpTuples.Local9Tuple.y: 0.5
    test 320 pygeodesy.ltpTuples.Local9Tuple.z: 0.5
    test 321 pygeodesy.ltpTuples.Local9Tuple.lat: 0.5
    test 322 pygeodesy.ltpTuples.Local9Tuple.lon: 0.5
    test 323 pygeodesy.ltpTuples.Local9Tuple.height: 0.5
    test 324 pygeodesy.ltpTuples.Local9Tuple.ltp: 0.5
    test 325 pygeodesy.ltpTuples.Local9Tuple.ecef: 0.5
    test 326 pygeodesy.ltpTuples.Local9Tuple.M: 0.5
    test 327 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 328 pygeodesy.ltpTuples.Local9Tuple._validated: True
    test 329 pygeodesy.ltpTuples: Ned4Tuple(north=0.5, east=0.5, down=0.5, ltp=0.5)
    test 330 pygeodesy.ltpTuples: Ned4Tuple(north=Meter, east=Meter, down=Meter, ltp=_Pass)
    test 331 pygeodesy.ltpTuples.Ned4Tuple.north: 0.5
    test 332 pygeodesy.ltpTuples.Ned4Tuple.east: 0.5
    test 333 pygeodesy.ltpTuples.Ned4Tuple.down: 0.5
    test 334 pygeodesy.ltpTuples.Ned4Tuple.ltp: 0.5
    test 335 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 336 pygeodesy.ltpTuples.Ned4Tuple._validated: True
    test 337 pygeodesy.ltpTuples: Xyz4Tuple(x=0.5, y=0.5, z=0.5, ltp=0.5)
    test 338 pygeodesy.ltpTuples: Xyz4Tuple(x=Meter, y=Meter, z=Meter, ltp=_Pass)
    test 339 pygeodesy.ltpTuples.Xyz4Tuple.x: 0.5
    test 340 pygeodesy.ltpTuples.Xyz4Tuple.y: 0.5
    test 341 pygeodesy.ltpTuples.Xyz4Tuple.z: 0.5
    test 342 pygeodesy.ltpTuples.Xyz4Tuple.ltp: 0.5
    test 343 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
    test 344 pygeodesy.ltpTuples.Xyz4Tuple._validated: True
# lazily imported pygeodesy.mgrs by bases.py line 213
    test 345 pygeodesy.mgrs: Mgrs4Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5)
    test 346 pygeodesy.mgrs: Mgrs4Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing)
    test 347 pygeodesy.mgrs.Mgrs4Tuple.zone: 0.5
    test 348 pygeodesy.mgrs.Mgrs4Tuple.EN: 0.5
    test 349 pygeodesy.mgrs.Mgrs4Tuple.easting: 0.5
    test 350 pygeodesy.mgrs.Mgrs4Tuple.northing: 0.5
    test 351 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 352 pygeodesy.mgrs.Mgrs4Tuple._validated: True
    test 353 pygeodesy.mgrs: Mgrs6Tuple(zone='0.5', EN='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5)
    test 354 pygeodesy.mgrs: Mgrs6Tuple(zone=Str, EN=Str, easting=Easting, northing=Northing, band=Str, datum=_Pass)
    test 355 pygeodesy.mgrs.Mgrs6Tuple.zone: 0.5
    test 356 pygeodesy.mgrs.Mgrs6Tuple.EN: 0.5
    test 357 pygeodesy.mgrs.Mgrs6Tuple.easting: 0.5
    test 358 pygeodesy.mgrs.Mgrs6Tuple.northing: 0.5
    test 359 pygeodesy.mgrs.Mgrs6Tuple.band: 0.5
    test 360 pygeodesy.mgrs.Mgrs6Tuple.datum: 0.5
    test 361 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 362 pygeodesy.mgrs.Mgrs6Tuple._validated: True
    test 363 pygeodesy.namedTuples: Bearing2Tuple(initial=0.5, final=0.5)
    test 364 pygeodesy.namedTuples: Bearing2Tuple(initial=Bearing, final=Bearing)
    test 365 pygeodesy.namedTuples.Bearing2Tuple.initial: 0.5
    test 366 pygeodesy.namedTuples.Bearing2Tuple.final: 0.5
    test 367 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 368 pygeodesy.namedTuples.Bearing2Tuple._validated: True
    test 369 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=0.5, latlonNE=0.5)
    test 370 pygeodesy.namedTuples: Bounds2Tuple(latlonSW=_Pass, latlonNE=_Pass)
    test 371 pygeodesy.namedTuples.Bounds2Tuple.latlonSW: 0.5
    test 372 pygeodesy.namedTuples.Bounds2Tuple.latlonNE: 0.5
    test 373 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 374 pygeodesy.namedTuples.Bounds2Tuple._validated: True
    test 375 pygeodesy.namedTuples: Bounds4Tuple(latS=0.5, lonW=0.5, latN=0.5, lonE=0.5)
    test 376 pygeodesy.namedTuples: Bounds4Tuple(latS=Lat, lonW=Lon, latN=Lat, lonE=Lon)
    test 377 pygeodesy.namedTuples.Bounds4Tuple.latS: 0.5
    test 378 pygeodesy.namedTuples.Bounds4Tuple.lonW: 0.5
    test 379 pygeodesy.namedTuples.Bounds4Tuple.latN: 0.5
    test 380 pygeodesy.namedTuples.Bounds4Tuple.lonE: 0.5
    test 381 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 382 pygeodesy.namedTuples.Bounds4Tuple._validated: True
    test 383 pygeodesy.namedTuples: Destination2Tuple(destination=0.5, final=0.5)
    test 384 pygeodesy.namedTuples: Destination2Tuple(destination=_Pass, final=Bearing)
    test 385 pygeodesy.namedTuples.Destination2Tuple.destination: 0.5
    test 386 pygeodesy.namedTuples.Destination2Tuple.final: 0.5
    test 387 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 388 pygeodesy.namedTuples.Destination2Tuple._validated: True
    test 389 pygeodesy.namedTuples: Destination3Tuple(lat=0.5, lon=0.5, final=0.5)
    test 390 pygeodesy.namedTuples: Destination3Tuple(lat=Lat, lon=Lon, final=Bearing)
    test 391 pygeodesy.namedTuples.Destination3Tuple.lat: 0.5
    test 392 pygeodesy.namedTuples.Destination3Tuple.lon: 0.5
    test 393 pygeodesy.namedTuples.Destination3Tuple.final: 0.5
    test 394 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 395 pygeodesy.namedTuples.Destination3Tuple._validated: True
    test 396 pygeodesy.namedTuples: Distance2Tuple(distance=0.5, initial=0.5)
    test 397 pygeodesy.namedTuples: Distance2Tuple(distance=Meter, initial=Bearing)
    test 398 pygeodesy.namedTuples.Distance2Tuple.distance: 0.5
    test 399 pygeodesy.namedTuples.Distance2Tuple.initial: 0.5
    test 400 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 401 pygeodesy.namedTuples.Distance2Tuple._validated: True
    test 402 pygeodesy.namedTuples: Distance3Tuple(distance=0.5, initial=0.5, final=0.5)
    test 403 pygeodesy.namedTuples: Distance3Tuple(distance=Meter, initial=Bearing, final=Bearing)
    test 404 pygeodesy.namedTuples.Distance3Tuple.distance: 0.5
    test 405 pygeodesy.namedTuples.Distance3Tuple.initial: 0.5
    test 406 pygeodesy.namedTuples.Distance3Tuple.final: 0.5
    test 407 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 408 pygeodesy.namedTuples.Distance3Tuple._validated: True
    test 409 pygeodesy.namedTuples: Distance4Tuple(distance2=0.5, delta_lat=0.5, delta_lon=0.5, unroll_lon2=0.5)
    test 410 pygeodesy.namedTuples: Distance4Tuple(distance2=Degrees2, delta_lat=Degrees, delta_lon=Degrees, unroll_lon2=Degrees)
    test 411 pygeodesy.namedTuples.Distance4Tuple.distance2: 0.5
    test 412 pygeodesy.namedTuples.Distance4Tuple.delta_lat: 0.5
    test 413 pygeodesy.namedTuples.Distance4Tuple.delta_lon: 0.5
    test 414 pygeodesy.namedTuples.Distance4Tuple.unroll_lon2: 0.5
    test 415 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 416 pygeodesy.namedTuples.Distance4Tuple._validated: True
    test 417 pygeodesy.namedTuples: EasNor2Tuple(easting=0.5, northing=0.5)
    test 418 pygeodesy.namedTuples: EasNor2Tuple(easting=Easting, northing=Northing)
    test 419 pygeodesy.namedTuples.EasNor2Tuple.easting: 0.5
    test 420 pygeodesy.namedTuples.EasNor2Tuple.northing: 0.5
    test 421 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 422 pygeodesy.namedTuples.EasNor2Tuple._validated: True
    test 423 pygeodesy.namedTuples: EasNor3Tuple(easting=0.5, northing=0.5, height=0.5)
    test 424 pygeodesy.namedTuples: EasNor3Tuple(easting=Easting, northing=Northing, height=Height)
    test 425 pygeodesy.namedTuples.EasNor3Tuple.easting: 0.5
    test 426 pygeodesy.namedTuples.EasNor3Tuple.northing: 0.5
    test 427 pygeodesy.namedTuples.EasNor3Tuple.height: 0.5
    test 428 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 429 pygeodesy.namedTuples.EasNor3Tuple._validated: True
    test 430 pygeodesy.namedTuples: Forward4Tuple(easting=0.5, northing=0.5, gamma=0.5, scale=0.5)
    test 431 pygeodesy.namedTuples: Forward4Tuple(easting=Easting, northing=Northing, gamma=Degrees, scale=Scalar)
    test 432 pygeodesy.namedTuples.Forward4Tuple.easting: 0.5
    test 433 pygeodesy.namedTuples.Forward4Tuple.northing: 0.5
    test 434 pygeodesy.namedTuples.Forward4Tuple.gamma: 0.5
    test 435 pygeodesy.namedTuples.Forward4Tuple.scale: 0.5
    test 436 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 437 pygeodesy.namedTuples.Forward4Tuple._validated: True
    test 438 pygeodesy.namedTuples: Intersection3Tuple(point=0.5, outside1=0, outside2=0)
    test 439 pygeodesy.namedTuples: Intersection3Tuple(point=_Pass, outside1=Int, outside2=Int)
    test 440 pygeodesy.namedTuples.Intersection3Tuple.point: 0.5
    test 441 pygeodesy.namedTuples.Intersection3Tuple.outside1: 0.5
    test 442 pygeodesy.namedTuples.Intersection3Tuple.outside2: 0.5
    test 443 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 444 pygeodesy.namedTuples.Intersection3Tuple._validated: True
    test 445 pygeodesy.namedTuples: LatLon2Tuple(lat=0.5, lon=0.5)
    test 446 pygeodesy.namedTuples: LatLon2Tuple(lat=Lat, lon=Lon)
    test 447 pygeodesy.namedTuples.LatLon2Tuple.lat: 0.5
    test 448 pygeodesy.namedTuples.LatLon2Tuple.lon: 0.5
    test 449 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 450 pygeodesy.namedTuples.LatLon2Tuple._validated: True
    test 451 pygeodesy.namedTuples: LatLon3Tuple(lat=0.5, lon=0.5, height=0.5)
    test 452 pygeodesy.namedTuples: LatLon3Tuple(lat=Lat, lon=Lon, height=Height)
    test 453 pygeodesy.namedTuples.LatLon3Tuple.lat: 0.5
    test 454 pygeodesy.namedTuples.LatLon3Tuple.lon: 0.5
    test 455 pygeodesy.namedTuples.LatLon3Tuple.height: 0.5
    test 456 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 457 pygeodesy.namedTuples.LatLon3Tuple._validated: True
    test 458 pygeodesy.namedTuples: LatLon4Tuple(lat=0.5, lon=0.5, height=0.5, datum=0.5)
    test 459 pygeodesy.namedTuples: LatLon4Tuple(lat=Lat, lon=Lon, height=Height, datum=_Pass)
    test 460 pygeodesy.namedTuples.LatLon4Tuple.lat: 0.5
    test 461 pygeodesy.namedTuples.LatLon4Tuple.lon: 0.5
    test 462 pygeodesy.namedTuples.LatLon4Tuple.height: 0.5
    test 463 pygeodesy.namedTuples.LatLon4Tuple.datum: 0.5
    test 464 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 465 pygeodesy.namedTuples.LatLon4Tuple._validated: True
    test 466 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=0.5, lon=0.5, datum=0.5)
    test 467 pygeodesy.namedTuples: LatLonDatum3Tuple(lat=Lat, lon=Lon, datum=_Pass)
    test 468 pygeodesy.namedTuples.LatLonDatum3Tuple.lat: 0.5
    test 469 pygeodesy.namedTuples.LatLonDatum3Tuple.lon: 0.5
    test 470 pygeodesy.namedTuples.LatLonDatum3Tuple.datum: 0.5
    test 471 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 472 pygeodesy.namedTuples.LatLonDatum3Tuple._validated: True
    test 473 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=0.5, lon=0.5, datum=0.5, gamma=0.5, scale=0.5)
    test 474 pygeodesy.namedTuples: LatLonDatum5Tuple(lat=Lat, lon=Lon, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 475 pygeodesy.namedTuples.LatLonDatum5Tuple.lat: 0.5
    test 476 pygeodesy.namedTuples.LatLonDatum5Tuple.lon: 0.5
    test 477 pygeodesy.namedTuples.LatLonDatum5Tuple.datum: 0.5
    test 478 pygeodesy.namedTuples.LatLonDatum5Tuple.gamma: 0.5
    test 479 pygeodesy.namedTuples.LatLonDatum5Tuple.scale: 0.5
    test 480 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 481 pygeodesy.namedTuples.LatLonDatum5Tuple._validated: True
    test 482 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=0.5, lon=0.5, precision=0)
    test 483 pygeodesy.namedTuples: LatLonPrec3Tuple(lat=Lat, lon=Lon, precision=Precision_)
    test 484 pygeodesy.namedTuples.LatLonPrec3Tuple.lat: 0.5
    test 485 pygeodesy.namedTuples.LatLonPrec3Tuple.lon: 0.5
    test 486 pygeodesy.namedTuples.LatLonPrec3Tuple.precision: 0.5
    test 487 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 488 pygeodesy.namedTuples.LatLonPrec3Tuple._validated: True
    test 489 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=0.5, lon=0.5, precision=0, height=0.5, radius=0.5)
    test 490 pygeodesy.namedTuples: LatLonPrec5Tuple(lat=Lat, lon=Lon, precision=Precision_, height=Height, radius=Radius)
    test 491 pygeodesy.namedTuples.LatLonPrec5Tuple.lat: 0.5
    test 492 pygeodesy.namedTuples.LatLonPrec5Tuple.lon: 0.5
    test 493 pygeodesy.namedTuples.LatLonPrec5Tuple.precision: 0.5
    test 494 pygeodesy.namedTuples.LatLonPrec5Tuple.height: 0.5
    test 495 pygeodesy.namedTuples.LatLonPrec5Tuple.radius: 0.5
    test 496 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 497 pygeodesy.namedTuples.LatLonPrec5Tuple._validated: True
    test 498 pygeodesy.namedTuples: NearestOn2Tuple(closest=0.5, fraction=0.5)
    test 499 pygeodesy.namedTuples: NearestOn2Tuple(closest=_Pass, fraction=_Pass)
    test 500 pygeodesy.namedTuples.NearestOn2Tuple.closest: 0.5
    test 501 pygeodesy.namedTuples.NearestOn2Tuple.fraction: 0.5
    test 502 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 503 pygeodesy.namedTuples.NearestOn2Tuple._validated: True
    test 504 pygeodesy.namedTuples: NearestOn3Tuple(closest=0.5, distance=0.5, angle=0.5)
    test 505 pygeodesy.namedTuples: NearestOn3Tuple(closest=_Pass, distance=Meter, angle=Degrees)
    test 506 pygeodesy.namedTuples.NearestOn3Tuple.closest: 0.5
    test 507 pygeodesy.namedTuples.NearestOn3Tuple.distance: 0.5
    test 508 pygeodesy.namedTuples.NearestOn3Tuple.angle: 0.5
    test 509 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 510 pygeodesy.namedTuples.NearestOn3Tuple._validated: True
    test 511 pygeodesy.namedTuples: NearestOn4Tuple(lat=0.5, lon=0.5, distance=0.5, normal=0.5)
    test 512 pygeodesy.namedTuples: NearestOn4Tuple(lat=Lat, lon=Lon, distance=Meter, normal=Bearing)
    test 513 pygeodesy.namedTuples.NearestOn4Tuple.lat: 0.5
    test 514 pygeodesy.namedTuples.NearestOn4Tuple.lon: 0.5
    test 515 pygeodesy.namedTuples.NearestOn4Tuple.distance: 0.5
    test 516 pygeodesy.namedTuples.NearestOn4Tuple.normal: 0.5
    test 517 pygeodesy.namedTuples.NearestOn4Tuple._validated: True
    test 518 pygeodesy.namedTuples.NearestOn4Tuple._validated: True
    test 519 pygeodesy.namedTuples: NearestOn5Tuple(lat=0.5, lon=0.5, distance=0.5, angle=0.5, height=0.5)
    test 520 pygeodesy.namedTuples: NearestOn5Tuple(lat=Lat, lon=Lon, distance=Degrees, angle=Degrees, height=Meter)
    test 521 pygeodesy.namedTuples.NearestOn5Tuple.lat: 0.5
    test 522 pygeodesy.namedTuples.NearestOn5Tuple.lon: 0.5
    test 523 pygeodesy.namedTuples.NearestOn5Tuple.distance: 0.5
    test 524 pygeodesy.namedTuples.NearestOn5Tuple.angle: 0.5
    test 525 pygeodesy.namedTuples.NearestOn5Tuple.height: 0.5
    test 526 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 527 pygeodesy.namedTuples.NearestOn5Tuple._validated: True
    test 528 pygeodesy.namedTuples: NearestOn6Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5)
    test 529 pygeodesy.namedTuples: NearestOn6Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass)
    test 530 pygeodesy.namedTuples.NearestOn6Tuple.closest: 0.5
    test 531 pygeodesy.namedTuples.NearestOn6Tuple.distance: 0.5
    test 532 pygeodesy.namedTuples.NearestOn6Tuple.fi: 0.5
    test 533 pygeodesy.namedTuples.NearestOn6Tuple.j: 0.5
    test 534 pygeodesy.namedTuples.NearestOn6Tuple.start: 0.5
    test 535 pygeodesy.namedTuples.NearestOn6Tuple.end: 0.5
    test 536 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 537 pygeodesy.namedTuples.NearestOn6Tuple._validated: True
    test 538 pygeodesy.namedTuples: NearestOn8Tuple(closest=0.5, distance=0.5, fi=0.5, j=0, start=0.5, end=0.5, initial=0.5, final=0.5)
    test 539 pygeodesy.namedTuples: NearestOn8Tuple(closest=_Pass, distance=Meter, fi=FIx, j=Number_, start=_Pass, end=_Pass, initial=Bearing, final=Bearing)
    test 540 pygeodesy.namedTuples.NearestOn8Tuple.closest: 0.5
    test 541 pygeodesy.namedTuples.NearestOn8Tuple.distance: 0.5
    test 542 pygeodesy.namedTuples.NearestOn8Tuple.fi: 0.5
    test 543 pygeodesy.namedTuples.NearestOn8Tuple.j: 0.5
    test 544 pygeodesy.namedTuples.NearestOn8Tuple.start: 0.5
    test 545 pygeodesy.namedTuples.NearestOn8Tuple.end: 0.5
    test 546 pygeodesy.namedTuples.NearestOn8Tuple.initial: 0.5
    test 547 pygeodesy.namedTuples.NearestOn8Tuple.final: 0.5
    test 548 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 549 pygeodesy.namedTuples.NearestOn8Tuple._validated: True
    test 550 pygeodesy.namedTuples: PhiLam2Tuple(phi=0.5, lam=0.5)
    test 551 pygeodesy.namedTuples: PhiLam2Tuple(phi=Phi, lam=Lam)
    test 552 pygeodesy.namedTuples.PhiLam2Tuple.phi: 0.5
    test 553 pygeodesy.namedTuples.PhiLam2Tuple.lam: 0.5
    test 554 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 555 pygeodesy.namedTuples.PhiLam2Tuple._validated: True
    test 556 pygeodesy.namedTuples: PhiLam3Tuple(phi=0.5, lam=0.5, height=0.5)
    test 557 pygeodesy.namedTuples: PhiLam3Tuple(phi=Phi, lam=Lam, height=Height)
    test 558 pygeodesy.namedTuples.PhiLam3Tuple.phi: 0.5
    test 559 pygeodesy.namedTuples.PhiLam3Tuple.lam: 0.5
    test 560 pygeodesy.namedTuples.PhiLam3Tuple.height: 0.5
    test 561 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 562 pygeodesy.namedTuples.PhiLam3Tuple._validated: True
    test 563 pygeodesy.namedTuples: PhiLam4Tuple(phi=0.5, lam=0.5, height=0.5, datum=0.5)
    test 564 pygeodesy.namedTuples: PhiLam4Tuple(phi=Phi, lam=Lam, height=Height, datum=_Pass)
    test 565 pygeodesy.namedTuples.PhiLam4Tuple.phi: 0.5
    test 566 pygeodesy.namedTuples.PhiLam4Tuple.lam: 0.5
    test 567 pygeodesy.namedTuples.PhiLam4Tuple.height: 0.5
    test 568 pygeodesy.namedTuples.PhiLam4Tuple.datum: 0.5
    test 569 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 570 pygeodesy.namedTuples.PhiLam4Tuple._validated: True
    test 571 pygeodesy.namedTuples: Point3Tuple(x=0.5, y=0.5, ll=0.5)
    test 572 pygeodesy.namedTuples: Point3Tuple(x=Meter, y=Meter, ll=_Pass)
    test 573 pygeodesy.namedTuples.Point3Tuple.x: 0.5
    test 574 pygeodesy.namedTuples.Point3Tuple.y: 0.5
    test 575 pygeodesy.namedTuples.Point3Tuple.ll: 0.5
    test 576 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 577 pygeodesy.namedTuples.Point3Tuple._validated: True
    test 578 pygeodesy.namedTuples: Points2Tuple(number=0, points=0.5)
    test 579 pygeodesy.namedTuples: Points2Tuple(number=Number_, points=_Pass)
    test 580 pygeodesy.namedTuples.Points2Tuple.number: 0.5
    test 581 pygeodesy.namedTuples.Points2Tuple.points: 0.5
    test 582 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 583 pygeodesy.namedTuples.Points2Tuple._validated: True
    test 584 pygeodesy.namedTuples: Reverse4Tuple(lat=0.5, lon=0.5, gamma=0.5, scale=0.5)
    test 585 pygeodesy.namedTuples: Reverse4Tuple(lat=Lat, lon=Lon, gamma=Degrees, scale=Scalar)
    test 586 pygeodesy.namedTuples.Reverse4Tuple.lat: 0.5
    test 587 pygeodesy.namedTuples.Reverse4Tuple.lon: 0.5
    test 588 pygeodesy.namedTuples.Reverse4Tuple.gamma: 0.5
    test 589 pygeodesy.namedTuples.Reverse4Tuple.scale: 0.5
    test 590 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 591 pygeodesy.namedTuples.Reverse4Tuple._validated: True
    test 592 pygeodesy.namedTuples: Triangle7Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, area=0.5)
    test 593 pygeodesy.namedTuples: Triangle7Tuple(A=Degrees, a=Meter, B=Degrees, b=Meter, C=Degrees, c=Meter, area=Meter2)
    test 594 pygeodesy.namedTuples.Triangle7Tuple.A: 0.5
    test 595 pygeodesy.namedTuples.Triangle7Tuple.a: 0.5
    test 596 pygeodesy.namedTuples.Triangle7Tuple.B: 0.5
    test 597 pygeodesy.namedTuples.Triangle7Tuple.b: 0.5
    test 598 pygeodesy.namedTuples.Triangle7Tuple.C: 0.5
    test 599 pygeodesy.namedTuples.Triangle7Tuple.c: 0.5
    test 600 pygeodesy.namedTuples.Triangle7Tuple.area: 0.5
    test 601 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 602 pygeodesy.namedTuples.Triangle7Tuple._validated: True
    test 603 pygeodesy.namedTuples: Triangle8Tuple(A=0.5, a=0.5, B=0.5, b=0.5, C=0.5, c=0.5, D=0.5, E=0.5)
    test 604 pygeodesy.namedTuples: Triangle8Tuple(A=Radians, a=Radians, B=Radians, b=Radians, C=Radians, c=Radians, D=Radians, E=Radians)
    test 605 pygeodesy.namedTuples.Triangle8Tuple.A: 0.5
    test 606 pygeodesy.namedTuples.Triangle8Tuple.a: 0.5
    test 607 pygeodesy.namedTuples.Triangle8Tuple.B: 0.5
    test 608 pygeodesy.namedTuples.Triangle8Tuple.b: 0.5
    test 609 pygeodesy.namedTuples.Triangle8Tuple.C: 0.5
    test 610 pygeodesy.namedTuples.Triangle8Tuple.c: 0.5
    test 611 pygeodesy.namedTuples.Triangle8Tuple.D: 0.5
    test 612 pygeodesy.namedTuples.Triangle8Tuple.E: 0.5
    test 613 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 614 pygeodesy.namedTuples.Triangle8Tuple._validated: True
    test 615 pygeodesy.namedTuples: Trilaterate5Tuple(min=0.5, minPoint=0.5, max=0.5, maxPoint=0.5, n=0)
    test 616 pygeodesy.namedTuples: Trilaterate5Tuple(min=Meter, minPoint=_Pass, max=Meter, maxPoint=_Pass, n=Number_)
    test 617 pygeodesy.namedTuples.Trilaterate5Tuple.min: 0.5
    test 618 pygeodesy.namedTuples.Trilaterate5Tuple.minPoint: 0.5
    test 619 pygeodesy.namedTuples.Trilaterate5Tuple.max: 0.5
    test 620 pygeodesy.namedTuples.Trilaterate5Tuple.maxPoint: 0.5
    test 621 pygeodesy.namedTuples.Trilaterate5Tuple.n: 0.5
    test 622 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 623 pygeodesy.namedTuples.Trilaterate5Tuple._validated: True
    test 624 pygeodesy.namedTuples: UtmUps2Tuple(zone=0, hemipole='0.5')
    test 625 pygeodesy.namedTuples: UtmUps2Tuple(zone=Number_, hemipole=Str)
    test 626 pygeodesy.namedTuples.UtmUps2Tuple.zone: 0.5
    test 627 pygeodesy.namedTuples.UtmUps2Tuple.hemipole: 0.5
    test 628 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 629 pygeodesy.namedTuples.UtmUps2Tuple._validated: True
    test 630 pygeodesy.namedTuples: UtmUps5Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5')
    test 631 pygeodesy.namedTuples: UtmUps5Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band)
    test 632 pygeodesy.namedTuples.UtmUps5Tuple.zone: 0.5
    test 633 pygeodesy.namedTuples.UtmUps5Tuple.hemipole: 0.5
    test 634 pygeodesy.namedTuples.UtmUps5Tuple.easting: 0.5
    test 635 pygeodesy.namedTuples.UtmUps5Tuple.northing: 0.5
    test 636 pygeodesy.namedTuples.UtmUps5Tuple.band: 0.5
    test 637 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 638 pygeodesy.namedTuples.UtmUps5Tuple._validated: True
    test 639 pygeodesy.namedTuples: UtmUps8Tuple(zone=0, hemipole='0.5', easting=0.5, northing=0.5, band='0.5', datum=0.5, gamma=0.5, scale=0.5)
    test 640 pygeodesy.namedTuples: UtmUps8Tuple(zone=Number_, hemipole=Str, easting=Easting, northing=Northing, band=Band, datum=_Pass, gamma=Degrees, scale=Scalar)
    test 641 pygeodesy.namedTuples.UtmUps8Tuple.zone: 0.5
    test 642 pygeodesy.namedTuples.UtmUps8Tuple.hemipole: 0.5
    test 643 pygeodesy.namedTuples.UtmUps8Tuple.easting: 0.5
    test 644 pygeodesy.namedTuples.UtmUps8Tuple.northing: 0.5
    test 645 pygeodesy.namedTuples.UtmUps8Tuple.band: 0.5
    test 646 pygeodesy.namedTuples.UtmUps8Tuple.datum: 0.5
    test 647 pygeodesy.namedTuples.UtmUps8Tuple.gamma: 0.5
    test 648 pygeodesy.namedTuples.UtmUps8Tuple.scale: 0.5
    test 649 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 650 pygeodesy.namedTuples.UtmUps8Tuple._validated: True
    test 651 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=0, band='0.5', hemipole='0.5', lat=0.5, lon=0.5)
    test 652 pygeodesy.namedTuples: UtmUpsLatLon5Tuple(zone=Number_, band=Band, hemipole=Str, lat=Lat, lon=Lon)
    test 653 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.zone: 0.5
    test 654 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.band: 0.5
    test 655 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.hemipole: 0.5
    test 656 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lat: 0.5
    test 657 pygeodesy.namedTuples.UtmUpsLatLon5Tuple.lon: 0.5
    test 658 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 659 pygeodesy.namedTuples.UtmUpsLatLon5Tuple._validated: True
    test 660 pygeodesy.namedTuples: Vector2Tuple(x=0.5, y=0.5)
    test 661 pygeodesy.namedTuples: Vector2Tuple(x=Scalar, y=Scalar)
    test 662 pygeodesy.namedTuples.Vector2Tuple.x: 0.5
    test 663 pygeodesy.namedTuples.Vector2Tuple.y: 0.5
    test 664 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 665 pygeodesy.namedTuples.Vector2Tuple._validated: True
    test 666 pygeodesy.namedTuples: Vector3Tuple(x=0.5, y=0.5, z=0.5)
    test 667 pygeodesy.namedTuples: Vector3Tuple(x=Scalar, y=Scalar, z=Scalar)
    test 668 pygeodesy.namedTuples.Vector3Tuple.x: 0.5
    test 669 pygeodesy.namedTuples.Vector3Tuple.y: 0.5
    test 670 pygeodesy.namedTuples.Vector3Tuple.z: 0.5
    test 671 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 672 pygeodesy.namedTuples.Vector3Tuple._validated: True
    test 673 pygeodesy.namedTuples: Vector4Tuple(x=0.5, y=0.5, z=0.5, h=0.5)
    test 674 pygeodesy.namedTuples: Vector4Tuple(x=Scalar, y=Scalar, z=Scalar, h=Height)
    test 675 pygeodesy.namedTuples.Vector4Tuple.x: 0.5
    test 676 pygeodesy.namedTuples.Vector4Tuple.y: 0.5
    test 677 pygeodesy.namedTuples.Vector4Tuple.z: 0.5
    test 678 pygeodesy.namedTuples.Vector4Tuple.h: 0.5
    test 679 pygeodesy.namedTuples.Vector4Tuple._validated: True
    test 680 pygeodesy.namedTuples.Vector4Tuple._validated: True
# lazily imported pygeodesy.osgr by bases.py line 213
    test 681 pygeodesy.points: Shape2Tuple(nrows=0, ncols=0)
    test 682 pygeodesy.points: Shape2Tuple(nrows=Number_, ncols=Number_)
    test 683 pygeodesy.points.Shape2Tuple.nrows: 0.5
    test 684 pygeodesy.points.Shape2Tuple.ncols: 0.5
    test 685 pygeodesy.points.Shape2Tuple._validated: True
    test 686 pygeodesy.points.Shape2Tuple._validated: True
# lazily imported pygeodesy.resections by bases.py line 213
    test 687 pygeodesy.resections: Collins5Tuple(pointP=0.5, pointH=0.5, a=0.5, b=0.5, c=0.5)
    test 688 pygeodesy.resections: Collins5Tuple(pointP=_Pass, pointH=_Pass, a=Distance, b=Distance, c=Distance)
    test 689 pygeodesy.resections.Collins5Tuple.pointP: 0.5
    test 690 pygeodesy.resections.Collins5Tuple.pointH: 0.5
    test 691 pygeodesy.resections.Collins5Tuple.a: 0.5
    test 692 pygeodesy.resections.Collins5Tuple.b: 0.5
    test 693 pygeodesy.resections.Collins5Tuple.c: 0.5
    test 694 pygeodesy.resections.Collins5Tuple._validated: True
    test 695 pygeodesy.resections.Collins5Tuple._validated: True
    test 696 pygeodesy.resections: Survey3Tuple(PA=0.5, PB=0.5, PC=0.5)
    test 697 pygeodesy.resections: Survey3Tuple(PA=Distance, PB=Distance, PC=Distance)
    test 698 pygeodesy.resections.Survey3Tuple.PA: 0.5
    test 699 pygeodesy.resections.Survey3Tuple.PB: 0.5
    test 700 pygeodesy.resections.Survey3Tuple.PC: 0.5
    test 701 pygeodesy.resections.Survey3Tuple._validated: True
    test 702 pygeodesy.resections.Survey3Tuple._validated: True
    test 703 pygeodesy.resections: Tienstra7Tuple(pointP=0.5, A=0.5, B=0.5, C=0.5, a=0.5, b=0.5, c=0.5)
    test 704 pygeodesy.resections: Tienstra7Tuple(pointP=_Pass, A=Degrees, B=Degrees, C=Degrees, a=Distance, b=Distance, c=Distance)
    test 705 pygeodesy.resections.Tienstra7Tuple.pointP: 0.5
    test 706 pygeodesy.resections.Tienstra7Tuple.A: 0.5
    test 707 pygeodesy.resections.Tienstra7Tuple.B: 0.5
    test 708 pygeodesy.resections.Tienstra7Tuple.C: 0.5
    test 709 pygeodesy.resections.Tienstra7Tuple.a: 0.5
    test 710 pygeodesy.resections.Tienstra7Tuple.b: 0.5
    test 711 pygeodesy.resections.Tienstra7Tuple.c: 0.5
    test 712 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 713 pygeodesy.resections.Tienstra7Tuple._validated: True
    test 714 pygeodesy.resections: TriAngle4Tuple(radA=0.5, radB=0.5, radC=0.5, rIn=0.5)
    test 715 pygeodesy.resections: TriAngle4Tuple(radA=Radians, radB=Radians, radC=Radians, rIn=Distance)
    test 716 pygeodesy.resections.TriAngle4Tuple.radA: 0.5
    test 717 pygeodesy.resections.TriAngle4Tuple.radB: 0.5
    test 718 pygeodesy.resections.TriAngle4Tuple.radC: 0.5
    test 719 pygeodesy.resections.TriAngle4Tuple.rIn: 0.5
    test 720 pygeodesy.resections.TriAngle4Tuple._validated: True
    test 721 pygeodesy.resections.TriAngle4Tuple._validated: True
    test 722 pygeodesy.resections: TriSide2Tuple(a=0.5, radA=0.5)
    test 723 pygeodesy.resections: TriSide2Tuple(a=Distance, radA=Radians)
    test 724 pygeodesy.resections.TriSide2Tuple.a: 0.5
    test 725 pygeodesy.resections.TriSide2Tuple.radA: 0.5
    test 726 pygeodesy.resections.TriSide2Tuple._validated: True
    test 727 pygeodesy.resections.TriSide2Tuple._validated: True
    test 728 pygeodesy.resections: TriSide4Tuple(a=0.5, b=0.5, radC=0.5, d=0.5)
    test 729 pygeodesy.resections: TriSide4Tuple(a=Distance, b=Distance, radC=Radians, d=Distance)
    test 730 pygeodesy.resections.TriSide4Tuple.a: 0.5
    test 731 pygeodesy.resections.TriSide4Tuple.b: 0.5
    test 732 pygeodesy.resections.TriSide4Tuple.radC: 0.5
    test 733 pygeodesy.resections.TriSide4Tuple.d: 0.5
    test 734 pygeodesy.resections.TriSide4Tuple._validated: True
    test 735 pygeodesy.resections.TriSide4Tuple._validated: True
# lazily imported pygeodesy.rhumbsolve by bases.py line 213
    test 736 pygeodesy.rhumbsolve: RhumbSolve7Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5)
    test 737 pygeodesy.rhumbsolve: RhumbSolve7Tuple(lat1=_Lat, lon1=_Lon, lat2=_Lat, lon2=_Lon, azi12=Bearing, s12=Meter, S12=Meter2)
    test 738 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lat1: 0.5
    test 739 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lon1: 0.5
    test 740 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lat2: 0.5
    test 741 pygeodesy.rhumbsolve.RhumbSolve7Tuple.lon2: 0.5
    test 742 pygeodesy.rhumbsolve.RhumbSolve7Tuple.azi12: 0.5
    test 743 pygeodesy.rhumbsolve.RhumbSolve7Tuple.s12: 0.5
    test 744 pygeodesy.rhumbsolve.RhumbSolve7Tuple.S12: 0.5
    test 745 pygeodesy.rhumbsolve.RhumbSolve7Tuple._validated: True
    test 746 pygeodesy.rhumbsolve.RhumbSolve7Tuple._validated: True
    test 747 pygeodesy.rhumbx: Rhumb8Tuple(lat1=0.5, lon1=0.5, lat2=0.5, lon2=0.5, azi12=0.5, s12=0.5, S12=0.5, a12=0.5)
    test 748 pygeodesy.rhumbx: Rhumb8Tuple(lat1=_Lat, lon1=_Lon, lat2=_Lat, lon2=_Lon, azi12=Bearing, s12=Meter, S12=Meter2, a12=Degrees)
    test 749 pygeodesy.rhumbx.Rhumb8Tuple.lat1: 0.5
    test 750 pygeodesy.rhumbx.Rhumb8Tuple.lon1: 0.5
    test 751 pygeodesy.rhumbx.Rhumb8Tuple.lat2: 0.5
    test 752 pygeodesy.rhumbx.Rhumb8Tuple.lon2: 0.5
    test 753 pygeodesy.rhumbx.Rhumb8Tuple.azi12: 0.5
    test 754 pygeodesy.rhumbx.Rhumb8Tuple.s12: 0.5
    test 755 pygeodesy.rhumbx.Rhumb8Tuple.S12: 0.5
    test 756 pygeodesy.rhumbx.Rhumb8Tuple.a12: 0.5
    test 757 pygeodesy.rhumbx.Rhumb8Tuple._validated: True
    test 758 pygeodesy.rhumbx.Rhumb8Tuple._validated: True
    test 759 pygeodesy.rhumbx: RhumbOrder2Tuple(RAorder=0, TMorder=0)
    test 760 pygeodesy.rhumbx: RhumbOrder2Tuple(RAorder=Int, TMorder=Int)
    test 761 pygeodesy.rhumbx.RhumbOrder2Tuple.RAorder: 0.5
    test 762 pygeodesy.rhumbx.RhumbOrder2Tuple.TMorder: 0.5
    test 763 pygeodesy.rhumbx.RhumbOrder2Tuple._validated: True
    test 764 pygeodesy.rhumbx.RhumbOrder2Tuple._validated: True
# lazily imported pygeodesy.simplify by bases.py line 213
# lazily imported pygeodesy.sphericalBase by bases.py line 213
# lazily imported pygeodesy.sphericalNvector by bases.py line 213
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 213
# lazily imported pygeodesy.trf by bases.py line 213
    test 765 pygeodesy.trf: Helmert7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 766 pygeodesy.trf: Helmert7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 767 pygeodesy.trf.Helmert7Tuple.tx: 0.5
    test 768 pygeodesy.trf.Helmert7Tuple.ty: 0.5
    test 769 pygeodesy.trf.Helmert7Tuple.tz: 0.5
    test 770 pygeodesy.trf.Helmert7Tuple.s: 0.5
    test 771 pygeodesy.trf.Helmert7Tuple.sx: 0.5
    test 772 pygeodesy.trf.Helmert7Tuple.sy: 0.5
    test 773 pygeodesy.trf.Helmert7Tuple.sz: 0.5
    test 774 pygeodesy.trf.Helmert7Tuple._validated: True
    test 775 pygeodesy.trf.Helmert7Tuple._validated: True
    test 776 pygeodesy.trf: Helmert7Tuple(tx=0.5, ty=0.5, tz=0.5, s=0.5, sx=0.5, sy=0.5, sz=0.5)
    test 777 pygeodesy.trf: Helmert7Tuple(tx=Float, ty=Float, tz=Float, s=Float, sx=Float, sy=Float, sz=Float)
    test 778 pygeodesy.trf.Helmert7Tuple.tx: 0.5
    test 779 pygeodesy.trf.Helmert7Tuple.ty: 0.5
    test 780 pygeodesy.trf.Helmert7Tuple.tz: 0.5
    test 781 pygeodesy.trf.Helmert7Tuple.s: 0.5
    test 782 pygeodesy.trf.Helmert7Tuple.sx: 0.5
    test 783 pygeodesy.trf.Helmert7Tuple.sy: 0.5
    test 784 pygeodesy.trf.Helmert7Tuple.sz: 0.5
    test 785 pygeodesy.trf.Helmert7Tuple._validated: True
    test 786 pygeodesy.trf.Helmert7Tuple._validated: True
# lazily imported pygeodesy.triaxials by bases.py line 213
    test 787 pygeodesy.triaxials: BetaOmega2Tuple(beta=0.5, omega=0.5)
    test 788 pygeodesy.triaxials: BetaOmega2Tuple(beta=_Pass, omega=_Pass)
    test 789 pygeodesy.triaxials.BetaOmega2Tuple.beta: 0.5
    test 790 pygeodesy.triaxials.BetaOmega2Tuple.omega: 0.5
    test 791 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 792 pygeodesy.triaxials.BetaOmega2Tuple._validated: True
    test 793 pygeodesy.triaxials: BetaOmega3Tuple(beta=0.5, omega=0.5, height=0.5)
    test 794 pygeodesy.triaxials: BetaOmega3Tuple(beta=_Pass, omega=_Pass, height=Meter)
    test 795 pygeodesy.triaxials.BetaOmega3Tuple.beta: 0.5
    test 796 pygeodesy.triaxials.BetaOmega3Tuple.omega: 0.5
    test 797 pygeodesy.triaxials.BetaOmega3Tuple.height: 0.5
    test 798 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 799 pygeodesy.triaxials.BetaOmega3Tuple._validated: True
    test 800 pygeodesy.triaxials: Jacobi2Tuple(x=0.5, y=0.5)
    test 801 pygeodesy.triaxials: Jacobi2Tuple(x=_Pass, y=_Pass)
    test 802 pygeodesy.triaxials.Jacobi2Tuple.x: 0.5
    test 803 pygeodesy.triaxials.Jacobi2Tuple.y: 0.5
    test 804 pygeodesy.triaxials.Jacobi2Tuple._validated: True
    test 805 pygeodesy.triaxials.Jacobi2Tuple._validated: True
# lazily imported pygeodesy.utmups by bases.py line 213
    test 806 pygeodesy.vector2d: Circin6Tuple(radius=0.5, center=0.5, deltas=0.5, cA=0.5, cB=0.5, cC=0.5)
    test 807 pygeodesy.vector2d: Circin6Tuple(radius=Radius, center=_Pass, deltas=_Pass, cA=_Pass, cB=_Pass, cC=_Pass)
    test 808 pygeodesy.vector2d.Circin6Tuple.radius: 0.5
    test 809 pygeodesy.vector2d.Circin6Tuple.center: 0.5
    test 810 pygeodesy.vector2d.Circin6Tuple.deltas: 0.5
    test 811 pygeodesy.vector2d.Circin6Tuple.cA: 0.5
    test 812 pygeodesy.vector2d.Circin6Tuple.cB: 0.5
    test 813 pygeodesy.vector2d.Circin6Tuple.cC: 0.5
    test 814 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 815 pygeodesy.vector2d.Circin6Tuple._validated: True
    test 816 pygeodesy.vector2d: Circum3Tuple(radius=0.5, center=0.5, deltas=0.5)
    test 817 pygeodesy.vector2d: Circum3Tuple(radius=Radius, center=_Pass, deltas=_Pass)
    test 818 pygeodesy.vector2d.Circum3Tuple.radius: 0.5
    test 819 pygeodesy.vector2d.Circum3Tuple.center: 0.5
    test 820 pygeodesy.vector2d.Circum3Tuple.deltas: 0.5
    test 821 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 822 pygeodesy.vector2d.Circum3Tuple._validated: True
    test 823 pygeodesy.vector2d: Circum4Tuple(radius=0.5, center=0.5, rank=0, residuals=0.5)
    test 824 pygeodesy.vector2d: Circum4Tuple(radius=Radius, center=_Pass, rank=Int, residuals=_Pass)
    test 825 pygeodesy.vector2d.Circum4Tuple.radius: 0.5
    test 826 pygeodesy.vector2d.Circum4Tuple.center: 0.5
    test 827 pygeodesy.vector2d.Circum4Tuple.rank: 0.5
    test 828 pygeodesy.vector2d.Circum4Tuple.residuals: 0.5
    test 829 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 830 pygeodesy.vector2d.Circum4Tuple._validated: True
    test 831 pygeodesy.vector2d: Meeus2Tuple(radius=0.5, Type=0.5)
    test 832 pygeodesy.vector2d: Meeus2Tuple(radius=Radius, Type=_Pass)
    test 833 pygeodesy.vector2d.Meeus2Tuple.radius: 0.5
    test 834 pygeodesy.vector2d.Meeus2Tuple.Type: 0.5
    test 835 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 836 pygeodesy.vector2d.Meeus2Tuple._validated: True
    test 837 pygeodesy.vector2d: Radii11Tuple(rA=0.5, rB=0.5, rC=0.5, cR=0.5, rIn=0.5, riS=0.5, roS=0.5, a=0.5, b=0.5, c=0.5, s=0.5)
    test 838 pygeodesy.vector2d: Radii11Tuple(rA=Meter, rB=Meter, rC=Meter, cR=Meter, rIn=Meter, riS=Meter, roS=Meter, a=Meter, b=Meter, c=Meter, s=Meter)
    test 839 pygeodesy.vector2d.Radii11Tuple.rA: 0.5
    test 840 pygeodesy.vector2d.Radii11Tuple.rB: 0.5
    test 841 pygeodesy.vector2d.Radii11Tuple.rC: 0.5
    test 842 pygeodesy.vector2d.Radii11Tuple.cR: 0.5
    test 843 pygeodesy.vector2d.Radii11Tuple.rIn: 0.5
    test 844 pygeodesy.vector2d.Radii11Tuple.riS: 0.5
    test 845 pygeodesy.vector2d.Radii11Tuple.roS: 0.5
    test 846 pygeodesy.vector2d.Radii11Tuple.a: 0.5
    test 847 pygeodesy.vector2d.Radii11Tuple.b: 0.5
    test 848 pygeodesy.vector2d.Radii11Tuple.c: 0.5
    test 849 pygeodesy.vector2d.Radii11Tuple.s: 0.5
    test 850 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 851 pygeodesy.vector2d.Radii11Tuple._validated: True
    test 852 pygeodesy.vector2d: Soddy4Tuple(radius=0.5, center=0.5, deltas=0.5, outer=0.5)
    test 853 pygeodesy.vector2d: Soddy4Tuple(radius=Radius, center=_Pass, deltas=_Pass, outer=Radius)
    test 854 pygeodesy.vector2d.Soddy4Tuple.radius: 0.5
    test 855 pygeodesy.vector2d.Soddy4Tuple.center: 0.5
    test 856 pygeodesy.vector2d.Soddy4Tuple.deltas: 0.5
    test 857 pygeodesy.vector2d.Soddy4Tuple.outer: 0.5
    test 858 pygeodesy.vector2d.Soddy4Tuple._validated: True
    test 859 pygeodesy.vector2d.Soddy4Tuple._validated: True
# lazily imported pygeodesy.webmercator by bases.py line 213
    test 860 pygeodesy.webmercator: EasNorRadius3Tuple(easting=0.5, northing=0.5, radius=0.5)
    test 861 pygeodesy.webmercator: EasNorRadius3Tuple(easting=Easting, northing=Northing, radius=Radius)
    test 862 pygeodesy.webmercator.EasNorRadius3Tuple.easting: 0.5
    test 863 pygeodesy.webmercator.EasNorRadius3Tuple.northing: 0.5
    test 864 pygeodesy.webmercator.EasNorRadius3Tuple.radius: 0.5
    test 865 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
    test 866 pygeodesy.webmercator.EasNorRadius3Tuple._validated: True
# lazily imported pygeodesy.wgrs by bases.py line 213
    test 867 pygeodesy.named._NamedTuple._validated: False

    all 867 testNamedTuples.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 48.567 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testNavlabExamples.py
./pygeodesy/ellipsoidalNvector.py:59: DeprecationWarning: class L{pygeodesy.ellipsoidalNvector.Ned} has been DEPRECATED, use class L{pygeodesy.Ned}.
  deprecated_class(self.__class__)
./test/testNavlabExamples.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(1, 'delta', delta.toRepr(prec=3), '[L:470357.384, B:45.109°, E:-2.12°]')  # DEPRECATED
./test/testNavlabExamples.py:43: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  t.test(1, 'bearing', delta.bearing, 45.109, fmt='%.3f')  # 45.109°
./test/testNavlabExamples.py:44: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  t.test(1, 'length', delta.length, 470357.384, fmt='%.3f')  # 470357.384 m
./test/testNavlabExamples.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:3606.938, B:33.69°, E:-1.589°]')  # DEPRECATED
./pygeodesy/ellipsoidalNvector.py:282: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/deprecated/__init__.py:64: DeprecationWarning: class L{pygeodesy.deprecated.Ned3Tuple} has been DEPRECATED, use class L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
./test/testNavlabExamples.py:71: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toRepr} has been DEPRECATED, use class L{pygeodesy.Ned}.
  t.test(2, 'delta', delta.toRepr(prec=3), '[L:116807.681, B:222.493°, E:-0.524°]')  # DEPRECATED
./test/testNavlabExamples.py:143: DeprecationWarning: function L{pygeodesy.ellipsoidalNvector.toNed} has been DEPRECATED, use L{pygeodesy.Aer}C{(bearing, elevation, distance).xyzLocal.toNed(B{Ned}, name=B{name})} or L{XyzLocal}C{(pygeodesy.Aer(bearing, elevation, distance)).toNed(B{Ned}, name=B{name})}.
  d = ellipsoidalNvector.toNed(116809.178, 222.493, -0.5416)
./test/testNavlabExamples.py:145: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.bearing} has been DEPRECATED, use C{azimuth}.
  TestsBase.test(t, 'bearing',   d.bearing, '227.507',  fmt='%.3f')  # '222.493'
./test/testNavlabExamples.py:147: DeprecationWarning: Property_RO L{pygeodesy.ellipsoidalNvector.Ned.length} has been DEPRECATED, use C{slantrange}.
  TestsBase.test(t, 'length',    d.length, '116809.178',  fmt='%.3f')
./test/testNavlabExamples.py:148: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Ned.toVector3d} has been DEPRECATED, use property L{xyz}.
  v = d.toVector3d()
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Datums from .datums by testNavlabExamples.py line 18
# lazily imported pygeodesy.F_D from .dms by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalExact by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.ellipsoidalVincenty by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalNvector by testNavlabExamples.py line 18
# lazily imported pygeodesy.sphericalTrigonometry by testNavlabExamples.py line 18
# lazily imported pygeodesy.EcefVeness from .ecef by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned from .ltpTuples by testNavlabExamples.py line 18
# lazily imported pygeodesy.Ned4Tuple from .ltpTuples by testNavlabExamples.py line 18

    testing testNavlabExamples.py 23.03.27 isLazy=3
    test 1 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384

    test 6 Example 1 delta: [331730.863, 332998.501, 17398.304]
    test 7 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned'>
    test 8 Example 1 delta: (331730.863099, 332998.501491, 17398.304211, Ltp(lat0=1.0, lon0=2.0, height0=3.0, M=EcefMatrix(_0_0_=-0.034899, _0_1_=-0.017442, _0_2_=0.999239, _1_0_=0.999391, _1_1_=-0.000609, _1_2_=0.034894, _2_0_=0.0, _2_1_=0.999848, _2_2_=0.017452), ecef=EcefVeness(a=6378137.0, f=0.003352811, datum=Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), name=''), name=''))
    test 9 Example 1 delta: <class 'pygeodesy.ltpTuples.Ned4Tuple'>
    test 10 Example 1 delta: <class 'pygeodesy.ecef.EcefVeness'>

    test 11 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 12 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 13 Example 2 delta: [3000.0, 2000.0, 100.0]
    test 14 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241
    test 15 Example 2 destinationNed: 53.327702°N, 063.465119°E, +296.01m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 16 Example 2 delta: [-86126, -78900, 1069]
    test 17 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 18 Example 2 destinationNed: 48.88667°N, 002.37472°E, +0.00m  FAILED, KNOWN, expected 48.88667°N, 002.37472°E

    test 19 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m

    test 20 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]

    test 21 Example 5 distanceTo: 332457

    test 22 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 23 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 24 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 25 Example 6 intermediateTo: 51.372084°N, 000.707337°E

    test 26 Example 7 meanOf: 67.2362°N, 006.9175°W

    test 27 Example 8 destination(pygeodesy.sphericalNvector): 79.991549°N, 090.017698°W
    test 28 Example 8 destination(pygeodesy.sphericalTrigonometry): 79.991549°N, 090.017698°W
    test 29 Example 8 destination(pygeodesy.ellipsoidalVincenty): 79.991584°N, 090.017621°W
# lazily imported pygeodesy.ellipsoidalKarney by testNavlabExamples.py line 120
    test 30 Example 8 destination(pygeodesy.ellipsoidalKarney): 79.991584°N, 090.017621°W
    test 31 Example 8 destination(pygeodesy.ellipsoidalExact): 79.991584°N, 090.017621°W
# lazily imported pygeodesy.ellipsoidalGeodSolve by testNavlabExamples.py line 124
    test 32 Example 8 destination(pygeodesy.ellipsoidalGeodSolve): 79.991584°N, 090.017621°W

    test 33 Example 9 intersection: 40.318643°N, 055.901868°E

    test 34 Example 10 crossTrackDistance: 11118

    test 35 toNed: [-78901.1, -86126.6, 1104.1]
    test 36 bearing: 227.507
    test 37 elevation: -0.5416
    test 38 length: 116809.178
    test 39 toVector3d: (-86126.6, -78901.1, -1104.1)

    19 of 39 testNavlabExamples.py tests (48.7%) FAILED, incl. 2 KNOWN plus 17 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 26.846 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testOsgr.py
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
./test/testOsgr.py:25: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = p.convertDatum(Datums.OSGB36)
./test/testOsgr.py:27: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertDatum} has been DEPRECATED, use method L{toDatum}.
  r = r.convertDatum(Datums.WGS84)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testOsgr.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testOsgr.py line 11
# lazily imported pygeodesy.fstr from .streprs by testOsgr.py line 11
# lazily imported pygeodesy.Datums from .datums by testOsgr.py line 11
# lazily imported pygeodesy.Osgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.parseOSGR from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.toOsgr from .osgr by testOsgr.py line 11
# lazily imported pygeodesy.ellipsoidalExact by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalKarney by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalNvector by testOsgr.py line 221
# lazily imported pygeodesy.ellipsoidalVincenty by testOsgr.py line 221

    testing testOsgr.py 23.03.27 (module pygeodesy.osgr 23.03.19) isLazy=3

    testOSgr(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 iteration: None
    test 7 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 8 toLatLon1: 52.657979°N, 001.716052°E
    test 9 iteration: 4
    test 10 toOsgr1: 651409.903,313177.270
    test 11 toOsgr1: 651409.903,313177.270
    test 12 toOsgr1: TG5140990313177270
    test 13 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 14 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 15 iteration: 4
    test 16 toOsgr2: 651409,313177
    test 17 toOsgr2: 651409,313177
    test 18 toOsgr3: TG 51409 13177
    test 19 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 20 toOsgr4: TG 51409 13177
    test 21 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 22 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 23 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 24 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 25 toOsgr5: 0.001
    test 26 toOsgr5: TG5140900013177000
    test 27 toOsgr5: 651409.000,313177.000
    test 28 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 29 OSGR1: TG 48251 11932
    test 30 OSGR1: [G:TG, E:48251, N:11932]
    test 31 OSGR2: TG 51409 13177
    test 32 OSGR2: [G:TG, E:51409, N:13177]
    test 33 OSGR3: TG 51409 13177
    test 34 OSGR3: [G:TG, E:51409, N:13177]
    test 35 OSGR4: TG 51409 13177
    test 36 OSGR4: [G:TG, E:51409, N:13177]
    test 37 OSGR5: 651409,313177
    test 38 OSGR5: TG51409001317700
    test 39 OSGR5: 651409,313177
    test 40 OSGR5: 651409.000000,313177.000000
    test 41 OSGR5: 651409.00,313177.00
    test 42 OSGR5: [OSGR:651409.000,313177.000]
    test 43 OSGR5: [OSGR:651409,313177]
    test 44 OSGR5: [OSGR:651409.000,313177.000]
    test 45 OSGR5: [OSGR:651,313]
    test 46 OSGR6: 651409.000,313177.000
    test 47 OSGR6: 651409,313177
    test 48 OSGR6: (651409, 313177)
    test 49 OSGR6: 651409,313177
    test 50 OSGR6: 651409,313177
    test 51 OSGR6: (651409, 313177)
    test 52 OSGR6: 651409 313177

    test 53 issue: 38
    test 54 toOsgr: [G:TL, E:29158, N:35174]
    test 55 toOsgr: 529158.072, 235174.785
    test 56 toOsgr: OSGB36
    test 57 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 58 toLatLonOSGB36: OSGB36
    test 59 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 60 toLatLonWGS84 : WGS84

    test 61 Osgr: [G:TQ, E:32014, N:23971]
    test 62 Osgr: 532014.0, 123971.0
    test 63 Osgr: OSGB36
    test 64 toLatLonOSGB36: 50.999425N, 000.118417W
    test 65 toLatLonOSGB36: OSGB36
    test 66 toLatLonWGS84 : 50.999995N, 000.120004W
    test 67 toLatLonWGS84 : WGS84
    test 68 parseOSGR: [G:TQ, E:32014, N:23971]
    test 69 parseOSGR: 532014.0, 123971.0
    test 70 parseOSGR: OSGB36
    test 71 toLatLonOSGB36: 50.999425N, 000.118417W
    test 72 toLatLonOSGB36: OSGB36
    test 73 toLatLonWGS84: 50.999995N, 000.120004W
    test 74 toLatLonWGS84: WGS84
    test 75 toOsgr: [G:TQ, E:32013, N:23971]
    test 76 toOsgr: 532013.969, 123971.046
    test 77 toOsgr: OSGB36
    test 78 toLatLonOSGB36: 50.999426N, 000.118417W
    test 79 toLatLonOSGB36: OSGB36
    test 80 toLatLonWGS84 : 50.999995N, 000.120004W
    test 81 toLatLonWGS84 : WGS84
    test 82 toOsgr: [G:TQ, E:48853, N:24427]
    test 83 toOsgr: 548853.602, 124427.985
    test 84 toOsgr: OSGB36
    test 85 toLatLonOSGB36: 50.999422N, 000.121618E
    test 86 toLatLonOSGB36: OSGB36
    test 87 toLatLonWGS84 : 50.999995N, 000.120004E
    test 88 toLatLonWGS84 : WGS84

    test 89 LatLon: 49.926244°N, 006.297934°W
    test 90 datum: WGS84
    test 91 datum: OSGB36
    test 92 toOsgr: [G:SV, E:91645, N:11753]
    test 93 datum: OSGB36
    test 94 LatLon: 49.926244°N, 006.297934°W
    test 95 datum: WGS84
    test 96 distanceTo: 0.0103  FAILED, KNOWN, expected 0.0104

    test 97 prec=-2: [G:SV, E:91600, N:11700]

    test 98 toLatLon: 52.0N, 000.12W
    test 99 toLatLon: 52.0N, 000.12W
    test 100 toLatLon: 52.0N, 000.12W
    test 101 toLatLon: 52.0N, 000.12W
    test 102 toLatLon: 52.0N, 000.12W
    test 103 toLatLon: 52.0N, 000.12W
    test 104 toLatLon: 52.0N, 000.12W
    test 105 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 106 WGS84: 51.4778°N, 000.0016°W
    test 107 OSGB36: 51.477284°N, 000.00002°E
    test 108 WGS84: 51.4778°N, 000.0016°W
    test 109 OSgr1: TG 51409 13177
    test 110 OSgr1: [G:TG, E:51409, N:13177]
    test 111 iteration: None
    test 112 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 113 toLatLon1: 52.657979°N, 001.716052°E
    test 114 iteration: 4
    test 115 toOsgr1: 651409.903,313177.270
    test 116 toOsgr1: 651409.903,313177.270
    test 117 toOsgr1: TG5140990313177270
    test 118 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 119 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 120 iteration: 4
    test 121 toOsgr2: 651409,313177
    test 122 toOsgr2: 651409,313177
    test 123 toOsgr3: TG 51409 13177
    test 124 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 125 toOsgr4: TG 51409 13177
    test 126 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 127 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 128 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 129 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 130 toOsgr5: 0.001
    test 131 toOsgr5: TG5140900013177000
    test 132 toOsgr5: 651409.000,313177.000
    test 133 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 134 OSGR1: TG 48251 11932
    test 135 OSGR1: [G:TG, E:48251, N:11932]
    test 136 OSGR2: TG 51409 13177
    test 137 OSGR2: [G:TG, E:51409, N:13177]
    test 138 OSGR3: TG 51409 13177
    test 139 OSGR3: [G:TG, E:51409, N:13177]
    test 140 OSGR4: TG 51409 13177
    test 141 OSGR4: [G:TG, E:51409, N:13177]
    test 142 OSGR5: 651409,313177
    test 143 OSGR5: TG51409001317700
    test 144 OSGR5: 651409,313177
    test 145 OSGR5: 651409.000000,313177.000000
    test 146 OSGR5: 651409.00,313177.00
    test 147 OSGR5: [OSGR:651409.000,313177.000]
    test 148 OSGR5: [OSGR:651409,313177]
    test 149 OSGR5: [OSGR:651409.000,313177.000]
    test 150 OSGR5: [OSGR:651,313]
    test 151 OSGR6: 651409.000,313177.000
    test 152 OSGR6: 651409,313177
    test 153 OSGR6: (651409, 313177)
    test 154 OSGR6: 651409,313177
    test 155 OSGR6: 651409,313177
    test 156 OSGR6: (651409, 313177)
    test 157 OSGR6: 651409 313177

    test 158 issue: 38
    test 159 toOsgr: [G:TL, E:29158, N:35174]
    test 160 toOsgr: 529158.072, 235174.785
    test 161 toOsgr: OSGB36
    test 162 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 163 toLatLonOSGB36: OSGB36
    test 164 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 165 toLatLonWGS84 : WGS84

    test 166 Osgr: [G:TQ, E:32014, N:23971]
    test 167 Osgr: 532014.0, 123971.0
    test 168 Osgr: OSGB36
    test 169 toLatLonOSGB36: 50.999425N, 000.118417W
    test 170 toLatLonOSGB36: OSGB36
    test 171 toLatLonWGS84 : 50.999995N, 000.120004W
    test 172 toLatLonWGS84 : WGS84
    test 173 parseOSGR: [G:TQ, E:32014, N:23971]
    test 174 parseOSGR: 532014.0, 123971.0
    test 175 parseOSGR: OSGB36
    test 176 toLatLonOSGB36: 50.999425N, 000.118417W
    test 177 toLatLonOSGB36: OSGB36
    test 178 toLatLonWGS84: 50.999995N, 000.120004W
    test 179 toLatLonWGS84: WGS84
    test 180 toOsgr: [G:TQ, E:32013, N:23971]
    test 181 toOsgr: 532013.969, 123971.046
    test 182 toOsgr: OSGB36
    test 183 toLatLonOSGB36: 50.999426N, 000.118417W
    test 184 toLatLonOSGB36: OSGB36
    test 185 toLatLonWGS84 : 50.999995N, 000.120004W
    test 186 toLatLonWGS84 : WGS84
    test 187 toOsgr: [G:TQ, E:48853, N:24427]
    test 188 toOsgr: 548853.602, 124427.985
    test 189 toOsgr: OSGB36
    test 190 toLatLonOSGB36: 50.999422N, 000.121618E
    test 191 toLatLonOSGB36: OSGB36
    test 192 toLatLonWGS84 : 50.999995N, 000.120004E
    test 193 toLatLonWGS84 : WGS84

    test 194 LatLon: 49.926244°N, 006.297934°W
    test 195 datum: WGS84
    test 196 datum: OSGB36
    test 197 toOsgr: [G:SV, E:91645, N:11753]
    test 198 datum: OSGB36
    test 199 LatLon: 49.926244°N, 006.297934°W
    test 200 datum: WGS84
    test 201 distanceTo: 0.0104

    test 202 prec=-2: [G:SV, E:91600, N:11700]

    test 203 toLatLon: 52.0N, 000.12W
    test 204 toLatLon: 52.0N, 000.12W
    test 205 toLatLon: 52.0N, 000.12W
    test 206 toLatLon: 52.0N, 000.12W
    test 207 toLatLon: 52.0N, 000.12W
    test 208 toLatLon: 52.0N, 000.12W
    test 209 toLatLon: 52.0N, 000.12W
    test 210 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 211 WGS84: 51.4778°N, 000.0016°W
    test 212 OSGB36: 51.477284°N, 000.00002°E
    test 213 WGS84: 51.4778°N, 000.0016°W
    test 214 OSgr1: TG 51409 13177
    test 215 OSgr1: [G:TG, E:51409, N:13177]
    test 216 iteration: None
    test 217 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 218 toLatLon1: 52.657979°N, 001.716052°E
    test 219 iteration: 4
    test 220 toOsgr1: 651409.903,313177.270
    test 221 toOsgr1: 651409.903,313177.270
    test 222 toOsgr1: TG5140990313177270
    test 223 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 224 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 225 iteration: 4
    test 226 toOsgr2: 651409,313177
    test 227 toOsgr2: 651409,313177
    test 228 toOsgr3: TG 51409 13177
    test 229 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 230 toOsgr4: TG 51409 13177
    test 231 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 232 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 233 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 234 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 235 toOsgr5: 0.001
    test 236 toOsgr5: TG5140900013177000
    test 237 toOsgr5: 651409.000,313177.000
    test 238 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 239 OSGR1: TG 48251 11932
    test 240 OSGR1: [G:TG, E:48251, N:11932]
    test 241 OSGR2: TG 51409 13177
    test 242 OSGR2: [G:TG, E:51409, N:13177]
    test 243 OSGR3: TG 51409 13177
    test 244 OSGR3: [G:TG, E:51409, N:13177]
    test 245 OSGR4: TG 51409 13177
    test 246 OSGR4: [G:TG, E:51409, N:13177]
    test 247 OSGR5: 651409,313177
    test 248 OSGR5: TG51409001317700
    test 249 OSGR5: 651409,313177
    test 250 OSGR5: 651409.000000,313177.000000
    test 251 OSGR5: 651409.00,313177.00
    test 252 OSGR5: [OSGR:651409.000,313177.000]
    test 253 OSGR5: [OSGR:651409,313177]
    test 254 OSGR5: [OSGR:651409.000,313177.000]
    test 255 OSGR5: [OSGR:651,313]
    test 256 OSGR6: 651409.000,313177.000
    test 257 OSGR6: 651409,313177
    test 258 OSGR6: (651409, 313177)
    test 259 OSGR6: 651409,313177
    test 260 OSGR6: 651409,313177
    test 261 OSGR6: (651409, 313177)
    test 262 OSGR6: 651409 313177

    test 263 issue: 38
    test 264 toOsgr: [G:TL, E:29158, N:35174]
    test 265 toOsgr: 529158.072, 235174.785
    test 266 toOsgr: OSGB36
    test 267 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 268 toLatLonOSGB36: OSGB36
    test 269 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 270 toLatLonWGS84 : WGS84

    test 271 Osgr: [G:TQ, E:32014, N:23971]
    test 272 Osgr: 532014.0, 123971.0
    test 273 Osgr: OSGB36
    test 274 toLatLonOSGB36: 50.999425N, 000.118417W
    test 275 toLatLonOSGB36: OSGB36
    test 276 toLatLonWGS84 : 50.999995N, 000.120004W
    test 277 toLatLonWGS84 : WGS84
    test 278 parseOSGR: [G:TQ, E:32014, N:23971]
    test 279 parseOSGR: 532014.0, 123971.0
    test 280 parseOSGR: OSGB36
    test 281 toLatLonOSGB36: 50.999425N, 000.118417W
    test 282 toLatLonOSGB36: OSGB36
    test 283 toLatLonWGS84: 50.999995N, 000.120004W
    test 284 toLatLonWGS84: WGS84
    test 285 toOsgr: [G:TQ, E:32013, N:23971]
    test 286 toOsgr: 532013.969, 123971.046
    test 287 toOsgr: OSGB36
    test 288 toLatLonOSGB36: 50.999426N, 000.118417W
    test 289 toLatLonOSGB36: OSGB36
    test 290 toLatLonWGS84 : 50.999995N, 000.120004W
    test 291 toLatLonWGS84 : WGS84
    test 292 toOsgr: [G:TQ, E:48853, N:24427]
    test 293 toOsgr: 548853.602, 124427.985
    test 294 toOsgr: OSGB36
    test 295 toLatLonOSGB36: 50.999422N, 000.121618E
    test 296 toLatLonOSGB36: OSGB36
    test 297 toLatLonWGS84 : 50.999995N, 000.120004E
    test 298 toLatLonWGS84 : WGS84

    test 299 LatLon: 49.926244°N, 006.297934°W
    test 300 datum: WGS84
    test 301 datum: OSGB36
    test 302 toOsgr: [G:SV, E:91645, N:11753]
    test 303 datum: OSGB36
    test 304 LatLon: 49.926244°N, 006.297934°W
    test 305 datum: WGS84
    test 306 distanceTo: 0.0104

    test 307 prec=-2: [G:SV, E:91600, N:11700]

    test 308 toLatLon: 52.0N, 000.12W
    test 309 toLatLon: 52.0N, 000.12W
    test 310 toLatLon: 52.0N, 000.12W
    test 311 toLatLon: 52.0N, 000.12W
    test 312 toLatLon: 52.0N, 000.12W
    test 313 toLatLon: 52.0N, 000.12W
    test 314 toLatLon: 52.0N, 000.12W
    test 315 toLatLon: 52.0N, 000.12W

    testOSgr(pygeodesy.ellipsoidalExact, 23.04.11)
    test 316 WGS84: 51.4778°N, 000.0016°W
    test 317 OSGB36: 51.477284°N, 000.00002°E
    test 318 WGS84: 51.4778°N, 000.0016°W
    test 319 OSgr1: TG 51409 13177
    test 320 OSgr1: [G:TG, E:51409, N:13177]
    test 321 iteration: None
    test 322 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 323 toLatLon1: 52.657979°N, 001.716052°E
    test 324 iteration: 4
    test 325 toOsgr1: 651409.903,313177.270
    test 326 toOsgr1: 651409.903,313177.270
    test 327 toOsgr1: TG5140990313177270
    test 328 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 329 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 330 iteration: 4
    test 331 toOsgr2: 651409,313177
    test 332 toOsgr2: 651409,313177
    test 333 toOsgr3: TG 51409 13177
    test 334 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 335 toOsgr4: TG 51409 13177
    test 336 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 337 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 338 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 339 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 340 toOsgr5: 0.001
    test 341 toOsgr5: TG5140900013177000
    test 342 toOsgr5: 651409.000,313177.000
    test 343 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 344 OSGR1: TG 48251 11932
    test 345 OSGR1: [G:TG, E:48251, N:11932]
    test 346 OSGR2: TG 51409 13177
    test 347 OSGR2: [G:TG, E:51409, N:13177]
    test 348 OSGR3: TG 51409 13177
    test 349 OSGR3: [G:TG, E:51409, N:13177]
    test 350 OSGR4: TG 51409 13177
    test 351 OSGR4: [G:TG, E:51409, N:13177]
    test 352 OSGR5: 651409,313177
    test 353 OSGR5: TG51409001317700
    test 354 OSGR5: 651409,313177
    test 355 OSGR5: 651409.000000,313177.000000
    test 356 OSGR5: 651409.00,313177.00
    test 357 OSGR5: [OSGR:651409.000,313177.000]
    test 358 OSGR5: [OSGR:651409,313177]
    test 359 OSGR5: [OSGR:651409.000,313177.000]
    test 360 OSGR5: [OSGR:651,313]
    test 361 OSGR6: 651409.000,313177.000
    test 362 OSGR6: 651409,313177
    test 363 OSGR6: (651409, 313177)
    test 364 OSGR6: 651409,313177
    test 365 OSGR6: 651409,313177
    test 366 OSGR6: (651409, 313177)
    test 367 OSGR6: 651409 313177

    test 368 issue: 38
    test 369 toOsgr: [G:TL, E:29158, N:35174]
    test 370 toOsgr: 529158.072, 235174.785
    test 371 toOsgr: OSGB36
    test 372 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 373 toLatLonOSGB36: OSGB36
    test 374 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 375 toLatLonWGS84 : WGS84

    test 376 Osgr: [G:TQ, E:32014, N:23971]
    test 377 Osgr: 532014.0, 123971.0
    test 378 Osgr: OSGB36
    test 379 toLatLonOSGB36: 50.999425N, 000.118417W
    test 380 toLatLonOSGB36: OSGB36
    test 381 toLatLonWGS84 : 50.999995N, 000.120004W
    test 382 toLatLonWGS84 : WGS84
    test 383 parseOSGR: [G:TQ, E:32014, N:23971]
    test 384 parseOSGR: 532014.0, 123971.0
    test 385 parseOSGR: OSGB36
    test 386 toLatLonOSGB36: 50.999425N, 000.118417W
    test 387 toLatLonOSGB36: OSGB36
    test 388 toLatLonWGS84: 50.999995N, 000.120004W
    test 389 toLatLonWGS84: WGS84
    test 390 toOsgr: [G:TQ, E:32013, N:23971]
    test 391 toOsgr: 532013.969, 123971.046
    test 392 toOsgr: OSGB36
    test 393 toLatLonOSGB36: 50.999426N, 000.118417W
    test 394 toLatLonOSGB36: OSGB36
    test 395 toLatLonWGS84 : 50.999995N, 000.120004W
    test 396 toLatLonWGS84 : WGS84
    test 397 toOsgr: [G:TQ, E:48853, N:24427]
    test 398 toOsgr: 548853.602, 124427.985
    test 399 toOsgr: OSGB36
    test 400 toLatLonOSGB36: 50.999422N, 000.121618E
    test 401 toLatLonOSGB36: OSGB36
    test 402 toLatLonWGS84 : 50.999995N, 000.120004E
    test 403 toLatLonWGS84 : WGS84

    test 404 LatLon: 49.926244°N, 006.297934°W
    test 405 datum: WGS84
    test 406 datum: OSGB36
    test 407 toOsgr: [G:SV, E:91645, N:11753]
    test 408 datum: OSGB36
    test 409 LatLon: 49.926244°N, 006.297934°W
    test 410 datum: WGS84
    test 411 distanceTo: 0.0104

    test 412 prec=-2: [G:SV, E:91600, N:11700]

    test 413 toLatLon: 52.0N, 000.12W
    test 414 toLatLon: 52.0N, 000.12W
    test 415 toLatLon: 52.0N, 000.12W
    test 416 toLatLon: 52.0N, 000.12W
    test 417 toLatLon: 52.0N, 000.12W
    test 418 toLatLon: 52.0N, 000.12W
    test 419 toLatLon: 52.0N, 000.12W
    test 420 toLatLon: 52.0N, 000.12W
# lazily imported pygeodesy.ellipsoidalGeodSolve by testOsgr.py line 233

    testOSgr(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 421 WGS84: 51.4778°N, 000.0016°W
    test 422 OSGB36: 51.477284°N, 000.00002°E
    test 423 WGS84: 51.4778°N, 000.0016°W
    test 424 OSgr1: TG 51409 13177
    test 425 OSgr1: [G:TG, E:51409, N:13177]
    test 426 iteration: None
    test 427 toLatLon1: 52°39′28.72″N, 001°42′57.79″E
    test 428 toLatLon1: 52.657979°N, 001.716052°E
    test 429 iteration: 4
    test 430 toOsgr1: 651409.903,313177.270
    test 431 toOsgr1: 651409.903,313177.270
    test 432 toOsgr1: TG5140990313177270
    test 433 toLatLon2: 52°39′27.25″N, 001°43′04.52″E
    test 434 toLatLon2: 52.65757°N, 001.717922°E  FAILED, KNOWN, expected 52.657570°N, 001.717922°E
    test 435 iteration: 4
    test 436 toOsgr2: 651409,313177
    test 437 toOsgr2: 651409,313177
    test 438 toOsgr3: TG 51409 13177
    test 439 toLatLon3: (52.65798, 1.71605, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 440 toOsgr4: TG 51409 13177
    test 441 toLatLon4: (52.657570000, 1.717910000, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 442 toLatLon4: (52.657569999, 1.717910045, Datum(name='OSGB36', ellipsoid=Ellipsoids.Airy1830, transform=Transforms.OSGB36))
    test 443 toLatLon4: (52.657978296, 1.716040366, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 444 toLatLon4: (52.657978295, 1.716040411, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))
    test 445 toOsgr5: 0.001
    test 446 toOsgr5: TG5140900013177000
    test 447 toOsgr5: 651409.000,313177.000
    test 448 toLatLon5: (52.657976595, 1.716038422, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84))

    test 449 OSGR1: TG 48251 11932
    test 450 OSGR1: [G:TG, E:48251, N:11932]
    test 451 OSGR2: TG 51409 13177
    test 452 OSGR2: [G:TG, E:51409, N:13177]
    test 453 OSGR3: TG 51409 13177
    test 454 OSGR3: [G:TG, E:51409, N:13177]
    test 455 OSGR4: TG 51409 13177
    test 456 OSGR4: [G:TG, E:51409, N:13177]
    test 457 OSGR5: 651409,313177
    test 458 OSGR5: TG51409001317700
    test 459 OSGR5: 651409,313177
    test 460 OSGR5: 651409.000000,313177.000000
    test 461 OSGR5: 651409.00,313177.00
    test 462 OSGR5: [OSGR:651409.000,313177.000]
    test 463 OSGR5: [OSGR:651409,313177]
    test 464 OSGR5: [OSGR:651409.000,313177.000]
    test 465 OSGR5: [OSGR:651,313]
    test 466 OSGR6: 651409.000,313177.000
    test 467 OSGR6: 651409,313177
    test 468 OSGR6: (651409, 313177)
    test 469 OSGR6: 651409,313177
    test 470 OSGR6: 651409,313177
    test 471 OSGR6: (651409, 313177)
    test 472 OSGR6: 651409 313177

    test 473 issue: 38
    test 474 toOsgr: [G:TL, E:29158, N:35174]
    test 475 toOsgr: 529158.072, 235174.785
    test 476 toOsgr: OSGB36
    test 477 toLatLonOSGB36: 51°59′58.37″N, 000°07′06.14″W
    test 478 toLatLonOSGB36: OSGB36
    test 479 toLatLonWGS84 : 52°00′00.0″N, 000°07′12.0″W
    test 480 toLatLonWGS84 : WGS84

    test 481 Osgr: [G:TQ, E:32014, N:23971]
    test 482 Osgr: 532014.0, 123971.0
    test 483 Osgr: OSGB36
    test 484 toLatLonOSGB36: 50.999425N, 000.118417W
    test 485 toLatLonOSGB36: OSGB36
    test 486 toLatLonWGS84 : 50.999995N, 000.120004W
    test 487 toLatLonWGS84 : WGS84
    test 488 parseOSGR: [G:TQ, E:32014, N:23971]
    test 489 parseOSGR: 532014.0, 123971.0
    test 490 parseOSGR: OSGB36
    test 491 toLatLonOSGB36: 50.999425N, 000.118417W
    test 492 toLatLonOSGB36: OSGB36
    test 493 toLatLonWGS84: 50.999995N, 000.120004W
    test 494 toLatLonWGS84: WGS84
    test 495 toOsgr: [G:TQ, E:32013, N:23971]
    test 496 toOsgr: 532013.969, 123971.046
    test 497 toOsgr: OSGB36
    test 498 toLatLonOSGB36: 50.999426N, 000.118417W
    test 499 toLatLonOSGB36: OSGB36
    test 500 toLatLonWGS84 : 50.999995N, 000.120004W
    test 501 toLatLonWGS84 : WGS84
    test 502 toOsgr: [G:TQ, E:48853, N:24427]
    test 503 toOsgr: 548853.602, 124427.985
    test 504 toOsgr: OSGB36
    test 505 toLatLonOSGB36: 50.999422N, 000.121618E
    test 506 toLatLonOSGB36: OSGB36
    test 507 toLatLonWGS84 : 50.999995N, 000.120004E
    test 508 toLatLonWGS84 : WGS84

    test 509 LatLon: 49.926244°N, 006.297934°W
    test 510 datum: WGS84
    test 511 datum: OSGB36
    test 512 toOsgr: [G:SV, E:91645, N:11753]
    test 513 datum: OSGB36
    test 514 LatLon: 49.926244°N, 006.297934°W
    test 515 datum: WGS84
    test 516 distanceTo: 0.0104

    test 517 prec=-2: [G:SV, E:91600, N:11700]

    test 518 toLatLon: 52.0N, 000.12W
    test 519 toLatLon: 52.0N, 000.12W
    test 520 toLatLon: 52.0N, 000.12W
    test 521 toLatLon: 52.0N, 000.12W
    test 522 toLatLon: 52.0N, 000.12W
    test 523 toLatLon: 52.0N, 000.12W
    test 524 toLatLon: 52.0N, 000.12W
    test 525 toLatLon: 52.0N, 000.12W

    16 of 525 testOsgr.py tests (3.0%) FAILED, incl. 6 KNOWN plus 10 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 99.854 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testPoints.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testPoints.py line 11
# lazily imported pygeodesy.R_M from .constants by testPoints.py line 11
# lazily imported pygeodesy.R_MA from .constants by testPoints.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testPoints.py line 11
# lazily imported pygeodesy.LatLon2psxy from .points by testPoints.py line 11
# lazily imported pygeodesy.Numpy2LatLon from .points by testPoints.py line 11
# lazily imported pygeodesy.Tuple2LatLon from .points by testPoints.py line 11
# lazily imported pygeodesy.areaOf from .points by testPoints.py line 11
# lazily imported pygeodesy.boundsOf from .points by testPoints.py line 11
# lazily imported pygeodesy.centroidOf from .points by testPoints.py line 11
# lazily imported pygeodesy.classname from .named by testPoints.py line 11
# lazily imported pygeodesy.fstr from .streprs by testPoints.py line 11
# lazily imported pygeodesy.isclockwise from .points by testPoints.py line 11
# lazily imported pygeodesy.isconvex from .points by testPoints.py line 11
# lazily imported pygeodesy.ispolar from .points by testPoints.py line 11
# lazily imported pygeodesy.luneOf from .points by testPoints.py line 11
# lazily imported pygeodesy.nearestOn5 from .points by testPoints.py line 11
# lazily imported pygeodesy.perimeterOf from .points by testPoints.py line 11
# lazily imported pygeodesy.quadOf from .points by testPoints.py line 11
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testPoints.py 23.03.27 (module pygeodesy.points 23.03.30) isLazy=3
    test 1 sizeof(LatLon_.__dict__): 48
    test 2 LatLon2psxy.ABC: True
    test 3 LatLon2psxy.epsilon: 2.220446049250313e-16
    test 4 LatLon2psxy.epsilon: 0.0
    test 5 LatLon2psxy.len: 69
    test 6 LatLon2psxy.iter: 69
    test 7 LatLon2psxy.slice1: 11
    test 8 LatLon2psxy.slice2: <class 'pygeodesy.points.LatLon2psxy'>
    test 9 LatLon2psxy.slice3: (-0.701418, 52.220485, LatLon_(52.220485°N, 000.701418°W))
    test 10 LatLon2psxy.str/repr: LatLon2psxy('[LatLon_(52.220489°N, 000.701206°W) ... ][69]', closed=False, radius=None, wrap=False)
    test 11 LatLon2psxy.find LL: 10
    test 12 LatLon2psxy.find LL: -1
    test 13 LatLon2psxy.count: 1
    test 14 LatLon2psxy.index: 10
    test 15 LatLon2psxy.rfind: 10
    test 16 LatLon2psxy.in: True
    test 17 LatLon2psxy.count: 0
    test 18 LatLon2psxy.find: -1
    test 19 LatLon2psxy.rfind: -1
    test 20 LatLon2psxy.not in: True
    test 21 LatLon2psxy.find LL: 20
    test 22 LatLon2psxy.find LL: -1
    test 23 LatLon2psxy.count: 1
    test 24 LatLon2psxy.index: 20
    test 25 LatLon2psxy.rfind: 20
    test 26 LatLon2psxy.in: True
    test 27 LatLon2psxy.count: 0
    test 28 LatLon2psxy.find: -1
    test 29 LatLon2psxy.rfind: -1
    test 30 LatLon2psxy.not in: True
    test 31 LatLon2psxy.find LL: 30
    test 32 LatLon2psxy.find LL: -1
    test 33 LatLon2psxy.count: 1
    test 34 LatLon2psxy.index: 30
    test 35 LatLon2psxy.rfind: 30
    test 36 LatLon2psxy.in: True
    test 37 LatLon2psxy.count: 0
    test 38 LatLon2psxy.find: -1
    test 39 LatLon2psxy.rfind: -1
    test 40 LatLon2psxy.not in: True
    test 41 LatLon2psxy.find LL: 40
    test 42 LatLon2psxy.find LL: -1
    test 43 LatLon2psxy.count: 1
    test 44 LatLon2psxy.index: 40
    test 45 LatLon2psxy.rfind: 40
    test 46 LatLon2psxy.in: True
    test 47 LatLon2psxy.count: 0
    test 48 LatLon2psxy.find: -1
    test 49 LatLon2psxy.rfind: -1
    test 50 LatLon2psxy.not in: True
    test 51 LatLon2psxy.find LL: 50
    test 52 LatLon2psxy.find LL: -1
    test 53 LatLon2psxy.count: 1
    test 54 LatLon2psxy.index: 50
    test 55 LatLon2psxy.rfind: 50
    test 56 LatLon2psxy.in: True
    test 57 LatLon2psxy.count: 0
    test 58 LatLon2psxy.find: -1
    test 59 LatLon2psxy.rfind: -1
    test 60 LatLon2psxy.not in: True
    test 61 LatLon2psxy.find LL: 60
    test 62 LatLon2psxy.find LL: -1
    test 63 LatLon2psxy.count: 1
    test 64 LatLon2psxy.index: 60
    test 65 LatLon2psxy.rfind: 60
    test 66 LatLon2psxy.in: True
    test 67 LatLon2psxy.count: 0
    test 68 LatLon2psxy.find: -1
    test 69 LatLon2psxy.rfind: -1
    test 70 LatLon2psxy.not in: True
    test 71 LatLon2psxy.enumerate[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 72 LatLon2psxy.enumerate[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 73 LatLon2psxy.enumerate[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 74 LatLon2psxy.enumerate[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 75 LatLon2psxy.enumerate[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 76 LatLon2psxy.enumerate[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 77 LatLon2psxy.enumerate[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 78 LatLon2psxy.enumerate[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 79 LatLon2psxy.enumerate[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 80 LatLon2psxy.enumerate[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 81 LatLon2psxy.enumerate[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 82 LatLon2psxy.enumerate[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 83 LatLon2psxy.enumerate[*]: 11
    test 84 LatLon2psxy.reversed[11]: (-0.704945, 52.240863, LatLon_(52.240863°N, 000.704945°W))
    test 85 LatLon2psxy.reversed[10]: (-0.707042, 52.240745, LatLon_(52.240745°N, 000.707042°W))
    test 86 LatLon2psxy.reversed[9]: (-0.708684, 52.240627, LatLon_(52.240627°N, 000.708684°W))
    test 87 LatLon2psxy.reversed[8]: (-0.710784, 52.239315, LatLon_(52.239315°N, 000.710784°W))
    test 88 LatLon2psxy.reversed[7]: (-0.71233, 52.237495, LatLon_(52.237495°N, 000.71233°W))
    test 89 LatLon2psxy.reversed[6]: (-0.713572, 52.235607, LatLon_(52.235607°N, 000.713572°W))
    test 90 LatLon2psxy.reversed[5]: (-0.714348, 52.234375, LatLon_(52.234375°N, 000.714348°W))
    test 91 LatLon2psxy.reversed[4]: (-0.71486, 52.233013, LatLon_(52.233013°N, 000.71486°W))
    test 92 LatLon2psxy.reversed[3]: (-0.71446, 52.232448, LatLon_(52.232448°N, 000.71446°W))
    test 93 LatLon2psxy.reversed[2]: (-0.71, 52.225944, LatLon_(52.225944°N, 000.71°W))
    test 94 LatLon2psxy.reversed[1]: (-0.705456, 52.221916, LatLon_(52.221916°N, 000.705456°W))
    test 95 LatLon2psxy.reversed[0]: (-0.701206, 52.220489, LatLon_(52.220489°N, 000.701206°W))
    test 96 LatLon2psxy.findall[0]: (0,)
    test 97 LatLon2psxy.findall[1]: (1,)
    test 98 LatLon2psxy.findall[2]: (2,)
    test 99 LatLon2psxy.findall[3]: (3,)
    test 100 LatLon2psxy.findall[4]: (4,)
    test 101 LatLon2psxy.findall[5]: (5,)
    test 102 LatLon2psxy.findall[6]: (6,)
    test 103 LatLon2psxy.findall[7]: (7,)
    test 104 LatLon2psxy.findall[8]: (8,)
    test 105 LatLon2psxy.findall[9]: (9,)
    test 106 LatLon2psxy.findall[10]: (10,)
    test 107 LatLon2psxy.findall[11]: (11,)
    test 108 LatLon2psxy.findall[*]: 11
    test 109 LatLon2psxy.isNumpy2: False
    test 110 LatLon2psxy.isPoints2: True
    test 111 LatLon2psxy.isTuple2: False
    test 112 numpy.__version__: 1.23.3
    test 113 Numpy2LatLon.ABC: True
    test 114 Numpy2LatLon.epsilon: 2.220446049250313e-16
    test 115 Numpy2LatLon.epsilon: 0.0
    test 116 Numpy2LatLon.len: 69
    test 117 Numpy2LatLon.iter: 69
    test 118 Numpy2LatLon.shape: (69, 4)
    test 119 Numpy2LatLon.slice1: 11
    test 120 Numpy2LatLon.slice2: <class 'pygeodesy.points.Numpy2LatLon'>
    test 121 Numpy2LatLon.slice3: 52.220485°N, 000.701418°W
    test 122 Numpy2LatLon.str/repr: Numpy2LatLon('array([[-0.701206, 0. , 52.220489, 0. ]] ... )[69]', ilat=2, ilon=0)
    test 123 Numpy2LatLon.subset: <class 'numpy.ndarray'>
    test 124 Numpy2LatLon.count: 1
    test 125 Numpy2LatLon.index: 10
    test 126 Numpy2LatLon.rfind: 10
    test 127 Numpy2LatLon.in: True
    test 128 Numpy2LatLon.count: 0
    test 129 Numpy2LatLon.find: -1
    test 130 Numpy2LatLon.rfind: -1
    test 131 Numpy2LatLon.not in: True
    test 132 Numpy2LatLon.count: 1
    test 133 Numpy2LatLon.index: 20
    test 134 Numpy2LatLon.rfind: 20
    test 135 Numpy2LatLon.in: True
    test 136 Numpy2LatLon.count: 0
    test 137 Numpy2LatLon.find: -1
    test 138 Numpy2LatLon.rfind: -1
    test 139 Numpy2LatLon.not in: True
    test 140 Numpy2LatLon.count: 1
    test 141 Numpy2LatLon.index: 30
    test 142 Numpy2LatLon.rfind: 30
    test 143 Numpy2LatLon.in: True
    test 144 Numpy2LatLon.count: 0
    test 145 Numpy2LatLon.find: -1
    test 146 Numpy2LatLon.rfind: -1
    test 147 Numpy2LatLon.not in: True
    test 148 Numpy2LatLon.count: 1
    test 149 Numpy2LatLon.index: 40
    test 150 Numpy2LatLon.rfind: 40
    test 151 Numpy2LatLon.in: True
    test 152 Numpy2LatLon.count: 0
    test 153 Numpy2LatLon.find: -1
    test 154 Numpy2LatLon.rfind: -1
    test 155 Numpy2LatLon.not in: True
    test 156 Numpy2LatLon.count: 1
    test 157 Numpy2LatLon.index: 50
    test 158 Numpy2LatLon.rfind: 50
    test 159 Numpy2LatLon.in: True
    test 160 Numpy2LatLon.count: 0
    test 161 Numpy2LatLon.find: -1
    test 162 Numpy2LatLon.rfind: -1
    test 163 Numpy2LatLon.not in: True
    test 164 Numpy2LatLon.count: 1
    test 165 Numpy2LatLon.index: 60
    test 166 Numpy2LatLon.rfind: 60
    test 167 Numpy2LatLon.in: True
    test 168 Numpy2LatLon.count: 0
    test 169 Numpy2LatLon.find: -1
    test 170 Numpy2LatLon.rfind: -1
    test 171 Numpy2LatLon.not in: True
    test 172 Numpy2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 173 Numpy2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 174 Numpy2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 175 Numpy2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 176 Numpy2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 177 Numpy2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 178 Numpy2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 179 Numpy2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 180 Numpy2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 181 Numpy2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 182 Numpy2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 183 Numpy2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 184 Numpy2LatLon.enumerate[*]: 11
    test 185 Numpy2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 186 Numpy2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 187 Numpy2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 188 Numpy2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 189 Numpy2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 190 Numpy2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 191 Numpy2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 192 Numpy2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 193 Numpy2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 194 Numpy2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 195 Numpy2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 196 Numpy2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 197 Numpy2LatLon.findall[0]: (0,)
    test 198 Numpy2LatLon.findall[1]: (1,)
    test 199 Numpy2LatLon.findall[2]: (2,)
    test 200 Numpy2LatLon.findall[3]: (3,)
    test 201 Numpy2LatLon.findall[4]: (4,)
    test 202 Numpy2LatLon.findall[5]: (5,)
    test 203 Numpy2LatLon.findall[6]: (6,)
    test 204 Numpy2LatLon.findall[7]: (7,)
    test 205 Numpy2LatLon.findall[8]: (8,)
    test 206 Numpy2LatLon.findall[9]: (9,)
    test 207 Numpy2LatLon.findall[10]: (10,)
    test 208 Numpy2LatLon.findall[11]: (11,)
    test 209 Numpy2LatLon.findall[*]: 11
    test 210 Numpy2LatLon.isNumpy2: True
    test 211 Numpy2LatLon.isPoints2: False
    test 212 Numpy2LatLon.isTuple2: False
    test 213 Tuple2LatLon.ABC: True
    test 214 Tuple2LatLon.epsilon: 2.220446049250313e-16
    test 215 Tuple2LatLon.epsilon: 0.0
    test 216 Tuple2LatLon.len: 69
    test 217 Tuple2LatLon.iter: 69
    test 218 Tuple2LatLon.slice1: 11
    test 219 Tuple2LatLon.slice2: <class 'pygeodesy.points.Tuple2LatLon'>
    test 220 Tuple2LatLon.slice3: 52.220485°N, 000.701418°W
    test 221 Tuple2LatLon.str/repr: Tuple2LatLon('[(0, -0.701206, 0, 52.220489) ... ][69]', ilat=3, ilon=1)
    test 222 Tuple2LatLon.subset: <class 'list'>
    test 223 Tuple2LatLon.count: 1
    test 224 Tuple2LatLon.index: 10
    test 225 Tuple2LatLon.rfind: 10
    test 226 Tuple2LatLon.in: True
    test 227 Tuple2LatLon.count: 0
    test 228 Tuple2LatLon.find: -1
    test 229 Tuple2LatLon.rfind: -1
    test 230 Tuple2LatLon.not in: True
    test 231 Tuple2LatLon.count: 1
    test 232 Tuple2LatLon.index: 20
    test 233 Tuple2LatLon.rfind: 20
    test 234 Tuple2LatLon.in: True
    test 235 Tuple2LatLon.count: 0
    test 236 Tuple2LatLon.find: -1
    test 237 Tuple2LatLon.rfind: -1
    test 238 Tuple2LatLon.not in: True
    test 239 Tuple2LatLon.count: 1
    test 240 Tuple2LatLon.index: 30
    test 241 Tuple2LatLon.rfind: 30
    test 242 Tuple2LatLon.in: True
    test 243 Tuple2LatLon.count: 0
    test 244 Tuple2LatLon.find: -1
    test 245 Tuple2LatLon.rfind: -1
    test 246 Tuple2LatLon.not in: True
    test 247 Tuple2LatLon.count: 1
    test 248 Tuple2LatLon.index: 40
    test 249 Tuple2LatLon.rfind: 40
    test 250 Tuple2LatLon.in: True
    test 251 Tuple2LatLon.count: 0
    test 252 Tuple2LatLon.find: -1
    test 253 Tuple2LatLon.rfind: -1
    test 254 Tuple2LatLon.not in: True
    test 255 Tuple2LatLon.count: 1
    test 256 Tuple2LatLon.index: 50
    test 257 Tuple2LatLon.rfind: 50
    test 258 Tuple2LatLon.in: True
    test 259 Tuple2LatLon.count: 0
    test 260 Tuple2LatLon.find: -1
    test 261 Tuple2LatLon.rfind: -1
    test 262 Tuple2LatLon.not in: True
    test 263 Tuple2LatLon.count: 1
    test 264 Tuple2LatLon.index: 60
    test 265 Tuple2LatLon.rfind: 60
    test 266 Tuple2LatLon.in: True
    test 267 Tuple2LatLon.count: 0
    test 268 Tuple2LatLon.find: -1
    test 269 Tuple2LatLon.rfind: -1
    test 270 Tuple2LatLon.not in: True
    test 271 Tuple2LatLon.enumerate[0]: 52.220489°N, 000.701206°W
    test 272 Tuple2LatLon.enumerate[1]: 52.221916°N, 000.705456°W
    test 273 Tuple2LatLon.enumerate[2]: 52.225944°N, 000.71°W
    test 274 Tuple2LatLon.enumerate[3]: 52.232448°N, 000.71446°W
    test 275 Tuple2LatLon.enumerate[4]: 52.233013°N, 000.71486°W
    test 276 Tuple2LatLon.enumerate[5]: 52.234375°N, 000.714348°W
    test 277 Tuple2LatLon.enumerate[6]: 52.235607°N, 000.713572°W
    test 278 Tuple2LatLon.enumerate[7]: 52.237495°N, 000.71233°W
    test 279 Tuple2LatLon.enumerate[8]: 52.239315°N, 000.710784°W
    test 280 Tuple2LatLon.enumerate[9]: 52.240627°N, 000.708684°W
    test 281 Tuple2LatLon.enumerate[10]: 52.240745°N, 000.707042°W
    test 282 Tuple2LatLon.enumerate[11]: 52.240863°N, 000.704945°W
    test 283 Tuple2LatLon.enumerate[*]: 11
    test 284 Tuple2LatLon.reversed[11]: 52.240863°N, 000.704945°W
    test 285 Tuple2LatLon.reversed[10]: 52.240745°N, 000.707042°W
    test 286 Tuple2LatLon.reversed[9]: 52.240627°N, 000.708684°W
    test 287 Tuple2LatLon.reversed[8]: 52.239315°N, 000.710784°W
    test 288 Tuple2LatLon.reversed[7]: 52.237495°N, 000.71233°W
    test 289 Tuple2LatLon.reversed[6]: 52.235607°N, 000.713572°W
    test 290 Tuple2LatLon.reversed[5]: 52.234375°N, 000.714348°W
    test 291 Tuple2LatLon.reversed[4]: 52.233013°N, 000.71486°W
    test 292 Tuple2LatLon.reversed[3]: 52.232448°N, 000.71446°W
    test 293 Tuple2LatLon.reversed[2]: 52.225944°N, 000.71°W
    test 294 Tuple2LatLon.reversed[1]: 52.221916°N, 000.705456°W
    test 295 Tuple2LatLon.reversed[0]: 52.220489°N, 000.701206°W
    test 296 Tuple2LatLon.findall[0]: (0,)
    test 297 Tuple2LatLon.findall[1]: (1,)
    test 298 Tuple2LatLon.findall[2]: (2,)
    test 299 Tuple2LatLon.findall[3]: (3,)
    test 300 Tuple2LatLon.findall[4]: (4,)
    test 301 Tuple2LatLon.findall[5]: (5,)
    test 302 Tuple2LatLon.findall[6]: (6,)
    test 303 Tuple2LatLon.findall[7]: (7,)
    test 304 Tuple2LatLon.findall[8]: (8,)
    test 305 Tuple2LatLon.findall[9]: (9,)
    test 306 Tuple2LatLon.findall[10]: (10,)
    test 307 Tuple2LatLon.findall[11]: (11,)
    test 308 Tuple2LatLon.findall[*]: 11
    test 309 Tuple2LatLon.isNumpy2: False
    test 310 Tuple2LatLon.isPoints2: False
    test 311 Tuple2LatLon.isTuple2: True
# lazily imported pygeodesy.ellipsoidalExact by testPoints.py line 281
# lazily imported pygeodesy.ellipsoidalKarney by testPoints.py line 281
# lazily imported pygeodesy.ellipsoidalNvector by testPoints.py line 281
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testPoints.py line 281
# lazily imported pygeodesy.sphericalNvector by testPoints.py line 281

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.points.LatLon_'>)
    test 312 areaOf: 8.811228e+09
    test 313 centroidOf: 45.5, 1.5
    test 314 perimeterOf: 2.673633e+05
    test 315 isclockwise: False
    test 316 isconvex: True
    test 317 ispolar: False
    test 318 areaOf: 7.086883e+09
    test 319 perimeterOf: 2.687460e+05
    test 320 centroidOf: 0.333333, 0.333333
    test 321 isclockwise: True
    test 322 isconvex: True
    test 323 ispolar: False
    test 324 areaOf: 2.827856e+10
    test 325 perimeterOf: 4.717039e+05
    test 326 centroidOf: 1.0, 1.0
    test 327 isclockwise: False
    test 328 isconvex: True
    test 329 ispolar: False
    test 330 areaOf: 2.747297e+13
    test 331 perimeterOf: 2.332643e+07
    test 332 centroidOf: 52.113, 102.123
    test 333 isclockwise: False
    test 334 isconvex: False
    test 335 ispolar: True
    test 336 areaOf: 8.482014e+10
    test 337 perimeterOf: 1.334104e+06
    test 338 centroidOf: 1.167, 1.667
    test 339 isclockwise: False
    test 340 isconvex: False
    test 341 ispolar: False
    test 342 areaOf: 5.151974e+13
    test 343 perimeterOf: 2.638608e+07
    test 344 centroidOf: -19.444, -133.333
    test 345 isclockwise: True
    test 346 isconvex: True
    test 347 ispolar: False
    test 348 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 349 perimeterOf: 1.562029e+07
    test 350 centroidOf: -71.443, -69.683
    test 351 isclockwise: True
    test 352 isconvex: False
    test 353 ispolar: True
    test 354 points2: 18
    test 355 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 356 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 357 isclockwise: True
    test 358 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 359 boundsOf: (-77.9, -163.0, -63.1, 172.0)
    test 360 quadOf: 77.9°S, 163.0°W, 63.1°S, 163.0°W, 63.1°S, 172.0°E, 77.9°S, 172.0°E
    test 361 intermediateTo: 51.368°N, 000.677°E, 'intermediateTo'
    test 362 intermediateTo: True
    test 363 intermediateTo: 51.368°N, 000.677°E
    test 364 intermediateTo: 52.205°N, 000.119°E
    test 365 intermediateTo: 48.857°N, 002.351°E
    test 366 _isLatLon_: _Array2LatLon('[ ... ][1]', ilat=0, ilon=1)
    test 367 latlon: (-66.6, -88.0)
    test 368 philam: (-1.162389, -1.53589)
    test 369 toStr: 66.6°S, 088.0°W, kwds='test'
    test 370 __ne__: False
    test 371 isequalTo: True
    test 372 isequalTo: True
    test 373 latlonheight: (-66.6, -88.0, 0)
    test 374 philamheight: (-1.162389, -1.53589, 0)
    test 375 _N_vector: (0.01386, -0.39691, -0.91775)
    test 376 toNvector: (0.01386, -0.39691, -0.91775)
    test 377 toNvector: (0.01386, -0.396906, -0.917755, 0)  FAILED, KNOWN, expected (0.01386, -0.396906, -0.917755)
    test 378 classof: 66.6°S, 088.0°W
    test 379 others: 66.6°S, 088.0°W
    test 380 copy(LatLon_): (<class 'pygeodesy.points.LatLon_'>, True)
    test 381 LatLon_.copy(): (<class 'pygeodesy.points.LatLon_'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.sphericalNvector.LatLon'>)
    test 382 areaOf: 8.811228e+09
    test 383 centroidOf: 45.5, 1.5
    test 384 perimeterOf: 2.673633e+05
    test 385 isclockwise: False
    test 386 isconvex: True
    test 387 ispolar: False
    test 388 areaOf: 7.086883e+09
    test 389 perimeterOf: 2.687460e+05
    test 390 centroidOf: 0.333333, 0.333333
    test 391 isclockwise: True
    test 392 isconvex: True
    test 393 ispolar: False
    test 394 areaOf: 2.827856e+10
    test 395 perimeterOf: 4.717039e+05
    test 396 centroidOf: 1.0, 1.0
    test 397 isclockwise: False
    test 398 isconvex: True
    test 399 ispolar: False
    test 400 areaOf: 2.747297e+13
    test 401 perimeterOf: 2.332643e+07
    test 402 centroidOf: 52.113, 102.123
    test 403 isclockwise: False
    test 404 isconvex: False
    test 405 ispolar: True
    test 406 areaOf: 8.482014e+10
    test 407 perimeterOf: 1.334104e+06
    test 408 centroidOf: 1.167, 1.667
    test 409 isclockwise: False
    test 410 isconvex: False
    test 411 ispolar: False
    test 412 areaOf: 5.151974e+13
    test 413 perimeterOf: 2.638608e+07
    test 414 centroidOf: -19.444, -133.333
    test 415 isclockwise: True
    test 416 isconvex: True
    test 417 ispolar: False
    test 418 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 419 perimeterOf: 1.562029e+07
    test 420 centroidOf: -71.443, -69.683
    test 421 isclockwise: True
    test 422 isconvex: False
    test 423 ispolar: True
    test 424 points2: 18
    test 425 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 426 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 427 isclockwise: True
    test 428 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 429 latlon: (-66.6, -88.0)
    test 430 philam: (-1.162389, -1.53589)
    test 431 latlonheight: (-66.6, -88.0, 0)
    test 432 philamheight: (-1.162389, -1.53589, 0)
    test 433 _N_vector: (0.01386, -0.39691, -0.91775)
    test 434 toNvector: (0.01386, -0.39691, -0.91775)
    test 435 toNvector: (0.01386, -0.396906, -0.917755)
    test 436 classof: 66.6°S, 088.0°W
    test 437 others: 66.6°S, 088.0°W
    test 438 copy(LatLon): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)
    test 439 LatLon.copy(): (<class 'pygeodesy.sphericalNvector.LatLon'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.sphericalTrigonometry.LatLon'>)
    test 440 areaOf: 8.811228e+09
    test 441 centroidOf: 45.5, 1.5
    test 442 perimeterOf: 2.673633e+05
    test 443 isclockwise: False
    test 444 isconvex: True
    test 445 ispolar: False
    test 446 areaOf: 7.086883e+09
    test 447 perimeterOf: 2.687460e+05
    test 448 centroidOf: 0.333333, 0.333333
    test 449 isclockwise: True
    test 450 isconvex: True
    test 451 ispolar: False
    test 452 areaOf: 2.827856e+10
    test 453 perimeterOf: 4.717039e+05
    test 454 centroidOf: 1.0, 1.0
    test 455 isclockwise: False
    test 456 isconvex: True
    test 457 ispolar: False
    test 458 areaOf: 2.747297e+13
    test 459 perimeterOf: 2.332643e+07
    test 460 centroidOf: 52.113, 102.123
    test 461 isclockwise: False
    test 462 isconvex: False
    test 463 ispolar: True
    test 464 areaOf: 8.482014e+10
    test 465 perimeterOf: 1.334104e+06
    test 466 centroidOf: 1.167, 1.667
    test 467 isclockwise: False
    test 468 isconvex: False
    test 469 ispolar: False
    test 470 areaOf: 5.151974e+13
    test 471 perimeterOf: 2.638608e+07
    test 472 centroidOf: -19.444, -133.333
    test 473 isclockwise: True
    test 474 isconvex: True
    test 475 ispolar: False
    test 476 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 477 perimeterOf: 1.562029e+07
    test 478 centroidOf: -71.443, -69.683
    test 479 isclockwise: True
    test 480 isconvex: False
    test 481 ispolar: True
    test 482 points2: 18
    test 483 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 484 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 485 isclockwise: True
    test 486 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 487 latlon: (-66.6, -88.0)
    test 488 philam: (-1.162389, -1.53589)
    test 489 latlonheight: (-66.6, -88.0, 0)
    test 490 philamheight: (-1.162389, -1.53589, 0)
    test 491 _N_vector: (0.01386, -0.39691, -0.91775)
    test 492 toNvector: (0.01386, -0.39691, -0.91775)
    test 493 toNvector: (0.01386, -0.396906, -0.917755)
    test 494 classof: 66.6°S, 088.0°W
    test 495 others: 66.6°S, 088.0°W
    test 496 copy(LatLon): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)
    test 497 LatLon.copy(): (<class 'pygeodesy.sphericalTrigonometry.LatLon'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.ellipsoidalNvector.LatLon'>)
    test 498 areaOf: 8.811228e+09
    test 499 centroidOf: 45.5, 1.5
    test 500 perimeterOf: 2.673633e+05
    test 501 isclockwise: False
    test 502 isconvex: True
    test 503 ispolar: False
    test 504 areaOf: 7.086883e+09
    test 505 perimeterOf: 2.687460e+05
    test 506 centroidOf: 0.333333, 0.333333
    test 507 isclockwise: True
    test 508 isconvex: True
    test 509 ispolar: False
    test 510 areaOf: 2.827856e+10
    test 511 perimeterOf: 4.717039e+05
    test 512 centroidOf: 1.0, 1.0
    test 513 isclockwise: False
    test 514 isconvex: True
    test 515 ispolar: False
    test 516 areaOf: 2.747297e+13
    test 517 perimeterOf: 2.332643e+07
    test 518 centroidOf: 52.113, 102.123
    test 519 isclockwise: False
    test 520 isconvex: False
    test 521 ispolar: True
    test 522 areaOf: 8.482014e+10
    test 523 perimeterOf: 1.334104e+06
    test 524 centroidOf: 1.167, 1.667
    test 525 isclockwise: False
    test 526 isconvex: False
    test 527 ispolar: False
    test 528 areaOf: 5.151974e+13
    test 529 perimeterOf: 2.638608e+07
    test 530 centroidOf: -19.444, -133.333
    test 531 isclockwise: True
    test 532 isconvex: True
    test 533 ispolar: False
    test 534 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 535 perimeterOf: 1.562029e+07
    test 536 centroidOf: -71.443, -69.683
    test 537 isclockwise: True
    test 538 isconvex: False
    test 539 ispolar: True
    test 540 points2: 18
    test 541 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 542 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 543 isclockwise: True
    test 544 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 545 latlon: (-66.6, -88.0)
    test 546 philam: (-1.162389, -1.53589)
    test 547 latlonheight: (-66.6, -88.0, 0)
    test 548 philamheight: (-1.162389, -1.53589, 0)
    test 549 _N_vector: (0.01386, -0.39691, -0.91775)
    test 550 toNvector: (0.01386, -0.39691, -0.91775)
    test 551 toNvector: (0.01386, -0.396906, -0.917755)
    test 552 classof: 66.6°S, 088.0°W
    test 553 others: 66.6°S, 088.0°W
    test 554 copy(LatLon): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)
    test 555 LatLon.copy(): (<class 'pygeodesy.ellipsoidalNvector.LatLon'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.ellipsoidalVincenty.LatLon'>)
    test 556 areaOf: 8.811228e+09
    test 557 centroidOf: 45.5, 1.5
    test 558 perimeterOf: 2.673633e+05
    test 559 isclockwise: False
    test 560 isconvex: True
    test 561 ispolar: False
    test 562 areaOf: 7.086883e+09
    test 563 perimeterOf: 2.687460e+05
    test 564 centroidOf: 0.333333, 0.333333
    test 565 isclockwise: True
    test 566 isconvex: True
    test 567 ispolar: False
    test 568 areaOf: 2.827856e+10
    test 569 perimeterOf: 4.717039e+05
    test 570 centroidOf: 1.0, 1.0
    test 571 isclockwise: False
    test 572 isconvex: True
    test 573 ispolar: False
    test 574 areaOf: 2.747297e+13
    test 575 perimeterOf: 2.332643e+07
    test 576 centroidOf: 52.113, 102.123
    test 577 isclockwise: False
    test 578 isconvex: False
    test 579 ispolar: True
    test 580 areaOf: 8.482014e+10
    test 581 perimeterOf: 1.334104e+06
    test 582 centroidOf: 1.167, 1.667
    test 583 isclockwise: False
    test 584 isconvex: False
    test 585 ispolar: False
    test 586 areaOf: 5.151974e+13
    test 587 perimeterOf: 2.638608e+07
    test 588 centroidOf: -19.444, -133.333
    test 589 isclockwise: True
    test 590 isconvex: True
    test 591 ispolar: False
    test 592 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 593 perimeterOf: 1.562029e+07
    test 594 centroidOf: -71.443, -69.683
    test 595 isclockwise: True
    test 596 isconvex: False
    test 597 ispolar: True
    test 598 points2: 18
    test 599 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 600 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 601 isclockwise: True
    test 602 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 603 latlon: (-66.6, -88.0)
    test 604 philam: (-1.162389, -1.53589)
    test 605 latlonheight: (-66.6, -88.0, 0)
    test 606 philamheight: (-1.162389, -1.53589, 0)
    test 607 _N_vector: (0.01386, -0.39691, -0.91775)
    test 608 toNvector: (0.01386, -0.39691, -0.91775)
    test 609 toNvector: (0.01386, -0.396906, -0.917755)
    test 610 classof: 66.6°S, 088.0°W
    test 611 others: 66.6°S, 088.0°W
    test 612 copy(LatLon): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)
    test 613 LatLon.copy(): (<class 'pygeodesy.ellipsoidalVincenty.LatLon'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.ellipsoidalKarney.LatLon'>)
    test 614 areaOf: 8.811228e+09
    test 615 centroidOf: 45.5, 1.5
    test 616 perimeterOf: 2.673633e+05
    test 617 isclockwise: False
    test 618 isconvex: True
    test 619 ispolar: False
    test 620 areaOf: 7.086883e+09
    test 621 perimeterOf: 2.687460e+05
    test 622 centroidOf: 0.333333, 0.333333
    test 623 isclockwise: True
    test 624 isconvex: True
    test 625 ispolar: False
    test 626 areaOf: 2.827856e+10
    test 627 perimeterOf: 4.717039e+05
    test 628 centroidOf: 1.0, 1.0
    test 629 isclockwise: False
    test 630 isconvex: True
    test 631 ispolar: False
    test 632 areaOf: 2.747297e+13
    test 633 perimeterOf: 2.332643e+07
    test 634 centroidOf: 52.113, 102.123
    test 635 isclockwise: False
    test 636 isconvex: False
    test 637 ispolar: True
    test 638 areaOf: 8.482014e+10
    test 639 perimeterOf: 1.334104e+06
    test 640 centroidOf: 1.167, 1.667
    test 641 isclockwise: False
    test 642 isconvex: False
    test 643 ispolar: False
    test 644 areaOf: 5.151974e+13
    test 645 perimeterOf: 2.638608e+07
    test 646 centroidOf: -19.444, -133.333
    test 647 isclockwise: True
    test 648 isconvex: True
    test 649 ispolar: False
    test 650 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 651 perimeterOf: 1.562029e+07
    test 652 centroidOf: -71.443, -69.683
    test 653 isclockwise: True
    test 654 isconvex: False
    test 655 ispolar: True
    test 656 points2: 18
    test 657 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 658 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 659 isclockwise: True
    test 660 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2099854.381923
    test 661 latlon: (-66.6, -88.0)
    test 662 philam: (-1.162389, -1.53589)
    test 663 latlonheight: (-66.6, -88.0, 0)
    test 664 philamheight: (-1.162389, -1.53589, 0)
    test 665 _N_vector: (0.01386, -0.39691, -0.91775)
    test 666 toNvector: (0.01386, -0.39691, -0.91775)
    test 667 toNvector: (0.01386, -0.396906, -0.917755)
    test 668 classof: 66.6°S, 088.0°W
    test 669 others: 66.6°S, 088.0°W
    test 670 copy(LatLon): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)
    test 671 LatLon.copy(): (<class 'pygeodesy.ellipsoidalKarney.LatLon'>, True)

    testing(pygeodesy.points, 23.03.30, LatLon=<class 'pygeodesy.ellipsoidalExact.LatLon'>)
    test 672 areaOf: 8.811228e+09
    test 673 centroidOf: 45.5, 1.5
    test 674 perimeterOf: 2.673633e+05
    test 675 isclockwise: False
    test 676 isconvex: True
    test 677 ispolar: False
    test 678 areaOf: 7.086883e+09
    test 679 perimeterOf: 2.687460e+05
    test 680 centroidOf: 0.333333, 0.333333
    test 681 isclockwise: True
    test 682 isconvex: True
    test 683 ispolar: False
    test 684 areaOf: 2.827856e+10
    test 685 perimeterOf: 4.717039e+05
    test 686 centroidOf: 1.0, 1.0
    test 687 isclockwise: False
    test 688 isconvex: True
    test 689 ispolar: False
    test 690 areaOf: 2.747297e+13
    test 691 perimeterOf: 2.332643e+07
    test 692 centroidOf: 52.113, 102.123
    test 693 isclockwise: False
    test 694 isconvex: False
    test 695 ispolar: True
    test 696 areaOf: 8.482014e+10
    test 697 perimeterOf: 1.334104e+06
    test 698 centroidOf: 1.167, 1.667
    test 699 isclockwise: False
    test 700 isconvex: False
    test 701 ispolar: False
    test 702 areaOf: 5.151974e+13
    test 703 perimeterOf: 2.638608e+07
    test 704 centroidOf: -19.444, -133.333
    test 705 isclockwise: True
    test 706 isconvex: True
    test 707 ispolar: False
    test 708 areaOf: 1.751694e+12  FAILED, KNOWN, expected 4.469277e+12
    test 709 perimeterOf: 1.562029e+07
    test 710 centroidOf: -71.443, -69.683
    test 711 isclockwise: True
    test 712 isconvex: False
    test 713 ispolar: True
    test 714 points2: 18
    test 715 nearestOn5: (-77.455114, -16.67063, 4.134666, 307.988253, 0)
    test 716 areaCO: 2.83192062868e+11  FAILED, KNOWN, expected 2.69601367661e+11
    test 717 isclockwise: True
    test 718 perimeterCO: 2098630.956053  FAILED, KNOWN, expected 2098430.887891
    test 719 latlon: (-66.6, -88.0)
    test 720 philam: (-1.162389, -1.53589)
    test 721 latlonheight: (-66.6, -88.0, 0)
    test 722 philamheight: (-1.162389, -1.53589, 0)
    test 723 _N_vector: (0.01386, -0.39691, -0.91775)
    test 724 toNvector: (0.01386, -0.39691, -0.91775)
    test 725 toNvector: (0.01386, -0.396906, -0.917755)
    test 726 classof: 66.6°S, 088.0°W
    test 727 others: 66.6°S, 088.0°W
    test 728 copy(LatLon): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)
    test 729 LatLon.copy(): (<class 'pygeodesy.ellipsoidalExact.LatLon'>, True)

    testArea(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 730 luneOf: 1.27516405431022e+14

    testArea(pygeodesy.ellipsoidalExact, 23.04.11)
    test 731 luneOf: 1.27516405431022e+14
# lazily imported pygeodesy.ellipsoidalGeodSolve by testPoints.py line 298

    testArea(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 732 luneOf: 1.27516405431022e+14

    22 of 732 testPoints.py tests (3.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 750.476 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testProps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Property from .props by testProps.py line 11
# lazily imported pygeodesy.Property_RO from .props by testProps.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testProps.py line 149
# lazily imported pygeodesy.R_M from .constants by testProps.py line 149

    testing testProps.py 23.03.27 isLazy=3

    test<class 'pygeodesy.named._NamedBase'>(pygeodesy.props, 22.09.23)
    test 1 P1: 1
    test 2 p1: 2
    test 3 P2: 1
    test 4 p2: 3
    test 5 q1: 1
    test 6 q2: 2
    test 7 q3: True
    test 8 u1: None
    test 9 u2: U
    test 10 P3: 4
    test 11 p3: 5
    test 12 q4: False
    test 13 q5: 2
    test 14 u3: None
    test 15 u4: U
    test 16 X1: immutable Property_RO: X.setter X
    test 17 X2: invalid Property_RO: X.deleter X
    test 18 y1: immutable property_RO: y.setter y
    test 19 y2: invalid property_RO: y.deleter y
    test 20 Z1: invalid Property: Z.deleter Z
    test 21 Z2: invalid Property: Z.getter Z

    test<class 'pygeodesy.ellipsoids.Ellipsoid'>(pygeodesy.props, 22.09.23)
    test 22 P1: 1
    test 23 p1: 2
    test 24 P2: 1
    test 25 p2: 3
    test 26 q1: 1
    test 27 q2: 2
    test 28 q3: True
    test 29 u1: None
    test 30 u2: U
    test 31 P3: 4
    test 32 p3: 5
    test 33 q4: False
    test 34 q5: 2
    test 35 u3: None
    test 36 u4: U
    test 37 X1: immutable Property_RO: X.setter X
    test 38 X2: invalid Property_RO: X.deleter X
    test 39 y1: immutable property_RO: y.setter y
    test 40 y2: invalid property_RO: y.deleter y
    test 41 Z1: invalid Property: Z.deleter Z
    test 42 Z2: invalid Property: Z.getter Z

    all 42 testProps.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 476.837 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testResections.py
./test/testResections.py:39: DeprecationWarning: method L{__main__.Cartesian_.collins} has been DEPRECATED, use method L{collins5}.
  self.test(collins.__name__, C_(A).collins(C, B, 109.5125, 115.0889), t, nl=1)  # DEPRECATED
./test/testResections.py:55: DeprecationWarning: method L{__main__.Cartesian_.tienstra} has been DEPRECATED, use method L{tienstra7}.
  self.test(tienstra.__name__, C_(A).tienstra(B, C, 115.0889, None, 109.5125), t, nl=1)  # DEPRECATED
./test/testResections.py:64: DeprecationWarning: function L{pygeodesy.deprecated.collins} has been DEPRECATED, use function L{pygeodesy.collins5}.
  self.test(collins.__name__, collins(A, C, B, 109.3, 115.1), t, nl=1)  # DEPRECATED
./test/testResections.py:72: DeprecationWarning: function L{pygeodesy.deprecated.tienstra} has been DEPRECATED, use function L{pygeodesy.tienstra7}.
  self.test(tienstra.__name__, tienstra(A, B, C, 115.1, beta=135.6, gamma=109.3), t, nl=1)  # DEPRECATED
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS0 from .constants by testResections.py line 11
# lazily imported pygeodesy.PI from .constants by testResections.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testResections.py line 11
# lazily imported pygeodesy.cassini from .resections by testResections.py line 11
# lazily imported pygeodesy.collins5 from .resections by testResections.py line 11
# lazily imported pygeodesy.fstr from .streprs by testResections.py line 11
# lazily imported pygeodesy.pierlot from .resections by testResections.py line 11
# lazily imported pygeodesy.snellius3 from .resections by testResections.py line 11
# lazily imported pygeodesy.tienstra7 from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle from .resections by testResections.py line 11
# lazily imported pygeodesy.triAngle4 from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide2 from .resections by testResections.py line 11
# lazily imported pygeodesy.triSide4 from .resections by testResections.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testResections.py line 11
# lazily imported pygeodesy.wildberger3 from .resections by testResections.py line 11
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241
# lazily imported pygeodesy.collins from .deprecated by testResections.py line 11
# lazily imported pygeodesy.tienstra from .deprecated by testResections.py line 11

    testing testResections.py 23.03.27 isLazy=3
    test 1 cassini: (2128.3903, 5578.1443, 0)
    test 2 cassini: Cartesian_(2128.3903, 5578.1443, 0)

    test 3 collins5: (2128.3903, 5578.1443, 0)
    test 4 collins5: (1830.5948, 2576.2429, 0)
    test 5 collins5: 1581.1388, 1562.0499, 2121.3203
    test 6 collins5: Cartesian_(2128.3903, 5578.1443, 0)
    test 7 collins5: Cartesian_(1830.5948, 2576.2429, 0)
    test 8 collins5: 1581.1388, 1562.0499, 2121.3203
    test 9 collins5: 1581.1388, 1562.0499, 2121.3203

    test 10 collins: (Cartesian_(2128.39, 5578.144, 0), Cartesian_(1830.595, 2576.243, 0), 1581.13883, 1562.049935, 2121.320344)

    test 11 pierlot: (2128.3903, 5578.1443, 0)
    test 12 pierlot: Cartesian_(2128.3903, 5578.1443, 0)
    test 13 pierlot: Cartesian_(2128.3903, 5578.1443, 0.0)

    test 14 tienstra7: (2128.3903, 5578.1443, 0)
    test 15 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499
    test 16 tienstra7: Cartesian_(2128.3903, 5578.1443, 0)
    test 17 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 18 tienstra: (Cartesian_(2128.39, 5578.144, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 19 cassini: (2129.3018, 5575.8016, 0)

    test 20 collins5: (2129.3018, 5575.8016, 0)
    test 21 collins5: (1835.1911, 2563.0708, 0)
    test 22 collins5: 1581.1388, 1562.0499, 2121.3203

    test 23 collins: (Vector3d(2129.30185, 5575.80164, 0), Vector3d(1835.19112, 2563.07083, 0), 1581.13883, 1562.049935, 2121.320344)

    test 24 pierlot: (2129.3018, 5575.8016, 0)

    test 25 tienstra7: (2129.3018, 5575.8016, 0)
    test 26 tienstra7: 47.9357, 84.8896, 47.1747, 1581.1388, 2121.3203, 1562.0499

    test 27 tienstra: (Vector3d(2129.30185, 5575.80164, 0), 47.935673, 84.889582, 47.174744, 1581.13883, 2121.320344, 1562.049935)

    test 28 triSide4: (10.0, 30.0, 0.785398, 8.840862)

    test 29 snellius3: (17.54582, 38.564239, 46.317675)
    test 30 snellius3: (844.880591, 571.107418, 835.462796)
    test 31 snellius3: (128.557522, 100.0, 187.938524)
    test 32 snellius3: (567.480866, 847.344375, 832.446688)
    test 33 snellius3: (4064.197388, 3652.539386, 4988.197388)

    test 34 wildberger3: (17.54582, 38.56424, 46.317675)
    test 35 wildberger3: (844.880591, 571.107418, 835.462796)
    test 36 wildberger3: (128.557522, 100.0, 187.938524)
    test 37 wildberger3: (567.480866, 847.344375, 832.446688)
    test 38 wildberger3: (4064.197343, 3652.539342, 4988.197355)

    test 39 triAngle: 3.141592654
    test 40 triAngle4: (1.570796, 1.570796, 0.0, 0.0)
    test 41 triSide2: (2.0, 0.0)
    test 42 triSide2: (2.0, 3.141593)

    4 of 42 testResections.py tests (9.5%) FAILED, incl. 4 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 7.735 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testRhumbx.py
./test/testRhumbx.py:72: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb.Direct7} has been DEPRECATED, use method L{Rhumb.Direct8}.
  r = R.Direct7(40.6, -73.8, -92.38889, 12782581.068)  # coverage
./pygeodesy/rhumbx.py:175: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb8Tuple._to7Tuple} has been DEPRECATED, do not use!
  return self.Direct8(lat1, lon1, azi12, s12, outmask=outmask)._to7Tuple()
./pygeodesy/deprecated/__init__.py:64: DeprecationWarning: class L{pygeodesy.deprecated.Rhumb7Tuple} has been DEPRECATED, use class L{Rhumb8Tuple} ignoring item C{a12}.
  deprecated_class(cls)
./test/testRhumbx.py:75: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toDirect9Tuple} has been DEPRECATED.
  t = str(r.toDirect9Tuple())  # coverage
./pygeodesy/deprecated/__init__.py:205: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toRhumb8Tuple} has been DEPRECATED.
  return self.toRhumb8Tuple().toDirect9Tuple(self, **kwds)
./test/testRhumbx.py:169: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb.Inverse7} has been DEPRECATED, use method L{Rhumb.Inverse8}.
  r = P.Inverse7(40.6, -73.8, 51.6, -0.5)  # coverage
./pygeodesy/rhumbx.py:359: DeprecationWarning: method L{pygeodesy.rhumbx.Rhumb8Tuple._to7Tuple} has been DEPRECATED, do not use!
  return self.Inverse8(lat1, lon1, azi12, s12, outmask=outmask)._to7Tuple()
./test/testRhumbx.py:172: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toInverse10Tuple} has been DEPRECATED.
  t = str(r.toInverse10Tuple())
./pygeodesy/deprecated/__init__.py:213: DeprecationWarning: method L{pygeodesy.deprecated.Rhumb7Tuple.toRhumb8Tuple} has been DEPRECATED.
  return self.toRhumb8Tuple().toInverse10Tuple(self, **kwds)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Caps from .karney by testRhumbx.py line 11
# lazily imported pygeodesy.classname from .named by testRhumbx.py line 11
# lazily imported pygeodesy.DIG from .constants by testRhumbx.py line 11
# lazily imported pygeodesy.Ellipsoid from .ellipsoids by testRhumbx.py line 11
# lazily imported pygeodesy.GDict from .karney by testRhumbx.py line 11
# lazily imported pygeodesy.itemsorted from .errors by testRhumbx.py line 11
# lazily imported pygeodesy.latDMS from .dms by testRhumbx.py line 11
# lazily imported pygeodesy.lonDMS from .dms by testRhumbx.py line 11
# lazily imported pygeodesy.parseDMS from .dms by testRhumbx.py line 11
# lazily imported pygeodesy.parseDMS2 from .dms by testRhumbx.py line 11
# lazily imported pygeodesy.Rhumb from .rhumbx by testRhumbx.py line 11
# lazily imported pygeodesy.RhumbLine from .rhumbx by testRhumbx.py line 11
# lazily imported pygeodesy.RhumbLineSolve from .rhumbsolve by testRhumbx.py line 11
# lazily imported pygeodesy.R_M from .constants by testRhumbx.py line 11
# lazily imported pygeodesy.Fwelford from .fstats by testRhumbx.py line 11
# lazily imported pygeodesy.fremainder from .fmath by testRhumbx.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testRhumbx.py line 299

    testing testRhumbx.py 23.03.27 (module pygeodesy.rhumbx 23.04.10) isLazy=3

    testDirectX vs ...(pygeodesy.rhumbx, 23.04.10)
    test 1 Direct.azi12: -92.38889
    test 2 Direct.lat1: 40.6
    test 3 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.79999
    test 4 Direct.lon1: -73.8
    test 5 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.23651
    test 6 Direct.s12: 12782581.068

    test 7 GDict.azi12: 51
    test 8 GDict.lat1: 40.6
    test 9 GDict.lat2: 71.688899882813
    test 10 GDict.lon1: -73.8
    test 11 GDict.lon2: 0.255519824423416  FAILED, KNOWN, expected 0.255519824423359
    test 12 GDict.S12: 44095641862956.1
    test 13 GDict.s12: 5500000

    test 14 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 15 Rhumb: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True)

    test 16 Direct.azi12: -92.38889
    test 17 Direct.lat1: 40.6
    test 18 Direct.lat2: 35.799995945206  FAILED, KNOWN, expected 35.8
    test 19 Direct.lon1: -73.8
    test 20 Direct.lon2: 140.300004102052  FAILED, KNOWN, expected 140.3
    test 21 Direct.s12: 12782581.068
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241
    test 22 Direct7: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.8125)
    test 23 toDirect9Tuple: (NAN, 35.799996, 140.300004, -92.38889, 12782581.068, 12782581.068, 1.0, 1.0, -63760638302268.8125)
    test 24 DirectLine: (40.6, -73.8, 35.799996, 140.300004, -92.38889, 12782581.068, -63760638302268.8125)

    test 25 RhumbLine: TMorder=6, azi12=51.0, exact=True, lat1=40.6, lon1=-73.8, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 26 DirectLine: TMorder=6, azi12=-51.0, exact=True, lat1=35.8, lon1=140.3, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0)
    test 27 Direct3: (71.6889, 0.25552, 231.0)
    test 28 Direct3: (71.6889, 0.25552, 51.0)

    test 29 RhumbSolve.azi12: 51
    test 30 RhumbSolve.lat1: 40.6
    test 31 RhumbSolve.lat2: 71.688899882813
    test 32 RhumbSolve.lon1: -73.8
    test 33 RhumbSolve.lon2: 0.255519824423359  FAILED, KNOWN, expected 0.255519824423445
    test 34 RhumbSolve.s12: 5500000
    test 35 RhumbSolve.S12: 44095641862956.1
    test 36 iteration: None

    test 37 f(-0.7)proLate.azi12: 51
    test 38 f(-0.7)proLate.lat1: 40.6
    test 39 f(-0.7)proLate.lat2: 58.7982808854283  FAILED, KNOWN, expected 78.6870542863008
    test 40 f(-0.7)proLate.lon1: -73.8
    test 41 f(-0.7)proLate.lon2: 12.2959716649129  FAILED, KNOWN, expected 54.5622895456483
    test 42 f(-0.7)proLate.S12: 85955048077081.7  FAILED, KNOWN, expected 130283027384491
    test 43 f(-0.7)proLate.s12: 5500000

    test 44 f(-0.6)proLate.azi12: 51
    test 45 f(-0.6)proLate.lat1: 40.6
    test 46 f(-0.6)proLate.lat2: 59.6758767683446  FAILED, KNOWN, expected 77.073737531675
    test 47 f(-0.6)proLate.lon1: -73.8
    test 48 f(-0.6)proLate.lon2: 9.48880576416977  FAILED, KNOWN, expected 43.0698680454633
    test 49 f(-0.6)proLate.S12: 78359763655379.6  FAILED, KNOWN, expected 111767456147778
    test 50 f(-0.6)proLate.s12: 5500000

    test 51 f(-0.5)proLate.azi12: 51
    test 52 f(-0.5)proLate.lat1: 40.6
    test 53 f(-0.5)proLate.lat2: 60.7320576076725  FAILED, KNOWN, expected 75.63654242861
    test 54 f(-0.5)proLate.lon1: -73.8
    test 55 f(-0.5)proLate.lon2: 6.85513593259088  FAILED, KNOWN, expected 33.3374488031161
    test 56 f(-0.5)proLate.S12: 71227659550846.7  FAILED, KNOWN, expected 96143882206761.5
    test 57 f(-0.5)proLate.s12: 5500000

    test 58 f(-0.4)proLate.azi12: 51
    test 59 f(-0.4)proLate.lat1: 40.6
    test 60 f(-0.4)proLate.lat2: 62.0190418933994  FAILED, KNOWN, expected 74.3898318477814
    test 61 f(-0.4)proLate.lon1: -73.8
    test 62 f(-0.4)proLate.lon2: 4.44846787150587  FAILED, KNOWN, expected 24.9430372536917
    test 63 f(-0.4)proLate.S12: 64573794048271  FAILED, KNOWN, expected 82750237191684.5
    test 64 f(-0.4)proLate.s12: 5500000

    test 65 f(-0.3)proLate.azi12: 51
    test 66 f(-0.3)proLate.lat1: 40.6
    test 67 f(-0.3)proLate.lat2: 63.6106723951871  FAILED, KNOWN, expected 73.3500188213461
    test 68 f(-0.3)proLate.lon1: -73.8
    test 69 f(-0.3)proLate.lon2: 2.35374337182192  FAILED, KNOWN, expected 17.612073573639
    test 70 f(-0.3)proLate.S12: 58433524691072.3  FAILED, KNOWN, expected 71143541194801.2
    test 71 f(-0.3)proLate.s12: 5500000

    test 72 f(-0.2)proLate.azi12: 51
    test 73 f(-0.2)proLate.lat1: 40.6
    test 74 f(-0.2)proLate.lat2: 65.6160222842253  FAILED, KNOWN, expected 72.5367798354745
    test 75 f(-0.2)proLate.lon1: -73.8
    test 76 f(-0.2)proLate.lon2: 0.71881730875694  FAILED, KNOWN, expected 11.1589611136952
    test 77 f(-0.2)proLate.S12: 52877638949075.4  FAILED, KNOWN, expected 61013623719299.5
    test 78 f(-0.2)proLate.s12: 5500000

    test 79 f(-0.1)proLate.azi12: 51
    test 80 f(-0.1)proLate.lat1: 40.6
    test 81 f(-0.1)proLate.lat2: 68.2076549239682  FAILED, KNOWN, expected 71.9743861286059
    test 82 f(-0.1)proLate.lon1: -73.8
    test 83 f(-0.1)proLate.lon2: -0.163380731511992  FAILED, KNOWN, expected 5.45567553019575
    test 84 f(-0.1)proLate.S12: 48054974256549.6  FAILED, KNOWN, expected 52135051351553.9
    test 85 f(-0.1)proLate.s12: 5500000

    test 86 f(0.0)sphere.azi12: 51
    test 87 f(0.0)sphere.lat1: 40.6
    test 88 f(0.0)sphere.lat2: 71.6930469238479
    test 89 f(0.0)sphere.lon1: -73.8
    test 90 f(0.0)sphere.lon2: 0.413867159480972  FAILED, KNOWN, expected 0.413867159480958
    test 91 f(0.0)sphere.S12: 43262138303107.9  FAILED, KNOWN, expected 44339815922640.6
    test 92 f(0.0)sphere.s12: 5500000

    test 93 f(0.1)obLate.azi12: 51
    test 94 f(0.1)obLate.lat1: 40.6
    test 95 f(0.1)obLate.lat2: 71.7299877651149  FAILED, KNOWN, expected 71.729987765115
    test 96 f(0.1)obLate.lon1: -73.8
    test 97 f(0.1)obLate.lon2: -4.02572626073506  FAILED, KNOWN, expected -4.025726260735
    test 98 f(0.1)obLate.S12: 37501325852980.8  FAILED, KNOWN, expected 37501325852980.9
    test 99 f(0.1)obLate.s12: 5500000

    test 100 f(0.2)obLate.azi12: 51
    test 101 f(0.2)obLate.lat1: 40.6
    test 102 f(0.2)obLate.lat2: 72.1296406403857
    test 103 f(0.2)obLate.lon1: -73.8
    test 104 f(0.2)obLate.lon2: -7.89959865727289  FAILED, KNOWN, expected -7.89959865727285
    test 105 f(0.2)obLate.S12: 31524344809128.8
    test 106 f(0.2)obLate.s12: 5500000

    test 107 f(0.3)obLate.azi12: 51
    test 108 f(0.3)obLate.lat1: 40.6
    test 109 f(0.3)obLate.lat2: 72.9417108424475
    test 110 f(0.3)obLate.lon1: -73.8
    test 111 f(0.3)obLate.lon2: -11.2251277212335  FAILED, KNOWN, expected -11.2251277212334
    test 112 f(0.3)obLate.S12: 26338142645683.4
    test 113 f(0.3)obLate.s12: 5500000

    test 114 f(0.4)obLate.azi12: 51
    test 115 f(0.4)obLate.lat1: 40.6
    test 116 f(0.4)obLate.lat2: 74.2150181648285
    test 117 f(0.4)obLate.lon1: -73.8
    test 118 f(0.4)obLate.lon2: -14.0025161670195
    test 119 f(0.4)obLate.S12: 21889987441293.2
    test 120 f(0.4)obLate.s12: 5500000

    test 121 f(0.5)obLate.azi12: 51
    test 122 f(0.5)obLate.lat1: 40.6
    test 123 f(0.5)obLate.lat2: 75.9843423530564
    test 124 f(0.5)obLate.lon1: -73.8
    test 125 f(0.5)obLate.lon2: -16.2158875285256  FAILED, KNOWN, expected -16.2158875285255
    test 126 f(0.5)obLate.S12: 18138546882520.4
    test 127 f(0.5)obLate.s12: 5500000

    test 128 f(0.6)obLate.azi12: 51
    test 129 f(0.6)obLate.lat1: 40.6
    test 130 f(0.6)obLate.lat2: 78.2485809971866
    test 131 f(0.6)obLate.lon1: -73.8
    test 132 f(0.6)obLate.lon2: -17.8350956076784
    test 133 f(0.6)obLate.S12: 15058514719182.2
    test 134 f(0.6)obLate.s12: 5500000

    test 135 f(0.7)obLate.azi12: 51
    test 136 f(0.7)obLate.lat1: 40.6
    test 137 f(0.7)obLate.lat2: 80.9441758588144
    test 138 f(0.7)obLate.lon1: -73.8
    test 139 f(0.7)obLate.lon2: -18.8222432743227
    test 140 f(0.7)obLate.S12: 12662980433240.5
    test 141 f(0.7)obLate.s12: 5500000

    test 142 f(0.8)obLate.azi12: 51
    test 143 f(0.8)obLate.lat1: 40.6
    test 144 f(0.8)obLate.lat2: 83.929256887239
    test 145 f(0.8)obLate.lon1: -73.8
    test 146 f(0.8)obLate.lon2: -19.1538144966024  FAILED, KNOWN, expected -19.1538144966025
    test 147 f(0.8)obLate.S12: 11016227806772.5  FAILED, KNOWN, expected 11016227806772.4
    test 148 f(0.8)obLate.s12: 5500000

    test 149 f(0.9)obLate.azi12: 51
    test 150 f(0.9)obLate.lat1: 40.6
    test 151 f(0.9)obLate.lat2: 87.0045804494549
    test 152 f(0.9)obLate.lon1: -73.8
    test 153 f(0.9)obLate.lon2: -18.8902657154815  FAILED, KNOWN, expected -18.8902657154816
    test 154 f(0.9)obLate.S12: 10140058806389.6
    test 155 f(0.9)obLate.s12: 5500000

    testInverseX vs ...(pygeodesy.rhumbx, 23.04.10)
    test 156 Inverse.azi12: -92.3888879816997  FAILED, KNOWN, expected -92.38889
    test 157 Inverse.lat1: 40.6
    test 158 Inverse.lat2: 35.8
    test 159 Inverse.lon1: -73.8
    test 160 Inverse.lon2: 140.3
    test 161 Inverse.s12: 12782581.0676842
    test 162 Inverse.S12: -63760642939072.5  FAILED, KNOWN, expected -63760642939073

    test 163 GDict.azi12: 77.7683897102557
    test 164 GDict.lat1: 40.6
    test 165 GDict.lat2: 51.6
    test 166 GDict.lon1: -73.8
    test 167 GDict.lon2: -0.5
    test 168 GDict.s12: 5771083.38332803
    test 169 GDict.S12: 37395209100030.4

    test 170 Inverse.azi12: 103.582833003411  FAILED, KNOWN, expected 103.582833333333
    test 171 Inverse.lat1: 40.6397222222222  FAILED, KNOWN, expected 40.639722
    test 172 Inverse.lat2: 1.35916666666667  FAILED, KNOWN, expected 1.359167
    test 173 Inverse.lon2: 103.989444444444  FAILED, KNOWN, expected 103.989444
    test 174 Inverse.s12: 18523563.0423774  FAILED, KNOWN, expected 18523563

    test 175 0,000 Km lat2: 40:38:23.0N
    test 176 0,000 Km lon2: 073:46:44.0W
    test 177 0,000 Km S12 : 0
    test 178 1,000 Km lat2: 36:24:30.3N
    test 179 1,000 Km lon2: 051:28:26.4W
    test 180 1,000 Km S12 : 9817078307820  FAILED, KNOWN, expected 9817078307821
    test 181 2,000 Km lat2: 32:10:26.8N
    test 182 2,000 Km lon2: 030:20:57.3W
    test 183 2,000 Km S12 : 18224745682004  FAILED, KNOWN, expected 18224745682005
    test 184 3,000 Km lat2: 27:56:13.2N
    test 185 3,000 Km lon2: 010:10:54.2W
    test 186 3,000 Km S12 : 25358020327741
    test 187 4,000 Km lat2: 23:41:50.1N
    test 188 4,000 Km lon2: 009:12:45.5E
    test 189 4,000 Km S12 : 31321269267101  FAILED, KNOWN, expected 31321269267102
    test 190 5,000 Km lat2: 19:27:18.7N
    test 191 5,000 Km lon2: 027:59:22.1E
    test 192 5,000 Km S12 : 36195163180159
    test 193 6,000 Km lat2: 15:12:40.2N
    test 194 6,000 Km lon2: 046:17:01.1E
    test 195 6,000 Km S12 : 40041499143669
    test 196 7,000 Km lat2: 10:57:55.9N
    test 197 7,000 Km lon2: 064:12:52.8E
    test 198 7,000 Km S12 : 42906570007050
    test 199 8,000 Km lat2: 06:43:07.3N
    test 200 8,000 Km lon2: 081:53:28.8E
    test 201 8,000 Km S12 : 44823504180199  FAILED, KNOWN, expected 44823504180200
    test 202 9,000 Km lat2: 02:28:16.2N
    test 203 9,000 Km lon2: 099:24:54.5E
    test 204 9,000 Km S12 : 45813843358737
    test 205 10,000 Km lat2: 01:46:36.0S
    test 206 10,000 Km lon2: 116:52:59.7E
    test 207 10,000 Km S12 : 45888525219677

    test 208 Inverse: {a12: 51.420061, azi12: 77.692032, lat1: 40.6, lat2: 51.6, lon1: -73.8, lon2: -0.5, name: '_Prolate', s12: 5733622.743165}
    test 209 Inverse7: (40.6, -73.8, 51.6, -0.5, 77.692032, 5733622.743165, 37469093881942.273438)
    test 210 toInverse10Tuple: (NAN, 5733622.743165, 0.977016, 0.213166, 0.977016, 0.213166, 5733622.743165, 1.0, 1.0, 37469093881942.273438)
    test 211 InverseLine: -102.23161028974432

    test 212 Inverse1: 51.9295425
    test 213 Inverse3: (5771083.383328, 77.76839, 77.76839)

    test 214 RhumbSolve.azi12: 77.7683897102557
    test 215 RhumbSolve.lat1: 40.6
    test 216 RhumbSolve.lat2: 51.6
    test 217 RhumbSolve.lon1: -73.8
    test 218 RhumbSolve.lon2: -0.5
    test 219 RhumbSolve.s12: 5771083.38332803
    test 220 RhumbSolve.S12: 37395209100030.4
    test 221 iteration: None

    test 222 f(-0.7)proLate.a12: 31.6798138746818  FAILED, KNOWN, expected 19.4316661725214
    test 223 f(-0.7)proLate.azi12: 72.4018253121172
    test 224 f(-0.7)proLate.lat1: 40.6
    test 225 f(-0.7)proLate.lat2: 51.6
    test 226 f(-0.7)proLate.lon1: -73.8
    test 227 f(-0.7)proLate.lon2: -0.5
    test 228 f(-0.7)proLate.s12: 6879565.92263053  FAILED, KNOWN, expected 4219766.85056372
    test 229 f(-0.7)proLate.S12: 69908513962657.7

    test 230 f(-0.6)proLate.a12: 29.9171923132053  FAILED, KNOWN, expected 21.7001783174047
    test 231 f(-0.6)proLate.azi12: 72.9077494979405
    test 232 f(-0.6)proLate.lat1: 40.6
    test 233 f(-0.6)proLate.lat2: 51.6
    test 234 f(-0.6)proLate.lon1: -73.8
    test 235 f(-0.6)proLate.lon2: -0.5
    test 236 f(-0.6)proLate.s12: 6065449.02808028  FAILED, KNOWN, expected 4399521.32227242
    test 237 f(-0.6)proLate.S12: 65479293553218.2

    test 238 f(-0.5)proLate.a12: 37.8225680720405  FAILED, KNOWN, expected 24.3995870573009
    test 239 f(-0.5)proLate.azi12: 73.4808354630838  FAILED, KNOWN, expected 73.4808354630839
    test 240 f(-0.5)proLate.lat1: 40.6
    test 241 f(-0.5)proLate.lat2: 51.6
    test 242 f(-0.5)proLate.lon1: -73.8
    test 243 f(-0.5)proLate.lon2: -0.5
    test 244 f(-0.5)proLate.s12: 7117736.84918712  FAILED, KNOWN, expected 4591698.78607691
    test 245 f(-0.5)proLate.S12: 60997593633709  FAILED, KNOWN, expected 60997593633709.1

    test 246 f(-0.4)proLate.a12: 42.0946236441832  FAILED, KNOWN, expected 27.6548959759732
    test 247 f(-0.4)proLate.azi12: 74.1310400671426
    test 248 f(-0.4)proLate.lat1: 40.6
    test 249 f(-0.4)proLate.lat2: 51.6
    test 250 f(-0.4)proLate.lon1: -73.8
    test 251 f(-0.4)proLate.lon2: -0.5
    test 252 f(-0.4)proLate.s12: 7301823.59663444  FAILED, KNOWN, expected 4797077.50107739
    test 253 f(-0.4)proLate.S12: 56450667480819.8

    test 254 f(-0.3)proLate.a12: 43.1196533382757  FAILED, KNOWN, expected 31.6462120754835
    test 255 f(-0.3)proLate.azi12: 74.8693740965484
    test 256 f(-0.3)proLate.lat1: 40.6
    test 257 f(-0.3)proLate.lat2: 51.6
    test 258 f(-0.3)proLate.lon1: -73.8
    test 259 f(-0.3)proLate.lon2: -0.5
    test 260 f(-0.3)proLate.s12: 6835062.70103604  FAILED, KNOWN, expected 5016363.23671944
    test 261 f(-0.3)proLate.S12: 51833817791680

    test 262 f(-0.2)proLate.a12: 37.8935701234088  FAILED, KNOWN, expected 36.6457142472518
    test 263 f(-0.2)proLate.azi12: 75.7076069272899
    test 264 f(-0.2)proLate.lat1: 40.6
    test 265 f(-0.2)proLate.lat2: 51.6
    test 266 f(-0.2)proLate.lon1: -73.8
    test 267 f(-0.2)proLate.lon2: -0.5
    test 268 f(-0.2)proLate.s12: 5428899.27629232  FAILED, KNOWN, expected 5250122.67010496
    test 269 f(-0.2)proLate.S12: 47145803785208.4

    test 270 f(-0.1)proLate.a12: 43.0998490484505  FAILED, KNOWN, expected 43.0921526610931
    test 271 f(-0.1)proLate.azi12: 76.6576203659566
    test 272 f(-0.1)proLate.lat1: 40.6
    test 273 f(-0.1)proLate.lat2: 51.6
    test 274 f(-0.1)proLate.lon1: -73.8
    test 275 f(-0.1)proLate.lon2: -0.5
    test 276 f(-0.1)proLate.s12: 5499668.14784959  FAILED, KNOWN, expected 5498686.06607117
    test 277 f(-0.1)proLate.S12: 42386228533605.6

    test 278 f(0.0)sphere.a12: 51.7609673604566  FAILED, KNOWN, expected 51.1449856169523
    test 279 f(0.0)sphere.azi12: 77.7302010637481  FAILED, KNOWN, expected 81.4654121232455
    test 280 f(0.0)sphere.lat1: 40.6
    test 281 f(0.0)sphere.lat2: 51.6
    test 282 f(0.0)sphere.lon1: -73.8
    test 283 f(0.0)sphere.lon2: -0.5
    test 284 f(0.0)sphere.s12: 5762004.52953328  FAILED, KNOWN, expected 5693433.75550843
    test 285 f(0.0)sphere.S12: 37558171832842.7  FAILED, KNOWN, expected 34633199829004.9

    test 286 f(0.1)obLate.a12: 57.0691039628295
    test 287 f(0.1)obLate.azi12: 78.93298766632
    test 288 f(0.1)obLate.lat1: 40.6
    test 289 f(0.1)obLate.lat2: 51.6
    test 290 f(0.1)obLate.lon1: -73.8
    test 291 f(0.1)obLate.lon2: -0.5
    test 292 f(0.1)obLate.s12: 6039438.67945619
    test 293 f(0.1)obLate.S12: 32672705271834.1

    test 294 f(0.2)obLate.a12: 62.9814139522912
    test 295 f(0.2)obLate.azi12: 80.2672430625978
    test 296 f(0.2)obLate.lat1: 40.6
    test 297 f(0.2)obLate.lat2: 51.6
    test 298 f(0.2)obLate.lon1: -73.8
    test 299 f(0.2)obLate.lon2: -0.5
    test 300 f(0.2)obLate.s12: 6329443.27498218
    test 301 f(0.2)obLate.S12: 27754021074333.5

    test 302 f(0.3)obLate.a12: 69.5167852965365  FAILED, KNOWN, expected 69.5167852965364
    test 303 f(0.3)obLate.azi12: 81.723183320486
    test 304 f(0.3)obLate.lat1: 40.6
    test 305 f(0.3)obLate.lat2: 51.6
    test 306 f(0.3)obLate.lon1: -73.8
    test 307 f(0.3)obLate.lon2: -0.5
    test 308 f(0.3)obLate.s12: 6629098.77674255  FAILED, KNOWN, expected 6629098.77674254
    test 309 f(0.3)obLate.S12: 22846728659359.5

    test 310 f(0.4)obLate.a12: 76.6527272755987  FAILED, KNOWN, expected 76.6527272755988
    test 311 f(0.4)obLate.azi12: 83.2739099818903  FAILED, KNOWN, expected 83.2739099818904
    test 312 f(0.4)obLate.lat1: 40.6
    test 313 f(0.4)obLate.lat2: 51.6
    test 314 f(0.4)obLate.lon1: -73.8
    test 315 f(0.4)obLate.lon2: -0.5
    test 316 f(0.4)obLate.s12: 6933439.15838002
    test 317 f(0.4)obLate.S12: 18023503773553

    test 318 f(0.5)obLate.a12: 84.2941094970901  FAILED, KNOWN, expected 84.29410949709
    test 319 f(0.5)obLate.azi12: 84.8687585722893
    test 320 f(0.5)obLate.lat1: 40.6
    test 321 f(0.5)obLate.lat2: 51.6
    test 322 f(0.5)obLate.lon1: -73.8
    test 323 f(0.5)obLate.lon2: -0.5
    test 324 f(0.5)obLate.s12: 7234571.22434383  FAILED, KNOWN, expected 7234571.22434382
    test 325 f(0.5)obLate.S12: 13389555976791.8

    test 326 f(0.6)obLate.a12: 92.2282212329556  FAILED, KNOWN, expected 92.2282212329554
    test 327 f(0.6)obLate.azi12: 86.428203134645
    test 328 f(0.6)obLate.lat1: 40.6
    test 329 f(0.6)obLate.lat2: 51.6
    test 330 f(0.6)obLate.lon1: -73.8
    test 331 f(0.6)obLate.lon2: -0.5
    test 332 f(0.6)obLate.s12: 7520739.28078681  FAILED, KNOWN, expected 7520739.2807868
    test 333 f(0.6)obLate.S12: 9108118533020.06

    test 334 f(0.7)obLate.a12: 100.06793053457
    test 335 f(0.7)obLate.azi12: 87.8440216245934
    test 336 f(0.7)obLate.lat1: 40.6
    test 337 f(0.7)obLate.lat2: 51.6
    test 338 f(0.7)obLate.lon1: -73.8
    test 339 f(0.7)obLate.lon2: -0.5
    test 340 f(0.7)obLate.s12: 7775816.14921534  FAILED, KNOWN, expected 7775816.14921533
    test 341 f(0.7)obLate.S12: 5406604570185.04  FAILED, KNOWN, expected 5406604570185.03

    test 342 f(0.8)obLate.a12: 107.191415254441
    test 343 f(0.8)obLate.azi12: 88.9890486193666
    test 344 f(0.8)obLate.lat1: 40.6
    test 345 f(0.8)obLate.lat2: 51.6
    test 346 f(0.8)obLate.lon1: -73.8
    test 347 f(0.8)obLate.lon2: -0.5
    test 348 f(0.8)obLate.s12: 7980099.68462829  FAILED, KNOWN, expected 7980099.68462831
    test 349 f(0.8)obLate.S12: 2511038845917.83  FAILED, KNOWN, expected 2511038845917.84

    test 350 f(0.9)obLate.a12: 112.682385936074  FAILED, KNOWN, expected 112.682385936076
    test 351 f(0.9)obLate.azi12: 89.7386359477264
    test 352 f(0.9)obLate.lat1: 40.6
    test 353 f(0.9)obLate.lat2: 51.6
    test 354 f(0.9)obLate.lon1: -73.8
    test 355 f(0.9)obLate.lon2: -0.5
    test 356 f(0.9)obLate.s12: 8113314.60991917  FAILED, KNOWN, expected 8113314.6099193
    test 357 f(0.9)obLate.S12: 643969911402.416  FAILED, KNOWN, expected 643969911402.411

    test 358 R.exact: True
    test 359 R.exact: False
    test 360 R: Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=False)

    test 361 R.exact: True
    test 362 R.Line.exact: True
    test 363 R.Line: RhumbLine(TMorder=6, azi12=3.0, exact=True, lat1=1.0, lon1=2.0, rhumb=Rhumb(RAorder=6, TMorder=6, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), exact=True), xTM=ExactTransverseMercator(datum='_WGS84', extendp=False, k0=0.9996, lon0=0.0))
    test 364 orders: (6, 6)
    test 365 orders: (4, 8)

    test 366 at 0 nearestOn4: NearestOn4Tuple(lat=0.0, lon=0.0, distance=4452779.631731, normal=90.0)
    test 367 at 0 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 368 at 0 iteration: 2
    test 369 at 3 nearestOn4: NearestOn4Tuple(lat=1.78887, lon=-0.99811, distance=4567437.385459, normal=93.0)
    test 370 at 3 distance2: Distance2Tuple(distance=2017489.178337, initial=-176.913538)
    test 371 at 3 iteration: 18
    test 372 at 6 nearestOn4: NearestOn4Tuple(lat=3.621299, lon=-1.782857, distance=4665385.363707, normal=96.0)
    test 373 at 6 distance2: Distance2Tuple(distance=1822249.076337, initial=-173.902054)
    test 374 at 6 iteration: 19
    test 375 at 9 nearestOn4: NearestOn4Tuple(lat=5.484985, lon=-2.3602, distance=4747259.943739, normal=99.0)
    test 376 at 9 distance2: Distance2Tuple(distance=1626056.569178, initial=-170.957822)
    test 377 at 9 iteration: 20
    test 378 at 12 nearestOn4: NearestOn4Tuple(lat=7.370116, lon=-2.73481, distance=4813660.672246, normal=102.0)
    test 379 at 12 distance2: Distance2Tuple(distance=1428212.934231, initial=-168.072177)
    test 380 at 12 iteration: 20
    test 381 at 15 nearestOn4: NearestOn4Tuple(lat=9.268415, lon=-2.909634, distance=4865124.821218, normal=105.0)
    test 382 at 15 distance2: Distance2Tuple(distance=1227972.969826, initial=-165.235791)
    test 383 at 15 iteration: 20
    test 384 at 18 nearestOn4: NearestOn4Tuple(lat=11.172185, lon=-2.885742, distance=4902118.749304, normal=108.0)
    test 385 at 18 distance2: Distance2Tuple(distance=1024605.530336, initial=-162.438792)
    test 386 at 18 iteration: 20
    test 387 at 21 nearestOn4: NearestOn4Tuple(lat=13.073424, lon=-2.662411, distance=4925040.440464, normal=111.0)
    test 388 at 21 distance2: Distance2Tuple(distance=817449.876114, initial=-159.670792)
    test 389 at 21 iteration: 19
    test 390 at 24 nearestOn4: NearestOn4Tuple(lat=14.963037, lon=-2.237368, distance=4934228.141285, normal=114.0)
    test 391 at 24 distance2: Distance2Tuple(distance=605965.483538, initial=-156.920863)
    test 392 at 24 iteration: 18
    test 393 at 27 nearestOn4: NearestOn4Tuple(lat=16.830177, lon=-1.607176, distance=4929970.763676, normal=117.0)
    test 394 at 27 distance2: Distance2Tuple(distance=389772.69206, initial=-154.177522)
    test 395 at 27 iteration: 17
    test 396 at 30 nearestOn4: NearestOn4Tuple(lat=18.661739, lon=-0.767728, distance=4912516.651406, normal=120.0)
    test 397 at 30 distance2: Distance2Tuple(distance=168681.79275, initial=-151.428749)
    test 398 at 30 iteration: 15
    test 399 at 33 nearestOn4: NearestOn4Tuple(lat=20.442006, lon=0.285131, distance=4882078.472693, normal=123.0)
    test 400 at 33 distance2: Distance2Tuple(distance=57291.056741, initial=31.337909)
    test 401 at 33 iteration: 14
    test 402 at 36 nearestOn4: NearestOn4Tuple(lat=22.152468, lon=1.554872, distance=4838833.433767, normal=126.0)
    test 403 at 36 distance2: Distance2Tuple(distance=287921.351972, initial=34.135132)
    test 404 at 36 iteration: 13
    test 405 at 39 nearestOn4: NearestOn4Tuple(lat=23.77182, lon=3.04338, distance=4782919.681256, normal=129.0)
    test 406 at 39 distance2: Distance2Tuple(distance=522785.823462, initial=36.975477)
    test 407 at 39 iteration: 12
    test 408 at 42 nearestOn4: NearestOn4Tuple(lat=25.276135, lon=4.749884, distance=4714431.597517, normal=132.0)
    test 409 at 42 distance2: Distance2Tuple(distance=761281.13012, initial=39.870848)
    test 410 at 42 iteration: 12
    test 411 at 45 nearestOn4: NearestOn4Tuple(lat=26.639267, lon=6.669676, distance=4633418.568418, normal=135.0)
    test 412 at 45 distance2: Distance2Tuple(distance=1002647.475734, initial=42.831764)
    test 413 at 45 iteration: 12
    test 414 at 48 nearestOn4: NearestOn4Tuple(lat=27.833525, lon=8.792659, distance=4539893.426211, normal=138.0)
    test 415 at 48 distance2: Distance2Tuple(distance=1245992.475272, initial=45.866374)
    test 416 at 48 iteration: 12
    test 417 at 51 nearestOn4: NearestOn4Tuple(lat=28.830702, lon=11.101809, distance=4433857.579882, normal=141.0)
    test 418 at 51 distance2: Distance2Tuple(distance=1490310.992237, initial=48.979263)
    test 419 at 51 iteration: 12
    test 420 at 54 nearestOn4: NearestOn4Tuple(lat=29.60355, lon=13.571793, distance=4315348.787094, normal=144.0)
    test 421 at 54 distance2: Distance2Tuple(distance=1734498.226471, initial=52.17011)
    test 422 at 54 iteration: 12
    test 423 at 57 nearestOn4: NearestOn4Tuple(lat=30.12774, lon=16.16811, distance=4184513.198865, normal=147.0)
    test 424 at 57 distance2: Distance2Tuple(distance=1977356.104695, initial=55.432438)
    test 425 at 57 iteration: 12
    test 426 at 60 nearestOn4: NearestOn4Tuple(lat=30.384199, lon=18.847259, distance=4041694.757223, normal=150.0)
    test 427 at 60 distance2: Distance2Tuple(distance=2217596.775596, initial=58.752785)
    test 428 at 60 iteration: 13
    test 429 at 63 nearestOn4: NearestOn4Tuple(lat=30.361518, lon=21.558351, distance=3887523.410219, normal=153.0)
    test 430 at 63 distance2: Distance2Tuple(distance=2453850.681967, initial=62.110741)
    test 431 at 63 iteration: 13
    test 432 at 66 nearestOn4: NearestOn4Tuple(lat=30.057906, lon=24.246352, distance=3722973.817216, normal=156.0)
    test 433 at 66 distance2: Distance2Tuple(distance=2684688.240253, initial=65.480201)
    test 434 at 66 iteration: 13
    test 435 at 69 nearestOn4: NearestOn4Tuple(lat=29.482072, lon=26.856511, distance=3549365.860101, normal=159.0)
    test 436 at 69 distance2: Distance2Tuple(distance=2908661.404266, initial=68.831849)
    test 437 at 69 iteration: 13
    test 438 at 72 nearestOn4: NearestOn4Tuple(lat=28.652617, lon=29.339085, distance=3368292.365392, normal=162.0)
    test 439 at 72 distance2: Distance2Tuple(distance=3124363.961966, initial=72.136463)
    test 440 at 72 iteration: 14
    test 441 at 75 nearestOn4: NearestOn4Tuple(lat=27.595973, lon=31.653166, distance=3181483.93514, normal=165.0)
    test 442 at 75 distance2: Distance2Tuple(distance=3330500.367925, initial=75.368254)
    test 443 at 75 iteration: 14
    test 444 at 78 nearestOn4: NearestOn4Tuple(lat=26.34337, lon=33.768789, distance=2990642.863598, normal=168.0)
    test 445 at 78 distance2: Distance2Tuple(distance=3525947.426348, initial=78.507468)
    test 446 at 78 iteration: 15
    test 447 at 81 nearestOn4: NearestOn4Tuple(lat=24.927599, lon=35.667071, distance=2797285.607317, normal=171.0)
    test 448 at 81 distance2: Distance2Tuple(distance=3709794.568962, initial=81.541766)
    test 449 at 81 iteration: 15
    test 450 at 84 nearestOn4: NearestOn4Tuple(lat=23.380219, lon=37.338792, distance=2602624.246813, normal=174.0)
    test 451 at 84 distance2: Distance2Tuple(distance=3881355.597301, initial=84.466366)
    test 452 at 84 iteration: 16
    test 453 at 87 nearestOn4: NearestOn4Tuple(lat=21.729621, lon=38.782099, distance=2407500.005448, normal=177.0)
    test 454 at 87 distance2: Distance2Tuple(distance=4040153.204404, initial=87.283272)
    test 455 at 87 iteration: 16
    test 456 at 90 nearestOn4: NearestOn4Tuple(lat=20.0, lon=40.0, distance=2212366.254172, normal=180.0)
    test 457 at 90 distance2: Distance2Tuple(distance=4185883.452394, initial=90.0)
    test 458 at 90 iteration: 2
    test 459 at 93 nearestOn4: NearestOn4Tuple(lat=18.21113, lon=40.99811, distance=2017309.778494, normal=-177.0)
    test 460 at 93 distance2: Distance2Tuple(distance=4318369.394574, initial=92.628183)
    test 461 at 93 iteration: 18
    test 462 at 96 nearestOn4: NearestOn4Tuple(lat=16.378701, lon=41.782857, distance=1822097.141563, normal=-174.0)
    test 463 at 96 distance2: Distance2Tuple(distance=4437512.122777, initial=95.182272)
    test 464 at 96 iteration: 19
    test 465 at 99 nearestOn4: NearestOn4Tuple(lat=14.515015, lon=42.3602, distance=1626234.955125, normal=-171.0)
    test 466 at 99 distance2: Distance2Tuple(distance=4543245.293056, initial=97.678448)
    test 467 at 99 iteration: 20
    test 468 at 102 nearestOn4: NearestOn4Tuple(lat=12.629884, lon=42.73481, distance=1429036.030972, normal=-168.0)
    test 469 at 102 distance2: Distance2Tuple(distance=4635496.852428, initial=100.133763)
    test 470 at 102 iteration: 20
    test 471 at 105 nearestOn4: NearestOn4Tuple(lat=10.731585, lon=42.909634, distance=1229686.200109, normal=-165.0)
    test 472 at 105 distance2: Distance2Tuple(distance=4714159.823993, initial=102.565486)
    test 473 at 105 iteration: 20
    test 474 at 108 nearestOn4: NearestOn4Tuple(lat=8.827815, lon=42.885742, distance=1027308.413714, normal=-162.0)
    test 475 at 108 distance2: Distance2Tuple(distance=4779072.735062, initial=104.990626)
    test 476 at 108 iteration: 20
    test 477 at 111 nearestOn4: NearestOn4Tuple(lat=6.926576, lon=42.662411, distance=821021.78405, normal=-159.0)
    test 478 at 111 distance2: Distance2Tuple(distance=4830009.484467, initial=107.425584)
    test 479 at 111 iteration: 19
    test 480 at 114 nearestOn4: NearestOn4Tuple(lat=5.036963, lon=42.237368, distance=609993.754392, normal=-156.0)
    test 481 at 114 distance2: Distance2Tuple(distance=4866678.02413, initial=109.885922)
    test 482 at 114 iteration: 18
    test 483 at 117 nearestOn4: NearestOn4Tuple(lat=3.169823, lon=41.607176, distance=393484.06554, normal=-153.0)
    test 484 at 117 distance2: Distance2Tuple(distance=4888727.07477, initial=112.386218)
    test 485 at 117 iteration: 17
    test 486 at 120 nearestOn4: NearestOn4Tuple(lat=1.338261, lon=40.767728, distance=170879.9747, normal=-150.0)
    test 487 at 120 distance2: Distance2Tuple(distance=4895760.153166, initial=114.939984)
    test 488 at 120 iteration: 15
    test 489 at 123 nearestOn4: NearestOn4Tuple(lat=-0.442006, lon=39.714869, distance=58276.59935, normal=-147.0)
    test 490 at 123 distance2: Distance2Tuple(distance=4887356.42216, initial=117.559632)
    test 491 at 123 iteration: 14
    test 492 at 126 nearestOn4: NearestOn4Tuple(lat=-2.152468, lon=38.445128, distance=294267.652925, normal=-144.0)
    test 493 at 126 distance2: Distance2Tuple(distance=4863098.229148, initial=120.256447)
    test 494 at 126 iteration: 13
    test 495 at 129 nearestOn4: NearestOn4Tuple(lat=-3.77182, lon=36.95662, distance=537179.270746, normal=-141.0)
    test 496 at 129 distance2: Distance2Tuple(distance=4822605.581331, initial=123.040514)
    test 497 at 129 iteration: 12
    test 498 at 132 nearestOn4: NearestOn4Tuple(lat=-5.276135, lon=35.250116, distance=786877.93689, normal=-138.0)
    test 499 at 132 distance2: Distance2Tuple(distance=4765578.049049, initial=125.920549)
    test 500 at 132 iteration: 12
    test 501 at 135 nearestOn4: NearestOn4Tuple(lat=-6.639267, lon=33.330324, distance=1042977.288036, normal=-135.0)
    test 502 at 135 distance2: Distance2Tuple(distance=4691844.442335, initial=128.903552)
    test 503 at 135 iteration: 12
    test 504 at 138 nearestOn4: NearestOn4Tuple(lat=-7.833525, lon=31.207341, distance=1304791.465619, normal=-132.0)
    test 505 at 138 distance2: Distance2Tuple(distance=4601419.700187, initial=131.994235)
    test 506 at 138 iteration: 12
    test 507 at 141 nearestOn4: NearestOn4Tuple(lat=-8.830702, lon=28.898191, distance=1571275.925114, normal=-129.0)
    test 508 at 141 distance2: Distance2Tuple(distance=4494566.344609, initial=135.194197)
    test 509 at 141 iteration: 12
    test 510 at 144 nearestOn4: NearestOn4Tuple(lat=-9.60355, lon=26.428207, distance=1840964.643721, normal=-126.0)
    test 511 at 144 distance2: Distance2Tuple(distance=4371854.291284, initial=138.500907)
    test 512 at 144 iteration: 12
    test 513 at 147 nearestOn4: NearestOn4Tuple(lat=-10.12774, lon=23.83189, distance=2111923.120701, normal=-123.0)
    test 514 at 147 distance2: Distance2Tuple(distance=4234208.109837, initial=141.906658)
    test 515 at 147 iteration: 12
    test 516 at 150 nearestOn4: NearestOn4Tuple(lat=-10.384199, lon=21.152741, distance=2381745.725116, normal=-120.0)
    test 517 at 150 distance2: Distance2Tuple(distance=4082926.581705, initial=145.397815)
    test 518 at 150 iteration: 13
    test 519 at 153 nearestOn4: NearestOn4Tuple(lat=-10.361518, lon=18.441649, distance=2647627.022313, normal=-117.0)
    test 520 at 153 distance2: Distance2Tuple(distance=3919658.690883, initial=148.954759)
    test 521 at 153 iteration: 13
    test 522 at 156 nearestOn4: NearestOn4Tuple(lat=-10.057906, lon=15.753648, distance=2906522.653561, normal=-114.0)
    test 523 at 156 distance2: Distance2Tuple(distance=3746326.345058, initial=152.55284)
    test 524 at 156 iteration: 13
    test 525 at 159 nearestOn4: NearestOn4Tuple(lat=-9.482072, lon=13.143489, distance=3155385.639627, normal=-111.0)
    test 526 at 159 distance2: Distance2Tuple(distance=3564997.75099, initial=156.164419)
    test 527 at 159 iteration: 13
    test 528 at 162 nearestOn4: NearestOn4Tuple(lat=-8.652617, lon=10.660915, distance=3391430.460883, normal=-108.0)
    test 529 at 162 distance2: Distance2Tuple(distance=3377731.675499, initial=159.761632)
    test 530 at 162 iteration: 14
    test 531 at 165 nearestOn4: NearestOn4Tuple(lat=-7.595973, lon=8.346834, distance=3612359.931242, normal=-105.0)
    test 532 at 165 distance2: Distance2Tuple(distance=3186423.160726, initial=163.319215)
    test 533 at 165 iteration: 14
    test 534 at 168 nearestOn4: NearestOn4Tuple(lat=-6.34337, lon=6.231211, distance=3816501.539103, normal=-102.0)
    test 535 at 168 distance2: Distance2Tuple(distance=2992679.463282, initial=166.816688)
    test 536 at 168 iteration: 15
    test 537 at 171 nearestOn4: NearestOn4Tuple(lat=-4.927599, lon=4.332929, distance=4002834.001406, normal=-99.0)
    test 538 at 171 distance2: Distance2Tuple(distance=2797742.696107, initial=170.239499)
    test 539 at 171 iteration: 15
    test 540 at 174 nearestOn4: NearestOn4Tuple(lat=-3.380219, lon=2.661208, distance=4170920.680715, normal=-96.0)
    test 541 at 174 distance2: Distance2Tuple(distance=2602460.6285, initial=173.5791)
    test 542 at 174 iteration: 16
    test 543 at 177 nearestOn4: NearestOn4Tuple(lat=-1.729621, lon=1.217901, distance=4320786.90777, normal=-93.0)
    test 544 at 177 distance2: Distance2Tuple(distance=2407296.638562, initial=176.832261)
    test 545 at 177 iteration: 16
    test 546 at 180 nearestOn4: NearestOn4Tuple(lat=-0.0, lon=0.0, distance=4452779.631731, normal=-90.0)
    test 547 at 180 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 548 at 180 iteration: 2
    test 549 at 183 nearestOn4: NearestOn4Tuple(lat=1.78887, lon=-0.99811, distance=4567437.385459, normal=-87.0)
    test 550 at 183 distance2: Distance2Tuple(distance=2017489.178337, initial=-176.913538)
    test 551 at 183 iteration: 18
    test 552 at 186 nearestOn4: NearestOn4Tuple(lat=3.621299, lon=-1.782857, distance=4665385.363707, normal=-84.0)
    test 553 at 186 distance2: Distance2Tuple(distance=1822249.076337, initial=-173.902054)
    test 554 at 186 iteration: 19
    test 555 at 189 nearestOn4: NearestOn4Tuple(lat=5.484985, lon=-2.3602, distance=4747259.943739, normal=-81.0)
    test 556 at 189 distance2: Distance2Tuple(distance=1626056.569178, initial=-170.957822)
    test 557 at 189 iteration: 20
    test 558 at 192 nearestOn4: NearestOn4Tuple(lat=7.370116, lon=-2.73481, distance=4813660.672246, normal=-78.0)
    test 559 at 192 distance2: Distance2Tuple(distance=1428212.934231, initial=-168.072177)
    test 560 at 192 iteration: 20
    test 561 at 195 nearestOn4: NearestOn4Tuple(lat=9.268415, lon=-2.909634, distance=4865124.821218, normal=-75.0)
    test 562 at 195 distance2: Distance2Tuple(distance=1227972.969826, initial=-165.235791)
    test 563 at 195 iteration: 20
    test 564 at 198 nearestOn4: NearestOn4Tuple(lat=11.172185, lon=-2.885742, distance=4902118.749304, normal=-72.0)
    test 565 at 198 distance2: Distance2Tuple(distance=1024605.530336, initial=-162.438792)
    test 566 at 198 iteration: 20
    test 567 at 201 nearestOn4: NearestOn4Tuple(lat=13.073424, lon=-2.662411, distance=4925040.440464, normal=-69.0)
    test 568 at 201 distance2: Distance2Tuple(distance=817449.876114, initial=-159.670792)
    test 569 at 201 iteration: 19
    test 570 at 204 nearestOn4: NearestOn4Tuple(lat=14.963037, lon=-2.237368, distance=4934228.141285, normal=-66.0)
    test 571 at 204 distance2: Distance2Tuple(distance=605965.483538, initial=-156.920863)
    test 572 at 204 iteration: 18
    test 573 at 207 nearestOn4: NearestOn4Tuple(lat=16.830177, lon=-1.607176, distance=4929970.763676, normal=-63.0)
    test 574 at 207 distance2: Distance2Tuple(distance=389772.69206, initial=-154.177522)
    test 575 at 207 iteration: 17
    test 576 at 210 nearestOn4: NearestOn4Tuple(lat=18.661739, lon=-0.767728, distance=4912516.651406, normal=-60.0)
    test 577 at 210 distance2: Distance2Tuple(distance=168681.79275, initial=-151.428749)
    test 578 at 210 iteration: 15
    test 579 at 213 nearestOn4: NearestOn4Tuple(lat=20.442006, lon=0.285131, distance=4882078.472693, normal=-57.0)
    test 580 at 213 distance2: Distance2Tuple(distance=57291.056741, initial=31.337909)
    test 581 at 213 iteration: 14
    test 582 at 216 nearestOn4: NearestOn4Tuple(lat=22.152468, lon=1.554872, distance=4838833.433767, normal=-54.0)
    test 583 at 216 distance2: Distance2Tuple(distance=287921.351972, initial=34.135132)
    test 584 at 216 iteration: 13
    test 585 at 219 nearestOn4: NearestOn4Tuple(lat=23.77182, lon=3.04338, distance=4782919.681256, normal=-51.0)
    test 586 at 219 distance2: Distance2Tuple(distance=522785.823462, initial=36.975477)
    test 587 at 219 iteration: 12
    test 588 at 222 nearestOn4: NearestOn4Tuple(lat=25.276135, lon=4.749884, distance=4714431.597517, normal=-48.0)
    test 589 at 222 distance2: Distance2Tuple(distance=761281.13012, initial=39.870848)
    test 590 at 222 iteration: 12
    test 591 at 225 nearestOn4: NearestOn4Tuple(lat=26.639267, lon=6.669676, distance=4633418.568418, normal=-45.0)
    test 592 at 225 distance2: Distance2Tuple(distance=1002647.475734, initial=42.831764)
    test 593 at 225 iteration: 12
    test 594 at 228 nearestOn4: NearestOn4Tuple(lat=27.833525, lon=8.792659, distance=4539893.426211, normal=-42.0)
    test 595 at 228 distance2: Distance2Tuple(distance=1245992.475272, initial=45.866374)
    test 596 at 228 iteration: 12
    test 597 at 231 nearestOn4: NearestOn4Tuple(lat=28.830702, lon=11.101809, distance=4433857.579882, normal=-39.0)
    test 598 at 231 distance2: Distance2Tuple(distance=1490310.992237, initial=48.979263)
    test 599 at 231 iteration: 12
    test 600 at 234 nearestOn4: NearestOn4Tuple(lat=29.60355, lon=13.571793, distance=4315348.787094, normal=-36.0)
    test 601 at 234 distance2: Distance2Tuple(distance=1734498.226471, initial=52.17011)
    test 602 at 234 iteration: 12
    test 603 at 237 nearestOn4: NearestOn4Tuple(lat=30.12774, lon=16.16811, distance=4184513.198865, normal=-33.0)
    test 604 at 237 distance2: Distance2Tuple(distance=1977356.104695, initial=55.432438)
    test 605 at 237 iteration: 12
    test 606 at 240 nearestOn4: NearestOn4Tuple(lat=30.384199, lon=18.847259, distance=4041694.757223, normal=-30.0)
    test 607 at 240 distance2: Distance2Tuple(distance=2217596.775596, initial=58.752785)
    test 608 at 240 iteration: 13
    test 609 at 243 nearestOn4: NearestOn4Tuple(lat=30.361518, lon=21.558351, distance=3887523.410219, normal=-27.0)
    test 610 at 243 distance2: Distance2Tuple(distance=2453850.681967, initial=62.110741)
    test 611 at 243 iteration: 13
    test 612 at 246 nearestOn4: NearestOn4Tuple(lat=30.057906, lon=24.246352, distance=3722973.817216, normal=-24.0)
    test 613 at 246 distance2: Distance2Tuple(distance=2684688.240253, initial=65.480201)
    test 614 at 246 iteration: 13
    test 615 at 249 nearestOn4: NearestOn4Tuple(lat=29.482072, lon=26.856511, distance=3549365.860101, normal=-21.0)
    test 616 at 249 distance2: Distance2Tuple(distance=2908661.404266, initial=68.831849)
    test 617 at 249 iteration: 13
    test 618 at 252 nearestOn4: NearestOn4Tuple(lat=28.652617, lon=29.339085, distance=3368292.365392, normal=-18.0)
    test 619 at 252 distance2: Distance2Tuple(distance=3124363.961966, initial=72.136463)
    test 620 at 252 iteration: 14
    test 621 at 255 nearestOn4: NearestOn4Tuple(lat=27.595973, lon=31.653166, distance=3181483.93514, normal=-15.0)
    test 622 at 255 distance2: Distance2Tuple(distance=3330500.367925, initial=75.368254)
    test 623 at 255 iteration: 14
    test 624 at 258 nearestOn4: NearestOn4Tuple(lat=26.34337, lon=33.768789, distance=2990642.863598, normal=-12.0)
    test 625 at 258 distance2: Distance2Tuple(distance=3525947.426348, initial=78.507468)
    test 626 at 258 iteration: 15
    test 627 at 261 nearestOn4: NearestOn4Tuple(lat=24.927599, lon=35.667071, distance=2797285.607317, normal=-9.0)
    test 628 at 261 distance2: Distance2Tuple(distance=3709794.568962, initial=81.541766)
    test 629 at 261 iteration: 15
    test 630 at 264 nearestOn4: NearestOn4Tuple(lat=23.380219, lon=37.338792, distance=2602624.246813, normal=-6.0)
    test 631 at 264 distance2: Distance2Tuple(distance=3881355.597301, initial=84.466366)
    test 632 at 264 iteration: 16
    test 633 at 267 nearestOn4: NearestOn4Tuple(lat=21.729621, lon=38.782099, distance=2407500.005448, normal=-3.0)
    test 634 at 267 distance2: Distance2Tuple(distance=4040153.204404, initial=87.283272)
    test 635 at 267 iteration: 16
    test 636 at 270 nearestOn4: NearestOn4Tuple(lat=20.0, lon=40.0, distance=2212366.254172, normal=0.0)
    test 637 at 270 distance2: Distance2Tuple(distance=4185883.452394, initial=90.0)
    test 638 at 270 iteration: 2
    test 639 at 273 nearestOn4: NearestOn4Tuple(lat=18.21113, lon=40.99811, distance=2017309.778494, normal=3.0)
    test 640 at 273 distance2: Distance2Tuple(distance=4318369.394574, initial=92.628183)
    test 641 at 273 iteration: 18
    test 642 at 276 nearestOn4: NearestOn4Tuple(lat=16.378701, lon=41.782857, distance=1822097.141563, normal=6.0)
    test 643 at 276 distance2: Distance2Tuple(distance=4437512.122777, initial=95.182272)
    test 644 at 276 iteration: 19
    test 645 at 279 nearestOn4: NearestOn4Tuple(lat=14.515015, lon=42.3602, distance=1626234.955125, normal=9.0)
    test 646 at 279 distance2: Distance2Tuple(distance=4543245.293056, initial=97.678448)
    test 647 at 279 iteration: 20
    test 648 at 282 nearestOn4: NearestOn4Tuple(lat=12.629884, lon=42.73481, distance=1429036.030972, normal=12.0)
    test 649 at 282 distance2: Distance2Tuple(distance=4635496.852428, initial=100.133763)
    test 650 at 282 iteration: 20
    test 651 at 285 nearestOn4: NearestOn4Tuple(lat=10.731585, lon=42.909634, distance=1229686.200109, normal=15.0)
    test 652 at 285 distance2: Distance2Tuple(distance=4714159.823993, initial=102.565486)
    test 653 at 285 iteration: 20
    test 654 at 288 nearestOn4: NearestOn4Tuple(lat=8.827815, lon=42.885742, distance=1027308.413714, normal=18.0)
    test 655 at 288 distance2: Distance2Tuple(distance=4779072.735062, initial=104.990626)
    test 656 at 288 iteration: 20
    test 657 at 291 nearestOn4: NearestOn4Tuple(lat=6.926576, lon=42.662411, distance=821021.78405, normal=21.0)
    test 658 at 291 distance2: Distance2Tuple(distance=4830009.484467, initial=107.425584)
    test 659 at 291 iteration: 19
    test 660 at 294 nearestOn4: NearestOn4Tuple(lat=5.036963, lon=42.237368, distance=609993.754392, normal=24.0)
    test 661 at 294 distance2: Distance2Tuple(distance=4866678.02413, initial=109.885922)
    test 662 at 294 iteration: 18
    test 663 at 297 nearestOn4: NearestOn4Tuple(lat=3.169823, lon=41.607176, distance=393484.06554, normal=27.0)
    test 664 at 297 distance2: Distance2Tuple(distance=4888727.07477, initial=112.386218)
    test 665 at 297 iteration: 17
    test 666 at 300 nearestOn4: NearestOn4Tuple(lat=1.338261, lon=40.767728, distance=170879.9747, normal=30.0)
    test 667 at 300 distance2: Distance2Tuple(distance=4895760.153166, initial=114.939984)
    test 668 at 300 iteration: 15
    test 669 at 303 nearestOn4: NearestOn4Tuple(lat=-0.442006, lon=39.714869, distance=58276.59935, normal=33.0)
    test 670 at 303 distance2: Distance2Tuple(distance=4887356.42216, initial=117.559632)
    test 671 at 303 iteration: 14
    test 672 at 306 nearestOn4: NearestOn4Tuple(lat=-2.152468, lon=38.445128, distance=294267.652925, normal=36.0)
    test 673 at 306 distance2: Distance2Tuple(distance=4863098.229148, initial=120.256447)
    test 674 at 306 iteration: 13
    test 675 at 309 nearestOn4: NearestOn4Tuple(lat=-3.77182, lon=36.95662, distance=537179.270746, normal=39.0)
    test 676 at 309 distance2: Distance2Tuple(distance=4822605.581331, initial=123.040514)
    test 677 at 309 iteration: 12
    test 678 at 312 nearestOn4: NearestOn4Tuple(lat=-5.276135, lon=35.250116, distance=786877.93689, normal=42.0)
    test 679 at 312 distance2: Distance2Tuple(distance=4765578.049049, initial=125.920549)
    test 680 at 312 iteration: 12
    test 681 at 315 nearestOn4: NearestOn4Tuple(lat=-6.639267, lon=33.330324, distance=1042977.288036, normal=45.0)
    test 682 at 315 distance2: Distance2Tuple(distance=4691844.442335, initial=128.903552)
    test 683 at 315 iteration: 12
    test 684 at 318 nearestOn4: NearestOn4Tuple(lat=-7.833525, lon=31.207341, distance=1304791.465619, normal=48.0)
    test 685 at 318 distance2: Distance2Tuple(distance=4601419.700187, initial=131.994235)
    test 686 at 318 iteration: 12
    test 687 at 321 nearestOn4: NearestOn4Tuple(lat=-8.830702, lon=28.898191, distance=1571275.925114, normal=51.0)
    test 688 at 321 distance2: Distance2Tuple(distance=4494566.344609, initial=135.194197)
    test 689 at 321 iteration: 12
    test 690 at 324 nearestOn4: NearestOn4Tuple(lat=-9.60355, lon=26.428207, distance=1840964.643721, normal=54.0)
    test 691 at 324 distance2: Distance2Tuple(distance=4371854.291284, initial=138.500907)
    test 692 at 324 iteration: 12
    test 693 at 327 nearestOn4: NearestOn4Tuple(lat=-10.12774, lon=23.83189, distance=2111923.120701, normal=57.0)
    test 694 at 327 distance2: Distance2Tuple(distance=4234208.109837, initial=141.906658)
    test 695 at 327 iteration: 12
    test 696 at 330 nearestOn4: NearestOn4Tuple(lat=-10.384199, lon=21.152741, distance=2381745.725116, normal=60.0)
    test 697 at 330 distance2: Distance2Tuple(distance=4082926.581705, initial=145.397815)
    test 698 at 330 iteration: 13
    test 699 at 333 nearestOn4: NearestOn4Tuple(lat=-10.361518, lon=18.441649, distance=2647627.022313, normal=63.0)
    test 700 at 333 distance2: Distance2Tuple(distance=3919658.690883, initial=148.954759)
    test 701 at 333 iteration: 13
    test 702 at 336 nearestOn4: NearestOn4Tuple(lat=-10.057906, lon=15.753648, distance=2906522.653561, normal=66.0)
    test 703 at 336 distance2: Distance2Tuple(distance=3746326.345058, initial=152.55284)
    test 704 at 336 iteration: 13
    test 705 at 339 nearestOn4: NearestOn4Tuple(lat=-9.482072, lon=13.143489, distance=3155385.639627, normal=69.0)
    test 706 at 339 distance2: Distance2Tuple(distance=3564997.75099, initial=156.164419)
    test 707 at 339 iteration: 13
    test 708 at 342 nearestOn4: NearestOn4Tuple(lat=-8.652617, lon=10.660915, distance=3391430.460883, normal=72.0)
    test 709 at 342 distance2: Distance2Tuple(distance=3377731.675499, initial=159.761632)
    test 710 at 342 iteration: 14
    test 711 at 345 nearestOn4: NearestOn4Tuple(lat=-7.595973, lon=8.346834, distance=3612359.931242, normal=75.0)
    test 712 at 345 distance2: Distance2Tuple(distance=3186423.160726, initial=163.319215)
    test 713 at 345 iteration: 14
    test 714 at 348 nearestOn4: NearestOn4Tuple(lat=-6.34337, lon=6.231211, distance=3816501.539103, normal=78.0)
    test 715 at 348 distance2: Distance2Tuple(distance=2992679.463282, initial=166.816688)
    test 716 at 348 iteration: 15
    test 717 at 351 nearestOn4: NearestOn4Tuple(lat=-4.927599, lon=4.332929, distance=4002834.001406, normal=81.0)
    test 718 at 351 distance2: Distance2Tuple(distance=2797742.696107, initial=170.239499)
    test 719 at 351 iteration: 15
    test 720 at 354 nearestOn4: NearestOn4Tuple(lat=-3.380219, lon=2.661208, distance=4170920.680715, normal=84.0)
    test 721 at 354 distance2: Distance2Tuple(distance=2602460.6285, initial=173.5791)
    test 722 at 354 iteration: 16
    test 723 at 357 nearestOn4: NearestOn4Tuple(lat=-1.729621, lon=1.217901, distance=4320786.90777, normal=87.0)
    test 724 at 357 distance2: Distance2Tuple(distance=2407296.638562, initial=176.832261)
    test 725 at 357 iteration: 16
    test 726 at 360 nearestOn4: NearestOn4Tuple(lat=0.0, lon=0.0, distance=4452779.631731, normal=90.0)
    test 727 at 360 distance2: Distance2Tuple(distance=2212366.254172, initial=180.0)
    test 728 at 360 iteration: 2
    test 729 azi..: iteration=20, max=0.541766, mean=-2.031871, min=-6.096448, stdev=2.057729
    test 730 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), k0=0.9996, TMorder=7)

    test 731 intersection2: intersection2(lat=23.944114, lon=-45.833131)  FAILED, KNOWN, expected (26.9774, -43.4088)
    test 732 nearestOn4: NearestOn4Tuple(lat=23.944114, lon=-45.833131, distance=0.000043, normal=125.0)
    test 733 nearestOn4: NearestOn4Tuple(lat=23.944114, lon=-45.833131, distance=0.000246, normal=40.0)
    test 734 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='_', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)

    test 735 intersection2: intersection2(lat=37.0, lon=-42.376015)  FAILED, KNOWN, expected (37.0, -41.7028)
    test 736 nearestOn4: NearestOn4Tuple(lat=37.0, lon=-42.376015, distance=0.000129, normal=180.0)
    test 737 nearestOn4: NearestOn4Tuple(lat=37.0, lon=-42.376015, distance=0.000081, normal=45.0)
    test 738 xTM: KTransverseMercator(ellipsoid=Ellipsoid(name='_', a=6371008.771415, b=6371008.771415, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371008.771415, L=10007557.17611675, R1=6371008.771415, R2=6371008.771415, R3=6371008.771415, Rbiaxial=6371008.771415, Rtriaxial=6371008.771415), k0=0.9996, TMorder=6)

    test 739 toStr: azi12=3, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), invokation=6, lat1=1, lon1=2, rhumb=RhumbSolve(ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), invokation=6, RhumbSolve='/opt/local/bin/RhumbSolve', status=0), RhumbSolve='/opt/local/bin/RhumbSolve', status=0
    test 740 lat1: 1
    test 741 lon1: 2
    test 742 a: 6378137.0
    test 743 f: 0.003352810664747481
    test 744 Position: {azi12: 3, lat1: 1, lat2: 10.030279, lon1: 2, lon2: 2.472809, s12: 1000000.0, S12: 32084050047.178001}
    test 745 prec: 9
    test 746 reverse2: True
    test 747 unroll: True
    test 748 verbose: True

    test 749 toStr: azi12=3, ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), invokation=6, lat1=1, lon1=2, rhumb=RhumbSolve(ellipsoid=Ellipsoid(name='WGS84', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594), invokation=6, RhumbSolve='/opt/local/bin/RhumbSolve', status=0), RhumbSolve='/opt/local/bin/RhumbSolve', status=0
    test 750 lat1: 1
    test 751 lon1: 2
    test 752 a: 6378137.0
    test 753 f: 0.003352810664747481
    test 754 Position: {azi12: 3, lat1: 1, lat2: 10.030279, lon1: 2, lon2: 2.472809, s12: 1000000.0, S12: 32084050047.178001}
    test 755 prec: 9
    test 756 reverse2: True
    test 757 unroll: True
    test 758 verbose: True

    96 of 758 testRhumbx.py tests (12.7%) FAILED, incl. 86 KNOWN plus 10 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 6.391 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testRoutes.py
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.areaOf} has been DEPRECATED, use function L{ellipsoidalExact.areaOf} or L{ellipsoidalKarney.areaOf}.
  r = f(pts, wrap=True, **kwds)
./test/testRoutes.py:17099: DeprecationWarning: function L{pygeodesy.ellipsoidalVincenty.perimeterOf} has been DEPRECATED, use function L{ellipsoidalExact.perimeterOf} or L{ellipsoidalKarney.perimeterOf}.
  r = f(pts, wrap=True, **kwds)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.LatLon_ from .points by testRoutes.py line 13
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.R_M from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testRoutes.py 23.03.27 isLazy=3
    test 1 points.areaOf('Antarctica', adjust=True, radius=6371.01, wrap=True): 1751693.701  FAILED, KNOWN, expected 13552524.800
    test 2 points.areaOf('PtsFFI', adjust=True, radius=6371.01, wrap=True): 1.288
    test 3 points.areaOf('RdpFFI', adjust=True, radius=6371.01, wrap=True): 1.241
    test 4 points.areaOf('Pts', adjust=True, radius=6371.01, wrap=True): 131184.240
    test 5 points.areaOf('VwPts', adjust=True, radius=6371.01, wrap=True): 140310.144
    test 6 points.areaOf('_JFK_LHR1', adjust=True, radius=6371.01, wrap=True): 41383852.921  FAILED, KNOWN, expected 40041368.849
    test 7 points.areaOf('_JFK_LHR2', adjust=True, radius=6371.01, wrap=True): 82767705.842  FAILED, KNOWN, expected 80082737.697
    test 8 points.areaOf('Antarctica', adjust=False, radius=6371.01, wrap=True): 10446635.730  FAILED, KNOWN, expected 13552524.800
    test 9 points.areaOf('PtsFFI', adjust=False, radius=6371.01, wrap=True): 2.185  FAILED, KNOWN, expected 1.288
    test 10 points.areaOf('RdpFFI', adjust=False, radius=6371.01, wrap=True): 2.105  FAILED, KNOWN, expected 1.241
    test 11 points.areaOf('Pts', adjust=False, radius=6371.01, wrap=True): 233595.011  FAILED, KNOWN, expected 131184.240
    test 12 points.areaOf('VwPts', adjust=False, radius=6371.01, wrap=True): 258465.911  FAILED, KNOWN, expected 140310.144
    test 13 points.areaOf('_JFK_LHR1', adjust=False, radius=6371.01, wrap=True): 41780731.678  FAILED, KNOWN, expected 40041368.849
    test 14 points.areaOf('_JFK_LHR2', adjust=False, radius=6371.01, wrap=True): 83561463.357  FAILED, KNOWN, expected 80082737.697
    test 15 sphericalTrigonometry.areaOf('Antarctica', radius=6371.01, wrap=True): 241480413.388
    test 16 sphericalTrigonometry.areaOf('PtsFFI', radius=6371.01, wrap=True): 1.338
    test 17 sphericalTrigonometry.areaOf('RdpFFI', radius=6371.01, wrap=True): 1.289
    test 18 sphericalTrigonometry.areaOf('Pts', radius=6371.01, wrap=True): 125942.444
    test 19 sphericalTrigonometry.areaOf('VwPts', radius=6371.01, wrap=True): 118897.757
    test 20 sphericalTrigonometry.areaOf('_JFK_LHR1', radius=6371.01, wrap=True): 40105639.197
    test 21 sphericalTrigonometry.areaOf('_JFK_LHR2', radius=6371.01, wrap=True): 80211278.393
    test 22 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 23 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 24 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 25 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 26 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 27 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 28 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 29 ellipsoidalVincenty.areaOf('Antarctica', wrap=True): 1.366270e+13
    test 30 ellipsoidalVincenty.areaOf('PtsFFI', wrap=True): 1.343272e+06
    test 31 ellipsoidalVincenty.areaOf('RdpFFI', wrap=True): 1.294375e+06
    test 32 ellipsoidalVincenty.areaOf('Pts', wrap=True): 1.271286e+11
    test 33 ellipsoidalVincenty.areaOf('VwPts', wrap=True): 1.200540e+11
    test 34 ellipsoidalVincenty.areaOf('_JFK_LHR1', wrap=True): 4.004137e+13
    test 35 ellipsoidalVincenty.areaOf('_JFK_LHR2', wrap=True): 8.008274e+13
    test 36 points.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15620294.792  FAILED, KNOWN, expected 16765661.499
    test 37 points.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 38 points.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 39 points.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.129
    test 40 points.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672557.850
    test 41 points.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 16034670.768  FAILED, KNOWN, expected 15766750.804
    test 42 points.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26286857.120  FAILED, KNOWN, expected 25981742.208
    test 43 sphericalTrigonometry.perimeterOf('Antarctica', closed=False, radius=6.37101e+06, wrap=True): 15470624.834
    test 44 sphericalTrigonometry.perimeterOf('PtsFFI', closed=False, radius=6.37101e+06, wrap=True): 3224.123
    test 45 sphericalTrigonometry.perimeterOf('RdpFFI', closed=False, radius=6.37101e+06, wrap=True): 3185.467
    test 46 sphericalTrigonometry.perimeterOf('Pts', closed=False, radius=6.37101e+06, wrap=True): 2762313.116
    test 47 sphericalTrigonometry.perimeterOf('VwPts', closed=False, radius=6.37101e+06, wrap=True): 2672556.441
    test 48 sphericalTrigonometry.perimeterOf('_JFK_LHR1', closed=False, radius=6.37101e+06, wrap=True): 15789078.314
    test 49 sphericalTrigonometry.perimeterOf('_JFK_LHR2', closed=False, radius=6.37101e+06, wrap=True): 26041264.665
    test 50 ellipsoidalVincenty.perimeterOf('Antarctica', closed=False, wrap=True): 15531947.149  FAILED, KNOWN, expected 15531770.613
    test 51 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=False, wrap=True): 3229.337
    test 52 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=False, wrap=True): 3190.602
    test 53 ellipsoidalVincenty.perimeterOf('Pts', closed=False, wrap=True): 2769709.679  FAILED, KNOWN, expected 2769709.412
    test 54 ellipsoidalVincenty.perimeterOf('VwPts', closed=False, wrap=True): 2679915.858
    test 55 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=False, wrap=True): 15766750.804  FAILED, KNOWN, expected 15763434.962
    test 56 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=False, wrap=True): 25981742.208  FAILED, KNOWN, expected 25972353.155
    test 57 ellipsoidalVincenty.perimeterOf('Antarctica', closed=True, wrap=True): 16831067.893  FAILED, KNOWN, expected 16830891.356
    test 58 ellipsoidalVincenty.perimeterOf('PtsFFI', closed=True, wrap=True): 5491.045
    test 59 ellipsoidalVincenty.perimeterOf('RdpFFI', closed=True, wrap=True): 5452.310
    test 60 ellipsoidalVincenty.perimeterOf('Pts', closed=True, wrap=True): 5259077.510  FAILED, KNOWN, expected 5259077.242
    test 61 ellipsoidalVincenty.perimeterOf('VwPts', closed=True, wrap=True): 5171947.931
    test 62 ellipsoidalVincenty.perimeterOf('_JFK_LHR1', closed=True, wrap=True): 23926469.479  FAILED, KNOWN, expected 23921931.540
    test 63 ellipsoidalVincenty.perimeterOf('_JFK_LHR2', closed=True, wrap=True): 31533501.608  FAILED, KNOWN, expected 31524112.555
    test 64 geographiclib.WNZ-SAL(WGS84): 19959679.267
    test 65 geographiclib.WNZ-SAL(WGS84): 354.50
    test 66 geographiclib.WNZ-SAL(Sphere): 19967403.498
    test 67 geographiclib.WNZ-SAL(Sphere): 354.50
    test 68 geographiclib.BJS-SFO(WGS84): 9513998.0
    test 69 geographiclib.BJS-SFO(WGS84): 237.6
    test 70 geographiclib.BJS-SFO(Sphere): 9491734.6
    test 71 geographiclib.BJS-SFO(Sphere): 237.6
    test 72 geographiclib.SW-Perth(WGS84): 32.11195529
    test 73 geographiclib.SW-Perth(WGS84): -63.95925278
    test 74 geographiclib.SW-Perth(Sphere): 31.96383509
    test 75 geographiclib.SW-Perth(Sphere): -64.14670854
    test 76 geographiclib.JFK-LHR(WGS84): 40041368848742.5
    test 77 geographiclib.JFK-LHR(WGS84): 5551759.4
    test 78 geographiclib.JFK-LHR(Sphere): 40105639196534.8
    test 79 geographiclib.JFK-LHR(Sphere): 5536892.0
    test 80 geographiclib.Antarctica Peri(WGS84): 16831067.893
    test 81 geographiclib.Antarctica Area(WGS84): 13662703680020.1
    test 82 geographiclib.Antarctica Peri(Sphere): 16765661.499
    test 83 geographiclib.Antarctica Area(Sphere): 13552524809674.8
    test 84 isclockwise('Antarctica', adjust=False, wrap=True): 1.000
    test 85 isclockwise('PtsFFI', adjust=False, wrap=True): 1.000
    test 86 isclockwise('RdpFFI', adjust=False, wrap=True): 1.000
    test 87 isclockwise('Pts', adjust=False, wrap=True): 1.000
    test 88 isclockwise('VwPts', adjust=False, wrap=True): 1.000
    test 89 isclockwise('_JFK_LHR1', adjust=False, wrap=True): 0.000
    test 90 isclockwise('_JFK_LHR2', adjust=False, wrap=True): 0.000

    49 of 90 testRoutes.py tests (54.4%) FAILED, incl. 21 KNOWN plus 28 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 8.283 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testSimplify.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testSimplify.py line 11
# lazily imported pygeodesy.R_M from .constants by testSimplify.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testSimplify.py line 11
# lazily imported pygeodesy.Numpy2LatLon from .points by testSimplify.py line 11
# lazily imported pygeodesy.simplify1 from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDP from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyRDPm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVW from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.simplifyVWm from .simplify by testSimplify.py line 11
# lazily imported pygeodesy.R_KM from .constants by testRoutes.py line 13
# lazily imported pygeodesy.ellipsoidalVincenty by testRoutes.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testRoutes.py line 13
# lazily imported pygeodesy.areaOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.isclockwise from .points by testRoutes.py line 13
# lazily imported pygeodesy.perimeterOf from .points by testRoutes.py line 13
# lazily imported pygeodesy.unstr from .streprs by testRoutes.py line 13

    testing testSimplify.py 23.03.27 (module pygeodesy.simplify 23.03.22) isLazy=3
    test 1 simplify1(16614, adjust=True) 1m (76.042 ms): 16597
    test 2 simplifyRW(16614, adjust=True, shortest=False, indices=True) 1m (86.135 ms): 7095
    test 3 simplifyRW(16614, adjust=True, shortest=False) 1m (86.577 ms): 7095
    test 4 simplifyRW(16614, adjust=True, shortest=True) 1m (124.307 ms): 8302
    test 5 simplifyVWm(16614, adjust=True, indices=True) 1m (171.685 ms): 16328
    test 6 simplifyVWm(16614, adjust=True) 1m (179.284 ms): 16328
    test 7 simplifyVWm(16614, adjust=False) 1m (158.571 ms): 16373
    test 8 simplifyRDPm(16614, adjust=True, shortest=False) 1m (177.585 ms): 15864
    test 9 simplifyRDPm(16614, adjust=True, shortest=True) 1m (180.896 ms): 15867
    test 10 simplifyRDPgr(16614, adjust=True, shortest=True, modified=True) 1m (59.773 ms): 15867
    test 11 simplifyRDPm(16614, adjust=False, shortest=False) 1m (165.725 ms): 15869
    test 12 simplifyRDPfw(16614, adjust=False, shortest=False, modified=True) 1m (44.736 ms): 15869
    test 13 simplifyRDP(16614, adjust=True, shortest=True, indices=True) 1m (1.289 sec): 10960
    test 14 simplifyRDP(16614, adjust=True, shortest=True) 1m (1.294 sec): 10960
    test 15 simplifyRDPgr(16614, adjust=True, shortest=True, modified=False) 1m (535.059 ms): 10960
    test 16 simplifyRDP(16614, adjust=False, shortest=False, indices=True) 1m (1.142 sec): 11248
    test 17 simplifyRDP(16614, adjust=False, shortest=False) 1m (1.139 sec): 11248
    test 18 simplifyRDPfw(16614, adjust=False, shortest=False, modified=False) 1m (282.862 ms): 11248
    test 19 simplifyVW(1661, adjust=True) 1m (23.323 ms): 1641
    test 20 simplifyVW(1661, adjust=False) 1m (19.407 ms): 1646
    test 21 simplifyRDP(1661, adjust=True, shortest=False) 1m (95.536 ms): 1231
    test 22 simplifyRDP(1661, adjust=True, shortest=True) 1m (99.820 ms): 1231
    test 23 simplifyRDPgr(1661, adjust=True, shortest=True) 1m (41.175 ms): 1231
    test 24 simplifyRDP(1661, adjust=False, shortest=False) 1m (88.650 ms): 1267
    test 25 simplifyRDPfw(1661, adjust=False, shortest=False) 1m (22.232 ms): 1267
    test 26 simplifyRDPgr(1661, adjust=False, shortest=True) 1m (34.552 ms): 1267
    test 27 simplifyVW(69, adjust=False) 1m (670.910 us): 69
    test 28 simplifyRDP(69, adjust=False, shortest=False) 1m (2.023 ms): 50
    test 29 simplifyRDPfw(69, adjust=False, shortest=False) 1m (517.130 us): 50
    test 30 simplifyRDPgr(69, adjust=False, shortest=True) 1m (762.939 us): 50
    test 31 simplifyRDPgr(69, adjust=True, shortest=True) 1m (923.872 us): 45
    test 32 simplifyRDP(5, adjust=False, shortest=True) 1m (59.128 us): 5
    test 33 simplifyVW(5, adjust=False, attr='name') 30m (57.936 us): 5
    test 34 numpy.__version__: 1.23.3
    test 35 simplify1(69, adjust=False) 1m (584.841 us): 69
    test 36 simplify1(69, adjust=False) result: <class 'numpy.ndarray'>
    test 37 simplifyRW(69, adjust=False) 1m (602.722 us): 33
    test 38 simplifyRW(69, adjust=False) result: <class 'numpy.ndarray'>
    test 39 simplifyRDP(69, adjust=False) 1m (3.220 ms): 50
    test 40 simplifyRDP(69, adjust=False) result: <class 'numpy.ndarray'>
    test 41 simplifyRDPm(69, adjust=False) 1m (1.087 ms): 67
    test 42 simplifyRDPm(69, adjust=False) result: <class 'numpy.ndarray'>
    test 43 simplifyRDPfw(69, adjust=False) 1m (1.670 ms): 50
    test 44 simplifyRDPgr(69, adjust=False) 1m (2.847 ms): 50
    test 45 simplifyVW(69, adjust=False) 1m (1.054 ms): 69
    test 46 simplifyVW(69, adjust=False) result: <class 'numpy.ndarray'>
    test 47 simplifyVWm(69, adjust=False) 1m (1.047 ms): 69
    test 48 simplifyVWm(69, adjust=False) result: <class 'numpy.ndarray'>
    test 49 simplify1(69, adjust=True) 1m (560.045 us): 69
    test 50 simplify1(69, adjust=True) result: <class 'numpy.ndarray'>
    test 51 simplifyRW(69, adjust=True) 1m (586.987 us): 31
    test 52 simplifyRW(69, adjust=True) result: <class 'numpy.ndarray'>
    test 53 simplifyRDP(69, adjust=True) 1m (3.350 ms): 45
    test 54 simplifyRDP(69, adjust=True) result: <class 'numpy.ndarray'>
    test 55 simplifyRDPm(69, adjust=True) 1m (1.128 ms): 67
    test 56 simplifyRDPm(69, adjust=True) result: <class 'numpy.ndarray'>
    test 57 simplifyRDPfw(69, adjust=True) 1m (1.712 ms): 45
    test 58 simplifyRDPgr(69, adjust=True) 1m (2.945 ms): 45
    test 59 simplifyVW(69, adjust=True) 1m (1.109 ms): 69
    test 60 simplifyVW(69, adjust=True) result: <class 'numpy.ndarray'>
    test 61 simplifyVWm(69, adjust=True) 1m (1.088 ms): 69
    test 62 simplifyVWm(69, adjust=True) result: <class 'numpy.ndarray'>
    test 63 simplify1(69, adjust=False, indices=True) 1m (460.148 us): 69
    test 64 simplify1(69, adjust=False, indices=True) result: <class 'list'>
    test 65 simplifyRW(69, adjust=False, indices=True) 1m (518.322 us): 33
    test 66 simplifyRW(69, adjust=False, indices=True) result: <class 'list'>
    test 67 simplifyRDP(69, adjust=False, indices=True) 1m (3.153 ms): 50
    test 68 simplifyRDP(69, adjust=False, indices=True) result: <class 'list'>
    test 69 simplifyRDPm(69, adjust=False, indices=True) 1m (1.017 ms): 67
    test 70 simplifyRDPm(69, adjust=False, indices=True) result: <class 'list'>
    test 71 simplifyRDPfw(69, adjust=True, indices=True) 1m (1.665 ms): 45
    test 72 simplifyRDPgr(69, adjust=True, indices=True) 1m (2.912 ms): 45
    test 73 simplifyVW(69, adjust=False, indices=True) 1m (1.303 ms): 69
    test 74 simplifyVW(69, adjust=False, indices=True) result: <class 'list'>
    test 75 simplifyVWm(69, adjust=False, indices=True) 1m (963.211 us): 69
    test 76 simplifyVWm(69, adjust=False, indices=True) result: <class 'list'>

    all 76 testSimplify.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 7.660 sec

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testSpherical.py
./test/testSpherical.py:284: DeprecationWarning: method L{pygeodesy.sphericalNvector.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DM from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testLatLon.py line 11
# lazily imported pygeodesy.F_RAD from .dms by testLatLon.py line 11
# lazily imported pygeodesy.R_M from .constants by testLatLon.py line 11
# lazily imported pygeodesy.R_NM from .constants by testLatLon.py line 11
# lazily imported pygeodesy.degrees from .utily by testLatLon.py line 11
# lazily imported pygeodesy.fstr from .streprs by testLatLon.py line 11
# lazily imported pygeodesy.Height from .units by testLatLon.py line 11
# lazily imported pygeodesy.isclockwise from .points by testLatLon.py line 11
# lazily imported pygeodesy.isconvex from .points by testLatLon.py line 11
# lazily imported pygeodesy.isenclosedBy from .points by testLatLon.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testLatLon.py line 11
# lazily imported pygeodesy.ispolar from .points by testLatLon.py line 11
# lazily imported pygeodesy.m2km from .utily by testLatLon.py line 11
# lazily imported pygeodesy.m2NM from .utily by testLatLon.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testLatLon.py line 11
# lazily imported pygeodesy.VincentyError from .ellipsoidalVincenty by testLatLon.py line 11
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.F_DEG_ from .dms by testSpherical.py line 13
# lazily imported pygeodesy.PI_4 from .constants by testSpherical.py line 13
# lazily imported pygeodesy.classname from .named by testSpherical.py line 13
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testSpherical.py line 13
# lazily imported pygeodesy.latlonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.lonDMS from .dms by testSpherical.py line 13
# lazily imported pygeodesy.sphericalTrigonometry by testSpherical.py line 412

    testing testSpherical.py 23.03.27 isLazy=3

    testLatLon(pygeodesy.sphericalNvector, 23.04.11)
    test 1 isEllipsoidal: False
    test 2 isSpherical: True
    test 3 lat/lonDMS: 52.20472°N, 000.14056°E
    test 4 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 5 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 6 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 7 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 8 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 9 isequalTo: True
    test 10 isequalTo: True
    test 11 latlon2: 52.20472, 0.14056
    test 12 latlon2: 52.2047, 0.1406
    test 13 latlon2: 52.205, 0.141
    test 14 latlon2: 52.2, 0.14
    test 15 latlon2: 52.2, 0.1
    test 16 latlon2: 52.0, 0.0
    test 17 chordTo: 12036677.26
    test 18 chordTo: 12036463.78
    test 19 initialBearingTo: 156.1666
    test 20 initialBearingTo: 65.8921
    test 21 initialBearingTo: 0.0
    test 22 initialBearingTo: 180.0
    test 23 finalBearingTo: 157.8904
    test 24 finalBearingTo: 93.8581
    test 25 bearingTo2: 156.1666, 157.8904
    test 26 ispolar: True
    test 27 copy: True
    test 28 __eq__: True
    test 29 __ne__: False
    test 30 equirectangularTo: 404329.56
    test 31 distanceTo: 404279.720589
    test 32 distanceTo: 404279.720589
    test 33 distanceTo: 2145
    test 34 distanceTo: 18013602.92
    test 35 distanceTo: 20015114.35
    test 36 intermediateTo: 51.372084°N, 000.707337°E
    test 37 intermediateTo: True
    test 38 intermediateTo: 404279.721
    test 39 intermediateTo+5: 35.160975°N, 008.989542°E
    test 40 intermediateTo+5: 5.000
    test 41 intermediateTo-4: 64.911647°N, 013.726301°W
    test 42 intermediateTo-4: 4.000
    test 43 intermediateTo-h: 125.000
    test 44 intermediateChordTo: 51.372294°N, 000.707192°E
    test 45 intermediateChordTo: True
    test 46 intermediateChordTo-h: 125.000
    test 47 midpointTo: 50.536327°N, 001.274614°E
    test 48 destination: 51.513546°N, 000.098345°W
    test 49 destination: 51°30′49″N, 000°05′54″W
    test 50 destination: 34°37′N, 116°33′W
    test 51 destination: 34.613647°N, 116.55116°W
    test 52 destination: 0.604122N, 2.034201W
    test 53 destination: 31.96383509°N, 064.37329146°E
    test 54 alongTrackDistanceTo: can't multiply sequence by non-int of type 'float'  FAILED, KNOWN, expected incompatible ...
    test 55 alongTrackDistanceTo: 62331.58
    test 56 alongTrackDistanceTo: 99.588
    test 57 alongTrackDistanceTo: -7702.7
    test 58 alongTrackDistanceTo: 7587.6
    test 59 crossTrackDistanceTo: -305.66528160755445  FAILED, KNOWN, expected TypeError
    test 60 crossTrackDistanceTo: -307.55
    test 61 crossTrackDistanceTo: 7.4524
    test 62 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 63 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 64 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 65 chordTo: 124799.103
    test 66 cosineAndoyerLambertTo: 124801.098
    test 67 cosineAndoyerLambertTo: 124801.098
    test 68 cosineForsyheAndoyerLambertTo: 124801.098
    test 69 cosineForsyheAndoyerLambertTo: 124801.098
    test 70 cosineLawTo: 124801.098
    test 71 cosineLawTo: 124801.098
    test 72 equirectangularTo: 124804.754
    test 73 equirectangularTo: 124804.754
    test 74 euclideanTo: 130015.089
    test 75 euclideanTo: 130015.089
    test 76 flatLocalTo: 124804.754
    test 77 flatLocalTo: 124804.754
    test 78 flatPolarTo: 133663.257
    test 79 flatPolarTo: 133663.257
    test 80 hartzell: 53.3206°N, 001.7297°W
    test 81 hartzell: 53.3206°N, 001.7297°W
    test 82 height4: 0.0
    test 83 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 84 height4: 53°19′14.2″N, 001°43′46.9″W
    test 85 height4: 53°19′14.2″N, 001°43′46.9″W
    test 86 haversineTo: 124801.098
    test 87 haversineTo: 124801.098
    test 88 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 89 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 90 thomasTo: 124801.098
    test 91 thomasTo: 124801.098
    test 92 vincentysTo: 124801.098
    test 93 vincentysTo: 124801.098
    test 94 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 95 isclockwise: False
    test 96 isclockwise*: False
    test 97 isclockwise: True
    test 98 isclockwise*: True
    test 99 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 100 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 101 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 102 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 103 isconvex: False
    test 104 isconvex*: False
    test 105 isconvex: True
    test 106 isconvex*: True
    test 107 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 108 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 109 isenclosedBy1: True
    test 110 isenclosedBy1*: True
    test 111 isenclosedBy2: False
    test 112 isenclosedBy2*: False
    test 113 isenclosedBy3: False
    test 114 isenclosedBy3*: False
    test 115 isenclosedBy4: False
    test 116 isenclosedBy4*: False
    test 117 isenclosedBy5: False
    test 118 isenclosedBy5*: False
    test 119 isenclosedBy6: True
    test 120 isenclosedBy6*: True
    test 121 isenclosedBy7: True
    test 122 isenclosedBy7*: True
    test 123 isenclosedBy-CCW: True
    test 124 isenclosedBy-CW : True
    test 125 isenclosedBy-CCW: True
    test 126 initialBearingTo: 102.432182
    test 127 compassAngleTo: 100.017
    test 128 compassAngleTo: 105.599
    test 129 initialBearingTo: 288.715918
    test 130 compassAngleTo: 280.017
    test 131 compassAngleTo: 285.599
    test 132 equirectangularTo: 592.185
    test 133 distanceTo: 591.831
    test 134 compassAngleTo: 0.0
    test 135 compassAngleTo: 45.0
    test 136 compassAngleTo: 90.0
    test 137 compassAngleTo: 180.0
    test 138 compassAngleTo: 225.0
    test 139 compassAngleTo: 315.0
    test 140 compassAngleTo: 270.0
    test 141 compassAngleTo: 359.4
    test 142 latlon2: (53.0, 1.0)
    test 143 philam2: (0.93, 0.02)
    test 144 compassAngleTo: 31
    test 145 compassAngleTo: 45

    test 146 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 147 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 148 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 149 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 150 isequalTo: <class 'bool'>
    test 151 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 152 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 153 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 154 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 155 compassAngleTo: <class 'float'>
    test 156 cosineLawTo: <class 'float'>
    test 157 euclideanTo: <class 'float'>
    test 158 flatLocalTo: <class 'float'>
    test 159 flatPolarTo: <class 'float'>
    test 160 haversineTo: <class 'float'>
    test 161 hubenyTo: <class 'float'>
    test 162 vincentysTo: <class 'float'>
    test 163 toVector: (0.615661, 0.0, 0.788011)
    test 164 toVector3d: (0.61566, 0.0, 0.78801)
    test 165 trilaterate5 (pygeodesy.sphericalNvector) .min: 223.305
    test 166 trilaterate5 (pygeodesy.sphericalNvector) .point: 42.67456065°N, 002.49539502°E
    test 167 trilaterate5 (pygeodesy.sphericalNvector) .min- is .maxPoint: True
    test 168 trilaterate5 (pygeodesy.sphericalNvector) .n: 1
    test 169 trilaterate5 (pygeodesy.sphericalNvector) .error: sphericalNvector.LatLon.trilaterate5(area=True, wrap=False), MRO(nvectorBase.LatLonNvectorBase, sphericalBase.LatLonSphericalBase, latlonBase.LatLonBase, named._NamedBase, named._Named): not implemented

    test 170 radii11: Radii11Tuple(rA=7701.409157, rB=1361.530045, rC=499.257353, cR=4886.694635, rIn=739.915482, riS=179.523525, roS=6087.250896, a=1860.787398, b=8200.666509, c=9062.939201, s=9562.196554)
    test 171 circum4 (pygeodesy.sphericalNvector) .radius: 3185505.323  FAILED, KNOWN, expected 3184256.748
    test 172 circum4 (pygeodesy.sphericalNvector) .center: 42.674561°N, 002.495395°E, -3185503.45m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 173 circum4 (pygeodesy.sphericalNvector) .rank: 3
    test 174 circum4 (pygeodesy.sphericalNvector) .residuals: ()
    test 175 circum4 (pygeodesy.sphericalNvector) .d1: 4886.695  FAILED, KNOWN, expected 57818.033
    test 176 circum4 (pygeodesy.sphericalNvector) .d2: 4886.695  FAILED, KNOWN, expected 57834.176
    test 177 circum4 (pygeodesy.sphericalNvector) .d3: 4886.695  FAILED, KNOWN, expected 57830.992
    test 178 circum4 (pygeodesy.sphericalNvector) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 179 circum4 (pygeodesy.sphericalNvector) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 180 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 181 circin6 (pygeodesy.sphericalNvector) .rB+rC: 1564564.352
    test 182 circin6 (pygeodesy.sphericalNvector) .rC+pA: 1110540.003
    test 183 circin6 (pygeodesy.sphericalNvector) .rA+rB: 1110540.003
    test 184 circin6 (pygeodesy.sphericalNvector) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 185 circin6 (pygeodesy.sphericalNvector) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 186 circin6 (pygeodesy.sphericalNvector) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 187 circin6 (pygeodesy.sphericalNvector) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 188 circin6 (pygeodesy.sphericalNvector) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 189 circin6 (pygeodesy.sphericalNvector) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 190 circin6 (pygeodesy.sphericalNvector) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 191 circin6 (pygeodesy.sphericalNvector) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 192 circin6 (pygeodesy.sphericalNvector) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    test 193 area cw/ccw: 1.0

    testVectorial(pygeodesy.sphericalNvector, 23.04.11)
    test 194 crossTrackDistanceTo: -305.67
    test 195 crossTrackDistanceTo: -307.55

    test 196 toLatLon: 44.995674°N, 045.0°E
    test 197 toNvector: (0.50004, 0.50004, 0.70705)
    test 198 isequalTo: False
    test 199 isequalTo: True
    test 200 length: 0.99992449715
    test 201 euclid: 0.99995577
    test 202 length: 1.00
    test 203 euclid: 1.0000
    test 204 meanOf: 44.995674°N, 045.0°E
    test 205 meanOf: LatLon
    test 206 apply: (0.5, 0.5, 0.707)
    test 207 init: (0.5, 0.5, 0.707)
    test 208 i***: (0.5, 0.5, 0.707)
    test 209 abs: 0.99992449715
    test 210 sumOf: (52.70504, 0.61904, 0.70705)
    test 211 sumOf: Nv
    test 212 sumOf: sumOf
    test 213 length: 52.7134151513
    test 214 sizeof: 120  FAILED, KNOWN, expected 72
    test 215 copy: True
    test 216 length: 52.2051356286
    test 217 length: 52.2051356286
    test 218 sizeof: 120

    test 219 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 220 toLatLon: 44.995674°N, 045.0°E
    test 221 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 222 intersection: 02.499372°N, 002.5°E
    test 223 isenclosedBy: True
    test 224 isenclosedBy*: True
    test 225 isenclosedBy: True
    test 226 isenclosedBy*: True

    test 227 iswithin: False
    test 228 iswithin: True

    test 229 nearestOn: 51.0°N, 001.0°E
    test 230 nearestOn: 50.987°N, 000.298°W
    test 231 nearestOn: 51.0°N, 002.0°E
    test 232 nearestOn: 50.995°N, 002.655°E
    test 233 nearestOn: 51.0°N, 001.9°E
    test 234 nearestOn: True
    test 235 distanceTo: 42.712
    test 236 nearestOn: 51.0°N, 002.0°E
    test 237 nearestOn: True
    test 238 nearestOn: 00.0°N, 000.0°E
    test 239 nearestOn: True
    test 240 nearestOn: 00.0°N, 020.0°E
    test 241 nearestOn: True
    test 242 nearestOn: 02.0°N, 002.0°E
    test 243 nearestOn: 02.0°N, 002.0°E

    test 244 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 245 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 246 BasseC: 47.3038°N, 002.5721°W
    test 247 BasseH: 47.311067°N, 002.528617°W
    test 248 triangulate: 47.323667°N, 002.568501°W
    test 249 triangulate: True

    test 250 trilaterate: 37.419078°N, 121.960579°W
    test 251 trilaterate: True
    test 252 trilaterate: 08.068912°S, 034.888699°W
    test 253 trilaterate: True
    test 254 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 255 trilaterate: True
    test 256 trilaterate: 42.67456065°N, 002.49539502°E
    test 257 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 23.04.11)
    test 258 sumOf: Nvector
    test 259 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 260 ecef.lat, .lon: 44.995674, 45.0
    test 261 ecef.height: -0.0
    test 262 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 263 .isEllipsoidal: False
    test 264 .isSpherical: True
    test 265 .latlon: (44.995674, 45.0)
    test 266 .philam: (0.785323, 0.785398)
    test 267 .latlonheight: (44.995674, 45.0, 0.0)
    test 268 .philamheight: (0.785323, 0.785398, 0.0)
    test 269 parse: (0.5, 0.5, 0.707)
    test 270 cmp: 0
    test 271 eq: True
    test 272 ge: True
    test 273 gt: False
    test 274 le: True
    test 275 lt: False
    test 276 ne: False
    test 277 *: (1.0, 1.0, 1.414)
    test 278 +: (1.0, 1.0, 1.414)
    test 279 /: (0.5, 0.5, 0.707)
    test 280 -: (0.5, 0.5, 0.707)
    test 281 @: (0.0, 0.0, 0.0)
    test 282 @: (0.0, 0.0, 0.0)
    test 283 rotate: (0.26268, 0.26268, 0.37143)
    test 284 crosserrors: True
    test 285 0: divisor (0): float division by zero
    test 286 intersections2: (500.0, 0.0, 0.0)
    test 287 nearestOn: (0.0, 0.0, 0.0)
    test 288 nearestOn: True
    test 289 nearestOn: (100.0, 100.0, 100.0)
    test 290 nearestOn: True
    test 291 iscolinearWith: False
    test 292 iscolinearWith: True
    test 293 nearestOn: (0.0, 0.0, 0.0)
    test 294 nearestOn: True
    test 295 nearestOn: (100.0, 100.0, 100.0)
    test 296 nearestOn: True
    test 297 iscolinearWith: False
    test 298 iscolinearWith: True

    testSpherical(pygeodesy.sphericalNvector, 23.04.11)
    test 299 isSpherical: True
    test 300 isEllipsoidal: False
    test 301 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 302 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 303 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 304 isSpherical: True
    test 305 isEllipsoidal: False
    test 306 intersection1: 50.907608°N, 004.508575°E
    test 307 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 308 intersection1: True
    test 309 intersection2: True
    test 310 intersection2: 43.5719°N, 116.188757°W
    test 311 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 312 intersection3: 51.882166°N, 000.267801°E
    test 313 intersection4: 00.0°N, 026.565051°E
    test 314 intersection5: 26.565051°N, 000.0°W
    test 315 intersection6: 50.907809°N, 004.50841°E
    test 316 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 317 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 318 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 319 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 320 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 321 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 322 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 323 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 324 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 325 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 326 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 327 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 328 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 329 brng+end 1a: 01.000305°N, 002.0°E
    test 330 brng+end 1b: 01.000305°N, 002.0°E
    test 331 brng+end 2a: 01.000305°S, 178.0°W
    test 332 brng+end 2b: 01.000305°S, 178.0°W
    test 333 intersection7: 02.499372°N, 002.5°E
    test 334 maxLat0: 90.0
    test 335 maxLat1: 89.0
    test 336 maxLat90: 0.0
    test 337 minLat0: -90.0
    test 338 minLat1: -89.0
    test 339 minLat90: -0.0
    test 340 parse: 00.0°N, 000.0°E
    test 341 intersecant2: (LatLon(04°15′07.82″N, 006°15′50.15″E), LatLon(01°14′59.64″S, 000°44′59.28″E))
    test 342 intersecant2: 699204  FAILED, KNOWN, expected 700000
    test 343 intersecant2: 699931  FAILED, KNOWN, expected 700000
    test 344 intersecant2: 45
    test 345 intersecant2: (LatLon(04°15′12.05″N, 006°15′26.13″E), LatLon(01°15′02.91″S, 000°44′56.74″E))
    test 346 intersecant2: 698456  FAILED, KNOWN, expected 700000
    test 347 intersecant2: 700022  FAILED, KNOWN, expected 700000
    test 348 intersecant2: 45
    test 349 intersecant2: (LatLon(04°15′15.1″N, 006°15′29.19″E), LatLon(01°15′28.78″S, 000°44′30.85″E))
    test 350 intersecant2: 698511  FAILED, KNOWN, expected 700000
    test 351 intersecant2: 700010  FAILED, KNOWN, expected 700000
    test 352 intersecant2: 45
    test 353 isenclosedBy: True
    test 354 isenclosedBy*: True
    test 355 isenclosedBy: True
    test 356 isenclosedBy*: True
    test 357 rhumbBearingTo: 116.722
    test 358 rhumbDestination: 50.964155°N, 001.853°E
    test 359 rhumbDestination: True
    test 360 rhumbDistanceTo: 40307.8
    test 361 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 362 rhumbMidpointo: True
    test 363 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 364 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 365 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 366 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 367 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 368 areaOf: 8.66605875e+09
    test 369 perimeterOf: 3.78258541e+05
    test 370 perimeterOf: 2.67063461e+05
    test 371 areaOf: 6.18e+09
    test 372 perimeterOf: 3.79639757e+05
    test 373 perimeterOf: 2.68444678e+05
    test 374 nearestOn3: 46.000996°N, 001.353049°E
    test 375 nearestOn3: 569987.49
    test 376 distanceTo: 569987.49
    test 377 nearestOn3: 46.0°N, 002.0°E
    test 378 nearestOn3: 134989.80
    test 379 distanceTo: 134989.80
    test 380 nearestOn3: 45.330691°N, 001.318551°E
    test 381 distance: 64856.28
    test 382 distanceTo: 64856.28
    test 383 compassAngleTo: 304.54
    test 384 difference: 1000.53
    test 385 ispolar: True
    test 386 ispolar*: True
    test 387 ispolar: False  FAILED, KNOWN, expected True
    test 388 ispolar*: False  FAILED, KNOWN, expected True
    test 389 ispolar: True
    test 390 ispolar*: True
    test 391 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 392 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 393 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 394 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    testLatLon(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 395 isEllipsoidal: False
    test 396 isSpherical: True
    test 397 lat/lonDMS: 52.20472°N, 000.14056°E
    test 398 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 399 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 400 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 401 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 402 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 403 isequalTo: True
    test 404 isequalTo: True
    test 405 latlon2: 52.20472, 0.14056
    test 406 latlon2: 52.2047, 0.1406
    test 407 latlon2: 52.205, 0.141
    test 408 latlon2: 52.2, 0.14
    test 409 latlon2: 52.2, 0.1
    test 410 latlon2: 52.0, 0.0
    test 411 chordTo: 12036677.26
    test 412 chordTo: 12036463.78
    test 413 initialBearingTo: 156.1666
    test 414 initialBearingTo: 65.8921
    test 415 initialBearingTo: 0.0
    test 416 initialBearingTo: 180.0
    test 417 finalBearingTo: 157.8904
    test 418 finalBearingTo: 93.8581
    test 419 bearingTo2: 156.1666, 157.8904
    test 420 ispolar: True
    test 421 copy: True
    test 422 __eq__: True
    test 423 __ne__: False
    test 424 equirectangularTo: 404329.56
    test 425 distanceTo: 404279.720589
    test 426 distanceTo: 404279.720589
    test 427 distanceTo: 2145
    test 428 antipodal: False
    test 429 distanceTo dateline: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 430 distanceTo unrolled: 19967403.498  FAILED, KNOWN, expected 19119590.551
    test 431 antipodal: False
    test 432 distanceTo dateline: 9491735
    test 433 distanceTo unrolled: 9491735
    test 434 distanceTo: 18013602.92
    test 435 distanceTo: 20015114.35
    test 436 intermediateTo: 51.372084°N, 000.707337°E
    test 437 intermediateTo: True
    test 438 intermediateTo: 404279.721
    test 439 intermediateTo+5: 35.160975°N, 008.989542°E
    test 440 intermediateTo+5: 5.000
    test 441 intermediateTo-4: 64.911647°N, 013.726301°W
    test 442 intermediateTo-4: 4.000
    test 443 intermediateTo-h: 125.000
    test 444 midpointTo: 50.536327°N, 001.274614°E
    test 445 destination: 51.513546°N, 000.098345°W
    test 446 destination: 51°30′49″N, 000°05′54″W
    test 447 destination: 34°37′N, 116°33′W
    test 448 destination: 34.613647°N, 116.55116°W
    test 449 destination: 0.604122N, 2.034201W
    test 450 destination: 31.96383509°N, 064.37329146°E
    test 451 alongTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.alongTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 452 alongTrackDistanceTo: 62331.58
    test 453 alongTrackDistanceTo: 99.588
    test 454 alongTrackDistanceTo: -7702.7
    test 455 alongTrackDistanceTo: 7587.6
    test 456 crossTrackDistanceTo: type(end) (96): incompatible with sphericalTrigonometry.LatLon.crossTrackDistanceTo(end)  FAILED, KNOWN, expected incompatible ...
    test 457 crossTrackDistanceTo: -307.55
    test 458 crossTrackDistanceTo: 7.4524
    test 459 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 460 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 461 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))  FAILED, KNOWN, expected (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))
    test 462 chordTo: 124799.103
    test 463 cosineAndoyerLambertTo: 124801.098
    test 464 cosineAndoyerLambertTo: 124801.098
    test 465 cosineForsyheAndoyerLambertTo: 124801.098
    test 466 cosineForsyheAndoyerLambertTo: 124801.098
    test 467 cosineLawTo: 124801.098
    test 468 cosineLawTo: 124801.098
    test 469 equirectangularTo: 124804.754
    test 470 equirectangularTo: 124804.754
    test 471 euclideanTo: 130015.089
    test 472 euclideanTo: 130015.089
    test 473 flatLocalTo: 124804.754
    test 474 flatLocalTo: 124804.754
    test 475 flatPolarTo: 133663.257
    test 476 flatPolarTo: 133663.257
    test 477 hartzell: 53.3206°N, 001.7297°W
    test 478 hartzell: 53.3206°N, 001.7297°W
    test 479 height4: 0.0
    test 480 height4: (3803904.2, -114870.8, 5109488.3, 0.0)
    test 481 height4: 53°19′14.2″N, 001°43′46.9″W
    test 482 height4: 53°19′14.2″N, 001°43′46.9″W
    test 483 haversineTo: 124801.098
    test 484 haversineTo: 124801.098
    test 485 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°19′14.16″N, 001°43′46.92″W)>
    test 486 hubenyTo: <bound method LatLonBase.flatLocalTo of LatLon(53°11′19.32″N, 000°08′00.24″E)>
    test 487 thomasTo: 124801.098
    test 488 thomasTo: 124801.098
    test 489 vincentysTo: 124801.098
    test 490 vincentysTo: 124801.098
    test 491 isclockwise: False
    test 492 isclockwise*: False
    test 493 isclockwise: True
    test 494 isclockwise*: True
    test 495 isclockwise: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 496 isclockwise*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 497 isclockwise: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 498 isclockwise*: zero or polar area: (LatLon(85°00′00.0″N, 135°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″W), LatLon(85°00′00.0″N, 045°00′00.0″E))...  FAILED, KNOWN, expected zero or polar area
    test 499 isconvex: False
    test 500 isconvex*: False
    test 501 isconvex: True
    test 502 isconvex*: True
    test 503 isconvex: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 504 isconvex*: points (3): too few  FAILED, KNOWN, expected points (2): too few
    test 505 isenclosedBy1: True
    test 506 isenclosedBy1*: True
    test 507 isenclosedBy2: False
    test 508 isenclosedBy2*: False
    test 509 isenclosedBy3: False
    test 510 isenclosedBy3*: False
    test 511 isenclosedBy4: False
    test 512 isenclosedBy4*: False
    test 513 isenclosedBy5: False
    test 514 isenclosedBy5*: False
    test 515 isenclosedBy6: True
    test 516 isenclosedBy6*: True
    test 517 isenclosedBy7: True
    test 518 isenclosedBy7*: True
    test 519 isenclosedBy-CCW: True
    test 520 isenclosedBy-CW : True
    test 521 isenclosedBy-CCW: True
    test 522 initialBearingTo: 102.432182
    test 523 compassAngleTo: 100.017
    test 524 compassAngleTo: 105.599
    test 525 initialBearingTo: 288.715918
    test 526 compassAngleTo: 280.017
    test 527 compassAngleTo: 285.599
./test/testSpherical.py:284: DeprecationWarning: method L{pygeodesy.sphericalTrigonometry.LatLon.rhumbBearingTo} has been DEPRECATED, use method C{.rhumbAzimuthTo}.
  b = p.rhumbBearingTo(q)  # rhumbAzimuthTo
    test 528 equirectangularTo: 592.185
    test 529 distanceTo: 591.831
    test 530 bearingTo: 0.0
    test 531 compassAngleTo: 0.0
    test 532 bearingTo: 45.0
    test 533 compassAngleTo: 45.0
    test 534 bearingTo: 90.0
    test 535 compassAngleTo: 90.0
    test 536 bearingTo: 180.0
    test 537 compassAngleTo: 180.0
    test 538 bearingTo: 225.0
    test 539 compassAngleTo: 225.0
    test 540 bearingTo: 315.0
    test 541 compassAngleTo: 315.0
    test 542 bearingTo: 270.0
    test 543 compassAngleTo: 270.0
    test 544 bearingTo: 0.0  FAILED, KNOWN, expected 359.4
    test 545 compassAngleTo: 359.4
    test 546 latlon2: (53.0, 1.0)
    test 547 philam2: (0.93, 0.02)
    test 548 bearingTo: 31
    test 549 compassAngleTo: 31
    test 550 compassAngleTo: 45

    test 551 boundsOf: <class 'pygeodesy.namedTuples.Bounds2Tuple'>
    test 552 latlon: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 553 latlon2: <class 'pygeodesy.namedTuples.LatLon2Tuple'>
    test 554 latlonheight: <class 'pygeodesy.namedTuples.LatLon3Tuple'>
    test 555 isequalTo: <class 'bool'>
    test 556 philam: <class 'pygeodesy.namedTuples.PhiLam2Tuple'>
    test 557 philamheight: <class 'pygeodesy.namedTuples.PhiLam3Tuple'>
    test 558 xyz: <class 'pygeodesy.namedTuples.Vector3Tuple'>
    test 559 xyzh: <class 'pygeodesy.namedTuples.Vector4Tuple'>
    test 560 compassAngleTo: <class 'float'>
    test 561 cosineLawTo: <class 'float'>
    test 562 euclideanTo: <class 'float'>
    test 563 flatLocalTo: <class 'float'>
    test 564 flatPolarTo: <class 'float'>
    test 565 haversineTo: <class 'float'>
    test 566 hubenyTo: <class 'float'>
    test 567 vincentysTo: <class 'float'>
    test 568 toNvector: (0.61566, 0.0, 0.78801)
    test 569 toVector: (0.615661, 0.0, 0.788011)
    test 570 toVector3d: (0.61566, 0.0, 0.78801)

    test 571 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 572 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 573 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 574 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 575 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 576 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 577 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 160.242
    test 578 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.67817811°N, 002.49966641°E
    test 579 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 580 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 581 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 582 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 583 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 584 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 585 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 1340.608
    test 586 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.69128229°N, 002.50129001°E
    test 587 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1499.220
    test 588 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.64295864°N, 002.44242391°E
    test 589 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 590 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 591 circum3 (pygeodesy.sphericalTrigonometry) .radius: 57690.494  FAILED, KNOWN, expected 57792.067
    test 592 circum3 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -261.20m  FAILED, KNOWN, expected 43.053532°N, 002.943255°E, -261.66m
    test 593 circum3 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 18.983)  FAILED, KNOWN, expected (0.0, 0.0, 11.383)
    test 594 circum3 (pygeodesy.sphericalTrigonometry) .d1: 57691.282  FAILED, KNOWN, expected 57792.858
    test 595 circum3 (pygeodesy.sphericalTrigonometry) .d2: 57691.282  FAILED, KNOWN, expected 57792.859
    test 596 circum3 (pygeodesy.sphericalTrigonometry) .d3: 57691.282  FAILED, KNOWN, expected 57792.859
    test 597 circum3 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 598 circum3 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>

    test 599 radii11: Radii11Tuple(rA=7237.243793, rB=1825.695409, rC=2.255158, cR=57690.493993, rIn=57.33247, riS=2.087691, roS=2.443616, a=1827.950567, b=7239.49895, c=9062.939201, s=9065.194359)
    test 600 circum4 (pygeodesy.sphericalTrigonometry) .radius: 3185634.993  FAILED, KNOWN, expected 3184256.748
    test 601 circum4 (pygeodesy.sphericalTrigonometry) .center: 43.051859°N, 002.94463°E, -3185373.78m  FAILED, KNOWN, expected 43.054367°N, 002.942573°E, -3183993.92m
    test 602 circum4 (pygeodesy.sphericalTrigonometry) .rank: 3
    test 603 circum4 (pygeodesy.sphericalTrigonometry) .residuals: ()
    test 604 circum4 (pygeodesy.sphericalTrigonometry) .d1: 57691.283  FAILED, KNOWN, expected 57818.033
    test 605 circum4 (pygeodesy.sphericalTrigonometry) .d2: 57691.283  FAILED, KNOWN, expected 57834.176
    test 606 circum4 (pygeodesy.sphericalTrigonometry) .d3: 57691.283  FAILED, KNOWN, expected 57830.992
    test 607 circum4 (pygeodesy.sphericalTrigonometry) .datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 608 circum4 (pygeodesy.sphericalTrigonometry) .Ecef: <class 'pygeodesy.ecef.EcefKarney'>
    test 609 radii11: Radii11Tuple(rA=328257.82694, rB=782282.176109, rC=782282.176109, cR=782304.746354, rIn=325773.738834, riS=85162.638484, roS=INF, a=1564564.352218, b=1110540.003049, c=1110540.003049, s=1892822.179158)
    test 610 circin6 (pygeodesy.sphericalTrigonometry) .rB+rC: 1564564.352
    test 611 circin6 (pygeodesy.sphericalTrigonometry) .rC+pA: 1110540.003
    test 612 circin6 (pygeodesy.sphericalTrigonometry) .rA+rB: 1110540.003
    test 613 circin6 (pygeodesy.sphericalTrigonometry) .radius: 325773.739  FAILED, KNOWN, expected 325058.721
    test 614 circin6 (pygeodesy.sphericalTrigonometry) .center: 02.938473°N, 002.942346°E, -40128.57m  FAILED, KNOWN, expected 02.948531°N, 002.932537°E, -40041.19m
    test 615 circin6 (pygeodesy.sphericalTrigonometry) .deltas: (0.0, 0.0, 0.439915)  FAILED, KNOWN, expected (0.0, 0.0, 0.090491)
    test 616 circin6 (pygeodesy.sphericalTrigonometry) .cA: 05.019001°N, 005.038369°E, -48209.76m  FAILED, KNOWN, expected 05.04314°N, 005.014578°E, -48104.09m
    test 617 circin6 (pygeodesy.sphericalTrigonometry) .cB: 00.0°N, 002.951508°E, -20185.00m  FAILED, KNOWN, expected 00.0°N, 002.941713°E, -20168.62m
    test 618 circin6 (pygeodesy.sphericalTrigonometry) .cC: 02.951508°N, 000.0°E, -20185.00m  FAILED, KNOWN, expected 02.961566°N, 000.0°E, -20113.46m
    test 619 circin6 (pygeodesy.sphericalTrigonometry) .dA: 327983.380  FAILED, KNOWN, expected 327263.596
    test 620 circin6 (pygeodesy.sphericalTrigonometry) .dB: 326745.373  FAILED, KNOWN, expected 326036.153
    test 621 circin6 (pygeodesy.sphericalTrigonometry) .dC: 326745.373  FAILED, KNOWN, expected 326020.432

    test 622 area cw/ccw: 1.0

    testSpherical(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 623 isSpherical: True
    test 624 isEllipsoidal: False
    test 625 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 626 ellipsoid: name='SphereAuthalic', a=6371000, b=6371000, f_=0, f=0, f2=0, n=0, e=0, e2=0, e22=0, e32=0, A=6371000, L=10007543.39801029, R1=6371000, R2=6371000, R3=6371000, Rbiaxial=6371000, Rtriaxial=6371000
    test 627 datum: name='Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.WGS84
    test 628 isSpherical: True
    test 629 isEllipsoidal: False
    test 630 intersection1: 50.907608°N, 004.508575°E
    test 631 intersection1: 50°54′27.39″N, 004°30′30.87″E
    test 632 intersection1: True
    test 633 intersection2: True
    test 634 intersection2: 43.5719°N, 116.188757°W
    test 635 intersection2: 43°34′18.84″N, 116°11′19.53″W
    test 636 intersection3: 51.882166°N, 000.267801°E
    test 637 intersection4: 00.0°N, 026.565051°E
    test 638 intersection5: 26.565051°N, 000.0°W
    test 639 intersection6: 50.907809°N, 004.50841°E
    test 640 intersection7: 01°52′46.41″S, 005°39′06.87″E
    test 641 intersection8: 28°15′40.35″S, 032°14′33.2″E
    test 642 toward 1,1 N,E nearest: 00.999848°N, 001.0°E
    test 643 toward 1,1 E,N nearest: 00.999848°N, 001.0°E
    test 644 toward 1,1 N,E antipodal: 00.999848°S, 179.0°W
    test 645 toward/away 1,1 N,W antipodal: 00.999848°N, 001.0°E
    test 646 toward/away 1,1 W,N antipodal: 00.999848°S, 179.0°W
    test 647 toward/away 1,1 S,E antipodal: 00.999848°S, 179.0°W
    test 648 toward/away 1,1 E,S antipodal: 00.999848°N, 001.0°E
    test 649 away 1,1 S,W antipodal: 00.999848°S, 179.0°W
    test 650 away 1,1 W,S antipodal: 00.999848°S, 179.0°W
    test 651 1E/90E N,E antipodal: 00.017454°N, 001.0°E
    test 652 1E/90E N,E nearest: 00.017454°N, 179.0°W
    test 653 brng+end 1a: 01.000305°N, 002.0°E
    test 654 brng+end 1b: 01.000305°N, 002.0°E
    test 655 brng+end 2a: 01.000305°S, 178.0°W
    test 656 brng+end 2b: 01.000305°S, 178.0°W
    test 657 intersection7: 02.499372°N, 002.5°E
    test 658 maxLat0: 90.0
    test 659 maxLat1: 89.0
    test 660 maxLat90: 0.0
    test 661 minLat0: -90.0
    test 662 minLat1: -89.0
    test 663 minLat90: -0.0
    test 664 parse: 00.0°N, 000.0°E
    test 665 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 666 intersecant2: (LatLon(04°15′07.82″N, 006°15′50.15″E), LatLon(01°14′59.64″S, 000°44′59.28″E))
    test 667 intersecant2: 699204  FAILED, KNOWN, expected 700000
    test 668 intersecant2: 699931  FAILED, KNOWN, expected 700000
    test 669 intersecant2: 45
    test 670 intersecant2: (LatLon(04°15′12.05″N, 006°15′26.13″E), LatLon(01°15′02.91″S, 000°44′56.74″E))
    test 671 intersecant2: 698456  FAILED, KNOWN, expected 700000
    test 672 intersecant2: 700022  FAILED, KNOWN, expected 700000
    test 673 intersecant2: 45
    test 674 intersecant2: (LatLon(04°15′15.1″N, 006°15′29.19″E), LatLon(01°15′28.78″S, 000°44′30.85″E))
    test 675 intersecant2: 698511  FAILED, KNOWN, expected 700000
    test 676 intersecant2: 700010  FAILED, KNOWN, expected 700000
    test 677 intersecant2: 45
    test 678 intersections2 (pygeodesy.sphericalTrigonometry): 36.98931°N, 088.151425°W, 38.23838°N, 092.390487°W
    test 679 intersections2 (pygeodesy.sphericalTrigonometry): 36.989310429, -088.151425243, 38.238379679, -092.390486808
    test 680 intersections2 (pygeodesy.sphericalTrigonometry): 00.0°N, 035.26439°W, 00.0°N, 035.26439°E
    test 681 intersections2 (pygeodesy.sphericalTrigonometry): 22.622036°N, 000.0°E, 22.622036°S, 000.0°E
    test 682 intersections2 (pygeodesy.sphericalTrigonometry): 14.612841°N, 026.110934°W, 14.612841°S, 026.110934°E
    test 683 intersections2 (pygeodesy.sphericalTrigonometry): 00.000001°S, 045.0°E, 00.000001°N, 045.0°E
    test 684 intersections2 (pygeodesy.sphericalTrigonometry) 5: 04.999927°S, 005.038296°W, 04.999927°N, 005.038296°E
    test 685 intersections2 (pygeodesy.sphericalTrigonometry) 5: 1.67511e-15 (% of radius)
    test 686 intersections2 (pygeodesy.sphericalTrigonometry) 10: 09.997596°S, 010.311703°W, 09.997596°N, 010.311703°E
    test 687 intersections2 (pygeodesy.sphericalTrigonometry) 10: 4.18779e-16 (% of radius)
    test 688 intersections2 (pygeodesy.sphericalTrigonometry) 15: 14.98089°S, 016.083107°W, 14.98089°N, 016.083107°E
    test 689 intersections2 (pygeodesy.sphericalTrigonometry) 15: 4.18779e-16 (% of radius)
    test 690 intersections2 (pygeodesy.sphericalTrigonometry) 20: 19.914036°S, 022.676142°W, 19.914036°N, 022.676142°E
    test 691 intersections2 (pygeodesy.sphericalTrigonometry) 20: 6.28168e-16 (% of radius)
    test 692 intersections2 (pygeodesy.sphericalTrigonometry) 25: 24.713956°S, 030.518915°W, 24.713956°N, 030.518915°E
    test 693 intersections2 (pygeodesy.sphericalTrigonometry) 25: 5.02534e-16 (% of radius)
    test 694 intersections2 (pygeodesy.sphericalTrigonometry) 30: 29.205932°S, 040.202966°W, 29.205932°N, 040.202966°E
    test 695 intersections2 (pygeodesy.sphericalTrigonometry) 30: 4.18779e-16 (% of radius)
    test 696 intersections2 (pygeodesy.sphericalTrigonometry) 35: 33.037697°S, 052.55362°W, 33.037697°N, 052.55362°E
    test 697 intersections2 (pygeodesy.sphericalTrigonometry) 35: 7.17906e-16 (% of radius)
    test 698 intersections2 (pygeodesy.sphericalTrigonometry) 40: 35.512876°S, 068.682565°W, 35.512876°N, 068.682565°E
    test 699 intersections2 (pygeodesy.sphericalTrigonometry) 40: 6.28168e-16 (% of radius)
    test 700 intersections2 (pygeodesy.sphericalTrigonometry) 45: 35.26439°S, 090.0°W, 35.26439°N, 090.0°E
    test 701 intersections2 (pygeodesy.sphericalTrigonometry) 45: 1.86124e-16 (% of radius)
    test 702 intersections2 (pygeodesy.sphericalTrigonometry) 50: 29.382901°S, 118.837195°W, 29.382901°N, 118.837195°E
    test 703 intersections2 (pygeodesy.sphericalTrigonometry) 50: 1.67511e-16 (% of radius)
    test 704 intersections2 (pygeodesy.sphericalTrigonometry) 55: 00.687458°S, 179.605668°E abutting
    test 705 intersections2 (pygeodesy.sphericalTrigonometry) 55: 0.0144095 (% of radius)
    test 706 intersections2 (pygeodesy.sphericalTrigonometry) 60: 13.848979°S, 172.919423°E abutting
    test 707 intersections2 (pygeodesy.sphericalTrigonometry) 60: 0.258708 (% of radius)
    test 708 intersections2 (pygeodesy.sphericalTrigonometry) 65: 27.163786°S, 167.475402°E abutting
    test 709 intersections2 (pygeodesy.sphericalTrigonometry) 65: 0.457099 (% of radius)
    test 710 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E Random +/- 89
    test 711 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 49.833727°S, 041.42412°E  d 2.114e-09 meter
    test 712 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 62.273014°S, 001.256558°W  d 3.26333e-09 meter
    test 713 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 40.482306°S, 059.429668°W  d 4.61289e-09 meter
    test 714 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 72.046741°S, 014.907824°E  d 8.19253e-09 meter
    test 715 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 34.371236°S, 053.397103°W  d 2.28055e-09 meter
    test 716 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 62.627934°S, 020.635459°E  d 1.42197e-06 meter
    test 717 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 05.508124°N, 057.837495°W  d 2.8293e-09 meter
    test 718 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 56.585039°S, 003.813155°E  d 1.71849e-09 meter
    test 719 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 69.473151°S, 011.300768°W  d 8.7448e-09 meter
    test 720 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 59.749295°S, 029.613272°E  d 2.01976e-08 meter
    test 721 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 47.806691°N, 092.34301°W  d 3.73561e-09 meter
    test 722 intersections2 (pygeodesy.sphericalTrigonometry): 62.625525°S, 020.641821°E, 13.389914°S, 151.84124°E  d 2.28055e-09 meter
    test 723 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 313.671
    test 724 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66937229°N, 002.48639477°E
    test 725 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 1591.044
    test 726 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.65153054°N, 002.46822157°E
    test 727 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 3
    test 728 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 133.815
    test 729 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: 42.6767291°N, 002.49916157°E
    test 730 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 2
    test 731 trilaterate5 (pygeodesy.sphericalTrigonometry) .min: 2403.293
    test 732 trilaterate5 (pygeodesy.sphericalTrigonometry) .max: 2403.293
    test 733 trilaterate5 (pygeodesy.sphericalTrigonometry) .point: 42.66135649°N, 002.47981645°E
    test 734 trilaterate5 (pygeodesy.sphericalTrigonometry) .min- is .maxPoint: True
    test 735 trilaterate5 (pygeodesy.sphericalTrigonometry) .n: 1
    test 736 trilaterate5 (pygeodesy.sphericalTrigonometry) .inter: area (False), eps (1000) or wrap (False): no intersection (min 1340.608)
    test 737 isenclosedBy: True
    test 738 isenclosedBy*: True
    test 739 isenclosedBy: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 740 isenclosedBy*: points[3] (LatLon(47°00′00.0″N, 003°00′00.0″E)): not convex
    test 741 rhumbBearingTo: 116.722
    test 742 rhumbDestination: 50.964155°N, 001.853°E
    test 743 rhumbDestination: True
    test 744 rhumbDistanceTo: 40307.8
    test 745 rhumbMidpointo-0.5: 51.0455°N, 001.595727°E
    test 746 rhumbMidpointo: True
    test 747 rhumbMidpointo-0.0: 51.127°N, 001.338°E
    test 748 rhumbMidpointo-0.25: 51.08625°N, 001.46692°E
    test 749 rhumbMidpointo-0.75: 51.00475°N, 001.72442°E
    test 750 rhumbMidpointo-1.0: 50.964°N, 001.853°E
    test 751 rhumbMidpointo-2.0: 50.801°N, 002.366196°E
    test 752 areaOf: 8.66605875e+09
    test 753 perimeterOf: 3.78258541e+05
    test 754 perimeterOf: 2.67063461e+05
    test 755 areaOf: 6.18e+09
    test 756 perimeterOf: 3.79639757e+05
    test 757 perimeterOf: 2.68444678e+05
    test 758 nearestOn3: 46.0°N, 001.369324°E
    test 759 nearestOn3: 570101.83
    test 760 distanceTo: 570101.82
    test 761 nearestOn3: 46.0°N, 002.0°E
    test 762 nearestOn3: 134992.48
    test 763 distanceTo: 134989.80
    test 764 nearestOn3: 45.5°N, 001.5°E
    test 765 distance: 78626.79
    test 766 angle: 315.00
    test 767 compassAngleTo: 315.00
    test 768 nearestOn3: 45.331319°N, 001.331319°E
    test 769 distance: 64074.48
    test 770 angle: 305.10
    test 771 distanceTo: 64074.12
    test 772 compassAngleTo: 305.10
    test 773 difference: 1000.53
    test 774 nearestOn3: 00.5°N, 001.5°E
    test 775 distance: 235880.385
    test 776 angle: 135.00
    test 777 nearestOn3: 01.5°N, 002.5°E
    test 778 distance: 235880.385
    test 779 angle: 135.00
    test 780 nearestOn3: 02.5°N, 003.5°E
    test 781 distance: 235880.385
    test 782 angle: 135.00
    test 783 nearestOn3: 03.5°N, 004.5°E
    test 784 distance: 235880.385
    test 785 angle: 135.00
    test 786 nearestOn3: 04.5°N, 005.5°E
    test 787 distance: 235880.385
    test 788 angle: 135.00
    test 789 nearestOn3: 05.5°N, 006.5°E
    test 790 distance: 235880.385
    test 791 angle: 135.00
    test 792 nearestOn3: 06.5°N, 007.5°E
    test 793 distance: 235880.385
    test 794 angle: 135.00
    test 795 nearestOn3: 07.5°N, 008.5°E
    test 796 distance: 235880.385
    test 797 angle: 135.00
    test 798 meanOf: 04.004858°N, 004.990226°E
    test 799 nearestOn3: 07.5°N, 008.5°E
    test 800 toCartesian: [6245667.211, 766871.506, 996645.349]
    test 801 ispolar: True
    test 802 ispolar*: True
    test 803 ispolar: False  FAILED, KNOWN, expected True
    test 804 ispolar*: False  FAILED, KNOWN, expected True
    test 805 ispolar: True
    test 806 ispolar*: True
    test 807 triangle7: (22.142114, 2189776.256122, 84.91384, 6998970.168483, 84.91384, 6998970.168483, 8479698853790.72168)
    test 808 triangle7: Triangle8Tuple(A=0.38645, a=0.34371, B=1.48203, b=1.09857, C=1.48203, c=1.09857, D=3.74234, E=0.20891)
    test 809 nearestOn: 01.5°N, 001.5°E, +149.99m
    test 810 nearestOn3: 01.5°N, 001.5°E, +149.99m
    test 811 midpointTo: 50.5363°N, 001.2746°E, +150.00m
    test 812 intermediateTo: 50.5363°N, 001.2746°E, +150.00m

    77 of 812 testSpherical.py tests (9.5%) FAILED, incl. 75 KNOWN plus 2 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 122.607 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testStreprs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.INF from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testStreprs.py line 11
# lazily imported pygeodesy.NAN from .constants by testStreprs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.fstrzs from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.instr from .streprs by testStreprs.py line 11
# lazily imported pygeodesy.LatLon_ from .points by testStreprs.py line 11
# lazily imported pygeodesy.unstr from .streprs by testStreprs.py line 11

    testing testStreprs.py 23.03.27 (module pygeodesy.streprs 23.03.30) isLazy=3
    test 1 anstr: a-b__
    test 2 fstr: 0.123000
    test 3 fstr: 0.123
    test 4 fstr: 0.123, 456.789
    test 5 fstr: 1.23000e-01
    test 6 fstr: 1.23e-01
    test 7 fstr: fmt ('X'): not '[%[<flags>][<width>].*]F|f|E|e|G|g'
    test 8 fstr(1.000000): 1.0
    test 9 fstr(1.000000): 1.0
    test 10 fstr(-1.000000): -1.0
    test 11 fstr(INF): INF
    test 12 fstr(INF): INF
    test 13 fstr(NAN): NAN
    test 14 fstr(-0.000000): -0.0
    test 15 fstr(0.000000): 0.0
    test 16 fstrzs(0.0): 0.0
    test 17 fstrzs(0.00): 0.0
    test 18 fstrzs(0.000): 0.0
    test 19 fstrzs(00.0): 00.0
    test 20 fstrzs(000.00): 000.0
    test 21 fstrzs(0.000): 0.0
    test 22 fstrzs(0.010): 0.01
    test 23 fstrzs(0.0200): 0.02
    test 24 fstrzs(0.0e+01): 0.0e+01
    test 25 fstrzs(0.00e+02): 0.0e+02
    test 26 fstrzs(0.000e+03): 0.0e+03
    test 27 fstrzs(00.0e+00): 00.0e+00
    test 28 fstrzs(000.00e+01): 000.0e+01
    test 29 fstrzs(0.000e+02): 0.0e+02
    test 30 fstrzs(0.010e+03): 0.01e+03
    test 31 fstrzs(0.0200e+00): 0.02e+00
    test 32 fstrzs(0, ap1z=True): 0.0
    test 33 fstrzs(0.0, ap1z=True): 0.0
    test 34 fstrzs(0., ap1z=True): 0.
    test 35 fstrzs(1e10, ap1z=True): 1.0e10
    test 36 fstrzs(2E+2, ap1z=True): 2.0E+2
    test 37 fstrzs(3.E3, ap1z=True): 3.E3
    test 38 instr: LatLon_(45.0°N, 090.0°E, +1.20)
    test 39 instr: LatLon_(45, 90, h=1.2)
    test 40 unstr: f(1.1, 2.2)
    test 41 unstr: f(x=1.1, y=2.2)
    test 42 F: 0.001
    test 43 F: 0.001
    test 44 F: 0.001
    test 45 F: 0.001
    test 46 f: 0.001
    test 47 f: 0.001
    test 48 f: 0.001
    test 49 f: 0.001
    test 50 E: 1.0E-03
    test 51 E: 1.0E-03
    test 52 E: 1.0E-03
    test 53 E: 1.0E-03
    test 54 e: 1.0e-03
    test 55 e: 1.0e-03
    test 56 e: 1.0e-03
    test 57 e: 1.0e-03
    test 58 G: 0.001
    test 59 G: 0.001
    test 60 G: 0.001
    test 61 G: 0.001
    test 62 g: 0.001
    test 63 g: 0.001
    test 64 g: 0.001
    test 65 g: 0.001

    all 65 testStreprs.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 607.014 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14

    testing testTMcoords.py 23.03.27 isLazy=3
    test 1 TMcoords: 258

    all 1 testTMcoords.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 43.154 us

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testTrf.py
./test/testTrf.py:28: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:37: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:45: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:49: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:51: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:58: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:68: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:73: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:83: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:85: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:87: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:89: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:105: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:111: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:118: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:124: DeprecationWarning: method L{pygeodesy.ellipsoidalNvector.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:28: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:37: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:45: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:49: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:51: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:58: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:68: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:73: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:83: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:85: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:87: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:89: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:105: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:111: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:118: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:124: DeprecationWarning: method L{pygeodesy.ellipsoidalVincenty.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:28: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:37: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:45: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:49: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:51: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:58: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:68: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:73: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:83: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:85: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:87: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:89: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:105: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:111: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:118: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:124: DeprecationWarning: method L{pygeodesy.ellipsoidalKarney.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:28: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:37: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:45: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:49: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:51: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:58: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:68: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:73: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:83: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:85: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:87: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:89: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:105: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:111: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:118: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:124: DeprecationWarning: method L{pygeodesy.ellipsoidalExact.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
./test/testTrf.py:28: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ETRF2000)
./test/testTrf.py:37: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000)
./test/testTrf.py:41: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:45: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF2000, RefFrames.ITRF2000)
./test/testTrf.py:49: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.ITRF2014)  # # via ITRF2000
./test/testTrf.py:51: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.NAD83)
./test/testTrf.py:58: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)
./test/testTrf.py:63: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = p.convertRefFrame(RefFrames.GDA94)  # epoch 2010.4559
./test/testTrf.py:68: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = x.convertRefFrame(RefFrames.ITRF2005)  # epoch 2010.4559
./test/testTrf.py:73: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF93, RefFrames.ITRF2000, 2017)
./test/testTrf.py:83: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:85: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ITRF91, RefFrames.ITRF2005, 2007)
./test/testTrf.py:87: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2000, 2012)
./test/testTrf.py:89: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  x = c.convertRefFrame(RefFrames.ETRF2000, RefFrames.ITRF2014, 2012)
./test/testTrf.py:105: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0, reframe=RefFrames.ITRF2000).convertRefFrame('ITRF2000')
./test/testTrf.py:111: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.LatLon.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = LatLon(0, 0).convertRefFrame(RefFrames.ITRF2000)
./test/testTrf.py:118: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame('ITRF2000', RefFrames.ITRF2000)
./test/testTrf.py:124: DeprecationWarning: method L{pygeodesy.ellipsoidalGeodSolve.Cartesian.convertRefFrame} has been DEPRECATED, use method L{toRefFrame}.
  t = c.convertRefFrame(RefFrames.ITRF2000, 'ITRF2000')
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.date2epoch from .trf by testTrf.py line 15
# lazily imported pygeodesy.Epoch from .units by testTrf.py line 15
# lazily imported pygeodesy.epoch2date from .trf by testTrf.py line 15
# lazily imported pygeodesy.F_D from .dms by testTrf.py line 15
# lazily imported pygeodesy.F_DMS from .dms by testTrf.py line 15
# lazily imported pygeodesy.RefFrames from .trf by testTrf.py line 15
# lazily imported pygeodesy.TRFError from .errors by testTrf.py line 15
# lazily imported pygeodesy.ellipsoidalExact by testTrf.py line 174
# lazily imported pygeodesy.ellipsoidalKarney by testTrf.py line 174
# lazily imported pygeodesy.ellipsoidalNvector by testTrf.py line 174
# lazily imported pygeodesy.ellipsoidalVincenty by testTrf.py line 174

    testing testTrf.py 23.03.31 (module pygeodesy.trf 22.10.07) isLazy=3

    testTrf(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 1 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 2 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 3 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 4 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 5 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 6 Nil: True
    test 7 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 8 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 9 Nil: True
    test 10 reframe: True
    test 11 Roundtrip: True
    test 12 reframe: True
    test 13 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 14 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 15 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 16 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 17 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 18 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 19 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 20 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 21 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 22 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 23 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 24 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 25 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 26 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 27 TRFError: epoch (1899): below 1900.0 limit
    test 28 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 29 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 30 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 31 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 32 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 33 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 34 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 35 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 36 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 37 Nil: True
    test 38 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 39 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 40 Nil: True
    test 41 reframe: True
    test 42 Roundtrip: True
    test 43 reframe: True
    test 44 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 45 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 46 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 47 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 48 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 49 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 50 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 51 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 52 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 53 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 54 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 55 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 56 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 57 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 58 TRFError: epoch (1899): below 1900.0 limit
    test 59 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 60 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 61 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 62 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 63 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 64 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 65 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 66 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 67 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 68 Nil: True
    test 69 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 70 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 71 Nil: True
    test 72 reframe: True
    test 73 Roundtrip: True
    test 74 reframe: True
    test 75 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 76 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 77 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 78 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 79 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 80 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 81 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 82 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 83 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 84 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 85 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 86 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 87 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 88 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 89 TRFError: epoch (1899): below 1900.0 limit
    test 90 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 91 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 92 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 93 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    testTrf(pygeodesy.ellipsoidalExact, 23.04.11)
    test 94 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 95 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 96 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 97 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 98 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 99 Nil: True
    test 100 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 101 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 102 Nil: True
    test 103 reframe: True
    test 104 Roundtrip: True
    test 105 reframe: True
    test 106 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 107 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 108 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 109 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 110 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 111 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 112 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 113 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 114 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 115 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 116 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 117 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 118 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 119 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 120 TRFError: epoch (1899): below 1900.0 limit
    test 121 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 122 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 123 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 124 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
# lazily imported pygeodesy.ellipsoidalGeodSolve by testTrf.py line 184

    testTrf(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 125 convertRefFrame: 51.47787826°N, 000.00147125°W, -0.00m  FAILED, KNOWN, expected 51.47787826°N, 000.00147125°W
    test 126 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 127 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 128 toLatLon: 50.7978°N, 004.3592°E, +148.96m
    test 129 convertRefFrame: [3980574.395, -102.214, 4966829.941]
    test 130 Nil: True
    test 131 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 132 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 133 Nil: True
    test 134 reframe: True
    test 135 Roundtrip: True
    test 136 reframe: True
    test 137 copy(RefFrame): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 138 RefFrame.copy(): (<class 'pygeodesy.trf.RefFrame'>, True)
    test 139 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 140 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 141 Geodetic: 23°40′12.44582″S, 133°53′07.84795″E, +603.34m
    test 142 Cartesian: [-4052051.7614, 4212836.1945, -2545106.0147]
    test 143 Roundtrip: 23°40′12.41482″S, 133°53′07.86712″E, +603.26m
    test 144 GNSStrans: [3370658.18892, 711877.42369, 5349787.1243]
    test 145 Cartesian: [-734972.563, 4893188.492, 4011982.811]
    test 146 EUREF C1: [4027894.0444, 307045.6209, 4919474.8613]
    test 147 EUREF C2: [4027894.0444, 307045.6209, 4919474.8613]
    test 148 EUREF C4: [4027894.3559, 307045.2508, 4919474.6447]
    test 149 EUREF C5: [4027894.3662, 307045.253, 4919474.6263]
    test 150 TypeError: type(reframe) ('ITRF2000'): not a RefFrame
    test 151 TRFError: epoch (1899): below 1900.0 limit
    test 152 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 153 TRFError: no conversion: LatLon(00°00′00.0″N, 000°00′00.0″E).reframe MISSING
    test 154 TypeError: type(reframe2) ('ITRF2000'): not a RefFrame
    test 155 TypeError: type(reframe) ('ITRF2000'): not a RefFrame

    test 156 TRFError: day (2), month (1) or year (None): int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
    test 157 toStr: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 158 str: name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80')
    test 159 toStr2: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80'))
    test 160 repr: RefFrame(name='GDA94', epoch=1994, ellipsoid=Ellipsoid(name='GRS80'))
    test 161 epoch: 2020.003
    test 162 y-m-d: (2020, 1, 1)
    test 163 epoch: 2020.251
    test 164 y-m-d: (2020, 4, 1)
    test 165 epoch: 2020.500
    test 166 y-m-d: (2020, 7, 1)
    test 167 epoch: 2020.751
    test 168 y-m-d: (2020, 10, 1)
    test 169 epoch: 2021.000
    test 170 y-m-d: (2021, 1, 1)  FAILED, KNOWN, expected (2020, 12, 31)
    test 171 Epoch (2020).std_repr: False
    test 172 Epoch (2020.001): (2020, 1, 1)
    test 173 Epoch (2020.086): (2020, 2, 1)
    test 174 Epoch (2020.165): (2020, 3, 1)
    test 175 Epoch (2020.250): (2020, 4, 1)
    test 176 Epoch (2020.332): (2020, 5, 1)
    test 177 Epoch (2020.416): (2020, 6, 1)
    test 178 Epoch (2020.498): (2020, 7, 1)
    test 179 Epoch (2020.583): (2020, 8, 1)
    test 180 Epoch (2020.668): (2020, 9, 1)
    test 181 Epoch (2020.750): (2020, 10, 1)
    test 182 Epoch (2020.834): (2020, 11, 1)
    test 183 Epoch (2020.916): (2020, 12, 1)
    test 184 Epoch (2021.001): (2021, 1, 1)  FAILED, KNOWN, expected (2020, 13, 1)

    97 of 184 testTrf.py tests (52.7%) FAILED, incl. 7 KNOWN plus 90 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 14.646 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testTriaxials.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.PI_4 from .constants by testTriaxials.py line 11
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTriaxials.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testTriaxials.py line 11
# lazily imported pygeodesy.fstr from .streprs by testTriaxials.py line 11
# lazily imported pygeodesy.JacobiConformal from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.map1 from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.signBit from .basics by testTriaxials.py line 11
# lazily imported pygeodesy.sincos2d_ from .utily by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxial_ from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Triaxials from .triaxials by testTriaxials.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testTriaxials.py line 11

    testing testTriaxials.py 23.03.27 isLazy=3

    testJacobiConformal(pygeodesy.triaxials, 23.04.02)
    test 1 JacobiConformal: JacobiConformal(name='Test', a=6378172, b=6378102, c=6356752, e2ab=0.00002195, e2bc=0.006683577, e2ac=0.00670538, xyQ2=xyQ2(x=1.572093, y=4.246581), volume=1083207266220584468480, area=510065604942135.9375, area_p=510065609807745.0)
    test 2 xR: 1.5720928043230937  FAILED, KNOWN, expected 1.572092804
    test 3 yR: 4.246581015231322  FAILED, KNOWN, expected 4.246581015
    test 4 xyR2.toDegrees: (90.074283, 243.31117)
    test 5 xyR2.toDegrees: ('90°04′27.42″', '243°18′40.21″')
    test 6 area: 510065604942135
    test 7 area_p: 510065609807745
    test 8 error: 9.54e-09
    test 9 volume: 1.083207e+21

    test 10 JacobiConformal: JacobiConformal(name='Itokawa25134', a=267.5, b=147, c=104.5, e2ab=0.6980138, e2bc=0.494643436, e2ac=0.847389292, xyQ2=xyQ2(x=3.13215, y=1.42547), volume=17212581.945495993, area=359464.659686278, area_p=359430.867250807)
    test 11 xyR2: (0.0, 0.61539)
    test 12 toDegrees: (0.0, 35.259243)
    test 13 toDegrees: ('00°00′00.0″', '35°15′33.27″')
    test 14 xyQ2: (3.13215, 1.42547)
    test 15 toDegrees: (179.458966, 81.673412)  FAILED, KNOWN, expected (179.4589659, 81.673412)
    test 16 toDegrees: ('179°27′32.28″', '81°40′24.28″')

    testTriaxial(pygeodesy.triaxials, 23.04.02)
    test 17 Triaxial: Triaxial(name='Test', a=6378388, b=6378318, c=6356911.9461, e2ab=0.000021949, e2bc=0.006700868, e2ac=0.00672267, volume=1083307891664673177600, area=510097198412933.0625, area_p=510097203304282.5)
    test 18 Triaxial_: Triaxial_(name='Un', a=6356911.9461, b=6378388, c=6378318, e2ab=-0.00676817, e2bc=0.000021949, e2ac=-0.006746073, volume=1083307891664673308672, area=510097198412933.0625, area_p=510097203304282.5)

    test 19 forwardBetaOmega: (4234607.381429, 3551286.590486, 3176009.080037)
    test 20 forwardBetaOmega: (4233813.533025, 3550620.827453, 3175409.655093)
    test 21 length: 1196.973671

    test 22 forwardCartesian: (4233813.533151, 3550620.827558, 3175409.654809, 1196.973671)
    test 23 forwardCartesian: (4239665.951888, 3553574.566129, 3164352.410834, 12911.309173)

    test 24 reverseCartesian: (4234607.381429, 3551286.590486, 3176009.080037)
    test 25 reverseCartesian: (4248255.186992, 3560773.833183, 3170763.143924)  FAILED, KNOWN, expected (4234607.381429, 3551286.590486, 3176009.080037)

    test 26 forwardBetaOmega_: (4233813.533025, 3550620.827453, 3175409.655093)

    test 27 reverseLatLon: (30.051881, 39.984967, 0.0)
    test 28 forwardLatLon: (4233813.533025, 3550620.827453, 3175409.655093)

    test 29 reverseBetaOmega: (0.520687, 0.698121, 12892.55755)
    test 30 reverseBetaOmega: (0.521162, 0.698437, 12918.032538)
    test 31 toDegrees: (29.860398, 40.017494, 12918.032538)
    test 32 toDegrees: ('29°51′37.43″', '40°01′02.98″', 12918.032538)

    test 33 hartzell4: (884268.349816, 5592134.174908, 2927668.068131, 12669388.912805)
    test 34 hartzell4: 0
    test 35 hartzell4: (3642143.609933, 3678204.437754, 3714265.265575, 11296443.179278)
    test 36 hartzell4: 0
    test 37 hartzell4: (884080.396945, 5592040.198472, 2927517.711001, 12669647.302276)
    test 38 hartzell4: (3642031.283571, 3678090.99925, 3714150.714929, 11296639.666827)

    test 39 hartzell4: (888679.181482, 5594339.590741, 2931196.612187, 12663325.092381)
    test 40 hartzell4: 0
    test 41 hartzell4: (3642304.092727, 3678366.509487, 3714428.926247, 11296162.453809)
    test 42 hartzell4: 0

    test 43 height4: (1.206423, 1.61288, 0.433517, 3.593736)
    test 44 height4: 56
    test 45 height4: 0
    test 46 height4: (-1.206423, -1.61288, -0.433517, 3.593736)
    test 47 height4: (0.0, 1.746769, 0.487031, 3.375213)
    test 48 height4: (1.563196, 0.0, 0.853517, 2.190477)
    test 49 height4: (1.297504, 1.803267, 0.0, 2.306326)

    test 50 height4(-2, -4, -3): (-1.206423, -1.61288, -0.433517, 3.593736) 56
    test 51 signBit(-2, -4, -3): (True, True, True)

    test 52 height4(-2, -4, 0): (-1.297504, -1.803267, 0.0, 2.306326) 55
    test 53 signBit(-2, -4, 0): (True, True, False)

    test 54 height4(-2, -4, 3): (-1.206423, -1.61288, 0.433517, 3.593736) 56
    test 55 signBit(-2, -4, 3): (True, True, False)

    test 56 height4(-2, 0, -3): (-1.563196, 0.0, -0.853517, 2.190477) 57
    test 57 signBit(-2, 0, -3): (True, False, True)

    test 58 height4(-2, 0, 0): (-2.25, 0.0, 0.661438, -0.707107) None
    test 59 signBit(-2, 0, 0): (True, False, False)

    test 60 height4(-2, 0, 3): (-1.563196, 0.0, 0.853517, 2.190477) 57
    test 61 signBit(-2, 0, 3): (True, False, False)

    test 62 height4(-2, 4, -3): (-1.206423, 1.61288, -0.433517, 3.593736) 56
    test 63 signBit(-2, 4, -3): (True, False, True)

    test 64 height4(-2, 4, 0): (-1.297504, 1.803267, 0.0, 2.306326) 55
    test 65 signBit(-2, 4, 0): (True, False, False)

    test 66 height4(-2, 4, 3): (-1.206423, 1.61288, 0.433517, 3.593736) 56
    test 67 signBit(-2, 4, 3): (True, False, False)

    test 68 height4(0, -4, -3): (0.0, -1.746769, -0.487031, 3.375213) 58
    test 69 signBit(0, -4, -3): (False, True, True)

    test 70 height4(0, -4, 0): (0.0, -2.0, 0.0, 2.0) None
    test 71 signBit(0, -4, 0): (False, True, False)

    test 72 height4(0, -4, 3): (0.0, -1.746769, 0.487031, 3.375213) 58
    test 73 signBit(0, -4, 3): (False, True, False)

    test 74 height4(0, 0, -3): (0.0, 0.0, -1.0, 2.0) None
    test 75 signBit(0, 0, -3): (False, False, True)

    test 76 height4(0, 0, 0): (0.0, 0.0, 0.0, -1.0) None
    test 77 signBit(0, 0, 0): (False, False, False)

    test 78 height4(0, 0, 3): (0.0, 0.0, 1.0, 2.0) None
    test 79 signBit(0, 0, 3): (False, False, False)

    test 80 height4(0, 4, -3): (0.0, 1.746769, -0.487031, 3.375213) 58
    test 81 signBit(0, 4, -3): (False, False, True)

    test 82 height4(0, 4, 0): (0.0, 2.0, 0.0, 2.0) None
    test 83 signBit(0, 4, 0): (False, False, False)

    test 84 height4(0, 4, 3): (0.0, 1.746769, 0.487031, 3.375213) 58
    test 85 signBit(0, 4, 3): (False, False, False)

    test 86 height4(2, -4, -3): (1.206423, -1.61288, -0.433517, 3.593736) 56
    test 87 signBit(2, -4, -3): (False, True, True)

    test 88 height4(2, -4, 0): (1.297504, -1.803267, 0.0, 2.306326) 55
    test 89 signBit(2, -4, 0): (False, True, False)

    test 90 height4(2, -4, 3): (1.206423, -1.61288, 0.433517, 3.593736) 56
    test 91 signBit(2, -4, 3): (False, True, False)

    test 92 height4(2, 0, -3): (1.563196, 0.0, -0.853517, 2.190477) 57
    test 93 signBit(2, 0, -3): (False, False, True)

    test 94 height4(2, 0, 0): (2.25, 0.0, 0.661438, -0.707107) None
    test 95 signBit(2, 0, 0): (False, False, False)

    test 96 height4(2, 0, 3): (1.563196, 0.0, 0.853517, 2.190477) 57
    test 97 signBit(2, 0, 3): (False, False, False)

    test 98 height4(2, 4, -3): (1.206423, 1.61288, -0.433517, 3.593736) 56
    test 99 signBit(2, 4, -3): (False, False, True)

    test 100 height4(2, 4, 0): (1.297504, 1.803267, 0.0, 2.306326) 55
    test 101 signBit(2, 4, 0): (False, False, False)

    test 102 height4(2, 4, 3): (1.206423, 1.61288, 0.433517, 3.593736) 56
    test 103 signBit(2, 4, 3): (False, False, False)

    test 104 _normalTo5: 2.356, 1.116, 0.268, 6.503, 59
    test 105 _normalTo5: 2.356, 0.268, 1.116, 6.503, 59
    test 106 _normalTo5: 1.116, 2.356, 0.268, 6.503, 59
    test 107 _normalTo5: 1.116, 0.268, 2.356, 6.503, 59
    test 108 _normalTo5: 0.268, 2.356, 1.116, 6.503, 59
    test 109 _normalTo5: 0.268, 1.116, 2.356, 6.503, 59

    test 110 height4(1883822.6239002007, -7857731.191007079, 2164620.270534608): (1433944.355113, -5990833.594611, 1650325.252287, 1988013.193606) 54
    test 111 height4(-9058687.850897403, -7753982.955628684, 4902853.232956342): (-4466405.290437, -3836191.677229, 2425601.950457, 6524946.09425) 55
    test 112 height4(-7850756.167624583, -7223555.4994711755, 0.0): (-4679394.24836, -4317279.484556, 0.0, 4301624.890415) 55
    test 113 height4(-6739830.210523213, -7904840.7594675915, -6628463.013768563): (-3477158.399924, -4091516.456526, -3430831.709992, 5950740.7554) 54
    test 114 height4(-11181327.515440034, -9380199.808091953, 4810782.079617228): (-4624066.151545, -3894559.525775, 1997360.084205, 9000292.729999) 55
    test 115 height4(2884000.6943494175, 1633496.1388701145, -10335448.711159112): (1690017.149305, 959896.212043, -6073395.605505, 4477100.65139) 55
    test 116 height4(-8769822.128014034, -7772927.819835265, 5635012.572711812): (-4287187.056549, -3812950.750603, 2764181.741508, 6634538.810963) 55
    test 117 height4(-6370146.485715159, 2832319.4518462247, -6766237.360752376): (-4170691.640552, 1858703.605646, -4440295.348806, 3345973.053511) 53
    test 118 height4(1847980.4209766642, -7923254.155795266, -8038810.513384352): (1027485.978874, -4418555.97144, -4482954.685237, 5059667.100068) 56
    test 119 height4(-8521986.827979758, 3143776.3344304087, 1173651.367047886): (-5915906.619597, 2186884.51658, 816413.949994, 2799091.741215) 53
    test 120 height4(4233468.053880593, -8771906.133344574, -6504786.801918083): (2298301.367622, -4776846.767681, -3542224.314881, 5336866.677029) 55
    test 121 height4(-9504978.277910076, 5498852.223431841, 5082698.312802209): (-4993818.06268, 2898287.955139, 2678917.305952, 5735125.467668) 55
    test 122 height4(-11538738.897378763, 2130485.266316058, 2645237.7104746816): (-6098303.224426, 1129556.528864, 1402457.347021, 5669629.765759) 55
    test 123 height4(-7486038.56370293, -8054601.5479823025, 5521535.634771523): (-3867771.358174, -4175093.893204, 2862051.693025, 5934247.387032) 55
    test 124 height4(-7095091.748344778, 5620425.646129764, -8530093.33271216): (-3626551.854149, 2882270.465483, -4374361.431816, 6066166.039852) 56
    test 125 height4(-11300275.59068185, -10525051.492690245, -8154490.2459141025): (-4111281.971098, -3845686.165508, -2979479.343162, 11093975.314557) 55
    test 126 height4(5977199.394846466, -12087671.538432231, 5703931.505672659): (2594175.47774, -5266230.662172, 2484998.605646, 8266706.446155) 56
    test 127 height4(-7955326.966378331, -11079005.019884482, -8717844.448214505): (-3122409.828655, -4366263.597331, -3435678.617001, 9814237.684844) 55
    test 128 height4(4967703.705043273, -9478471.645927982, -7657710.169393876): (2399593.14449, -4594435.951028, -3711828.478626, 6783728.977326) 55
    test 129 height4(-11633067.911233708, -7948522.9939014055, -6807839.630633511): (-4724600.357458, -3241116.027589, -2775951.120919, 9281310.750256) 54
    test 130 height4(-12383437.183547214, -6731068.267676074, 5082719.126167218): (-5253134.94706, -2866458.817282, 2164473.880157, 8619313.865012) 55
    test 131 height4(-11921829.47920279, -12043318.925553443, 2194357.0562990024): (-4433186.341143, -4497354.236146, 819430.701907, 10719691.302598) 56
    test 132 height4(920730.4768594193, -10946092.220135229, -11260692.46705311): (371827.407602, -4438252.851899, -4565752.53179, 9352833.183532) 56
    test 133 height4(4888090.203476225, 3249444.356270234, -8731724.50382063): (2955030.841211, 1969645.416052, -5292674.864204, 4147489.149977) 55
    test 134 height4(-11952404.715957105, 2718348.4934793375, 5712830.632974205): (-5618143.573432, 1282309.061582, 2694845.625247, 7161934.583514) 54
    test 135 height4(-8425209.999411892, 2816859.4452409963, 5292166.449322882): (-5180827.102234, 1736637.949913, 3262676.0095, 3976396.6487) 54
    test 136 height4(1817166.2685987293, 6119514.9238940505, 2932923.439615311): (1648537.493591, 5555103.80782, 2662410.56468, 648207.364363) 53
    test 137 height4(1025370.0369503788, 4964357.683548331, 1916036.9728134386): (1208109.884182, 5842098.319867, 2254817.346859, -958433.418788) 53
    test 138 height4(1511141.769967376, 1921234.9222957636, 5328437.475174009): (1644690.36784, 2089784.306723, 5795910.915493, -514563.446416) 53
    test 139 height4(4041111.2245703274, -9290771.950096024, 5286039.28310628): (2248726.896904, -5185427.965001, 2950251.090256, 5051969.645185) 55
    test 140 height4(3092470.385681208, 2398712.4104996845, 3790221.5107928114): (3619285.006335, 2804131.217697, 4430842.915043, -923197.615545) 53
    test 141 height4(-9450345.807170054, 2570862.070391521, 5935145.627701963): (-5246519.901973, 1431538.688062, 3304847.831792, 5088091.636939) 55
    test 142 height4(-10255984.516987983, -10584806.098115154, 5898047.195248659): (-4105307.389298, -4254080.57888, 2370420.242904, 9505423.01236) 56
    test 143 height4(-10714376.913526785, -8194560.676022345, 2893828.9680228354): (-4936542.572736, -3789299.530653, 1338138.284038, 7430334.375568) 54
    test 144 height4(1180839.7264184072, 2169221.8249046532, -10079485.514755279): (723878.334746, 1333244.788387, -6194990.159322, 3999621.917813) 55
    test 145 height4(4953993.384783364, -10683576.216794329, -12341767.903681617): (1844656.00122, -3994964.94942, -4614957.731336, 10682185.876043) 56
    test 146 height4(-11688382.9933686, 5985440.821193595, 0.0): (-5658061.438986, 2907490.384593, 0.0, 6770417.781749) 54
    test 147 height4(3513287.174838735, 2792622.7448761514, -8279817.019426851): (2373821.939486, 1891013.870083, -5606606.871738, 3042586.412805) 54
    test 148 height4(-8924071.09732997, -11757102.035554104, -8995341.519896446): (-3279800.123365, -4339454.833754, -3320064.550805, 10912747.294509) 52
    test 149 height4(-12200910.367139705, -8139929.2888048515, 6056883.16943833): (-4886375.674949, -3273174.191962, 2435521.58765, 9502735.534675) 55
    test 150 height4(-10638627.967209116, 3495836.62391391, -9930776.514499014): (-4517301.495019, 1490142.326986, -4233059.396105, 8599850.449461) 55
    test 151 height4(-9249283.111867797, -11058569.337363066, 770484.7446730225): (-4071620.262184, -4886474.060042, 340451.597418, 8067706.068336) 55
    test 152 height4(2396470.7347268504, -12116088.53005021, 1812581.015476309): (1220461.121137, -6190836.82737, 926146.488966, 6105519.840371) 56
    test 153 height4(5736757.143388469, -7676319.204210991, 6149930.692130035): (3203631.375242, -4299522.288063, 3444555.661461, 5013834.622993) 53
    test 154 height4(-11178865.118951503, -12187904.80995278, 4353999.729204151): (-4153263.629941, -4547362.976955, 1624474.84165, 10732532.874208) 55
    test 155 height4(1708251.2156094117, -11666138.99471713, 5786309.367377062): (826726.365703, -5665607.10109, 2810062.98197, 6755850.177001) 55
    test 156 height4(3161811.5693250527, 1763769.8742837147, 0.0): (5562651.16899, 3087283.168775, 0.0, -2741481.027477) 53
    test 157 height4(-7408249.023757353, 3584662.641666254, -7097052.472946372): (-4334819.374157, 2103374.794762, -4164304.255324, 4499021.627464) 55
    test 158 height4(-11751921.296611933, 6178755.331566835, -12162246.555464936): (-4146671.777117, 2189703.619966, -4310146.055995, 11636487.273459) 55
    test 159 height4(849281.3387302263, -9670241.146627236, -9627076.951676205): (394798.269126, -4511554.207917, -4491363.794693, 7293432.348558) 55
    test 160 height4(-12190297.371974837, 0.0, -6463284.933541812): (-5616013.52188, 0.0, -2988404.949971, 7436127.960292) 55
    test 161 height4(-7073577.813748478, -7632001.227836224, 6010505.154363206): (-3742356.801904, -4050621.185838, 3189992.771953, 5646114.286331) 55
    test 162 height4(3469812.2742796144, -11517117.987626808, -11199926.420155823): (1341088.025542, -4469819.71729, -4346658.568395, 10057989.8631) 56
    test 163 height4(-8915618.775399351, -12236339.41664748, -7060133.519392123): (-3390772.128235, -4673170.67908, -2696293.411333, 10332886.930394) 55
    test 164 height4(1010099.5068729265, -8853518.328843946, 1337922.0483927834): (713583.065554, -6266920.312624, 947035.605834, 2632717.893824) 55
    test 165 height4(-9546463.652448036, -8274476.255874455, 2639288.7754207235): (-4702019.832132, -4089465.685777, 1304392.051929, 6539487.645253) 54
    test 166 height4(1937810.4105836523, 860872.145503989, 2256161.500480102): (4003930.882983, 1766087.060622, 4628642.731643, -3273673.019903) 54
    test 167 height4(-12434612.945979247, 2907914.8392732227, -11277108.00440282): (-4637895.436996, 1089193.111008, -4223913.151099, 10669775.54958) 56
    test 168 height4(1709461.4578533, 4319722.461139352, 6024411.379533804): (1431510.997032, 3621314.101539, 5050372.716704, 1230358.48927) 54
    test 169 height4(4556037.385921884, -12302075.770974044, 3063480.9323819927): (2149532.301338, -5824786.146114, 1450480.01709, 7095654.977462) 55
    test 170 height4(6148428.10198689, 2616986.206630993, 1391907.038314047): (5729354.179311, 2439731.595893, 1297627.982411, 464683.429957) 51
    test 171 height4(-8778425.415638577, 4326078.58311995, 6212981.570281656): (-4814620.271925, 2379907.888163, 3417917.071864, 5226061.341159) 54
    test 172 height4(-8807811.883205852, 1133360.608917223, 695112.2103637093): (-6285904.116771, 810409.652227, 497036.968577, 2550205.855268) 53
    test 173 height4(-8741081.624089312, -12677107.265314048, 0.0): (-3607111.182675, -5252096.727254, 0.0, 9027094.437504) 55
    test 174 height4(5749542.16172186, -12688578.854029793, -10626709.33972346): (2084320.673064, -4619654.068325, -3868915.217404, 11144917.099644) 56
    test 175 height4(-12578801.999937164, -6750749.760761798, -12396510.128821118): (-4226669.218575, -2278525.595132, -4184032.278289, 12538090.102988) 56
    test 176 height4(711408.2634439039, 6020772.121721313, -10815581.437990142): (364772.162488, 3097275.958713, -5563818.504378, 6020631.222096) 56
    test 177 height4(4966430.29444338, 5621184.8907727245, 5728509.104308675): (3347900.948658, 3797595.079329, 3870074.281891, 3065762.063948) 54
    test 178 height4(4828126.605834274, -10370630.075888356, -12409804.420043346): (1817089.037133, -3919469.911407, -4690090.241375, 10501323.807418) 56
    test 179 height4(2933659.4978632117, 4113704.685952493, -10254212.525181891): (1631965.090004, 2295258.852093, -5721325.546139, 5054524.502553) 55
    test 180 height4(-9458215.522461321, -10387939.336812118, -8698013.51305162): (-3636892.812588, -4010988.243131, -3358429.302132, 10152066.926946) 56
    test 181 height4(-11632420.620054677, -10778262.651109928, -8083610.399403394): (-4152075.745932, -3863896.570795, -2897850.582749, 11430490.917037) 56
    test 182 height4(3606190.71404004, 1085948.9772778132, -10970905.552573876): (1976928.623854, 597135.372641, -6032558.792227, 5223093.185463) 55
    test 183 height4(-10909211.332184909, -11372802.890340466, 3379507.6631380613): (-4301067.830067, -4502177.245799, 1337835.614946, 9748922.096539) 55
    test 184 height4(-9388736.979430785, -11870175.438215332, 2637512.5069560953): (-3883603.858444, -4929469.739417, 1095297.310061, 8992125.10982) 55
    test 185 height4(0.0, 2219949.130842774, 2791769.018056607): (0.0, 3969777.859144, 4992409.253601, -2811533.038163) 53
    test 186 height4(-8645420.66529208, -10477510.92608059, -10444799.211550282): (-3205256.498819, -3900999.188737, -3888766.34831, 10762316.650865) 52
    test 187 height4(-8761054.425351338, -12481153.329320345, -12402987.667554844): (-2830663.532385, -4051048.113861, -4025617.952539, 13282188.578286) 55
    test 188 height4(5586310.132685213, -11755332.59130708, -9172276.875295784): (2228966.055108, -4709464.888329, -3674583.196085, 9546761.059833) 56
    test 189 height4(3115527.2199650058, -7466670.6822544895, 2175376.9306323067): (2367541.718223, -5683221.791433, 1655769.389931, 2002539.451133) 54
    test 190 height4(5083289.139933162, -10371223.022417095, 0.0): (2798536.757134, -5727042.734962, 0.0, 5175761.199389) 55
    test 191 height4(-6821122.242069835, 5557941.090935021, 3610076.8046962474): (-4561796.928156, 3725307.98802, 2419700.101997, 3143261.309265) 54
    test 192 height4(822200.0048933082, -6676463.379776223, 4255119.763217417): (657955.450249, -5349942.405428, 3409671.421677, 1581586.882637) 54
    test 193 height4(1238058.1919790083, 5121083.882522182, -8666077.476977479): (776666.410941, 3220659.30078, -5450068.057322, 3763935.779714) 55
    test 194 height4(1012068.2441680207, -10016767.143146858, 1062264.7814081307): (636053.539784, -6310990.68808, 669266.701509, 3745479.099347) 55
    test 195 height4(5982891.688092586, 4676577.517292415, -10936940.644534921): (2856105.051823, 2240369.831167, -5239411.001971, 6940730.983591) 55
    test 196 height4(-11351646.619323613, -9404659.768125791, 3753315.1433653096): (-4742666.15833, -3944663.226534, 1574259.561, 8845251.166532) 55
    test 197 height4(4125786.098789462, -10522072.216827726, -6504346.57538315): (2011143.99731, -5146793.580342, -3181517.208655, 6663822.22434) 55
    test 198 height4(-8076009.081147628, -9234350.036560802, 2445841.6263432675): (-4104240.407202, -4708478.251222, 1247090.284791, 6139663.394319) 55
    test 199 height4(4891782.647045094, -12174285.625344224, 4236842.936641653): (2254923.454603, -5632287.091263, 1960101.401951, 7411769.23794) 55
    test 200 height4(-10786662.856980938, 1973971.0931456513, 0.0): (-6253178.462864, 1147580.920173, 0.0, 4608188.52367) 55
    test 201 height4(-6387989.400753949, 3611909.5804021806, -7600412.792813497): (-3845320.85963, 2180062.508644, -4587388.038706, 4194480.601432) 55
    test 202 height4(-9788589.285826674, 0.0, 6369693.1421257565): (-5328624.746896, 0.0, 3478095.628145, 5315319.357422) 55
    test 203 height4(4750559.736725454, -11556821.234667243, -10770060.924158122): (1829375.690615, -4468847.658688, -4164563.304726, 10119549.616725) 55
    test 204 height4(-11246763.596495517, -9459513.918756431, 4425138.161010273): (-4657074.401549, -3932497.610572, 1839589.457136, 8980922.839945) 55
    test 205 height4(-7873908.995084708, -6941362.924659161, 4694496.25816809): (-4353843.360325, -3849766.194945, 2603600.548706, 5130368.14274) 53
    test 206 height4(3686669.105532088, -8276571.003134799, -11433573.187450392): (1605832.918181, -3618825.754117, -4999123.188921, 8211371.190424) 56
    test 207 height4(3075314.6588120954, 4539638.806059329, 2018725.036619577): (3355412.570425, 4950075.612638, 2201245.920667, -529364.794256) 53
    test 208 height4(4642320.250910922, 4955733.138022867, 1194196.4903247675): (4286916.337444, 4578691.66801, 1103337.939485, 526048.940763) 52
    test 209 height4(-8202440.036658393, 4386067.794424776, -10291142.823882667): (-3758204.20053, 2016960.725691, -4732390.328567, 7500908.596592) 55
    test 210 height4(3086454.0924626533, -9363615.392605579, -12497175.764873695): (1231787.357805, -3752126.356293, -5007720.181075, 9540468.69095) 55
    test 211 height4(2150353.254084068, 4723740.614476068, -12392976.362172326): (1017219.49546, 2242498.380312, -5883241.963213, 7058129.857443) 55
    test 212 height4(5128973.4779936895, 4192431.4138769465, 1957850.0589562138): (4726042.161992, 3865115.979848, 1804991.861329, 541160.482066) 52
    test 213 height4(-10542958.929356987, 4157255.7753969086, -11218190.157501008): (-4201294.273516, 1663363.105619, -4488460.400605, 9577341.690489) 55
    test 214 height4(-7094451.003050441, 2294168.505064203, -12663952.853434002): (-3067740.287264, 995830.476968, -5496977.894373, 8322596.403025) 55
    test 215 height4(-11449068.08496083, -9551455.837936182, -7671446.289668715): (-4338600.973994, -3634679.941354, -2919227.529582, 10399546.273286) 55
    test 216 height4(-9583704.455077702, -12089893.741550572, 2515846.1200829768): (-3895926.379264, -4934419.026026, 1026814.458131, 9261147.506357) 55
    test 217 height4(3067665.8364738934, -9725317.425317597, 5327042.649179655): (1695529.889419, -5391493.286367, 2953161.578502, 5128362.317765) 56
    test 218 height4(-12524156.180544749, -10638280.948179873, -6652509.898529466): (-4488770.557045, -3829372.728533, -2394614.527092, 11360384.071678) 56
    test 219 height4(2029452.5008002927, -7806516.28681249, -7673624.352539061): (1159350.124365, -4472460.866634, -4396284.032154, 4755414.100362) 55
    test 220 height4(-7377423.731556198, -9935713.06669562, 6090790.895683442): (-3399515.110204, -4595030.597448, 2816812.45614, 7420618.644005) 55
    test 221 height4(-11349244.399273168, -7593659.309332717, 2047910.05927985): (-5224480.305903, -3508372.764321, 946150.826869, 7444204.105242) 54
    test 222 height4(-10436437.661743438, 2153178.3464208967, -11552134.87763389): (-4219769.617617, 874095.894619, -4689598.530475, 9347588.919366) 56
    test 223 height4(-11784965.359819686, 2492636.9314440116, 2567124.529717353): (-6082778.133029, 1290766.421161, 1329324.392151, 5957481.101391) 55
    test 224 height4(-8929243.788266694, 5827001.224239573, 4779950.326030061): (-4858434.245429, 3180239.63316, 2608757.975241, 5318920.330123) 52
    test 225 height4(-9549742.732998427, 4279089.961840827, 1665250.30948169): (-5729802.249878, 2574357.235088, 1001827.896651, 4235349.839398) 55
    test 226 height4(-7006594.615292893, -11191531.272763016, -12244097.08028082): (-2471396.583656, -3964778.0941, -4337604.806422, 11632136.638127) 56
    test 227 height4(1348735.33961389, -9516526.84480391, 4130901.4866424873): (820130.690315, -5802038.268687, 2518507.388659, 4083707.015026) 55
    test 228 height4(-12345089.530736597, 4977297.735533138, 1308671.9117338757): (-5867326.629377, 2373965.177185, 624175.214222, 7014790.684296) 54
    test 229 height4(4205615.33296551, -6574919.204281236, 2242104.572550784): (3296841.843515, -5161671.16213, 1760166.407309, 1747971.303795) 54
    test 230 height4(-9788244.45860129, 4201982.029893572, -9467234.70859502): (-4365353.082048, 1881002.224838, -4237922.372167, 7882918.599687) 55
    test 231 height4(2954820.3131715115, 6265763.4277401315, -8414303.409030108): (1724302.861127, 3666688.60903, -4923956.97907, 4522375.627275) 55
    test 232 height4(2626833.928667873, 3690273.3429239593, -10711124.60333451): (1436308.329835, 2023945.615407, -5874502.185179, 5252324.791249) 56
    test 233 height4(5012322.779020847, 4446665.612468017, -7879815.692054183): (3082315.138535, 2741562.460391, -4858207.689748, 3970191.578647) 55
    test 234 height4(-8788999.478562327, -11024810.647731278, -7207060.801635601): (-3526794.095862, -4441844.855271, -2903653.170073, 9462851.650418) 55
    test 235 height4(-10858504.832952445, -11390753.795537999, -11823522.487651004): (-3503868.786067, -3692430.159094, -3832659.732896, 13311977.529989) 50
    test 236 height4(-11689279.837874634, -8857916.339347662, -8878112.957742643): (-4332274.317454, -3296865.39649, -3304336.927628, 10775796.817426) 55
    test 237 height4(4945569.182805689, 1357889.125625604, -11767978.423041796): (2449007.073242, 674705.765282, -5847189.624138, 6461834.249808) 55
    test 238 height4(5267557.595402695, 4311417.940549329, -7003198.243290609): (3431163.412089, 2814953.82962, -4572400.495269, 3394190.054135) 55
    test 239 height4(-9610361.130419394, -10586412.292129377, 1456506.9281815263): (-4249896.478962, -4699146.801112, 646513.298319, 8003159.746104) 55
    test 240 height4(-9965621.93536535, -12004388.802310608, -12478731.489694381): (-3168039.98349, -3833737.392475, -3985164.559805, 13605415.982102) 55
    test 241 height4(-11977223.745543463, -7295626.762455395, -11342419.629443597): (-4218904.196093, -2581079.841583, -4012715.613101, 11668034.790301) 55
    test 242 height4(-7511199.265074942, -10826646.811908837, -12626094.794005105): (-2614157.453327, -3784635.874373, -4413600.068175, 11875016.049344) 56
    test 243 height4(4767490.697709232, 1577252.2345796553, -9569804.68149867): (2805618.580707, 930771.430746, -5647302.609767, 4433159.385352) 55
    test 244 height4(-11925326.74992752, -11537710.731849631, 5900118.993124062): (-4302447.101306, -4180567.033064, 2137815.577187, 11242365.611183) 55
    test 245 height4(5708841.58365216, 1590906.67691877, -10864628.617607089): (2932594.834815, 819918.967959, -5599335.558975, 6002106.21791) 56
    test 246 height4(3455571.3870444954, 1555573.3796809965, 1297159.1761984336): (5494478.482643, 2463643.3738, 2054405.53218, -2356937.695899) 53
    test 247 height4(-11834926.47770457, 5302985.692753781, -10115837.474011965): (-4572515.235035, 2057336.633281, -3924469.08911, 10080173.478293) 55
    test 248 height4(893022.3120862446, 6141192.191447685, -9514548.237054897): (499948.547469, 3448281.387513, -5342370.470887, 4981299.317937) 55
    test 249 height4(-9810985.516570678, 2425898.418277678, 6135262.252449726): (-5275558.990345, 1308519.636741, 3309301.786854, 5459366.416475) 55
    test 250 height4(-10333888.234832006, -11654507.326614467, 1200235.1726414387): (-4203506.285155, -4759675.348429, 490167.059194, 9253350.073463) 55
    test 251 height4(-7469703.610304702, -11349853.00721507, -7908824.486576051): (-3018843.373667, -4605434.51321, -3209125.101325, 9347968.334354) 55
    test 252 height4(-9983769.424420401, 3793972.7036792305, 6281714.700144405): (-5122224.526787, 1952910.300733, 3233416.695049, 6026296.565148) 55
    test 253 height4(0.0, -10185343.136920666, -7183569.272651687): (0.0, -5212404.20242, -3676190.864948, 6085377.962058) 55
    test 254 height4(2300657.782143261, -12006764.599391881, 2696365.1243247953): (1168294.807968, -6117384.975908, 1373769.409653, 6141359.595339) 56
    test 255 height4(0.0, -9243424.14430944, 1018958.8073712875): (0.0, -6339982.302104, 698889.952994, 2921030.400837) 55
    test 256 height4(-8374075.021617723, 1741619.2700527527, 0.0): (-6224158.028593, 1296722.958421, 0.0, 2195467.104058) 53
    test 257 height4(-9365519.36173108, -7824235.279500958, -8414376.825685952): (-4015191.487845, -3367343.543244, -3621279.550689, 8453618.976177) 55
    test 258 height4(-9011487.178493928, -9149041.397460703, 2246921.8271798496): (-4393907.896367, -4476398.052539, 1099350.555184, 6668774.556085) 55
    test 259 height4(5394245.618175815, -7554671.394224759, -11050033.554800589): (2375260.385296, -3339128.90233, -4884002.569726, 8056364.468309) 53
    test 260 height4(-8208864.722238186, 6221775.130196672, -10455583.45396634): (-3554333.819709, 2704257.54363, -4544400.749644, 8305399.981836) 55
    test 261 height4(-10735165.426246066, 3186786.0026526414, 2339997.6804486825): (-5965493.640335, 1776191.080131, 1304211.397726, 5080590.536959) 54
    test 262 height4(0.0, -11122455.103301577, 2701324.8462522044): (0.0, -6198201.642411, 1505350.503796, 5067408.289738) 56
    test 263 height4(-7353980.4701609695, -6706534.96017848, -8393192.251527926): (-3590513.388627, -3285708.1793, -4111999.988665, 6647882.935955) 54
    test 264 height4(-11929605.099092893, -8380423.238925437, 2195880.0258112038): (-5142860.428303, -3626676.151571, 950267.825522, 8379114.771296) 54
    test 265 height4(5475886.3136559175, 2363452.715417309, 4877726.506246649): (4522853.507281, 1954399.979193, 4033502.470919, 1337277.04417) 46
    test 266 height4(-9413023.28238051, -8316998.001114689, -8015477.917002706): (-4014636.987499, -3560913.207669, -3431774.652504, 8530724.047125) 55
    test 267 height4(-10974448.811449585, -12730013.474598551, 3211706.570638377): (-4074907.036983, -4746825.651525, 1197579.351905, 10742051.618258) 56
    test 268 height4(-8921249.453229306, -8239284.7976183975, 0.0): (-4670315.62642, -4327165.253147, 0.0, 5777120.1935) 55
    test 269 height4(-12610268.906889658, 5090255.133555359, -8585914.340276383): (-4983095.807879, 2019686.380972, -3406631.732239, 9717362.310861) 55
    test 270 height4(2917131.584329595, 5401704.0530310925, 1502491.6757331071): (2941976.382369, 5447397.707788, 1515201.712215, -53541.751017) 53
    test 271 height4(-12307437.924291799, 0.0, 926252.2500947971): (-6338989.102646, 0.0, 478624.793771, 5985211.080343) 55
    test 272 height4(-9238219.24049804, -7351493.593996946, 4117967.3251323733): (-4696801.976255, -3749964.885365, 2100534.62199, 6137223.681664) 55
    test 273 height4(-11962296.13005347, -8914940.675208354, 5724410.987182686): (-4757396.533478, -3559879.667903, 2285819.541524, 9613072.751147) 54
    test 274 height4(-9048162.645148262, -11952067.272898832, -11128454.927214433): (-3078289.97871, -4084348.335591, -3802842.520887, 12296543.337772) 56
    test 275 height4(4628822.283830953, -9878602.469091786, 2814733.9255722915): (2612666.654786, -5592198.198368, 1593383.28719, 4891813.822549) 55
    test 276 height4(4907902.532513082, -12667411.819353685, -9377090.71075113): (1888727.02216, -4895092.792741, -3623558.753473, 10130522.878765) 56
    test 277 height4(5095196.862051236, -6935896.177538971, 5574168.783780922): (3160763.450566, -4313635.892005, 3466709.187116, 3880678.752504) 55
    test 278 height4(-8990634.243800486, -6664178.112150577, 5778554.879616958): (-4537803.985516, -3374818.512042, 2926296.742756, 6227596.676665) 54
    test 279 height4(5331166.900136654, -11222424.773753064, -10340646.883215982): (2095210.376584, -4428614.324272, -4080591.256543, 9788542.868826) 56
    test 280 height4(3083275.761379881, 5074624.954497774, -11486088.56954085): (1515773.767662, 2503299.493844, -5665995.058873, 6553034.838747) 55
    test 281 height4(-9277939.54848437, -7668427.042040245, -8028195.366370413): (-4075413.727011, -3381167.612337, -3539753.447171, 8098949.26535) 55
    test 282 height4(2561961.452555754, -7242532.330994192, -9520689.563587498): (1331438.808019, -3776101.321147, -4963831.587684, 5856217.596478) 56
    test 283 height4(5607254.474519995, 5221017.102122584, 5500834.414346484): (3782086.892622, 3529293.143871, 3718417.069013, 3061074.68806) 54
    test 284 height4(-7619053.178656951, 2798220.1755089597, -10479908.175293893): (-3653527.945033, 1346528.546348, -5042968.010926, 6884265.924236) 55
    test 285 height4(825690.1038199601, -9865952.144353814, -6692765.271995869): (439315.895603, -5265834.493904, -3572147.222369, 5572129.255358) 56
    test 286 height4(3187137.9011269878, 3204311.7308333097, 3438541.234767744): (3577943.103544, 3594259.921924, 3857004.249556, -692747.856522) 53
    test 287 height4(2059984.7625965606, -12666496.904572949, 3554095.6143613285): (983274.326561, -6067306.342596, 1702407.574403, 6938109.975611) 56
    test 288 height4(1070938.313713576, -8395391.350168902, -12447501.256062893): (452048.995891, -3557562.312057, -5274584.519546, 8674004.167552) 56
    test 289 height4(3659253.435007849, 2950653.2595643033, -7457995.367013398): (2641895.135938, 2134291.551573, -5394547.72889, 2441163.759816) 54
    test 290 height4(4145051.3165065027, 5863303.536504195, -7304108.239780494): (2574340.603399, 3650784.802288, -4547863.901165, 3867719.502197) 55
    test 291 height4(-12691455.726696035, 4810187.19889457, 4627700.208225251): (-5625778.089127, 2140235.761848, 2059015.253378, 7978131.582738) 54
    test 292 height4(-9000364.536749072, -7278883.066110279, -11183347.264148189): (-3553036.561606, -2885193.710456, -4432781.156318, 9723581.181795) 55
    test 293 height4(5522411.867912064, -8110531.2530495785, -6504909.359900494): (2982633.847299, -4394052.828176, -3524137.568477, 5398859.578567) 55
    test 294 height4(-7674665.256125372, 6241337.046164482, 2071985.0571002448): (-4828942.296968, 3936897.789023, 1306951.895499, 3740836.161673) 54
    test 295 height4(1573676.2522980145, 5064910.771567244, -12753722.139419638): (724059.651855, 2338890.573761, -5889384.719269, 7434525.049005) 55
    test 296 height4(-6475406.179861844, 6369381.440401765, 5717064.815051964): (-3836978.69648, 3784520.585617, 3396900.775461, 4361876.476274) 55
    test 297 height4(-9862641.901589869, 4518420.51299492, 4975736.017226273): (-5253463.66216, 2414380.464019, 2658716.029899, 5571363.405146) 55
    test 298 height4(4267711.356255485, -7296149.721712571, 6114746.240334007): (2602085.534738, -4460271.029471, 3738025.379303, 4057748.068285) 55
    test 299 height4(-7666787.927100224, -11939434.138441937, 4370353.565679809): (-3281494.965793, -5129974.841343, 1877770.999899, 8474225.517566) 55
    test 300 height4(-7942568.330775471, -12659923.561033163, -9467388.669918139): (-2851771.437168, -4565204.263531, -3413919.234531, 11317472.585453) 55
    test 301 height4(-10723356.200354524, -10363427.71741529, 2505555.912142327): (-4506698.785751, -4372472.849487, 1057115.125279, 8754219.003038) 55
    test 302 height4(-8052763.454726368, 4404771.027602058, 4533041.977054215): (-5002091.417727, 2743073.759655, 2822931.194125, 3871991.293575) 54
    test 303 height4(1626363.146601397, -9968026.614484595, -11771605.695456462): (666158.114263, -4099172.170213, -4840799.161979, 9132443.561099) 55
    test 304 height4(-10960766.160386639, 5559020.621611276, -11717745.915251471): (-4101251.955203, 2088838.414801, -4402959.460128, 10611371.285731) 56
    test 305 height4(-10221798.592340043, -7855223.690668722, -10241374.611111522): (-3944798.537684, -3044056.125416, -3968683.928277, 10094291.031549) 55
    test 306 height4(-9879679.214231938, 0.0, -7916221.916849268): (-4960895.049036, 0.0, -3988287.444203, 6294688.783823) 55
    test 307 height4(-8260805.399007449, 4580062.860147775, -10315707.598906554): (-3753736.6523, 2088857.00516, -4704691.067228, 7615988.564739) 55
    test 308 height4(-9383876.103018481, 1162763.5410527405, 4942177.994183704): (-5591854.534061, 694778.592294, 2953041.624298, 4307563.231075) 55
    test 309 height4(0.0, 4778258.9383983705, 1415672.9430701681): (0.0, 6115615.398098, 1811907.757234, -1394820.536219) 53
    test 310 height4(0.0, 3804026.720666877, -9142693.437073609): (0.0, 2450239.673361, -5888921.618332, 3524169.464979) 54
    test 311 height4(2225853.5251192353, -12368167.190078296, 2377354.3169984985): (1106304.154513, -6168141.006169, 1185599.699486, 6412019.53699) 55
    test 312 height4(-10543466.827696806, 3446384.2745875567, -11172155.964534482): (-4255719.889111, 1396683.346586, -4527574.188754, 9374833.461613) 55
    test 313 height4(-6444933.220140925, -10726760.51413222, 5679787.649833847): (-2980644.820311, -4978890.670751, 2636276.730929, 7369006.755808) 54
    test 314 height4(3557541.9476722837, -11298401.830996009, 0.0): (1909643.107501, -6083782.946915, 0.0, 5468804.320293) 55
    test 315 height4(1628215.3392558554, 1781025.7582151783, -7142500.796135265): (1375937.680246, 1506640.81276, -6042106.222082, 1161808.647813) 54
    test 316 height4(-9654336.546462458, 3134194.874257455, -7413522.566095728): (-4882723.494328, 1590417.34773, -3761880.769439, 6203710.823516) 55
    test 317 height4(-10835376.589298207, 0.0, -9737495.408705734): (-4727273.000071, 0.0, -4264396.23677, 8201447.677245) 55
    test 318 height4(1748558.9654028532, 0.0, 6291544.3342708275): (1707277.24823, 0.0, 6143979.287392, 153230.621069) 53
    test 319 height4(4921198.063549148, 5037178.1057670675, -8120590.294858871): (2911878.78265, 2988707.89156, -4818145.229569, 4374898.581721) 50
    test 320 height4(0.0, -7709869.956279785, 1862184.2484294232): (0.0, -6200098.49439, 1497518.919853, 1553187.261409) 54
    test 321 height4(-11997167.22043554, 6037323.505867283, 2722615.935288375): (-5564933.498169, 2810566.620831, 1267449.67264, 7341873.024299) 55
    test 322 height4(-6666725.0560738705, 5262636.106916346, 910313.192224263): (-4964430.62731, 3925603.067263, 679033.902256, 2176913.820364) 53
    test 323 height4(-9679717.312500073, 5489224.636127474, -10751552.366564188): (-3975275.532303, 2263286.689258, -4432963.320937, 9103400.418977) 55
    test 324 height4(-9642554.033212433, -10538768.09642834, -12148672.998165622): (-3266232.137875, -3585748.057812, -4133447.987722, 12379248.787322) 56
    test 325 height4(3757558.8857773147, -7207869.265540024, -7284534.1522171935): (2189494.291145, -4211773.611906, -4256532.362867, 4539186.113718) 55
    test 326 height4(-7856021.92321649, -9512120.09426966, -9741212.929571982): (-3175513.686686, -3860393.607386, -3953316.960902, 9346063.84415) 55
    test 327 height4(-8274047.990886518, -7696911.999641818, -6921276.420863339): (-3968800.622247, -3704926.531407, -3331534.611322, 6881667.613518) 55
    test 328 height4(1801685.685548334, 3467556.2371499836, 1525642.448421667): (2745578.513438, 5265643.69029, 2316784.622795, -2179439.859173) 53
    test 329 height4(-7591668.730276635, -7725406.471717607, 2860688.1479000645): (-4308953.869831, -4397645.790817, 1628415.837374, 4834118.642693) 54
    test 330 height4(4806749.468792359, -11049398.1386712, 1989156.4351772314): (2502291.709883, -5770680.906076, 1038849.949035, 5837676.215918) 56
    test 331 height4(-6824473.897788209, -6536099.946241235, 6008257.467897882): (-3875293.750017, -3722354.045392, 3421711.777592, 4827530.232592) 55
    test 332 height4(3623244.945204046, -12150121.323198419, -7158145.811476532): (1581289.775975, -5322833.962088, -3135865.946595, 8182919.34066) 55
    test 333 height4(-6386782.043245447, 983879.2997110367, 0.0): (-6283273.75229, 968039.389737, 0.0, 104713.270622) 48
    test 334 height4(5969799.204371308, 3373971.416006003, -8728020.901612116): (3420209.435225, 1938577.12551, -5014797.574621, 4727450.923726) 55
    test 335 height4(-9013808.681968268, 771762.6494768526, 4830924.463696841): (-5588092.578813, 479678.264478, 3002568.489641, 3894063.388703) 54
    test 336 height4(3954866.148773961, -8282228.504395821, -7228527.363616541): (2152522.824868, -4521637.880516, -3946336.108435, 5306907.077878) 55
    test 337 height4(-10948304.51348314, 0.0, 6107520.285732083): (-5551593.050675, 0.0, 3107223.825048, 6174647.638918) 55
    test 338 height4(-9249176.804255836, 2108508.42752723, 0.0): (-6198254.78831, 1416138.779158, 0.0, 3128498.182414) 53
    test 339 height4(5670805.563397401, 2989100.8405951215, 0.0): (5627572.780548, 2966464.73121, 0.0, 48800.276239) 51
    test 340 height4(-10796886.602609295, -9456395.686808238, -8551653.315037506): (-4106210.832789, -3611447.994679, -3265877.74534, 10337696.994679) 56
    test 341 height4(-11090243.857698085, -9376024.775342489, 5632491.615101222): (-4524648.953232, -3840559.061432, 2307122.35861, 9209044.348435) 55
    test 342 height4(-9719632.828708487, -11865969.762271276, -12056722.914457431): (-3164160.043927, -3880480.046187, -3942803.036346, 13136893.286699) 55
    test 343 height4(-11114758.054968257, -10082681.398396045, -12350648.604845809): (-3632554.484382, -3310229.07974, -4054762.002517, 13064119.380918) 55
    test 344 height4(-12000701.603651712, -8039738.740892001, 5357587.55553431): (-4950523.638443, -3329699.588583, 2218844.201758, 9041083.342071) 55
    test 345 height4(-8800494.40169864, -12437562.790655222, 1200392.6272875788): (-3659061.195329, -5191668.438078, 501059.647372, 8912148.28204) 55
    test 346 height4(5512562.67225745, 1765108.8617147158, 1346338.2981287169): (5899868.918713, 1888231.49618, 1440252.398269, -417115.295652) 51
    test 347 height4(-7269183.2850019755, 2384396.915806322, 1317662.3317342866): (-5954192.226137, 1955438.952898, 1080607.871449, 1403353.567701) 52
    test 348 height4(-7378693.534707668, -7073761.730956116, 6322085.772434108): (-3903177.009981, -3753760.705122, 3354841.960265, 5648553.599466) 55
    test 349 height4(0.0, 1711886.0955935088, -6878412.869698047): (0.0, 1540436.921872, -6189511.021288, 709915.893548) 51
    test 350 height4(807833.8680971356, 1395855.811302895, 4361733.95629679): (1110594.44211, 1914172.872994, 5981406.388797, -1727326.063665) 53
    test 351 height4(-12021502.106895348, -9760622.317830078, -11321195.949437067): (-3981150.177317, -3247016.279949, -3766109.15961, 12812246.452907) 55
    test 352 height4(-9941831.823391555, 1314938.648816309, -9218571.57002985): (-4639128.299626, 615794.074443, -4317064.909214, 7254807.739896) 54
    test 353 height4(-8522521.487192418, -11778949.467056373, 767450.1773099967): (-3720150.543618, -5161159.417159, 336268.007228, 8188029.670684) 55
    test 354 height4(2200867.3619381, 1642883.7526528742, 5404078.450359587): (2315411.171427, 1727782.87219, 5683350.85322, -313562.146615) 53
    test 355 height4(4317275.085538003, 3478467.1600296977, -9884291.706617998): (2422501.92235, 1957607.307555, -5562615.684722, 4957828.523561) 56
    test 356 height4(-11912262.38106266, -11965513.31455824, 983211.7342120039): (-4475514.821436, -4514468.403213, 370950.875515, 10545053.2429) 55
    test 357 height4(2114850.267655133, 5707387.199952019, -9834284.510646762): (1162801.983128, 3147601.924048, -5423516.407323, 5187848.48045) 55
    test 358 height4(-9688525.640335813, -10699767.94186086, 1591160.7091149313): (-4240154.575213, -4700492.049018, 699000.78744, 8153036.724286) 55
    test 359 height4(-7097538.943397816, 666690.2338496143, -8777026.083300315): (-3991219.843089, 376011.949845, -4950177.669559, 4937456.93647) 55
    test 360 height4(-10547355.622783566, 4020802.0744403694, 4851132.596255675): (-5457472.034605, 2087237.402076, 2518243.458335, 5923509.011832) 55
    test 361 height4(930031.4457340578, -11193132.452618286, 4344829.966824241): (491021.669824, -5928366.299973, 2301185.815589, 5664536.489622) 56
    test 362 height4(3554444.9213833995, 4872779.648997979, 2012248.6189348889): (3561974.588602, 4883032.510833, 2016482.703452, -13406.8839) 52
    test 363 height4(-12578253.19998167, -11944402.960714761, -6937346.212698039): (-4277539.45083, -4080084.480283, -2369691.449558, 12313115.931487) 56
    test 364 height4(5070119.382679099, 6206097.848257698, -11941144.713386927): (2240418.749204, 2752720.859124, -5296441.897735, 8005316.596644) 55
    test 365 height4(0.0, 2806616.6903152047, -8612472.89636349): (0.0, 1976279.006791, -6064432.992637, 2679919.405442) 53

    test 366 height4: (0.545455, 1.090909, 0.818182, 3.916483)
    test 367 height4: None
    test 368 height4: 0

    test 369 height4: (1.090909, 0.545455, 0.818182, 3.916483)
    test 370 height4: None
    test 371 height4: 0

    test 372 height4: (0.742781, 1.114172, 1.485563, 3.385165)
    test 373 height4: None
    test 374 height4: 0

    test 375 toTriaxial: name='WGS84', a=6378137, b=6378137, c=6356752.314245179, e2ab=0, e2bc=0.00669438, e2ac=0.00669438, volume=1083207319801408126976, area=510065621724088.4375, area_p=510065626589516.8125
    test 376 toEllipsoid: name='_', a=6378137, b=6356752.31424518, f_=298.25722356, f=0.00335281, f2=0.00336409, n=0.00167922, e=0.08181919, e2=0.00669438, e22=0.0067395, e32=0.00335843, A=6367449.14582341, L=10001965.72931272, R1=6371008.77141506, R2=6371007.18091847, R3=6371000.79000916, Rbiaxial=6367453.63451633, Rtriaxial=6372797.5559594
    test 377 toEllipsoid: name='', a=2, b=3, f_=-2, f=-0.5, f2=-0.33333333, n=-0.2, e=1.11803399, e2=-1.25, e22=-0.55555556, e32=-0.38461538, A=2.52506313, L=5.31091776, R1=2.33333333, R2=2.32061115, R3=2.28942849, Rbiaxial=2.54950976, Rtriaxial=2.29128785

    test 378 Triaxials: 12
    test 379 Amalthea: name='Amalthea', a=125000, b=73000, c=64000, e2ab=0.658944, e2bc=0.231375493, e2ac=0.737856, volume=2446253479595252, area=93239507787.490371704, area_p=93212299402.670425415
    test 380 Ariel: name='Ariel', a=581100, b=577900, c=577700, e2ab=0.01098327, e2bc=0.000692042, e2ac=0.011667711, volume=812633172614203904, area=4211301462766.580078125, area_p=4211301574065.829589844
    test 381 Earth: name='Earth', a=6378173.435, b=6378103.9, c=6356754.399999999, e2ab=0.000021804, e2bc=0.006683418, e2ac=0.006705077, volume=1083208241574987694080, area=510065911057441.0625, area_p=510065915922713.6875
    test 382 Enceladus: name='Enceladus', a=256600, b=251400, c=248300, e2ab=0.040119337, e2bc=0.024509841, e2ac=0.06364586, volume=67094551514082248, area=798618496278.596679688, area_p=798619018175.109863281
    test 383 Europa: name='Europa', a=1564130, b=1561230, c=1560930, e2ab=0.003704694, e2bc=0.000384275, e2ac=0.004087546, volume=15966575194402123776, area=30663773697323.51953125, area_p=30663773794562.45703125
    test 384 Io: name='Io', a=1829400, b=1819300, c=1815700, e2ab=0.011011391, e2bc=0.003953651, e2ac=0.014921506, volume=25313121117889765376, area=41691875849096.7421875, area_p=41691877397441.2109375
    test 385 Mars: name='Mars', a=3394600, b=3393300, c=3376300, e2ab=0.000765776, e2bc=0.009994646, e2ac=0.010752768, volume=162907283585817247744, area=144249140795107.4375, area_p=144249144150662.15625
    test 386 Mimas: name='Mimas', a=207400, b=196800, c=190600, e2ab=0.09960581, e2bc=0.062015624, e2ac=0.155444317, volume=32587072869017956, area=493855762247.691894531, area_p=493857714107.9375
    test 387 Miranda: name='Miranda', a=240400, b=234200, c=232900, e2ab=0.050915557, e2bc=0.011070811, e2ac=0.061422691, volume=54926187094835456, area=698880863325.756958008, area_p=698881306767.950317383
    test 388 Moon: name='Moon', a=1735550, b=1735324, c=1734898, e2ab=0.000260419, e2bc=0.000490914, e2ac=0.000751206, volume=21886698675223740416, area=37838824729886.09375, area_p=37838824733332.2265625
    test 389 Tethys: name='Tethys', a=535600, b=528200, c=525800, e2ab=0.027441672, e2bc=0.009066821, e2ac=0.036259685, volume=623086233855821440, area=3528073490771.394042969, area_p=3528074261832.738769531
    test 390 WGS84_35: name='WGS84_35', a=6378172, b=6378102, c=6356752.314245179, e2ab=0.00002195, e2bc=0.006683478, e2ac=0.006705281, volume=1083207319768789942272, area=510065621722018.125, area_p=510065626587483.3125

    4 of 390 testTriaxials.py tests (1.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 113.342 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUnits.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Band from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing from .units by testUnits.py line 11
# lazily imported pygeodesy.Bearing_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Bool from .units by testUnits.py line 11
# lazily imported pygeodesy.Epoch from .units by testUnits.py line 11
# lazily imported pygeodesy.Epsg from .epsg by testUnits.py line 11
# lazily imported pygeodesy.FIx from .units by testUnits.py line 11
# lazily imported pygeodesy.Garef from .gars by testUnits.py line 11
# lazily imported pygeodesy.Geohash from .geohash by testUnits.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testUnits.py line 11
# lazily imported pygeodesy.Int from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Int_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Number_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Precision_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Lam_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Phi_ from .units by testUnits.py line 11
# lazily imported pygeodesy.Str from .unitsBase by testUnits.py line 11
# lazily imported pygeodesy.Zone from .units by testUnits.py line 11
# lazily imported pygeodesy.Float from .unitsBase by testUnits.py line 11

    testing testUnits.py 23.03.27 isLazy=3
# lazily imported pygeodesy.albers by bases.py line 213
# lazily imported pygeodesy.azimuthal by bases.py line 213
# lazily imported pygeodesy.booleans by bases.py line 213
# lazily imported pygeodesy.clipy by bases.py line 213
# lazily imported pygeodesy.css by bases.py line 213
# lazily imported pygeodesy.ecef by bases.py line 213
# lazily imported pygeodesy.elevations by bases.py line 213
# lazily imported pygeodesy.ellipsoidalBaseDI by bases.py line 213
# lazily imported pygeodesy.ellipsoidalExact by bases.py line 213
# lazily imported pygeodesy.ellipsoidalGeodSolve by bases.py line 213
# lazily imported pygeodesy.ellipsoidalKarney by bases.py line 213
# lazily imported pygeodesy.ellipsoidalNvector by bases.py line 213
# lazily imported pygeodesy.ellipsoidalVincenty by bases.py line 213
# lazily imported pygeodesy.elliptic by bases.py line 213
# lazily imported pygeodesy.etm by bases.py line 213
# lazily imported pygeodesy.frechet by bases.py line 213
# lazily imported pygeodesy.fstats by bases.py line 213
# lazily imported pygeodesy.geodesicw by bases.py line 213
# lazily imported pygeodesy.geodsolve by bases.py line 213
# lazily imported pygeodesy.geoids by bases.py line 213
# lazily imported pygeodesy.hausdorff by bases.py line 213

    testing _Lat(1.0,) (pygeodesy.units, 23.03.18)
    test 1 .classname: _Lat
    test 2 isinstance: True
    test 3 .name: _lat
    test 4 .named: _lat
    test 5 .named2: _Lat '_lat'
    test 6 .str: 1.0
    test 7 .toStr: 1.0
    test 8 .std_repr: True
    test 9 .repr: 1.0
    test 10 .toRepr: _lat (1.0)
    test 11 .units: _lat
    test 12 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 13 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 14 _lat: TypeError
    test 15 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 16 .named: Test
    test 17 .named2: _Lat 'Test'
    test 18 .str: 1.0
    test 19 .toStr: 1.0
    test 20 .repr: 1.0
    test 21 .toRepr: Test (1.0)
    test 22 .units: _lat
    test 23 .name: Test
    test 24 ._name: Test
    test 25 .str: 1.0
    test 26 .repr: 1.0
    test 27 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 23.03.18)
    test 28 .classname: _Lon
    test 29 isinstance: True
    test 30 .name: _lon
    test 31 .named: _lon
    test 32 .named2: _Lon '_lon'
    test 33 .str: 1.0
    test 34 .toStr: 1.0
    test 35 .std_repr: True
    test 36 .repr: 1.0
    test 37 .toRepr: _lon (1.0)
    test 38 .units: _lon
    test 39 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 40 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 41 _lon: TypeError
    test 42 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 43 .named: Test
    test 44 .named2: _Lon 'Test'
    test 45 .str: 1.0
    test 46 .toStr: 1.0
    test 47 .repr: 1.0
    test 48 .toRepr: Test (1.0)
    test 49 .units: _lon
    test 50 .name: Test
    test 51 ._name: Test
    test 52 .str: 1.0
    test 53 .repr: 1.0
    test 54 delattr: ''
# lazily imported pygeodesy.ktm by bases.py line 213
# lazily imported pygeodesy.lcc by bases.py line 213
# lazily imported pygeodesy.ltp by bases.py line 213
# lazily imported pygeodesy.mgrs by bases.py line 213
# lazily imported pygeodesy.osgr by bases.py line 213
# lazily imported pygeodesy.resections by bases.py line 213
# lazily imported pygeodesy.rhumbsolve by bases.py line 213

    testing _Lat(1.0,) (pygeodesy.units, 23.03.18)
    test 55 .classname: _Lat
    test 56 isinstance: True
    test 57 .name: _lat
    test 58 .named: _lat
    test 59 .named2: _Lat '_lat'
    test 60 .str: 1.0
    test 61 .toStr: 1.0
    test 62 .std_repr: True
    test 63 .repr: 1.0
    test 64 .toRepr: _lat (1.0)
    test 65 .units: _lat
    test 66 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 67 _lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 68 _lat: TypeError
    test 69 _lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 70 .named: Test
    test 71 .named2: _Lat 'Test'
    test 72 .str: 1.0
    test 73 .toStr: 1.0
    test 74 .repr: 1.0
    test 75 .toRepr: Test (1.0)
    test 76 .units: _lat
    test 77 .name: Test
    test 78 ._name: Test
    test 79 .str: 1.0
    test 80 .repr: 1.0
    test 81 delattr: ''

    testing _Lon(1.0,) (pygeodesy.units, 23.03.18)
    test 82 .classname: _Lon
    test 83 isinstance: True
    test 84 .name: _lon
    test 85 .named: _lon
    test 86 .named2: _Lon '_lon'
    test 87 .str: 1.0
    test 88 .toStr: 1.0
    test 89 .std_repr: True
    test 90 .repr: 1.0
    test 91 .toRepr: _lon (1.0)
    test 92 .units: _lon
    test 93 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 94 _lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 95 _lon: TypeError
    test 96 _lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 97 .named: Test
    test 98 .named2: _Lon 'Test'
    test 99 .str: 1.0
    test 100 .toStr: 1.0
    test 101 .repr: 1.0
    test 102 .toRepr: Test (1.0)
    test 103 .units: _lon
    test 104 .name: Test
    test 105 ._name: Test
    test 106 .str: 1.0
    test 107 .repr: 1.0
    test 108 delattr: ''
# lazily imported pygeodesy.simplify by bases.py line 213
# lazily imported pygeodesy.sphericalBase by bases.py line 213
# lazily imported pygeodesy.sphericalNvector by bases.py line 213
# lazily imported pygeodesy.sphericalTrigonometry by bases.py line 213
# lazily imported pygeodesy.trf by bases.py line 213
# lazily imported pygeodesy.triaxials by bases.py line 213

    testing Bearing(1.0,) (pygeodesy.units, 23.03.18)
    test 109 .classname: Bearing
    test 110 isinstance: True
    test 111 .name: bearing
    test 112 .named: bearing
    test 113 .named2: Bearing 'bearing'
    test 114 .str: 1.0
    test 115 .toStr: 1.0
    test 116 .std_repr: True
    test 117 .repr: 1.0
    test 118 .toRepr: bearing (1.0)
    test 119 .units: bearing
    test 120 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 121 bearing: U ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'
    test 122 bearing: TypeError
    test 123 bearing: bearing ('X'): strDMS ('X') or suffix ('N'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 124 .named: Test
    test 125 .named2: Bearing 'Test'
    test 126 .str: 1.0
    test 127 .toStr: 1.0
    test 128 .repr: 1.0
    test 129 .toRepr: Test (1.0)
    test 130 .units: bearing
    test 131 .name: Test
    test 132 ._name: Test
    test 133 .str: 1.0
    test 134 .repr: 1.0
    test 135 delattr: ''

    testing Degrees(1.0,) (pygeodesy.units, 23.03.18)
    test 136 .classname: Degrees
    test 137 isinstance: True
    test 138 .name: degrees
    test 139 .named: degrees
    test 140 .named2: Degrees 'degrees'
    test 141 .str: 1.0
    test 142 .toStr: 1.0
    test 143 .std_repr: True
    test 144 .repr: 1.0
    test 145 .toRepr: degrees (1.0)
    test 146 .units: degrees
    test 147 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 148 degrees: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 149 degrees: TypeError
    test 150 degrees: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 151 .named: Test
    test 152 .named2: Degrees 'Test'
    test 153 .str: 1.0
    test 154 .toStr: 1.0
    test 155 .repr: 1.0
    test 156 .toRepr: Test (1.0)
    test 157 .units: degrees
    test 158 .name: Test
    test 159 ._name: Test
    test 160 .str: 1.0
    test 161 .repr: 1.0
    test 162 delattr: ''

    testing Degrees2(1.0,) (pygeodesy.units, 23.03.18)
    test 163 .classname: Degrees2
    test 164 isinstance: True
    test 165 .name: degrees2
    test 166 .named: degrees2
    test 167 .named2: Degrees2 'degrees2'
    test 168 .str: 1.0
    test 169 .toStr: 1.0
    test 170 .std_repr: True
    test 171 .repr: 1.0
    test 172 .toRepr: degrees2 (1.0)
    test 173 .units: degrees2
    test 174 degrees2: degrees2 ('X'): could not convert string to float: 'X'
    test 175 degrees2: U ('X'): could not convert string to float: 'X'
    test 176 degrees2: TypeError
    test 177 degrees2: degrees2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 178 .named: Test
    test 179 .named2: Degrees2 'Test'
    test 180 .str: 1.0
    test 181 .toStr: 1.0
    test 182 .repr: 1.0
    test 183 .toRepr: Test (1.0)
    test 184 .units: degrees2
    test 185 .name: Test
    test 186 ._name: Test
    test 187 .str: 1.0
    test 188 .repr: 1.0
    test 189 delattr: ''

    testing Degrees_(1.0,) (pygeodesy.units, 23.03.18)
    test 190 .classname: Degrees_
    test 191 isinstance: True
    test 192 .name: degrees_
    test 193 .named: degrees_
    test 194 .named2: Degrees_ 'degrees_'
    test 195 .str: 1.0
    test 196 .toStr: 1.0
    test 197 .std_repr: True
    test 198 .repr: 1.0
    test 199 .toRepr: degrees_ (1.0)
    test 200 .units: degrees_
    test 201 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 202 degrees_: U ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 203 degrees_: TypeError
    test 204 degrees_: degrees ('X'): strDMS ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 205 .named: Test
    test 206 .named2: Degrees_ 'Test'
    test 207 .str: 1.0
    test 208 .toStr: 1.0
    test 209 .repr: 1.0
    test 210 .toRepr: Test (1.0)
    test 211 .units: degrees_
    test 212 .name: Test
    test 213 ._name: Test
    test 214 .str: 1.0
    test 215 .repr: 1.0
    test 216 delattr: ''

    testing Distance(1.0,) (pygeodesy.units, 23.03.18)
    test 217 .classname: Distance
    test 218 isinstance: True
    test 219 .name: distance
    test 220 .named: distance
    test 221 .named2: Distance 'distance'
    test 222 .str: 1.0
    test 223 .toStr: 1.0
    test 224 .std_repr: True
    test 225 .repr: 1.0
    test 226 .toRepr: distance (1.0)
    test 227 .units: distance
    test 228 distance: distance ('X'): could not convert string to float: 'X'
    test 229 distance: U ('X'): could not convert string to float: 'X'
    test 230 distance: TypeError
    test 231 distance: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 232 .named: Test
    test 233 .named2: Distance 'Test'
    test 234 .str: 1.0
    test 235 .toStr: 1.0
    test 236 .repr: 1.0
    test 237 .toRepr: Test (1.0)
    test 238 .units: distance
    test 239 .name: Test
    test 240 ._name: Test
    test 241 .str: 1.0
    test 242 .repr: 1.0
    test 243 delattr: ''

    testing Distance_(1.0,) (pygeodesy.units, 23.03.18)
    test 244 .classname: Distance_
    test 245 isinstance: True
    test 246 .name: distance_
    test 247 .named: distance_
    test 248 .named2: Distance_ 'distance_'
    test 249 .str: 1.0
    test 250 .toStr: 1.0
    test 251 .std_repr: True
    test 252 .repr: 1.0
    test 253 .toRepr: distance_ (1.0)
    test 254 .units: distance_
    test 255 distance_: distance ('X'): could not convert string to float: 'X'
    test 256 distance_: U ('X'): could not convert string to float: 'X'
    test 257 distance_: TypeError
    test 258 distance_: distance ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 259 .named: Test
    test 260 .named2: Distance_ 'Test'
    test 261 .str: 1.0
    test 262 .toStr: 1.0
    test 263 .repr: 1.0
    test 264 .toRepr: Test (1.0)
    test 265 .units: distance_
    test 266 .name: Test
    test 267 ._name: Test
    test 268 .str: 1.0
    test 269 .repr: 1.0
    test 270 delattr: ''

    testing Easting(1.0,) (pygeodesy.units, 23.03.18)
    test 271 .classname: Easting
    test 272 isinstance: True
    test 273 .name: easting
    test 274 .named: easting
    test 275 .named2: Easting 'easting'
    test 276 .str: 1.0
    test 277 .toStr: 1.0
    test 278 .std_repr: True
    test 279 .repr: 1.0
    test 280 .toRepr: easting (1.0)
    test 281 .units: easting
    test 282 easting: easting ('X'): could not convert string to float: 'X'
    test 283 easting: U ('X'): could not convert string to float: 'X'
    test 284 easting: TypeError
    test 285 easting: easting ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 286 .named: Test
    test 287 .named2: Easting 'Test'
    test 288 .str: 1.0
    test 289 .toStr: 1.0
    test 290 .repr: 1.0
    test 291 .toRepr: Test (1.0)
    test 292 .units: easting
    test 293 .name: Test
    test 294 ._name: Test
    test 295 .str: 1.0
    test 296 .repr: 1.0
    test 297 delattr: ''

    testing Feet(1.0,) (pygeodesy.units, 23.03.18)
    test 298 .classname: Feet
    test 299 isinstance: True
    test 300 .name: feet
    test 301 .named: feet
    test 302 .named2: Feet 'feet'
    test 303 .str: 1.0
    test 304 .toStr: 1.0
    test 305 .std_repr: True
    test 306 .repr: 1.0
    test 307 .toRepr: feet (1.0)
    test 308 .units: feet
    test 309 feet: feet ('X'): could not convert string to float: 'X'
    test 310 feet: U ('X'): could not convert string to float: 'X'
    test 311 feet: TypeError
    test 312 feet: feet ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 313 .named: Test
    test 314 .named2: Feet 'Test'
    test 315 .str: 1.0
    test 316 .toStr: 1.0
    test 317 .repr: 1.0
    test 318 .toRepr: Test (1.0)
    test 319 .units: feet
    test 320 .name: Test
    test 321 ._name: Test
    test 322 .str: 1.0
    test 323 .repr: 1.0
    test 324 delattr: ''

    testing Float_(1.0,) (pygeodesy.units, 23.03.18)
    test 325 .classname: Float_
    test 326 isinstance: True
    test 327 .name: float_
    test 328 .named: float_
    test 329 .named2: Float_ 'float_'
    test 330 .str: 1.0
    test 331 .toStr: 1.0
    test 332 .std_repr: True
    test 333 .repr: 1.0
    test 334 .toRepr: float_ (1.0)
    test 335 .units: float_
    test 336 float_: Float_ ('X'): could not convert string to float: 'X'
    test 337 float_: U ('X'): could not convert string to float: 'X'
    test 338 float_: TypeError
    test 339 float_: Float_ ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 340 .named: Test
    test 341 .named2: Float_ 'Test'
    test 342 .str: 1.0
    test 343 .toStr: 1.0
    test 344 .repr: 1.0
    test 345 .toRepr: Test (1.0)
    test 346 .units: float_
    test 347 .name: Test
    test 348 ._name: Test
    test 349 .str: 1.0
    test 350 .repr: 1.0
    test 351 delattr: ''

    testing Height(1.0,) (pygeodesy.units, 23.03.18)
    test 352 .classname: Height
    test 353 isinstance: True
    test 354 .name: height
    test 355 .named: height
    test 356 .named2: Height 'height'
    test 357 .str: 1.0
    test 358 .toStr: 1.0
    test 359 .std_repr: True
    test 360 .repr: 1.0
    test 361 .toRepr: height (1.0)
    test 362 .units: height
    test 363 height: height ('X'): could not convert string to float: 'X'
    test 364 height: U ('X'): could not convert string to float: 'X'
    test 365 height: TypeError
    test 366 height: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 367 .named: Test
    test 368 .named2: Height 'Test'
    test 369 .str: 1.0
    test 370 .toStr: 1.0
    test 371 .repr: 1.0
    test 372 .toRepr: Test (1.0)
    test 373 .units: height
    test 374 .name: Test
    test 375 ._name: Test
    test 376 .str: 1.0
    test 377 .repr: 1.0
    test 378 delattr: ''

    testing HeightX(1.0,) (pygeodesy.units, 23.03.18)
    test 379 .classname: HeightX
    test 380 isinstance: True
    test 381 .name: heightx
    test 382 .named: heightx
    test 383 .named2: HeightX 'heightx'
    test 384 .str: 1.0
    test 385 .toStr: 1.0
    test 386 .std_repr: True
    test 387 .repr: 1.0
    test 388 .toRepr: heightx (1.0)
    test 389 .units: heightx
    test 390 heightx: height ('X'): could not convert string to float: 'X'
    test 391 heightx: U ('X'): could not convert string to float: 'X'
    test 392 heightx: TypeError
    test 393 heightx: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 394 .named: Test
    test 395 .named2: HeightX 'Test'
    test 396 .str: 1.0
    test 397 .toStr: 1.0
    test 398 .repr: 1.0
    test 399 .toRepr: Test (1.0)
    test 400 .units: heightx
    test 401 .name: Test
    test 402 ._name: Test
    test 403 .str: 1.0
    test 404 .repr: 1.0
    test 405 delattr: ''

    testing Height_(1.0,) (pygeodesy.units, 23.03.18)
    test 406 .classname: Height_
    test 407 isinstance: True
    test 408 .name: height_
    test 409 .named: height_
    test 410 .named2: Height_ 'height_'
    test 411 .str: 1.0
    test 412 .toStr: 1.0
    test 413 .std_repr: True
    test 414 .repr: 1.0
    test 415 .toRepr: height_ (1.0)
    test 416 .units: height_
    test 417 height_: height ('X'): could not convert string to float: 'X'
    test 418 height_: U ('X'): could not convert string to float: 'X'
    test 419 height_: TypeError
    test 420 height_: height ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 421 .named: Test
    test 422 .named2: Height_ 'Test'
    test 423 .str: 1.0
    test 424 .toStr: 1.0
    test 425 .repr: 1.0
    test 426 .toRepr: Test (1.0)
    test 427 .units: height_
    test 428 .name: Test
    test 429 ._name: Test
    test 430 .str: 1.0
    test 431 .repr: 1.0
    test 432 delattr: ''

    testing Lam(1.0,) (pygeodesy.units, 23.03.18)
    test 433 .classname: Lam
    test 434 isinstance: True
    test 435 .name: lam
    test 436 .named: lam
    test 437 .named2: Lam 'lam'
    test 438 .str: 1.0
    test 439 .toStr: 1.0
    test 440 .std_repr: True
    test 441 .repr: 1.0
    test 442 .toRepr: lam (1.0)
    test 443 .units: lam
    test 444 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 445 lam: U ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 446 lam: TypeError
    test 447 lam: lam ('X'): strRad ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 448 .named: Test
    test 449 .named2: Lam 'Test'
    test 450 .str: 1.0
    test 451 .toStr: 1.0
    test 452 .repr: 1.0
    test 453 .toRepr: Test (1.0)
    test 454 .units: lam
    test 455 .name: Test
    test 456 ._name: Test
    test 457 .str: 1.0
    test 458 .repr: 1.0
    test 459 delattr: ''

    testing Lat(1.0,) (pygeodesy.units, 23.03.18)
    test 460 .classname: Lat
    test 461 isinstance: True
    test 462 .name: lat
    test 463 .named: lat
    test 464 .named2: Lat 'lat'
    test 465 .str: 1.0
    test 466 .toStr: 1.0
    test 467 .std_repr: True
    test 468 .repr: 1.0
    test 469 .toRepr: lat (1.0)
    test 470 .units: lat
    test 471 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 472 lat: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 473 lat: TypeError
    test 474 lat: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 475 .named: Test
    test 476 .named2: Lat 'Test'
    test 477 .str: 1.0
    test 478 .toStr: 1.0
    test 479 .repr: 1.0
    test 480 .toRepr: Test (1.0)
    test 481 .units: lat
    test 482 .name: Test
    test 483 ._name: Test
    test 484 .str: 1.0
    test 485 .repr: 1.0
    test 486 delattr: ''

    testing Lat_(1.0,) (pygeodesy.units, 23.03.18)
    test 487 .classname: Lat_
    test 488 isinstance: True
    test 489 .name: lat_
    test 490 .named: lat_
    test 491 .named2: Lat_ 'lat_'
    test 492 .str: 1.0
    test 493 .toStr: 1.0
    test 494 .std_repr: True
    test 495 .repr: 1.0
    test 496 .toRepr: lat_ (1.0)
    test 497 .units: lat_
    test 498 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 499 lat_: U ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 500 lat_: TypeError
    test 501 lat_: lat ('X'): strDMS ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 502 .named: Test
    test 503 .named2: Lat_ 'Test'
    test 504 .str: 1.0
    test 505 .toStr: 1.0
    test 506 .repr: 1.0
    test 507 .toRepr: Test (1.0)
    test 508 .units: lat_
    test 509 .name: Test
    test 510 ._name: Test
    test 511 .str: 1.0
    test 512 .repr: 1.0
    test 513 delattr: ''

    testing Lon(1.0,) (pygeodesy.units, 23.03.18)
    test 514 .classname: Lon
    test 515 isinstance: True
    test 516 .name: lon
    test 517 .named: lon
    test 518 .named2: Lon 'lon'
    test 519 .str: 1.0
    test 520 .toStr: 1.0
    test 521 .std_repr: True
    test 522 .repr: 1.0
    test 523 .toRepr: lon (1.0)
    test 524 .units: lon
    test 525 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 526 lon: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 527 lon: TypeError
    test 528 lon: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 529 .named: Test
    test 530 .named2: Lon 'Test'
    test 531 .str: 1.0
    test 532 .toStr: 1.0
    test 533 .repr: 1.0
    test 534 .toRepr: Test (1.0)
    test 535 .units: lon
    test 536 .name: Test
    test 537 ._name: Test
    test 538 .str: 1.0
    test 539 .repr: 1.0
    test 540 delattr: ''

    testing Lon_(1.0,) (pygeodesy.units, 23.03.18)
    test 541 .classname: Lon_
    test 542 isinstance: True
    test 543 .name: lon_
    test 544 .named: lon_
    test 545 .named2: Lon_ 'lon_'
    test 546 .str: 1.0
    test 547 .toStr: 1.0
    test 548 .std_repr: True
    test 549 .repr: 1.0
    test 550 .toRepr: lon_ (1.0)
    test 551 .units: lon_
    test 552 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 553 lon_: U ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'
    test 554 lon_: TypeError
    test 555 lon_: lon ('X'): strDMS ('X') or suffix ('EW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 556 .named: Test
    test 557 .named2: Lon_ 'Test'
    test 558 .str: 1.0
    test 559 .toStr: 1.0
    test 560 .repr: 1.0
    test 561 .toRepr: Test (1.0)
    test 562 .units: lon_
    test 563 .name: Test
    test 564 ._name: Test
    test 565 .str: 1.0
    test 566 .repr: 1.0
    test 567 delattr: ''

    testing Meter(1.0,) (pygeodesy.units, 23.03.18)
    test 568 .classname: Meter
    test 569 isinstance: True
    test 570 .name: meter
    test 571 .named: meter
    test 572 .named2: Meter 'meter'
    test 573 .str: 1.0
    test 574 .toStr: 1.0
    test 575 .std_repr: True
    test 576 .repr: 1.0
    test 577 .toRepr: meter (1.0)
    test 578 .units: meter
    test 579 meter: meter ('X'): could not convert string to float: 'X'
    test 580 meter: U ('X'): could not convert string to float: 'X'
    test 581 meter: TypeError
    test 582 meter: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 583 .named: Test
    test 584 .named2: Meter 'Test'
    test 585 .str: 1.0
    test 586 .toStr: 1.0
    test 587 .repr: 1.0
    test 588 .toRepr: Test (1.0)
    test 589 .units: meter
    test 590 .name: Test
    test 591 ._name: Test
    test 592 .str: 1.0
    test 593 .repr: 1.0
    test 594 delattr: ''

    testing Meter2(1.0,) (pygeodesy.units, 23.03.18)
    test 595 .classname: Meter2
    test 596 isinstance: True
    test 597 .name: meter2
    test 598 .named: meter2
    test 599 .named2: Meter2 'meter2'
    test 600 .str: 1.0
    test 601 .toStr: 1.0
    test 602 .std_repr: True
    test 603 .repr: 1.0
    test 604 .toRepr: meter2 (1.0)
    test 605 .units: meter2
    test 606 meter2: meter2 ('X'): could not convert string to float: 'X'
    test 607 meter2: U ('X'): could not convert string to float: 'X'
    test 608 meter2: TypeError
    test 609 meter2: meter2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 610 .named: Test
    test 611 .named2: Meter2 'Test'
    test 612 .str: 1.0
    test 613 .toStr: 1.0
    test 614 .repr: 1.0
    test 615 .toRepr: Test (1.0)
    test 616 .units: meter2
    test 617 .name: Test
    test 618 ._name: Test
    test 619 .str: 1.0
    test 620 .repr: 1.0
    test 621 delattr: ''

    testing Meter3(1.0,) (pygeodesy.units, 23.03.18)
    test 622 .classname: Meter3
    test 623 isinstance: True
    test 624 .name: meter3
    test 625 .named: meter3
    test 626 .named2: Meter3 'meter3'
    test 627 .str: 1.0
    test 628 .toStr: 1.0
    test 629 .std_repr: True
    test 630 .repr: 1.0
    test 631 .toRepr: meter3 (1.0)
    test 632 .units: meter3
    test 633 meter3: meter3 ('X'): could not convert string to float: 'X'
    test 634 meter3: U ('X'): could not convert string to float: 'X'
    test 635 meter3: TypeError
    test 636 meter3: meter3 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 637 .named: Test
    test 638 .named2: Meter3 'Test'
    test 639 .str: 1.0
    test 640 .toStr: 1.0
    test 641 .repr: 1.0
    test 642 .toRepr: Test (1.0)
    test 643 .units: meter3
    test 644 .name: Test
    test 645 ._name: Test
    test 646 .str: 1.0
    test 647 .repr: 1.0
    test 648 delattr: ''

    testing Meter_(1.0,) (pygeodesy.units, 23.03.18)
    test 649 .classname: Meter_
    test 650 isinstance: True
    test 651 .name: meter_
    test 652 .named: meter_
    test 653 .named2: Meter_ 'meter_'
    test 654 .str: 1.0
    test 655 .toStr: 1.0
    test 656 .std_repr: True
    test 657 .repr: 1.0
    test 658 .toRepr: meter_ (1.0)
    test 659 .units: meter_
    test 660 meter_: meter ('X'): could not convert string to float: 'X'
    test 661 meter_: U ('X'): could not convert string to float: 'X'
    test 662 meter_: TypeError
    test 663 meter_: meter ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 664 .named: Test
    test 665 .named2: Meter_ 'Test'
    test 666 .str: 1.0
    test 667 .toStr: 1.0
    test 668 .repr: 1.0
    test 669 .toRepr: Test (1.0)
    test 670 .units: meter_
    test 671 .name: Test
    test 672 ._name: Test
    test 673 .str: 1.0
    test 674 .repr: 1.0
    test 675 delattr: ''

    testing Northing(1.0,) (pygeodesy.units, 23.03.18)
    test 676 .classname: Northing
    test 677 isinstance: True
    test 678 .name: northing
    test 679 .named: northing
    test 680 .named2: Northing 'northing'
    test 681 .str: 1.0
    test 682 .toStr: 1.0
    test 683 .std_repr: True
    test 684 .repr: 1.0
    test 685 .toRepr: northing (1.0)
    test 686 .units: northing
    test 687 northing: northing ('X'): could not convert string to float: 'X'
    test 688 northing: U ('X'): could not convert string to float: 'X'
    test 689 northing: TypeError
    test 690 northing: northing ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 691 .named: Test
    test 692 .named2: Northing 'Test'
    test 693 .str: 1.0
    test 694 .toStr: 1.0
    test 695 .repr: 1.0
    test 696 .toRepr: Test (1.0)
    test 697 .units: northing
    test 698 .name: Test
    test 699 ._name: Test
    test 700 .str: 1.0
    test 701 .repr: 1.0
    test 702 delattr: ''

    testing Phi(1.0,) (pygeodesy.units, 23.03.18)
    test 703 .classname: Phi
    test 704 isinstance: True
    test 705 .name: phi
    test 706 .named: phi
    test 707 .named2: Phi 'phi'
    test 708 .str: 1.0
    test 709 .toStr: 1.0
    test 710 .std_repr: True
    test 711 .repr: 1.0
    test 712 .toRepr: phi (1.0)
    test 713 .units: phi
    test 714 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 715 phi: U ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'
    test 716 phi: TypeError
    test 717 phi: phi ('X'): strRad ('X') or suffix ('NS'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 718 .named: Test
    test 719 .named2: Phi 'Test'
    test 720 .str: 1.0
    test 721 .toStr: 1.0
    test 722 .repr: 1.0
    test 723 .toRepr: Test (1.0)
    test 724 .units: phi
    test 725 .name: Test
    test 726 ._name: Test
    test 727 .str: 1.0
    test 728 .repr: 1.0
    test 729 delattr: ''

    testing Radians(1.0,) (pygeodesy.units, 23.03.18)
    test 730 .classname: Radians
    test 731 isinstance: True
    test 732 .name: radians
    test 733 .named: radians
    test 734 .named2: Radians 'radians'
    test 735 .str: 1.0
    test 736 .toStr: 1.0
    test 737 .std_repr: True
    test 738 .repr: 1.0
    test 739 .toRepr: radians (1.0)
    test 740 .units: radians
    test 741 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 742 radians: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 743 radians: TypeError
    test 744 radians: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 745 .named: Test
    test 746 .named2: Radians 'Test'
    test 747 .str: 1.0
    test 748 .toStr: 1.0
    test 749 .repr: 1.0
    test 750 .toRepr: Test (1.0)
    test 751 .units: radians
    test 752 .name: Test
    test 753 ._name: Test
    test 754 .str: 1.0
    test 755 .repr: 1.0
    test 756 delattr: ''

    testing Radians2(1.0,) (pygeodesy.units, 23.03.18)
    test 757 .classname: Radians2
    test 758 isinstance: True
    test 759 .name: radians2
    test 760 .named: radians2
    test 761 .named2: Radians2 'radians2'
    test 762 .str: 1.0
    test 763 .toStr: 1.0
    test 764 .std_repr: True
    test 765 .repr: 1.0
    test 766 .toRepr: radians2 (1.0)
    test 767 .units: radians2
    test 768 radians2: radians2 ('X'): could not convert string to float: 'X'
    test 769 radians2: U ('X'): could not convert string to float: 'X'
    test 770 radians2: TypeError
    test 771 radians2: radians2 ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 772 .named: Test
    test 773 .named2: Radians2 'Test'
    test 774 .str: 1.0
    test 775 .toStr: 1.0
    test 776 .repr: 1.0
    test 777 .toRepr: Test (1.0)
    test 778 .units: radians2
    test 779 .name: Test
    test 780 ._name: Test
    test 781 .str: 1.0
    test 782 .repr: 1.0
    test 783 delattr: ''

    testing Radians_(1.0,) (pygeodesy.units, 23.03.18)
    test 784 .classname: Radians_
    test 785 isinstance: True
    test 786 .name: radians_
    test 787 .named: radians_
    test 788 .named2: Radians_ 'radians_'
    test 789 .str: 1.0
    test 790 .toStr: 1.0
    test 791 .std_repr: True
    test 792 .repr: 1.0
    test 793 .toRepr: radians_ (1.0)
    test 794 .units: radians_
    test 795 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 796 radians_: U ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'
    test 797 radians_: TypeError
    test 798 radians_: radians ('X'): strRad ('X') or suffix ('NSEW'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 799 .named: Test
    test 800 .named2: Radians_ 'Test'
    test 801 .str: 1.0
    test 802 .toStr: 1.0
    test 803 .repr: 1.0
    test 804 .toRepr: Test (1.0)
    test 805 .units: radians_
    test 806 .name: Test
    test 807 ._name: Test
    test 808 .str: 1.0
    test 809 .repr: 1.0
    test 810 delattr: ''

    testing Radius_(1.0,) (pygeodesy.units, 23.03.18)
    test 811 .classname: Radius_
    test 812 isinstance: True
    test 813 .name: radius_
    test 814 .named: radius_
    test 815 .named2: Radius_ 'radius_'
    test 816 .str: 1.0
    test 817 .toStr: 1.0
    test 818 .std_repr: True
    test 819 .repr: 1.0
    test 820 .toRepr: radius_ (1.0)
    test 821 .units: radius_
    test 822 radius_: radius ('X'): could not convert string to float: 'X'
    test 823 radius_: U ('X'): could not convert string to float: 'X'
    test 824 radius_: TypeError
    test 825 radius_: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 826 .named: Test
    test 827 .named2: Radius_ 'Test'
    test 828 .str: 1.0
    test 829 .toStr: 1.0
    test 830 .repr: 1.0
    test 831 .toRepr: Test (1.0)
    test 832 .units: radius_
    test 833 .name: Test
    test 834 ._name: Test
    test 835 .str: 1.0
    test 836 .repr: 1.0
    test 837 delattr: ''

    testing Scalar(1.0,) (pygeodesy.units, 23.03.18)
    test 838 .classname: Scalar
    test 839 isinstance: True
    test 840 .name: scalar
    test 841 .named: scalar
    test 842 .named2: Scalar 'scalar'
    test 843 .str: 1.0
    test 844 .toStr: 1.0
    test 845 .std_repr: True
    test 846 .repr: 1.0
    test 847 .toRepr: scalar (1.0)
    test 848 .units: scalar
    test 849 scalar: scalar ('X'): could not convert string to float: 'X'
    test 850 scalar: U ('X'): could not convert string to float: 'X'
    test 851 scalar: TypeError
    test 852 scalar: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 853 .named: Test
    test 854 .named2: Scalar 'Test'
    test 855 .str: 1.0
    test 856 .toStr: 1.0
    test 857 .repr: 1.0
    test 858 .toRepr: Test (1.0)
    test 859 .units: scalar
    test 860 .name: Test
    test 861 ._name: Test
    test 862 .str: 1.0
    test 863 .repr: 1.0
    test 864 delattr: ''

    testing Scalar_(1.0,) (pygeodesy.units, 23.03.18)
    test 865 .classname: Scalar_
    test 866 isinstance: True
    test 867 .name: scalar_
    test 868 .named: scalar_
    test 869 .named2: Scalar_ 'scalar_'
    test 870 .str: 1.0
    test 871 .toStr: 1.0
    test 872 .std_repr: True
    test 873 .repr: 1.0
    test 874 .toRepr: scalar_ (1.0)
    test 875 .units: scalar_
    test 876 scalar_: scalar ('X'): could not convert string to float: 'X'
    test 877 scalar_: U ('X'): could not convert string to float: 'X'
    test 878 scalar_: TypeError
    test 879 scalar_: scalar ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 880 .named: Test
    test 881 .named2: Scalar_ 'Test'
    test 882 .str: 1.0
    test 883 .toStr: 1.0
    test 884 .repr: 1.0
    test 885 .toRepr: Test (1.0)
    test 886 .units: scalar_
    test 887 .name: Test
    test 888 ._name: Test
    test 889 .str: 1.0
    test 890 .repr: 1.0
    test 891 delattr: ''

    testing Float(1.0,) (pygeodesy.units, 23.03.18)
    test 892 .classname: Float
    test 893 isinstance: True
    test 894 .name: float
    test 895 .named: float
    test 896 .named2: Float 'float'
    test 897 .str: 1.0
    test 898 .toStr: 1.0
    test 899 .std_repr: True
    test 900 .repr: 1.0
    test 901 .toRepr: float (1.0)
    test 902 .units: float
    test 903 float: Float ('X'): could not convert string to float: 'X'
    test 904 float: U ('X'): could not convert string to float: 'X'
    test 905 float: TypeError
    test 906 float: Float ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 907 .named: Test
    test 908 .named2: Float 'Test'
    test 909 .str: 1.0
    test 910 .toStr: 1.0
    test 911 .repr: 1.0
    test 912 .toRepr: Test (1.0)
    test 913 .units: float
    test 914 .name: Test
    test 915 ._name: Test
    test 916 .str: 1.0
    test 917 .repr: 1.0
    test 918 delattr: ''

    testing Radius(1.0,) (pygeodesy.units, 23.03.18)
    test 919 .classname: Radius
    test 920 isinstance: True
    test 921 .name: radius
    test 922 .named: radius
    test 923 .named2: Radius 'radius'
    test 924 .str: 1.0
    test 925 .toStr: 1.0
    test 926 .std_repr: True
    test 927 .repr: 1.0
    test 928 .toRepr: radius (1.0)
    test 929 .units: radius
    test 930 radius: radius ('X'): could not convert string to float: 'X'
    test 931 radius: U ('X'): could not convert string to float: 'X'
    test 932 radius: TypeError
    test 933 radius: radius ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 934 .named: Test
    test 935 .named2: Radius 'Test'
    test 936 .str: 1.0
    test 937 .toStr: 1.0
    test 938 .repr: 1.0
    test 939 .toRepr: Test (1.0)
    test 940 .units: radius
    test 941 .name: Test
    test 942 ._name: Test
    test 943 .str: 1.0
    test 944 .repr: 1.0
    test 945 delattr: ''
# lazily imported pygeodesy.utmups by bases.py line 213
# lazily imported pygeodesy.webmercator by bases.py line 213

    testing Band('U',) (pygeodesy.units, 23.03.18)
    test 946 .classname: Band
    test 947 isinstance: True
    test 948 .name: band
    test 949 .named: band
    test 950 .named2: Band 'band'
    test 951 .str: U
    test 952 .toStr: U
    test 953 .std_repr: True
    test 954 .repr: 'U'
    test 955 .toRepr: band ('U')
    test 956 .units: band
    test 957 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 958 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 959 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 960 .named: Test
    test 961 .named2: Band 'Test'
    test 962 .str: U
    test 963 .toStr: U
    test 964 .repr: 'U'
    test 965 .toRepr: Test ('U')
    test 966 .units: band
    test 967 .name: Test
    test 968 ._name: Test
    test 969 .str: U
    test 970 .repr: 'U'
    test 971 delattr: ''

    testing Str('U',) (pygeodesy.units, 23.03.18)
    test 972 .classname: Str
    test 973 isinstance: True
    test 974 .name: str
    test 975 .named: str
    test 976 .named2: Str 'str'
    test 977 .str: U
    test 978 .toStr: U
    test 979 .std_repr: True
    test 980 .repr: 'U'
    test 981 .toRepr: str ('U')
    test 982 .units: str
    test 983 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 984 error: X  FAILED, KNOWN, expected <class 'ValueError'>
    test 985 Error: X  FAILED, KNOWN, expected <class 'TypeError'>
    test 986 .named: Test
    test 987 .named2: Str 'Test'
    test 988 .str: U
    test 989 .toStr: U
    test 990 .repr: 'U'
    test 991 .toRepr: Test ('U')
    test 992 .units: str
    test 993 .name: Test
    test 994 ._name: Test
    test 995 .str: U
    test 996 .repr: 'U'
    test 997 delattr: ''

    testing Bool(True,) (pygeodesy.units, 23.03.18)
    test 998 .classname: Bool
    test 999 isinstance: True
    test 1000 .name: bool
    test 1001 .named: bool
    test 1002 .named2: Bool 'bool'
    test 1003 .str: True
    test 1004 .toStr: True
    test 1005 .std_repr: True
    test 1006 .repr: True
    test 1007 .toRepr: bool (True)
    test 1008 .units: bool
    test 1009 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1010 error: True  FAILED, KNOWN, expected <class 'ValueError'>
    test 1011 Error: True  FAILED, KNOWN, expected <class 'TypeError'>
    test 1012 .named: Test
    test 1013 .named2: Bool 'Test'
    test 1014 .str: True
    test 1015 .toStr: True
    test 1016 .repr: True
    test 1017 .toRepr: Test (True)
    test 1018 .units: bool
    test 1019 .name: Test
    test 1020 ._name: Test
    test 1021 .str: True
    test 1022 .repr: True
    test 1023 delattr: ''

    testing Int(2,) (pygeodesy.units, 23.03.18)
    test 1024 .classname: Int
    test 1025 isinstance: True
    test 1026 .name: int
    test 1027 .named: int
    test 1028 .named2: Int 'int'
    test 1029 .str: 2
    test 1030 .toStr: 2
    test 1031 .std_repr: True
    test 1032 .repr: 2
    test 1033 .toRepr: int (2)
    test 1034 .units: int
    test 1035 int: Int ('X'): invalid literal for int() with base 10: 'X'
    test 1036 int: U ('X'): invalid literal for int() with base 10: 'X'
    test 1037 int: TypeError
    test 1038 int: Int ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1039 .named: Test
    test 1040 .named2: Int 'Test'
    test 1041 .str: 2
    test 1042 .toStr: 2
    test 1043 .repr: 2
    test 1044 .toRepr: Test (2)
    test 1045 .units: int
    test 1046 .name: Test
    test 1047 ._name: Test
    test 1048 .str: 2
    test 1049 .repr: 2
    test 1050 delattr: ''

    testing Int_(2,) (pygeodesy.units, 23.03.18)
    test 1051 .classname: Int_
    test 1052 isinstance: True
    test 1053 .name: int_
    test 1054 .named: int_
    test 1055 .named2: Int_ 'int_'
    test 1056 .str: 2
    test 1057 .toStr: 2
    test 1058 .std_repr: True
    test 1059 .repr: 2
    test 1060 .toRepr: int_ (2)
    test 1061 .units: int_
    test 1062 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'
    test 1063 int_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1064 int_: TypeError
    test 1065 int_: Int_ ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1066 .named: Test
    test 1067 .named2: Int_ 'Test'
    test 1068 .str: 2
    test 1069 .toStr: 2
    test 1070 .repr: 2
    test 1071 .toRepr: Test (2)
    test 1072 .units: int_
    test 1073 .name: Test
    test 1074 ._name: Test
    test 1075 .str: 2
    test 1076 .repr: 2
    test 1077 delattr: ''

    testing Number_(2,) (pygeodesy.units, 23.03.18)
    test 1078 .classname: Number_
    test 1079 isinstance: True
    test 1080 .name: number_
    test 1081 .named: number_
    test 1082 .named2: Number_ 'number_'
    test 1083 .str: 2
    test 1084 .toStr: 2
    test 1085 .std_repr: True
    test 1086 .repr: 2
    test 1087 .toRepr: number_ (2)
    test 1088 .units: number_
    test 1089 number_: number ('X'): invalid literal for int() with base 10: 'X'
    test 1090 number_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1091 number_: TypeError
    test 1092 number_: number ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1093 .named: Test
    test 1094 .named2: Number_ 'Test'
    test 1095 .str: 2
    test 1096 .toStr: 2
    test 1097 .repr: 2
    test 1098 .toRepr: Test (2)
    test 1099 .units: number_
    test 1100 .name: Test
    test 1101 ._name: Test
    test 1102 .str: 2
    test 1103 .repr: 2
    test 1104 delattr: ''

    testing Precision_(2,) (pygeodesy.units, 23.03.18)
    test 1105 .classname: Precision_
    test 1106 isinstance: True
    test 1107 .name: precision_
    test 1108 .named: precision_
    test 1109 .named2: Precision_ 'precision_'
    test 1110 .str: 2
    test 1111 .toStr: 2
    test 1112 .std_repr: True
    test 1113 .repr: 2
    test 1114 .toRepr: precision_ (2)
    test 1115 .units: precision_
    test 1116 precision_: precision ('X'): invalid literal for int() with base 10: 'X'
    test 1117 precision_: U ('X'): invalid literal for int() with base 10: 'X'
    test 1118 precision_: TypeError
    test 1119 precision_: precision ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1120 .named: Test
    test 1121 .named2: Precision_ 'Test'
    test 1122 .str: 2
    test 1123 .toStr: 2
    test 1124 .repr: 2
    test 1125 .toRepr: Test (2)
    test 1126 .units: precision_
    test 1127 .name: Test
    test 1128 ._name: Test
    test 1129 .str: 2
    test 1130 .repr: 2
    test 1131 delattr: ''

    testing Zone(2,) (pygeodesy.units, 23.03.18)
    test 1132 .classname: Zone
    test 1133 isinstance: True
    test 1134 .name: zone
    test 1135 .named: zone
    test 1136 .named2: Zone 'zone'
    test 1137 .str: 2
    test 1138 .toStr: 2
    test 1139 .std_repr: True
    test 1140 .repr: 2
    test 1141 .toRepr: zone (2)
    test 1142 .units: zone
    test 1143 zone: zone ('X'): invalid literal for int() with base 10: 'X'
    test 1144 zone: U ('X'): invalid literal for int() with base 10: 'X'
    test 1145 zone: TypeError
    test 1146 zone: zone ('X'): invalid literal for int() with base 10: 'X'  FAILED, KNOWN, expected 'X'
    test 1147 .named: Test
    test 1148 .named2: Zone 'Test'
    test 1149 .str: 2
    test 1150 .toStr: 2
    test 1151 .repr: 2
    test 1152 .toRepr: Test (2)
    test 1153 .units: zone
    test 1154 .name: Test
    test 1155 ._name: Test
    test 1156 .str: 2
    test 1157 .repr: 2
    test 1158 delattr: ''

    testing Epoch(1901,) (pygeodesy.units, 23.03.18)
    test 1159 .classname: Epoch
    test 1160 isinstance: True
    test 1161 .name: epoch
    test 1162 .named: epoch
    test 1163 .named2: Epoch 'epoch'
    test 1164 .str: 1901
    test 1165 .toStr: 1901
    test 1166 .std_repr: False
    test 1167 .repr: epoch (1901)
    test 1168 .toRepr: epoch (1901)
    test 1169 .units: epoch
    test 1170 epoch: epoch ('X'): could not convert string to float: 'X'
    test 1171 epoch: U ('X'): could not convert string to float: 'X'
    test 1172 epoch: TypeError
    test 1173 epoch: epoch ('X'): could not convert string to float: 'X'  FAILED, KNOWN, expected 'X'
    test 1174 .named: Test
    test 1175 .named2: Epoch 'Test'
    test 1176 .str: 1901
    test 1177 .toStr: 1901
    test 1178 .repr: Test (1901)
    test 1179 .toRepr: Test (1901)
    test 1180 .units: epoch
    test 1181 .name: Test
    test 1182 ._name: Test
    test 1183 .str: 1901
    test 1184 .repr: Test (1901)
    test 1185 delattr: ''

    testing(pygeodesy.units, 23.03.18)

    test 1186 Bearing: 1.0
    test 1187 Bearing_: 0.01745

    test 1188 Lam_: 6.30
    test 1189 Phi_: 6.30

    test 1190 FIx: 1.0  FAILED, KNOWN, expected 1
    test 1191 FIx: 1.5

    test 1192 Dash: -
    test 1193 Dash: -

    test 1194 Dash: '-'
    test 1195 Dash: Dash ('-')

    test 1196 Join_d: c-a-l-l
    test 1197 Join_d: c-a-l-l

    test 1198 Join_d: 'c-a-l-l'
    test 1199 Join_d: Join_d ('c-a-l-l')

    51 of 1199 testUnits.py tests (4.3%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 43.508 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.degDMS from .dms by testUps.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUps.py line 11
# lazily imported pygeodesy.RangeError from .errors by testUps.py line 11
# lazily imported pygeodesy.strs from .streprs by testUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUps.py line 11
# lazily imported pygeodesy.Ups from .ups by testUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUps.py line 195

    testing testUps.py 23.03.27 (module pygeodesy.ups 23.03.19) isLazy=3
    test 1 Ups: 00 N 448251.0 5411932.0001
    test 2 Ups: 00 N 448252 5411933
    test 3 Ups: 00 N 448251.795 5411932.678
    test 4 Ups: 00Z N 448251.8 5411932.7 n/a n/a
    test 5 Ups2: [Z:00, H:N, E:448252, N:5411933]
    test 6 UtmUps.toLatLon: 43.610051°N, 004.46308°E
    test 7 UtmUps.toLatLon: 43°36′36.18″N, 004°27′47.09″E
    test 8 UtmUps.toMgrs: 60T UP 60176 38249
    test 9 toUps: lat ('43.684097°'): inside UTM range [-79.5, 83.5]
    test 10 UtmUps.toUtm: 60 N 360177 4838249
    test 11 toUpsID1: 00 N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 12 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 13 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 14 toUpsID3: 00 S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 15 Ups.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 16 Ups.toLatLonID4: 84.287234°N, 132.247989°W
    test 17 Ups.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 18 Ups.toLatLonID5: 73.0°N, 044.0°E
    test 19 Ups.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 20 Ups.toLatLonID6: 87.287333°S, 132.247861°E
    test 21 latlon: 84.0°N, 084.0°E
    test 22 toUps: 00 N 2663075 1930308
    test 23 toUps: 00 N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 24 toUps(None): (0, 'N', 2663075.299562, 1930307.977716, 'Z', ...)
    test 25 .scale0: 0.994000
    test 26 rescale0: 0.997261
    test 27 NGA-10.2-1: 00 N 2000000.0 2000000.0 +0.0″ 0.994
    test 28 NGA-10.2-2: 00 N 1998062.320046 2111009.610243 -179.0° 0.994076
    test 29 NGA-10.2-3: 00 N 1777930.731071 2000000.0 -90.0° 0.994303
    test 30 NGA-10.2-4: 00 N 1994185.827038 1666906.254073 -1.0° 0.994682
    test 31 NGA-10.2-5: 00 N 2000000.0 1555731.570643 +0.0″ 0.995212
    test 32 NGA-10.2-6: 00 N 2009694.068153 1444627.207468 +1.0° 0.995895
    test 33 NGA-10.2-7: 00 N 2666626.157825 1988363.997132 +89.0° 0.996730
    test 34 NGA-10.2-8: 46 N 459200.256323 9217519.441609 -2.97767886° 0.997718
    test 35 NGA-10.2-9: 46 N 468930.934996 9105366.008486 -1.98055172° 0.998860
    test 36 NGA-10.2-10: 60 N 534921.971582 8993806.415149 +1.97539632° 1.000156
    test 37 NGA-10.2-11: 01 N 441867.784867 8883084.955948 -2.95450468° 1.001608
    test 38 NGA-10.2-12: 31 N 243900.35203 4432069.056899 -1.92940969° 1.0004075
    test 39 NGA-10.2-13: 01 N 277707.830749 331796.291679 -6.28291137′ 1.00021172
    test 40 NGA-10.2-14: 16 N 166223.907623 221366.16603 -6.28776606′ 1.00097936
    test 41 NGA-10.2-15: 30 N 722561.736479 110597.972524 +2.09515682′ 1.00021322
    test 42 NGA-10.2-16: 31 N 166021.443081 0.0 +0.0″ 1.00098106
    test 43 NGA-10.2-17: 31 S 277438.263521 9889402.027476 +2.09515682′ 1.00021322
    test 44 NGA-10.2-18: 46 S 166223.907623 9778633.83397 +6.28776606′ 1.00097936
    test 45 NGA-10.2-19: 60 S 722292.169251 9668203.708321 -6.28291137′ 1.00021172
    test 46 NGA-10.2-20: 01 S 166831.065275 9557263.747314 +12.56782777′ 1.00097428
    test 47 NGA-10.3-1: -64.9164123332 -135.0
    test 48 NGA-10.3-2: -70.0552944014 -153.4349488229
    test 49 NGA-10.3-3: -72.1263610163 180.0  FAILED, KNOWN, expected -72.1263610163 -180.0
    test 50 NGA-10.3-4: -70.0552944014 153.4349488229
    test 51 NGA-10.3-5: -64.9164123332 135.0
    test 52 NGA-10.3-6: -70.0552944014 -116.5650511771
    test 53 NGA-10.3-7: -77.3120791908 -135.0
    test 54 NGA-10.3-8: -81.0106632645 180.0
    test 55 NGA-10.3-9: -77.3120791908 135.0
    test 56 NGA-10.3-10: -70.0552944014 116.5650511771
    test 57 NGA-10.3-11: -72.1263610163 -90.0
    test 58 NGA-10.3-12: -81.0106632645 -90.0
    test 59 NGA-10.3-13: -90.0 0.0
    test 60 NGA-10.3-14: -81.0106632645 90.0
    test 61 NGA-10.3-15: -72.1263610163 90.0
    test 62 NGA-10.3-16: -70.0552944014 -63.4349488229
    test 63 NGA-10.3-17: -77.3120791908 -45.0
    test 64 NGA-10.3-18: -81.0106632645 0.0
    test 65 NGA-10.3-19: -77.3120791908 45.0
    test 66 NGA-10.3-20: -70.0552944014 63.4349488229
    test 67 NGA-10.3-21: -64.9164123332 -45.0
    test 68 NGA-10.3-22: -70.0552944014 -26.5650511771
    test 69 NGA-10.3-23: -72.1263610163 0.0
    test 70 NGA-10.3-24: -70.0552944014 26.5650511771
    test 71 NGA-10.3-25: -64.9164123332 45.0
    test 72 toUps: 00 N 2000000 1288738
    test 73 toUtm: 02 N 611555 10703765
    test 74 toUtm: [Z:00Z, H:N, E:2000000, N:2000000]

    2 of 74 testUps.py tests (2.7%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 10.770 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUtily.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testUtily.py line 11
# lazily imported pygeodesy.INF from .constants by testUtily.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testUtily.py line 11
# lazily imported pygeodesy.NINF from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.PI3_2 from .constants by testUtily.py line 11
# lazily imported pygeodesy.acre2ha from .utily by testUtily.py line 11
# lazily imported pygeodesy.acre2m2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.atan2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.chain2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.cot_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.cotd_ from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fathom2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.ft2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.furlong2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades400 from .utily by testUtily.py line 11
# lazily imported pygeodesy.degrees2grades from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.grades2radians from .utily by testUtily.py line 11
# lazily imported pygeodesy.isPoints2 from .iters by testUtily.py line 11
# lazily imported pygeodesy.map1 from .basics by testUtily.py line 11
# lazily imported pygeodesy.m2chain from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2degrees from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2fathom from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2ft from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2furlong from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2toise from .utily by testUtily.py line 11
# lazily imported pygeodesy.m2yard from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.radiansPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testUtily.py line 11
# lazily imported pygeodesy.sincostan3 from .utily by testUtily.py line 11
# lazily imported pygeodesy.tan_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.unroll180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap90 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap180 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrap360 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.wrapPI_2 from .utily by testUtily.py line 11
# lazily imported pygeodesy.toise2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.yard2m from .utily by testUtily.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtily.py line 11

    testing testUtily.py 23.03.27 (module pygeodesy.utily 22.10.23) isLazy=3

    test 1 degrees90(PI_2): 90.0
    test 2 degrees90(PI): -180.0
    test 3 degrees90(PI2): 0.0
    test 4 degrees90(-PI_2): -90.0
    test 5 degrees90(-PI): -180.0
    test 6 degrees90(-PI2): 0.0

    test 7 degrees180(PI_2): 90.0
    test 8 degrees180(PI): 180.0
    test 9 degrees180(PI2): 0.0
    test 10 degrees180(-PI_2): -90.0
    test 11 degrees180(-PI): -180.0
    test 12 degrees180(-PI2): 0.0

    test 13 degrees360(PI_2): 90.0
    test 14 degrees360(PI): 180.0
    test 15 degrees360(PI2): 0.0
    test 16 degrees360(-PI_2): 270.0
    test 17 degrees360(-PI): 180.0
    test 18 degrees360(-PI2): 0.0

    test 19 degrees2grades(90): 100.0
    test 20 degrees2grades(180): 200.0
    test 21 degrees2grades(360): 400.0
    test 22 degrees2grades(-90): -100.0
    test 23 degrees2grades(-180): -200.0
    test 24 degrees2grades(-360): -400.0

    test 25 grades400(PI_2): 100.0
    test 26 grades400(PI): 200.0
    test 27 grades400(PI2): 0.0
    test 28 grades400(-PI_2): 300.0
    test 29 grades400(-PI): 200.0
    test 30 grades400(-PI2): 0.0

    test 31 grades2degrees(100): 90.0
    test 32 grades2degrees(200): 180.0
    test 33 grades2degrees(400): 360.0
    test 34 grades2degrees(-100): -90.0
    test 35 grades2degrees(-200): -180.0
    test 36 grades2degrees(-400): -360.0

    test 37 grades2radians(100): 1.5707963267948966
    test 38 grades2radians(200): 3.141592653589793
    test 39 grades2radians(400): 6.283185307179586
    test 40 grades2radians(-100): -1.5707963267948966
    test 41 grades2radians(-200): -3.141592653589793
    test 42 grades2radians(-400): -6.283185307179586

    test 43 radiansPI_2(90): 1.5707963267948966
    test 44 radiansPI_2(180): -3.141592653589793
    test 45 radiansPI_2(360): 0.0
    test 46 radiansPI_2(-90): -1.5707963267948966
    test 47 radiansPI_2(-180): -3.141592653589793
    test 48 radiansPI_2(-360): 0.0

    test 49 radiansPI(90): 1.5707963267948966
    test 50 radiansPI(180): 3.141592653589793
    test 51 radiansPI(360): 0.0
    test 52 radiansPI(-90): -1.5707963267948966
    test 53 radiansPI(-180): -3.141592653589793
    test 54 radiansPI(-360): 0.0

    test 55 radiansPI2(90): 1.5707963267948966
    test 56 radiansPI2(180): 3.141592653589793
    test 57 radiansPI2(360): 0.0
    test 58 radiansPI2(-90): 4.71238898038469
    test 59 radiansPI2(-180): 3.141592653589793
    test 60 radiansPI2(-360): 0.0

    test 61 wrap90(90): 90.0
    test 62 wrap90(180): -180.0
    test 63 wrap90(360): 0.0
    test 64 wrap90(-90): -90.0
    test 65 wrap90(-180): -180.0
    test 66 wrap90(-360): 0.0

    test 67 wrap180(90): 90.0
    test 68 wrap180(180): 180.0
    test 69 wrap180(360): 0.0
    test 70 wrap180(-90): -90.0
    test 71 wrap180(-180): -180.0
    test 72 wrap180(-360): 0.0

    test 73 wrap360(90): 90.0
    test 74 wrap360(180): 180.0
    test 75 wrap360(360): 0.0
    test 76 wrap360(-90): 270.0
    test 77 wrap360(-180): 180.0
    test 78 wrap360(-360): 0.0

    test 79 wrapPI_2(PI_2): 1.5707963267948966
    test 80 wrapPI_2(PI): -3.141592653589793
    test 81 wrapPI_2(PI2): 0.0
    test 82 wrapPI_2(-PI_2): -1.5707963267948966
    test 83 wrapPI_2(-PI): -3.141592653589793
    test 84 wrapPI_2(-PI2): 0.0

    test 85 wrapPI(PI_2): 1.5707963267948966
    test 86 wrapPI(PI): 3.141592653589793
    test 87 wrapPI(PI2): 0.0
    test 88 wrapPI(-PI_2): -1.5707963267948966
    test 89 wrapPI(-PI): -3.141592653589793
    test 90 wrapPI(-PI2): 0.0

    test 91 wrapPI2(PI_2): 1.5707963267948966
    test 92 wrapPI2(PI): 3.141592653589793
    test 93 wrapPI2(PI2): 0.0
    test 94 wrapPI2(-PI_2): 4.71238898038469
    test 95 wrapPI2(-PI): 3.141592653589793
    test 96 wrapPI2(-PI2): 0.0

    test 97 unroll180: -160.0, -250.0
    test 98 unroll180: 200.0, 110.0

    test 99 unroll180: -160.0, -250.0
    test 100 unroll180: 920.0, 830.0

    test 101 unroll180: -160.0, -270.0
    test 102 unroll180: 200.0, 90.0

    test 103 unroll180: -160.0, -990.0
    test 104 unroll180: 920.0, 90.0

    test 105 cot_ : -0.345499391106

    test 106 cotd_: -0.345499391106
    test 107 sincos2: 3.885780586188048e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 108 sincos2d: 9.992007221626409e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 109 atand: 0  FAILED, KNOWN, expected 2.220446049250313e-16
    test 110 sincosd : 8.881784197001252e-16  FAILED, KNOWN, expected 1.7763568394002505e-15
    test 111 sincos*d: 1.6653345369377348e-16  FAILED, KNOWN, expected 1.7763568394002505e-15

    test 112 iFt2m: 187441
    test 113 iFt2m: 757050
    test 114 sFt2m: 187441
    test 115 sFt2m: 757050

    test 116 m2iFt: 614963.91
    test 117 m2iFt: 2483759.84
    test 118 m2sFt: 614962.68
    test 119 m2sFt: 2483754.88

    test 120 acre2ha: 0.404686
    test 121 acre2m2: 4046.856422
    test 122 chain2m: 20.116800
    test 123 fathom2m: 1.828800
    test 124 furlong2m: 201.168000
    test 125 toise2m: 1.949044
    test 126 yard2m: 0.914400
    test 127 m2chain: 0.049710
    test 128 m2fathom: 0.546807
    test 129 m2furlong: 0.004971
    test 130 m2toise: 0.513072
    test 131 m2yard: 1.093613

    test 132 degrees2m: 10007557.1761
    test 133 degrees2m: 8666798.7443
    test 134 m2degrees: 90.0

    test 135 degrees2m: 20015114.3522
    test 136 degrees2m: 19987684.3336
    test 137 m2degrees: 180.0

    test 138 m2degrees2m(45, lat=0): 45.00
    test 139 m2degrees2m(45, lat=7): 45.00
    test 140 m2degrees2m(45, lat=14): 45.00
    test 141 m2degrees2m(45, lat=21): 45.00
    test 142 m2degrees2m(45, lat=28): 45.00
    test 143 m2degrees2m(45, lat=35): 45.00
    test 144 m2degrees2m(45, lat=42): 45.00
    test 145 m2degrees2m(45, lat=49): 45.00
    test 146 m2degrees2m(45, lat=56): 45.00
    test 147 m2degrees2m(45, lat=63): 45.00
    test 148 m2degrees2m(45, lat=70): 45.00
    test 149 m2degrees2m(45, lat=77): 45.00
    test 150 m2degrees2m(45, lat=84): 45.00

    test 151 isPoints2: False

    test 152 tan_2_semi: PI[1] edge (3.141592): semi-circular
    test 153 sincostan3(+0.0000): (0.0, 1.0, 0.0)
    test 154 sincostan3(-0.0000): (0.0, 1.0, 0.0)
    test 155 sincostan3(+1.5708): (1.0, 0.0, inf)
    test 156 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 157 sincostan3(+3.1416): (0.0, -1.0, -0.0)
    test 158 sincostan3(-3.1416): (0.0, -1.0, -0.0)  FAILED, KNOWN, expected (-0.0, -1.0, 0.0)
    test 159 sincostan3(+4.7124): (-1.0, 0.0, -inf)  FAILED, KNOWN, expected (-1.0, -0.0, inf)
    test 160 sincostan3(-1.5708): (-1.0, 0.0, -inf)
    test 161 sincostan3(+6.2832): (0.0, 1.0, 0.0)  FAILED, KNOWN, expected (-0.0, 1.0, -0.0)
    test 162 sincostan3(-6.2832): (0.0, 1.0, 0.0)

    8 of 162 testUtily.py tests (4.9%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 10.295 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUtm.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testUtm.py line 11
# lazily imported pygeodesy.EPS from .constants by testUtm.py line 11
# lazily imported pygeodesy.F_DEG from .dms by testUtm.py line 11
# lazily imported pygeodesy.F_DMS from .dms by testUtm.py line 11
# lazily imported pygeodesy.fstr from .streprs by testUtm.py line 11
# lazily imported pygeodesy.parseUTM5 from .utm by testUtm.py line 11
# lazily imported pygeodesy.toUtm8 from .utm by testUtm.py line 11
# lazily imported pygeodesy.Utm from .utm by testUtm.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtm.py line 178

    testing testUtm.py 22.07.25 (module pygeodesy.utm 23.03.19) isLazy=3
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31U, H:N, E:448252, N:5411933, C:-31.87873265′, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 14 toEtm: 13 S 622698 8516965
    test 15 toMgrs1: 13L FF 22697 16965
    test 16 toMgrs2: 31U DQ 48251 11932
    test 17 toUtm14: 14 S -27436 8512042
    test 18 Utm8: 18 N 516620 4574500
    test 19 Utm8.toLatLon: 41.321801°N, 074.801413°W
    test 20 Utm8.toLatLon: 41.321801N, 074.801413W
    test 21 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 22 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 23 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 24 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 25 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 26 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 27 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 28 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 29 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 30 toUtm(80.5434°S, 170.654°W): lat ('-80.5434°'): outside UTM range [-80, 84)
    test 31 toUtm(90.0°N, 177.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 32 toUtm(90.0°S, 177.0°W): lat ('-90.0°'): outside UTM range [-80, 84)
    test 33 toUtm(90.0°N, 003.0°E): lat ('90.0°'): outside UTM range [-80, 84)
    test 34 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 35 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 36 toUtm(89.3454°S, 048.9306°W): lat ('-89.3454°'): outside UTM range [-80, 84)
    test 37 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 38 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 39 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 40 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 41 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 42 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 43 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 44 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 45 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 46 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 47 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 48 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    test 49 toUtm(50.77535°N, 006.08389°E): 32U N 294409 5628898
    test 50 toUtm(40.71435°N, 074.00597°W): 18T N 583960 4507523
    test 51 toUtm(41.28646°S, 174.77624°E): 60G S 313784 5427057
    test 52 toUtm(33.92487°S, 018.42406°E): 34H S 261878 6243186
    test 53 toUtm(32.89018°S, 068.84405°W): 19H S 514586 6360877
    test 54 toUtm(64.83778°N, 147.71639°W): 06W N 466013 7190568
    test 55 toUtm(56.7968°N, 005.00601°W): 30V N 377486 6296562
    test 56 toUtm(84.0°N, 005.00601°W): lat ('84.0°'): outside UTM range [-80, 84)
    test 57 toUtm('Mt Assiniboine'): [Z:11U, H:N, E:594934, N:5636174]
    test 58 Utm9: 55 S 321441 5810117
    test 59 Utm9.toLatLon(eps=2.2204e-12): -37.83891644, 144.97077387
    test 60 Utm9.toLatLon(eps=2.2204e-13): -37.83891644, 144.97077387
    test 61 Utm9.toLatLon(eps=2.2204e-14): -37.83891644, 144.97077387
    test 62 Utm9.toLatLon(eps=2.2204e-15): -37.83891644, 144.97077387
    test 63 Utm9.toLatLon(eps=2.2204e-16): -37.83891644, 144.97077387
    test 64 Utm9.toLatLon(eps=2.2204e-17): -37.83891644, 144.97077387
    test 65 Utm9.toLatLon(eps=2.2204e-18): -37.83891644, 144.97077387
    test 66 Utm9.toLatLon(eps=2.2204e-19): -37.83891644, 144.97077387
    test 67 Utm9.toLatLon(eps=2.2204e-20): -37.83891644, 144.97077387
    test 68 Utm10: 31 N 400000 5000000
    test 69 Utm10.toLatLon(eps=2.2204e-12): 45.14639288, 1.72796704
    test 70 Utm10.toLatLon(eps=2.2204e-13): 45.14639288, 1.72796704
    test 71 Utm10.toLatLon(eps=2.2204e-14): 45.14639288, 1.72796704
    test 72 Utm10.toLatLon(eps=2.2204e-15): 45.14639288, 1.72796704
    test 73 Utm10.toLatLon(eps=2.2204e-16): 45.14639288, 1.72796704
    test 74 Utm10.toLatLon(eps=2.2204e-17): 45.14639288, 1.72796704
    test 75 Utm10.toLatLon(eps=2.2204e-18): 45.14639288, 1.72796704
    test 76 Utm10.toLatLon(eps=2.2204e-19): 45.14639288, 1.72796704
    test 77 Utm10.toLatLon(eps=2.2204e-20): 45.14639288, 1.72796704
    test 78 Utm111: 37 N 1399093 8314607
    test 79 Utm111.toLatLon(eps=2.2204e-12): 70.54298527, 40.28205459
    test 80 Utm111.toLatLon(eps=2.2204e-13): 70.54298527, 40.28205459
    test 81 Utm111.toLatLon(eps=2.2204e-14): 70.54298527, 40.28205459
    test 82 Utm111.toLatLon(eps=2.2204e-15): 70.54298527, 40.28205459
    test 83 Utm111.toLatLon(eps=2.2204e-16): 70.54298527, 40.28205459
    test 84 Utm111.toLatLon(eps=2.2204e-17): 70.54298527, 40.28205459
    test 85 Utm111.toLatLon(eps=2.2204e-18): 70.54298527, 40.28205459
    test 86 Utm111.toLatLon(eps=2.2204e-19): 70.54298527, 40.28205459
    test 87 Utm111.toLatLon(eps=2.2204e-20): 70.54298527, 40.28205459
    test 88 CV#86: [Z:01, H:N, E:100000, N:0, C:n/a, S:n/a]
    test 89 CV#86: 00.0°N, 179.407673°E
    test 90 CV#86: [Z:60, H:N, E:767993, N:0, C:+0.0″, S:1.000489]  FAILED, KNOWN, expected [Z:01, H:N, E:100000, N:0, ...]
    test 91 #63: 32 N 280000 5653000
    test 92 toMgrs: 32U KB 80000 53000
    test 93 toLatLon: (50.986484, 5.865326, Datum(name='WGS84', ellipsoid=Ellipsoids.WGS84, transform=Transforms.WGS84), -2.436605, 1.000194)
    test 94 band: U
    test 95 band: band ('?'): not 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W' or 'X'
    test 96 datum: Datum(name='_Sphere', ellipsoid=Ellipsoids.Sphere, transform=Transforms.Identity)  FAILED, KNOWN, expected same
    test 97 repr: [Z:32U, H:N, E:280000, N:5653000]
    test 98 E.N.: (280000.0, 5653000.0)

    2 of 98 testUtm.py tests (2.0%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 12.597 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUtmTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtm8 from .utm by testUtmTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmTMcoords.py line 17

    testing testUtmTMcoords.py 23.03.27 (module pygeodesy.utm 23.03.19) isLazy=3
    test 1 line 1 toUtm8.easting: 1548706.791619
    test 2 line 1 toUtm8.northing: 8451449.198772
    test 3 line 1 toUtm8.gamma: 43.922790
    test 4 line 1 toUtm8.scale: 1.029060
    test 5 line 1 toUtm8.lat: 70.579277
    test 6 line 1 toUtm8.lon: 45.599420
    test 7 line 2 toUtm8.easting: 2624150.740929
    test 8 line 2 toUtm8.northing: 1204434.041605
    test 9 line 2 toUtm8.gamma: 4.292619
    test 10 line 2 toUtm8.scale: 1.086051
    test 11 line 2 toUtm8.lat: 10.018894
    test 12 line 2 toUtm8.lon: 23.313324
    test 13 line 3 toUtm8.easting: 9855841.232935
    test 14 line 3 toUtm8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtm8.gamma: 53.348315
    test 16 line 3 toUtm8.scale: 2.445098
    test 17 line 3 toUtm8.lat: 19.479896
    test 18 line 3 toUtm8.lon: 75.662049
    test 19 line 4 toUtm8.easting: 3206390.691996
    test 20 line 4 toUtm8.northing: 2650745.400406
    test 21 line 4 toUtm8.gamma: 11.666950
    test 22 line 4 toUtm8.scale: 1.129359
    test 23 line 4 toUtm8.lat: 21.072465
    test 24 line 4 toUtm8.lon: 29.828684
    test 25 line 5 toUtm8.easting: 4328154.083501
    test 26 line 5 toUtm8.northing: 749647.623690
    test 27 line 5 toUtm8.gamma: 4.024317
    test 28 line 5 toUtm8.scale: 1.240829
    test 29 line 5 toUtm8.lat: 5.458957
    test 30 line 5 toUtm8.lon: 36.385237
    test 31 line 6 toUtm8.easting: 847598.266514
    test 32 line 6 toUtm8.northing: 7947180.962440
    test 33 line 6 toUtm8.gamma: 21.639091
    test 34 line 6 toUtm8.scale: 1.008399
    test 35 line 6 toUtm8.lat: 70.175454
    test 36 line 6 toUtm8.lon: 22.865350
    test 37 line 7 toUtm8.easting: 2727657.337974
    test 38 line 7 toUtm8.northing: 8283916.696410
    test 39 line 7 toUtm8.gamma: 55.690909
    test 40 line 7 toUtm8.scale: 1.091942
    test 41 line 7 toUtm8.lat: 61.965605
    test 42 line 7 toUtm8.lon: 58.931371
    test 43 line 8 toUtm8.easting: 2331001.751890
    test 44 line 8 toUtm8.northing: 1313608.224751
    test 45 line 8 toUtm8.gamma: 4.214690
    test 46 line 8 toUtm8.scale: 1.067599
    test 47 line 8 toUtm8.lat: 11.116050
    test 48 line 8 toUtm8.lon: 20.901069
    test 49 line 9 toUtm8.easting: 6035557.239480
    test 50 line 9 toUtm8.northing: 5791770.791879
    test 51 line 9 toUtm8.gamma: 43.698170
    test 52 line 9 toUtm8.scale: 1.481260
    test 53 line 9 toUtm8.lat: 32.210543
    test 54 line 9 toUtm8.lon: 60.705849
    test 55 line 10 toUtm8.easting: 1064553.125852
    test 56 line 10 toUtm8.northing: 9417273.737208
    test 57 line 10 toUtm8.gamma: 61.100380
    test 58 line 10 toUtm8.scale: 1.013475
    test 59 line 10 toUtm8.lat: 79.187451
    test 60 line 10 toUtm8.lon: 61.532382
    test 61 line 11 toUtm8.easting: 1400137.116164
    test 62 line 11 toUtm8.northing: 9616907.017686
    test 63 line 11 toUtm8.gamma: 74.527087
    test 64 line 11 toUtm8.scale: 1.023640
    test 65 line 11 toUtm8.lat: 77.103759
    test 66 line 11 toUtm8.lon: 74.899105

    test skipped (1): line 12 toUtm8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtm8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtm8.easting: 3335099.866623
    test 68 line 14 toUtm8.northing: 6740519.084015
    test 69 line 14 toUtm8.gamma: 40.611821
    test 70 line 14 toUtm8.scale: 1.139021
    test 71 line 14 toUtm8.lat: 49.990485
    test 72 line 14 toUtm8.lon: 48.203179

    test skipped (3): line 15 toUtm8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtm8.easting: 5387578.735298
    test 74 line 16 toUtm8.northing: 4111216.907168
    test 75 line 16 toUtm8.gamma: 27.574337
    test 76 line 16 toUtm8.scale: 1.379357
    test 77 line 16 toUtm8.lat: 25.936824
    test 78 line 16 toUtm8.lon: 49.913598
    test 79 line 17 toUtm8.easting: 2622214.380233
    test 80 line 17 toUtm8.northing: 8678923.984567
    test 81 line 17 toUtm8.gamma: 61.697275
    test 82 line 17 toUtm8.scale: 1.084810
    test 83 line 17 toUtm8.lat: 64.402196
    test 84 line 17 toUtm8.lon: 64.091395

    test skipped (4): line 18 toUtm8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtm8.easting: 738062.047779
    test 86 line 19 toUtm8.northing: 3031007.074116
    test 87 line 19 toUtm8.gamma: 3.416802
    test 88 line 19 toUtm8.scale: 1.006332
    test 89 line 19 toUtm8.lat: 27.203895
    test 90 line 19 toUtm8.lon: 7.440229
    test 91 line 20 toUtm8.easting: 1944413.834565
    test 92 line 20 toUtm8.northing: 9613299.224493
    test 93 line 20 toUtm8.gamma: 78.462831
    test 94 line 20 toUtm8.scale: 1.046134
    test 95 line 20 toUtm8.lat: 72.509000
    test 96 line 20 toUtm8.lon: 78.982283
    test 97 line 21 toUtm8.easting: 2114521.418406
    test 98 line 21 toUtm8.northing: 4954077.440098
    test 99 line 21 toUtm8.gamma: 17.571878
    test 100 line 21 toUtm8.scale: 1.055093
    test 101 line 21 toUtm8.lat: 41.824954
    test 102 line 21 toUtm8.lon: 25.392744
    test 103 line 22 toUtm8.easting: 620365.905090
    test 104 line 22 toUtm8.northing: 4755542.026562
    test 105 line 22 toUtm8.gamma: 5.152022
    test 106 line 22 toUtm8.scale: 1.004338
    test 107 line 22 toUtm8.lat: 42.701376
    test 108 line 22 toUtm8.lon: 7.572738
    test 109 line 23 toUtm8.easting: 263004.770989
    test 110 line 23 toUtm8.northing: 4493669.762451
    test 111 line 23 toUtm8.gamma: 2.020523
    test 112 line 23 toUtm8.scale: 1.000452
    test 113 line 23 toUtm8.lat: 40.552052
    test 114 line 23 toUtm8.lon: 3.106056
    test 115 line 24 toUtm8.easting: 3217221.739462
    test 116 line 24 toUtm8.northing: 437776.119161
    test 117 line 24 toUtm8.gamma: 1.848169
    test 118 line 24 toUtm8.scale: 1.130558
    test 119 line 24 toUtm8.lat: 3.501242
    test 120 line 24 toUtm8.lon: 27.806507

    test skipped (5): line 25 toUtm8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtm8.easting: 967777.158554
    test 122 line 26 toUtm8.northing: 6615684.266592
    test 123 line 26 toUtm8.gamma: 14.410044
    test 124 line 26 toUtm8.scale: 1.011100
    test 125 line 26 toUtm8.lat: 58.582623
    test 126 line 26 toUtm8.lon: 16.755558
    test 127 line 27 toUtm8.easting: 7558840.728461
    test 128 line 27 toUtm8.northing: 4144728.130764
    test 129 line 27 toUtm8.gamma: 32.557264
    test 130 line 27 toUtm8.scale: 1.791490
    test 131 line 27 toUtm8.lat: 19.793004
    test 132 line 27 toUtm8.lon: 61.746763
    test 133 line 28 toUtm8.easting: 1056008.314161
    test 134 line 28 toUtm8.northing: 9290799.692669
    test 135 line 28 toUtm8.gamma: 55.843278
    test 136 line 28 toUtm8.scale: 1.013253
    test 137 line 28 toUtm8.lat: 78.666776
    test 138 line 28 toUtm8.lon: 56.365355
    test 139 line 29 toUtm8.easting: 1943965.134687
    test 140 line 29 toUtm8.northing: 1389972.228690
    test 141 line 29 toUtm8.gamma: 3.774869
    test 142 line 29 toUtm8.scale: 1.046724
    test 143 line 29 toUtm8.lat: 11.998788
    test 144 line 29 toUtm8.lon: 17.597873
    test 145 line 30 toUtm8.easting: 5803077.072902
    test 146 line 30 toUtm8.northing: 5649957.943659
    test 147 line 30 toUtm8.gamma: 41.717943
    test 148 line 30 toUtm8.scale: 1.442572
    test 149 line 30 toUtm8.lat: 32.540378
    test 150 line 30 toUtm8.lon: 58.764613
    test 151 line 31 toUtm8.easting: 2928716.986009
    test 152 line 31 toUtm8.northing: 5731835.058317
    test 153 line 31 toUtm8.gamma: 28.538550
    test 154 line 31 toUtm8.scale: 1.106780
    test 155 line 31 toUtm8.lat: 45.160356
    test 156 line 31 toUtm8.lon: 37.465285
    test 157 line 32 toUtm8.easting: 326141.975756
    test 158 line 32 toUtm8.northing: 8881325.164543
    test 159 line 32 toUtm8.gamma: 16.111415
    test 160 line 32 toUtm8.scale: 1.000900
    test 161 line 32 toUtm8.lat: 79.584190
    test 162 line 32 toUtm8.lon: 16.367006
    test 163 line 33 toUtm8.easting: 3933015.267450
    test 164 line 33 toUtm8.northing: 7932373.909512
    test 165 line 33 toUtm8.gamma: 58.577424
    test 166 line 33 toUtm8.scale: 1.194811
    test 167 line 33 toUtm8.lat: 52.470664
    test 168 line 33 toUtm8.lon: 64.125580
    test 169 line 34 toUtm8.easting: 8598926.983213
    test 170 line 34 toUtm8.northing: 6214135.167503
    test 171 line 34 toUtm8.gamma: 52.612878
    test 172 line 34 toUtm8.scale: 2.051367
    test 173 line 34 toUtm8.lat: 23.702673
    test 174 line 34 toUtm8.lon: 72.630363
    test 175 line 35 toUtm8.easting: 6620553.333772
    test 176 line 35 toUtm8.northing: 6540527.122948
    test 177 line 35 toUtm8.gamma: 52.350140
    test 178 line 35 toUtm8.scale: 1.586614
    test 179 line 35 toUtm8.lat: 32.603520
    test 180 line 35 toUtm8.lon: 67.280123
    test 181 line 36 toUtm8.easting: 1515136.758292
    test 182 line 36 toUtm8.northing: 3858996.087537
    test 183 line 36 toUtm8.gamma: 9.225127
    test 184 line 36 toUtm8.scale: 1.028029
    test 185 line 36 toUtm8.lat: 33.776224
    test 186 line 36 toUtm8.lon: 16.280993
    test 187 line 37 toUtm8.easting: 479854.373445
    test 188 line 37 toUtm8.northing: 8980501.389896
    test 189 line 37 toUtm8.gamma: 25.021222
    test 190 line 37 toUtm8.scale: 1.002415
    test 191 line 37 toUtm8.lat: 79.932747
    test 192 line 37 toUtm8.lon: 25.363622
    test 193 line 38 toUtm8.easting: 5243446.564940
    test 194 line 38 toUtm8.northing: 140657.213960
    test 195 line 38 toUtm8.gamma: 0.862817
    test 196 line 38 toUtm8.scale: 1.360358
    test 197 line 38 toUtm8.lat: 0.935056
    test 198 line 38 toUtm8.lon: 42.538824

    test skipped (6): line 39 toUtm8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtm8.easting: 1202993.459158
    test 200 line 40 toUtm8.northing: 5557316.053599
    test 201 line 40 toUtm8.gamma: 12.579061
    test 202 line 40 toUtm8.scale: 1.017426
    test 203 line 40 toUtm8.lat: 48.979057
    test 204 line 40 toUtm8.lon: 16.474542
    test 205 line 41 toUtm8.easting: 1729088.710196
    test 206 line 41 toUtm8.northing: 7770874.289954
    test 207 line 41 toUtm8.gamma: 36.021783
    test 208 line 41 toUtm8.scale: 1.036397
    test 209 line 41 toUtm8.lat: 65.036016
    test 210 line 41 toUtm8.lon: 38.729091
    test 211 line 42 toUtm8.easting: 2437301.517425
    test 212 line 42 toUtm8.northing: 5539327.748318
    test 213 line 42 toUtm8.gamma: 23.461879
    test 214 line 42 toUtm8.scale: 1.073459
    test 215 line 42 toUtm8.lat: 45.510091
    test 216 line 42 toUtm8.lon: 31.303729
    test 217 line 43 toUtm8.easting: 3647186.135066
    test 218 line 43 toUtm8.northing: 2086412.330983
    test 219 line 43 toUtm8.gamma: 10.023991
    test 220 line 43 toUtm8.scale: 1.168707
    test 221 line 43 toUtm8.lat: 16.058010
    test 222 line 43 toUtm8.lon: 32.520026
    test 223 line 44 toUtm8.easting: 1818497.243556
    test 224 line 44 toUtm8.northing: 4275471.745057
    test 225 line 44 toUtm8.gamma: 12.499656
    test 226 line 44 toUtm8.scale: 1.040604
    test 227 line 44 toUtm8.lat: 36.845200
    test 228 line 44 toUtm8.lon: 20.282283
    test 229 line 45 toUtm8.easting: 3751304.113783
    test 230 line 45 toUtm8.northing: 5130454.001592
    test 231 line 45 toUtm8.gamma: 28.959707
    test 232 line 45 toUtm8.scale: 1.177681
    test 233 line 45 toUtm8.lat: 37.865481
    test 234 line 45 toUtm8.lon: 41.990402
    test 235 line 46 toUtm8.easting: 2616733.138544
    test 236 line 46 toUtm8.northing: 394644.463815
    test 237 line 46 toUtm8.gamma: 1.390425
    test 238 line 46 toUtm8.scale: 1.085595
    test 239 line 46 toUtm8.lat: 3.287272
    test 240 line 46 toUtm8.lon: 22.917604
    test 241 line 47 toUtm8.easting: 1756506.573942
    test 242 line 47 toUtm8.northing: 5570393.986394
    test 243 line 47 toUtm8.gamma: 17.897894
    test 244 line 47 toUtm8.scale: 1.037732
    test 245 line 47 toUtm8.lat: 47.813686
    test 246 line 47 toUtm8.lon: 23.545092
    test 247 line 48 toUtm8.easting: 8752461.894711
    test 248 line 48 toUtm8.northing: 6087728.152284
    test 249 line 48 toUtm8.gamma: 51.628465
    test 250 line 48 toUtm8.scale: 2.095465
    test 251 line 48 toUtm8.lat: 22.836853
    test 252 line 48 toUtm8.lon: 72.604385
    test 253 line 49 toUtm8.easting: 1309272.216432
    test 254 line 49 toUtm8.northing: 59520.028899
    test 255 line 49 toUtm8.gamma: 0.109069
    test 256 line 49 toUtm8.scale: 1.020897
    test 257 line 49 toUtm8.lat: 0.527262
    test 258 line 49 toUtm8.lon: 11.684209
    test 259 line 50 toUtm8.easting: 328652.277129
    test 260 line 50 toUtm8.northing: 2233043.958874
    test 261 line 50 toUtm8.gamma: 1.084863
    test 262 line 50 toUtm8.scale: 1.000935
    test 263 line 50 toUtm8.lat: 20.166742
    test 264 line 50 toUtm8.lon: 3.143948

    test skipped (7): line 51 toUtm8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtm8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtm8.easting: 796987.281104
    test 266 line 53 toUtm8.northing: 7677446.357675
    test 267 line 53 toUtm8.gamma: 18.084472
    test 268 line 53 toUtm8.scale: 1.007381
    test 269 line 53 toUtm8.lat: 68.071020
    test 270 line 53 toUtm8.lon: 19.392823

    test skipped (9): line 54 toUtm8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtm8.easting: 7087225.330906
    test 272 line 55 toUtm8.northing: 8382823.855822
    test 273 line 55 toUtm8.gamma: 72.253756
    test 274 line 55 toUtm8.scale: 1.678070
    test 275 line 55 toUtm8.lat: 35.074753
    test 276 line 55 toUtm8.lon: 79.496003
    test 277 line 56 toUtm8.easting: 5090358.125724
    test 278 line 56 toUtm8.northing: 4318294.133489
    test 279 line 56 toUtm8.gamma: 28.266280
    test 280 line 56 toUtm8.scale: 1.336264
    test 281 line 56 toUtm8.lat: 28.078790
    test 282 line 56 toUtm8.lon: 48.684350

    test skipped (10): line 57 toUtm8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtm8.easting: 3447670.550785
    test 284 line 58 toUtm8.northing: 3680238.888223
    test 285 line 58 toUtm8.gamma: 17.934948
    test 286 line 58 toUtm8.scale: 1.149831
    test 287 line 58 toUtm8.lat: 28.473948
    test 288 line 58 toUtm8.lon: 34.127306
    test 289 line 59 toUtm8.easting: 3396522.906798
    test 290 line 59 toUtm8.northing: 8093659.687593
    test 291 line 59 toUtm8.gamma: 57.747117
    test 292 line 59 toUtm8.scale: 1.144006
    test 293 line 59 toUtm8.lat: 56.629354
    test 294 line 59 toUtm8.lon: 62.196474
    test 295 line 60 toUtm8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtm8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtm8.gamma: 14.210358
    test 298 line 60 toUtm8.scale: 3.048347
    test 299 line 60 toUtm8.lat: 4.747762
    test 300 line 60 toUtm8.lon: 70.932555
    test 301 line 61 toUtm8.easting: 6808805.230950
    test 302 line 61 toUtm8.northing: 8044779.777369
    test 303 line 61 toUtm8.gamma: 68.242008
    test 304 line 61 toUtm8.scale: 1.621464
    test 305 line 61 toUtm8.lat: 35.882113
    test 306 line 61 toUtm8.lon: 76.741849
    test 307 line 62 toUtm8.easting: 2306021.556506
    test 308 line 62 toUtm8.northing: 757191.592866
    test 309 line 62 toUtm8.gamma: 2.385686
    test 310 line 62 toUtm8.scale: 1.066159
    test 311 line 62 toUtm8.lat: 6.420705
    test 312 line 62 toUtm8.lon: 20.416028
    test 313 line 63 toUtm8.easting: 1547406.313862
    test 314 line 63 toUtm8.northing: 6048712.751824
    test 315 line 63 toUtm8.gamma: 18.474372
    test 316 line 63 toUtm8.scale: 1.029123
    test 317 line 63 toUtm8.lat: 52.335248
    test 318 line 63 toUtm8.lon: 22.879294
    test 319 line 64 toUtm8.easting: 2430467.650383
    test 320 line 64 toUtm8.northing: 7557167.613972
    test 321 line 64 toUtm8.gamma: 42.110021
    test 322 line 64 toUtm8.scale: 1.072759
    test 323 line 64 toUtm8.lat: 59.846391
    test 324 line 64 toUtm8.lon: 46.262536
    test 325 line 65 toUtm8.easting: 2334053.905830
    test 326 line 65 toUtm8.northing: 1948076.966582
    test 327 line 65 toUtm8.gamma: 6.353185
    test 328 line 65 toUtm8.scale: 1.067733
    test 329 line 65 toUtm8.lat: 16.461790
    test 330 line 65 toUtm8.lon: 21.433269
    test 331 line 66 toUtm8.easting: 5564175.186737
    test 332 line 66 toUtm8.northing: 1836851.660412
    test 333 line 66 toUtm8.gamma: 11.870682
    test 334 line 66 toUtm8.scale: 1.408265
    test 335 line 66 toUtm8.lat: 11.707905
    test 336 line 66 toUtm8.lon: 45.827075
    test 337 line 67 toUtm8.easting: 6118505.590359
    test 338 line 67 toUtm8.northing: 7631684.552421
    test 339 line 67 toUtm8.gamma: 62.477323
    test 340 line 67 toUtm8.scale: 1.493420
    test 341 line 67 toUtm8.lat: 38.519075
    test 342 line 67 toUtm8.lon: 71.935918

    test skipped (11): line 68 toUtm8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtm8.easting: 36187.342415
    test 344 line 69 toUtm8.northing: 2142565.324802
    test 345 line 69 toUtm8.gamma: 0.114334
    test 346 line 69 toUtm8.scale: 0.999616
    test 347 line 69 toUtm8.lat: 19.376880
    test 348 line 69 toUtm8.lon: 0.344605
    test 349 line 70 toUtm8.easting: 2380328.546851
    test 350 line 70 toUtm8.northing: 8440109.872384
    test 351 line 70 toUtm8.gamma: 55.076067
    test 352 line 70 toUtm8.scale: 1.069658
    test 353 line 70 toUtm8.lat: 65.075805
    test 354 line 70 toUtm8.lon: 57.653438
    test 355 line 71 toUtm8.easting: 582511.608826
    test 356 line 71 toUtm8.northing: 8876047.217071
    test 357 line 71 toUtm8.gamma: 27.133300
    test 358 line 71 toUtm8.scale: 1.003749
    test 359 line 71 toUtm8.lat: 78.691870
    test 360 line 71 toUtm8.lon: 27.591736
    test 361 line 72 toUtm8.easting: 899441.350477
    test 362 line 72 toUtm8.northing: 4582046.430516
    test 363 line 72 toUtm8.gamma: 7.031211
    test 364 line 72 toUtm8.scale: 1.009573
    test 365 line 72 toUtm8.lat: 40.893022
    test 366 line 72 toUtm8.lon: 10.668804

    test skipped (12): line 73 toUtm8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtm8.easting: 6701004.587204
    test 368 line 74 toUtm8.northing: 2954368.258231
    test 369 line 74 toUtm8.gamma: 21.560153
    test 370 line 74 toUtm8.scale: 1.608554
    test 371 line 74 toUtm8.lat: 16.208377
    test 372 line 74 toUtm8.lon: 54.494282
    test 373 line 75 toUtm8.easting: 454986.218897
    test 374 line 75 toUtm8.northing: 4885087.887884
    test 375 line 75 toUtm8.gamma: 3.945648
    test 376 line 75 toUtm8.scale: 1.002147
    test 377 line 75 toUtm8.lat: 43.977936
    test 378 line 75 toUtm8.lon: 5.672541

    test skipped (13): line 76 toUtm8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtm8.easting: 1547627.594741
    test 380 line 77 toUtm8.northing: 6036584.538347
    test 381 line 77 toUtm8.gamma: 18.407629
    test 382 line 77 toUtm8.scale: 1.029132
    test 383 line 77 toUtm8.lat: 52.234165
    test 384 line 77 toUtm8.lon: 22.827655
    test 385 line 78 toUtm8.easting: 5221488.778597
    test 386 line 78 toUtm8.northing: 1762592.044392
    test 387 line 78 toUtm8.gamma: 10.927880
    test 388 line 78 toUtm8.scale: 1.356721
    test 389 line 78 toUtm8.lat: 11.674646
    test 390 line 78 toUtm8.lon: 43.500147
    test 391 line 79 toUtm8.easting: 4880570.297161
    test 392 line 79 toUtm8.northing: 3325433.988867
    test 393 line 79 toUtm8.gamma: 20.469862
    test 394 line 79 toUtm8.scale: 1.308476
    test 395 line 79 toUtm8.lat: 22.492753
    test 396 line 79 toUtm8.lon: 44.179153

    test skipped (14): line 80 toUtm8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtm8.easting: 71519.450458
    test 398 line 81 toUtm8.northing: 3654740.444852
    test 399 line 81 toUtm8.gamma: 0.417448
    test 400 line 81 toUtm8.scale: 0.999663
    test 401 line 81 toUtm8.lat: 33.028802
    test 402 line 81 toUtm8.lon: 0.765843
    test 403 line 82 toUtm8.easting: 4152797.795220
    test 404 line 82 toUtm8.northing: 7823098.502751
    test 405 line 82 toUtm8.gamma: 58.238901
    test 406 line 82 toUtm8.scale: 1.218052
    test 407 line 82 toUtm8.lat: 50.649195
    test 408 line 82 toUtm8.lon: 64.389076
    test 409 line 83 toUtm8.easting: 2926725.707639
    test 410 line 83 toUtm8.northing: 7904918.072844
    test 411 line 83 toUtm8.gamma: 51.592748
    test 412 line 83 toUtm8.scale: 1.106206
    test 413 line 83 toUtm8.lat: 58.820640
    test 414 line 83 toUtm8.lon: 55.841048
    test 415 line 84 toUtm8.easting: 1325509.113869
    test 416 line 84 toUtm8.northing: 9675214.948213
    test 417 line 84 toUtm8.gamma: 76.116213
    test 418 line 84 toUtm8.scale: 1.021136
    test 419 line 84 toUtm8.lat: 77.865762
    test 420 line 84 toUtm8.lon: 76.414618
    test 421 line 85 toUtm8.easting: 3045296.448926
    test 422 line 85 toUtm8.northing: 542153.443280
    test 423 line 85 toUtm8.gamma: 2.185095
    test 424 line 85 toUtm8.scale: 1.116664
    test 425 line 85 toUtm8.lat: 4.389639
    test 426 line 85 toUtm8.lon: 26.458976
    test 427 line 86 toUtm8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtm8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtm8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtm8.scale: 3.267256
    test 431 line 86 toUtm8.lat: 13.924448
    test 432 line 86 toUtm8.lon: 79.017873
    test 433 line 87 toUtm8.easting: 8891099.704936
    test 434 line 87 toUtm8.northing: 162160.142227
    test 435 line 87 toUtm8.gamma: 1.312094
    test 436 line 87 toUtm8.scale: 2.157363
    test 437 line 87 toUtm8.lat: 0.679713
    test 438 line 87 toUtm8.lon: 62.036792
    test 439 line 88 toUtm8.easting: 4784814.214449
    test 440 line 88 toUtm8.northing: 2984497.432580
    test 441 line 88 toUtm8.gamma: 17.946545
    test 442 line 88 toUtm8.scale: 1.296116
    test 443 line 88 toUtm8.lat: 20.478281
    test 444 line 88 toUtm8.lon: 42.678234
    test 445 line 89 toUtm8.easting: 1772074.682154
    test 446 line 89 toUtm8.northing: 9491552.560143
    test 447 line 89 toUtm8.gamma: 73.634830
    test 448 line 89 toUtm8.scale: 1.038202
    test 449 line 89 toUtm8.lat: 73.695703
    test 450 line 89 toUtm8.lon: 74.259097
    test 451 line 90 toUtm8.easting: 1907649.782106
    test 452 line 90 toUtm8.northing: 6994232.429379
    test 453 line 90 toUtm8.gamma: 29.718929
    test 454 line 90 toUtm8.scale: 1.044503
    test 455 line 90 toUtm8.lat: 58.569370
    test 456 line 90 toUtm8.lon: 33.777549
    test 457 line 91 toUtm8.easting: 2084423.818962
    test 458 line 91 toUtm8.northing: 2211816.035619
    test 459 line 91 toUtm8.gamma: 6.556448
    test 460 line 91 toUtm8.scale: 1.053793
    test 461 line 91 toUtm8.lat: 18.933881
    test 462 line 91 toUtm8.lon: 19.492695
    test 463 line 92 toUtm8.easting: 1064373.671729
    test 464 line 92 toUtm8.northing: 7812482.547461
    test 465 line 92 toUtm8.gamma: 24.874124
    test 466 line 92 toUtm8.scale: 1.013490
    test 467 line 92 toUtm8.lat: 68.317934
    test 468 line 92 toUtm8.lon: 26.515687

    test skipped (15): line 93 toUtm8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtm8.easting: 6398096.677297
    test 470 line 94 toUtm8.northing: 4410894.752104
    test 471 line 94 toUtm8.gamma: 32.558023
    test 472 line 94 toUtm8.scale: 1.548004
    test 473 line 94 toUtm8.lat: 24.411298
    test 474 line 94 toUtm8.lon: 56.881823
    test 475 line 95 toUtm8.easting: 3138623.300415
    test 476 line 95 toUtm8.northing: 3082960.600798
    test 477 line 95 toUtm8.gamma: 13.557672
    test 478 line 95 toUtm8.scale: 1.123724
    test 479 line 95 toUtm8.lat: 24.571871
    test 480 line 95 toUtm8.lon: 30.073097
    test 481 line 96 toUtm8.easting: 2748325.794651
    test 482 line 96 toUtm8.northing: 4202811.912668
    test 483 line 96 toUtm8.gamma: 17.578706
    test 484 line 96 toUtm8.scale: 1.094102
    test 485 line 96 toUtm8.lat: 34.202576
    test 486 line 96 toUtm8.lon: 29.383166
    test 487 line 97 toUtm8.easting: 6677830.630367
    test 488 line 97 toUtm8.northing: 5350071.837395
    test 489 line 97 toUtm8.gamma: 41.306641
    test 490 line 97 toUtm8.scale: 1.599774
    test 491 line 97 toUtm8.lat: 27.756285
    test 492 line 97 toUtm8.lon: 61.881905
    test 493 line 98 toUtm8.easting: 5941536.667431
    test 494 line 98 toUtm8.northing: 3293112.175140
    test 495 line 98 toUtm8.gamma: 22.752845
    test 496 line 98 toUtm8.scale: 1.468473
    test 497 line 98 toUtm8.lat: 19.742270
    test 498 line 98 toUtm8.lon: 50.957821
    test 499 line 99 toUtm8.easting: 3152481.792567
    test 500 line 99 toUtm8.northing: 5903048.837978
    test 501 line 99 toUtm8.gamma: 31.494606
    test 502 line 99 toUtm8.scale: 1.124085
    test 503 line 99 toUtm8.lat: 45.453582
    test 504 line 99 toUtm8.lon: 40.659833
    test 505 line 100 toUtm8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtm8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtm8.gamma: 21.965869
    test 508 line 100 toUtm8.scale: 2.700296
    test 509 line 100 toUtm8.lat: 8.322144
    test 510 line 100 toUtm8.lon: 69.488157
    test 511 line 101 toUtm8.easting: 1964010.778021
    test 512 line 101 toUtm8.northing: 5634042.923056
    test 513 line 101 toUtm8.gamma: 20.117800
    test 514 line 101 toUtm8.scale: 1.047344
    test 515 line 101 toUtm8.lat: 47.749831
    test 516 line 101 toUtm8.lon: 26.322002
    test 517 line 102 toUtm8.easting: 2065306.424934
    test 518 line 102 toUtm8.northing: 2135008.468651
    test 519 line 102 toUtm8.gamma: 6.258981
    test 520 line 102 toUtm8.scale: 1.052800
    test 521 line 102 toUtm8.lat: 18.297493
    test 522 line 102 toUtm8.lon: 19.244669
    test 523 line 103 toUtm8.easting: 5127738.132976
    test 524 line 103 toUtm8.northing: 6793804.304411
    test 525 line 103 toUtm8.gamma: 50.557915
    test 526 line 103 toUtm8.scale: 1.339412
    test 527 line 103 toUtm8.lat: 40.834541
    test 528 line 103 toUtm8.lon: 61.650750
    test 529 line 104 toUtm8.easting: 8385525.148166
    test 530 line 104 toUtm8.northing: 6924932.344306
    test 531 line 104 toUtm8.gamma: 59.087561
    test 532 line 104 toUtm8.scale: 1.990364
    test 533 line 104 toUtm8.lat: 26.273247
    test 534 line 104 toUtm8.lon: 74.926694
    test 535 line 105 toUtm8.easting: 2297510.791909
    test 536 line 105 toUtm8.northing: 2805666.962834
    test 537 line 105 toUtm8.gamma: 9.301553
    test 538 line 105 toUtm8.scale: 1.065508
    test 539 line 105 toUtm8.lat: 23.698347
    test 540 line 105 toUtm8.lon: 22.155657

    test skipped (16): line 106 toUtm8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtm8.easting: 317518.455546
    test 542 line 107 toUtm8.northing: 1097517.583745
    test 543 line 107 toUtm8.gamma: 0.499004
    test 544 line 107 toUtm8.scale: 1.000848
    test 545 line 107 toUtm8.lat: 9.916091
    test 546 line 107 toUtm8.lon: 2.895277
    test 547 line 108 toUtm8.easting: 3856035.184888
    test 548 line 108 toUtm8.northing: 9141364.450290
    test 549 line 108 toUtm8.gamma: 75.972763
    test 550 line 108 toUtm8.scale: 1.186786
    test 551 line 108 toUtm8.lat: 56.553876
    test 552 line 108 toUtm8.lon: 78.215077
    test 553 line 109 toUtm8.easting: 1457484.942823
    test 554 line 109 toUtm8.northing: 9385297.101973
    test 555 line 109 toUtm8.gamma: 66.784662
    test 556 line 109 toUtm8.scale: 1.025660
    test 557 line 109 toUtm8.lat: 75.957631
    test 558 line 109 toUtm8.lon: 67.407383
    test 559 line 110 toUtm8.easting: 1304934.901841
    test 560 line 110 toUtm8.northing: 3604655.155715
    test 561 line 110 toUtm8.gamma: 7.343989
    test 562 line 110 toUtm8.scale: 1.020672
    test 563 line 110 toUtm8.lat: 31.826531
    test 564 line 110 toUtm8.lon: 13.731050
    test 565 line 111 toUtm8.easting: 1399093.491792
    test 566 line 111 toUtm8.northing: 8314607.120342
    test 567 line 111 toUtm8.gamma: 38.630161
    test 568 line 111 toUtm8.scale: 1.023625
    test 569 line 111 toUtm8.lat: 70.542985
    test 570 line 111 toUtm8.lon: 40.282055
    test 571 line 112 toUtm8.easting: 356983.618540
    test 572 line 112 toUtm8.northing: 4282309.048994
    test 573 line 112 toUtm8.gamma: 2.561485
    test 574 line 112 toUtm8.scale: 1.001170
    test 575 line 112 toUtm8.lat: 38.617487
    test 576 line 112 toUtm8.lon: 4.099838
    test 577 line 113 toUtm8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtm8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtm8.gamma: 12.752154
    test 580 line 113 toUtm8.scale: 2.511357
    test 581 line 113 toUtm8.lat: 5.389447
    test 582 line 113 toUtm8.lon: 66.729612
    test 583 line 114 toUtm8.easting: 6367592.504007
    test 584 line 114 toUtm8.northing: 1200437.077672
    test 585 line 114 toUtm8.gamma: 8.338041
    test 586 line 114 toUtm8.scale: 1.546210
    test 587 line 114 toUtm8.lat: 6.995168
    test 588 line 114 toUtm8.lon: 50.014763
    test 589 line 115 toUtm8.easting: 4391263.676460
    test 590 line 115 toUtm8.northing: 6325455.989408
    test 591 line 115 toUtm8.gamma: 42.653541
    test 592 line 115 toUtm8.scale: 1.245560
    test 593 line 115 toUtm8.lat: 42.321894
    test 594 line 115 toUtm8.lon: 53.784040
    test 595 line 116 toUtm8.easting: 6209880.527527
    test 596 line 116 toUtm8.northing: 2154754.449747
    test 597 line 116 toUtm8.gamma: 14.919512
    test 598 line 116 toUtm8.scale: 1.516560
    test 599 line 116 toUtm8.lat: 12.698515
    test 600 line 116 toUtm8.lon: 50.242047
    test 601 line 117 toUtm8.easting: 1507053.688772
    test 602 line 117 toUtm8.northing: 6261383.513280
    test 603 line 117 toUtm8.gamma: 19.280373
    test 604 line 117 toUtm8.scale: 1.027584
    test 605 line 117 toUtm8.lat: 54.207636
    test 606 line 117 toUtm8.lon: 23.325731
    test 607 line 118 toUtm8.easting: 8332725.003777
    test 608 line 118 toUtm8.northing: 3002712.329753
    test 609 line 118 toUtm8.gamma: 24.059212
    test 610 line 118 toUtm8.scale: 1.990450
    test 611 line 118 toUtm8.lat: 13.224787
    test 612 line 118 toUtm8.lon: 62.426698
    test 613 line 119 toUtm8.easting: 3958910.085235
    test 614 line 119 toUtm8.northing: 3462284.926102
    test 615 line 119 toUtm8.gamma: 18.546398
    test 616 line 119 toUtm8.scale: 1.199351
    test 617 line 119 toUtm8.lat: 25.650282
    test 618 line 119 toUtm8.lon: 37.710391

    test skipped (17): line 120 toUtm8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtm8.easting: 496148.253731
    test 620 line 121 toUtm8.northing: 6388503.365043
    test 621 line 121 toUtm8.gamma: 6.970955
    test 622 line 121 toUtm8.scale: 1.002620
    test 623 line 121 toUtm8.lat: 57.367533
    test 624 line 121 toUtm8.lon: 8.260866
    test 625 line 122 toUtm8.easting: 7375792.085850
    test 626 line 122 toUtm8.northing: 5544624.072155
    test 627 line 122 toUtm8.gamma: 44.510851
    test 628 line 122 toUtm8.scale: 1.745898
    test 629 line 122 toUtm8.lat: 25.958757
    test 630 line 122 toUtm8.lon: 65.760477
    test 631 line 123 toUtm8.easting: 2826258.041979
    test 632 line 123 toUtm8.northing: 5167759.816959
    test 633 line 123 toUtm8.gamma: 23.783897
    test 634 line 123 toUtm8.scale: 1.099415
    test 635 line 123 toUtm8.lat: 41.395848
    test 636 line 123 toUtm8.lon: 33.661790
    test 637 line 124 toUtm8.easting: 3958563.378851
    test 638 line 124 toUtm8.northing: 8499923.231243
    test 639 line 124 toUtm8.gamma: 66.570945
    test 640 line 124 toUtm8.scale: 1.197296
    test 641 line 124 toUtm8.lat: 54.266617
    test 642 line 124 toUtm8.lon: 70.602199
    test 643 line 125 toUtm8.easting: 4408189.533462
    test 644 line 125 toUtm8.northing: 8046312.003642
    test 645 line 125 toUtm8.gamma: 62.216959
    test 646 line 125 toUtm8.scale: 1.246750
    test 647 line 125 toUtm8.lat: 49.840393
    test 648 line 125 toUtm8.lon: 68.036728
    test 649 line 126 toUtm8.easting: 3629225.627512
    test 650 line 126 toUtm8.northing: 6371258.454645
    test 651 line 126 toUtm8.gamma: 38.881675
    test 652 line 126 toUtm8.scale: 1.165511
    test 653 line 126 toUtm8.lat: 46.306035
    test 654 line 126 toUtm8.lon: 48.085828
    test 655 line 127 toUtm8.easting: 602838.450710
    test 656 line 127 toUtm8.northing: 4851370.637205
    test 657 line 127 toUtm8.gamma: 5.160395
    test 658 line 127 toUtm8.scale: 1.004073
    test 659 line 127 toUtm8.lat: 43.570988
    test 660 line 127 toUtm8.lon: 7.464494
    test 661 line 128 toUtm8.easting: 764616.665051
    test 662 line 128 toUtm8.northing: 2164299.337945
    test 663 line 128 toUtm8.gamma: 2.429300
    test 664 line 128 toUtm8.scale: 1.006835
    test 665 line 128 toUtm8.lat: 19.427290
    test 666 line 128 toUtm8.lon: 7.268247
    test 667 line 129 toUtm8.easting: 5048953.021931
    test 668 line 129 toUtm8.northing: 1885974.057398
    test 669 line 129 toUtm8.gamma: 11.459804
    test 670 line 129 toUtm8.scale: 1.332207
    test 671 line 129 toUtm8.lat: 12.713794
    test 672 line 129 toUtm8.lon: 42.507018
    test 673 line 130 toUtm8.easting: 2293996.601155
    test 674 line 130 toUtm8.northing: 2392408.644221
    test 675 line 130 toUtm8.gamma: 7.791838
    test 676 line 130 toUtm8.scale: 1.065348
    test 677 line 130 toUtm8.lat: 20.238782
    test 678 line 130 toUtm8.lon: 21.566068
    test 679 line 131 toUtm8.easting: 1530603.839418
    test 680 line 131 toUtm8.northing: 7287841.459898
    test 681 line 131 toUtm8.gamma: 27.502921
    test 682 line 131 toUtm8.scale: 1.028416
    test 683 line 131 toUtm8.lat: 62.367847
    test 684 line 131 toUtm8.lon: 30.438849
    test 685 line 132 toUtm8.easting: 2660000.093152
    test 686 line 132 toUtm8.northing: 5161982.213248
    test 687 line 132 toUtm8.gamma: 22.629836
    test 688 line 132 toUtm8.scale: 1.087851
    test 689 line 132 toUtm8.lat: 41.891569
    test 690 line 132 toUtm8.lon: 31.959547
    test 691 line 133 toUtm8.easting: 5037478.329414
    test 692 line 133 toUtm8.northing: 8768172.379908
    test 693 line 133 toUtm8.gamma: 73.511182
    test 694 line 133 toUtm8.scale: 1.325919
    test 695 line 133 toUtm8.lat: 47.664248
    test 696 line 133 toUtm8.lon: 77.630062
    test 697 line 134 toUtm8.easting: 2289650.957799
    test 698 line 134 toUtm8.northing: 8784328.593607
    test 699 line 134 toUtm8.gamma: 60.786067
    test 700 line 134 toUtm8.scale: 1.064346
    test 701 line 134 toUtm8.lat: 67.259559
    test 702 line 134 toUtm8.lon: 62.715293
    test 703 line 135 toUtm8.easting: 647913.889744
    test 704 line 135 toUtm8.northing: 6742382.228217
    test 705 line 135 toUtm8.gamma: 10.252667
    test 706 line 135 toUtm8.scale: 1.004748
    test 707 line 135 toUtm8.lat: 60.295381
    test 708 line 135 toUtm8.lon: 11.763097
    test 709 line 136 toUtm8.easting: 1118372.698566
    test 710 line 136 toUtm8.northing: 9040627.942263
    test 711 line 136 toUtm8.gamma: 48.936803
    test 712 line 136 toUtm8.scale: 1.014920
    test 713 line 136 toUtm8.lat: 76.878914
    test 714 line 136 toUtm8.lon: 49.685773
    test 715 line 137 toUtm8.easting: 440696.510070
    test 716 line 137 toUtm8.northing: 5500355.826297
    test 717 line 137 toUtm8.gamma: 4.636104
    test 718 line 137 toUtm8.scale: 1.001986
    test 719 line 137 toUtm8.lat: 49.495349
    test 720 line 137 toUtm8.lon: 6.087551
    test 721 line 138 toUtm8.easting: 601728.149727
    test 722 line 138 toUtm8.northing: 9095352.048149
    test 723 line 138 toUtm8.gamma: 33.435771
    test 724 line 138 toUtm8.scale: 1.004027
    test 725 line 138 toUtm8.lat: 80.297265
    test 726 line 138 toUtm8.lon: 33.816372
    test 727 line 139 toUtm8.easting: 3481444.777827
    test 728 line 139 toUtm8.northing: 291665.708749
    test 729 line 139 toUtm8.gamma: 1.314726
    test 730 line 139 toUtm8.scale: 1.153534
    test 731 line 139 toUtm8.lat: 2.286437
    test 732 line 139 toUtm8.lon: 29.855149
    test 733 line 140 toUtm8.easting: 3515304.901524
    test 734 line 140 toUtm8.northing: 1443981.882918
    test 735 line 140 toUtm8.gamma: 6.641638
    test 736 line 140 toUtm8.scale: 1.156509
    test 737 line 140 toUtm8.lat: 11.264457
    test 738 line 140 toUtm8.lon: 30.743907
    test 739 line 141 toUtm8.easting: 160012.186959
    test 740 line 141 toUtm8.northing: 3922609.253231
    test 741 line 141 toUtm8.gamma: 1.022225
    test 742 line 141 toUtm8.scale: 0.999916
    test 743 line 141 toUtm8.lat: 35.434073
    test 744 line 141 toUtm8.lon: 1.762795
    test 745 line 142 toUtm8.easting: 4163744.245622
    test 746 line 142 toUtm8.northing: 936884.674804
    test 747 line 142 toUtm8.gamma: 4.892559
    test 748 line 142 toUtm8.scale: 1.222164
    test 749 line 142 toUtm8.lat: 6.923695
    test 750 line 142 toUtm8.lon: 35.289456
    test 751 line 143 toUtm8.easting: 6155200.017926
    test 752 line 143 toUtm8.northing: 6926306.628390
    test 753 line 143 toUtm8.gamma: 55.103258
    test 754 line 143 toUtm8.scale: 1.500556
    test 755 line 143 toUtm8.lat: 36.129672
    test 756 line 143 toUtm8.lon: 67.533176

    test skipped (18): line 144 toUtm8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtm8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtm8.easting: 3173034.802372
    test 758 line 146 toUtm8.northing: 7263421.942957
    test 759 line 146 toUtm8.gamma: 45.215808
    test 760 line 146 toUtm8.scale: 1.125410
    test 761 line 146 toUtm8.lat: 53.907276
    test 762 line 146 toUtm8.lon: 51.252904

    test skipped (20): line 147 toUtm8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtm8.easting: 2415561.483230
    test 764 line 148 toUtm8.northing: 8813225.217097
    test 765 line 148 toUtm8.gamma: 62.548978
    test 766 line 148 toUtm8.scale: 1.071748
    test 767 line 148 toUtm8.lat: 66.444100
    test 768 line 148 toUtm8.lon: 64.532960
    test 769 line 149 toUtm8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtm8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtm8.gamma: 14.838483
    test 772 line 149 toUtm8.scale: 2.380716
    test 773 line 149 toUtm8.lat: 6.670965
    test 774 line 149 toUtm8.lon: 65.660408
    test 775 line 150 toUtm8.easting: 727939.438391
    test 776 line 150 toUtm8.northing: 3684363.236810
    test 777 line 150 toUtm8.gamma: 4.266227
    test 778 line 150 toUtm8.scale: 1.006140
    test 779 line 150 toUtm8.lat: 33.054057
    test 780 line 150 toUtm8.lon: 7.787458
    test 781 line 151 toUtm8.easting: 1250765.991085
    test 782 line 151 toUtm8.northing: 792869.242719
    test 783 line 151 toUtm8.gamma: 1.396497
    test 784 line 151 toUtm8.scale: 1.019026
    test 785 line 151 toUtm8.lat: 7.035525
    test 786 line 151 toUtm8.lon: 11.253707
    test 787 line 152 toUtm8.easting: 710421.705887
    test 788 line 152 toUtm8.northing: 5019406.075928
    test 789 line 152 toUtm8.gamma: 6.393949
    test 790 line 152 toUtm8.scale: 1.005812
    test 791 line 152 toUtm8.lat: 44.971340
    test 792 line 152 toUtm8.lon: 9.009304
    test 793 line 153 toUtm8.easting: 4600995.074643
    test 794 line 153 toUtm8.northing: 4505712.084593
    test 795 line 153 toUtm8.gamma: 27.997458
    test 796 line 153 toUtm8.scale: 1.271841
    test 797 line 153 toUtm8.lat: 30.821397
    test 798 line 153 toUtm8.lon: 45.970577
    test 799 line 154 toUtm8.easting: 557642.627782
    test 800 line 154 toUtm8.northing: 7006911.251644
    test 801 line 154 toUtm8.gamma: 9.769903
    test 802 line 154 toUtm8.scale: 1.003411
    test 803 line 154 toUtm8.lat: 62.763886
    test 804 line 154 toUtm8.lon: 10.960144
    test 805 line 155 toUtm8.easting: 4635062.294291
    test 806 line 155 toUtm8.northing: 2702556.153311
    test 807 line 155 toUtm8.gamma: 15.779547
    test 808 line 155 toUtm8.scale: 1.277178
    test 809 line 155 toUtm8.lat: 18.888611
    test 810 line 155 toUtm8.lon: 41.009871

    test skipped (21): line 156 toUtm8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtm8.easting: 882126.661736
    test 812 line 157 toUtm8.northing: 7947612.369506
    test 813 line 157 toUtm8.gamma: 22.429487
    test 814 line 157 toUtm8.scale: 1.009132
    test 815 line 157 toUtm8.lat: 70.063902
    test 816 line 157 toUtm8.lon: 23.705255

    test skipped (22): line 158 toUtm8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtm8.easting: 6500508.399850
    test 818 line 159 toUtm8.northing: 6956476.342368
    test 819 line 159 toUtm8.gamma: 56.237116
    test 820 line 159 toUtm8.scale: 1.563162
    test 821 line 159 toUtm8.lat: 34.551257
    test 822 line 159 toUtm8.lon: 69.111091
    test 823 line 160 toUtm8.easting: 3884036.641314
    test 824 line 160 toUtm8.northing: 6890167.411733
    test 825 line 160 toUtm8.gamma: 45.760130
    test 826 line 160 toUtm8.scale: 1.190167
    test 827 line 160 toUtm8.lat: 47.929051
    test 828 line 160 toUtm8.lon: 54.103418
    test 829 line 161 toUtm8.easting: 217855.546078
    test 830 line 161 toUtm8.northing: 6184108.122568
    test 831 line 161 toUtm8.gamma: 2.870993
    test 832 line 161 toUtm8.scale: 1.000182
    test 833 line 161 toUtm8.lat: 55.753536
    test 834 line 161 toUtm8.lon: 3.471798

    test skipped (23): line 162 toUtm8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtm8.easting: 3469855.989805
    test 836 line 163 toUtm8.northing: 7723193.799228
    test 837 line 163 toUtm8.gamma: 53.114700
    test 838 line 163 toUtm8.scale: 1.150540
    test 839 line 163 toUtm8.lat: 54.510125
    test 840 line 163 toUtm8.lon: 58.556056

    test skipped (24): line 164 toUtm8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtm8.easting: 5798639.662224
    test 842 line 165 toUtm8.northing: 5305387.640916
    test 843 line 165 toUtm8.gamma: 38.617257
    test 844 line 165 toUtm8.scale: 1.442263
    test 845 line 165 toUtm8.lat: 30.911943
    test 846 line 165 toUtm8.lon: 57.114102
    test 847 line 166 toUtm8.easting: 9464.934388
    test 848 line 166 toUtm8.northing: 6489121.624944
    test 849 line 166 toUtm8.gamma: 0.138696
    test 850 line 166 toUtm8.scale: 0.999601
    test 851 line 166 toUtm8.lat: 58.542493
    test 852 line 166 toUtm8.lon: 0.162593

    test skipped (25): line 167 toUtm8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtm8.easting: 2719653.543469
    test 854 line 168 toUtm8.northing: 9362389.163495
    test 855 line 168 toUtm8.gamma: 76.049670
    test 856 line 168 toUtm8.scale: 1.091315
    test 857 line 168 toUtm8.lat: 65.692275
    test 858 line 168 toUtm8.lon: 77.241377
    test 859 line 169 toUtm8.easting: 4845341.924698
    test 860 line 169 toUtm8.northing: 8710522.326901
    test 861 line 169 toUtm8.gamma: 72.320942
    test 862 line 169 toUtm8.scale: 1.300382
    test 863 line 169 toUtm8.lat: 48.806211
    test 864 line 169 toUtm8.lon: 76.486365

    test skipped (26): line 170 toUtm8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtm8.easting: 7074299.823000
    test 866 line 171 toUtm8.northing: 1648736.065055
    test 867 line 171 toUtm8.gamma: 12.145925
    test 868 line 171 toUtm8.scale: 1.687551
    test 869 line 171 toUtm8.lat: 8.766053
    test 870 line 171 toUtm8.lon: 54.367539
    test 871 line 172 toUtm8.easting: 3689072.579308
    test 872 line 172 toUtm8.northing: 2230802.665211
    test 873 line 172 toUtm8.gamma: 10.856248
    test 874 line 172 toUtm8.scale: 1.172689
    test 875 line 172 toUtm8.lat: 17.095495
    test 876 line 172 toUtm8.lon: 33.059128
    test 877 line 173 toUtm8.easting: 8102565.885587
    test 878 line 173 toUtm8.northing: 5167396.617580
    test 879 line 173 toUtm8.gamma: 42.324886
    test 880 line 173 toUtm8.scale: 1.921927
    test 881 line 173 toUtm8.lat: 22.142861
    test 882 line 173 toUtm8.lon: 67.200684
    test 883 line 174 toUtm8.easting: 8181271.353564
    test 884 line 174 toUtm8.northing: 4425436.547185
    test 885 line 174 toUtm8.gamma: 35.900845
    test 886 line 174 toUtm8.scale: 1.945017
    test 887 line 174 toUtm8.lat: 19.222623
    test 888 line 174 toUtm8.lon: 65.180785
    test 889 line 175 toUtm8.easting: 767067.394003
    test 890 line 175 toUtm8.northing: 3701745.857296
    test 891 line 175 toUtm8.gamma: 4.519201
    test 892 line 175 toUtm8.scale: 1.006863
    test 893 line 175 toUtm8.lat: 33.182474
    test 894 line 175 toUtm8.lon: 8.216952
    test 895 line 176 toUtm8.easting: 6688114.168572
    test 896 line 176 toUtm8.northing: 2052857.299639
    test 897 line 176 toUtm8.gamma: 14.766191
    test 898 line 176 toUtm8.scale: 1.607200
    test 899 line 176 toUtm8.lat: 11.417963
    test 900 line 176 toUtm8.lon: 52.808691
    test 901 line 177 toUtm8.easting: 5608408.773761
    test 902 line 177 toUtm8.northing: 3859055.659110
    test 903 line 177 toUtm8.gamma: 26.244151
    test 904 line 177 toUtm8.scale: 1.413463
    test 905 line 177 toUtm8.lat: 23.836688
    test 906 line 177 toUtm8.lon: 50.500180
    test 907 line 178 toUtm8.easting: 3836942.765275
    test 908 line 178 toUtm8.northing: 6415467.634326
    test 909 line 178 toUtm8.gamma: 40.575885
    test 910 line 178 toUtm8.scale: 1.185615
    test 911 line 178 toUtm8.lat: 45.550020
    test 912 line 178 toUtm8.lon: 50.148036
    test 913 line 179 toUtm8.easting: 1298730.366025
    test 914 line 179 toUtm8.northing: 6021453.000792
    test 915 line 179 toUtm8.gamma: 15.613320
    test 916 line 179 toUtm8.scale: 1.020367
    test 917 line 179 toUtm8.lat: 52.746079
    test 918 line 179 toUtm8.lon: 19.343926
    test 919 line 180 toUtm8.easting: 416934.289208
    test 920 line 180 toUtm8.northing: 7295683.451705
    test 921 line 180 toUtm8.gamma: 8.238232
    test 922 line 180 toUtm8.scale: 1.001729
    test 923 line 180 toUtm8.lat: 65.513348
    test 924 line 180 toUtm8.lon: 9.039529
    test 925 line 181 toUtm8.easting: 4336076.850889
    test 926 line 181 toUtm8.northing: 7617975.722779
    test 927 line 181 toUtm8.gamma: 56.537088
    test 928 line 181 toUtm8.scale: 1.238582
    test 929 line 181 toUtm8.lat: 48.709795
    test 930 line 181 toUtm8.lon: 63.554005
    test 931 line 182 toUtm8.easting: 168047.336980
    test 932 line 182 toUtm8.northing: 2185000.046530
    test 933 line 182 toUtm8.gamma: 0.542187
    test 934 line 182 toUtm8.scale: 0.999949
    test 935 line 182 toUtm8.lat: 19.753509
    test 936 line 182 toUtm8.lon: 1.603846
    test 937 line 183 toUtm8.easting: 8276281.328790
    test 938 line 183 toUtm8.northing: 263444.350545
    test 939 line 183 toUtm8.gamma: 2.071435
    test 940 line 183 toUtm8.scale: 1.980314
    test 941 line 183 toUtm8.lat: 1.202816
    test 942 line 183 toUtm8.lon: 59.377276
    test 943 line 184 toUtm8.easting: 4772573.810710
    test 944 line 184 toUtm8.northing: 6765710.336002
    test 945 line 184 toUtm8.gamma: 48.857561
    test 946 line 184 toUtm8.scale: 1.291911
    test 947 line 184 toUtm8.lat: 42.564975
    test 948 line 184 toUtm8.lon: 59.356947
    test 949 line 185 toUtm8.easting: 5427755.074639
    test 950 line 185 toUtm8.northing: 1556055.820924
    test 951 line 185 toUtm8.gamma: 9.862178
    test 952 line 185 toUtm8.scale: 1.387394
    test 953 line 185 toUtm8.lat: 10.090572
    test 954 line 185 toUtm8.lon: 44.604132
    test 955 line 186 toUtm8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtm8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtm8.gamma: 50.784827
    test 958 line 186 toUtm8.scale: 3.149567
    test 959 line 186 toUtm8.lat: 14.133028
    test 960 line 186 toUtm8.lon: 78.097533
    test 961 line 187 toUtm8.easting: 7152433.802688
    test 962 line 187 toUtm8.northing: 761390.695844
    test 963 line 187 toUtm8.gamma: 5.607350
    test 964 line 187 toUtm8.scale: 1.705261
    test 965 line 187 toUtm8.lat: 4.031123
    test 966 line 187 toUtm8.lon: 54.048782
    test 967 line 188 toUtm8.easting: 3105651.390901
    test 968 line 188 toUtm8.northing: 9426026.169064
    test 969 line 188 toUtm8.gamma: 78.750206
    test 970 line 188 toUtm8.scale: 1.119737
    test 971 line 188 toUtm8.lat: 62.746603
    test 972 line 188 toUtm8.lon: 79.968641
    test 973 line 189 toUtm8.easting: 2959009.639022
    test 974 line 189 toUtm8.northing: 8339242.269282
    test 975 line 189 toUtm8.gamma: 58.460865
    test 976 line 189 toUtm8.scale: 1.108554
    test 977 line 189 toUtm8.lat: 60.626429
    test 978 line 189 toUtm8.lon: 61.851551
    test 979 line 190 toUtm8.easting: 8640472.267145
    test 980 line 190 toUtm8.northing: 6230320.417931
    test 981 line 190 toUtm8.gamma: 52.816810
    test 982 line 190 toUtm8.scale: 2.062973
    test 983 line 190 toUtm8.lat: 23.600626
    test 984 line 190 toUtm8.lon: 72.811634
    test 985 line 191 toUtm8.easting: 811352.108932
    test 986 line 191 toUtm8.northing: 9816129.813481
    test 987 line 191 toUtm8.gamma: 77.299184
    test 988 line 191 toUtm8.scale: 1.007651
    test 989 line 191 toUtm8.lat: 82.572236
    test 990 line 191 toUtm8.lon: 77.402323
    test 991 line 192 toUtm8.easting: 6521874.973458
    test 992 line 192 toUtm8.northing: 1053612.479744
    test 993 line 192 toUtm8.gamma: 7.407328
    test 994 line 192 toUtm8.scale: 1.575529
    test 995 line 192 toUtm8.lat: 6.030051
    test 996 line 192 toUtm8.lon: 50.783505
    test 997 line 193 toUtm8.easting: 3477983.997875
    test 998 line 193 toUtm8.northing: 5651613.325947
    test 999 line 193 toUtm8.gamma: 31.530673
    test 1000 line 193 toUtm8.scale: 1.151875
    test 1001 line 193 toUtm8.lat: 42.411523
    test 1002 line 193 toUtm8.lon: 42.258009
    test 1003 line 194 toUtm8.easting: 629892.822243
    test 1004 line 194 toUtm8.northing: 3283914.910451
    test 1005 line 194 toUtm8.gamma: 3.210482
    test 1006 line 194 toUtm8.scale: 1.004499
    test 1007 line 194 toUtm8.lat: 29.526120
    test 1008 line 194 toUtm8.lon: 6.493069
    test 1009 line 195 toUtm8.easting: 3381879.687227
    test 1010 line 195 toUtm8.northing: 5103629.325665
    test 1011 line 195 toUtm8.gamma: 26.748108
    test 1012 line 195 toUtm8.scale: 1.143559
    test 1013 line 195 toUtm8.lat: 39.021853
    test 1014 line 195 toUtm8.lon: 38.641779
    test 1015 line 196 toUtm8.easting: 2815986.534177
    test 1016 line 196 toUtm8.northing: 9387029.120718
    test 1017 line 196 toUtm8.gamma: 76.967262
    test 1018 line 196 toUtm8.scale: 1.098032
    test 1019 line 196 toUtm8.lat: 64.971850
    test 1020 line 196 toUtm8.lon: 78.151893
    test 1021 line 197 toUtm8.easting: 3398195.889603
    test 1022 line 197 toUtm8.northing: 9138936.031490
    test 1023 line 197 toUtm8.gamma: 74.477499
    test 1024 line 197 toUtm8.scale: 1.144009
    test 1025 line 197 toUtm8.lat: 59.961819
    test 1026 line 197 toUtm8.lon: 76.473422
    test 1027 line 198 toUtm8.easting: 2421734.754637
    test 1028 line 198 toUtm8.northing: 5002372.094991
    test 1029 line 198 toUtm8.gamma: 20.017082
    test 1030 line 198 toUtm8.scale: 1.072592
    test 1031 line 198 toUtm8.lat: 41.374040
    test 1032 line 198 toUtm8.lon: 28.848343
    test 1033 line 199 toUtm8.easting: 2360869.895525
    test 1034 line 199 toUtm8.northing: 9553298.449536
    test 1035 line 199 toUtm8.gamma: 78.848205
    test 1036 line 199 toUtm8.scale: 1.068453
    test 1037 line 199 toUtm8.lat: 68.946087
    test 1038 line 199 toUtm8.lon: 79.574523

    test skipped (27): line 200 toUtm8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtm8.easting: 1327758.704795
    test 1040 line 201 toUtm8.northing: 2375509.241683
    test 1041 line 201 toUtm8.gamma: 4.617572
    test 1042 line 201 toUtm8.scale: 1.021465
    test 1043 line 201 toUtm8.lat: 21.000252
    test 1044 line 201 toUtm8.lon: 12.697444
    test 1045 line 202 toUtm8.easting: 2070860.327644
    test 1046 line 202 toUtm8.northing: 8604500.719581
    test 1047 line 202 toUtm8.gamma: 54.722761
    test 1048 line 202 toUtm8.scale: 1.052469
    test 1049 line 202 toUtm8.lat: 68.015227
    test 1050 line 202 toUtm8.lon: 56.732419
    test 1051 line 203 toUtm8.easting: 6564776.654864
    test 1052 line 203 toUtm8.northing: 8171207.177379
    test 1053 line 203 toUtm8.gamma: 69.237523
    test 1054 line 203 toUtm8.scale: 1.573894
    test 1055 line 203 toUtm8.lat: 37.423675
    test 1056 line 203 toUtm8.lon: 76.947359
    test 1057 line 204 toUtm8.easting: 592653.553821
    test 1058 line 204 toUtm8.northing: 6125529.810052
    test 1059 line 204 toUtm8.gamma: 7.600785
    test 1060 line 204 toUtm8.scale: 1.003912
    test 1061 line 204 toUtm8.lat: 54.922707
    test 1062 line 204 toUtm8.lon: 9.260818
    test 1063 line 205 toUtm8.easting: 693459.671821
    test 1064 line 205 toUtm8.northing: 6943779.991032
    test 1065 line 205 toUtm8.gamma: 11.787587
    test 1066 line 205 toUtm8.scale: 1.005496
    test 1067 line 205 toUtm8.lat: 61.982810
    test 1068 line 205 toUtm8.lon: 13.299659
    test 1069 line 206 toUtm8.easting: 1838956.187625
    test 1070 line 206 toUtm8.northing: 3511959.612381
    test 1071 line 206 toUtm8.gamma: 9.844313
    test 1072 line 206 toUtm8.scale: 1.041603
    test 1073 line 206 toUtm8.lat: 30.324214
    test 1074 line 206 toUtm8.lon: 18.959769
    test 1075 line 207 toUtm8.easting: 4460690.884597
    test 1076 line 207 toUtm8.northing: 5541873.235403
    test 1077 line 207 toUtm8.gamma: 35.768613
    test 1078 line 207 toUtm8.scale: 1.254179
    test 1079 line 207 toUtm8.lat: 37.629667
    test 1080 line 207 toUtm8.lon: 49.649131
    test 1081 line 208 toUtm8.easting: 2311168.998941
    test 1082 line 208 toUtm8.northing: 9480561.869119
    test 1083 line 208 toUtm8.gamma: 76.828257
    test 1084 line 208 toUtm8.scale: 1.065556
    test 1085 line 208 toUtm8.lat: 69.225574
    test 1086 line 208 toUtm8.lon: 77.656135
    test 1087 line 209 toUtm8.easting: 4111775.114451
    test 1088 line 209 toUtm8.northing: 6509014.348792
    test 1089 line 209 toUtm8.gamma: 43.052130
    test 1090 line 209 toUtm8.scale: 1.214125
    test 1091 line 209 toUtm8.lat: 44.698478
    test 1092 line 209 toUtm8.lon: 52.979304
    test 1093 line 210 toUtm8.easting: 75358.261962
    test 1094 line 210 toUtm8.northing: 7711258.662251
    test 1095 line 210 toUtm8.gamma: 1.806297
    test 1096 line 210 toUtm8.scale: 0.999669
    test 1097 line 210 toUtm8.lat: 69.499594
    test 1098 line 210 toUtm8.lon: 1.928336

    test skipped (28): line 211 toUtm8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtm8.easting: 954378.415174
    test 1100 line 212 toUtm8.northing: 7449110.669807
    test 1101 line 212 toUtm8.gamma: 19.380657
    test 1102 line 212 toUtm8.scale: 1.010768
    test 1103 line 212 toUtm8.lat: 65.699839
    test 1104 line 212 toUtm8.lon: 21.104725
    test 1105 line 213 toUtm8.easting: 720971.793706
    test 1106 line 213 toUtm8.northing: 5265195.121555
    test 1107 line 213 toUtm8.gamma: 7.002995
    test 1108 line 213 toUtm8.scale: 1.005995
    test 1109 line 213 toUtm8.lat: 47.143648
    test 1110 line 213 toUtm8.lon: 9.512189
    test 1111 line 214 toUtm8.easting: 561561.493937
    test 1112 line 214 toUtm8.northing: 989910.236221
    test 1113 line 214 toUtm8.gamma: 0.793118
    test 1114 line 214 toUtm8.scale: 1.003505
    test 1115 line 214 toUtm8.lat: 8.920167
    test 1116 line 214 toUtm8.lon: 5.101513
    test 1117 line 215 toUtm8.easting: 3446829.634468
    test 1118 line 215 toUtm8.northing: 9232868.155664
    test 1119 line 215 toUtm8.gamma: 76.279075
    test 1120 line 215 toUtm8.scale: 1.148263
    test 1121 line 215 toUtm8.lat: 59.778971
    test 1122 line 215 toUtm8.lon: 78.080322

    test skipped (29): line 216 toUtm8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtm8.easting: 8973188.480293
    test 1124 line 217 toUtm8.northing: 7042230.087021
    test 1125 line 217 toUtm8.gamma: 60.872456
    test 1126 line 217 toUtm8.scale: 2.156098
    test 1127 line 217 toUtm8.lat: 24.310973
    test 1128 line 217 toUtm8.lon: 76.823777
    test 1129 line 218 toUtm8.easting: 126314.191618
    test 1130 line 218 toUtm8.northing: 396006.687921
    test 1131 line 218 toUtm8.gamma: 0.071065
    test 1132 line 218 toUtm8.scale: 0.999798
    test 1133 line 218 toUtm8.lat: 3.582041
    test 1134 line 218 toUtm8.lon: 1.137286
    test 1135 line 219 toUtm8.easting: 5247652.345647
    test 1136 line 219 toUtm8.northing: 8670513.359752
    test 1137 line 219 toUtm8.gamma: 72.700498
    test 1138 line 219 toUtm8.scale: 1.355272
    test 1139 line 219 toUtm8.lat: 46.124233
    test 1140 line 219 toUtm8.lon: 77.313118

    test skipped (30): line 220 toUtm8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtm8.easting: 6300112.758236
    test 1142 line 221 toUtm8.northing: 93835.917364
    test 1143 line 221 toUtm8.gamma: 0.644805
    test 1144 line 221 toUtm8.scale: 1.534073
    test 1145 line 221 toUtm8.lat: 0.553171
    test 1146 line 221 toUtm8.lon: 49.117104
    test 1147 line 222 toUtm8.easting: 3894813.593782
    test 1148 line 222 toUtm8.northing: 4833832.341027
    test 1149 line 222 toUtm8.gamma: 27.453298
    test 1150 line 222 toUtm8.scale: 1.192135
    test 1151 line 222 toUtm8.lat: 35.361587
    test 1152 line 222 toUtm8.lon: 41.860599
    test 1153 line 223 toUtm8.easting: 402511.346712
    test 1154 line 223 toUtm8.northing: 3520621.561911
    test 1155 line 223 toUtm8.gamma: 2.238474
    test 1156 line 223 toUtm8.scale: 1.001599
    test 1157 line 223 toUtm8.lat: 31.750314
    test 1158 line 223 toUtm8.lon: 4.248167
    test 1159 line 224 toUtm8.easting: 5357378.503148
    test 1160 line 224 toUtm8.northing: 2772997.602234
    test 1161 line 224 toUtm8.gamma: 17.823560
    test 1162 line 224 toUtm8.scale: 1.376031
    test 1163 line 224 toUtm8.lat: 17.924336
    test 1164 line 224 toUtm8.lon: 46.096402
    test 1165 line 225 toUtm8.easting: 2807553.985866
    test 1166 line 225 toUtm8.northing: 8177847.980275
    test 1167 line 225 toUtm8.gamma: 54.680045
    test 1168 line 225 toUtm8.scale: 1.097531
    test 1169 line 225 toUtm8.lat: 60.931488
    test 1170 line 225 toUtm8.lon: 58.221214

    test skipped (31): line 226 toUtm8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtm8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtm8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtm8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtm8.gamma: 42.613968
    test 1174 line 228 toUtm8.scale: 3.314412
    test 1175 line 228 toUtm8.lat: 11.709763
    test 1176 line 228 toUtm8.lon: 76.760295
    test 1177 line 229 toUtm8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtm8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtm8.gamma: 33.383025
    test 1180 line 229 toUtm8.scale: 2.724754
    test 1181 line 229 toUtm8.lat: 12.009498
    test 1182 line 229 toUtm8.lon: 71.782351

    test skipped (33): line 230 toUtm8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtm8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtm8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtm8.gamma: 23.145404
    test 1186 line 231 toUtm8.scale: 2.998408
    test 1187 line 231 toUtm8.lat: 7.721128
    test 1188 line 231 toUtm8.lon: 71.662731
    test 1189 line 232 toUtm8.easting: 4411584.447941
    test 1190 line 232 toUtm8.northing: 4956173.694407
    test 1191 line 232 toUtm8.gamma: 30.713919
    test 1192 line 232 toUtm8.scale: 1.248736
    test 1193 line 232 toUtm8.lat: 34.295026
    test 1194 line 232 toUtm8.lon: 46.442191
    test 1195 line 233 toUtm8.easting: 672108.897905
    test 1196 line 233 toUtm8.northing: 4751554.657054
    test 1197 line 233 toUtm8.gamma: 5.569178
    test 1198 line 233 toUtm8.scale: 1.005162
    test 1199 line 233 toUtm8.lat: 42.622496
    test 1200 line 233 toUtm8.lon: 8.193605
    test 1201 line 234 toUtm8.easting: 5022964.290579
    test 1202 line 234 toUtm8.northing: 6860418.199502
    test 1203 line 234 toUtm8.gamma: 50.862230
    test 1204 line 234 toUtm8.scale: 1.324925
    test 1205 line 234 toUtm8.lat: 41.667780
    test 1206 line 234 toUtm8.lon: 61.518288
    test 1207 line 235 toUtm8.easting: 1669655.595207
    test 1208 line 235 toUtm8.northing: 4152086.537021
    test 1209 line 235 toUtm8.gamma: 11.110237
    test 1210 line 235 toUtm8.scale: 1.034138
    test 1211 line 235 toUtm8.lat: 36.060369
    test 1212 line 235 toUtm8.lon: 18.444112
    test 1213 line 236 toUtm8.easting: 6055876.729655
    test 1214 line 236 toUtm8.northing: 4896837.552619
    test 1215 line 236 toUtm8.gamma: 35.799747
    test 1216 line 236 toUtm8.scale: 1.485967
    test 1217 line 236 toUtm8.lat: 27.948091
    test 1218 line 236 toUtm8.lon: 56.816429
    test 1219 line 237 toUtm8.easting: 1209214.164379
    test 1220 line 237 toUtm8.northing: 7266409.859178
    test 1221 line 237 toUtm8.gamma: 22.319633
    test 1222 line 237 toUtm8.scale: 1.017554
    test 1223 line 237 toUtm8.lat: 63.386030
    test 1224 line 237 toUtm8.lon: 24.662716
    test 1225 line 238 toUtm8.easting: 5154564.559584
    test 1226 line 238 toUtm8.northing: 698118.349975
    test 1227 line 238 toUtm8.gamma: 4.242360
    test 1228 line 238 toUtm8.scale: 1.347481
    test 1229 line 238 toUtm8.lat: 4.680922
    test 1230 line 238 toUtm8.lon: 42.114426
    test 1231 line 239 toUtm8.easting: 2695149.806543
    test 1232 line 239 toUtm8.northing: 8208197.765605
    test 1233 line 239 toUtm8.gamma: 54.178615
    test 1234 line 239 toUtm8.scale: 1.089730
    test 1235 line 239 toUtm8.lat: 61.826625
    test 1236 line 239 toUtm8.lon: 57.525096
    test 1237 line 240 toUtm8.easting: 3394792.327820
    test 1238 line 240 toUtm8.northing: 3217583.415552
    test 1239 line 240 toUtm8.gamma: 15.165863
    test 1240 line 240 toUtm8.scale: 1.145285
    test 1241 line 240 toUtm8.lat: 25.104353
    test 1242 line 240 toUtm8.lon: 32.528660
    test 1243 line 241 toUtm8.easting: 1429160.966985
    test 1244 line 241 toUtm8.northing: 8212685.362032
    test 1245 line 241 toUtm8.gamma: 37.484904
    test 1246 line 241 toUtm8.scale: 1.024676
    test 1247 line 241 toUtm8.lat: 69.678351
    test 1248 line 241 toUtm8.lon: 39.275513

    test skipped (34): line 242 toUtm8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtm8.easting: 1990722.928606
    test 1250 line 243 toUtm8.northing: 7569202.065162
    test 1251 line 243 toUtm8.gamma: 37.075276
    test 1252 line 243 toUtm8.scale: 1.048486
    test 1253 line 243 toUtm8.lat: 62.300208
    test 1254 line 243 toUtm8.lon: 40.474051
    test 1255 line 244 toUtm8.easting: 1554980.099559
    test 1256 line 244 toUtm8.northing: 1449423.919586
    test 1257 line 244 toUtm8.gamma: 3.188328
    test 1258 line 244 toUtm8.scale: 1.029664
    test 1259 line 244 toUtm8.lat: 12.721776
    test 1260 line 244 toUtm8.lon: 14.190003
    test 1261 line 245 toUtm8.easting: 785205.450196
    test 1262 line 245 toUtm8.northing: 5575158.423096
    test 1263 line 245 toUtm8.gamma: 8.388417
    test 1264 line 245 toUtm8.scale: 1.007181
    test 1265 line 245 toUtm8.lat: 49.811296
    test 1266 line 245 toUtm8.lon: 10.925011
    test 1267 line 246 toUtm8.easting: 3310405.988313
    test 1268 line 246 toUtm8.northing: 5955022.233881
    test 1269 line 246 toUtm8.gamma: 33.007587
    test 1270 line 246 toUtm8.scale: 1.137141
    test 1271 line 246 toUtm8.lat: 45.132680
    test 1272 line 246 toUtm8.lon: 42.478624
    test 1273 line 247 toUtm8.easting: 4733460.960666
    test 1274 line 247 toUtm8.northing: 129034.889816
    test 1275 line 247 toUtm8.gamma: 0.737551
    test 1276 line 247 toUtm8.scale: 1.290439
    test 1277 line 247 toUtm8.lat: 0.904279
    test 1278 line 247 toUtm8.lon: 39.078412
    test 1279 line 248 toUtm8.easting: 3322708.343909
    test 1280 line 248 toUtm8.northing: 3864738.078742
    test 1281 line 248 toUtm8.gamma: 18.472566
    test 1282 line 248 toUtm8.scale: 1.138838
    test 1283 line 248 toUtm8.lat: 30.163605
    test 1284 line 248 toUtm8.lon: 33.577996

    test skipped (35): line 249 toUtm8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtm8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtm8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtm8.easting: 2212701.180192
    test 1286 line 252 toUtm8.northing: 650348.100229
    test 1287 line 252 toUtm8.gamma: 1.970441
    test 1288 line 252 toUtm8.scale: 1.060830
    test 1289 line 252 toUtm8.lat: 5.542998
    test 1290 line 252 toUtm8.lon: 19.589578
    test 1291 line 253 toUtm8.easting: 6890222.326618
    test 1292 line 253 toUtm8.northing: 7506813.499547
    test 1293 line 253 toUtm8.gamma: 62.684825
    test 1294 line 253 toUtm8.scale: 1.638488
    test 1295 line 253 toUtm8.lat: 34.237147
    test 1296 line 253 toUtm8.lon: 73.678164
    test 1297 line 254 toUtm8.easting: 6692260.067325
    test 1298 line 254 toUtm8.northing: 4244174.008110
    test 1299 line 254 toUtm8.gamma: 31.812920
    test 1300 line 254 toUtm8.scale: 1.604640
    test 1301 line 254 toUtm8.lat: 22.704949
    test 1302 line 254 toUtm8.lon: 57.877010
    test 1303 line 255 toUtm8.easting: 1225564.137190
    test 1304 line 255 toUtm8.northing: 4778923.924144
    test 1305 line 255 toUtm8.gamma: 10.083419
    test 1306 line 255 toUtm8.scale: 1.018134
    test 1307 line 255 toUtm8.lat: 42.192424
    test 1308 line 255 toUtm8.lon: 14.828196
    test 1309 line 256 toUtm8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtm8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtm8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtm8.scale: 3.535170
    test 1313 line 256 toUtm8.lat: 11.481151
    test 1314 line 256 toUtm8.lon: 78.189236
    test 1315 line 257 toUtm8.easting: 6673845.021771
    test 1316 line 257 toUtm8.northing: 1177587.190565
    test 1317 line 257 toUtm8.gamma: 8.389141
    test 1318 line 257 toUtm8.scale: 1.605171
    test 1319 line 257 toUtm8.lat: 6.609626
    test 1320 line 257 toUtm8.lon: 51.735783
    test 1321 line 258 toUtm8.easting: 6966354.690417
    test 1322 line 258 toUtm8.northing: 3641802.005093
    test 1323 line 258 toUtm8.gamma: 27.409636
    test 1324 line 258 toUtm8.scale: 1.661469
    test 1325 line 258 toUtm8.lat: 19.059369
    test 1326 line 258 toUtm8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 WGS84.KsOrder: 8

    23 of 1332 testUtmTMcoords.py tests (1.7%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 64.308 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUtmUps.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_DMS from .dms by testUtmUps.py line 11
# lazily imported pygeodesy.parseUTMUPS5 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.toUps8 from .ups by testUtmUps.py line 11
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.UtmUps from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.utmupsValidateOK from .utmups by testUtmUps.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testUtmUps.py line 200

    testing testUtmUps.py 23.03.27 (module pygeodesy.utmups 22.10.04) isLazy=3
    test 1 UtmUps: 00 N 448251.0 5411932.0001
    test 2 UtmUps.ValidateOK: True
    test 3 UtmUps: 00 N 448252 5411933
    test 4 UtmUps: 00 N 448251.795 5411932.678
    test 5 UtmUps: 00Z N 448251.8 5411932.7 n/a n/a
    test 6 UtmUps.ValidateOK: True
    test 7 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 8 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 9 LL.toUtmUps: 60 N 360177 4838249
    test 10 LL.toUtmUps: 60 N 360176.686 4838249.416
    test 11 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839167°, S:0.99984048]
    test 12 LL.toUtmUps.ValidateOK: True
    test 13 toUtmUps8ID1: 00Y N 1530125.78 2426773.6 -132.24798917° 0.99647445
    test 14 toUtmUps8ID1.ValidateOK: True
    test 15 toUtmUps8ID1.ValidateOK: True
    test 16 toUtmUps8ID2: 38 N 467367.68 8100752.13 -57.37878422′ 0.99961302  FAILED, KNOWN, expected 38 N 3320416.75 632668.43 +44.0° 1.01619505
    test 17 toUtmUps8ID2.ValidateOK: True
    test 18 toUtmUps8ID2.ValidateOK: True
    test 19 toUtmUps8ID2: 00 N 3320416.75 632668.43 +44.0° 1.01619505
    test 20 toUtmUps8ID2.ValidateOK: easting (3320416.7473598532): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 21 toUtmUps8ID3: 00B S 2222979.47 1797474.9 -132.24786194° 0.99455723
    test 22 toUtmUps8ID3.ValidateOK: True
    test 23 toUtmUps8ID3.ValidateOK: True
    test 24 UtmUps.toLatLonID4.ValidateOK: True
    test 25 UtmUps.toLatLonID4: 84°17′14.04″N, 132°14′52.76″W
    test 26 UtmUps.toLatLonID4: 84.287234°N, 132.247989°W
    test 27 UtmUps.ValidateOK: easting (3320416.75): outside UPS range [1300000, 2700000]  FAILED, KNOWN, expected True
    test 28 UtmUps.toLatLonID5: 73°00′00.0″N, 044°00′00.0″E
    test 29 UtmUps.toLatLonID5: 73.0°N, 044.0°E
    test 30 UtmUps.ValidateOK: True
    test 31 UtmUps.toLatLonID6: 87°17′14.4″S, 132°14′52.3″E
    test 32 UtmUps.toLatLonID6: 87.287333°S, 132.247861°E
    test 33 latlon1: 61.2°N, 149.9°W
    test 34 toUtmUps8: 06 N 344174 6788521
    test 35 toUtmUps8: 06V N 344173.864114 6788521.418164 -2.54179531° 0.99989751
    test 36 toUtmUps8.ValidateOK: True
    test 37 toMgrs: 06V UN 44173 88521
    test 38 latlon2: LatLon(83°37′37.2″N, 032°39′50.4″W)
    test 39 toUtmUps8: 25 N 504164 9286466
    test 40 toUtmUps8: [Z:25X, H:N, E:504164, N:9286466]
    test 41 toUtmUps8: 25X N 504163.899383 9286465.664902 +20.03542083′ 0.99960021
    test 42 toUtmUps8.ValidateOK: True
    test 43 toMgrs: 25X EN 04163 86465
    test 44 latlon3: 33.33°N, 044.44°E
    test 45 toUtmUps8: 38 N 447882 3688012
    test 46 toUtmUps8: 38S N 447882.413169 3688011.692733 -18.46228466′ 0.99963349
    test 47 toUtmUps8.ValidateOK: True
    test 48 toMgrs: 38S MB 47882 88011
    test 49 latlon4: 79.0°S, 079.0°W
    test 50 toUtmUps8: 17 S 542594 1229296
    test 51 toUtmUps8: 17C S 542594.134555 1229296.157301 -1.96328341° 0.99962217
    test 52 toUtmUps8.ValidateOK: True
    test 53 toMgrs: 17C NN 42594 29296
    test 54 latlon5: 84.0°N, 084.0°E
    test 55 toUtmUps8: 00 N 2663075 1930308
    test 56 toUtmUps8: 00Z N 2663075.299562 1930307.977716 +84.0° 0.99673
    test 57 toUtmUps8.ValidateOK: True
    test 58 latlon6: 13.4125°N, 103.8667°E
    test 59 toUtmUps8: 48 N 377302 1483035
    test 60 toUtmUps8: 48P N 377302.354183 1483034.777084 -15.77480856′ 0.99978623
    test 61 toUtmUps8.ValidateOK: True
    test 62 toMgrs: 48P UV 77302 83034
    test 63 latlon7: 13.4125°S, 103.8667°W
    test 64 LL.toUtmUps: 13 S 622698 8516965
    test 65 LL.toUtmUps: 13L S 622697.645817 8516965.222916 -15.77480856′ 0.99978623
    test 66 LL.toUtmUps.ValidateOK: True
    test 67 toMgrs: 13L FF 22697 16965
    test 68 latlon8: 43.684097°N, 175.265195°E
    test 69 LL.toUtmUps: 60 N 360177 4838249
    test 70 LL.toUtmUps: 60 N 360176.691 4838249.422
    test 71 LL.toUtmUps: [Z:60T, H:N, E:360177, N:4838249, C:-1.19839163°, S:0.99984048]
    test 72 LL.toUtmUps.ValidateOK: True
    test 73 toMgrs: 60T UP 60176 38249
    test 74 UtmUps.toLatLon: 43.684097°N, 175.265195°E
    test 75 UtmUps.toLatLon: 43°41′02.75″N, 175°15′54.7″E
    test 76 latlon9: 41.321801°N, 074.801413°W
    test 77 LL.toUtmUps: 18 N 516620 4574500
    test 78 LL.toUtmUps: [Z:18T, H:N, E:516620, N:4574500, C:+7.86748851′, S:0.9996034]
    test 79 LL.toUtmUps.ValidateOK: True
    test 80 toMgrs: 18T WL 16619 74500
    test 81 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 82 UtmUps.toLatLon: 41°19′18.48″N, 074°48′05.09″W
    test 83 parseUTMUPS5: 18 N 516620 4574500
    test 84 parseUTMUPS5.ValidateOK: True
    test 85 UtmUps.toLatLon: 41.321801°N, 074.801413°W
    test 86 UtmUps: 00A S 321441 5810117
    test 87 UtmUps.ValidateOK: easting (321441.0425108216): outside UPS range [800000, 3200000]  FAILED, KNOWN, expected True
    test 88 UtmUps.toLatLon: 53.713776°S, 023.77604°W
    test 89 UtmUps.toLatLon: 53°42′49.59″S, 023°46′33.74″W
    test 90 LL.toUtmUps: 27 S 316807 4044745
    test 91 LL.toUtmUps.ValidateOK: True
    test 92 LL.toUtmUps: 27 S 316807.326 4044744.532
    test 93 LL.toUtmUps: [Z:27F, H:S, E:316807, N:4044745, C:+2.23830171°, S:1.00001184]
    test 94 UtmUps: 00Z N 400000 5000000
    test 95 UtmUps.ValidateOK: True
    test 96 parseUTMUPS5: (31, 'N', 446000.0, 8436100.0, 'X')
    test 97 parseUTMUPS5: (0, 'S', 506346.0, 1057743.0, 'A')

    4 of 97 testUtmUps.py tests (4.1%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 7.244 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testUtmUpsTMcoords.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.Ellipsoids from .ellipsoids by testTMcoords.py line 14
# lazily imported pygeodesy.EPS from .constants by testTMcoords.py line 14
# lazily imported pygeodesy.RangeError from .errors by testTMcoords.py line 14
# lazily imported pygeodesy.toUtmUps8 from .utmups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Ups from .ups by testUtmUpsTMcoords.py line 17
# lazily imported pygeodesy.Utm from .utm by testUtmUpsTMcoords.py line 17

    testing testUtmUpsTMcoords.py 23.03.27 (module pygeodesy.utmups 22.10.04) isLazy=3
    test 1 line 1 toUtmUps8.easting: 1548706.791619
    test 2 line 1 toUtmUps8.northing: 8451449.198772
    test 3 line 1 toUtmUps8.gamma: 43.922790
    test 4 line 1 toUtmUps8.scale: 1.029060
    test 5 line 1 toUtmUps8.lat: 70.579277
    test 6 line 1 toUtmUps8.lon: 45.599420
    test 7 line 2 toUtmUps8.easting: 2624150.740929
    test 8 line 2 toUtmUps8.northing: 1204434.041605
    test 9 line 2 toUtmUps8.gamma: 4.292619
    test 10 line 2 toUtmUps8.scale: 1.086051
    test 11 line 2 toUtmUps8.lat: 10.018894
    test 12 line 2 toUtmUps8.lon: 23.313324
    test 13 line 3 toUtmUps8.easting: 9855841.232935
    test 14 line 3 toUtmUps8.northing: 6145496.115157  FAILED, KNOWN, expected 6145496.115155
    test 15 line 3 toUtmUps8.gamma: 53.348315
    test 16 line 3 toUtmUps8.scale: 2.445098
    test 17 line 3 toUtmUps8.lat: 19.479896
    test 18 line 3 toUtmUps8.lon: 75.662049
    test 19 line 4 toUtmUps8.easting: 3206390.691996
    test 20 line 4 toUtmUps8.northing: 2650745.400406
    test 21 line 4 toUtmUps8.gamma: 11.666950
    test 22 line 4 toUtmUps8.scale: 1.129359
    test 23 line 4 toUtmUps8.lat: 21.072465
    test 24 line 4 toUtmUps8.lon: 29.828684
    test 25 line 5 toUtmUps8.easting: 4328154.083501
    test 26 line 5 toUtmUps8.northing: 749647.623690
    test 27 line 5 toUtmUps8.gamma: 4.024317
    test 28 line 5 toUtmUps8.scale: 1.240829
    test 29 line 5 toUtmUps8.lat: 5.458957
    test 30 line 5 toUtmUps8.lon: 36.385237
    test 31 line 6 toUtmUps8.easting: 847598.266514
    test 32 line 6 toUtmUps8.northing: 7947180.962440
    test 33 line 6 toUtmUps8.gamma: 21.639091
    test 34 line 6 toUtmUps8.scale: 1.008399
    test 35 line 6 toUtmUps8.lat: 70.175454
    test 36 line 6 toUtmUps8.lon: 22.865350
    test 37 line 7 toUtmUps8.easting: 2727657.337974
    test 38 line 7 toUtmUps8.northing: 8283916.696410
    test 39 line 7 toUtmUps8.gamma: 55.690909
    test 40 line 7 toUtmUps8.scale: 1.091942
    test 41 line 7 toUtmUps8.lat: 61.965605
    test 42 line 7 toUtmUps8.lon: 58.931371
    test 43 line 8 toUtmUps8.easting: 2331001.751890
    test 44 line 8 toUtmUps8.northing: 1313608.224751
    test 45 line 8 toUtmUps8.gamma: 4.214690
    test 46 line 8 toUtmUps8.scale: 1.067599
    test 47 line 8 toUtmUps8.lat: 11.116050
    test 48 line 8 toUtmUps8.lon: 20.901069
    test 49 line 9 toUtmUps8.easting: 6035557.239480
    test 50 line 9 toUtmUps8.northing: 5791770.791879
    test 51 line 9 toUtmUps8.gamma: 43.698170
    test 52 line 9 toUtmUps8.scale: 1.481260
    test 53 line 9 toUtmUps8.lat: 32.210543
    test 54 line 9 toUtmUps8.lon: 60.705849
    test 55 line 10 toUtmUps8.easting: 1064553.125852
    test 56 line 10 toUtmUps8.northing: 9417273.737208
    test 57 line 10 toUtmUps8.gamma: 61.100380
    test 58 line 10 toUtmUps8.scale: 1.013475
    test 59 line 10 toUtmUps8.lat: 79.187451
    test 60 line 10 toUtmUps8.lon: 61.532382
    test 61 line 11 toUtmUps8.easting: 1400137.116164
    test 62 line 11 toUtmUps8.northing: 9616907.017686
    test 63 line 11 toUtmUps8.gamma: 74.527087
    test 64 line 11 toUtmUps8.scale: 1.023640
    test 65 line 11 toUtmUps8.lat: 77.103759
    test 66 line 11 toUtmUps8.lon: 74.899105

    test skipped (1): line 12 toUtmUps8.'21.889514024862 80.019885892785 9860691.0166261508479 7433039.1433282732643 65.357693372142649007 2.43897318400097845293'

    test skipped (2): line 13 toUtmUps8.'30.53629567699 82.186177919416 8076501.8336948099169 8561614.1747819103782 75.073393190238557702 1.90620203595203984732'
    test 67 line 14 toUtmUps8.easting: 3335099.866623
    test 68 line 14 toUtmUps8.northing: 6740519.084015
    test 69 line 14 toUtmUps8.gamma: 40.611821
    test 70 line 14 toUtmUps8.scale: 1.139021
    test 71 line 14 toUtmUps8.lat: 49.990485
    test 72 line 14 toUtmUps8.lon: 48.203179

    test skipped (3): line 15 toUtmUps8.'14.486311853451 80.905136710227 12051574.9284996192629 6587213.0519512810474 59.033236797073779959 3.3574686117030164354'
    test 73 line 16 toUtmUps8.easting: 5387578.735298
    test 74 line 16 toUtmUps8.northing: 4111216.907168
    test 75 line 16 toUtmUps8.gamma: 27.574337
    test 76 line 16 toUtmUps8.scale: 1.379357
    test 77 line 16 toUtmUps8.lat: 25.936824
    test 78 line 16 toUtmUps8.lon: 49.913598
    test 79 line 17 toUtmUps8.easting: 2622214.380233
    test 80 line 17 toUtmUps8.northing: 8678923.984567
    test 81 line 17 toUtmUps8.gamma: 61.697275
    test 82 line 17 toUtmUps8.scale: 1.084810
    test 83 line 17 toUtmUps8.lat: 64.402196
    test 84 line 17 toUtmUps8.lon: 64.091395

    test skipped (4): line 18 toUtmUps8.'48.451353594584 84.856197560189 5068474.169632778036 9492066.9937094951003 83.156739839119105102 1.3299901985118008373'
    test 85 line 19 toUtmUps8.easting: 738062.047779
    test 86 line 19 toUtmUps8.northing: 3031007.074116
    test 87 line 19 toUtmUps8.gamma: 3.416802
    test 88 line 19 toUtmUps8.scale: 1.006332
    test 89 line 19 toUtmUps8.lat: 27.203895
    test 90 line 19 toUtmUps8.lon: 7.440229
    test 91 line 20 toUtmUps8.easting: 1944413.834565
    test 92 line 20 toUtmUps8.northing: 9613299.224493
    test 93 line 20 toUtmUps8.gamma: 78.462831
    test 94 line 20 toUtmUps8.scale: 1.046134
    test 95 line 20 toUtmUps8.lat: 72.509000
    test 96 line 20 toUtmUps8.lon: 78.982283
    test 97 line 21 toUtmUps8.easting: 2114521.418406
    test 98 line 21 toUtmUps8.northing: 4954077.440098
    test 99 line 21 toUtmUps8.gamma: 17.571878
    test 100 line 21 toUtmUps8.scale: 1.055093
    test 101 line 21 toUtmUps8.lat: 41.824954
    test 102 line 21 toUtmUps8.lon: 25.392744
    test 103 line 22 toUtmUps8.easting: 620365.905090
    test 104 line 22 toUtmUps8.northing: 4755542.026562
    test 105 line 22 toUtmUps8.gamma: 5.152022
    test 106 line 22 toUtmUps8.scale: 1.004338
    test 107 line 22 toUtmUps8.lat: 42.701376
    test 108 line 22 toUtmUps8.lon: 7.572738
    test 109 line 23 toUtmUps8.easting: 263004.770989
    test 110 line 23 toUtmUps8.northing: 4493669.762451
    test 111 line 23 toUtmUps8.gamma: 2.020523
    test 112 line 23 toUtmUps8.scale: 1.000452
    test 113 line 23 toUtmUps8.lat: 40.552052
    test 114 line 23 toUtmUps8.lon: 3.106056
    test 115 line 24 toUtmUps8.easting: 3217221.739462
    test 116 line 24 toUtmUps8.northing: 437776.119161
    test 117 line 24 toUtmUps8.gamma: 1.848169
    test 118 line 24 toUtmUps8.scale: 1.130558
    test 119 line 24 toUtmUps8.lat: 3.501242
    test 120 line 24 toUtmUps8.lon: 27.806507

    test skipped (5): line 25 toUtmUps8.'10.148714782203 85.373767569431 14661142.4449607145297 7476100.8241849819567 68.376669038799719822 4.89664968310721668858'
    test 121 line 26 toUtmUps8.easting: 967777.158554
    test 122 line 26 toUtmUps8.northing: 6615684.266592
    test 123 line 26 toUtmUps8.gamma: 14.410044
    test 124 line 26 toUtmUps8.scale: 1.011100
    test 125 line 26 toUtmUps8.lat: 58.582623
    test 126 line 26 toUtmUps8.lon: 16.755558
    test 127 line 27 toUtmUps8.easting: 7558840.728461
    test 128 line 27 toUtmUps8.northing: 4144728.130764
    test 129 line 27 toUtmUps8.gamma: 32.557264
    test 130 line 27 toUtmUps8.scale: 1.791490
    test 131 line 27 toUtmUps8.lat: 19.793004
    test 132 line 27 toUtmUps8.lon: 61.746763
    test 133 line 28 toUtmUps8.easting: 1056008.314161
    test 134 line 28 toUtmUps8.northing: 9290799.692669
    test 135 line 28 toUtmUps8.gamma: 55.843278
    test 136 line 28 toUtmUps8.scale: 1.013253
    test 137 line 28 toUtmUps8.lat: 78.666776
    test 138 line 28 toUtmUps8.lon: 56.365355
    test 139 line 29 toUtmUps8.easting: 1943965.134687
    test 140 line 29 toUtmUps8.northing: 1389972.228690
    test 141 line 29 toUtmUps8.gamma: 3.774869
    test 142 line 29 toUtmUps8.scale: 1.046724
    test 143 line 29 toUtmUps8.lat: 11.998788
    test 144 line 29 toUtmUps8.lon: 17.597873
    test 145 line 30 toUtmUps8.easting: 5803077.072902
    test 146 line 30 toUtmUps8.northing: 5649957.943659
    test 147 line 30 toUtmUps8.gamma: 41.717943
    test 148 line 30 toUtmUps8.scale: 1.442572
    test 149 line 30 toUtmUps8.lat: 32.540378
    test 150 line 30 toUtmUps8.lon: 58.764613
    test 151 line 31 toUtmUps8.easting: 2928716.986009
    test 152 line 31 toUtmUps8.northing: 5731835.058317
    test 153 line 31 toUtmUps8.gamma: 28.538550
    test 154 line 31 toUtmUps8.scale: 1.106780
    test 155 line 31 toUtmUps8.lat: 45.160356
    test 156 line 31 toUtmUps8.lon: 37.465285
    test 157 line 32 toUtmUps8.easting: 326141.975756
    test 158 line 32 toUtmUps8.northing: 8881325.164543
    test 159 line 32 toUtmUps8.gamma: 16.111415
    test 160 line 32 toUtmUps8.scale: 1.000900
    test 161 line 32 toUtmUps8.lat: 79.584190
    test 162 line 32 toUtmUps8.lon: 16.367006
    test 163 line 33 toUtmUps8.easting: 3933015.267450
    test 164 line 33 toUtmUps8.northing: 7932373.909512
    test 165 line 33 toUtmUps8.gamma: 58.577424
    test 166 line 33 toUtmUps8.scale: 1.194811
    test 167 line 33 toUtmUps8.lat: 52.470664
    test 168 line 33 toUtmUps8.lon: 64.125580
    test 169 line 34 toUtmUps8.easting: 8598926.983213
    test 170 line 34 toUtmUps8.northing: 6214135.167503
    test 171 line 34 toUtmUps8.gamma: 52.612878
    test 172 line 34 toUtmUps8.scale: 2.051367
    test 173 line 34 toUtmUps8.lat: 23.702673
    test 174 line 34 toUtmUps8.lon: 72.630363
    test 175 line 35 toUtmUps8.easting: 6620553.333772
    test 176 line 35 toUtmUps8.northing: 6540527.122948
    test 177 line 35 toUtmUps8.gamma: 52.350140
    test 178 line 35 toUtmUps8.scale: 1.586614
    test 179 line 35 toUtmUps8.lat: 32.603520
    test 180 line 35 toUtmUps8.lon: 67.280123
    test 181 line 36 toUtmUps8.easting: 1515136.758292
    test 182 line 36 toUtmUps8.northing: 3858996.087537
    test 183 line 36 toUtmUps8.gamma: 9.225127
    test 184 line 36 toUtmUps8.scale: 1.028029
    test 185 line 36 toUtmUps8.lat: 33.776224
    test 186 line 36 toUtmUps8.lon: 16.280993
    test 187 line 37 toUtmUps8.easting: 479854.373445
    test 188 line 37 toUtmUps8.northing: 8980501.389896
    test 189 line 37 toUtmUps8.gamma: 25.021222
    test 190 line 37 toUtmUps8.scale: 1.002415
    test 191 line 37 toUtmUps8.lat: 79.932747
    test 192 line 37 toUtmUps8.lon: 25.363622
    test 193 line 38 toUtmUps8.easting: 5243446.564940
    test 194 line 38 toUtmUps8.northing: 140657.213960
    test 195 line 38 toUtmUps8.gamma: 0.862817
    test 196 line 38 toUtmUps8.scale: 1.360358
    test 197 line 38 toUtmUps8.lat: 0.935056
    test 198 line 38 toUtmUps8.lon: 42.538824

    test skipped (6): line 39 toUtmUps8.'13.490862440668 83.178380075606 12806457.9232176809509 7170118.6846750266674 64.708921319446620085 3.7405880916836789809'
    test 199 line 40 toUtmUps8.easting: 1202993.459158
    test 200 line 40 toUtmUps8.northing: 5557316.053599
    test 201 line 40 toUtmUps8.gamma: 12.579061
    test 202 line 40 toUtmUps8.scale: 1.017426
    test 203 line 40 toUtmUps8.lat: 48.979057
    test 204 line 40 toUtmUps8.lon: 16.474542
    test 205 line 41 toUtmUps8.easting: 1729088.710196
    test 206 line 41 toUtmUps8.northing: 7770874.289954
    test 207 line 41 toUtmUps8.gamma: 36.021783
    test 208 line 41 toUtmUps8.scale: 1.036397
    test 209 line 41 toUtmUps8.lat: 65.036016
    test 210 line 41 toUtmUps8.lon: 38.729091
    test 211 line 42 toUtmUps8.easting: 2437301.517425
    test 212 line 42 toUtmUps8.northing: 5539327.748318
    test 213 line 42 toUtmUps8.gamma: 23.461879
    test 214 line 42 toUtmUps8.scale: 1.073459
    test 215 line 42 toUtmUps8.lat: 45.510091
    test 216 line 42 toUtmUps8.lon: 31.303729
    test 217 line 43 toUtmUps8.easting: 3647186.135066
    test 218 line 43 toUtmUps8.northing: 2086412.330983
    test 219 line 43 toUtmUps8.gamma: 10.023991
    test 220 line 43 toUtmUps8.scale: 1.168707
    test 221 line 43 toUtmUps8.lat: 16.058010
    test 222 line 43 toUtmUps8.lon: 32.520026
    test 223 line 44 toUtmUps8.easting: 1818497.243556
    test 224 line 44 toUtmUps8.northing: 4275471.745057
    test 225 line 44 toUtmUps8.gamma: 12.499656
    test 226 line 44 toUtmUps8.scale: 1.040604
    test 227 line 44 toUtmUps8.lat: 36.845200
    test 228 line 44 toUtmUps8.lon: 20.282283
    test 229 line 45 toUtmUps8.easting: 3751304.113783
    test 230 line 45 toUtmUps8.northing: 5130454.001592
    test 231 line 45 toUtmUps8.gamma: 28.959707
    test 232 line 45 toUtmUps8.scale: 1.177681
    test 233 line 45 toUtmUps8.lat: 37.865481
    test 234 line 45 toUtmUps8.lon: 41.990402
    test 235 line 46 toUtmUps8.easting: 2616733.138544
    test 236 line 46 toUtmUps8.northing: 394644.463815
    test 237 line 46 toUtmUps8.gamma: 1.390425
    test 238 line 46 toUtmUps8.scale: 1.085595
    test 239 line 46 toUtmUps8.lat: 3.287272
    test 240 line 46 toUtmUps8.lon: 22.917604
    test 241 line 47 toUtmUps8.easting: 1756506.573942
    test 242 line 47 toUtmUps8.northing: 5570393.986394
    test 243 line 47 toUtmUps8.gamma: 17.897894
    test 244 line 47 toUtmUps8.scale: 1.037732
    test 245 line 47 toUtmUps8.lat: 47.813686
    test 246 line 47 toUtmUps8.lon: 23.545092
    test 247 line 48 toUtmUps8.easting: 8752461.894711
    test 248 line 48 toUtmUps8.northing: 6087728.152284
    test 249 line 48 toUtmUps8.gamma: 51.628465
    test 250 line 48 toUtmUps8.scale: 2.095465
    test 251 line 48 toUtmUps8.lat: 22.836853
    test 252 line 48 toUtmUps8.lon: 72.604385
    test 253 line 49 toUtmUps8.easting: 1309272.216432
    test 254 line 49 toUtmUps8.northing: 59520.028899
    test 255 line 49 toUtmUps8.gamma: 0.109069
    test 256 line 49 toUtmUps8.scale: 1.020897
    test 257 line 49 toUtmUps8.lat: 0.527262
    test 258 line 49 toUtmUps8.lon: 11.684209
    test 259 line 50 toUtmUps8.easting: 328652.277129
    test 260 line 50 toUtmUps8.northing: 2233043.958874
    test 261 line 50 toUtmUps8.gamma: 1.084863
    test 262 line 50 toUtmUps8.scale: 1.000935
    test 263 line 50 toUtmUps8.lat: 20.166742
    test 264 line 50 toUtmUps8.lon: 3.143948

    test skipped (7): line 51 toUtmUps8.'28.604629015528 85.988721094779 8637959.7164470998207 9190635.1560309800028 81.802562643198123218 2.05432863342852874819'

    test skipped (8): line 52 toUtmUps8.'28.984047991106 85.833447775172 8548521.4551470334531 9172410.9432821880799 81.583928102890161419 2.02964145862183583179'
    test 265 line 53 toUtmUps8.easting: 796987.281104
    test 266 line 53 toUtmUps8.northing: 7677446.357675
    test 267 line 53 toUtmUps8.gamma: 18.084472
    test 268 line 53 toUtmUps8.scale: 1.007381
    test 269 line 53 toUtmUps8.lat: 68.071020
    test 270 line 53 toUtmUps8.lon: 19.392823

    test skipped (9): line 54 toUtmUps8.'61.416576191872 81.981611413918 3291036.4967623295988 9513199.6006662170596 80.890253980644739593 1.13482563910814382209'
    test 271 line 55 toUtmUps8.easting: 7087225.330906
    test 272 line 55 toUtmUps8.northing: 8382823.855822
    test 273 line 55 toUtmUps8.gamma: 72.253756
    test 274 line 55 toUtmUps8.scale: 1.678070
    test 275 line 55 toUtmUps8.lat: 35.074753
    test 276 line 55 toUtmUps8.lon: 79.496003
    test 277 line 56 toUtmUps8.easting: 5090358.125724
    test 278 line 56 toUtmUps8.northing: 4318294.133489
    test 279 line 56 toUtmUps8.gamma: 28.266280
    test 280 line 56 toUtmUps8.scale: 1.336264
    test 281 line 56 toUtmUps8.lat: 28.078790
    test 282 line 56 toUtmUps8.lon: 48.684350

    test skipped (10): line 57 toUtmUps8.'84.986930137199 2.067177857261 20163.0752214330146 9438635.9888499043815 2.059277291707588222 .99960496589466017622'
    test 283 line 58 toUtmUps8.easting: 3447670.550785
    test 284 line 58 toUtmUps8.northing: 3680238.888223
    test 285 line 58 toUtmUps8.gamma: 17.934948
    test 286 line 58 toUtmUps8.scale: 1.149831
    test 287 line 58 toUtmUps8.lat: 28.473948
    test 288 line 58 toUtmUps8.lon: 34.127306
    test 289 line 59 toUtmUps8.easting: 3396522.906798
    test 290 line 59 toUtmUps8.northing: 8093659.687593
    test 291 line 59 toUtmUps8.gamma: 57.747117
    test 292 line 59 toUtmUps8.scale: 1.144006
    test 293 line 59 toUtmUps8.lat: 56.629354
    test 294 line 59 toUtmUps8.lon: 62.196474
    test 295 line 60 toUtmUps8.easting: 11249894.100794  FAILED, KNOWN, expected 11249894.100784
    test 296 line 60 toUtmUps8.northing: 1619226.506360  FAILED, KNOWN, expected 1619226.506299
    test 297 line 60 toUtmUps8.gamma: 14.210358
    test 298 line 60 toUtmUps8.scale: 3.048347
    test 299 line 60 toUtmUps8.lat: 4.747762
    test 300 line 60 toUtmUps8.lon: 70.932555
    test 301 line 61 toUtmUps8.easting: 6808805.230950
    test 302 line 61 toUtmUps8.northing: 8044779.777369
    test 303 line 61 toUtmUps8.gamma: 68.242008
    test 304 line 61 toUtmUps8.scale: 1.621464
    test 305 line 61 toUtmUps8.lat: 35.882113
    test 306 line 61 toUtmUps8.lon: 76.741849
    test 307 line 62 toUtmUps8.easting: 2306021.556506
    test 308 line 62 toUtmUps8.northing: 757191.592866
    test 309 line 62 toUtmUps8.gamma: 2.385686
    test 310 line 62 toUtmUps8.scale: 1.066159
    test 311 line 62 toUtmUps8.lat: 6.420705
    test 312 line 62 toUtmUps8.lon: 20.416028
    test 313 line 63 toUtmUps8.easting: 1547406.313862
    test 314 line 63 toUtmUps8.northing: 6048712.751824
    test 315 line 63 toUtmUps8.gamma: 18.474372
    test 316 line 63 toUtmUps8.scale: 1.029123
    test 317 line 63 toUtmUps8.lat: 52.335248
    test 318 line 63 toUtmUps8.lon: 22.879294
    test 319 line 64 toUtmUps8.easting: 2430467.650383
    test 320 line 64 toUtmUps8.northing: 7557167.613972
    test 321 line 64 toUtmUps8.gamma: 42.110021
    test 322 line 64 toUtmUps8.scale: 1.072759
    test 323 line 64 toUtmUps8.lat: 59.846391
    test 324 line 64 toUtmUps8.lon: 46.262536
    test 325 line 65 toUtmUps8.easting: 2334053.905830
    test 326 line 65 toUtmUps8.northing: 1948076.966582
    test 327 line 65 toUtmUps8.gamma: 6.353185
    test 328 line 65 toUtmUps8.scale: 1.067733
    test 329 line 65 toUtmUps8.lat: 16.461790
    test 330 line 65 toUtmUps8.lon: 21.433269
    test 331 line 66 toUtmUps8.easting: 5564175.186737
    test 332 line 66 toUtmUps8.northing: 1836851.660412
    test 333 line 66 toUtmUps8.gamma: 11.870682
    test 334 line 66 toUtmUps8.scale: 1.408265
    test 335 line 66 toUtmUps8.lat: 11.707905
    test 336 line 66 toUtmUps8.lon: 45.827075
    test 337 line 67 toUtmUps8.easting: 6118505.590359
    test 338 line 67 toUtmUps8.northing: 7631684.552421
    test 339 line 67 toUtmUps8.gamma: 62.477323
    test 340 line 67 toUtmUps8.scale: 1.493420
    test 341 line 67 toUtmUps8.lat: 38.519075
    test 342 line 67 toUtmUps8.lon: 71.935918

    test skipped (11): line 68 toUtmUps8.'34.264007222954 82.647878110272 7365359.2946646287171 8818194.4515306837741 77.207042218974141605 1.73763853091849729372'
    test 343 line 69 toUtmUps8.easting: 36187.342415
    test 344 line 69 toUtmUps8.northing: 2142565.324802
    test 345 line 69 toUtmUps8.gamma: 0.114334
    test 346 line 69 toUtmUps8.scale: 0.999616
    test 347 line 69 toUtmUps8.lat: 19.376880
    test 348 line 69 toUtmUps8.lon: 0.344605
    test 349 line 70 toUtmUps8.easting: 2380328.546851
    test 350 line 70 toUtmUps8.northing: 8440109.872384
    test 351 line 70 toUtmUps8.gamma: 55.076067
    test 352 line 70 toUtmUps8.scale: 1.069658
    test 353 line 70 toUtmUps8.lat: 65.075805
    test 354 line 70 toUtmUps8.lon: 57.653438
    test 355 line 71 toUtmUps8.easting: 582511.608826
    test 356 line 71 toUtmUps8.northing: 8876047.217071
    test 357 line 71 toUtmUps8.gamma: 27.133300
    test 358 line 71 toUtmUps8.scale: 1.003749
    test 359 line 71 toUtmUps8.lat: 78.691870
    test 360 line 71 toUtmUps8.lon: 27.591736
    test 361 line 72 toUtmUps8.easting: 899441.350477
    test 362 line 72 toUtmUps8.northing: 4582046.430516
    test 363 line 72 toUtmUps8.gamma: 7.031211
    test 364 line 72 toUtmUps8.scale: 1.009573
    test 365 line 72 toUtmUps8.lat: 40.893022
    test 366 line 72 toUtmUps8.lon: 10.668804

    test skipped (12): line 73 toUtmUps8.'48.914278679322 87.35926802682 5022485.1243369246483 9741774.9337207800497 86.505947369926030588 1.32369954850478170836'
    test 367 line 74 toUtmUps8.easting: 6701004.587204
    test 368 line 74 toUtmUps8.northing: 2954368.258231
    test 369 line 74 toUtmUps8.gamma: 21.560153
    test 370 line 74 toUtmUps8.scale: 1.608554
    test 371 line 74 toUtmUps8.lat: 16.208377
    test 372 line 74 toUtmUps8.lon: 54.494282
    test 373 line 75 toUtmUps8.easting: 454986.218897
    test 374 line 75 toUtmUps8.northing: 4885087.887884
    test 375 line 75 toUtmUps8.gamma: 3.945648
    test 376 line 75 toUtmUps8.scale: 1.002147
    test 377 line 75 toUtmUps8.lat: 43.977936
    test 378 line 75 toUtmUps8.lon: 5.672541

    test skipped (13): line 76 toUtmUps8.'26.850860749352 82.834479937822 8903956.1403106503714 8470608.5774824981183 74.723116471645531699 2.13131124920824155268'
    test 379 line 77 toUtmUps8.easting: 1547627.594741
    test 380 line 77 toUtmUps8.northing: 6036584.538347
    test 381 line 77 toUtmUps8.gamma: 18.407629
    test 382 line 77 toUtmUps8.scale: 1.029132
    test 383 line 77 toUtmUps8.lat: 52.234165
    test 384 line 77 toUtmUps8.lon: 22.827655
    test 385 line 78 toUtmUps8.easting: 5221488.778597
    test 386 line 78 toUtmUps8.northing: 1762592.044392
    test 387 line 78 toUtmUps8.gamma: 10.927880
    test 388 line 78 toUtmUps8.scale: 1.356721
    test 389 line 78 toUtmUps8.lat: 11.674646
    test 390 line 78 toUtmUps8.lon: 43.500147
    test 391 line 79 toUtmUps8.easting: 4880570.297161
    test 392 line 79 toUtmUps8.northing: 3325433.988867
    test 393 line 79 toUtmUps8.gamma: 20.469862
    test 394 line 79 toUtmUps8.scale: 1.308476
    test 395 line 79 toUtmUps8.lat: 22.492753
    test 396 line 79 toUtmUps8.lon: 44.179153

    test skipped (14): line 80 toUtmUps8.'.910999463005 88.548822916123 23930680.0826936110445 7491462.0990379651261 75.937628056628715446 15.55636485152285563369'
    test 397 line 81 toUtmUps8.easting: 71519.450458
    test 398 line 81 toUtmUps8.northing: 3654740.444852
    test 399 line 81 toUtmUps8.gamma: 0.417448
    test 400 line 81 toUtmUps8.scale: 0.999663
    test 401 line 81 toUtmUps8.lat: 33.028802
    test 402 line 81 toUtmUps8.lon: 0.765843
    test 403 line 82 toUtmUps8.easting: 4152797.795220
    test 404 line 82 toUtmUps8.northing: 7823098.502751
    test 405 line 82 toUtmUps8.gamma: 58.238901
    test 406 line 82 toUtmUps8.scale: 1.218052
    test 407 line 82 toUtmUps8.lat: 50.649195
    test 408 line 82 toUtmUps8.lon: 64.389076
    test 409 line 83 toUtmUps8.easting: 2926725.707639
    test 410 line 83 toUtmUps8.northing: 7904918.072844
    test 411 line 83 toUtmUps8.gamma: 51.592748
    test 412 line 83 toUtmUps8.scale: 1.106206
    test 413 line 83 toUtmUps8.lat: 58.820640
    test 414 line 83 toUtmUps8.lon: 55.841048
    test 415 line 84 toUtmUps8.easting: 1325509.113869
    test 416 line 84 toUtmUps8.northing: 9675214.948213
    test 417 line 84 toUtmUps8.gamma: 76.116213
    test 418 line 84 toUtmUps8.scale: 1.021136
    test 419 line 84 toUtmUps8.lat: 77.865762
    test 420 line 84 toUtmUps8.lon: 76.414618
    test 421 line 85 toUtmUps8.easting: 3045296.448926
    test 422 line 85 toUtmUps8.northing: 542153.443280
    test 423 line 85 toUtmUps8.gamma: 2.185095
    test 424 line 85 toUtmUps8.scale: 1.116664
    test 425 line 85 toUtmUps8.lat: 4.389639
    test 426 line 85 toUtmUps8.lon: 26.458976
    test 427 line 86 toUtmUps8.easting: 11843870.887791  FAILED, KNOWN, expected 11843870.887518
    test 428 line 86 toUtmUps8.northing: 5912803.073690  FAILED, KNOWN, expected 5912803.073343
    test 429 line 86 toUtmUps8.gamma: 52.814260  FAILED, KNOWN, expected 52.814259
    test 430 line 86 toUtmUps8.scale: 3.267256
    test 431 line 86 toUtmUps8.lat: 13.924448
    test 432 line 86 toUtmUps8.lon: 79.017873
    test 433 line 87 toUtmUps8.easting: 8891099.704936
    test 434 line 87 toUtmUps8.northing: 162160.142227
    test 435 line 87 toUtmUps8.gamma: 1.312094
    test 436 line 87 toUtmUps8.scale: 2.157363
    test 437 line 87 toUtmUps8.lat: 0.679713
    test 438 line 87 toUtmUps8.lon: 62.036792
    test 439 line 88 toUtmUps8.easting: 4784814.214449
    test 440 line 88 toUtmUps8.northing: 2984497.432580
    test 441 line 88 toUtmUps8.gamma: 17.946545
    test 442 line 88 toUtmUps8.scale: 1.296116
    test 443 line 88 toUtmUps8.lat: 20.478281
    test 444 line 88 toUtmUps8.lon: 42.678234
    test 445 line 89 toUtmUps8.easting: 1772074.682154
    test 446 line 89 toUtmUps8.northing: 9491552.560143
    test 447 line 89 toUtmUps8.gamma: 73.634830
    test 448 line 89 toUtmUps8.scale: 1.038202
    test 449 line 89 toUtmUps8.lat: 73.695703
    test 450 line 89 toUtmUps8.lon: 74.259097
    test 451 line 90 toUtmUps8.easting: 1907649.782106
    test 452 line 90 toUtmUps8.northing: 6994232.429379
    test 453 line 90 toUtmUps8.gamma: 29.718929
    test 454 line 90 toUtmUps8.scale: 1.044503
    test 455 line 90 toUtmUps8.lat: 58.569370
    test 456 line 90 toUtmUps8.lon: 33.777549
    test 457 line 91 toUtmUps8.easting: 2084423.818962
    test 458 line 91 toUtmUps8.northing: 2211816.035619
    test 459 line 91 toUtmUps8.gamma: 6.556448
    test 460 line 91 toUtmUps8.scale: 1.053793
    test 461 line 91 toUtmUps8.lat: 18.933881
    test 462 line 91 toUtmUps8.lon: 19.492695
    test 463 line 92 toUtmUps8.easting: 1064373.671729
    test 464 line 92 toUtmUps8.northing: 7812482.547461
    test 465 line 92 toUtmUps8.gamma: 24.874124
    test 466 line 92 toUtmUps8.scale: 1.013490
    test 467 line 92 toUtmUps8.lat: 68.317934
    test 468 line 92 toUtmUps8.lon: 26.515687

    test skipped (15): line 93 toUtmUps8.'50.641941364984 87.111556505544 4770385.4792965339274 9734318.9029801439364 86.27311877223132818 1.29055338238288419467'
    test 469 line 94 toUtmUps8.easting: 6398096.677297
    test 470 line 94 toUtmUps8.northing: 4410894.752104
    test 471 line 94 toUtmUps8.gamma: 32.558023
    test 472 line 94 toUtmUps8.scale: 1.548004
    test 473 line 94 toUtmUps8.lat: 24.411298
    test 474 line 94 toUtmUps8.lon: 56.881823
    test 475 line 95 toUtmUps8.easting: 3138623.300415
    test 476 line 95 toUtmUps8.northing: 3082960.600798
    test 477 line 95 toUtmUps8.gamma: 13.557672
    test 478 line 95 toUtmUps8.scale: 1.123724
    test 479 line 95 toUtmUps8.lat: 24.571871
    test 480 line 95 toUtmUps8.lon: 30.073097
    test 481 line 96 toUtmUps8.easting: 2748325.794651
    test 482 line 96 toUtmUps8.northing: 4202811.912668
    test 483 line 96 toUtmUps8.gamma: 17.578706
    test 484 line 96 toUtmUps8.scale: 1.094102
    test 485 line 96 toUtmUps8.lat: 34.202576
    test 486 line 96 toUtmUps8.lon: 29.383166
    test 487 line 97 toUtmUps8.easting: 6677830.630367
    test 488 line 97 toUtmUps8.northing: 5350071.837395
    test 489 line 97 toUtmUps8.gamma: 41.306641
    test 490 line 97 toUtmUps8.scale: 1.599774
    test 491 line 97 toUtmUps8.lat: 27.756285
    test 492 line 97 toUtmUps8.lon: 61.881905
    test 493 line 98 toUtmUps8.easting: 5941536.667431
    test 494 line 98 toUtmUps8.northing: 3293112.175140
    test 495 line 98 toUtmUps8.gamma: 22.752845
    test 496 line 98 toUtmUps8.scale: 1.468473
    test 497 line 98 toUtmUps8.lat: 19.742270
    test 498 line 98 toUtmUps8.lon: 50.957821
    test 499 line 99 toUtmUps8.easting: 3152481.792567
    test 500 line 99 toUtmUps8.northing: 5903048.837978
    test 501 line 99 toUtmUps8.gamma: 31.494606
    test 502 line 99 toUtmUps8.scale: 1.124085
    test 503 line 99 toUtmUps8.lat: 45.453582
    test 504 line 99 toUtmUps8.lon: 40.659833
    test 505 line 100 toUtmUps8.easting: 10460475.897726  FAILED, KNOWN, expected 10460475.897730
    test 506 line 100 toUtmUps8.northing: 2553463.624385  FAILED, KNOWN, expected 2553463.624391
    test 507 line 100 toUtmUps8.gamma: 21.965869
    test 508 line 100 toUtmUps8.scale: 2.700296
    test 509 line 100 toUtmUps8.lat: 8.322144
    test 510 line 100 toUtmUps8.lon: 69.488157
    test 511 line 101 toUtmUps8.easting: 1964010.778021
    test 512 line 101 toUtmUps8.northing: 5634042.923056
    test 513 line 101 toUtmUps8.gamma: 20.117800
    test 514 line 101 toUtmUps8.scale: 1.047344
    test 515 line 101 toUtmUps8.lat: 47.749831
    test 516 line 101 toUtmUps8.lon: 26.322002
    test 517 line 102 toUtmUps8.easting: 2065306.424934
    test 518 line 102 toUtmUps8.northing: 2135008.468651
    test 519 line 102 toUtmUps8.gamma: 6.258981
    test 520 line 102 toUtmUps8.scale: 1.052800
    test 521 line 102 toUtmUps8.lat: 18.297493
    test 522 line 102 toUtmUps8.lon: 19.244669
    test 523 line 103 toUtmUps8.easting: 5127738.132976
    test 524 line 103 toUtmUps8.northing: 6793804.304411
    test 525 line 103 toUtmUps8.gamma: 50.557915
    test 526 line 103 toUtmUps8.scale: 1.339412
    test 527 line 103 toUtmUps8.lat: 40.834541
    test 528 line 103 toUtmUps8.lon: 61.650750
    test 529 line 104 toUtmUps8.easting: 8385525.148166
    test 530 line 104 toUtmUps8.northing: 6924932.344306
    test 531 line 104 toUtmUps8.gamma: 59.087561
    test 532 line 104 toUtmUps8.scale: 1.990364
    test 533 line 104 toUtmUps8.lat: 26.273247
    test 534 line 104 toUtmUps8.lon: 74.926694
    test 535 line 105 toUtmUps8.easting: 2297510.791909
    test 536 line 105 toUtmUps8.northing: 2805666.962834
    test 537 line 105 toUtmUps8.gamma: 9.301553
    test 538 line 105 toUtmUps8.scale: 1.065508
    test 539 line 105 toUtmUps8.lat: 23.698347
    test 540 line 105 toUtmUps8.lon: 22.155657

    test skipped (16): line 106 toUtmUps8.'12.364112546807 86.348578425071 13749544.9176345767153 8288728.3846500523233 75.033969786420407131 4.27058754359004466627'
    test 541 line 107 toUtmUps8.easting: 317518.455546
    test 542 line 107 toUtmUps8.northing: 1097517.583745
    test 543 line 107 toUtmUps8.gamma: 0.499004
    test 544 line 107 toUtmUps8.scale: 1.000848
    test 545 line 107 toUtmUps8.lat: 9.916091
    test 546 line 107 toUtmUps8.lon: 2.895277
    test 547 line 108 toUtmUps8.easting: 3856035.184888
    test 548 line 108 toUtmUps8.northing: 9141364.450290
    test 549 line 108 toUtmUps8.gamma: 75.972763
    test 550 line 108 toUtmUps8.scale: 1.186786
    test 551 line 108 toUtmUps8.lat: 56.553876
    test 552 line 108 toUtmUps8.lon: 78.215077
    test 553 line 109 toUtmUps8.easting: 1457484.942823
    test 554 line 109 toUtmUps8.northing: 9385297.101973
    test 555 line 109 toUtmUps8.gamma: 66.784662
    test 556 line 109 toUtmUps8.scale: 1.025660
    test 557 line 109 toUtmUps8.lat: 75.957631
    test 558 line 109 toUtmUps8.lon: 67.407383
    test 559 line 110 toUtmUps8.easting: 1304934.901841
    test 560 line 110 toUtmUps8.northing: 3604655.155715
    test 561 line 110 toUtmUps8.gamma: 7.343989
    test 562 line 110 toUtmUps8.scale: 1.020672
    test 563 line 110 toUtmUps8.lat: 31.826531
    test 564 line 110 toUtmUps8.lon: 13.731050
    test 565 line 111 toUtmUps8.easting: 1399093.491792
    test 566 line 111 toUtmUps8.northing: 8314607.120342
    test 567 line 111 toUtmUps8.gamma: 38.630161
    test 568 line 111 toUtmUps8.scale: 1.023625
    test 569 line 111 toUtmUps8.lat: 70.542985
    test 570 line 111 toUtmUps8.lon: 40.282055
    test 571 line 112 toUtmUps8.easting: 356983.618540
    test 572 line 112 toUtmUps8.northing: 4282309.048994
    test 573 line 112 toUtmUps8.gamma: 2.561485
    test 574 line 112 toUtmUps8.scale: 1.001170
    test 575 line 112 toUtmUps8.lat: 38.617487
    test 576 line 112 toUtmUps8.lon: 4.099838
    test 577 line 113 toUtmUps8.easting: 9952911.325092  FAILED, KNOWN, expected 9952911.325091
    test 578 line 113 toUtmUps8.northing: 1510288.212230  FAILED, KNOWN, expected 1510288.212229
    test 579 line 113 toUtmUps8.gamma: 12.752154
    test 580 line 113 toUtmUps8.scale: 2.511357
    test 581 line 113 toUtmUps8.lat: 5.389447
    test 582 line 113 toUtmUps8.lon: 66.729612
    test 583 line 114 toUtmUps8.easting: 6367592.504007
    test 584 line 114 toUtmUps8.northing: 1200437.077672
    test 585 line 114 toUtmUps8.gamma: 8.338041
    test 586 line 114 toUtmUps8.scale: 1.546210
    test 587 line 114 toUtmUps8.lat: 6.995168
    test 588 line 114 toUtmUps8.lon: 50.014763
    test 589 line 115 toUtmUps8.easting: 4391263.676460
    test 590 line 115 toUtmUps8.northing: 6325455.989408
    test 591 line 115 toUtmUps8.gamma: 42.653541
    test 592 line 115 toUtmUps8.scale: 1.245560
    test 593 line 115 toUtmUps8.lat: 42.321894
    test 594 line 115 toUtmUps8.lon: 53.784040
    test 595 line 116 toUtmUps8.easting: 6209880.527527
    test 596 line 116 toUtmUps8.northing: 2154754.449747
    test 597 line 116 toUtmUps8.gamma: 14.919512
    test 598 line 116 toUtmUps8.scale: 1.516560
    test 599 line 116 toUtmUps8.lat: 12.698515
    test 600 line 116 toUtmUps8.lon: 50.242047
    test 601 line 117 toUtmUps8.easting: 1507053.688772
    test 602 line 117 toUtmUps8.northing: 6261383.513280
    test 603 line 117 toUtmUps8.gamma: 19.280373
    test 604 line 117 toUtmUps8.scale: 1.027584
    test 605 line 117 toUtmUps8.lat: 54.207636
    test 606 line 117 toUtmUps8.lon: 23.325731
    test 607 line 118 toUtmUps8.easting: 8332725.003777
    test 608 line 118 toUtmUps8.northing: 3002712.329753
    test 609 line 118 toUtmUps8.gamma: 24.059212
    test 610 line 118 toUtmUps8.scale: 1.990450
    test 611 line 118 toUtmUps8.lat: 13.224787
    test 612 line 118 toUtmUps8.lon: 62.426698
    test 613 line 119 toUtmUps8.easting: 3958910.085235
    test 614 line 119 toUtmUps8.northing: 3462284.926102
    test 615 line 119 toUtmUps8.gamma: 18.546398
    test 616 line 119 toUtmUps8.scale: 1.199351
    test 617 line 119 toUtmUps8.lat: 25.650282
    test 618 line 119 toUtmUps8.lon: 37.710391

    test skipped (17): line 120 toUtmUps8.'20.684773383075 82.849734261238 10452892.2820830090734 8000059.6051139389546 71.07524025411428855 2.6501109339363854772'
    test 619 line 121 toUtmUps8.easting: 496148.253731
    test 620 line 121 toUtmUps8.northing: 6388503.365043
    test 621 line 121 toUtmUps8.gamma: 6.970955
    test 622 line 121 toUtmUps8.scale: 1.002620
    test 623 line 121 toUtmUps8.lat: 57.367533
    test 624 line 121 toUtmUps8.lon: 8.260866
    test 625 line 122 toUtmUps8.easting: 7375792.085850
    test 626 line 122 toUtmUps8.northing: 5544624.072155
    test 627 line 122 toUtmUps8.gamma: 44.510851
    test 628 line 122 toUtmUps8.scale: 1.745898
    test 629 line 122 toUtmUps8.lat: 25.958757
    test 630 line 122 toUtmUps8.lon: 65.760477
    test 631 line 123 toUtmUps8.easting: 2826258.041979
    test 632 line 123 toUtmUps8.northing: 5167759.816959
    test 633 line 123 toUtmUps8.gamma: 23.783897
    test 634 line 123 toUtmUps8.scale: 1.099415
    test 635 line 123 toUtmUps8.lat: 41.395848
    test 636 line 123 toUtmUps8.lon: 33.661790
    test 637 line 124 toUtmUps8.easting: 3958563.378851
    test 638 line 124 toUtmUps8.northing: 8499923.231243
    test 639 line 124 toUtmUps8.gamma: 66.570945
    test 640 line 124 toUtmUps8.scale: 1.197296
    test 641 line 124 toUtmUps8.lat: 54.266617
    test 642 line 124 toUtmUps8.lon: 70.602199
    test 643 line 125 toUtmUps8.easting: 4408189.533462
    test 644 line 125 toUtmUps8.northing: 8046312.003642
    test 645 line 125 toUtmUps8.gamma: 62.216959
    test 646 line 125 toUtmUps8.scale: 1.246750
    test 647 line 125 toUtmUps8.lat: 49.840393
    test 648 line 125 toUtmUps8.lon: 68.036728
    test 649 line 126 toUtmUps8.easting: 3629225.627512
    test 650 line 126 toUtmUps8.northing: 6371258.454645
    test 651 line 126 toUtmUps8.gamma: 38.881675
    test 652 line 126 toUtmUps8.scale: 1.165511
    test 653 line 126 toUtmUps8.lat: 46.306035
    test 654 line 126 toUtmUps8.lon: 48.085828
    test 655 line 127 toUtmUps8.easting: 602838.450710
    test 656 line 127 toUtmUps8.northing: 4851370.637205
    test 657 line 127 toUtmUps8.gamma: 5.160395
    test 658 line 127 toUtmUps8.scale: 1.004073
    test 659 line 127 toUtmUps8.lat: 43.570988
    test 660 line 127 toUtmUps8.lon: 7.464494
    test 661 line 128 toUtmUps8.easting: 764616.665051
    test 662 line 128 toUtmUps8.northing: 2164299.337945
    test 663 line 128 toUtmUps8.gamma: 2.429300
    test 664 line 128 toUtmUps8.scale: 1.006835
    test 665 line 128 toUtmUps8.lat: 19.427290
    test 666 line 128 toUtmUps8.lon: 7.268247
    test 667 line 129 toUtmUps8.easting: 5048953.021931
    test 668 line 129 toUtmUps8.northing: 1885974.057398
    test 669 line 129 toUtmUps8.gamma: 11.459804
    test 670 line 129 toUtmUps8.scale: 1.332207
    test 671 line 129 toUtmUps8.lat: 12.713794
    test 672 line 129 toUtmUps8.lon: 42.507018
    test 673 line 130 toUtmUps8.easting: 2293996.601155
    test 674 line 130 toUtmUps8.northing: 2392408.644221
    test 675 line 130 toUtmUps8.gamma: 7.791838
    test 676 line 130 toUtmUps8.scale: 1.065348
    test 677 line 130 toUtmUps8.lat: 20.238782
    test 678 line 130 toUtmUps8.lon: 21.566068
    test 679 line 131 toUtmUps8.easting: 1530603.839418
    test 680 line 131 toUtmUps8.northing: 7287841.459898
    test 681 line 131 toUtmUps8.gamma: 27.502921
    test 682 line 131 toUtmUps8.scale: 1.028416
    test 683 line 131 toUtmUps8.lat: 62.367847
    test 684 line 131 toUtmUps8.lon: 30.438849
    test 685 line 132 toUtmUps8.easting: 2660000.093152
    test 686 line 132 toUtmUps8.northing: 5161982.213248
    test 687 line 132 toUtmUps8.gamma: 22.629836
    test 688 line 132 toUtmUps8.scale: 1.087851
    test 689 line 132 toUtmUps8.lat: 41.891569
    test 690 line 132 toUtmUps8.lon: 31.959547
    test 691 line 133 toUtmUps8.easting: 5037478.329414
    test 692 line 133 toUtmUps8.northing: 8768172.379908
    test 693 line 133 toUtmUps8.gamma: 73.511182
    test 694 line 133 toUtmUps8.scale: 1.325919
    test 695 line 133 toUtmUps8.lat: 47.664248
    test 696 line 133 toUtmUps8.lon: 77.630062
    test 697 line 134 toUtmUps8.easting: 2289650.957799
    test 698 line 134 toUtmUps8.northing: 8784328.593607
    test 699 line 134 toUtmUps8.gamma: 60.786067
    test 700 line 134 toUtmUps8.scale: 1.064346
    test 701 line 134 toUtmUps8.lat: 67.259559
    test 702 line 134 toUtmUps8.lon: 62.715293
    test 703 line 135 toUtmUps8.easting: 647913.889744
    test 704 line 135 toUtmUps8.northing: 6742382.228217
    test 705 line 135 toUtmUps8.gamma: 10.252667
    test 706 line 135 toUtmUps8.scale: 1.004748
    test 707 line 135 toUtmUps8.lat: 60.295381
    test 708 line 135 toUtmUps8.lon: 11.763097
    test 709 line 136 toUtmUps8.easting: 1118372.698566
    test 710 line 136 toUtmUps8.northing: 9040627.942263
    test 711 line 136 toUtmUps8.gamma: 48.936803
    test 712 line 136 toUtmUps8.scale: 1.014920
    test 713 line 136 toUtmUps8.lat: 76.878914
    test 714 line 136 toUtmUps8.lon: 49.685773
    test 715 line 137 toUtmUps8.easting: 440696.510070
    test 716 line 137 toUtmUps8.northing: 5500355.826297
    test 717 line 137 toUtmUps8.gamma: 4.636104
    test 718 line 137 toUtmUps8.scale: 1.001986
    test 719 line 137 toUtmUps8.lat: 49.495349
    test 720 line 137 toUtmUps8.lon: 6.087551
    test 721 line 138 toUtmUps8.easting: 601728.149727
    test 722 line 138 toUtmUps8.northing: 9095352.048149
    test 723 line 138 toUtmUps8.gamma: 33.435771
    test 724 line 138 toUtmUps8.scale: 1.004027
    test 725 line 138 toUtmUps8.lat: 80.297265
    test 726 line 138 toUtmUps8.lon: 33.816372
    test 727 line 139 toUtmUps8.easting: 3481444.777827
    test 728 line 139 toUtmUps8.northing: 291665.708749
    test 729 line 139 toUtmUps8.gamma: 1.314726
    test 730 line 139 toUtmUps8.scale: 1.153534
    test 731 line 139 toUtmUps8.lat: 2.286437
    test 732 line 139 toUtmUps8.lon: 29.855149
    test 733 line 140 toUtmUps8.easting: 3515304.901524
    test 734 line 140 toUtmUps8.northing: 1443981.882918
    test 735 line 140 toUtmUps8.gamma: 6.641638
    test 736 line 140 toUtmUps8.scale: 1.156509
    test 737 line 140 toUtmUps8.lat: 11.264457
    test 738 line 140 toUtmUps8.lon: 30.743907
    test 739 line 141 toUtmUps8.easting: 160012.186959
    test 740 line 141 toUtmUps8.northing: 3922609.253231
    test 741 line 141 toUtmUps8.gamma: 1.022225
    test 742 line 141 toUtmUps8.scale: 0.999916
    test 743 line 141 toUtmUps8.lat: 35.434073
    test 744 line 141 toUtmUps8.lon: 1.762795
    test 745 line 142 toUtmUps8.easting: 4163744.245622
    test 746 line 142 toUtmUps8.northing: 936884.674804
    test 747 line 142 toUtmUps8.gamma: 4.892559
    test 748 line 142 toUtmUps8.scale: 1.222164
    test 749 line 142 toUtmUps8.lat: 6.923695
    test 750 line 142 toUtmUps8.lon: 35.289456
    test 751 line 143 toUtmUps8.easting: 6155200.017926
    test 752 line 143 toUtmUps8.northing: 6926306.628390
    test 753 line 143 toUtmUps8.gamma: 55.103258
    test 754 line 143 toUtmUps8.scale: 1.500556
    test 755 line 143 toUtmUps8.lat: 36.129672
    test 756 line 143 toUtmUps8.lon: 67.533176

    test skipped (18): line 144 toUtmUps8.'4.406528980638 81.965734206053 16263383.2854400911299 3591296.7313406507021 36.040254103487111035 6.58928781751888396522'

    test skipped (19): line 145 toUtmUps8.'8.474589009114 81.129945130597 14220995.5153984992101 5100587.4575033509156 47.314258427760984573 4.69320221531225352172'
    test 757 line 146 toUtmUps8.easting: 3173034.802372
    test 758 line 146 toUtmUps8.northing: 7263421.942957
    test 759 line 146 toUtmUps8.gamma: 45.215808
    test 760 line 146 toUtmUps8.scale: 1.125410
    test 761 line 146 toUtmUps8.lat: 53.907276
    test 762 line 146 toUtmUps8.lon: 51.252904

    test skipped (20): line 147 toUtmUps8.'22.120544817855 85.756781608119 10253274.0922039670098 8867574.2997916978265 79.198250285604314115 2.57237240666878171579'
    test 763 line 148 toUtmUps8.easting: 2415561.483230
    test 764 line 148 toUtmUps8.northing: 8813225.217097
    test 765 line 148 toUtmUps8.gamma: 62.548978
    test 766 line 148 toUtmUps8.scale: 1.071748
    test 767 line 148 toUtmUps8.lat: 66.444100
    test 768 line 148 toUtmUps8.lon: 64.532960
    test 769 line 149 toUtmUps8.easting: 9589179.293294  FAILED, KNOWN, expected 9589179.293295
    test 770 line 149 toUtmUps8.northing: 1777680.784144  FAILED, KNOWN, expected 1777680.784143
    test 771 line 149 toUtmUps8.gamma: 14.838483
    test 772 line 149 toUtmUps8.scale: 2.380716
    test 773 line 149 toUtmUps8.lat: 6.670965
    test 774 line 149 toUtmUps8.lon: 65.660408
    test 775 line 150 toUtmUps8.easting: 727939.438391
    test 776 line 150 toUtmUps8.northing: 3684363.236810
    test 777 line 150 toUtmUps8.gamma: 4.266227
    test 778 line 150 toUtmUps8.scale: 1.006140
    test 779 line 150 toUtmUps8.lat: 33.054057
    test 780 line 150 toUtmUps8.lon: 7.787458
    test 781 line 151 toUtmUps8.easting: 1250765.991085
    test 782 line 151 toUtmUps8.northing: 792869.242719
    test 783 line 151 toUtmUps8.gamma: 1.396497
    test 784 line 151 toUtmUps8.scale: 1.019026
    test 785 line 151 toUtmUps8.lat: 7.035525
    test 786 line 151 toUtmUps8.lon: 11.253707
    test 787 line 152 toUtmUps8.easting: 710421.705887
    test 788 line 152 toUtmUps8.northing: 5019406.075928
    test 789 line 152 toUtmUps8.gamma: 6.393949
    test 790 line 152 toUtmUps8.scale: 1.005812
    test 791 line 152 toUtmUps8.lat: 44.971340
    test 792 line 152 toUtmUps8.lon: 9.009304
    test 793 line 153 toUtmUps8.easting: 4600995.074643
    test 794 line 153 toUtmUps8.northing: 4505712.084593
    test 795 line 153 toUtmUps8.gamma: 27.997458
    test 796 line 153 toUtmUps8.scale: 1.271841
    test 797 line 153 toUtmUps8.lat: 30.821397
    test 798 line 153 toUtmUps8.lon: 45.970577
    test 799 line 154 toUtmUps8.easting: 557642.627782
    test 800 line 154 toUtmUps8.northing: 7006911.251644
    test 801 line 154 toUtmUps8.gamma: 9.769903
    test 802 line 154 toUtmUps8.scale: 1.003411
    test 803 line 154 toUtmUps8.lat: 62.763886
    test 804 line 154 toUtmUps8.lon: 10.960144
    test 805 line 155 toUtmUps8.easting: 4635062.294291
    test 806 line 155 toUtmUps8.northing: 2702556.153311
    test 807 line 155 toUtmUps8.gamma: 15.779547
    test 808 line 155 toUtmUps8.scale: 1.277178
    test 809 line 155 toUtmUps8.lat: 18.888611
    test 810 line 155 toUtmUps8.lon: 41.009871

    test skipped (21): line 156 toUtmUps8.'7.524119461376 81.050715469439 14554962.2559189870471 4716639.9085720199214 44.192751352918149954 4.96001986321419027847'
    test 811 line 157 toUtmUps8.easting: 882126.661736
    test 812 line 157 toUtmUps8.northing: 7947612.369506
    test 813 line 157 toUtmUps8.gamma: 22.429487
    test 814 line 157 toUtmUps8.scale: 1.009132
    test 815 line 157 toUtmUps8.lat: 70.063902
    test 816 line 157 toUtmUps8.lon: 23.705255

    test skipped (22): line 158 toUtmUps8.'3.556525834215 88.363529198819 20262021.6459832969292 8113827.8207957955275 76.936057264555500879 10.34909168211805703369'
    test 817 line 159 toUtmUps8.easting: 6500508.399850
    test 818 line 159 toUtmUps8.northing: 6956476.342368
    test 819 line 159 toUtmUps8.gamma: 56.237116
    test 820 line 159 toUtmUps8.scale: 1.563162
    test 821 line 159 toUtmUps8.lat: 34.551257
    test 822 line 159 toUtmUps8.lon: 69.111091
    test 823 line 160 toUtmUps8.easting: 3884036.641314
    test 824 line 160 toUtmUps8.northing: 6890167.411733
    test 825 line 160 toUtmUps8.gamma: 45.760130
    test 826 line 160 toUtmUps8.scale: 1.190167
    test 827 line 160 toUtmUps8.lat: 47.929051
    test 828 line 160 toUtmUps8.lon: 54.103418
    test 829 line 161 toUtmUps8.easting: 217855.546078
    test 830 line 161 toUtmUps8.northing: 6184108.122568
    test 831 line 161 toUtmUps8.gamma: 2.870993
    test 832 line 161 toUtmUps8.scale: 1.000182
    test 833 line 161 toUtmUps8.lat: 55.753536
    test 834 line 161 toUtmUps8.lon: 3.471798

    test skipped (23): line 162 toUtmUps8.'18.530847071862 86.555312055898 11384139.290401676268 8893889.9495562311576 79.77485364572019046 3.02467156922968230025'
    test 835 line 163 toUtmUps8.easting: 3469855.989805
    test 836 line 163 toUtmUps8.northing: 7723193.799228
    test 837 line 163 toUtmUps8.gamma: 53.114700
    test 838 line 163 toUtmUps8.scale: 1.150540
    test 839 line 163 toUtmUps8.lat: 54.510125
    test 840 line 163 toUtmUps8.lon: 58.556056

    test skipped (24): line 164 toUtmUps8.'42.864161881687 84.866325602975 5926165.994939154109 9385463.7327467371322 82.506981261616342016 1.45975761947329382411'
    test 841 line 165 toUtmUps8.easting: 5798639.662224
    test 842 line 165 toUtmUps8.northing: 5305387.640916
    test 843 line 165 toUtmUps8.gamma: 38.617257
    test 844 line 165 toUtmUps8.scale: 1.442263
    test 845 line 165 toUtmUps8.lat: 30.911943
    test 846 line 165 toUtmUps8.lon: 57.114102
    test 847 line 166 toUtmUps8.easting: 9464.934388
    test 848 line 166 toUtmUps8.northing: 6489121.624944
    test 849 line 166 toUtmUps8.gamma: 0.138696
    test 850 line 166 toUtmUps8.scale: 0.999601
    test 851 line 166 toUtmUps8.lat: 58.542493
    test 852 line 166 toUtmUps8.lon: 0.162593

    test skipped (25): line 167 toUtmUps8.'15.022689088683 85.792615487152 12575834.2756139069875 8356610.8954857643175 75.235223160840771295 3.59944161831319404851'
    test 853 line 168 toUtmUps8.easting: 2719653.543469
    test 854 line 168 toUtmUps8.northing: 9362389.163495
    test 855 line 168 toUtmUps8.gamma: 76.049670
    test 856 line 168 toUtmUps8.scale: 1.091315
    test 857 line 168 toUtmUps8.lat: 65.692275
    test 858 line 168 toUtmUps8.lon: 77.241377
    test 859 line 169 toUtmUps8.easting: 4845341.924698
    test 860 line 169 toUtmUps8.northing: 8710522.326901
    test 861 line 169 toUtmUps8.gamma: 72.320942
    test 862 line 169 toUtmUps8.scale: 1.300382
    test 863 line 169 toUtmUps8.lat: 48.806211
    test 864 line 169 toUtmUps8.lon: 76.486365

    test skipped (26): line 170 toUtmUps8.'56.436024794624 82.61156798689 3935261.5227628794258 9454271.6490618694486 81.162334302626197333 1.19476734082123451158'
    test 865 line 171 toUtmUps8.easting: 7074299.823000
    test 866 line 171 toUtmUps8.northing: 1648736.065055
    test 867 line 171 toUtmUps8.gamma: 12.145925
    test 868 line 171 toUtmUps8.scale: 1.687551
    test 869 line 171 toUtmUps8.lat: 8.766053
    test 870 line 171 toUtmUps8.lon: 54.367539
    test 871 line 172 toUtmUps8.easting: 3689072.579308
    test 872 line 172 toUtmUps8.northing: 2230802.665211
    test 873 line 172 toUtmUps8.gamma: 10.856248
    test 874 line 172 toUtmUps8.scale: 1.172689
    test 875 line 172 toUtmUps8.lat: 17.095495
    test 876 line 172 toUtmUps8.lon: 33.059128
    test 877 line 173 toUtmUps8.easting: 8102565.885587
    test 878 line 173 toUtmUps8.northing: 5167396.617580
    test 879 line 173 toUtmUps8.gamma: 42.324886
    test 880 line 173 toUtmUps8.scale: 1.921927
    test 881 line 173 toUtmUps8.lat: 22.142861
    test 882 line 173 toUtmUps8.lon: 67.200684
    test 883 line 174 toUtmUps8.easting: 8181271.353564
    test 884 line 174 toUtmUps8.northing: 4425436.547185
    test 885 line 174 toUtmUps8.gamma: 35.900845
    test 886 line 174 toUtmUps8.scale: 1.945017
    test 887 line 174 toUtmUps8.lat: 19.222623
    test 888 line 174 toUtmUps8.lon: 65.180785
    test 889 line 175 toUtmUps8.easting: 767067.394003
    test 890 line 175 toUtmUps8.northing: 3701745.857296
    test 891 line 175 toUtmUps8.gamma: 4.519201
    test 892 line 175 toUtmUps8.scale: 1.006863
    test 893 line 175 toUtmUps8.lat: 33.182474
    test 894 line 175 toUtmUps8.lon: 8.216952
    test 895 line 176 toUtmUps8.easting: 6688114.168572
    test 896 line 176 toUtmUps8.northing: 2052857.299639
    test 897 line 176 toUtmUps8.gamma: 14.766191
    test 898 line 176 toUtmUps8.scale: 1.607200
    test 899 line 176 toUtmUps8.lat: 11.417963
    test 900 line 176 toUtmUps8.lon: 52.808691
    test 901 line 177 toUtmUps8.easting: 5608408.773761
    test 902 line 177 toUtmUps8.northing: 3859055.659110
    test 903 line 177 toUtmUps8.gamma: 26.244151
    test 904 line 177 toUtmUps8.scale: 1.413463
    test 905 line 177 toUtmUps8.lat: 23.836688
    test 906 line 177 toUtmUps8.lon: 50.500180
    test 907 line 178 toUtmUps8.easting: 3836942.765275
    test 908 line 178 toUtmUps8.northing: 6415467.634326
    test 909 line 178 toUtmUps8.gamma: 40.575885
    test 910 line 178 toUtmUps8.scale: 1.185615
    test 911 line 178 toUtmUps8.lat: 45.550020
    test 912 line 178 toUtmUps8.lon: 50.148036
    test 913 line 179 toUtmUps8.easting: 1298730.366025
    test 914 line 179 toUtmUps8.northing: 6021453.000792
    test 915 line 179 toUtmUps8.gamma: 15.613320
    test 916 line 179 toUtmUps8.scale: 1.020367
    test 917 line 179 toUtmUps8.lat: 52.746079
    test 918 line 179 toUtmUps8.lon: 19.343926
    test 919 line 180 toUtmUps8.easting: 416934.289208
    test 920 line 180 toUtmUps8.northing: 7295683.451705
    test 921 line 180 toUtmUps8.gamma: 8.238232
    test 922 line 180 toUtmUps8.scale: 1.001729
    test 923 line 180 toUtmUps8.lat: 65.513348
    test 924 line 180 toUtmUps8.lon: 9.039529
    test 925 line 181 toUtmUps8.easting: 4336076.850889
    test 926 line 181 toUtmUps8.northing: 7617975.722779
    test 927 line 181 toUtmUps8.gamma: 56.537088
    test 928 line 181 toUtmUps8.scale: 1.238582
    test 929 line 181 toUtmUps8.lat: 48.709795
    test 930 line 181 toUtmUps8.lon: 63.554005
    test 931 line 182 toUtmUps8.easting: 168047.336980
    test 932 line 182 toUtmUps8.northing: 2185000.046530
    test 933 line 182 toUtmUps8.gamma: 0.542187
    test 934 line 182 toUtmUps8.scale: 0.999949
    test 935 line 182 toUtmUps8.lat: 19.753509
    test 936 line 182 toUtmUps8.lon: 1.603846
    test 937 line 183 toUtmUps8.easting: 8276281.328790
    test 938 line 183 toUtmUps8.northing: 263444.350545
    test 939 line 183 toUtmUps8.gamma: 2.071435
    test 940 line 183 toUtmUps8.scale: 1.980314
    test 941 line 183 toUtmUps8.lat: 1.202816
    test 942 line 183 toUtmUps8.lon: 59.377276
    test 943 line 184 toUtmUps8.easting: 4772573.810710
    test 944 line 184 toUtmUps8.northing: 6765710.336002
    test 945 line 184 toUtmUps8.gamma: 48.857561
    test 946 line 184 toUtmUps8.scale: 1.291911
    test 947 line 184 toUtmUps8.lat: 42.564975
    test 948 line 184 toUtmUps8.lon: 59.356947
    test 949 line 185 toUtmUps8.easting: 5427755.074639
    test 950 line 185 toUtmUps8.northing: 1556055.820924
    test 951 line 185 toUtmUps8.gamma: 9.862178
    test 952 line 185 toUtmUps8.scale: 1.387394
    test 953 line 185 toUtmUps8.lat: 10.090572
    test 954 line 185 toUtmUps8.lon: 44.604132
    test 955 line 186 toUtmUps8.easting: 11588458.616240  FAILED, KNOWN, expected 11588458.616041
    test 956 line 186 toUtmUps8.northing: 5707993.922683  FAILED, KNOWN, expected 5707993.922613
    test 957 line 186 toUtmUps8.gamma: 50.784827
    test 958 line 186 toUtmUps8.scale: 3.149567
    test 959 line 186 toUtmUps8.lat: 14.133028
    test 960 line 186 toUtmUps8.lon: 78.097533
    test 961 line 187 toUtmUps8.easting: 7152433.802688
    test 962 line 187 toUtmUps8.northing: 761390.695844
    test 963 line 187 toUtmUps8.gamma: 5.607350
    test 964 line 187 toUtmUps8.scale: 1.705261
    test 965 line 187 toUtmUps8.lat: 4.031123
    test 966 line 187 toUtmUps8.lon: 54.048782
    test 967 line 188 toUtmUps8.easting: 3105651.390901
    test 968 line 188 toUtmUps8.northing: 9426026.169064
    test 969 line 188 toUtmUps8.gamma: 78.750206
    test 970 line 188 toUtmUps8.scale: 1.119737
    test 971 line 188 toUtmUps8.lat: 62.746603
    test 972 line 188 toUtmUps8.lon: 79.968641
    test 973 line 189 toUtmUps8.easting: 2959009.639022
    test 974 line 189 toUtmUps8.northing: 8339242.269282
    test 975 line 189 toUtmUps8.gamma: 58.460865
    test 976 line 189 toUtmUps8.scale: 1.108554
    test 977 line 189 toUtmUps8.lat: 60.626429
    test 978 line 189 toUtmUps8.lon: 61.851551
    test 979 line 190 toUtmUps8.easting: 8640472.267145
    test 980 line 190 toUtmUps8.northing: 6230320.417931
    test 981 line 190 toUtmUps8.gamma: 52.816810
    test 982 line 190 toUtmUps8.scale: 2.062973
    test 983 line 190 toUtmUps8.lat: 23.600626
    test 984 line 190 toUtmUps8.lon: 72.811634
    test 985 line 191 toUtmUps8.easting: 811352.108932
    test 986 line 191 toUtmUps8.northing: 9816129.813481
    test 987 line 191 toUtmUps8.gamma: 77.299184
    test 988 line 191 toUtmUps8.scale: 1.007651
    test 989 line 191 toUtmUps8.lat: 82.572236
    test 990 line 191 toUtmUps8.lon: 77.402323
    test 991 line 192 toUtmUps8.easting: 6521874.973458
    test 992 line 192 toUtmUps8.northing: 1053612.479744
    test 993 line 192 toUtmUps8.gamma: 7.407328
    test 994 line 192 toUtmUps8.scale: 1.575529
    test 995 line 192 toUtmUps8.lat: 6.030051
    test 996 line 192 toUtmUps8.lon: 50.783505
    test 997 line 193 toUtmUps8.easting: 3477983.997875
    test 998 line 193 toUtmUps8.northing: 5651613.325947
    test 999 line 193 toUtmUps8.gamma: 31.530673
    test 1000 line 193 toUtmUps8.scale: 1.151875
    test 1001 line 193 toUtmUps8.lat: 42.411523
    test 1002 line 193 toUtmUps8.lon: 42.258009
    test 1003 line 194 toUtmUps8.easting: 629892.822243
    test 1004 line 194 toUtmUps8.northing: 3283914.910451
    test 1005 line 194 toUtmUps8.gamma: 3.210482
    test 1006 line 194 toUtmUps8.scale: 1.004499
    test 1007 line 194 toUtmUps8.lat: 29.526120
    test 1008 line 194 toUtmUps8.lon: 6.493069
    test 1009 line 195 toUtmUps8.easting: 3381879.687227
    test 1010 line 195 toUtmUps8.northing: 5103629.325665
    test 1011 line 195 toUtmUps8.gamma: 26.748108
    test 1012 line 195 toUtmUps8.scale: 1.143559
    test 1013 line 195 toUtmUps8.lat: 39.021853
    test 1014 line 195 toUtmUps8.lon: 38.641779
    test 1015 line 196 toUtmUps8.easting: 2815986.534177
    test 1016 line 196 toUtmUps8.northing: 9387029.120718
    test 1017 line 196 toUtmUps8.gamma: 76.967262
    test 1018 line 196 toUtmUps8.scale: 1.098032
    test 1019 line 196 toUtmUps8.lat: 64.971850
    test 1020 line 196 toUtmUps8.lon: 78.151893
    test 1021 line 197 toUtmUps8.easting: 3398195.889603
    test 1022 line 197 toUtmUps8.northing: 9138936.031490
    test 1023 line 197 toUtmUps8.gamma: 74.477499
    test 1024 line 197 toUtmUps8.scale: 1.144009
    test 1025 line 197 toUtmUps8.lat: 59.961819
    test 1026 line 197 toUtmUps8.lon: 76.473422
    test 1027 line 198 toUtmUps8.easting: 2421734.754637
    test 1028 line 198 toUtmUps8.northing: 5002372.094991
    test 1029 line 198 toUtmUps8.gamma: 20.017082
    test 1030 line 198 toUtmUps8.scale: 1.072592
    test 1031 line 198 toUtmUps8.lat: 41.374040
    test 1032 line 198 toUtmUps8.lon: 28.848343
    test 1033 line 199 toUtmUps8.easting: 2360869.895525
    test 1034 line 199 toUtmUps8.northing: 9553298.449536
    test 1035 line 199 toUtmUps8.gamma: 78.848205
    test 1036 line 199 toUtmUps8.scale: 1.068453
    test 1037 line 199 toUtmUps8.lat: 68.946087
    test 1038 line 199 toUtmUps8.lon: 79.574523

    test skipped (27): line 200 toUtmUps8.'79.275096210569 83.551272329394 1196539.9721941076965 9861920.8362302532842 83.437668440198132309 1.01713723718699411107'
    test 1039 line 201 toUtmUps8.easting: 1327758.704795
    test 1040 line 201 toUtmUps8.northing: 2375509.241683
    test 1041 line 201 toUtmUps8.gamma: 4.617572
    test 1042 line 201 toUtmUps8.scale: 1.021465
    test 1043 line 201 toUtmUps8.lat: 21.000252
    test 1044 line 201 toUtmUps8.lon: 12.697444
    test 1045 line 202 toUtmUps8.easting: 2070860.327644
    test 1046 line 202 toUtmUps8.northing: 8604500.719581
    test 1047 line 202 toUtmUps8.gamma: 54.722761
    test 1048 line 202 toUtmUps8.scale: 1.052469
    test 1049 line 202 toUtmUps8.lat: 68.015227
    test 1050 line 202 toUtmUps8.lon: 56.732419
    test 1051 line 203 toUtmUps8.easting: 6564776.654864
    test 1052 line 203 toUtmUps8.northing: 8171207.177379
    test 1053 line 203 toUtmUps8.gamma: 69.237523
    test 1054 line 203 toUtmUps8.scale: 1.573894
    test 1055 line 203 toUtmUps8.lat: 37.423675
    test 1056 line 203 toUtmUps8.lon: 76.947359
    test 1057 line 204 toUtmUps8.easting: 592653.553821
    test 1058 line 204 toUtmUps8.northing: 6125529.810052
    test 1059 line 204 toUtmUps8.gamma: 7.600785
    test 1060 line 204 toUtmUps8.scale: 1.003912
    test 1061 line 204 toUtmUps8.lat: 54.922707
    test 1062 line 204 toUtmUps8.lon: 9.260818
    test 1063 line 205 toUtmUps8.easting: 693459.671821
    test 1064 line 205 toUtmUps8.northing: 6943779.991032
    test 1065 line 205 toUtmUps8.gamma: 11.787587
    test 1066 line 205 toUtmUps8.scale: 1.005496
    test 1067 line 205 toUtmUps8.lat: 61.982810
    test 1068 line 205 toUtmUps8.lon: 13.299659
    test 1069 line 206 toUtmUps8.easting: 1838956.187625
    test 1070 line 206 toUtmUps8.northing: 3511959.612381
    test 1071 line 206 toUtmUps8.gamma: 9.844313
    test 1072 line 206 toUtmUps8.scale: 1.041603
    test 1073 line 206 toUtmUps8.lat: 30.324214
    test 1074 line 206 toUtmUps8.lon: 18.959769
    test 1075 line 207 toUtmUps8.easting: 4460690.884597
    test 1076 line 207 toUtmUps8.northing: 5541873.235403
    test 1077 line 207 toUtmUps8.gamma: 35.768613
    test 1078 line 207 toUtmUps8.scale: 1.254179
    test 1079 line 207 toUtmUps8.lat: 37.629667
    test 1080 line 207 toUtmUps8.lon: 49.649131
    test 1081 line 208 toUtmUps8.easting: 2311168.998941
    test 1082 line 208 toUtmUps8.northing: 9480561.869119
    test 1083 line 208 toUtmUps8.gamma: 76.828257
    test 1084 line 208 toUtmUps8.scale: 1.065556
    test 1085 line 208 toUtmUps8.lat: 69.225574
    test 1086 line 208 toUtmUps8.lon: 77.656135
    test 1087 line 209 toUtmUps8.easting: 4111775.114451
    test 1088 line 209 toUtmUps8.northing: 6509014.348792
    test 1089 line 209 toUtmUps8.gamma: 43.052130
    test 1090 line 209 toUtmUps8.scale: 1.214125
    test 1091 line 209 toUtmUps8.lat: 44.698478
    test 1092 line 209 toUtmUps8.lon: 52.979304
    test 1093 line 210 toUtmUps8.easting: 75358.261962
    test 1094 line 210 toUtmUps8.northing: 7711258.662251
    test 1095 line 210 toUtmUps8.gamma: 1.806297
    test 1096 line 210 toUtmUps8.scale: 0.999669
    test 1097 line 210 toUtmUps8.lat: 69.499594
    test 1098 line 210 toUtmUps8.lon: 1.928336

    test skipped (28): line 211 toUtmUps8.'27.981363604998 86.061112755721 8781885.2291162503299 9184776.4522114918448 81.795538514711932534 2.09490761781464961377'
    test 1099 line 212 toUtmUps8.easting: 954378.415174
    test 1100 line 212 toUtmUps8.northing: 7449110.669807
    test 1101 line 212 toUtmUps8.gamma: 19.380657
    test 1102 line 212 toUtmUps8.scale: 1.010768
    test 1103 line 212 toUtmUps8.lat: 65.699839
    test 1104 line 212 toUtmUps8.lon: 21.104725
    test 1105 line 213 toUtmUps8.easting: 720971.793706
    test 1106 line 213 toUtmUps8.northing: 5265195.121555
    test 1107 line 213 toUtmUps8.gamma: 7.002995
    test 1108 line 213 toUtmUps8.scale: 1.005995
    test 1109 line 213 toUtmUps8.lat: 47.143648
    test 1110 line 213 toUtmUps8.lon: 9.512189
    test 1111 line 214 toUtmUps8.easting: 561561.493937
    test 1112 line 214 toUtmUps8.northing: 989910.236221
    test 1113 line 214 toUtmUps8.gamma: 0.793118
    test 1114 line 214 toUtmUps8.scale: 1.003505
    test 1115 line 214 toUtmUps8.lat: 8.920167
    test 1116 line 214 toUtmUps8.lon: 5.101513
    test 1117 line 215 toUtmUps8.easting: 3446829.634468
    test 1118 line 215 toUtmUps8.northing: 9232868.155664
    test 1119 line 215 toUtmUps8.gamma: 76.279075
    test 1120 line 215 toUtmUps8.scale: 1.148263
    test 1121 line 215 toUtmUps8.lat: 59.778971
    test 1122 line 215 toUtmUps8.lon: 78.080322

    test skipped (29): line 216 toUtmUps8.'55.865310107291 87.384288430943 4048307.5459092527942 9800416.4229977935137 86.843918034217523739 1.20649504624906774925'
    test 1123 line 217 toUtmUps8.easting: 8973188.480293
    test 1124 line 217 toUtmUps8.northing: 7042230.087021
    test 1125 line 217 toUtmUps8.gamma: 60.872456
    test 1126 line 217 toUtmUps8.scale: 2.156098
    test 1127 line 217 toUtmUps8.lat: 24.310973
    test 1128 line 217 toUtmUps8.lon: 76.823777
    test 1129 line 218 toUtmUps8.easting: 126314.191618
    test 1130 line 218 toUtmUps8.northing: 396006.687921
    test 1131 line 218 toUtmUps8.gamma: 0.071065
    test 1132 line 218 toUtmUps8.scale: 0.999798
    test 1133 line 218 toUtmUps8.lat: 3.582041
    test 1134 line 218 toUtmUps8.lon: 1.137286
    test 1135 line 219 toUtmUps8.easting: 5247652.345647
    test 1136 line 219 toUtmUps8.northing: 8670513.359752
    test 1137 line 219 toUtmUps8.gamma: 72.700498
    test 1138 line 219 toUtmUps8.scale: 1.355272
    test 1139 line 219 toUtmUps8.lat: 46.124233
    test 1140 line 219 toUtmUps8.lon: 77.313118

    test skipped (30): line 220 toUtmUps8.'31.17139056295 87.104503768139 8103656.8381187232079 9469794.014736839373 84.490673011906282841 1.91216400164486142107'
    test 1141 line 221 toUtmUps8.easting: 6300112.758236
    test 1142 line 221 toUtmUps8.northing: 93835.917364
    test 1143 line 221 toUtmUps8.gamma: 0.644805
    test 1144 line 221 toUtmUps8.scale: 1.534073
    test 1145 line 221 toUtmUps8.lat: 0.553171
    test 1146 line 221 toUtmUps8.lon: 49.117104
    test 1147 line 222 toUtmUps8.easting: 3894813.593782
    test 1148 line 222 toUtmUps8.northing: 4833832.341027
    test 1149 line 222 toUtmUps8.gamma: 27.453298
    test 1150 line 222 toUtmUps8.scale: 1.192135
    test 1151 line 222 toUtmUps8.lat: 35.361587
    test 1152 line 222 toUtmUps8.lon: 41.860599
    test 1153 line 223 toUtmUps8.easting: 402511.346712
    test 1154 line 223 toUtmUps8.northing: 3520621.561911
    test 1155 line 223 toUtmUps8.gamma: 2.238474
    test 1156 line 223 toUtmUps8.scale: 1.001599
    test 1157 line 223 toUtmUps8.lat: 31.750314
    test 1158 line 223 toUtmUps8.lon: 4.248167
    test 1159 line 224 toUtmUps8.easting: 5357378.503148
    test 1160 line 224 toUtmUps8.northing: 2772997.602234
    test 1161 line 224 toUtmUps8.gamma: 17.823560
    test 1162 line 224 toUtmUps8.scale: 1.376031
    test 1163 line 224 toUtmUps8.lat: 17.924336
    test 1164 line 224 toUtmUps8.lon: 46.096402
    test 1165 line 225 toUtmUps8.easting: 2807553.985866
    test 1166 line 225 toUtmUps8.northing: 8177847.980275
    test 1167 line 225 toUtmUps8.gamma: 54.680045
    test 1168 line 225 toUtmUps8.scale: 1.097531
    test 1169 line 225 toUtmUps8.lat: 60.931488
    test 1170 line 225 toUtmUps8.lon: 58.221214

    test skipped (31): line 226 toUtmUps8.'5.358150979521 87.556213284144 18289045.16650076146 7792942.3396035398889 73.216494415207315628 8.09800850850277481729'

    test skipped (32): line 227 toUtmUps8.'28.616673489124 80.452426461437 8376822.4595378634541 8128174.6238782329989 70.920116640676321501 1.98487312027093768388'
    test 1171 line 228 toUtmUps8.easting: 11898068.352950  FAILED, KNOWN, expected 11898068.353272
    test 1172 line 228 toUtmUps8.northing: 4772439.493355  FAILED, KNOWN, expected 4772439.493697
    test 1173 line 228 toUtmUps8.gamma: 42.613968
    test 1174 line 228 toUtmUps8.scale: 3.314412
    test 1175 line 228 toUtmUps8.lat: 11.709763
    test 1176 line 228 toUtmUps8.lon: 76.760295
    test 1177 line 229 toUtmUps8.easting: 10550946.939052  FAILED, KNOWN, expected 10550946.939050
    test 1178 line 229 toUtmUps8.northing: 3851968.815305  FAILED, KNOWN, expected 3851968.815295
    test 1179 line 229 toUtmUps8.gamma: 33.383025
    test 1180 line 229 toUtmUps8.scale: 2.724754
    test 1181 line 229 toUtmUps8.lat: 12.009498
    test 1182 line 229 toUtmUps8.lon: 71.782351

    test skipped (33): line 230 toUtmUps8.'37.62978386356 85.795687334213 6828299.1236065501034 9394803.2274626281036 83.181386462369626591 1.62435875189611017521'
    test 1183 line 231 toUtmUps8.easting: 11162550.334001  FAILED, KNOWN, expected 11162550.334022
    test 1184 line 231 toUtmUps8.northing: 2640267.279546  FAILED, KNOWN, expected 2640267.279593
    test 1185 line 231 toUtmUps8.gamma: 23.145404
    test 1186 line 231 toUtmUps8.scale: 2.998408
    test 1187 line 231 toUtmUps8.lat: 7.721128
    test 1188 line 231 toUtmUps8.lon: 71.662731
    test 1189 line 232 toUtmUps8.easting: 4411584.447941
    test 1190 line 232 toUtmUps8.northing: 4956173.694407
    test 1191 line 232 toUtmUps8.gamma: 30.713919
    test 1192 line 232 toUtmUps8.scale: 1.248736
    test 1193 line 232 toUtmUps8.lat: 34.295026
    test 1194 line 232 toUtmUps8.lon: 46.442191
    test 1195 line 233 toUtmUps8.easting: 672108.897905
    test 1196 line 233 toUtmUps8.northing: 4751554.657054
    test 1197 line 233 toUtmUps8.gamma: 5.569178
    test 1198 line 233 toUtmUps8.scale: 1.005162
    test 1199 line 233 toUtmUps8.lat: 42.622496
    test 1200 line 233 toUtmUps8.lon: 8.193605
    test 1201 line 234 toUtmUps8.easting: 5022964.290579
    test 1202 line 234 toUtmUps8.northing: 6860418.199502
    test 1203 line 234 toUtmUps8.gamma: 50.862230
    test 1204 line 234 toUtmUps8.scale: 1.324925
    test 1205 line 234 toUtmUps8.lat: 41.667780
    test 1206 line 234 toUtmUps8.lon: 61.518288
    test 1207 line 235 toUtmUps8.easting: 1669655.595207
    test 1208 line 235 toUtmUps8.northing: 4152086.537021
    test 1209 line 235 toUtmUps8.gamma: 11.110237
    test 1210 line 235 toUtmUps8.scale: 1.034138
    test 1211 line 235 toUtmUps8.lat: 36.060369
    test 1212 line 235 toUtmUps8.lon: 18.444112
    test 1213 line 236 toUtmUps8.easting: 6055876.729655
    test 1214 line 236 toUtmUps8.northing: 4896837.552619
    test 1215 line 236 toUtmUps8.gamma: 35.799747
    test 1216 line 236 toUtmUps8.scale: 1.485967
    test 1217 line 236 toUtmUps8.lat: 27.948091
    test 1218 line 236 toUtmUps8.lon: 56.816429
    test 1219 line 237 toUtmUps8.easting: 1209214.164379
    test 1220 line 237 toUtmUps8.northing: 7266409.859178
    test 1221 line 237 toUtmUps8.gamma: 22.319633
    test 1222 line 237 toUtmUps8.scale: 1.017554
    test 1223 line 237 toUtmUps8.lat: 63.386030
    test 1224 line 237 toUtmUps8.lon: 24.662716
    test 1225 line 238 toUtmUps8.easting: 5154564.559584
    test 1226 line 238 toUtmUps8.northing: 698118.349975
    test 1227 line 238 toUtmUps8.gamma: 4.242360
    test 1228 line 238 toUtmUps8.scale: 1.347481
    test 1229 line 238 toUtmUps8.lat: 4.680922
    test 1230 line 238 toUtmUps8.lon: 42.114426
    test 1231 line 239 toUtmUps8.easting: 2695149.806543
    test 1232 line 239 toUtmUps8.northing: 8208197.765605
    test 1233 line 239 toUtmUps8.gamma: 54.178615
    test 1234 line 239 toUtmUps8.scale: 1.089730
    test 1235 line 239 toUtmUps8.lat: 61.826625
    test 1236 line 239 toUtmUps8.lon: 57.525096
    test 1237 line 240 toUtmUps8.easting: 3394792.327820
    test 1238 line 240 toUtmUps8.northing: 3217583.415552
    test 1239 line 240 toUtmUps8.gamma: 15.165863
    test 1240 line 240 toUtmUps8.scale: 1.145285
    test 1241 line 240 toUtmUps8.lat: 25.104353
    test 1242 line 240 toUtmUps8.lon: 32.528660
    test 1243 line 241 toUtmUps8.easting: 1429160.966985
    test 1244 line 241 toUtmUps8.northing: 8212685.362032
    test 1245 line 241 toUtmUps8.gamma: 37.484904
    test 1246 line 241 toUtmUps8.scale: 1.024676
    test 1247 line 241 toUtmUps8.lat: 69.678351
    test 1248 line 241 toUtmUps8.lon: 39.275513

    test skipped (34): line 242 toUtmUps8.'29.671383681805 84.19659549085 8343387.9980651104898 8885196.9545780118644 78.561937382568633298 1.97473261886829061763'
    test 1249 line 243 toUtmUps8.easting: 1990722.928606
    test 1250 line 243 toUtmUps8.northing: 7569202.065162
    test 1251 line 243 toUtmUps8.gamma: 37.075276
    test 1252 line 243 toUtmUps8.scale: 1.048486
    test 1253 line 243 toUtmUps8.lat: 62.300208
    test 1254 line 243 toUtmUps8.lon: 40.474051
    test 1255 line 244 toUtmUps8.easting: 1554980.099559
    test 1256 line 244 toUtmUps8.northing: 1449423.919586
    test 1257 line 244 toUtmUps8.gamma: 3.188328
    test 1258 line 244 toUtmUps8.scale: 1.029664
    test 1259 line 244 toUtmUps8.lat: 12.721776
    test 1260 line 244 toUtmUps8.lon: 14.190003
    test 1261 line 245 toUtmUps8.easting: 785205.450196
    test 1262 line 245 toUtmUps8.northing: 5575158.423096
    test 1263 line 245 toUtmUps8.gamma: 8.388417
    test 1264 line 245 toUtmUps8.scale: 1.007181
    test 1265 line 245 toUtmUps8.lat: 49.811296
    test 1266 line 245 toUtmUps8.lon: 10.925011
    test 1267 line 246 toUtmUps8.easting: 3310405.988313
    test 1268 line 246 toUtmUps8.northing: 5955022.233881
    test 1269 line 246 toUtmUps8.gamma: 33.007587
    test 1270 line 246 toUtmUps8.scale: 1.137141
    test 1271 line 246 toUtmUps8.lat: 45.132680
    test 1272 line 246 toUtmUps8.lon: 42.478624
    test 1273 line 247 toUtmUps8.easting: 4733460.960666
    test 1274 line 247 toUtmUps8.northing: 129034.889816
    test 1275 line 247 toUtmUps8.gamma: 0.737551
    test 1276 line 247 toUtmUps8.scale: 1.290439
    test 1277 line 247 toUtmUps8.lat: 0.904279
    test 1278 line 247 toUtmUps8.lon: 39.078412
    test 1279 line 248 toUtmUps8.easting: 3322708.343909
    test 1280 line 248 toUtmUps8.northing: 3864738.078742
    test 1281 line 248 toUtmUps8.gamma: 18.472566
    test 1282 line 248 toUtmUps8.scale: 1.138838
    test 1283 line 248 toUtmUps8.lat: 30.163605
    test 1284 line 248 toUtmUps8.lon: 33.577996

    test skipped (35): line 249 toUtmUps8.'27.643243707755 81.892859091432 8672864.4172042475623 8333465.9834441061554 73.206272638168122883 2.06544053870286774312'

    test skipped (36): line 250 toUtmUps8.'18.201207657521 82.434617649311 11126818.23119627031 7618712.1749910723126 67.88717347393512063 2.92241673495261070414'

    test skipped (37): line 251 toUtmUps8.'28.804576432117 89.886072420251 8650100.9817967479337 9975084.1689971279206 89.767446308690086924 2.05728879562910108817'
    test 1285 line 252 toUtmUps8.easting: 2212701.180192
    test 1286 line 252 toUtmUps8.northing: 650348.100229
    test 1287 line 252 toUtmUps8.gamma: 1.970441
    test 1288 line 252 toUtmUps8.scale: 1.060830
    test 1289 line 252 toUtmUps8.lat: 5.542998
    test 1290 line 252 toUtmUps8.lon: 19.589578
    test 1291 line 253 toUtmUps8.easting: 6890222.326618
    test 1292 line 253 toUtmUps8.northing: 7506813.499547
    test 1293 line 253 toUtmUps8.gamma: 62.684825
    test 1294 line 253 toUtmUps8.scale: 1.638488
    test 1295 line 253 toUtmUps8.lat: 34.237147
    test 1296 line 253 toUtmUps8.lon: 73.678164
    test 1297 line 254 toUtmUps8.easting: 6692260.067325
    test 1298 line 254 toUtmUps8.northing: 4244174.008110
    test 1299 line 254 toUtmUps8.gamma: 31.812920
    test 1300 line 254 toUtmUps8.scale: 1.604640
    test 1301 line 254 toUtmUps8.lat: 22.704949
    test 1302 line 254 toUtmUps8.lon: 57.877010
    test 1303 line 255 toUtmUps8.easting: 1225564.137190
    test 1304 line 255 toUtmUps8.northing: 4778923.924144
    test 1305 line 255 toUtmUps8.gamma: 10.083419
    test 1306 line 255 toUtmUps8.scale: 1.018134
    test 1307 line 255 toUtmUps8.lat: 42.192424
    test 1308 line 255 toUtmUps8.lon: 14.828196
    test 1309 line 256 toUtmUps8.easting: 12341116.155088  FAILED, KNOWN, expected 12341116.154950
    test 1310 line 256 toUtmUps8.northing: 5081855.520287  FAILED, KNOWN, expected 5081855.521966
    test 1311 line 256 toUtmUps8.gamma: 45.712545  FAILED, KNOWN, expected 45.712546
    test 1312 line 256 toUtmUps8.scale: 3.535170
    test 1313 line 256 toUtmUps8.lat: 11.481151
    test 1314 line 256 toUtmUps8.lon: 78.189236
    test 1315 line 257 toUtmUps8.easting: 6673845.021771
    test 1316 line 257 toUtmUps8.northing: 1177587.190565
    test 1317 line 257 toUtmUps8.gamma: 8.389141
    test 1318 line 257 toUtmUps8.scale: 1.605171
    test 1319 line 257 toUtmUps8.lat: 6.609626
    test 1320 line 257 toUtmUps8.lon: 51.735783
    test 1321 line 258 toUtmUps8.easting: 6966354.690417
    test 1322 line 258 toUtmUps8.northing: 3641802.005093
    test 1323 line 258 toUtmUps8.gamma: 27.409636
    test 1324 line 258 toUtmUps8.scale: 1.661469
    test 1325 line 258 toUtmUps8.lat: 19.059369
    test 1326 line 258 toUtmUps8.lon: 57.526439
    test 1327 max forward error: 1.678809e-03
    test 1328 max reverse error: 3.170463e-09
    test 1329 Utm.scale0: 0.9996
    test 1330 Utm.datum: WGS84
    test 1331 Utm.datum.ellipsoid.KsOrder: 8
    test 1332 Ups.scale0: 0.994  FAILED, KNOWN, expected 0.9996
    test 1333 Ups.datum: WGS84
    test 1334 Ups.datum.ellipsoid.KsOrder: 8
    test 1335 WGS84.KsOrder: 8

    24 of 1335 testUtmUpsTMcoords.py tests (1.8%) FAILED, ALL KNOWN, 37 skipped (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 71.566 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testVectorial.py
./pygeodesy/ellipsoidalNvector.py:282: DeprecationWarning: Property_RO L{pygeodesy.ltpTuples.Ned.ned} has been DEPRECATED, use property C{ned4}.
  dn = delta.ned
./pygeodesy/deprecated/__init__.py:64: DeprecationWarning: class L{pygeodesy.deprecated.Ned3Tuple} has been DEPRECATED, use class L{pygeodesy.Ned4Tuple}.
  deprecated_class(cls)
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.EPS from .constants by testVectorial.py line 11
# lazily imported pygeodesy.EPS4 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.F_D from .dms by testVectorial.py line 11
# lazily imported pygeodesy.NEG0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.circin6 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum3 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.circum4_ from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.fstr from .streprs by testVectorial.py line 11
# lazily imported pygeodesy.intersection3d3 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.IntersectionError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.isnear0 from .constants by testVectorial.py line 11
# lazily imported pygeodesy.meeus2 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.radii11 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.sincos2d from .utily by testVectorial.py line 11
# lazily imported pygeodesy.sphericalNvector by testVectorial.py line 11
# lazily imported pygeodesy.soddy4 from .vector2d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate2d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.trilaterate3d2 from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.Vector3d from .vector3d by testVectorial.py line 11
# lazily imported pygeodesy.VectorError from .errors by testVectorial.py line 11
# lazily imported pygeodesy.Datums from .datums by testVectorial.py line 529
# lazily imported pygeodesy.ellipsoidalExact by testVectorial.py line 529
# lazily imported pygeodesy.ellipsoidalKarney by testVectorial.py line 529
# lazily imported pygeodesy.ellipsoidalNvector by testVectorial.py line 529
# lazily imported pygeodesy.ellipsoidalVincenty by testVectorial.py line 529
# lazily imported pygeodesy.sphericalTrigonometry by testVectorial.py line 529

    testing testVectorial.py 23.03.27 isLazy=3

    testVectorial(pygeodesy.ellipsoidalNvector, 23.04.11)

    test 1 toLatLon: 44.995674°N, 045.0°E
    test 2 toNvector: (0.50004, 0.50004, 0.70705)
    test 3 isequalTo: False
    test 4 isequalTo: True
    test 5 length: 0.99992449715
    test 6 euclid: 0.99995577
    test 7 length: 1.00
    test 8 euclid: 1.0000
    test 9 meanOf: 44.995674°N, 045.0°E
    test 10 meanOf: LatLon
    test 11 apply: (0.5, 0.5, 0.707)
    test 12 init: (0.5, 0.5, 0.707)
    test 13 i***: (0.5, 0.5, 0.707)
    test 14 abs: 0.99992449715
    test 15 sumOf: (52.70504, 0.61904, 0.70705)
    test 16 sumOf: Nv
    test 17 sumOf: sumOf
    test 18 length: 52.7134151513
    test 19 sizeof: 120  FAILED, KNOWN, expected 72
    test 20 copy: True
    test 21 length: 52.2051356286
    test 22 length: 52.2051356286
    test 23 sizeof: 120
    test 24 isenclosedBy: True
    test 25 isenclosedBy*: True
    test 26 isenclosedBy: True
    test 27 isenclosedBy*: True

    test 28 nearestOn: 51.0°N, 001.0°E
    test 29 nearestOn: 50.987°N, 000.298°W
    test 30 nearestOn: 51.0°N, 002.0°E
    test 31 nearestOn: 50.995°N, 002.655°E
    test 32 nearestOn: 51.0°N, 001.9°E
    test 33 nearestOn: True
    test 34 distanceTo: 42.826
    test 35 nearestOn: 51.0°N, 002.0°E
    test 36 nearestOn: True
    test 37 nearestOn: 00.0°N, 000.0°E
    test 38 nearestOn: True
    test 39 nearestOn: 00.0°N, 020.0°E
    test 40 nearestOn: True
    test 41 nearestOn: 02.0°N, 002.0°E
    test 42 nearestOn: 02.0°N, 002.0°E

    test 43 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4755443.4294, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 44 neareston6: (LatLon(45°30′03.94″N, 002°00′00.0″E), 39078.729285, 1.501072, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 45 BasseC: 47.3038°N, 002.5721°W
    test 46 BasseH: 47.311067°N, 002.528617°W
    test 47 triangulate: 47.323667°N, 002.568501°W
    test 48 triangulate: True

    test 49 trilaterate: 37.419078°N, 121.960579°W
    test 50 trilaterate: True
    test 51 trilaterate: 08.068912°S, 034.888699°W
    test 52 trilaterate: True
    test 53 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 54 trilaterate: True
    test 55 trilaterate: 42.67456065°N, 002.49539502°E
    test 56 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)
# lazily imported pygeodesy.Ned from .ltpTuples by testVectorial.py line 362
# lazily imported pygeodesy.deprecated by <frozen importlib._bootstrap> line 241

    test 57 destinationNed: 48°53′12.01″N, 002°22′29.0″E, +0.20m

    testNvector(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 58 sumOf: Nvector
    test 59 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 60 ecef.lat, .lon: 44.995674, 45.0
    test 61 ecef.height: -0.0
    test 62 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 63 .isEllipsoidal: True
    test 64 .isSpherical: False
    test 65 .latlon: (44.995674, 45.0)
    test 66 .philam: (0.785323, 0.785398)
    test 67 .latlonheight: (44.995674, 45.0, 0.0)
    test 68 .philamheight: (0.785323, 0.785398, 0.0)
    test 69 parse: (0.5, 0.5, 0.707)
    test 70 cmp: 0
    test 71 eq: True
    test 72 ge: True
    test 73 gt: False
    test 74 le: True
    test 75 lt: False
    test 76 ne: False
    test 77 *: (1.0, 1.0, 1.414)
    test 78 +: (1.0, 1.0, 1.414)
    test 79 /: (0.5, 0.5, 0.707)
    test 80 -: (0.5, 0.5, 0.707)
    test 81 @: (0.0, 0.0, 0.0)
    test 82 @: (0.0, 0.0, 0.0)
    test 83 rotate: (0.26268, 0.26268, 0.37143)
    test 84 crosserrors: True
    test 85 0: divisor (0): float division by zero
    test 86 intersections2: (500.0, 0.0, 0.0)
    test 87 nearestOn: (0.0, 0.0, 0.0)
    test 88 nearestOn: True
    test 89 nearestOn: (100.0, 100.0, 100.0)
    test 90 nearestOn: True
    test 91 iscolinearWith: False
    test 92 iscolinearWith: True
    test 93 nearestOn: (0.0, 0.0, 0.0)
    test 94 nearestOn: True
    test 95 nearestOn: (100.0, 100.0, 100.0)
    test 96 nearestOn: True
    test 97 iscolinearWith: False
    test 98 iscolinearWith: True

    testVectorial(pygeodesy.sphericalNvector, 23.04.11)
    test 99 crossTrackDistanceTo: -305.67
    test 100 crossTrackDistanceTo: -307.55

    test 101 toLatLon: 44.995674°N, 045.0°E
    test 102 toNvector: (0.50004, 0.50004, 0.70705)
    test 103 isequalTo: False
    test 104 isequalTo: True
    test 105 length: 0.99992449715
    test 106 euclid: 0.99995577
    test 107 length: 1.00
    test 108 euclid: 1.0000
    test 109 meanOf: 44.995674°N, 045.0°E
    test 110 meanOf: LatLon
    test 111 apply: (0.5, 0.5, 0.707)
    test 112 init: (0.5, 0.5, 0.707)
    test 113 i***: (0.5, 0.5, 0.707)
    test 114 abs: 0.99992449715
    test 115 sumOf: (52.70504, 0.61904, 0.70705)
    test 116 sumOf: Nv
    test 117 sumOf: sumOf
    test 118 length: 52.7134151513
    test 119 sizeof: 120  FAILED, KNOWN, expected 72
    test 120 copy: True
    test 121 length: 52.2051356286
    test 122 length: 52.2051356286
    test 123 sizeof: 120

    test 124 toCartesian: [3185744.919, 3185744.919, 4504643.315]
    test 125 toLatLon: 44.995674°N, 045.0°E
    test 126 toNvector: (0.50004, 0.50004, 0.70705, -0.00)

    test 127 intersection: 02.499372°N, 002.5°E
    test 128 isenclosedBy: True
    test 129 isenclosedBy*: True
    test 130 isenclosedBy: True
    test 131 isenclosedBy*: True

    test 132 iswithin: False
    test 133 iswithin: True

    test 134 nearestOn: 51.0°N, 001.0°E
    test 135 nearestOn: 50.987°N, 000.298°W
    test 136 nearestOn: 51.0°N, 002.0°E
    test 137 nearestOn: 50.995°N, 002.655°E
    test 138 nearestOn: 51.0°N, 001.9°E
    test 139 nearestOn: True
    test 140 distanceTo: 42.712
    test 141 nearestOn: 51.0°N, 002.0°E
    test 142 nearestOn: True
    test 143 nearestOn: 00.0°N, 000.0°E
    test 144 nearestOn: True
    test 145 nearestOn: 00.0°N, 020.0°E
    test 146 nearestOn: True
    test 147 nearestOn: 02.0°N, 002.0°E
    test 148 nearestOn: 02.0°N, 002.0°E

    test 149 neareston6: (LatLon(45°00′00.0″N, 001°00′00.0″E), 4773243.784965, 0.0, 1, LatLon(45°00′00.0″N, 001°00′00.0″E), LatLon(45°00′00.0″N, 001°00′00.0″E))
    test 150 neareston6: (LatLon(45°30′03.93″N, 002°00′00.0″E), 38968.531578, 1.501091, 2, LatLon(45°00′00.0″N, 002°00′00.0″E), LatLon(46°00′00.0″N, 002°00′00.0″E))

    test 151 BasseC: 47.3038°N, 002.5721°W
    test 152 BasseH: 47.311067°N, 002.528617°W
    test 153 triangulate: 47.323667°N, 002.568501°W
    test 154 triangulate: True

    test 155 trilaterate: 37.419078°N, 121.960579°W
    test 156 trilaterate: True
    test 157 trilaterate: 08.068912°S, 034.888699°W
    test 158 trilaterate: True
    test 159 trilaterate: 08.068912°S, 034.888695°W  FAILED, KNOWN, expected 08.068912°S, 034.888699°W
    test 160 trilaterate: True
    test 161 trilaterate: 42.67456065°N, 002.49539502°E
    test 162 trilaterate: distance1 (5110), distance2 (5110), distance3 (5110), point1 (LatLon(42°41′19.82″N, 002°26′19.89″E)), point2 (LatLon(42°38′07.52″N, 002°31′21.25″E)) or point3 (LatLon(42°38′43.44″N, 002°30′17.32″E)): no intersection (useZ=False, z=-8.13526e-05)

    testNvector(pygeodesy.sphericalNvector, 23.04.11)
    test 163 sumOf: Nvector
    test 164 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 165 ecef.lat, .lon: 44.995674, 45.0
    test 166 ecef.height: -0.0
    test 167 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 168 .isEllipsoidal: False
    test 169 .isSpherical: True
    test 170 .latlon: (44.995674, 45.0)
    test 171 .philam: (0.785323, 0.785398)
    test 172 .latlonheight: (44.995674, 45.0, 0.0)
    test 173 .philamheight: (0.785323, 0.785398, 0.0)
    test 174 parse: (0.5, 0.5, 0.707)
    test 175 cmp: 0
    test 176 eq: True
    test 177 ge: True
    test 178 gt: False
    test 179 le: True
    test 180 lt: False
    test 181 ne: False
    test 182 *: (1.0, 1.0, 1.414)
    test 183 +: (1.0, 1.0, 1.414)
    test 184 /: (0.5, 0.5, 0.707)
    test 185 -: (0.5, 0.5, 0.707)
    test 186 @: (0.0, 0.0, 0.0)
    test 187 @: (0.0, 0.0, 0.0)
    test 188 rotate: (0.26268, 0.26268, 0.37143)
    test 189 crosserrors: True
    test 190 0: divisor (0): float division by zero
    test 191 intersections2: (500.0, 0.0, 0.0)
    test 192 nearestOn: (0.0, 0.0, 0.0)
    test 193 nearestOn: True
    test 194 nearestOn: (100.0, 100.0, 100.0)
    test 195 nearestOn: True
    test 196 iscolinearWith: False
    test 197 iscolinearWith: True
    test 198 nearestOn: (0.0, 0.0, 0.0)
    test 199 nearestOn: True
    test 200 nearestOn: (100.0, 100.0, 100.0)
    test 201 nearestOn: True
    test 202 iscolinearWith: False
    test 203 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 23.03.19)
    test 204 sumOf: Vector4Tuple
    test 205 ecef.x, .y, .z: 3185744.91853, 3185744.91853, 4504643.3148
    test 206 ecef.lat, .lon: 44.995674, 45.0
    test 207 ecef.height: -0.0
    test 208 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 209 .isEllipsoidal: False
    test 210 .isSpherical: True
    test 211 .latlon: (44.995674, 45.0)
    test 212 .philam: (0.785323, 0.785398)
    test 213 .latlonheight: (44.995674, 45.0, 0.0)
    test 214 .philamheight: (0.785323, 0.785398, 0.0)
    test 215 parse: (0.5, 0.5, 0.707)
    test 216 cmp: 0
    test 217 eq: True
    test 218 ge: True
    test 219 gt: False
    test 220 le: True
    test 221 lt: False
    test 222 ne: False
    test 223 *: (1.0, 1.0, 1.414)
    test 224 +: (1.0, 1.0, 1.414)
    test 225 /: (0.5, 0.5, 0.707)
    test 226 -: (0.5, 0.5, 0.707)
    test 227 @: (0.0, 0.0, 0.0)
    test 228 @: (0.0, 0.0, 0.0)
    test 229 rotate: (0.26268, 0.26268, 0.37143)
    test 230 crosserrors: True
    test 231 0: divisor (0): float division by zero
    test 232 intersections2: (500.0, 0.0, 0.0)
    test 233 nearestOn: (0.0, 0.0, 0.0)
    test 234 nearestOn: True
    test 235 nearestOn: (100.0, 100.0, 100.0)
    test 236 nearestOn: True
    test 237 iscolinearWith: False
    test 238 iscolinearWith: True
    test 239 nearestOn: (0.0, 0.0, 0.0)
    test 240 nearestOn: True
    test 241 nearestOn: (100.0, 100.0, 100.0)
    test 242 nearestOn: True
    test 243 iscolinearWith: False
    test 244 iscolinearWith: True

    testNvectorBase(pygeodesy.nvectorBase, 23.03.19)
    test 245 sumOf: Vector4Tuple
    test 246 ecef.x, .y, .z: 3194659.54086, 3194659.54086, 4487008.4122
    test 247 ecef.lat, .lon: 44.995674, 45.0
    test 248 ecef.height: -0.0
    test 249 ecef.M: -0.707106781, -0.499962243, 0.500037754, 0.707106781, -0.499962243, 0.500037754, 0.0, 0.707160174, 0.707053385
    test 250 .isEllipsoidal: True
    test 251 .isSpherical: False
    test 252 .latlon: (44.995674, 45.0)
    test 253 .philam: (0.785323, 0.785398)
    test 254 .latlonheight: (44.995674, 45.0, 0.0)
    test 255 .philamheight: (0.785323, 0.785398, 0.0)
    test 256 parse: (0.5, 0.5, 0.707)
    test 257 cmp: 0
    test 258 eq: True
    test 259 ge: True
    test 260 gt: False
    test 261 le: True
    test 262 lt: False
    test 263 ne: False
    test 264 *: (1.0, 1.0, 1.414)
    test 265 +: (1.0, 1.0, 1.414)
    test 266 /: (0.5, 0.5, 0.707)
    test 267 -: (0.5, 0.5, 0.707)
    test 268 @: (0.0, 0.0, 0.0)
    test 269 @: (0.0, 0.0, 0.0)
    test 270 rotate: (0.26268, 0.26268, 0.37143)
    test 271 crosserrors: True
    test 272 0: divisor (0): float division by zero
    test 273 intersections2: (500.0, 0.0, 0.0)
    test 274 nearestOn: (0.0, 0.0, 0.0)
    test 275 nearestOn: True
    test 276 nearestOn: (100.0, 100.0, 100.0)
    test 277 nearestOn: True
    test 278 iscolinearWith: False
    test 279 iscolinearWith: True
    test 280 nearestOn: (0.0, 0.0, 0.0)
    test 281 nearestOn: True
    test 282 nearestOn: (100.0, 100.0, 100.0)
    test 283 nearestOn: True
    test 284 iscolinearWith: False
    test 285 iscolinearWith: True

    testCartesian(pygeodesy.sphericalNvector, 23.04.11)
    test 286 sphericalNvector.Cartesian.trilaterate3d2: 2
    test 287 sphericalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 288 sphericalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 289 pygeodesy.vector3d.trilaterate3d2: 2
    test 290 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 291 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 292 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 293 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 294 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 295 Cartesian.trilaterate3d2: 2
    test 296 sphericalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 297 sphericalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 298 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 299 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 300 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.sphericalTrigonometry, 23.04.11)
    test 301 sphericalTrigonometry.Cartesian.trilaterate3d2: 2
    test 302 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 303 sphericalTrigonometry.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 304 pygeodesy.vector3d.trilaterate3d2: 2
    test 305 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 306 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 307 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 308 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 309 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 310 Cartesian.trilaterate3d2: 2
    test 311 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 312 sphericalTrigonometry.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 313 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 314 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 315 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalNvector, 23.04.11)
    test 316 ellipsoidalNvector.Cartesian.trilaterate3d2: 2
    test 317 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 318 ellipsoidalNvector.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 319 pygeodesy.vector3d.trilaterate3d2: 2
    test 320 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 321 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 322 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 323 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 324 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 325 Cartesian.trilaterate3d2: 2
    test 326 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 327 ellipsoidalNvector.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 328 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 329 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 330 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalVincenty, 23.04.11)
    test 331 ellipsoidalVincenty.Cartesian.trilaterate3d2: 2
    test 332 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 333 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 334 pygeodesy.vector3d.trilaterate3d2: 2
    test 335 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 336 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 337 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 338 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 339 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 340 Cartesian.trilaterate3d2: 2
    test 341 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 342 ellipsoidalVincenty.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 343 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 344 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 345 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalKarney, 23.04.11)
    test 346 ellipsoidalKarney.Cartesian.trilaterate3d2: 2
    test 347 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 348 ellipsoidalKarney.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 349 pygeodesy.vector3d.trilaterate3d2: 2
    test 350 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 351 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 352 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 353 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 354 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 355 Cartesian.trilaterate3d2: 2
    test 356 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 357 ellipsoidalKarney.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 358 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 359 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 360 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesian(pygeodesy.ellipsoidalExact, 23.04.11)
    test 361 ellipsoidalExact.Cartesian.trilaterate3d2: 2
    test 362 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 363 ellipsoidalExact.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 364 pygeodesy.vector3d.trilaterate3d2: 2
    test 365 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 366 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 367 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 368 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 369 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 370 Cartesian.trilaterate3d2: 2
    test 371 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 372 ellipsoidalExact.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 373 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 374 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 375 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear
# lazily imported pygeodesy.ellipsoidalGeodSolve by testVectorial.py line 550

    testCartesian(pygeodesy.ellipsoidalGeodSolve, 23.04.11)
    test 376 ellipsoidalGeodSolve.Cartesian.trilaterate3d2: 2
    test 377 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 378 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 379 pygeodesy.vector3d.trilaterate3d2: 2
    test 380 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 381 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 382 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 383 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 384 pygeodesy.vector3d.trilaterate3d2: center1 (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 385 Cartesian.trilaterate3d2: 2
    test 386 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 387 ellipsoidalGeodSolve.Cartesian 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 388 Cartesian.trilaterate3d2: center (Cartesian(22.59, 0.524, 1.2)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 389 Cartesian.trilaterate3d2: center (Cartesian(27.297, -4.953, 1.47)), center2 (Cartesian(25.475, -6.124, 2.36)), center3 (Cartesian(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 390 Cartesian.trilaterate3d2: center (Cartesian(0.0, 0.0, 0.0)), center2 (Cartesian(0.0, 9.0, 0.0)), center3 (Cartesian(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testCartesianBase(pygeodesy.cartesianBase, 22.11.03)
    test 391 cartesianBase.CartesianBase.trilaterate3d2: 2
    test 392 cartesianBase.CartesianBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 393 cartesianBase.CartesianBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 394 pygeodesy.vector3d.trilaterate3d2: 2
    test 395 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 396 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 397 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 398 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 399 pygeodesy.vector3d.trilaterate3d2: center1 (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 400 CartesianBase.trilaterate3d2: 2
    test 401 cartesianBase.CartesianBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 402 cartesianBase.CartesianBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 403 CartesianBase.trilaterate3d2: center (CartesianBase(22.59, 0.524, 1.2)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 404 CartesianBase.trilaterate3d2: center (CartesianBase(27.297, -4.953, 1.47)), center2 (CartesianBase(25.475, -6.124, 2.36)), center3 (CartesianBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 405 CartesianBase.trilaterate3d2: center (CartesianBase(0.0, 0.0, 0.0)), center2 (CartesianBase(0.0, 9.0, 0.0)), center3 (CartesianBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testNvectorBase(pygeodesy.nvectorBase, 23.03.19)
    test 406 nvectorBase.NvectorBase.trilaterate3d2: 2
    test 407 nvectorBase.NvectorBase 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 408 nvectorBase.NvectorBase 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 409 pygeodesy.vector3d.trilaterate3d2: 2
    test 410 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 411 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 412 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 413 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 414 pygeodesy.vector3d.trilaterate3d2: center1 (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 415 NvectorBase.trilaterate3d2: 2
    test 416 nvectorBase.NvectorBase 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 417 nvectorBase.NvectorBase 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 418 NvectorBase.trilaterate3d2: center (NvectorBase(22.59, 0.524, 1.2)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 419 NvectorBase.trilaterate3d2: center (NvectorBase(27.297, -4.953, 1.47)), center2 (NvectorBase(25.475, -6.124, 2.36)), center3 (NvectorBase(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 420 NvectorBase.trilaterate3d2: center (NvectorBase(0.0, 0.0, 0.0)), center2 (NvectorBase(0.0, 9.0, 0.0)), center3 (NvectorBase(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testVector3d(pygeodesy.vector2d, 22.10.12)
    test 421 vector3d.Vector3d.trilaterate3d2: 2
    test 422 vector3d.Vector3d 'trilaterate3d2': 119.8958, 130.6508, -5.1451
    test 423 vector3d.Vector3d 'trilaterate3d2': 119.9999, 129.9999, 30.0019
    test 424 pygeodesy.vector3d.trilaterate3d2: 2
    test 425 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 426 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 427 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (3.851), radius2 (3.875) or radius3 (3.514): center1 and center3 near-concentric
    test 428 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius1 (0.3851), radius2 (0.3875) or radius3 (3.514): center1 and center2 too distant (2.34)
    test 429 pygeodesy.vector3d.trilaterate3d2: center1 (Vector3d(0.0, 0.0, 0.0)), center2 (Vector3d(0.0, 9.0, 0.0)), center3 (Vector3d(0.0, -9.0, 0.0)), radius1 (10), radius2 (10) or radius3 (10): colinear
    test 430 Vector3d.trilaterate3d2: 2
    test 431 vector3d.Vector3d 'trilaterate3d2': 24.31229, -2.52045, 1.53649
    test 432 vector3d.Vector3d 'trilaterate3d2': 24.35062, -2.48109, 1.66673
    test 433 Vector3d.trilaterate3d2: center (Vector3d(22.59, 0.524, 1.2)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (3.851), radius2 (3.875) or radius3 (3.514): center and center3 near-concentric
    test 434 Vector3d.trilaterate3d2: center (Vector3d(27.297, -4.953, 1.47)), center2 (Vector3d(25.475, -6.124, 2.36)), center3 (Vector3d(22.59, 0.524, 1.2)), radius (0.3851), radius2 (0.3875) or radius3 (3.514): center and center2 too distant (2.34)
    test 435 Vector3d.trilaterate3d2: center (Vector3d(0.0, 0.0, 0.0)), center2 (Vector3d(0.0, 9.0, 0.0)), center3 (Vector3d(0.0, -9.0, 0.0)), radius (10), radius2 (10) or radius3 (10): colinear

    testTrilaterate2d2(pygeodesy.vector2d, 22.10.12)
    test 436 trilaterate2d2: (2.0, 3.0)
    test 437 trilaterate2d2: delta (6.39335377017e-06), radius1 (1.0), distance (1.00000639335) and trilaterate2d2(x=1.999994, y=3.000006): exceeds eps (2.22045e-16)
    test 438 trilaterate2d2: (-500.0, 250.0)
    test 439 meeus2: 2.236, 3.0, 2.0, 0.0
    test 440 meeus2: (3.0, 2.0, 0)
    test 441 circum3: 2.2361
    test 442 circum3: (3.0, 2.0, 0)
    test 443 circum3: None
    test 444 circum4_: 2.2361
    test 445 circum4_: (3.0, 2.0, 0.0)  FAILED, KNOWN, expected (3.0, 2.0, 0)
    test 446 circum4_: 3
    test 447 circum4_: ()
    test 448 radii11: Radii11Tuple(rA=2.236068, rB=0.92621, rC=2.236068, cR=2.236068, rIn=0.92621, riS=0.24193, roS=INF, a=3.162278, b=4.472136, c=3.162278, s=5.398346)
    test 449 circin6: Circin6Tuple(radius=0.92621, center=Vector3d(2.58579, 2.82843, 0.0), deltas=None, cA=Vector3d(2.87868, 3.70711, 0.0), cB=Vector3d(3.0, 2.0, 0.0), cC=Vector3d(1.70711, 3.12132, 0.0))
    test 450 soddy4: Soddy4Tuple(radius=0.24193, center=Vector3d(2.52241, 2.95518, 0), deltas=None, outer=INF)

    testTrilaterate3d2(pygeodesy.vector2d, 22.10.12)
    test 451 pygeodesy.vector2d.trilaterate3d2: center1 (Vector3d(-500.0, -200.0, 0.0)), center2 (Vector3d(100.0, -100.0, 0.0)), center3 (Vector3d(500.0, 100.0, 0.0)), radius1 (450.0), radius2 (694.6221994724903) or radius3 (1011.1874208078342): no intersection
    test 452 pygeodesy.vector2d.trilaterate3d2: 2
    test 453 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, -0.01311  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 454 vector3d.Vector3d 'trilaterate3d2': -500.0, 250.0, 0.01311  FAILED, KNOWN, expected -500.0, 250.0, 0.0
    test 455 meeus2: 1.50
    test 456 meeus2: None
    test 457 meeus2: -0.000000034, 0.5, 0.000000034  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 458 meeus2: 0.000000034, 0.5, -0.000000034  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 459 circum3: 1.50
    test 460 circum3: 0.0, 0.5, -0.0  FAILED, KNOWN, expected 0.0, 0.5, 0.0
    test 461 circum3: None
    test 462 circum4_: 1.50
    test 463 circum4_: 0.0, 0.5, 0.0
    test 464 circum4_: 3
    test 465 circum4_: ()
    test 466 radii11: Radii11Tuple(rA=1.414214, rB=1.035276, rC=1.414214, cR=1.5, rIn=0.732051, riS=0.195611, roS=INF, a=2.44949, b=2.828427, c=2.44949, s=3.863703)
    test 467 circin6: Circin6Tuple(radius=0.732051, center=Vector3d(-0.0, 0.73205, -0.0), deltas=None, cA=Vector3d(0.42265, 1.1547, 0.42265), cB=Vector3d(0.0, 0.0, 0.0), cC=Vector3d(-0.42265, 1.1547, -0.42265))
    test 468 soddy4: Soddy4Tuple(radius=0.195611, center=Vector3d(0.0, 0.76911, -0.0), deltas=None, outer=INF)

    testIntersection3d3(pygeodesy.vector3d, 23.04.10)
    test 469 (30, 17): (Vector3d(30.30584, 16.75258, 0.0), 0, 0)
    test 470 (-1,  3): (Vector3d(-1.0429, 2.92225, 0.0), -1, -2)
    test 471 (65, 32): (Vector3d(64.86667, 32.0, 0.0), 1, -2)
    test 472 (-2, 17): <class 'pygeodesy.errors.IntersectionError'>
    test 473 (49, 25): (Vector3d(49.0, 25.0, 0.0), 0, 0)

    test 474 at 0: (0.0, 50.0, 0.0)
    test 475 at 3: (2.6168, 49.93148, 0.0)
    test 476 at 6: (5.22642, 49.72609, 0.0)
    test 477 at 9: (7.82172, 49.38442, 0.0)
    test 478 at 12: (10.39558, 48.90738, 0.0)
    test 479 at 15: (12.94095, 48.29629, 0.0)
    test 480 at 18: (15.45085, 47.55283, 0.0)
    test 481 at 21: (17.9184, 46.67902, 0.0)
    test 482 at 24: (20.33683, 45.67727, 0.0)
    test 483 at 27: (22.69952, 44.55033, 0.0)
    test 484 at 30: (25.0, 43.30127, 0.0)
    test 485 at 33: (27.23195, 41.93353, 0.0)
    test 486 at 36: (29.38926, 40.45085, 0.0)
    test 487 at 39: (31.46602, 38.8573, 0.0)
    test 488 at 42: (33.45653, 37.15724, 0.0)
    test 489 at 45: (35.35534, 35.35534, 0.0)
    test 490 at 48: (37.15724, 33.45653, 0.0)
    test 491 at 51: (38.8573, 31.46602, 0.0)
    test 492 at 54: (40.45085, 29.38926, 0.0)
    test 493 at 57: (41.93353, 27.23195, 0.0)
    test 494 at 60: (43.30127, 25.0, 0.0)
    test 495 at 63: (44.55033, 22.69952, 0.0)
    test 496 at 66: (45.67727, 20.33683, 0.0)
    test 497 at 69: (46.67902, 17.9184, 0.0)
    test 498 at 72: (47.55283, 15.45085, 0.0)
    test 499 at 75: (48.29629, 12.94095, 0.0)
    test 500 at 78: (48.90738, 10.39558, 0.0)
    test 501 at 81: (49.38442, 7.82172, 0.0)
    test 502 at 84: (49.72609, 5.22642, 0.0)
    test 503 at 87: (49.93148, 2.6168, 0.0)
    test 504 at 90: (50.0, 0.0, 0.0)
    test 505 at 93: (49.93148, -2.6168, 0.0)
    test 506 at 96: (49.72609, -5.22642, 0.0)
    test 507 at 99: (49.38442, -7.82172, 0.0)
    test 508 at 102: (48.90738, -10.39558, 0.0)
    test 509 at 105: (48.29629, -12.94095, 0.0)
    test 510 at 108: (47.55283, -15.45085, 0.0)
    test 511 at 111: (46.67902, -17.9184, 0.0)
    test 512 at 114: (45.67727, -20.33683, 0.0)
    test 513 at 117: (44.55033, -22.69952, 0.0)
    test 514 at 120: (43.30127, -25.0, 0.0)
    test 515 at 123: (41.93353, -27.23195, 0.0)
    test 516 at 126: (40.45085, -29.38926, 0.0)
    test 517 at 129: (38.8573, -31.46602, 0.0)
    test 518 at 132: (37.15724, -33.45653, 0.0)
    test 519 at 135: (35.35534, -35.35534, 0.0)
    test 520 at 138: (33.45653, -37.15724, 0.0)
    test 521 at 141: (31.46602, -38.8573, 0.0)
    test 522 at 144: (29.38926, -40.45085, 0.0)
    test 523 at 147: (27.23195, -41.93353, 0.0)
    test 524 at 150: (25.0, -43.30127, 0.0)
    test 525 at 153: (22.69952, -44.55033, 0.0)
    test 526 at 156: (20.33683, -45.67727, 0.0)
    test 527 at 159: (17.9184, -46.67902, 0.0)
    test 528 at 162: (15.45085, -47.55283, 0.0)
    test 529 at 165: (12.94095, -48.29629, 0.0)
    test 530 at 168: (10.39558, -48.90738, 0.0)
    test 531 at 171: (7.82172, -49.38442, 0.0)
    test 532 at 174: (5.22642, -49.72609, 0.0)
    test 533 at 177: (2.6168, -49.93148, 0.0)
    test 534 at 180: (0.0, -50.0, 0.0)
    test 535 at 183: (-2.6168, -49.93148, 0.0)
    test 536 at 186: (-5.22642, -49.72609, 0.0)
    test 537 at 189: (-7.82172, -49.38442, 0.0)
    test 538 at 192: (-10.39558, -48.90738, 0.0)
    test 539 at 195: (-12.94095, -48.29629, 0.0)
    test 540 at 198: (-15.45085, -47.55283, 0.0)
    test 541 at 201: (-17.9184, -46.67902, 0.0)
    test 542 at 204: (-20.33683, -45.67727, 0.0)
    test 543 at 207: (-22.69952, -44.55033, 0.0)
    test 544 at 210: (-25.0, -43.30127, 0.0)
    test 545 at 213: (-27.23195, -41.93353, 0.0)
    test 546 at 216: (-29.38926, -40.45085, 0.0)
    test 547 at 219: (-31.46602, -38.8573, 0.0)
    test 548 at 222: (-33.45653, -37.15724, 0.0)
    test 549 at 225: (-35.35534, -35.35534, 0.0)
    test 550 at 228: (-37.15724, -33.45653, 0.0)
    test 551 at 231: (-38.8573, -31.46602, 0.0)
    test 552 at 234: (-40.45085, -29.38926, 0.0)
    test 553 at 237: (-41.93353, -27.23195, 0.0)
    test 554 at 240: (-43.30127, -25.0, 0.0)
    test 555 at 243: (-44.55033, -22.69952, 0.0)
    test 556 at 246: (-45.67727, -20.33683, 0.0)
    test 557 at 249: (-46.67902, -17.9184, 0.0)
    test 558 at 252: (-47.55283, -15.45085, 0.0)
    test 559 at 255: (-48.29629, -12.94095, 0.0)
    test 560 at 258: (-48.90738, -10.39558, 0.0)
    test 561 at 261: (-49.38442, -7.82172, 0.0)
    test 562 at 264: (-49.72609, -5.22642, 0.0)
    test 563 at 267: (-49.93148, -2.6168, 0.0)
    test 564 at 270: (-50.0, 0.0, 0.0)
    test 565 at 273: (-49.93148, 2.6168, 0.0)
    test 566 at 276: (-49.72609, 5.22642, 0.0)
    test 567 at 279: (-49.38442, 7.82172, 0.0)
    test 568 at 282: (-48.90738, 10.39558, 0.0)
    test 569 at 285: (-48.29629, 12.94095, 0.0)
    test 570 at 288: (-47.55283, 15.45085, 0.0)
    test 571 at 291: (-46.67902, 17.9184, 0.0)
    test 572 at 294: (-45.67727, 20.33683, 0.0)
    test 573 at 297: (-44.55033, 22.69952, 0.0)
    test 574 at 300: (-43.30127, 25.0, 0.0)
    test 575 at 303: (-41.93353, 27.23195, 0.0)
    test 576 at 306: (-40.45085, 29.38926, 0.0)
    test 577 at 309: (-38.8573, 31.46602, 0.0)
    test 578 at 312: (-37.15724, 33.45653, 0.0)
    test 579 at 315: (-35.35534, 35.35534, 0.0)
    test 580 at 318: (-33.45653, 37.15724, 0.0)
    test 581 at 321: (-31.46602, 38.8573, 0.0)
    test 582 at 324: (-29.38926, 40.45085, 0.0)
    test 583 at 327: (-27.23195, 41.93353, 0.0)
    test 584 at 330: (-25.0, 43.30127, 0.0)
    test 585 at 333: (-22.69952, 44.55033, 0.0)
    test 586 at 336: (-20.33683, 45.67727, 0.0)
    test 587 at 339: (-17.9184, 46.67902, 0.0)
    test 588 at 342: (-15.45085, 47.55283, 0.0)
    test 589 at 345: (-12.94095, 48.29629, 0.0)
    test 590 at 348: (-10.39558, 48.90738, 0.0)
    test 591 at 351: (-7.82172, 49.38442, 0.0)
    test 592 at 354: (-5.22642, 49.72609, 0.0)
    test 593 at 357: (-2.6168, 49.93148, 0.0)
    test 594 at 360: (0.0, 50.0, 0.0)
    test 595 max error: 2.3317285650e-13

    12 of 595 testVectorial.py tests (2.0%) FAILED, incl. 10 KNOWN plus 2 DeprecationWarnings (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 125.594 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testWebMercator.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.F_D from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.F_DMS from .dms by testWebMercator.py line 12
# lazily imported pygeodesy.R_M from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.R_MA from .constants by testWebMercator.py line 12
# lazily imported pygeodesy.Datums from .datums by testWebMercator.py line 12
# lazily imported pygeodesy.LatLon_ from .points by testWebMercator.py line 12
# lazily imported pygeodesy.fstr from .streprs by testWebMercator.py line 12
# lazily imported pygeodesy.toWm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.Wm from .webmercator by testWebMercator.py line 12
# lazily imported pygeodesy.ellipsoidalVincenty by testWebMercator.py line 145
# lazily imported pygeodesy.sphericalTrigonometry by testWebMercator.py line 145

    testing testWebMercator.py 23.03.27 (module pygeodesy.webmercator 22.09.12) isLazy=3
    test 1 toWm1: -626172.13571216 6887893.4928338
    test 2 Wm1.y: 6887893.49283380
    test 3 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 4 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 5 Wm2: 448251.795 5411932.678
    test 6 Wm2: 448252 5411933
    test 7 Wm2: 448251.8 5411932.7
    test 8 copy(Wm): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 9 Wm.copy(): (<class 'pygeodesy.webmercator.Wm'>, True)
    test 10 Wm2.to2ll: 43.65321741, 4.02671439
    test 11 Wm2.toLatLon: 43.653217°N, 004.026714°E
    test 12 Wm2.toLatLon: 43°39′11.58″N, 004°01′36.17″E
    test 13 toWm1: 448251.795 5411932.678
    test 14 toWm2: 448252 5411933
    test 15 toWm3: [x:448252, y:5411933, radius:6378137]
    test 16 copy: 448251.795 5411932.678
    test 17 parse: 448251.795 5411932.678
    test 18 parse: 448251.795 5411932.678
    test 19 parse: [x:448251.795, y:5411932.678, radius:6378137.0]
    test 20 toWm4: 11562388 1506899
    test 21 toWm4: 11562388.154378 1506899.04498
    test 22 toWm4E: 11562388 1496994
    test 23 toWm4E: 11562388.154378 1496993.698095
    test 24 toWm5: -11169056 2800000
    test 25 toWm5: -11169055.576258 2800000.003136
    test 26 toWm5E: -11169056 2782367
    test 27 toWm5E: -11169055.576258 2782367.05923
    test 28 Wm6.toLatLon: 24.46358°N, 100.333333°W
    test 29 Wm6.toLatLon: 24°27′48.89″N, 100°20′00.0″W
    test 30 Wm6.toLatLonE: 24.299812°N, 100.333333°W
    test 31 Wm6.toLatLonE: 24°17′59.32″N, 100°20′00.0″W
    test 32 Wm7.toLatLon: 24.381787°N, 100.333333°W
    test 33 Wm7.toLatLon: 24°22′54.43″N, 100°20′00.0″W
    test 34 Wm7.toLatLonE: 24.218566°N, 100.333333°W
    test 35 Wm7.toLatLonE: 24°13′06.84″N, 100°20′00.0″W
    test 36 Wm8.toWm: -33878.893, 6693890.382, 6378137.0
    test 37 Wm8.toWm: [x:-33878.893, y:6693890.382]
    test 38 Wm8.toWm: -33878.893 6693890.382 6371008.771
    test 39 Wm8.toWm.x: -33878.893
    test 40 Wm8.toWm.y: 6693890.382
    test 41 Wm8.toWm.latlon: 51.408596, -0.304339
    test 42 Wm8.toWm.philam: 0.897249, -0.005312
    test 43 Wm8.toLatLon: 51.408596053784°N, 000.304339270785°W
    test 44 Wm8.toLatLon: 51°24′30.945794″N, 000°18′15.621375″W
    test 45 Wm9.toLatLon: TypeError
    test 46 Wm9.toLatLon: TypeError
    test 47 Wm9.toLatLon: TypeError
    test 48 Wm9.toLatLon: TypeError
    test 49 Wm9.toLatLon: TypeError
    test 50 toWm(LatLon(10.0000, 0)).y: 1118889.97
    test 51 toWm(LatLon(20.0000, 0)).y: 2273030.93
    test 52 toWm(LatLon(30.0000, 0)).y: 3503549.84
    test 53 toWm(LatLon(40.0000, 0)).y: 4865942.28
    test 54 toWm(LatLon(50.0000, 0)).y: 6446275.84
    test 55 toWm(LatLon(60.0000, 0)).y: 8399737.89
    test 56 toWm(LatLon(10.0003, 0)).y: 1118921.37
    test 57 toWm(LatLon(20.0003, 0)).y: 2273063.83
    test 58 toWm(LatLon(30.0003, 0)).y: 3503585.55
    test 59 toWm(LatLon(40.0003, 0)).y: 4865982.65
    test 60 toWm(LatLon(50.0003, 0)).y: 6446323.95
    test 61 toWm(LatLon(60.0003, 0)).y: 8399799.73
    test 62 toWm(LatLonE(10.0000, 0)).y: 1111475.10
    test 63 toWm(LatLonE(20.0000, 0)).y: 2258423.65
    test 64 toWm(LatLonE(30.0000, 0)).y: 3482189.09
    test 65 toWm(LatLonE(40.0000, 0)).y: 4838471.40
    test 66 toWm(LatLonE(50.0000, 0)).y: 6413524.59
    test 67 toWm(LatLonE(60.0000, 0)).y: 8362698.55
    test 68 toWm(LatLonE(10.0003, 0)).y: 1111506.30
    test 69 toWm(LatLonE(20.0003, 0)).y: 2258456.36
    test 70 toWm(LatLonE(30.0003, 0)).y: 3482224.61
    test 71 toWm(LatLonE(40.0003, 0)).y: 4838511.61
    test 72 toWm(LatLonE(50.0003, 0)).y: 6413572.57
    test 73 toWm(LatLonE(60.0003, 0)).y: 8362760.29

    all 73 testWebMercator.py tests passed (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 2.062 ms

running /usr/local/bin/p....n3.10 -W default ~/PyGeodesy/test/testWgrs.py
# lazily imported pygeodesy.anstr from .streprs by bases.py line 36
# lazily imported pygeodesy.clips from .basics by bases.py line 36
# lazily imported pygeodesy.DeprecationWarnings from .props by bases.py line 36
# lazily imported pygeodesy.isint from .basics by bases.py line 36
# lazily imported pygeodesy.isLazy from .lazily by bases.py line 36
# lazily imported pygeodesy.issubclassof from .basics by bases.py line 36
# lazily imported pygeodesy.iterNumpy2over from .iters by bases.py line 36
# lazily imported pygeodesy.map2 from .basics by bases.py line 36
# lazily imported pygeodesy.NN from .interns by bases.py line 36
# lazily imported pygeodesy.normDMS from .dms by bases.py line 36
# lazily imported pygeodesy.pairs from .streprs by bases.py line 36
# lazily imported pygeodesy.printf from .lazily by bases.py line 36
# lazily imported pygeodesy.property_RO from .props by bases.py line 36
# lazily imported pygeodesy.degDMS from .dms by testWgrs.py line 11
# lazily imported pygeodesy.fstr from .streprs by testWgrs.py line 11
# lazily imported pygeodesy.Georef from .wgrs by testWgrs.py line 11
# lazily imported pygeodesy.S_DEG from .dms by testWgrs.py line 11
# lazily imported pygeodesy.S_MIN from .dms by testWgrs.py line 11
# lazily imported pygeodesy.ellipsoidalVincenty by testWgrs.py line 96

    testing testWgrs.py 23.03.27 (module pygeodesy.wgrs 22.09.24) isLazy=3
    test 1 Georef: 'NKLN2444638946'
    test 2 Georef: Georef('NKLN2444638946')
    test 3 Georef: NKLN2444638946
    test 4 Georef.latlon: 57.64911, 10.40744
    test 5 Georef.toLatLon: LatLon(57°38′56.8″N, 010°24′26.78″E)
    test 6 codec3: NKLN2444638946
    test 7 decode3: 57.64911, 10.40744, 6.0
    test 8 encode: NKLN2444638946
    test 9 Georef: 'NKLN2444638946H0'
    test 10 Georef: Georef('NKLN2444638946H0')
    test 11 Georef: NKLN2444638946H0
    test 12 Georef.latlon: 57.64911, 10.40744
    test 13 Georef.precision: 6
    test 14 Georef.radius: None
    test 15 Georef: 'GJPJ3424917166'
    test 16 Georef: Georef('GJPJ3424917166')
    test 17 Georef: GJPJ3424917166
    test 18 Georef.latlon: 38.286108, -76.42917
    test 19 Georef.toLatLon: LatLon(38°17′09.99″N, 076°25′45.01″W)
    test 20 codec3: GJPJ3424917166
    test 21 decode3: 38.286108, -76.429175, 6.0
    test 22 encode: GJPJ3424917166
    test 23 Georef: 'GJPJ3424917166H0'
    test 24 Georef: Georef('GJPJ3424917166H0')
    test 25 Georef: GJPJ3424917166H0
    test 26 Georef.latlon: 38.286108, -76.42917
    test 27 Georef.precision: 6
    test 28 Georef.radius: None
    test 29 Georef.3Tuple: 38.286108, -76.42917, 0.0
    test 30 codec3: MKPG1204
    test 31 decode3: 51.075, -1.7917, 3.0
    test 32 encode: MKPG1204
    test 33 codec3: WJKG1503
    test 34 decode3: 36.0583, 129.2583, 3.0
    test 35 encode: WJKG1503
    test 36 codec5: GJPJ4103R5
    test 37 decode5: 38.0583, -76.3083, 3.0, None, 9260.0
    test 38 encode: GJPJ4103R5
    test 39 codec5: GJPJ4103H17
    test 40 decode5: 38.0583, -76.3083, 3.0, 5181.6, None
    test 41 encode: GJPJ4103H17
    test 42 codec5: GJPJ4103R5H17
    test 43 decode5: 38.0583, -76.3083, 3.0, 5181.6, 9260.0
    test 44 encode: GJPJ4103R5H17
    test 45 precision: -1  FAILED, KNOWN, expected 0
    test 46 resolution: 15°
    test 47 precision: 0
    test 48 resolution: 15°
    test 49 precision: 1
    test 50 resolution: 1°
    test 51 precision: 2
    test 52 resolution: 0.1′
    test 53 precision: 3
    test 54 resolution: 0.01′
    test 55 precision: 4
    test 56 resolution: 0.001′
    test 57 precision: 5
    test 58 resolution: 0.0001′
    test 59 precision: 6
    test 60 resolution: 0.00001′
    test 61 precision: 7
    test 62 resolution: 0.000001′
    test 63 precision: 8
    test 64 resolution: 0.0000001′
    test 65 precision: 9
    test 66 resolution: 0.00000001′
    test 67 precision: 10
    test 68 resolution: 0.000000001′
    test 69 precision: 11
    test 70 resolution: 0.0000000001′
    test 71 precision: 12  FAILED, KNOWN, expected 11
    test 72 resolution: 0.0000000001′

    2 of 72 testWgrs.py tests (2.8%) FAILED, ALL KNOWN (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W  default) 1.775 ms

test/run.py /usr/local/bin/p....n3.10 -W default: all 38674 tests OK (PyGeodesy 23.4.12 Python 3.10.8 64bit arm64 coverage 7.2.2 numpy 1.23.3 scipy 1.9.1 geographiclib 2.0 Math _K_2_0 GeoConvert 1.51 GeodSolve 1.51 RhumbSolve 1.51 macOS 13.2.1 isLazy 3 -W default) 3:48.990 (168.889 tps)
